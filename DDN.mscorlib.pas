// mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//-----------------------------------------------------------//
//                                                           //
//     DDN.mscorlib                                 
//     Delphi .NET Import                                    //
//     Author: ying32                                        //
//     .NET Framework: .NET 4.0                              //
//                                                           //
//-----------------------------------------------------------//

unit DDN.mscorlib;

interface

uses
  DDN.Runtime;

type

  { types } 

  SByte = ShortInt;

type

{ enums }

  //-------------namespace: Microsoft.Win32----------------
  /// <summary>
  ///   表示外部计算机上的顶级节点的可能值。
  /// </summary>
  [DNTypeName('Microsoft.Win32.RegistryHive')]
  DNRegistryHive = type Integer;
  DNRegistryHiveHelper = record helper for DNRegistryHive
  public const
    /// <summary>
    ///   表示在另一台计算机上的 hkey_classes_root。 基键。
    ///               此值可以传递给方法，以远程打开此节点。
    /// </summary>
    ClassesRoot = -2147483648;
    /// <summary>
    ///   表示在另一台计算机上的 HKEY_CURRENT_USER 基键。
    ///               此值可以传递给方法，以远程打开此节点。
    /// </summary>
    CurrentUser = -2147483647;
    /// <summary>
    ///   表示在另一台计算机上的 HKEY_LOCAL_MACHINE 基键。
    ///               此值可以传递给方法，以远程打开此节点。
    /// </summary>
    LocalMachine = -2147483646;
    /// <summary>
    ///   表示在另一台计算机上的 HKEY_USERS 基键。
    ///               此值可以传递给方法，以远程打开此节点。
    /// </summary>
    Users = -2147483645;
    /// <summary>
    ///   表示 HKEY_PERFORMANCE_DATA 基键在另一台计算机上。
    ///               此值可以传递给方法，以远程打开此节点。
    /// </summary>
    PerformanceData = -2147483644;
    /// <summary>
    ///   表示在另一台计算机上的 HKEY_CURRENT_CONFIG 基键。
    ///               此值可以传递给方法，以远程打开此节点。
    /// </summary>
    CurrentConfig = -2147483643;
    /// <summary>
    ///   表示在另一台计算机上的 HKEY_DYN_DATA 基键。
    ///               此值可以传递给方法，以远程打开此节点。
    /// </summary>
    DynData = -2147483642;
  end;


  //-------------namespace: Microsoft.Win32----------------
  /// <summary>
  ///   指定在打开注册表项时，会执行安全检查，并访问其名称/值对。
  /// </summary>
  [DNTypeName('Microsoft.Win32.RegistryKeyPermissionCheck')]
  DNRegistryKeyPermissionCheck = type Integer;
  DNRegistryKeyPermissionCheckHelper = record helper for DNRegistryKeyPermissionCheck
  public const
    /// <summary>
    ///   注册表项继承其父的模式。
    ///               执行安全检查时尝试访问子项或值，除非使用打开父  或  模式。
    /// </summary>
    Default_ = 0;
    /// <summary>
    ///   当访问子项或值时，不执行安全检查。
    ///               在尝试打开当前密钥，除非父通过打开时执行安全检查  或 。
    /// </summary>
    ReadSubTree = 1;
    /// <summary>
    ///   当访问子项或值时，不执行安全检查。
    ///               在尝试打开当前密钥，除非父通过打开时执行安全检查 。
    /// </summary>
    ReadWriteSubTree = 2;
  end;


  //-------------namespace: Microsoft.Win32----------------
  /// <summary>
  ///   指定创建注册表项时要使用的选项。
  /// </summary>
  [DNTypeName('Microsoft.Win32.RegistryOptions')]
  DNRegistryOptions = type Integer;
  DNRegistryOptionsHelper = record helper for DNRegistryOptions
  public const
    /// <summary>
    ///   一个非易失性的键。
    ///               这是默认设置。
    /// </summary>
    None = 0;
    /// <summary>
    ///   易失性的键。
    ///               信息存储在内存中，将不保留，卸载程序的相应的注册表配置单元时。
    /// </summary>
    Volatile = 1;
  end;


  //-------------namespace: Microsoft.Win32----------------
  /// <summary>
  ///   指定要在注册表中，存储值时使用的数据类型或标识注册表中的值的数据类型。
  /// </summary>
  [DNTypeName('Microsoft.Win32.RegistryValueKind')]
  DNRegistryValueKind = type Integer;
  DNRegistryValueKindHelper = record helper for DNRegistryValueKind
  public const
    /// <summary>
    ///   不支持的注册表数据类型。
    ///               例如，Microsoft Win32 API 注册表数据类型 REG_RESOURCE_LIST 不受支持。
    ///               使用此值来指定方法应确定相应的注册表数据类型存储的名称/值对时。
    /// </summary>
    Unknown = 0;
    /// <summary>
    ///   以 null 结尾的字符串。
    ///               此值相当于 Win32 API 的注册表数据类型 REG_SZ。
    /// </summary>
    String_ = 1;
    /// <summary>
    ///   包含对环境变量，例如 %PATH%，检索的值时扩展未扩展的引用的以 null 结尾的字符串。
    ///               此值等效于 REG_EXPAND_SZ 的 Win32 API 注册表数据类型。
    /// </summary>
    ExpandString = 2;
    /// <summary>
    ///   以任何形式的二进制数据。
    ///               此值等效于 REG_BINARY Win32 API 注册表数据类型。
    /// </summary>
    Binary = 3;
    /// <summary>
    ///   一个 32 位二进制数字。
    ///               此值相当于 Win32 API 的注册表数据类型 REG_DWORD。
    /// </summary>
    DWord = 4;
    /// <summary>
    ///   以 null 结尾的字符串，由两个 null 字符终止的数组。
    ///               此值等效于 REG_MULTI_SZ 的 Win32 API 注册表数据类型。
    /// </summary>
    MultiString = 7;
    /// <summary>
    ///   一个 64 位二进制数字。
    ///               此值等效于 REG_QWORD 的 Win32 API 注册表数据类型。
    /// </summary>
    QWord = 11;
    /// <summary>
    ///   任何数据类型。
    /// </summary>
    None = -1;
  end;


  //-------------namespace: Microsoft.Win32----------------
  /// <summary>
  ///   从注册表项检索名称/值对时，请指定可选的行为。
  /// </summary>
  [DNTypeName('Microsoft.Win32.RegistryValueOptions')]
  DNRegistryValueOptions = type Integer;
  DNRegistryValueOptionsHelper = record helper for DNRegistryValueOptions
  public const
    /// <summary>
    ///   不指定了任何可选行为。
    /// </summary>
    None = 0;
    /// <summary>
    ///   类型的值检索而不扩展其嵌入的环境变量。
    /// </summary>
    DoNotExpandEnvironmentNames = 1;
  end;


  //-------------namespace: Microsoft.Win32----------------
  /// <summary>
  ///   指定的注册表视图在 64 位操作系统上的目标。
  /// </summary>
  [DNTypeName('Microsoft.Win32.RegistryView')]
  DNRegistryView = type Integer;
  DNRegistryViewHelper = record helper for DNRegistryView
  public const
    /// <summary>
    ///   默认视图中。
    /// </summary>
    Default_ = 0;
    /// <summary>
    ///   64 位视图中。
    /// </summary>
    Registry64 = 256;
    /// <summary>
    ///   32 位视图中。
    /// </summary>
    Registry32 = 512;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   表示清单激活应用程序的上下文。
  /// </summary>
  [DNTypeName('System.ActivationContext+ContextForm')]
  DNActivationContext_ContextForm = type Integer;
  DNActivationContext_ContextFormHelper = record helper for DNActivationContext_ContextForm
  public const
    /// <summary>
    ///   应用程序不在 ClickOnce 存储中。
    /// </summary>
    Loose = 0;
    /// <summary>
    ///   应用程序包含 ClickOnce 存储区中。
    /// </summary>
    StoreBounded = 1;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定自定义应用程序域管理器将在初始化一个新域时的操作。
  /// </summary>
  [DNTypeName('System.AppDomainManagerInitializationOptions')]
  DNAppDomainManagerInitializationOptions = type Integer;
  DNAppDomainManagerInitializationOptionsHelper = record helper for DNAppDomainManagerInitializationOptions
  public const
    /// <summary>
    ///   无初始化操作。
    /// </summary>
    None = 0;
    /// <summary>
    ///   注册 COM 可调用包装器当前与非托管主机。
    /// </summary>
    RegisterWithHost = 1;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定可应用属性的应用程序元素。
  /// </summary>
  [DNTypeName('System.AttributeTargets')]
  DNAttributeTargets = type Integer;
  DNAttributeTargetsHelper = record helper for DNAttributeTargets
  public const
    /// <summary>
    ///   特性可以应用于程序集。
    /// </summary>
    Assembly = 1;
    /// <summary>
    ///   特性可以应用于模块中。
    /// </summary>
    Module = 2;
    /// <summary>
    ///   特性可以应用于类。
    /// </summary>
    Class_ = 4;
    /// <summary>
    ///   特性可以应用于结构;即，类型值。
    /// </summary>
    Struct = 8;
    /// <summary>
    ///   特性可以应用于枚举。
    /// </summary>
    Enum = 16;
    /// <summary>
    ///   特性可以应用于构造函数。
    /// </summary>
    Constructor_ = 32;
    /// <summary>
    ///   特性可以应用于方法。
    /// </summary>
    Method = 64;
    /// <summary>
    ///   特性可以应用于属性。
    /// </summary>
    Property_ = 128;
    /// <summary>
    ///   特性可以应用于字段。
    /// </summary>
    Field = 256;
    /// <summary>
    ///   特性可以应用于事件。
    /// </summary>
    Event = 512;
    /// <summary>
    ///   特性可以应用于接口。
    /// </summary>
    Interface_ = 1024;
    /// <summary>
    ///   特性可以应用于参数。
    /// </summary>
    Parameter = 2048;
    /// <summary>
    ///   特性可以应用于委托。
    /// </summary>
    Delegate = 4096;
    /// <summary>
    ///   特性可以应用于返回的值。
    /// </summary>
    ReturnValue = 8192;
    /// <summary>
    ///   特性可以应用于泛型参数。
    /// </summary>
    GenericParameter = 16384;
    /// <summary>
    ///   特性可以应用于任何应用程序元素。
    /// </summary>
    All = 32767;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定相关  和  方法是否在其输出中插入换行符。
  /// </summary>
  [DNTypeName('System.Base64FormattingOptions')]
  DNBase64FormattingOptions = type Integer;
  DNBase64FormattingOptionsHelper = record helper for DNBase64FormattingOptions
  public const
    /// <summary>
    ///   不在字符串表示形式中每隔 76 个字符插入换行符。
    /// </summary>
    None = 0;
    /// <summary>
    ///   在字符串表示形式中每隔 76 个字符插入换行符。
    /// </summary>
    InsertLineBreaks = 1;
  end;


  //-------------namespace: System.Collections.Concurrent----------------
  /// <summary>
  ///   指定选项来控制分区程序缓冲行为
  /// </summary>
  [DNTypeName('System.Collections.Concurrent.EnumerablePartitionerOptions')]
  DNEnumerablePartitionerOptions = type Integer;
  DNEnumerablePartitionerOptionsHelper = record helper for DNEnumerablePartitionerOptions
  public const
    /// <summary>
    ///   使用默认行为，就是使用缓冲以获得最佳性能。
    /// </summary>
    None = 0;
    /// <summary>
    ///   创建的分区程序一次的可枚举一个从源中取得项，并且不使用多个线程可以更高效地访问的中间存储。
    ///               此选项为低滞后时间 （一旦在源中可用，将处理项） 提供支持并提供部分支持的项之间的依赖关系 （一个线程不会死锁等待线程本身负责处理项目）。
    /// </summary>
    NoBuffering = 1;
  end;


  //-------------namespace: System.Configuration.Assemblies----------------
  /// <summary>
  ///   指定用于哈希文件以及用于生成强名称的哈希算法。
  /// </summary>
  [DNTypeName('System.Configuration.Assemblies.AssemblyHashAlgorithm')]
  DNAssemblyHashAlgorithm = type Integer;
  DNAssemblyHashAlgorithmHelper = record helper for DNAssemblyHashAlgorithm
  public const
    /// <summary>
    ///   指出没有哈希算法的掩码。
    ///               如果指定  多模块程序集，公共语言运行时默认为 SHA1 算法，因为多模块程序集需要生成一个哈希值。
    /// </summary>
    None = 0;
    /// <summary>
    ///   检索 MD5 消息摘要算法。
    ///               MD5 于 1991 年由 Rivest 开发。
    ///               它基本上是 MD4 与安全安全带并比 MD4 稍慢时，帮助提供更高的安全性。
    ///               该算法包括四个不同，它具有与 MD4 略有不同的设计。
    ///               消息摘要的大小以及填充要求保持相同。
    /// </summary>
    MD5 = 32771;
    /// <summary>
    ///   一个掩码，用于检索在 SHA 未发布的错误就可纠正安全哈希算法的修订版本。
    /// </summary>
    SHA1 = 32772;
    /// <summary>
    ///   用于检索哈希大小为 256 位安全哈希算法的版本的掩码。
    /// </summary>
    SHA256 = 32780;
    /// <summary>
    ///   用于检索安全哈希算法的哈希大小为 384 位版本的掩码。
    /// </summary>
    SHA384 = 32781;
    /// <summary>
    ///   用于检索安全哈希算法的哈希大小为 512 位版本的掩码。
    /// </summary>
    SHA512 = 32782;
  end;


  //-------------namespace: System.Configuration.Assemblies----------------
  /// <summary>
  ///   定义不同类型的程序集版本兼容性。
  ///               此功能不可用的.NET framework 1.0 版中。
  /// </summary>
  [DNTypeName('System.Configuration.Assemblies.AssemblyVersionCompatibility')]
  DNAssemblyVersionCompatibility = type Integer;
  DNAssemblyVersionCompatibilityHelper = record helper for DNAssemblyVersionCompatibility
  public const
    /// <summary>
    ///   如果在同一台计算机上执行，该程序集不能执行与其他版本。
    /// </summary>
    SameMachine = 1;
    /// <summary>
    ///   程序集无法与其他版本在同一进程中一起执行。
    /// </summary>
    SameProcess = 2;
    /// <summary>
    ///   程序集无法与其他版本在同一应用程序域中一起执行。
    /// </summary>
    SameDomain = 3;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定定义控制台前景色和背景色的常数。
  /// </summary>
  [DNTypeName('System.ConsoleColor')]
  DNConsoleColor = type Integer;
  DNConsoleColorHelper = record helper for DNConsoleColor
  public const
    /// <summary>
    ///   黑色。
    /// </summary>
    Black = 0;
    /// <summary>
    ///   藏蓝色。
    /// </summary>
    DarkBlue = 1;
    /// <summary>
    ///   深绿色。
    /// </summary>
    DarkGreen = 2;
    /// <summary>
    ///   深紫色（深蓝绿色）。
    /// </summary>
    DarkCyan = 3;
    /// <summary>
    ///   深红色。
    /// </summary>
    DarkRed = 4;
    /// <summary>
    ///   深紫红色。
    /// </summary>
    DarkMagenta = 5;
    /// <summary>
    ///   深黄色（赭色）。
    /// </summary>
    DarkYellow = 6;
    /// <summary>
    ///   灰色。
    /// </summary>
    Gray = 7;
    /// <summary>
    ///   深灰色。
    /// </summary>
    DarkGray = 8;
    /// <summary>
    ///   蓝色。
    /// </summary>
    Blue = 9;
    /// <summary>
    ///   绿色。
    /// </summary>
    Green = 10;
    /// <summary>
    ///   青色（蓝绿色）。
    /// </summary>
    Cyan = 11;
    /// <summary>
    ///   红色。
    /// </summary>
    Red = 12;
    /// <summary>
    ///   紫红色。
    /// </summary>
    Magenta = 13;
    /// <summary>
    ///   黄色。
    /// </summary>
    Yellow = 14;
    /// <summary>
    ///   白色。
    /// </summary>
    White = 15;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定控制台上的标准键。
  /// </summary>
  [DNTypeName('System.ConsoleKey')]
  DNConsoleKey = type Integer;
  DNConsoleKeyHelper = record helper for DNConsoleKey
  public const
    /// <summary>
    ///   BACKSPACE 键。
    /// </summary>
    Backspace = 8;
    /// <summary>
    ///   TAB 键。
    /// </summary>
    Tab = 9;
    /// <summary>
    ///   CLEAR 键。
    /// </summary>
    Clear = 12;
    /// <summary>
    ///   ENTER 键。
    /// </summary>
    Enter = 13;
    /// <summary>
    ///   PAUSE 键。
    /// </summary>
    Pause = 19;
    /// <summary>
    ///   ESC (ESCAPE) 键。
    /// </summary>
    Escape = 27;
    /// <summary>
    ///   SPACEBAR 键。
    /// </summary>
    Spacebar = 32;
    /// <summary>
    ///   PAGE UP 键。
    /// </summary>
    PageUp = 33;
    /// <summary>
    ///   PAGE DOWN 键。
    /// </summary>
    PageDown = 34;
    /// <summary>
    ///   END 键。
    /// </summary>
    End_ = 35;
    /// <summary>
    ///   HOME 键。
    /// </summary>
    Home = 36;
    /// <summary>
    ///   LEFT ARROW 键。
    /// </summary>
    LeftArrow = 37;
    /// <summary>
    ///   UP ARROW 键。
    /// </summary>
    UpArrow = 38;
    /// <summary>
    ///   RIGHT ARROW 键。
    /// </summary>
    RightArrow = 39;
    /// <summary>
    ///   DOWN ARROW 键。
    /// </summary>
    DownArrow = 40;
    /// <summary>
    ///   SELECT 键。
    /// </summary>
    Select = 41;
    /// <summary>
    ///   PRINT 键。
    /// </summary>
    Print = 42;
    /// <summary>
    ///   EXECUTE 键。
    /// </summary>
    Execute = 43;
    /// <summary>
    ///   PRINT SCREEN 键。
    /// </summary>
    PrintScreen = 44;
    /// <summary>
    ///   INS (INSERT) 键。
    /// </summary>
    Insert = 45;
    /// <summary>
    ///   DEL (DELETE) 键。
    /// </summary>
    Delete = 46;
    /// <summary>
    ///   HELP 键。
    /// </summary>
    Help = 47;
    /// <summary>
    ///   0 键。
    /// </summary>
    D0 = 48;
    /// <summary>
    ///   1 键。
    /// </summary>
    D1 = 49;
    /// <summary>
    ///   2 键。
    /// </summary>
    D2 = 50;
    /// <summary>
    ///   3 键。
    /// </summary>
    D3 = 51;
    /// <summary>
    ///   4 键。
    /// </summary>
    D4 = 52;
    /// <summary>
    ///   5 键。
    /// </summary>
    D5 = 53;
    /// <summary>
    ///   6 键。
    /// </summary>
    D6 = 54;
    /// <summary>
    ///   7 键。
    /// </summary>
    D7 = 55;
    /// <summary>
    ///   8 键。
    /// </summary>
    D8 = 56;
    /// <summary>
    ///   9 键。
    /// </summary>
    D9 = 57;
    /// <summary>
    ///   A 键。
    /// </summary>
    A = 65;
    /// <summary>
    ///   B 键。
    /// </summary>
    B = 66;
    /// <summary>
    ///   C 键。
    /// </summary>
    C = 67;
    /// <summary>
    ///   D 键。
    /// </summary>
    D = 68;
    /// <summary>
    ///   E 键。
    /// </summary>
    E = 69;
    /// <summary>
    ///   F 键。
    /// </summary>
    F = 70;
    /// <summary>
    ///   G 键。
    /// </summary>
    G = 71;
    /// <summary>
    ///   H 键。
    /// </summary>
    H = 72;
    /// <summary>
    ///   I 键。
    /// </summary>
    I = 73;
    /// <summary>
    ///   J 键。
    /// </summary>
    J = 74;
    /// <summary>
    ///   K 键。
    /// </summary>
    K = 75;
    /// <summary>
    ///   L 键。
    /// </summary>
    L = 76;
    /// <summary>
    ///   M 键。
    /// </summary>
    M = 77;
    /// <summary>
    ///   N 键。
    /// </summary>
    N = 78;
    /// <summary>
    ///   O 键。
    /// </summary>
    O = 79;
    /// <summary>
    ///   P 键。
    /// </summary>
    P = 80;
    /// <summary>
    ///   Q 键。
    /// </summary>
    Q = 81;
    /// <summary>
    ///   R 键。
    /// </summary>
    R = 82;
    /// <summary>
    ///   S 键。
    /// </summary>
    S = 83;
    /// <summary>
    ///   T 键。
    /// </summary>
    T = 84;
    /// <summary>
    ///   U 键。
    /// </summary>
    U = 85;
    /// <summary>
    ///   V 键。
    /// </summary>
    V = 86;
    /// <summary>
    ///   W 键。
    /// </summary>
    W = 87;
    /// <summary>
    ///   X 键。
    /// </summary>
    X = 88;
    /// <summary>
    ///   Y 键。
    /// </summary>
    Y = 89;
    /// <summary>
    ///   Z 键。
    /// </summary>
    Z = 90;
    /// <summary>
    ///   左 Windows 徽标键 (Microsoft Natural Keyboard)。
    /// </summary>
    LeftWindows = 91;
    /// <summary>
    ///   右 Windows 徽标键 (Microsoft Natural Keyboard)。
    /// </summary>
    RightWindows = 92;
    /// <summary>
    ///   应用程序键 (Microsoft Natural Keyboard)。
    /// </summary>
    Applications = 93;
    /// <summary>
    ///   计算机休眠键。
    /// </summary>
    Sleep = 95;
    /// <summary>
    ///   数字键盘上的 0 键。
    /// </summary>
    NumPad0 = 96;
    /// <summary>
    ///   数字键盘上的 1 键。
    /// </summary>
    NumPad1 = 97;
    /// <summary>
    ///   数字键盘上的 2 键。
    /// </summary>
    NumPad2 = 98;
    /// <summary>
    ///   数字键盘上的 3 键。
    /// </summary>
    NumPad3 = 99;
    /// <summary>
    ///   数字键盘上的 4 键。
    /// </summary>
    NumPad4 = 100;
    /// <summary>
    ///   数字键盘上的 5 键。
    /// </summary>
    NumPad5 = 101;
    /// <summary>
    ///   数字键盘上的 6 键。
    /// </summary>
    NumPad6 = 102;
    /// <summary>
    ///   数字键盘上的 7 键。
    /// </summary>
    NumPad7 = 103;
    /// <summary>
    ///   数字键盘上的 8 键。
    /// </summary>
    NumPad8 = 104;
    /// <summary>
    ///   数字键盘上的 9 键。
    /// </summary>
    NumPad9 = 105;
    /// <summary>
    ///   乘号键（数字键盘上的乘号键）。
    /// </summary>
    Multiply = 106;
    /// <summary>
    ///   加号键（数字键盘上的加号键）。
    /// </summary>
    Add = 107;
    /// <summary>
    ///   分隔符键。
    /// </summary>
    Separator = 108;
    /// <summary>
    ///   减号键（数字键盘上的减号键）。
    /// </summary>
    Subtract = 109;
    /// <summary>
    ///   小数点键（数字键盘上的小数点键）。
    /// </summary>
    Decimal = 110;
    /// <summary>
    ///   除号键（数字键盘上的除号键）。
    /// </summary>
    Divide = 111;
    /// <summary>
    ///   F1 键。
    /// </summary>
    F1 = 112;
    /// <summary>
    ///   F2 键。
    /// </summary>
    F2 = 113;
    /// <summary>
    ///   F3 键。
    /// </summary>
    F3 = 114;
    /// <summary>
    ///   F4 键。
    /// </summary>
    F4 = 115;
    /// <summary>
    ///   F5 键。
    /// </summary>
    F5 = 116;
    /// <summary>
    ///   F6 键。
    /// </summary>
    F6 = 117;
    /// <summary>
    ///   F7 键。
    /// </summary>
    F7 = 118;
    /// <summary>
    ///   F8 键。
    /// </summary>
    F8 = 119;
    /// <summary>
    ///   F9 键。
    /// </summary>
    F9 = 120;
    /// <summary>
    ///   F10 键。
    /// </summary>
    F10 = 121;
    /// <summary>
    ///   F11 键。
    /// </summary>
    F11 = 122;
    /// <summary>
    ///   F12 键。
    /// </summary>
    F12 = 123;
    /// <summary>
    ///   F13 键。
    /// </summary>
    F13 = 124;
    /// <summary>
    ///   F14 键。
    /// </summary>
    F14 = 125;
    /// <summary>
    ///   F15 键。
    /// </summary>
    F15 = 126;
    /// <summary>
    ///   F16 键。
    /// </summary>
    F16 = 127;
    /// <summary>
    ///   F17 键。
    /// </summary>
    F17 = 128;
    /// <summary>
    ///   F18 键。
    /// </summary>
    F18 = 129;
    /// <summary>
    ///   F19 键。
    /// </summary>
    F19 = 130;
    /// <summary>
    ///   F20 键。
    /// </summary>
    F20 = 131;
    /// <summary>
    ///   F21 键。
    /// </summary>
    F21 = 132;
    /// <summary>
    ///   F22 键。
    /// </summary>
    F22 = 133;
    /// <summary>
    ///   F23 键。
    /// </summary>
    F23 = 134;
    /// <summary>
    ///   F24 键。
    /// </summary>
    F24 = 135;
    /// <summary>
    ///   浏览器后退键（Windows 2000 或更高版本）。
    /// </summary>
    BrowserBack = 166;
    /// <summary>
    ///   浏览器前进键（Windows 2000 或更高版本）。
    /// </summary>
    BrowserForward = 167;
    /// <summary>
    ///   浏览器刷新键（Windows 2000 或更高版本）。
    /// </summary>
    BrowserRefresh = 168;
    /// <summary>
    ///   浏览器停止键（Windows 2000 或更高版本）。
    /// </summary>
    BrowserStop = 169;
    /// <summary>
    ///   浏览器搜索键（Windows 2000 或更高版本）。
    /// </summary>
    BrowserSearch = 170;
    /// <summary>
    ///   浏览器收藏键（Windows 2000 或更高版本）。
    /// </summary>
    BrowserFavorites = 171;
    /// <summary>
    ///   浏览器主页键（Windows 2000 或更高版本）。
    /// </summary>
    BrowserHome = 172;
    /// <summary>
    ///   静音键（Microsoft Natural Keyboard，Windows 2000 或更高版本）。
    /// </summary>
    VolumeMute = 173;
    /// <summary>
    ///   调低音量键（Microsoft Natural Keyboard，Windows 2000 或更高版本）。
    /// </summary>
    VolumeDown = 174;
    /// <summary>
    ///   调高音量键（Microsoft Natural Keyboard，Windows 2000 或更高版本）。
    /// </summary>
    VolumeUp = 175;
    /// <summary>
    ///   媒体下一曲目键（Windows 2000 或更高版本）。
    /// </summary>
    MediaNext = 176;
    /// <summary>
    ///   媒体上一曲目键（Windows 2000 或更高版本）。
    /// </summary>
    MediaPrevious = 177;
    /// <summary>
    ///   媒体停止键（Windows 2000 或更高版本）。
    /// </summary>
    MediaStop = 178;
    /// <summary>
    ///   媒体播放/暂停键（Windows 2000 或更高版本）。
    /// </summary>
    MediaPlay = 179;
    /// <summary>
    ///   启动邮件键（Microsoft Natural Keyboard，Windows 2000 或更高版本）。
    /// </summary>
    LaunchMail = 180;
    /// <summary>
    ///   选择媒体键（Microsoft Natural Keyboard，Windows 2000 或更高版本）。
    /// </summary>
    LaunchMediaSelect = 181;
    /// <summary>
    ///   启动应用程序 1 键（Microsoft Natural Keyboard，Windows 2000 或更高版本）。
    /// </summary>
    LaunchApp1 = 182;
    /// <summary>
    ///   启动应用程序 2 键（Microsoft Natural Keyboard，Windows 2000 或更高版本）。
    /// </summary>
    LaunchApp2 = 183;
    /// <summary>
    ///   OEM 1 键（特定于 OEM）。
    /// </summary>
    Oem1 = 186;
    /// <summary>
    ///   任何国家/地区键盘上的 OEM 加号键（Windows 2000 或更高版本）。
    /// </summary>
    OemPlus = 187;
    /// <summary>
    ///   任何国家/地区键盘上的 OEM 逗号键（Windows 2000 或更高版本）。
    /// </summary>
    OemComma = 188;
    /// <summary>
    ///   任何国家/地区键盘上的 OEM 减号键（Windows 2000 或更高版本）。
    /// </summary>
    OemMinus = 189;
    /// <summary>
    ///   任何国家/地区键盘上的 OEM 句号键（Windows 2000 或更高版本）。
    /// </summary>
    OemPeriod = 190;
    /// <summary>
    ///   OEM 2 键（特定于 OEM）。
    /// </summary>
    Oem2 = 191;
    /// <summary>
    ///   OEM 3 键（特定于 OEM）。
    /// </summary>
    Oem3 = 192;
    /// <summary>
    ///   OEM 4 键（特定于 OEM）。
    /// </summary>
    Oem4 = 219;
    /// <summary>
    ///   OEM 5 键（特定于 OEM）。
    /// </summary>
    Oem5 = 220;
    /// <summary>
    ///   OEM 6 键（特定于 OEM）。
    /// </summary>
    Oem6 = 221;
    /// <summary>
    ///   OEM 7 键（特定于 OEM）。
    /// </summary>
    Oem7 = 222;
    /// <summary>
    ///   OEM 8 键（特定于 OEM）。
    /// </summary>
    Oem8 = 223;
    /// <summary>
    ///   OEM 102 键（特定于 OEM）。
    /// </summary>
    Oem102 = 226;
    /// <summary>
    ///   IME PROCESS 键。
    /// </summary>
    Process = 229;
    /// <summary>
    ///   PACKET 键（通过击键次数用于传递 Unicode 字符）。
    /// </summary>
    Packet = 231;
    /// <summary>
    ///   ATTN 键。
    /// </summary>
    Attention = 246;
    /// <summary>
    ///   CRSEL（光标选择）键。
    /// </summary>
    CrSel = 247;
    /// <summary>
    ///   EXSEL（扩展选择）键。
    /// </summary>
    ExSel = 248;
    /// <summary>
    ///   ERASE EOF 键。
    /// </summary>
    EraseEndOfFile = 249;
    /// <summary>
    ///   播放键。
    /// </summary>
    Play = 250;
    /// <summary>
    ///   缩放键。
    /// </summary>
    Zoom = 251;
    /// <summary>
    ///   留待将来使用的常数。
    /// </summary>
    NoName = 252;
    /// <summary>
    ///   PA1 键。
    /// </summary>
    Pa1 = 253;
    /// <summary>
    ///   CLEAR 键（特定于 OEM）。
    /// </summary>
    OemClear = 254;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   表示 SHIFT、 ALT 和 CTRL 修改键的键盘上。
  /// </summary>
  [DNTypeName('System.ConsoleModifiers')]
  DNConsoleModifiers = type Integer;
  DNConsoleModifiersHelper = record helper for DNConsoleModifiers
  public const
    /// <summary>
    ///   向左或右 ALT 修改键。
    /// </summary>
    Alt = 1;
    /// <summary>
    ///   左或向右 shift 键修改键。
    /// </summary>
    Shift = 2;
    /// <summary>
    ///   左或向右 CTRL 修改键。
    /// </summary>
    Control = 4;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定的修饰符，并可以中断当前进程的控制台键的组合。
  /// </summary>
  [DNTypeName('System.ConsoleSpecialKey')]
  DNConsoleSpecialKey = type Integer;
  DNConsoleSpecialKeyHelper = record helper for DNConsoleSpecialKey
  public const
    /// <summary>
    ///   修改键加上控制台键。
    /// </summary>
    ControlC = 0;
    /// <summary>
    ///   修饰符键加 BREAK 控制台键。
    /// </summary>
    ControlBreak = 1;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定是否  对象表示本地时间，格式为协调世界时 (UTC)，或未指定为本地时间还是 UTC。
  /// </summary>
  [DNTypeName('System.DateTimeKind')]
  DNDateTimeKind = type Integer;
  DNDateTimeKindHelper = record helper for DNDateTimeKind
  public const
    /// <summary>
    ///   所表示的时间未指定为本地时间还是协调世界时 (UTC)。
    /// </summary>
    Unspecified = 0;
    /// <summary>
    ///   所表示的时间为 UTC。
    /// </summary>
    Utc = 1;
    /// <summary>
    ///   所表示的时间为本地时间。
    /// </summary>
    Local = 2;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定一周中的某天。
  /// </summary>
  [DNTypeName('System.DayOfWeek')]
  DNDayOfWeek = type Integer;
  DNDayOfWeekHelper = record helper for DNDayOfWeek
  public const
    /// <summary>
    ///   表示星期日。
    /// </summary>
    Sunday = 0;
    /// <summary>
    ///   表示星期一。
    /// </summary>
    Monday = 1;
    /// <summary>
    ///   表示星期二。
    /// </summary>
    Tuesday = 2;
    /// <summary>
    ///   表示星期三。
    /// </summary>
    Wednesday = 3;
    /// <summary>
    ///   表示星期四。
    /// </summary>
    Thursday = 4;
    /// <summary>
    ///   表示星期五。
    /// </summary>
    Friday = 5;
    /// <summary>
    ///   表示星期六。
    /// </summary>
    Saturday = 6;
  end;


  //-------------namespace: System.Diagnostics.Contracts----------------
  /// <summary>
  ///   指定失败的协定的类型。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractFailureKind')]
  DNContractFailureKind = type Integer;
  DNContractFailureKindHelper = record helper for DNContractFailureKind
  public const
    /// <summary>
    ///   一个  协定失败。
    /// </summary>
    Precondition = 0;
    /// <summary>
    ///   协定失败。
    /// </summary>
    Postcondition = 1;
    /// <summary>
    ///   协定失败。
    /// </summary>
    PostconditionOnException = 2;
    /// <summary>
    ///   协定失败。
    /// </summary>
    Invariant = 3;
    /// <summary>
    ///   协定失败。
    /// </summary>
    Assert = 4;
    /// <summary>
    ///   协定失败。
    /// </summary>
    Assume = 5;
  end;


  //-------------namespace: System.Diagnostics----------------
  /// <summary>
  ///   指定实时 (JIT) 编译器的调试模式。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggableAttribute+DebuggingModes')]
  DNDebuggableAttribute_DebuggingModes = type Integer;
  DNDebuggableAttribute_DebuggingModesHelper = record helper for DNDebuggableAttribute_DebuggingModes
  public const
    /// <summary>
    ///   从 .NET Framework 2.0 版本开始，始终生成 JIT 跟踪信息，并且此标志与  具有相同效果，将  属性设置为  除外。
    ///               但是，由于始终启用 JIT 跟踪，所以在版本 2.0 或更高版本中将忽略此属性值。
    ///            
    ///              请注意，与  标志不同， 标志不能用于禁用 JIT 优化。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指示实时 (JIT) 编译器使用其默认行为，包括启用优化、禁用“编辑并继续”支持以及使用符号存储区序列点（如果存在）。
    ///               从 .NET Framework 2.0 版本开始，始终生成 JIT 跟踪信息，即方法中相对于本机代码偏移量的 Microsoft 中间语言 (MSIL) 偏移量。
    /// </summary>
    Default_ = 1;
    /// <summary>
    ///   使用隐式 MSIL 序列点，而非程序数据库 (PDB) 序列点。
    ///               符号信息中的每个源行通常至少包含一个 Microsoft 中间语言 (MSIL) 偏移量。
    ///               当实时 (JIT) 编译器要编译方法时，它会请求分析服务提供应保留的 MSIL 偏移量列表。
    ///               这些 MSIL 偏移量称为序列点。
    /// </summary>
    IgnoreSymbolStoreSequencePoints = 2;
    /// <summary>
    ///   启用“编辑并继续”。
    ///               借助“编辑并继续”，你可以在程序处于中断模式时对源代码进行更改。
    ///               “编辑并继续”的能力取决于编译器。
    /// </summary>
    EnableEditAndContinue = 4;
    /// <summary>
    ///   禁用编译器为使输出文件更小、更快、更有效而执行的优化。
    ///               优化会导致输出文件中的代码重排，这会增加调试的难度。
    ///               通常在调试时应禁用优化。
    ///               在 2.0 或更高版本中，将这个值与 Default (Default | DisableOptimizations) 组合在一起可启用 JIT 跟踪和禁用优化。
    /// </summary>
    DisableOptimizations = 256;
  end;


  //-------------namespace: System.Diagnostics----------------
  /// <summary>
  ///   提供有关调试器的显示说明。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggerBrowsableState')]
  DNDebuggerBrowsableState = type Integer;
  DNDebuggerBrowsableStateHelper = record helper for DNDebuggerBrowsableState
  public const
    /// <summary>
    ///   永远不会显示元素。
    /// </summary>
    Never = 0;
    /// <summary>
    ///   以折叠形式显示元素。
    /// </summary>
    Collapsed = 2;
    /// <summary>
    ///   不显示的根元素;如果元素为集合或数组的项，显示的子元素。
    /// </summary>
    RootHidden = 3;
  end;


  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   在方法中指定的本地变量、 参数和字段的地址类型 , ，, ，和  的  接口。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.SymAddressKind')]
  DNSymAddressKind = type Integer;
  DNSymAddressKindHelper = record helper for DNSymAddressKind
  public const
    /// <summary>
    ///   Microsoft 中间语言 (MSIL) 偏移量。
    ///               参数是 MSIL 本地变量或参数索引。
    /// </summary>
    ILOffset = 1;
    /// <summary>
    ///   一个本机相关虚拟地址 (RVA)。
    ///               参数是在模块中的 RVA。
    /// </summary>
    NativeRVA = 2;
    /// <summary>
    ///   本机注册一个地址。
    ///               参数是在其中存储该变量的寄存器。
    /// </summary>
    NativeRegister = 3;
    /// <summary>
    ///   是注册相对地址。
    ///               参数是寄存器，并且  参数是该偏移量。
    /// </summary>
    NativeRegisterRelative = 4;
    /// <summary>
    ///   本机偏移量。
    ///               参数是从的父级开始的偏移量。
    /// </summary>
    NativeOffset = 5;
    /// <summary>
    ///   是注册相对地址。
    ///               参数是低序位寄存器和  参数是高序位寄存器。
    /// </summary>
    NativeRegisterRegister = 6;
    /// <summary>
    ///   是注册相对地址。
    ///               参数是低序位寄存器  参数是堆栈寄存器和  参数是从堆栈指针到值的高位部分的偏移量。
    /// </summary>
    NativeRegisterStack = 7;
    /// <summary>
    ///   是注册相对地址。
    ///               参数是堆栈寄存器  参数是到低序位部分的值，从堆栈指针的偏移量和  参数是高序位寄存器。
    /// </summary>
    NativeStackRegister = 8;
    /// <summary>
    ///   一个位域。
    ///               参数是该字段的开始位置和  参数是字段长度。
    /// </summary>
    BitField = 9;
    /// <summary>
    ///   一本机部分的偏移量。
    ///               参数是部分，和  参数是该偏移量。
    /// </summary>
    NativeSectionOffset = 10;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   指定活动开始和停止事件的跟踪。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventActivityOptions')]
  DNEventActivityOptions = type Integer;
  DNEventActivityOptionsHelper = record helper for DNEventActivityOptions
  public const
    /// <summary>
    ///   使用默认行为为启动和停止跟踪。
    /// </summary>
    None = 0;
    /// <summary>
    ///   请关闭开始和停止跟踪。
    /// </summary>
    Disable = 2;
    /// <summary>
    ///   允许递归活动开始。
    ///               默认情况下，活动不能为递归。
    ///               也就是说，启动 A，开始一个，停止一个序列，停止一个不允许。
    ///               如果应用程序执行，并对于某些停止之前达不到调用另一个 start，可能发生意外递归活动。
    /// </summary>
    Recursive = 4;
    /// <summary>
    ///   允许重叠的活动。
    ///               默认情况下，活动开始和停止点必须是嵌套的属性。
    ///               开始 A、 启动 B、 Stop A 一系列停止 B 不允许将导致 B 停止时间与 a。
    /// </summary>
    Detachable = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   指定事件的事件日志通道。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventChannel')]
  DNEventChannel = type Integer;
  DNEventChannelHelper = record helper for DNEventChannel
  public const
    /// <summary>
    ///   未指定通道。
    /// </summary>
    None = 0;
    /// <summary>
    ///   管理员日志通道。
    /// </summary>
    Admin = 16;
    /// <summary>
    ///   操作通道。
    /// </summary>
    Operational = 17;
    /// <summary>
    ///   分析通道。
    /// </summary>
    Analytic = 18;
    /// <summary>
    ///   调试通道。
    /// </summary>
    Debug = 19;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   描述的命令 ( 属性)，传递给  回调。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventCommand')]
  DNEventCommand = type Integer;
  DNEventCommandHelper = record helper for DNEventCommand
  public const
    /// <summary>
    ///   更新事件。
    /// </summary>
    Update = 0;
    /// <summary>
    ///   禁用此事件。
    /// </summary>
    Disable = -3;
    /// <summary>
    ///   启用该事件。
    /// </summary>
    Enable = -2;
    /// <summary>
    ///   发送清单。
    /// </summary>
    SendManifest = -1;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   指定如何设置用户定义类型的值的格式并可用于覆盖字段的默认格式。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventFieldFormat')]
  DNEventFieldFormat = type Integer;
  DNEventFieldFormatHelper = record helper for DNEventFieldFormat
  public const
    /// <summary>
    ///   默认。
    /// </summary>
    Default_ = 0;
    /// <summary>
    ///   字符串。
    /// </summary>
    String_ = 2;
    /// <summary>
    ///   布尔值
    /// </summary>
    Boolean = 3;
    /// <summary>
    ///   十六进制。
    /// </summary>
    Hexadecimal = 4;
    /// <summary>
    ///   XML。
    /// </summary>
    Xml = 11;
    /// <summary>
    ///   JSON。
    /// </summary>
    Json = 12;
    /// <summary>
    ///   HResult。
    /// </summary>
    HResult = 15;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   指定放置在作为传递的用户定义类型的字段的用户定义的标记  负载通过 。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventFieldTags')]
  DNEventFieldTags = type Integer;
  DNEventFieldTagsHelper = record helper for DNEventFieldTags
  public const
    /// <summary>
    ///   指定没有标记，并且等于零。
    /// </summary>
    None = 0;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   定义应用于事件的标准关键字。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventKeywords')]
  DNEventKeywords = type Integer;
  DNEventKeywordsHelper = record helper for DNEventKeywords
  public const
    /// <summary>
    ///   发布此事件时未对关键字执行任何筛选。
    /// </summary>
    None = 0;
    /// <summary>
    ///   已附加到所有 Microsoft 遥测事件。
    /// </summary>
    MicrosoftTelemetry = 562949953421312;
    /// <summary>
    ///   已附加到所有 Windows 诊断基础结构 (WDI) 上下文事件。
    /// </summary>
    WdiContext = 562949953421312;
    /// <summary>
    ///   已附加到所有 Windows 诊断基础结构 (WDI) 诊断事件。
    /// </summary>
    WdiDiagnostic = 1125899906842624;
    /// <summary>
    ///   已附加到所有服务质量机制 (SQM) 事件。
    /// </summary>
    Sqm = 2251799813685248;
    /// <summary>
    ///   已附加到所有失败的安全审核事件。
    ///               仅对安全日志中的事件使用此关键字。
    /// </summary>
    AuditFailure = 4503599627370496;
    /// <summary>
    ///   已附加到传输事件，其中相关的活动 ID（相关 ID）是一个计算值，不能保证其唯一性（即它不是真正的 GUID）。
    /// </summary>
    CorrelationHint = 4503599627370496;
    /// <summary>
    ///   已附加到所有成功的安全审核事件。
    ///               仅对安全日志中的事件使用此关键字。
    /// </summary>
    AuditSuccess = 9007199254740992;
    /// <summary>
    ///   已附加到通过引发的事件  函数。
    /// </summary>
    EventLogClassic = 36028797018963968;
    /// <summary>
    ///   所有的位设置为 1，表示每个可能的事件组。
    /// </summary>
    All = -1;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   标识事件的级别。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventLevel')]
  DNEventLevel = type Integer;
  DNEventLevelHelper = record helper for DNEventLevel
  public const
    /// <summary>
    ///   对事件进行不级别进行筛选。
    /// </summary>
    LogAlways = 0;
    /// <summary>
    ///   此级别对应于一个严重错误，已导致重大故障是严重错误。
    /// </summary>
    Critical = 1;
    /// <summary>
    ///   此级别添加标准误差表示某个问题。
    /// </summary>
    Error = 2;
    /// <summary>
    ///   此级别添加警告事件 （例如，由于磁盘已接近满负荷发布的事件）。
    /// </summary>
    Warning = 3;
    /// <summary>
    ///   此级别添加信息性事件或不是错误的消息。
    ///               这些事件可帮助跟踪进度或应用程序状态。
    /// </summary>
    Informational = 4;
    /// <summary>
    ///   此级别添加冗长的事件或消息。
    ///               它会导致要记入日志的所有事件。
    /// </summary>
    Verbose = 5;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   指定如何生成事件源的 ETW 清单。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventManifestOptions')]
  DNEventManifestOptions = type Integer;
  DNEventManifestOptionsHelper = record helper for DNEventManifestOptions
  public const
    /// <summary>
    ///   未指定任何选项。
    /// </summary>
    None = 0;
    /// <summary>
    ///   如果写入清单文件时出现任何不一致将导致引发异常。
    /// </summary>
    Strict_ = 1;
    /// <summary>
    ///   在提供的每个附属程序集的本地化文件夹下生成资源节点。
    /// </summary>
    AllCultures = 2;
    /// <summary>
    ///   只有必须在主机上注册事件源时才生成清单。
    /// </summary>
    OnlyIfNeededForRegistration = 4;
    /// <summary>
    ///   重写默认行为的当前  必须将用户定义类型的基类传递给 write 方法。
    ///               这会启用对 .NET 事件源的验证。
    /// </summary>
    AllowEventSourceOverride = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   定义了事件源将附加到事件的标准操作代码。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventOpcode')]
  DNEventOpcode = type Integer;
  DNEventOpcodeHelper = record helper for DNEventOpcode
  public const
    /// <summary>
    ///   信息性事件。
    /// </summary>
    Info = 0;
    /// <summary>
    ///   一个应用程序启动新事务或活动时，会发布一个事件。
    ///               此操作代码时可嵌入在另一个事务或活动具有多个事件  而无需具有的介入性事件的代码遵循彼此  代码。
    /// </summary>
    Start = 1;
    /// <summary>
    ///   一个活动或应用程序中的事务结束时，会发布一个事件。
    ///               该事件对应于具有的最后一个不成对事件  操作代码。
    /// </summary>
    Stop = 2;
    /// <summary>
    ///   跟踪集合开始事件。
    /// </summary>
    DataCollectionStart = 3;
    /// <summary>
    ///   跟踪集合停止事件。
    /// </summary>
    DataCollectionStop = 4;
    /// <summary>
    ///   扩展事件。
    /// </summary>
    Extension = 5;
    /// <summary>
    ///   在应用程序中的活动回复事件后发布一个事件。
    /// </summary>
    Reply = 6;
    /// <summary>
    ///   在应用程序中的活动从暂停状态恢复后发布一个事件。
    ///               该事件应遵循的事件  操作代码。
    /// </summary>
    Resume = 7;
    /// <summary>
    ///   在应用程序中的活动被挂起时，会发布一个事件。
    /// </summary>
    Suspend = 8;
    /// <summary>
    ///   应用程序中的一个活动到另一个活动传输数据或系统资源时，会发布一个事件。
    /// </summary>
    Send = 9;
    /// <summary>
    ///   应用程序中的一个活动接收数据时，会发布一个事件。
    /// </summary>
    Receive = 240;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   指定事件源的配置选项。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventSourceSettings')]
  DNEventSourceSettings = type Integer;
  DNEventSourceSettingsHelper = record helper for DNEventSourceSettings
  public const
    /// <summary>
    ///   未启用任何特殊配置选项。
    /// </summary>
    Default_ = 0;
    /// <summary>
    ///   发生错误时该事件源将引发异常。
    /// </summary>
    ThrowOnEventWriteErrors = 1;
    /// <summary>
    ///   引发事件时 ETW 侦听器应使用基于清单的格式。
    ///               设置此选项即对 ETW 侦听器发出指令，指示在引发事件时该侦听器应使用基于清单的格式。
    ///               当使用其中一个受保护的  构造函数定义从  派生的类型时，这是默认选项。
    /// </summary>
    EtwManifestEventFormat = 4;
    /// <summary>
    ///   ETW 侦听器应使用自描述事件格式。
    ///               当使用其中一个公共  构造函数来创建  的新实例时，这是默认选项。
    /// </summary>
    EtwSelfDescribingEventFormat = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   指定活动开始和停止事件的跟踪。
  ///               只应使用较低的 24 位。
  ///               有关详细信息，请参阅  和 。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventTags')]
  DNEventTags = type Integer;
  DNEventTagsHelper = record helper for DNEventTags
  public const
    /// <summary>
    ///   指定没有标记，并且等于零。
    /// </summary>
    None = 0;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  /// <summary>
  ///   定义应用于事件的任务。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventTask')]
  DNEventTask = type Integer;
  DNEventTaskHelper = record helper for DNEventTask
  public const
    /// <summary>
    ///   未定义的任务。
    /// </summary>
    None = 0;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定用于检索系统特殊文件夹的目录路径的枚举常数。
  /// </summary>
  [DNTypeName('System.Environment+SpecialFolder')]
  DNEnvironment_SpecialFolder = type Integer;
  DNEnvironment_SpecialFolderHelper = record helper for DNEnvironment_SpecialFolder
  public const
    /// <summary>
    ///   逻辑桌面，而不是物理文件系统位置。
    /// </summary>
    Desktop = 0;
    /// <summary>
    ///   包含用户程序组的目录。
    /// </summary>
    Programs = 2;
    /// <summary>
    ///   “我的文档”文件夹。
    /// </summary>
    MyDocuments = 5;
    /// <summary>
    ///   用作文档的公共储存库的目录。
    /// </summary>
    Personal = 5;
    /// <summary>
    ///   用作用户收藏夹项的公共储存库的目录。
    /// </summary>
    Favorites = 6;
    /// <summary>
    ///   对应于用户的“开始”程序组的目录。
    /// </summary>
    Startup = 7;
    /// <summary>
    ///   包含用户最近使用过的文档的目录。
    /// </summary>
    Recent = 8;
    /// <summary>
    ///   包含“发送”菜单项的目录。
    /// </summary>
    SendTo = 9;
    /// <summary>
    ///   包含“开始”菜单项的目录。
    /// </summary>
    StartMenu = 11;
    /// <summary>
    ///   “我的音乐”文件夹。
    /// </summary>
    MyMusic = 13;
    /// <summary>
    ///   充当属于某个用户的视频的存储库的文件系统目录。
    ///                已在 .NET Framework 4 中添加。
    /// </summary>
    MyVideos = 14;
    /// <summary>
    ///   用于物理上存储桌面上的文件对象的目录。
    /// </summary>
    DesktopDirectory = 16;
    /// <summary>
    ///   “我的电脑”文件夹。
    /// </summary>
    MyComputer = 17;
    /// <summary>
    ///   包含“网上邻居”虚拟文件夹中可能存在的链接对象的文件系统目录。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    NetworkShortcuts = 19;
    /// <summary>
    ///   包含字体的虚拟文件夹。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    Fonts = 20;
    /// <summary>
    ///   用作文档模板的公共储存库的目录。
    /// </summary>
    Templates = 21;
    /// <summary>
    ///   包含在所有用户的“开始”菜单上都出现的程序和文件夹的文件系统目录。
    ///               此特殊文件夹仅对 Windows NT 系统有效。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonStartMenu = 22;
    /// <summary>
    ///   跨应用程序共享的组件的文件夹。
    ///               此特殊文件夹仅对 Windows NT、Windows 2000 和 Windows XP 系统有效。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonPrograms = 23;
    /// <summary>
    ///   包含在所有用户的“开始”文件夹中都出现的程序的文件系统目录。
    ///               此特殊文件夹仅对 Windows NT 系统有效。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonStartup = 24;
    /// <summary>
    ///   包含在所有用户桌面上出现的文件和文件夹的文件系统目录。
    ///               此特殊文件夹仅对 Windows NT 系统有效。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonDesktopDirectory = 25;
    /// <summary>
    ///   用作当前漫游用户的应用程序特定数据的公共储存库的目录。
    /// </summary>
    ApplicationData = 26;
    /// <summary>
    ///   包含“打印机”虚拟文件夹中可能存在的链接对象的文件系统目录。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    PrinterShortcuts = 27;
    /// <summary>
    ///   用作当前非漫游用户使用的应用程序特定数据的公共储存库的目录。
    /// </summary>
    LocalApplicationData = 28;
    /// <summary>
    ///   用作 Internet 临时文件的公共储存库的目录。
    /// </summary>
    InternetCache = 32;
    /// <summary>
    ///   用作 Internet Cookie 的公共储存库的目录。
    /// </summary>
    Cookies = 33;
    /// <summary>
    ///   用作 Internet 历史记录项的公共储存库的目录。
    /// </summary>
    History = 34;
    /// <summary>
    ///   用作所有用户使用的应用程序特定数据的公共储存库的目录。
    /// </summary>
    CommonApplicationData = 35;
    /// <summary>
    ///   Windows 目录或 SYSROOT。
    ///               它与 %windir% 或 %SYSTEMROOT% 环境变量相对应。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    Windows = 36;
    /// <summary>
    ///   “System”目录。
    /// </summary>
    System = 37;
    /// <summary>
    ///   “Program files”目录。
    ///            
    ///              在非 x86 系统中，将  传递到  方法将返回非 x86 程序的路径。
    ///               若要在非 x86 系统上获取 x86 程序文件目录，请使用  成员。
    /// </summary>
    ProgramFiles = 38;
    /// <summary>
    ///   “我的图片”文件夹。
    /// </summary>
    MyPictures = 39;
    /// <summary>
    ///   用户的配置文件文件夹。
    ///               应用程序不应在此级别上创建文件或文件夹；它们应将其数据放在  所引用的位置之下。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    UserProfile = 40;
    /// <summary>
    ///   Windows“System”文件夹。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    SystemX86 = 41;
    /// <summary>
    ///   X86 Program Files 文件夹。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    ProgramFilesX86 = 42;
    /// <summary>
    ///   用于应用程序间共享的组件的目录。
    ///            
    ///              若要在非 x86 系统上获取 x86 常规程序文件目录，请使用  成员。
    /// </summary>
    CommonProgramFiles = 43;
    /// <summary>
    ///   “Program Files”文件夹。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonProgramFilesX86 = 44;
    /// <summary>
    ///   包含所有用户都可以使用的模板的文件系统目录。
    ///               此特殊文件夹仅对 Windows NT 系统有效。
    ///                已在 .NET Framework 4 中添加。
    /// </summary>
    CommonTemplates = 45;
    /// <summary>
    ///   包含所有用户共有的文档的文件系统目录。
    ///               此特殊文件夹仅对装有 Shfolder.dll 的 Windows NT 系统、Windows 95 和 Windows 98 系统有效。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonDocuments = 46;
    /// <summary>
    ///   包含计算机所有用户的管理工具的文件系统目录。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonAdminTools = 47;
    /// <summary>
    ///   用于存储各个用户的管理工具的文件系统目录。
    ///               Microsoft Management Console (MMC) 会将自定义的控制台保存在此目录中，并且此目录将随用户一起漫游。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    AdminTools = 48;
    /// <summary>
    ///   充当所有用户共有的音乐文件的存储库的文件系统目录。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonMusic = 53;
    /// <summary>
    ///   充当所有用户共有的图像文件的存储库的文件系统目录。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonPictures = 54;
    /// <summary>
    ///   充当所有用户共有的视频文件的存储库的文件系统目录。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonVideos = 55;
    /// <summary>
    ///   包含资源数据的文件系统目录。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    Resources = 56;
    /// <summary>
    ///   包含本地化资源数据的文件系统目录。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    LocalizedResources = 57;
    /// <summary>
    ///   为了实现向后兼容，Windows Vista 中可以识别此值，但该特殊文件夹本身已不再使用。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CommonOemLinks = 58;
    /// <summary>
    ///   充当等待写入 CD 的文件的临时区域的文件系统目录。
    ///               已在 .NET Framework 4 中添加。
    /// </summary>
    CDBurning = 59;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定要使用的特殊文件夹获取路径选项。
  /// </summary>
  [DNTypeName('System.Environment+SpecialFolderOption')]
  DNEnvironment_SpecialFolderOption = type Integer;
  DNEnvironment_SpecialFolderOptionHelper = record helper for DNEnvironment_SpecialFolderOption
  public const
    /// <summary>
    ///   验证该文件夹的路径。
    ///               如果该文件夹存在，则返回该路径。
    ///               如果该文件夹不存在，则返回空字符串。
    ///               这是默认行为。
    /// </summary>
    None = 0;
    /// <summary>
    ///   无需验证是否存在的路径，则返回文件夹的路径。
    ///               如果该文件夹位于网络上，指定此选项可减少滞后时间。
    /// </summary>
    DoNotVerify = 16384;
    /// <summary>
    ///   如果不存在，则创建该路径的文件夹。
    /// </summary>
    Create = 32768;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   Set 或 get 操作中指定的位置存储或检索环境变量的位置。
  /// </summary>
  [DNTypeName('System.EnvironmentVariableTarget')]
  DNEnvironmentVariableTarget = type Integer;
  DNEnvironmentVariableTargetHelper = record helper for DNEnvironmentVariableTarget
  public const
    /// <summary>
    ///   环境变量存储或检索与当前进程关联的环境块中。
    /// </summary>
    Process = 0;
    /// <summary>
    ///   存储或检索环境变量  Windows 操作系统注册表中的键。
    /// </summary>
    User = 1;
    /// <summary>
    ///   存储或检索环境变量  Windows 操作系统注册表中的键。
    /// </summary>
    Machine = 2;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定强制垃圾回收的行为。
  /// </summary>
  [DNTypeName('System.GCCollectionMode')]
  DNGCCollectionMode = type Integer;
  DNGCCollectionModeHelper = record helper for DNGCCollectionMode
  public const
    /// <summary>
    ///   此枚举中，这是当前的默认设置 。
    /// </summary>
    Default_ = 0;
    /// <summary>
    ///   强制立即执行垃圾回收。
    /// </summary>
    Forced = 1;
    /// <summary>
    ///   允许垃圾回收器可以确定是否当前时间是最佳若要回收对象。
    /// </summary>
    Optimized = 2;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   提供相关信息，介绍下一次完整垃圾回收通知的当前注册。
  /// </summary>
  [DNTypeName('System.GCNotificationStatus')]
  DNGCNotificationStatus = type Integer;
  DNGCNotificationStatusHelper = record helper for DNGCNotificationStatus
  public const
    /// <summary>
    ///   已成功通知且未取消注册。
    /// </summary>
    Succeeded = 0;
    /// <summary>
    ///   由于某种原因，通知失败。
    /// </summary>
    Failed = 1;
    /// <summary>
    ///   用户已取消当前注册。
    /// </summary>
    Canceled = 2;
    /// <summary>
    ///   参数为  或  指定的时间已过。
    /// </summary>
    Timeout = 3;
    /// <summary>
    ///   此结果可能由以下原因导致：没有垃圾回收通知的当前注册、启用了并发垃圾回收，或  参数指定的时间已过期且未获得垃圾回收通知。
    ///               （若要了解如何禁用并发垃圾回收的，请参阅 <gcConcurrent> 运行时设置。）
    /// </summary>
    NotApplicable = 4;
  end;


  //-------------namespace: System.Globalization----------------
  /// <summary>
  ///   指定一个日历是阳历、 阴历还是二者的组合。
  /// </summary>
  [DNTypeName('System.Globalization.CalendarAlgorithmType')]
  DNCalendarAlgorithmType = type Integer;
  DNCalendarAlgorithmTypeHelper = record helper for DNCalendarAlgorithmType
  public const
    /// <summary>
    ///   未知的日历的基数。
    /// </summary>
    Unknown = 0;
    /// <summary>
    ///   阳历。
    /// </summary>
    SolarCalendar = 1;
    /// <summary>
    ///   阴历日历。
    /// </summary>
    LunarCalendar = 2;
    /// <summary>
    ///   阴阳历。
    /// </summary>
    LunisolarCalendar = 3;
  end;


  //-------------namespace: System.Globalization----------------
  /// <summary>
  ///   定义用于确该年第一周的不同规则。
  /// </summary>
  [DNTypeName('System.Globalization.CalendarWeekRule')]
  DNCalendarWeekRule = type Integer;
  DNCalendarWeekRuleHelper = record helper for DNCalendarWeekRule
  public const
    /// <summary>
    ///   指示该年的第一周开始于该年的第一天，结束之前以下指定一周中的第一天。
    ///               值为 0。
    /// </summary>
    FirstDay = 0;
    /// <summary>
    ///   表示的年份的第一周开始在指定的第一个匹配项，或者在该年的第一天后一周中的第一天。
    ///               值为 1。
    /// </summary>
    FirstFullWeek = 1;
    /// <summary>
    ///   指示该年的第一周是具有四个或多个天之前指定的第一个日期是星期几的第一周。
    ///               值为 2。
    /// </summary>
    FirstFourDayWeek = 2;
  end;


  //-------------namespace: System.Globalization----------------
  /// <summary>
  ///   定义要使用的字符串比较选项 。
  /// </summary>
  [DNTypeName('System.Globalization.CompareOptions')]
  DNCompareOptions = type Integer;
  DNCompareOptionsHelper = record helper for DNCompareOptions
  public const
    /// <summary>
    ///   指示字符串比较的默认选项设置。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指示字符串比较必须忽略大小写。
    /// </summary>
    IgnoreCase = 1;
    /// <summary>
    ///   指示字符串比较必须忽略非空格组合字符，如标注字符。
    ///              Unicode Standard 将组合字符定义为与基的字符，以生成新的字符组合的字符。
    ///               非空格组合字符不在呈现时本身会占用空间位置。
    /// </summary>
    IgnoreNonSpace = 2;
    /// <summary>
    ///   指示字符串比较必须忽略符号，如空白字符、 标点、 货币符号、 百分比符号，数学符号、 的与符号，依次类推。
    /// </summary>
    IgnoreSymbols = 4;
    /// <summary>
    ///   指示字符串比较必须忽略假名类型。
    ///               假名类型引用为日文平假名和片假名字符，表示在日语中的语音。
    ///               平假名用于本机日语表达式和单词，而片假名用于从"计算机"或"Internet"等其他语言借用的词语。
    ///               拼音声音可以表示在平假名和片假名。
    ///               如果选择此值，则一种声音的平假名字符视为相等的同一个声音的片假名字符。
    /// </summary>
    IgnoreKanaType = 8;
    /// <summary>
    ///   指示字符串比较必须忽略字符宽度。
    ///               例如，日语的片假名字符可以编写为全角或半角。
    ///               如果选择此值，则片假名字符的全角形式视为相等半角形式编写的相同字符。
    /// </summary>
    IgnoreWidth = 16;
    /// <summary>
    ///   字符串比较必须忽略大小写，然后执行序号比较。
    ///               此方法相当于将转换为大写使用固定区域性，然后对结果执行序号比较的字符串。
    /// </summary>
    OrdinalIgnoreCase = 268435456;
    /// <summary>
    ///   指示字符串比较必须使用字符串排序算法。
    ///               在字符串排序、 连字符和撇号，以及其他非字母数字的符号，排在字母数字字符之前。
    /// </summary>
    StringSort = 536870912;
    /// <summary>
    ///   指示字符串比较必须使用 Unicode utf-16 编码的连续值的字符串 （由代码单元比较代码单位），从而导致比较速度，但不区分区域性。
    ///               字符串与代码单元 XXXX 开始16 YYYY 开头的字符串之前16, ，如果 XXXX16 小于 YYYY16。
    ///               此值不能与其他组合  值，并必须单独使用。
    /// </summary>
    Ordinal = 1073741824;
  end;


  //-------------namespace: System.Globalization----------------
  /// <summary>
  ///   定义可以使用  方法检索的区域性列表的类型。
  /// </summary>
  [DNTypeName('System.Globalization.CultureTypes')]
  DNCultureTypes = type Integer;
  DNCultureTypesHelper = record helper for DNCultureTypes
  public const
    /// <summary>
    ///   与某种语言关联但并不特定于某一国家/地区的区域性。
    ///               .NET Framework 区域性的名称由派生自 ISO 639-1 的小写双字母代码组成。
    ///               例如：“en”（英语）是非特定区域性。
    /// </summary>
    NeutralCultures = 1;
    /// <summary>
    ///   特定于某一国家/地区的区域性。
    ///               这些区域性的名称遵循 RFC 4646（Windows Vista 和更高版本）。
    ///               格式为“<languagecode2>-<country/regioncode2>”，其中 <languagecode2> 是派生自 ISO 639-1 的小写双字母代码，而 <country/regioncode2> 是派生自 ISO 3166 的大写双字节代码。
    ///               例如，“en-US”表示英语（美国），是特定区域性。
    /// </summary>
    SpecificCultures = 2;
    /// <summary>
    ///   Windows 操作系统中安装的所有区域性。
    ///               请注意，并非 .NET Framework 支持的所有区域性都安装在操作系统中。
    /// </summary>
    InstalledWin32Cultures = 4;
    /// <summary>
    ///   .NET Framework 附带的所有区域性，包括非特定和特定区域性、Windows 操作系统中安装的区域性以及用户创建的自定义区域性。
    ///            
    ///               是包括 、 和  值的复合字段。
    /// </summary>
    AllCultures = 7;
    /// <summary>
    ///   用户创建的自定义区域性。
    /// </summary>
    UserCustomCulture = 8;
    /// <summary>
    ///   用户创建的自定义区域性，可以替换 .NET Framework 附带的区域性。
    /// </summary>
    ReplacementCultures = 16;
    /// <summary>
    ///   此成员已弃用。
    ///               如果用作  方法的参数，该方法则返回空数组。
    /// </summary>
    WindowsOnlyCultures = 32;
    /// <summary>
    ///   此成员已弃用；结合使用此值与  可以返回 .NET Framework 2.0 附带的非特定和特定区域性。
    /// </summary>
    FrameworkCultures = 64;
  end;


  //-------------namespace: System.Globalization----------------
  /// <summary>
  ///   定义用来自定义某些日期和事件分析方法的字符串分析的格式选项。
  /// </summary>
  [DNTypeName('System.Globalization.DateTimeStyles')]
  DNDateTimeStyles = type Integer;
  DNDateTimeStylesHelper = record helper for DNDateTimeStyles
  public const
    /// <summary>
    ///   必须使用默认格式设置选项。
    ///               此值表示 、 和  方法的默认样式。
    /// </summary>
    None = 0;
    /// <summary>
    ///   分析过程中必须忽略前导空白字符，但空白字符以  格式模式出现的情况除外。
    /// </summary>
    AllowLeadingWhite = 1;
    /// <summary>
    ///   分析过程中必须忽略尾随空白字符，但空白字符以  格式模式出现的情况除外。
    /// </summary>
    AllowTrailingWhite = 2;
    /// <summary>
    ///   分析过程中必须忽略字符串中间的额外空白字符，但空白字符以  格式模式出现的情况除外。
    /// </summary>
    AllowInnerWhite = 4;
    /// <summary>
    ///   分析过程中必须忽略字符串中任何位置的额外空白字符，但空白字符以  格式模式出现的情况除外。
    ///               此值是 、 和  值的组合。
    /// </summary>
    AllowWhiteSpaces = 7;
    /// <summary>
    ///   如果已分析的字符串只包含时间而不包含日期，则分析方法会假定为公历日期，其中年 = 1、月 = 1、日 = 1。
    ///               如果未使用此值，则假定为当前日期。
    /// </summary>
    NoCurrentDateDefault = 8;
    /// <summary>
    ///   以协调世界时 (UTC) 的形式返回日期和时间。
    ///               如果输入字符串通过时区说明符或  表示本地时间，则会将日期和时间从本地时间转换为 UTC。
    ///               如果输入字符串通过时区说明符或  表示 UTC 时间，则不会进行任何转换。
    ///               如果输入字符串不表示本地或 UTC 时间，则不会进行任何转换，并且生成的  属性为 。
    /// </summary>
    AdjustToUniversal = 16;
    /// <summary>
    ///   如果分析的字符串中未指定任何时区，则假定该字符串表示本地时间。
    /// </summary>
    AssumeLocal = 32;
    /// <summary>
    ///   如果分析的字符串中未指定任何时区，则假定该字符串表示 UTC。
    /// </summary>
    AssumeUniversal = 64;
    /// <summary>
    ///   当使用“o”或“r”标准格式说明符将  对象转换为字符串时，将保存日期的  字段，然后将该字符串转换回  对象。
    /// </summary>
    RoundtripKind = 128;
  end;


  //-------------namespace: System.Globalization----------------
  /// <summary>
  ///   指定数字区域性特定的显示方式。
  /// </summary>
  [DNTypeName('System.Globalization.DigitShapes')]
  DNDigitShapes = type Integer;
  DNDigitShapesHelper = record helper for DNDigitShapes
  public const
    /// <summary>
    ///   数字形状取决于相同的输出中前面的文本。
    ///               欧洲数字拉丁文; 泰语阿拉伯-印度文数字按照阿拉伯语文本;然后泰语数字按照泰语文本。
    /// </summary>
    Context = 0;
    /// <summary>
    ///   不会更改数字形状。
    ///               保持完整的 Unicode 兼容性。
    /// </summary>
    None = 1;
    /// <summary>
    ///   数字形状是从 0 到 9 的数字的本机等效项。
    ///               从 0 到 9 的 ASCII 数字将由等效国家/地区的本地数字替换。
    /// </summary>
    NativeNational = 2;
  end;


  //-------------namespace: System.Globalization----------------
  /// <summary>
  ///   定义其他语言版本的公历。
  /// </summary>
  [DNTypeName('System.Globalization.GregorianCalendarTypes')]
  DNGregorianCalendarTypes = type Integer;
  DNGregorianCalendarTypesHelper = record helper for DNGregorianCalendarTypes
  public const
    /// <summary>
    ///   指公历日历中，基于语言的本地化版本  ，它使用 。
    /// </summary>
    Localized = 1;
    /// <summary>
    ///   指的是美国公历日历以来的英文版。
    /// </summary>
    USEnglish = 2;
    /// <summary>
    ///   是指中东法语版本的公历日历。
    /// </summary>
    MiddleEastFrench = 9;
    /// <summary>
    ///   指公历日历以来的阿拉伯语版本。
    /// </summary>
    Arabic = 10;
    /// <summary>
    ///   指公历日历以来的转译英语版本。
    /// </summary>
    TransliteratedEnglish = 11;
    /// <summary>
    ///   是指转译法语版本的公历日历。
    /// </summary>
    TransliteratedFrench = 12;
  end;


  //-------------namespace: System.Globalization----------------
  /// <summary>
  ///   确定允许传递给数值字符串参数中的样式  和  整型和浮点型数值类型的方法。
  /// </summary>
  [DNTypeName('System.Globalization.NumberStyles')]
  DNNumberStyles = type Integer;
  DNNumberStylesHelper = record helper for DNNumberStyles
  public const
    /// <summary>
    ///   指示，任何样式元素，如前导空格或尾随空白、 千位分隔符或小数分隔符，可出现在所分析的字符串。
    ///               要分析的字符串必须包含仅整型十进制数字。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指示前导空白字符可出现在所分析的字符串。
    ///               具有有效的空白字符的 Unicode 值 U + 0009、 U + 000A、 U + 000B、 U + 000 C，U + 000d、 和 U + 0020。
    ///               请注意，这是为其字符的子集  方法将返回 。
    /// </summary>
    AllowLeadingWhite = 1;
    /// <summary>
    ///   指示尾随空白字符可出现在所分析的字符串。
    ///               具有有效的空白字符的 Unicode 值 U + 0009、 U + 000A、 U + 000B、 U + 000 C，U + 000d、 和 U + 0020。
    ///               请注意，这是为其字符的子集  方法将返回 。
    /// </summary>
    AllowTrailingWhite = 2;
    /// <summary>
    ///   指示数字的字符串可以具有前导符号。
    ///               有效的前导符号字符由  和  属性。
    /// </summary>
    AllowLeadingSign = 4;
    /// <summary>
    ///   指示 , ，, ，和  使用样式。
    ///               这是复合数字样式。
    /// </summary>
    Integer = 7;
    /// <summary>
    ///   指示数字的字符串可以具有尾随号。
    ///               有效的结尾的符号字符由  和  属性。
    /// </summary>
    AllowTrailingSign = 8;
    /// <summary>
    ///   指示数字的字符串可以有一对括号内包含数。
    ///               圆括号指示要分析的字符串表示负数。
    /// </summary>
    AllowParentheses = 16;
    /// <summary>
    ///   指示数字的字符串可以有一个小数点。
    ///               如果  值包括  标志和分析的字符串包括货币符号，则小数分隔符字符由  属性。
    ///               否则，由小数点分隔符字符  属性。
    /// </summary>
    AllowDecimalPoint = 32;
    /// <summary>
    ///   指示数字的字符串可以具有组分隔符，例如将百数千位与的符号。
    ///               如果  值包括  标志和字符串要分析包含货币符号，有效的组分隔符字符由  属性，并在每个组中的数字个数由  属性。
    ///               否则，由有效的组分隔符字符  属性，并在每个组中的数字个数由  属性。
    /// </summary>
    AllowThousands = 64;
    /// <summary>
    ///   指示 , ，, ，, ，, ，, ，和  使用样式。
    ///               这是复合数字样式。
    /// </summary>
    Number = 111;
    /// <summary>
    ///   指示数字的字符串可以在指数记数法。
    ///               标志允许分析的字符串包含以"E"或"e"字符开头，后面跟着正或负号可选和一个整数指数。
    ///               换而言之，它已成功分析该窗体中的字符串 nnnExx, ，nnnE +xx, ，和 nnnE-xx。
    ///               它不允许小数分隔符或登录的有效位数或尾数;若要允许这些元素中的字符串进行分析，请使用  和  标志，或者使用包含这些单独的标志的组合样式。
    /// </summary>
    AllowExponent = 128;
    /// <summary>
    ///   指示 , ，, ，, ，, ，和  使用样式。
    ///               这是复合数字样式。
    /// </summary>
    Float = 167;
    /// <summary>
    ///   指示数字的字符串可以包含货币符号。
    ///               有效的货币符号取决于  属性。
    /// </summary>
    AllowCurrencySymbol = 256;
    /// <summary>
    ///   指示以外的所有样式  和  习惯。
    ///               这是复合数字样式。
    /// </summary>
    Currency = 383;
    /// <summary>
    ///   指示以外的所有样式  习惯。
    ///               这是复合数字样式。
    /// </summary>
    Any = 511;
    /// <summary>
    ///   指示数字的字符串表示十六进制值。
    ///               有效的十六进制值包括数字 0-9 和 A-F 和 a-f 的十六进制数字。
    ///               使用此样式分析的字符串不能带有"0x"或"& h"前缀。
    ///               一个字符串，用分列  样式将始终被解释为十六进制值。
    ///               可以与组合的唯一标志  是  和 。
    ///               枚举包含复合样式 , ，其中包含以下三个标志。
    /// </summary>
    AllowHexSpecifier = 512;
    /// <summary>
    ///   指示 , ，, ，和  使用样式。
    ///               这是复合数字样式。
    /// </summary>
    HexNumber = 515;
  end;


  //-------------namespace: System.Globalization----------------
  /// <summary>
  ///   定义自定义的字符串分析的格式设置选项  和  方法。
  /// </summary>
  [DNTypeName('System.Globalization.TimeSpanStyles')]
  DNTimeSpanStyles = type Integer;
  DNTimeSpanStylesHelper = record helper for DNTimeSpanStyles
  public const
    /// <summary>
    ///   指示存在负号时才输入被解释为负时间间隔。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指示输入始终解释为负时间间隔。
    /// </summary>
    AssumeNegative = 1;
  end;


  //-------------namespace: System.Globalization----------------
  /// <summary>
  ///   定义字符的 Unicode 类别。
  /// </summary>
  [DNTypeName('System.Globalization.UnicodeCategory')]
  DNUnicodeCategory = type Integer;
  DNUnicodeCategoryHelper = record helper for DNUnicodeCategory
  public const
    /// <summary>
    ///   大写字母。
    ///               由 Unicode 代码“Lu”（字母，大写）表示。
    ///               值为 0。
    /// </summary>
    UppercaseLetter = 0;
    /// <summary>
    ///   小写字母。
    ///               由 Unicode 代码“Ll”（字母，小写）表示。
    ///               值为 1。
    /// </summary>
    LowercaseLetter = 1;
    /// <summary>
    ///   词首字母大写的字母。
    ///               由 Unicode 代码“Lt”（字母，词首字母大写）表示。
    ///               值为 2。
    /// </summary>
    TitlecaseLetter = 2;
    /// <summary>
    ///   修饰符字母字符，它是独立式的间距字符，指示前面字母的修改。
    ///               由 Unicode 代码“Lm”（字母，修饰符）表示。
    ///               值为 3。
    /// </summary>
    ModifierLetter = 3;
    /// <summary>
    ///   不属于大写字母、小写字母、词首字母大写或修饰符字母的字母。
    ///               由 Unicode 代码“Lo”（字母，其他）表示。
    ///               值为 4。
    /// </summary>
    OtherLetter = 4;
    /// <summary>
    ///   指示基字符的修改的不占位字符。
    ///               由 Unicode 代码“Mn”（符号，不占位）表示。
    ///               值为 5。
    /// </summary>
    NonSpacingMark = 5;
    /// <summary>
    ///   间隔字符，它指示基字符的修改并影响基字符的标志符号的宽度。
    ///               由 Unicode 代码“Mc”（符号，间隔组合）表示。
    ///               值为 6。
    /// </summary>
    SpacingCombiningMark = 6;
    /// <summary>
    ///   封闭符号字符，它是将基字符前面的所有字符（包括基字符）括起来的不占位字符。
    ///               由 Unicode 代码“Me”（符号，封闭）表示。
    ///               值为 7。
    /// </summary>
    EnclosingMark = 7;
    /// <summary>
    ///   十进制数字字符，即范围 0 到 9 内的字符。
    ///               由 Unicode 代码“Nd”（数字，十进制数字）表示。
    ///               值为 8。
    /// </summary>
    DecimalDigitNumber = 8;
    /// <summary>
    ///   由字母表示的数字，而不是十进制数字，例如，罗马数字 5 由字母“V”表示。
    ///               此指示符由 Unicode 代码“Nl”（数字，字母）表示。
    ///               值为 9。
    /// </summary>
    LetterNumber = 9;
    /// <summary>
    ///   既不是十进制数字也不是字母数字的数字，例如分数 1/2。
    ///               此指示符由 Unicode 代码“No”（数字，其他）表示。
    ///               值为 10。
    /// </summary>
    OtherNumber = 10;
    /// <summary>
    ///   没有标志符号但不属于控制或格式字符的空格字符。
    ///               由 Unicode 代码“Zs”（分隔符，空格）表示。
    ///               值为 11。
    /// </summary>
    SpaceSeparator = 11;
    /// <summary>
    ///   用于分隔文本各行的字符。
    ///               由 Unicode 代码“Zl”（分隔符，行）表示。
    ///               值为 12。
    /// </summary>
    LineSeparator = 12;
    /// <summary>
    ///   用于分隔段落的字符。
    ///               由 Unicode 代码“Zp”（分隔符，段落）表示。
    ///               值为 13。
    /// </summary>
    ParagraphSeparator = 13;
    /// <summary>
    ///   控制代码字符，其 Unicode 值为 U+007F，或者属于 U+0000 到 U+001F 或 U+0080 到 U+009F 的范围内。
    ///               由 Unicode 代码“Cc”（其他，控制）表示。
    ///               值为 14。
    /// </summary>
    Control = 14;
    /// <summary>
    ///   格式字符，它影响文本的布局或文本处理操作，但通常不呈现。
    ///               由 Unicode 代码“Cf”（其他，格式）表示。
    ///               值为 15。
    /// </summary>
    Format = 15;
    /// <summary>
    ///   高代理项或低代理项字符。
    ///               代理项代码值在 U+D800 到 U+DFFF 的范围内。
    ///               由 Unicode 代码“Cs”（其他，代理项）表示。
    ///               值为 16。
    /// </summary>
    Surrogate = 16;
    /// <summary>
    ///   专用字符，其 Unicode 值在在 U+E000 到 U+F8FF 的范围内。
    ///               由 Unicode 代码“Co”（其他，专用）表示。
    ///               值是 17。
    /// </summary>
    PrivateUse = 17;
    /// <summary>
    ///   连接两个字符的连接符标点字符。
    ///               由 Unicode 代码“Pc”（标点，连接符）表示。
    ///               值为 18。
    /// </summary>
    ConnectorPunctuation = 18;
    /// <summary>
    ///   短划线或连字符字符。
    ///               由 Unicode 代码“Pd”（标点，短划线）表示。
    ///               值为 19。
    /// </summary>
    DashPunctuation = 19;
    /// <summary>
    ///   成对的标点符号（例如括号、方括号和大括号）的开始字符。
    ///               由 Unicode 代码“Ps”（标点，开始）表示。
    ///               值为 20。
    /// </summary>
    OpenPunctuation = 20;
    /// <summary>
    ///   成对的标点符号（例如括号、方括号和大括号）的结束字符。
    ///               由 Unicode 代码“Pe”（标点，结束）表示。
    ///               值为 21。
    /// </summary>
    ClosePunctuation = 21;
    /// <summary>
    ///   左引号或前引号字符。
    ///               由 Unicode 代码“Pi”（标点，前引号）表示。
    ///               值为 22。
    /// </summary>
    InitialQuotePunctuation = 22;
    /// <summary>
    ///   右引号或后引号字符。
    ///               由 Unicode 代码“Pf”（标点，后引号）表示。
    ///               值为 23。
    /// </summary>
    FinalQuotePunctuation = 23;
    /// <summary>
    ///   不属于连接符、短划线、开始标点、结束标点、前引号或后引号的标点字符。
    ///               由 Unicode 代码“Po”（标点，其他）表示。
    ///               值为 24。
    /// </summary>
    OtherPunctuation = 24;
    /// <summary>
    ///   数学符号字符，如“+”或“=”。
    ///               由 Unicode 代码“Sm”（符号，数学）表示。
    ///               值为 25。
    /// </summary>
    MathSymbol = 25;
    /// <summary>
    ///   货币符号字符。
    ///               由 Unicode 代码“Sc”（符号，货币）表示。
    ///               值为 26。
    /// </summary>
    CurrencySymbol = 26;
    /// <summary>
    ///   修饰符符号字符，它指示环绕字符的修改。
    ///               例如，分数斜线号指示其左侧的数字为分子，右侧的数字为分母。
    ///               此指示符由 Unicode 代码“Sk”（符号，修饰符）表示。
    ///               值为 27。
    /// </summary>
    ModifierSymbol = 27;
    /// <summary>
    ///   不属于数学符号、货币符号或修饰符符号的符号字符。
    ///               由 Unicode 代码“So”（符号，其他）表示。
    ///               值为 28。
    /// </summary>
    OtherSymbol = 28;
    /// <summary>
    ///   未分配给任何 Unicode 类别的字符。
    ///               由 Unicode 代码“Cn”（其他，未分配）表示。
    ///               值为 29。
    /// </summary>
    OtherNotAssigned = 29;
  end;


  //-------------namespace: System.IO----------------
  /// <summary>
  ///   定义常数驱动器类型，包括 CDRom、 固定、 网络、 NoRootDirectory、 Ram、 可移动和未知。
  /// </summary>
  [DNTypeName('System.IO.DriveType')]
  DNDriveType = type Integer;
  DNDriveTypeHelper = record helper for DNDriveType
  public const
    /// <summary>
    ///   驱动器的类型是未知的。
    /// </summary>
    Unknown = 0;
    /// <summary>
    ///   驱动器没有根目录。
    /// </summary>
    NoRootDirectory = 1;
    /// <summary>
    ///   驱动器是可移动存储设备，如软盘驱动器或 USB 闪存驱动器。
    /// </summary>
    Removable = 2;
    /// <summary>
    ///   驱动器是固定的磁盘。
    /// </summary>
    Fixed = 3;
    /// <summary>
    ///   驱动器是网络驱动器。
    /// </summary>
    Network = 4;
    /// <summary>
    ///   驱动器是一种光盘设备，如 CD 或 DVD rom。
    /// </summary>
    CDRom = 5;
    /// <summary>
    ///   驱动器是 RAM 磁盘。
    /// </summary>
    Ram = 6;
  end;


  //-------------namespace: System.IO----------------
  /// <summary>
  ///   对于读、 写或读/写访问的文件中定义的常数。
  /// </summary>
  [DNTypeName('System.IO.FileAccess')]
  DNFileAccess = type Integer;
  DNFileAccessHelper = record helper for DNFileAccess
  public const
    /// <summary>
    ///   对文件的读取访问权限。
    ///               可以从文件读取数据。
    ///               将与结合起来  为读/写访问。
    /// </summary>
    Read = 1;
    /// <summary>
    ///   对文件的写入访问权限。
    ///               数据可以写入该文件。
    ///               将与结合起来  为读/写访问。
    /// </summary>
    Write = 2;
    /// <summary>
    ///   读取和写入到文件的访问。
    ///               可以写入和从文件中读取数据。
    /// </summary>
    ReadWrite = 3;
  end;


  //-------------namespace: System.IO----------------
  /// <summary>
  ///   提供文件和目录的属性。
  /// </summary>
  [DNTypeName('System.IO.FileAttributes')]
  DNFileAttributes = type Integer;
  DNFileAttributesHelper = record helper for DNFileAttributes
  public const
    /// <summary>
    ///   该文件是只读的。
    /// </summary>
    ReadOnly_ = 1;
    /// <summary>
    ///   该文件隐藏的并因此不包括在普通目录列表。
    /// </summary>
    Hidden = 2;
    /// <summary>
    ///   该文件是一个系统文件。
    ///               即，该文件是操作系统的一部分或由操作系统以独占方式使用。
    /// </summary>
    System = 4;
    /// <summary>
    ///   该文件是一个目录。
    /// </summary>
    Directory = 16;
    /// <summary>
    ///   该文件是用于备份或删除的候选版本。
    /// </summary>
    Archive = 32;
    /// <summary>
    ///   留待将来使用。
    /// </summary>
    Device = 64;
    /// <summary>
    ///   该文件是一个没有任何特殊属性的标准文件。
    ///               此属性是单独使用时才有效。
    /// </summary>
    Normal = 128;
    /// <summary>
    ///   该文件是临时的。
    ///               临时文件包含应用程序正在执行，但不需要在应用程序完成后需要的数据。
    ///               文件系统尝试保留所有数据在内存中以更快地访问，而不是将数据刷新回大容量存储。
    ///               一旦不再需要应由应用程序删除临时文件。
    /// </summary>
    Temporary = 256;
    /// <summary>
    ///   该文件是稀疏文件。
    ///               稀疏文件是通常较大的数据包含，通常为零。
    /// </summary>
    SparseFile = 512;
    /// <summary>
    ///   该文件包含一个重新分析点，这是用户定义数据与文件或目录相关联的块。
    /// </summary>
    ReparsePoint = 1024;
    /// <summary>
    ///   对文件进行压缩。
    /// </summary>
    Compressed = 2048;
    /// <summary>
    ///   该文件处于脱机状态。
    ///               该文件的数据不立即可用。
    /// </summary>
    Offline = 4096;
    /// <summary>
    ///   该文件将不会通过索引服务的操作系统的内容索引。
    /// </summary>
    NotContentIndexed = 8192;
    /// <summary>
    ///   文件或目录进行加密。
    ///               对于文件，这意味着在文件中的所有数据进行都加密。
    ///               对于目录，这意味着加密新创建的文件和目录的默认值。
    /// </summary>
    Encrypted = 16384;
    /// <summary>
    ///   文件或目录包括数据完整性支持。
    ///               当此值应用于文件时，文件中的所有数据流量都具有完整性支持。
    ///               如果此值应用于一个目录中，所有新的文件和子目录，在该目录中，默认情况下，将包括完整性的支持。
    /// </summary>
    IntegrityStream = 32768;
    /// <summary>
    ///   数据完整性扫描中排除的文件或目录。
    ///               此值默认情况下，应用于一个目录，所有新的文件和该目录中的子目录将从数据完整性中排除。
    /// </summary>
    NoScrubData = 131072;
  end;


  //-------------namespace: System.IO----------------
  /// <summary>
  ///   指定操作系统打开文件的方式。
  /// </summary>
  [DNTypeName('System.IO.FileMode')]
  DNFileMode = type Integer;
  DNFileModeHelper = record helper for DNFileMode
  public const
    /// <summary>
    ///   指定操作系统应创建一个新的文件。
    ///               这要求  权限。
    ///               如果该文件已存在，  则会引发异常。
    /// </summary>
    CreateNew = 1;
    /// <summary>
    ///   指定操作系统应创建一个新的文件。
    ///               如果该文件已存在，则会覆盖它。
    ///               这要求  权限。
    ///               等效于请求，如果该文件不存在，则使用 ; 否则为使用 。
    ///               如果该文件已存在但为隐藏的文件，  则会引发异常。
    /// </summary>
    Create = 2;
    /// <summary>
    ///   指定操作系统应打开现有文件。
    ///               若要打开该文件的能力是依赖于指定的值  枚举。
    ///               一个  如果文件不存在将引发异常。
    /// </summary>
    Open = 3;
    /// <summary>
    ///   指定操作系统应打开一个文件，是否它存在，则否则，应创建一个新的文件。
    ///               如果使用打开该文件 , ， 权限是必需的。
    ///               如果文件访问是 , ， 权限是必需的。
    ///               如果使用打开该文件 , ，这两个  和  权限是必需的。
    /// </summary>
    OpenOrCreate = 4;
    /// <summary>
    ///   指定操作系统应打开现有文件。
    ///               当打开文件时，应被截断，以便其大小为零字节。
    ///               这要求  权限。
    ///               尝试从文件中读取使用打开  导致  异常。
    /// </summary>
    Truncate = 5;
    /// <summary>
    ///   如果它存在，并且查找到该文件的末尾，或者创建一个新文件，请打开该文件。
    ///               这要求  权限。
    ///               可以仅在结合使用 。
    ///               尝试查找该文件将引发结束之前将其置于  异常，并且任何尝试读取失败，将引发  异常。
    /// </summary>
    Append = 6;
  end;


  //-------------namespace: System.IO----------------
  /// <summary>
  ///   表示用于创建的高级选项  对象。
  /// </summary>
  [DNTypeName('System.IO.FileOptions')]
  DNFileOptions = type Integer;
  DNFileOptionsHelper = record helper for DNFileOptions
  public const
    /// <summary>
    ///   指示在创建时，应使用任何其他选项  对象。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指示文件已加密，可以解密只能通过使用加密所用的相同用户帐户。
    /// </summary>
    Encrypted = 16384;
    /// <summary>
    ///   指示不再使用时自动删除某个文件。
    /// </summary>
    DeleteOnClose = 67108864;
    /// <summary>
    ///   指示该文件将从开头到末尾顺序访问。
    ///               系统可以以此作为一个提示，以优化文件缓存。
    ///               如果应用程序移动随机访问的文件指针最佳缓存可能不会发生;但是，仍然保证正确操作。
    /// </summary>
    SequentialScan = 134217728;
    /// <summary>
    ///   指示随机访问该文件。
    ///               系统可以以此作为一个提示，以优化文件缓存。
    /// </summary>
    RandomAccess = 268435456;
    /// <summary>
    ///   表示可以使用异步读取和写入的文件。
    /// </summary>
    Asynchronous = 1073741824;
    /// <summary>
    ///   指示系统应编写通过任何中间缓存并直接转到磁盘。
    /// </summary>
    WriteThrough = -2147483648;
  end;


  //-------------namespace: System.IO----------------
  /// <summary>
  ///   包含用于控制的访问其他类型的常数  对象可以具有相同的文件。
  /// </summary>
  [DNTypeName('System.IO.FileShare')]
  DNFileShare = type Integer;
  DNFileShareHelper = record helper for DNFileShare
  public const
    /// <summary>
    ///   拒绝共享当前文件。
    ///               在关闭文件之前，任何请求打开的文件 （此进程或另一个进程） 将失败。
    /// </summary>
    None = 0;
    /// <summary>
    ///   允许以后打开文件进行读取。
    ///               如果未指定此标志，任何请求打开文件进行读取 （通过这一过程或另一个进程） 无法关闭文件之前。
    ///               但是，即使指定了此标志，其他权限可能仍然需要访问该文件。
    /// </summary>
    Read = 1;
    /// <summary>
    ///   允许以后打开文件进行写入。
    ///               如果未指定此标志，任何请求打开文件进行写入 （通过这一过程或另一个进程） 无法关闭文件之前。
    ///               但是，即使指定了此标志，其他权限可能仍然需要访问该文件。
    /// </summary>
    Write = 2;
    /// <summary>
    ///   允许以后打开的文件进行读取或写入。
    ///               如果未指定此标志，任何请求打开文件进行读取或写入 （通过这一过程或另一个进程） 将失败，在关闭文件之前。
    ///               但是，即使指定了此标志，其他权限可能仍然需要访问该文件。
    /// </summary>
    ReadWrite = 3;
    /// <summary>
    ///   允许以后删除文件。
    /// </summary>
    Delete = 4;
    /// <summary>
    ///   使文件句柄由子进程继承。
    ///               这是不直接支持 Win32。
    /// </summary>
    Inheritable = 16;
  end;


  //-------------namespace: System.IO.IsolatedStorage----------------
  /// <summary>
  ///   枚举独立的存储范围所支持的级别 。
  /// </summary>
  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageScope')]
  DNIsolatedStorageScope = type Integer;
  DNIsolatedStorageScopeHelper = record helper for DNIsolatedStorageScope
  public const
    /// <summary>
    ///   未使用独立的存储。
    /// </summary>
    None = 0;
    /// <summary>
    ///   按用户标识作用域的独立的存储。
    /// </summary>
    User = 1;
    /// <summary>
    ///   作用域限定为应用程序域标识的独立的存储。
    /// </summary>
    Domain = 2;
    /// <summary>
    ///   作用域限定为程序集的标识的独立的存储。
    /// </summary>
    Assembly = 4;
    /// <summary>
    ///   独立存储区可以放置在文件系统中可以漫游 （如果基础的操作系统上启用漫游用户数据） 上的位置。
    /// </summary>
    Roaming = 8;
    /// <summary>
    ///   该计算机范围内的独立的存储。
    /// </summary>
    Machine = 16;
    /// <summary>
    ///   作用域限定为该应用程序的独立的存储。
    /// </summary>
    Application = 32;
  end;


  //-------------namespace: System.IO.IsolatedStorage----------------
  /// <summary>
  ///   指定影响其安全性在独立存储中的选项。
  /// </summary>
  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageSecurityOptions')]
  DNIsolatedStorageSecurityOptions = type Integer;
  DNIsolatedStorageSecurityOptionsHelper = record helper for DNIsolatedStorageSecurityOptions
  public const
    /// <summary>
    ///   可以独立存储的增加的配额。
    /// </summary>
    IncreaseQuotaForApplication = 4;
  end;


  //-------------namespace: System.IO----------------
  /// <summary>
  ///   指定是否搜索当前目录中，或当前目录和所有子目录。
  /// </summary>
  [DNTypeName('System.IO.SearchOption')]
  DNSearchOption = type Integer;
  DNSearchOptionHelper = record helper for DNSearchOption
  public const
    /// <summary>
    ///   在搜索操作中包括仅当前目录。
    /// </summary>
    TopDirectoryOnly = 0;
    /// <summary>
    ///   在搜索操作中包括当前目录及其所有的子目录。
    ///               此选项在搜索中包括如装入的驱动器和符号链接的重新分析点。
    /// </summary>
    AllDirectories = 1;
  end;


  //-------------namespace: System.IO----------------
  /// <summary>
  ///   指定要用于查找的流中的位置。
  /// </summary>
  [DNTypeName('System.IO.SeekOrigin')]
  DNSeekOrigin = type Integer;
  DNSeekOriginHelper = record helper for DNSeekOrigin
  public const
    /// <summary>
    ///   指定流的开始位置。
    /// </summary>
    Begin_ = 0;
    /// <summary>
    ///   指定流中的当前位置。
    /// </summary>
    Current = 1;
    /// <summary>
    ///   指定流的末尾。
    /// </summary>
    End_ = 2;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   与  类配合使用的枚举，用于指定可执行文件的加载程序优化。
  /// </summary>
  [DNTypeName('System.LoaderOptimization')]
  DNLoaderOptimization = type Integer;
  DNLoaderOptimizationHelper = record helper for DNLoaderOptimization
  public const
    /// <summary>
    ///   表示未指定任何针对共享内部资源的优化。
    ///               如果默认域或宿主接口指定了一种优化，那么加载程序将使用该优化；否则，加载程序将使用 。
    /// </summary>
    NotSpecified = 0;
    /// <summary>
    ///   表示应用程序将可能只有单个域，并且加载程序不可以跨应用程序域共享内部资源。
    /// </summary>
    SingleDomain = 1;
    /// <summary>
    ///   表示应用程序将可能有多个使用相同代码的域，并且加载程序必须跨应用程序域最大限度地共享内部资源。
    /// </summary>
    MultiDomain = 2;
    /// <summary>
    ///   表示应用程序可能将承载多个域中的唯一代码，加载程序必须跨应用程序域共享资源，仅限已添加到全局程序集缓存的全局可用（具有强名称）程序集。
    /// </summary>
    MultiDomainHost = 3;
    /// <summary>
    ///   请勿使用。
    ///               该掩码选择与域相关的值，筛选出未使用的  标志。
    /// </summary>
    DomainMask = 3;
    /// <summary>
    ///   被公共语言运行时忽略。
    /// </summary>
    DisallowBindings = 4;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定数学舍入方法应如何处理两个数字间的中间值。
  /// </summary>
  [DNTypeName('System.MidpointRounding')]
  DNMidpointRounding = type Integer;
  DNMidpointRoundingHelper = record helper for DNMidpointRounding
  public const
    /// <summary>
    ///   当一个数字是其他两个数字的中间值时，会将其舍入为最接近的偶数。
    /// </summary>
    ToEven = 0;
    /// <summary>
    ///   当一个数字是其他两个数字的中间值时，会将其舍入为两个值中绝对值较小的值。
    /// </summary>
    AwayFromZero = 1;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   标识程序集所支持的操作系统（或平台）。
  /// </summary>
  [DNTypeName('System.PlatformID')]
  DNPlatformID = type Integer;
  DNPlatformIDHelper = record helper for DNPlatformID
  public const
    /// <summary>
    ///   操作系统为 Win32s。
    ///               Win32s 是在 16 位版本的 Windows 上运行的层，它提供对 32 位应用程序的访问。
    /// </summary>
    Win32S = 0;
    /// <summary>
    ///   操作系统为 Windows 95 或 Windows 98。
    /// </summary>
    Win32Windows = 1;
    /// <summary>
    ///   操作系统为 Windows NT 或更新版本。
    /// </summary>
    Win32NT = 2;
    /// <summary>
    ///   操作系统为 Windows CE。
    /// </summary>
    WinCE = 3;
    /// <summary>
    ///   操作系统为 Unix。
    /// </summary>
    Unix = 4;
    /// <summary>
    ///   开发平台为 Xbox 360。
    /// </summary>
    Xbox = 5;
    /// <summary>
    ///   操作系统为 Macintosh。
    /// </summary>
    MacOSX = 6;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   提供有关程序集中包含的代码类型的信息。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyContentType')]
  DNAssemblyContentType = type Integer;
  DNAssemblyContentTypeHelper = record helper for DNAssemblyContentType
  public const
    /// <summary>
    ///   该程序集包含.NET Framework 代码。
    /// </summary>
    Default_ = 0;
    /// <summary>
    ///   该程序集包含 Windows 运行时 代码。
    /// </summary>
    WindowsRuntime = 1;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   提供以下信息  引用。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyNameFlags')]
  DNAssemblyNameFlags = type Integer;
  DNAssemblyNameFlagsHelper = record helper for DNAssemblyNameFlags
  public const
    /// <summary>
    ///   指定任何标志有效。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指定从完整的公钥，而不是公钥标记构成的公共密钥。
    /// </summary>
    PublicKey = 1;
    /// <summary>
    ///   指定程序集可以重定向在运行时的程序集从不同的发布服务器。
    ///               此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    /// </summary>
    Retargetable = 256;
    /// <summary>
    ///   指定程序集禁用在实时 (JIT) 编译器优化。
    ///               这是含义的建议的成员名称正好相反。
    /// </summary>
    EnableJITcompileOptimizer = 16384;
    /// <summary>
    ///   指定程序集启用跟踪，在实时 (JIT) 编译器。
    /// </summary>
    EnableJITcompileTracking = 32768;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   指定控制绑定以及通过反射执行成员和类型搜索的方式的标记。
  /// </summary>
  [DNTypeName('System.Reflection.BindingFlags')]
  DNBindingFlags = type Integer;
  DNBindingFlagsHelper = record helper for DNBindingFlags
  public const
    /// <summary>
    ///   指定未定义任何绑定标志。
    /// </summary>
    Default_ = 0;
    /// <summary>
    ///   指定在绑定时不应考虑成员名称的大小写。
    /// </summary>
    IgnoreCase = 1;
    /// <summary>
    ///   指定只应考虑在所提供类型的层次结构级别上声明的成员。
    ///               不考虑继承的成员。
    /// </summary>
    DeclaredOnly = 2;
    /// <summary>
    ///   指定实例成员要包括在搜索中。
    /// </summary>
    Instance = 4;
    /// <summary>
    ///   指定静态成员要包括在搜索中。
    /// </summary>
    Static_ = 8;
    /// <summary>
    ///   指定公共成员要包括在搜索中。
    /// </summary>
    Public_ = 16;
    /// <summary>
    ///   指定非公共成员要包括在搜索中。
    /// </summary>
    NonPublic = 32;
    /// <summary>
    ///   指定应返回层次结构往上的公共成员和受保护静态成员。
    ///               不返回继承类中的私有静态成员。
    ///               静态成员包括字段、方法、事件和属性。
    ///               不支持嵌套类型。
    /// </summary>
    FlattenHierarchy = 64;
    /// <summary>
    ///   指定要调用的方法。
    ///               这不必是构造函数或类型初始值设定项。
    ///            
    ///              此标志会传递给  方法以调用方法。
    /// </summary>
    InvokeMethod = 256;
    /// <summary>
    ///   指定反射应创建指定类型的实例。
    ///               调用与给定参数匹配的构造函数。
    ///               忽略提供的成员名称。
    ///               如果未指定查找的类型，则应用“（实例 | 公共）”。
    ///               不能调用类型初始值设定项。
    ///            
    ///              此标志会传递给  方法以调用构造函数。
    /// </summary>
    CreateInstance = 512;
    /// <summary>
    ///   指定应返回指定字段的值。
    ///            
    ///              此标志会传递给  方法以获取字段值。
    /// </summary>
    GetField = 1024;
    /// <summary>
    ///   指定应设置指定字段的值。
    ///            
    ///              此标志会传递给  方法以设置字段值。
    /// </summary>
    SetField = 2048;
    /// <summary>
    ///   指定应返回指定属性的值。
    ///            
    ///              此标志会传递给  方法以调用属性 getter。
    /// </summary>
    GetProperty = 4096;
    /// <summary>
    ///   指定应设置指定属性的值。
    ///               对于 COM 属性，指定此绑定标志等效于指定  和 。
    ///            
    ///              此标志会传递给  方法以调用属性 setter。
    /// </summary>
    SetProperty = 8192;
    /// <summary>
    ///   指定应调用 COM 对象上的  成员。
    ///               指定使用值的属性设置函数。
    ///               如果属性同时具有  和  并且你需要区分调用哪一个，请使用 。
    /// </summary>
    PutDispProperty = 16384;
    /// <summary>
    ///   指定应调用 COM 对象上的  成员。
    ///               指定使用引用而不是值的属性设置函数。
    ///               如果属性同时具有  和  并且你需要区分调用哪一个，请使用 。
    /// </summary>
    PutRefDispProperty = 32768;
    /// <summary>
    ///   指定提供的参数的类型必须与对应形参的类型完全匹配。
    ///               如果调用方提供非 null  对象，则反射会引发异常，因为这意味着调用方在提供将选取适当方法的  实现。
    /// </summary>
    ExactBinding = 65536;
    /// <summary>
    ///   未实现。
    /// </summary>
    SuppressChangeType = 131072;
    /// <summary>
    ///   返回其参数计数与提供的参数数量匹配的成员集。
    ///               此绑定标志用于参数具有默认值的方法和使用变量参数 (varargs) 的方法。
    ///               此标志只应与  结合使用。
    /// </summary>
    OptionalParamBinding = 262144;
    /// <summary>
    ///   在 COM 互操作中用于指定可以忽略成员的返回值。
    /// </summary>
    IgnoreReturn = 16777216;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   定义方法的有效调用约定。
  /// </summary>
  [DNTypeName('System.Reflection.CallingConventions')]
  DNCallingConventions = type Integer;
  DNCallingConventionsHelper = record helper for DNCallingConventions
  public const
    /// <summary>
    ///   指定的默认调用约定由公共语言运行时确定。
    ///               对静态方法使用此调用约定。
    ///               对于实例或虚方法使用 。
    /// </summary>
    Standard = 1;
    /// <summary>
    ///   使用变量参数指定方法的调用的约定。
    /// </summary>
    VarArgs_ = 2;
    /// <summary>
    ///   可以指定  或  可能使用调用约定。
    /// </summary>
    Any = 3;
    /// <summary>
    ///   指定一个实例或虚方法 （而不是静态方法）。
    ///               在运行时调用的方法传递一个指向目标对象作为其第一个参数 (  指针)。
    ///               在元数据中存储的签名不包括此第一个参数的类型，因为该方法已知的并可从元数据发现其所有者类。
    /// </summary>
    HasThis = 32;
    /// <summary>
    ///   指定的签名是一个函数指针签名，表示对实例或虚拟方法 （而不是静态方法） 的调用。
    ///               如果  设置，  还必须设置。
    ///               第一个参数传递给所调用的方法仍是  现在是指针，但第一个参数的类型未知。
    ///               因此，描述的类型 （或类） 的令牌  指针显式存储到其元数据签名。
    /// </summary>
    ExplicitThis = 64;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  /// <summary>
  ///   定义动态程序集的访问模式。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.AssemblyBuilderAccess')]
  DNAssemblyBuilderAccess = type Integer;
  DNAssemblyBuilderAccessHelper = record helper for DNAssemblyBuilderAccess
  public const
    /// <summary>
    ///   可以执行，但不是会保存动态程序集。
    /// </summary>
    Run = 1;
    /// <summary>
    ///   可以保存，但未执行动态程序集。
    /// </summary>
    Save = 2;
    /// <summary>
    ///   可以执行和保存动态程序集。
    /// </summary>
    RunAndSave = 3;
    /// <summary>
    ///   动态程序集加载到只反射上下文中，且不能执行。
    /// </summary>
    ReflectionOnly = 6;
    /// <summary>
    ///   动态程序集可以卸载和回收其内存，但受到限制中所述 动态类型生成的可回收程序集。
    /// </summary>
    RunAndCollect = 9;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  /// <summary>
  ///   描述指令如何改变控制流。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.FlowControl')]
  DNFlowControl = type Integer;
  DNFlowControlHelper = record helper for DNFlowControl
  public const
    /// <summary>
    ///   分支指令。
    /// </summary>
    Branch = 0;
    /// <summary>
    ///   中断指令。
    /// </summary>
    Break = 1;
    /// <summary>
    ///   调用指令。
    /// </summary>
    Call = 2;
    /// <summary>
    ///   条件分支指令。
    /// </summary>
    Cond_Branch = 3;
    /// <summary>
    ///   提供有关后面的指令的信息。
    ///               例如，  指令  具有  ，并指定后面的指针指令可能是未对齐。
    /// </summary>
    Meta = 4;
    /// <summary>
    ///   常规控制流。
    /// </summary>
    Next = 5;
    /// <summary>
    ///   此枚举器值被保留，并且不应使用。
    /// </summary>
    Phi = 6;
    /// <summary>
    ///   返回指令。
    /// </summary>
    Return = 7;
    /// <summary>
    ///   异常引发指令。
    /// </summary>
    Throw = 8;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  /// <summary>
  ///   描述 Microsoft 中间语言 (MSIL) 指令的类型。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.OpCodeType')]
  DNOpCodeType = type Integer;
  DNOpCodeTypeHelper = record helper for DNOpCodeType
  public const
    /// <summary>
    ///   此枚举器值被保留，并且不应使用。
    /// </summary>
    Annotation = 0;
    /// <summary>
    ///   这些是用作同义词的其他 MSIL 指令的 Microsoft 中间语言 (MSIL) 指令。
    ///               例如，  表示  用参数为 0 的指令。
    /// </summary>
    Macro = 1;
    /// <summary>
    ///   描述保留的 Microsoft 中间语言 (MSIL) 指令。
    /// </summary>
    Nternal = 2;
    /// <summary>
    ///   描述适用于对象的 Microsoft 中间语言 (MSIL) 指令。
    /// </summary>
    Objmodel = 3;
    /// <summary>
    ///   描述前缀指令修改下面的指令的行为。
    /// </summary>
    Prefix = 4;
    /// <summary>
    ///   描述内置指令。
    /// </summary>
    Primitive = 5;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  /// <summary>
  ///   描述 Microsoft 中间语言 (MSIL) 指令的操作数类型。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.OperandType')]
  DNOperandType = type Integer;
  DNOperandTypeHelper = record helper for DNOperandType
  public const
    /// <summary>
    ///   该操作数为 32 位整数分支目标。
    /// </summary>
    InlineBrTarget = 0;
    /// <summary>
    ///   该操作数为 32 位元数据标记。
    /// </summary>
    InlineField = 1;
    /// <summary>
    ///   操作数是一个 32 位整数。
    /// </summary>
    InlineI = 2;
    /// <summary>
    ///   该操作数为 64 位整数。
    /// </summary>
    InlineI8 = 3;
    /// <summary>
    ///   该操作数为 32 位元数据标记。
    /// </summary>
    InlineMethod = 4;
    /// <summary>
    ///   没有操作数。
    /// </summary>
    InlineNone = 5;
    /// <summary>
    ///   操作数是保留且不应使用。
    /// </summary>
    InlinePhi = 6;
    /// <summary>
    ///   操作数为 64 位 IEEE 浮点数字。
    /// </summary>
    InlineR = 7;
    /// <summary>
    ///   该操作数为 32 位元数据签名令牌。
    /// </summary>
    InlineSig = 9;
    /// <summary>
    ///   操作数是 32 位元数据字符串标记。
    /// </summary>
    InlineString = 10;
    /// <summary>
    ///   该操作数为 switch 指令的 32 位整数参数。
    /// </summary>
    InlineSwitch = 11;
    /// <summary>
    ///   操作数是 , ，, ，或  令牌。
    /// </summary>
    InlineTok = 12;
    /// <summary>
    ///   该操作数为 32 位元数据标记。
    /// </summary>
    InlineType = 13;
    /// <summary>
    ///   该操作数为 16 位整数，包含本地变量或参数的序号。
    /// </summary>
    InlineVar = 14;
    /// <summary>
    ///   该操作数为 8 位整数分支目标。
    /// </summary>
    ShortInlineBrTarget = 15;
    /// <summary>
    ///   操作数是一个 8 位整数。
    /// </summary>
    ShortInlineI = 16;
    /// <summary>
    ///   操作数为 32 位 IEEE 浮点数字。
    /// </summary>
    ShortInlineR = 17;
    /// <summary>
    ///   操作数是一个 8 位整数，包含一个本地变量或参数的序号。
    /// </summary>
    ShortInlineVar = 18;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  /// <summary>
  ///   指定用于在封送类型时确定字段的内存对齐方式的两个因素之一。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.PackingSize')]
  DNPackingSize = type Integer;
  DNPackingSizeHelper = record helper for DNPackingSize
  public const
    /// <summary>
    ///   未指定的包装大小。
    /// </summary>
    Unspecified = 0;
    /// <summary>
    ///   包装大小为 1 个字节。
    /// </summary>
    Size1 = 1;
    /// <summary>
    ///   封装大小为 2 个字节。
    /// </summary>
    Size2 = 2;
    /// <summary>
    ///   封装大小为 4 个字节。
    /// </summary>
    Size4 = 4;
    /// <summary>
    ///   封装大小为 8 个字节。
    /// </summary>
    Size8 = 8;
    /// <summary>
    ///   包装大小为 16 个字节。
    /// </summary>
    Size16 = 16;
    /// <summary>
    ///   包装大小为 32 个字节。
    /// </summary>
    Size32 = 32;
    /// <summary>
    ///   包装大小为 64 字节。
    /// </summary>
    Size64 = 64;
    /// <summary>
    ///   封装大小为 128 个字节。
    /// </summary>
    Size128 = 128;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  /// <summary>
  ///   指定可移植可执行 (PE) 文件的类型。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.PEFileKinds')]
  DNPEFileKinds = type Integer;
  DNPEFileKindsHelper = record helper for DNPEFileKinds
  public const
    /// <summary>
    ///   可移植可执行 (PE) 文件是一个 DLL。
    /// </summary>
    Dll = 1;
    /// <summary>
    ///   此应用程序 （不基于 Windows 的） 的控制台应用程序
    /// </summary>
    ConsoleApplication = 2;
    /// <summary>
    ///   应用程序是基于 Windows 的应用程序。
    /// </summary>
    WindowApplication = 3;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  /// <summary>
  ///   描述如何将值推送到堆栈上或从堆栈中弹出的方式。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.StackBehaviour')]
  DNStackBehaviour = type Integer;
  DNStackBehaviourHelper = record helper for DNStackBehaviour
  public const
    /// <summary>
    ///   没有值是从堆栈中弹出。
    /// </summary>
    Pop0 = 0;
    /// <summary>
    ///   从弹出堆栈的一个值。
    /// </summary>
    Pop1 = 1;
    /// <summary>
    ///   对于第一个操作数，从堆栈 1 个值和 1 个值的第二个操作数的堆栈中弹出。
    /// </summary>
    Pop1_pop1 = 2;
    /// <summary>
    ///   弹出堆栈的 32 位整数。
    /// </summary>
    Popi = 3;
    /// <summary>
    ///   对于第一个操作数，从堆栈的 32 位整数和一个的值对于第二个操作数，从堆栈中弹出。
    /// </summary>
    Popi_pop1 = 4;
    /// <summary>
    ///   对于第一个操作数，从堆栈的 32 位整数和一个 32 位整数，对于第二个操作数，从堆栈中弹出。
    /// </summary>
    Popi_popi = 5;
    /// <summary>
    ///   对于第一个操作数，从堆栈的 32 位整数和一个 64 位整数，对于第二个操作数，从堆栈中弹出。
    /// </summary>
    Popi_popi8 = 6;
    /// <summary>
    ///   将 32 位整数，对于第一个操作数，对于第二个操作数，从堆栈的 32 位整数和关闭的堆栈中的第三个操作数的 32 位整数，从堆栈中弹出。
    /// </summary>
    Popi_popi_popi = 7;
    /// <summary>
    ///   对于第一个操作数，从堆栈的 32 位整数和 32 位浮点数字对于第二个操作数，从堆栈中弹出。
    /// </summary>
    Popi_popr4 = 8;
    /// <summary>
    ///   对于第一个操作数，从堆栈的 32 位整数和 64 位浮点数对于第二个操作数，从堆栈中弹出。
    /// </summary>
    Popi_popr8 = 9;
    /// <summary>
    ///   将引用从堆栈中弹出。
    /// </summary>
    Popref = 10;
    /// <summary>
    ///   对于第一个操作数，从堆栈的引用和值对于第二个操作数，从堆栈中弹出。
    /// </summary>
    Popref_pop1 = 11;
    /// <summary>
    ///   对于第一个操作数，从堆栈的引用和一个 32 位整数，对于第二个操作数，从堆栈中弹出。
    /// </summary>
    Popref_popi = 12;
    /// <summary>
    ///   弹出对于第一个操作数、 关闭的堆栈中的第二个操作数的值和关闭的堆栈中的第三个操作数的值，从堆栈的引用。
    /// </summary>
    Popref_popi_popi = 13;
    /// <summary>
    ///   对于第一个操作数，从堆栈的引用，对于第二个操作数，从堆栈的值与 64 位整数对于第三个操作数，从堆栈中弹出。
    /// </summary>
    Popref_popi_popi8 = 14;
    /// <summary>
    ///   对于第一个操作数，从堆栈的引用，对于第二个操作数，从堆栈的值与 32 位整数对于第三个操作数，从堆栈中弹出。
    /// </summary>
    Popref_popi_popr4 = 15;
    /// <summary>
    ///   对于第一个操作数，从堆栈的引用，对于第二个操作数，从堆栈的值的 64 位浮点数对于第三个操作数，从堆栈中弹出。
    /// </summary>
    Popref_popi_popr8 = 16;
    /// <summary>
    ///   对于第一个操作数，从堆栈的引用、 关闭的堆栈中的第二个操作数的值和引用对于第三个操作数，从堆栈中弹出。
    /// </summary>
    Popref_popi_popref = 17;
    /// <summary>
    ///   没有值推送到堆栈中。
    /// </summary>
    Push0 = 18;
    /// <summary>
    ///   将推送到堆栈上的一个值。
    /// </summary>
    Push1 = 19;
    /// <summary>
    ///   将推送到堆栈上的第一个操作数，1 个值和 1 到堆栈上的第二个操作数的值。
    /// </summary>
    Push1_push1 = 20;
    /// <summary>
    ///   将 32 位整数推送到堆栈上。
    /// </summary>
    Pushi = 21;
    /// <summary>
    ///   将 64 位整数推送到堆栈上。
    /// </summary>
    Pushi8 = 22;
    /// <summary>
    ///   将 32 位浮点数字推送到堆栈上。
    /// </summary>
    Pushr4 = 23;
    /// <summary>
    ///   将 64 位浮点数推送到堆栈上。
    /// </summary>
    Pushr8 = 24;
    /// <summary>
    ///   推送到堆栈上的引用。
    /// </summary>
    Pushref = 25;
    /// <summary>
    ///   弹出堆栈的变量。
    /// </summary>
    Varpop = 26;
    /// <summary>
    ///   将推送到堆栈上的变量。
    /// </summary>
    Varpush = 27;
    /// <summary>
    ///   对于第一个操作数，从堆栈的引用，对于第二个操作数，从堆栈的值与 32 位整数对于第三个操作数，从堆栈中弹出。
    /// </summary>
    Popref_popi_pop1 = 28;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   指定事件的属性。
  /// </summary>
  [DNTypeName('System.Reflection.EventAttributes')]
  DNEventAttributes = type Integer;
  DNEventAttributesHelper = record helper for DNEventAttributes
  public const
    /// <summary>
    ///   指定该事件没有任何属性。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指定的事件是特殊名称所描述的方式。
    /// </summary>
    SpecialName = 512;
    /// <summary>
    ///   指定仅供公共语言运行时使用的保留的标志。
    /// </summary>
    ReservedMask = 1024;
    /// <summary>
    ///   指定公共语言运行时应检查名称编码。
    /// </summary>
    RTSpecialName = 1024;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   标识类型的异常处理子句。
  /// </summary>
  [DNTypeName('System.Reflection.ExceptionHandlingClauseOptions')]
  DNExceptionHandlingClauseOptions = type Integer;
  DNExceptionHandlingClauseOptionsHelper = record helper for DNExceptionHandlingClauseOptions
  public const
    /// <summary>
    ///   该子句接受从指定类型派生的所有异常。
    /// </summary>
    Clause = 0;
    /// <summary>
    ///   该子句包括用户指定的说明，以确定是否应忽略该异常，（即，是否应继续正常执行），由关联的处理程序，处理或传递到下一个子句。
    /// </summary>
    Filter = 1;
    /// <summary>
    ///   该子句执行是只要退出 try 块，无论是通过正常控制流或由于未经处理的异常。
    /// </summary>
    Finally_ = 2;
    /// <summary>
    ///   该子句执行是如果发生异常，但不是在正常控制流完成。
    /// </summary>
    Fault = 4;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   指定描述字段属性的标志。
  /// </summary>
  [DNTypeName('System.Reflection.FieldAttributes')]
  DNFieldAttributes = type Integer;
  DNFieldAttributesHelper = record helper for DNFieldAttributes
  public const
    /// <summary>
    ///   指定不能引用字段。
    /// </summary>
    PrivateScope = 0;
    /// <summary>
    ///   指定字段为只能由父类型访问。
    /// </summary>
    Private_ = 1;
    /// <summary>
    ///   指定该字段只能在此程序集中的子类型访问。
    /// </summary>
    FamANDAssem = 2;
    /// <summary>
    ///   指定该字段是可在整个程序集。
    /// </summary>
    Assembly = 3;
    /// <summary>
    ///   指定字段仅可访问类型和子类型。
    /// </summary>
    Family = 4;
    /// <summary>
    ///   指定该字段是可由子类型任意位置，以及整个程序集的访问。
    /// </summary>
    FamORAssem = 5;
    /// <summary>
    ///   指定该字段将为其此作用域是可见的任何成员可访问。
    /// </summary>
    Public_ = 6;
    /// <summary>
    ///   指定给定字段的访问级别。
    /// </summary>
    FieldAccessMask = 7;
    /// <summary>
    ///   指定的字段所代表已定义的类型，否则为每个实例。
    /// </summary>
    Static_ = 16;
    /// <summary>
    ///   指定该字段只能初始化，并可以仅在构造函数的主体中设置。
    /// </summary>
    InitOnly = 32;
    /// <summary>
    ///   指定字段的值是一个编译时 （静态或早期绑定） 常量。
    ///               任何尝试都将其设置，则会引发 。
    /// </summary>
    Literal = 64;
    /// <summary>
    ///   指定该字段不需要扩展该类型时序列化。
    /// </summary>
    NotSerialized = 128;
    /// <summary>
    ///   指定字段具有相对虚拟地址 (RVA)。
    ///               RVA 是相对于它所在的图像文件开头的地址的方法体中当前映像中的位置。
    /// </summary>
    HasFieldRVA = 256;
    /// <summary>
    ///   指定一个特殊的方法，并用描述该方法的特殊名称。
    /// </summary>
    SpecialName = 512;
    /// <summary>
    ///   指定公共语言运行库 (元数据内部 Api) 应检查名称编码。
    /// </summary>
    RTSpecialName = 1024;
    /// <summary>
    ///   指定字段具有封送处理信息。
    /// </summary>
    HasFieldMarshal = 4096;
    /// <summary>
    ///   留待将来使用。
    /// </summary>
    PinvokeImpl = 8192;
    /// <summary>
    ///   指定字段具有默认值。
    /// </summary>
    HasDefault = 32768;
    /// <summary>
    ///   保留。
    /// </summary>
    ReservedMask = 38144;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   描述对泛型类型或方法的泛型类型参数的约束。
  /// </summary>
  [DNTypeName('System.Reflection.GenericParameterAttributes')]
  DNGenericParameterAttributes = type Integer;
  DNGenericParameterAttributesHelper = record helper for DNGenericParameterAttributes
  public const
    /// <summary>
    ///   无特殊标志。
    /// </summary>
    None = 0;
    /// <summary>
    ///   该泛型类型参数是协变。
    ///               协变类型参数可作为方法的结果类型、只读字段的类型、声明的基类型或实现的接口出现。
    /// </summary>
    Covariant = 1;
    /// <summary>
    ///   该泛型类型参数是逆变。
    ///               逆变类型参数可作为方法签名中的参数类型出现。
    /// </summary>
    Contravariant = 2;
    /// <summary>
    ///   选择所有方差标志的组合。
    ///               此值是使用逻辑“OR”合并后列标志得出的结果： 和 。
    /// </summary>
    VarianceMask = 3;
    /// <summary>
    ///   仅当一个类型是引用类型时，才能替代泛型类型参数。
    /// </summary>
    ReferenceTypeConstraint = 4;
    /// <summary>
    ///   仅当一个类型是值类型且不可为 null 时，才能替代泛型类型参数。
    /// </summary>
    NotNullableValueTypeConstraint = 8;
    /// <summary>
    ///   仅当一个类型具有无参数的构造函数时，才能替代泛型类型参数。
    /// </summary>
    DefaultConstructorConstraint = 16;
    /// <summary>
    ///   选择所有特殊约束标志的组合。
    ///               此值是使用逻辑“OR”合并后列标志得出的结果：、 和 。
    /// </summary>
    SpecialConstraintMask = 28;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   标识可执行文件的目标平台。
  /// </summary>
  [DNTypeName('System.Reflection.ImageFileMachine')]
  DNImageFileMachine = type Integer;
  DNImageFileMachineHelper = record helper for DNImageFileMachine
  public const
    /// <summary>
    ///   针对 32 位 Intel 处理器。
    /// </summary>
    I386 = 332;
    /// <summary>
    ///   针对 ARM 处理器。
    /// </summary>
    ARM = 452;
    /// <summary>
    ///   面向的是 64 位 Intel 处理器。
    /// </summary>
    IA64 = 512;
    /// <summary>
    ///   将 64 位 AMD 处理器作为目标。
    /// </summary>
    AMD64 = 34404;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   标记被定义为  的派生类的每种成员类型。
  /// </summary>
  [DNTypeName('System.Reflection.MemberTypes')]
  DNMemberTypes = type Integer;
  DNMemberTypesHelper = record helper for DNMemberTypes
  public const
    /// <summary>
    ///   指定该成员是构造函数
    /// </summary>
    Constructor_ = 1;
    /// <summary>
    ///   指定该成员是事件。
    /// </summary>
    Event = 2;
    /// <summary>
    ///   指定该成员是字段。
    /// </summary>
    Field = 4;
    /// <summary>
    ///   指定该成员是方法。
    /// </summary>
    Method = 8;
    /// <summary>
    ///   指定该成员是属性。
    /// </summary>
    Property_ = 16;
    /// <summary>
    ///   指定该成员是类型。
    /// </summary>
    TypeInfo = 32;
    /// <summary>
    ///   指定该成员是自定义成员类型。
    /// </summary>
    Custom = 64;
    /// <summary>
    ///   指定该成员是嵌套类型。
    /// </summary>
    NestedType = 128;
    /// <summary>
    ///   指定所有成员类型。
    /// </summary>
    All = 191;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   指定方法属性的标志。
  ///               这些标志在 Corhdr.h 文件中进行定义。
  /// </summary>
  [DNTypeName('System.Reflection.MethodAttributes')]
  DNMethodAttributes = type Integer;
  DNMethodAttributesHelper = record helper for DNMethodAttributes
  public const
    /// <summary>
    ///   指示该方法将重用现有 vtable 中的槽。
    ///               这是默认行为。
    /// </summary>
    ReuseSlot = 0;
    /// <summary>
    ///   指示该成员不能被引用。
    /// </summary>
    PrivateScope = 0;
    /// <summary>
    ///   指示该方法是仅供当前类访问。
    /// </summary>
    Private_ = 1;
    /// <summary>
    ///   指示该方法可以访问的这种类型和其派生的类型包含在此程序集的成员。
    /// </summary>
    FamANDAssem = 2;
    /// <summary>
    ///   指示该方法可以访问的此程序集的任何类。
    /// </summary>
    Assembly = 3;
    /// <summary>
    ///   指示该方法是仅供此类和它的派生的类的成员访问。
    /// </summary>
    Family = 4;
    /// <summary>
    ///   指示该方法是对派生类的任意位置，以及在程序集中的任何类可访问。
    /// </summary>
    FamORAssem = 5;
    /// <summary>
    ///   指示该方法是可以访问此对象是在作用域中的任何对象。
    /// </summary>
    Public_ = 6;
    /// <summary>
    ///   检索可访问性的信息。
    /// </summary>
    MemberAccessMask = 7;
    /// <summary>
    ///   指示对非托管代码转换 （thunk） 导出的托管的方法。
    /// </summary>
    UnmanagedExport = 8;
    /// <summary>
    ///   指示该方法定义的类型;否则，它定义每个实例。
    /// </summary>
    Static_ = 16;
    /// <summary>
    ///   指示不能重写该方法。
    /// </summary>
    Final_ = 32;
    /// <summary>
    ///   指示该方法为虚拟。
    /// </summary>
    Virtual_ = 64;
    /// <summary>
    ///   指示该方法隐藏由名称和签名。否则为只按名称。
    /// </summary>
    HideBySig = 128;
    /// <summary>
    ///   指示该方法将始终获取 vtable 中的新槽。
    /// </summary>
    NewSlot = 256;
    /// <summary>
    ///   检索 vtable 属性。
    /// </summary>
    VtableLayoutMask = 256;
    /// <summary>
    ///   指示该方法时也是访问中只能被重写。
    /// </summary>
    CheckAccessOnOverride = 512;
    /// <summary>
    ///   表示此类不提供此方法的实现。
    /// </summary>
    Abstract_ = 1024;
    /// <summary>
    ///   指示该方法是特殊。
    ///               名称描述此方法的特殊。
    /// </summary>
    SpecialName = 2048;
    /// <summary>
    ///   指示公共语言运行时检查名称编码。
    /// </summary>
    RTSpecialName = 4096;
    /// <summary>
    ///   指示该方法的实现通过 PInvoke （平台调用服务） 转发。
    /// </summary>
    PinvokeImpl = 8192;
    /// <summary>
    ///   指示该方法具有与之相关联的安全性。
    ///               只能使用供运行时保留的标志。
    /// </summary>
    HasSecurity = 16384;
    /// <summary>
    ///   指示该方法调用包含安全代码的另一种方法。
    ///               只能使用供运行时保留的标志。
    /// </summary>
    RequireSecObject = 32768;
    /// <summary>
    ///   指示仅限运行时使用的保留的标志。
    /// </summary>
    ReservedMask = 53248;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   指定方法实现的属性的标志。
  /// </summary>
  [DNTypeName('System.Reflection.MethodImplAttributes')]
  DNMethodImplAttributes = type Integer;
  DNMethodImplAttributesHelper = record helper for DNMethodImplAttributes
  public const
    /// <summary>
    ///   指定方法实现位于 Microsoft 中间语言 (MSIL) 中。
    /// </summary>
    IL = 0;
    /// <summary>
    ///   指定方法在托管代码中实现。
    /// </summary>
    Managed = 0;
    /// <summary>
    ///   指定方法实现为本机。
    /// </summary>
    Native = 1;
    /// <summary>
    ///   指定方法实现位于优化中间语言 (OPTIL) 中。
    /// </summary>
    OPTIL = 2;
    /// <summary>
    ///   指定方法实现由运行时提供。
    /// </summary>
    Runtime = 3;
    /// <summary>
    ///   指定有关代码类型的标志。
    /// </summary>
    CodeTypeMask = 3;
    /// <summary>
    ///   指定方法在非托管代码中实现。
    /// </summary>
    Unmanaged = 4;
    /// <summary>
    ///   指定方法是在托管代码还是非托管代码中实现。
    /// </summary>
    ManagedMask = 4;
    /// <summary>
    ///   指定方法不能内联。
    /// </summary>
    NoInlining = 8;
    /// <summary>
    ///   指定方法是未定义的。
    /// </summary>
    ForwardRef = 16;
    /// <summary>
    ///   指定方法是通过正文的单线程方法。
    ///               静态方法（在 Visual Basic 中为 ）在类型上锁定，而实例方法在实例上锁定。
    ///               为此，也可以使用 C# lock 语句或 Visual Basic SyncLock 语句。
    /// </summary>
    Synchronized = 32;
    /// <summary>
    ///   指定在调试可能的代码生成问题时，方法不由实时 (JIT) 编译器或本机代码生成优化（请参阅 Ngen.exe）。
    /// </summary>
    NoOptimization = 64;
    /// <summary>
    ///   指定方法签名是完全按照声明导出的。
    /// </summary>
    PreserveSig = 128;
    /// <summary>
    ///   指定方法应尽可能内联。
    /// </summary>
    AggressiveInlining = 256;
    SecurityMitigations = 1024;
    /// <summary>
    ///   指定内部调用。
    /// </summary>
    InternalCall = 4096;
    /// <summary>
    ///   指定范围检查值。
    /// </summary>
    MaxMethodImplVal = 65535;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   定义可以与参数相关联的属性。
  ///               这些属性在 CorHdr.h 中进行定义。
  /// </summary>
  [DNTypeName('System.Reflection.ParameterAttributes')]
  DNParameterAttributes = type Integer;
  DNParameterAttributesHelper = record helper for DNParameterAttributes
  public const
    /// <summary>
    ///   指定没有参数的属性。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指定该参数是输入的参数。
    /// </summary>
    In_ = 1;
    /// <summary>
    ///   指定该参数是输出参数。
    /// </summary>
    Out_ = 2;
    /// <summary>
    ///   指定该参数是区域设置标识符 (lcid)。
    /// </summary>
    Lcid = 4;
    /// <summary>
    ///   指定该参数是返回值。
    /// </summary>
    Retval = 8;
    /// <summary>
    ///   指定该参数是可选的。
    /// </summary>
    Optional = 16;
    /// <summary>
    ///   指定的参数具有默认值。
    /// </summary>
    HasDefault = 4096;
    /// <summary>
    ///   指定该参数具有字段封送处理信息。
    /// </summary>
    HasFieldMarshal = 8192;
    /// <summary>
    ///   保留。
    /// </summary>
    Reserved3 = 16384;
    /// <summary>
    ///   保留。
    /// </summary>
    Reserved4 = 32768;
    /// <summary>
    ///   指定该参数保留。
    /// </summary>
    ReservedMask = 61440;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   标识可执行文件中的代码的性质。
  /// </summary>
  [DNTypeName('System.Reflection.PortableExecutableKinds')]
  DNPortableExecutableKinds = type Integer;
  DNPortableExecutableKindsHelper = record helper for DNPortableExecutableKinds
  public const
    /// <summary>
    ///   文件不是以可移植可执行 (PE) 文件格式。
    /// </summary>
    NotAPortableExecutableImage = 0;
    /// <summary>
    ///   可执行文件包含仅 Microsoft 中间语言 (MSIL)，因此中性相对于 32 位或 64 位平台。
    /// </summary>
    ILOnly = 1;
    /// <summary>
    ///   可执行文件可以在 64 位平台上在 32 位平台上，或在的 32 位 Windows on Windows (WOW) 环境中运行。
    /// </summary>
    Required32Bit = 2;
    /// <summary>
    ///   可执行文件需要 64 位平台。
    /// </summary>
    PE32Plus = 4;
    /// <summary>
    ///   可执行文件包含纯非托管的代码。
    /// </summary>
    Unmanaged32Bit = 8;
    /// <summary>
    ///   可执行文件是与平台无关，但应尽可能的 32 位平台上运行。
    /// </summary>
    Preferred32Bit = 16;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   标识可执行文件的目标平台的处理器和每字位数。
  /// </summary>
  [DNTypeName('System.Reflection.ProcessorArchitecture')]
  DNProcessorArchitecture = type Integer;
  DNProcessorArchitectureHelper = record helper for DNProcessorArchitecture
  public const
    /// <summary>
    ///   处理器和每字位数的未知或未指定组合。
    /// </summary>
    None = 0;
    /// <summary>
    ///   特定于处理器和每字位数。
    /// </summary>
    MSIL = 1;
    /// <summary>
    ///   32 位 Intel 处理器、 是本机或中的 Windows on Windows 64 位平台 (WOW64) 上的环境。
    /// </summary>
    X86 = 2;
    /// <summary>
    ///   64 位 Intel 处理器仅。
    /// </summary>
    IA64 = 3;
    /// <summary>
    ///   仅 64 位 AMD 处理器。
    /// </summary>
    Amd64 = 4;
    /// <summary>
    ///   ARM 处理器。
    /// </summary>
    Arm = 5;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   定义可以与属性相关联的属性。
  ///               这些属性值在 Corhdr.h 中进行定义。
  /// </summary>
  [DNTypeName('System.Reflection.PropertyAttributes')]
  DNPropertyAttributes = type Integer;
  DNPropertyAttributesHelper = record helper for DNPropertyAttributes
  public const
    /// <summary>
    ///   不指定任何属性与属性关联。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指定该属性是并用名称说明如何属性特殊的特殊字符。
    /// </summary>
    SpecialName = 512;
    /// <summary>
    ///   指定元数据内部 Api 检查名称编码。
    /// </summary>
    RTSpecialName = 1024;
    /// <summary>
    ///   指定该属性具有默认值。
    /// </summary>
    HasDefault = 4096;
    /// <summary>
    ///   保留。
    /// </summary>
    Reserved2 = 8192;
    /// <summary>
    ///   保留。
    /// </summary>
    Reserved3 = 16384;
    /// <summary>
    ///   保留。
    /// </summary>
    Reserved4 = 32768;
    /// <summary>
    ///   指定为仅限运行时使用保留的标志。
    /// </summary>
    ReservedMask = 62464;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   指定清单资源的属性。
  /// </summary>
  [DNTypeName('System.Reflection.ResourceAttributes')]
  DNResourceAttributes = type Integer;
  DNResourceAttributesHelper = record helper for DNResourceAttributes
  public const
    /// <summary>
    ///   用于检索公共清单资源的掩码。
    /// </summary>
    Public_ = 1;
    /// <summary>
    ///   用于检索私有清单资源的掩码。
    /// </summary>
    Private_ = 2;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   指定资源位置。
  /// </summary>
  [DNTypeName('System.Reflection.ResourceLocation')]
  DNResourceLocation = type Integer;
  DNResourceLocationHelper = record helper for DNResourceLocation
  public const
    /// <summary>
    ///   指定嵌入 (即，非链接) 资源。
    /// </summary>
    Embedded = 1;
    /// <summary>
    ///   指定资源包含在另一个程序集。
    /// </summary>
    ContainedInAnotherAssembly = 2;
    /// <summary>
    ///   指定资源包含在清单文件中。
    /// </summary>
    ContainedInManifestFile = 4;
  end;


  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   指定类型属性。
  /// </summary>
  [DNTypeName('System.Reflection.TypeAttributes')]
  DNTypeAttributes = type Integer;
  DNTypeAttributesHelper = record helper for DNTypeAttributes
  public const
    /// <summary>
    ///   指定此类不是公共的。
    /// </summary>
    NotPublic = 0;
    /// <summary>
    ///   指定类字段由公共语言运行时自动布局。
    /// </summary>
    AutoLayout = 0;
    /// <summary>
    ///   LPTSTR 被解释为 ANSI。
    /// </summary>
    AnsiClass = 0;
    /// <summary>
    ///   指定该类型为一个类。
    /// </summary>
    Class_ = 0;
    /// <summary>
    ///   指定此类是公共的。
    /// </summary>
    Public_ = 1;
    /// <summary>
    ///   指定此类是用公共可见性嵌套的。
    /// </summary>
    NestedPublic = 2;
    /// <summary>
    ///   指定此类是用私有可见性嵌套的。
    /// </summary>
    NestedPrivate = 3;
    /// <summary>
    ///   指定此类是用族可见性嵌套的，因此只能由它自己的类型和任何派生类型中的方法访问。
    /// </summary>
    NestedFamily = 4;
    /// <summary>
    ///   指定此类是用程序集可见性嵌套的，因此只能由其程序集内的方法访问。
    /// </summary>
    NestedAssembly = 5;
    /// <summary>
    ///   指定此类是用程序集和族可见性嵌套的，因此只能由其族和程序集的交集中的方法访问。
    /// </summary>
    NestedFamANDAssem = 6;
    /// <summary>
    ///   指定此类是用族或程序集可见性嵌套的，因此只能由其族和程序集的并集中的方法访问。
    /// </summary>
    NestedFamORAssem = 7;
    /// <summary>
    ///   指定类型可见性信息。
    /// </summary>
    VisibilityMask = 7;
    /// <summary>
    ///   指定类字段按字段发出到元数据的顺序依次布局。
    /// </summary>
    SequentialLayout = 8;
    /// <summary>
    ///   指定类字段按指定的偏移量布局。
    /// </summary>
    ExplicitLayout = 16;
    /// <summary>
    ///   指定类布局信息。
    /// </summary>
    LayoutMask = 24;
    /// <summary>
    ///   指定该类型为一个接口。
    /// </summary>
    Interface_ = 32;
    /// <summary>
    ///   指定类语义信息；当前类与上下文相关（否则是灵活的）。
    /// </summary>
    ClassSemanticsMask = 32;
    /// <summary>
    ///   指定该类型为抽象类型。
    /// </summary>
    Abstract_ = 128;
    /// <summary>
    ///   指定此类是具体的，无法扩展。
    /// </summary>
    Sealed_ = 256;
    /// <summary>
    ///   指定此类特殊，具体由名称表示。
    /// </summary>
    SpecialName = 1024;
    /// <summary>
    ///   运行时应检查名称编码。
    /// </summary>
    RTSpecialName = 2048;
    /// <summary>
    ///   指定此类或接口从另一个模块导入。
    /// </summary>
    Import = 4096;
    /// <summary>
    ///   指定此类可以序列化。
    /// </summary>
    Serializable = 8192;
    /// <summary>
    ///   指定 Windows 运行时 类型。
    /// </summary>
    WindowsRuntime = 16384;
    /// <summary>
    ///   LPTSTR 被解释为 UNICODE。
    /// </summary>
    UnicodeClass = 65536;
    /// <summary>
    ///   LPTSTR 自动被解释。
    /// </summary>
    AutoClass = 131072;
    /// <summary>
    ///   用于检索本机互操作性的字符串信息。
    /// </summary>
    StringFormatMask = 196608;
    /// <summary>
    ///   LPSTR 由一些特定于实现的方法，其中包括有可能引发进行解释 。
    ///               不使用的 Microsoft 实现中 .NET Framework。
    /// </summary>
    CustomFormatClass = 196608;
    /// <summary>
    ///   类型具有与之关联的安全性。
    /// </summary>
    HasSecurity = 262144;
    /// <summary>
    ///   保留供运行时使用的属性。
    /// </summary>
    ReservedMask = 264192;
    /// <summary>
    ///   指定调用此类型的静态方法并不强制系统初始化此类型。
    /// </summary>
    BeforeFieldInit = 1048576;
    /// <summary>
    ///   用于检索本机互操作的非标准编码信息。
    ///               未指定这些 2 位值的含义。
    ///               不使用的 Microsoft 实现中 .NET Framework。
    /// </summary>
    CustomFormatMask = 12582912;
  end;


  //-------------namespace: System.Resources----------------
  /// <summary>
  ///   指定是否  对象中寻找在主程序集中或附属程序集中的应用程序的默认区域性的资源。
  /// </summary>
  [DNTypeName('System.Resources.UltimateResourceFallbackLocation')]
  DNUltimateResourceFallbackLocation = type Integer;
  DNUltimateResourceFallbackLocationHelper = record helper for DNUltimateResourceFallbackLocation
  public const
    /// <summary>
    ///   回退资源都位于主程序集。
    /// </summary>
    MainAssembly = 0;
    /// <summary>
    ///   回退资源都位于附属程序集。
    /// </summary>
    Satellite = 1;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  /// <summary>
  ///   指定控制由公共语言运行时实时 (JIT) 编译器生成的代码的严谨性的参数。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CompilationRelaxations')]
  DNCompilationRelaxations = type Integer;
  DNCompilationRelaxationsHelper = record helper for DNCompilationRelaxations
  public const
    /// <summary>
    ///   将标记为不需要字符串暂留的程序集。
    /// </summary>
    NoStringInterning = 8;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  /// <summary>
  ///   指定一个依赖程序集的首选的默认绑定。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.LoadHint')]
  DNLoadHint = type Integer;
  DNLoadHintHelper = record helper for DNLoadHint
  public const
    /// <summary>
    ///   未指定首选项。
    /// </summary>
    Default_ = 0;
    /// <summary>
    ///   始终加载依赖项。
    /// </summary>
    Always = 1;
    /// <summary>
    ///   有时加载依赖项。
    /// </summary>
    Sometimes = 2;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  /// <summary>
  ///   定义一种方法的实现方式。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.MethodCodeType')]
  DNMethodCodeType = type Integer;
  DNMethodCodeTypeHelper = record helper for DNMethodCodeType
  public const
    /// <summary>
    ///   指定该方法的实现是 Microsoft 中间语言 (MSIL) 中。
    /// </summary>
    IL = 0;
    /// <summary>
    ///   指定此方法在本机代码中实现。
    /// </summary>
    Native = 1;
    /// <summary>
    ///   指定该方法的实现是优化的中间语言 （optil） 编写。
    /// </summary>
    OPTIL = 2;
    /// <summary>
    ///   指定该方法的实现由运行时提供。
    /// </summary>
    Runtime = 3;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  /// <summary>
  ///   定义如何实现方法的详细信息。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.MethodImplOptions')]
  DNMethodImplOptions = type Integer;
  DNMethodImplOptionsHelper = record helper for DNMethodImplOptions
  public const
    /// <summary>
    ///   此方法在非托管的代码中实现。
    /// </summary>
    Unmanaged = 4;
    /// <summary>
    ///   该方法不能为内联方法。
    ///               内联是一种优化方式，通过该方式将方法调用替换为方法体。
    /// </summary>
    NoInlining = 8;
    /// <summary>
    ///   已声明该方法，但在其他位置提供实现。
    /// </summary>
    ForwardRef = 16;
    /// <summary>
    ///   该方法一次性只能在一个线程上执行。
    ///               静态方法在类型上锁定，而实例方法在实例上锁定。
    ///               只有一个线程可在任意实例函数中执行，且只有一个线程可在任意类的静态函数中执行。
    /// </summary>
    Synchronized = 32;
    /// <summary>
    ///   调试可能的代码生成问题时，该方法不由实时 (JIT) 编译器或本机代码生成优化（请参阅 Ngen.exe）。
    /// </summary>
    NoOptimization = 64;
    /// <summary>
    ///   完全按照声明导出方法签名。
    /// </summary>
    PreserveSig = 128;
    /// <summary>
    ///   如可能应将该方法进行内联。
    /// </summary>
    AggressiveInlining = 256;
    SecurityMitigations = 1024;
    /// <summary>
    ///   该调用为内部调用，也就是说它调用了在公共语言运行时中实现的方法。
    /// </summary>
    InternalCall = 4096;
  end;


  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  /// <summary>
  ///   指定当在受约束的执行区域内调用的方法的行为。
  /// </summary>
  [DNTypeName('System.Runtime.ConstrainedExecution.Cer')]
  DNCer = type Integer;
  DNCerHelper = record helper for DNCer
  public const
    /// <summary>
    ///   方法、 类型或程序集都有没有 CER 的概念。
    ///               它不会使用的 CER 保证。
    ///               这意味着︰
    /// </summary>
    None = 0;
    /// <summary>
    ///   在遇到异常情况，该方法可能会失败。
    ///               在这种情况下，该方法将报告返回给调用方法它是成功还是失败。
    ///               该方法必须具有的方法体周围 CER，以确保它能报告返回的值。
    /// </summary>
    MayFail = 1;
    /// <summary>
    ///   在遇到异常情况，保证该方法成功。
    ///               您应始终周围构造 CER，即使被调用时从非 CER 区域内的调用的方法。
    ///               如果方法是成功完成其任务，新增功能。
    ///               例如，标记  与 ReliabilityContractAttribute(Cer.Success) 意味着在 CER 下运行，则它始终返回中的元素数的计数  并且它永远不会将内部字段保留为不确定状态。
    /// </summary>
    Success = 2;
  end;


  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  /// <summary>
  ///   指定的可靠性约定。
  /// </summary>
  [DNTypeName('System.Runtime.ConstrainedExecution.Consistency')]
  DNConsistency = type Integer;
  DNConsistencyHelper = record helper for DNConsistency
  public const
    /// <summary>
    ///   在遇到异常情况时，CLR 对做任何保证状态一致性;也就是说，该条件可能会损坏该进程。
    /// </summary>
    MayCorruptProcess = 0;
    /// <summary>
    ///   在遇到异常情况，公共语言运行时 (CLR) 对当前的应用程序域中做任何保证状态一致性。
    /// </summary>
    MayCorruptAppDomain = 1;
    /// <summary>
    ///   在遇到异常情况，保证该方法将与当前实例的状态损坏限制。
    /// </summary>
    MayCorruptInstance = 2;
    /// <summary>
    ///   在遇到异常情况，该方法被保证不损坏状态。
    /// </summary>
    WillNotCorruptState = 3;
  end;


  //-------------namespace: System.Runtime----------------
  /// <summary>
  ///   [在 .NET Framework 4.5.1 和更高版本中受支持] 
  ///            
  ///              指示下一步的阻碍性垃圾回收是否压缩大型对象堆 (LOH)。
  /// </summary>
  [DNTypeName('System.Runtime.GCLargeObjectHeapCompactionMode')]
  DNGCLargeObjectHeapCompactionMode = type Integer;
  DNGCLargeObjectHeapCompactionModeHelper = record helper for DNGCLargeObjectHeapCompactionMode
  public const
    /// <summary>
    ///   不压缩大型对象堆 (LOH)。
    /// </summary>
    Default_ = 1;
    /// <summary>
    ///   下一次阻止第 2 代垃圾回收期间将压缩大型对象堆 (LOH)。
    /// </summary>
    CompactOnce = 2;
  end;


  //-------------namespace: System.Runtime----------------
  /// <summary>
  ///   调整垃圾收集器侵入应用程序的时间。
  /// </summary>
  [DNTypeName('System.Runtime.GCLatencyMode')]
  DNGCLatencyMode = type Integer;
  DNGCLatencyModeHelper = record helper for DNGCLatencyMode
  public const
    /// <summary>
    ///   在批调用中禁用垃圾回收并发，并回收对象。
    ///               这是最高级别的侵入模式。
    /// </summary>
    Batch = 0;
    /// <summary>
    ///   在应用程序运行时启用垃圾回收并发，并回收对象。
    ///               这是工作站上垃圾回收的默认模式，并且较  少受侵入。
    ///               它可以平衡响应性和吞吐量。
    /// </summary>
    Interactive = 1;
    /// <summary>
    ///   启用回收对象时比较保守的垃圾回收。
    ///               仅在系统遇到内存压力时才发生完全回收，而通常情况下发生 0 代和 1 代回收
    /// </summary>
    LowLatency = 2;
    /// <summary>
    ///   启用尝试减少延长时期的延迟的垃圾回收。
    ///               回收器尝试只执行生成 0、生成 1，以及并发只生成 2 个集合。
    ///               如果系统处于内存压力之下，则完整的阻碍性回收还是会出现。
    /// </summary>
    SustainedLowLatency = 3;
    /// <summary>
    ///   指示当应用程序正在执行关键路径时挂起垃圾回收。
    ///            
    ///               是一个只读值；也就是说，您不能将  值分配给  属性。
    ///               通过调用  方法指定无 GC 区域延迟模式，并通过调用  方法终止该模式。
    /// </summary>
    NoGCRegion = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指示处理器体系结构。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.Architecture')]
  DNArchitecture = type Integer;
  DNArchitectureHelper = record helper for DNArchitecture
  public const
    /// <summary>
    ///   基于 Intel 的 32 位处理器体系结构。
    /// </summary>
    X86 = 0;
    /// <summary>
    ///   基于 Intel 的 64 位处理器体系结构。
    /// </summary>
    X64 = 1;
    /// <summary>
    ///   32 位 ARM 处理器体系结构。
    /// </summary>
    Arm = 2;
    /// <summary>
    ///   64 位 ARM 处理器体系结构。
    /// </summary>
    Arm64 = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   定义一组注册程序集时所使用的标志。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.AssemblyRegistrationFlags')]
  DNAssemblyRegistrationFlags = type Integer;
  DNAssemblyRegistrationFlagsHelper = record helper for DNAssemblyRegistrationFlags
  public const
    /// <summary>
    ///   指示没有特殊的设置。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指示该程序集的基本代码键应设置注册表中。
    /// </summary>
    SetCodeBase = 1;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.CALLCONV')]
  DNInteropServices_CALLCONV = type Integer;
  DNInteropServices_CALLCONVHelper = record helper for DNInteropServices_CALLCONV
  public const
    /// <summary>
    ///   指示 Cdecl 调用约定用于的方法。
    /// </summary>
    CC_CDECL = 1;
    /// <summary>
    ///   指示调用约定 Mscpascal 用于的方法。
    /// </summary>
    CC_MSCPASCAL = 2;
    /// <summary>
    ///   指示对方法使用 Pascal 调用约定。
    /// </summary>
    CC_PASCAL = 2;
    /// <summary>
    ///   指示调用约定 Macpascal 用于的方法。
    /// </summary>
    CC_MACPASCAL = 3;
    /// <summary>
    ///   指示 Stdcall 调用约定用于的方法。
    /// </summary>
    CC_STDCALL = 4;
    /// <summary>
    ///   保留此值供将来使用。
    /// </summary>
    CC_RESERVED = 5;
    /// <summary>
    ///   指示调用约定 Syscall 用于的方法。
    /// </summary>
    CC_SYSCALL = 6;
    /// <summary>
    ///   指示调用约定 Mpwcdecl 用于的方法。
    /// </summary>
    CC_MPWCDECL = 7;
    /// <summary>
    ///   指示调用约定 Mpwpascal 用于的方法。
    /// </summary>
    CC_MPWPASCAL = 8;
    /// <summary>
    ///   指示  枚举的结尾。
    /// </summary>
    CC_MAX = 9;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指定调用在非托管代码中实现的方法所需的调用约定。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.CallingConvention')]
  DNCallingConvention = type Integer;
  DNCallingConventionHelper = record helper for DNCallingConvention
  public const
    /// <summary>
    ///   此成员不是实际的调用约定，而是使用默认平台调用约定。
    ///               例如，在 Windows 上默认值是  以及它是 Windows CE.NET 。
    /// </summary>
    Winapi = 1;
    /// <summary>
    ///   调用方将清理堆栈。
    ///               这样，调用的函数 , ，使之可用于接受个数可变的参数，如方法 。
    /// </summary>
    Cdecl_ = 2;
    /// <summary>
    ///   被调用方将清理堆栈。
    ///               这是与平台调用非托管的函数调用的默认约定。
    /// </summary>
    StdCall_ = 3;
    /// <summary>
    ///   第一个参数是  指针并存储在 ECX 寄存器。
    ///               其他参数被推送到堆栈上。
    ///               此调用约定用于调用从非托管 DLL 导出的类的方法。
    /// </summary>
    ThisCall = 4;
    /// <summary>
    ///   不支持此调用约定。
    /// </summary>
    FastCall = 5;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   决定封送字符串应使用的字符集。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.CharSet')]
  DNCharSet = type Integer;
  DNCharSetHelper = record helper for DNCharSet
  public const
    /// <summary>
    ///   此值已过时，并具有相同的行为 。
    /// </summary>
    None = 1;
    /// <summary>
    ///   为多字节字符字符串的封送字符串。
    /// </summary>
    Ansi = 2;
    /// <summary>
    ///   封送为 Unicode 双字节字符的字符串。
    /// </summary>
    Unicode = 3;
    /// <summary>
    ///   自动封送目标操作系统为适当的字符串。
    ///               默认值是  有关 Windows NT、 Windows 2000、 Windows XP 和 Windows Server 2003 家族中; 默认值是  在 Windows 98 和 Windows me。
    ///               虽然公共语言运行时默认设置是 , ，语言可重写此默认值。
    ///               例如，默认情况下 C# 标记的所有方法和类型作为 。
    /// </summary>
    Auto = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   标识为类生成的类接口类型。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ClassInterfaceType')]
  DNClassInterfaceType = type Integer;
  DNClassInterfaceTypeHelper = record helper for DNClassInterfaceType
  public const
    /// <summary>
    ///   指示没有类接口时生成的类。
    ///               如果显式不实现任何接口，该类可以仅提供通过后期绑定访问  接口。
    ///               这是推荐的设置 。
    ///               使用  是通过由类显式实现的接口公开功能的唯一方法。
    /// </summary>
    None = 0;
    /// <summary>
    ///   表示，该类仅支持后期绑定 COM 客户端。
    ///               一个  类自动向 COM 客户端在请求上公开。
    ///               类型库生成的 Tlbexp.exe （类型库导出程序） 不包含类型信息  为了防止客户端缓存的 Dispid 的接口。
    ///               没有展现中所述的版本控制问题  因为客户端可以仅后期绑定到该接口。
    /// </summary>
    AutoDispatch = 1;
    /// <summary>
    ///   指示双类接口自动生成的类并向 COM 公开。
    ///               类型信息是生成类接口，类型库中发布。
    ///               使用  由于中所述的版本控制限制是强烈建议您不要 。
    /// </summary>
    AutoDual = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   标识如何向 COM 公开接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComInterfaceType')]
  DNComInterfaceType = type Integer;
  DNComInterfaceTypeHelper = record helper for DNComInterfaceType
  public const
    /// <summary>
    ///   指示接口将公开为 com双重接口，从而使绑定早期和后期绑定。
    ///               默认值为 。
    /// </summary>
    InterfaceIsDual = 0;
    /// <summary>
    ///   指示接口作为派生自的接口公开给 COM IUnknown，这样仅早期绑定。
    /// </summary>
    InterfaceIsIUnknown = 1;
    /// <summary>
    ///   指示接口将公开为 com调度接口，其中仅启用后期绑定。
    /// </summary>
    InterfaceIsIDispatch = 2;
    /// <summary>
    ///   指示接口作为 Windows 运行时 接口对 COM 公开。
    /// </summary>
    InterfaceIsIInspectable = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   描述 COM 成员的类型。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComMemberType')]
  DNComMemberType = type Integer;
  DNComMemberTypeHelper = record helper for DNComMemberType
  public const
    /// <summary>
    ///   该成员是一般方法。
    /// </summary>
    Method = 0;
    /// <summary>
    ///   该成员获取属性。
    /// </summary>
    PropGet = 1;
    /// <summary>
    ///   该成员设置属性。
    /// </summary>
    PropSet = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   标识 METHODDATA 结构中描述的方法所使用的调用约定。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.CALLCONV')]
  DNComTypes_CALLCONV = type Integer;
  DNComTypes_CALLCONVHelper = record helper for DNComTypes_CALLCONV
  public const
    /// <summary>
    ///   指示对方法使用 C 声明 (CDECL) 调用约定。
    /// </summary>
    CC_CDECL = 1;
    /// <summary>
    ///   指示对方法使用 MSC Pascal (MSCPASCAL) 调用约定。
    /// </summary>
    CC_MSCPASCAL = 2;
    /// <summary>
    ///   指示对方法使用 Pascal 调用约定。
    /// </summary>
    CC_PASCAL = 2;
    /// <summary>
    ///   指示对方法使用 Macintosh Pascal (MACPASCAL) 调用约定。
    /// </summary>
    CC_MACPASCAL = 3;
    /// <summary>
    ///   指示对方法使用标准调用约定 (STDCALL)。
    /// </summary>
    CC_STDCALL = 4;
    /// <summary>
    ///   保留此值供将来使用。
    /// </summary>
    CC_RESERVED = 5;
    /// <summary>
    ///   指示对方法使用标准 SYSCALL 调用约定。
    /// </summary>
    CC_SYSCALL = 6;
    /// <summary>
    ///   指示对方法使用 Macintosh Programmers' Workbench (MPW) CDECL 调用约定。
    /// </summary>
    CC_MPWCDECL = 7;
    /// <summary>
    ///   指示对方法使用 Macintosh Programmers' Workbench (MPW) PASCAL 调用约定。
    /// </summary>
    CC_MPWPASCAL = 8;
    /// <summary>
    ///   指示  枚举的结尾。
    /// </summary>
    CC_MAX = 9;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   标识要绑定到的类型说明。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.DESCKIND')]
  DNComTypes_DESCKIND = type Integer;
  DNComTypes_DESCKINDHelper = record helper for DNComTypes_DESCKIND
  public const
    /// <summary>
    ///   指示已找到任何匹配项。
    /// </summary>
    DESCKIND_NONE = 0;
    /// <summary>
    ///   指示  返回结构。
    /// </summary>
    DESCKIND_FUNCDESC = 1;
    /// <summary>
    ///   指示  返回。
    /// </summary>
    DESCKIND_VARDESC = 2;
    /// <summary>
    ///   指示  返回。
    /// </summary>
    DESCKIND_TYPECOMP = 3;
    /// <summary>
    ///   指示  返回。
    /// </summary>
    DESCKIND_IMPLICITAPPOBJ = 4;
    /// <summary>
    ///   指示枚举结束标记。
    /// </summary>
    DESCKIND_MAX = 5;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   标识定义函数属性的常量。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCFLAGS')]
  DNComTypes_FUNCFLAGS = type Integer;
  DNComTypes_FUNCFLAGSHelper = record helper for DNComTypes_FUNCFLAGS
  public const
    /// <summary>
    ///   该函数不应从宏语言中访问。
    ///               此标志适用于系统级别的功能或不应显示类型浏览器的函数。
    /// </summary>
    FUNCFLAG_FRESTRICTED = 1;
    /// <summary>
    ///   函数将返回一个对象，它的事件源。
    /// </summary>
    FUNCFLAG_FSOURCE = 2;
    /// <summary>
    ///   用于支持数据绑定的函数。
    /// </summary>
    FUNCFLAG_FBINDABLE = 4;
    /// <summary>
    ///   设置时，任何调用的方法的第一次调用中设置的属性结果 。
    ///               实现  确定是否允许该调用设置的属性。
    /// </summary>
    FUNCFLAG_FREQUESTEDIT = 8;
    /// <summary>
    ///   作为可绑定向用户显示该函数。
    ///               此外必须设置。
    /// </summary>
    FUNCFLAG_FDISPLAYBIND = 16;
    /// <summary>
    ///   最佳的函数表示的对象。
    ///               一种类型中的只有一个函数可以具有此特性。
    /// </summary>
    FUNCFLAG_FDEFAULTBIND = 32;
    /// <summary>
    ///   该函数不应显示给用户，，尽管它存在并且为可绑定。
    /// </summary>
    FUNCFLAG_FHIDDEN = 64;
    /// <summary>
    ///   该函数支持 。
    ///               如果在函数期间出错时，调用方可以调用  以检索错误代码。
    /// </summary>
    FUNCFLAG_FUSESGETLASTERROR = 128;
    /// <summary>
    ///   允许一种优化方式编译器查找名为"xyz"的"abc"的类型的成员。
    ///               如果此类成员发现，并标记为默认集合的一个元素的访问器函数，是对该成员函数生成的调用。
    ///               允许在调度接口和接口; 中的成员上执行不允许对模块。
    /// </summary>
    FUNCFLAG_FDEFAULTCOLLELEM = 256;
    /// <summary>
    ///   类型信息成员是在用户界面中显示的默认成员。
    /// </summary>
    FUNCFLAG_FUIDEFAULT = 512;
    /// <summary>
    ///   该属性将显示在对象浏览器，但不是在属性浏览器。
    /// </summary>
    FUNCFLAG_FNONBROWSABLE = 1024;
    /// <summary>
    ///   标记为具有默认行为的接口。
    /// </summary>
    FUNCFLAG_FREPLACEABLE = 2048;
    /// <summary>
    ///   作为单独的可绑定属性映射。
    /// </summary>
    FUNCFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   定义如何访问函数。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCKIND')]
  DNComTypes_FUNCKIND = type Integer;
  DNComTypes_FUNCKINDHelper = record helper for DNComTypes_FUNCKIND
  public const
    /// <summary>
    ///   该函数访问方式与 , ，只是该函数有了一个实现。
    /// </summary>
    FUNC_VIRTUAL = 0;
    /// <summary>
    ///   该函数通过虚拟功能表 (VTBL) 访问，并采用隐式  指针。
    /// </summary>
    FUNC_PUREVIRTUAL = 1;
    /// <summary>
    ///   函数可通过  解决，并采用隐式  指针。
    /// </summary>
    FUNC_NONVIRTUAL = 2;
    /// <summary>
    ///   函数可通过  解决，无需一种隐式  指针。
    /// </summary>
    FUNC_STATIC = 3;
    /// <summary>
    ///   该函数可以只能通过访问 。
    /// </summary>
    FUNC_DISPATCH = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   说明如何在进程间传输结构元素、参数或函数返回值。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IDLFLAG')]
  DNComTypes_IDLFLAG = type Integer;
  DNComTypes_IDLFLAGHelper = record helper for DNComTypes_IDLFLAG
  public const
    /// <summary>
    ///   未指定该参数将传递还是接收的信息。
    /// </summary>
    IDLFLAG_NONE = 0;
    /// <summary>
    ///   该参数将信息从调用方传递到被调用方。
    /// </summary>
    IDLFLAG_FIN = 1;
    /// <summary>
    ///   参数向调用方返回从被调用方的信息。
    /// </summary>
    IDLFLAG_FOUT = 2;
    /// <summary>
    ///   该参数是客户端应用程序的本地标识符。
    /// </summary>
    IDLFLAG_FLCID = 4;
    /// <summary>
    ///   参数是该成员的返回值。
    /// </summary>
    IDLFLAG_FRETVAL = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   定义类型的实现接口或继承接口的属性。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS')]
  DNComTypes_IMPLTYPEFLAGS = type Integer;
  DNComTypes_IMPLTYPEFLAGSHelper = record helper for DNComTypes_IMPLTYPEFLAGS
  public const
    /// <summary>
    ///   接口或调度接口表示源或接收器的默认值。
    /// </summary>
    IMPLTYPEFLAG_FDEFAULT = 1;
    /// <summary>
    ///   组件类的此成员是调用而不是实现。
    /// </summary>
    IMPLTYPEFLAG_FSOURCE = 2;
    /// <summary>
    ///   该成员不应显示或可编程性的用户。
    /// </summary>
    IMPLTYPEFLAG_FRESTRICTED = 4;
    /// <summary>
    ///   接收器接收通过虚函数表 (VTBL) 的事件。
    /// </summary>
    IMPLTYPEFLAG_FDEFAULTVTABLE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   指定如何通过函数调用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.INVOKEKIND')]
  DNComTypes_INVOKEKIND = type Integer;
  DNComTypes_INVOKEKINDHelper = record helper for DNComTypes_INVOKEKIND
  public const
    /// <summary>
    ///   使用常规函数调用语法调用该成员。
    /// </summary>
    INVOKE_FUNC = 1;
    /// <summary>
    ///   使用常规属性访问语法来调用该函数。
    /// </summary>
    INVOKE_PROPERTYGET = 2;
    /// <summary>
    ///   使用属性值赋值语法来调用该函数。
    /// </summary>
    INVOKE_PROPERTYPUT = 4;
    /// <summary>
    ///   使用属性引用赋值语法来调用该函数。
    /// </summary>
    INVOKE_PROPERTYPUTREF = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   定义应用于类型库的标志。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.LIBFLAGS')]
  DNComTypes_LIBFLAGS = type Integer;
  DNComTypes_LIBFLAGSHelper = record helper for DNComTypes_LIBFLAGS
  public const
    /// <summary>
    ///   类型库受到限制，且不应显示给用户。
    /// </summary>
    LIBFLAG_FRESTRICTED = 1;
    /// <summary>
    ///   类型库描述控件，且不应显示在类型浏览器中适用于非可视对象。
    /// </summary>
    LIBFLAG_FCONTROL = 2;
    /// <summary>
    ///   尽管它的使用不受限制，则不应给用户，显示的类型库。
    ///               应由控件使用的类型库。
    ///               主机应创建一个新的类型库中包装控件具有扩展属性。
    /// </summary>
    LIBFLAG_FHIDDEN = 4;
    /// <summary>
    ///   类型库中磁盘上持久形式存在。
    /// </summary>
    LIBFLAG_FHASDISKIMAGE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   说明如何在进程间传输结构元素、参数或函数返回值。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.PARAMFLAG')]
  DNComTypes_PARAMFLAG = type Integer;
  DNComTypes_PARAMFLAGHelper = record helper for DNComTypes_PARAMFLAG
  public const
    /// <summary>
    ///   未指定该参数将传递还是接收的信息。
    /// </summary>
    PARAMFLAG_NONE = 0;
    /// <summary>
    ///   该参数将信息从调用方传递到被调用方。
    /// </summary>
    PARAMFLAG_FIN = 1;
    /// <summary>
    ///   参数向调用方返回从被调用方的信息。
    /// </summary>
    PARAMFLAG_FOUT = 2;
    /// <summary>
    ///   该参数是客户端应用程序的本地标识符。
    /// </summary>
    PARAMFLAG_FLCID = 4;
    /// <summary>
    ///   参数是该成员的返回值。
    /// </summary>
    PARAMFLAG_FRETVAL = 8;
    /// <summary>
    ///   该参数是可选的。
    /// </summary>
    PARAMFLAG_FOPT = 16;
    /// <summary>
    ///   该参数定义了默认行为。
    /// </summary>
    PARAMFLAG_FHASDEFAULT = 32;
    /// <summary>
    ///   此参数的自定义数据。
    /// </summary>
    PARAMFLAG_FHASCUSTDATA = 64;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   标识目标操作系统平台。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.SYSKIND')]
  DNComTypes_SYSKIND = type Integer;
  DNComTypes_SYSKINDHelper = record helper for DNComTypes_SYSKIND
  public const
    /// <summary>
    ///   目标操作系统为类型库是 16 位 Windows 系统。
    ///               默认情况下，数据字段被压缩。
    /// </summary>
    SYS_WIN16 = 0;
    /// <summary>
    ///   类型库的目标操作系统是 32 位 Windows 系统。
    ///               默认情况下，自然对齐的数据字段 （例如，2 字节整数在偶字节边界对齐; 4 字节整数在四字边界上对齐，依此类推）。
    /// </summary>
    SYS_WIN32 = 1;
    /// <summary>
    ///   目标操作系统为类型库是 Apple Macintosh。
    ///               默认情况下，所有数据字段在甚至字节边界上都对齐。
    /// </summary>
    SYS_MAC = 2;
    /// <summary>
    ///   类型库的目标操作系统是 64 位 Windows 系统。
    /// </summary>
    SYS_WIN64 = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   定义类型说明的属性和特性。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEFLAGS')]
  DNComTypes_TYPEFLAGS = type Integer;
  DNComTypes_TYPEFLAGSHelper = record helper for DNComTypes_TYPEFLAGS
  public const
    /// <summary>
    ///   描述的类型说明  对象。
    /// </summary>
    TYPEFLAG_FAPPOBJECT = 1;
    /// <summary>
    ///   可以通过创建该类型的实例 。
    /// </summary>
    TYPEFLAG_FCANCREATE = 2;
    /// <summary>
    ///   该类型已授权。
    /// </summary>
    TYPEFLAG_FLICENSED = 4;
    /// <summary>
    ///   类型是预定义的。
    ///               客户端应用程序应自动创建具有此属性的对象的单个实例。
    ///               指向的对象的名称是变量的该对象的类名称相同。
    /// </summary>
    TYPEFLAG_FPREDECLID = 8;
    /// <summary>
    ///   类型不应显示给浏览器。
    /// </summary>
    TYPEFLAG_FHIDDEN = 16;
    /// <summary>
    ///   类型为其他类型从其将派生以及不应该向用户显示的控件。
    /// </summary>
    TYPEFLAG_FCONTROL = 32;
    /// <summary>
    ///   该接口提供  和 VTBL 绑定。
    /// </summary>
    TYPEFLAG_FDUAL = 64;
    /// <summary>
    ///   此接口不能在运行时添加成员。
    /// </summary>
    TYPEFLAG_FNONEXTENSIBLE = 128;
    /// <summary>
    ///   在界面中使用的类型都与自动化，包括 VTBL 绑定支持完全兼容。
    ///               设置双重接口上的设置了这两个此标志和  。
    ///               在调度接口上不允许使用此标志。
    /// </summary>
    TYPEFLAG_FOLEAUTOMATION = 256;
    /// <summary>
    ///   不应从宏语言中访问。
    ///               此标志专供系统级别的类型或类型浏览器的类型不应显示。
    /// </summary>
    TYPEFLAG_FRESTRICTED = 512;
    /// <summary>
    ///   该类支持聚合。
    /// </summary>
    TYPEFLAG_FAGGREGATABLE = 1024;
    /// <summary>
    ///   对象支持 , ，而且具有默认行为。
    /// </summary>
    TYPEFLAG_FREPLACEABLE = 2048;
    /// <summary>
    ///   指示该接口派生自 , ，直接或间接。
    ///               计算此标志;没有此标志的对象描述语言。
    /// </summary>
    TYPEFLAG_FDISPATCHABLE = 4096;
    /// <summary>
    ///   指示应检查基接口的名称解析之前检查子级，它是默认行为的相反值。
    /// </summary>
    TYPEFLAG_FREVERSEBIND = 8192;
    /// <summary>
    ///   指示该接口将使用代理/存根动态链接库。
    ///               此标志指定注销类型库时不应取消注册类型库代理。
    /// </summary>
    TYPEFLAG_FPROXY = 16384;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   指定各种类型的数据和函数。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEKIND')]
  DNComTypes_TYPEKIND = type Integer;
  DNComTypes_TYPEKINDHelper = record helper for DNComTypes_TYPEKIND
  public const
    /// <summary>
    ///   一组枚举器。
    /// </summary>
    TKIND_ENUM = 0;
    /// <summary>
    ///   一种结构不包含任何方法。
    /// </summary>
    TKIND_RECORD = 1;
    /// <summary>
    ///   模块，它可以包含静态函数和数据 (例如，一个 DLL)。
    /// </summary>
    TKIND_MODULE = 2;
    /// <summary>
    ///   具有虚函数，所有这些都是纯的类型。
    /// </summary>
    TKIND_INTERFACE = 3;
    /// <summary>
    ///   一组方法和属性都可通过访问 。
    ///               默认情况下，双重接口返回 。
    /// </summary>
    TKIND_DISPATCH = 4;
    /// <summary>
    ///   一组实现的组件接口。
    /// </summary>
    TKIND_COCLASS = 5;
    /// <summary>
    ///   另一种类型的别名类型。
    /// </summary>
    TKIND_ALIAS = 6;
    /// <summary>
    ///   偏移量为零的所有成员的联合。
    /// </summary>
    TKIND_UNION = 7;
    /// <summary>
    ///   枚举结束标记。
    /// </summary>
    TKIND_MAX = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   标识定义变量属性的常量。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARFLAGS')]
  DNComTypes_VARFLAGS = type Integer;
  DNComTypes_VARFLAGSHelper = record helper for DNComTypes_VARFLAGS
  public const
    /// <summary>
    ///   不应允许向变量赋值。
    /// </summary>
    VARFLAG_FREADONLY = 1;
    /// <summary>
    ///   该变量返回一个对象，它的事件源。
    /// </summary>
    VARFLAG_FSOURCE = 2;
    /// <summary>
    ///   该变量支持数据绑定。
    /// </summary>
    VARFLAG_FBINDABLE = 4;
    /// <summary>
    ///   任何设置时，试图直接更改对的调用中的属性结果 。
    ///               实现  决定是否接受此更改。
    /// </summary>
    VARFLAG_FREQUESTEDIT = 8;
    /// <summary>
    ///   作为可绑定向用户显示该变量。
    ///               此外必须设置。
    /// </summary>
    VARFLAG_FDISPLAYBIND = 16;
    /// <summary>
    ///   该变量是最能代表该对象的唯一属性。
    ///               类型信息中的仅有一个变量可以具有此特性。
    /// </summary>
    VARFLAG_FDEFAULTBIND = 32;
    /// <summary>
    ///   尽管它存在并且为可绑定，则不应在浏览器中，向用户显示该变量。
    /// </summary>
    VARFLAG_FHIDDEN = 64;
    /// <summary>
    ///   不应从宏语言中访问该变量。
    ///               此标志旨在用于系统级别的变量或不希望类型浏览器显示的变量。
    /// </summary>
    VARFLAG_FRESTRICTED = 128;
    /// <summary>
    ///   允许一种优化方式编译器查找名为"xyz"的"abc"的类型的成员。
    ///               如果此类成员找到，并且被标记为默认集合的一个元素的访问器函数，然后对该成员函数生成的调用。
    ///               允许在调度接口和接口; 中的成员上执行不允许对模块。
    /// </summary>
    VARFLAG_FDEFAULTCOLLELEM = 256;
    /// <summary>
    ///   该变量是在用户界面中的默认显示。
    /// </summary>
    VARFLAG_FUIDEFAULT = 512;
    /// <summary>
    ///   该变量出现在对象浏览器，但不是在属性浏览器。
    /// </summary>
    VARFLAG_FNONBROWSABLE = 1024;
    /// <summary>
    ///   标记为具有默认行为的接口。
    /// </summary>
    VARFLAG_FREPLACEABLE = 2048;
    /// <summary>
    ///   该变量将作为单独的可绑定属性映射。
    /// </summary>
    VARFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   定义变量的种类。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARKIND')]
  DNVARKIND = type Integer;
  DNVARKINDHelper = record helper for DNVARKIND
  public const
    /// <summary>
    ///   该变量是一个字段或成员的类型。
    ///               它存在于类型的每个实例中的固定偏移量。
    /// </summary>
    VAR_PERINSTANCE = 0;
    /// <summary>
    ///   没有该变量的一个实例。
    /// </summary>
    VAR_STATIC = 1;
    /// <summary>
    ///   结构介绍了符号常量。
    ///               没有与之关联的内存。
    /// </summary>
    VAR_CONST = 2;
    /// <summary>
    ///   只能通过访问此变量 。
    /// </summary>
    VAR_DISPATCH = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指示是否  方法的 IUnknown::QueryInterface 调用可使用  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.CustomQueryInterfaceMode')]
  DNCustomQueryInterfaceMode = type Integer;
  DNCustomQueryInterfaceModeHelper = record helper for DNCustomQueryInterfaceMode
  public const
    /// <summary>
    ///   IUnknown::QueryInterface 方法调用都应忽略  接口。
    /// </summary>
    Ignore = 0;
    /// <summary>
    ///   IUnknown::QueryInterface 方法调用都可以使用  接口。
    ///               当您使用此值，  方法重载的功能类似  重载。
    /// </summary>
    Allow = 1;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   提供有关返回值  方法。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.CustomQueryInterfaceResult')]
  DNCustomQueryInterfaceResult = type Integer;
  DNCustomQueryInterfaceResultHelper = record helper for DNCustomQueryInterfaceResult
  public const
    /// <summary>
    ///   从返回的接口指针  方法可以用作的结果 IUnknown::QueryInterface。
    /// </summary>
    Handled = 0;
    /// <summary>
    ///   自定义  未使用。
    ///               相反的默认实现 IUnknown::QueryInterface 应使用。
    /// </summary>
    NotHandled = 1;
    /// <summary>
    ///   特定的接口 ID 的接口不可用。
    ///               在这种情况下，返回的接口是 。
    ///               E_NOINTERFACE 返回给调用方 IUnknown::QueryInterface。
    /// </summary>
    Failed = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.DESCKIND')]
  DNInteropServices_DESCKIND = type Integer;
  DNInteropServices_DESCKINDHelper = record helper for DNInteropServices_DESCKIND
  public const
    /// <summary>
    ///   指示已找到任何匹配项。
    /// </summary>
    DESCKIND_NONE = 0;
    /// <summary>
    ///   指示  返回。
    /// </summary>
    DESCKIND_FUNCDESC = 1;
    /// <summary>
    ///   指示  返回。
    /// </summary>
    DESCKIND_VARDESC = 2;
    /// <summary>
    ///   指示  返回。
    /// </summary>
    DESCKIND_TYPECOMP = 3;
    /// <summary>
    ///   指示  返回。
    /// </summary>
    DESCKIND_IMPLICITAPPOBJ = 4;
    /// <summary>
    ///   指示枚举标记的结束时间。
    /// </summary>
    DESCKIND_MAX = 5;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指定用于搜索提供平台调用函数的 DLL 的路径。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.DllImportSearchPath')]
  DNDllImportSearchPath = type Integer;
  DNDllImportSearchPathHelper = record helper for DNDllImportSearchPath
  public const
    /// <summary>
    ///   搜索应用程序目录，然后调用 Win32 LoadLibraryEx 起作用 LOAD_WITH_ALTERED_SEARCH_PATH 标志。
    ///               如果指定了任何其他值，则忽略此值。
    ///               不支持的操作系统  属性使用此值，并忽略其他值。
    /// </summary>
    LegacyBehavior = 0;
    /// <summary>
    ///   在搜索程序集依赖项，包括目录包含的程序集本身，并首先搜索该目录。
    ///               此值由.NET Framework 中，在路径传递给 Win32 之前 LoadLibraryEx 函数。
    /// </summary>
    AssemblyDirectory = 2;
    /// <summary>
    ///   搜索 DLL 在搜索其他文件夹之前所处的位置的文件夹中的 DLL 的依赖关系。
    /// </summary>
    UseDllDirectoryForDependencies = 256;
    /// <summary>
    ///   DLL 搜索路径中包括应用程序目录。
    /// </summary>
    ApplicationDirectory = 512;
    /// <summary>
    ///   包括使用 Win32 显式添加到进程范围的搜索路径的任何路径 AddDllDirectory 函数。
    /// </summary>
    UserDirectories = 1024;
    /// <summary>
    ///   包括  DLL 搜索路径中的目录。
    /// </summary>
    System32 = 2048;
    /// <summary>
    ///   包括应用程序目录中，  目录和 DLL 搜索路径中的用户目录。
    /// </summary>
    SafeDirectories = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   描述类型库导出程序在导出类型库时进行的回调。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ExporterEventKind')]
  DNExporterEventKind = type Integer;
  DNExporterEventKindHelper = record helper for DNExporterEventKind
  public const
    /// <summary>
    ///   指定导出类型时调用该事件。
    /// </summary>
    NOTIF_TYPECONVERTED = 0;
    /// <summary>
    ///   指定在转换过程中出现警告时调用该事件。
    /// </summary>
    NOTIF_CONVERTWARNING = 1;
    /// <summary>
    ///   在此版本的.NET Framework 不支持此值。
    /// </summary>
    ERROR_REFTOINVALIDASSEMBLY = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.FUNCFLAGS')]
  DNInteropServices_FUNCFLAGS = type Integer;
  DNInteropServices_FUNCFLAGSHelper = record helper for DNInteropServices_FUNCFLAGS
  public const
    /// <summary>
    ///   该函数不应从宏语言中访问。
    ///               此标志适用于系统级别的功能或不应显示类型浏览器的函数。
    /// </summary>
    FUNCFLAG_FRESTRICTED = 1;
    /// <summary>
    ///   函数将返回一个对象，它的事件源。
    /// </summary>
    FUNCFLAG_FSOURCE = 2;
    /// <summary>
    ///   用于支持数据绑定的函数。
    /// </summary>
    FUNCFLAG_FBINDABLE = 4;
    /// <summary>
    ///   设置时，任何调用的方法的第一次调用中设置的属性结果 。
    ///               实现  确定是否允许该调用设置的属性。
    /// </summary>
    FUNCFLAG_FREQUESTEDIT = 8;
    /// <summary>
    ///   作为可绑定向用户显示该函数。
    ///               此外必须设置。
    /// </summary>
    FUNCFLAG_FDISPLAYBIND = 16;
    /// <summary>
    ///   最佳的函数表示的对象。
    ///               类型信息中的只有一个函数可以具有此特性。
    /// </summary>
    FUNCFLAG_FDEFAULTBIND = 32;
    /// <summary>
    ///   该函数不应显示给用户，，尽管它存在并且为可绑定。
    /// </summary>
    FUNCFLAG_FHIDDEN = 64;
    /// <summary>
    ///   该函数支持 。
    ///               如果在函数期间出错时，调用方可以调用  以检索错误代码。
    /// </summary>
    FUNCFLAG_FUSESGETLASTERROR = 128;
    /// <summary>
    ///   允许一种优化方式编译器查找名为"xyz"的"abc"的类型的成员。
    ///               如果此类成员发现，并标记为默认集合的一个元素的访问器函数，是对该成员函数生成的调用。
    ///               允许在调度接口和接口; 中的成员上执行不允许对模块。
    /// </summary>
    FUNCFLAG_FDEFAULTCOLLELEM = 256;
    /// <summary>
    ///   类型信息成员是在用户界面中显示的默认成员。
    /// </summary>
    FUNCFLAG_FUIDEFAULT = 512;
    /// <summary>
    ///   该属性将显示在对象浏览器，但不是在属性浏览器。
    /// </summary>
    FUNCFLAG_FNONBROWSABLE = 1024;
    /// <summary>
    ///   标记为具有默认行为的接口。
    /// </summary>
    FUNCFLAG_FREPLACEABLE = 2048;
    /// <summary>
    ///   作为单独的可绑定属性映射。
    /// </summary>
    FUNCFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.FUNCKIND')]
  DNInteropServices_FUNCKIND = type Integer;
  DNInteropServices_FUNCKINDHelper = record helper for DNInteropServices_FUNCKIND
  public const
    /// <summary>
    ///   访问该函数与相同 , ，只是该函数有了一个实现。
    /// </summary>
    FUNC_VIRTUAL = 0;
    /// <summary>
    ///   该函数通过虚拟功能表 (VTBL) 访问，并采用隐式  指针。
    /// </summary>
    FUNC_PUREVIRTUAL = 1;
    /// <summary>
    ///   函数可通过  解决，并采用隐式  指针。
    /// </summary>
    FUNC_NONVIRTUAL = 2;
    /// <summary>
    ///   函数可通过  解决，无需一种隐式  指针。
    /// </summary>
    FUNC_STATIC = 3;
    /// <summary>
    ///   该函数可以只能通过访问 。
    /// </summary>
    FUNC_DISPATCH = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   表示类型的句柄  类可以分配。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.GCHandleType')]
  DNGCHandleType = type Integer;
  DNGCHandleTypeHelper = record helper for DNGCHandleType
  public const
    /// <summary>
    ///   此句柄类型用于跟踪对象，但使其可以成为收集。
    ///               回收某个对象时，内容  均被清零。
    ///               终结器运行之前，这样即使终结器复活该对象引用均被清零  引用仍归零。
    /// </summary>
    Weak = 0;
    /// <summary>
    ///   此句柄类型是类似于 , ，但如果在终止期间复活对象句柄不归零。
    /// </summary>
    WeakTrackResurrection = 1;
    /// <summary>
    ///   此句柄类型表示一个不透明的句柄，这意味着您不能解决钉住的对象，通过该句柄的地址。
    ///               此类型可用于跟踪对象，并防止其在垃圾回收器的集合。
    ///               此枚举成员的非托管客户端保留唯一的引用，即从垃圾回收到托管对象无法检测到时很有帮助。
    /// </summary>
    Normal = 2;
    /// <summary>
    ///   此句柄类型是类似于 , ，但允许要执行的固定对象的地址。
    ///               这可阻止垃圾回收器移动对象，因此将降低垃圾回收器的效率。
    ///               使用  方法来尽可能快地释放分配的句柄。
    /// </summary>
    Pinned = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指示将用于特定类的  实现。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.IDispatchImplType')]
  DNIDispatchImplType = type Integer;
  DNIDispatchImplTypeHelper = record helper for DNIDispatchImplType
  public const
    /// <summary>
    ///   指定公共语言运行时将决定要使用哪个  实现。
    /// </summary>
    SystemDefinedImpl = 0;
    /// <summary>
    ///   指定由运行时提供  实现。
    /// </summary>
    InternalImpl = 1;
    /// <summary>
    ///   指定通过向 COM  API 方法传递对象的类型信息来提供  实现。
    /// </summary>
    CompatibleImpl = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.IDLFLAG')]
  DNInteropServices_IDLFLAG = type Integer;
  DNInteropServices_IDLFLAGHelper = record helper for DNInteropServices_IDLFLAG
  public const
    /// <summary>
    ///   是否将传递参数，或收到的信息，则不指定。
    /// </summary>
    IDLFLAG_NONE = 0;
    /// <summary>
    ///   该参数将信息从调用方传递到被调用方。
    /// </summary>
    IDLFLAG_FIN = 1;
    /// <summary>
    ///   参数向调用方返回从被调用方的信息。
    /// </summary>
    IDLFLAG_FOUT = 2;
    /// <summary>
    ///   该参数是客户端应用程序的本地标识符。
    /// </summary>
    IDLFLAG_FLCID = 4;
    /// <summary>
    ///   参数是该成员的返回值。
    /// </summary>
    IDLFLAG_FRETVAL = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.IMPLTYPEFLAGS')]
  DNInteropServices_IMPLTYPEFLAGS = type Integer;
  DNInteropServices_IMPLTYPEFLAGSHelper = record helper for DNInteropServices_IMPLTYPEFLAGS
  public const
    /// <summary>
    ///   接口或调度接口表示源或接收器的默认值。
    /// </summary>
    IMPLTYPEFLAG_FDEFAULT = 1;
    /// <summary>
    ///   组件类的此成员是调用而不是实现。
    /// </summary>
    IMPLTYPEFLAG_FSOURCE = 2;
    /// <summary>
    ///   该成员不应显示或可编程性的用户。
    /// </summary>
    IMPLTYPEFLAG_FRESTRICTED = 4;
    /// <summary>
    ///   接收器接收通过虚函数表 (VTBL) 的事件。
    /// </summary>
    IMPLTYPEFLAG_FDEFAULTVTABLE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   描述类型库导入程序生成时导入类型库的回调。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ImporterEventKind')]
  DNImporterEventKind = type Integer;
  DNImporterEventKindHelper = record helper for DNImporterEventKind
  public const
    /// <summary>
    ///   指定导入类型之后调用该事件。
    /// </summary>
    NOTIF_TYPECONVERTED = 0;
    /// <summary>
    ///   指定在转换过程中出现警告时调用该事件。
    /// </summary>
    NOTIF_CONVERTWARNING = 1;
    /// <summary>
    ///   在此版本的.NET Framework 不支持此属性。
    /// </summary>
    ERROR_REFTOINVALIDTYPELIB = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.INVOKEKIND')]
  DNInteropServices_INVOKEKIND = type Integer;
  DNInteropServices_INVOKEKINDHelper = record helper for DNInteropServices_INVOKEKIND
  public const
    /// <summary>
    ///   使用常规函数调用语法调用该成员。
    /// </summary>
    INVOKE_FUNC = 1;
    /// <summary>
    ///   使用常规属性访问语法来调用该函数。
    /// </summary>
    INVOKE_PROPERTYGET = 2;
    /// <summary>
    ///   使用属性值赋值语法来调用该函数。
    /// </summary>
    INVOKE_PROPERTYPUT = 4;
    /// <summary>
    ///   使用属性引用赋值语法来调用该函数。
    /// </summary>
    INVOKE_PROPERTYPUTREF = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   当将对象导出到非托管代码时，控制该对象的布局。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.LayoutKind')]
  DNLayoutKind = type Integer;
  DNLayoutKindHelper = record helper for DNLayoutKind
  public const
    /// <summary>
    ///   对象的成员顺序依次布局，它们出现导出到非托管内存时的顺序。
    ///               成员进行布局中指定的封装根据，和可以是不连续。
    /// </summary>
    Sequential = 0;
    /// <summary>
    ///   非托管内存中的每个成员的对象的精确位置显式控制，受约束的设置字段。
    ///               每个成员必须使用指示该字段的类型中的位置。
    /// </summary>
    Explicit = 2;
    /// <summary>
    ///   非托管内存中某个对象的成员，则运行时会自动选择适当的布局。
    ///               无法在托管代码之外公开使用此枚举成员定义的对象。
    ///               尝试这样做将引发异常。
    /// </summary>
    Auto = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.LIBFLAGS')]
  DNInteropServices_LIBFLAGS = type Integer;
  DNInteropServices_LIBFLAGSHelper = record helper for DNInteropServices_LIBFLAGS
  public const
    /// <summary>
    ///   类型库受到限制，且不应显示给用户。
    /// </summary>
    LIBFLAG_FRESTRICTED = 1;
    /// <summary>
    ///   类型库描述控件，且不应显示在类型浏览器中适用于非可视对象。
    /// </summary>
    LIBFLAG_FCONTROL = 2;
    /// <summary>
    ///   尽管它的使用不受限制，则不应给用户，显示的类型库。
    ///               应由控件使用。
    ///               主机应创建一个新的类型库中包装控件具有扩展属性。
    /// </summary>
    LIBFLAG_FHIDDEN = 4;
    /// <summary>
    ///   类型库中磁盘上持久形式存在。
    /// </summary>
    LIBFLAG_FHASDISKIMAGE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.PARAMFLAG')]
  DNInteropServices_PARAMFLAG = type Integer;
  DNInteropServices_PARAMFLAGHelper = record helper for DNInteropServices_PARAMFLAG
  public const
    /// <summary>
    ///   是否将传递参数，或收到的信息，则不指定。
    /// </summary>
    PARAMFLAG_NONE = 0;
    /// <summary>
    ///   该参数将信息从调用方传递到被调用方。
    /// </summary>
    PARAMFLAG_FIN = 1;
    /// <summary>
    ///   参数向调用方返回从被调用方的信息。
    /// </summary>
    PARAMFLAG_FOUT = 2;
    /// <summary>
    ///   该参数是客户端应用程序的本地标识符。
    /// </summary>
    PARAMFLAG_FLCID = 4;
    /// <summary>
    ///   参数是该成员的返回值。
    /// </summary>
    PARAMFLAG_FRETVAL = 8;
    /// <summary>
    ///   该参数是可选的。
    /// </summary>
    PARAMFLAG_FOPT = 16;
    /// <summary>
    ///   该参数定义了默认行为。
    /// </summary>
    PARAMFLAG_FHASDEFAULT = 32;
    /// <summary>
    ///   此参数的自定义数据。
    /// </summary>
    PARAMFLAG_FHASCUSTDATA = 64;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指定顺序的类对象将可用于请求构造实例的执行上下文的集。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.RegistrationClassContext')]
  DNRegistrationClassContext = type Integer;
  DNRegistrationClassContextHelper = record helper for DNRegistrationClassContext
  public const
    /// <summary>
    ///   用于创建和管理此类的对象的代码是函数的在与指定类上下文的调用方相同的进程中运行的 DLL。
    /// </summary>
    InProcessServer = 1;
    /// <summary>
    ///   管理此类的对象的代码是一个进程内处理程序。
    /// </summary>
    InProcessHandler = 2;
    /// <summary>
    ///   用于创建和管理此类的对象的 EXE 代码在同一台计算机上运行，但在单独的进程空间中已加载。
    /// </summary>
    LocalServer = 4;
    /// <summary>
    ///   未使用。
    /// </summary>
    InProcessServer16 = 8;
    /// <summary>
    ///   一个远程计算机的上下文。
    /// </summary>
    RemoteServer = 16;
    /// <summary>
    ///   未使用。
    /// </summary>
    InProcessHandler16 = 32;
    /// <summary>
    ///   未使用。
    /// </summary>
    Reserved1 = 64;
    /// <summary>
    ///   未使用。
    /// </summary>
    Reserved2 = 128;
    /// <summary>
    ///   未使用。
    /// </summary>
    Reserved3 = 256;
    /// <summary>
    ///   未使用。
    /// </summary>
    Reserved4 = 512;
    /// <summary>
    ///   不允许从目录服务或 Internet 的代码下载。
    /// </summary>
    NoCodeDownload = 1024;
    /// <summary>
    ///   未使用。
    /// </summary>
    Reserved5 = 2048;
    /// <summary>
    ///   指定激活失败是否它使用自定义封送处理。
    /// </summary>
    NoCustomMarshal = 4096;
    /// <summary>
    ///   允许从目录服务或 Internet 的代码下载。
    /// </summary>
    EnableCodeDownload = 8192;
    /// <summary>
    ///   重写失败的日志记录。
    /// </summary>
    NoFailureLog = 16384;
    /// <summary>
    ///   禁用作为激活 (AAA) 仅对此激活的激活次数。
    /// </summary>
    DisableActivateAsActivator = 32768;
    /// <summary>
    ///   启用仅对此激活作为激活 (AAA) 激活。
    /// </summary>
    EnableActivateAsActivator = 65536;
    /// <summary>
    ///   开始从默认的上下文的当前单元此激活。
    /// </summary>
    FromDefaultContext = 131072;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指向类对象定义的类型的连接。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.RegistrationConnectionType')]
  DNRegistrationConnectionType = type Integer;
  DNRegistrationConnectionTypeHelper = record helper for DNRegistrationConnectionType
  public const
    /// <summary>
    ///   在应用程序连接到带的类对象后 , ，因此，没有其他应用程序可以连接到该从公共视图中删除的类对象。
    ///               此值通常用于单文档界面 (SDI) 应用程序。
    /// </summary>
    SingleUse = 0;
    /// <summary>
    ///   多个应用程序可以连接到通过调用的类对象 。
    /// </summary>
    MultipleUse = 1;
    /// <summary>
    ///   寄存器分隔 CLSCTX_LOCAL_SERVER 和 CLSCTX_INPROC_SERVER 的类工厂。
    /// </summary>
    MultiSeparate = 2;
    /// <summary>
    ///   为指定的 CLSID 挂起注册和激活请求，直到调用 。
    /// </summary>
    Suspended = 4;
    /// <summary>
    ///   类对象是使用 DLL 服务器上运行的代理进程。
    /// </summary>
    Surrogate = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.SYSKIND')]
  DNInteropServices_SYSKIND = type Integer;
  DNInteropServices_SYSKINDHelper = record helper for DNInteropServices_SYSKIND
  public const
    /// <summary>
    ///   目标操作系统为类型库是 16 位 Windows 系统。
    ///               默认情况下，数据字段被压缩。
    /// </summary>
    SYS_WIN16 = 0;
    /// <summary>
    ///   类型库的目标操作系统是 32 位 Windows 系统。
    ///               默认情况下，自然对齐的数据字段 （例如，2 字节整数在偶字节边界对齐; 4 字节整数在四字边界上对齐，依此类推）。
    /// </summary>
    SYS_WIN32 = 1;
    /// <summary>
    ///   目标操作系统为类型库是 Apple Macintosh。
    ///               默认情况下，所有数据字段在甚至字节边界上都对齐。
    /// </summary>
    SYS_MAC = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TYPEFLAGS')]
  DNInteropServices_TYPEFLAGS = type Integer;
  DNInteropServices_TYPEFLAGSHelper = record helper for DNInteropServices_TYPEFLAGS
  public const
    /// <summary>
    ///   描述应用程序对象类型说明。
    /// </summary>
    TYPEFLAG_FAPPOBJECT = 1;
    /// <summary>
    ///   可以通过创建该类型的实例 。
    /// </summary>
    TYPEFLAG_FCANCREATE = 2;
    /// <summary>
    ///   该类型已授权。
    /// </summary>
    TYPEFLAG_FLICENSED = 4;
    /// <summary>
    ///   类型是预定义的。
    ///               客户端应用程序应自动创建具有此属性的对象的单个实例。
    ///               指向的对象的名称是变量的该对象的类名称相同。
    /// </summary>
    TYPEFLAG_FPREDECLID = 8;
    /// <summary>
    ///   类型不应显示给浏览器。
    /// </summary>
    TYPEFLAG_FHIDDEN = 16;
    /// <summary>
    ///   类型为其他类型从其将派生以及不应该向用户显示的控件。
    /// </summary>
    TYPEFLAG_FCONTROL = 32;
    /// <summary>
    ///   该接口提供  和 VTBL 绑定。
    /// </summary>
    TYPEFLAG_FDUAL = 64;
    /// <summary>
    ///   此接口不能在运行时添加成员。
    /// </summary>
    TYPEFLAG_FNONEXTENSIBLE = 128;
    /// <summary>
    ///   在界面中使用的类型都与自动化，包括 VTBL 绑定支持完全兼容。
    ///               设置双重接口上的设置了此标志除了 。
    ///               不允许在调度接口上。
    /// </summary>
    TYPEFLAG_FOLEAUTOMATION = 256;
    /// <summary>
    ///   不应从宏语言中访问。
    ///               此标志专供系统级别的类型或类型浏览器的类型不应显示。
    /// </summary>
    TYPEFLAG_FRESTRICTED = 512;
    /// <summary>
    ///   该类支持聚合。
    /// </summary>
    TYPEFLAG_FAGGREGATABLE = 1024;
    /// <summary>
    ///   对象支持 , ，而且具有默认行为。
    /// </summary>
    TYPEFLAG_FREPLACEABLE = 2048;
    /// <summary>
    ///   指示该接口派生自 , ，直接或间接。
    ///               计算此标志，该标志的对象描述语言。
    /// </summary>
    TYPEFLAG_FDISPATCHABLE = 4096;
    /// <summary>
    ///   指示基接口应该检查的默认行为相反的子级前, 检查来进行名称解析。
    /// </summary>
    TYPEFLAG_FREVERSEBIND = 8192;
    /// <summary>
    ///   指示该接口将使用代理/存根动态链接库。
    ///               此标志指定注销类型库时不应取消注册类型库代理。
    /// </summary>
    TYPEFLAG_FPROXY = 16384;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TYPEKIND')]
  DNInteropServices_TYPEKIND = type Integer;
  DNInteropServices_TYPEKINDHelper = record helper for DNInteropServices_TYPEKIND
  public const
    /// <summary>
    ///   一组枚举器。
    /// </summary>
    TKIND_ENUM = 0;
    /// <summary>
    ///   一种结构不包含任何方法。
    /// </summary>
    TKIND_RECORD = 1;
    /// <summary>
    ///   静态函数和数据 (例如，一个 DLL) 只能有一个模块。
    /// </summary>
    TKIND_MODULE = 2;
    /// <summary>
    ///   具有虚函数，所有这些都是纯的类型。
    /// </summary>
    TKIND_INTERFACE = 3;
    /// <summary>
    ///   一组方法和属性都可通过访问 。
    ///               默认情况下，双重接口返回 。
    /// </summary>
    TKIND_DISPATCH = 4;
    /// <summary>
    ///   一组实现的组件接口。
    /// </summary>
    TKIND_COCLASS = 5;
    /// <summary>
    ///   另一种类型的别名类型。
    /// </summary>
    TKIND_ALIAS = 6;
    /// <summary>
    ///   偏移量为零的所有成员的联合。
    /// </summary>
    TKIND_UNION = 7;
    /// <summary>
    ///   枚举标记的结尾。
    /// </summary>
    TKIND_MAX = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指示应如何生成类型库。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibExporterFlags')]
  DNTypeLibExporterFlags = type Integer;
  DNTypeLibExporterFlagsHelper = record helper for DNTypeLibExporterFlags
  public const
    /// <summary>
    ///   不指定任何标志。
    ///               这是默认设置。
    /// </summary>
    None = 0;
    /// <summary>
    ///   导出已从 COM 作为导入的类型的引用  如果类型不具有已注册的类型库。
    ///               当您希望类型库导出程序，以使其寻找依赖类型的注册表中而不是与输入程序集位于同一目录中时，请设置此标志。
    /// </summary>
    OnlyReferenceRegistered = 1;
    /// <summary>
    ///   允许调用方明确不参考注册表的情况下解析类型库引用。
    /// </summary>
    CallerResolvedReferences = 2;
    /// <summary>
    ///   当导出类型库时，.NET Framework 解析的类型名称冲突的修饰名称的命名空间; 的类型例如，  导出为 。
    ///               如果存在与不是从 COM 可见类型的名称冲突，.NET Framework 将导出未修饰的名。
    ///               设置  标志或使用  类型库导出程序 (Tlbexp.exe) 中的选项来强制将.NET Framework，若要导出的修饰的名。
    ///               请注意，导出的修饰的名是.NET Framework 2.0 版之前的版本中的默认行为。
    /// </summary>
    OldNames = 4;
    /// <summary>
    ///   在编译时在 64 位计算机上，指定类型库导出程序 (Tlbexp.exe) 生成一个 32 位类型库。
    ///               所有数据类型都将进行相应的都转换。
    /// </summary>
    ExportAs32Bit = 16;
    /// <summary>
    ///   32 位计算机上编译时，指定类型库导出程序 (Tlbexp.exe) 生成一个 64 位类型库。
    ///               所有数据类型都将进行相应的都转换。
    /// </summary>
    ExportAs64Bit = 32;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   描述的原始设置  导入此方法从 COM 类型库中。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibFuncFlags')]
  DNTypeLibFuncFlags = type Integer;
  DNTypeLibFuncFlagsHelper = record helper for DNTypeLibFuncFlags
  public const
    /// <summary>
    ///   此标志适用于系统级别的功能或不应显示类型浏览器的函数。
    /// </summary>
    FRestricted = 1;
    /// <summary>
    ///   函数将返回一个对象，它的事件源。
    /// </summary>
    FSource = 2;
    /// <summary>
    ///   用于支持数据绑定的函数。
    /// </summary>
    FBindable = 4;
    /// <summary>
    ///   设置时，任何调用的方法的第一次调用中设置的属性结果 。
    /// </summary>
    FRequestEdit = 8;
    /// <summary>
    ///   作为可绑定向用户显示该函数。
    ///               此外必须设置。
    /// </summary>
    FDisplayBind = 16;
    /// <summary>
    ///   最佳的函数表示的对象。
    ///               类型信息中的只有一个函数可以具有此特性。
    /// </summary>
    FDefaultBind = 32;
    /// <summary>
    ///   该函数不应显示给用户，，尽管它存在并且为可绑定。
    /// </summary>
    FHidden = 64;
    /// <summary>
    ///   该函数支持 。
    /// </summary>
    FUsesGetLastError = 128;
    /// <summary>
    ///   允许一种优化方式编译器查找名为"xyz"类型"abc"的成员。
    ///               如果此类成员找到，并且被标记为默认集合的一个元素的访问器函数，然后对该成员函数生成的调用。
    /// </summary>
    FDefaultCollelem = 256;
    /// <summary>
    ///   类型信息成员是在用户界面中显示的默认成员。
    /// </summary>
    FUiDefault = 512;
    /// <summary>
    ///   该属性将显示在对象浏览器，但不是在属性浏览器。
    /// </summary>
    FNonBrowsable = 1024;
    /// <summary>
    ///   标记为具有默认行为的接口。
    /// </summary>
    FReplaceable = 2048;
    /// <summary>
    ///   该函数是作为单独的可绑定属性映射。
    /// </summary>
    FImmediateBind = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指示应如何生成程序集。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibImporterFlags')]
  DNTypeLibImporterFlags = type Integer;
  DNTypeLibImporterFlagsHelper = record helper for DNTypeLibImporterFlags
  public const
    /// <summary>
    ///   没有特殊的设置。
    ///               这是默认设置。
    /// </summary>
    None = 0;
    /// <summary>
    ///   生成主互操作程序集。
    ///               有关更多信息，请参见  属性。
    ///               必须指定密钥文件。
    /// </summary>
    PrimaryInteropAssembly = 1;
    /// <summary>
    ///   导入的所有接口，如禁止显示公共语言运行时堆栈的接口的爬网  权限。
    ///               确保你理解与取消该安全检查相关联的职责。
    /// </summary>
    UnsafeInterfaces = 2;
    /// <summary>
    ///   导入所有  实例作为  而不是类型化、 从零开始的一维托管数组。
    ///               在多维、 非基于零的处理时，此选项很有用  实例，否则为不能访问，除非您通过使用 MSIL 反汇编程序 (Ildasm.exe) 和 MSIL 汇编程序 (Ilasm.exe) 工具来编辑生成的程序集。
    /// </summary>
    SafeArrayAsSystemArray = 4;
    /// <summary>
    ///   转换  仅支持调度的接口的方法的参数 (调度接口) 为返回值。
    /// </summary>
    TransformDispRetVals = 8;
    /// <summary>
    ///   未使用。
    /// </summary>
    PreventClassMembers = 16;
    /// <summary>
    ///   使用可序列化的类。
    /// </summary>
    SerializableValueClasses = 32;
    /// <summary>
    ///   导入类型库的 x86 平台。
    /// </summary>
    ImportAsX86 = 256;
    /// <summary>
    ///   导入类型库的 x86 64 位平台。
    /// </summary>
    ImportAsX64 = 512;
    /// <summary>
    ///   导入的 Itanium 平台的类型库。
    /// </summary>
    ImportAsItanium = 1024;
    /// <summary>
    ///   导入任何平台的类型库。
    /// </summary>
    ImportAsAgnostic = 2048;
    /// <summary>
    ///   使用仅限反射的加载。
    /// </summary>
    ReflectionOnlyLoading = 4096;
    /// <summary>
    ///   会阻止包含互操作程序集中的版本资源。
    ///               有关更多信息，请参见  方法。
    /// </summary>
    NoDefineVersionResource = 8192;
    /// <summary>
    ///   导入 ARM 平台的库。
    /// </summary>
    ImportAsArm = 16384;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   描述的原始设置  从中导入该类型的 COM 类型库中。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibTypeFlags')]
  DNTypeLibTypeFlags = type Integer;
  DNTypeLibTypeFlagsHelper = record helper for DNTypeLibTypeFlags
  public const
    /// <summary>
    ///   描述的类型说明  对象。
    /// </summary>
    FAppObject = 1;
    /// <summary>
    ///   可以通过创建该类型的实例 。
    /// </summary>
    FCanCreate = 2;
    /// <summary>
    ///   该类型已授权。
    /// </summary>
    FLicensed = 4;
    /// <summary>
    ///   类型是预定义的。
    ///               客户端应用程序应自动创建具有此属性的对象的单个实例。
    ///               指向的对象的名称是变量的该对象的类名称相同。
    /// </summary>
    FPreDeclId = 8;
    /// <summary>
    ///   类型不应显示给浏览器。
    /// </summary>
    FHidden = 16;
    /// <summary>
    ///   类型为其他类型从其将派生以及不应该向用户显示的控件。
    /// </summary>
    FControl = 32;
    /// <summary>
    ///   该接口提供  和 V-表绑定。
    /// </summary>
    FDual = 64;
    /// <summary>
    ///   此接口不能在运行时添加成员。
    /// </summary>
    FNonExtensible = 128;
    /// <summary>
    ///   在界面中使用的类型都与自动化，包括 vtable 绑定支持完全兼容。
    /// </summary>
    FOleAutomation = 256;
    /// <summary>
    ///   此标志专供系统级别的类型或类型浏览器的类型不应显示。
    /// </summary>
    FRestricted = 512;
    /// <summary>
    ///   该类支持聚合。
    /// </summary>
    FAggregatable = 1024;
    /// <summary>
    ///   对象支持 , ，而且具有默认行为。
    /// </summary>
    FReplaceable = 2048;
    /// <summary>
    ///   指示该接口派生自 , ，直接或间接。
    /// </summary>
    FDispatchable = 4096;
    /// <summary>
    ///   指示基接口应该检查子接口前检查来进行名称解析。
    ///               这是默认行为的相反值。
    /// </summary>
    FReverseBind = 8192;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   描述的原始设置  从中导入该变量的 COM 类型库中。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibVarFlags')]
  DNTypeLibVarFlags = type Integer;
  DNTypeLibVarFlagsHelper = record helper for DNTypeLibVarFlags
  public const
    /// <summary>
    ///   不应允许向变量赋值。
    /// </summary>
    FReadOnly = 1;
    /// <summary>
    ///   该变量返回一个对象，它的事件源。
    /// </summary>
    FSource = 2;
    /// <summary>
    ///   该变量支持数据绑定。
    /// </summary>
    FBindable = 4;
    /// <summary>
    ///   指示该属性支持 COM  通知。
    /// </summary>
    FRequestEdit = 8;
    /// <summary>
    ///   该变量将显示为可绑定。
    ///               此外必须设置。
    /// </summary>
    FDisplayBind = 16;
    /// <summary>
    ///   该变量是最能代表该对象的唯一属性。
    ///               类型信息中的仅有一个变量可以具有此值。
    /// </summary>
    FDefaultBind = 32;
    /// <summary>
    ///   尽管它存在并且为可绑定，则不应在浏览器中，显示该变量。
    /// </summary>
    FHidden = 64;
    /// <summary>
    ///   此标志适用于系统级别的功能或不应显示类型浏览器的函数。
    /// </summary>
    FRestricted = 128;
    /// <summary>
    ///   允许一种优化方式编译器查找名为"xyz"类型"abc"的成员。
    ///               如果此类成员找到，并且被标记为默认集合的一个元素的访问器函数，然后对该成员函数生成的调用。
    /// </summary>
    FDefaultCollelem = 256;
    /// <summary>
    ///   用户界面中的默认显示。
    /// </summary>
    FUiDefault = 512;
    /// <summary>
    ///   该变量出现在对象浏览器，但不是在属性浏览器。
    /// </summary>
    FNonBrowsable = 1024;
    /// <summary>
    ///   标记为具有默认行为的接口。
    /// </summary>
    FReplaceable = 2048;
    /// <summary>
    ///   该变量将作为单独的可绑定属性映射。
    /// </summary>
    FImmediateBind = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指定如何将参数或字段封送到非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UnmanagedType')]
  DNUnmanagedType = type Integer;
  DNUnmanagedTypeHelper = record helper for DNUnmanagedType
  public const
    /// <summary>
    ///   4 字节布尔值 ( != 0,  = 0)。
    ///               这是 Win32 BOOL 类型。
    /// </summary>
    Bool = 2;
    /// <summary>
    ///   1 字节有符号整数。
    ///               可使用此成员将布尔值转换为 1 字节、C 样式的  ( = 1,  = 0)。
    /// </summary>
    I1 = 3;
    /// <summary>
    ///   1 字节无符号整数。
    /// </summary>
    U1 = 4;
    /// <summary>
    ///   2 字节有符号整数。
    /// </summary>
    I2 = 5;
    /// <summary>
    ///   2 字节无符号整数。
    /// </summary>
    U2 = 6;
    /// <summary>
    ///   4 字节有符号整数。
    /// </summary>
    I4 = 7;
    /// <summary>
    ///   4 字节无符号整数。
    /// </summary>
    U4 = 8;
    /// <summary>
    ///   8 字节有符号整数。
    /// </summary>
    I8 = 9;
    /// <summary>
    ///   8 字节无符号整数。
    /// </summary>
    U8 = 10;
    /// <summary>
    ///   4 字节浮点数。
    /// </summary>
    R4 = 11;
    /// <summary>
    ///   8 字节浮点数。
    /// </summary>
    R8 = 12;
    /// <summary>
    ///   货币类型。
    ///               在  上使用，以将十进制数值作为 COM 货币类型而不是  封送。
    /// </summary>
    Currency = 15;
    /// <summary>
    ///   长度前缀为双字节的 Unicode 字符串。
    ///               可以在  数据类型上使用此成员（它是 COM 中的默认字符串）。
    /// </summary>
    BStr = 19;
    /// <summary>
    ///   单字节、以 null 结尾的 ANSI 字符串。
    ///               可以在  和  数据类型上使用此成员。
    /// </summary>
    LPStr = 20;
    /// <summary>
    ///   一个 2 字节、以 null 结尾的 Unicode 字符串。
    /// </summary>
    LPWStr = 21;
    /// <summary>
    ///   与平台相关的字符串：在 Windows 98 上为 ANSI，在 Windows NT 和 Windows XP 上为 Unicode。
    ///               该值仅支持平台调用而不支持 COM 互操作，因为不支持导出  类型的字符串。
    /// </summary>
    LPTStr = 22;
    /// <summary>
    ///   用于在结构中出现的内联定长字符数组。
    ///               与  一起使用的字符类型由应用于包含结构的  属性的  参数确定。
    ///               应始终使用  字段来指示数组的大小。
    /// </summary>
    ByValTStr = 23;
    /// <summary>
    ///   COM  指针。
    ///               可以在  数据类型上使用此成员。
    /// </summary>
    IUnknown = 25;
    /// <summary>
    ///   COM  指针（Microsoft Visual Basic 6.0 中的 ）。
    /// </summary>
    IDispatch = 26;
    /// <summary>
    ///   一个用于封送托管格式化类和值类型的 VARIANT。
    /// </summary>
    Struct = 27;
    /// <summary>
    ///   COM 接口指针。
    ///               接口的  可从类元数据获得。
    ///               如果将此成员应用于类，则可以使用该成员指定确切的接口类型或默认的接口类型。
    ///               应用于  数据类型时，此成员将产生与  相同的行为。
    /// </summary>
    Interface_ = 28;
    /// <summary>
    ///   是自我描述的数组，它带有关联数组数据的类型、秩和界限。
    ///               可将此成员与  字段一起使用，以替代默认元素类型。
    /// </summary>
    SafeArray = 29;
    /// <summary>
    ///   当  属性被设置为  时，必须设置  字段以指示该数组中的元素数。
    ///               当需要区分字符串类型时， 字段可以选择包含数组元素的 。
    ///               此  只可用于结构中其元素作为字段出现的数组。
    /// </summary>
    ByValArray = 30;
    /// <summary>
    ///   与平台相关的有符号整数：在 32 位 Windows 上为 4 个字节，在 64 位 Windows 上为 8 个字节。
    /// </summary>
    SysInt = 31;
    /// <summary>
    ///   与平台相关的无符号整数：在 32 位 Windows 上为 4 个字节，在 64 位 Windows 上为 8 个字节。
    /// </summary>
    SysUInt = 32;
    /// <summary>
    ///   一个值，该值使 Visual Basic 能够更改非托管代码中的字符串，并使结果在托管代码中反映出来。
    ///               该值仅支持平台调用。
    /// </summary>
    VBByRefStr = 34;
    /// <summary>
    ///   ANSI 字符串是一个带有长度前缀的单字节字符串。
    ///               可以在  数据类型上使用此成员。
    /// </summary>
    AnsiBStr = 35;
    /// <summary>
    ///   一个有长度前缀的与平台相关的  字符串：在 Windows 98 上为 ANSI，在 Windows NT 上为 Unicode。
    ///               很少用到这个类似于 BSTR 的成员。
    /// </summary>
    TBStr = 36;
    /// <summary>
    ///   2 字节、OLE 定义的 VARIANT_BOOL 类型 ( = -1,  = 0)。
    /// </summary>
    VariantBool = 37;
    /// <summary>
    ///   一个可用作 C 样式函数指针的整数。
    ///               可将此成员用于  数据类型或从  继承的类型。
    /// </summary>
    FunctionPtr = 38;
    /// <summary>
    ///   一个动态类型，将在运行时确定对象的类型，并将该对象作为所确定的类型进行封送处理。
    ///               该成员仅对平台调用方法有效。
    /// </summary>
    AsAny = 40;
    /// <summary>
    ///   指向 C 样式数组的第一个元素的指针。
    ///               当从托管到非托管代码进行封送处理时，该数组的长度由托管数组的长度确定。
    ///               从非托管到托管代码进行封送处理时，将根据  和  字段确定该数组的长度，当需要区分字符串类型时，还可以后跟数组中元素的非托管类型。
    /// </summary>
    LPArray = 42;
    /// <summary>
    ///   一个指针，它指向用于封送托管格式化类的 C 样式结构。
    ///               该成员仅对平台调用方法有效。
    /// </summary>
    LPStruct = 43;
    /// <summary>
    ///   当与  或  字段一起使用时，指定自定义封送拆收器类。
    ///               字段可用于将附加信息传递给自定义封送拆收器。
    ///               可以在任何引用类型上使用此成员。
    /// </summary>
    CustomMarshaler = 44;
    /// <summary>
    ///   一个本机类型，此类型与  或  关联且将导致参数作为导出类型库中的 HRESULT 导出。
    /// </summary>
    Error = 45;
    /// <summary>
    ///   Windows 运行时 接口指针。
    ///               可以在  数据类型上使用此成员。
    /// </summary>
    IInspectable = 46;
    /// <summary>
    ///   Windows 运行时 字符串。
    ///               可以在  数据类型上使用此成员。
    /// </summary>
    HString = 47;
    /// <summary>
    ///   指向 UTF-8 编码字符串的指针。
    /// </summary>
    LPUTF8Str = 48;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   指示如何封送数组元素数组封送时从托管代码流向非托管代码作为 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.VarEnum')]
  DNVarEnum = type Integer;
  DNVarEnumHelper = record helper for DNVarEnum
  public const
    /// <summary>
    ///   指示未指定的值。
    /// </summary>
    VT_EMPTY = 0;
    /// <summary>
    ///   指示 null 值，类似于 SQL 中的 null 值。
    /// </summary>
    VT_NULL = 1;
    /// <summary>
    ///   指示  整数。
    /// </summary>
    VT_I2 = 2;
    /// <summary>
    ///   指示  整数。
    /// </summary>
    VT_I4 = 3;
    /// <summary>
    ///   指示  值。
    /// </summary>
    VT_R4 = 4;
    /// <summary>
    ///   指示  值。
    /// </summary>
    VT_R8 = 5;
    /// <summary>
    ///   指示货币值。
    /// </summary>
    VT_CY = 6;
    /// <summary>
    ///   指示日期值。
    /// </summary>
    VT_DATE = 7;
    /// <summary>
    ///   指示 BSTR 字符串。
    /// </summary>
    VT_BSTR = 8;
    /// <summary>
    ///   指示  指针。
    /// </summary>
    VT_DISPATCH = 9;
    /// <summary>
    ///   指示 SCODE。
    /// </summary>
    VT_ERROR = 10;
    /// <summary>
    ///   指示一个布尔值。
    /// </summary>
    VT_BOOL = 11;
    /// <summary>
    ///   指示 VARIANT  指针。
    /// </summary>
    VT_VARIANT = 12;
    /// <summary>
    ///   指示  指针。
    /// </summary>
    VT_UNKNOWN = 13;
    /// <summary>
    ///   指示  值。
    /// </summary>
    VT_DECIMAL = 14;
    /// <summary>
    ///   指示  值。
    /// </summary>
    VT_I1 = 16;
    /// <summary>
    ///   指示 。
    /// </summary>
    VT_UI1 = 17;
    /// <summary>
    ///   指示 。
    /// </summary>
    VT_UI2 = 18;
    /// <summary>
    ///   指示 。
    /// </summary>
    VT_UI4 = 19;
    /// <summary>
    ///   指示 64 位整数。
    /// </summary>
    VT_I8 = 20;
    /// <summary>
    ///   指示 64 位无符号的整数。
    /// </summary>
    VT_UI8 = 21;
    /// <summary>
    ///   表示一个整数值。
    /// </summary>
    VT_INT = 22;
    /// <summary>
    ///   指示  整数值。
    /// </summary>
    VT_UINT = 23;
    /// <summary>
    ///   指示 C 样式 。
    /// </summary>
    VT_VOID = 24;
    /// <summary>
    ///   指示一个 HRESULT。
    /// </summary>
    VT_HRESULT = 25;
    /// <summary>
    ///   指示指针类型。
    /// </summary>
    VT_PTR = 26;
    /// <summary>
    ///   指示 SAFEARRAY。
    ///               不在一个变量中有效。
    /// </summary>
    VT_SAFEARRAY = 27;
    /// <summary>
    ///   指示 C 样式数组。
    /// </summary>
    VT_CARRAY = 28;
    /// <summary>
    ///   指示用户定义的类型。
    /// </summary>
    VT_USERDEFINED = 29;
    /// <summary>
    ///   指示以 null 结尾的字符串。
    /// </summary>
    VT_LPSTR = 30;
    /// <summary>
    ///   指示被终止的宽字符串 。
    /// </summary>
    VT_LPWSTR = 31;
    /// <summary>
    ///   指示用户定义的类型。
    /// </summary>
    VT_RECORD = 36;
    /// <summary>
    ///   指示 FILETIME 值。
    /// </summary>
    VT_FILETIME = 64;
    /// <summary>
    ///   指示长度为前缀字节。
    /// </summary>
    VT_BLOB = 65;
    /// <summary>
    ///   指示后跟一个流的名称。
    /// </summary>
    VT_STREAM = 66;
    /// <summary>
    ///   指示后跟是存储的名称。
    /// </summary>
    VT_STORAGE = 67;
    /// <summary>
    ///   指示流包含一个对象。
    /// </summary>
    VT_STREAMED_OBJECT = 68;
    /// <summary>
    ///   指示存储包含一个对象。
    /// </summary>
    VT_STORED_OBJECT = 69;
    /// <summary>
    ///   指示 blob 包含对象。
    /// </summary>
    VT_BLOB_OBJECT = 70;
    /// <summary>
    ///   指示剪贴板格式。
    /// </summary>
    VT_CF = 71;
    /// <summary>
    ///   指示类 id。
    /// </summary>
    VT_CLSID = 72;
    /// <summary>
    ///   指示简单、 计数数组。
    /// </summary>
    VT_VECTOR = 4096;
    /// <summary>
    ///   指示  指针。
    /// </summary>
    VT_ARRAY = 8192;
    /// <summary>
    ///   指示一个值，是的引用。
    /// </summary>
    VT_BYREF = 16384;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.VARFLAGS')]
  DNInteropServices_VARFLAGS = type Integer;
  DNInteropServices_VARFLAGSHelper = record helper for DNInteropServices_VARFLAGS
  public const
    /// <summary>
    ///   不应允许向变量赋值。
    /// </summary>
    VARFLAG_FREADONLY = 1;
    /// <summary>
    ///   该变量返回一个对象，它的事件源。
    /// </summary>
    VARFLAG_FSOURCE = 2;
    /// <summary>
    ///   该变量支持数据绑定。
    /// </summary>
    VARFLAG_FBINDABLE = 4;
    /// <summary>
    ///   任何设置时，试图直接更改对的调用中的属性结果 。
    ///               实现  决定是否接受此更改。
    /// </summary>
    VARFLAG_FREQUESTEDIT = 8;
    /// <summary>
    ///   作为可绑定向用户显示该变量。
    ///               此外必须设置。
    /// </summary>
    VARFLAG_FDISPLAYBIND = 16;
    /// <summary>
    ///   该变量是最能代表该对象的唯一属性。
    ///               类型信息中的仅有一个变量可以具有此特性。
    /// </summary>
    VARFLAG_FDEFAULTBIND = 32;
    /// <summary>
    ///   尽管它存在并且为可绑定，则不应在浏览器中，向用户显示该变量。
    /// </summary>
    VARFLAG_FHIDDEN = 64;
    /// <summary>
    ///   不应从宏语言中访问该变量。
    ///               此标志旨在用于系统级别的变量或不希望类型浏览器显示的变量。
    /// </summary>
    VARFLAG_FRESTRICTED = 128;
    /// <summary>
    ///   允许一种优化方式编译器查找名为"xyz"的"abc"的类型的成员。
    ///               如果此类成员找到，并且被标记为默认集合的一个元素的访问器函数，然后对该成员函数生成的调用。
    ///               允许在调度接口和接口; 中的成员上执行不允许对模块。
    /// </summary>
    VARFLAG_FDEFAULTCOLLELEM = 256;
    /// <summary>
    ///   该变量是在用户界面中的默认显示。
    /// </summary>
    VARFLAG_FUIDEFAULT = 512;
    /// <summary>
    ///   该变量出现在对象浏览器，但不是在属性浏览器。
    /// </summary>
    VARFLAG_FNONBROWSABLE = 1024;
    /// <summary>
    ///   标记为具有默认行为的接口。
    /// </summary>
    VARFLAG_FREPLACEABLE = 2048;
    /// <summary>
    ///   该变量将作为单独的可绑定属性映射。
    /// </summary>
    VARFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.Remoting.Activation----------------
  /// <summary>
  ///   定义的适当位置  激活器链中。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Activation.ActivatorLevel')]
  DNActivatorLevel = type Integer;
  DNActivatorLevelHelper = record helper for DNActivatorLevel
  public const
    /// <summary>
    ///   构造一个空对象，并运行构造函数。
    /// </summary>
    Construction = 4;
    /// <summary>
    ///   查找或创建合适的上下文。
    /// </summary>
    Context = 8;
    /// <summary>
    ///   查找或创建 。
    /// </summary>
    AppDomain = 12;
    /// <summary>
    ///   启动一个进程。
    /// </summary>
    Process = 16;
    /// <summary>
    ///   找到适合的计算机。
    /// </summary>
    Machine = 20;
  end;


  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   指示服务器消息处理的状态。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.ServerProcessing')]
  DNServerProcessing = type Integer;
  DNServerProcessingHelper = record helper for DNServerProcessing
  public const
    /// <summary>
    ///   服务器以同步方式处理该消息。
    /// </summary>
    Complete = 0;
    /// <summary>
    ///   消息被调度，并且可以发送没有响应。
    /// </summary>
    OneWay = 1;
    /// <summary>
    ///   调用被异步调度，它指示接收器必须将响应数据存储以供以后处理堆栈上。
    /// </summary>
    Async = 2;
  end;


  //-------------namespace: System.Runtime.Remoting----------------
  /// <summary>
  ///   指定如何自定义错误处理。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.CustomErrorsModes')]
  DNCustomErrorsModes = type Integer;
  DNCustomErrorsModesHelper = record helper for DNCustomErrorsModes
  public const
    /// <summary>
    ///   所有调用方均收到筛选后的异常信息。
    /// </summary>
    On_ = 0;
    /// <summary>
    ///   所有调用方均收到完整的异常信息。
    /// </summary>
    Off = 1;
    /// <summary>
    ///   本地调用方收到完整的异常信息，远程调用方收到筛选后的异常信息。
    /// </summary>
    RemoteOnly = 2;
  end;


  //-------------namespace: System.Runtime.Remoting.Lifetime----------------
  /// <summary>
  ///   指示生存期租约的可能的租约状态。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Lifetime.LeaseState')]
  DNLeaseState = type Integer;
  DNLeaseStateHelper = record helper for DNLeaseState
  public const
    /// <summary>
    ///   未初始化租约。
    /// </summary>
    Null = 0;
    /// <summary>
    ///   租约已创建，但还不是活动状态。
    /// </summary>
    Initial = 1;
    /// <summary>
    ///   租约处于活动状态，并且尚未过期。
    /// </summary>
    Active = 2;
    /// <summary>
    ///   该租约已过期，并且正在查找主办关系。
    /// </summary>
    Renewing = 3;
    /// <summary>
    ///   该租约已过期，并且不能续订。
    /// </summary>
    Expired = 4;
  end;


  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  /// <summary>
  ///   指定与一起使用的 SOAP 配置选项  类。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.SoapOption')]
  DNSoapOption = type Integer;
  DNSoapOptionHelper = record helper for DNSoapOption
  public const
    /// <summary>
    ///   默认选项，该值指示选择了任何额外的选项。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指示类型将始终包含在 SOAP 元素上。
    ///               在执行 SOAP 与需要的所有元素的类型的 SOAP 实现进行互操作时，此选项非常有用。
    /// </summary>
    AlwaysIncludeTypes = 1;
    /// <summary>
    ///   指示 SOAP 信封中的输出 SOAP 字符串类型是否使用  前缀，且生成的 XML 不具有 ID 属性的字符串。
    /// </summary>
    XsdString = 2;
    /// <summary>
    ///   指示 SOAP 将会生成不被引用。
    ///               此选项当前未实现。
    /// </summary>
    EmbedAll = 4;
    /// <summary>
    ///   临时互操作的条件; 公共保留选项使用将发生更改。
    /// </summary>
    Option1 = 8;
    /// <summary>
    ///   临时互操作的条件; 公共保留选项使用将发生更改。
    /// </summary>
    Option2 = 16;
  end;


  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  /// <summary>
  ///   不应使用此枚举;它不使用.NET Framework 远程处理基础结构。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.XmlFieldOrderOption')]
  DNXmlFieldOrderOption = type Integer;
  DNXmlFieldOrderOptionHelper = record helper for DNXmlFieldOrderOption
  public const
    /// <summary>
    ///   不应使用 XmlFieldOrderOption 枚举;.NET Framework 远程处理基础结构不使用它。
    /// </summary>
    All = 0;
    /// <summary>
    ///   不应使用 XmlFieldOrderOption 枚举;.NET Framework 远程处理基础结构不使用它。
    /// </summary>
    Sequence = 1;
    /// <summary>
    ///   不应使用 XmlFieldOrderOption 枚举;.NET Framework 远程处理基础结构不使用它。
    /// </summary>
    Choice = 2;
  end;


  //-------------namespace: System.Runtime.Remoting----------------
  /// <summary>
  ///   定义如何已知对象被激活。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.WellKnownObjectMode')]
  DNWellKnownObjectMode = type Integer;
  DNWellKnownObjectModeHelper = record helper for DNWellKnownObjectMode
  public const
    /// <summary>
    ///   每个传入消息是由同一个对象实例提供服务。
    /// </summary>
    Singleton = 1;
    /// <summary>
    ///   每个传入消息是由新的对象实例提供服务。
    /// </summary>
    SingleCall = 2;
  end;


  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  /// <summary>
  ///   指示用于查找和加载程序集将反序列化过程中使用的方法。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.FormatterAssemblyStyle')]
  DNFormatterAssemblyStyle = type Integer;
  DNFormatterAssemblyStyleHelper = record helper for DNFormatterAssemblyStyle
  public const
    /// <summary>
    ///   在简单模式下，反序列化期间使用的程序集需要与在序列化过程中使用的程序集完全不匹配。
    ///               具体而言，版本号不需要作为匹配  方法用于加载程序集。
    /// </summary>
    Simple = 0;
    /// <summary>
    ///   在完整模式下，反序列化期间使用的程序集必须与在序列化过程中使用的程序集完全匹配。
    ///               方法  类用于加载程序集。
    /// </summary>
    Full = 1;
  end;


  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  /// <summary>
  ///   指示类型说明中的序列化流中的布局的格式。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.FormatterTypeStyle')]
  DNFormatterTypeStyle = type Integer;
  DNFormatterTypeStyleHelper = record helper for DNFormatterTypeStyle
  public const
    /// <summary>
    ///   指示类型，可以仅对数组的对象，类型的对象成员表述 , ，和  非基元值类型。
    /// </summary>
    TypesWhenNeeded = 0;
    /// <summary>
    ///   指示类型可以提供对所有对象成员和  对象成员。
    /// </summary>
    TypesAlways = 1;
    /// <summary>
    ///   指示该字符串可授予在 XSD 格式而不是 SOAP。
    ///               任何字符串 Id 进行不传输。
    /// </summary>
    XsdString = 2;
  end;


  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  /// <summary>
  ///   指定用于.NET Framework 远程处理的自动反序列化的级别。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.TypeFilterLevel')]
  DNTypeFilterLevel = type Integer;
  DNTypeFilterLevelHelper = record helper for DNTypeFilterLevel
  public const
    /// <summary>
    ///   .NET Framework 远程处理较低的反序列化级别。
    ///               它支持与基本远程处理功能相关联的类型。
    /// </summary>
    Low = 2;
    /// <summary>
    ///   .NET Framework 远程处理完整反序列化级别。
    ///               它支持所有类型在所有情况下，远程处理都支持。
    /// </summary>
    Full = 3;
  end;


  //-------------namespace: System.Runtime.Serialization----------------
  /// <summary>
  ///   定义指定序列化期间流的源或目标上下文的一组标志。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.StreamingContextStates')]
  DNStreamingContextStates = type Integer;
  DNStreamingContextStatesHelper = record helper for DNStreamingContextStates
  public const
    /// <summary>
    ///   将源或目标上下文指定为同一计算机上的不同进程。
    /// </summary>
    CrossProcess = 1;
    /// <summary>
    ///   将源或目标上下文指定为不同的计算机。
    /// </summary>
    CrossMachine = 2;
    /// <summary>
    ///   将源或目标上下文指定为文件。
    ///               用户可以假设文件将比创建它们的进程持续更长时间，并且不会用使反序列化需要访问来自当前进程的任何数据的方式来序列化对象。
    /// </summary>
    File_ = 4;
    /// <summary>
    ///   将源或目标上下文指定为持久化存储，其中可包括数据库、文件或其他后备存储。
    ///               用户可以假设持久化数据将比创建数据的进程持续更长时间，并且不会序列化对象以使反序列化需要访问来自当前进程的任何数据。
    /// </summary>
    Persistence = 8;
    /// <summary>
    ///   指定将数据远程连接到未知位置中的上下文。
    ///               用户无法假定这是否在同一台计算机上。
    /// </summary>
    Remoting = 16;
    /// <summary>
    ///   将序列化上下文指定为未知。
    /// </summary>
    Other = 32;
    /// <summary>
    ///   将对象图指定为正在克隆。
    ///               用户可以假定克隆的图形将继续存在于同一进程中，并且可以安全访问句柄或对非托管资源的其他引用。
    /// </summary>
    Clone = 64;
    /// <summary>
    ///   将源或目标上下文指定为不同的 AppDomain。
    ///               （有关 AppDomain 的说明，请参阅应用程序域）。
    /// </summary>
    CrossAppDomain = 128;
    /// <summary>
    ///   将序列化数据指定为可以传输到任何其他上下文或从任何其他上下文接收。
    /// </summary>
    All = 255;
  end;


  //-------------namespace: System.Runtime.Versioning----------------
  /// <summary>
  ///   描述组件、 类型或类型成员，可以跨多个版本的兼容性保证。
  /// </summary>
  [DNTypeName('System.Runtime.Versioning.ComponentGuaranteesOptions')]
  DNComponentGuaranteesOptions = type Integer;
  DNComponentGuaranteesOptionsHelper = record helper for DNComponentGuaranteesOptions
  public const
    /// <summary>
    ///   开发人员并不保证版本间的兼容性。
    ///               组件、 类型或成员的使用者可以预期将来的版本会中断现有客户端。
    /// </summary>
    None = 0;
    /// <summary>
    ///   开发人员保证多版本 exchange 的兼容性类型。
    ///               类型的使用者可能会在将来的版本之间的兼容性，并且可以使用在其所有接口的类型。
    ///               通过并行执行不能解决版本控制问题。
    /// </summary>
    Exchange = 1;
    /// <summary>
    ///   开发人员保证版本间的稳定兼容性。
    ///               类型的使用者可以预期将来的版本不会中断现有客户端。
    ///               但是，如果是这样，客户端在其接口中不使用该类型，通过并行执行可以解决此问题。
    /// </summary>
    Stable = 2;
    /// <summary>
    ///   组件已经过测试时进行多个版本的程序集加载到同一应用程序域。
    ///               未来版本可能会破坏兼容性。
    ///               但是，当进行此类重大更改时，旧版本不会被修改，但继续与新版本同时存在。
    /// </summary>
    SideBySide = 4;
  end;


  //-------------namespace: System.Runtime.Versioning----------------
  /// <summary>
  ///   标识可共享资源的范围。
  /// </summary>
  [DNTypeName('System.Runtime.Versioning.ResourceScope')]
  DNResourceScope = type Integer;
  DNResourceScopeHelper = record helper for DNResourceScope
  public const
    /// <summary>
    ///   没有任何共享的状态。
    /// </summary>
    None = 0;
    /// <summary>
    ///   该状态共享的计算机中的对象。
    /// </summary>
    Machine = 1;
    /// <summary>
    ///   该状态在进程内共享。
    /// </summary>
    Process = 2;
    /// <summary>
    ///   该状态共享中的对象通过 。
    /// </summary>
    AppDomain = 4;
    /// <summary>
    ///   该状态共享的库中的对象。
    /// </summary>
    Library_ = 8;
    /// <summary>
    ///   资源是仅对该类型可见。
    /// </summary>
    Private_ = 16;
    /// <summary>
    ///   在程序集范围内的资源是可见的。
    /// </summary>
    Assembly = 32;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定的安全对象允许的操作。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AccessControlActions')]
  DNAccessControlActions = type Integer;
  DNAccessControlActionsHelper = record helper for DNAccessControlActions
  public const
    /// <summary>
    ///   指定无访问权限。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指定只读访问权限。
    /// </summary>
    View = 1;
    /// <summary>
    ///   指定只写访问权限。
    /// </summary>
    Change = 2;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定要执行的访问控制修改的类型。
  ///               此枚举由方法  类及其后代。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AccessControlModification')]
  DNAccessControlModification = type Integer;
  DNAccessControlModificationHelper = record helper for DNAccessControlModification
  public const
    /// <summary>
    ///   将指定的授权规则添加到访问控制列表 (ACL)。
    /// </summary>
    Add = 0;
    /// <summary>
    ///   ACL 中删除所有授权规则，然后将指定的授权规则添加到 ACL。
    /// </summary>
    Set_ = 1;
    /// <summary>
    ///   删除包含相同的 SID 从 ACL 中，指定的授权规则的授权规则，然后将指定的授权规则添加到 ACL。
    /// </summary>
    Reset = 2;
    /// <summary>
    ///   移除与指定的授权规则，从 ACL 中包含的相同安全标识符 (SID) 和访问掩码的授权规则。
    /// </summary>
    Remove = 3;
    /// <summary>
    ///   删除包含指定的授权规则，从 ACL 相同的 SID 的授权规则。
    /// </summary>
    RemoveAll = 4;
    /// <summary>
    ///   移除与指定的授权规则，从 ACL 完全匹配的授权规则。
    /// </summary>
    RemoveSpecific = 5;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定要保存或加载的安全描述符的哪些部分。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AccessControlSections')]
  DNAccessControlSections = type Integer;
  DNAccessControlSectionsHelper = record helper for DNAccessControlSections
  public const
    /// <summary>
    ///   包括任何部分。
    /// </summary>
    None = 0;
    /// <summary>
    ///   系统访问控制列表 (SACL)。
    /// </summary>
    Audit = 1;
    /// <summary>
    ///   自由访问控制列表 (DACL)。
    /// </summary>
    Access = 2;
    /// <summary>
    ///   所有者。
    /// </summary>
    Owner = 4;
    /// <summary>
    ///   主要组。
    /// </summary>
    Group = 8;
    /// <summary>
    ///   整个安全描述符中。
    /// </summary>
    All = 15;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定是否  对象用于允许或拒绝访问。
  ///               这些值不是标志，并不能组合。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AccessControlType')]
  DNAccessControlType = type Integer;
  DNAccessControlTypeHelper = record helper for DNAccessControlType
  public const
    /// <summary>
    ///   对象用于允许对受保护对象的访问。
    /// </summary>
    Allow = 0;
    /// <summary>
    ///   对象用于拒绝对受保护对象的访问。
    /// </summary>
    Deny = 1;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定继承和的访问控制项 (ACE) 的审核行为。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AceFlags')]
  DNAceFlags = type Integer;
  DNAceFlagsHelper = record helper for DNAceFlags
  public const
    /// <summary>
    ///   不设置任何 ACE 标志。
    /// </summary>
    None = 0;
    /// <summary>
    ///   访问掩码传播到子叶对象。
    /// </summary>
    ObjectInherit = 1;
    /// <summary>
    ///   访问掩码传播到所有子容器对象。
    /// </summary>
    ContainerInherit = 2;
    /// <summary>
    ///   访问检查不适用于对象;它们仅应用于其子级。
    /// </summary>
    NoPropagateInherit = 4;
    /// <summary>
    ///   访问掩码仅传播到子对象。
    ///               这包括容器和叶子对象。
    /// </summary>
    InheritOnly = 8;
    /// <summary>
    ///   一个逻辑  的 , ，, ，, ，和 。
    /// </summary>
    InheritanceFlags = 15;
    /// <summary>
    ///   ACE 继承自父容器，而不是显式设置的对象。
    /// </summary>
    Inherited_ = 16;
    /// <summary>
    ///   审核成功的访问尝试。
    /// </summary>
    SuccessfulAccess = 64;
    /// <summary>
    ///   失败的尝试进行审核的访问。
    /// </summary>
    FailedAccess = 128;
    /// <summary>
    ///   审核所有访问尝试。
    /// </summary>
    AuditFlags = 192;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定的访问控制项 (ACE) 的函数。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AceQualifier')]
  DNAceQualifier = type Integer;
  DNAceQualifierHelper = record helper for DNAceQualifier
  public const
    /// <summary>
    ///   允许访问。
    /// </summary>
    AccessAllowed = 0;
    /// <summary>
    ///   拒绝访问。
    /// </summary>
    AccessDenied = 1;
    /// <summary>
    ///   导致系统审核。
    /// </summary>
    SystemAudit = 2;
    /// <summary>
    ///   导致系统警告。
    /// </summary>
    SystemAlarm = 3;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   定义可用的访问控制项 (ACE) 类型。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AceType')]
  DNAceType = type Integer;
  DNAceTypeHelper = record helper for DNAceType
  public const
    /// <summary>
    ///   允许对象的访问权限由标识一个特定的受信者  对象。
    /// </summary>
    AccessAllowed = 0;
    /// <summary>
    ///   拒绝访问对象的权限由标识一个特定的受信者  对象。
    /// </summary>
    AccessDenied = 1;
    /// <summary>
    ///   会导致当指定受信者尝试获得访问某个对象时要记入日志的审核消息。
    ///               由标识受信者  对象。
    /// </summary>
    SystemAudit = 2;
    /// <summary>
    ///   留待将来使用。
    /// </summary>
    SystemAlarm = 3;
    /// <summary>
    ///   定义但是从未使用。
    ///               此处包括出于完整性的考虑。
    /// </summary>
    AccessAllowedCompound = 4;
    /// <summary>
    ///   允许访问的对象、 属性集或属性。
    ///               ACE 包含一组的访问权限，标识的对象，类型的 GUID 和一个  对象，用于标识系统将向其授予访问权限的受信者。
    ///               ACE 还包含一个 GUID 和一组控制由子对象继承的 ace 的标志。
    /// </summary>
    AccessAllowedObject = 5;
    /// <summary>
    ///   拒绝访问对象、 属性集或属性。
    ///               ACE 包含一组的访问权限，标识的对象，类型的 GUID 和一个  对象，用于标识系统将向其授予访问权限的受信者。
    ///               ACE 还包含一个 GUID 和一组控制由子对象继承的 ace 的标志。
    /// </summary>
    AccessDeniedObject = 6;
    /// <summary>
    ///   如属性集或属性子对象或导致当指定受信者尝试获得访问某个对象时要记入日志的审核消息。
    ///               ACE 包含一组的访问权限，标识的对象或子对象类型的 GUID 和一个  对象，用于标识系统将为其审核的访问的受信者。
    ///               ACE 还包含一个 GUID 和一组控制由子对象继承的 ace 的标志。
    /// </summary>
    SystemAuditObject = 7;
    /// <summary>
    ///   留待将来使用。
    /// </summary>
    SystemAlarmObject = 8;
    /// <summary>
    ///   允许对象的访问权限由标识一个特定的受信者  对象。
    ///               这种 ACE 类型可能包含可选的回调数据。
    ///               回调数据是一个资源管理器特定的 BLOB 不会被解释。
    /// </summary>
    AccessAllowedCallback = 9;
    /// <summary>
    ///   拒绝访问对象的权限由标识一个特定的受信者  对象。
    ///               这种 ACE 类型可以包含可选的回调数据。
    ///               回调数据是一个资源管理器特定的 BLOB 不会被解释。
    /// </summary>
    AccessDeniedCallback = 10;
    /// <summary>
    ///   允许访问的对象、 属性集或属性。
    ///               ACE 包含一组的访问权限，标识的对象，类型的 GUID 和一个  对象，用于标识系统将向其授予访问权限的受信者。
    ///               ACE 还包含一个 GUID 和一组控制由子对象继承的 ace 的标志。
    ///               这种 ACE 类型可能包含可选的回调数据。
    ///               回调数据是一个资源管理器特定的 BLOB 不会被解释。
    /// </summary>
    AccessAllowedCallbackObject = 11;
    /// <summary>
    ///   拒绝访问对象、 属性集或属性。
    ///               ACE 包含一组的访问权限，标识的对象，类型的 GUID 和一个  对象，用于标识系统将向其授予访问权限的受信者。
    ///               ACE 还包含一个 GUID 和一组控制由子对象继承的 ace 的标志。
    ///               这种 ACE 类型可以包含可选的回调数据。
    ///               回调数据是一个资源管理器特定的 BLOB 不会被解释。
    /// </summary>
    AccessDeniedCallbackObject = 12;
    /// <summary>
    ///   会导致当指定受信者尝试获得访问某个对象时要记入日志的审核消息。
    ///               由标识受信者  对象。
    ///               这种 ACE 类型可以包含可选的回调数据。
    ///               回调数据是一个资源管理器特定的 BLOB 不会被解释。
    /// </summary>
    SystemAuditCallback = 13;
    /// <summary>
    ///   留待将来使用。
    /// </summary>
    SystemAlarmCallback = 14;
    /// <summary>
    ///   如属性集或属性子对象或导致当指定受信者尝试获得访问某个对象时要记入日志的审核消息。
    ///               ACE 包含一组的访问权限，标识的对象或子对象类型的 GUID 和一个  对象，用于标识系统将为其审核的访问的受信者。
    ///               ACE 还包含一个 GUID 和一组控制由子对象继承的 ace 的标志。
    ///               这种 ACE 类型可以包含可选的回调数据。
    ///               回调数据是一个资源管理器特定的 BLOB 不会被解释。
    /// </summary>
    SystemAuditCallbackObject = 15;
    /// <summary>
    ///   留待将来使用。
    /// </summary>
    SystemAlarmCallbackObject = 16;
    /// <summary>
    ///   枚举中键入跟踪的最大的定义 ACE。
    /// </summary>
    MaxDefinedAceType = 16;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定审核尝试访问某个安全对象的条件。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AuditFlags')]
  DNAuditFlags = type Integer;
  DNAuditFlagsHelper = record helper for DNAuditFlags
  public const
    /// <summary>
    ///   任何访问尝试不将被审核。
    /// </summary>
    None = 0;
    /// <summary>
    ///   成功的访问尝试将被审核。
    /// </summary>
    Success = 1;
    /// <summary>
    ///   失败的尝试将被审核的访问。
    /// </summary>
    Failure = 2;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定的类型  对象。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CompoundAceType')]
  DNCompoundAceType = type Integer;
  DNCompoundAceTypeHelper = record helper for DNCompoundAceType
  public const
    /// <summary>
    ///   对象用于模拟。
    /// </summary>
    Impersonation = 1;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   这些标志将影响安全描述符行为。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.ControlFlags')]
  DNControlFlags = type Integer;
  DNControlFlagsHelper = record helper for DNControlFlags
  public const
    /// <summary>
    ///   无控制标志。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指定所有者  默认设置的机制通过获得。
    ///               设置由资源管理器不应由调用方设置。
    /// </summary>
    OwnerDefaulted = 1;
    /// <summary>
    ///   指定组  默认设置的机制通过获得。
    ///               设置由资源管理器不应由调用方设置。
    /// </summary>
    GroupDefaulted = 2;
    /// <summary>
    ///   指定不是 DACL 。
    ///               通过资源管理器或用户设置。
    /// </summary>
    DiscretionaryAclPresent = 4;
    /// <summary>
    ///   指定该 DACL 默认设置的机制通过获得。
    ///               将由资源管理器设置。
    /// </summary>
    DiscretionaryAclDefaulted = 8;
    /// <summary>
    ///   指定 SACL 不 。
    ///               通过资源管理器或用户设置。
    /// </summary>
    SystemAclPresent = 16;
    /// <summary>
    ///   指定 SACL 通过默认设置机制获得。
    ///               将由资源管理器设置。
    /// </summary>
    SystemAclDefaulted = 32;
    /// <summary>
    ///   已忽略。
    /// </summary>
    DiscretionaryAclUntrusted = 64;
    /// <summary>
    ///   已忽略。
    /// </summary>
    ServerSecurity = 128;
    /// <summary>
    ///   已忽略。
    /// </summary>
    DiscretionaryAclAutoInheritRequired = 256;
    /// <summary>
    ///   已忽略。
    /// </summary>
    SystemAclAutoInheritRequired = 512;
    /// <summary>
    ///   指定已自动从父级继承自由访问控制列表 (DACL)。
    ///               将由资源管理器设置。
    /// </summary>
    DiscretionaryAclAutoInherited = 1024;
    /// <summary>
    ///   指定已自动从父继承系统访问控制列表 (SACL)。
    ///               将由资源管理器设置。
    /// </summary>
    SystemAclAutoInherited = 2048;
    /// <summary>
    ///   指定资源管理器阻止自动继承。
    ///               通过资源管理器或用户设置。
    /// </summary>
    DiscretionaryAclProtected = 4096;
    /// <summary>
    ///   指定资源管理器阻止自动继承。
    ///               通过资源管理器或用户设置。
    /// </summary>
    SystemAclProtected = 8192;
    /// <summary>
    ///   指定的保留的字段的内容有效。
    /// </summary>
    RMControlValid = 16384;
    /// <summary>
    ///   指定安全描述符二进制表示形式是自相关格式。
    ///                始终设置此标志。
    /// </summary>
    SelfRelative = 32768;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定为其授权规则控制访问权限或审核的加密密钥操作。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CryptoKeyRights')]
  DNCryptoKeyRights = type Integer;
  DNCryptoKeyRightsHelper = record helper for DNCryptoKeyRights
  public const
    /// <summary>
    ///   读取密钥数据。
    /// </summary>
    ReadData = 1;
    /// <summary>
    ///   编写密钥数据。
    /// </summary>
    WriteData = 2;
    /// <summary>
    ///   读取扩展属性的密钥。
    /// </summary>
    ReadExtendedAttributes = 8;
    /// <summary>
    ///   写入扩展的属性的密钥。
    /// </summary>
    WriteExtendedAttributes = 16;
    /// <summary>
    ///   读取密钥的属性。
    /// </summary>
    ReadAttributes = 128;
    /// <summary>
    ///   编写的项的特性。
    /// </summary>
    WriteAttributes = 256;
    /// <summary>
    ///   删除的项。
    /// </summary>
    Delete = 65536;
    /// <summary>
    ///   密钥的读取的权限。
    /// </summary>
    ReadPermissions = 131072;
    /// <summary>
    ///   更改密钥的权限。
    /// </summary>
    ChangePermissions = 262144;
    /// <summary>
    ///   获得该密钥的所有权。
    /// </summary>
    TakeOwnership = 524288;
    /// <summary>
    ///   使用密钥进行同步。
    /// </summary>
    Synchronize = 1048576;
    /// <summary>
    ///   完全控制权限的密钥。
    /// </summary>
    FullControl = 2032027;
    /// <summary>
    ///   组成  和 。
    /// </summary>
    GenericAll = 268435456;
    /// <summary>
    ///   未使用。
    /// </summary>
    GenericExecute = 536870912;
    /// <summary>
    ///   编写密钥数据、 扩展的项的特性的特性的键和密钥的权限。
    /// </summary>
    GenericWrite = 1073741824;
    /// <summary>
    ///   读取密钥数据、 扩展的项的特性的特性的键和密钥的权限。
    /// </summary>
    GenericRead = -2147483648;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定可应用于的访问控制权限已命名的系统事件对象。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.EventWaitHandleRights')]
  DNEventWaitHandleRights = type Integer;
  DNEventWaitHandleRightsHelper = record helper for DNEventWaitHandleRights
  public const
    /// <summary>
    ///   用于设置或重置的命名事件的信号发送的状态的权限。
    /// </summary>
    Modify = 2;
    /// <summary>
    ///   删除指定的事件的权限。
    /// </summary>
    Delete = 65536;
    /// <summary>
    ///   规则的命名事件的权限来打开并将复制的访问规则和审核。
    /// </summary>
    ReadPermissions = 131072;
    /// <summary>
    ///   更改安全和审核规则与指定的事件相关联的权限。
    /// </summary>
    ChangePermissions = 262144;
    /// <summary>
    ///   若要更改的命名事件所有者权限。
    /// </summary>
    TakeOwnership = 524288;
    /// <summary>
    ///   用于等待指定的事件的权限。
    /// </summary>
    Synchronize = 1048576;
    /// <summary>
    ///   若要对某个命名的事件进行完全控制，还可以修改其访问规则和审核规则右侧。
    /// </summary>
    FullControl = 2031619;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   定义要创建访问和审核规则时使用的访问权限。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.FileSystemRights')]
  DNFileSystemRights = type Integer;
  DNFileSystemRightsHelper = record helper for DNFileSystemRights
  public const
    /// <summary>
    ///   指定读取目录的内容的权限。
    /// </summary>
    ListDirectory = 1;
    /// <summary>
    ///   指定打开并复制文件或文件夹的权限。
    ///                这不包括读取文件系统属性，扩展文件系统属性或访问和审核规则的权限。
    /// </summary>
    ReadData = 1;
    /// <summary>
    ///   指定打开并写入到文件或文件夹的权限。
    ///                这不包括打开并写入文件系统属性，扩展文件系统属性或访问和审核规则的权限。
    /// </summary>
    WriteData = 2;
    /// <summary>
    ///   指定创建文件的权限。
    /// </summary>
    CreateFiles = 2;
    /// <summary>
    ///   指定创建一个文件夹的权限。
    /// </summary>
    CreateDirectories = 4;
    /// <summary>
    ///   指定要追加到文件末尾的数据的权限。
    /// </summary>
    AppendData = 4;
    /// <summary>
    ///   指定打开并将扩展的文件系统属性复制从文件夹或文件的权限。
    ///                例如，此值指定右侧以查看作者和内容信息。
    ///                这不包括读取数据、 文件系统属性或访问和审核规则的权限。
    /// </summary>
    ReadExtendedAttributes = 8;
    /// <summary>
    ///   指定打开并将扩展的文件系统属性写入到的文件夹或文件的权限。
    ///                这不包括能够写入数据、 属性或访问和审核规则。
    /// </summary>
    WriteExtendedAttributes = 16;
    /// <summary>
    ///   指定以列出文件夹内容以及以运行应用程序文件夹中包含的权限。
    /// </summary>
    Traverse = 32;
    /// <summary>
    ///   指定运行应用程序文件的权限。
    /// </summary>
    ExecuteFile = 32;
    /// <summary>
    ///   指定要删除文件夹，然后在该文件夹内包含的任何文件的权限。
    /// </summary>
    DeleteSubdirectoriesAndFiles = 64;
    /// <summary>
    ///   指定打开并将文件系统属性复制从文件夹或文件的权限。
    ///                例如，此值指定右侧以查看文件创建或修改日期。
    ///                这不包括读取数据、 扩展的文件系统属性或访问和审核规则的权限。
    /// </summary>
    ReadAttributes = 128;
    /// <summary>
    ///   指定打开并写入到的文件夹或文件的文件系统属性的权限。
    ///               这不包括能够写入数据、 扩展的属性或访问和审核规则。
    /// </summary>
    WriteAttributes = 256;
    /// <summary>
    ///   指定要创建文件夹和文件，并可以添加或删除文件中的数据的权限。
    ///                此权限包括右，右，右，和右。
    /// </summary>
    Write = 278;
    /// <summary>
    ///   指定要删除的文件夹或文件的权限。
    /// </summary>
    Delete = 65536;
    /// <summary>
    ///   指定打开和复制访问和审核规则从一个文件夹或文件的权限。
    ///                这不包括的权限读取数据、 文件系统属性，或扩展文件系统属性。
    /// </summary>
    ReadPermissions = 131072;
    /// <summary>
    ///   指定的权限来打开并复制文件夹或文件为只读。
    ///                此权限包括右，右，右，和右。
    /// </summary>
    Read = 131209;
    /// <summary>
    ///   指定打开并将复制文件夹或文件为只读的并运行应用程序文件的权限。
    ///                此权限包括右和右。
    /// </summary>
    ReadAndExecute = 131241;
    /// <summary>
    ///   指定读取、 写入、 列出文件夹内容、 删除文件夹和文件，和运行应用程序文件的权限。
    ///                此权限包括右，右，和右。
    /// </summary>
    Modify = 197055;
    /// <summary>
    ///   指定更改的安全和审核规则关联的文件或文件夹的权限。
    /// </summary>
    ChangePermissions = 262144;
    /// <summary>
    ///   指定更改的文件夹或文件的所有者的权限。
    ///                请注意，资源所有者拥有对该资源的完全访问权限。
    /// </summary>
    TakeOwnership = 524288;
    /// <summary>
    ///   指定应用程序是否可以等待 I/O 操作完成与同步的文件句柄。
    /// </summary>
    Synchronize = 1048576;
    /// <summary>
    ///   指定对文件夹或文件，进行完全控制和修改访问控制和审核规则的权限。
    ///                此值表示有权使用文件执行任何操作，并且是此枚举中的所有权限的组合。
    /// </summary>
    FullControl = 2032127;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   继承标志指定的继承访问控制项 (Ace) 的语义。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.InheritanceFlags')]
  DNInheritanceFlags = type Integer;
  DNInheritanceFlagsHelper = record helper for DNInheritanceFlags
  public const
    /// <summary>
    ///   ACE 不由子对象继承。
    /// </summary>
    None = 0;
    /// <summary>
    ///   ACE 由容器的子对象继承。
    /// </summary>
    ContainerInherit = 1;
    /// <summary>
    ///   ACE 由子叶对象继承。
    /// </summary>
    ObjectInherit = 2;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定命名系统互斥体对象可以应用于的访问控制权限。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.MutexRights')]
  DNMutexRights = type Integer;
  DNMutexRightsHelper = record helper for DNMutexRights
  public const
    /// <summary>
    ///   用于释放已命名的互斥体的权限。
    /// </summary>
    Modify = 1;
    /// <summary>
    ///   删除已命名的互斥体的权限。
    /// </summary>
    Delete = 65536;
    /// <summary>
    ///   规则的已命名的互斥体的权限来打开并将复制的访问规则和审核。
    /// </summary>
    ReadPermissions = 131072;
    /// <summary>
    ///   更改安全和审核规则与命名的互斥体相关联的权限。
    /// </summary>
    ChangePermissions = 262144;
    /// <summary>
    ///   用于更改已命名的互斥体的所有者的权限。
    /// </summary>
    TakeOwnership = 524288;
    /// <summary>
    ///   用于等待已命名的互斥体的权限。
    /// </summary>
    Synchronize = 1048576;
    /// <summary>
    ///   若要对已命名的互斥体，进行完全控制，还可以修改其访问规则和审核规则右侧。
    /// </summary>
    FullControl = 2031617;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   访问控制项 (Ace) 指定对象类型的存在。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.ObjectAceFlags')]
  DNObjectAceFlags = type Integer;
  DNObjectAceFlagsHelper = record helper for DNObjectAceFlags
  public const
    /// <summary>
    ///   没有对象类型可以存在。
    /// </summary>
    None = 0;
    /// <summary>
    ///   存在与的 ACE 关联的对象的类型。
    /// </summary>
    ObjectAceTypePresent = 1;
    /// <summary>
    ///   可以继承 ACE 的对象的类型。
    /// </summary>
    InheritedObjectAceTypePresent = 2;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定如何将访问控制项 (Ace) 传播到子对象。
  ///                这些标志仅当存在继承标志时才有意义。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.PropagationFlags')]
  DNPropagationFlags = type Integer;
  DNPropagationFlagsHelper = record helper for DNPropagationFlags
  public const
    /// <summary>
    ///   指定无继承标志被设置。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指定该 ACE 不会传播到所有子对象。
    /// </summary>
    NoPropagateInherit = 1;
    /// <summary>
    ///   指定 ACE 传播到子对象。
    ///               这包括容器和叶子对象。
    /// </summary>
    InheritOnly = 2;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定可以应用于注册表对象的访问控制权限。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.RegistryRights')]
  DNRegistryRights = type Integer;
  DNRegistryRightsHelper = record helper for DNRegistryRights
  public const
    /// <summary>
    ///   用于查询中的注册表项的名称/值对的权限。
    /// </summary>
    QueryValues = 1;
    /// <summary>
    ///   用于创建、 删除或注册表项中设置名称/值对的权限。
    /// </summary>
    SetValue = 2;
    /// <summary>
    ///   创建注册表项的子项的权限。
    /// </summary>
    CreateSubKey = 4;
    /// <summary>
    ///   列出注册表项的子项的权限。
    /// </summary>
    EnumerateSubKeys = 8;
    /// <summary>
    ///   用于请求的注册表项上的更改通知的权限。
    /// </summary>
    Notify = 16;
    /// <summary>
    ///   保留供系统使用。
    /// </summary>
    CreateLink = 32;
    /// <summary>
    ///   删除注册表项的权限。
    /// </summary>
    Delete = 65536;
    /// <summary>
    ///   规则的注册表项的权限来打开并将复制的访问规则和审核。
    /// </summary>
    ReadPermissions = 131072;
    /// <summary>
    ///   若要创建、 删除，并在注册表项，以创建或删除子项、 请求更改通知，以枚举及其子项中，并读取其访问规则和审核规则设置的名称/值对的权限。
    /// </summary>
    WriteKey = 131078;
    /// <summary>
    ///   与  相同。
    /// </summary>
    ExecuteKey = 131097;
    /// <summary>
    ///   用于查询一个注册表项，来请求通知的更改，可以枚举及其子项中，还可以读取其访问规则和审核规则中的名称/值对的权限。
    /// </summary>
    ReadKey = 131097;
    /// <summary>
    ///   若要更改的访问规则和审核规则关联的注册表项权限。
    /// </summary>
    ChangePermissions = 262144;
    /// <summary>
    ///   用于更改注册表项的所有者的权限。
    /// </summary>
    TakeOwnership = 524288;
    /// <summary>
    ///   若要对一个注册表项，进行完全控制，还可以修改其访问规则和审核规则右侧。
    /// </summary>
    FullControl = 983103;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定已定义的本机对象类型。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.ResourceType')]
  DNResourceType = type Integer;
  DNResourceTypeHelper = record helper for DNResourceType
  public const
    /// <summary>
    ///   未知的对象类型。
    /// </summary>
    Unknown = 0;
    /// <summary>
    ///   文件或目录。
    /// </summary>
    FileObject = 1;
    /// <summary>
    ///   一种 Windows 服务。
    /// </summary>
    Service = 2;
    /// <summary>
    ///   打印机。
    /// </summary>
    Printer = 3;
    /// <summary>
    ///   注册表项。
    /// </summary>
    RegistryKey = 4;
    /// <summary>
    ///   一个网络共享。
    /// </summary>
    LMShare = 5;
    /// <summary>
    ///   一个局部内核对象。
    /// </summary>
    KernelObject = 6;
    /// <summary>
    ///   本地计算机上一个窗口站或桌面对象。
    /// </summary>
    WindowObject = 7;
    /// <summary>
    ///   目录服务 (DS) 对象或属性集或目录服务对象的属性。
    /// </summary>
    DSObject = 8;
    /// <summary>
    ///   目录服务对象及其所有属性集和属性。
    /// </summary>
    DSObjectAll = 9;
    /// <summary>
    ///   一个提供程序定义的对象。
    /// </summary>
    ProviderDefined = 10;
    /// <summary>
    ///   一个 Windows Management Instrumentation (WMI) 对象。
    /// </summary>
    WmiGuidObject = 11;
    /// <summary>
    ///   一个对象，用于在 WOW64 下的注册表项。
    /// </summary>
    RegistryWow6432Key = 12;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  /// <summary>
  ///   指定要查询或设置安全描述符的部分。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.SecurityInfos')]
  DNSecurityInfos = type Integer;
  DNSecurityInfosHelper = record helper for DNSecurityInfos
  public const
    /// <summary>
    ///   指定的所有者标识符。
    /// </summary>
    Owner = 1;
    /// <summary>
    ///   指定的主要组标识符。
    /// </summary>
    Group = 2;
    /// <summary>
    ///   指定的自由访问控制列表 (DACL)。
    /// </summary>
    DiscretionaryAcl = 4;
    /// <summary>
    ///   指定系统访问控制列表 (SACL)。
    /// </summary>
    SystemAcl = 8;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  /// <summary>
  ///   指定要用于加密的块密码模式。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.CipherMode')]
  DNCipherMode = type Integer;
  DNCipherModeHelper = record helper for DNCipherMode
  public const
    /// <summary>
    ///   密码块链 () 模式引入了反馈。
    ///               每个纯文本块在加密之前，它与结合使用上一个块的密码文本按位异或运算。
    ///               这可确保，即使纯文本包含很多相同的块，它们将每个加密到一个不同的密码文本块。
    ///               初始化向量结合了第一个纯文本块按位异或运算之前加密块。
    ///               如果出错的密码文本块的一个位，则也将出错相应的纯文本块。
    ///               此外，与原始重整位，相同的位置中的后续块中有点也将出错。
    /// </summary>
    CBC = 1;
    /// <summary>
    ///   电子密码本 () 模式分别加密每个块。
    ///               任何纯文本块相同并且在同一消息，或位于不同的消息加密使用相同的密钥，将转换成相同的密码文本块。
    ///              重要事项︰ 不建议使用此模式，因为它要打开多个安全隐患的门。
    ///               如果要进行加密的纯文本包含大量重复，则适用于一次逐块破解的密码文本。
    ///               还有可能能够使用块分析来确定加密密钥。
    ///               此外，活动的攻击者可以替换并交换个别的块，如果没有检测，允许块，以便能够保存并插入不检测其他点上的流。
    /// </summary>
    ECB = 2;
    /// <summary>
    ///   输出反馈 () 模式下少量递增的纯文本处理成密码文本，而不是一次处理整个块。
    ///               这种模式十分类似于 ; 只有两种模式之间的区别是 shift 注册的方式进行填充。
    ///               如果有点密码文本中有出错，纯文本的对应位也将出错。
    ///               但是，如果有密码文本的多余或者缺失位，纯文本也将出错从该点上。
    /// </summary>
    OFB = 3;
    /// <summary>
    ///   密码反馈 () 模式下少量递增的纯文本处理成密码文本，而不是一次处理整个块。
    ///               此模式为部分使用一个块的长度并被划分的移位寄存器。
    ///               例如，如果块大小是 8 个字节，并且一次处理一个字节移位寄存器划分为 8 个部分。
    ///               如果有点密码文本中有出错，一个纯文本位出错并且移位寄存器已损坏。
    ///               这会导致正在改变直到外移位寄存器位移坏的位的下一步的几个纯文本增量。
    ///               默认的反馈大小可能会因算法，但通常是 8 位或块大小的比特数。
    ///               您可以通过使用修改的反馈比特数  属性。
    ///               支持 CFB 的算法使用此属性来设置反馈。
    /// </summary>
    CFB = 4;
    /// <summary>
    ///   密码文本窃取 () 模式下处理任何长度的纯文本和生成密钥长度与纯文本长度匹配。
    ///               在此模式下的行为类似  所有模式，但最后两个纯文本块。
    /// </summary>
    CTS = 5;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  /// <summary>
  ///   指定加密流的模式。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.CryptoStreamMode')]
  DNCryptoStreamMode = type Integer;
  DNCryptoStreamModeHelper = record helper for DNCryptoStreamMode
  public const
    /// <summary>
    ///   对加密流的读取访问权限。
    /// </summary>
    Read = 0;
    /// <summary>
    ///   对加密流写入访问权限。
    /// </summary>
    Write = 1;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  /// <summary>
  ///   指定修改加密服务提供程序 (CSP) 行为的标志。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.CspProviderFlags')]
  DNCspProviderFlags = type Integer;
  DNCspProviderFlagsHelper = record helper for DNCspProviderFlags
  public const
    /// <summary>
    ///   不指定任何设置。
    /// </summary>
    NoFlags = 0;
    /// <summary>
    ///   使用计算机的密钥存储区中的密钥信息。
    /// </summary>
    UseMachineKeyStore = 1;
    /// <summary>
    ///   使用默认密钥容器中的密钥信息。
    /// </summary>
    UseDefaultKeyContainer = 2;
    /// <summary>
    ///   使用无法导出的密钥信息。
    /// </summary>
    UseNonExportableKey = 4;
    /// <summary>
    ///   使用当前密钥的密钥信息。
    /// </summary>
    UseExistingKey = 8;
    /// <summary>
    ///   允许导出密钥以便存档或恢复。
    /// </summary>
    UseArchivableKey = 16;
    /// <summary>
    ///   当某些操作尝试使用密钥时，通过对话框或另一种方法通知用户。
    ///                此标志与  标志不兼容。
    /// </summary>
    UseUserProtectedKey = 32;
    /// <summary>
    ///   阻止 CSP 显示此上下文的任何用户界面 (UI)。
    /// </summary>
    NoPrompt = 64;
    /// <summary>
    ///   创建一个在关闭关联的 Rivest-Shamir-Adleman (RSA) 对象时释放的临时密钥。
    ///               如果希望密钥与 RSA 对象无关，则不要使用此标志。
    /// </summary>
    CreateEphemeralKey = 128;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  /// <summary>
  ///   指定是否应在 base 64 转换中忽略空白区域。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.FromBase64TransformMode')]
  DNFromBase64TransformMode = type Integer;
  DNFromBase64TransformModeHelper = record helper for DNFromBase64TransformMode
  public const
    /// <summary>
    ///   应忽略空白区域。
    /// </summary>
    IgnoreWhiteSpaces = 0;
    /// <summary>
    ///   不应忽略空白区域。
    /// </summary>
    DoNotIgnoreWhiteSpaces = 1;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  /// <summary>
  ///   指定是创建非对称签名密钥还是非对称交换密钥。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.KeyNumber')]
  DNKeyNumber = type Integer;
  DNKeyNumberHelper = record helper for DNKeyNumber
  public const
    /// <summary>
    ///   一个交换密钥对，用于加密会话密钥，以便可以安全地存储以及与其他用户交换会话密钥。
    /// </summary>
    Exchange = 1;
    /// <summary>
    ///   一个签名密钥对，用于对数字签名的消息或文件进行身份验证。
    /// </summary>
    Signature = 2;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  /// <summary>
  ///   指定在消息数据块短于加密操作所需的完整字节数时要应用的填充类型。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.PaddingMode')]
  DNPaddingMode = type Integer;
  DNPaddingModeHelper = record helper for DNPaddingMode
  public const
    /// <summary>
    ///   不填充是完成的。
    /// </summary>
    None = 1;
    /// <summary>
    ///   PKCS #7 填充字符串包含一个字节序列的其中每个等同于添加填充字节的总数。
    /// </summary>
    PKCS7 = 2;
    /// <summary>
    ///   填充字符串由设置为零的字节组成。
    /// </summary>
    Zeros = 3;
    /// <summary>
    ///   ANSIX923 填充字符串包含的一个填充了零长度的字节序列。
    /// </summary>
    ANSIX923 = 4;
    /// <summary>
    ///   ISO10126 填充字符串包含的长度的随机数据。
    /// </summary>
    ISO10126 = 5;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  /// <summary>
  ///   指定要与 RSA 加密或解密操作一起使用的填充模式。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSAEncryptionPaddingMode')]
  DNRSAEncryptionPaddingMode = type Integer;
  DNRSAEncryptionPaddingModeHelper = record helper for DNRSAEncryptionPaddingMode
  public const
    /// <summary>
    ///   PKCS #1 v1.5。
    /// </summary>
    Pkcs1 = 0;
    /// <summary>
    ///   最佳非对称加密填充。
    /// </summary>
    Oaep = 1;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  /// <summary>
  ///   指定要使用 RSA 签名创建或验证操作的填充模式。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSASignaturePaddingMode')]
  DNRSASignaturePaddingMode = type Integer;
  DNRSASignaturePaddingModeHelper = record helper for DNRSASignaturePaddingMode
  public const
    /// <summary>
    ///   PKCS #1 v1.5
    /// </summary>
    Pkcs1 = 0;
    /// <summary>
    ///   概率签名方案
    /// </summary>
    Pss = 1;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  /// <summary>
  ///   指定 X.509 证书的格式。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ContentType')]
  DNX509ContentType = type Integer;
  DNX509ContentTypeHelper = record helper for DNX509ContentType
  public const
    /// <summary>
    ///   未知的 X.509 证书。
    /// </summary>
    Unknown = 0;
    /// <summary>
    ///   单个的 X.509 证书。
    /// </summary>
    Cert = 1;
    /// <summary>
    ///   一个序列化 X.509 证书。
    /// </summary>
    SerializedCert = 2;
    /// <summary>
    ///   PFX 格式的证书。
    ///               值等同于  值。
    /// </summary>
    Pfx = 3;
    /// <summary>
    ///   PKCS #12 格式的证书。
    ///               值等同于  值。
    /// </summary>
    Pkcs12 = 3;
    /// <summary>
    ///   序列化的存储区。
    /// </summary>
    SerializedStore = 4;
    /// <summary>
    ///   PKCS #7 格式的证书。
    /// </summary>
    Pkcs7 = 5;
    /// <summary>
    ///   验证码 X.509 证书。
    /// </summary>
    Authenticode = 6;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  /// <summary>
  ///   定义在何处以及如何导入 X.509 证书的私钥。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509KeyStorageFlags')]
  DNX509KeyStorageFlags = type Integer;
  DNX509KeyStorageFlagsHelper = record helper for DNX509KeyStorageFlags
  public const
    /// <summary>
    ///   使用默认的密钥集。
    ///                用户的密钥集通常是默认值。
    /// </summary>
    DefaultKeySet = 0;
    /// <summary>
    ///   私钥存储在当前用户存储区，而不是本地计算机存储区中。
    ///               即使证书指定密钥应放在本地计算机存储区中，将发生这种情况。
    /// </summary>
    UserKeySet = 1;
    /// <summary>
    ///   私钥存储在本地计算机存储区，而不是当前用户存储区中。
    /// </summary>
    MachineKeySet = 2;
    /// <summary>
    ///   导入的项被标记为可导出。
    /// </summary>
    Exportable = 4;
    /// <summary>
    ///   通过通知用户对话框中或通过其他方法访问密钥。
    ///                在使用加密服务提供程序 (CSP) 定义确切的行为。
    /// </summary>
    UserProtected = 8;
    /// <summary>
    ///   导入证书后，并会保持与 PFX 文件相关联的密钥。
    /// </summary>
    PersistKeySet = 16;
    EphemeralKeySet = 32;
  end;


  //-------------namespace: System.Security----------------
  /// <summary>
  ///   指定用于宿主安全管理器的安全策略组件。
  /// </summary>
  [DNTypeName('System.Security.HostSecurityManagerOptions')]
  DNHostSecurityManagerOptions = type Integer;
  DNHostSecurityManagerOptionsHelper = record helper for DNHostSecurityManagerOptions
  public const
    /// <summary>
    ///   使用安全策略组件其中任何一个。
    /// </summary>
    None = 0;
    /// <summary>
    ///   使用应用程序域证据。
    /// </summary>
    HostAppDomainEvidence = 1;
    /// <summary>
    ///   使用中指定的策略级别  属性。
    /// </summary>
    HostPolicyLevel = 2;
    /// <summary>
    ///   使用程序集证据。
    /// </summary>
    HostAssemblyEvidence = 4;
    /// <summary>
    ///   将呼叫路由到  方法  方法第一个。
    /// </summary>
    HostDetermineApplicationTrust = 8;
    /// <summary>
    ///   使用  解决应用程序证据的方法。
    /// </summary>
    HostResolvePolicy = 16;
    /// <summary>
    ///   使用安全策略的所有组件。
    /// </summary>
    AllFlags = 31;
  end;


  //-------------namespace: System.Security----------------
  /// <summary>
  ///   指定默认部分信任代码的可见性，标记有  (APTCA) 特性。
  /// </summary>
  [DNTypeName('System.Security.PartialTrustVisibilityLevel')]
  DNPartialTrustVisibilityLevel = type Integer;
  DNPartialTrustVisibilityLevelHelper = record helper for DNPartialTrustVisibilityLevel
  public const
    /// <summary>
    ///   始终可以由部分信任代码调用该程序集。
    /// </summary>
    VisibleToAllHosts = 0;
    /// <summary>
    ///   已为部分信任审核该程序集，但不向所有主机中的部分信任代码可见。
    ///               若要使该程序集的部分信任代码可见，将其添加到  属性。
    /// </summary>
    NotVisibleByDefault = 1;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定对环境变量的访问权限。
  /// </summary>
  [DNTypeName('System.Security.Permissions.EnvironmentPermissionAccess')]
  DNEnvironmentPermissionAccess = type Integer;
  DNEnvironmentPermissionAccessHelper = record helper for DNEnvironmentPermissionAccess
  public const
    /// <summary>
    ///   环境变量没有访问权限。
    ///               不表示有效  值，并会导致  时使用的参数作为 , ，这需要单一值。
    /// </summary>
    NoAccess = 0;
    /// <summary>
    ///   指定只有读取访问权限对环境变量。
    ///               更改、 删除和创建环境变量不包括在此访问级别。
    /// </summary>
    Read = 1;
    /// <summary>
    ///   指定只写访问环境变量。
    ///               写入访问权限包括创建和删除环境变量，以及更改现有的值。
    ///               此访问级别不包括读取环境变量。
    /// </summary>
    Write = 2;
    /// <summary>
    ///   和  对环境变量的访问。
    ///               表示多个  值，并会导致  时用作  参数  方法，它需要单一值。
    /// </summary>
    AllAccess = 3;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定通过允许访问文件的类型 文件 对话框。
  /// </summary>
  [DNTypeName('System.Security.Permissions.FileDialogPermissionAccess')]
  DNFileDialogPermissionAccess = type Integer;
  DNFileDialogPermissionAccessHelper = record helper for DNFileDialogPermissionAccess
  public const
    /// <summary>
    ///   通过对文件没有访问权限 文件 对话框。
    /// </summary>
    None = 0;
    /// <summary>
    ///   通过打开文件的能力 文件 对话框。
    /// </summary>
    Open = 1;
    /// <summary>
    ///   通过保存文件的能力 文件 对话框。
    /// </summary>
    Save = 2;
    /// <summary>
    ///   可以打开并通过保存文件 文件 对话框。
    /// </summary>
    OpenSave = 3;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定文件访问请求的类型。
  /// </summary>
  [DNTypeName('System.Security.Permissions.FileIOPermissionAccess')]
  DNFileIOPermissionAccess = type Integer;
  DNFileIOPermissionAccessHelper = record helper for DNFileIOPermissionAccess
  public const
    /// <summary>
    ///   不能访问文件或目录。
    ///               不表示有效  值，并会导致  时使用的参数作为 , ，这需要单一值。
    /// </summary>
    NoAccess = 0;
    /// <summary>
    ///   从文件或目录的读取访问权限。
    /// </summary>
    Read = 1;
    /// <summary>
    ///   若要写入或删除文件或目录的访问。
    ///               访问权限包括删除并覆盖文件或目录。
    /// </summary>
    Write = 2;
    /// <summary>
    ///   将材料追加到文件或目录的访问权限。
    ///               访问权限包括能够创建新文件或目录。
    /// </summary>
    Append = 4;
    /// <summary>
    ///   访问路径本身中的信息。
    ///               这有助于保护敏感信息在路径中，如用户名称，以及有关路径中显示的目录结构的信息。
    ///               此值不会授予对文件或文件夹路径所表示的访问。
    /// </summary>
    PathDiscovery = 8;
    /// <summary>
    ///   , , ，, ，和  文件或目录的访问权限。
    ///               表示多个  值，并会导致  时用作  参数  方法，它需要单一值。
    /// </summary>
    AllAccess = 15;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定主机，如果调用的方法或类为可能有害的功能的类别。
  /// </summary>
  [DNTypeName('System.Security.Permissions.HostProtectionResource')]
  DNHostProtectionResource = type Integer;
  DNHostProtectionResourceHelper = record helper for DNHostProtectionResource
  public const
    /// <summary>
    ///   不公开主机资源。
    /// </summary>
    None = 0;
    /// <summary>
    ///   公开同步。
    /// </summary>
    Synchronization = 1;
    /// <summary>
    ///   公开可能会在线程间共享的状态。
    /// </summary>
    SharedState = 2;
    /// <summary>
    ///   可以创建或销毁其他进程。
    /// </summary>
    ExternalProcessMgmt = 4;
    /// <summary>
    ///   可能会退出当前进程终止服务器。
    /// </summary>
    SelfAffectingProcessMgmt = 8;
    /// <summary>
    ///   创建或操作而不是其自身，这可能是对宿主有害的线程。
    /// </summary>
    ExternalThreading = 16;
    /// <summary>
    ///   操作只影响用户代码的方式的线程。
    /// </summary>
    SelfAffectingThreading = 32;
    /// <summary>
    ///   公开安全基础结构。
    /// </summary>
    SecurityInfrastructure = 64;
    /// <summary>
    ///   显示用户界面。
    /// </summary>
    UI = 128;
    /// <summary>
    ///   如果不受安全句柄或其他某些方式确保资源的释放，可能会终止时，导致了资源短缺。
    /// </summary>
    MayLeakOnAbort = 256;
    /// <summary>
    ///   显示主机的所有资源。
    /// </summary>
    All = 511;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定允许的使用独立存储。
  /// </summary>
  [DNTypeName('System.Security.Permissions.IsolatedStorageContainment')]
  DNIsolatedStorageContainment = type Integer;
  DNIsolatedStorageContainmentHelper = record helper for DNIsolatedStorageContainment
  public const
    /// <summary>
    ///   不允许使用独立存储。
    /// </summary>
    None = 0;
    /// <summary>
    ///   存储是隔离首先按用户，然后按域和程序集隔离。
    ///               存储也由计算机隔离。
    ///               仅可以在同一应用程序的并且仅由同一用户运行时的上下文中访问数据。
    ///               如果第三方程序集想要保留的专用数据存储区，这非常有用。
    /// </summary>
    DomainIsolationByUser = 16;
    /// <summary>
    ///   存储将首先按用户，然后按应用程序隔离。
    ///               存储也由计算机隔离。
    ///               这是可在任何域上下文中访问该应用程序提供数据存储区。
    ///               每个应用程序数据隔离舱需要额外的信任，因为它可能会提供可能不利于应用程序特定网站中的数据隔离的应用程序之间的"隧道"。
    /// </summary>
    ApplicationIsolationByUser = 21;
    /// <summary>
    ///   存储是隔离首先按用户，然后按代码程序集隔离。
    ///               存储也由计算机隔离。
    ///               这为在任何域上下文中可访问的程序集提供数据存储区。
    ///               每个程序集的数据隔离舱需要额外的信任，因为它可能会提供可能不利于应用程序特定网站中的数据隔离的应用程序之间的"隧道"。
    /// </summary>
    AssemblyIsolationByUser = 32;
    /// <summary>
    ///   存储是隔离首先按计算机，然后按域和程序集隔离。
    ///               仅可以在同一应用程序的并且仅在同一台计算机上运行时的上下文中访问数据。
    ///               如果第三方程序集想要保留的专用数据存储区，这非常有用。
    /// </summary>
    DomainIsolationByMachine = 48;
    /// <summary>
    ///   存储是隔离首先按计算机，然后按代码程序集隔离。
    ///               这为在任何域上下文中可访问的程序集提供数据存储区。
    ///               每个程序集的数据隔离舱需要额外的信任，因为它可能会提供可能不利于应用程序特定网站中的数据隔离的应用程序之间的"隧道"。
    /// </summary>
    AssemblyIsolationByMachine = 64;
    /// <summary>
    ///   存储将首先按计算机，然后按应用程序隔离。
    ///               这是可在任何域上下文中访问该应用程序提供数据存储区。
    ///               每个应用程序数据隔离舱需要额外的信任，因为它可能会提供可能不利于应用程序特定网站中的数据隔离的应用程序之间的"隧道"。
    /// </summary>
    ApplicationIsolationByMachine = 69;
    /// <summary>
    ///   存储是隔离首先按用户，然后按域和程序集隔离。
    ///               如果启用了 Windows 用户数据漫游，则将漫游存储。
    ///               仅可以在同一应用程序的并且仅由同一用户运行时的上下文中访问数据。
    ///               如果第三方程序集想要保留的专用数据存储区，这非常有用。
    /// </summary>
    DomainIsolationByRoamingUser = 80;
    /// <summary>
    ///   存储是独立首先按用户，然后按程序集证据。
    ///               如果启用了 Windows 用户数据漫游，则将漫游存储。
    ///               这为在任何域上下文中可访问的程序集提供数据存储区。
    ///               每个程序集的数据隔离舱需要额外的信任，因为它可能会提供可能不利于应用程序特定网站中的数据隔离的应用程序之间的"隧道"。
    /// </summary>
    AssemblyIsolationByRoamingUser = 96;
    /// <summary>
    ///   存储是独立首先按用户，然后按应用程序证据。
    ///               如果启用了 Windows 用户数据漫游，则将漫游存储。
    ///               这是可在任何域上下文中访问该应用程序提供数据存储区。
    ///               每个应用程序数据隔离舱需要额外的信任，因为它可能会提供可能不利于应用程序特定网站中的数据隔离的应用程序之间的"隧道"。
    /// </summary>
    ApplicationIsolationByRoamingUser = 101;
    /// <summary>
    ///   用户存储区的无限制的管理功能。
    ///               允许浏览和删除整个用户存储区，但不是能读取访问以外的用户的域/程序集标识。
    /// </summary>
    AdministerIsolatedStorageByUser = 112;
    /// <summary>
    ///   使用独立存储允许不受限制。
    ///               代码具有完全访问权限的用户存储中，不管其身份的域或程序集的任何部分。
    ///               独立存储的这种用法包括枚举独立的存储的数据存储的内容的能力。
    /// </summary>
    UnrestrictedIsolatedStorage = 240;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定允许的密钥容器访问的类型。
  /// </summary>
  [DNTypeName('System.Security.Permissions.KeyContainerPermissionFlags')]
  DNKeyContainerPermissionFlags = type Integer;
  DNKeyContainerPermissionFlagsHelper = record helper for DNKeyContainerPermissionFlags
  public const
    /// <summary>
    ///   密钥容器没有访问权限。
    /// </summary>
    NoFlags = 0;
    /// <summary>
    ///   创建的密钥容器。
    /// </summary>
    Create = 1;
    /// <summary>
    ///   打开一个密钥容器，并使用公共密钥。
    /// </summary>
    Open = 2;
    /// <summary>
    ///   删除密钥容器。
    /// </summary>
    Delete = 4;
    /// <summary>
    ///   将密钥导入到密钥容器。
    /// </summary>
    Import = 16;
    /// <summary>
    ///   从密钥容器中导出密钥。
    /// </summary>
    Export_ = 32;
    /// <summary>
    ///   使用密钥文件签名。
    /// </summary>
    Sign = 256;
    /// <summary>
    ///   解密的密钥容器。
    /// </summary>
    Decrypt = 512;
    /// <summary>
    ///   查看密钥容器的访问控制列表 (ACL)。
    /// </summary>
    ViewAcl = 4096;
    /// <summary>
    ///   更改密钥容器的访问控制列表 (ACL)。
    /// </summary>
    ChangeAcl = 8192;
    /// <summary>
    ///   创建、 解密、 删除和打开一个密钥容器;导出和导入 key;使用密钥; 的文件签名以及查看和更改的密钥容器的访问控制列表。
    /// </summary>
    AllFlags = 13111;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定的权限是否应在创建具有所有或没有访问资源。
  /// </summary>
  [DNTypeName('System.Security.Permissions.PermissionState')]
  DNPermissionState = type Integer;
  DNPermissionStateHelper = record helper for DNPermissionState
  public const
    /// <summary>
    ///   不能访问的权限保护的资源。
    /// </summary>
    None = 0;
    /// <summary>
    ///   完全访问权限的权限保护的资源。
    /// </summary>
    Unrestricted = 1;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定所允许的用途  和  命名空间。
  /// </summary>
  [DNTypeName('System.Security.Permissions.ReflectionPermissionFlag')]
  DNReflectionPermissionFlag = type Integer;
  DNReflectionPermissionFlagHelper = record helper for DNReflectionPermissionFlag
  public const
    /// <summary>
    ///   允许的类型和成员的枚举。
    ///               允许对可见类型和成员的调用操作。
    /// </summary>
    NoFlags = 0;
    /// <summary>
    ///   此标志已废弃不用。
    ///               不不需要以枚举类型和成员并检查其元数据的任何标志。
    ///               请改用 。
    /// </summary>
    TypeInformation = 1;
    /// <summary>
    ///   允许在所有成员上的调用操作，而不考虑授予集。
    ///               如果未设置此标志，仅适用于可见成员允许调用操作。
    /// </summary>
    MemberAccess = 2;
    /// <summary>
    ///   允许发出调试符号。
    ///               开头 .NET Framework 2.0 Service Pack 1, ，发出代码不再需要此标志。
    /// </summary>
    ReflectionEmit = 4;
    /// <summary>
    ///   , , ，和  设置。
    ///               不包括 。
    /// </summary>
    AllFlags = 7;
    /// <summary>
    ///   为部分受信任的代码提供了受限的成员访问权限。
    ///               部分受信任的代码可以访问非公共类型和成员，但仅当程序集的授予集的部分受信任的代码在包含非公共类型和成员所访问的程序集的授予集中包含的所有权限。
    ///               此标志是中的新增功能 .NET Framework 2.0 SP1。
    /// </summary>
    RestrictedMemberAccess = 8;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定对注册表项和值的允许访问权限。
  /// </summary>
  [DNTypeName('System.Security.Permissions.RegistryPermissionAccess')]
  DNRegistryPermissionAccess = type Integer;
  DNRegistryPermissionAccessHelper = record helper for DNRegistryPermissionAccess
  public const
    /// <summary>
    ///   注册表变量没有访问权限。
    ///               不表示有效  值，并会导致  时使用的参数作为 , ，这需要单一值。
    /// </summary>
    NoAccess = 0;
    /// <summary>
    ///   对注册表变量的读取访问权限。
    /// </summary>
    Read = 1;
    /// <summary>
    ///   对注册表变量的写入访问权限。
    /// </summary>
    Write = 2;
    /// <summary>
    ///   创建对注册表变量的访问权限。
    /// </summary>
    Create = 4;
    /// <summary>
    ///   , , ，和  对注册表变量的访问。
    ///               表示多个  值，并会导致  时用作  参数  方法，它需要单一值。
    /// </summary>
    AllAccess = 7;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定可以使用声明性安全执行的安全操作。
  /// </summary>
  [DNTypeName('System.Security.Permissions.SecurityAction')]
  DNSecurityAction = type Integer;
  DNSecurityActionHelper = record helper for DNSecurityAction
  public const
    /// <summary>
    ///   要求调用堆栈中的所有高级调用方已被授予当前权限对象所指定的权限。
    /// </summary>
    Demand = 2;
    /// <summary>
    ///   调用代码可以访问当前权限对象所标识的资源，即使尚未对堆栈中的高级调用方授予访问该资源的权限（请参阅使用断言方法）。
    /// </summary>
    Assert = 3;
    /// <summary>
    ///   即使调用方已被授予访问权限，也会拒绝其访问当前权限对象指定的资源的能力（参见使用 Deny 方法）。
    /// </summary>
    Deny = 4;
    /// <summary>
    ///   仅可以访问此权限对象所指定的资源，即使代码已被授予访问其他资源的权限。
    /// </summary>
    PermitOnly = 5;
    /// <summary>
    ///   要求直接调用方已被授予指定的权限。
    ///               请不要在 .NET Framework 4 中使用。
    ///               对于完全信任，请改用 ；对于部分信任，请使用 。
    /// </summary>
    LinkDemand = 6;
    /// <summary>
    ///   要求继承此类或重写方法的派生的类已被授予指定的权限。
    /// </summary>
    InheritanceDemand = 7;
    /// <summary>
    ///   代码运行所需的最低权限请求。
    ///               此操作仅可以在程序集的作用域内使用。
    /// </summary>
    RequestMinimum = 8;
    /// <summary>
    ///   可选的其他权限请求（不要求运行）。
    ///               此请求隐式拒绝所有未明确请求的其他权限。
    ///               此操作仅可以在程序集的作用域内使用。
    /// </summary>
    RequestOptional = 9;
    /// <summary>
    ///   可能被误用的权限将不授予给调用代码的请求。
    ///               此操作仅可以在程序集的作用域内使用。
    /// </summary>
    RequestRefuse = 10;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定安全权限对象的访问标志。
  /// </summary>
  [DNTypeName('System.Security.Permissions.SecurityPermissionFlag')]
  DNSecurityPermissionFlag = type Integer;
  DNSecurityPermissionFlagHelper = record helper for DNSecurityPermissionFlag
  public const
    /// <summary>
    ///   不能安全访问。
    /// </summary>
    NoFlags = 0;
    /// <summary>
    ///   能够断言此代码的所有调用方均有操作所需的权限。
    /// </summary>
    Assertion = 1;
    /// <summary>
    ///   调用非托管的代码的能力。
    /// </summary>
    UnmanagedCode = 2;
    /// <summary>
    ///   若要跳过验证此程序集中的代码的能力。
    ///               如果授予此权限，也无法进行验证的代码可以运行。
    /// </summary>
    SkipVerification = 4;
    /// <summary>
    ///   要运行的代码的权限。
    ///               如果没有此权限，将不会执行托管的代码。
    /// </summary>
    Execution = 8;
    /// <summary>
    ///   若要使用某些高级的线程操作的能力。
    /// </summary>
    ControlThread = 16;
    /// <summary>
    ///   能够提供证据，包括更改公共语言运行时提供的证据的功能。
    /// </summary>
    ControlEvidence = 32;
    /// <summary>
    ///   若要查看和修改策略的能力。
    /// </summary>
    ControlPolicy = 64;
    /// <summary>
    ///   能够提供序列化服务。
    ///               使用序列化格式化程序。
    /// </summary>
    SerializationFormatter = 128;
    /// <summary>
    ///   若要指定域策略的能力。
    /// </summary>
    ControlDomainPolicy = 256;
    /// <summary>
    ///   能够操作主体对象。
    /// </summary>
    ControlPrincipal = 512;
    /// <summary>
    ///   能够创建和操作 。
    /// </summary>
    ControlAppDomain = 1024;
    /// <summary>
    ///   若要配置远程处理类型和信道的权限。
    /// </summary>
    RemotingConfiguration = 2048;
    /// <summary>
    ///   将代码插入到公共语言运行时结构，如添加远程处理上下文接收器、 Envoy 接收器和动态接收器的权限。
    /// </summary>
    Infrastructure = 4096;
    /// <summary>
    ///   在应用程序配置文件中执行显式绑定重定向权限。
    ///               这包括进行了统一以及找到.NET Framework 之外的其他程序集的.NET Framework 程序集重定向。
    /// </summary>
    BindingRedirects = 8192;
    /// <summary>
    ///   不受限制权限的状态。
    /// </summary>
    AllFlags = 16383;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定到调用代码允许剪贴板访问的类型。
  /// </summary>
  [DNTypeName('System.Security.Permissions.UIPermissionClipboard')]
  DNUIPermissionClipboard = type Integer;
  DNUIPermissionClipboardHelper = record helper for DNUIPermissionClipboard
  public const
    /// <summary>
    ///   不能使用剪贴板。
    /// </summary>
    NoClipboard = 0;
    /// <summary>
    ///   能够将数据放在剪贴板上 (, ，) 是不受限制。
    ///               接受的固有控件 , ，例如文本框中，可以接受剪贴板数据中，但必须以编程方式读取剪贴板的用户控件不能。
    /// </summary>
    OwnClipboard = 1;
    /// <summary>
    ///   不受限制，可以使用剪贴板。
    /// </summary>
    AllClipboard = 2;
  end;


  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   指定代码可以使用的窗口的类型。
  /// </summary>
  [DNTypeName('System.Security.Permissions.UIPermissionWindow')]
  DNUIPermissionWindow = type Integer;
  DNUIPermissionWindowHelper = record helper for DNUIPermissionWindow
  public const
    /// <summary>
    ///   用户不能使用任何窗口或用户界面事件。
    ///               可以使用没有用户界面。
    /// </summary>
    NoWindows = 0;
    /// <summary>
    ///   用户只能使用  进行绘制，并且只能在该子窗口中的用户界面的使用用户输入的事件。
    ///               示例  是 , ，公共对话框控件和一个浏览器中显示的控件。
    /// </summary>
    SafeSubWindows = 1;
    /// <summary>
    ///   用户只能使用  和  进行绘制，并且可以仅为这些顶级窗口和子窗口中的用户界面中使用用户输入的事件。
    /// </summary>
    SafeTopLevelWindows = 2;
    /// <summary>
    ///   用户可以使用所有窗口和不受限制的用户输入的事件。
    /// </summary>
    AllWindows = 3;
  end;


  //-------------namespace: System.Security.Policy----------------
  /// <summary>
  ///   指定如何与版本相匹配时在集合中查找应用程序信任。
  /// </summary>
  [DNTypeName('System.Security.Policy.ApplicationVersionMatch')]
  DNApplicationVersionMatch = type Integer;
  DNApplicationVersionMatchHelper = record helper for DNApplicationVersionMatch
  public const
    /// <summary>
    ///   在版本完全匹配。
    /// </summary>
    MatchExactVersion = 0;
    /// <summary>
    ///   在所有版本匹配。
    /// </summary>
    MatchAllVersions = 1;
  end;


  //-------------namespace: System.Security.Policy----------------
  /// <summary>
  ///   代码组上定义的安全策略的特殊属性标志。
  /// </summary>
  [DNTypeName('System.Security.Policy.PolicyStatementAttribute')]
  DNPolicyStatementAttribute = type Integer;
  DNPolicyStatementAttributeHelper = record helper for DNPolicyStatementAttribute
  public const
    /// <summary>
    ///   不设置任何标志。
    /// </summary>
    Nothing = 0;
    /// <summary>
    ///   独占代码组标志。
    ///               当代码组不包含设置此标志时，仅与该代码组关联的权限授予代码属于代码组。
    ///               最多可以为排他设置匹配一段给定的代码的一个代码组。
    /// </summary>
    Exclusive = 1;
    /// <summary>
    ///   该标志，表示导致较低的策略级别不被视为属于解析操作，实际上允许要重写较低级别的策略级别的策略语句。
    /// </summary>
    LevelFinal = 2;
    /// <summary>
    ///   设置所有属性的标志。
    /// </summary>
    All = 3;
  end;


  //-------------namespace: System.Security.Policy----------------
  /// <summary>
  ///   指定的用户界面 (UI) 信任关系管理器类型应使用做出信任决定。
  /// </summary>
  [DNTypeName('System.Security.Policy.TrustManagerUIContext')]
  DNTrustManagerUIContext = type Integer;
  DNTrustManagerUIContextHelper = record helper for DNTrustManagerUIContext
  public const
    /// <summary>
    ///   安装用户界面。
    /// </summary>
    Install = 0;
    /// <summary>
    ///   升级用户界面。
    /// </summary>
    Upgrade = 1;
    /// <summary>
    ///   运行用户界面。
    /// </summary>
    Run = 2;
  end;


  //-------------namespace: System.Security----------------
  /// <summary>
  ///   指定的托管的代码的策略级别的类型。
  /// </summary>
  [DNTypeName('System.Security.PolicyLevelType')]
  DNPolicyLevelType = type Integer;
  DNPolicyLevelTypeHelper = record helper for DNPolicyLevelType
  public const
    /// <summary>
    ///   由用户运行的所有托管代码的安全策略。
    /// </summary>
    User = 0;
    /// <summary>
    ///   在计算机运行的所有托管代码的安全策略。
    /// </summary>
    Machine = 1;
    /// <summary>
    ///   在企业中的所有托管代码的安全策略。
    /// </summary>
    Enterprise = 2;
    /// <summary>
    ///   应用程序中的所有托管代码的安全策略。
    /// </summary>
    AppDomain = 3;
  end;


  //-------------namespace: System.Security.Principal----------------
  /// <summary>
  ///   指定应如何为应用程序域创建主体和标识对象。
  ///               默认值为 。
  /// </summary>
  [DNTypeName('System.Security.Principal.PrincipalPolicy')]
  DNPrincipalPolicy = type Integer;
  DNPrincipalPolicyHelper = record helper for DNPrincipalPolicy
  public const
    /// <summary>
    ///   应创建未经身份验证的实体的主体和标识对象。
    ///               未经身份验证的实体具有  设置为空字符串 ("") 和  设置为 。
    /// </summary>
    UnauthenticatedPrincipal = 0;
    /// <summary>
    ///   应该不创建任何用户或标识对象。
    /// </summary>
    NoPrincipal = 1;
    /// <summary>
    ///   应创建反映与当前执行线程关联的操作系统令牌的主体和标识对象，并且相关联的操作系统组应映射到角色。
    /// </summary>
    WindowsPrincipal = 2;
  end;


  //-------------namespace: System.Security.Principal----------------
  /// <summary>
  ///   定义与访问令牌相关联的用户帐户的权限。
  /// </summary>
  [DNTypeName('System.Security.Principal.TokenAccessLevels')]
  DNTokenAccessLevels = type Integer;
  DNTokenAccessLevelsHelper = record helper for DNTokenAccessLevels
  public const
    /// <summary>
    ///   用户可以将主令牌附加到进程。
    /// </summary>
    AssignPrimary = 1;
    /// <summary>
    ///   用户可以复制令牌。
    /// </summary>
    Duplicate = 2;
    /// <summary>
    ///   用户可以模拟客户端。
    /// </summary>
    Impersonate = 4;
    /// <summary>
    ///   用户可以查询令牌。
    /// </summary>
    Query = 8;
    /// <summary>
    ///   用户可以查询令牌的源。
    /// </summary>
    QuerySource = 16;
    /// <summary>
    ///   用户可以启用或禁用令牌中的权限。
    /// </summary>
    AdjustPrivileges = 32;
    /// <summary>
    ///   用户可以更改令牌中组的属性。
    /// </summary>
    AdjustGroups = 64;
    /// <summary>
    ///   用户可以更改令牌的默认所有者、主要组或自由访问控制列表 (DACL)。
    /// </summary>
    AdjustDefault = 128;
    /// <summary>
    ///   用户可以调整令牌的会话标识符。
    /// </summary>
    AdjustSessionId = 256;
    /// <summary>
    ///   用户具有令牌的标准读取权限和  权限。
    /// </summary>
    Read = 131080;
    /// <summary>
    ///   用户具有令牌的标准写入权限和 、 和  权限。
    /// </summary>
    Write = 131296;
    /// <summary>
    ///   用户具有令牌的所有可能的访问权限。
    /// </summary>
    AllAccess = 983551;
    /// <summary>
    ///   可以为  枚举分配的最大值。
    /// </summary>
    MaximumAllowed = 33554432;
  end;


  //-------------namespace: System.Security.Principal----------------
  /// <summary>
  ///   定义安全模拟级别。
  ///               安全模拟级别控制服务器进程可在何种程度上代表客户端进程执行操作。
  /// </summary>
  [DNTypeName('System.Security.Principal.TokenImpersonationLevel')]
  DNTokenImpersonationLevel = type Integer;
  DNTokenImpersonationLevelHelper = record helper for DNTokenImpersonationLevel
  public const
    /// <summary>
    ///   未分配模拟级别。
    /// </summary>
    None = 0;
    /// <summary>
    ///   服务器进程无法获取有关客户端的标识信息，且无法模拟客户端。
    /// </summary>
    Anonymous = 1;
    /// <summary>
    ///   服务器进程可以获取关于客户端，如安全标识符和特权，但它无法模拟客户端。
    ///               这对于导出自身对象的服务器非常有用，例如，导出表和视图的数据库产品。
    ///               在不能使用其他正使用客户端安全上下文的服务的情况下，服务器可以使用检索到的客户端安全信息做出访问验证决策。
    /// </summary>
    Identification = 2;
    /// <summary>
    ///   服务器进程可以模拟在其本地系统上的客户端的安全上下文。
    ///               服务器无法在远程系统上模拟客户端。
    /// </summary>
    Impersonation = 3;
    /// <summary>
    ///   服务器进程可以模拟远程系统上的客户端的安全上下文。
    /// </summary>
    Delegation = 4;
  end;


  //-------------namespace: System.Security.Principal----------------
  /// <summary>
  ///   定义一组常用的安全标识符 (Sid)。
  /// </summary>
  [DNTypeName('System.Security.Principal.WellKnownSidType')]
  DNWellKnownSidType = type Integer;
  DNWellKnownSidTypeHelper = record helper for DNWellKnownSidType
  public const
    /// <summary>
    ///   指示一个空的 SID。
    /// </summary>
    NullSid = 0;
    /// <summary>
    ///   指示任何人都匹配的 SID。
    /// </summary>
    WorldSid = 1;
    /// <summary>
    ///   指示本地 SID。
    /// </summary>
    LocalSid = 2;
    /// <summary>
    ///   指示匹配的对象的创建者或所有者的 SID。
    /// </summary>
    CreatorOwnerSid = 3;
    /// <summary>
    ///   指示一个对象的创建者组相匹配的 SID。
    /// </summary>
    CreatorGroupSid = 4;
    /// <summary>
    ///   指示创建者所有者服务器 SID。
    /// </summary>
    CreatorOwnerServerSid = 5;
    /// <summary>
    ///   指示创建者组服务器 SID。
    /// </summary>
    CreatorGroupServerSid = 6;
    /// <summary>
    ///   指示 Windows NT 颁发机构的 SID。
    /// </summary>
    NTAuthoritySid = 7;
    /// <summary>
    ///   指示拨号帐户的 SID。
    /// </summary>
    DialupSid = 8;
    /// <summary>
    ///   指示网络帐户的 SID。
    ///               在通过网络登录时，此 SID 被添加到令牌的进程。
    /// </summary>
    NetworkSid = 9;
    /// <summary>
    ///   指示批处理的 SID。
    ///               作为批处理作业登录时，此 SID 被添加到令牌的进程。
    /// </summary>
    BatchSid = 10;
    /// <summary>
    ///   指示一个交互式帐户的 SID。
    ///               以交互方式登录时，此 SID 被添加到令牌的进程。
    /// </summary>
    InteractiveSid = 11;
    /// <summary>
    ///   指示服务的 SID。
    ///               作为服务登录时，此 SID 被添加到令牌的进程。
    /// </summary>
    ServiceSid = 12;
    /// <summary>
    ///   指示为匿名帐户的 SID。
    /// </summary>
    AnonymousSid = 13;
    /// <summary>
    ///   指示代理 SID。
    /// </summary>
    ProxySid = 14;
    /// <summary>
    ///   指示一个企业控制器的 SID。
    /// </summary>
    EnterpriseControllersSid = 15;
    /// <summary>
    ///   指示对自己的 SID。
    /// </summary>
    SelfSid = 16;
    /// <summary>
    ///   指示为已经过身份验证的用户的 SID。
    /// </summary>
    AuthenticatedUserSid = 17;
    /// <summary>
    ///   指示受限制的代码的 SID。
    /// </summary>
    RestrictedCodeSid = 18;
    /// <summary>
    ///   指示匹配终端服务器的帐户的 SID。
    /// </summary>
    TerminalServerSid = 19;
    /// <summary>
    ///   指示与远程登录匹配的 SID。
    /// </summary>
    RemoteLogonIdSid = 20;
    /// <summary>
    ///   指示与登录 Id 相匹配的 SID。
    /// </summary>
    LogonIdsSid = 21;
    /// <summary>
    ///   指示匹配的本地系统的 SID。
    /// </summary>
    LocalSystemSid = 22;
    /// <summary>
    ///   指示与本地服务匹配的 SID。
    /// </summary>
    LocalServiceSid = 23;
    /// <summary>
    ///   指示与网络服务匹配的 SID。
    /// </summary>
    NetworkServiceSid = 24;
    /// <summary>
    ///   指示匹配的域帐户的 SID。
    /// </summary>
    BuiltinDomainSid = 25;
    /// <summary>
    ///   指示匹配的管理员帐户的 SID。
    /// </summary>
    BuiltinAdministratorsSid = 26;
    /// <summary>
    ///   指示与内置用户帐户相匹配的 SID。
    /// </summary>
    BuiltinUsersSid = 27;
    /// <summary>
    ///   指示匹配的来宾帐户的 SID。
    /// </summary>
    BuiltinGuestsSid = 28;
    /// <summary>
    ///   指示匹配 power users 组的 SID。
    /// </summary>
    BuiltinPowerUsersSid = 29;
    /// <summary>
    ///   指示匹配帐户运算符帐户的 SID。
    /// </summary>
    BuiltinAccountOperatorsSid = 30;
    /// <summary>
    ///   指示匹配系统操作员组的 SID。
    /// </summary>
    BuiltinSystemOperatorsSid = 31;
    /// <summary>
    ///   指示匹配打印操作员组的 SID。
    /// </summary>
    BuiltinPrintOperatorsSid = 32;
    /// <summary>
    ///   指示匹配备份操作员组的 SID。
    /// </summary>
    BuiltinBackupOperatorsSid = 33;
    /// <summary>
    ///   指示匹配的复制商帐户的 SID。
    /// </summary>
    BuiltinReplicatorSid = 34;
    /// <summary>
    ///   指示匹配前一个 SIDWindows 2000 兼容的帐户。
    /// </summary>
    BuiltinPreWindows2000CompatibleAccessSid = 35;
    /// <summary>
    ///   指示与远程桌面用户相匹配的 SID。
    /// </summary>
    BuiltinRemoteDesktopUsersSid = 36;
    /// <summary>
    ///   指示匹配 network operators 组的 SID。
    /// </summary>
    BuiltinNetworkConfigurationOperatorsSid = 37;
    /// <summary>
    ///   指示匹配帐户管理员组的 SID。
    /// </summary>
    AccountAdministratorSid = 38;
    /// <summary>
    ///   指示匹配帐户来宾组的 SID。
    /// </summary>
    AccountGuestSid = 39;
    /// <summary>
    ///   指示匹配帐户 Kerberos 目标组的 SID。
    /// </summary>
    AccountKrbtgtSid = 40;
    /// <summary>
    ///   指示匹配的帐户域管理员组的 SID。
    /// </summary>
    AccountDomainAdminsSid = 41;
    /// <summary>
    ///   指示匹配的帐户的域用户组的 SID。
    /// </summary>
    AccountDomainUsersSid = 42;
    /// <summary>
    ///   指示匹配帐户域来宾组的 SID。
    /// </summary>
    AccountDomainGuestsSid = 43;
    /// <summary>
    ///   指示匹配帐户计算机组的 SID。
    /// </summary>
    AccountComputersSid = 44;
    /// <summary>
    ///   指示匹配帐户控制器组的 SID。
    /// </summary>
    AccountControllersSid = 45;
    /// <summary>
    ///   指示匹配的证书管理员组的 SID。
    /// </summary>
    AccountCertAdminsSid = 46;
    /// <summary>
    ///   指示匹配的架构管理员组的 SID。
    /// </summary>
    AccountSchemaAdminsSid = 47;
    /// <summary>
    ///   指示匹配企业管理员组的 SID。
    /// </summary>
    AccountEnterpriseAdminsSid = 48;
    /// <summary>
    ///   指示匹配策略管理员组的 SID。
    /// </summary>
    AccountPolicyAdminsSid = 49;
    /// <summary>
    ///   指示匹配 RAS 和 IAS 服务器帐户的 SID。
    /// </summary>
    AccountRasAndIasServersSid = 50;
    /// <summary>
    ///   表示一个 Microsoft NTLM 身份验证包身份验证的客户端时存在的 SID。
    /// </summary>
    NtlmAuthenticationSid = 51;
    /// <summary>
    ///   表示一个 Microsoft 摘要式身份验证包身份验证的客户端时存在的 SID。
    /// </summary>
    DigestAuthenticationSid = 52;
    /// <summary>
    ///   表示一个安全通道 (SSL/TLS) 身份验证包身份验证的客户端时存在的 SID。
    /// </summary>
    SChannelAuthenticationSid = 53;
    /// <summary>
    ///   指示当用户经过身份验证从林内的或不具有启用了选择性身份验证选项的信任时存在一个 SID。
    ///               如果此 SID 是存在，则  不能存在。
    /// </summary>
    ThisOrganizationSid = 54;
    /// <summary>
    ///   指示在时才启用选择性身份验证选项的林中跨身份验证了用户的 SID。
    ///               如果此 SID 是存在，则  不能存在。
    /// </summary>
    OtherOrganizationSid = 55;
    /// <summary>
    ///   指示一个允许用户创建传入林信任的 SID。
    ///               它将添加到传入林信任构建者内置组的根域中的目录林的成员的用户的令牌。
    /// </summary>
    BuiltinIncomingForestTrustBuildersSid = 56;
    /// <summary>
    ///   指示匹配的已计划在此计算机上的性能计数器的日志的远程访问权限的用户组的 SID。
    /// </summary>
    BuiltinPerformanceMonitoringUsersSid = 57;
    /// <summary>
    ///   指示匹配的用户所拥有的远程访问，以监视计算机组的 SID。
    /// </summary>
    BuiltinPerformanceLoggingUsersSid = 58;
    /// <summary>
    ///   指示 Windows 授权访问组相匹配的 SID。
    /// </summary>
    BuiltinAuthorizationAccessSid = 59;
    /// <summary>
    ///   表示一个 SID 不存在可以颁发终端服务器许可证服务器中。
    /// </summary>
    WinBuiltinTerminalServerLicenseServersSid = 60;
    /// <summary>
    ///   指示最大值定义中的 SID  枚举。
    /// </summary>
    MaxDefined = 60;
  end;


  //-------------namespace: System.Security.Principal----------------
  /// <summary>
  ///   指定使用 Windows 帐户的类型。
  /// </summary>
  [DNTypeName('System.Security.Principal.WindowsAccountType')]
  DNWindowsAccountType = type Integer;
  DNWindowsAccountTypeHelper = record helper for DNWindowsAccountType
  public const
    /// <summary>
    ///   标准用户帐户。
    /// </summary>
    Normal = 0;
    /// <summary>
    ///   Windows 来宾帐户。
    /// </summary>
    Guest = 1;
    /// <summary>
    ///   Windows 系统帐户。
    /// </summary>
    System = 2;
    /// <summary>
    ///   匿名帐户。
    /// </summary>
    Anonymous = 3;
  end;


  //-------------namespace: System.Security.Principal----------------
  /// <summary>
  ///   指定要用于的常见角色 。
  /// </summary>
  [DNTypeName('System.Security.Principal.WindowsBuiltInRole')]
  DNWindowsBuiltInRole = type Integer;
  DNWindowsBuiltInRoleHelper = record helper for DNWindowsBuiltInRole
  public const
    /// <summary>
    ///   管理员可以完全和不受限访问的计算机或域。
    /// </summary>
    Administrator = 544;
    /// <summary>
    ///   防止用户意外或故意系统范围内更改。
    ///               因此，用户可以运行认证应用程序，但不是大多数的旧版应用程序。
    /// </summary>
    User = 545;
    /// <summary>
    ///   来宾是比用户更受限制。
    /// </summary>
    Guest = 546;
    /// <summary>
    ///   超级用户具有大部分有一定的限制的管理权限。
    ///               因此，高级用户可以运行旧版应用程序，以及经过认证的应用程序。
    /// </summary>
    PowerUser = 547;
    /// <summary>
    ///   帐户操作员管理计算机或域上的用户帐户。
    /// </summary>
    AccountOperator = 548;
    /// <summary>
    ///   系统操作员管理特定的计算机。
    /// </summary>
    SystemOperator = 549;
    /// <summary>
    ///   打印操作员可以将打印机的控制。
    /// </summary>
    PrintOperator = 550;
    /// <summary>
    ///   备份操作员可以为备份或还原文件的唯一目的覆盖安全限制。
    /// </summary>
    BackupOperator = 551;
    /// <summary>
    ///   复制支持在域中的文件复制。
    /// </summary>
    Replicator = 552;
  end;


  //-------------namespace: System.Security----------------
  /// <summary>
  ///   标识的安全上下文的源。
  /// </summary>
  [DNTypeName('System.Security.SecurityContextSource')]
  DNSecurityContextSource = type Integer;
  DNSecurityContextSourceHelper = record helper for DNSecurityContextSource
  public const
    /// <summary>
    ///   当前的应用程序域是安全上下文的源。
    /// </summary>
    CurrentAppDomain = 0;
    /// <summary>
    ///   当前程序集是安全上下文的源。
    /// </summary>
    CurrentAssembly = 1;
  end;


  //-------------namespace: System.Security----------------
  /// <summary>
  ///   指定的范围 。
  /// </summary>
  [DNTypeName('System.Security.SecurityCriticalScope')]
  DNSecurityCriticalScope = type Integer;
  DNSecurityCriticalScopeHelper = record helper for DNSecurityCriticalScope
  public const
    /// <summary>
    ///   该属性仅适用于直接目标。
    /// </summary>
    Explicit = 0;
    /// <summary>
    ///   该特性应用于它后面的所有代码。
    /// </summary>
    Everything = 1;
  end;


  //-------------namespace: System.Security----------------
  /// <summary>
  ///   标识公共语言运行时应为程序集强制实施的安全规则的集。
  /// </summary>
  [DNTypeName('System.Security.SecurityRuleSet')]
  DNSecurityRuleSet = type Integer;
  DNSecurityRuleSetHelper = record helper for DNSecurityRuleSet
  public const
    /// <summary>
    ///   不受支持。
    ///               使用此值会导致  引发。
    /// </summary>
    None = 0;
    /// <summary>
    ///   指示运行时将强制执行第 1 级透明度规则 （.NET Framework 2.0 版）。
    /// </summary>
    Level1 = 1;
    /// <summary>
    ///   指示运行时将强制执行第 2 级透明度规则。
    /// </summary>
    Level2 = 2;
  end;


  //-------------namespace: System.Security----------------
  /// <summary>
  ///   定义与使用的安全策略安全区域相对应的整数值。
  /// </summary>
  [DNTypeName('System.Security.SecurityZone')]
  DNSecurityZone = type Integer;
  DNSecurityZoneHelper = record helper for DNSecurityZone
  public const
    /// <summary>
    ///   本地计算机区域是一个隐式区域，用于在用户计算机存在的内容。
    /// </summary>
    MyComputer = 0;
    /// <summary>
    ///   本地 intranet 区域用于位于公司的 intranet 上的内容。
    ///               因为服务器和信息都是一家公司防火墙内，用户或公司可以向在 intranet 上的内容分配较高的信任级别。
    /// </summary>
    Intranet = 1;
    /// <summary>
    ///   受信任的站点区域用于位于网站被认为更可信或更高信度比在 Internet 上的其他站点上的内容。
    ///               用户可以使用此区域将更高的信任级别分配给这些站点，以尽可能减少身份验证请求的数目。
    ///               这些受信任的网站的 Url 需要由用户映射到该区域。
    /// </summary>
    Trusted = 2;
    /// <summary>
    ///   Internet 区域用于 Internet 上不属于另一个区域的 Web 站点。
    /// </summary>
    Internet = 3;
    /// <summary>
    ///   受限制的站点区域用于带可能导致问题或者可能会导致，问题在下载时的内容的网站。
    ///               这些不受信任的网站的 Url 需要由用户映射到该区域。
    /// </summary>
    Untrusted = 4;
    /// <summary>
    ///   未指定区域。
    /// </summary>
    NoZone = -1;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定供  和  方法的特定重载使用的区域性、大小写和排序规则。
  /// </summary>
  [DNTypeName('System.StringComparison')]
  DNStringComparison = type Integer;
  DNStringComparisonHelper = record helper for DNStringComparison
  public const
    /// <summary>
    ///   使用区分区域性的排序规则和当前区域性比较字符串。
    /// </summary>
    CurrentCulture = 0;
    /// <summary>
    ///   通过使用区分区域性的排序规则、当前区域性，并忽略所比较的字符串的大小写，来比较字符串。
    /// </summary>
    CurrentCultureIgnoreCase = 1;
    /// <summary>
    ///   使用区分区域性的排序规则和固定区域性比较字符串。
    /// </summary>
    InvariantCulture = 2;
    /// <summary>
    ///   通过使用区分区域性的排序规则、固定区域性，并忽略所比较的字符串的大小写，来比较字符串。
    /// </summary>
    InvariantCultureIgnoreCase = 3;
    /// <summary>
    ///   使用序号（二进制）排序规则比较字符串。
    /// </summary>
    Ordinal = 4;
    /// <summary>
    ///   通过使用序号（二进制）区分区域性的排序规则并忽略所比较的字符串的大小写，来比较字符串。
    /// </summary>
    OrdinalIgnoreCase = 5;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定是否适用方法重载包含还是省略返回值中的空子。
  /// </summary>
  [DNTypeName('System.StringSplitOptions')]
  DNStringSplitOptions = type Integer;
  DNStringSplitOptionsHelper = record helper for DNStringSplitOptions
  public const
    /// <summary>
    ///   返回的值包括数组的元素，包含一个空字符串
    /// </summary>
    None = 0;
    /// <summary>
    ///   返回值不包括包含空字符串的数组元素
    /// </summary>
    RemoveEmptyEntries = 1;
  end;


  //-------------namespace: System.Text----------------
  /// <summary>
  ///   定义要执行的规范化的类型。
  /// </summary>
  [DNTypeName('System.Text.NormalizationForm')]
  DNNormalizationForm = type Integer;
  DNNormalizationFormHelper = record helper for DNNormalizationForm
  public const
    /// <summary>
    ///   指示 Unicode 字符串使用完全标准分解进行规范化，然后将序列替换为其主复合（如果可能）。
    /// </summary>
    FormC = 1;
    /// <summary>
    ///   指示 Unicode 字符串使用完全标准分解进行规范化。
    /// </summary>
    FormD = 2;
    /// <summary>
    ///   指示 Unicode 字符串使用完全兼容分解进行规范化，然后将序列替换为其主复合（如果可能）。
    /// </summary>
    FormKC = 5;
    /// <summary>
    ///   指示 Unicode 字符串使用完全兼容分解进行规范化。
    /// </summary>
    FormKD = 6;
  end;


  //-------------namespace: System.Threading----------------
  /// <summary>
  ///   指定的单元状态 。
  /// </summary>
  [DNTypeName('System.Threading.ApartmentState')]
  DNApartmentState = type Integer;
  DNApartmentStateHelper = record helper for DNApartmentState
  public const
    /// <summary>
    ///   将创建并进入一个单线程单元。
    /// </summary>
    STA = 0;
    /// <summary>
    ///   将创建并进入一个多线程的单元。
    /// </summary>
    MTA = 1;
    /// <summary>
    ///   未设置属性。
    /// </summary>
    Unknown = 2;
  end;


  //-------------namespace: System.Threading----------------
  /// <summary>
  ///   指示是否  之后重置自动或手动接收信号。
  /// </summary>
  [DNTypeName('System.Threading.EventResetMode')]
  DNEventResetMode = type Integer;
  DNEventResetModeHelper = record helper for DNEventResetMode
  public const
    /// <summary>
    ///   当终止时，  释放一个线程后自动重置。
    ///               如果没有线程在等待，  一直保持此线程将阻止，直到终止状态并在释放线程后将重置。
    /// </summary>
    AutoReset = 0;
    /// <summary>
    ///   当终止时，  释放所有等待的线程和手动重置之前一直保持终止状态。
    /// </summary>
    ManualReset = 1;
  end;


  //-------------namespace: System.Threading----------------
  /// <summary>
  ///   指定  实例如何同步多个线程间的访问。
  /// </summary>
  [DNTypeName('System.Threading.LazyThreadSafetyMode')]
  DNLazyThreadSafetyMode = type Integer;
  DNLazyThreadSafetyModeHelper = record helper for DNLazyThreadSafetyMode
  public const
    /// <summary>
    ///   实例不是线程安全的；如果从多个线程访问该实例，则其行为不确定。
    ///               仅应在高性能至关重要并且保证决不会从多个线程初始化  实例时才使用该模式。
    ///               如果使用指定初始化方法（ 参数）的  构造函数，并且如果此初始化方法在你首次调用  属性时引发异常（或无法处理异常），则会缓存该异常并在随后调用  属性时再次引发该异常。
    ///               如果你使用不指定初始化方法的  构造函数，则不会缓存  默认构造函数引发的异常。
    ///               在此情况下，对  属性进行后续调用可成功初始化  实例。
    ///               如果初始化方法递归访问  实例的  属性，则引发 。
    /// </summary>
    None = 0;
    /// <summary>
    ///   当多个线程尝试同时初始化一个  实例时，允许所有线程都运行初始化方法（如果没有初始化方法，则运行默认构造函数）。
    ///               完成初始化的第一个线程设置  实例的值。
    ///               该值将返回给同时运行初始化方法的其他所有线程，除非初始化方法对这些线程引发异常。
    ///               争用线程创建的任何  实例都将被放弃。
    ///               如果初始化方法对任何线程引发异常，则该异常会从该线程上的  属性传播出去。
    ///               不缓存该异常。
    ///               属性的值仍然为 ，并且随后通过其中引发异常的线程或通过其他线程对  属性的调用会导致初始化方法再次运行。
    ///               如果初始化方法递归访问  实例的  属性，则不会引发异常。
    /// </summary>
    PublicationOnly = 1;
    /// <summary>
    ///   使用锁来确保只有一个线程可以在线程安全的方式下初始化  实例。
    ///               如果初始化方法（如果没有初始化方法，则为默认构造函数）在内部使用锁，则可能会发生死锁。
    ///               如果使用指定初始化方法（ 参数）的  构造函数，并且如果此初始化方法在你首次调用  属性时引发异常（或无法处理异常），则会缓存该异常并在随后调用  属性时再次引发该异常。
    ///               如果你使用不指定初始化方法的  构造函数，则不会缓存  默认构造函数引发的异常。
    ///               在此情况下，对  属性进行后续调用可成功初始化  实例。
    ///               如果初始化方法递归访问  实例的  属性，则引发 。
    /// </summary>
    ExecutionAndPublication = 2;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  /// <summary>
  ///   为通过使用  或  方法创建的任务指定行为。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.TaskContinuationOptions')]
  DNTaskContinuationOptions = type Integer;
  DNTaskContinuationOptionsHelper = record helper for DNTaskContinuationOptions
  public const
    /// <summary>
    ///   如果未指定延续选项，应在执行延续任务时使用指定的默认行为。
    ///               延续任务在前面的任务完成后以异步方式运行，与前面任务最终的  属性值无关。
    ///               如果延续为子任务，则会将其创建为分离的嵌套任务。
    /// </summary>
    None = 0;
    /// <summary>
    ///   提示  按任务计划的顺序安排任务，因此较早安排的任务将更可能较早运行，而较晚安排运行的任务将更可能较晚运行。
    /// </summary>
    PreferFairness = 1;
    /// <summary>
    ///   指定延续将是长期运行的、粗粒度的操作。
    ///               它会向  提示，过度订阅可能是合理的。
    /// </summary>
    LongRunning = 2;
    /// <summary>
    ///   如果延续为子任务，则指定将延续附加到任务层次结构中的父级。
    ///               只有当延续前面的任务也是子任务时，延续才可以是子任务。
    ///               默认情况下，子任务（即由外部任务创建的内部任务）将独立于其父任务执行。
    ///               可以使用  选项以便将父任务和子任务同步。
    ///            
    ///              请注意，如果使用  选项配置父任务，则子任务中的  选项不起作用，并且子任务将作为分离的子任务执行。
    ///            
    ///              有关更多信息，请参见Attached and Detached Child Tasks。
    /// </summary>
    AttachedToParent = 4;
    /// <summary>
    ///   指定任何使用  选项创建，并尝试作为附加的子任务执行的子任务（即，由此延续创建的任何嵌套内部任务）都无法附加到父任务，会改成作为分离的子任务执行。
    ///               有关详细信息，请参阅附加和分离的子任务。
    /// </summary>
    DenyChildAttach = 8;
    /// <summary>
    ///   指定由延续通过调用方法（如  或 ）创建的任务将默认计划程序 () 视为当前的计划程序，而不是正在运行该延续的计划程序。
    /// </summary>
    HideScheduler = 16;
    /// <summary>
    ///   在延续取消的情况下，防止延续的完成直到完成先前的任务。
    /// </summary>
    LazyCancellation = 32;
    /// <summary>
    ///   指定应异步运行延续任务。
    ///                此选项优先于 。
    /// </summary>
    RunContinuationsAsynchronously = 64;
    /// <summary>
    ///   指定不应在延续任务前面的任务已完成运行的情况下安排延续任务。
    ///               如果前面任务完成的  属性是 ，则前面的任务会运行直至完成。
    ///               此选项对多任务延续无效。
    /// </summary>
    NotOnRanToCompletion = 65536;
    /// <summary>
    ///   指定不应在延续任务前面的任务引发了未处理异常的情况下安排延续任务。
    ///               如果前面任务完成的  属性是 ，则前面的任务会引发未处理的异常。
    ///               此选项对多任务延续无效。
    /// </summary>
    NotOnFaulted = 131072;
    /// <summary>
    ///   指定只应在延续前面的任务已取消的情况下安排延续任务。
    ///                如果前面任务完成的  属性是 ，则前面的任务会取消。
    ///               此选项对多任务延续无效。
    /// </summary>
    OnlyOnCanceled = 196608;
    /// <summary>
    ///   指定不应在延续任务前面的任务已取消的情况下安排延续任务。
    ///               如果前面任务完成的  属性是 ，则前面的任务会取消。
    ///               此选项对多任务延续无效。
    /// </summary>
    NotOnCanceled = 262144;
    /// <summary>
    ///   指定只有在延续任务前面的任务引发了未处理异常的情况下才应安排延续任务。
    ///               如果前面任务完成的  属性是 ，则前面的任务会引发未处理的异常。
    ///            
    ///               选项可保证前面任务中的  属性不是 。
    ///               你可以使用该属性来捕获异常，并确定导致任务出错的异常。
    ///               如果你不访问  属性，则不会处理异常。
    ///               此外，如果尝试访问已取消或出错的任务的  属性，则会引发一个新异常。
    ///            
    ///              此选项对多任务延续无效。
    /// </summary>
    OnlyOnFaulted = 327680;
    /// <summary>
    ///   指定只应在延续任务前面的任务已完成运行的情况下才安排延续任务。
    ///               如果前面任务完成的  属性是 ，则前面的任务会运行直至完成。
    ///               此选项对多任务延续无效。
    /// </summary>
    OnlyOnRanToCompletion = 393216;
    /// <summary>
    ///   指定应同步执行延续任务。
    ///               指定此选项后，延续任务在导致前面的任务转换为其最终状态的相同线程上运行。
    ///               如果在创建延续任务时已经完成前面的任务，则延续任务将在创建此延续任务的线程上运行。
    ///               如果前面任务的  已在一个 （在 Visual Basic 中为 ）块中释放，则使用此选项的延续任务将在该  块中运行。
    ///               只应同步执行运行时间非常短的延续任务。
    ///            
    ///              由于任务以同步方式执行，因此无需调用诸如  的方法来确保调用线程等待任务完成。
    /// </summary>
    ExecuteSynchronously = 524288;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  /// <summary>
  ///   指定用于控制任务的创建和执行的可选行为的标志。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.TaskCreationOptions')]
  DNTaskCreationOptions = type Integer;
  DNTaskCreationOptionsHelper = record helper for DNTaskCreationOptions
  public const
    /// <summary>
    ///   指定应使用默认行为。
    /// </summary>
    None = 0;
    /// <summary>
    ///   提示  以一种尽可能公平的方式安排任务，这意味着较早安排的任务将更可能较早运行，而较晚安排运行的任务将更可能较晚运行。
    /// </summary>
    PreferFairness = 1;
    /// <summary>
    ///   指定任务将是长时间运行的、粗粒度的操作，涉及比细化的系统更少、更大的组件。
    ///               它会向  提示，过度订阅可能是合理的。
    ///               可以通过过度订阅创建比可用硬件线程数更多的线程。
    ///               它还将提示任务计划程序：该任务需要附加线程，以使任务不阻塞本地线程池队列中其他线程或工作项的向前推动。
    /// </summary>
    LongRunning = 2;
    /// <summary>
    ///   指定将任务附加到任务层次结构中的某个父级。
    ///               默认情况下，子任务（即由外部任务创建的内部任务）将独立于其父任务执行。
    ///               可以使用  选项以便将父任务和子任务同步。
    ///            
    ///              请注意，如果使用  选项配置父任务，则子任务中的  选项不起作用，并且子任务将作为分离的子任务执行。
    ///            
    ///              有关详细信息，请参阅附加和分离的子任务。
    /// </summary>
    AttachedToParent = 4;
    /// <summary>
    ///   指定任何尝试作为附加的子任务执行（即，使用  选项创建）的子任务都无法附加到父任务，会改成作为分离的子任务执行。
    ///               有关详细信息，请参阅附加和分离的子任务。
    /// </summary>
    DenyChildAttach = 8;
    /// <summary>
    ///   防止环境计划程序被视为已创建任务的当前计划程序。
    ///               这意味着像 StartNew 或 ContinueWith 创建任务的执行操作将被视为  当前计划程序。
    /// </summary>
    HideScheduler = 16;
    /// <summary>
    ///   强制异步执行添加到当前任务的延续任务。
    ///            
    ///              请注意， 成员在以 .NET Framework 4.6 开头的  枚举中可用。
    /// </summary>
    RunContinuationsAsynchronously = 64;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  /// <summary>
  ///   表示  的生命周期中的当前阶段。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.TaskStatus')]
  DNTaskStatus = type Integer;
  DNTaskStatusHelper = record helper for DNTaskStatus
  public const
    /// <summary>
    ///   该任务已初始化，但尚未被计划。
    /// </summary>
    Created = 0;
    /// <summary>
    ///   该任务正在等待 .NET Framework 基础结构在内部将其激活并进行计划。
    /// </summary>
    WaitingForActivation = 1;
    /// <summary>
    ///   该任务已被计划执行，但尚未开始执行。
    /// </summary>
    WaitingToRun = 2;
    /// <summary>
    ///   该任务正在运行，但尚未完成。
    /// </summary>
    Running = 3;
    /// <summary>
    ///   该任务已完成执行，正在隐式等待附加的子任务完成。
    /// </summary>
    WaitingForChildrenToComplete = 4;
    /// <summary>
    ///   已成功完成执行的任务。
    /// </summary>
    RanToCompletion = 5;
    /// <summary>
    ///   该任务已通过对其自身的 CancellationToken 引发 OperationCanceledException 对取消进行了确认，此时该标记处于已发送信号状态；或者在该任务开始执行之前，已向该任务的 CancellationToken 发出了信号。
    ///               有关详细信息，请参阅任务取消。
    /// </summary>
    Canceled = 6;
    /// <summary>
    ///   由于未处理异常的原因而完成的任务。
    /// </summary>
    Faulted = 7;
  end;


  //-------------namespace: System.Threading----------------
  /// <summary>
  ///   指定的调度优先级的 。
  /// </summary>
  [DNTypeName('System.Threading.ThreadPriority')]
  DNThreadPriority = type Integer;
  DNThreadPriorityHelper = record helper for DNThreadPriority
  public const
    /// <summary>
    ///   可以安排在具有任何其他优先级的线程之后。
    /// </summary>
    Lowest = 0;
    /// <summary>
    ///   可以安排在使用的线程之后  优先级之前  优先级。
    /// </summary>
    BelowNormal = 1;
    /// <summary>
    ///   可以安排在使用的线程之后  优先级之前  优先级。
    ///               线程所具有的  默认优先级。
    /// </summary>
    Normal = 2;
    /// <summary>
    ///   可以安排在使用的线程之后  优先级之前  优先级。
    /// </summary>
    AboveNormal = 3;
    /// <summary>
    ///   可以安排在具有任何其他优先级的线程之前。
    /// </summary>
    Highest = 4;
  end;


  //-------------namespace: System.Threading----------------
  /// <summary>
  ///   指定的执行状态 。
  /// </summary>
  [DNTypeName('System.Threading.ThreadState')]
  DNThreadState = type Integer;
  DNThreadStateHelper = record helper for DNThreadState
  public const
    /// <summary>
    ///   启动线程，它不会被阻止，并且有没有挂起 。
    /// </summary>
    Running = 0;
    /// <summary>
    ///   正在请求线程停止。
    ///               这是仅供内部使用。
    /// </summary>
    StopRequested = 1;
    /// <summary>
    ///   正在请求线程挂起。
    /// </summary>
    SuspendRequested = 2;
    /// <summary>
    ///   该线程将作为后台线程，而不是一个前台线程正在执行。
    ///               通过设置控制此状态  属性。
    /// </summary>
    Background = 4;
    /// <summary>
    ///   不对的线程上调用方法。
    /// </summary>
    Unstarted = 8;
    /// <summary>
    ///   该线程已停止。
    /// </summary>
    Stopped = 16;
    /// <summary>
    ///   线程将受阻。
    ///               这可能是因调用  或 , ，请求锁的 — 例如，通过调用  或  — 或处于等待状态的线程同步对象如 。
    /// </summary>
    WaitSleepJoin = 32;
    /// <summary>
    ///   该线程已挂起。
    /// </summary>
    Suspended = 64;
    /// <summary>
    ///   的线程上调用方法，但该线程尚未收到挂起  ，将尝试将其终止。
    /// </summary>
    AbortRequested = 128;
    /// <summary>
    ///   线程状态包括  和线程现在出现故障，但其状态不发生更改到 。
    /// </summary>
    Aborted = 256;
  end;


  //-------------namespace: System----------------
  /// <summary>
  ///   指定对象的类型。
  /// </summary>
  [DNTypeName('System.TypeCode')]
  DNTypeCode = type Integer;
  DNTypeCodeHelper = record helper for DNTypeCode
  public const
    /// <summary>
    ///   一个空引用。
    /// </summary>
    Empty = 0;
    /// <summary>
    ///   常规类型，表示未显式由另一个表示任何引用或值类型。
    /// </summary>
    Object_ = 1;
    /// <summary>
    ///   数据库 null （列） 值。
    /// </summary>
    DBNull = 2;
    /// <summary>
    ///   表示布尔值的简单类型或。
    /// </summary>
    Boolean = 3;
    /// <summary>
    ///   表示其值介于 0 和 65535 之间的无符号的 16 位整数的整型。
    ///               可能值的一套类型对应于 Unicode 字符集。
    /// </summary>
    Char = 4;
    /// <summary>
    ///   整型，表示签名值介于-128 和 127 之间的 8 位整数。
    /// </summary>
    SByte = 5;
    /// <summary>
    ///   表示无符号的 8 位整数，介于 0 和 255 之间的值与整数类型。
    /// </summary>
    Byte = 6;
    /// <summary>
    ///   整型，表示有符号 16 位整数的值介于-32768 到 32767 之间。
    /// </summary>
    Int16 = 7;
    /// <summary>
    ///   表示其值介于 0 和 65535 之间的无符号的 16 位整数的整型。
    /// </summary>
    UInt16 = 8;
    /// <summary>
    ///   整型，表示签名，32 位整数，其值介于-2147483648 和 2147483647 之间。
    /// </summary>
    Int32 = 9;
    /// <summary>
    ///   表示无符号的 32 位整数，介于 0 与 4294967295 之间的值与整数类型。
    /// </summary>
    UInt32 = 10;
    /// <summary>
    ///   整型，表示签名值介于-9223372036854775808 到 9223372036854775807 之间的 64 位整数。
    /// </summary>
    Int64 = 11;
    /// <summary>
    ///   表示值介于 0 到 18446744073709551615 之间的 64 位无符号的整数的整型。
    /// </summary>
    UInt64 = 12;
    /// <summary>
    ///   浮点型，表示从大约 1.5 x 10 范围内的值-45到 3.4 x 10 38为 7 位精度。
    /// </summary>
    Single = 13;
    /// <summary>
    ///   浮点型，表示从大约 5.0 x 10 范围内的值-324到 1.7 x 10 308与 15-16 位数的精度。
    /// </summary>
    Double = 14;
    /// <summary>
    ///   表示从 1.0 x 10 范围内的值的简单类型-28大约 7.9 x 10 28具有 28-29 个有效数字。
    /// </summary>
    Decimal = 15;
    /// <summary>
    ///   表示日期和时间值的类型。
    /// </summary>
    DateTime = 16;
    /// <summary>
    ///   表示 Unicode 字符字符串的密封的类类型。
    /// </summary>
    String_ = 18;
  end;




type

{ declares }

  DNObject = interface; // System.Object
  DNRegistry = interface; // type: Microsoft.Win32.Registry, namespace: Microsoft.Win32
  DN_AppDomain = interface; // type: System._AppDomain, namespace: System
  DNActivationContext = interface; // type: System.ActivationContext, namespace: System
  DNActivator = interface; // type: System.Activator, namespace: System
  DNAppContext = interface; // type: System.AppContext, namespace: System
  DNAppDomainSetup = interface; // type: System.AppDomainSetup, namespace: System
  DNApplicationId = interface; // type: System.ApplicationId, namespace: System
  DNApplicationIdentity = interface; // type: System.ApplicationIdentity, namespace: System
  DNArray = interface; // type: System.Array, namespace: System
  DNAttribute = interface; // type: System.Attribute, namespace: System
  DNAttributeUsageAttribute = interface; // type: System.AttributeUsageAttribute, namespace: System
  DNCLSCompliantAttribute = interface; // type: System.CLSCompliantAttribute, namespace: System
  DNContextStaticAttribute = interface; // type: System.ContextStaticAttribute, namespace: System
  DNSuppressMessageAttribute = interface; // type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNConditionalAttribute = interface; // type: System.Diagnostics.ConditionalAttribute, namespace: System.Diagnostics
  DNContractAbbreviatorAttribute = interface; // type: System.Diagnostics.Contracts.ContractAbbreviatorAttribute, namespace: System.Diagnostics.Contracts
  DNContractArgumentValidatorAttribute = interface; // type: System.Diagnostics.Contracts.ContractArgumentValidatorAttribute, namespace: System.Diagnostics.Contracts
  DNContractClassAttribute = interface; // type: System.Diagnostics.Contracts.ContractClassAttribute, namespace: System.Diagnostics.Contracts
  DNContractClassForAttribute = interface; // type: System.Diagnostics.Contracts.ContractClassForAttribute, namespace: System.Diagnostics.Contracts
  DNContractInvariantMethodAttribute = interface; // type: System.Diagnostics.Contracts.ContractInvariantMethodAttribute, namespace: System.Diagnostics.Contracts
  DNContractOptionAttribute = interface; // type: System.Diagnostics.Contracts.ContractOptionAttribute, namespace: System.Diagnostics.Contracts
  DNContractPublicPropertyNameAttribute = interface; // type: System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute, namespace: System.Diagnostics.Contracts
  DNContractReferenceAssemblyAttribute = interface; // type: System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute, namespace: System.Diagnostics.Contracts
  DNContractRuntimeIgnoredAttribute = interface; // type: System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute, namespace: System.Diagnostics.Contracts
  DNContractVerificationAttribute = interface; // type: System.Diagnostics.Contracts.ContractVerificationAttribute, namespace: System.Diagnostics.Contracts
  DNPureAttribute = interface; // type: System.Diagnostics.Contracts.PureAttribute, namespace: System.Diagnostics.Contracts
  DNDebuggableAttribute = interface; // type: System.Diagnostics.DebuggableAttribute, namespace: System.Diagnostics
  DNDebuggerBrowsableAttribute = interface; // type: System.Diagnostics.DebuggerBrowsableAttribute, namespace: System.Diagnostics
  DNDebuggerDisplayAttribute = interface; // type: System.Diagnostics.DebuggerDisplayAttribute, namespace: System.Diagnostics
  DNDebuggerHiddenAttribute = interface; // type: System.Diagnostics.DebuggerHiddenAttribute, namespace: System.Diagnostics
  DNDebuggerNonUserCodeAttribute = interface; // type: System.Diagnostics.DebuggerNonUserCodeAttribute, namespace: System.Diagnostics
  DNDebuggerStepperBoundaryAttribute = interface; // type: System.Diagnostics.DebuggerStepperBoundaryAttribute, namespace: System.Diagnostics
  DNDebuggerStepThroughAttribute = interface; // type: System.Diagnostics.DebuggerStepThroughAttribute, namespace: System.Diagnostics
  DNDebuggerTypeProxyAttribute = interface; // type: System.Diagnostics.DebuggerTypeProxyAttribute, namespace: System.Diagnostics
  DNDebuggerVisualizerAttribute = interface; // type: System.Diagnostics.DebuggerVisualizerAttribute, namespace: System.Diagnostics
  DNEventAttribute = interface; // type: System.Diagnostics.Tracing.EventAttribute, namespace: System.Diagnostics.Tracing
  DNEventDataAttribute = interface; // type: System.Diagnostics.Tracing.EventDataAttribute, namespace: System.Diagnostics.Tracing
  DNEventFieldAttribute = interface; // type: System.Diagnostics.Tracing.EventFieldAttribute, namespace: System.Diagnostics.Tracing
  DNEventIgnoreAttribute = interface; // type: System.Diagnostics.Tracing.EventIgnoreAttribute, namespace: System.Diagnostics.Tracing
  DNEventSourceAttribute = interface; // type: System.Diagnostics.Tracing.EventSourceAttribute, namespace: System.Diagnostics.Tracing
  DNNonEventAttribute = interface; // type: System.Diagnostics.Tracing.NonEventAttribute, namespace: System.Diagnostics.Tracing
  DNFlagsAttribute = interface; // type: System.FlagsAttribute, namespace: System
  DNLoaderOptimizationAttribute = interface; // type: System.LoaderOptimizationAttribute, namespace: System
  DNMTAThreadAttribute = interface; // type: System.MTAThreadAttribute, namespace: System
  DNNonSerializedAttribute = interface; // type: System.NonSerializedAttribute, namespace: System
  DNObsoleteAttribute = interface; // type: System.ObsoleteAttribute, namespace: System
  DNParamArrayAttribute = interface; // type: System.ParamArrayAttribute, namespace: System
  DNAssemblyAlgorithmIdAttribute = interface; // type: System.Reflection.AssemblyAlgorithmIdAttribute, namespace: System.Reflection
  DNAssemblyCompanyAttribute = interface; // type: System.Reflection.AssemblyCompanyAttribute, namespace: System.Reflection
  DNAssemblyConfigurationAttribute = interface; // type: System.Reflection.AssemblyConfigurationAttribute, namespace: System.Reflection
  DNAssemblyCopyrightAttribute = interface; // type: System.Reflection.AssemblyCopyrightAttribute, namespace: System.Reflection
  DNAssemblyCultureAttribute = interface; // type: System.Reflection.AssemblyCultureAttribute, namespace: System.Reflection
  DNAssemblyDefaultAliasAttribute = interface; // type: System.Reflection.AssemblyDefaultAliasAttribute, namespace: System.Reflection
  DNAssemblyDelaySignAttribute = interface; // type: System.Reflection.AssemblyDelaySignAttribute, namespace: System.Reflection
  DNAssemblyDescriptionAttribute = interface; // type: System.Reflection.AssemblyDescriptionAttribute, namespace: System.Reflection
  DNAssemblyFileVersionAttribute = interface; // type: System.Reflection.AssemblyFileVersionAttribute, namespace: System.Reflection
  DNAssemblyFlagsAttribute = interface; // type: System.Reflection.AssemblyFlagsAttribute, namespace: System.Reflection
  DNAssemblyInformationalVersionAttribute = interface; // type: System.Reflection.AssemblyInformationalVersionAttribute, namespace: System.Reflection
  DNAssemblyKeyFileAttribute = interface; // type: System.Reflection.AssemblyKeyFileAttribute, namespace: System.Reflection
  DNAssemblyKeyNameAttribute = interface; // type: System.Reflection.AssemblyKeyNameAttribute, namespace: System.Reflection
  DNAssemblyMetadataAttribute = interface; // type: System.Reflection.AssemblyMetadataAttribute, namespace: System.Reflection
  DNAssemblyProductAttribute = interface; // type: System.Reflection.AssemblyProductAttribute, namespace: System.Reflection
  DNAssemblySignatureKeyAttribute = interface; // type: System.Reflection.AssemblySignatureKeyAttribute, namespace: System.Reflection
  DNAssemblyTitleAttribute = interface; // type: System.Reflection.AssemblyTitleAttribute, namespace: System.Reflection
  DNAssemblyTrademarkAttribute = interface; // type: System.Reflection.AssemblyTrademarkAttribute, namespace: System.Reflection
  DNAssemblyVersionAttribute = interface; // type: System.Reflection.AssemblyVersionAttribute, namespace: System.Reflection
  DNDefaultMemberAttribute = interface; // type: System.Reflection.DefaultMemberAttribute, namespace: System.Reflection
  DNObfuscateAssemblyAttribute = interface; // type: System.Reflection.ObfuscateAssemblyAttribute, namespace: System.Reflection
  DNObfuscationAttribute = interface; // type: System.Reflection.ObfuscationAttribute, namespace: System.Reflection
  DNNeutralResourcesLanguageAttribute = interface; // type: System.Resources.NeutralResourcesLanguageAttribute, namespace: System.Resources
  DNSatelliteContractVersionAttribute = interface; // type: System.Resources.SatelliteContractVersionAttribute, namespace: System.Resources
  DNAssemblyTargetedPatchBandAttribute = interface; // type: System.Runtime.AssemblyTargetedPatchBandAttribute, namespace: System.Runtime
  DNAccessedThroughPropertyAttribute = interface; // type: System.Runtime.CompilerServices.AccessedThroughPropertyAttribute, namespace: System.Runtime.CompilerServices
  DNCallerFilePathAttribute = interface; // type: System.Runtime.CompilerServices.CallerFilePathAttribute, namespace: System.Runtime.CompilerServices
  DNCallerLineNumberAttribute = interface; // type: System.Runtime.CompilerServices.CallerLineNumberAttribute, namespace: System.Runtime.CompilerServices
  DNCallerMemberNameAttribute = interface; // type: System.Runtime.CompilerServices.CallerMemberNameAttribute, namespace: System.Runtime.CompilerServices
  DNCompilationRelaxationsAttribute = interface; // type: System.Runtime.CompilerServices.CompilationRelaxationsAttribute, namespace: System.Runtime.CompilerServices
  DNCompilerGeneratedAttribute = interface; // type: System.Runtime.CompilerServices.CompilerGeneratedAttribute, namespace: System.Runtime.CompilerServices
  DNCompilerGlobalScopeAttribute = interface; // type: System.Runtime.CompilerServices.CompilerGlobalScopeAttribute, namespace: System.Runtime.CompilerServices
  DNCustomConstantAttribute = interface; // type: System.Runtime.CompilerServices.CustomConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDateTimeConstantAttribute = interface; // type: System.Runtime.CompilerServices.DateTimeConstantAttribute, namespace: System.Runtime.CompilerServices
  DNIDispatchConstantAttribute = interface; // type: System.Runtime.CompilerServices.IDispatchConstantAttribute, namespace: System.Runtime.CompilerServices
  DNIUnknownConstantAttribute = interface; // type: System.Runtime.CompilerServices.IUnknownConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDecimalConstantAttribute = interface; // type: System.Runtime.CompilerServices.DecimalConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDefaultDependencyAttribute = interface; // type: System.Runtime.CompilerServices.DefaultDependencyAttribute, namespace: System.Runtime.CompilerServices
  DNDependencyAttribute = interface; // type: System.Runtime.CompilerServices.DependencyAttribute, namespace: System.Runtime.CompilerServices
  DNDisablePrivateReflectionAttribute = interface; // type: System.Runtime.CompilerServices.DisablePrivateReflectionAttribute, namespace: System.Runtime.CompilerServices
  DNDiscardableAttribute = interface; // type: System.Runtime.CompilerServices.DiscardableAttribute, namespace: System.Runtime.CompilerServices
  DNExtensionAttribute = interface; // type: System.Runtime.CompilerServices.ExtensionAttribute, namespace: System.Runtime.CompilerServices
  DNFixedAddressValueTypeAttribute = interface; // type: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute, namespace: System.Runtime.CompilerServices
  DNFixedBufferAttribute = interface; // type: System.Runtime.CompilerServices.FixedBufferAttribute, namespace: System.Runtime.CompilerServices
  DNHasCopySemanticsAttribute = interface; // type: System.Runtime.CompilerServices.HasCopySemanticsAttribute, namespace: System.Runtime.CompilerServices
  DNIndexerNameAttribute = interface; // type: System.Runtime.CompilerServices.IndexerNameAttribute, namespace: System.Runtime.CompilerServices
  DNInternalsVisibleToAttribute = interface; // type: System.Runtime.CompilerServices.InternalsVisibleToAttribute, namespace: System.Runtime.CompilerServices
  DNIsByRefLikeAttribute = interface; // type: System.Runtime.CompilerServices.IsByRefLikeAttribute, namespace: System.Runtime.CompilerServices
  DNIsReadOnlyAttribute = interface; // type: System.Runtime.CompilerServices.IsReadOnlyAttribute, namespace: System.Runtime.CompilerServices
  DNMethodImplAttribute = interface; // type: System.Runtime.CompilerServices.MethodImplAttribute, namespace: System.Runtime.CompilerServices
  DNNativeCppClassAttribute = interface; // type: System.Runtime.CompilerServices.NativeCppClassAttribute, namespace: System.Runtime.CompilerServices
  DNReferenceAssemblyAttribute = interface; // type: System.Runtime.CompilerServices.ReferenceAssemblyAttribute, namespace: System.Runtime.CompilerServices
  DNRequiredAttributeAttribute = interface; // type: System.Runtime.CompilerServices.RequiredAttributeAttribute, namespace: System.Runtime.CompilerServices
  DNRuntimeCompatibilityAttribute = interface; // type: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute, namespace: System.Runtime.CompilerServices
  DNScopelessEnumAttribute = interface; // type: System.Runtime.CompilerServices.ScopelessEnumAttribute, namespace: System.Runtime.CompilerServices
  DNSpecialNameAttribute = interface; // type: System.Runtime.CompilerServices.SpecialNameAttribute, namespace: System.Runtime.CompilerServices
  DNStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.StateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNAsyncStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.AsyncStateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNIteratorStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.IteratorStateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNStringFreezingAttribute = interface; // type: System.Runtime.CompilerServices.StringFreezingAttribute, namespace: System.Runtime.CompilerServices
  DNSuppressIldasmAttribute = interface; // type: System.Runtime.CompilerServices.SuppressIldasmAttribute, namespace: System.Runtime.CompilerServices
  DNTupleElementNamesAttribute = interface; // type: System.Runtime.CompilerServices.TupleElementNamesAttribute, namespace: System.Runtime.CompilerServices
  DNTypeForwardedFromAttribute = interface; // type: System.Runtime.CompilerServices.TypeForwardedFromAttribute, namespace: System.Runtime.CompilerServices
  DNTypeForwardedToAttribute = interface; // type: System.Runtime.CompilerServices.TypeForwardedToAttribute, namespace: System.Runtime.CompilerServices
  DNUnsafeValueTypeAttribute = interface; // type: System.Runtime.CompilerServices.UnsafeValueTypeAttribute, namespace: System.Runtime.CompilerServices
  DNPrePrepareMethodAttribute = interface; // type: System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute, namespace: System.Runtime.ConstrainedExecution
  DNReliabilityContractAttribute = interface; // type: System.Runtime.ConstrainedExecution.ReliabilityContractAttribute, namespace: System.Runtime.ConstrainedExecution
  DNHandleProcessCorruptedStateExceptionsAttribute = interface; // type: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute, namespace: System.Runtime.ExceptionServices
  DNAllowReversePInvokeCallsAttribute = interface; // type: System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute, namespace: System.Runtime.InteropServices
  DNAutomationProxyAttribute = interface; // type: System.Runtime.InteropServices.AutomationProxyAttribute, namespace: System.Runtime.InteropServices
  DNBestFitMappingAttribute = interface; // type: System.Runtime.InteropServices.BestFitMappingAttribute, namespace: System.Runtime.InteropServices
  DNClassInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ClassInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNCoClassAttribute = interface; // type: System.Runtime.InteropServices.CoClassAttribute, namespace: System.Runtime.InteropServices
  DNComAliasNameAttribute = interface; // type: System.Runtime.InteropServices.ComAliasNameAttribute, namespace: System.Runtime.InteropServices
  DNComCompatibleVersionAttribute = interface; // type: System.Runtime.InteropServices.ComCompatibleVersionAttribute, namespace: System.Runtime.InteropServices
  DNComConversionLossAttribute = interface; // type: System.Runtime.InteropServices.ComConversionLossAttribute, namespace: System.Runtime.InteropServices
  DNComDefaultInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ComDefaultInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNComEventInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ComEventInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNComImportAttribute = interface; // type: System.Runtime.InteropServices.ComImportAttribute, namespace: System.Runtime.InteropServices
  DNComRegisterFunctionAttribute = interface; // type: System.Runtime.InteropServices.ComRegisterFunctionAttribute, namespace: System.Runtime.InteropServices
  DNComSourceInterfacesAttribute = interface; // type: System.Runtime.InteropServices.ComSourceInterfacesAttribute, namespace: System.Runtime.InteropServices
  DNComUnregisterFunctionAttribute = interface; // type: System.Runtime.InteropServices.ComUnregisterFunctionAttribute, namespace: System.Runtime.InteropServices
  DNComVisibleAttribute = interface; // type: System.Runtime.InteropServices.ComVisibleAttribute, namespace: System.Runtime.InteropServices
  DNDefaultCharSetAttribute = interface; // type: System.Runtime.InteropServices.DefaultCharSetAttribute, namespace: System.Runtime.InteropServices
  DNDefaultDllImportSearchPathsAttribute = interface; // type: System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute, namespace: System.Runtime.InteropServices
  DNDispIdAttribute = interface; // type: System.Runtime.InteropServices.DispIdAttribute, namespace: System.Runtime.InteropServices
  DNDllImportAttribute = interface; // type: System.Runtime.InteropServices.DllImportAttribute, namespace: System.Runtime.InteropServices
  DNFieldOffsetAttribute = interface; // type: System.Runtime.InteropServices.FieldOffsetAttribute, namespace: System.Runtime.InteropServices
  DNGuidAttribute = interface; // type: System.Runtime.InteropServices.GuidAttribute, namespace: System.Runtime.InteropServices
  DNIDispatchImplAttribute = interface; // type: System.Runtime.InteropServices.IDispatchImplAttribute, namespace: System.Runtime.InteropServices
  DNImportedFromTypeLibAttribute = interface; // type: System.Runtime.InteropServices.ImportedFromTypeLibAttribute, namespace: System.Runtime.InteropServices
  DNInAttribute = interface; // type: System.Runtime.InteropServices.InAttribute, namespace: System.Runtime.InteropServices
  DNInterfaceTypeAttribute = interface; // type: System.Runtime.InteropServices.InterfaceTypeAttribute, namespace: System.Runtime.InteropServices
  DNLCIDConversionAttribute = interface; // type: System.Runtime.InteropServices.LCIDConversionAttribute, namespace: System.Runtime.InteropServices
  DNManagedToNativeComInteropStubAttribute = interface; // type: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute, namespace: System.Runtime.InteropServices
  DNMarshalAsAttribute = interface; // type: System.Runtime.InteropServices.MarshalAsAttribute, namespace: System.Runtime.InteropServices
  DNOptionalAttribute = interface; // type: System.Runtime.InteropServices.OptionalAttribute, namespace: System.Runtime.InteropServices
  DNOutAttribute = interface; // type: System.Runtime.InteropServices.OutAttribute, namespace: System.Runtime.InteropServices
  DNPreserveSigAttribute = interface; // type: System.Runtime.InteropServices.PreserveSigAttribute, namespace: System.Runtime.InteropServices
  DNPrimaryInteropAssemblyAttribute = interface; // type: System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute, namespace: System.Runtime.InteropServices
  DNProgIdAttribute = interface; // type: System.Runtime.InteropServices.ProgIdAttribute, namespace: System.Runtime.InteropServices
  DNSetWin32ContextInIDispatchAttribute = interface; // type: System.Runtime.InteropServices.SetWin32ContextInIDispatchAttribute, namespace: System.Runtime.InteropServices
  DNStructLayoutAttribute = interface; // type: System.Runtime.InteropServices.StructLayoutAttribute, namespace: System.Runtime.InteropServices
  DNTypeIdentifierAttribute = interface; // type: System.Runtime.InteropServices.TypeIdentifierAttribute, namespace: System.Runtime.InteropServices
  DNTypeLibFuncAttribute = interface; // type: System.Runtime.InteropServices.TypeLibFuncAttribute, namespace: System.Runtime.InteropServices
  DNTypeLibImportClassAttribute = interface; // type: System.Runtime.InteropServices.TypeLibImportClassAttribute, namespace: System.Runtime.InteropServices
  DNTypeLibTypeAttribute = interface; // type: System.Runtime.InteropServices.TypeLibTypeAttribute, namespace: System.Runtime.InteropServices
  DNTypeLibVarAttribute = interface; // type: System.Runtime.InteropServices.TypeLibVarAttribute, namespace: System.Runtime.InteropServices
  DNTypeLibVersionAttribute = interface; // type: System.Runtime.InteropServices.TypeLibVersionAttribute, namespace: System.Runtime.InteropServices
  DNUnmanagedFunctionPointerAttribute = interface; // type: System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute, namespace: System.Runtime.InteropServices
  DNDefaultInterfaceAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNInterfaceImplementedInVersionAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNReadOnlyArrayAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNReturnValueNameAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNWriteOnlyArrayAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.WriteOnlyArrayAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNContextAttribute = interface; // type: System.Runtime.Remoting.Contexts.ContextAttribute, namespace: System.Runtime.Remoting.Contexts
  DNUrlAttribute = interface; // type: System.Runtime.Remoting.Activation.UrlAttribute, namespace: System.Runtime.Remoting.Activation
  DNSynchronizationAttribute = interface; // type: System.Runtime.Remoting.Contexts.SynchronizationAttribute, namespace: System.Runtime.Remoting.Contexts
  DNOneWayAttribute = interface; // type: System.Runtime.Remoting.Messaging.OneWayAttribute, namespace: System.Runtime.Remoting.Messaging
  DNSoapAttribute = interface; // type: System.Runtime.Remoting.Metadata.SoapAttribute, namespace: System.Runtime.Remoting.Metadata
  DNSoapFieldAttribute = interface; // type: System.Runtime.Remoting.Metadata.SoapFieldAttribute, namespace: System.Runtime.Remoting.Metadata
  DNSoapMethodAttribute = interface; // type: System.Runtime.Remoting.Metadata.SoapMethodAttribute, namespace: System.Runtime.Remoting.Metadata
  DNSoapParameterAttribute = interface; // type: System.Runtime.Remoting.Metadata.SoapParameterAttribute, namespace: System.Runtime.Remoting.Metadata
  DNSoapTypeAttribute = interface; // type: System.Runtime.Remoting.Metadata.SoapTypeAttribute, namespace: System.Runtime.Remoting.Metadata
  DNProxyAttribute = interface; // type: System.Runtime.Remoting.Proxies.ProxyAttribute, namespace: System.Runtime.Remoting.Proxies
  DNOnDeserializedAttribute = interface; // type: System.Runtime.Serialization.OnDeserializedAttribute, namespace: System.Runtime.Serialization
  DNOnDeserializingAttribute = interface; // type: System.Runtime.Serialization.OnDeserializingAttribute, namespace: System.Runtime.Serialization
  DNOnSerializedAttribute = interface; // type: System.Runtime.Serialization.OnSerializedAttribute, namespace: System.Runtime.Serialization
  DNOnSerializingAttribute = interface; // type: System.Runtime.Serialization.OnSerializingAttribute, namespace: System.Runtime.Serialization
  DNOptionalFieldAttribute = interface; // type: System.Runtime.Serialization.OptionalFieldAttribute, namespace: System.Runtime.Serialization
  DNTargetedPatchingOptOutAttribute = interface; // type: System.Runtime.TargetedPatchingOptOutAttribute, namespace: System.Runtime
  DNComponentGuaranteesAttribute = interface; // type: System.Runtime.Versioning.ComponentGuaranteesAttribute, namespace: System.Runtime.Versioning
  DNResourceConsumptionAttribute = interface; // type: System.Runtime.Versioning.ResourceConsumptionAttribute, namespace: System.Runtime.Versioning
  DNResourceExposureAttribute = interface; // type: System.Runtime.Versioning.ResourceExposureAttribute, namespace: System.Runtime.Versioning
  DNTargetFrameworkAttribute = interface; // type: System.Runtime.Versioning.TargetFrameworkAttribute, namespace: System.Runtime.Versioning
  DNAllowPartiallyTrustedCallersAttribute = interface; // type: System.Security.AllowPartiallyTrustedCallersAttribute, namespace: System.Security
  DNSecurityAttribute = interface; // type: System.Security.Permissions.SecurityAttribute, namespace: System.Security.Permissions
  DNCodeAccessSecurityAttribute = interface; // type: System.Security.Permissions.CodeAccessSecurityAttribute, namespace: System.Security.Permissions
  DNEnvironmentPermissionAttribute = interface; // type: System.Security.Permissions.EnvironmentPermissionAttribute, namespace: System.Security.Permissions
  DNFileDialogPermissionAttribute = interface; // type: System.Security.Permissions.FileDialogPermissionAttribute, namespace: System.Security.Permissions
  DNFileIOPermissionAttribute = interface; // type: System.Security.Permissions.FileIOPermissionAttribute, namespace: System.Security.Permissions
  DNGacIdentityPermissionAttribute = interface; // type: System.Security.Permissions.GacIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNHostProtectionAttribute = interface; // type: System.Security.Permissions.HostProtectionAttribute, namespace: System.Security.Permissions
  DNIsolatedStoragePermissionAttribute = interface; // type: System.Security.Permissions.IsolatedStoragePermissionAttribute, namespace: System.Security.Permissions
  DNIsolatedStorageFilePermissionAttribute = interface; // type: System.Security.Permissions.IsolatedStorageFilePermissionAttribute, namespace: System.Security.Permissions
  DNKeyContainerPermissionAttribute = interface; // type: System.Security.Permissions.KeyContainerPermissionAttribute, namespace: System.Security.Permissions
  DNPermissionSetAttribute = interface; // type: System.Security.Permissions.PermissionSetAttribute, namespace: System.Security.Permissions
  DNPrincipalPermissionAttribute = interface; // type: System.Security.Permissions.PrincipalPermissionAttribute, namespace: System.Security.Permissions
  DNPublisherIdentityPermissionAttribute = interface; // type: System.Security.Permissions.PublisherIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNReflectionPermissionAttribute = interface; // type: System.Security.Permissions.ReflectionPermissionAttribute, namespace: System.Security.Permissions
  DNRegistryPermissionAttribute = interface; // type: System.Security.Permissions.RegistryPermissionAttribute, namespace: System.Security.Permissions
  DNSecurityPermissionAttribute = interface; // type: System.Security.Permissions.SecurityPermissionAttribute, namespace: System.Security.Permissions
  DNSiteIdentityPermissionAttribute = interface; // type: System.Security.Permissions.SiteIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNStrongNameIdentityPermissionAttribute = interface; // type: System.Security.Permissions.StrongNameIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNUIPermissionAttribute = interface; // type: System.Security.Permissions.UIPermissionAttribute, namespace: System.Security.Permissions
  DNUrlIdentityPermissionAttribute = interface; // type: System.Security.Permissions.UrlIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNZoneIdentityPermissionAttribute = interface; // type: System.Security.Permissions.ZoneIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNSecurityCriticalAttribute = interface; // type: System.Security.SecurityCriticalAttribute, namespace: System.Security
  DNSecurityRulesAttribute = interface; // type: System.Security.SecurityRulesAttribute, namespace: System.Security
  DNSecuritySafeCriticalAttribute = interface; // type: System.Security.SecuritySafeCriticalAttribute, namespace: System.Security
  DNSecurityTransparentAttribute = interface; // type: System.Security.SecurityTransparentAttribute, namespace: System.Security
  DNSecurityTreatAsSafeAttribute = interface; // type: System.Security.SecurityTreatAsSafeAttribute, namespace: System.Security
  DNSuppressUnmanagedCodeSecurityAttribute = interface; // type: System.Security.SuppressUnmanagedCodeSecurityAttribute, namespace: System.Security
  DNUnverifiableCodeAttribute = interface; // type: System.Security.UnverifiableCodeAttribute, namespace: System.Security
  DNSerializableAttribute = interface; // type: System.SerializableAttribute, namespace: System
  DNSTAThreadAttribute = interface; // type: System.STAThreadAttribute, namespace: System
  DNThreadStaticAttribute = interface; // type: System.ThreadStaticAttribute, namespace: System
  DNBitConverter = interface; // type: System.BitConverter, namespace: System
  DNBuffer = interface; // type: System.Buffer, namespace: System
  DNCharEnumerator = interface; // type: System.CharEnumerator, namespace: System
  DNArrayList = interface; // type: System.Collections.ArrayList, namespace: System.Collections
  DNBitArray = interface; // type: System.Collections.BitArray, namespace: System.Collections
  DNCaseInsensitiveComparer = interface; // type: System.Collections.CaseInsensitiveComparer, namespace: System.Collections
  DNCaseInsensitiveHashCodeProvider = interface; // type: System.Collections.CaseInsensitiveHashCodeProvider, namespace: System.Collections
  DNCollectionBase = interface; // type: System.Collections.CollectionBase, namespace: System.Collections
  DNComparer = interface; // type: System.Collections.Comparer, namespace: System.Collections
  DNPartitioner = interface; // type: System.Collections.Concurrent.Partitioner, namespace: System.Collections.Concurrent
  DNDictionaryBase = interface; // type: System.Collections.DictionaryBase, namespace: System.Collections
  DNIComparer<T> = interface; // type: System.Collections.Generic.IComparer`1, namespace: System.Collections.Generic
  DNIEqualityComparer<T> = interface; // type: System.Collections.Generic.IEqualityComparer`1, namespace: System.Collections.Generic
  DNHashtable = interface; // type: System.Collections.Hashtable, namespace: System.Collections
  DNIComparer = interface; // type: System.Collections.IComparer, namespace: System.Collections
  DNIEnumerable = interface; // type: System.Collections.IEnumerable, namespace: System.Collections
  DNIEnumerable<T> = interface; // type: System.Collections.Generic.IEnumerable`1, namespace: System.Collections.Generic
  DNIProducerConsumerCollection<T> = interface; // type: System.Collections.Concurrent.IProducerConsumerCollection`1, namespace: System.Collections.Concurrent
  DNICollection<T> = interface; // type: System.Collections.Generic.ICollection`1, namespace: System.Collections.Generic
  DNIDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.IDictionary`2, namespace: System.Collections.Generic
  DNIList<T> = interface; // type: System.Collections.Generic.IList`1, namespace: System.Collections.Generic
  DNIReadOnlyCollection<T> = interface; // type: System.Collections.Generic.IReadOnlyCollection`1, namespace: System.Collections.Generic
  DNIReadOnlyDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.IReadOnlyDictionary`2, namespace: System.Collections.Generic
  DNIReadOnlyList<T> = interface; // type: System.Collections.Generic.IReadOnlyList`1, namespace: System.Collections.Generic
  DNICollection = interface; // type: System.Collections.ICollection, namespace: System.Collections
  DNIDictionary = interface; // type: System.Collections.IDictionary, namespace: System.Collections
  DNIList = interface; // type: System.Collections.IList, namespace: System.Collections
  DNIResourceReader = interface; // type: System.Resources.IResourceReader, namespace: System.Resources
  DNIEnumerator = interface; // type: System.Collections.IEnumerator, namespace: System.Collections
  DNIDictionaryEnumerator = interface; // type: System.Collections.IDictionaryEnumerator, namespace: System.Collections
  DNIEqualityComparer = interface; // type: System.Collections.IEqualityComparer, namespace: System.Collections
  DNIHashCodeProvider = interface; // type: System.Collections.IHashCodeProvider, namespace: System.Collections
  DNIStructuralComparable = interface; // type: System.Collections.IStructuralComparable, namespace: System.Collections
  DNIStructuralEquatable = interface; // type: System.Collections.IStructuralEquatable, namespace: System.Collections
  DNQueue = interface; // type: System.Collections.Queue, namespace: System.Collections
  DNReadOnlyCollectionBase = interface; // type: System.Collections.ReadOnlyCollectionBase, namespace: System.Collections
  DNAuthorizationRuleCollection = interface; // type: System.Security.AccessControl.AuthorizationRuleCollection, namespace: System.Security.AccessControl
  DNSortedList = interface; // type: System.Collections.SortedList, namespace: System.Collections
  DNStack = interface; // type: System.Collections.Stack, namespace: System.Collections
  DNStructuralComparisons = interface; // type: System.Collections.StructuralComparisons, namespace: System.Collections
  DNConsole = interface; // type: System.Console, namespace: System
  DNConvert = interface; // type: System.Convert, namespace: System
  DNDBNull = interface; // type: System.DBNull, namespace: System
  DNDelegate = interface; // type: System.Delegate, namespace: System
  DNMulticastDelegate = interface; // type: System.MulticastDelegate, namespace: System
  DNAction = interface; // type: System.Action, namespace: System
  DNAppDomainInitializer = interface; // type: System.AppDomainInitializer, namespace: System
  DNAssemblyLoadEventHandler = interface; // type: System.AssemblyLoadEventHandler, namespace: System
  DNAsyncCallback = interface; // type: System.AsyncCallback, namespace: System
  DNConsoleCancelEventHandler = interface; // type: System.ConsoleCancelEventHandler, namespace: System
  DNCrossAppDomainDelegate = interface; // type: System.CrossAppDomainDelegate, namespace: System
  DNEventHandler = interface; // type: System.EventHandler, namespace: System
  DNMemberFilter = interface; // type: System.Reflection.MemberFilter, namespace: System.Reflection
  DNModuleResolveEventHandler = interface; // type: System.Reflection.ModuleResolveEventHandler, namespace: System.Reflection
  DNTypeFilter = interface; // type: System.Reflection.TypeFilter, namespace: System.Reflection
  DNResolveEventHandler = interface; // type: System.ResolveEventHandler, namespace: System
  DNRuntimeHelpers_CleanupCode = interface; // type: System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode, namespace: System.Runtime.CompilerServices
  DNRuntimeHelpers_TryCode = interface; // type: System.Runtime.CompilerServices.RuntimeHelpers+TryCode, namespace: System.Runtime.CompilerServices
  DNObjectCreationDelegate = interface; // type: System.Runtime.InteropServices.ObjectCreationDelegate, namespace: System.Runtime.InteropServices
  DNCrossContextDelegate = interface; // type: System.Runtime.Remoting.Contexts.CrossContextDelegate, namespace: System.Runtime.Remoting.Contexts
  DNHeaderHandler = interface; // type: System.Runtime.Remoting.Messaging.HeaderHandler, namespace: System.Runtime.Remoting.Messaging
  DNMessageSurrogateFilter = interface; // type: System.Runtime.Remoting.Messaging.MessageSurrogateFilter, namespace: System.Runtime.Remoting.Messaging
  DNContextCallback = interface; // type: System.Threading.ContextCallback, namespace: System.Threading
  DNIOCompletionCallback = interface; // type: System.Threading.IOCompletionCallback, namespace: System.Threading
  DNParameterizedThreadStart = interface; // type: System.Threading.ParameterizedThreadStart, namespace: System.Threading
  DNSendOrPostCallback = interface; // type: System.Threading.SendOrPostCallback, namespace: System.Threading
  DNThreadStart = interface; // type: System.Threading.ThreadStart, namespace: System.Threading
  DNTimerCallback = interface; // type: System.Threading.TimerCallback, namespace: System.Threading
  DNWaitCallback = interface; // type: System.Threading.WaitCallback, namespace: System.Threading
  DNWaitOrTimerCallback = interface; // type: System.Threading.WaitOrTimerCallback, namespace: System.Threading
  DNUnhandledExceptionEventHandler = interface; // type: System.UnhandledExceptionEventHandler, namespace: System
  DNInternalActivationContextHelper = interface; // type: System.Deployment.Internal.InternalActivationContextHelper, namespace: System.Deployment.Internal
  DNInternalApplicationIdentityHelper = interface; // type: System.Deployment.Internal.InternalApplicationIdentityHelper, namespace: System.Deployment.Internal
  DNContract = interface; // type: System.Diagnostics.Contracts.Contract, namespace: System.Diagnostics.Contracts
  DNInternal_ContractHelper = interface; // type: System.Diagnostics.Contracts.Internal.ContractHelper, namespace: System.Diagnostics.Contracts.Internal
  DNDebugger = interface; // type: System.Diagnostics.Debugger, namespace: System.Diagnostics
  DNStackFrame = interface; // type: System.Diagnostics.StackFrame, namespace: System.Diagnostics
  DNStackTrace = interface; // type: System.Diagnostics.StackTrace, namespace: System.Diagnostics
  DNISymbolBinder = interface; // type: System.Diagnostics.SymbolStore.ISymbolBinder, namespace: System.Diagnostics.SymbolStore
  DNISymbolBinder1 = interface; // type: System.Diagnostics.SymbolStore.ISymbolBinder1, namespace: System.Diagnostics.SymbolStore
  DNISymbolDocument = interface; // type: System.Diagnostics.SymbolStore.ISymbolDocument, namespace: System.Diagnostics.SymbolStore
  DNISymbolDocumentWriter = interface; // type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter, namespace: System.Diagnostics.SymbolStore
  DNISymbolMethod = interface; // type: System.Diagnostics.SymbolStore.ISymbolMethod, namespace: System.Diagnostics.SymbolStore
  DNISymbolNamespace = interface; // type: System.Diagnostics.SymbolStore.ISymbolNamespace, namespace: System.Diagnostics.SymbolStore
  DNISymbolReader = interface; // type: System.Diagnostics.SymbolStore.ISymbolReader, namespace: System.Diagnostics.SymbolStore
  DNISymbolScope = interface; // type: System.Diagnostics.SymbolStore.ISymbolScope, namespace: System.Diagnostics.SymbolStore
  DNISymbolVariable = interface; // type: System.Diagnostics.SymbolStore.ISymbolVariable, namespace: System.Diagnostics.SymbolStore
  DNISymbolWriter = interface; // type: System.Diagnostics.SymbolStore.ISymbolWriter, namespace: System.Diagnostics.SymbolStore
  DNSymDocumentType = interface; // type: System.Diagnostics.SymbolStore.SymDocumentType, namespace: System.Diagnostics.SymbolStore
  DNSymLanguageType = interface; // type: System.Diagnostics.SymbolStore.SymLanguageType, namespace: System.Diagnostics.SymbolStore
  DNSymLanguageVendor = interface; // type: System.Diagnostics.SymbolStore.SymLanguageVendor, namespace: System.Diagnostics.SymbolStore
  DNEventListener = interface; // type: System.Diagnostics.Tracing.EventListener, namespace: System.Diagnostics.Tracing
  DNEventSource = interface; // type: System.Diagnostics.Tracing.EventSource, namespace: System.Diagnostics.Tracing
  DNEnvironment = interface; // type: System.Environment, namespace: System
  DNEventArgs = interface; // type: System.EventArgs, namespace: System
  DNAssemblyLoadEventArgs = interface; // type: System.AssemblyLoadEventArgs, namespace: System
  DNConsoleCancelEventArgs = interface; // type: System.ConsoleCancelEventArgs, namespace: System
  DNContractFailedEventArgs = interface; // type: System.Diagnostics.Contracts.ContractFailedEventArgs, namespace: System.Diagnostics.Contracts
  DNEventCommandEventArgs = interface; // type: System.Diagnostics.Tracing.EventCommandEventArgs, namespace: System.Diagnostics.Tracing
  DNEventSourceCreatedEventArgs = interface; // type: System.Diagnostics.Tracing.EventSourceCreatedEventArgs, namespace: System.Diagnostics.Tracing
  DNEventWrittenEventArgs = interface; // type: System.Diagnostics.Tracing.EventWrittenEventArgs, namespace: System.Diagnostics.Tracing
  DNResolveEventArgs = interface; // type: System.ResolveEventArgs, namespace: System
  DNFirstChanceExceptionEventArgs = interface; // type: System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs, namespace: System.Runtime.ExceptionServices
  DNDesignerNamespaceResolveEventArgs = interface; // type: System.Runtime.InteropServices.WindowsRuntime.DesignerNamespaceResolveEventArgs, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNNamespaceResolveEventArgs = interface; // type: System.Runtime.InteropServices.WindowsRuntime.NamespaceResolveEventArgs, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNSafeSerializationEventArgs = interface; // type: System.Runtime.Serialization.SafeSerializationEventArgs, namespace: System.Runtime.Serialization
  DNUnobservedTaskExceptionEventArgs = interface; // type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs, namespace: System.Threading.Tasks
  DNUnhandledExceptionEventArgs = interface; // type: System.UnhandledExceptionEventArgs, namespace: System
  DNException = interface; // type: System.Exception, namespace: System
  DNAggregateException = interface; // type: System.AggregateException, namespace: System
  DNApplicationException = interface; // type: System.ApplicationException, namespace: System
  DNInvalidFilterCriteriaException = interface; // type: System.Reflection.InvalidFilterCriteriaException, namespace: System.Reflection
  DNTargetException = interface; // type: System.Reflection.TargetException, namespace: System.Reflection
  DNTargetInvocationException = interface; // type: System.Reflection.TargetInvocationException, namespace: System.Reflection
  DNTargetParameterCountException = interface; // type: System.Reflection.TargetParameterCountException, namespace: System.Reflection
  DNWaitHandleCannotBeOpenedException = interface; // type: System.Threading.WaitHandleCannotBeOpenedException, namespace: System.Threading
  DNEventSourceException = interface; // type: System.Diagnostics.Tracing.EventSourceException, namespace: System.Diagnostics.Tracing
  DNInvalidTimeZoneException = interface; // type: System.InvalidTimeZoneException, namespace: System
  DNIsolatedStorageException = interface; // type: System.IO.IsolatedStorage.IsolatedStorageException, namespace: System.IO.IsolatedStorage
  DNRuntimeWrappedException = interface; // type: System.Runtime.CompilerServices.RuntimeWrappedException, namespace: System.Runtime.CompilerServices
  DNSystemException = interface; // type: System.SystemException, namespace: System
  DNAccessViolationException = interface; // type: System.AccessViolationException, namespace: System
  DNAppDomainUnloadedException = interface; // type: System.AppDomainUnloadedException, namespace: System
  DNArgumentException = interface; // type: System.ArgumentException, namespace: System
  DNArgumentNullException = interface; // type: System.ArgumentNullException, namespace: System
  DNArgumentOutOfRangeException = interface; // type: System.ArgumentOutOfRangeException, namespace: System
  DNDuplicateWaitObjectException = interface; // type: System.DuplicateWaitObjectException, namespace: System
  DNCultureNotFoundException = interface; // type: System.Globalization.CultureNotFoundException, namespace: System.Globalization
  DNDecoderFallbackException = interface; // type: System.Text.DecoderFallbackException, namespace: System.Text
  DNEncoderFallbackException = interface; // type: System.Text.EncoderFallbackException, namespace: System.Text
  DNArithmeticException = interface; // type: System.ArithmeticException, namespace: System
  DNDivideByZeroException = interface; // type: System.DivideByZeroException, namespace: System
  DNNotFiniteNumberException = interface; // type: System.NotFiniteNumberException, namespace: System
  DNOverflowException = interface; // type: System.OverflowException, namespace: System
  DNArrayTypeMismatchException = interface; // type: System.ArrayTypeMismatchException, namespace: System
  DNBadImageFormatException = interface; // type: System.BadImageFormatException, namespace: System
  DNCannotUnloadAppDomainException = interface; // type: System.CannotUnloadAppDomainException, namespace: System
  DNKeyNotFoundException = interface; // type: System.Collections.Generic.KeyNotFoundException, namespace: System.Collections.Generic
  DNContextMarshalException = interface; // type: System.ContextMarshalException, namespace: System
  DNDataMisalignedException = interface; // type: System.DataMisalignedException, namespace: System
  DNExecutionEngineException = interface; // type: System.ExecutionEngineException, namespace: System
  DNFormatException = interface; // type: System.FormatException, namespace: System
  DNCustomAttributeFormatException = interface; // type: System.Reflection.CustomAttributeFormatException, namespace: System.Reflection
  DNIndexOutOfRangeException = interface; // type: System.IndexOutOfRangeException, namespace: System
  DNInsufficientExecutionStackException = interface; // type: System.InsufficientExecutionStackException, namespace: System
  DNInvalidCastException = interface; // type: System.InvalidCastException, namespace: System
  DNInvalidOperationException = interface; // type: System.InvalidOperationException, namespace: System
  DNObjectDisposedException = interface; // type: System.ObjectDisposedException, namespace: System
  DNInvalidProgramException = interface; // type: System.InvalidProgramException, namespace: System
  DNIOException = interface; // type: System.IO.IOException, namespace: System.IO
  DNDirectoryNotFoundException = interface; // type: System.IO.DirectoryNotFoundException, namespace: System.IO
  DNDriveNotFoundException = interface; // type: System.IO.DriveNotFoundException, namespace: System.IO
  DNEndOfStreamException = interface; // type: System.IO.EndOfStreamException, namespace: System.IO
  DNFileLoadException = interface; // type: System.IO.FileLoadException, namespace: System.IO
  DNFileNotFoundException = interface; // type: System.IO.FileNotFoundException, namespace: System.IO
  DNPathTooLongException = interface; // type: System.IO.PathTooLongException, namespace: System.IO
  DNMemberAccessException = interface; // type: System.MemberAccessException, namespace: System
  DNFieldAccessException = interface; // type: System.FieldAccessException, namespace: System
  DNMethodAccessException = interface; // type: System.MethodAccessException, namespace: System
  DNMissingMemberException = interface; // type: System.MissingMemberException, namespace: System
  DNMissingFieldException = interface; // type: System.MissingFieldException, namespace: System
  DNMissingMethodException = interface; // type: System.MissingMethodException, namespace: System
  DNMulticastNotSupportedException = interface; // type: System.MulticastNotSupportedException, namespace: System
  DNNotImplementedException = interface; // type: System.NotImplementedException, namespace: System
  DNNotSupportedException = interface; // type: System.NotSupportedException, namespace: System
  DNPlatformNotSupportedException = interface; // type: System.PlatformNotSupportedException, namespace: System
  DNNullReferenceException = interface; // type: System.NullReferenceException, namespace: System
  DNOperationCanceledException = interface; // type: System.OperationCanceledException, namespace: System
  DNTaskCanceledException = interface; // type: System.Threading.Tasks.TaskCanceledException, namespace: System.Threading.Tasks
  DNOutOfMemoryException = interface; // type: System.OutOfMemoryException, namespace: System
  DNInsufficientMemoryException = interface; // type: System.InsufficientMemoryException, namespace: System
  DNRankException = interface; // type: System.RankException, namespace: System
  DNAmbiguousMatchException = interface; // type: System.Reflection.AmbiguousMatchException, namespace: System.Reflection
  DNReflectionTypeLoadException = interface; // type: System.Reflection.ReflectionTypeLoadException, namespace: System.Reflection
  DNMissingManifestResourceException = interface; // type: System.Resources.MissingManifestResourceException, namespace: System.Resources
  DNMissingSatelliteAssemblyException = interface; // type: System.Resources.MissingSatelliteAssemblyException, namespace: System.Resources
  DNExternalException = interface; // type: System.Runtime.InteropServices.ExternalException, namespace: System.Runtime.InteropServices
  DNCOMException = interface; // type: System.Runtime.InteropServices.COMException, namespace: System.Runtime.InteropServices
  DNSEHException = interface; // type: System.Runtime.InteropServices.SEHException, namespace: System.Runtime.InteropServices
  DNInvalidComObjectException = interface; // type: System.Runtime.InteropServices.InvalidComObjectException, namespace: System.Runtime.InteropServices
  DNInvalidOleVariantTypeException = interface; // type: System.Runtime.InteropServices.InvalidOleVariantTypeException, namespace: System.Runtime.InteropServices
  DNMarshalDirectiveException = interface; // type: System.Runtime.InteropServices.MarshalDirectiveException, namespace: System.Runtime.InteropServices
  DNSafeArrayRankMismatchException = interface; // type: System.Runtime.InteropServices.SafeArrayRankMismatchException, namespace: System.Runtime.InteropServices
  DNSafeArrayTypeMismatchException = interface; // type: System.Runtime.InteropServices.SafeArrayTypeMismatchException, namespace: System.Runtime.InteropServices
  DNRemotingException = interface; // type: System.Runtime.Remoting.RemotingException, namespace: System.Runtime.Remoting
  DNRemotingTimeoutException = interface; // type: System.Runtime.Remoting.RemotingTimeoutException, namespace: System.Runtime.Remoting
  DNServerException = interface; // type: System.Runtime.Remoting.ServerException, namespace: System.Runtime.Remoting
  DNSerializationException = interface; // type: System.Runtime.Serialization.SerializationException, namespace: System.Runtime.Serialization
  DNCryptographicException = interface; // type: System.Security.Cryptography.CryptographicException, namespace: System.Security.Cryptography
  DNCryptographicUnexpectedOperationException = interface; // type: System.Security.Cryptography.CryptographicUnexpectedOperationException, namespace: System.Security.Cryptography
  DNHostProtectionException = interface; // type: System.Security.HostProtectionException, namespace: System.Security
  DNPolicyException = interface; // type: System.Security.Policy.PolicyException, namespace: System.Security.Policy
  DNIdentityNotMappedException = interface; // type: System.Security.Principal.IdentityNotMappedException, namespace: System.Security.Principal
  DNSecurityException = interface; // type: System.Security.SecurityException, namespace: System.Security
  DNVerificationException = interface; // type: System.Security.VerificationException, namespace: System.Security
  DNXmlSyntaxException = interface; // type: System.Security.XmlSyntaxException, namespace: System.Security
  DNStackOverflowException = interface; // type: System.StackOverflowException, namespace: System
  DNAbandonedMutexException = interface; // type: System.Threading.AbandonedMutexException, namespace: System.Threading
  DNSemaphoreFullException = interface; // type: System.Threading.SemaphoreFullException, namespace: System.Threading
  DNSynchronizationLockException = interface; // type: System.Threading.SynchronizationLockException, namespace: System.Threading
  DNThreadAbortException = interface; // type: System.Threading.ThreadAbortException, namespace: System.Threading
  DNThreadInterruptedException = interface; // type: System.Threading.ThreadInterruptedException, namespace: System.Threading
  DNThreadStartException = interface; // type: System.Threading.ThreadStartException, namespace: System.Threading
  DNThreadStateException = interface; // type: System.Threading.ThreadStateException, namespace: System.Threading
  DNTimeoutException = interface; // type: System.TimeoutException, namespace: System
  DNTypeInitializationException = interface; // type: System.TypeInitializationException, namespace: System
  DNTypeLoadException = interface; // type: System.TypeLoadException, namespace: System
  DNDllNotFoundException = interface; // type: System.DllNotFoundException, namespace: System
  DNEntryPointNotFoundException = interface; // type: System.EntryPointNotFoundException, namespace: System
  DNTypeAccessException = interface; // type: System.TypeAccessException, namespace: System
  DNTypeUnloadedException = interface; // type: System.TypeUnloadedException, namespace: System
  DNUnauthorizedAccessException = interface; // type: System.UnauthorizedAccessException, namespace: System
  DNPrivilegeNotHeldException = interface; // type: System.Security.AccessControl.PrivilegeNotHeldException, namespace: System.Security.AccessControl
  DNLockRecursionException = interface; // type: System.Threading.LockRecursionException, namespace: System.Threading
  DNTaskSchedulerException = interface; // type: System.Threading.Tasks.TaskSchedulerException, namespace: System.Threading.Tasks
  DNTimeZoneNotFoundException = interface; // type: System.TimeZoneNotFoundException, namespace: System
  DNFormattableString = interface; // type: System.FormattableString, namespace: System
  DNGC = interface; // type: System.GC, namespace: System
  DNCalendar = interface; // type: System.Globalization.Calendar, namespace: System.Globalization
  DNEastAsianLunisolarCalendar = interface; // type: System.Globalization.EastAsianLunisolarCalendar, namespace: System.Globalization
  DNChineseLunisolarCalendar = interface; // type: System.Globalization.ChineseLunisolarCalendar, namespace: System.Globalization
  DNJapaneseLunisolarCalendar = interface; // type: System.Globalization.JapaneseLunisolarCalendar, namespace: System.Globalization
  DNKoreanLunisolarCalendar = interface; // type: System.Globalization.KoreanLunisolarCalendar, namespace: System.Globalization
  DNTaiwanLunisolarCalendar = interface; // type: System.Globalization.TaiwanLunisolarCalendar, namespace: System.Globalization
  DNGregorianCalendar = interface; // type: System.Globalization.GregorianCalendar, namespace: System.Globalization
  DNHebrewCalendar = interface; // type: System.Globalization.HebrewCalendar, namespace: System.Globalization
  DNHijriCalendar = interface; // type: System.Globalization.HijriCalendar, namespace: System.Globalization
  DNJapaneseCalendar = interface; // type: System.Globalization.JapaneseCalendar, namespace: System.Globalization
  DNJulianCalendar = interface; // type: System.Globalization.JulianCalendar, namespace: System.Globalization
  DNKoreanCalendar = interface; // type: System.Globalization.KoreanCalendar, namespace: System.Globalization
  DNPersianCalendar = interface; // type: System.Globalization.PersianCalendar, namespace: System.Globalization
  DNTaiwanCalendar = interface; // type: System.Globalization.TaiwanCalendar, namespace: System.Globalization
  DNThaiBuddhistCalendar = interface; // type: System.Globalization.ThaiBuddhistCalendar, namespace: System.Globalization
  DNUmAlQuraCalendar = interface; // type: System.Globalization.UmAlQuraCalendar, namespace: System.Globalization
  DNCharUnicodeInfo = interface; // type: System.Globalization.CharUnicodeInfo, namespace: System.Globalization
  DNCompareInfo = interface; // type: System.Globalization.CompareInfo, namespace: System.Globalization
  DNCultureInfo = interface; // type: System.Globalization.CultureInfo, namespace: System.Globalization
  DNDateTimeFormatInfo = interface; // type: System.Globalization.DateTimeFormatInfo, namespace: System.Globalization
  DNDaylightTime = interface; // type: System.Globalization.DaylightTime, namespace: System.Globalization
  DNGlobalizationExtensions = interface; // type: System.Globalization.GlobalizationExtensions, namespace: System.Globalization
  DNIdnMapping = interface; // type: System.Globalization.IdnMapping, namespace: System.Globalization
  DNNumberFormatInfo = interface; // type: System.Globalization.NumberFormatInfo, namespace: System.Globalization
  DNRegionInfo = interface; // type: System.Globalization.RegionInfo, namespace: System.Globalization
  DNSortKey = interface; // type: System.Globalization.SortKey, namespace: System.Globalization
  DNSortVersion = interface; // type: System.Globalization.SortVersion, namespace: System.Globalization
  DNStringInfo = interface; // type: System.Globalization.StringInfo, namespace: System.Globalization
  DNTextElementEnumerator = interface; // type: System.Globalization.TextElementEnumerator, namespace: System.Globalization
  DNTextInfo = interface; // type: System.Globalization.TextInfo, namespace: System.Globalization
  DNIAppDomainSetup = interface; // type: System.IAppDomainSetup, namespace: System
  DNIAsyncResult = interface; // type: System.IAsyncResult, namespace: System
  DNICloneable = interface; // type: System.ICloneable, namespace: System
  DNIComparable<T> = interface; // type: System.IComparable`1, namespace: System
  DNIComparable = interface; // type: System.IComparable, namespace: System
  DNIConvertible = interface; // type: System.IConvertible, namespace: System
  DNICustomFormatter = interface; // type: System.ICustomFormatter, namespace: System
  DNIDisposable = interface; // type: System.IDisposable, namespace: System
  DNIEnumerator<T> = interface; // type: System.Collections.Generic.IEnumerator`1, namespace: System.Collections.Generic
  DNIResourceWriter = interface; // type: System.Resources.IResourceWriter, namespace: System.Resources
  DNICryptoTransform = interface; // type: System.Security.Cryptography.ICryptoTransform, namespace: System.Security.Cryptography
  DNIEquatable<T> = interface; // type: System.IEquatable`1, namespace: System
  DNIFormatProvider = interface; // type: System.IFormatProvider, namespace: System
  DNIFormattable = interface; // type: System.IFormattable, namespace: System
  DNBinaryReader = interface; // type: System.IO.BinaryReader, namespace: System.IO
  DNBinaryWriter = interface; // type: System.IO.BinaryWriter, namespace: System.IO
  DNDirectory = interface; // type: System.IO.Directory, namespace: System.IO
  DNDriveInfo = interface; // type: System.IO.DriveInfo, namespace: System.IO
  DNFile = interface; // type: System.IO.File, namespace: System.IO
  DNINormalizeForIsolatedStorage = interface; // type: System.IO.IsolatedStorage.INormalizeForIsolatedStorage, namespace: System.IO.IsolatedStorage
  DNPath = interface; // type: System.IO.Path, namespace: System.IO
  DNUnmanagedMemoryAccessor = interface; // type: System.IO.UnmanagedMemoryAccessor, namespace: System.IO
  DNIObservable<T> = interface; // type: System.IObservable`1, namespace: System
  DNIObserver<T> = interface; // type: System.IObserver`1, namespace: System
  DNIProgress<T> = interface; // type: System.IProgress`1, namespace: System
  DNIServiceProvider = interface; // type: System.IServiceProvider, namespace: System
  DNLocalDataStoreSlot = interface; // type: System.LocalDataStoreSlot, namespace: System
  DNMarshalByRefObject = interface; // type: System.MarshalByRefObject, namespace: System
  DNRegistryKey = interface; // type: Microsoft.Win32.RegistryKey, namespace: Microsoft.Win32
  DNAppDomain = interface; // type: System.AppDomain, namespace: System
  DNAppDomainManager = interface; // type: System.AppDomainManager, namespace: System
  DNContextBoundObject = interface; // type: System.ContextBoundObject, namespace: System
  DNFileSystemInfo = interface; // type: System.IO.FileSystemInfo, namespace: System.IO
  DNDirectoryInfo = interface; // type: System.IO.DirectoryInfo, namespace: System.IO
  DNFileInfo = interface; // type: System.IO.FileInfo, namespace: System.IO
  DNIsolatedStorage = interface; // type: System.IO.IsolatedStorage.IsolatedStorage, namespace: System.IO.IsolatedStorage
  DNIsolatedStorageFile = interface; // type: System.IO.IsolatedStorage.IsolatedStorageFile, namespace: System.IO.IsolatedStorage
  DNStream = interface; // type: System.IO.Stream, namespace: System.IO
  DNBufferedStream = interface; // type: System.IO.BufferedStream, namespace: System.IO
  DNFileStream = interface; // type: System.IO.FileStream, namespace: System.IO
  DNIsolatedStorageFileStream = interface; // type: System.IO.IsolatedStorage.IsolatedStorageFileStream, namespace: System.IO.IsolatedStorage
  DNMemoryStream = interface; // type: System.IO.MemoryStream, namespace: System.IO
  DNUnmanagedMemoryStream = interface; // type: System.IO.UnmanagedMemoryStream, namespace: System.IO
  DNCryptoStream = interface; // type: System.Security.Cryptography.CryptoStream, namespace: System.Security.Cryptography
  DNTextReader = interface; // type: System.IO.TextReader, namespace: System.IO
  DNStreamReader = interface; // type: System.IO.StreamReader, namespace: System.IO
  DNStringReader = interface; // type: System.IO.StringReader, namespace: System.IO
  DNTextWriter = interface; // type: System.IO.TextWriter, namespace: System.IO
  DNStreamWriter = interface; // type: System.IO.StreamWriter, namespace: System.IO
  DNStringWriter = interface; // type: System.IO.StringWriter, namespace: System.IO
  DNAssemblyNameProxy = interface; // type: System.Reflection.AssemblyNameProxy, namespace: System.Reflection
  DNClientSponsor = interface; // type: System.Runtime.Remoting.Lifetime.ClientSponsor, namespace: System.Runtime.Remoting.Lifetime
  DNObjectHandle = interface; // type: System.Runtime.Remoting.ObjectHandle, namespace: System.Runtime.Remoting
  DNRegisteredWaitHandle = interface; // type: System.Threading.RegisteredWaitHandle, namespace: System.Threading
  DNTimer = interface; // type: System.Threading.Timer, namespace: System.Threading
  DNWaitHandle = interface; // type: System.Threading.WaitHandle, namespace: System.Threading
  DNEventWaitHandle = interface; // type: System.Threading.EventWaitHandle, namespace: System.Threading
  DNAutoResetEvent = interface; // type: System.Threading.AutoResetEvent, namespace: System.Threading
  DNManualResetEvent = interface; // type: System.Threading.ManualResetEvent, namespace: System.Threading
  DNMutex = interface; // type: System.Threading.Mutex, namespace: System.Threading
  DNMath = interface; // type: System.Math, namespace: System
  DNNullable = interface; // type: System.Nullable, namespace: System
  DNOperatingSystem = interface; // type: System.OperatingSystem, namespace: System
  DNRandom = interface; // type: System.Random, namespace: System
  DNAssembly = interface; // type: System.Reflection.Assembly, namespace: System.Reflection
  DNAssemblyBuilder = interface; // type: System.Reflection.Emit.AssemblyBuilder, namespace: System.Reflection.Emit
  DNAssemblyName = interface; // type: System.Reflection.AssemblyName, namespace: System.Reflection
  DNBinder = interface; // type: System.Reflection.Binder, namespace: System.Reflection
  DNCustomAttributeData = interface; // type: System.Reflection.CustomAttributeData, namespace: System.Reflection
  DNCustomAttributeExtensions = interface; // type: System.Reflection.CustomAttributeExtensions, namespace: System.Reflection
  DNCustomAttributeBuilder = interface; // type: System.Reflection.Emit.CustomAttributeBuilder, namespace: System.Reflection.Emit
  DNDynamicILInfo = interface; // type: System.Reflection.Emit.DynamicILInfo, namespace: System.Reflection.Emit
  DNEventBuilder = interface; // type: System.Reflection.Emit.EventBuilder, namespace: System.Reflection.Emit
  DNILGenerator = interface; // type: System.Reflection.Emit.ILGenerator, namespace: System.Reflection.Emit
  DNMethodRental = interface; // type: System.Reflection.Emit.MethodRental, namespace: System.Reflection.Emit
  DNOpCodes = interface; // type: System.Reflection.Emit.OpCodes, namespace: System.Reflection.Emit
  DNParameterBuilder = interface; // type: System.Reflection.Emit.ParameterBuilder, namespace: System.Reflection.Emit
  DNSignatureHelper = interface; // type: System.Reflection.Emit.SignatureHelper, namespace: System.Reflection.Emit
  DNUnmanagedMarshal = interface; // type: System.Reflection.Emit.UnmanagedMarshal, namespace: System.Reflection.Emit
  DNExceptionHandlingClause = interface; // type: System.Reflection.ExceptionHandlingClause, namespace: System.Reflection
  DNICustomAttributeProvider = interface; // type: System.Reflection.ICustomAttributeProvider, namespace: System.Reflection
  DNIntrospectionExtensions = interface; // type: System.Reflection.IntrospectionExtensions, namespace: System.Reflection
  DNIReflect = interface; // type: System.Reflection.IReflect, namespace: System.Reflection
  DNIExpando = interface; // type: System.Runtime.InteropServices.Expando.IExpando, namespace: System.Runtime.InteropServices.Expando
  DNIReflectableType = interface; // type: System.Reflection.IReflectableType, namespace: System.Reflection
  DNLocalVariableInfo = interface; // type: System.Reflection.LocalVariableInfo, namespace: System.Reflection
  DNLocalBuilder = interface; // type: System.Reflection.Emit.LocalBuilder, namespace: System.Reflection.Emit
  DNManifestResourceInfo = interface; // type: System.Reflection.ManifestResourceInfo, namespace: System.Reflection
  DNMemberInfo = interface; // type: System.Reflection.MemberInfo, namespace: System.Reflection
  DNEventInfo = interface; // type: System.Reflection.EventInfo, namespace: System.Reflection
  DNFieldInfo = interface; // type: System.Reflection.FieldInfo, namespace: System.Reflection
  DNFieldBuilder = interface; // type: System.Reflection.Emit.FieldBuilder, namespace: System.Reflection.Emit
  DNMethodBase = interface; // type: System.Reflection.MethodBase, namespace: System.Reflection
  DNConstructorInfo = interface; // type: System.Reflection.ConstructorInfo, namespace: System.Reflection
  DNConstructorBuilder = interface; // type: System.Reflection.Emit.ConstructorBuilder, namespace: System.Reflection.Emit
  DNMethodInfo = interface; // type: System.Reflection.MethodInfo, namespace: System.Reflection
  DNDynamicMethod = interface; // type: System.Reflection.Emit.DynamicMethod, namespace: System.Reflection.Emit
  DNMethodBuilder = interface; // type: System.Reflection.Emit.MethodBuilder, namespace: System.Reflection.Emit
  DNPropertyInfo = interface; // type: System.Reflection.PropertyInfo, namespace: System.Reflection
  DNPropertyBuilder = interface; // type: System.Reflection.Emit.PropertyBuilder, namespace: System.Reflection.Emit
  DNType = interface; // type: System.Type, namespace: System
  DNTypeInfo = interface; // type: System.Reflection.TypeInfo, namespace: System.Reflection
  DNEnumBuilder = interface; // type: System.Reflection.Emit.EnumBuilder, namespace: System.Reflection.Emit
  DNGenericTypeParameterBuilder = interface; // type: System.Reflection.Emit.GenericTypeParameterBuilder, namespace: System.Reflection.Emit
  DNTypeBuilder = interface; // type: System.Reflection.Emit.TypeBuilder, namespace: System.Reflection.Emit
  DNTypeDelegator = interface; // type: System.Reflection.TypeDelegator, namespace: System.Reflection
  DNMethodBody = interface; // type: System.Reflection.MethodBody, namespace: System.Reflection
  DNMissing = interface; // type: System.Reflection.Missing, namespace: System.Reflection
  DNModule = interface; // type: System.Reflection.Module, namespace: System.Reflection
  DNModuleBuilder = interface; // type: System.Reflection.Emit.ModuleBuilder, namespace: System.Reflection.Emit
  DNParameterInfo = interface; // type: System.Reflection.ParameterInfo, namespace: System.Reflection
  DNPointer = interface; // type: System.Reflection.Pointer, namespace: System.Reflection
  DNReflectionContext = interface; // type: System.Reflection.ReflectionContext, namespace: System.Reflection
  DNRuntimeReflectionExtensions = interface; // type: System.Reflection.RuntimeReflectionExtensions, namespace: System.Reflection
  DNStrongNameKeyPair = interface; // type: System.Reflection.StrongNameKeyPair, namespace: System.Reflection
  DNResourceManager = interface; // type: System.Resources.ResourceManager, namespace: System.Resources
  DNResourceReader = interface; // type: System.Resources.ResourceReader, namespace: System.Resources
  DNResourceSet = interface; // type: System.Resources.ResourceSet, namespace: System.Resources
  DNResourceWriter = interface; // type: System.Resources.ResourceWriter, namespace: System.Resources
  DNCallConvCdecl = interface; // type: System.Runtime.CompilerServices.CallConvCdecl, namespace: System.Runtime.CompilerServices
  DNCallConvFastcall = interface; // type: System.Runtime.CompilerServices.CallConvFastcall, namespace: System.Runtime.CompilerServices
  DNCallConvStdcall = interface; // type: System.Runtime.CompilerServices.CallConvStdcall, namespace: System.Runtime.CompilerServices
  DNCallConvThiscall = interface; // type: System.Runtime.CompilerServices.CallConvThiscall, namespace: System.Runtime.CompilerServices
  DNCompilerMarshalOverride = interface; // type: System.Runtime.CompilerServices.CompilerMarshalOverride, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ContractHelper = interface; // type: System.Runtime.CompilerServices.ContractHelper, namespace: System.Runtime.CompilerServices
  DNFormattableStringFactory = interface; // type: System.Runtime.CompilerServices.FormattableStringFactory, namespace: System.Runtime.CompilerServices
  DNIAsyncStateMachine = interface; // type: System.Runtime.CompilerServices.IAsyncStateMachine, namespace: System.Runtime.CompilerServices
  DNINotifyCompletion = interface; // type: System.Runtime.CompilerServices.INotifyCompletion, namespace: System.Runtime.CompilerServices
  DNICriticalNotifyCompletion = interface; // type: System.Runtime.CompilerServices.ICriticalNotifyCompletion, namespace: System.Runtime.CompilerServices
  DNIsBoxed = interface; // type: System.Runtime.CompilerServices.IsBoxed, namespace: System.Runtime.CompilerServices
  DNIsByValue = interface; // type: System.Runtime.CompilerServices.IsByValue, namespace: System.Runtime.CompilerServices
  DNIsConst = interface; // type: System.Runtime.CompilerServices.IsConst, namespace: System.Runtime.CompilerServices
  DNIsCopyConstructed = interface; // type: System.Runtime.CompilerServices.IsCopyConstructed, namespace: System.Runtime.CompilerServices
  DNIsExplicitlyDereferenced = interface; // type: System.Runtime.CompilerServices.IsExplicitlyDereferenced, namespace: System.Runtime.CompilerServices
  DNIsImplicitlyDereferenced = interface; // type: System.Runtime.CompilerServices.IsImplicitlyDereferenced, namespace: System.Runtime.CompilerServices
  DNIsJitIntrinsic = interface; // type: System.Runtime.CompilerServices.IsJitIntrinsic, namespace: System.Runtime.CompilerServices
  DNIsLong = interface; // type: System.Runtime.CompilerServices.IsLong, namespace: System.Runtime.CompilerServices
  DNIsPinned = interface; // type: System.Runtime.CompilerServices.IsPinned, namespace: System.Runtime.CompilerServices
  DNIsSignUnspecifiedByte = interface; // type: System.Runtime.CompilerServices.IsSignUnspecifiedByte, namespace: System.Runtime.CompilerServices
  DNIsUdtReturn = interface; // type: System.Runtime.CompilerServices.IsUdtReturn, namespace: System.Runtime.CompilerServices
  DNIsVolatile = interface; // type: System.Runtime.CompilerServices.IsVolatile, namespace: System.Runtime.CompilerServices
  DNITuple = interface; // type: System.Runtime.CompilerServices.ITuple, namespace: System.Runtime.CompilerServices
  DNRuntimeFeature = interface; // type: System.Runtime.CompilerServices.RuntimeFeature, namespace: System.Runtime.CompilerServices
  DNRuntimeHelpers = interface; // type: System.Runtime.CompilerServices.RuntimeHelpers, namespace: System.Runtime.CompilerServices
  DNCriticalFinalizerObject = interface; // type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject, namespace: System.Runtime.ConstrainedExecution
  DNCriticalHandle = interface; // type: System.Runtime.InteropServices.CriticalHandle, namespace: System.Runtime.InteropServices
  DNCriticalHandleMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNCriticalHandleZeroOrMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeHandle = interface; // type: System.Runtime.InteropServices.SafeHandle, namespace: System.Runtime.InteropServices
  DNSafeAccessTokenHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeHandleMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeHandleZeroOrMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeFileHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeFileHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeRegistryHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeRegistryHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeWaitHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeWaitHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeBuffer = interface; // type: System.Runtime.InteropServices.SafeBuffer, namespace: System.Runtime.InteropServices
  DNMemoryFailPoint = interface; // type: System.Runtime.MemoryFailPoint, namespace: System.Runtime
  DNReaderWriterLock = interface; // type: System.Threading.ReaderWriterLock, namespace: System.Threading
  DNThread = interface; // type: System.Threading.Thread, namespace: System.Threading
  DNWindowsRuntimeDesignerContext = interface; // type: System.Runtime.DesignerServices.WindowsRuntimeDesignerContext, namespace: System.Runtime.DesignerServices
  DNExceptionDispatchInfo = interface; // type: System.Runtime.ExceptionServices.ExceptionDispatchInfo, namespace: System.Runtime.ExceptionServices
  DNGCSettings = interface; // type: System.Runtime.GCSettings, namespace: System.Runtime
  DNApplicationActivator = interface; // type: System.Runtime.Hosting.ApplicationActivator, namespace: System.Runtime.Hosting
  DN_Activator = interface; // type: System.Runtime.InteropServices._Activator, namespace: System.Runtime.InteropServices
  DN_Assembly = interface; // type: System.Runtime.InteropServices._Assembly, namespace: System.Runtime.InteropServices
  DN_AssemblyBuilder = interface; // type: System.Runtime.InteropServices._AssemblyBuilder, namespace: System.Runtime.InteropServices
  DN_AssemblyName = interface; // type: System.Runtime.InteropServices._AssemblyName, namespace: System.Runtime.InteropServices
  DN_Attribute = interface; // type: System.Runtime.InteropServices._Attribute, namespace: System.Runtime.InteropServices
  DN_ConstructorBuilder = interface; // type: System.Runtime.InteropServices._ConstructorBuilder, namespace: System.Runtime.InteropServices
  DN_ConstructorInfo = interface; // type: System.Runtime.InteropServices._ConstructorInfo, namespace: System.Runtime.InteropServices
  DN_CustomAttributeBuilder = interface; // type: System.Runtime.InteropServices._CustomAttributeBuilder, namespace: System.Runtime.InteropServices
  DN_EnumBuilder = interface; // type: System.Runtime.InteropServices._EnumBuilder, namespace: System.Runtime.InteropServices
  DN_EventBuilder = interface; // type: System.Runtime.InteropServices._EventBuilder, namespace: System.Runtime.InteropServices
  DN_EventInfo = interface; // type: System.Runtime.InteropServices._EventInfo, namespace: System.Runtime.InteropServices
  DN_Exception = interface; // type: System.Runtime.InteropServices._Exception, namespace: System.Runtime.InteropServices
  DN_FieldBuilder = interface; // type: System.Runtime.InteropServices._FieldBuilder, namespace: System.Runtime.InteropServices
  DN_FieldInfo = interface; // type: System.Runtime.InteropServices._FieldInfo, namespace: System.Runtime.InteropServices
  DN_ILGenerator = interface; // type: System.Runtime.InteropServices._ILGenerator, namespace: System.Runtime.InteropServices
  DN_LocalBuilder = interface; // type: System.Runtime.InteropServices._LocalBuilder, namespace: System.Runtime.InteropServices
  DN_MemberInfo = interface; // type: System.Runtime.InteropServices._MemberInfo, namespace: System.Runtime.InteropServices
  DN_MethodBase = interface; // type: System.Runtime.InteropServices._MethodBase, namespace: System.Runtime.InteropServices
  DN_MethodBuilder = interface; // type: System.Runtime.InteropServices._MethodBuilder, namespace: System.Runtime.InteropServices
  DN_MethodInfo = interface; // type: System.Runtime.InteropServices._MethodInfo, namespace: System.Runtime.InteropServices
  DN_MethodRental = interface; // type: System.Runtime.InteropServices._MethodRental, namespace: System.Runtime.InteropServices
  DN_Module = interface; // type: System.Runtime.InteropServices._Module, namespace: System.Runtime.InteropServices
  DN_ModuleBuilder = interface; // type: System.Runtime.InteropServices._ModuleBuilder, namespace: System.Runtime.InteropServices
  DN_ParameterBuilder = interface; // type: System.Runtime.InteropServices._ParameterBuilder, namespace: System.Runtime.InteropServices
  DN_ParameterInfo = interface; // type: System.Runtime.InteropServices._ParameterInfo, namespace: System.Runtime.InteropServices
  DN_PropertyBuilder = interface; // type: System.Runtime.InteropServices._PropertyBuilder, namespace: System.Runtime.InteropServices
  DN_PropertyInfo = interface; // type: System.Runtime.InteropServices._PropertyInfo, namespace: System.Runtime.InteropServices
  DN_SignatureHelper = interface; // type: System.Runtime.InteropServices._SignatureHelper, namespace: System.Runtime.InteropServices
  DN_Thread = interface; // type: System.Runtime.InteropServices._Thread, namespace: System.Runtime.InteropServices
  DN_Type = interface; // type: System.Runtime.InteropServices._Type, namespace: System.Runtime.InteropServices
  DN_TypeBuilder = interface; // type: System.Runtime.InteropServices._TypeBuilder, namespace: System.Runtime.InteropServices
  DNBStrWrapper = interface; // type: System.Runtime.InteropServices.BStrWrapper, namespace: System.Runtime.InteropServices
  DNComEventsHelper = interface; // type: System.Runtime.InteropServices.ComEventsHelper, namespace: System.Runtime.InteropServices
  DNIBindCtx = interface; // type: System.Runtime.InteropServices.ComTypes.IBindCtx, namespace: System.Runtime.InteropServices.ComTypes
  DNIConnectionPoint = interface; // type: System.Runtime.InteropServices.ComTypes.IConnectionPoint, namespace: System.Runtime.InteropServices.ComTypes
  DNIConnectionPointContainer = interface; // type: System.Runtime.InteropServices.ComTypes.IConnectionPointContainer, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumConnectionPoints = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumConnections = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumConnections, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumMoniker = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumMoniker, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumString = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumString, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumVARIANT = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumVARIANT, namespace: System.Runtime.InteropServices.ComTypes
  DNIMoniker = interface; // type: System.Runtime.InteropServices.ComTypes.IMoniker, namespace: System.Runtime.InteropServices.ComTypes
  DNIPersistFile = interface; // type: System.Runtime.InteropServices.ComTypes.IPersistFile, namespace: System.Runtime.InteropServices.ComTypes
  DNIRunningObjectTable = interface; // type: System.Runtime.InteropServices.ComTypes.IRunningObjectTable, namespace: System.Runtime.InteropServices.ComTypes
  DNIStream = interface; // type: System.Runtime.InteropServices.ComTypes.IStream, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeComp = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeComp, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeInfo = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeInfo, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeInfo2 = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeInfo2, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeLib = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeLib, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeLib2 = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeLib2, namespace: System.Runtime.InteropServices.ComTypes
  DNCurrencyWrapper = interface; // type: System.Runtime.InteropServices.CurrencyWrapper, namespace: System.Runtime.InteropServices
  DNDispatchWrapper = interface; // type: System.Runtime.InteropServices.DispatchWrapper, namespace: System.Runtime.InteropServices
  DNErrorWrapper = interface; // type: System.Runtime.InteropServices.ErrorWrapper, namespace: System.Runtime.InteropServices
  DNExtensibleClassFactory = interface; // type: System.Runtime.InteropServices.ExtensibleClassFactory, namespace: System.Runtime.InteropServices
  DNICustomAdapter = interface; // type: System.Runtime.InteropServices.ICustomAdapter, namespace: System.Runtime.InteropServices
  DNICustomFactory = interface; // type: System.Runtime.InteropServices.ICustomFactory, namespace: System.Runtime.InteropServices
  DNICustomMarshaler = interface; // type: System.Runtime.InteropServices.ICustomMarshaler, namespace: System.Runtime.InteropServices
  DNICustomQueryInterface = interface; // type: System.Runtime.InteropServices.ICustomQueryInterface, namespace: System.Runtime.InteropServices
  DNIRegistrationServices = interface; // type: System.Runtime.InteropServices.IRegistrationServices, namespace: System.Runtime.InteropServices
  DNITypeLibConverter = interface; // type: System.Runtime.InteropServices.ITypeLibConverter, namespace: System.Runtime.InteropServices
  DNITypeLibExporterNameProvider = interface; // type: System.Runtime.InteropServices.ITypeLibExporterNameProvider, namespace: System.Runtime.InteropServices
  DNITypeLibExporterNotifySink = interface; // type: System.Runtime.InteropServices.ITypeLibExporterNotifySink, namespace: System.Runtime.InteropServices
  DNITypeLibImporterNotifySink = interface; // type: System.Runtime.InteropServices.ITypeLibImporterNotifySink, namespace: System.Runtime.InteropServices
  DNMarshal = interface; // type: System.Runtime.InteropServices.Marshal, namespace: System.Runtime.InteropServices
  DNRegistrationServices = interface; // type: System.Runtime.InteropServices.RegistrationServices, namespace: System.Runtime.InteropServices
  DNRuntimeEnvironment = interface; // type: System.Runtime.InteropServices.RuntimeEnvironment, namespace: System.Runtime.InteropServices
  DNRuntimeInformation = interface; // type: System.Runtime.InteropServices.RuntimeInformation, namespace: System.Runtime.InteropServices
  DNTypeLibConverter = interface; // type: System.Runtime.InteropServices.TypeLibConverter, namespace: System.Runtime.InteropServices
  DNUCOMIBindCtx = interface; // type: System.Runtime.InteropServices.UCOMIBindCtx, namespace: System.Runtime.InteropServices
  DNUCOMIConnectionPoint = interface; // type: System.Runtime.InteropServices.UCOMIConnectionPoint, namespace: System.Runtime.InteropServices
  DNUCOMIConnectionPointContainer = interface; // type: System.Runtime.InteropServices.UCOMIConnectionPointContainer, namespace: System.Runtime.InteropServices
  DNUCOMIEnumConnectionPoints = interface; // type: System.Runtime.InteropServices.UCOMIEnumConnectionPoints, namespace: System.Runtime.InteropServices
  DNUCOMIEnumConnections = interface; // type: System.Runtime.InteropServices.UCOMIEnumConnections, namespace: System.Runtime.InteropServices
  DNUCOMIEnumMoniker = interface; // type: System.Runtime.InteropServices.UCOMIEnumMoniker, namespace: System.Runtime.InteropServices
  DNUCOMIEnumString = interface; // type: System.Runtime.InteropServices.UCOMIEnumString, namespace: System.Runtime.InteropServices
  DNUCOMIEnumVARIANT = interface; // type: System.Runtime.InteropServices.UCOMIEnumVARIANT, namespace: System.Runtime.InteropServices
  DNUCOMIMoniker = interface; // type: System.Runtime.InteropServices.UCOMIMoniker, namespace: System.Runtime.InteropServices
  DNUCOMIPersistFile = interface; // type: System.Runtime.InteropServices.UCOMIPersistFile, namespace: System.Runtime.InteropServices
  DNUCOMIRunningObjectTable = interface; // type: System.Runtime.InteropServices.UCOMIRunningObjectTable, namespace: System.Runtime.InteropServices
  DNUCOMIStream = interface; // type: System.Runtime.InteropServices.UCOMIStream, namespace: System.Runtime.InteropServices
  DNUCOMITypeComp = interface; // type: System.Runtime.InteropServices.UCOMITypeComp, namespace: System.Runtime.InteropServices
  DNUCOMITypeInfo = interface; // type: System.Runtime.InteropServices.UCOMITypeInfo, namespace: System.Runtime.InteropServices
  DNUCOMITypeLib = interface; // type: System.Runtime.InteropServices.UCOMITypeLib, namespace: System.Runtime.InteropServices
  DNUnknownWrapper = interface; // type: System.Runtime.InteropServices.UnknownWrapper, namespace: System.Runtime.InteropServices
  DNVariantWrapper = interface; // type: System.Runtime.InteropServices.VariantWrapper, namespace: System.Runtime.InteropServices
  DNIActivationFactory = interface; // type: System.Runtime.InteropServices.WindowsRuntime.IActivationFactory, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNWindowsRuntimeMarshal = interface; // type: System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNWindowsRuntimeMetadata = interface; // type: System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMetadata, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNProfileOptimization = interface; // type: System.Runtime.ProfileOptimization, namespace: System.Runtime
  DNIActivator = interface; // type: System.Runtime.Remoting.Activation.IActivator, namespace: System.Runtime.Remoting.Activation
  DNBaseChannelObjectWithProperties = interface; // type: System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties, namespace: System.Runtime.Remoting.Channels
  DNBaseChannelSinkWithProperties = interface; // type: System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties, namespace: System.Runtime.Remoting.Channels
  DNBaseChannelWithProperties = interface; // type: System.Runtime.Remoting.Channels.BaseChannelWithProperties, namespace: System.Runtime.Remoting.Channels
  DNChannelDataStore = interface; // type: System.Runtime.Remoting.Channels.ChannelDataStore, namespace: System.Runtime.Remoting.Channels
  DNChannelServices = interface; // type: System.Runtime.Remoting.Channels.ChannelServices, namespace: System.Runtime.Remoting.Channels
  DNClientChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.ClientChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNIChannel = interface; // type: System.Runtime.Remoting.Channels.IChannel, namespace: System.Runtime.Remoting.Channels
  DNIChannelReceiver = interface; // type: System.Runtime.Remoting.Channels.IChannelReceiver, namespace: System.Runtime.Remoting.Channels
  DNIChannelSender = interface; // type: System.Runtime.Remoting.Channels.IChannelSender, namespace: System.Runtime.Remoting.Channels
  DNIChannelDataStore = interface; // type: System.Runtime.Remoting.Channels.IChannelDataStore, namespace: System.Runtime.Remoting.Channels
  DNIChannelReceiverHook = interface; // type: System.Runtime.Remoting.Channels.IChannelReceiverHook, namespace: System.Runtime.Remoting.Channels
  DNIChannelSinkBase = interface; // type: System.Runtime.Remoting.Channels.IChannelSinkBase, namespace: System.Runtime.Remoting.Channels
  DNIClientChannelSink = interface; // type: System.Runtime.Remoting.Channels.IClientChannelSink, namespace: System.Runtime.Remoting.Channels
  DNIServerChannelSink = interface; // type: System.Runtime.Remoting.Channels.IServerChannelSink, namespace: System.Runtime.Remoting.Channels
  DNIClientChannelSinkProvider = interface; // type: System.Runtime.Remoting.Channels.IClientChannelSinkProvider, namespace: System.Runtime.Remoting.Channels
  DNIClientFormatterSinkProvider = interface; // type: System.Runtime.Remoting.Channels.IClientFormatterSinkProvider, namespace: System.Runtime.Remoting.Channels
  DNIClientResponseChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNIClientChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.IClientChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNISecurableChannel = interface; // type: System.Runtime.Remoting.Channels.ISecurableChannel, namespace: System.Runtime.Remoting.Channels
  DNIServerChannelSinkProvider = interface; // type: System.Runtime.Remoting.Channels.IServerChannelSinkProvider, namespace: System.Runtime.Remoting.Channels
  DNIServerFormatterSinkProvider = interface; // type: System.Runtime.Remoting.Channels.IServerFormatterSinkProvider, namespace: System.Runtime.Remoting.Channels
  DNIServerResponseChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNIServerChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.IServerChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNITransportHeaders = interface; // type: System.Runtime.Remoting.Channels.ITransportHeaders, namespace: System.Runtime.Remoting.Channels
  DNServerChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.ServerChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNSinkProviderData = interface; // type: System.Runtime.Remoting.Channels.SinkProviderData, namespace: System.Runtime.Remoting.Channels
  DNTransportHeaders = interface; // type: System.Runtime.Remoting.Channels.TransportHeaders, namespace: System.Runtime.Remoting.Channels
  DNContext = interface; // type: System.Runtime.Remoting.Contexts.Context, namespace: System.Runtime.Remoting.Contexts
  DNContextProperty = interface; // type: System.Runtime.Remoting.Contexts.ContextProperty, namespace: System.Runtime.Remoting.Contexts
  DNIContextAttribute = interface; // type: System.Runtime.Remoting.Contexts.IContextAttribute, namespace: System.Runtime.Remoting.Contexts
  DNIContextProperty = interface; // type: System.Runtime.Remoting.Contexts.IContextProperty, namespace: System.Runtime.Remoting.Contexts
  DNIContextPropertyActivator = interface; // type: System.Runtime.Remoting.Contexts.IContextPropertyActivator, namespace: System.Runtime.Remoting.Contexts
  DNIContributeClientContextSink = interface; // type: System.Runtime.Remoting.Contexts.IContributeClientContextSink, namespace: System.Runtime.Remoting.Contexts
  DNIContributeDynamicSink = interface; // type: System.Runtime.Remoting.Contexts.IContributeDynamicSink, namespace: System.Runtime.Remoting.Contexts
  DNIContributeEnvoySink = interface; // type: System.Runtime.Remoting.Contexts.IContributeEnvoySink, namespace: System.Runtime.Remoting.Contexts
  DNIContributeObjectSink = interface; // type: System.Runtime.Remoting.Contexts.IContributeObjectSink, namespace: System.Runtime.Remoting.Contexts
  DNIContributeServerContextSink = interface; // type: System.Runtime.Remoting.Contexts.IContributeServerContextSink, namespace: System.Runtime.Remoting.Contexts
  DNIDynamicMessageSink = interface; // type: System.Runtime.Remoting.Contexts.IDynamicMessageSink, namespace: System.Runtime.Remoting.Contexts
  DNIDynamicProperty = interface; // type: System.Runtime.Remoting.Contexts.IDynamicProperty, namespace: System.Runtime.Remoting.Contexts
  DNIChannelInfo = interface; // type: System.Runtime.Remoting.IChannelInfo, namespace: System.Runtime.Remoting
  DNIEnvoyInfo = interface; // type: System.Runtime.Remoting.IEnvoyInfo, namespace: System.Runtime.Remoting
  DNInternalRemotingServices = interface; // type: System.Runtime.Remoting.InternalRemotingServices, namespace: System.Runtime.Remoting
  DNIObjectHandle = interface; // type: System.Runtime.Remoting.IObjectHandle, namespace: System.Runtime.Remoting
  DNIRemotingTypeInfo = interface; // type: System.Runtime.Remoting.IRemotingTypeInfo, namespace: System.Runtime.Remoting
  DNILease = interface; // type: System.Runtime.Remoting.Lifetime.ILease, namespace: System.Runtime.Remoting.Lifetime
  DNISponsor = interface; // type: System.Runtime.Remoting.Lifetime.ISponsor, namespace: System.Runtime.Remoting.Lifetime
  DNLifetimeServices = interface; // type: System.Runtime.Remoting.Lifetime.LifetimeServices, namespace: System.Runtime.Remoting.Lifetime
  DNAsyncResult = interface; // type: System.Runtime.Remoting.Messaging.AsyncResult, namespace: System.Runtime.Remoting.Messaging
  DNCallContext = interface; // type: System.Runtime.Remoting.Messaging.CallContext, namespace: System.Runtime.Remoting.Messaging
  DNHeader = interface; // type: System.Runtime.Remoting.Messaging.Header, namespace: System.Runtime.Remoting.Messaging
  DNILogicalThreadAffinative = interface; // type: System.Runtime.Remoting.Messaging.ILogicalThreadAffinative, namespace: System.Runtime.Remoting.Messaging
  DNIMessage = interface; // type: System.Runtime.Remoting.Messaging.IMessage, namespace: System.Runtime.Remoting.Messaging
  DNIMethodMessage = interface; // type: System.Runtime.Remoting.Messaging.IMethodMessage, namespace: System.Runtime.Remoting.Messaging
  DNIMethodCallMessage = interface; // type: System.Runtime.Remoting.Messaging.IMethodCallMessage, namespace: System.Runtime.Remoting.Messaging
  DNIConstructionCallMessage = interface; // type: System.Runtime.Remoting.Activation.IConstructionCallMessage, namespace: System.Runtime.Remoting.Activation
  DNIMethodReturnMessage = interface; // type: System.Runtime.Remoting.Messaging.IMethodReturnMessage, namespace: System.Runtime.Remoting.Messaging
  DNIConstructionReturnMessage = interface; // type: System.Runtime.Remoting.Activation.IConstructionReturnMessage, namespace: System.Runtime.Remoting.Activation
  DNIMessageCtrl = interface; // type: System.Runtime.Remoting.Messaging.IMessageCtrl, namespace: System.Runtime.Remoting.Messaging
  DNIMessageSink = interface; // type: System.Runtime.Remoting.Messaging.IMessageSink, namespace: System.Runtime.Remoting.Messaging
  DNIClientFormatterSink = interface; // type: System.Runtime.Remoting.Channels.IClientFormatterSink, namespace: System.Runtime.Remoting.Channels
  DNInternalMessageWrapper = interface; // type: System.Runtime.Remoting.Messaging.InternalMessageWrapper, namespace: System.Runtime.Remoting.Messaging
  DNMethodCallMessageWrapper = interface; // type: System.Runtime.Remoting.Messaging.MethodCallMessageWrapper, namespace: System.Runtime.Remoting.Messaging
  DNMethodReturnMessageWrapper = interface; // type: System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper, namespace: System.Runtime.Remoting.Messaging
  DNLogicalCallContext = interface; // type: System.Runtime.Remoting.Messaging.LogicalCallContext, namespace: System.Runtime.Remoting.Messaging
  DNMethodCall = interface; // type: System.Runtime.Remoting.Messaging.MethodCall, namespace: System.Runtime.Remoting.Messaging
  DNConstructionCall = interface; // type: System.Runtime.Remoting.Messaging.ConstructionCall, namespace: System.Runtime.Remoting.Messaging
  DNMethodResponse = interface; // type: System.Runtime.Remoting.Messaging.MethodResponse, namespace: System.Runtime.Remoting.Messaging
  DNConstructionResponse = interface; // type: System.Runtime.Remoting.Messaging.ConstructionResponse, namespace: System.Runtime.Remoting.Messaging
  DNRemotingSurrogateSelector = interface; // type: System.Runtime.Remoting.Messaging.RemotingSurrogateSelector, namespace: System.Runtime.Remoting.Messaging
  DNReturnMessage = interface; // type: System.Runtime.Remoting.Messaging.ReturnMessage, namespace: System.Runtime.Remoting.Messaging
  DNISoapXsd = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapAnyUri = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapBase64Binary = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapDate = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapDateTime = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapDay = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapDuration = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapEntities = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapEntity = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapHexBinary = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapId = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapIdref = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapIdrefs = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapInteger = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapLanguage = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapMonth = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapMonthDay = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapName = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNcName = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNegativeInteger = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNmtoken = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNmtokens = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNonNegativeInteger = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNonPositiveInteger = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNormalizedString = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNotation = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapPositiveInteger = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapQName = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapTime = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapToken = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapYear = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapYearMonth = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNObjRef = interface; // type: System.Runtime.Remoting.ObjRef, namespace: System.Runtime.Remoting
  DNRealProxy = interface; // type: System.Runtime.Remoting.Proxies.RealProxy, namespace: System.Runtime.Remoting.Proxies
  DNRemotingConfiguration = interface; // type: System.Runtime.Remoting.RemotingConfiguration, namespace: System.Runtime.Remoting
  DNRemotingServices = interface; // type: System.Runtime.Remoting.RemotingServices, namespace: System.Runtime.Remoting
  DNEnterpriseServicesHelper = interface; // type: System.Runtime.Remoting.Services.EnterpriseServicesHelper, namespace: System.Runtime.Remoting.Services
  DNITrackingHandler = interface; // type: System.Runtime.Remoting.Services.ITrackingHandler, namespace: System.Runtime.Remoting.Services
  DNTrackingServices = interface; // type: System.Runtime.Remoting.Services.TrackingServices, namespace: System.Runtime.Remoting.Services
  DNSoapServices = interface; // type: System.Runtime.Remoting.SoapServices, namespace: System.Runtime.Remoting
  DNTypeEntry = interface; // type: System.Runtime.Remoting.TypeEntry, namespace: System.Runtime.Remoting
  DNActivatedClientTypeEntry = interface; // type: System.Runtime.Remoting.ActivatedClientTypeEntry, namespace: System.Runtime.Remoting
  DNActivatedServiceTypeEntry = interface; // type: System.Runtime.Remoting.ActivatedServiceTypeEntry, namespace: System.Runtime.Remoting
  DNWellKnownClientTypeEntry = interface; // type: System.Runtime.Remoting.WellKnownClientTypeEntry, namespace: System.Runtime.Remoting
  DNWellKnownServiceTypeEntry = interface; // type: System.Runtime.Remoting.WellKnownServiceTypeEntry, namespace: System.Runtime.Remoting
  DNFormatter = interface; // type: System.Runtime.Serialization.Formatter, namespace: System.Runtime.Serialization
  DNFormatterConverter = interface; // type: System.Runtime.Serialization.FormatterConverter, namespace: System.Runtime.Serialization
  DNBinaryFormatter = interface; // type: System.Runtime.Serialization.Formatters.Binary.BinaryFormatter, namespace: System.Runtime.Serialization.Formatters.Binary
  DNIFieldInfo = interface; // type: System.Runtime.Serialization.Formatters.IFieldInfo, namespace: System.Runtime.Serialization.Formatters
  DNInternalRM = interface; // type: System.Runtime.Serialization.Formatters.InternalRM, namespace: System.Runtime.Serialization.Formatters
  DNInternalST = interface; // type: System.Runtime.Serialization.Formatters.InternalST, namespace: System.Runtime.Serialization.Formatters
  DNISoapMessage = interface; // type: System.Runtime.Serialization.Formatters.ISoapMessage, namespace: System.Runtime.Serialization.Formatters
  DNServerFault = interface; // type: System.Runtime.Serialization.Formatters.ServerFault, namespace: System.Runtime.Serialization.Formatters
  DNSoapFault = interface; // type: System.Runtime.Serialization.Formatters.SoapFault, namespace: System.Runtime.Serialization.Formatters
  DNSoapMessage = interface; // type: System.Runtime.Serialization.Formatters.SoapMessage, namespace: System.Runtime.Serialization.Formatters
  DNFormatterServices = interface; // type: System.Runtime.Serialization.FormatterServices, namespace: System.Runtime.Serialization
  DNIDeserializationCallback = interface; // type: System.Runtime.Serialization.IDeserializationCallback, namespace: System.Runtime.Serialization
  DNIFormatter = interface; // type: System.Runtime.Serialization.IFormatter, namespace: System.Runtime.Serialization
  DNIRemotingFormatter = interface; // type: System.Runtime.Remoting.Messaging.IRemotingFormatter, namespace: System.Runtime.Remoting.Messaging
  DNIFormatterConverter = interface; // type: System.Runtime.Serialization.IFormatterConverter, namespace: System.Runtime.Serialization
  DNIObjectReference = interface; // type: System.Runtime.Serialization.IObjectReference, namespace: System.Runtime.Serialization
  DNISafeSerializationData = interface; // type: System.Runtime.Serialization.ISafeSerializationData, namespace: System.Runtime.Serialization
  DNISerializable = interface; // type: System.Runtime.Serialization.ISerializable, namespace: System.Runtime.Serialization
  DNISerializationSurrogate = interface; // type: System.Runtime.Serialization.ISerializationSurrogate, namespace: System.Runtime.Serialization
  DNISurrogateSelector = interface; // type: System.Runtime.Serialization.ISurrogateSelector, namespace: System.Runtime.Serialization
  DNObjectIDGenerator = interface; // type: System.Runtime.Serialization.ObjectIDGenerator, namespace: System.Runtime.Serialization
  DNObjectManager = interface; // type: System.Runtime.Serialization.ObjectManager, namespace: System.Runtime.Serialization
  DNSerializationBinder = interface; // type: System.Runtime.Serialization.SerializationBinder, namespace: System.Runtime.Serialization
  DNSerializationInfo = interface; // type: System.Runtime.Serialization.SerializationInfo, namespace: System.Runtime.Serialization
  DNSerializationInfoEnumerator = interface; // type: System.Runtime.Serialization.SerializationInfoEnumerator, namespace: System.Runtime.Serialization
  DNSerializationObjectManager = interface; // type: System.Runtime.Serialization.SerializationObjectManager, namespace: System.Runtime.Serialization
  DNSurrogateSelector = interface; // type: System.Runtime.Serialization.SurrogateSelector, namespace: System.Runtime.Serialization
  DNCompatibilitySwitch = interface; // type: System.Runtime.Versioning.CompatibilitySwitch, namespace: System.Runtime.Versioning
  DNVersioningHelper = interface; // type: System.Runtime.Versioning.VersioningHelper, namespace: System.Runtime.Versioning
  DNAceEnumerator = interface; // type: System.Security.AccessControl.AceEnumerator, namespace: System.Security.AccessControl
  DNAuthorizationRule = interface; // type: System.Security.AccessControl.AuthorizationRule, namespace: System.Security.AccessControl
  DNAccessRule = interface; // type: System.Security.AccessControl.AccessRule, namespace: System.Security.AccessControl
  DNCryptoKeyAccessRule = interface; // type: System.Security.AccessControl.CryptoKeyAccessRule, namespace: System.Security.AccessControl
  DNEventWaitHandleAccessRule = interface; // type: System.Security.AccessControl.EventWaitHandleAccessRule, namespace: System.Security.AccessControl
  DNFileSystemAccessRule = interface; // type: System.Security.AccessControl.FileSystemAccessRule, namespace: System.Security.AccessControl
  DNMutexAccessRule = interface; // type: System.Security.AccessControl.MutexAccessRule, namespace: System.Security.AccessControl
  DNObjectAccessRule = interface; // type: System.Security.AccessControl.ObjectAccessRule, namespace: System.Security.AccessControl
  DNRegistryAccessRule = interface; // type: System.Security.AccessControl.RegistryAccessRule, namespace: System.Security.AccessControl
  DNAuditRule = interface; // type: System.Security.AccessControl.AuditRule, namespace: System.Security.AccessControl
  DNCryptoKeyAuditRule = interface; // type: System.Security.AccessControl.CryptoKeyAuditRule, namespace: System.Security.AccessControl
  DNEventWaitHandleAuditRule = interface; // type: System.Security.AccessControl.EventWaitHandleAuditRule, namespace: System.Security.AccessControl
  DNFileSystemAuditRule = interface; // type: System.Security.AccessControl.FileSystemAuditRule, namespace: System.Security.AccessControl
  DNMutexAuditRule = interface; // type: System.Security.AccessControl.MutexAuditRule, namespace: System.Security.AccessControl
  DNObjectAuditRule = interface; // type: System.Security.AccessControl.ObjectAuditRule, namespace: System.Security.AccessControl
  DNRegistryAuditRule = interface; // type: System.Security.AccessControl.RegistryAuditRule, namespace: System.Security.AccessControl
  DNGenericAce = interface; // type: System.Security.AccessControl.GenericAce, namespace: System.Security.AccessControl
  DNCustomAce = interface; // type: System.Security.AccessControl.CustomAce, namespace: System.Security.AccessControl
  DNKnownAce = interface; // type: System.Security.AccessControl.KnownAce, namespace: System.Security.AccessControl
  DNCompoundAce = interface; // type: System.Security.AccessControl.CompoundAce, namespace: System.Security.AccessControl
  DNQualifiedAce = interface; // type: System.Security.AccessControl.QualifiedAce, namespace: System.Security.AccessControl
  DNCommonAce = interface; // type: System.Security.AccessControl.CommonAce, namespace: System.Security.AccessControl
  DNObjectAce = interface; // type: System.Security.AccessControl.ObjectAce, namespace: System.Security.AccessControl
  DNGenericAcl = interface; // type: System.Security.AccessControl.GenericAcl, namespace: System.Security.AccessControl
  DNCommonAcl = interface; // type: System.Security.AccessControl.CommonAcl, namespace: System.Security.AccessControl
  DNDiscretionaryAcl = interface; // type: System.Security.AccessControl.DiscretionaryAcl, namespace: System.Security.AccessControl
  DNSystemAcl = interface; // type: System.Security.AccessControl.SystemAcl, namespace: System.Security.AccessControl
  DNRawAcl = interface; // type: System.Security.AccessControl.RawAcl, namespace: System.Security.AccessControl
  DNGenericSecurityDescriptor = interface; // type: System.Security.AccessControl.GenericSecurityDescriptor, namespace: System.Security.AccessControl
  DNCommonSecurityDescriptor = interface; // type: System.Security.AccessControl.CommonSecurityDescriptor, namespace: System.Security.AccessControl
  DNRawSecurityDescriptor = interface; // type: System.Security.AccessControl.RawSecurityDescriptor, namespace: System.Security.AccessControl
  DNObjectSecurity = interface; // type: System.Security.AccessControl.ObjectSecurity, namespace: System.Security.AccessControl
  DNCommonObjectSecurity = interface; // type: System.Security.AccessControl.CommonObjectSecurity, namespace: System.Security.AccessControl
  DNNativeObjectSecurity = interface; // type: System.Security.AccessControl.NativeObjectSecurity, namespace: System.Security.AccessControl
  DNCryptoKeySecurity = interface; // type: System.Security.AccessControl.CryptoKeySecurity, namespace: System.Security.AccessControl
  DNEventWaitHandleSecurity = interface; // type: System.Security.AccessControl.EventWaitHandleSecurity, namespace: System.Security.AccessControl
  DNFileSystemSecurity = interface; // type: System.Security.AccessControl.FileSystemSecurity, namespace: System.Security.AccessControl
  DNDirectorySecurity = interface; // type: System.Security.AccessControl.DirectorySecurity, namespace: System.Security.AccessControl
  DNFileSecurity = interface; // type: System.Security.AccessControl.FileSecurity, namespace: System.Security.AccessControl
  DNMutexSecurity = interface; // type: System.Security.AccessControl.MutexSecurity, namespace: System.Security.AccessControl
  DNRegistrySecurity = interface; // type: System.Security.AccessControl.RegistrySecurity, namespace: System.Security.AccessControl
  DNDirectoryObjectSecurity = interface; // type: System.Security.AccessControl.DirectoryObjectSecurity, namespace: System.Security.AccessControl
  DNClaim = interface; // type: System.Security.Claims.Claim, namespace: System.Security.Claims
  DNClaimsIdentity = interface; // type: System.Security.Claims.ClaimsIdentity, namespace: System.Security.Claims
  DNGenericIdentity = interface; // type: System.Security.Principal.GenericIdentity, namespace: System.Security.Principal
  DNWindowsIdentity = interface; // type: System.Security.Principal.WindowsIdentity, namespace: System.Security.Principal
  DNClaimsPrincipal = interface; // type: System.Security.Claims.ClaimsPrincipal, namespace: System.Security.Claims
  DNGenericPrincipal = interface; // type: System.Security.Principal.GenericPrincipal, namespace: System.Security.Principal
  DNWindowsPrincipal = interface; // type: System.Security.Principal.WindowsPrincipal, namespace: System.Security.Principal
  DNClaimTypes = interface; // type: System.Security.Claims.ClaimTypes, namespace: System.Security.Claims
  DNClaimValueTypes = interface; // type: System.Security.Claims.ClaimValueTypes, namespace: System.Security.Claims
  DNCodeAccessPermission = interface; // type: System.Security.CodeAccessPermission, namespace: System.Security
  DNEnvironmentPermission = interface; // type: System.Security.Permissions.EnvironmentPermission, namespace: System.Security.Permissions
  DNFileDialogPermission = interface; // type: System.Security.Permissions.FileDialogPermission, namespace: System.Security.Permissions
  DNFileIOPermission = interface; // type: System.Security.Permissions.FileIOPermission, namespace: System.Security.Permissions
  DNGacIdentityPermission = interface; // type: System.Security.Permissions.GacIdentityPermission, namespace: System.Security.Permissions
  DNIsolatedStoragePermission = interface; // type: System.Security.Permissions.IsolatedStoragePermission, namespace: System.Security.Permissions
  DNIsolatedStorageFilePermission = interface; // type: System.Security.Permissions.IsolatedStorageFilePermission, namespace: System.Security.Permissions
  DNKeyContainerPermission = interface; // type: System.Security.Permissions.KeyContainerPermission, namespace: System.Security.Permissions
  DNPublisherIdentityPermission = interface; // type: System.Security.Permissions.PublisherIdentityPermission, namespace: System.Security.Permissions
  DNReflectionPermission = interface; // type: System.Security.Permissions.ReflectionPermission, namespace: System.Security.Permissions
  DNRegistryPermission = interface; // type: System.Security.Permissions.RegistryPermission, namespace: System.Security.Permissions
  DNSecurityPermission = interface; // type: System.Security.Permissions.SecurityPermission, namespace: System.Security.Permissions
  DNSiteIdentityPermission = interface; // type: System.Security.Permissions.SiteIdentityPermission, namespace: System.Security.Permissions
  DNStrongNameIdentityPermission = interface; // type: System.Security.Permissions.StrongNameIdentityPermission, namespace: System.Security.Permissions
  DNUIPermission = interface; // type: System.Security.Permissions.UIPermission, namespace: System.Security.Permissions
  DNUrlIdentityPermission = interface; // type: System.Security.Permissions.UrlIdentityPermission, namespace: System.Security.Permissions
  DNZoneIdentityPermission = interface; // type: System.Security.Permissions.ZoneIdentityPermission, namespace: System.Security.Permissions
  DNAsymmetricAlgorithm = interface; // type: System.Security.Cryptography.AsymmetricAlgorithm, namespace: System.Security.Cryptography
  DNDSA = interface; // type: System.Security.Cryptography.DSA, namespace: System.Security.Cryptography
  DNDSACryptoServiceProvider = interface; // type: System.Security.Cryptography.DSACryptoServiceProvider, namespace: System.Security.Cryptography
  DNRSA = interface; // type: System.Security.Cryptography.RSA, namespace: System.Security.Cryptography
  DNRSACryptoServiceProvider = interface; // type: System.Security.Cryptography.RSACryptoServiceProvider, namespace: System.Security.Cryptography
  DNAsymmetricKeyExchangeDeformatter = interface; // type: System.Security.Cryptography.AsymmetricKeyExchangeDeformatter, namespace: System.Security.Cryptography
  DNRSAOAEPKeyExchangeDeformatter = interface; // type: System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter, namespace: System.Security.Cryptography
  DNRSAPKCS1KeyExchangeDeformatter = interface; // type: System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter, namespace: System.Security.Cryptography
  DNAsymmetricKeyExchangeFormatter = interface; // type: System.Security.Cryptography.AsymmetricKeyExchangeFormatter, namespace: System.Security.Cryptography
  DNRSAOAEPKeyExchangeFormatter = interface; // type: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter, namespace: System.Security.Cryptography
  DNRSAPKCS1KeyExchangeFormatter = interface; // type: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter, namespace: System.Security.Cryptography
  DNAsymmetricSignatureDeformatter = interface; // type: System.Security.Cryptography.AsymmetricSignatureDeformatter, namespace: System.Security.Cryptography
  DNDSASignatureDeformatter = interface; // type: System.Security.Cryptography.DSASignatureDeformatter, namespace: System.Security.Cryptography
  DNRSAPKCS1SignatureDeformatter = interface; // type: System.Security.Cryptography.RSAPKCS1SignatureDeformatter, namespace: System.Security.Cryptography
  DNAsymmetricSignatureFormatter = interface; // type: System.Security.Cryptography.AsymmetricSignatureFormatter, namespace: System.Security.Cryptography
  DNDSASignatureFormatter = interface; // type: System.Security.Cryptography.DSASignatureFormatter, namespace: System.Security.Cryptography
  DNRSAPKCS1SignatureFormatter = interface; // type: System.Security.Cryptography.RSAPKCS1SignatureFormatter, namespace: System.Security.Cryptography
  DNCryptoAPITransform = interface; // type: System.Security.Cryptography.CryptoAPITransform, namespace: System.Security.Cryptography
  DNCryptoConfig = interface; // type: System.Security.Cryptography.CryptoConfig, namespace: System.Security.Cryptography
  DNCspKeyContainerInfo = interface; // type: System.Security.Cryptography.CspKeyContainerInfo, namespace: System.Security.Cryptography
  DNCspParameters = interface; // type: System.Security.Cryptography.CspParameters, namespace: System.Security.Cryptography
  DNDeriveBytes = interface; // type: System.Security.Cryptography.DeriveBytes, namespace: System.Security.Cryptography
  DNPasswordDeriveBytes = interface; // type: System.Security.Cryptography.PasswordDeriveBytes, namespace: System.Security.Cryptography
  DNRfc2898DeriveBytes = interface; // type: System.Security.Cryptography.Rfc2898DeriveBytes, namespace: System.Security.Cryptography
  DNFromBase64Transform = interface; // type: System.Security.Cryptography.FromBase64Transform, namespace: System.Security.Cryptography
  DNHashAlgorithm = interface; // type: System.Security.Cryptography.HashAlgorithm, namespace: System.Security.Cryptography
  DNKeyedHashAlgorithm = interface; // type: System.Security.Cryptography.KeyedHashAlgorithm, namespace: System.Security.Cryptography
  DNHMAC = interface; // type: System.Security.Cryptography.HMAC, namespace: System.Security.Cryptography
  DNHMACMD5 = interface; // type: System.Security.Cryptography.HMACMD5, namespace: System.Security.Cryptography
  DNHMACRIPEMD160 = interface; // type: System.Security.Cryptography.HMACRIPEMD160, namespace: System.Security.Cryptography
  DNHMACSHA1 = interface; // type: System.Security.Cryptography.HMACSHA1, namespace: System.Security.Cryptography
  DNHMACSHA256 = interface; // type: System.Security.Cryptography.HMACSHA256, namespace: System.Security.Cryptography
  DNHMACSHA384 = interface; // type: System.Security.Cryptography.HMACSHA384, namespace: System.Security.Cryptography
  DNHMACSHA512 = interface; // type: System.Security.Cryptography.HMACSHA512, namespace: System.Security.Cryptography
  DNMACTripleDES = interface; // type: System.Security.Cryptography.MACTripleDES, namespace: System.Security.Cryptography
  DNMD5 = interface; // type: System.Security.Cryptography.MD5, namespace: System.Security.Cryptography
  DNMD5CryptoServiceProvider = interface; // type: System.Security.Cryptography.MD5CryptoServiceProvider, namespace: System.Security.Cryptography
  DNRIPEMD160 = interface; // type: System.Security.Cryptography.RIPEMD160, namespace: System.Security.Cryptography
  DNRIPEMD160Managed = interface; // type: System.Security.Cryptography.RIPEMD160Managed, namespace: System.Security.Cryptography
  DNSHA1 = interface; // type: System.Security.Cryptography.SHA1, namespace: System.Security.Cryptography
  DNSHA1CryptoServiceProvider = interface; // type: System.Security.Cryptography.SHA1CryptoServiceProvider, namespace: System.Security.Cryptography
  DNSHA1Managed = interface; // type: System.Security.Cryptography.SHA1Managed, namespace: System.Security.Cryptography
  DNSHA256 = interface; // type: System.Security.Cryptography.SHA256, namespace: System.Security.Cryptography
  DNSHA256Managed = interface; // type: System.Security.Cryptography.SHA256Managed, namespace: System.Security.Cryptography
  DNSHA384 = interface; // type: System.Security.Cryptography.SHA384, namespace: System.Security.Cryptography
  DNSHA384Managed = interface; // type: System.Security.Cryptography.SHA384Managed, namespace: System.Security.Cryptography
  DNSHA512 = interface; // type: System.Security.Cryptography.SHA512, namespace: System.Security.Cryptography
  DNSHA512Managed = interface; // type: System.Security.Cryptography.SHA512Managed, namespace: System.Security.Cryptography
  DNICspAsymmetricAlgorithm = interface; // type: System.Security.Cryptography.ICspAsymmetricAlgorithm, namespace: System.Security.Cryptography
  DNKeySizes = interface; // type: System.Security.Cryptography.KeySizes, namespace: System.Security.Cryptography
  DNMaskGenerationMethod = interface; // type: System.Security.Cryptography.MaskGenerationMethod, namespace: System.Security.Cryptography
  DNPKCS1MaskGenerationMethod = interface; // type: System.Security.Cryptography.PKCS1MaskGenerationMethod, namespace: System.Security.Cryptography
  DNRandomNumberGenerator = interface; // type: System.Security.Cryptography.RandomNumberGenerator, namespace: System.Security.Cryptography
  DNRNGCryptoServiceProvider = interface; // type: System.Security.Cryptography.RNGCryptoServiceProvider, namespace: System.Security.Cryptography
  DNRijndaelManagedTransform = interface; // type: System.Security.Cryptography.RijndaelManagedTransform, namespace: System.Security.Cryptography
  DNRSAEncryptionPadding = interface; // type: System.Security.Cryptography.RSAEncryptionPadding, namespace: System.Security.Cryptography
  DNRSASignaturePadding = interface; // type: System.Security.Cryptography.RSASignaturePadding, namespace: System.Security.Cryptography
  DNSignatureDescription = interface; // type: System.Security.Cryptography.SignatureDescription, namespace: System.Security.Cryptography
  DNSymmetricAlgorithm = interface; // type: System.Security.Cryptography.SymmetricAlgorithm, namespace: System.Security.Cryptography
  DNAes = interface; // type: System.Security.Cryptography.Aes, namespace: System.Security.Cryptography
  DNDES = interface; // type: System.Security.Cryptography.DES, namespace: System.Security.Cryptography
  DNDESCryptoServiceProvider = interface; // type: System.Security.Cryptography.DESCryptoServiceProvider, namespace: System.Security.Cryptography
  DNRC2 = interface; // type: System.Security.Cryptography.RC2, namespace: System.Security.Cryptography
  DNRC2CryptoServiceProvider = interface; // type: System.Security.Cryptography.RC2CryptoServiceProvider, namespace: System.Security.Cryptography
  DNRijndael = interface; // type: System.Security.Cryptography.Rijndael, namespace: System.Security.Cryptography
  DNRijndaelManaged = interface; // type: System.Security.Cryptography.RijndaelManaged, namespace: System.Security.Cryptography
  DNTripleDES = interface; // type: System.Security.Cryptography.TripleDES, namespace: System.Security.Cryptography
  DNTripleDESCryptoServiceProvider = interface; // type: System.Security.Cryptography.TripleDESCryptoServiceProvider, namespace: System.Security.Cryptography
  DNToBase64Transform = interface; // type: System.Security.Cryptography.ToBase64Transform, namespace: System.Security.Cryptography
  DNX509Certificate = interface; // type: System.Security.Cryptography.X509Certificates.X509Certificate, namespace: System.Security.Cryptography.X509Certificates
  DNHostSecurityManager = interface; // type: System.Security.HostSecurityManager, namespace: System.Security
  DNIEvidenceFactory = interface; // type: System.Security.IEvidenceFactory, namespace: System.Security
  DNISecurityEncodable = interface; // type: System.Security.ISecurityEncodable, namespace: System.Security
  DNIPermission = interface; // type: System.Security.IPermission, namespace: System.Security
  DNIApplicationTrustManager = interface; // type: System.Security.Policy.IApplicationTrustManager, namespace: System.Security.Policy
  DNIMembershipCondition = interface; // type: System.Security.Policy.IMembershipCondition, namespace: System.Security.Policy
  DNISecurityPolicyEncodable = interface; // type: System.Security.ISecurityPolicyEncodable, namespace: System.Security
  DNIStackWalk = interface; // type: System.Security.IStackWalk, namespace: System.Security
  DNIUnrestrictedPermission = interface; // type: System.Security.Permissions.IUnrestrictedPermission, namespace: System.Security.Permissions
  DNKeyContainerPermissionAccessEntry = interface; // type: System.Security.Permissions.KeyContainerPermissionAccessEntry, namespace: System.Security.Permissions
  DNKeyContainerPermissionAccessEntryCollection = interface; // type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection, namespace: System.Security.Permissions
  DNKeyContainerPermissionAccessEntryEnumerator = interface; // type: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator, namespace: System.Security.Permissions
  DNPrincipalPermission = interface; // type: System.Security.Permissions.PrincipalPermission, namespace: System.Security.Permissions
  DNStrongNamePublicKeyBlob = interface; // type: System.Security.Permissions.StrongNamePublicKeyBlob, namespace: System.Security.Permissions
  DNPermissionSet = interface; // type: System.Security.PermissionSet, namespace: System.Security
  DNNamedPermissionSet = interface; // type: System.Security.NamedPermissionSet, namespace: System.Security
  DNReadOnlyPermissionSet = interface; // type: System.Security.ReadOnlyPermissionSet, namespace: System.Security
  DNAllMembershipCondition = interface; // type: System.Security.Policy.AllMembershipCondition, namespace: System.Security.Policy
  DNApplicationDirectoryMembershipCondition = interface; // type: System.Security.Policy.ApplicationDirectoryMembershipCondition, namespace: System.Security.Policy
  DNApplicationSecurityInfo = interface; // type: System.Security.Policy.ApplicationSecurityInfo, namespace: System.Security.Policy
  DNApplicationSecurityManager = interface; // type: System.Security.Policy.ApplicationSecurityManager, namespace: System.Security.Policy
  DNApplicationTrustCollection = interface; // type: System.Security.Policy.ApplicationTrustCollection, namespace: System.Security.Policy
  DNApplicationTrustEnumerator = interface; // type: System.Security.Policy.ApplicationTrustEnumerator, namespace: System.Security.Policy
  DNCodeConnectAccess = interface; // type: System.Security.Policy.CodeConnectAccess, namespace: System.Security.Policy
  DNCodeGroup = interface; // type: System.Security.Policy.CodeGroup, namespace: System.Security.Policy
  DNFileCodeGroup = interface; // type: System.Security.Policy.FileCodeGroup, namespace: System.Security.Policy
  DNFirstMatchCodeGroup = interface; // type: System.Security.Policy.FirstMatchCodeGroup, namespace: System.Security.Policy
  DNNetCodeGroup = interface; // type: System.Security.Policy.NetCodeGroup, namespace: System.Security.Policy
  DNUnionCodeGroup = interface; // type: System.Security.Policy.UnionCodeGroup, namespace: System.Security.Policy
  DNEvidence = interface; // type: System.Security.Policy.Evidence, namespace: System.Security.Policy
  DNEvidenceBase = interface; // type: System.Security.Policy.EvidenceBase, namespace: System.Security.Policy
  DNActivationArguments = interface; // type: System.Runtime.Hosting.ActivationArguments, namespace: System.Runtime.Hosting
  DNApplicationDirectory = interface; // type: System.Security.Policy.ApplicationDirectory, namespace: System.Security.Policy
  DNApplicationTrust = interface; // type: System.Security.Policy.ApplicationTrust, namespace: System.Security.Policy
  DNGacInstalled = interface; // type: System.Security.Policy.GacInstalled, namespace: System.Security.Policy
  DNHash = interface; // type: System.Security.Policy.Hash, namespace: System.Security.Policy
  DNPermissionRequestEvidence = interface; // type: System.Security.Policy.PermissionRequestEvidence, namespace: System.Security.Policy
  DNPublisher = interface; // type: System.Security.Policy.Publisher, namespace: System.Security.Policy
  DNSite = interface; // type: System.Security.Policy.Site, namespace: System.Security.Policy
  DNStrongName = interface; // type: System.Security.Policy.StrongName, namespace: System.Security.Policy
  DNUrl = interface; // type: System.Security.Policy.Url, namespace: System.Security.Policy
  DNZone = interface; // type: System.Security.Policy.Zone, namespace: System.Security.Policy
  DNGacMembershipCondition = interface; // type: System.Security.Policy.GacMembershipCondition, namespace: System.Security.Policy
  DNHashMembershipCondition = interface; // type: System.Security.Policy.HashMembershipCondition, namespace: System.Security.Policy
  DNIIdentityPermissionFactory = interface; // type: System.Security.Policy.IIdentityPermissionFactory, namespace: System.Security.Policy
  DNPolicyLevel = interface; // type: System.Security.Policy.PolicyLevel, namespace: System.Security.Policy
  DNPolicyStatement = interface; // type: System.Security.Policy.PolicyStatement, namespace: System.Security.Policy
  DNPublisherMembershipCondition = interface; // type: System.Security.Policy.PublisherMembershipCondition, namespace: System.Security.Policy
  DNSiteMembershipCondition = interface; // type: System.Security.Policy.SiteMembershipCondition, namespace: System.Security.Policy
  DNStrongNameMembershipCondition = interface; // type: System.Security.Policy.StrongNameMembershipCondition, namespace: System.Security.Policy
  DNTrustManagerContext = interface; // type: System.Security.Policy.TrustManagerContext, namespace: System.Security.Policy
  DNUrlMembershipCondition = interface; // type: System.Security.Policy.UrlMembershipCondition, namespace: System.Security.Policy
  DNZoneMembershipCondition = interface; // type: System.Security.Policy.ZoneMembershipCondition, namespace: System.Security.Policy
  DNIdentityReference = interface; // type: System.Security.Principal.IdentityReference, namespace: System.Security.Principal
  DNNTAccount = interface; // type: System.Security.Principal.NTAccount, namespace: System.Security.Principal
  DNSecurityIdentifier = interface; // type: System.Security.Principal.SecurityIdentifier, namespace: System.Security.Principal
  DNIdentityReferenceCollection = interface; // type: System.Security.Principal.IdentityReferenceCollection, namespace: System.Security.Principal
  DNIIdentity = interface; // type: System.Security.Principal.IIdentity, namespace: System.Security.Principal
  DNIPrincipal = interface; // type: System.Security.Principal.IPrincipal, namespace: System.Security.Principal
  DNWindowsImpersonationContext = interface; // type: System.Security.Principal.WindowsImpersonationContext, namespace: System.Security.Principal
  DNSecureString = interface; // type: System.Security.SecureString, namespace: System.Security
  DNSecurityContext = interface; // type: System.Security.SecurityContext, namespace: System.Security
  DNSecurityElement = interface; // type: System.Security.SecurityElement, namespace: System.Security
  DNSecurityManager = interface; // type: System.Security.SecurityManager, namespace: System.Security
  DNSecurityState = interface; // type: System.Security.SecurityState, namespace: System.Security
  DNIsolatedStorageSecurityState = interface; // type: System.IO.IsolatedStorage.IsolatedStorageSecurityState, namespace: System.IO.IsolatedStorage
  DNStringComparer = interface; // type: System.StringComparer, namespace: System
  DNDecoder = interface; // type: System.Text.Decoder, namespace: System.Text
  DNDecoderFallback = interface; // type: System.Text.DecoderFallback, namespace: System.Text
  DNDecoderExceptionFallback = interface; // type: System.Text.DecoderExceptionFallback, namespace: System.Text
  DNDecoderReplacementFallback = interface; // type: System.Text.DecoderReplacementFallback, namespace: System.Text
  DNDecoderFallbackBuffer = interface; // type: System.Text.DecoderFallbackBuffer, namespace: System.Text
  DNDecoderExceptionFallbackBuffer = interface; // type: System.Text.DecoderExceptionFallbackBuffer, namespace: System.Text
  DNDecoderReplacementFallbackBuffer = interface; // type: System.Text.DecoderReplacementFallbackBuffer, namespace: System.Text
  DNEncoder = interface; // type: System.Text.Encoder, namespace: System.Text
  DNEncoderFallback = interface; // type: System.Text.EncoderFallback, namespace: System.Text
  DNEncoderExceptionFallback = interface; // type: System.Text.EncoderExceptionFallback, namespace: System.Text
  DNEncoderReplacementFallback = interface; // type: System.Text.EncoderReplacementFallback, namespace: System.Text
  DNEncoderFallbackBuffer = interface; // type: System.Text.EncoderFallbackBuffer, namespace: System.Text
  DNEncoderExceptionFallbackBuffer = interface; // type: System.Text.EncoderExceptionFallbackBuffer, namespace: System.Text
  DNEncoderReplacementFallbackBuffer = interface; // type: System.Text.EncoderReplacementFallbackBuffer, namespace: System.Text
  DNEncoding = interface; // type: System.Text.Encoding, namespace: System.Text
  DNASCIIEncoding = interface; // type: System.Text.ASCIIEncoding, namespace: System.Text
  DNUnicodeEncoding = interface; // type: System.Text.UnicodeEncoding, namespace: System.Text
  DNUTF32Encoding = interface; // type: System.Text.UTF32Encoding, namespace: System.Text
  DNUTF7Encoding = interface; // type: System.Text.UTF7Encoding, namespace: System.Text
  DNUTF8Encoding = interface; // type: System.Text.UTF8Encoding, namespace: System.Text
  DNEncodingInfo = interface; // type: System.Text.EncodingInfo, namespace: System.Text
  DNEncodingProvider = interface; // type: System.Text.EncodingProvider, namespace: System.Text
  DNStringBuilder = interface; // type: System.Text.StringBuilder, namespace: System.Text
  DNCancellationTokenSource = interface; // type: System.Threading.CancellationTokenSource, namespace: System.Threading
  DNCompressedStack = interface; // type: System.Threading.CompressedStack, namespace: System.Threading
  DNCountdownEvent = interface; // type: System.Threading.CountdownEvent, namespace: System.Threading
  DNExecutionContext = interface; // type: System.Threading.ExecutionContext, namespace: System.Threading
  DNHostExecutionContext = interface; // type: System.Threading.HostExecutionContext, namespace: System.Threading
  DNHostExecutionContextManager = interface; // type: System.Threading.HostExecutionContextManager, namespace: System.Threading
  DNInterlocked = interface; // type: System.Threading.Interlocked, namespace: System.Threading
  DNLazyInitializer = interface; // type: System.Threading.LazyInitializer, namespace: System.Threading
  DNManualResetEventSlim = interface; // type: System.Threading.ManualResetEventSlim, namespace: System.Threading
  DNMonitor = interface; // type: System.Threading.Monitor, namespace: System.Threading
  DNOverlapped = interface; // type: System.Threading.Overlapped, namespace: System.Threading
  DNPreAllocatedOverlapped = interface; // type: System.Threading.PreAllocatedOverlapped, namespace: System.Threading
  DNSemaphoreSlim = interface; // type: System.Threading.SemaphoreSlim, namespace: System.Threading
  DNSynchronizationContext = interface; // type: System.Threading.SynchronizationContext, namespace: System.Threading
  DNConcurrentExclusiveSchedulerPair = interface; // type: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair, namespace: System.Threading.Tasks
  DNParallel = interface; // type: System.Threading.Tasks.Parallel, namespace: System.Threading.Tasks
  DNParallelLoopState = interface; // type: System.Threading.Tasks.ParallelLoopState, namespace: System.Threading.Tasks
  DNParallelOptions = interface; // type: System.Threading.Tasks.ParallelOptions, namespace: System.Threading.Tasks
  DNTask = interface; // type: System.Threading.Tasks.Task, namespace: System.Threading.Tasks
  DNTaskFactory = interface; // type: System.Threading.Tasks.TaskFactory, namespace: System.Threading.Tasks
  DNTaskScheduler = interface; // type: System.Threading.Tasks.TaskScheduler, namespace: System.Threading.Tasks
  DNThreadPool = interface; // type: System.Threading.ThreadPool, namespace: System.Threading
  DNThreadPoolBoundHandle = interface; // type: System.Threading.ThreadPoolBoundHandle, namespace: System.Threading
  DNTimeout = interface; // type: System.Threading.Timeout, namespace: System.Threading
  DNVolatile = interface; // type: System.Threading.Volatile, namespace: System.Threading
  DNWaitHandleExtensions = interface; // type: System.Threading.WaitHandleExtensions, namespace: System.Threading
  DNTimeZone = interface; // type: System.TimeZone, namespace: System
  DNTimeZoneInfo = interface; // type: System.TimeZoneInfo, namespace: System
  DNTimeZoneInfo_AdjustmentRule = interface; // type: System.TimeZoneInfo+AdjustmentRule, namespace: System
  DNTuple = interface; // type: System.Tuple, namespace: System
  DNTupleExtensions = interface; // type: System.TupleExtensions, namespace: System
  DNValueType = interface; // type: System.ValueType, namespace: System
  DNArgIterator = interface; // type: System.ArgIterator, namespace: System
  DNDictionaryEntry = interface; // type: System.Collections.DictionaryEntry, namespace: System.Collections
  DNAssemblyHash = interface; // type: System.Configuration.Assemblies.AssemblyHash, namespace: System.Configuration.Assemblies
  DNConsoleKeyInfo = interface; // type: System.ConsoleKeyInfo, namespace: System
  DNDateTime = interface; // type: System.DateTime, namespace: System
  DNDateTimeOffset = interface; // type: System.DateTimeOffset, namespace: System
  DNDecimal = interface; // type: System.Decimal, namespace: System
  DNSymbolToken = interface; // type: System.Diagnostics.SymbolStore.SymbolToken, namespace: System.Diagnostics.SymbolStore
  DNEventSourceOptions = interface; // type: System.Diagnostics.Tracing.EventSourceOptions, namespace: System.Diagnostics.Tracing
  DNEnum = interface; // type: System.Enum, namespace: System
  DNGuid = interface; // type: System.Guid, namespace: System
  DNModuleHandle = interface; // type: System.ModuleHandle, namespace: System
  DNCustomAttributeNamedArgument = interface; // type: System.Reflection.CustomAttributeNamedArgument, namespace: System.Reflection
  DNCustomAttributeTypedArgument = interface; // type: System.Reflection.CustomAttributeTypedArgument, namespace: System.Reflection
  DNEventToken = interface; // type: System.Reflection.Emit.EventToken, namespace: System.Reflection.Emit
  DNExceptionHandler = interface; // type: System.Reflection.Emit.ExceptionHandler, namespace: System.Reflection.Emit
  DNFieldToken = interface; // type: System.Reflection.Emit.FieldToken, namespace: System.Reflection.Emit
  DNLabel = interface; // type: System.Reflection.Emit.Label, namespace: System.Reflection.Emit
  DNMethodToken = interface; // type: System.Reflection.Emit.MethodToken, namespace: System.Reflection.Emit
  DNOpCode = interface; // type: System.Reflection.Emit.OpCode, namespace: System.Reflection.Emit
  DNParameterToken = interface; // type: System.Reflection.Emit.ParameterToken, namespace: System.Reflection.Emit
  DNPropertyToken = interface; // type: System.Reflection.Emit.PropertyToken, namespace: System.Reflection.Emit
  DNSignatureToken = interface; // type: System.Reflection.Emit.SignatureToken, namespace: System.Reflection.Emit
  DNStringToken = interface; // type: System.Reflection.Emit.StringToken, namespace: System.Reflection.Emit
  DNTypeToken = interface; // type: System.Reflection.Emit.TypeToken, namespace: System.Reflection.Emit
  DNInterfaceMapping = interface; // type: System.Reflection.InterfaceMapping, namespace: System.Reflection
  DNParameterModifier = interface; // type: System.Reflection.ParameterModifier, namespace: System.Reflection
  DNAsyncTaskMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, namespace: System.Runtime.CompilerServices
  DNAsyncVoidMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, namespace: System.Runtime.CompilerServices
  DNConfiguredTaskAwaitable = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable, namespace: System.Runtime.CompilerServices
  DNConfiguredTaskAwaitable_ConfiguredTaskAwaiter = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNTaskAwaiter = interface; // type: System.Runtime.CompilerServices.TaskAwaiter, namespace: System.Runtime.CompilerServices
  DNYieldAwaitable = interface; // type: System.Runtime.CompilerServices.YieldAwaitable, namespace: System.Runtime.CompilerServices
  DNYieldAwaitable_YieldAwaiter = interface; // type: System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter, namespace: System.Runtime.CompilerServices
  DNArrayWithOffset = interface; // type: System.Runtime.InteropServices.ArrayWithOffset, namespace: System.Runtime.InteropServices
  DNInteropServices_BIND_OPTS = interface; // type: System.Runtime.InteropServices.BIND_OPTS, namespace: System.Runtime.InteropServices
  DNInteropServices_BINDPTR = interface; // type: System.Runtime.InteropServices.BINDPTR, namespace: System.Runtime.InteropServices
  DNComTypes_BIND_OPTS = interface; // type: System.Runtime.InteropServices.ComTypes.BIND_OPTS, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_BINDPTR = interface; // type: System.Runtime.InteropServices.ComTypes.BINDPTR, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_CONNECTDATA = interface; // type: System.Runtime.InteropServices.ComTypes.CONNECTDATA, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_DISPPARAMS = interface; // type: System.Runtime.InteropServices.ComTypes.DISPPARAMS, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_ELEMDESC = interface; // type: System.Runtime.InteropServices.ComTypes.ELEMDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_ELEMDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_EXCEPINFO = interface; // type: System.Runtime.InteropServices.ComTypes.EXCEPINFO, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_FILETIME = interface; // type: System.Runtime.InteropServices.ComTypes.FILETIME, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_FUNCDESC = interface; // type: System.Runtime.InteropServices.ComTypes.FUNCDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_IDLDESC = interface; // type: System.Runtime.InteropServices.ComTypes.IDLDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_PARAMDESC = interface; // type: System.Runtime.InteropServices.ComTypes.PARAMDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_STATSTG = interface; // type: System.Runtime.InteropServices.ComTypes.STATSTG, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_TYPEATTR = interface; // type: System.Runtime.InteropServices.ComTypes.TYPEATTR, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_TYPEDESC = interface; // type: System.Runtime.InteropServices.ComTypes.TYPEDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_TYPELIBATTR = interface; // type: System.Runtime.InteropServices.ComTypes.TYPELIBATTR, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_VARDESC = interface; // type: System.Runtime.InteropServices.ComTypes.VARDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_VARDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION, namespace: System.Runtime.InteropServices.ComTypes
  DNInteropServices_CONNECTDATA = interface; // type: System.Runtime.InteropServices.CONNECTDATA, namespace: System.Runtime.InteropServices
  DNInteropServices_DISPPARAMS = interface; // type: System.Runtime.InteropServices.DISPPARAMS, namespace: System.Runtime.InteropServices
  DNInteropServices_ELEMDESC = interface; // type: System.Runtime.InteropServices.ELEMDESC, namespace: System.Runtime.InteropServices
  DNInteropServices_ELEMDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.ELEMDESC+DESCUNION, namespace: System.Runtime.InteropServices
  DNInteropServices_EXCEPINFO = interface; // type: System.Runtime.InteropServices.EXCEPINFO, namespace: System.Runtime.InteropServices
  DNInteropServices_FILETIME = interface; // type: System.Runtime.InteropServices.FILETIME, namespace: System.Runtime.InteropServices
  DNInteropServices_FUNCDESC = interface; // type: System.Runtime.InteropServices.FUNCDESC, namespace: System.Runtime.InteropServices
  DNGCHandle = interface; // type: System.Runtime.InteropServices.GCHandle, namespace: System.Runtime.InteropServices
  DNHandleRef = interface; // type: System.Runtime.InteropServices.HandleRef, namespace: System.Runtime.InteropServices
  DNInteropServices_IDLDESC = interface; // type: System.Runtime.InteropServices.IDLDESC, namespace: System.Runtime.InteropServices
  DNOSPlatform = interface; // type: System.Runtime.InteropServices.OSPlatform, namespace: System.Runtime.InteropServices
  DNInteropServices_PARAMDESC = interface; // type: System.Runtime.InteropServices.PARAMDESC, namespace: System.Runtime.InteropServices
  DNInteropServices_STATSTG = interface; // type: System.Runtime.InteropServices.STATSTG, namespace: System.Runtime.InteropServices
  DNInteropServices_TYPEATTR = interface; // type: System.Runtime.InteropServices.TYPEATTR, namespace: System.Runtime.InteropServices
  DNInteropServices_TYPEDESC = interface; // type: System.Runtime.InteropServices.TYPEDESC, namespace: System.Runtime.InteropServices
  DNInteropServices_TYPELIBATTR = interface; // type: System.Runtime.InteropServices.TYPELIBATTR, namespace: System.Runtime.InteropServices
  DNInteropServices_VARDESC = interface; // type: System.Runtime.InteropServices.VARDESC, namespace: System.Runtime.InteropServices
  DNInteropServices_VARDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.VARDESC+DESCUNION, namespace: System.Runtime.InteropServices
  DNEventRegistrationToken = interface; // type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNSerializationEntry = interface; // type: System.Runtime.Serialization.SerializationEntry, namespace: System.Runtime.Serialization
  DNStreamingContext = interface; // type: System.Runtime.Serialization.StreamingContext, namespace: System.Runtime.Serialization
  DNRuntimeArgumentHandle = interface; // type: System.RuntimeArgumentHandle, namespace: System
  DNRuntimeFieldHandle = interface; // type: System.RuntimeFieldHandle, namespace: System
  DNRuntimeMethodHandle = interface; // type: System.RuntimeMethodHandle, namespace: System
  DNRuntimeTypeHandle = interface; // type: System.RuntimeTypeHandle, namespace: System
  DNDSAParameters = interface; // type: System.Security.Cryptography.DSAParameters, namespace: System.Security.Cryptography
  DNHashAlgorithmName = interface; // type: System.Security.Cryptography.HashAlgorithmName, namespace: System.Security.Cryptography
  DNRSAParameters = interface; // type: System.Security.Cryptography.RSAParameters, namespace: System.Security.Cryptography
  DNAsyncFlowControl = interface; // type: System.Threading.AsyncFlowControl, namespace: System.Threading
  DNCancellationToken = interface; // type: System.Threading.CancellationToken, namespace: System.Threading
  DNCancellationTokenRegistration = interface; // type: System.Threading.CancellationTokenRegistration, namespace: System.Threading
  DNLockCookie = interface; // type: System.Threading.LockCookie, namespace: System.Threading
  DNNativeOverlapped = interface; // type: System.Threading.NativeOverlapped, namespace: System.Threading
  DNSpinLock = interface; // type: System.Threading.SpinLock, namespace: System.Threading
  DNSpinWait = interface; // type: System.Threading.SpinWait, namespace: System.Threading
  DNParallelLoopResult = interface; // type: System.Threading.Tasks.ParallelLoopResult, namespace: System.Threading.Tasks
  DNTimeSpan = interface; // type: System.TimeSpan, namespace: System
  DNTimeZoneInfo_TransitionTime = interface; // type: System.TimeZoneInfo+TransitionTime, namespace: System
  DNTypedReference = interface; // type: System.TypedReference, namespace: System
  DNValueTuple = interface; // type: System.ValueTuple, namespace: System
  DNVoid = interface; // type: System.Void, namespace: System
  DNVersion = interface; // type: System.Version, namespace: System
  DNWeakReference = interface; // type: System.WeakReference, namespace: System


{ objects }


  DNObjectClass = interface(IDNClass)
    [IID_DNObjectClass_Name]
  { class } function init : DNObject;
  end;

  [DNTypeName(DNObject_FullName)]
  DNObject = interface(IDNInstance)
    [IID_DNObject_Name]
    function Equals(obj: DNObject) : Boolean;
    function GetHashCode : Int32;
    function GetType : DNType;
    function ToString : string;
  end;
  TDNObject = class(TDNGenericImport<DNObjectClass, DNObject>) end;


  //-------------namespace: Microsoft.Win32----------------
  DNRegistryClass = interface(DNObjectClass)
  ['{8D11689D-7128-4ADE-B3D2-E4D55C2180F5}']
  { static methods } 

    /// <summary>
    ///   检索与指定的注册表项中的指定名称关联的值。
    ///               如果在指定键未找到的名称，将返回你提供的默认值或如果指定的键不存在。
    /// </summary>
    {class} function GetValue(keyName: string; valueName: string; defaultValue: DNObject): DNObject;
    /// <summary>
    ///   在指定的注册表项上设置指定的名称/值对。
    ///               如果指定的键不存在，则创建它。
    /// </summary>
    {class} procedure SetValue(keyName: string; valueName: string; value: DNObject); overload;
    /// <summary>
    ///   在指定的注册表项，使用指定的注册表数据类型上设置的名称/值对。
    ///               如果指定的键不存在，则创建它。
    /// </summary>
    {class} procedure SetValue(keyName: string; valueName: string; value: DNObject; valueKind: DNRegistryValueKind); overload;

  end;

  /// <summary>
  ///   提供表示 Windows 注册表中的根键的对象和方法，以访问键/值对。
  /// </summary>
  [DNTypeName('Microsoft.Win32.Registry')]
  DNRegistry = interface(DNObject)
  ['{9B4EF4FA-742E-3878-953A-474999711087}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRegistry = class(TDNGenericImport<DNRegistryClass, DNRegistry>) end;

  //-------------namespace: System----------------
  /// <summary>
  ///   公开的公共成员到非托管代码的类。
  /// </summary>
  [DNTypeName('System._AppDomain')]
  DN_AppDomain = interface(DNObject)
  ['{05F696DC-2B29-3663-AD8B-C4389CF2A713}']
  { getter & setter } 

    function get_Evidence: DNEvidence;
    function get_FriendlyName: string;
    function get_BaseDirectory: string;
    function get_RelativeSearchPath: string;
    function get_ShadowCopyFiles: Boolean;
    function get_DynamicDirectory: string;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供独立于版本的访问权限的继承  方法。
    /// </summary>
    function Equals(other: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供独立于版本的访问权限的继承  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function InitializeLifetimeService: DNObject;
    /// <summary>
    ///   为 COM 对象提供独立于版本的访问权限的继承  方法。
    /// </summary>
    function GetLifetimeService: DNObject;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess): DNAssemblyBuilder; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string): DNAssemblyBuilder; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; evidence: DNEvidence): DNAssemblyBuilder; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence): DNAssemblyBuilder; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet; isSynchronized: Boolean): DNAssemblyBuilder; overload;
    /// <summary>
    ///   COM 对象提供独立于版本的访问权限方法。
    /// </summary>
    function CreateInstance(assemblyName: string; typeName: string): DNObjectHandle; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function CreateInstanceFrom(assemblyFile: string; typeName: string): DNObjectHandle; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function CreateInstance(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function CreateInstanceFrom(assemblyFile: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function Load(assemblyRef: DNAssemblyName): DNAssembly; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function Load(assemblyString: string): DNAssembly; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function Load(rawAssembly: TArray<Byte>): DNAssembly; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNAssembly; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>; securityEvidence: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function Load(assemblyRef: DNAssemblyName; assemblySecurity: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function Load(assemblyString: string; assemblySecurity: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function ExecuteAssembly(assemblyFile: string; assemblySecurity: DNEvidence): Int32; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function ExecuteAssembly(assemblyFile: string): Int32; overload;
    /// <summary>
    ///   为 COM 对象提供对  方法重载的与版本无关的访问权限。
    /// </summary>
    function ExecuteAssembly(assemblyFile: string; assemblySecurity: DNEvidence; args: TArray<string>): Int32; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetAssemblies: TArray<DNAssembly>;
    /// <summary>
    ///   COM 对象提供独立于版本的访问权限方法。
    /// </summary>
    procedure AppendPrivatePath(path: string);
    /// <summary>
    ///   COM 对象提供独立于版本的访问权限方法。
    /// </summary>
    procedure ClearPrivatePath;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetShadowCopyPath(s: string);
    /// <summary>
    ///   COM 对象提供独立于版本的访问权限方法。
    /// </summary>
    procedure ClearShadowCopyPath;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetCachePath(s: string);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetData(name: string; data: DNObject);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetData(name: string): DNObject;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetAppDomainPolicy(domainPolicy: DNPolicyLevel);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetThreadPrincipal(principal: DNIPrincipal);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetPrincipalPolicy(policy: DNPrincipalPolicy);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure DoCallBack(theDelegate: DNCrossAppDomainDelegate);

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Evidence: DNEvidence read get_Evidence;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property FriendlyName: string read get_FriendlyName;
    /// <summary>
    ///   COM 对象提供独立于版本的访问权限属性。
    /// </summary>
    property BaseDirectory: string read get_BaseDirectory;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property RelativeSearchPath: string read get_RelativeSearchPath;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ShadowCopyFiles: Boolean read get_ShadowCopyFiles;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property DynamicDirectory: string read get_DynamicDirectory;
  end;

  //-------------namespace: System----------------
  DNActivationContextClass = interface(DNObjectClass)
  ['{4D76CBF2-9A8C-478D-8507-EC266510E62A}']
  { static methods } 

    /// <summary>
    ///   初始化的新实例类使用指定的应用程序标识。
    /// </summary>
    {class} function CreatePartialActivationContext(identity: DNApplicationIdentity): DNActivationContext; overload;
    /// <summary>
    ///   初始化的新实例类使用指定的应用程序标识和清单的路径的数组。
    /// </summary>
    {class} function CreatePartialActivationContext(identity: DNApplicationIdentity; manifestPaths: TArray<string>): DNActivationContext; overload;

  end;

  /// <summary>
  ///   标识当前应用程序的激活上下文。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.ActivationContext')]
  DNActivationContext = interface(DNObject)
  ['{2A7E9689-335E-3820-804B-924EB00C16D6}']
  { getter & setter } 

    function get_Identity: DNApplicationIdentity;
    function get_Form: DNActivationContext_ContextForm;
    function get_ApplicationManifestBytes: TArray<Byte>;
    function get_DeploymentManifestBytes: TArray<Byte>;

  { methods } 

    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前应用程序的应用程序标识。
    /// </summary>
    property Identity: DNApplicationIdentity read get_Identity;
    /// <summary>
    ///   获取当前应用程序的窗体中或存储上下文。
    /// </summary>
    property Form: DNActivationContext_ContextForm read get_Form;
    /// <summary>
    ///   获取当前应用程序的 ClickOnce 应用程序清单。
    /// </summary>
    property ApplicationManifestBytes: TArray<Byte> read get_ApplicationManifestBytes;
    /// <summary>
    ///   获取当前应用程序的 ClickOnce 部署清单。
    /// </summary>
    property DeploymentManifestBytes: TArray<Byte> read get_DeploymentManifestBytes;
  end;

  TDNActivationContext = class(TDNGenericImport<DNActivationContextClass, DNActivationContext>) end;

  //-------------namespace: System----------------
  DNActivatorClass = interface(DNObjectClass)
  ['{34986E6F-A367-4921-8334-02D382E10A64}']
  { static methods } 

    /// <summary>
    ///   使用与指定参数匹配程度最高的构造函数创建指定类型的实例。
    /// </summary>
    {class} function CreateInstance(&type: DNType; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   使用与指定参数匹配程度最高的构造函数创建指定类型的实例。
    /// </summary>
    {class} function CreateInstance(&type: DNType; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   使用与指定参数匹配程度最高的构造函数创建指定类型的实例。
    /// </summary>
    {class} function CreateInstance(&type: DNType; args: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   使用与指定参数匹配程度最高的构造函数创建指定类型的实例。
    /// </summary>
    {class} function CreateInstance(&type: DNType; args: TArray<DNObject>; activationAttributes: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   使用指定类型的默认构造函数来创建该类型的实例。
    /// </summary>
    {class} function CreateInstance(&type: DNType): DNObject; overload;
    /// <summary>
    ///   使用命名的程序集和默认构造函数，创建名称已指定的类型的实例。
    /// </summary>
    {class} function CreateInstance(assemblyName: string; typeName: string): DNObjectHandle; overload;
    /// <summary>
    ///   使用命名的程序集和默认构造函数，创建名称已指定的类型的实例。
    /// </summary>
    {class} function CreateInstance(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   使用指定类型的默认构造函数来创建该类型的实例。
    /// </summary>
    {class} function CreateInstance(&type: DNType; nonPublic: Boolean): DNObject; overload;
    /// <summary>
    ///   使用命名的程序集文件和默认构造函数，创建名称已指定的类型的实例。
    /// </summary>
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string): DNObjectHandle; overload;
    /// <summary>
    ///   使用命名的程序集文件和默认构造函数，创建名称已指定的类型的实例。
    /// </summary>
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   使用指定的程序集和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。
    /// </summary>
    {class} function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityInfo: DNEvidence): DNObjectHandle; overload;
    /// <summary>
    ///   使用指定的程序集和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。
    /// </summary>
    {class} function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。
    /// </summary>
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityInfo: DNEvidence): DNObjectHandle; overload;
    /// <summary>
    ///   使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。
    /// </summary>
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   使用命名的程序集和默认构造函数，来创建其名称在指定的远程域中指定的类型的实例。
    /// </summary>
    {class} function CreateInstance(domain: DNAppDomain; assemblyName: string; typeName: string): DNObjectHandle; overload;
    /// <summary>
    ///   使用命名的程序集和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。
    /// </summary>
    {class} function CreateInstance(domain: DNAppDomain; assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    /// <summary>
    ///   使用命名的程序集和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。
    /// </summary>
    {class} function CreateInstance(domain: DNAppDomain; assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   使用命名的程序集文件和默认构造函数，来创建其名称在指定的远程域中指定的类型的实例。
    /// </summary>
    {class} function CreateInstanceFrom(domain: DNAppDomain; assemblyFile: string; typeName: string): DNObjectHandle; overload;
    /// <summary>
    ///   使用命名的程序集文件和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。
    /// </summary>
    {class} function CreateInstanceFrom(domain: DNAppDomain; assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    /// <summary>
    ///   使用命名的程序集文件和最匹配所指定参数的构造函数，来创建其名称在指定的远程域中指定的类型的实例。
    /// </summary>
    {class} function CreateInstanceFrom(domain: DNAppDomain; assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   创建类型的一个实例，该类型由指定的  对象指定。
    /// </summary>
    {class} function CreateInstance(activationContext: DNActivationContext): DNObjectHandle; overload;
    /// <summary>
    ///   创建类型的一个实例，该类型由指定的  对象指定，并由指定的自定义激活数据激活。
    /// </summary>
    {class} function CreateInstance(activationContext: DNActivationContext; activationCustomData: TArray<string>): DNObjectHandle; overload;
    /// <summary>
    ///   使用命名的程序集文件和默认构造函数，创建指定名称的 COM 对象的实例。
    /// </summary>
    {class} function CreateComInstanceFrom(assemblyName: string; typeName: string): DNObjectHandle; overload;
    /// <summary>
    ///   使用命名的程序集文件和默认构造函数，创建指定名称的 COM 对象的实例。
    /// </summary>
    {class} function CreateComInstanceFrom(assemblyName: string; typeName: string; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): DNObjectHandle; overload;
    /// <summary>
    ///   为指定类型和 URL 所指示的已知对象创建一个代理。
    /// </summary>
    {class} function GetObject(&type: DNType; url: string): DNObject; overload;
    /// <summary>
    ///   为指定类型、URL 和通道数据所指示的已知对象创建一个代理。
    /// </summary>
    {class} function GetObject(&type: DNType; url: string; state: DNObject): DNObject; overload;

  end;

  /// <summary>
  ///   包含特定的方法，用以在本地或从远程创建对象类型，或获取对现有远程对象的引用。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Activator')]
  DNActivator = interface(DNObject)
  ['{9BA4FD4E-2BC2-31A0-B721-D17ABA5B12C3}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNActivator = class(TDNGenericImport<DNActivatorClass, DNActivator>) end;

  //-------------namespace: System----------------
  DNAppContextClass = interface(DNObjectClass)
  ['{6DDB7F79-25ED-4423-A27A-4444EE027FB0}']
  { static getter & setter } 

    {class} function get_BaseDirectory: string;
    {class} function get_TargetFrameworkName: string;

  { static methods } 

    /// <summary>
    ///   返回分配给当前应用程序域的已命名数据元素的值。
    /// </summary>
    {class} function GetData(name: string): DNObject;
    {class} function TryGetSwitch(switchName: string; out isEnabled: Boolean): Boolean;
    /// <summary>
    ///   设置开关的值。
    /// </summary>
    {class} procedure SetSwitch(switchName: string; isEnabled: Boolean);

  { static propertys } 

    /// <summary>
    ///   获取程序集解析程序用于探测程序集的基目录的路径名。
    /// </summary>
    {class} property BaseDirectory: string read get_BaseDirectory;
    /// <summary>
    ///   获取当前应用程序所针对的框架版本的名称。
    /// </summary>
    {class} property TargetFrameworkName: string read get_TargetFrameworkName;
  end;

  /// <summary>
  ///   提供用于设置和检索应用程序上下文相关数据的成员。
  /// </summary>
  [DNTypeName('System.AppContext')]
  DNAppContext = interface(DNObject)
  ['{405A21FB-0DB3-31A2-B3E6-7549238B770E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNAppContext = class(TDNGenericImport<DNAppContextClass, DNAppContext>) end;

  //-------------namespace: System----------------
  DNAppDomainSetupClass = interface(DNObjectClass)
  ['{7A4505CA-C0AA-4AEF-970C-500E29F2D850}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNAppDomainSetup; overload;
    /// <summary>
    ///   使用指定的激活上下文（用于基于清单的应用程序域激活）初始化  类的新实例。
    /// </summary>
    {class} function init(activationContext: DNActivationContext): DNAppDomainSetup; overload;
    /// <summary>
    ///   使用基于清单的应用程序域激活所需的指定激活参数初始化  类的新实例。
    /// </summary>
    {class} function init(activationArguments: DNActivationArguments): DNAppDomainSetup; overload;

  end;

  /// <summary>
  ///   表示可以添加到  的实例的程序集绑定信息。
  /// </summary>
  [DNTypeName('System.AppDomainSetup')]
  DNAppDomainSetup = interface(DNObject)
  ['{3E8E0F03-D3FD-3A93-BAE0-C74A6494DBCA}']
  { getter & setter } 

    function get_AppDomainManagerAssembly: string;
    procedure set_AppDomainManagerAssembly(value: string);
    function get_AppDomainManagerType: string;
    procedure set_AppDomainManagerType(value: string);
    function get_PartialTrustVisibleAssemblies: TArray<string>;
    procedure set_PartialTrustVisibleAssemblies(value: TArray<string>);
    function get_ApplicationBase: string;
    procedure set_ApplicationBase(value: string);
    function get_ConfigurationFile: string;
    procedure set_ConfigurationFile(value: string);
    function get_TargetFrameworkName: string;
    procedure set_TargetFrameworkName(value: string);
    function get_DynamicBase: string;
    procedure set_DynamicBase(value: string);
    function get_DisallowPublisherPolicy: Boolean;
    procedure set_DisallowPublisherPolicy(value: Boolean);
    function get_DisallowBindingRedirects: Boolean;
    procedure set_DisallowBindingRedirects(value: Boolean);
    function get_DisallowCodeDownload: Boolean;
    procedure set_DisallowCodeDownload(value: Boolean);
    function get_DisallowApplicationBaseProbing: Boolean;
    procedure set_DisallowApplicationBaseProbing(value: Boolean);
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_AppDomainInitializer: DNAppDomainInitializer;
    procedure set_AppDomainInitializer(value: DNAppDomainInitializer);
    function get_AppDomainInitializerArguments: TArray<string>;
    procedure set_AppDomainInitializerArguments(value: TArray<string>);
    function get_ActivationArguments: DNActivationArguments;
    procedure set_ActivationArguments(value: DNActivationArguments);
    function get_ApplicationTrust: DNApplicationTrust;
    procedure set_ApplicationTrust(value: DNApplicationTrust);
    function get_PrivateBinPath: string;
    procedure set_PrivateBinPath(value: string);
    function get_PrivateBinPathProbe: string;
    procedure set_PrivateBinPathProbe(value: string);
    function get_ShadowCopyDirectories: string;
    procedure set_ShadowCopyDirectories(value: string);
    function get_ShadowCopyFiles: string;
    procedure set_ShadowCopyFiles(value: string);
    function get_CachePath: string;
    procedure set_CachePath(value: string);
    function get_LicenseFile: string;
    procedure set_LicenseFile(value: string);
    function get_LoaderOptimization: DNLoaderOptimization;
    procedure set_LoaderOptimization(value: DNLoaderOptimization);
    function get_SandboxInterop: Boolean;
    procedure set_SandboxInterop(value: Boolean);

  { methods } 

    /// <summary>
    ///   返回  方法设置的 XML 配置信息，这会重写应用程序的 XML 配置信息。
    /// </summary>
    function GetConfigurationBytes: TArray<Byte>;
    /// <summary>
    ///   提供应用程序域的 XML 配置信息，并替换应用程序的 XML 配置信息。
    /// </summary>
    procedure SetConfigurationBytes(value: TArray<Byte>);
    procedure SetCompatibilitySwitches(switches: DNIEnumerable<string>);
    /// <summary>
    ///   向通用语言运行时提供备用字符串比较功能实现。
    /// </summary>
    procedure SetNativeFunction(functionName: string; functionVersion: Int32; functionPointer: IntPtr);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置程序集的显示名称，该程序集为使用  对象创建的应用程序域提供应用程序域管理器的类型。
    /// </summary>
    property AppDomainManagerAssembly: string read get_AppDomainManagerAssembly write set_AppDomainManagerAssembly;
    /// <summary>
    ///   获取或设置类型的全名，该类型可为使用此  对象创建的应用程序域提供应用程序域管理器。
    /// </summary>
    property AppDomainManagerType: string read get_AppDomainManagerType write set_AppDomainManagerType;
    /// <summary>
    ///   获取或设置标有  标志的程序集的列表，这些程序集对沙盒应用程序域中运行的部分信任代码可见。
    /// </summary>
    property PartialTrustVisibleAssemblies: TArray<string> read get_PartialTrustVisibleAssemblies write set_PartialTrustVisibleAssemblies;
    /// <summary>
    ///   获取或设置包含该应用程序的目录的名称。
    /// </summary>
    property ApplicationBase: string read get_ApplicationBase write set_ApplicationBase;
    /// <summary>
    ///   获取或设置应用程序域的配置文件的名称。
    /// </summary>
    property ConfigurationFile: string read get_ConfigurationFile write set_ConfigurationFile;
    /// <summary>
    ///   获取或设置为应用程序域指定目标版本和 .NET Framework 配置文件的字符串，该字符串采用可由  构造函数分析的格式。
    /// </summary>
    property TargetFrameworkName: string read get_TargetFrameworkName write set_TargetFrameworkName;
    /// <summary>
    ///   获取或设置动态生成的文件所在的目录的基目录。
    /// </summary>
    property DynamicBase: string read get_DynamicBase write set_DynamicBase;
    /// <summary>
    ///   获取或设置一个值，该值指示是否将配置文件的 <publisherPolicy> 部分应用于应用程序域。
    /// </summary>
    property DisallowPublisherPolicy: Boolean read get_DisallowPublisherPolicy write set_DisallowPublisherPolicy;
    /// <summary>
    ///   获取或设置一个值，该值指示应用程序域是否允许程序集绑定重定向。
    /// </summary>
    property DisallowBindingRedirects: Boolean read get_DisallowBindingRedirects write set_DisallowBindingRedirects;
    /// <summary>
    ///   获取或设置一个值，该值指示应用程序域是否允许通过 HTTP 下载程序集。
    /// </summary>
    property DisallowCodeDownload: Boolean read get_DisallowCodeDownload write set_DisallowCodeDownload;
    /// <summary>
    ///   指定在搜索要加载的程序集时是否探测应用程序基路径和专用二进制路径。
    /// </summary>
    property DisallowApplicationBaseProbing: Boolean read get_DisallowApplicationBaseProbing write set_DisallowApplicationBaseProbing;
    /// <summary>
    ///   获取或设置应用程序的名称。
    /// </summary>
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    /// <summary>
    ///   获取或设置  委托，该委托表示在初始化应用程序域时调用的回调方法。
    /// </summary>
    property AppDomainInitializer: DNAppDomainInitializer read get_AppDomainInitializer write set_AppDomainInitializer;
    /// <summary>
    ///   获取或设置传给  委托所表示的回调方法的参数。
    ///               在初始化应用程序域时将调用该回调方法。
    /// </summary>
    property AppDomainInitializerArguments: TArray<string> read get_AppDomainInitializerArguments write set_AppDomainInitializerArguments;
    /// <summary>
    ///   获取或设置与应用程序域的激活有关的数据。
    /// </summary>
    property ActivationArguments: DNActivationArguments read get_ActivationArguments write set_ActivationArguments;
    /// <summary>
    ///   获取或设置一个包含安全性和信任信息的对象。
    /// </summary>
    property ApplicationTrust: DNApplicationTrust read get_ApplicationTrust write set_ApplicationTrust;
    /// <summary>
    ///   获取或设置应用程序基目录下的目录列表，这些目录被探测以寻找其中的私有程序集。
    /// </summary>
    property PrivateBinPath: string read get_PrivateBinPath write set_PrivateBinPath;
    /// <summary>
    ///   获取或设置一个字符串值，该值包括或不包括应用程序的搜索路径中的 ，并只在  中进行搜索。
    /// </summary>
    property PrivateBinPathProbe: string read get_PrivateBinPathProbe write set_PrivateBinPathProbe;
    /// <summary>
    ///   获取或设置目录的名称，这些目录包含要进行卷影复制的程序集。
    /// </summary>
    property ShadowCopyDirectories: string read get_ShadowCopyDirectories write set_ShadowCopyDirectories;
    /// <summary>
    ///   获取或设置指示卷影复制是打开还是关闭的字符串。
    /// </summary>
    property ShadowCopyFiles: string read get_ShadowCopyFiles write set_ShadowCopyFiles;
    /// <summary>
    ///   获取或设置特定于应用程序且从中对文件进行卷影复制的区域的名称。
    /// </summary>
    property CachePath: string read get_CachePath write set_CachePath;
    /// <summary>
    ///   获取或设置与此域关联的许可证文件的位置。
    /// </summary>
    property LicenseFile: string read get_LicenseFile write set_LicenseFile;
    /// <summary>
    ///   指定用于加载可执行文件的优化策略。
    /// </summary>
    property LoaderOptimization: DNLoaderOptimization read get_LoaderOptimization write set_LoaderOptimization;
    /// <summary>
    ///   获取或设置一个值，该值指示是否在应用程序域中为互操作调用禁用接口缓存，从而对每个调用执行 QueryInterface。
    /// </summary>
    property SandboxInterop: Boolean read get_SandboxInterop write set_SandboxInterop;
  end;

  TDNAppDomainSetup = class(TDNGenericImport<DNAppDomainSetupClass, DNAppDomainSetup>) end;

  //-------------namespace: System----------------
  DNApplicationIdClass = interface(DNObjectClass)
  ['{305A7D5C-9C65-44E9-8060-7E370819DE18}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(publicKeyToken: TArray<Byte>; name: string; version: DNVersion; processorArchitecture: string; culture: string): DNApplicationId;

  end;

  /// <summary>
  ///   包含用来唯一标识基于清单的应用程序的信息。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.ApplicationId')]
  DNApplicationId = interface(DNObject)
  ['{AF3866AD-F70A-3CF8-984E-858C5A686D57}']
  { getter & setter } 

    function get_PublicKeyToken: TArray<Byte>;
    function get_Name: string;
    function get_Version: DNVersion;
    function get_ProcessorArchitecture: string;
    function get_Culture: string;

  { methods } 

    /// <summary>
    ///   创建并返回当前的应用程序标识的相同副本。
    /// </summary>
    function Copy: DNApplicationId;
    /// <summary>
    ///   确定是否指定  对象是否等效于当前 。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前应用程序标识的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建并返回的字符串表示形式的应用程序标识。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取应用程序的公钥令牌。
    /// </summary>
    property PublicKeyToken: TArray<Byte> read get_PublicKeyToken;
    /// <summary>
    ///   获取应用程序的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取应用程序的版本。
    /// </summary>
    property Version: DNVersion read get_Version;
    /// <summary>
    ///   获取应用程序的目标处理器体系结构。
    /// </summary>
    property ProcessorArchitecture: string read get_ProcessorArchitecture;
    /// <summary>
    ///   获取一个字符串，表示应用程序的区域性信息。
    /// </summary>
    property Culture: string read get_Culture;
  end;

  TDNApplicationId = class(TDNGenericImport<DNApplicationIdClass, DNApplicationId>) end;

  //-------------namespace: System----------------
  DNApplicationIdentityClass = interface(DNObjectClass)
  ['{1FBA3538-106F-4E60-B24D-1B5C259F0FAB}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(applicationIdentityFullName: string): DNApplicationIdentity;

  end;

  /// <summary>
  ///   提供的功能来唯一标识清单激活应用程序。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.ApplicationIdentity')]
  DNApplicationIdentity = interface(DNObject)
  ['{25450296-27A4-39E8-8011-E027EF40CA46}']
  { getter & setter } 

    function get_FullName: string;
    function get_CodeBase: string;

  { methods } 

    /// <summary>
    ///   返回清单激活的应用程序的完整名称。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取应用程序的完整名称。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   获取作为 URL 部署清单的位置。
    /// </summary>
    property CodeBase: string read get_CodeBase;
  end;

  TDNApplicationIdentity = class(TDNGenericImport<DNApplicationIdentityClass, DNApplicationIdentity>) end;

  //-------------namespace: System----------------
  DNArrayClass = interface(DNObjectClass)
  ['{8EFCE97C-0630-4A05-B244-05B12F249441}']
  { static methods } 

    /// <summary>
    ///   创建使用从零开始的索引、具有指定  和长度的一维 。
    /// </summary>
    {class} function CreateInstance(elementType: DNType; length: Int32): DNArray; overload;
    /// <summary>
    ///   创建使用从零开始的索引、具有指定  和维长的三维 。
    /// </summary>
    {class} function CreateInstance(elementType: DNType; length1: Int32; length2: Int32; length3: Int32): DNArray; overload;
    /// <summary>
    ///   创建索引从零开始、具有指定  和维长的多维 。
    ///               维的长度在一个 32 位整数数组中指定。
    /// </summary>
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int32>): DNArray; overload;
    /// <summary>
    ///   创建索引从零开始、具有指定  和维长的多维 。
    ///               维的长度在一个 64 位整数数组中指定。
    /// </summary>
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int64>): DNArray; overload;
    /// <summary>
    ///   创建具有指定下限、指定  和维长的多维 。
    /// </summary>
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int32>; lowerBounds: TArray<Int32>): DNArray; overload;
    /// <summary>
    ///   从第一个元素开始复制  中的一系列元素，将它们粘贴到另一  中（从第一个元素开始）。
    ///               长度指定为 32 位整数。
    /// </summary>
    {class} procedure Copy(sourceArray: DNArray; destinationArray: DNArray; length: Int32); overload;
    /// <summary>
    ///   复制  中的一系列元素（从指定的源索引开始），并将它们粘贴到另一  中（从指定的目标索引开始）。
    ///               长度和索引指定为 32 位整数。
    /// </summary>
    {class} procedure Copy(sourceArray: DNArray; sourceIndex: Int32; destinationArray: DNArray; destinationIndex: Int32; length: Int32); overload;
    /// <summary>
    ///   复制  中的一系列元素（从指定的源索引开始），并将它们粘贴到另一  中（从指定的目标索引开始）。
    ///                保证在复制未成功完成的情况下撤消所有更改。
    /// </summary>
    {class} procedure ConstrainedCopy(sourceArray: DNArray; sourceIndex: Int32; destinationArray: DNArray; destinationIndex: Int32; length: Int32);
    /// <summary>
    ///   从第一个元素开始复制  中的一系列元素，将它们粘贴到另一  中（从第一个元素开始）。
    ///               长度指定为 64 位整数。
    /// </summary>
    {class} procedure Copy(sourceArray: DNArray; destinationArray: DNArray; length: Int64); overload;
    /// <summary>
    ///   复制  中的一系列元素（从指定的源索引开始），并将它们粘贴到另一  中（从指定的目标索引开始）。
    ///               长度和索引指定为 64 位整数。
    /// </summary>
    {class} procedure Copy(sourceArray: DNArray; sourceIndex: Int64; destinationArray: DNArray; destinationIndex: Int64; length: Int64); overload;
    /// <summary>
    ///   使用由数组中每个元素和指定对象实现的  接口，在整个一维排序数组中搜索特定元素。
    /// </summary>
    {class} function BinarySearch(&array: DNArray; value: DNObject): Int32; overload;
    /// <summary>
    ///   使用由一维排序数组中每个元素和指定的值实现的  接口，在该数组的一个元素范围内搜索值。
    /// </summary>
    {class} function BinarySearch(&array: DNArray; index: Int32; length: Int32; value: DNObject): Int32; overload;
    /// <summary>
    ///   使用指定  接口，在整个一维排序数组中搜索值。
    /// </summary>
    {class} function BinarySearch(&array: DNArray; value: DNObject; comparer: DNIComparer): Int32; overload;
    /// <summary>
    ///   在一个一维数组中搜索指定对象，并返回其首个匹配项的索引。
    /// </summary>
    {class} function IndexOf(&array: DNArray; value: DNObject): Int32; overload;
    /// <summary>
    ///   在一个一维数组的一系列元素中搜索指定对象，然后返回其首个匹配项的索引。
    ///               该元素系列的范围为从指定索引到该数组结尾。
    /// </summary>
    {class} function IndexOf(&array: DNArray; value: DNObject; startIndex: Int32): Int32; overload;
    /// <summary>
    ///   在一个一维数组的一系列元素中搜索指定对象，然后返回其首个匹配项的索引。
    ///               该元素系列的范围从指定数量的元素的指定索引开始。
    /// </summary>
    {class} function IndexOf(&array: DNArray; value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   在整个一维  中搜索指定的对象，并返回最后一个匹配项的索引。
    /// </summary>
    {class} function LastIndexOf(&array: DNArray; value: DNObject): Int32; overload;
    /// <summary>
    ///   搜索指定的对象，并返回一维  中从第一个元素到指定索引的元素范围内最后一个匹配项的索引。
    /// </summary>
    {class} function LastIndexOf(&array: DNArray; value: DNObject; startIndex: Int32): Int32; overload;
    /// <summary>
    ///   搜索指定的对象并返回一维  中包含指定数目元素且在指定索引处结尾的元素范围内的最后一个匹配项的索引。
    /// </summary>
    {class} function LastIndexOf(&array: DNArray; value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   反转整个一维  中元素的顺序。
    /// </summary>
    {class} procedure Reverse(&array: DNArray); overload;
    /// <summary>
    ///   使用  中每个元素的  实现，对整个一维  中的元素进行排序。
    /// </summary>
    {class} procedure Sort(&array: DNArray); overload;
    /// <summary>
    ///   基于第一个  中的关键字，使用每个关键字的  实现，对两个一维  对象（一个包含关键字，另一个包含对应的项）进行排序。
    /// </summary>
    {class} procedure Sort(keys: DNArray; items: DNArray); overload;
    /// <summary>
    ///   使用  中每个元素的  实现，对一维  中的部分元素进行排序。
    /// </summary>
    {class} procedure Sort(&array: DNArray; index: Int32; length: Int32); overload;
    /// <summary>
    ///   基于第一个  中的关键字，使用每个关键字的  实现，对两个一维  对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。
    /// </summary>
    {class} procedure Sort(keys: DNArray; items: DNArray; index: Int32; length: Int32); overload;
    /// <summary>
    ///   使用指定的 ，对一维  中的元素进行排序。
    /// </summary>
    {class} procedure Sort(&array: DNArray; comparer: DNIComparer); overload;
    /// <summary>
    ///   基于第一个  中的关键字，使用指定的 ，对两个一维  对象（一个包含关键字，另一个包含对应的项）进行排序。
    /// </summary>
    {class} procedure Sort(keys: DNArray; items: DNArray; comparer: DNIComparer); overload;
    /// <summary>
    ///   使用指定的 ，对一维  中的部分元素进行排序。
    /// </summary>
    {class} procedure Sort(&array: DNArray; index: Int32; length: Int32; comparer: DNIComparer); overload;
    /// <summary>
    ///   创建使用从零开始的索引、具有指定  和维长的二维 。
    /// </summary>
    {class} function CreateInstance(elementType: DNType; length1: Int32; length2: Int32): DNArray; overload;
    /// <summary>
    ///   将数组中的某个范围的元素设置为每个元素类型的默认值。
    /// </summary>
    {class} procedure Clear(&array: DNArray; index: Int32; length: Int32);
    /// <summary>
    ///   使用指定  接口，在一维排序数组的某个元素范围中搜索值。
    /// </summary>
    {class} function BinarySearch(&array: DNArray; index: Int32; length: Int32; value: DNObject; comparer: DNIComparer): Int32; overload;
    /// <summary>
    ///   反转一维  中某部分元素的元素顺序。
    /// </summary>
    {class} procedure Reverse(&array: DNArray; index: Int32; length: Int32); overload;
    /// <summary>
    ///   基于第一个  中的关键字，使用指定的 ，对两个一维  对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。
    /// </summary>
    {class} procedure Sort(keys: DNArray; items: DNArray; index: Int32; length: Int32; comparer: DNIComparer); overload;

  end;

  /// <summary>
  ///   提供一些方法，用于创建、处理、搜索数组并对数组进行排序，从而充当公共语言运行时中所有数组的基类。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
  /// </summary>
  [DNTypeName('System.Array')]
  DNArray = interface(DNObject)
  ['{200FB91C-815D-39E0-9E07-0E1BDB2ED47B}']
  { getter & setter } 

    function get_Length: Int32;
    function get_LongLength: Int64;
    function get_Rank: Int32;
    function get_SyncRoot: DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    /// <summary>
    ///   获取多维  中指定位置的值。
    ///               索引指定为一个 32 位整数数组。
    /// </summary>
    function GetValue(indices: TArray<Int32>): DNObject; overload;
    /// <summary>
    ///   获取一维  中指定位置的值。
    ///               索引指定为 32 位整数。
    /// </summary>
    function GetValue(index: Int32): DNObject; overload;
    /// <summary>
    ///   获取二维  中指定位置的值。
    ///               索引指定为 32 位整数。
    /// </summary>
    function GetValue(index1: Int32; index2: Int32): DNObject; overload;
    /// <summary>
    ///   获取三维  中指定位置的值。
    ///               索引指定为 32 位整数。
    /// </summary>
    function GetValue(index1: Int32; index2: Int32; index3: Int32): DNObject; overload;
    /// <summary>
    ///   获取一维  中指定位置的值。
    ///               索引指定为 64 位整数。
    /// </summary>
    function GetValue(index: Int64): DNObject; overload;
    /// <summary>
    ///   获取二维  中指定位置的值。
    ///               索引指定为 64 位整数。
    /// </summary>
    function GetValue(index1: Int64; index2: Int64): DNObject; overload;
    /// <summary>
    ///   获取三维  中指定位置的值。
    ///               索引指定为 64 位整数。
    /// </summary>
    function GetValue(index1: Int64; index2: Int64; index3: Int64): DNObject; overload;
    /// <summary>
    ///   获取多维  中指定位置的值。
    ///               索引指定为一个 64 位整数数组。
    /// </summary>
    function GetValue(indices: TArray<Int64>): DNObject; overload;
    /// <summary>
    ///   将值设置为一维  中指定位置的元素。
    ///               索引指定为 32 位整数。
    /// </summary>
    procedure SetValue(value: DNObject; index: Int32); overload;
    /// <summary>
    ///   将某值设置给二维  中指定位置的元素。
    ///               索引指定为 32 位整数。
    /// </summary>
    procedure SetValue(value: DNObject; index1: Int32; index2: Int32); overload;
    /// <summary>
    ///   将值设置为三维  中指定位置的元素。
    ///               索引指定为 32 位整数。
    /// </summary>
    procedure SetValue(value: DNObject; index1: Int32; index2: Int32; index3: Int32); overload;
    /// <summary>
    ///   将值设置为多维  中指定位置的元素。
    ///               索引指定为一个 32 位整数数组。
    /// </summary>
    procedure SetValue(value: DNObject; indices: TArray<Int32>); overload;
    /// <summary>
    ///   将值设置为一维  中指定位置的元素。
    ///               索引指定为 64 位整数。
    /// </summary>
    procedure SetValue(value: DNObject; index: Int64); overload;
    /// <summary>
    ///   将某值设置给二维  中指定位置的元素。
    ///               索引指定为 64 位整数。
    /// </summary>
    procedure SetValue(value: DNObject; index1: Int64; index2: Int64); overload;
    /// <summary>
    ///   将值设置为三维  中指定位置的元素。
    ///               索引指定为 64 位整数。
    /// </summary>
    procedure SetValue(value: DNObject; index1: Int64; index2: Int64; index3: Int64); overload;
    /// <summary>
    ///   将值设置为多维  中指定位置的元素。
    ///               索引指定为一个 64 位整数数组。
    /// </summary>
    procedure SetValue(value: DNObject; indices: TArray<Int64>); overload;
    /// <summary>
    ///   获取一个 64 位整数，该整数表示  的指定维中的元素数。
    /// </summary>
    function GetLongLength(dimension: Int32): Int64;
    /// <summary>
    ///   创建  的浅表副本。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   从指定的目标数组索引处开始，将当前一维数组的所有元素复制到指定的一维数组中。
    ///               索引指定为 32 位整数。
    /// </summary>
    procedure CopyTo(&array: DNArray; index: Int32); overload;
    /// <summary>
    ///   从指定的目标数组索引处开始，将当前一维数组的所有元素复制到指定的一维数组中。
    ///               索引指定为 64 位整数。
    /// </summary>
    procedure CopyTo(&array: DNArray; index: Int64); overload;
    /// <summary>
    ///   返回  的 。
    /// </summary>
    function GetEnumerator: DNIEnumerator;
    /// <summary>
    ///   通过调用值类型的默认构造函数，初始化值类型  的每一个元素。
    /// </summary>
    procedure Initialize;
    /// <summary>
    ///   获取一个 32 位整数，该整数表示  的指定维中的元素数。
    /// </summary>
    function GetLength(dimension: Int32): Int32;
    /// <summary>
    ///   获取数组中指定维度最后一个元素的索引。
    /// </summary>
    function GetUpperBound(dimension: Int32): Int32;
    /// <summary>
    ///   获取数组中指定维度第一个元素的索引。
    /// </summary>
    function GetLowerBound(dimension: Int32): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  的所有维度中的元素总数。
    /// </summary>
    property Length: Int32 read get_Length;
    /// <summary>
    ///   获取一个 64 位整数，该整数表示  的所有维数中元素的总数。
    /// </summary>
    property LongLength: Int64 read get_LongLength;
    /// <summary>
    ///   获取  的秩（维数）。
    ///               例如，一维数组返回 1，二维数组返回 2，依次类推。
    /// </summary>
    property Rank: Int32 read get_Rank;
    /// <summary>
    ///   获取可用于同步对  的访问的对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
    /// <summary>
    ///   获取一个值，该值指示  是否为只读。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取一个值，该值指示  是否具有固定大小。
    /// </summary>
    property IsFixedSize: Boolean read get_IsFixedSize;
    /// <summary>
    ///   获取一个值，该值指示是否同步对  的访问（线程安全）。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNArray = class(TDNGenericImport<DNArrayClass, DNArray>) end;

  //-------------namespace: System----------------
  DNAttributeClass = interface(DNObjectClass)
  ['{4777DAD0-C229-4F3B-BBAB-4CD4A5BFFA20}']
  { static methods } 

    /// <summary>
    ///   检索应用于类型的成员的自定义特性的数组。
    ///               参数指定该成员和要搜索的自定义属性的类型。
    /// </summary>
    {class} function GetCustomAttributes(element: DNMemberInfo; &type: DNType): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于类型的成员的自定义特性的数组。
    ///               参数指定该成员、 自定义属性来进行搜索，以及是否要搜索的成员的祖先的类型。
    /// </summary>
    {class} function GetCustomAttributes(element: DNMemberInfo; &type: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于类型的成员的自定义特性的数组。
    ///               参数指定的成员。
    /// </summary>
    {class} function GetCustomAttributes(element: DNMemberInfo): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于类型的成员的自定义特性的数组。
    ///               参数指定该成员、 自定义属性来进行搜索，以及是否要搜索的成员的祖先的类型。
    /// </summary>
    {class} function GetCustomAttributes(element: DNMemberInfo; inherit: Boolean): TArray<DNAttribute>; overload;
    /// <summary>
    ///   确定是否将任何自定义特性应用于类型的成员。
    ///               参数指定要搜索的成员和自定义特性的类型。
    /// </summary>
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType): Boolean; overload;
    /// <summary>
    ///   确定是否将任何自定义特性应用于类型的成员。
    ///               参数指定该成员、 自定义属性来进行搜索，以及是否要搜索的成员的祖先的类型。
    /// </summary>
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    /// <summary>
    ///   检索应用于类型的成员的自定义特性。
    ///               参数指定该成员和要搜索的自定义属性的类型。
    /// </summary>
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType): DNAttribute; overload;
    /// <summary>
    ///   检索应用于类型的成员的自定义特性。
    ///               参数指定该成员、 自定义属性来进行搜索，以及是否要搜索的成员的祖先的类型。
    /// </summary>
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    /// <summary>
    ///   检索应用于方法参数的自定义特性的数组。
    ///               一个参数指定的方法参数。
    /// </summary>
    {class} function GetCustomAttributes(element: DNParameterInfo): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于方法参数的自定义特性的数组。
    ///               参数指定的方法参数，以及要搜索的自定义特性的类型。
    /// </summary>
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于方法参数的自定义特性的数组。
    ///               参数指定的方法参数、 自定义特性来进行搜索，以及是否要搜索的方法参数的祖先的类型。
    /// </summary>
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于方法参数的自定义特性的数组。
    ///               参数指定的方法参数，以及是否搜索方法参数的祖先。
    /// </summary>
    {class} function GetCustomAttributes(element: DNParameterInfo; inherit: Boolean): TArray<DNAttribute>; overload;
    /// <summary>
    ///   确定是否将任何自定义特性应用于方法参数。
    ///               参数指定的方法参数，以及要搜索的自定义特性的类型。
    /// </summary>
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType): Boolean; overload;
    /// <summary>
    ///   确定是否将任何自定义特性应用于方法参数。
    ///               参数指定的方法参数、 自定义特性来进行搜索，以及是否要搜索的方法参数的祖先的类型。
    /// </summary>
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    /// <summary>
    ///   检索应用于方法参数的自定义特性。
    ///               参数指定的方法参数，以及要搜索的自定义属性的类型。
    /// </summary>
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType): DNAttribute; overload;
    /// <summary>
    ///   检索应用于方法参数的自定义特性。
    ///               参数指定的方法参数、 自定义属性来进行搜索，以及是否要搜索祖先构成的方法参数的类型。
    /// </summary>
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    /// <summary>
    ///   检索应用于模块的自定义特性的数组。
    ///               参数指定该模块，以及要搜索的自定义特性的类型。
    /// </summary>
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于模块的自定义特性的数组。
    ///               参数指定的模块。
    /// </summary>
    {class} function GetCustomAttributes(element: DNModule): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于模块的自定义特性的数组。
    ///               参数指定该模块，并忽略的搜索选项。
    /// </summary>
    {class} function GetCustomAttributes(element: DNModule; inherit: Boolean): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于模块的自定义特性的数组。
    ///               参数指定该模块、 自定义特性来进行搜索，并忽略的搜索选项的类型。
    /// </summary>
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    /// <summary>
    ///   确定是否将具有指定任何的类型自定义特性应用于模块。
    ///               参数指定该模块，以及要搜索的自定义特性的类型。
    /// </summary>
    {class} function IsDefined(element: DNModule; attributeType: DNType): Boolean; overload;
    /// <summary>
    ///   确定是否将任何自定义特性应用于模块。
    ///               参数指定该模块、 自定义特性来进行搜索，并忽略的搜索选项的类型。
    /// </summary>
    {class} function IsDefined(element: DNModule; attributeType: DNType; inherit: Boolean): Boolean; overload;
    /// <summary>
    ///   检索应用于模块的自定义属性。
    ///               参数指定该模块，以及要搜索的自定义特性的类型。
    /// </summary>
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType): DNAttribute; overload;
    /// <summary>
    ///   检索应用于某个模块的自定义特性。
    ///               参数指定模块、 类型的自定义属性来进行搜索，并忽略的搜索选项。
    /// </summary>
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    /// <summary>
    ///   检索一个数组，它由应用于程序集的自定义属性组成。
    ///               参数指定要搜索的程序集和自定义特性的类型。
    /// </summary>
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索一个数组，它由应用于程序集的自定义属性组成。
    ///               参数指定的程序集、 类型的自定义属性来进行搜索，并忽略的搜索选项。
    /// </summary>
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索一个数组，它由应用于程序集的自定义属性组成。
    ///               参数指定程序集。
    /// </summary>
    {class} function GetCustomAttributes(element: DNAssembly): TArray<DNAttribute>; overload;
    /// <summary>
    ///   检索一个数组，它由应用于程序集的自定义属性组成。
    ///               参数指定该程序集，并忽略的搜索选项。
    /// </summary>
    {class} function GetCustomAttributes(element: DNAssembly; inherit: Boolean): TArray<DNAttribute>; overload;
    /// <summary>
    ///   确定是否将任何自定义特性应用于程序集。
    ///               参数指定要搜索的程序集和自定义特性的类型。
    /// </summary>
    {class} function IsDefined(element: DNAssembly; attributeType: DNType): Boolean; overload;
    /// <summary>
    ///   确定是否将任何自定义特性应用于程序集。
    ///               参数指定的程序集、 自定义特性来进行搜索，并忽略的搜索选项的类型。
    /// </summary>
    {class} function IsDefined(element: DNAssembly; attributeType: DNType; inherit: Boolean): Boolean; overload;
    /// <summary>
    ///   检索应用于指定的程序集的自定义特性。
    ///               参数指定要搜索的程序集和自定义特性的类型。
    /// </summary>
    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType): DNAttribute; overload;
    /// <summary>
    ///   检索应用于程序集的自定义属性。
    ///               参数指定的程序集、 自定义特性来进行搜索，并忽略的搜索选项的类型。
    /// </summary>
    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType; inherit: Boolean): DNAttribute; overload;

  end;

  /// <summary>
  ///   表示自定义特性的基类。
  /// </summary>
  [DNTypeName('System.Attribute')]
  DNAttribute = interface(DNObject)
  ['{1765714B-E628-34C3-B66F-7686FAF462DA}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   当在派生类中重写，则返回一个值，该值指示此实例是否等于指定的对象。
    /// </summary>
    function Match(obj: DNObject): Boolean;
    /// <summary>
    ///   在派生类中重写时，指示此实例的值是否是派生类的默认值。
    /// </summary>
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   在派生类中实现时，获取此  的唯一标识符。
    /// </summary>
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAttribute = class(TDNGenericImport<DNAttributeClass, DNAttribute>) end;

  //-------------namespace: System----------------
  DNAttributeUsageAttributeClass = interface(DNAttributeClass)
  ['{152E8E57-741D-422A-A449-6351DD0C5B4D}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例与指定的列表类、值，与值。
    /// </summary>
    {class} function init(validOn: DNAttributeTargets): DNAttributeUsageAttribute;

  end;

  /// <summary>
  ///   指定另一个属性类的用法。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.AttributeUsageAttribute')]
  DNAttributeUsageAttribute = interface(DNAttribute)
  ['{53A62BB1-75B9-3B52-AE98-92AFD573CDB1}']
  { getter & setter } 

    function get_Inherited: Boolean;
    procedure set_Inherited(value: Boolean);
    function get_ValidOn: DNAttributeTargets;
    function get_AllowMultiple: Boolean;
    procedure set_AllowMultiple(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  值，该值确定指示的属性是否由派生类和重写成员继承。
    /// </summary>
    property &Inherited: Boolean read get_Inherited write set_Inherited;
    /// <summary>
    ///   获取一组标识所指示的特性可以应用于哪些程序元素的值。
    /// </summary>
    property ValidOn: DNAttributeTargets read get_ValidOn;
    /// <summary>
    ///   获取或设置一个布尔值，该值指示是否可以为一个程序元素指定多个实例所指示的特性。
    /// </summary>
    property AllowMultiple: Boolean read get_AllowMultiple write set_AllowMultiple;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAttributeUsageAttribute = class(TDNGenericImport<DNAttributeUsageAttributeClass, DNAttributeUsageAttribute>) end;

  //-------------namespace: System----------------
  DNCLSCompliantAttributeClass = interface(DNAttributeClass)
  ['{13B5FB32-D649-4B42-B5BC-5DE8D531B009}']
  { constructors } 

    /// <summary>
    ///   初始化的实例一个布尔值，该值指示的程序元素是否符合 cls 的类。
    /// </summary>
    {class} function init(isCompliant: Boolean): DNCLSCompliantAttribute;

  end;

  /// <summary>
  ///   指示程序元素是否符合公共语言规范 (CLS)。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.CLSCompliantAttribute')]
  DNCLSCompliantAttribute = interface(DNAttribute)
  ['{15DBEC24-0E2D-3DB2-AF66-932203215895}']
  { getter & setter } 

    function get_IsCompliant: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取布尔值，该值指示的程序元素是否符合 CLS。
    /// </summary>
    property IsCompliant: Boolean read get_IsCompliant;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCLSCompliantAttribute = class(TDNGenericImport<DNCLSCompliantAttributeClass, DNCLSCompliantAttribute>) end;

  //-------------namespace: System----------------
  DNContextStaticAttributeClass = interface(DNAttributeClass)
  ['{F385FB67-2CAA-4AC9-8293-F42D14ABF28B}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNContextStaticAttribute;

  end;

  /// <summary>
  ///   指示某静态字段的值对于特定上下文是唯一的。
  /// </summary>
  [DNTypeName('System.ContextStaticAttribute')]
  DNContextStaticAttribute = interface(DNAttribute)
  ['{96705EE3-F7AB-3E9A-9FB2-AD1D536E901A}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContextStaticAttribute = class(TDNGenericImport<DNContextStaticAttributeClass, DNContextStaticAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNSuppressMessageAttributeClass = interface(DNAttributeClass)
  ['{6F9245DF-35A4-404E-821B-5713FFE7F210}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定类的静态分析工具和分析规则的标识符。
    /// </summary>
    {class} function init(category: string; checkId: string): DNSuppressMessageAttribute;

  end;

  /// <summary>
  ///   取消报告特定静态分析工具规则违规，并允许多次取消单个代码项目。
  /// </summary>
  [DNTypeName('System.Diagnostics.CodeAnalysis.SuppressMessageAttribute')]
  DNSuppressMessageAttribute = interface(DNAttribute)
  ['{DA4523A7-75EA-3ABA-A44B-D46260BBEE99}']
  { getter & setter } 

    function get_Category: string;
    function get_CheckId: string;
    function get_Scope: string;
    procedure set_Scope(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_MessageId: string;
    procedure set_MessageId(value: string);
    function get_Justification: string;
    procedure set_Justification(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取识别该属性的分类的类别。
    /// </summary>
    property Category: string read get_Category;
    /// <summary>
    ///   获取要抑制的静态分析工具规则的标识符。
    /// </summary>
    property CheckId: string read get_CheckId;
    /// <summary>
    ///   获取或设置与属性相关的代码的作用域。
    /// </summary>
    property Scope: string read get_Scope write set_Scope;
    /// <summary>
    ///   获取或设置表示该属性的目标的完全限定的路径。
    /// </summary>
    property Target: string read get_Target write set_Target;
    /// <summary>
    ///   获取或设置扩展排除条件的可选参数。
    /// </summary>
    property MessageId: string read get_MessageId write set_MessageId;
    /// <summary>
    ///   获取或设置用于取消对代码分析信息。
    /// </summary>
    property Justification: string read get_Justification write set_Justification;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressMessageAttribute = class(TDNGenericImport<DNSuppressMessageAttributeClass, DNSuppressMessageAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNConditionalAttributeClass = interface(DNAttributeClass)
  ['{8A6EFA9A-4781-496A-9C8E-0163CFDCCA34}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(conditionString: string): DNConditionalAttribute;

  end;

  /// <summary>
  ///   指示编译器，除非定义了指定的有条件编译符号，否则，应忽略方法调用或属性。
  /// </summary>
  [DNTypeName('System.Diagnostics.ConditionalAttribute')]
  DNConditionalAttribute = interface(DNAttribute)
  ['{75B3810E-F2D5-36E2-8D27-514EBCAD4511}']
  { getter & setter } 

    function get_ConditionString: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取与之关联的条件编译符号  属性。
    /// </summary>
    property ConditionString: string read get_ConditionString;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNConditionalAttribute = class(TDNGenericImport<DNConditionalAttributeClass, DNConditionalAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractAbbreviatorAttributeClass = interface(DNAttributeClass)
  ['{6EEE5030-0C7E-400F-B845-E9506FF75E28}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNContractAbbreviatorAttribute;

  end;

  /// <summary>
  ///   定义可用于代替完整的约定语法的缩写。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractAbbreviatorAttribute')]
  DNContractAbbreviatorAttribute = interface(DNAttribute)
  ['{5C3A67DA-8E7E-3AC2-94BC-99E03B809166}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractAbbreviatorAttribute = class(TDNGenericImport<DNContractAbbreviatorAttributeClass, DNContractAbbreviatorAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractArgumentValidatorAttributeClass = interface(DNAttributeClass)
  ['{28DD4785-ED64-420C-8FDD-FE14AF598FEF}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNContractArgumentValidatorAttribute;

  end;

  /// <summary>
  ///   使旧的分解  代码转变为单独的方法，以供重复使用，并提供对引发的异常和参数的完全控制。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractArgumentValidatorAttribute')]
  DNContractArgumentValidatorAttribute = interface(DNAttribute)
  ['{5A513617-7943-37DC-AA9F-F0534112C824}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractArgumentValidatorAttribute = class(TDNGenericImport<DNContractArgumentValidatorAttributeClass, DNContractArgumentValidatorAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClassAttributeClass = interface(DNAttributeClass)
  ['{CA35918D-C9FC-4603-8752-7CD50A074EB1}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(typeContainingContracts: DNType): DNContractClassAttribute;

  end;

  /// <summary>
  ///   指示单独的类型包含此类型的代码协定。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractClassAttribute')]
  DNContractClassAttribute = interface(DNAttribute)
  ['{42C13B51-79B1-3830-9168-94ED4CFAD60A}']
  { getter & setter } 

    function get_TypeContainingContracts: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包含此类型的代码协定的类型。
    /// </summary>
    property TypeContainingContracts: DNType read get_TypeContainingContracts;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractClassAttribute = class(TDNGenericImport<DNContractClassAttributeClass, DNContractClassAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClassForAttributeClass = interface(DNAttributeClass)
  ['{58EF286B-1C11-473C-9730-7ABA3AE4EE81}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定当前类是协定的类型。
    /// </summary>
    {class} function init(typeContractsAreFor: DNType): DNContractClassForAttribute;

  end;

  /// <summary>
  ///   指定类是类型的协定。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractClassForAttribute')]
  DNContractClassForAttribute = interface(DNAttribute)
  ['{BA788035-35EF-3617-8CC0-6D2D32C6A2A1}']
  { getter & setter } 

    function get_TypeContractsAreFor: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取适用于此代码协定的类型。
    /// </summary>
    property TypeContractsAreFor: DNType read get_TypeContractsAreFor;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractClassForAttribute = class(TDNGenericImport<DNContractClassForAttributeClass, DNContractClassForAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractInvariantMethodAttributeClass = interface(DNAttributeClass)
  ['{799494C1-7CB5-48AF-AFA7-F45E617296A1}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNContractInvariantMethodAttribute;

  end;

  /// <summary>
  ///   将方法标记为类的固定条件方法。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractInvariantMethodAttribute')]
  DNContractInvariantMethodAttribute = interface(DNAttribute)
  ['{E8D1CDB7-B9F9-3F5E-B9FC-AD0B03755CCE}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractInvariantMethodAttribute = class(TDNGenericImport<DNContractInvariantMethodAttributeClass, DNContractInvariantMethodAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractOptionAttributeClass = interface(DNAttributeClass)
  ['{E00AEEEC-D823-4209-AAD1-59AE1E492501}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类通过使用提供的类别、 设置和启用/禁用值。
    /// </summary>
    {class} function init(category: string; setting: string; enabled: Boolean): DNContractOptionAttribute; overload;
    /// <summary>
    ///   新实例初始化  类通过设置，所提供的类别和值。
    /// </summary>
    {class} function init(category: string; setting: string; value: string): DNContractOptionAttribute; overload;

  end;

  /// <summary>
  ///   可以在程序集、 类型或方法的粒度设置协定和工具选项。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractOptionAttribute')]
  DNContractOptionAttribute = interface(DNAttribute)
  ['{4A37E017-7EF7-3A9B-8029-2120536B20C8}']
  { getter & setter } 

    function get_Category: string;
    function get_Setting: string;
    function get_Enabled: Boolean;
    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取选项的类别。
    /// </summary>
    property Category: string read get_Category;
    /// <summary>
    ///   获取选项的设置。
    /// </summary>
    property Setting: string read get_Setting;
    /// <summary>
    ///   确定是否启用了一个选项。
    /// </summary>
    property Enabled: Boolean read get_Enabled;
    /// <summary>
    ///   获取选项的值。
    /// </summary>
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractOptionAttribute = class(TDNGenericImport<DNContractOptionAttributeClass, DNContractOptionAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractPublicPropertyNameAttributeClass = interface(DNAttributeClass)
  ['{996060C0-DCCE-48E2-ABFE-BC75231D3D24}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(name: string): DNContractPublicPropertyNameAttribute;

  end;

  /// <summary>
  ///   指定在某个字段的可见性低于方法时可在方法协定中使用该字段。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute')]
  DNContractPublicPropertyNameAttribute = interface(DNAttribute)
  ['{8C345A58-6B61-392C-ACF0-58853DD6D3AF}']
  { getter & setter } 

    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取要应用于字段的属性名称。
    /// </summary>
    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractPublicPropertyNameAttribute = class(TDNGenericImport<DNContractPublicPropertyNameAttributeClass, DNContractPublicPropertyNameAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractReferenceAssemblyAttributeClass = interface(DNAttributeClass)
  ['{8D0EBEEE-02F3-4723-9077-BC63748C3E97}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNContractReferenceAssemblyAttribute;

  end;

  /// <summary>
  ///   指定程序集是包含协定的引用程序集。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute')]
  DNContractReferenceAssemblyAttribute = interface(DNAttribute)
  ['{D34B2E44-3B0B-3B35-8558-ABBA5DD13730}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractReferenceAssemblyAttribute = class(TDNGenericImport<DNContractReferenceAssemblyAttributeClass, DNContractReferenceAssemblyAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractRuntimeIgnoredAttributeClass = interface(DNAttributeClass)
  ['{5A9A2CD5-1DAD-4441-B72E-A9165D37750B}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNContractRuntimeIgnoredAttribute;

  end;

  /// <summary>
  ///   标识没有运行时行为的成员。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute')]
  DNContractRuntimeIgnoredAttribute = interface(DNAttribute)
  ['{39FF7EBC-8271-3B79-B5A8-87CDF0FB731B}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractRuntimeIgnoredAttribute = class(TDNGenericImport<DNContractRuntimeIgnoredAttributeClass, DNContractRuntimeIgnoredAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractVerificationAttributeClass = interface(DNAttributeClass)
  ['{327F3577-E0B7-41BA-8BFA-CF258205C238}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(value: Boolean): DNContractVerificationAttribute;

  end;

  /// <summary>
  ///   指示分析工具假定程序集、类型或成员的正确性，而不执行静态验证。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractVerificationAttribute')]
  DNContractVerificationAttribute = interface(DNAttribute)
  ['{C3D144B3-F242-3F2B-A638-50B3AB403C15}']
  { getter & setter } 

    function get_Value: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的值，该值指示是否要验证的目标协定。
    /// </summary>
    property Value: Boolean read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractVerificationAttribute = class(TDNGenericImport<DNContractVerificationAttributeClass, DNContractVerificationAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNPureAttributeClass = interface(DNAttributeClass)
  ['{49E0DFA0-98DF-4241-8FAB-159086D070B5}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNPureAttribute;

  end;

  /// <summary>
  ///   指示类型或方法是纯函数，即它不会执行任何可见状态更改。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.PureAttribute')]
  DNPureAttribute = interface(DNAttribute)
  ['{6AA2F68B-DDF0-3E6D-BFC5-08FCE5317C8F}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPureAttribute = class(TDNGenericImport<DNPureAttributeClass, DNPureAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggableAttributeClass = interface(DNAttributeClass)
  ['{6320F242-BCA0-41C9-B0BE-336C58E8610C}']
  { constructors } 

    /// <summary>
    ///   使用为实时 (JIT) 编译器指定的跟踪和优化选项来初始化  类的新实例。
    /// </summary>
    {class} function init(isJITTrackingEnabled: Boolean; isJITOptimizerDisabled: Boolean): DNDebuggableAttribute; overload;
    /// <summary>
    ///   使用为实时 (JIT) 编译器指定的调试模式来初始化  类的新实例。
    /// </summary>
    {class} function init(modes: DNDebuggableAttribute_DebuggingModes): DNDebuggableAttribute; overload;

  end;

  /// <summary>
  ///   修改运行时实时 (JIT) 调试的代码生成。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggableAttribute')]
  DNDebuggableAttribute = interface(DNAttribute)
  ['{DF1F67B4-74F7-30AF-922D-29F0B91ABC25}']
  { getter & setter } 

    function get_IsJITTrackingEnabled: Boolean;
    function get_IsJITOptimizerDisabled: Boolean;
    function get_DebuggingFlags: DNDebuggableAttribute_DebuggingModes;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取指示运行时是否将在代码生成过程中跟踪调试器信息的值。
    /// </summary>
    property IsJITTrackingEnabled: Boolean read get_IsJITTrackingEnabled;
    /// <summary>
    ///   获取指示运行时优化程序是否已禁用的值。
    /// </summary>
    property IsJITOptimizerDisabled: Boolean read get_IsJITOptimizerDisabled;
    /// <summary>
    ///   获取属性的调试模式。
    /// </summary>
    property DebuggingFlags: DNDebuggableAttribute_DebuggingModes read get_DebuggingFlags;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggableAttribute = class(TDNGenericImport<DNDebuggableAttributeClass, DNDebuggableAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerBrowsableAttributeClass = interface(DNAttributeClass)
  ['{4CB68426-6A50-46E4-A064-9BE1AB066202}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNDebuggerBrowsableState): DNDebuggerBrowsableAttribute;

  end;

  /// <summary>
  ///   确定成员是否会显示在调试器变量窗口中以及其显示方式。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggerBrowsableAttribute')]
  DNDebuggerBrowsableAttribute = interface(DNAttribute)
  ['{A709EBBE-BDB2-30F4-959B-37B7A68E4299}']
  { getter & setter } 

    function get_State: DNDebuggerBrowsableState;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取属性的显示状态。
    /// </summary>
    property State: DNDebuggerBrowsableState read get_State;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerBrowsableAttribute = class(TDNGenericImport<DNDebuggerBrowsableAttributeClass, DNDebuggerBrowsableAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerDisplayAttributeClass = interface(DNAttributeClass)
  ['{B0379FE7-63BD-46A5-84C3-959D6D5C28DF}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(value: string): DNDebuggerDisplayAttribute;

  end;

  /// <summary>
  ///   确定类或字段在调试器变量窗口中的显示方式。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggerDisplayAttribute')]
  DNDebuggerDisplayAttribute = interface(DNAttribute)
  ['{F640E47B-67D0-31A2-8621-02E2DD41B496}']
  { getter & setter } 

    function get_Value: string;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取要在调试器变量窗口的值列中显示的字符串。
    /// </summary>
    property Value: string read get_Value;
    /// <summary>
    ///   获取或设置要在调试器变量窗口中显示的名称。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置要在调试器变量窗口的类型列中显示的字符串。
    /// </summary>
    property &Type: string read get_Type write set_Type;
    /// <summary>
    ///   获取或设置该属性的目标的类型。
    /// </summary>
    property Target: DNType read get_Target write set_Target;
    /// <summary>
    ///   获取或设置该属性的目标的类型名称。
    /// </summary>
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerDisplayAttribute = class(TDNGenericImport<DNDebuggerDisplayAttributeClass, DNDebuggerDisplayAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerHiddenAttributeClass = interface(DNAttributeClass)
  ['{8EB62002-AC72-40CB-BEB5-EB8DCCB6067A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDebuggerHiddenAttribute;

  end;

  /// <summary>
  ///   指定 。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggerHiddenAttribute')]
  DNDebuggerHiddenAttribute = interface(DNAttribute)
  ['{41970D73-92F6-36D9-874D-3BD0762A0D6F}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerHiddenAttribute = class(TDNGenericImport<DNDebuggerHiddenAttributeClass, DNDebuggerHiddenAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerNonUserCodeAttributeClass = interface(DNAttributeClass)
  ['{D08B4166-BB4A-4FF3-860E-DA6F12B0B792}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDebuggerNonUserCodeAttribute;

  end;

  /// <summary>
  ///   标识不属于应用程序用户代码一部分的类型或成员。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggerNonUserCodeAttribute')]
  DNDebuggerNonUserCodeAttribute = interface(DNAttribute)
  ['{29625281-51CE-3F8A-AC4D-E360CACB92E2}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerNonUserCodeAttribute = class(TDNGenericImport<DNDebuggerNonUserCodeAttributeClass, DNDebuggerNonUserCodeAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerStepperBoundaryAttributeClass = interface(DNAttributeClass)
  ['{6E368E3A-F7D7-44DE-A43A-929D5BD275C0}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDebuggerStepperBoundaryAttribute;

  end;

  /// <summary>
  ///   指示属性后面的代码将在运行、 未步骤、 模式中执行。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggerStepperBoundaryAttribute')]
  DNDebuggerStepperBoundaryAttribute = interface(DNAttribute)
  ['{1B979846-AAEB-314B-8E63-D44EF1CB9EFC}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerStepperBoundaryAttribute = class(TDNGenericImport<DNDebuggerStepperBoundaryAttributeClass, DNDebuggerStepperBoundaryAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerStepThroughAttributeClass = interface(DNAttributeClass)
  ['{4975A2A0-A8DE-4FC6-99AF-9D11CBF5E8D0}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDebuggerStepThroughAttribute;

  end;

  /// <summary>
  ///   指示调试器逐句通过代码，而不是单步执行代码。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggerStepThroughAttribute')]
  DNDebuggerStepThroughAttribute = interface(DNAttribute)
  ['{93F551D6-2F9E-301B-BE63-85AEF508CAE0}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerStepThroughAttribute = class(TDNGenericImport<DNDebuggerStepThroughAttributeClass, DNDebuggerStepThroughAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerTypeProxyAttributeClass = interface(DNAttributeClass)
  ['{E825C506-1B37-47C2-86FC-487D24490234}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用的代理的类型。
    /// </summary>
    {class} function init(&type: DNType): DNDebuggerTypeProxyAttribute; overload;
    /// <summary>
    ///   新实例初始化  类使用的代理的类型名称。
    /// </summary>
    {class} function init(typeName: string): DNDebuggerTypeProxyAttribute; overload;

  end;

  /// <summary>
  ///   指定类型的显示代理。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggerTypeProxyAttribute')]
  DNDebuggerTypeProxyAttribute = interface(DNAttribute)
  ['{8366EE18-BBE6-3061-B99F-BA87E26919D1}']
  { getter & setter } 

    function get_ProxyTypeName: string;
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取代理类型的类型名称。
    /// </summary>
    property ProxyTypeName: string read get_ProxyTypeName;
    /// <summary>
    ///   获取或设置该属性的目标类型。
    /// </summary>
    property Target: DNType read get_Target write set_Target;
    /// <summary>
    ///   获取或设置目标类型的名称。
    /// </summary>
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerTypeProxyAttribute = class(TDNGenericImport<DNDebuggerTypeProxyAttributeClass, DNDebuggerTypeProxyAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerVisualizerAttributeClass = interface(DNAttributeClass)
  ['{BD07263B-2061-4E3A-AB08-44617891AFE6}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定可视化工具的类型名称。
    /// </summary>
    {class} function init(visualizerTypeName: string): DNDebuggerVisualizerAttribute; overload;
    /// <summary>
    ///   新实例初始化  类，同时指定可视化工具的类型名称和类型名称的可视化工具对象源。
    /// </summary>
    {class} function init(visualizerTypeName: string; visualizerObjectSourceTypeName: string): DNDebuggerVisualizerAttribute; overload;
    /// <summary>
    ///   新实例初始化  类，同时指定可视化工具，其中的可视化工具对象源类型的类型名称。
    /// </summary>
    {class} function init(visualizerTypeName: string; visualizerObjectSource: DNType): DNDebuggerVisualizerAttribute; overload;
    /// <summary>
    ///   初始化  类的新实例，指定可视化工具的类型。
    /// </summary>
    {class} function init(visualizer: DNType): DNDebuggerVisualizerAttribute; overload;
    /// <summary>
    ///   初始化  类的新实例，指定可视化工具的类型和可视化工具对象源的类型。
    /// </summary>
    {class} function init(visualizer: DNType; visualizerObjectSource: DNType): DNDebuggerVisualizerAttribute; overload;
    /// <summary>
    ///   初始化  类的新实例，指定可视化工具的类型和可视化工具对象源的类型名称。
    /// </summary>
    {class} function init(visualizer: DNType; visualizerObjectSourceTypeName: string): DNDebuggerVisualizerAttribute; overload;

  end;

  /// <summary>
  ///   指定该类型具有可视化工具。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Diagnostics.DebuggerVisualizerAttribute')]
  DNDebuggerVisualizerAttribute = interface(DNAttribute)
  ['{29813E13-8772-3B1F-878D-26C33B045D5A}']
  { getter & setter } 

    function get_VisualizerObjectSourceTypeName: string;
    function get_VisualizerTypeName: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取该可视化工具的完全限定的类型名对象源。
    /// </summary>
    property VisualizerObjectSourceTypeName: string read get_VisualizerObjectSourceTypeName;
    /// <summary>
    ///   获取该可视化工具的完全限定的类型名称。
    /// </summary>
    property VisualizerTypeName: string read get_VisualizerTypeName;
    /// <summary>
    ///   获取或设置可视化工具的说明。
    /// </summary>
    property Description: string read get_Description write set_Description;
    /// <summary>
    ///   获取或设置目标类型在程序集级别应用该特性。
    /// </summary>
    property Target: DNType read get_Target write set_Target;
    /// <summary>
    ///   获取或设置程序集级别应用该特性的完全限定的类型名称。
    /// </summary>
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerVisualizerAttribute = class(TDNGenericImport<DNDebuggerVisualizerAttributeClass, DNDebuggerVisualizerAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventAttributeClass = interface(DNAttributeClass)
  ['{AB203AB3-3359-414F-9D48-7CACADCC369A}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类具有指定的事件标识符。
    /// </summary>
    {class} function init(eventId: Int32): DNEventAttribute;

  end;

  /// <summary>
  ///   指定事件的附加事件架构信息。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventAttribute')]
  DNEventAttribute = interface(DNAttribute)
  ['{66DA3C30-517E-3D4E-9D9C-5E91A8566D1D}']
  { getter & setter } 

    function get_EventId: Int32;
    function get_Level: DNEventLevel;
    procedure set_Level(value: DNEventLevel);
    function get_Keywords: DNEventKeywords;
    procedure set_Keywords(value: DNEventKeywords);
    function get_Opcode: DNEventOpcode;
    procedure set_Opcode(value: DNEventOpcode);
    function get_Task: DNEventTask;
    procedure set_Task(value: DNEventTask);
    function get_Channel: DNEventChannel;
    procedure set_Channel(value: DNEventChannel);
    function get_Version: Byte;
    procedure set_Version(value: Byte);
    function get_Message: string;
    procedure set_Message(value: string);
    function get_Tags: DNEventTags;
    procedure set_Tags(value: DNEventTags);
    function get_ActivityOptions: DNEventActivityOptions;
    procedure set_ActivityOptions(value: DNEventActivityOptions);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置事件的标识符。
    /// </summary>
    property EventId: Int32 read get_EventId;
    /// <summary>
    ///   获取或设置事件的级别。
    /// </summary>
    property Level: DNEventLevel read get_Level write set_Level;
    /// <summary>
    ///   获取或设置事件的关键字。
    /// </summary>
    property Keywords: DNEventKeywords read get_Keywords write set_Keywords;
    /// <summary>
    ///   获取或设置事件的操作代码。
    /// </summary>
    property Opcode: DNEventOpcode read get_Opcode write set_Opcode;
    /// <summary>
    ///   获取或设置事件的任务。
    /// </summary>
    property Task: DNEventTask read get_Task write set_Task;
    /// <summary>
    ///   获取或设置应在其中写入事件的附加事件日志。
    /// </summary>
    property Channel: DNEventChannel read get_Channel write set_Channel;
    /// <summary>
    ///   获取或设置事件的版本。
    /// </summary>
    property Version: Byte read get_Version write set_Version;
    /// <summary>
    ///   获取或设置事件的消息。
    /// </summary>
    property Message: string read get_Message write set_Message;
    /// <summary>
    ///   获取和设置  值这  对象。
    ///               事件标记是记录事件时，通过传递一个用户定义的值。
    /// </summary>
    property Tags: DNEventTags read get_Tags write set_Tags;
    /// <summary>
    ///   指定活动的开始和停止事件的行为。
    ///               活动是时间的在应用程序的开始和停止之间的区域。
    /// </summary>
    property ActivityOptions: DNEventActivityOptions read get_ActivityOptions write set_ActivityOptions;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventAttribute = class(TDNGenericImport<DNEventAttributeClass, DNEventAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventDataAttributeClass = interface(DNAttributeClass)
  ['{A992ED6E-B8A5-435F-A2E7-BE8EF4D58CA5}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEventDataAttribute;

  end;

  /// <summary>
  ///   指定要传递给类型  方法。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventDataAttribute')]
  DNEventDataAttribute = interface(DNAttribute)
  ['{E12D56E4-93F8-344F-BA12-EF1175132EE5}']
  { getter & setter } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   如果未显式命名事件类型或属性，则获取或设置要应用于事件的名称。
    /// </summary>
    property Name: string read get_Name write set_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventDataAttribute = class(TDNGenericImport<DNEventDataAttributeClass, DNEventDataAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventFieldAttributeClass = interface(DNAttributeClass)
  ['{D80096EF-9EB5-4888-9EFF-5BF1BB8F3A8B}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEventFieldAttribute;

  end;

  /// <summary>
  ///   作为传递的用户定义类型的字段上放置  负载。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventFieldAttribute')]
  DNEventFieldAttribute = interface(DNAttribute)
  ['{168AE035-28A6-3962-91E7-E1F033475664}']
  { getter & setter } 

    function get_Tags: DNEventFieldTags;
    procedure set_Tags(value: DNEventFieldTags);
    function get_Format: DNEventFieldFormat;
    procedure set_Format(value: DNEventFieldFormat);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取和设置用户定义  正是所需要的包含不受支持的类型之一的数据的字段的值。
    /// </summary>
    property Tags: DNEventFieldTags read get_Tags write set_Tags;
    /// <summary>
    ///   获取和设置值，该值指定如何设置用户定义类型的值的格式。
    /// </summary>
    property Format: DNEventFieldFormat read get_Format write set_Format;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventFieldAttribute = class(TDNGenericImport<DNEventFieldAttributeClass, DNEventFieldAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventIgnoreAttributeClass = interface(DNAttributeClass)
  ['{FE63BA75-BAA3-4D80-8B1C-647A78DF86A9}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEventIgnoreAttribute;

  end;

  /// <summary>
  ///   指定在编写的事件类型时，应忽略属性  方法。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventIgnoreAttribute')]
  DNEventIgnoreAttribute = interface(DNAttribute)
  ['{51E9424C-C906-3824-B8D1-A1317E644BDC}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventIgnoreAttribute = class(TDNGenericImport<DNEventIgnoreAttributeClass, DNEventIgnoreAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceAttributeClass = interface(DNAttributeClass)
  ['{0E8AE03C-C31C-4A41-9E6F-6DB3D72D40A0}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEventSourceAttribute;

  end;

  /// <summary>
  ///   允许事件跟踪独立于事件源类的名称定义的 Windows (ETW) 名称。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventSourceAttribute')]
  DNEventSourceAttribute = interface(DNAttribute)
  ['{63851642-7F96-3A01-90A0-0F7A8CFF3E8A}']
  { getter & setter } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Guid: string;
    procedure set_Guid(value: string);
    function get_LocalizationResources: string;
    procedure set_LocalizationResources(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置事件源的名称。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置事件源标识符。
    /// </summary>
    property Guid: string read get_Guid write set_Guid;
    /// <summary>
    ///   获取或设置本地化资源文件的名称。
    /// </summary>
    property LocalizationResources: string read get_LocalizationResources write set_LocalizationResources;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventSourceAttribute = class(TDNGenericImport<DNEventSourceAttributeClass, DNEventSourceAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNNonEventAttributeClass = interface(DNAttributeClass)
  ['{0CC948DC-D422-486D-A9E0-FA4E5FCDE88D}']
  { constructors } 

    /// <summary>
    ///   创建  类的新实例。
    /// </summary>
    {class} function init: DNNonEventAttribute;

  end;

  /// <summary>
  ///   标识不生成事件的方法。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.NonEventAttribute')]
  DNNonEventAttribute = interface(DNAttribute)
  ['{0B54DBE3-2E10-3885-8EB4-6F79DE3679B9}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNonEventAttribute = class(TDNGenericImport<DNNonEventAttributeClass, DNNonEventAttribute>) end;

  //-------------namespace: System----------------
  DNFlagsAttributeClass = interface(DNAttributeClass)
  ['{C4C3B48C-1BFB-4B05-BB2B-895365FC7AE2}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNFlagsAttribute;

  end;

  /// <summary>
  ///   指示可将枚举视为位域（即一组标志）。
  /// </summary>
  [DNTypeName('System.FlagsAttribute')]
  DNFlagsAttribute = interface(DNAttribute)
  ['{66CE75D4-0334-3CA6-BCA8-CE9AF28A4396}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNFlagsAttribute = class(TDNGenericImport<DNFlagsAttributeClass, DNFlagsAttribute>) end;

  //-------------namespace: System----------------
  DNLoaderOptimizationAttributeClass = interface(DNAttributeClass)
  ['{63BAFF9E-3F72-49E7-8363-534113205339}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类传递给指定的值。
    /// </summary>
    {class} function init(value: Byte): DNLoaderOptimizationAttribute; overload;
    /// <summary>
    ///   新实例初始化  类传递给指定的值。
    /// </summary>
    {class} function init(value: DNLoaderOptimization): DNLoaderOptimizationAttribute; overload;

  end;

  /// <summary>
  ///   用于设置可执行的应用程序的主要方法的默认加载程序优化策略。
  /// </summary>
  [DNTypeName('System.LoaderOptimizationAttribute')]
  DNLoaderOptimizationAttribute = interface(DNAttribute)
  ['{B39742FD-1A55-3810-9EA5-F6E86EBEB472}']
  { getter & setter } 

    function get_Value: DNLoaderOptimization;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前  此实例的值。
    /// </summary>
    property Value: DNLoaderOptimization read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNLoaderOptimizationAttribute = class(TDNGenericImport<DNLoaderOptimizationAttributeClass, DNLoaderOptimizationAttribute>) end;

  //-------------namespace: System----------------
  DNMTAThreadAttributeClass = interface(DNAttributeClass)
  ['{D0B8AA68-EC8D-40B9-B5EE-05CA124D0CD7}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNMTAThreadAttribute;

  end;

  /// <summary>
  ///   指示应用程序的 COM 线程模型为多线程单元 (MTA)。
  /// </summary>
  [DNTypeName('System.MTAThreadAttribute')]
  DNMTAThreadAttribute = interface(DNAttribute)
  ['{B406AC70-4D7E-3D24-B241-AEAEAC343BD9}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNMTAThreadAttribute = class(TDNGenericImport<DNMTAThreadAttributeClass, DNMTAThreadAttribute>) end;

  //-------------namespace: System----------------
  DNNonSerializedAttributeClass = interface(DNAttributeClass)
  ['{A679C399-AC7D-4774-ADD9-665A24893B7B}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNNonSerializedAttribute;

  end;

  /// <summary>
  ///   表示可序列化类的字段不应进行序列化。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.NonSerializedAttribute')]
  DNNonSerializedAttribute = interface(DNAttribute)
  ['{CC77F5F3-222D-3586-88C3-410477A3B65D}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNonSerializedAttribute = class(TDNGenericImport<DNNonSerializedAttributeClass, DNNonSerializedAttribute>) end;

  //-------------namespace: System----------------
  DNObsoleteAttributeClass = interface(DNAttributeClass)
  ['{25CF6388-FA34-4359-A080-2134F937B94D}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNObsoleteAttribute; overload;
    /// <summary>
    ///   新实例初始化  使用指定的变通方法消息。
    /// </summary>
    {class} function init(message: string): DNObsoleteAttribute; overload;
    /// <summary>
    ///   新实例初始化  带有变通方法消息和一个布尔值，该值指示是否已过时元素用法将视为错误的类。
    /// </summary>
    {class} function init(message: string; error: Boolean): DNObsoleteAttribute; overload;

  end;

  /// <summary>
  ///   标记不再使用的程序元素。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.ObsoleteAttribute')]
  DNObsoleteAttribute = interface(DNAttribute)
  ['{08295C62-7462-3633-B35E-7AE68ACA3948}']
  { getter & setter } 

    function get_Message: string;
    function get_IsError: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包括可选程序元素的描述的解决方法消息。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取一个布尔值，该值指示是否编译器将被视为已过时的程序元素的用法错误。
    /// </summary>
    property IsError: Boolean read get_IsError;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObsoleteAttribute = class(TDNGenericImport<DNObsoleteAttributeClass, DNObsoleteAttribute>) end;

  //-------------namespace: System----------------
  DNParamArrayAttributeClass = interface(DNAttributeClass)
  ['{A93854C0-F5D0-4DFE-A92C-EA85F9875236}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNParamArrayAttribute;

  end;

  /// <summary>
  ///   指示方法在其调用中将允许数目可变的自变量。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.ParamArrayAttribute')]
  DNParamArrayAttribute = interface(DNAttribute)
  ['{3495E5FA-2A90-3CA7-B3B5-58736C4441DD}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNParamArrayAttribute = class(TDNGenericImport<DNParamArrayAttributeClass, DNParamArrayAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyAlgorithmIdAttributeClass = interface(DNAttributeClass)
  ['{31927A07-C37B-46E6-99B6-3E787D38E5B6}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  使用指定的哈希算法，使用其中一个的成员的类  来表示哈希算法。
    /// </summary>
    {class} function init(algorithmId: DNAssemblyHashAlgorithm): DNAssemblyAlgorithmIdAttribute; overload;
    /// <summary>
    ///   新实例初始化  使用指定的哈希算法，使用一个无符号的整数来表示哈希算法的类。
    /// </summary>
    {class} function init(algorithmId: UInt32): DNAssemblyAlgorithmIdAttribute; overload;

  end;

  /// <summary>
  ///   指定的算法进行哈希运算中程序集的所有文件。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyAlgorithmIdAttribute')]
  DNAssemblyAlgorithmIdAttribute = interface(DNAttribute)
  ['{0D052B0A-23D1-3BAC-85EE-4E764B814CEE}']
  { getter & setter } 

    function get_AlgorithmId: UInt32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取程序集清单内容的哈希算法。
    /// </summary>
    property AlgorithmId: UInt32 read get_AlgorithmId;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyAlgorithmIdAttribute = class(TDNGenericImport<DNAssemblyAlgorithmIdAttributeClass, DNAssemblyAlgorithmIdAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCompanyAttributeClass = interface(DNAttributeClass)
  ['{701C6213-8CA9-4097-BF7A-29F74BEA948F}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(company: string): DNAssemblyCompanyAttribute;

  end;

  /// <summary>
  ///   定义程序集清单的公司名称自定义属性。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyCompanyAttribute')]
  DNAssemblyCompanyAttribute = interface(DNAttribute)
  ['{62342FB2-16BF-30A9-88AD-6BC781EEC94F}']
  { getter & setter } 

    function get_Company: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取公司名称信息。
    /// </summary>
    property Company: string read get_Company;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCompanyAttribute = class(TDNGenericImport<DNAssemblyCompanyAttributeClass, DNAssemblyCompanyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyConfigurationAttributeClass = interface(DNAttributeClass)
  ['{48EEC836-0E8F-4450-BE05-0A04E9D52D21}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(configuration: string): DNAssemblyConfigurationAttribute;

  end;

  /// <summary>
  ///   指定程序集的生成配置，如零售或调试。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyConfigurationAttribute')]
  DNAssemblyConfigurationAttribute = interface(DNAttribute)
  ['{09DD9840-5E39-317A-AAB3-0A467998DE25}']
  { getter & setter } 

    function get_Configuration: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取程序集配置信息。
    /// </summary>
    property Configuration: string read get_Configuration;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyConfigurationAttribute = class(TDNGenericImport<DNAssemblyConfigurationAttributeClass, DNAssemblyConfigurationAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCopyrightAttributeClass = interface(DNAttributeClass)
  ['{8215598D-8A0D-41DB-A069-958439DD423C}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(copyright: string): DNAssemblyCopyrightAttribute;

  end;

  /// <summary>
  ///   定义程序集清单的版权自定义属性。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyCopyrightAttribute')]
  DNAssemblyCopyrightAttribute = interface(DNAttribute)
  ['{8687959F-D86D-3217-8D58-BE9A0427BB84}']
  { getter & setter } 

    function get_Copyright: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取版权信息。
    /// </summary>
    property Copyright: string read get_Copyright;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCopyrightAttribute = class(TDNGenericImport<DNAssemblyCopyrightAttributeClass, DNAssemblyCopyrightAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCultureAttributeClass = interface(DNAttributeClass)
  ['{251E8D7E-50FB-46B1-A2C0-2918052E826C}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  与正在属性化程序集支持的区域性的类。
    /// </summary>
    {class} function init(culture: string): DNAssemblyCultureAttribute;

  end;

  /// <summary>
  ///   指定程序集支持的区域性。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyCultureAttribute')]
  DNAssemblyCultureAttribute = interface(DNAttribute)
  ['{4265AB21-A68F-38A9-98D8-5D62B8035EA0}']
  { getter & setter } 

    function get_Culture: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取属性化程序集的支持的区域性。
    /// </summary>
    property Culture: string read get_Culture;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCultureAttribute = class(TDNGenericImport<DNAssemblyCultureAttributeClass, DNAssemblyCultureAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDefaultAliasAttributeClass = interface(DNAttributeClass)
  ['{76100F39-1DAD-496B-859F-E9075EC78211}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(defaultAlias: string): DNAssemblyDefaultAliasAttribute;

  end;

  /// <summary>
  ///   定义程序集清单的友好默认别名。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyDefaultAliasAttribute')]
  DNAssemblyDefaultAliasAttribute = interface(DNAttribute)
  ['{8BEB1256-5D9B-3262-BF85-BEB6287E4EEA}']
  { getter & setter } 

    function get_DefaultAlias: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取默认别名信息。
    /// </summary>
    property DefaultAlias: string read get_DefaultAlias;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDefaultAliasAttribute = class(TDNGenericImport<DNAssemblyDefaultAliasAttributeClass, DNAssemblyDefaultAliasAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDelaySignAttributeClass = interface(DNAttributeClass)
  ['{CDC07E7D-4CBD-41F4-87CC-ED2EC6D88976}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(delaySign: Boolean): DNAssemblyDelaySignAttribute;

  end;

  /// <summary>
  ///   指定程序集在创建时未完全签名。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyDelaySignAttribute')]
  DNAssemblyDelaySignAttribute = interface(DNAttribute)
  ['{4804184F-4741-396B-AF5B-71134937F21A}']
  { getter & setter } 

    function get_DelaySign: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示该属性的状态。
    /// </summary>
    property DelaySign: Boolean read get_DelaySign;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDelaySignAttribute = class(TDNGenericImport<DNAssemblyDelaySignAttributeClass, DNAssemblyDelaySignAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDescriptionAttributeClass = interface(DNAttributeClass)
  ['{41ED6EC8-4BAC-4008-BEE8-DA371D2263D2}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(description: string): DNAssemblyDescriptionAttribute;

  end;

  /// <summary>
  ///   提供程序集的文本说明。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyDescriptionAttribute')]
  DNAssemblyDescriptionAttribute = interface(DNAttribute)
  ['{432E5E9F-03BA-37B2-8EDF-7FAC14B03B4F}']
  { getter & setter } 

    function get_Description: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取程序集说明信息。
    /// </summary>
    property Description: string read get_Description;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDescriptionAttribute = class(TDNGenericImport<DNAssemblyDescriptionAttributeClass, DNAssemblyDescriptionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyFileVersionAttributeClass = interface(DNAttributeClass)
  ['{902B8D9D-82EA-4CA3-BCBC-CE97712FC670}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定文件版本。
    /// </summary>
    {class} function init(version: string): DNAssemblyFileVersionAttribute;

  end;

  /// <summary>
  ///   指示编译器使用 Win32 文件版本资源的特定版本号。
  ///               Win32 文件版本不需要与程序集的版本号相同。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyFileVersionAttribute')]
  DNAssemblyFileVersionAttribute = interface(DNAttribute)
  ['{14152CB5-DC51-3C42-8A43-09854DEA1B8F}']
  { getter & setter } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取 Win32 文件版本资源名称。
    /// </summary>
    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyFileVersionAttribute = class(TDNGenericImport<DNAssemblyFileVersionAttributeClass, DNAssemblyFileVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyFlagsAttributeClass = interface(DNAttributeClass)
  ['{B98E168F-FDEF-4E6B-900C-AC6EDFA72AF4}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类的指定组合  标志，强制转换为无符号的整数值。
    /// </summary>
    {class} function init(flags: UInt32): DNAssemblyFlagsAttribute; overload;
    /// <summary>
    ///   新实例初始化  类的指定组合  标志，被强制转换为整数值。
    /// </summary>
    {class} function init(assemblyFlags: Int32): DNAssemblyFlagsAttribute; overload;
    /// <summary>
    ///   新实例初始化  类的指定组合  标志。
    /// </summary>
    {class} function init(assemblyFlags: DNAssemblyNameFlags): DNAssemblyFlagsAttribute; overload;

  end;

  /// <summary>
  ///   指定的按位组合  标志的程序集，它描述在实时 (JIT) 编译器选项、 该程序集是否可重定目标，以及是否具有完整或已标记化的公共密钥。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyFlagsAttribute')]
  DNAssemblyFlagsAttribute = interface(DNAttribute)
  ['{4554ED74-4243-3E7C-9B33-E9A89379C4F1}']
  { getter & setter } 

    function get_Flags: UInt32;
    function get_AssemblyFlags: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个无符号的整数值表示的组合  创建此特性实例时指定的标志。
    /// </summary>
    property Flags: UInt32 read get_Flags;
    /// <summary>
    ///   获取一个整数值表示的组合  创建此特性实例时指定的标志。
    /// </summary>
    property AssemblyFlags: Int32 read get_AssemblyFlags;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyFlagsAttribute = class(TDNGenericImport<DNAssemblyFlagsAttributeClass, DNAssemblyFlagsAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyInformationalVersionAttributeClass = interface(DNAttributeClass)
  ['{91A2B75A-7311-40C6-ABB6-651DF4A38237}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(informationalVersion: string): DNAssemblyInformationalVersionAttribute;

  end;

  /// <summary>
  ///   定义程序集清单的其他版本信息。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyInformationalVersionAttribute')]
  DNAssemblyInformationalVersionAttribute = interface(DNAttribute)
  ['{894593B9-99E5-3B61-A592-EE44B9396277}']
  { getter & setter } 

    function get_InformationalVersion: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取版本信息。
    /// </summary>
    property InformationalVersion: string read get_InformationalVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyInformationalVersionAttribute = class(TDNGenericImport<DNAssemblyInformationalVersionAttributeClass, DNAssemblyInformationalVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyKeyFileAttributeClass = interface(DNAttributeClass)
  ['{7B588794-4EA0-4A72-B685-A715802A7EDB}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  包含要生成正在属性化的程序集的强名称的密钥对的文件同名的类。
    /// </summary>
    {class} function init(keyFile: string): DNAssemblyKeyFileAttribute;

  end;

  /// <summary>
  ///   指定包含用于生成强名称的密钥对的文件的名称。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyKeyFileAttribute')]
  DNAssemblyKeyFileAttribute = interface(DNAttribute)
  ['{FF408450-1DB9-3203-84EC-B70A01F48A06}']
  { getter & setter } 

    function get_KeyFile: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包含用于生成特性化程序集的强名称密钥对的文件的名称。
    /// </summary>
    property KeyFile: string read get_KeyFile;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyKeyFileAttribute = class(TDNGenericImport<DNAssemblyKeyFileAttributeClass, DNAssemblyKeyFileAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyKeyNameAttributeClass = interface(DNAttributeClass)
  ['{9AD375DA-6392-4BF8-9CB6-F1824691557F}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  同名的保存用于生成正在属性化的程序集的强名称密钥对的容器的类。
    /// </summary>
    {class} function init(keyName: string): DNAssemblyKeyNameAttribute;

  end;

  /// <summary>
  ///   指定包含用于生成强名称的密钥对的 CSP 中的密钥容器的名称。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyKeyNameAttribute')]
  DNAssemblyKeyNameAttribute = interface(DNAttribute)
  ['{3DACE301-6C51-3BF7-B975-E4A05F00FD4D}']
  { getter & setter } 

    function get_KeyName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包含用于生成特性化程序集的强名称的密钥对的容器的名称。
    /// </summary>
    property KeyName: string read get_KeyName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyKeyNameAttribute = class(TDNGenericImport<DNAssemblyKeyNameAttributeClass, DNAssemblyKeyNameAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyMetadataAttributeClass = interface(DNAttributeClass)
  ['{15CDBB7F-7816-4BDB-9AFC-A99D20C34694}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类通过使用指定的元数据键和值。
    /// </summary>
    {class} function init(key: string; value: string): DNAssemblyMetadataAttribute;

  end;

  /// <summary>
  ///   定义经过修饰的程序集的密钥/值元数据对。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyMetadataAttribute')]
  DNAssemblyMetadataAttribute = interface(DNAttribute)
  ['{4DEDE958-C548-3088-84B2-999F3C0671F9}']
  { getter & setter } 

    function get_Key: string;
    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取元数据键。
    /// </summary>
    property Key: string read get_Key;
    /// <summary>
    ///   获取元数据值。
    /// </summary>
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyMetadataAttribute = class(TDNGenericImport<DNAssemblyMetadataAttributeClass, DNAssemblyMetadataAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyProductAttributeClass = interface(DNAttributeClass)
  ['{4E1BDDF1-19FD-49D0-85FA-EEF346C20024}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(product: string): DNAssemblyProductAttribute;

  end;

  /// <summary>
  ///   定义程序集清单的产品名自定义属性。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyProductAttribute')]
  DNAssemblyProductAttribute = interface(DNAttribute)
  ['{CFE2BCF1-683C-39B5-83CE-4B186A521513}']
  { getter & setter } 

    function get_Product: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取产品名称信息。
    /// </summary>
    property Product: string read get_Product;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyProductAttribute = class(TDNGenericImport<DNAssemblyProductAttributeClass, DNAssemblyProductAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblySignatureKeyAttributeClass = interface(DNAttributeClass)
  ['{ED67940A-E89B-4FD2-ADE6-C3D3753E5B86}']
  { constructors } 

    /// <summary>
    ///   创建的新实例  类通过使用指定的公钥和副署。
    /// </summary>
    {class} function init(publicKey: string; countersignature: string): DNAssemblySignatureKeyAttribute;

  end;

  /// <summary>
  ///   从旧的、 更简单的强名称密钥迁移到更大的密钥提供更强的哈希算法。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblySignatureKeyAttribute')]
  DNAssemblySignatureKeyAttribute = interface(DNAttribute)
  ['{4FDC3DFD-7BBE-3C3A-948D-56F7123056C0}']
  { getter & setter } 

    function get_PublicKey: string;
    function get_Countersignature: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取用来对程序集签名的强名称的公共密钥。
    /// </summary>
    property PublicKey: string read get_PublicKey;
    /// <summary>
    ///   获取此程序集的强名称的副署。
    /// </summary>
    property Countersignature: string read get_Countersignature;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblySignatureKeyAttribute = class(TDNGenericImport<DNAssemblySignatureKeyAttributeClass, DNAssemblySignatureKeyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyTitleAttributeClass = interface(DNAttributeClass)
  ['{1FC1FBB2-EA65-449F-B147-9BD3A88DF93C}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(title: string): DNAssemblyTitleAttribute;

  end;

  /// <summary>
  ///   提供程序集的说明。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyTitleAttribute')]
  DNAssemblyTitleAttribute = interface(DNAttribute)
  ['{51B4F67C-2FCB-391D-A381-D040100D6717}']
  { getter & setter } 

    function get_Title: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取程序集标题信息。
    /// </summary>
    property Title: string read get_Title;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTitleAttribute = class(TDNGenericImport<DNAssemblyTitleAttributeClass, DNAssemblyTitleAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyTrademarkAttributeClass = interface(DNAttributeClass)
  ['{38223C6D-F435-4E19-BD31-324F443A2F00}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(trademark: string): DNAssemblyTrademarkAttribute;

  end;

  /// <summary>
  ///   定义程序集清单的商标自定义属性。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyTrademarkAttribute')]
  DNAssemblyTrademarkAttribute = interface(DNAttribute)
  ['{E64C95DF-EADC-3D08-9C6F-80F29D92CB4E}']
  { getter & setter } 

    function get_Trademark: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取商标信息。
    /// </summary>
    property Trademark: string read get_Trademark;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTrademarkAttribute = class(TDNGenericImport<DNAssemblyTrademarkAttributeClass, DNAssemblyTrademarkAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyVersionAttributeClass = interface(DNAttributeClass)
  ['{39A5D975-1191-49D4-A0A7-5C82896CE0C8}']
  { constructors } 

    /// <summary>
    ///   使用正在属性化的程序集的版本号来初始化  类的新实例。
    /// </summary>
    {class} function init(version: string): DNAssemblyVersionAttribute;

  end;

  /// <summary>
  ///   指定正在属性化的程序集的版本。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyVersionAttribute')]
  DNAssemblyVersionAttribute = interface(DNAttribute)
  ['{2D0FA06F-88FD-3643-8DBC-1F428A2B1A3B}']
  { getter & setter } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取属性化程序集的版本号。
    /// </summary>
    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyVersionAttribute = class(TDNGenericImport<DNAssemblyVersionAttributeClass, DNAssemblyVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNDefaultMemberAttributeClass = interface(DNAttributeClass)
  ['{7DA68D8E-9977-4A23-A4DD-185BF15AE2FC}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(memberName: string): DNDefaultMemberAttribute;

  end;

  /// <summary>
  ///   定义是使用的默认成员的类型的成员 。
  /// </summary>
  [DNTypeName('System.Reflection.DefaultMemberAttribute')]
  DNDefaultMemberAttribute = interface(DNAttribute)
  ['{CF452B26-6040-3ACB-9C72-CE5BB86E5046}']
  { getter & setter } 

    function get_MemberName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   从属性中获取的名称。
    /// </summary>
    property MemberName: string read get_MemberName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultMemberAttribute = class(TDNGenericImport<DNDefaultMemberAttributeClass, DNDefaultMemberAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNObfuscateAssemblyAttributeClass = interface(DNAttributeClass)
  ['{EECB47B6-C91C-41BE-8007-65E201CB870D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定要进行模糊处理的程序集公共的还是私有。
    /// </summary>
    {class} function init(assemblyIsPrivate: Boolean): DNObfuscateAssemblyAttribute;

  end;

  /// <summary>
  ///   指示模糊处理工具对相应的程序集类型使用其标准模糊处理规则。
  /// </summary>
  [DNTypeName('System.Reflection.ObfuscateAssemblyAttribute')]
  DNObfuscateAssemblyAttribute = interface(DNAttribute)
  ['{D495920D-00A0-3D6F-920C-672DF186CEC8}']
  { getter & setter } 

    function get_AssemblyIsPrivate: Boolean;
    function get_StripAfterObfuscation: Boolean;
    procedure set_StripAfterObfuscation(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值，该值指示是否将程序集是否标记为私有。
    /// </summary>
    property AssemblyIsPrivate: Boolean read get_AssemblyIsPrivate;
    /// <summary>
    ///   获取或设置  值，该值指示模糊处理工具在处理后是否应移除该特性。
    /// </summary>
    property StripAfterObfuscation: Boolean read get_StripAfterObfuscation write set_StripAfterObfuscation;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObfuscateAssemblyAttribute = class(TDNGenericImport<DNObfuscateAssemblyAttributeClass, DNObfuscateAssemblyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNObfuscationAttributeClass = interface(DNAttributeClass)
  ['{2B3E0B4D-51A3-4C5C-8F0A-AB87C538CEB8}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNObfuscationAttribute;

  end;

  /// <summary>
  ///   指示模糊处理工具执行指定的操作的程序集、 类型或成员。
  /// </summary>
  [DNTypeName('System.Reflection.ObfuscationAttribute')]
  DNObfuscationAttribute = interface(DNAttribute)
  ['{93D11DE9-5F6C-354A-A7C5-16CCCA64A9B8}']
  { getter & setter } 

    function get_StripAfterObfuscation: Boolean;
    procedure set_StripAfterObfuscation(value: Boolean);
    function get_Exclude: Boolean;
    procedure set_Exclude(value: Boolean);
    function get_ApplyToMembers: Boolean;
    procedure set_ApplyToMembers(value: Boolean);
    function get_Feature: string;
    procedure set_Feature(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  值，该值指示模糊处理工具在处理后是否应移除此属性。
    /// </summary>
    property StripAfterObfuscation: Boolean read get_StripAfterObfuscation write set_StripAfterObfuscation;
    /// <summary>
    ///   获取或设置  值，该值指示是否模糊处理工具应排除的类型或成员从模糊处理。
    /// </summary>
    property Exclude: Boolean read get_Exclude write set_Exclude;
    /// <summary>
    ///   获取或设置  值，该值指示是否要将应用于该类型的成员类型的属性。
    /// </summary>
    property ApplyToMembers: Boolean read get_ApplyToMembers write set_ApplyToMembers;
    /// <summary>
    ///   获取或设置一个字符串值，识别由模糊处理工具，并指定处理选项。
    /// </summary>
    property Feature: string read get_Feature write set_Feature;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObfuscationAttribute = class(TDNGenericImport<DNObfuscationAttributeClass, DNObfuscationAttribute>) end;

  //-------------namespace: System.Resources----------------
  DNNeutralResourcesLanguageAttributeClass = interface(DNAttributeClass)
  ['{9AA1F37D-7911-4858-BDE1-B313A9C615D2}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(cultureName: string): DNNeutralResourcesLanguageAttribute; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的最终资源回退位置。
    /// </summary>
    {class} function init(cultureName: string; location: DNUltimateResourceFallbackLocation): DNNeutralResourcesLanguageAttribute; overload;

  end;

  /// <summary>
  ///   通知应用程序的默认区域性的资源管理器。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Resources.NeutralResourcesLanguageAttribute')]
  DNNeutralResourcesLanguageAttribute = interface(DNAttribute)
  ['{87797538-6BAE-366A-A9BC-012C8F62EA44}']
  { getter & setter } 

    function get_CultureName: string;
    function get_Location: DNUltimateResourceFallbackLocation;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取为区域性名称。
    /// </summary>
    property CultureName: string read get_CultureName;
    /// <summary>
    ///   获取  类的位置，用于通过资源回退进程检索非特定语言资源。
    /// </summary>
    property Location: DNUltimateResourceFallbackLocation read get_Location;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNNeutralResourcesLanguageAttribute = class(TDNGenericImport<DNNeutralResourcesLanguageAttributeClass, DNNeutralResourcesLanguageAttribute>) end;

  //-------------namespace: System.Resources----------------
  DNSatelliteContractVersionAttributeClass = interface(DNAttributeClass)
  ['{CF375513-C1C9-4243-918C-3FFA2C6AA4A9}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(version: string): DNSatelliteContractVersionAttribute;

  end;

  /// <summary>
  ///   指示  寻求附属程序集的特定版本的对象。
  /// </summary>
  [DNTypeName('System.Resources.SatelliteContractVersionAttribute')]
  DNSatelliteContractVersionAttribute = interface(DNAttribute)
  ['{F4AE34F8-6CE4-32DC-96BA-9C7A0A9C6D06}']
  { getter & setter } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取具有所需的资源的附属程序集的版本。
    /// </summary>
    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSatelliteContractVersionAttribute = class(TDNGenericImport<DNSatelliteContractVersionAttributeClass, DNSatelliteContractVersionAttribute>) end;

  //-------------namespace: System.Runtime----------------
  DNAssemblyTargetedPatchBandAttributeClass = interface(DNAttributeClass)
  ['{632A74EC-01D8-4234-B28E-4F4268DE6154}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(targetedPatchBand: string): DNAssemblyTargetedPatchBandAttribute;

  end;

  /// <summary>
  ///   指定目标修补.NET Framework 的修补程序带外信息。
  /// </summary>
  [DNTypeName('System.Runtime.AssemblyTargetedPatchBandAttribute')]
  DNAssemblyTargetedPatchBandAttribute = interface(DNAttribute)
  ['{F5F0D00D-E42F-3B65-BD13-BE1F895AF4FB}']
  { getter & setter } 

    function get_TargetedPatchBand: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取修补程序带区。
    /// </summary>
    property TargetedPatchBand: string read get_TargetedPatchBand;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTargetedPatchBandAttribute = class(TDNGenericImport<DNAssemblyTargetedPatchBandAttributeClass, DNAssemblyTargetedPatchBandAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAccessedThroughPropertyAttributeClass = interface(DNAttributeClass)
  ['{FD68997D-44E4-4272-98D5-50CEF2CF5636}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类用来访问特性化的字段的属性名称。
    /// </summary>
    {class} function init(propertyName: string): DNAccessedThroughPropertyAttribute;

  end;

  /// <summary>
  ///   指定访问特性化字段的属性的名称。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.AccessedThroughPropertyAttribute')]
  DNAccessedThroughPropertyAttribute = interface(DNAttribute)
  ['{5EFB687D-2B50-3216-BD74-52D06C8D3CD1}']
  { getter & setter } 

    function get_PropertyName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取用于访问特性化的字段的属性的名称。
    /// </summary>
    property PropertyName: string read get_PropertyName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAccessedThroughPropertyAttribute = class(TDNGenericImport<DNAccessedThroughPropertyAttributeClass, DNAccessedThroughPropertyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerFilePathAttributeClass = interface(DNAttributeClass)
  ['{635D4A28-8E21-4908-85A5-2A6DE99B4740}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCallerFilePathAttribute;

  end;

  /// <summary>
  ///   允许获取包含调用方的源文件的完整路径。
  ///               这是编译时的文件路径。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CallerFilePathAttribute')]
  DNCallerFilePathAttribute = interface(DNAttribute)
  ['{5F241867-B0BB-3E68-9CCC-FA19588B5C05}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerFilePathAttribute = class(TDNGenericImport<DNCallerFilePathAttributeClass, DNCallerFilePathAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerLineNumberAttributeClass = interface(DNAttributeClass)
  ['{8B8B8CCE-72D5-4B6F-9D69-E6F2A2F203F5}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCallerLineNumberAttribute;

  end;

  /// <summary>
  ///   允许获取源文件中调用方法的行号。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CallerLineNumberAttribute')]
  DNCallerLineNumberAttribute = interface(DNAttribute)
  ['{CA3D806C-300D-36D5-B7E8-545A58FCD40A}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerLineNumberAttribute = class(TDNGenericImport<DNCallerLineNumberAttributeClass, DNCallerLineNumberAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerMemberNameAttributeClass = interface(DNAttributeClass)
  ['{E4E8CDEF-C75A-43AA-A19D-CDEE4DBC362B}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCallerMemberNameAttribute;

  end;

  /// <summary>
  ///   允许获取方法调用方的方法或属性名称。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CallerMemberNameAttribute')]
  DNCallerMemberNameAttribute = interface(DNAttribute)
  ['{082F8B4E-C46E-3869-A23B-3E8DC1566FA8}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerMemberNameAttribute = class(TDNGenericImport<DNCallerMemberNameAttributeClass, DNCallerMemberNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilationRelaxationsAttributeClass = interface(DNAttributeClass)
  ['{790AB32D-B97B-46DF-9AE6-B1299CF4FC7E}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例  类，具有指定的编译松弛法。
    /// </summary>
    {class} function init(relaxations: Int32): DNCompilationRelaxationsAttribute; overload;
    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(relaxations: DNCompilationRelaxations): DNCompilationRelaxationsAttribute; overload;

  end;

  /// <summary>
  ///   控制由公共语言运行时的实时 (JIT) 编译器生成的代码的严谨性。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CompilationRelaxationsAttribute')]
  DNCompilationRelaxationsAttribute = interface(DNAttribute)
  ['{76CEC05B-C55E-3ADF-92A2-0698F1CF2017}']
  { getter & setter } 

    function get_CompilationRelaxations: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前对象构造时指定的编译松弛法。
    /// </summary>
    property CompilationRelaxations: Int32 read get_CompilationRelaxations;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilationRelaxationsAttribute = class(TDNGenericImport<DNCompilationRelaxationsAttributeClass, DNCompilationRelaxationsAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerGeneratedAttributeClass = interface(DNAttributeClass)
  ['{531DEC36-F5F8-42F3-861F-B7CCB28BF5C6}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCompilerGeneratedAttribute;

  end;

  /// <summary>
  ///   区分编译器生成元素和用户生成的元素。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CompilerGeneratedAttribute')]
  DNCompilerGeneratedAttribute = interface(DNAttribute)
  ['{0929FA02-BA1E-35A8-859F-A8F6153344E0}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilerGeneratedAttribute = class(TDNGenericImport<DNCompilerGeneratedAttributeClass, DNCompilerGeneratedAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerGlobalScopeAttributeClass = interface(DNAttributeClass)
  ['{F1ED5DC1-097D-44BC-8107-538530D75066}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCompilerGlobalScopeAttribute;

  end;

  /// <summary>
  ///   指示应视为一个类，如同它具有全局作用域。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CompilerGlobalScopeAttribute')]
  DNCompilerGlobalScopeAttribute = interface(DNAttribute)
  ['{4B601364-A04B-38BC-BD38-A18E981324CF}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilerGlobalScopeAttribute = class(TDNGenericImport<DNCompilerGlobalScopeAttributeClass, DNCompilerGlobalScopeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCustomConstantAttributeClass = interface(DNAttributeClass)
  ['{9BE431E0-2297-443E-A263-1D70B6E4BBA9}']
  end;

  /// <summary>
  ///   定义编译器为字段或方法参数保留的常量值。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CustomConstantAttribute')]
  DNCustomConstantAttribute = interface(DNAttribute)
  ['{6F7A3516-EFD9-31C3-BC9A-A89DF19F64E7}']
  { getter & setter } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此属性存储的常数值。
    /// </summary>
    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCustomConstantAttribute = class(TDNGenericImport<DNCustomConstantAttributeClass, DNCustomConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDateTimeConstantAttributeClass = interface(DNCustomConstantAttributeClass)
  ['{02F2F1A4-B393-41EC-B64B-3DAC984F5A47}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有表示日期的 100 纳秒计时周期数和此实例的时间。
    /// </summary>
    {class} function init(ticks: Int64): DNDateTimeConstantAttribute;

  end;

  /// <summary>
  ///   仍然存在一个 8 字节  常量字段或参数。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.DateTimeConstantAttribute')]
  DNDateTimeConstantAttribute = interface(DNCustomConstantAttribute)
  ['{3178FD5D-2A5B-30B9-9C5C-7593802F9C1A}']
  { getter & setter } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取表示日期的 100 纳秒计时周期数和此实例的时间。
    /// </summary>
    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDateTimeConstantAttribute = class(TDNGenericImport<DNDateTimeConstantAttributeClass, DNDateTimeConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIDispatchConstantAttributeClass = interface(DNCustomConstantAttributeClass)
  ['{619CBE3F-3C4F-469B-9348-3794D69F0953}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNIDispatchConstantAttribute;

  end;

  /// <summary>
  ///   指示特性化的字段或参数的默认值为的一个实例 , ，其中  是 。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IDispatchConstantAttribute')]
  DNIDispatchConstantAttribute = interface(DNCustomConstantAttribute)
  ['{E947A0B0-D47F-3AA3-9B77-4624E0F3ACA4}']
  { getter & setter } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  存储此属性中的常量。
    /// </summary>
    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIDispatchConstantAttribute = class(TDNGenericImport<DNIDispatchConstantAttributeClass, DNIDispatchConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIUnknownConstantAttributeClass = interface(DNCustomConstantAttributeClass)
  ['{171143FB-6854-4733-8D11-9E640514B635}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNIUnknownConstantAttribute;

  end;

  /// <summary>
  ///   指示特性化的字段或参数的默认值为的一个实例 , ，其中  是 。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IUnknownConstantAttribute')]
  DNIUnknownConstantAttribute = interface(DNCustomConstantAttribute)
  ['{590E4A07-DAFC-3BE7-A178-DA349BBA980B}']
  { getter & setter } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  存储此属性中的常量。
    /// </summary>
    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIUnknownConstantAttribute = class(TDNGenericImport<DNIUnknownConstantAttributeClass, DNIUnknownConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDecimalConstantAttributeClass = interface(DNAttributeClass)
  ['{E8BD741E-2D1C-48E3-AA56-0FEB7B1DC135}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有指定的无符号的整数值。
    /// </summary>
    {class} function init(scale: Byte; sign: Byte; hi: UInt32; mid: UInt32; low: UInt32): DNDecimalConstantAttribute; overload;
    /// <summary>
    ///   新实例初始化  类与指定的有符号整数值。
    /// </summary>
    {class} function init(scale: Byte; sign: Byte; hi: Int32; mid: Int32; low: Int32): DNDecimalConstantAttribute; overload;

  end;

  /// <summary>
  ///   将值存储到  常量元数据中。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.DecimalConstantAttribute')]
  DNDecimalConstantAttribute = interface(DNAttribute)
  ['{AC8DE863-B115-3179-810F-162B43ABD2B5}']
  { getter & setter } 

    function get_Value: DNDecimal;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此属性中存储十进制常量。
    /// </summary>
    property Value: DNDecimal read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDecimalConstantAttribute = class(TDNGenericImport<DNDecimalConstantAttributeClass, DNDecimalConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDefaultDependencyAttributeClass = interface(DNAttributeClass)
  ['{AEDB8DC2-8BA3-4CAE-8BAB-30BB717EC605}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类与指定  绑定。
    /// </summary>
    {class} function init(loadHintArgument: DNLoadHint): DNDefaultDependencyAttribute;

  end;

  /// <summary>
  ///   提供对公共语言运行时 (CLR)，该值指示可能性的依赖项的提示是要加载。
  ///               此类使用一个依赖程序集中，以指示应使用何种提示，未指定父时  属性。
  ///                此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.DefaultDependencyAttribute')]
  DNDefaultDependencyAttribute = interface(DNAttribute)
  ['{381A1B94-A891-316F-A5BB-F722F3F3F40B}']
  { getter & setter } 

    function get_LoadHint: DNLoadHint;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值，该值指示当程序集加载依赖项。
    /// </summary>
    property LoadHint: DNLoadHint read get_LoadHint;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultDependencyAttribute = class(TDNGenericImport<DNDefaultDependencyAttributeClass, DNDefaultDependencyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDependencyAttributeClass = interface(DNAttributeClass)
  ['{B3983263-DCD5-4E39-A9EC-BECF49B268BF}']
  { constructors } 

    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(dependentAssemblyArgument: string; loadHintArgument: DNLoadHint): DNDependencyAttribute;

  end;

  /// <summary>
  ///   指示当加载引用的程序集的依赖关系。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.DependencyAttribute')]
  DNDependencyAttribute = interface(DNAttribute)
  ['{146B5901-DA93-3E8F-924D-FE817FCB247F}']
  { getter & setter } 

    function get_DependentAssembly: string;
    function get_LoadHint: DNLoadHint;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取依赖程序集的值。
    /// </summary>
    property DependentAssembly: string read get_DependentAssembly;
    /// <summary>
    ///   获取  值，该值指示程序集时加载依赖项。
    /// </summary>
    property LoadHint: DNLoadHint read get_LoadHint;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDependencyAttribute = class(TDNGenericImport<DNDependencyAttributeClass, DNDependencyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDisablePrivateReflectionAttributeClass = interface(DNAttributeClass)
  ['{D79FA026-2125-4C04-96EA-90031298C14D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDisablePrivateReflectionAttribute;

  end;

  /// <summary>
  ///   指示程序集的类型中所含的任何私有成员均不可用于映射。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.DisablePrivateReflectionAttribute')]
  DNDisablePrivateReflectionAttribute = interface(DNAttribute)
  ['{9802E62F-47E5-3B9C-8006-B00753EC6862}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDisablePrivateReflectionAttribute = class(TDNGenericImport<DNDisablePrivateReflectionAttributeClass, DNDisablePrivateReflectionAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDiscardableAttributeClass = interface(DNAttributeClass)
  ['{520A883B-70BA-4C4E-92F1-50FE50123B4B}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNDiscardableAttribute;

  end;

  /// <summary>
  ///   将标记为可丢弃的类型定义。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.DiscardableAttribute')]
  DNDiscardableAttribute = interface(DNAttribute)
  ['{837A6733-1675-3BC9-BBF8-13889F84DAF4}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDiscardableAttribute = class(TDNGenericImport<DNDiscardableAttributeClass, DNDiscardableAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNExtensionAttributeClass = interface(DNAttributeClass)
  ['{3C6E5F95-00D4-464F-981A-56B60F1FEA04}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNExtensionAttribute;

  end;

  /// <summary>
  ///   指示方法是扩展方法，或者指示类或程序集包含扩展方法。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.ExtensionAttribute')]
  DNExtensionAttribute = interface(DNAttribute)
  ['{C0BB3BBD-60B6-3FB0-9D6B-D4EFF6D0F291}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNExtensionAttribute = class(TDNGenericImport<DNExtensionAttributeClass, DNExtensionAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFixedAddressValueTypeAttributeClass = interface(DNAttributeClass)
  ['{BFD35396-B9BC-4A79-B246-4CE1EF5C7487}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNFixedAddressValueTypeAttribute;

  end;

  /// <summary>
  ///   修复了其整个生存期内某一静态值类型字段的地址。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.FixedAddressValueTypeAttribute')]
  DNFixedAddressValueTypeAttribute = interface(DNAttribute)
  ['{C6B5F214-0743-3868-B1EA-C4C23CE2AF52}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNFixedAddressValueTypeAttribute = class(TDNGenericImport<DNFixedAddressValueTypeAttributeClass, DNFixedAddressValueTypeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFixedBufferAttributeClass = interface(DNAttributeClass)
  ['{E67829F6-B5A4-4BC8-B721-AEA97283E015}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(elementType: DNType; length: Int32): DNFixedBufferAttribute;

  end;

  /// <summary>
  ///   指示应将字段视为包含固定数量的指定基元类型元素。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.FixedBufferAttribute')]
  DNFixedBufferAttribute = interface(DNAttribute)
  ['{5FAD2201-A48E-31EB-A06E-C976638A3CD0}']
  { getter & setter } 

    function get_ElementType: DNType;
    function get_Length: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取固定缓冲区中包含的元素的类型。
    /// </summary>
    property ElementType: DNType read get_ElementType;
    /// <summary>
    ///   获取固定缓冲区中的元素数。
    /// </summary>
    property Length: Int32 read get_Length;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFixedBufferAttribute = class(TDNGenericImport<DNFixedBufferAttributeClass, DNFixedBufferAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNHasCopySemanticsAttributeClass = interface(DNAttributeClass)
  ['{D18D4335-9BBA-4E8B-979A-42412E2113D9}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNHasCopySemanticsAttribute;

  end;

  /// <summary>
  ///   此类不使用.NET Framework 2.0 版中，保留供将来使用。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.HasCopySemanticsAttribute')]
  DNHasCopySemanticsAttribute = interface(DNAttribute)
  ['{73293BA6-A4CF-394F-A0B3-EE566FD52BD7}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNHasCopySemanticsAttribute = class(TDNGenericImport<DNHasCopySemanticsAttributeClass, DNHasCopySemanticsAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIndexerNameAttributeClass = interface(DNAttributeClass)
  ['{FB66D9C4-0226-4698-A0A9-D2EBBE99B39D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(indexerName: string): DNIndexerNameAttribute;

  end;

  /// <summary>
  ///   在不直接支持索引器的编程语言中指示索引器的名称。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IndexerNameAttribute')]
  DNIndexerNameAttribute = interface(DNAttribute)
  ['{9599C078-DC94-3EA2-8761-408295BD1155}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIndexerNameAttribute = class(TDNGenericImport<DNIndexerNameAttributeClass, DNIndexerNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNInternalsVisibleToAttributeClass = interface(DNAttributeClass)
  ['{E618E6A7-6C15-47B6-B521-7827B1E69D11}']
  { constructors } 

    /// <summary>
    ///   用指定的友元程序集的名称初始化  类的新实例。
    /// </summary>
    {class} function init(assemblyName: string): DNInternalsVisibleToAttribute;

  end;

  /// <summary>
  ///   指定通常仅在当前程序集中可见的类型对指定程序集可见。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.InternalsVisibleToAttribute')]
  DNInternalsVisibleToAttribute = interface(DNAttribute)
  ['{E6A603DA-B5E3-3DE4-8D94-BD623CAE6B8D}']
  { getter & setter } 

    function get_AssemblyName: string;
    function get_AllInternalsVisible: Boolean;
    procedure set_AllInternalsVisible(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取友元程序集的名称，采用  关键字标记的所有类型和类型成员对该程序集均为可见。
    /// </summary>
    property AssemblyName: string read get_AssemblyName;
    /// <summary>
    ///   不实现此属性。
    /// </summary>
    property AllInternalsVisible: Boolean read get_AllInternalsVisible write set_AllInternalsVisible;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInternalsVisibleToAttribute = class(TDNGenericImport<DNInternalsVisibleToAttributeClass, DNInternalsVisibleToAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsByRefLikeAttributeClass = interface(DNAttributeClass)
  ['{3BCB36CE-DCBA-4327-97AA-D16A92F65E1A}']
  { constructors } 

    /// <summary>
    ///   创建  类的新实例。
    /// </summary>
    {class} function init: DNIsByRefLikeAttribute;

  end;

  /// <summary>
  ///   指示结构类似 byref。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsByRefLikeAttribute')]
  DNIsByRefLikeAttribute = interface(DNAttribute)
  ['{7F83D16C-0D44-37B1-A50F-6E8708F03E30}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsByRefLikeAttribute = class(TDNGenericImport<DNIsByRefLikeAttributeClass, DNIsByRefLikeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsReadOnlyAttributeClass = interface(DNAttributeClass)
  ['{A318712B-E7D3-40CB-B872-2CBB31FD26F2}']
  { constructors } 

    /// <summary>
    ///   创建  类的新实例。
    /// </summary>
    {class} function init: DNIsReadOnlyAttribute;

  end;

  /// <summary>
  ///   将程序元素标记为只读。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsReadOnlyAttribute')]
  DNIsReadOnlyAttribute = interface(DNAttribute)
  ['{4C448A83-7EC0-3E1D-914C-A7857C45B1F7}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsReadOnlyAttribute = class(TDNGenericImport<DNIsReadOnlyAttributeClass, DNIsReadOnlyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNMethodImplAttributeClass = interface(DNAttributeClass)
  ['{7659E3FB-46C2-405B-AE24-91AEAC7DFB31}']
  { constructors } 

    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(methodImplOptions: DNMethodImplOptions): DNMethodImplAttribute; overload;
    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(value: Int16): DNMethodImplAttribute; overload;
    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNMethodImplAttribute; overload;

  end;

  /// <summary>
  ///   指定如何实现方法的详细信息。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.MethodImplAttribute')]
  DNMethodImplAttribute = interface(DNAttribute)
  ['{48D0CFE7-3128-3D2C-A5B5-8C7B82B4AB4F}']
  { getter & setter } 

    function get_Value: DNMethodImplOptions;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值，描述在特性化的方法。
    /// </summary>
    property Value: DNMethodImplOptions read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMethodImplAttribute = class(TDNGenericImport<DNMethodImplAttributeClass, DNMethodImplAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNNativeCppClassAttributeClass = interface(DNAttributeClass)
  ['{D1E0ADE4-8C08-481E-AC36-B02039B60B3A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNNativeCppClassAttribute;

  end;

  /// <summary>
  ///   适用于指示一种类型为非托管的类型的程序集的元数据。
  ///                此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.NativeCppClassAttribute')]
  DNNativeCppClassAttribute = interface(DNAttribute)
  ['{C437AB2E-865B-321D-BA15-0C8EC4CA119B}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNativeCppClassAttribute = class(TDNGenericImport<DNNativeCppClassAttributeClass, DNNativeCppClassAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNReferenceAssemblyAttributeClass = interface(DNAttributeClass)
  ['{3741B37A-7A86-4C9E-B2A0-DCC0985093FA}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNReferenceAssemblyAttribute; overload;
    /// <summary>
    ///   新实例初始化  类通过使用指定的说明。
    /// </summary>
    {class} function init(description: string): DNReferenceAssemblyAttribute; overload;

  end;

  /// <summary>
  ///   将程序集标识为引用程序集，其中包含元数据，但不包含可执行代码。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.ReferenceAssemblyAttribute')]
  DNReferenceAssemblyAttribute = interface(DNAttribute)
  ['{FF96A510-419B-3A11-B15A-C5A049007305}']
  { getter & setter } 

    function get_Description: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取引用程序集的说明。
    /// </summary>
    property Description: string read get_Description;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReferenceAssemblyAttribute = class(TDNGenericImport<DNReferenceAssemblyAttributeClass, DNReferenceAssemblyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRequiredAttributeAttributeClass = interface(DNAttributeClass)
  ['{646A0102-4831-43FD-867D-A3862472A55C}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(requiredContract: DNType): DNRequiredAttributeAttribute;

  end;

  /// <summary>
  ///   指定导入编译器必须完全理解的一个类型定义，语义或拒绝使用它。
  ///                此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.RequiredAttributeAttribute')]
  DNRequiredAttributeAttribute = interface(DNAttribute)
  ['{D49C12A2-C401-3894-8005-716C2F692D38}']
  { getter & setter } 

    function get_RequiredContract: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取导入编译器必须完全理解的类型。
    /// </summary>
    property RequiredContract: DNType read get_RequiredContract;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNRequiredAttributeAttribute = class(TDNGenericImport<DNRequiredAttributeAttributeClass, DNRequiredAttributeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeCompatibilityAttributeClass = interface(DNAttributeClass)
  ['{27C37AEE-42F8-4BB5-8A91-B3CA4E63B31A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRuntimeCompatibilityAttribute;

  end;

  /// <summary>
  ///   指定是否包装不派生自的异常  类  对象。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.RuntimeCompatibilityAttribute')]
  DNRuntimeCompatibilityAttribute = interface(DNAttribute)
  ['{52179AA0-9245-3CF7-8E1E-50ACE473076F}']
  { getter & setter } 

    function get_WrapNonExceptionThrows: Boolean;
    procedure set_WrapNonExceptionThrows(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置一个值，该值指示是否自动换行不会从派生的异常  类  对象。
    /// </summary>
    property WrapNonExceptionThrows: Boolean read get_WrapNonExceptionThrows write set_WrapNonExceptionThrows;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNRuntimeCompatibilityAttribute = class(TDNGenericImport<DNRuntimeCompatibilityAttributeClass, DNRuntimeCompatibilityAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNScopelessEnumAttributeClass = interface(DNAttributeClass)
  ['{E9D38FE5-44F4-46AB-8A5E-560E849AC9A1}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNScopelessEnumAttribute;

  end;

  /// <summary>
  ///   指示本机枚举不由枚举类型名称限定。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.ScopelessEnumAttribute')]
  DNScopelessEnumAttribute = interface(DNAttribute)
  ['{92267E67-8E14-3EEE-8F8F-6D64BCE03A13}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNScopelessEnumAttribute = class(TDNGenericImport<DNScopelessEnumAttributeClass, DNScopelessEnumAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSpecialNameAttributeClass = interface(DNAttributeClass)
  ['{0D05F804-4F20-4135-9F95-269B99585674}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSpecialNameAttribute;

  end;

  /// <summary>
  ///   指示类型或成员由运行时或工具以特殊方式进行处理。
  ///                此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.SpecialNameAttribute')]
  DNSpecialNameAttribute = interface(DNAttribute)
  ['{2DA08C76-26F3-3A7B-A890-EF75AD519EFF}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSpecialNameAttribute = class(TDNGenericImport<DNSpecialNameAttributeClass, DNSpecialNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStateMachineAttributeClass = interface(DNAttributeClass)
  ['{82DFBB9D-62AB-4C05-9AC8-E9304421FFC7}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(stateMachineType: DNType): DNStateMachineAttribute;

  end;

  /// <summary>
  ///   允许确定方法是否是状态机方法。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.StateMachineAttribute')]
  DNStateMachineAttribute = interface(DNAttribute)
  ['{256209B2-0FDF-3407-9155-89D47F23C663}']
  { getter & setter } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   返回基础的状态机类型由编译器为我实现状态机方法生成的类型对象。
    /// </summary>
    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNStateMachineAttribute = class(TDNGenericImport<DNStateMachineAttributeClass, DNStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncStateMachineAttributeClass = interface(DNStateMachineAttributeClass)
  ['{39E1DBEF-01EE-48BD-8204-9756AF0DA3A9}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(stateMachineType: DNType): DNAsyncStateMachineAttribute;

  end;

  /// <summary>
  ///   表示一种方法将标有任何一个 Async (Visual Basic) 或 async（C# 参考） 修饰符。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.AsyncStateMachineAttribute')]
  DNAsyncStateMachineAttribute = interface(DNStateMachineAttribute)
  ['{296B54F2-4A20-3383-A0DF-0889BB6BF6D9}']
  { getter & setter } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAsyncStateMachineAttribute = class(TDNGenericImport<DNAsyncStateMachineAttributeClass, DNAsyncStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIteratorStateMachineAttributeClass = interface(DNStateMachineAttributeClass)
  ['{2939D518-72E6-4267-A6B6-A924DAFD788C}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(stateMachineType: DNType): DNIteratorStateMachineAttribute;

  end;

  /// <summary>
  ///   指示在 Visual Basic 中的方法将标有  修饰符。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IteratorStateMachineAttribute')]
  DNIteratorStateMachineAttribute = interface(DNStateMachineAttribute)
  ['{72C6F07F-3336-3642-BA2A-B575C80DE6EF}']
  { getter & setter } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIteratorStateMachineAttribute = class(TDNGenericImport<DNIteratorStateMachineAttributeClass, DNIteratorStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStringFreezingAttributeClass = interface(DNAttributeClass)
  ['{1FBFBE6B-AF24-4207-9548-99A9D22042B6}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNStringFreezingAttribute;

  end;

  /// <summary>
  ///   已否决。
  ///               冻结字符串时创建的本机映像使用 Ngen.exe（本机映像生成器）。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.StringFreezingAttribute')]
  DNStringFreezingAttribute = interface(DNAttribute)
  ['{D37A4151-81B2-36C8-96E5-E191E2661614}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNStringFreezingAttribute = class(TDNGenericImport<DNStringFreezingAttributeClass, DNStringFreezingAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSuppressIldasmAttributeClass = interface(DNAttributeClass)
  ['{D3ABE2EB-D938-46F2-9ACE-036F4391D6B3}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSuppressIldasmAttribute;

  end;

  /// <summary>
  ///   可防止 Ildasm.exe（IL 反汇编程序） 从反汇编程序集。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.SuppressIldasmAttribute')]
  DNSuppressIldasmAttribute = interface(DNAttribute)
  ['{1AB476DC-0980-352F-BF40-1185B394BAA1}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressIldasmAttribute = class(TDNGenericImport<DNSuppressIldasmAttributeClass, DNSuppressIldasmAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTupleElementNamesAttributeClass = interface(DNAttributeClass)
  ['{2313D5F0-5564-43B9-84E5-103779E51DA6}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(transformNames: TArray<string>): DNTupleElementNamesAttribute;

  end;

  /// <summary>
  ///   指示应将所使用的成员上的值元组视为具有元素名称的元组。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.TupleElementNamesAttribute')]
  DNTupleElementNamesAttribute = interface(DNAttribute)
  ['{55FFDB9F-75D6-3B55-AF68-5D2E5BFFB48B}']
  { getter & setter } 

    function get_TransformNames: DNIList<string>;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   指示在类型构造的深度优先前序遍历中，哪个值元组元素应具有元素名称。
    /// </summary>
    property TransformNames: DNIList<string> read get_TransformNames;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTupleElementNamesAttribute = class(TDNGenericImport<DNTupleElementNamesAttributeClass, DNTupleElementNamesAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTypeForwardedFromAttributeClass = interface(DNAttributeClass)
  ['{D2DB616B-A642-437C-B42A-3FE5BB088CDB}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(assemblyFullName: string): DNTypeForwardedFromAttribute;

  end;

  /// <summary>
  ///   指定源  另一个程序集中。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.TypeForwardedFromAttribute')]
  DNTypeForwardedFromAttribute = interface(DNAttribute)
  ['{EA95D642-A6DD-399C-9BEE-A7D5B35DF7EB}']
  { getter & setter } 

    function get_AssemblyFullName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取源类型的程序集限定名称。
    /// </summary>
    property AssemblyFullName: string read get_AssemblyFullName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeForwardedFromAttribute = class(TDNGenericImport<DNTypeForwardedFromAttributeClass, DNTypeForwardedFromAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTypeForwardedToAttributeClass = interface(DNAttributeClass)
  ['{4792B7E7-CB01-453C-AD43-BD71B823E4E9}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类指定的目标 。
    /// </summary>
    {class} function init(destination: DNType): DNTypeForwardedToAttribute;

  end;

  /// <summary>
  ///   指定目标  另一个程序集中。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.TypeForwardedToAttribute')]
  DNTypeForwardedToAttribute = interface(DNAttribute)
  ['{8D6F53D6-8920-3775-A28D-A82E14BC5CFC}']
  { getter & setter } 

    function get_Destination: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取目标  另一个程序集中。
    /// </summary>
    property Destination: DNType read get_Destination;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeForwardedToAttribute = class(TDNGenericImport<DNTypeForwardedToAttributeClass, DNTypeForwardedToAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNUnsafeValueTypeAttributeClass = interface(DNAttributeClass)
  ['{336B535B-2D61-4E53-BC66-C179D0A81740}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNUnsafeValueTypeAttribute;

  end;

  /// <summary>
  ///   指定包含可能溢出的非托管数组的类型。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.UnsafeValueTypeAttribute')]
  DNUnsafeValueTypeAttribute = interface(DNAttribute)
  ['{098F24A0-28FA-3A13-8FEE-844A721DA0B5}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnsafeValueTypeAttribute = class(TDNGenericImport<DNUnsafeValueTypeAttributeClass, DNUnsafeValueTypeAttribute>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNPrePrepareMethodAttributeClass = interface(DNAttributeClass)
  ['{9C293AE3-A995-4853-AE60-639C29C0D280}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNPrePrepareMethodAttribute;

  end;

  /// <summary>
  ///   指示本机映像生成服务准备要包含在受约束的执行区域 (CER) 方法。
  /// </summary>
  [DNTypeName('System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute')]
  DNPrePrepareMethodAttribute = interface(DNAttribute)
  ['{3BD6A87F-1E6C-3954-8AC7-ACDF00562C1A}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPrePrepareMethodAttribute = class(TDNGenericImport<DNPrePrepareMethodAttributeClass, DNPrePrepareMethodAttribute>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNReliabilityContractAttributeClass = interface(DNAttributeClass)
  ['{AD933234-679A-407D-8F78-DBDF3671F5BC}']
  { constructors } 

    /// <summary>
    ///   使用指定  保证和  值初始化  类的新实例。
    /// </summary>
    {class} function init(consistencyGuarantee: DNConsistency; cer: DNCer): DNReliabilityContractAttribute;

  end;

  /// <summary>
  ///   定义协定，某些代码的作者和开发人员对该代码具有的依赖项之间的可靠性。
  /// </summary>
  [DNTypeName('System.Runtime.ConstrainedExecution.ReliabilityContractAttribute')]
  DNReliabilityContractAttribute = interface(DNAttribute)
  ['{A2651ABC-0640-3A77-B03B-211862A56F87}']
  { getter & setter } 

    function get_ConsistencyGuarantee: DNConsistency;
    function get_Cer: DNCer;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的值  的可靠性约定。
    /// </summary>
    property ConsistencyGuarantee: DNConsistency read get_ConsistencyGuarantee;
    /// <summary>
    ///   获取当在受约束的执行区域 (CER) 下调用时用来确定方法、类型或程序集的行为的值。
    /// </summary>
    property Cer: DNCer read get_Cer;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReliabilityContractAttribute = class(TDNGenericImport<DNReliabilityContractAttributeClass, DNReliabilityContractAttribute>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNHandleProcessCorruptedStateExceptionsAttributeClass = interface(DNAttributeClass)
  ['{BF577933-B6E1-40B7-BA92-2508DE6B86A9}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNHandleProcessCorruptedStateExceptionsAttribute;

  end;

  /// <summary>
  ///   启用托管代码来处理指示损坏的进程状态的异常。
  /// </summary>
  [DNTypeName('System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute')]
  DNHandleProcessCorruptedStateExceptionsAttribute = interface(DNAttribute)
  ['{A70C99E1-AF0B-39AA-AA9A-B4AA85D3F84D}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNHandleProcessCorruptedStateExceptionsAttribute = class(TDNGenericImport<DNHandleProcessCorruptedStateExceptionsAttributeClass, DNHandleProcessCorruptedStateExceptionsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNAllowReversePInvokeCallsAttributeClass = interface(DNAttributeClass)
  ['{3FDEC4D4-C135-4E19-84D7-DF50663A71BF}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNAllowReversePInvokeCallsAttribute;

  end;

  /// <summary>
  ///   允许非托管的方法来调用托管的方法。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute')]
  DNAllowReversePInvokeCallsAttribute = interface(DNAttribute)
  ['{9B6D8AC7-E4EB-35E9-AD23-DFD536525B08}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNAllowReversePInvokeCallsAttribute = class(TDNGenericImport<DNAllowReversePInvokeCallsAttributeClass, DNAllowReversePInvokeCallsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNAutomationProxyAttributeClass = interface(DNAttributeClass)
  ['{60B5E7A1-B169-43DE-926E-DFAA639909C3}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(val: Boolean): DNAutomationProxyAttribute;

  end;

  /// <summary>
  ///   指定是否应将类型封送使用自动化封送处理程序或自定义代理和存根 （stub）。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.AutomationProxyAttribute')]
  DNAutomationProxyAttribute = interface(DNAttribute)
  ['{0E67C08B-D921-33D0-82FE-B6FD28BBAEFF}']
  { getter & setter } 

    function get_Value: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值的封送处理程序要使用的类型。
    /// </summary>
    property Value: Boolean read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAutomationProxyAttribute = class(TDNGenericImport<DNAutomationProxyAttributeClass, DNAutomationProxyAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNBestFitMappingAttributeClass = interface(DNAttributeClass)
  ['{2751EEB2-427C-4723-960B-18B54672F604}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类设置的值为  属性。
    /// </summary>
    {class} function init(BestFitMapping: Boolean): DNBestFitMappingAttribute;

  end;

  /// <summary>
  ///   控制是否将 Unicode 字符转换为最接近的匹配 ANSI 字符。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.BestFitMappingAttribute')]
  DNBestFitMappingAttribute = interface(DNAttribute)
  ['{84FEE617-858B-364B-A662-8BF7ED5330CA}']
  { getter & setter } 

    function get_BestFitMapping: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   将 Unicode 字符转换为 ANSI 字符时，请获取最佳的映射行为。
    /// </summary>
    property BestFitMapping: Boolean read get_BestFitMapping;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNBestFitMappingAttribute = class(TDNGenericImport<DNBestFitMappingAttributeClass, DNBestFitMappingAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNClassInterfaceAttributeClass = interface(DNAttributeClass)
  ['{EF055D20-3E6A-4DBF-9404-E66F9A5ADD96}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例使用指定的类枚举成员。
    /// </summary>
    {class} function init(classInterfaceType: DNClassInterfaceType): DNClassInterfaceAttribute; overload;
    /// <summary>
    ///   新实例初始化  类与指定  枚举值。
    /// </summary>
    {class} function init(classInterfaceType: Int16): DNClassInterfaceAttribute; overload;

  end;

  /// <summary>
  ///   指示在完全生成某个接口后为要向 COM 公开的类生成的类接口类型。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ClassInterfaceAttribute')]
  DNClassInterfaceAttribute = interface(DNAttribute)
  ['{5819DB84-163F-3FA2-853B-43A0269626B1}']
  { getter & setter } 

    function get_Value: DNClassInterfaceType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值，该值描述应为该类生成哪种类型的接口。
    /// </summary>
    property Value: DNClassInterfaceType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNClassInterfaceAttribute = class(TDNGenericImport<DNClassInterfaceAttributeClass, DNClassInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCoClassAttributeClass = interface(DNAttributeClass)
  ['{B293CD6F-29EC-4281-BB81-9DD376B3D025}']
  { constructors } 

    /// <summary>
    ///   初始化新实例  与原始组件类的类标识符。
    /// </summary>
    {class} function init(coClass: DNType): DNCoClassAttribute;

  end;

  /// <summary>
  ///   指定从类型库导入的组件类的类标识符。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.CoClassAttribute')]
  DNCoClassAttribute = interface(DNAttribute)
  ['{03E4C7F5-974C-3253-9BE0-41470697BBAD}']
  { getter & setter } 

    function get_CoClass: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取原始组件类的类标识符。
    /// </summary>
    property CoClass: DNType read get_CoClass;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCoClassAttribute = class(TDNGenericImport<DNCoClassAttributeClass, DNCoClassAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComAliasNameAttributeClass = interface(DNAttributeClass)
  ['{5BEE59E1-52D9-4D74-B66D-E24424CD9E9E}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类特性化的字段或参数的别名。
    /// </summary>
    {class} function init(alias: string): DNComAliasNameAttribute;

  end;

  /// <summary>
  ///   指示参数或字段类型的 COM 别名。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComAliasNameAttribute')]
  DNComAliasNameAttribute = interface(DNAttribute)
  ['{E1AA0B69-CA47-3749-AEB1-133DCE4C705F}']
  { getter & setter } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取该别名的字段或参数都可以找到类型库中时已导入。
    /// </summary>
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComAliasNameAttribute = class(TDNGenericImport<DNComAliasNameAttributeClass, DNComAliasNameAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComCompatibleVersionAttributeClass = interface(DNAttributeClass)
  ['{2346BFF9-54B4-4730-8094-2985C873B903}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  与主版本、 次版本、 生成和修订号的程序集的类。
    /// </summary>
    {class} function init(major: Int32; minor: Int32; build: Int32; revision: Int32): DNComCompatibleVersionAttribute;

  end;

  /// <summary>
  ///   向 COM 客户端指示程序集的当前版本中的所有类都是兼容的程序集的早期版本中的类。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComCompatibleVersionAttribute')]
  DNComCompatibleVersionAttribute = interface(DNAttribute)
  ['{7F962EBF-2220-30F0-8B92-24A73B7CD268}']
  { getter & setter } 

    function get_MajorVersion: Int32;
    function get_MinorVersion: Int32;
    function get_BuildNumber: Int32;
    function get_RevisionNumber: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取程序集的主版本号。
    /// </summary>
    property MajorVersion: Int32 read get_MajorVersion;
    /// <summary>
    ///   获取程序集的次版本号。
    /// </summary>
    property MinorVersion: Int32 read get_MinorVersion;
    /// <summary>
    ///   获取程序集的内部版本号。
    /// </summary>
    property BuildNumber: Int32 read get_BuildNumber;
    /// <summary>
    ///   获取程序集的修订号。
    /// </summary>
    property RevisionNumber: Int32 read get_RevisionNumber;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComCompatibleVersionAttribute = class(TDNGenericImport<DNComCompatibleVersionAttributeClass, DNComCompatibleVersionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComConversionLossAttributeClass = interface(DNAttributeClass)
  ['{5841067F-9BD7-4032-8453-11F70AFC5238}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNComConversionLossAttribute;

  end;

  /// <summary>
  ///   指示当从类型库导入程序集信息丢失有关某个类或接口了。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComConversionLossAttribute')]
  DNComConversionLossAttribute = interface(DNAttribute)
  ['{8A3FD229-B2A9-347F-93D2-87F3B7F92753}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNComConversionLossAttribute = class(TDNGenericImport<DNComConversionLossAttributeClass, DNComConversionLossAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComDefaultInterfaceAttributeClass = interface(DNAttributeClass)
  ['{75411BCC-4BC6-4F4A-9E81-4CB3D2FB749A}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类与指定  对象作为向 COM 公开的默认接口。
    /// </summary>
    {class} function init(defaultInterface: DNType): DNComDefaultInterfaceAttribute;

  end;

  /// <summary>
  ///   指定要向 COM 公开的默认接口。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComDefaultInterfaceAttribute')]
  DNComDefaultInterfaceAttribute = interface(DNAttribute)
  ['{43C2214A-95FC-362D-A792-7316C65B49AA}']
  { getter & setter } 

    function get_Value: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  对象，它指定要向 COM 公开的默认接口
    /// </summary>
    property Value: DNType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComDefaultInterfaceAttribute = class(TDNGenericImport<DNComDefaultInterfaceAttributeClass, DNComDefaultInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComEventInterfaceAttributeClass = interface(DNAttributeClass)
  ['{82FA8351-4C48-45D5-831F-EAD521E3037E}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  与源接口和事件提供程序类。
    /// </summary>
    {class} function init(SourceInterface: DNType; EventProvider: DNType): DNComEventInterfaceAttribute;

  end;

  /// <summary>
  ///   标识源接口和实现事件接口方法的类，事件接口在从 COM 类型库中导入组件类时生成。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComEventInterfaceAttribute')]
  DNComEventInterfaceAttribute = interface(DNAttribute)
  ['{830AC1F5-98EE-39A3-9212-FA5626CA855A}']
  { getter & setter } 

    function get_SourceInterface: DNType;
    function get_EventProvider: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   从类型库中获取原始源接口。
    /// </summary>
    property SourceInterface: DNType read get_SourceInterface;
    /// <summary>
    ///   获取实现事件接口的方法的类。
    /// </summary>
    property EventProvider: DNType read get_EventProvider;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComEventInterfaceAttribute = class(TDNGenericImport<DNComEventInterfaceAttributeClass, DNComEventInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComImportAttributeClass = interface(DNAttributeClass)
  ['{0C9838A0-BF2B-489A-8FAD-E10C7655A0A4}']
  { constructors } 

    /// <summary>
    ///   初始化  的新实例。
    /// </summary>
    {class} function init: DNComImportAttribute;

  end;

  /// <summary>
  ///   指示先前在 COM 中定义的特性化类型。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComImportAttribute')]
  DNComImportAttribute = interface(DNAttribute)
  ['{F1EBA909-6621-346D-9CE2-39F266C9D011}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNComImportAttribute = class(TDNGenericImport<DNComImportAttributeClass, DNComImportAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComRegisterFunctionAttributeClass = interface(DNAttributeClass)
  ['{D2935BFF-E0C9-4608-9D36-52028812A75D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNComRegisterFunctionAttribute;

  end;

  /// <summary>
  ///   指定当您注册以供从 COM; 程序集时要调用的方法这样，在注册过程中的用户编写的代码执行。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComRegisterFunctionAttribute')]
  DNComRegisterFunctionAttribute = interface(DNAttribute)
  ['{630A3EF1-23C6-31FE-9D25-294E3B3E7486}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNComRegisterFunctionAttribute = class(TDNGenericImport<DNComRegisterFunctionAttributeClass, DNComRegisterFunctionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComSourceInterfacesAttributeClass = interface(DNAttributeClass)
  ['{FCA2DB60-004C-4A09-B309-1398C2DFC078}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  同名的事件源接口的类。
    /// </summary>
    {class} function init(sourceInterfaces: string): DNComSourceInterfacesAttribute; overload;
    /// <summary>
    ///   新实例初始化  类要用作源接口的类型。
    /// </summary>
    {class} function init(sourceInterface: DNType): DNComSourceInterfacesAttribute; overload;
    /// <summary>
    ///   新实例初始化  类要用作源接口的类型。
    /// </summary>
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType): DNComSourceInterfacesAttribute; overload;
    /// <summary>
    ///   新实例初始化  类要用作源接口的类型。
    /// </summary>
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType; sourceInterface3: DNType): DNComSourceInterfacesAttribute; overload;
    /// <summary>
    ///   新实例初始化  类要用作源接口的类型。
    /// </summary>
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType; sourceInterface3: DNType; sourceInterface4: DNType): DNComSourceInterfacesAttribute; overload;

  end;

  /// <summary>
  ///   标识针对特性化类作为 COM 事件源公开的接口列表。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComSourceInterfacesAttribute')]
  DNComSourceInterfacesAttribute = interface(DNAttribute)
  ['{AC0C43B1-6CA0-3E6C-B088-B11E96FA0CE3}']
  { getter & setter } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取事件源接口的完全限定的名称。
    /// </summary>
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComSourceInterfacesAttribute = class(TDNGenericImport<DNComSourceInterfacesAttributeClass, DNComSourceInterfacesAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComUnregisterFunctionAttributeClass = interface(DNAttributeClass)
  ['{799CE5CF-C650-4A28-B01B-ED1FD95C7C5E}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNComUnregisterFunctionAttribute;

  end;

  /// <summary>
  ///   指定当您注销从 COM; 中使用的程序集时要调用的方法这允许用户编写的代码在注销过程的执行。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComUnregisterFunctionAttribute')]
  DNComUnregisterFunctionAttribute = interface(DNAttribute)
  ['{8F45C7FF-1E6E-34C1-A7CC-260985392A05}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNComUnregisterFunctionAttribute = class(TDNGenericImport<DNComUnregisterFunctionAttributeClass, DNComUnregisterFunctionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComVisibleAttributeClass = interface(DNAttributeClass)
  ['{33BBEAB6-6EA8-480A-B53C-BA2AEA19B7F2}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(visibility: Boolean): DNComVisibleAttribute;

  end;

  /// <summary>
  ///   控制程序集中单独托管类型或成员，或所有类型对 COM 的访问性。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComVisibleAttribute')]
  DNComVisibleAttribute = interface(DNAttribute)
  ['{1F4BCC99-E9D8-3AAB-99AF-4D1EC26E3376}']
  { getter & setter } 

    function get_Value: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示是否可见的 COM 类型。
    /// </summary>
    property Value: Boolean read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComVisibleAttribute = class(TDNGenericImport<DNComVisibleAttributeClass, DNComVisibleAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDefaultCharSetAttributeClass = interface(DNAttributeClass)
  ['{A78270C8-8AD4-4532-8787-B6410B3E547B}']
  { constructors } 

    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(charSet: DNCharSet): DNDefaultCharSetAttribute;

  end;

  /// <summary>
  ///   指定的值的  枚举。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.DefaultCharSetAttribute')]
  DNDefaultCharSetAttribute = interface(DNAttribute)
  ['{66708447-ECCE-3422-B3A3-C8161C1C693B}']
  { getter & setter } 

    function get_CharSet: DNCharSet;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取默认值为  的任何调用的 。
    /// </summary>
    property CharSet: DNCharSet read get_CharSet;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultCharSetAttribute = class(TDNGenericImport<DNDefaultCharSetAttributeClass, DNDefaultCharSetAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDefaultDllImportSearchPathsAttributeClass = interface(DNAttributeClass)
  ['{34CD18BB-A18E-4E73-A2B5-8030A4BC1DC5}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定要搜索的目标平台时，将调用时使用的路径。
    /// </summary>
    {class} function init(paths: DNDllImportSearchPath): DNDefaultDllImportSearchPathsAttribute;

  end;

  /// <summary>
  ///   指定用于搜索提供平台调用函数的 DLL 的路径。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute')]
  DNDefaultDllImportSearchPathsAttribute = interface(DNAttribute)
  ['{15D71D4F-5F6D-3006-BECD-8786464CA678}']
  { getter & setter } 

    function get_Paths: DNDllImportSearchPath;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取指定的路径的枚举值的按位组合， LoadLibraryEx 函数搜索期间平台时，将调用。
    /// </summary>
    property Paths: DNDllImportSearchPath read get_Paths;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultDllImportSearchPathsAttribute = class(TDNGenericImport<DNDefaultDllImportSearchPathsAttributeClass, DNDefaultDllImportSearchPathsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDispIdAttributeClass = interface(DNAttributeClass)
  ['{5A4C09DF-47D1-4B0D-9B86-7B14D2C01C3D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  指定 dispid 的类。
    /// </summary>
    {class} function init(&dispId: Int32): DNDispIdAttribute;

  end;

  /// <summary>
  ///   指定方法、字段或属性的 COM 调度标识符 (DISPID)。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.DispIdAttribute')]
  DNDispIdAttribute = interface(DNAttribute)
  ['{B36860B2-BAC3-3C25-81EE-1F62CB91FC76}']
  { getter & setter } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取该成员的 DISPID。
    /// </summary>
    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDispIdAttribute = class(TDNGenericImport<DNDispIdAttributeClass, DNDispIdAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDllImportAttributeClass = interface(DNAttributeClass)
  ['{91BAFF74-4D24-40AA-A3B4-E1816F1AA792}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  同名的方法所属的 dll，若要导入的类。
    /// </summary>
    {class} function init(dllName: string): DNDllImportAttribute;

  end;

  /// <summary>
  ///   指示由非托管动态链接库 (DLL) 公开为静态入口点的特性化方法。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.DllImportAttribute')]
  DNDllImportAttribute = interface(DNAttribute)
  ['{3C52777E-F51C-300A-8122-479A19164325}']
  { getter & setter } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包含入口点的 DLL 文件的名称。
    /// </summary>
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDllImportAttribute = class(TDNGenericImport<DNDllImportAttributeClass, DNDllImportAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNFieldOffsetAttributeClass = interface(DNAttributeClass)
  ['{53E97135-9F48-482E-911B-C4ADB6B4AB77}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  字段的类中的结构的开头的偏移量。
    /// </summary>
    {class} function init(offset: Int32): DNFieldOffsetAttribute;

  end;

  /// <summary>
  ///   指示类或结构的非托管表示形式中字段的物理位置。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.FieldOffsetAttribute')]
  DNFieldOffsetAttribute = interface(DNAttribute)
  ['{3BA14C59-4C61-3D7C-8161-9962D7A89292}']
  { getter & setter } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取从结构的开头到字段的开头的偏移量。
    /// </summary>
    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFieldOffsetAttribute = class(TDNGenericImport<DNFieldOffsetAttributeClass, DNFieldOffsetAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNGuidAttributeClass = interface(DNAttributeClass)
  ['{8BB675D6-276B-4EBD-9B0A-36E89563E548}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  带有指定 GUID 的类。
    /// </summary>
    {class} function init(guid: string): DNGuidAttribute;

  end;

  /// <summary>
  ///   提供一个显式  出现自动 GUID 时不需要。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.GuidAttribute')]
  DNGuidAttribute = interface(DNAttribute)
  ['{FDE6D643-768A-3C91-A169-2C8FB7C1CD1F}']
  { getter & setter } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的类。
    /// </summary>
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNGuidAttribute = class(TDNGenericImport<DNGuidAttributeClass, DNGuidAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNIDispatchImplAttributeClass = interface(DNAttributeClass)
  ['{169B40AB-740C-44EA-ADA1-B3CF08801750}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类指定  值。
    /// </summary>
    {class} function init(implType: DNIDispatchImplType): DNIDispatchImplAttribute; overload;
    /// <summary>
    ///   新实例初始化  类指定  值。
    /// </summary>
    {class} function init(implType: Int16): DNIDispatchImplAttribute; overload;

  end;

  /// <summary>
  ///   指示这  实现公共语言运行时使用双重接口和调度接口向 COM 公开时
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.IDispatchImplAttribute')]
  DNIDispatchImplAttribute = interface(DNAttribute)
  ['{3AB97590-3A62-36FB-903F-BB70B015F156}']
  { getter & setter } 

    function get_Value: DNIDispatchImplType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  类所使用的值。
    /// </summary>
    property Value: DNIDispatchImplType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIDispatchImplAttribute = class(TDNGenericImport<DNIDispatchImplAttributeClass, DNIDispatchImplAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNImportedFromTypeLibAttributeClass = interface(DNAttributeClass)
  ['{A7B66EE0-40F8-4D2B-BAEA-D2276E64952B}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  的原始类型库文件同名的类。
    /// </summary>
    {class} function init(tlbFile: string): DNImportedFromTypeLibAttribute;

  end;

  /// <summary>
  ///   指示程序集内定义的类型最初定义的类型库中。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ImportedFromTypeLibAttribute')]
  DNImportedFromTypeLibAttribute = interface(DNAttribute)
  ['{8AFEAA55-757F-3DDB-A750-B2CAA6A0B80B}']
  { getter & setter } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取原始类型库文件的名称。
    /// </summary>
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNImportedFromTypeLibAttribute = class(TDNGenericImport<DNImportedFromTypeLibAttributeClass, DNImportedFromTypeLibAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInAttributeClass = interface(DNAttributeClass)
  ['{1A14F584-F4E8-4726-B150-EBFF472E87BB}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNInAttribute;

  end;

  /// <summary>
  ///   指示数据应从调用方封送到被调用方，而不是从被调用方封送回调用方。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.InAttribute')]
  DNInAttribute = interface(DNAttribute)
  ['{96A058CD-FAF7-386C-85BF-E47F00C81795}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNInAttribute = class(TDNGenericImport<DNInAttributeClass, DNInAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInterfaceTypeAttributeClass = interface(DNAttributeClass)
  ['{80B3B730-592E-4EF0-900C-178F698BB2B7}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类与指定  枚举成员。
    /// </summary>
    {class} function init(interfaceType: DNComInterfaceType): DNInterfaceTypeAttribute; overload;
    /// <summary>
    ///   新实例初始化  类与指定  枚举成员。
    /// </summary>
    {class} function init(interfaceType: Int16): DNInterfaceTypeAttribute; overload;

  end;

  /// <summary>
  ///   表示一个托管的接口是双重的、 仅支持调度或  -仅在向 COM 公开时
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.InterfaceTypeAttribute')]
  DNInterfaceTypeAttribute = interface(DNAttribute)
  ['{C8A36B3C-BC72-31E7-8BA2-EF949A54BD0C}']
  { getter & setter } 

    function get_Value: DNComInterfaceType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值，该值描述如何向 COM 公开接口
    /// </summary>
    property Value: DNComInterfaceType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInterfaceTypeAttribute = class(TDNGenericImport<DNInterfaceTypeAttributeClass, DNInterfaceTypeAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNLCIDConversionAttributeClass = interface(DNAttributeClass)
  ['{A861F763-45F9-48B8-949F-98FF894B5D94}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  用 LCID 的非托管签名中的位置。
    /// </summary>
    {class} function init(lcid: Int32): DNLCIDConversionAttribute;

  end;

  /// <summary>
  ///   该值指示该方法的非托管的签名所需区域设置标识符 (LCID) 参数。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.LCIDConversionAttribute')]
  DNLCIDConversionAttribute = interface(DNAttribute)
  ['{F912451B-8766-32CD-917F-3B9FEE4421A8}']
  { getter & setter } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取 LCID 参数的非托管签名中的位置。
    /// </summary>
    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNLCIDConversionAttribute = class(TDNGenericImport<DNLCIDConversionAttributeClass, DNLCIDConversionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNManagedToNativeComInteropStubAttributeClass = interface(DNAttributeClass)
  ['{C145BCFA-8478-4520-BA85-BAF35AB00BA6}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  初始化具有指定的类类型和方法名称。
    /// </summary>
    {class} function init(classType: DNType; methodName: string): DNManagedToNativeComInteropStubAttribute;

  end;

  /// <summary>
  ///   为用户自定义互操作存根 （stub） 中托管为 COM 互操作方案提供支持。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute')]
  DNManagedToNativeComInteropStubAttribute = interface(DNAttribute)
  ['{8E5226BE-8FFA-358D-93B0-B6B01CBC7A53}']
  { getter & setter } 

    function get_ClassType: DNType;
    function get_MethodName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包含所需的存根 （stub） 方法的类。
    /// </summary>
    property ClassType: DNType read get_ClassType;
    /// <summary>
    ///   获取该存根 （stub） 方法的名称。
    /// </summary>
    property MethodName: string read get_MethodName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNManagedToNativeComInteropStubAttribute = class(TDNGenericImport<DNManagedToNativeComInteropStubAttributeClass, DNManagedToNativeComInteropStubAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalAsAttributeClass = interface(DNAttributeClass)
  ['{60B712C4-0E38-4B91-9FE8-974A206A0173}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类与指定  枚举成员。
    /// </summary>
    {class} function init(unmanagedType: DNUnmanagedType): DNMarshalAsAttribute; overload;
    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(unmanagedType: Int16): DNMarshalAsAttribute; overload;

  end;

  /// <summary>
  ///   指示如何在托管代码与非托管代码之间封送数据。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.MarshalAsAttribute')]
  DNMarshalAsAttribute = interface(DNAttribute)
  ['{AAFFEF00-519D-3EE0-8763-D4B650611E0D}']
  { getter & setter } 

    function get_Value: DNUnmanagedType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值，数据将作为封送处理。
    /// </summary>
    property Value: DNUnmanagedType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMarshalAsAttribute = class(TDNGenericImport<DNMarshalAsAttributeClass, DNMarshalAsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNOptionalAttributeClass = interface(DNAttributeClass)
  ['{4497CC34-D4F3-45D8-90B1-E757202D12D0}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNOptionalAttribute;

  end;

  /// <summary>
  ///   指示参数是可选的。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.OptionalAttribute')]
  DNOptionalAttribute = interface(DNAttribute)
  ['{B81CB5ED-E654-399F-9698-C83C50665786}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOptionalAttribute = class(TDNGenericImport<DNOptionalAttributeClass, DNOptionalAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNOutAttributeClass = interface(DNAttributeClass)
  ['{88B77855-41CA-489D-82F4-D95AEE793DAE}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNOutAttribute;

  end;

  /// <summary>
  ///   指示数据应从被调用方封送回调用方。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.OutAttribute')]
  DNOutAttribute = interface(DNAttribute)
  ['{FDB2DC94-B5A0-3702-AE84-BBFA752ACB36}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOutAttribute = class(TDNGenericImport<DNOutAttributeClass, DNOutAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNPreserveSigAttributeClass = interface(DNAttributeClass)
  ['{B48F6F8D-0B15-4F55-A433-67FD5E6D67D7}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNPreserveSigAttribute;

  end;

  /// <summary>
  ///   指示相应的 HRESULT 或应取消 COM 互操作调用过程中发生的签名转换。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.PreserveSigAttribute')]
  DNPreserveSigAttribute = interface(DNAttribute)
  ['{204D5A28-46A0-3F04-BD7C-B5672631E57F}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPreserveSigAttribute = class(TDNGenericImport<DNPreserveSigAttributeClass, DNPreserveSigAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNPrimaryInteropAssemblyAttributeClass = interface(DNAttributeClass)
  ['{A597F5C5-E0BF-455A-8054-64597219725D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，此程序集是主互操作程序集的类型库的主版本号和次版本号。
    /// </summary>
    {class} function init(major: Int32; minor: Int32): DNPrimaryInteropAssemblyAttribute;

  end;

  /// <summary>
  ///   指示特性化程序集是主互操作程序集。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute')]
  DNPrimaryInteropAssemblyAttribute = interface(DNAttribute)
  ['{6DD18F5D-7A5C-3868-B1C2-7E19DA873386}']
  { getter & setter } 

    function get_MajorVersion: Int32;
    function get_MinorVersion: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取用于此程序集是主互操作程序集的类型库的主要版本号。
    /// </summary>
    property MajorVersion: Int32 read get_MajorVersion;
    /// <summary>
    ///   获取用于此程序集是主互操作程序集的类型库的次要版本号。
    /// </summary>
    property MinorVersion: Int32 read get_MinorVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNPrimaryInteropAssemblyAttribute = class(TDNGenericImport<DNPrimaryInteropAssemblyAttributeClass, DNPrimaryInteropAssemblyAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNProgIdAttributeClass = interface(DNAttributeClass)
  ['{372F6E7D-AD07-428B-8B47-409F8C50F562}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  为与指定 ProgID。
    /// </summary>
    {class} function init(progId: string): DNProgIdAttribute;

  end;

  /// <summary>
  ///   允许用户指定的 ProgID，一个类。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ProgIdAttribute')]
  DNProgIdAttribute = interface(DNAttribute)
  ['{47854AE8-F71C-3459-A943-1E91EDC951A7}']
  { getter & setter } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取类的 ProgID。
    /// </summary>
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNProgIdAttribute = class(TDNGenericImport<DNProgIdAttributeClass, DNProgIdAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSetWin32ContextInIDispatchAttributeClass = interface(DNAttributeClass)
  ['{A55C67F0-6082-4CAB-9B2F-1B53446D44A3}']
  { constructors } 

    /// <summary>
    ///   此特性已弃用。
    /// </summary>
    {class} function init: DNSetWin32ContextInIDispatchAttribute;

  end;

  /// <summary>
  ///   此特性已弃用。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.SetWin32ContextInIDispatchAttribute')]
  DNSetWin32ContextInIDispatchAttribute = interface(DNAttribute)
  ['{9D309F77-4655-372E-84B0-B0FB4030F3B8}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSetWin32ContextInIDispatchAttribute = class(TDNGenericImport<DNSetWin32ContextInIDispatchAttributeClass, DNSetWin32ContextInIDispatchAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNStructLayoutAttributeClass = interface(DNAttributeClass)
  ['{60055F4F-9592-44BB-AA25-F8FB426DAB3E}']
  { constructors } 

    /// <summary>
    ///   用指定的  枚举成员初始化  类的新实例。
    /// </summary>
    {class} function init(layoutKind: DNLayoutKind): DNStructLayoutAttribute; overload;
    /// <summary>
    ///   用指定的  枚举成员初始化  类的新实例。
    /// </summary>
    {class} function init(layoutKind: Int16): DNStructLayoutAttribute; overload;

  end;

  /// <summary>
  ///   允许你控制内存中类或结构的数据字段的物理布局。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.StructLayoutAttribute')]
  DNStructLayoutAttribute = interface(DNAttribute)
  ['{A0FFF774-26BD-3DE7-95CE-DBCEA6088F96}']
  { getter & setter } 

    function get_Value: DNLayoutKind;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值，该值指定如何排列类或结构。
    /// </summary>
    property Value: DNLayoutKind read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNStructLayoutAttribute = class(TDNGenericImport<DNStructLayoutAttributeClass, DNStructLayoutAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeIdentifierAttributeClass = interface(DNAttributeClass)
  ['{B9851027-3275-4BE4-93D2-AA4978B2A107}']
  { constructors } 

    /// <summary>
    ///   创建  类的新实例。
    /// </summary>
    {class} function init: DNTypeIdentifierAttribute; overload;
    /// <summary>
    ///   创建的新实例  类具有指定的作用域和标识符。
    /// </summary>
    {class} function init(scope: string; identifier: string): DNTypeIdentifierAttribute; overload;

  end;

  /// <summary>
  ///   为类型等效提供支持。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeIdentifierAttribute')]
  DNTypeIdentifierAttribute = interface(DNAttribute)
  ['{7DFA14F0-5F38-3AA6-B19C-C1553DF08036}']
  { getter & setter } 

    function get_Scope: string;
    function get_Identifier: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的值  参数传递给  构造函数。
    /// </summary>
    property Scope: string read get_Scope;
    /// <summary>
    ///   获取的值  参数传递给  构造函数。
    /// </summary>
    property Identifier: string read get_Identifier;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeIdentifierAttribute = class(TDNGenericImport<DNTypeIdentifierAttributeClass, DNTypeIdentifierAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibFuncAttributeClass = interface(DNAttributeClass)
  ['{1B2E093C-A5D3-493C-B563-372A9304AF47}']
  { constructors } 

    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(flags: DNTypeLibFuncFlags): DNTypeLibFuncAttribute; overload;
    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(flags: Int16): DNTypeLibFuncAttribute; overload;

  end;

  /// <summary>
  ///   包含  ，最初为此方法从 COM 类型库导入。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibFuncAttribute')]
  DNTypeLibFuncAttribute = interface(DNAttribute)
  ['{05074A9C-0B30-3A78-AAEF-99356E49DF45}']
  { getter & setter } 

    function get_Value: DNTypeLibFuncFlags;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  此方法的值。
    /// </summary>
    property Value: DNTypeLibFuncFlags read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeLibFuncAttribute = class(TDNGenericImport<DNTypeLibFuncAttributeClass, DNTypeLibFuncAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibImportClassAttributeClass = interface(DNAttributeClass)
  ['{0ADD4EA9-58EA-4BD1-8DC7-7AA90D7A64EB}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类指定  ，以独占方式使用的接口。
    /// </summary>
    {class} function init(importClass: DNType): DNTypeLibImportClassAttribute;

  end;

  /// <summary>
  ///   指定使用哪些  以独占方式使用的接口。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibImportClassAttribute')]
  DNTypeLibImportClassAttribute = interface(DNAttribute)
  ['{A09B7B15-DFA5-3E98-9C26-865AD9079E42}']
  { getter & setter } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取名称  独占使用接口的对象。
    /// </summary>
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeLibImportClassAttribute = class(TDNGenericImport<DNTypeLibImportClassAttributeClass, DNTypeLibImportClassAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibTypeAttributeClass = interface(DNAttributeClass)
  ['{A22347E3-5A23-452D-815E-09BEC111FBF3}']
  { constructors } 

    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(flags: DNTypeLibTypeFlags): DNTypeLibTypeAttribute; overload;
    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(flags: Int16): DNTypeLibTypeAttribute; overload;

  end;

  /// <summary>
  ///   包含  最初为此类型从 COM 类型库导入。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibTypeAttribute')]
  DNTypeLibTypeAttribute = interface(DNAttribute)
  ['{2F53C69E-F1F0-3E98-AD3B-EEAA89A88906}']
  { getter & setter } 

    function get_Value: DNTypeLibTypeFlags;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  这种类型的值。
    /// </summary>
    property Value: DNTypeLibTypeFlags read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeLibTypeAttribute = class(TDNGenericImport<DNTypeLibTypeAttributeClass, DNTypeLibTypeAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibVarAttributeClass = interface(DNAttributeClass)
  ['{03A5D93C-1866-4A14-BA65-F2819EE19536}']
  { constructors } 

    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(flags: DNTypeLibVarFlags): DNTypeLibVarAttribute; overload;
    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(flags: Int16): DNTypeLibVarAttribute; overload;

  end;

  /// <summary>
  ///   包含  最初为此字段从 COM 类型库导入。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibVarAttribute')]
  DNTypeLibVarAttribute = interface(DNAttribute)
  ['{36BDD1DA-2B15-3428-B055-BDABF4667C3F}']
  { getter & setter } 

    function get_Value: DNTypeLibVarFlags;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  此字段的值。
    /// </summary>
    property Value: DNTypeLibVarFlags read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeLibVarAttribute = class(TDNGenericImport<DNTypeLibVarAttributeClass, DNTypeLibVarAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibVersionAttributeClass = interface(DNAttributeClass)
  ['{FB3E9289-1DCB-4217-9D19-2883883457C6}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类与类型库的主版本号和次版本号。
    /// </summary>
    {class} function init(major: Int32; minor: Int32): DNTypeLibVersionAttribute;

  end;

  /// <summary>
  ///   指定导出的类型库的版本号。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibVersionAttribute')]
  DNTypeLibVersionAttribute = interface(DNAttribute)
  ['{5F8DC45F-A2D8-3E34-8C86-586ED6A74984}']
  { getter & setter } 

    function get_MajorVersion: Int32;
    function get_MinorVersion: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取类型库的主版本号。
    /// </summary>
    property MajorVersion: Int32 read get_MajorVersion;
    /// <summary>
    ///   获取类型库的次版本号。
    /// </summary>
    property MinorVersion: Int32 read get_MinorVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeLibVersionAttribute = class(TDNGenericImport<DNTypeLibVersionAttributeClass, DNTypeLibVersionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNUnmanagedFunctionPointerAttributeClass = interface(DNAttributeClass)
  ['{96714227-3E9B-4C57-975D-D6156310D4DA}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有指定的调用约定。
    /// </summary>
    {class} function init(callingConvention: DNCallingConvention): DNUnmanagedFunctionPointerAttribute;

  end;

  /// <summary>
  ///   控制作为非托管函数指针传递到非托管代码（或从非托管代码中传递）的委托签名的封送处理行为。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute')]
  DNUnmanagedFunctionPointerAttribute = interface(DNAttribute)
  ['{1A8E1B1F-EF9E-33E6-950E-4D9435F1335B}']
  { getter & setter } 

    function get_CallingConvention: DNCallingConvention;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取调用约定的值。
    /// </summary>
    property CallingConvention: DNCallingConvention read get_CallingConvention;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnmanagedFunctionPointerAttribute = class(TDNGenericImport<DNUnmanagedFunctionPointerAttributeClass, DNUnmanagedFunctionPointerAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNDefaultInterfaceAttributeClass = interface(DNAttributeClass)
  ['{EBA123BD-1359-467F-A9F4-BE50EB62E363}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(defaultInterface: DNType): DNDefaultInterfaceAttribute;

  end;

  /// <summary>
  ///   指定托管的默认接口 Windows 运行时 类。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute')]
  DNDefaultInterfaceAttribute = interface(DNAttribute)
  ['{A407CCA8-7700-31D2-8C0C-18E08B07FF7A}']
  { getter & setter } 

    function get_DefaultInterface: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取默认接口的类型。
    /// </summary>
    property DefaultInterface: DNType read get_DefaultInterface;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultInterfaceAttribute = class(TDNGenericImport<DNDefaultInterfaceAttributeClass, DNDefaultInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNInterfaceImplementedInVersionAttributeClass = interface(DNAttributeClass)
  ['{E4797585-2E48-42F8-9D97-CE3820FCD10F}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类中，指定目标类型实现的接口和首先实现该接口的版本。
    /// </summary>
    {class} function init(interfaceType: DNType; majorVersion: Byte; minorVersion: Byte; buildVersion: Byte; revisionVersion: Byte): DNInterfaceImplementedInVersionAttribute;

  end;

  /// <summary>
  ///   指定首次实现指定接口的目标类型版本。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute')]
  DNInterfaceImplementedInVersionAttribute = interface(DNAttribute)
  ['{B162413C-A4D8-3F10-B513-C1D4B6171455}']
  { getter & setter } 

    function get_InterfaceType: DNType;
    function get_MajorVersion: Byte;
    function get_MinorVersion: Byte;
    function get_BuildVersion: Byte;
    function get_RevisionVersion: Byte;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取目标类型实现的接口的类型。
    /// </summary>
    property InterfaceType: DNType read get_InterfaceType;
    /// <summary>
    ///   获取第一次实现的接口的目标类型的版本的主要组件。
    /// </summary>
    property MajorVersion: Byte read get_MajorVersion;
    /// <summary>
    ///   获取第一次实现的接口的目标类型的版本的次要部分。
    /// </summary>
    property MinorVersion: Byte read get_MinorVersion;
    /// <summary>
    ///   获取第一次实现的接口的目标类型的版本的生成部分。
    /// </summary>
    property BuildVersion: Byte read get_BuildVersion;
    /// <summary>
    ///   获取修订号部分的第一次实现的接口的目标类型的版本。
    /// </summary>
    property RevisionVersion: Byte read get_RevisionVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInterfaceImplementedInVersionAttribute = class(TDNGenericImport<DNInterfaceImplementedInVersionAttributeClass, DNInterfaceImplementedInVersionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNReadOnlyArrayAttributeClass = interface(DNAttributeClass)
  ['{13C01376-F2E5-4924-8854-FA1320471A61}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNReadOnlyArrayAttribute;

  end;

  /// <summary>
  ///   当应用于 Windows 运行时 组件中的数组参数时，请指定传递到该参数的数组的内容仅用于输入。
  ///               调用方期望此数组不因调用而更改。
  ///               有关使用托管代码写入的调用方的重要信息，请参见“备注”一节。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute')]
  DNReadOnlyArrayAttribute = interface(DNAttribute)
  ['{2956F82B-6CB1-3A6D-99CB-A119AC1F6EB3}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNReadOnlyArrayAttribute = class(TDNGenericImport<DNReadOnlyArrayAttributeClass, DNReadOnlyArrayAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNReturnValueNameAttributeClass = interface(DNAttributeClass)
  ['{36EE6124-FA6E-486C-B5C7-6D2B4DCD2AB3}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，并指定返回值的名称。
    /// </summary>
    {class} function init(name: string): DNReturnValueNameAttribute;

  end;

  /// <summary>
  ///   指定 Windows 运行时 组件中方法的返回值名称。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute')]
  DNReturnValueNameAttribute = interface(DNAttribute)
  ['{5C28C0BA-613F-336E-95F3-D681F0DD9EC2}']
  { getter & setter } 

    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取指定的名称中的方法的返回值 Windows 运行时 组件。
    /// </summary>
    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReturnValueNameAttribute = class(TDNGenericImport<DNReturnValueNameAttributeClass, DNReturnValueNameAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNWriteOnlyArrayAttributeClass = interface(DNAttributeClass)
  ['{A45BD49E-0A2D-407B-8B5E-945A60666E32}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNWriteOnlyArrayAttribute;

  end;

  /// <summary>
  ///   当应用于 Windows 运行时 组件中的数组参数时，请指定传递到此参数的数组的内容仅用于输出。
  ///               调用方不保证对内容进行了初始化，因此，所调用的方法不应读取内容。
  ///               有关使用托管代码写入的调用方的重要信息，请参见“备注”一节。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.WriteOnlyArrayAttribute')]
  DNWriteOnlyArrayAttribute = interface(DNAttribute)
  ['{C6B8E6A6-C46E-31BC-8169-D4CF697DD25E}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNWriteOnlyArrayAttribute = class(TDNGenericImport<DNWriteOnlyArrayAttributeClass, DNWriteOnlyArrayAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  DNContextAttributeClass = interface(DNAttributeClass)
  ['{D9C3CDC6-7B7F-4F93-8CD7-4530F190BDC4}']
  { constructors } 

    /// <summary>
    ///   创建的一个实例  具有指定名称的类。
    /// </summary>
    {class} function init(name: string): DNContextAttribute;

  end;

  /// <summary>
  ///   提供的默认实现  和  接口。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.ContextAttribute')]
  DNContextAttribute = interface(DNAttribute)
  ['{1764148E-73C1-320A-83FC-337DE81A68B4}']
  { getter & setter } 

    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   返回一个布尔值，该值指示是否符合新的上下文的上下文属性。
    /// </summary>
    function IsNewContextOK(newCtx: DNContext): Boolean;
    /// <summary>
    ///   当上下文冻结时调用。
    /// </summary>
    procedure Freeze(newContext: DNContext);
    /// <summary>
    ///   返回一个布尔值，该值指示此实例是否等于指定的对象。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码 。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回一个布尔值，该值指示该上下文参数是否满足上下文属性的要求。
    /// </summary>
    function IsContextOK(ctx: DNContext; ctorMsg: DNIConstructionCallMessage): Boolean;
    /// <summary>
    ///   将当前的上下文属性添加到给定的消息。
    /// </summary>
    procedure GetPropertiesForNewContext(ctorMsg: DNIConstructionCallMessage);
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取上下文属性的名称。
    /// </summary>
    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContextAttribute = class(TDNGenericImport<DNContextAttributeClass, DNContextAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Activation----------------
  DNUrlAttributeClass = interface(DNContextAttributeClass)
  ['{8C97967C-1E4C-40D5-BBD0-1BD30D082E7C}']
  { constructors } 

    /// <summary>
    ///   创建  类的新实例。
    /// </summary>
    {class} function init(callsiteURL: string): DNUrlAttribute;

  end;

  /// <summary>
  ///   定义可在调用站点指定的 URL，将发生激活的特性。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Activation.UrlAttribute')]
  DNUrlAttribute = interface(DNContextAttribute)
  ['{79C14066-E37E-3643-A449-D166FA0E8EC2}']
  { getter & setter } 

    function get_UrlValue: string;
    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   检查指定的对象是否引用与当前实例相同的 URL。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   返回当前的哈希值 。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回一个布尔值，该值指示是否指定  满足 的要求。
    /// </summary>
    function IsContextOK(ctx: DNContext; msg: DNIConstructionCallMessage): Boolean;
    /// <summary>
    ///   强制创建上下文并在指定的 URL 处的上下文内的服务器对象。
    /// </summary>
    procedure GetPropertiesForNewContext(ctorMsg: DNIConstructionCallMessage);
    function IsNewContextOK(newCtx: DNContext): Boolean;
    procedure Freeze(newContext: DNContext);
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的 URL 值 。
    /// </summary>
    property UrlValue: string read get_UrlValue;
    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUrlAttribute = class(TDNGenericImport<DNUrlAttributeClass, DNUrlAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  DNSynchronizationAttributeClass = interface(DNContextAttributeClass)
  ['{DD8CD64C-4A9B-44D7-9592-65C1AE03A31F}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNSynchronizationAttribute; overload;
    /// <summary>
    ///   新实例初始化  使用 Boolean 值，该值指示是否需要重入的类。
    /// </summary>
    {class} function init(reEntrant: Boolean): DNSynchronizationAttribute; overload;
    /// <summary>
    ///   新实例初始化  类，具有一个标志，指示此特性应用于对象的行为。
    /// </summary>
    {class} function init(flag: Int32): DNSynchronizationAttribute; overload;
    /// <summary>
    ///   新实例初始化  带有一个标志，指示此属性应用于对象的行为和一个布尔值，该值指示是否需要重入的类。
    /// </summary>
    {class} function init(flag: Int32; reEntrant: Boolean): DNSynchronizationAttribute; overload;

  end;

  /// <summary>
  ///   强制实施当前上下文和所有共享相同的实例的上下文的同步域。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.SynchronizationAttribute')]
  DNSynchronizationAttribute = interface(DNContextAttribute)
  ['{5520B6D3-6EC6-3CE7-958B-E69FAF6EFF99}']
  { getter & setter } 

    function get_Locked: Boolean;
    procedure set_Locked(value: Boolean);
    function get_IsReEntrant: Boolean;
    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   添加  到指定的上下文属性 。
    /// </summary>
    procedure GetPropertiesForNewContext(ctorMsg: DNIConstructionCallMessage);
    /// <summary>
    ///   创建一个同步的调度接收器，并将其链接的前面提供的接收器链的上下文边界上的远程处理调用的服务器端。
    /// </summary>
    function GetServerContextSink(nextSink: DNIMessageSink): DNIMessageSink;
    /// <summary>
    ///   创建标注接收器，并将其链接的前面提供的接收器链的上下文边界上的远程处理调用的客户端。
    /// </summary>
    function GetClientContextSink(nextSink: DNIMessageSink): DNIMessageSink;
    /// <summary>
    ///   返回一个布尔值，该值指示该上下文参数是否满足上下文属性的要求。
    /// </summary>
    function IsContextOK(ctx: DNContext; msg: DNIConstructionCallMessage): Boolean;
    function IsNewContextOK(newCtx: DNContext): Boolean;
    procedure Freeze(newContext: DNContext);
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置一个布尔值，该值指示是否  实现的此实例  处于锁定状态。
    /// </summary>
    property Locked: Boolean read get_Locked write set_Locked;
    /// <summary>
    ///   获取或设置一个布尔值，该值指示是否需要重入。
    /// </summary>
    property IsReEntrant: Boolean read get_IsReEntrant;
    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSynchronizationAttribute = class(TDNGenericImport<DNSynchronizationAttributeClass, DNSynchronizationAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNOneWayAttributeClass = interface(DNAttributeClass)
  ['{952A9F8A-4194-4056-8F3D-2F244156A226}']
  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNOneWayAttribute;

  end;

  /// <summary>
  ///   将一个方法标记为不返回值的一种方法和  或  参数。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.OneWayAttribute')]
  DNOneWayAttribute = interface(DNAttribute)
  ['{C30ABD41-7B5A-3D10-A6EF-56862E2979B6}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOneWayAttribute = class(TDNGenericImport<DNOneWayAttributeClass, DNOneWayAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  DNSoapAttributeClass = interface(DNAttributeClass)
  ['{C2676CC9-C4A3-491A-93FA-1F5E2AE2F923}']
  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNSoapAttribute;

  end;

  /// <summary>
  ///   提供的所有 SOAP 属性的默认功能。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.SoapAttribute')]
  DNSoapAttribute = interface(DNAttribute)
  ['{9B924EC5-BF13-3A98-8AC0-80877995D403}']
  { getter & setter } 

    function get_XmlNamespace: string;
    procedure set_XmlNamespace(value: string);
    function get_UseAttribute: Boolean;
    procedure set_UseAttribute(value: Boolean);
    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML 命名空间名称。
    /// </summary>
    property XmlNamespace: string read get_XmlNamespace write set_XmlNamespace;
    /// <summary>
    ///   获取或设置一个值，该值指示当前属性的目标将序列化为 XML 特性而不是一个 XML 字段。
    /// </summary>
    property UseAttribute: Boolean read get_UseAttribute write set_UseAttribute;
    /// <summary>
    ///   获取或设置一个值，该值指示是否必须在 SOAP 序列化过程中嵌套类型。
    /// </summary>
    property Embedded: Boolean read get_Embedded write set_Embedded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSoapAttribute = class(TDNGenericImport<DNSoapAttributeClass, DNSoapAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  DNSoapFieldAttributeClass = interface(DNSoapAttributeClass)
  ['{1924711B-2720-4CB7-AEEB-0433E22ABFCF}']
  { constructors } 

    /// <summary>
    ///   创建的一个实例  类。
    /// </summary>
    {class} function init: DNSoapFieldAttribute;

  end;

  /// <summary>
  ///   自定义 SOAP 生成和处理的字段。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.SoapFieldAttribute')]
  DNSoapFieldAttribute = interface(DNSoapAttribute)
  ['{5B76534C-3ACC-3D52-AA61-D788B134ABE2}']
  { getter & setter } 

    function get_XmlElementName: string;
    procedure set_XmlElementName(value: string);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_XmlNamespace: string;
    procedure set_XmlNamespace(value: string);
    function get_UseAttribute: Boolean;
    procedure set_UseAttribute(value: Boolean);
    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示当前属性是否包含互操作的 XML 元素值。
    /// </summary>
    function IsInteropXmlElement: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML 元素名称中包含的字段  属性。
    /// </summary>
    property XmlElementName: string read get_XmlElementName write set_XmlElementName;
    /// <summary>
    ///   获取或设置当前的字段属性的顺序。
    /// </summary>
    property Order: Int32 read get_Order write set_Order;
    property XmlNamespace: string read get_XmlNamespace write set_XmlNamespace;
    property UseAttribute: Boolean read get_UseAttribute write set_UseAttribute;
    property Embedded: Boolean read get_Embedded write set_Embedded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSoapFieldAttribute = class(TDNGenericImport<DNSoapFieldAttributeClass, DNSoapFieldAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  DNSoapMethodAttributeClass = interface(DNSoapAttributeClass)
  ['{D2983927-73AB-44C6-B127-5363CE1CE790}']
  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNSoapMethodAttribute;

  end;

  /// <summary>
  ///   自定义 SOAP 生成和处理的方法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.SoapMethodAttribute')]
  DNSoapMethodAttribute = interface(DNSoapAttribute)
  ['{01FF4E4B-8AD0-3171-8C82-5C2F48B87E3D}']
  { getter & setter } 

    function get_SoapAction: string;
    procedure set_SoapAction(value: string);
    function get_UseAttribute: Boolean;
    procedure set_UseAttribute(value: Boolean);
    function get_XmlNamespace: string;
    procedure set_XmlNamespace(value: string);
    function get_ResponseXmlElementName: string;
    procedure set_ResponseXmlElementName(value: string);
    function get_ResponseXmlNamespace: string;
    procedure set_ResponseXmlNamespace(value: string);
    function get_ReturnXmlElementName: string;
    procedure set_ReturnXmlElementName(value: string);
    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置与此方法一起发送的 HTTP 请求使用的 SOAPAction 标头字段。
    ///               当前未实现此属性。
    /// </summary>
    property SoapAction: string read get_SoapAction write set_SoapAction;
    /// <summary>
    ///   获取或设置一个值，该值指示当前属性的目标将序列化为 XML 特性而不是一个 XML 字段。
    /// </summary>
    property UseAttribute: Boolean read get_UseAttribute write set_UseAttribute;
    /// <summary>
    ///   获取或设置在序列化的远程方法调用目标方法的过程中使用的 XML 命名空间。
    /// </summary>
    property XmlNamespace: string read get_XmlNamespace write set_XmlNamespace;
    /// <summary>
    ///   获取或设置要用于对目标方法的方法响应的 XML 元素名称。
    /// </summary>
    property ResponseXmlElementName: string read get_ResponseXmlElementName write set_ResponseXmlElementName;
    /// <summary>
    ///   获取或设置用于对目标方法的方法响应的 XML 元素命名空间。
    /// </summary>
    property ResponseXmlNamespace: string read get_ResponseXmlNamespace write set_ResponseXmlNamespace;
    /// <summary>
    ///   获取或设置用于目标方法的返回值的 XML 元素名称。
    /// </summary>
    property ReturnXmlElementName: string read get_ReturnXmlElementName write set_ReturnXmlElementName;
    property Embedded: Boolean read get_Embedded write set_Embedded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSoapMethodAttribute = class(TDNGenericImport<DNSoapMethodAttributeClass, DNSoapMethodAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  DNSoapParameterAttributeClass = interface(DNSoapAttributeClass)
  ['{49D8D089-4A48-4B40-894D-C3EAC23FDABA}']
  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNSoapParameterAttribute;

  end;

  /// <summary>
  ///   自定义 SOAP 生成和处理的参数。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.SoapParameterAttribute')]
  DNSoapParameterAttribute = interface(DNSoapAttribute)
  ['{C76B435D-86C2-30FD-9329-E2603246095C}']
  { getter & setter } 

    function get_XmlNamespace: string;
    procedure set_XmlNamespace(value: string);
    function get_UseAttribute: Boolean;
    procedure set_UseAttribute(value: Boolean);
    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property XmlNamespace: string read get_XmlNamespace write set_XmlNamespace;
    property UseAttribute: Boolean read get_UseAttribute write set_UseAttribute;
    property Embedded: Boolean read get_Embedded write set_Embedded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSoapParameterAttribute = class(TDNGenericImport<DNSoapParameterAttributeClass, DNSoapParameterAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  DNSoapTypeAttributeClass = interface(DNSoapAttributeClass)
  ['{C3307ED7-8000-409B-B711-4D85873ADF12}']
  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNSoapTypeAttribute;

  end;

  /// <summary>
  ///   自定义 SOAP 生成和目标类型的处理。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.SoapTypeAttribute')]
  DNSoapTypeAttribute = interface(DNSoapAttribute)
  ['{9C67F424-22DC-3D05-AB36-17EAF95881F2}']
  { getter & setter } 

    function get_SoapOptions: DNSoapOption;
    procedure set_SoapOptions(value: DNSoapOption);
    function get_XmlElementName: string;
    procedure set_XmlElementName(value: string);
    function get_XmlNamespace: string;
    procedure set_XmlNamespace(value: string);
    function get_XmlTypeName: string;
    procedure set_XmlTypeName(value: string);
    function get_XmlTypeNamespace: string;
    procedure set_XmlTypeNamespace(value: string);
    function get_XmlFieldOrder: DNXmlFieldOrderOption;
    procedure set_XmlFieldOrder(value: DNXmlFieldOrderOption);
    function get_UseAttribute: Boolean;
    procedure set_UseAttribute(value: Boolean);
    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  配置值。
    /// </summary>
    property SoapOptions: DNSoapOption read get_SoapOptions write set_SoapOptions;
    /// <summary>
    ///   获取或设置 XML 元素名称。
    /// </summary>
    property XmlElementName: string read get_XmlElementName write set_XmlElementName;
    /// <summary>
    ///   获取或设置在目标对象类型的序列化过程中使用的 XML 命名空间。
    /// </summary>
    property XmlNamespace: string read get_XmlNamespace write set_XmlNamespace;
    /// <summary>
    ///   获取或设置目标对象类型的 XML 类型名称。
    /// </summary>
    property XmlTypeName: string read get_XmlTypeName write set_XmlTypeName;
    /// <summary>
    ///   获取或设置当前的对象类型的 XML 类型命名空间。
    /// </summary>
    property XmlTypeNamespace: string read get_XmlTypeNamespace write set_XmlTypeNamespace;
    /// <summary>
    ///   获取或设置目标对象类型的 XML 字段顺序。
    /// </summary>
    property XmlFieldOrder: DNXmlFieldOrderOption read get_XmlFieldOrder write set_XmlFieldOrder;
    /// <summary>
    ///   获取或设置一个值，该值指示当前属性的目标将序列化为 XML 特性而不是一个 XML 字段。
    /// </summary>
    property UseAttribute: Boolean read get_UseAttribute write set_UseAttribute;
    property Embedded: Boolean read get_Embedded write set_Embedded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSoapTypeAttribute = class(TDNGenericImport<DNSoapTypeAttributeClass, DNSoapTypeAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Proxies----------------
  DNProxyAttributeClass = interface(DNAttributeClass)
  ['{1D7B55DE-3220-472F-86FE-32EA9B29D0FD}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNProxyAttribute;

  end;

  /// <summary>
  ///   指示一个对象类型需要自定义代理服务器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Proxies.ProxyAttribute')]
  DNProxyAttribute = interface(DNAttribute)
  ['{1163D0CA-2A02-37C1-BF3F-A9B9E9D49245}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建未初始化  或透明代理，具体取决于是否指定的类型可以存在于当前上下文中。
    /// </summary>
    function CreateInstance(serverType: DNType): DNMarshalByRefObject;
    /// <summary>
    ///   创建远程对象描述由指定的远程处理代理实例 , ，并且位于服务器上。
    /// </summary>
    function CreateProxy(objRef: DNObjRef; serverType: DNType; serverObject: DNObject; serverContext: DNContext): DNRealProxy;
    /// <summary>
    ///   检查指定的上下文。
    /// </summary>
    function IsContextOK(ctx: DNContext; msg: DNIConstructionCallMessage): Boolean;
    /// <summary>
    ///   获取一个新的上下文属性。
    /// </summary>
    procedure GetPropertiesForNewContext(msg: DNIConstructionCallMessage);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNProxyAttribute = class(TDNGenericImport<DNProxyAttributeClass, DNProxyAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnDeserializedAttributeClass = interface(DNAttributeClass)
  ['{4850A4DE-0BE5-4770-A21D-9AA2184D724D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNOnDeserializedAttribute;

  end;

  /// <summary>
  ///   当应用于方法时，指定在反序列化对象关系图中的对象之后立即调用该方法。
  ///               相对于关系图中的其他对象，该反序列化的顺序是不确定的。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.OnDeserializedAttribute')]
  DNOnDeserializedAttribute = interface(DNAttribute)
  ['{18B1C7EE-68E3-35BB-9E40-469A223285F7}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnDeserializedAttribute = class(TDNGenericImport<DNOnDeserializedAttributeClass, DNOnDeserializedAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnDeserializingAttributeClass = interface(DNAttributeClass)
  ['{365BBEE0-13C6-4E59-8586-43ED251C906D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNOnDeserializingAttribute;

  end;

  /// <summary>
  ///   当应用于方法时，指定在反序列化对象关系图中的对象期间调用该方法。
  ///               相对于关系图中的其他对象，该反序列化的顺序是不确定的。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.OnDeserializingAttribute')]
  DNOnDeserializingAttribute = interface(DNAttribute)
  ['{30AC0B94-3BDB-3199-8A5D-ECA0C5458381}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnDeserializingAttribute = class(TDNGenericImport<DNOnDeserializingAttributeClass, DNOnDeserializingAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnSerializedAttributeClass = interface(DNAttributeClass)
  ['{9250989A-5A74-457D-8F3C-1EF274533BC3}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNOnSerializedAttribute;

  end;

  /// <summary>
  ///   当应用于方法时，指定在序列化对象关系图中的对象之后调用该方法。
  ///               相对于关系图中的其他对象，序列化的顺序是不确定的。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.OnSerializedAttribute')]
  DNOnSerializedAttribute = interface(DNAttribute)
  ['{6F8527BF-5AAD-3236-B639-A05177332EFE}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnSerializedAttribute = class(TDNGenericImport<DNOnSerializedAttributeClass, DNOnSerializedAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnSerializingAttributeClass = interface(DNAttributeClass)
  ['{3ED4BC49-2F75-4D10-8093-2A8AECE47941}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNOnSerializingAttribute;

  end;

  /// <summary>
  ///   当应用于方法时，指定在序列化对象关系图中的对象期间调用该方法。
  ///               相对于关系图中的其他对象，序列化的顺序是不确定的。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.OnSerializingAttribute')]
  DNOnSerializingAttribute = interface(DNAttribute)
  ['{9BF86F6E-B0E1-348B-9627-6970672EB3D3}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnSerializingAttribute = class(TDNGenericImport<DNOnSerializingAttributeClass, DNOnSerializingAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOptionalFieldAttributeClass = interface(DNAttributeClass)
  ['{E78E4AC8-0642-4F64-BC2C-BF07DE78C92E}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNOptionalFieldAttribute;

  end;

  /// <summary>
  ///   指定的字段可能会缺少从序列化流因此的  和  并不会引发异常。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.OptionalFieldAttribute')]
  DNOptionalFieldAttribute = interface(DNAttribute)
  ['{1C97EF1D-74ED-3D21-84A4-8631D959634A}']
  { getter & setter } 

    function get_VersionAdded: Int32;
    procedure set_VersionAdded(value: Int32);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   此属性是未使用，并且被保留。
    /// </summary>
    property VersionAdded: Int32 read get_VersionAdded write set_VersionAdded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNOptionalFieldAttribute = class(TDNGenericImport<DNOptionalFieldAttributeClass, DNOptionalFieldAttribute>) end;

  //-------------namespace: System.Runtime----------------
  DNTargetedPatchingOptOutAttributeClass = interface(DNAttributeClass)
  ['{07B4DA82-D102-47C5-8309-32BEE0B5D997}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(reason: string): DNTargetedPatchingOptOutAttribute;

  end;

  /// <summary>
  ///   指示此特性应用的.NET Framework 类库方法不太可能受到影响的服务版本，也就可以在本机映像生成器 (NGen) 映像被内联。
  /// </summary>
  [DNTypeName('System.Runtime.TargetedPatchingOptOutAttribute')]
  DNTargetedPatchingOptOutAttribute = interface(DNAttribute)
  ['{DC4155B4-7129-360E-BB3C-6F7C82EFD76A}']
  { getter & setter } 

    function get_Reason: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此特性应用于该方法被认为适合的原因在本机映像生成器 (NGen) 映像间内联。
    /// </summary>
    property Reason: string read get_Reason;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTargetedPatchingOptOutAttribute = class(TDNGenericImport<DNTargetedPatchingOptOutAttributeClass, DNTargetedPatchingOptOutAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNComponentGuaranteesAttributeClass = interface(DNAttributeClass)
  ['{17F4B0A7-66EB-4B0A-8273-73713994F895}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有一个值，指示库、 类型或成员的保证跨多个版本的兼容性级别。
    /// </summary>
    {class} function init(guarantees: DNComponentGuaranteesOptions): DNComponentGuaranteesAttribute;

  end;

  /// <summary>
  ///   定义组件、 类型或类型成员，可以跨多个版本的兼容性保证。
  /// </summary>
  [DNTypeName('System.Runtime.Versioning.ComponentGuaranteesAttribute')]
  DNComponentGuaranteesAttribute = interface(DNAttribute)
  ['{BBAC3B54-23ED-30E0-89EE-2989C21D7980}']
  { getter & setter } 

    function get_Guarantees: DNComponentGuaranteesOptions;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示的有保证的库、 类型或类型成员跨越多个版本的兼容级别。
    /// </summary>
    property Guarantees: DNComponentGuaranteesOptions read get_Guarantees;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComponentGuaranteesAttribute = class(TDNGenericImport<DNComponentGuaranteesAttributeClass, DNComponentGuaranteesAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNResourceConsumptionAttributeClass = interface(DNAttributeClass)
  ['{977A326A-4D50-4BFB-B36D-3DD963E78BDF}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类指定所用资源的作用域。
    /// </summary>
    {class} function init(resourceScope: DNResourceScope): DNResourceConsumptionAttribute; overload;
    /// <summary>
    ///   新实例初始化  类指定所用资源的作用域和使用方式的作用域。
    /// </summary>
    {class} function init(resourceScope: DNResourceScope; consumptionScope: DNResourceScope): DNResourceConsumptionAttribute; overload;

  end;

  /// <summary>
  ///   指定由类的成员使用的资源。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Versioning.ResourceConsumptionAttribute')]
  DNResourceConsumptionAttribute = interface(DNAttribute)
  ['{B9E15D27-6CAE-36E9-AF36-D81A899F8012}']
  { getter & setter } 

    function get_ResourceScope: DNResourceScope;
    function get_ConsumptionScope: DNResourceScope;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取所用资源的资源范围。
    /// </summary>
    property ResourceScope: DNResourceScope read get_ResourceScope;
    /// <summary>
    ///   获取此成员的消耗作用域。
    /// </summary>
    property ConsumptionScope: DNResourceScope read get_ConsumptionScope;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNResourceConsumptionAttribute = class(TDNGenericImport<DNResourceConsumptionAttributeClass, DNResourceConsumptionAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNResourceExposureAttributeClass = interface(DNAttributeClass)
  ['{E2572FB2-EDC4-4A28-9C0B-C0BA928A0663}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有指定的暴露程度。
    /// </summary>
    {class} function init(exposureLevel: DNResourceScope): DNResourceExposureAttribute;

  end;

  /// <summary>
  ///   指定类的成员的资源公开范围。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Versioning.ResourceExposureAttribute')]
  DNResourceExposureAttribute = interface(DNAttribute)
  ['{38837DE5-21E4-3447-8C83-06ED84086771}']
  { getter & setter } 

    function get_ResourceExposureLevel: DNResourceScope;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取资源公开范围。
    /// </summary>
    property ResourceExposureLevel: DNResourceScope read get_ResourceExposureLevel;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNResourceExposureAttribute = class(TDNGenericImport<DNResourceExposureAttributeClass, DNResourceExposureAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNTargetFrameworkAttributeClass = interface(DNAttributeClass)
  ['{1BC6E263-2EE9-429F-91A2-1EBDFD21B0ED}']
  { constructors } 

    /// <summary>
    ///   初始化的实例  类通过指定针对其生成的程序集的.NET Framework 版本。
    /// </summary>
    {class} function init(frameworkName: string): DNTargetFrameworkAttribute;

  end;

  /// <summary>
  ///   标识编译特定程序集时所针对的 .NET Framework 的版本。
  /// </summary>
  [DNTypeName('System.Runtime.Versioning.TargetFrameworkAttribute')]
  DNTargetFrameworkAttribute = interface(DNAttribute)
  ['{01EF747D-D202-3A2A-A336-669DD4A97B2C}']
  { getter & setter } 

    function get_FrameworkName: string;
    function get_FrameworkDisplayName: string;
    procedure set_FrameworkDisplayName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取编译特定程序集所依据的.NET Framework 版本的名称。
    /// </summary>
    property FrameworkName: string read get_FrameworkName;
    /// <summary>
    ///   获取针对其生成的程序集的.NET Framework 版本的显示名称。
    /// </summary>
    property FrameworkDisplayName: string read get_FrameworkDisplayName write set_FrameworkDisplayName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTargetFrameworkAttribute = class(TDNGenericImport<DNTargetFrameworkAttributeClass, DNTargetFrameworkAttribute>) end;

  //-------------namespace: System.Security----------------
  DNAllowPartiallyTrustedCallersAttributeClass = interface(DNAttributeClass)
  ['{A8C1D94E-FE12-4CC6-90E3-239F17D4A33D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNAllowPartiallyTrustedCallersAttribute;

  end;

  /// <summary>
  ///   允许由部分信任的代码调用程序集。
  ///               如果没有此声明，则只有完全信任的调用方才可以使用此程序集。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AllowPartiallyTrustedCallersAttribute')]
  DNAllowPartiallyTrustedCallersAttribute = interface(DNAttribute)
  ['{5610F042-FF1D-36D0-996C-68F7A207D1F0}']
  { getter & setter } 

    function get_PartialTrustVisibilityLevel: DNPartialTrustVisibilityLevel;
    procedure set_PartialTrustVisibilityLevel(value: DNPartialTrustVisibilityLevel);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置默认部分信任代码的可见性，标记有  (APTCA) 特性。
    /// </summary>
    property PartialTrustVisibilityLevel: DNPartialTrustVisibilityLevel read get_PartialTrustVisibilityLevel write set_PartialTrustVisibilityLevel;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAllowPartiallyTrustedCallersAttribute = class(TDNGenericImport<DNAllowPartiallyTrustedCallersAttributeClass, DNAllowPartiallyTrustedCallersAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityAttributeClass = interface(DNAttributeClass)
  ['{77B15A5C-ED8E-42C1-9B02-3F2E050D515F}']
  end;

  /// <summary>
  ///   指定从其声明性安全的基属性类  派生。
  /// </summary>
  [DNTypeName('System.Security.Permissions.SecurityAttribute')]
  DNSecurityAttribute = interface(DNAttribute)
  ['{47DCD758-DF63-3226-A3A9-B0B88872A311}']
  { getter & setter } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   当在派生类中重写时，创建一个权限对象，随后可将其序列化为二进制形式并连同  长久存储在程序集的元数据中。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置安全性操作。
    /// </summary>
    property Action: DNSecurityAction read get_Action write set_Action;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明对受该属性的资源的完整 （无限制） 权限。
    /// </summary>
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityAttribute = class(TDNGenericImport<DNSecurityAttributeClass, DNSecurityAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNCodeAccessSecurityAttributeClass = interface(DNSecurityAttributeClass)
  ['{3D66291B-DC48-45BA-ADD6-61E208BB581C}']
  end;

  /// <summary>
  ///   指定代码访问安全性的基属性类。
  /// </summary>
  [DNTypeName('System.Security.Permissions.CodeAccessSecurityAttribute')]
  DNCodeAccessSecurityAttribute = interface(DNSecurityAttribute)
  ['{21858390-FE95-33A9-A103-F322C64D85AE}']
  { getter & setter } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCodeAccessSecurityAttribute = class(TDNGenericImport<DNCodeAccessSecurityAttributeClass, DNCodeAccessSecurityAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNEnvironmentPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{35BE92B5-066A-4B53-A427-10B3558E7FE0}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNEnvironmentPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.EnvironmentPermissionAttribute')]
  DNEnvironmentPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{6161DF0C-CD78-33E1-B3E1-978B27025E40}']
  { getter & setter } 

    function get_Read: string;
    procedure set_Read(value: string);
    function get_Write: string;
    procedure set_Write(value: string);
    function get_All: string;
    procedure set_All(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置环境变量指定的字符串值的读访问权限。
    /// </summary>
    property Read: string read get_Read write set_Read;
    /// <summary>
    ///   获取或设置环境变量指定的字符串值的写访问权限。
    /// </summary>
    property Write: string read get_Write write set_Write;
    /// <summary>
    ///   设置完全指定的字符串值的环境变量的访问权限。
    /// </summary>
    property All: string read get_All write set_All;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEnvironmentPermissionAttribute = class(TDNGenericImport<DNEnvironmentPermissionAttributeClass, DNEnvironmentPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNFileDialogPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{F2E960AD-ADBE-48B3-9C09-29F512CAEB5F}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNFileDialogPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.FileDialogPermissionAttribute')]
  DNFileDialogPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{A141F926-E6B5-3903-8EFA-1014D4970F1C}']
  { getter & setter } 

    function get_Open: Boolean;
    procedure set_Open(value: Boolean);
    function get_Save: Boolean;
    procedure set_Save(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置一个值，该值指示是否声明权限通过文件对话框打开文件。
    /// </summary>
    property Open: Boolean read get_Open write set_Open;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明权限通过文件对话框中保存文件。
    /// </summary>
    property Save: Boolean read get_Save write set_Save;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFileDialogPermissionAttribute = class(TDNGenericImport<DNFileDialogPermissionAttributeClass, DNFileDialogPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNFileIOPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{E1FB9D07-CD4F-46B8-86CF-A6C76331821E}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNFileIOPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.FileIOPermissionAttribute')]
  DNFileIOPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{DE440C06-7EC3-3E59-83C8-3829090198F7}']
  { getter & setter } 

    function get_Read: string;
    procedure set_Read(value: string);
    function get_Write: string;
    procedure set_Write(value: string);
    function get_Append: string;
    procedure set_Append(value: string);
    function get_PathDiscovery: string;
    procedure set_PathDiscovery(value: string);
    function get_ViewAccessControl: string;
    procedure set_ViewAccessControl(value: string);
    function get_ChangeAccessControl: string;
    procedure set_ChangeAccessControl(value: string);
    function get_All: string;
    procedure set_All(value: string);
    function get_ViewAndModify: string;
    procedure set_ViewAndModify(value: string);
    function get_AllFiles: DNFileIOPermissionAccess;
    procedure set_AllFiles(value: DNFileIOPermissionAccess);
    function get_AllLocalFiles: DNFileIOPermissionAccess;
    procedure set_AllLocalFiles(value: DNFileIOPermissionAccess);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置文件或字符串值所指定的目录的读访问权限。
    /// </summary>
    property Read: string read get_Read write set_Read;
    /// <summary>
    ///   获取或设置文件或字符串值所指定的目录的写访问权限。
    /// </summary>
    property Write: string read get_Write write set_Write;
    /// <summary>
    ///   获取或设置追加的文件或字符串值所指定的目录的访问权限。
    /// </summary>
    property Append: string read get_Append write set_Append;
    /// <summary>
    ///   获取或设置要为其授予路径发现的目录的文件。
    /// </summary>
    property PathDiscovery: string read get_PathDiscovery write set_PathDiscovery;
    /// <summary>
    ///   获取或设置的文件或目录可以在其中查看访问控制信息。
    /// </summary>
    property ViewAccessControl: string read get_ViewAccessControl write set_ViewAccessControl;
    /// <summary>
    ///   获取或设置的文件或目录可以在其中更改访问控制信息。
    /// </summary>
    property ChangeAccessControl: string read get_ChangeAccessControl write set_ChangeAccessControl;
    /// <summary>
    ///   获取或设置的文件或字符串值所指定的目录的完全访问权限。
    /// </summary>
    property All: string read get_All write set_All;
    /// <summary>
    ///   获取或设置文件或目录的文件中的数据都可以查看和修改。
    /// </summary>
    property ViewAndModify: string read get_ViewAndModify write set_ViewAndModify;
    /// <summary>
    ///   获取或设置对所有文件的允许访问权限。
    /// </summary>
    property AllFiles: DNFileIOPermissionAccess read get_AllFiles write set_AllFiles;
    /// <summary>
    ///   获取或设置对所有本地文件的允许访问权限。
    /// </summary>
    property AllLocalFiles: DNFileIOPermissionAccess read get_AllLocalFiles write set_AllLocalFiles;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFileIOPermissionAttribute = class(TDNGenericImport<DNFileIOPermissionAttributeClass, DNFileIOPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNGacIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{44D785E8-7BDF-47C9-AC78-FE9FF9005475}']
  { constructors } 

    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNGacIdentityPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.GacIdentityPermissionAttribute')]
  DNGacIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{52F1A8F3-7C7C-3C08-848B-8AB0EA946959}']
  { getter & setter } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建一个新的  对象。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNGacIdentityPermissionAttribute = class(TDNGenericImport<DNGacIdentityPermissionAttributeClass, DNGacIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNHostProtectionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{42C38041-5D2F-487B-B3D7-2A5944BAD9F9}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNHostProtectionAttribute; overload;
    /// <summary>
    ///   使用指定的  值初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNHostProtectionAttribute; overload;

  end;

  /// <summary>
  ///   允许使用声明性安全操作来确定宿主保护要求。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.HostProtectionAttribute')]
  DNHostProtectionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{AD664904-FE8A-3217-BBF5-E6AB1D998F5F}']
  { getter & setter } 

    function get_Resources: DNHostProtectionResource;
    procedure set_Resources(value: DNHostProtectionResource);
    function get_Synchronization: Boolean;
    procedure set_Synchronization(value: Boolean);
    function get_SharedState: Boolean;
    procedure set_SharedState(value: Boolean);
    function get_ExternalProcessMgmt: Boolean;
    procedure set_ExternalProcessMgmt(value: Boolean);
    function get_SelfAffectingProcessMgmt: Boolean;
    procedure set_SelfAffectingProcessMgmt(value: Boolean);
    function get_ExternalThreading: Boolean;
    procedure set_ExternalThreading(value: Boolean);
    function get_SelfAffectingThreading: Boolean;
    procedure set_SelfAffectingThreading(value: Boolean);
    function get_SecurityInfrastructure: Boolean;
    procedure set_SecurityInfrastructure(value: Boolean);
    function get_UI: Boolean;
    procedure set_UI(value: Boolean);
    function get_MayLeakOnAbort: Boolean;
    procedure set_MayLeakOnAbort(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的宿主保护权限。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置标志，这些标志指定可能对宿主有害的功能类别。
    /// </summary>
    property Resources: DNHostProtectionResource read get_Resources write set_Resources;
    /// <summary>
    ///   获取或设置一个值，该值指示是否公开同步。
    /// </summary>
    property Synchronization: Boolean read get_Synchronization write set_Synchronization;
    /// <summary>
    ///   获取或设置一个值，该值指示是否公开共享状态。
    /// </summary>
    property SharedState: Boolean read get_SharedState write set_SharedState;
    /// <summary>
    ///   获取或设置一个值，该值指示是否公开外部进程管理。
    /// </summary>
    property ExternalProcessMgmt: Boolean read get_ExternalProcessMgmt write set_ExternalProcessMgmt;
    /// <summary>
    ///   获取或设置一个值，该值指示是否公开自影响的进程管理。
    /// </summary>
    property SelfAffectingProcessMgmt: Boolean read get_SelfAffectingProcessMgmt write set_SelfAffectingProcessMgmt;
    /// <summary>
    ///   获取或设置一个值，该值指示是否公开外部线程处理。
    /// </summary>
    property ExternalThreading: Boolean read get_ExternalThreading write set_ExternalThreading;
    /// <summary>
    ///   获取或设置一个值，该值指示是否公开自影响的线程处理。
    /// </summary>
    property SelfAffectingThreading: Boolean read get_SelfAffectingThreading write set_SelfAffectingThreading;
    /// <summary>
    ///   获取或设置一个值，该值指示是否公开安全基础结构。
    /// </summary>
    property SecurityInfrastructure: Boolean read get_SecurityInfrastructure write set_SecurityInfrastructure;
    /// <summary>
    ///   获取或设置一个值，该值指示是否公开用户界面。
    /// </summary>
    property UI: Boolean read get_UI write set_UI;
    /// <summary>
    ///   获取或设置一个值，该值指示当操作被终止时资源是否可能泄漏内存。
    /// </summary>
    property MayLeakOnAbort: Boolean read get_MayLeakOnAbort write set_MayLeakOnAbort;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNHostProtectionAttribute = class(TDNGenericImport<DNHostProtectionAttributeClass, DNHostProtectionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNIsolatedStoragePermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{70593ABF-0B44-488D-80CA-244F33B80763}']
  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  /// </summary>
  [DNTypeName('System.Security.Permissions.IsolatedStoragePermissionAttribute')]
  DNIsolatedStoragePermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{A56859A3-98ED-39A9-BD33-5807F0D6291F}']
  { getter & setter } 

    function get_UserQuota: Int64;
    procedure set_UserQuota(value: Int64);
    function get_UsageAllowed: DNIsolatedStorageContainment;
    procedure set_UsageAllowed(value: DNIsolatedStorageContainment);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置最大用户存储配额大小。
    /// </summary>
    property UserQuota: Int64 read get_UserQuota write set_UserQuota;
    /// <summary>
    ///   获取或设置应声明的独立存储的级别。
    /// </summary>
    property UsageAllowed: DNIsolatedStorageContainment read get_UsageAllowed write set_UsageAllowed;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsolatedStoragePermissionAttribute = class(TDNGenericImport<DNIsolatedStoragePermissionAttributeClass, DNIsolatedStoragePermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNIsolatedStorageFilePermissionAttributeClass = interface(DNIsolatedStoragePermissionAttributeClass)
  ['{C881A919-48AC-4F7E-B224-9B56F765C754}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNIsolatedStorageFilePermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.IsolatedStorageFilePermissionAttribute')]
  DNIsolatedStorageFilePermissionAttribute = interface(DNIsolatedStoragePermissionAttribute)
  ['{F6610DF3-8D62-38BD-BF6B-2A4BA839EB3B}']
  { getter & setter } 

    function get_UserQuota: Int64;
    procedure set_UserQuota(value: Int64);
    function get_UsageAllowed: DNIsolatedStorageContainment;
    procedure set_UsageAllowed(value: DNIsolatedStorageContainment);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property UserQuota: Int64 read get_UserQuota write set_UserQuota;
    property UsageAllowed: DNIsolatedStorageContainment read get_UsageAllowed write set_UsageAllowed;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsolatedStorageFilePermissionAttribute = class(TDNGenericImport<DNIsolatedStorageFilePermissionAttributeClass, DNIsolatedStorageFilePermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNKeyContainerPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{6E318FA4-552F-427B-A5A6-0914CC2C5B94}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有指定的安全操作。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNKeyContainerPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.KeyContainerPermissionAttribute')]
  DNKeyContainerPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{F40FFBD5-4CA8-333E-8706-29F13FB8D4D6}']
  { getter & setter } 

    function get_KeyStore: string;
    procedure set_KeyStore(value: string);
    function get_ProviderName: string;
    procedure set_ProviderName(value: string);
    function get_ProviderType: Int32;
    procedure set_ProviderType(value: Int32);
    function get_KeyContainerName: string;
    procedure set_KeyContainerName(value: string);
    function get_KeySpec: Int32;
    procedure set_KeySpec(value: Int32);
    function get_Flags: DNKeyContainerPermissionFlags;
    procedure set_Flags(value: DNKeyContainerPermissionFlags);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置密钥存储区的名称。
    /// </summary>
    property KeyStore: string read get_KeyStore write set_KeyStore;
    /// <summary>
    ///   获取或设置提供程序名称。
    /// </summary>
    property ProviderName: string read get_ProviderName write set_ProviderName;
    /// <summary>
    ///   获取或设置提供程序类型。
    /// </summary>
    property ProviderType: Int32 read get_ProviderType write set_ProviderType;
    /// <summary>
    ///   获取或设置密钥容器的名称。
    /// </summary>
    property KeyContainerName: string read get_KeyContainerName write set_KeyContainerName;
    /// <summary>
    ///   获取或设置密钥规范。
    /// </summary>
    property KeySpec: Int32 read get_KeySpec write set_KeySpec;
    /// <summary>
    ///   获取或设置密钥容器的权限。
    /// </summary>
    property Flags: DNKeyContainerPermissionFlags read get_Flags write set_Flags;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNKeyContainerPermissionAttribute = class(TDNGenericImport<DNKeyContainerPermissionAttributeClass, DNKeyContainerPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNPermissionSetAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{9C075C3B-74A0-4FE0-86F1-6F4907DFAAAB}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有指定的安全操作。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNPermissionSetAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.PermissionSetAttribute')]
  DNPermissionSetAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{24151BA6-6D79-3EC4-8C77-014FFBE735AE}']
  { getter & setter } 

    function get_File: string;
    procedure set_File(value: string);
    function get_UnicodeEncoded: Boolean;
    procedure set_UnicodeEncoded(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_XML: string;
    procedure set_XML(value: string);
    function get_Hex: string;
    procedure set_Hex(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   不使用此方法。
    /// </summary>
    function CreatePermission: DNIPermission;
    /// <summary>
    ///   创建并返回一个新的权限集，基于此权限集属性对象。
    /// </summary>
    function CreatePermissionSet: DNPermissionSet;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置包含的 XML 表示形式的自定义权限集进行声明的文件。
    /// </summary>
    property &File: string read get_File write set_File;
    /// <summary>
    ///   获取或设置一个值，该值指定的文件  是 Unicode 或 ASCII 编码。
    /// </summary>
    property UnicodeEncoded: Boolean read get_UnicodeEncoded write set_UnicodeEncoded;
    /// <summary>
    ///   获取或设置的权限集的名称。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置的 XML 表示形式的权限集。
    /// </summary>
    property XML: string read get_XML write set_XML;
    /// <summary>
    ///   获取或设置 XML 编码的权限集的十六进制表示形式。
    /// </summary>
    property Hex: string read get_Hex write set_Hex;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNPermissionSetAttribute = class(TDNGenericImport<DNPermissionSetAttributeClass, DNPermissionSetAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNPrincipalPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{997EC934-BF66-4546-A67F-984141A6B5C5}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNPrincipalPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.PrincipalPermissionAttribute')]
  DNPrincipalPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{6D0AE73B-ED58-32E2-973C-765897783971}']
  { getter & setter } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Role: string;
    procedure set_Role(value: string);
    function get_Authenticated: Boolean;
    procedure set_Authenticated(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置与当前主体相关联的标识名称。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置中指定的安全角色的成员身份。
    /// </summary>
    property Role: string read get_Role write set_Role;
    /// <summary>
    ///   获取或设置一个值，该值指示是否当前的主体进行了身份验证的基础的基于角色的安全提供程序。
    /// </summary>
    property Authenticated: Boolean read get_Authenticated write set_Authenticated;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNPrincipalPermissionAttribute = class(TDNGenericImport<DNPrincipalPermissionAttributeClass, DNPrincipalPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNPublisherIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{7FDCDAC4-6FBD-4ECA-9272-50E496482209}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNPublisherIdentityPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.PublisherIdentityPermissionAttribute')]
  DNPublisherIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{2335C1DA-CD60-3208-AB5E-447F16A087E5}']
  { getter & setter } 

    function get_X509Certificate: string;
    procedure set_X509Certificate(value: string);
    function get_CertFile: string;
    procedure set_CertFile(value: string);
    function get_SignedFile: string;
    procedure set_SignedFile(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回的新实例 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置标识的发布服务器调用代码的验证码 X.509v3 证书。
    /// </summary>
    property X509Certificate: string read get_X509Certificate write set_X509Certificate;
    /// <summary>
    ///   获取或设置包含验证码 X.509v3 证书的证书文件。
    /// </summary>
    property CertFile: string read get_CertFile write set_CertFile;
    /// <summary>
    ///   获取或设置要从中提取 Authenticode X.509v3 证书签名的文件。
    /// </summary>
    property SignedFile: string read get_SignedFile write set_SignedFile;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNPublisherIdentityPermissionAttribute = class(TDNGenericImport<DNPublisherIdentityPermissionAttributeClass, DNPublisherIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNReflectionPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{F184C9D0-6ACB-4ECF-B5F2-FB6B6CEACF39}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNReflectionPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  /// </summary>
  [DNTypeName('System.Security.Permissions.ReflectionPermissionAttribute')]
  DNReflectionPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{64578750-937F-3B27-B631-C57E0BFFF97F}']
  { getter & setter } 

    function get_Flags: DNReflectionPermissionFlag;
    procedure set_Flags(value: DNReflectionPermissionFlag);
    function get_TypeInformation: Boolean;
    procedure set_TypeInformation(value: Boolean);
    function get_MemberAccess: Boolean;
    procedure set_MemberAccess(value: Boolean);
    function get_ReflectionEmit: Boolean;
    procedure set_ReflectionEmit(value: Boolean);
    function get_RestrictedMemberAccess: Boolean;
    procedure set_RestrictedMemberAccess(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置当前允许反射的用法。
    /// </summary>
    property Flags: DNReflectionPermissionFlag read get_Flags write set_Flags;
    /// <summary>
    ///   获取或设置一个值，该值指示是否允许在不可见的成员上的反射。
    /// </summary>
    property TypeInformation: Boolean read get_TypeInformation write set_TypeInformation;
    /// <summary>
    ///   获取或设置一个值，该值指示是否允许在非公共成员上的调用操作。
    /// </summary>
    property MemberAccess: Boolean read get_MemberAccess write set_MemberAccess;
    /// <summary>
    ///   获取或设置一个值，该值指示是否使用某些功能 , ，例如允许发出调试符号。
    /// </summary>
    property ReflectionEmit: Boolean read get_ReflectionEmit write set_ReflectionEmit;
    /// <summary>
    ///   获取或设置一个值，该值指示是否允许受限制的非公共成员的调用。
    ///               受限制的调用意味着包含正在调用的非公共成员的程序集的授予集必须相同，或者与调用程序集的授予集的子集。
    /// </summary>
    property RestrictedMemberAccess: Boolean read get_RestrictedMemberAccess write set_RestrictedMemberAccess;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReflectionPermissionAttribute = class(TDNGenericImport<DNReflectionPermissionAttributeClass, DNReflectionPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNRegistryPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{38F087AA-85BA-41DA-BCB5-A2299CAAB87C}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNRegistryPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.RegistryPermissionAttribute')]
  DNRegistryPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{F69CF20D-F85B-3436-9E0E-DD3CB3E8B2CD}']
  { getter & setter } 

    function get_Read: string;
    procedure set_Read(value: string);
    function get_Write: string;
    procedure set_Write(value: string);
    function get_Create: string;
    procedure set_Create(value: string);
    function get_ViewAccessControl: string;
    procedure set_ViewAccessControl(value: string);
    function get_ChangeAccessControl: string;
    procedure set_ChangeAccessControl(value: string);
    function get_ViewAndModify: string;
    procedure set_ViewAndModify(value: string);
    function get_All: string;
    procedure set_All(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置指定的注册表项的读取访问权限。
    /// </summary>
    property Read: string read get_Read write set_Read;
    /// <summary>
    ///   获取或设置指定的注册表项的写访问权限。
    /// </summary>
    property Write: string read get_Write write set_Write;
    /// <summary>
    ///   获取或设置指定的注册表项的创建级别访问权限。
    /// </summary>
    property Create: string read get_Create write set_Create;
    /// <summary>
    ///   获取或设置视图的指定的注册表项的访问控制。
    /// </summary>
    property ViewAccessControl: string read get_ViewAccessControl write set_ViewAccessControl;
    /// <summary>
    ///   获取或设置指定的注册表项的更改访问控制。
    /// </summary>
    property ChangeAccessControl: string read get_ChangeAccessControl write set_ChangeAccessControl;
    /// <summary>
    ///   获取或设置一组指定的注册表项，可以查看和修改。
    /// </summary>
    property ViewAndModify: string read get_ViewAndModify write set_ViewAndModify;
    /// <summary>
    ///   获取或设置指定的注册表项的完全访问权限。
    /// </summary>
    property All: string read get_All write set_All;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNRegistryPermissionAttribute = class(TDNGenericImport<DNRegistryPermissionAttributeClass, DNRegistryPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{E74A4F7B-5A7E-4520-A212-FEA89333A0C8}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNSecurityPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.SecurityPermissionAttribute')]
  DNSecurityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{5E77314C-043D-3D8C-9C9D-D18F09FB3500}']
  { getter & setter } 

    function get_Flags: DNSecurityPermissionFlag;
    procedure set_Flags(value: DNSecurityPermissionFlag);
    function get_Assertion: Boolean;
    procedure set_Assertion(value: Boolean);
    function get_UnmanagedCode: Boolean;
    procedure set_UnmanagedCode(value: Boolean);
    function get_SkipVerification: Boolean;
    procedure set_SkipVerification(value: Boolean);
    function get_Execution: Boolean;
    procedure set_Execution(value: Boolean);
    function get_ControlThread: Boolean;
    procedure set_ControlThread(value: Boolean);
    function get_ControlEvidence: Boolean;
    procedure set_ControlEvidence(value: Boolean);
    function get_ControlPolicy: Boolean;
    procedure set_ControlPolicy(value: Boolean);
    function get_SerializationFormatter: Boolean;
    procedure set_SerializationFormatter(value: Boolean);
    function get_ControlDomainPolicy: Boolean;
    procedure set_ControlDomainPolicy(value: Boolean);
    function get_ControlPrincipal: Boolean;
    procedure set_ControlPrincipal(value: Boolean);
    function get_ControlAppDomain: Boolean;
    procedure set_ControlAppDomain(value: Boolean);
    function get_RemotingConfiguration: Boolean;
    procedure set_RemotingConfiguration(value: Boolean);
    function get_Infrastructure: Boolean;
    procedure set_Infrastructure(value: Boolean);
    function get_BindingRedirects: Boolean;
    procedure set_BindingRedirects(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置构成  权限的所有权限标志。
    /// </summary>
    property Flags: DNSecurityPermissionFlag read get_Flags write set_Flags;
    /// <summary>
    ///   获取或设置一个值，该值指示是否已声明以下要断言的权限：所有此代码的调用方具有此操作的所需权限。
    /// </summary>
    property Assertion: Boolean read get_Assertion write set_Assertion;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明调用非托管代码的权限。
    /// </summary>
    property UnmanagedCode: Boolean read get_UnmanagedCode write set_UnmanagedCode;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明跳过代码验证的权限。
    /// </summary>
    property SkipVerification: Boolean read get_SkipVerification write set_SkipVerification;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明了执行代码的权限。
    /// </summary>
    property Execution: Boolean read get_Execution write set_Execution;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明了操作线程的权限。
    /// </summary>
    property ControlThread: Boolean read get_ControlThread write set_ControlThread;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明了改变或操作证据的权限。
    /// </summary>
    property ControlEvidence: Boolean read get_ControlEvidence write set_ControlEvidence;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明了查看和操作安全策略的权限。
    /// </summary>
    property ControlPolicy: Boolean read get_ControlPolicy write set_ControlPolicy;
    /// <summary>
    ///   获取或设置一个值，该值指示代码是否可以使用序列化格式化程序来序列化或反序列化对象。
    /// </summary>
    property SerializationFormatter: Boolean read get_SerializationFormatter write set_SerializationFormatter;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明改变或操作域安全策略的权限。
    /// </summary>
    property ControlDomainPolicy: Boolean read get_ControlDomainPolicy write set_ControlDomainPolicy;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明了操作当前主体的权限。
    /// </summary>
    property ControlPrincipal: Boolean read get_ControlPrincipal write set_ControlPrincipal;
    /// <summary>
    ///   获取或设置一个值，该值指示是否声明了操作  的权限。
    /// </summary>
    property ControlAppDomain: Boolean read get_ControlAppDomain write set_ControlAppDomain;
    /// <summary>
    ///   获取或设置一个值，该值指示代码是否可以配置远程处理类型和信道。
    /// </summary>
    property RemotingConfiguration: Boolean read get_RemotingConfiguration write set_RemotingConfiguration;
    /// <summary>
    ///   获取或设置一个值，该值指示代码是否可以插入公共语言运行时基础结构中，例如添加远程上下文接收器、特使接收器和动态接收器。
    /// </summary>
    property Infrastructure: Boolean read get_Infrastructure write set_Infrastructure;
    /// <summary>
    ///   获取或设置一个值，该值表示代码是否具有在应用程序配置文件中执行绑定重定向的权限。
    /// </summary>
    property BindingRedirects: Boolean read get_BindingRedirects write set_BindingRedirects;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityPermissionAttribute = class(TDNGenericImport<DNSecurityPermissionAttributeClass, DNSecurityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSiteIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{98C720DC-474E-410B-B2D0-0576B4CDB20B}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNSiteIdentityPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.SiteIdentityPermissionAttribute')]
  DNSiteIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{23F73179-6349-3183-A55C-BCFB1A2446E8}']
  { getter & setter } 

    function get_Site: string;
    procedure set_Site(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回的新实例 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置调用代码的站点名称。
    /// </summary>
    property Site: string read get_Site write set_Site;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSiteIdentityPermissionAttribute = class(TDNGenericImport<DNSiteIdentityPermissionAttributeClass, DNSiteIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNStrongNameIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{6D4F8B20-24EF-4DD6-A185-4FA94058E3C4}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNStrongNameIdentityPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.StrongNameIdentityPermissionAttribute')]
  DNStrongNameIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{EF2C9DE4-BCDA-3322-AE75-16CC3EC2665C}']
  { getter & setter } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_PublicKey: string;
    procedure set_PublicKey(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置强名称标识的名称。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置强名称标识的版本。
    /// </summary>
    property Version: string read get_Version write set_Version;
    /// <summary>
    ///   获取或设置表示为十六进制字符串的强名称标识的公钥值。
    /// </summary>
    property PublicKey: string read get_PublicKey write set_PublicKey;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNStrongNameIdentityPermissionAttribute = class(TDNGenericImport<DNStrongNameIdentityPermissionAttributeClass, DNStrongNameIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNUIPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{A2219880-73D5-41F7-ABCD-084B8BF9D725}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNUIPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.UIPermissionAttribute')]
  DNUIPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{5F4ED054-C453-3D2B-A0FE-64E89871D364}']
  { getter & setter } 

    function get_Window: DNUIPermissionWindow;
    procedure set_Window(value: DNUIPermissionWindow);
    function get_Clipboard: DNUIPermissionClipboard;
    procedure set_Clipboard(value: DNUIPermissionClipboard);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置与允许的窗口资源的访问类型。
    /// </summary>
    property Window: DNUIPermissionWindow read get_Window write set_Window;
    /// <summary>
    ///   获取或设置到允许剪贴板访问的类型。
    /// </summary>
    property Clipboard: DNUIPermissionClipboard read get_Clipboard write set_Clipboard;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUIPermissionAttribute = class(TDNGenericImport<DNUIPermissionAttributeClass, DNUIPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNUrlIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{0E743BEB-042D-4DE9-B22B-64A070E8AE03}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNUrlIdentityPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.UrlIdentityPermissionAttribute')]
  DNUrlIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{6852BE7D-8C00-3F66-BEE3-463F74838491}']
  { getter & setter } 

    function get_Url: string;
    procedure set_Url(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置调用代码的完整 URL。
    /// </summary>
    property Url: string read get_Url write set_Url;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUrlIdentityPermissionAttribute = class(TDNGenericImport<DNUrlIdentityPermissionAttributeClass, DNUrlIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNZoneIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{A1F42DC3-7901-490A-B665-EF559F170D7F}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(action: DNSecurityAction): DNZoneIdentityPermissionAttribute;

  end;

  /// <summary>
  ///   允许的操作安全  要应用于代码中使用声明性安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.ZoneIdentityPermissionAttribute')]
  DNZoneIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{C386115F-2B99-356B-B4A1-2CF57CE52988}']
  { getter & setter } 

    function get_Zone: DNSecurityZone;
    procedure set_Zone(value: DNSecurityZone);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    /// <summary>
    ///   创建并返回一个新的 。
    /// </summary>
    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置属性值所指定的内容区域中的成员身份。
    /// </summary>
    property Zone: DNSecurityZone read get_Zone write set_Zone;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNZoneIdentityPermissionAttribute = class(TDNGenericImport<DNZoneIdentityPermissionAttributeClass, DNZoneIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityCriticalAttributeClass = interface(DNAttributeClass)
  ['{D0A75A82-6BC5-42EB-B1D1-A083ED46C07D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSecurityCriticalAttribute; overload;
    /// <summary>
    ///   新实例初始化  类具有指定的作用域。
    /// </summary>
    {class} function init(scope: DNSecurityCriticalScope): DNSecurityCriticalAttribute; overload;

  end;

  /// <summary>
  ///   指定代码或程序集执行安全关键操作。
  /// </summary>
  [DNTypeName('System.Security.SecurityCriticalAttribute')]
  DNSecurityCriticalAttribute = interface(DNAttribute)
  ['{46D027B2-BD97-332A-9F9C-8B4575754105}']
  { getter & setter } 

    function get_Scope: DNSecurityCriticalScope;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取该属性的范围。
    /// </summary>
    property Scope: DNSecurityCriticalScope read get_Scope;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityCriticalAttribute = class(TDNGenericImport<DNSecurityCriticalAttributeClass, DNSecurityCriticalAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityRulesAttributeClass = interface(DNAttributeClass)
  ['{914C407C-DF4B-49AC-BA04-2706F3A050EF}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用指定的规则设置的值。
    /// </summary>
    {class} function init(ruleSet: DNSecurityRuleSet): DNSecurityRulesAttribute;

  end;

  /// <summary>
  ///   指示公共语言运行时应为程序集强制实施的安全规则集。
  /// </summary>
  [DNTypeName('System.Security.SecurityRulesAttribute')]
  DNSecurityRulesAttribute = interface(DNAttribute)
  ['{A54BF404-CC69-397B-A6B5-894B7A8652D8}']
  { getter & setter } 

    function get_SkipVerificationInFullTrust: Boolean;
    procedure set_SkipVerificationInFullTrust(value: Boolean);
    function get_RuleSet: DNSecurityRuleSet;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   确定是否完全受信任的透明代码应跳过 Microsoft 中间语言 (MSIL) 验证。
    /// </summary>
    property SkipVerificationInFullTrust: Boolean read get_SkipVerificationInFullTrust write set_SkipVerificationInFullTrust;
    /// <summary>
    ///   获取要应用的规则集。
    /// </summary>
    property RuleSet: DNSecurityRuleSet read get_RuleSet;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityRulesAttribute = class(TDNGenericImport<DNSecurityRulesAttributeClass, DNSecurityRulesAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecuritySafeCriticalAttributeClass = interface(DNAttributeClass)
  ['{3625111D-051D-48AA-A87F-84FDEB2F2441}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSecuritySafeCriticalAttribute;

  end;

  /// <summary>
  ///   将类型或成员标识为透明代码可以安全访问的安全关键类型或成员。
  /// </summary>
  [DNTypeName('System.Security.SecuritySafeCriticalAttribute')]
  DNSecuritySafeCriticalAttribute = interface(DNAttribute)
  ['{0E1E2BCD-AF6D-303D-83AC-B74D476147B5}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecuritySafeCriticalAttribute = class(TDNGenericImport<DNSecuritySafeCriticalAttributeClass, DNSecuritySafeCriticalAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityTransparentAttributeClass = interface(DNAttributeClass)
  ['{4ADF71C7-2B38-4CA5-96AC-BAEA921DCCA7}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSecurityTransparentAttribute;

  end;

  /// <summary>
  ///   指示程序集不能导致特权提升。
  /// </summary>
  [DNTypeName('System.Security.SecurityTransparentAttribute')]
  DNSecurityTransparentAttribute = interface(DNAttribute)
  ['{ED0D1F70-FF9C-31F7-BA7E-F9C1B7011D84}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityTransparentAttribute = class(TDNGenericImport<DNSecurityTransparentAttributeClass, DNSecurityTransparentAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityTreatAsSafeAttributeClass = interface(DNAttributeClass)
  ['{7D634A14-D817-4386-AAD9-BD3D5FD905BA}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSecurityTreatAsSafeAttribute;

  end;

  /// <summary>
  ///   标识哪些非公共  成员可由程序集内的透明代码进行访问。
  /// </summary>
  [DNTypeName('System.Security.SecurityTreatAsSafeAttribute')]
  DNSecurityTreatAsSafeAttribute = interface(DNAttribute)
  ['{646864F9-5DA0-300B-A4F1-17E7428159F2}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityTreatAsSafeAttribute = class(TDNGenericImport<DNSecurityTreatAsSafeAttributeClass, DNSecurityTreatAsSafeAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSuppressUnmanagedCodeSecurityAttributeClass = interface(DNAttributeClass)
  ['{B4374A53-F62F-410B-B8FA-9BFBC102278F}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSuppressUnmanagedCodeSecurityAttribute;

  end;

  /// <summary>
  ///   允许托管代码在不进行堆栈审核的情况下调用到非托管代码。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.SuppressUnmanagedCodeSecurityAttribute')]
  DNSuppressUnmanagedCodeSecurityAttribute = interface(DNAttribute)
  ['{7AE01D6C-BEE7-38F6-9A86-329D8A917803}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressUnmanagedCodeSecurityAttribute = class(TDNGenericImport<DNSuppressUnmanagedCodeSecurityAttributeClass, DNSuppressUnmanagedCodeSecurityAttribute>) end;

  //-------------namespace: System.Security----------------
  DNUnverifiableCodeAttributeClass = interface(DNAttributeClass)
  ['{1B83F85E-C450-4712-93AA-1640600CA010}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNUnverifiableCodeAttribute;

  end;

  /// <summary>
  ///   将标记包含无法验证的代码模块。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.UnverifiableCodeAttribute')]
  DNUnverifiableCodeAttribute = interface(DNAttribute)
  ['{7E3393AB-2AB2-320B-8F6F-EAB6F5CF2CAF}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnverifiableCodeAttribute = class(TDNGenericImport<DNUnverifiableCodeAttributeClass, DNUnverifiableCodeAttribute>) end;

  //-------------namespace: System----------------
  DNSerializableAttributeClass = interface(DNAttributeClass)
  ['{1BFA6DBA-A6A7-483C-8421-8BE54259C00F}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSerializableAttribute;

  end;

  /// <summary>
  ///   表示类可以序列化。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.SerializableAttribute')]
  DNSerializableAttribute = interface(DNAttribute)
  ['{89BCC804-53A5-3EB2-A342-6282CC410260}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSerializableAttribute = class(TDNGenericImport<DNSerializableAttributeClass, DNSerializableAttribute>) end;

  //-------------namespace: System----------------
  DNSTAThreadAttributeClass = interface(DNAttributeClass)
  ['{E6FF5276-EE9F-47E2-9FFB-C94CDCBC9824}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSTAThreadAttribute;

  end;

  /// <summary>
  ///   指示应用程序的 COM 线程模型是单线程单元 (STA)。
  /// </summary>
  [DNTypeName('System.STAThreadAttribute')]
  DNSTAThreadAttribute = interface(DNAttribute)
  ['{50AAD4C2-61FA-3B1F-8157-5BA3B27AEE61}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSTAThreadAttribute = class(TDNGenericImport<DNSTAThreadAttributeClass, DNSTAThreadAttribute>) end;

  //-------------namespace: System----------------
  DNThreadStaticAttributeClass = interface(DNAttributeClass)
  ['{1EAE6E3C-B271-4B7E-AC4F-FCA4F0EBFD2B}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNThreadStaticAttribute;

  end;

  /// <summary>
  ///   指示各线程的静态字段值是否唯一。
  /// </summary>
  [DNTypeName('System.ThreadStaticAttribute')]
  DNThreadStaticAttribute = interface(DNAttribute)
  ['{FFC9F9AE-E87A-3252-8E25-B22423A40065}']
  { getter & setter } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNThreadStaticAttribute = class(TDNGenericImport<DNThreadStaticAttributeClass, DNThreadStaticAttribute>) end;

  //-------------namespace: System----------------
  DNBitConverterClass = interface(DNObjectClass)
  ['{CC86C560-1BC6-4013-B1CD-C4D2CAFA2154}']
  { static methods } 

    /// <summary>
    ///   字节数组的形式返回指定的布尔值。
    /// </summary>
    {class} function GetBytes(value: Boolean): TArray<Byte>; overload;
    /// <summary>
    ///   字节数组形式返回指定的 Unicode 字符值。
    /// </summary>
    {class} function GetBytes(value: Char): TArray<Byte>; overload;
    /// <summary>
    ///   字节数组形式返回指定的 16 位有符号的整数值。
    /// </summary>
    {class} function GetBytes(value: Int16): TArray<Byte>; overload;
    /// <summary>
    ///   字节数组形式返回指定的 32 位有符号的整数值。
    /// </summary>
    {class} function GetBytes(value: Int32): TArray<Byte>; overload;
    /// <summary>
    ///   以字节数组的形式返回指定 64 位带符号整数值。
    /// </summary>
    {class} function GetBytes(value: Int64): TArray<Byte>; overload;
    /// <summary>
    ///   字节数组形式返回指定的 16 位无符号的整数值。
    /// </summary>
    {class} function GetBytes(value: UInt16): TArray<Byte>; overload;
    /// <summary>
    ///   字节数组形式返回指定的 32 位无符号的整数值。
    /// </summary>
    {class} function GetBytes(value: UInt32): TArray<Byte>; overload;
    /// <summary>
    ///   字节数组形式返回指定的 64 位无符号的整数值。
    /// </summary>
    {class} function GetBytes(value: UInt64): TArray<Byte>; overload;
    /// <summary>
    ///   字节数组形式返回指定的单精度浮点值。
    /// </summary>
    {class} function GetBytes(value: Single): TArray<Byte>; overload;
    /// <summary>
    ///   字节数组形式返回指定的双精度浮点值。
    /// </summary>
    {class} function GetBytes(value: Double): TArray<Byte>; overload;
    /// <summary>
    ///   返回从字节数组中指定位置处的两个字节转换的 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: TArray<Byte>; startIndex: Int32): Char;
    /// <summary>
    ///   返回转换的字节数组中指定位置处的两个字节从一个 16 位带符号的整数。
    /// </summary>
    {class} function ToInt16(value: TArray<Byte>; startIndex: Int32): Int16;
    /// <summary>
    ///   返回转换的字节数组中指定位置处的四个字节从 32 位有符号的整数。
    /// </summary>
    {class} function ToInt32(value: TArray<Byte>; startIndex: Int32): Int32;
    /// <summary>
    ///   返回转换的字节数组中指定位置处的八个字节从一个 64 位带符号的整数。
    /// </summary>
    {class} function ToInt64(value: TArray<Byte>; startIndex: Int32): Int64;
    /// <summary>
    ///   返回从字节数组中指定位置处的两个字节转换的 16 位无符号的整数。
    /// </summary>
    {class} function ToUInt16(value: TArray<Byte>; startIndex: Int32): UInt16;
    /// <summary>
    ///   返回从字节数组中指定位置的四个字节转换的 32 位无符号的整数。
    /// </summary>
    {class} function ToUInt32(value: TArray<Byte>; startIndex: Int32): UInt32;
    /// <summary>
    ///   返回从字节数组中指定位置的八个字节转换的 64 位无符号的整数。
    /// </summary>
    {class} function ToUInt64(value: TArray<Byte>; startIndex: Int32): UInt64;
    /// <summary>
    ///   返回从字节数组中指定位置的四个字节转换来单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: TArray<Byte>; startIndex: Int32): Single;
    /// <summary>
    ///   返回从字节数组中指定位置的八个字节转换来双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: TArray<Byte>; startIndex: Int32): Double;
    /// <summary>
    ///   将字节的指定子数组的每个元素的数值转换为其等效的十六进制字符串表示形式。
    /// </summary>
    {class} function ToString(value: TArray<Byte>; startIndex: Int32; length: Int32): string; overload;
    /// <summary>
    ///   将指定的字节数组的每个元素的数值转换为其等效的十六进制字符串表示形式。
    /// </summary>
    {class} function ToString(value: TArray<Byte>): string; overload;
    /// <summary>
    ///   将字节的指定子数组的每个元素的数值转换为其等效的十六进制字符串表示形式。
    /// </summary>
    {class} function ToString(value: TArray<Byte>; startIndex: Int32): string; overload;
    /// <summary>
    ///   返回一个布尔值，从字节数组中的指定位置处的字节转换。
    /// </summary>
    {class} function ToBoolean(value: TArray<Byte>; startIndex: Int32): Boolean;
    /// <summary>
    ///   将指定的双精度浮点数转换为 64 位有符号整数。
    /// </summary>
    {class} function DoubleToInt64Bits(value: Double): Int64;
    /// <summary>
    ///   将指定的 64 位有符号的整数转换为双精度浮点数。
    /// </summary>
    {class} function Int64BitsToDouble(value: Int64): Double;

  end;

  /// <summary>
  ///   将基数据类型转换为一个字节数组以及将一个字节数组转换为基数据类型。
  /// </summary>
  [DNTypeName('System.BitConverter')]
  DNBitConverter = interface(DNObject)
  ['{450AD484-5D18-3A7A-8B24-A228680FD885}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string; overload;

  end;

  TDNBitConverter = class(TDNGenericImport<DNBitConverterClass, DNBitConverter>) end;

  //-------------namespace: System----------------
  DNBufferClass = interface(DNObjectClass)
  ['{9649FDD8-1D7E-4793-9CBA-C024EFD46D84}']
  { static methods } 

    /// <summary>
    ///   检索指定数组中指定位置的字节。
    /// </summary>
    {class} function GetByte(&array: DNArray; index: Int32): Byte;
    /// <summary>
    ///   将指定的值分配给指定数组中特定位置处的字节。
    /// </summary>
    {class} procedure SetByte(&array: DNArray; index: Int32; value: Byte);
    /// <summary>
    ///   返回指定数组中的字节数。
    /// </summary>
    {class} function ByteLength(&array: DNArray): Int32;
    /// <summary>
    ///   将指定为长整型值的一些字节从内存中的一个地址复制到另一个地址。
    ///            
    ///              此 API 不兼容 CLS。
    /// </summary>
    {class} procedure MemoryCopy(var source: DNVoid; var destination: DNVoid; destinationSizeInBytes: Int64; sourceBytesToCopy: Int64); overload;
    /// <summary>
    ///   将指定为无符号长整型值的一些字节从内存中的一个地址复制到另一个地址。
    ///            
    ///              此 API 不兼容 CLS。
    /// </summary>
    {class} procedure MemoryCopy(var source: DNVoid; var destination: DNVoid; destinationSizeInBytes: UInt64; sourceBytesToCopy: UInt64); overload;
    /// <summary>
    ///   将指定数目的字节从起始于特定偏移量的源数组复制到起始于特定偏移量的目标数组。
    /// </summary>
    {class} procedure BlockCopy(src: DNArray; srcOffset: Int32; dst: DNArray; dstOffset: Int32; count: Int32);

  end;

  /// <summary>
  ///   操作基元类型的数组。
  /// </summary>
  [DNTypeName('System.Buffer')]
  DNBuffer = interface(DNObject)
  ['{830FE109-4566-3AF2-9B57-5602724FCACE}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNBuffer = class(TDNGenericImport<DNBufferClass, DNBuffer>) end;

  //-------------namespace: System----------------
  DNCharEnumeratorClass = interface(DNObjectClass)
  ['{C4B37211-05CA-4B41-9E42-FC4EA3D3D727}']
  end;

  /// <summary>
  ///   支持循环访问  对象并读取其各个字符。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.CharEnumerator')]
  DNCharEnumerator = interface(DNObject)
  ['{277EABD6-F03A-3C52-8B42-B8E326D9C0CC}']
  { getter & setter } 

    function get_Current: Char;

  { methods } 

    /// <summary>
    ///   创建一份当前对象。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   递增当前的内部索引  对象传递给枚举字符串的下一个字符。
    /// </summary>
    function MoveNext: Boolean;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   初始化枚举字符串的第一个字符之前在逻辑上的某个位置的索引。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   此枚举的字符串中获取当前引用的字符对象。
    /// </summary>
    property Current: Char read get_Current;
  end;

  TDNCharEnumerator = class(TDNGenericImport<DNCharEnumeratorClass, DNCharEnumerator>) end;

  //-------------namespace: System.Collections----------------
  DNArrayListClass = interface(DNObjectClass)
  ['{A493A969-18C7-4CBB-9AC0-2A0FDABC6CA1}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，该实例为空并且具有默认初始容量。
    /// </summary>
    {class} function init: DNArrayList; overload;
    /// <summary>
    ///   初始化  类的新实例，该实例为空并且具有指定的初始容量。
    /// </summary>
    {class} function init(capacity: Int32): DNArrayList; overload;
    /// <summary>
    ///   初始化  类的新实例，该类包含从指定集合复制的元素，并具有与复制的元素数相同的初始容量。
    /// </summary>
    {class} function init(c: DNICollection): DNArrayList; overload;

  { static methods } 

    /// <summary>
    ///   为特定  创建  包装。
    /// </summary>
    {class} function Adapter(list: DNIList): DNArrayList;
    /// <summary>
    ///   返回具有固定大小的  包装。
    /// </summary>
    {class} function FixedSize(list: DNIList): DNIList; overload;
    /// <summary>
    ///   返回具有固定大小的  包装。
    /// </summary>
    {class} function FixedSize(list: DNArrayList): DNArrayList; overload;
    /// <summary>
    ///   返回只读的  包装。
    /// </summary>
    {class} function &ReadOnly(list: DNIList): DNIList; overload;
    /// <summary>
    ///   返回只读的  包装。
    /// </summary>
    {class} function &ReadOnly(list: DNArrayList): DNArrayList; overload;
    /// <summary>
    ///   返回 ，其元素是指定值的副本。
    /// </summary>
    {class} function &Repeat(value: DNObject; count: Int32): DNArrayList;
    /// <summary>
    ///   返回同步的（线程安全） 包装器。
    /// </summary>
    {class} function Synchronized(list: DNIList): DNIList; overload;
    /// <summary>
    ///   返回同步的（线程安全） 包装器。
    /// </summary>
    {class} function Synchronized(list: DNArrayList): DNArrayList; overload;

  end;

  /// <summary>
  ///   使用大小会根据需要动态增加的数组来实现  接口。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.Collections.ArrayList')]
  DNArrayList = interface(DNObject)
  ['{6896B49D-7AFB-34DC-934E-5ADD38EEEE39}']
  { getter & setter } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;
    function get_Item(index: Int32): DNObject;
    procedure set_Item(index: Int32; value: DNObject);

  { methods } 

    /// <summary>
    ///   将对象添加到  的结尾处。
    /// </summary>
    function Add(value: DNObject): Int32;
    /// <summary>
    ///   将  的元素添加到  的末尾。
    /// </summary>
    procedure AddRange(c: DNICollection);
    /// <summary>
    ///   使用指定的比较器在已排序  的某个元素范围中搜索元素，并返回该元素从零开始的索引。
    /// </summary>
    function BinarySearch(index: Int32; count: Int32; value: DNObject; comparer: DNIComparer): Int32; overload;
    /// <summary>
    ///   使用默认的比较器在整个已排序的  中搜索元素，并返回该元素从零开始的索引。
    /// </summary>
    function BinarySearch(value: DNObject): Int32; overload;
    /// <summary>
    ///   使用指定的比较器在整个已排序的  中搜索元素，并返回该元素从零开始的索引。
    /// </summary>
    function BinarySearch(value: DNObject; comparer: DNIComparer): Int32; overload;
    /// <summary>
    ///   从  中移除所有元素。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   创建  的浅表副本。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   确定某元素是否在  中。
    /// </summary>
    function &Contains(item: DNObject): Boolean;
    /// <summary>
    ///   从目标数组的开头开始，将整个  复制到兼容的一维 。
    /// </summary>
    procedure CopyTo(&array: DNArray); overload;
    /// <summary>
    ///   从目标数组的指定索引处开始将整个  复制到兼容的一维 。
    /// </summary>
    procedure CopyTo(&array: DNArray; arrayIndex: Int32); overload;
    /// <summary>
    ///   从目标数组的指定索引处开始，将  中某个范围的元素复制到兼容的一维数组  。
    /// </summary>
    procedure CopyTo(index: Int32; &array: DNArray; arrayIndex: Int32; count: Int32); overload;
    /// <summary>
    ///   返回用于整个  的枚举数。
    /// </summary>
    function GetEnumerator: DNIEnumerator; overload;
    /// <summary>
    ///   返回  中元素范围的枚举器。
    /// </summary>
    function GetEnumerator(index: Int32; count: Int32): DNIEnumerator; overload;
    /// <summary>
    ///   搜索指定  并返回整个内的第一个匹配项的从零开始索引 。
    /// </summary>
    function IndexOf(value: DNObject): Int32; overload;
    /// <summary>
    ///   搜索指定的 ，并返回  中从指定索引到最后一个元素的元素范围中第一个匹配项的从零开始索引。
    /// </summary>
    function IndexOf(value: DNObject; startIndex: Int32): Int32; overload;
    /// <summary>
    ///   搜索指定的 ，并返回  中从指定索引开始，并包含指定元素数的元素范围中第一个匹配项的从零开始的索引。
    /// </summary>
    function IndexOf(value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将元素插入  的指定索引处。
    /// </summary>
    procedure Insert(index: Int32; value: DNObject);
    /// <summary>
    ///   将集合中的元素插入  的指定索引处。
    /// </summary>
    procedure InsertRange(index: Int32; c: DNICollection);
    /// <summary>
    ///   在整个  中搜索指定的 ，并返回最后一个匹配项的从零开始的索引。
    /// </summary>
    function LastIndexOf(value: DNObject): Int32; overload;
    /// <summary>
    ///   搜索指定的 ，并返回  中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始索引。
    /// </summary>
    function LastIndexOf(value: DNObject; startIndex: Int32): Int32; overload;
    /// <summary>
    ///   从  中移除特定对象的第一个匹配项。
    /// </summary>
    procedure Remove(obj: DNObject);
    /// <summary>
    ///   移除  的指定索引处的元素。
    /// </summary>
    procedure RemoveAt(index: Int32);
    /// <summary>
    ///   从  中移除一定范围的元素。
    /// </summary>
    procedure RemoveRange(index: Int32; count: Int32);
    /// <summary>
    ///   将整个  中元素的顺序反转。
    /// </summary>
    procedure Reverse; overload;
    /// <summary>
    ///   将指定范围中元素的顺序反转。
    /// </summary>
    procedure Reverse(index: Int32; count: Int32); overload;
    /// <summary>
    ///   复制  中一个子集合的元素。
    /// </summary>
    procedure SetRange(index: Int32; c: DNICollection);
    /// <summary>
    ///   对整个  中的元素进行排序。
    /// </summary>
    procedure Sort; overload;
    /// <summary>
    ///   使用指定的比较器对整个  中的元素进行排序。
    /// </summary>
    procedure Sort(comparer: DNIComparer); overload;
    /// <summary>
    ///   使用指定的比较器对  中某个范围内的元素进行排序。
    /// </summary>
    procedure Sort(index: Int32; count: Int32; comparer: DNIComparer); overload;
    /// <summary>
    ///   将  的元素复制到新  数组中。
    /// </summary>
    function ToArray: TArray<DNObject>; overload;
    /// <summary>
    ///   将  的元素复制到新的指定元素类型数组中。
    /// </summary>
    function ToArray(&type: DNType): DNArray; overload;
    /// <summary>
    ///   将容量设置为  中元素的实际数目。
    /// </summary>
    procedure TrimToSize;
    /// <summary>
    ///   搜索指定的 ，并返回  中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始的索引。
    /// </summary>
    function LastIndexOf(value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   返回一个 ，它表示源  中的元素子集。
    /// </summary>
    function GetRange(index: Int32; count: Int32): DNArrayList;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  可包含的元素数。
    /// </summary>
    property Capacity: Int32 read get_Capacity write set_Capacity;
    /// <summary>
    ///   获取  中实际包含的元素数。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取一个值，该值指示  是否具有固定大小。
    /// </summary>
    property IsFixedSize: Boolean read get_IsFixedSize;
    /// <summary>
    ///   获取一个值，该值指示  是否为只读。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取一个值，该值指示是否同步对  的访问（线程安全）。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    /// <summary>
    ///   获取可用于同步对  的访问的对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
    property Item[index: Int32]: DNObject read get_Item write set_Item; default;
  end;

  TDNArrayList = class(TDNGenericImport<DNArrayListClass, DNArrayList>) end;

  //-------------namespace: System.Collections----------------
  DNBitArrayClass = interface(DNObjectClass)
  ['{B579890D-5874-43BE-9294-E846B8558318}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，该类可拥有指定数目的位值，位值最初设置为 。
    /// </summary>
    {class} function init(length: Int32): DNBitArray; overload;
    /// <summary>
    ///   初始化  类的新实例，此实例可以容纳指定数量的位值，并且将其初始值设置为指定值。
    /// </summary>
    {class} function init(length: Int32; defaultValue: Boolean): DNBitArray; overload;
    /// <summary>
    ///   初始化  的新实例，该实例包含从指定的字节数组复制的位值。
    /// </summary>
    {class} function init(bytes: TArray<Byte>): DNBitArray; overload;
    /// <summary>
    ///   初始化  类的新实例，该实例包含从布尔值指定数组复制的位值。
    /// </summary>
    {class} function init(values: TArray<Boolean>): DNBitArray; overload;
    /// <summary>
    ///   初始化  类的新实例，该类包含从指定的 32 位整数数组复制的位值。
    /// </summary>
    {class} function init(values: TArray<Int32>): DNBitArray; overload;
    /// <summary>
    ///   初始化包含从指定  复制的位值的  类的新实例。
    /// </summary>
    {class} function init(bits: DNBitArray): DNBitArray; overload;

  end;

  /// <summary>
  ///   管理位值的压缩数组，这些值以布尔值的形式表示，其中  表示此位为开 (1)， 表示此位为关 (0)。
  /// </summary>
  [DNTypeName('System.Collections.BitArray')]
  DNBitArray = interface(DNObject)
  ['{5D2FB755-C658-3F51-86F2-881F4A1A2A55}']
  { getter & setter } 

    function get_Item(index: Int32): Boolean;
    procedure set_Item(index: Int32; value: Boolean);
    function get_Length: Int32;
    procedure set_Length(value: Int32);
    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    /// <summary>
    ///   获取  中特定位置处的位值。
    /// </summary>
    function Get(index: Int32): Boolean;
    /// <summary>
    ///   将  中特定位置处的位设置为指定值。
    /// </summary>
    procedure &Set(index: Int32; value: Boolean);
    /// <summary>
    ///   将  中的所有位设置为指定值。
    /// </summary>
    procedure SetAll(value: Boolean);
    /// <summary>
    ///   在当前  对象中的元素和指定数组中的相应元素之间执行按位“与”运算。
    ///               将修改当前  对象，以存储按位“与”运算的结果。
    /// </summary>
    function &And(value: DNBitArray): DNBitArray;
    /// <summary>
    ///   在当前  对象中的元素和指定数组中的相应元素之间执行按位“或”运算。
    ///               将修改当前  对象，以存储按位“或”运算的结果。
    /// </summary>
    function &Or(value: DNBitArray): DNBitArray;
    /// <summary>
    ///   针对指定数组中的相应元素，在当前  对象中的元素间执行按位“异或”运算。
    ///               将修改当前  对象，以存储按位“异或”运算的结果。
    /// </summary>
    function &Xor(value: DNBitArray): DNBitArray;
    /// <summary>
    ///   反转当前  中的所有位值，以便将设置为  的元素更改为 ；将设置为  的元素更改为 。
    /// </summary>
    function &Not: DNBitArray;
    /// <summary>
    ///   从目标数组的指定索引处开始将整个  复制到兼容的一维 。
    /// </summary>
    procedure CopyTo(&array: DNArray; index: Int32);
    /// <summary>
    ///   创建  的浅表副本。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   返回循环访问  的枚举数。
    /// </summary>
    function GetEnumerator: DNIEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: Boolean read get_Item write set_Item; default;
    /// <summary>
    ///   获取或设置  中的元素数。
    /// </summary>
    property Length: Int32 read get_Length write set_Length;
    /// <summary>
    ///   获取  中包含的元素数。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取可用于同步对  的访问的对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
    /// <summary>
    ///   获取一个值，该值指示  是否为只读。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取一个值，该值指示是否同步对  的访问（线程安全）。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNBitArray = class(TDNGenericImport<DNBitArrayClass, DNBitArray>) end;

  //-------------namespace: System.Collections----------------
  DNCaseInsensitiveComparerClass = interface(DNObjectClass)
  ['{9F76D8E4-2724-42F9-8C4E-AC9808971F1D}']
  { static getter & setter } 

    {class} function get_Default: DNCaseInsensitiveComparer;
    {class} function get_DefaultInvariant: DNCaseInsensitiveComparer;

  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用  当前线程。
    /// </summary>
    {class} function init: DNCaseInsensitiveComparer; overload;
    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(culture: DNCultureInfo): DNCaseInsensitiveComparer; overload;

  { static propertys } 

    /// <summary>
    ///   获取实例  关联  的当前线程，并始终是可用的。
    /// </summary>
    {class} property &Default: DNCaseInsensitiveComparer read get_Default;
    /// <summary>
    ///   获取实例  关联  以及是否始终可用。
    /// </summary>
    {class} property DefaultInvariant: DNCaseInsensitiveComparer read get_DefaultInvariant;
  end;

  /// <summary>
  ///   比较两个对象相等，忽略大小写的字符串。
  /// </summary>
  [DNTypeName('System.Collections.CaseInsensitiveComparer')]
  DNCaseInsensitiveComparer = interface(DNObject)
  ['{35E946E4-7CDA-3824-8B24-D799A96309AD}']
  { methods } 

    /// <summary>
    ///   执行不区分大小写的比较，相同类型的两个对象并返回指示一个是否小于、 等于还是大于另一个值。
    /// </summary>
    function Compare(a: DNObject; b: DNObject): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCaseInsensitiveComparer = class(TDNGenericImport<DNCaseInsensitiveComparerClass, DNCaseInsensitiveComparer>) end;

  //-------------namespace: System.Collections----------------
  DNCaseInsensitiveHashCodeProviderClass = interface(DNObjectClass)
  ['{FF040E60-1D6C-4300-898D-BC6BBAFDD53E}']
  { static getter & setter } 

    {class} function get_Default: DNCaseInsensitiveHashCodeProvider;
    {class} function get_DefaultInvariant: DNCaseInsensitiveHashCodeProvider;

  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用  当前线程。
    /// </summary>
    {class} function init: DNCaseInsensitiveHashCodeProvider; overload;
    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(culture: DNCultureInfo): DNCaseInsensitiveHashCodeProvider; overload;

  { static propertys } 

    /// <summary>
    ///   获取实例  关联  的当前线程，并始终是可用的。
    /// </summary>
    {class} property &Default: DNCaseInsensitiveHashCodeProvider read get_Default;
    /// <summary>
    ///   获取实例  关联  以及是否始终可用。
    /// </summary>
    {class} property DefaultInvariant: DNCaseInsensitiveHashCodeProvider read get_DefaultInvariant;
  end;

  /// <summary>
  ///   提供使用忽略大小写的字符串的哈希算法的对象的哈希代码。
  /// </summary>
  [DNTypeName('System.Collections.CaseInsensitiveHashCodeProvider')]
  DNCaseInsensitiveHashCodeProvider = interface(DNObject)
  ['{47D3C68D-7D85-3227-A9E7-88451D6BADFC}']
  { methods } 

    /// <summary>
    ///   返回给定对象使用忽略大小写的字符串的哈希算法的哈希代码。
    /// </summary>
    function GetHashCode(obj: DNObject): Int32; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCaseInsensitiveHashCodeProvider = class(TDNGenericImport<DNCaseInsensitiveHashCodeProviderClass, DNCaseInsensitiveHashCodeProvider>) end;

  //-------------namespace: System.Collections----------------
  DNCollectionBaseClass = interface(DNObjectClass)
  ['{FD72CF6C-82A0-45E5-AE91-F7DA2B4DA3FC}']
  end;

  /// <summary>
  ///   提供强类型集合的  基类。
  /// </summary>
  [DNTypeName('System.Collections.CollectionBase')]
  DNCollectionBase = interface(DNObject)
  ['{87259279-9F5D-3C0A-BB58-723A2A6E4DBA}']
  { getter & setter } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    /// <summary>
    ///   移除的指定索引处的元素  实例。
    ///               此方法不是可重写的。
    /// </summary>
    procedure RemoveAt(index: Int32);
    /// <summary>
    ///   返回的枚举数循环访问实例。
    /// </summary>
    function GetEnumerator: DNIEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  可包含的元素数。
    /// </summary>
    property Capacity: Int32 read get_Capacity write set_Capacity;
    /// <summary>
    ///   获取包含中的元素数  实例。
    ///               不能重写此属性。
    /// </summary>
    property Count: Int32 read get_Count;
  end;

  TDNCollectionBase = class(TDNGenericImport<DNCollectionBaseClass, DNCollectionBase>) end;

  //-------------namespace: System.Collections----------------
  DNComparerClass = interface(DNObjectClass)
  ['{8748E281-422A-424D-8ACC-02EAE293E93C}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(culture: DNCultureInfo): DNComparer;

  end;

  /// <summary>
  ///   比较两个对象相等，字符串比较是区分大小写。
  /// </summary>
  [DNTypeName('System.Collections.Comparer')]
  DNComparer = interface(DNObject)
  ['{8A63140F-7EB8-3F4E-BA59-19B8C747843F}']
  { methods } 

    /// <summary>
    ///   执行区分大小写的比较，相同类型的两个对象并返回指示一个是否小于、 等于还是大于另一个值。
    /// </summary>
    function Compare(a: DNObject; b: DNObject): Int32;
    /// <summary>
    ///   填充  对象序列化所需的数据。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNComparer = class(TDNGenericImport<DNComparerClass, DNComparer>) end;

  //-------------namespace: System.Collections.Concurrent----------------
  DNPartitionerClass = interface(DNObjectClass)
  ['{32B345FA-996A-4063-8EB4-338D22EA9422}']
  end;

  /// <summary>
  ///   为数组、列表和可枚举对象提供常见的分区策略。
  /// </summary>
  [DNTypeName('System.Collections.Concurrent.Partitioner')]
  DNPartitioner = interface(DNObject)
  ['{44463135-332E-3920-AC85-4F64CDB39C2C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNPartitioner = class(TDNGenericImport<DNPartitionerClass, DNPartitioner>) end;

  //-------------namespace: System.Collections----------------
  DNDictionaryBaseClass = interface(DNObjectClass)
  ['{367B96EA-8BE8-48A8-ABA1-796BF35126B1}']
  end;

  /// <summary>
  ///   为键/值对的强类型集合提供  基类。
  /// </summary>
  [DNTypeName('System.Collections.DictionaryBase')]
  DNDictionaryBase = interface(DNObject)
  ['{9840C5C3-21D3-3B8A-94C1-3FC542B0227E}']
  { getter & setter } 

    function get_Count: Int32;

  { methods } 

    /// <summary>
    ///   副本  元素到一维  中指定索引处。
    /// </summary>
    procedure CopyTo(&array: DNArray; index: Int32);
    /// <summary>
    ///   返回  ，它循环访问  实例。
    /// </summary>
    function GetEnumerator: DNIDictionaryEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包含中的元素数  实例。
    /// </summary>
    property Count: Int32 read get_Count;
  end;

  TDNDictionaryBase = class(TDNGenericImport<DNDictionaryBaseClass, DNDictionaryBase>) end;

  //-------------namespace: System.Collections.Generic----------------
  /// <summary>
  ///   定义类型为比较两个对象而实现的方法。
  /// </summary>
  [DNTypeName('System.Collections.Generic.IComparer`1')]
  DNIComparer<T> = interface(DNObject)
  ['{2EABC2B4-F497-3FA8-AB24-876A15E92896}']
  { methods } 

    function Compare(x: T; y: T): Int32;

  end;

  //-------------namespace: System.Collections.Generic----------------
  /// <summary>
  ///   定义用于支持比较对象是否相等的方法。
  /// </summary>
  [DNTypeName('System.Collections.Generic.IEqualityComparer`1')]
  DNIEqualityComparer<T> = interface(DNObject)
  ['{042728AF-01BC-3F31-8294-AC99DF654C3A}']
  { methods } 

    function Equals(x: T; y: T): Boolean;
    function GetHashCode(obj: T): Int32;

  end;

  //-------------namespace: System.Collections----------------
  DNHashtableClass = interface(DNObjectClass)
  ['{26922011-9991-4BD9-B7DC-B0910A72F177}']
  { constructors } 

    /// <summary>
    ///   初始化新的空实例  类使用默认的初始容量、 加载因子、 哈希代码提供程序和比较器。
    /// </summary>
    {class} function init: DNHashtable; overload;
    /// <summary>
    ///   初始化新的空实例  类使用指定的初始容量和默认加载因子、 哈希代码提供程序和比较器。
    /// </summary>
    {class} function init(capacity: Int32): DNHashtable; overload;
    /// <summary>
    ///   初始化新的空实例  类使用指定的初始容量和加载因子，默认哈希代码提供程序和比较器。
    /// </summary>
    {class} function init(capacity: Int32; loadFactor: Single): DNHashtable; overload;
    /// <summary>
    ///   初始化新的空实例  类使用指定的初始容量、 加载因子、 哈希代码提供程序和比较器。
    /// </summary>
    {class} function init(capacity: Int32; loadFactor: Single; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    /// <summary>
    ///   初始化新的空实例  类使用指定的初始容量、 加载因子和  对象。
    /// </summary>
    {class} function init(capacity: Int32; loadFactor: Single; equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    /// <summary>
    ///   初始化新的空实例  类使用默认的初始容量和加载因子，指定的哈希代码提供程序和比较器。
    /// </summary>
    {class} function init(hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    /// <summary>
    ///   初始化新的空实例  类使用默认的初始容量和加载因子，和指定  对象。
    /// </summary>
    {class} function init(equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    /// <summary>
    ///   初始化新的空实例  类使用指定的初始容量、 哈希代码提供程序、 比较器和默认加载因子。
    /// </summary>
    {class} function init(capacity: Int32; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    /// <summary>
    ///   初始化新的空实例  类使用指定的初始容量和 , ，和默认加载因子。
    /// </summary>
    {class} function init(capacity: Int32; equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    /// <summary>
    ///   新实例初始化  类将从指定字典的元素复制到新  对象。
    ///               新  对象拥有与复制的元素数相等的初始容量并使用默认加载因子、 哈希代码提供程序和比较器。
    /// </summary>
    {class} function init(d: DNIDictionary): DNHashtable; overload;
    /// <summary>
    ///   新实例初始化  类将从指定字典的元素复制到新  对象。
    ///               新  对象拥有与复制的元素数相等的初始容量并使用指定的加载因子，默认哈希代码提供程序和比较器。
    /// </summary>
    {class} function init(d: DNIDictionary; loadFactor: Single): DNHashtable; overload;
    /// <summary>
    ///   新实例初始化  类将从指定字典的元素复制到新  对象。
    ///               新  对象拥有与复制的元素数相等的初始容量并使用默认加载因子，指定的哈希代码提供程序和比较器。
    ///               此 API 已废弃不用。
    ///               替代方法，请参阅 。
    /// </summary>
    {class} function init(d: DNIDictionary; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    /// <summary>
    ///   新实例初始化  类将从指定字典的元素复制到新  对象。
    ///               新  对象拥有与复制的元素数相等的初始容量并使用默认加载因子和指定  对象。
    /// </summary>
    {class} function init(d: DNIDictionary; equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    /// <summary>
    ///   初始化的新实例通过将指定的字典中的元素复制到新的类对象。
    ///               新对象具有初始容量与复制的元素数相等，并使用指定的加载因子，哈希代码提供程序和比较器。
    /// </summary>
    {class} function init(d: DNIDictionary; loadFactor: Single; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    /// <summary>
    ///   新实例初始化  类将从指定字典的元素复制到新  对象。
    ///               新  对象拥有与复制的元素数相等的初始容量并使用指定的加载因子和  对象。
    /// </summary>
    {class} function init(d: DNIDictionary; loadFactor: Single; equalityComparer: DNIEqualityComparer): DNHashtable; overload;

  { static methods } 

    /// <summary>
    ///   返回的同步 （线程安全） 包装 。
    /// </summary>
    {class} function Synchronized(table: DNHashtable): DNHashtable;

  end;

  /// <summary>
  ///   表示根据键的哈希代码进行组织的键/值对的集合。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
  /// </summary>
  [DNTypeName('System.Collections.Hashtable')]
  DNHashtable = interface(DNObject)
  ['{146855FA-309F-3D0E-BB3E-DF525F30A715}']
  { getter & setter } 

    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_SyncRoot: DNObject;
    function get_Count: Int32;

  { methods } 

    /// <summary>
    ///   将带有指定键和值的元素添加到  中。
    /// </summary>
    procedure Add(key: DNObject; value: DNObject);
    /// <summary>
    ///   从  中移除所有元素。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   创建  的浅表副本。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   确定  是否包含特定键。
    /// </summary>
    function &Contains(key: DNObject): Boolean;
    /// <summary>
    ///   确定  是否包含特定键。
    /// </summary>
    function ContainsKey(key: DNObject): Boolean;
    /// <summary>
    ///   确定  是否包含特定值。
    /// </summary>
    function ContainsValue(value: DNObject): Boolean;
    /// <summary>
    ///   副本  元素到一维  实例的指定索引位置。
    /// </summary>
    procedure CopyTo(&array: DNArray; arrayIndex: Int32);
    /// <summary>
    ///   返回  ，它循环访问 。
    /// </summary>
    function GetEnumerator: DNIDictionaryEnumerator;
    /// <summary>
    ///   从  中移除带有指定键的元素。
    /// </summary>
    procedure Remove(key: DNObject);
    /// <summary>
    ///   实现  接口，并返回序列化所需的数据 。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   实现  接口，并在完成反序列化之后引发反序列化事件。
    /// </summary>
    procedure OnDeserialization(sender: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    /// <summary>
    ///   获取一个值，该值指示  是否为只读。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取一个值，该值指示  是否具有固定大小。
    /// </summary>
    property IsFixedSize: Boolean read get_IsFixedSize;
    /// <summary>
    ///   获取一个值，该值指示是否同步对  的访问（线程安全）。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    /// <summary>
    ///   获取  包含中的键 。
    /// </summary>
    property Keys: DNICollection read get_Keys;
    /// <summary>
    ///   获取一个 ，它包含  中的值。
    /// </summary>
    property Values: DNICollection read get_Values;
    /// <summary>
    ///   获取可用于同步对  的访问的对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
    /// <summary>
    ///   获取包含在  中的键/值对的数目。
    /// </summary>
    property Count: Int32 read get_Count;
  end;

  TDNHashtable = class(TDNGenericImport<DNHashtableClass, DNHashtable>) end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   提供比较两个对象的方法。
  /// </summary>
  [DNTypeName('System.Collections.IComparer')]
  DNIComparer = interface(DNObject)
  ['{C20FD3EB-7022-3D14-8477-760FAB54E50D}']
  { methods } 

    /// <summary>
    ///   比较两个对象并返回指示一个是否小于、 等于还是大于另一个值。
    /// </summary>
    function Compare(x: DNObject; y: DNObject): Int32;

  end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   公开枚举数，该枚举数支持在非泛型集合上进行简单迭代。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
  /// </summary>
  [DNTypeName('System.Collections.IEnumerable')]
  DNIEnumerable = interface(DNObject)
  ['{496B0ABE-CDEE-11D3-88E8-00902754C43A}']
  { methods } 

    /// <summary>
    ///   返回循环访问集合的枚举数。
    /// </summary>
    function GetEnumerator: DNIEnumerator;

  end;

  //-------------namespace: System.Collections.Generic----------------
  /// <summary>
  ///   公开枚举数，该枚举数支持在指定类型的集合上进行简单迭代。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.Collections.Generic.IEnumerable`1')]
  DNIEnumerable<T> = interface(DNIEnumerable)
  ['{AEF9EC8A-1E73-365B-8DA2-800A3A6166E6}']
  { methods } 

    /// <summary>
    ///   返回一个循环访问集合的枚举器。
    /// </summary>
    function GetEnumerator: DNIEnumerator<T>;

  end;

  //-------------namespace: System.Collections.Concurrent----------------
  /// <summary>
  ///   定义用于操作供生产者/使用者使用的线程安全集合的方法。
  ///               此接口提供统一的表示形式的生产者/使用者集合使程序更高级别的抽象如  可以将此集合用作基础存储机制。
  /// </summary>
  [DNTypeName('System.Collections.Concurrent.IProducerConsumerCollection`1')]
  DNIProducerConsumerCollection<T> = interface(DNIEnumerable<T>)
  ['{2B733F8C-2E75-3440-851D-877C316DA9EF}']
  { methods } 

    procedure CopyTo(&array: TArray<T>; index: Int32);
    function TryAdd(item: T): Boolean;
    function TryTake(out item: T): Boolean;
    /// <summary>
    ///   中包含的元素复制  到新数组。
    /// </summary>
    function ToArray: TArray<T>;

  end;

  //-------------namespace: System.Collections.Generic----------------
  /// <summary>
  ///   定义操作泛型集合的方法。
  /// </summary>
  [DNTypeName('System.Collections.Generic.ICollection`1')]
  DNICollection<T> = interface(DNIEnumerable<T>)
  ['{4E0BA8E9-C074-3990-BE19-EF596EC42B01}']
  { getter & setter } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    procedure Add(item: T);
    /// <summary>
    ///   从  中移除所有项。
    /// </summary>
    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function Remove(item: T): Boolean;

  { propertys } 

    /// <summary>
    ///   获取  中包含的元素数。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取一个值，该值指示  是否为只读。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  //-------------namespace: System.Collections.Generic----------------
  /// <summary>
  ///   表示键/值对的泛型集合。
  /// </summary>
  [DNTypeName('System.Collections.Generic.IDictionary`2')]
  DNIDictionary<TKey, TValue> = interface(DNObject)
  ['{A799EDAA-B36F-31DA-9B95-D75BE19D1CCC}']
  { getter & setter } 

    function get_Item(key: TKey): TValue;
    procedure set_Item(key: TKey; value: TValue);
    function get_Keys: DNICollection<TKey>;
    function get_Values: DNICollection<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    procedure Add(key: TKey; value: TValue);
    function Remove(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;

  { propertys } 

    property Item[key: TKey]: TValue read get_Item write set_Item; default;
    /// <summary>
    ///   获取包含  的键的 。
    /// </summary>
    property Keys: DNICollection<TKey> read get_Keys;
    /// <summary>
    ///   获取一个 ，它包含  中的值。
    /// </summary>
    property Values: DNICollection<TValue> read get_Values;
  end;

  //-------------namespace: System.Collections.Generic----------------
  /// <summary>
  ///   表示可按照索引单独访问的对象的集合。
  /// </summary>
  [DNTypeName('System.Collections.Generic.IList`1')]
  DNIList<T> = interface(DNICollection<T>)
  ['{5C185EDF-6A24-396D-886F-16F49368D2AB}']
  { getter & setter } 

    function get_Item(index: Int32): T;
    procedure set_Item(index: Int32; value: T);

  { methods } 

    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    /// <summary>
    ///   移除位于指定索引处的  项。
    /// </summary>
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: T read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Collections.Generic----------------
  /// <summary>
  ///   表示元素的强类型化只读集合。
  /// </summary>
  [DNTypeName('System.Collections.Generic.IReadOnlyCollection`1')]
  DNIReadOnlyCollection<T> = interface(DNIEnumerable<T>)
  ['{476EF854-57E0-3FEB-908B-5CA9913352C0}']
  { getter & setter } 

    function get_Count: Int32;

  { propertys } 

    /// <summary>
    ///   获取集合中的元素数。
    /// </summary>
    property Count: Int32 read get_Count;
  end;

  //-------------namespace: System.Collections.Generic----------------
  /// <summary>
  ///   表示键/值对的泛型只读集合。
  /// </summary>
  [DNTypeName('System.Collections.Generic.IReadOnlyDictionary`2')]
  DNIReadOnlyDictionary<TKey, TValue> = interface(DNObject)
  ['{A8F1184E-7A7F-3F9F-A938-E036EE41494D}']
  { getter & setter } 

    function get_Item(key: TKey): TValue;
    function get_Keys: DNIEnumerable<TKey>;
    function get_Values: DNIEnumerable<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;

  { propertys } 

    property Item[key: TKey]: TValue read get_Item; default;
    /// <summary>
    ///   获取包含只读字典中的键的可枚举集合。
    /// </summary>
    property Keys: DNIEnumerable<TKey> read get_Keys;
    /// <summary>
    ///   获取包含只读字典中的值的可枚举集合。
    /// </summary>
    property Values: DNIEnumerable<TValue> read get_Values;
  end;

  //-------------namespace: System.Collections.Generic----------------
  /// <summary>
  ///   表示可按照索引进行访问的元素的只读集合。
  /// </summary>
  [DNTypeName('System.Collections.Generic.IReadOnlyList`1')]
  DNIReadOnlyList<T> = interface(DNIReadOnlyCollection<T>)
  ['{9F6980D7-8DC2-39CF-875B-A8A36DDC242D}']
  { getter & setter } 

    function get_Item(index: Int32): T;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
  end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   定义所有非泛型集合的大小、枚举数和同步方法。
  /// </summary>
  [DNTypeName('System.Collections.ICollection')]
  DNICollection = interface(DNIEnumerable)
  ['{DE8DB6F8-D101-3A92-8D1C-E72E5F10E992}']
  { getter & setter } 

    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    /// <summary>
    ///   从特定的  索引处开始，将  的元素复制到一个  中。
    /// </summary>
    procedure CopyTo(&array: DNArray; index: Int32);

  { propertys } 

    /// <summary>
    ///   获取  中包含的元素数。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取可用于同步对  的访问的对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
    /// <summary>
    ///   获取一个值，该值指示是否同步对  的访问（线程安全）。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   表示键/值对的非通用集合。
  /// </summary>
  [DNTypeName('System.Collections.IDictionary')]
  DNIDictionary = interface(DNICollection)
  ['{6A6841DF-3287-3D87-8060-CE0B4C77D2A1}']
  { getter & setter } 

    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;

  { methods } 

    /// <summary>
    ///   确定  对象是否包含具有指定键的元素。
    /// </summary>
    function &Contains(key: DNObject): Boolean;
    /// <summary>
    ///   在  对象中添加一个带有所提供的键和值的元素。
    /// </summary>
    procedure Add(key: DNObject; value: DNObject);
    /// <summary>
    ///   从  对象中移除所有元素。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   返回  对象的  对象。
    /// </summary>
    function GetEnumerator: DNIDictionaryEnumerator;
    /// <summary>
    ///   从  对象中移除具有指定键的元素。
    /// </summary>
    procedure Remove(key: DNObject);

  { propertys } 

    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    /// <summary>
    ///   获取  对象，其中包含的键  对象。
    /// </summary>
    property Keys: DNICollection read get_Keys;
    /// <summary>
    ///   获取  对象，其中包含中的值  对象。
    /// </summary>
    property Values: DNICollection read get_Values;
    /// <summary>
    ///   获取一个值，该值指示是否  对象是只读的。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取一个值，该值指示是否  对象具有固定的大小。
    /// </summary>
    property IsFixedSize: Boolean read get_IsFixedSize;
  end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   表示可按照索引单独访问的对象的非泛型集合。
  /// </summary>
  [DNTypeName('System.Collections.IList')]
  DNIList = interface(DNICollection)
  ['{7BCFA00F-F764-3113-9140-3BBD127A96BB}']
  { getter & setter } 

    function get_Item(index: Int32): DNObject;
    procedure set_Item(index: Int32; value: DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;

  { methods } 

    /// <summary>
    ///   将某项添加到  中。
    /// </summary>
    function Add(value: DNObject): Int32;
    /// <summary>
    ///   确定  是否包含特定值。
    /// </summary>
    function &Contains(value: DNObject): Boolean;
    /// <summary>
    ///   从  中移除所有项。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   确定  中特定项的索引。
    /// </summary>
    function IndexOf(value: DNObject): Int32;
    /// <summary>
    ///   在  中的指定索引处插入一个项。
    /// </summary>
    procedure Insert(index: Int32; value: DNObject);
    /// <summary>
    ///   从  中移除特定对象的第一个匹配项。
    /// </summary>
    procedure Remove(value: DNObject);
    /// <summary>
    ///   移除位于指定索引处的  项。
    /// </summary>
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNObject read get_Item write set_Item; default;
    /// <summary>
    ///   获取一个值，该值指示  是否为只读。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取一个值，该值指示  是否具有固定大小。
    /// </summary>
    property IsFixedSize: Boolean read get_IsFixedSize;
  end;

  //-------------namespace: System.Resources----------------
  /// <summary>
  ///   提供用于从资源文件中读取数据的基本功能。
  /// </summary>
  [DNTypeName('System.Resources.IResourceReader')]
  DNIResourceReader = interface(DNIEnumerable)
  ['{8965A22F-FBA8-36AD-8132-70BBD0DA457D}']
  { methods } 

    /// <summary>
    ///   在释放任何与之关联的资源后关闭资源读取器。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   返回此读取器的资源的字典枚举数。
    /// </summary>
    function GetEnumerator: DNIDictionaryEnumerator;

  end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   支持对非泛型集合的简单迭代。
  /// </summary>
  [DNTypeName('System.Collections.IEnumerator')]
  DNIEnumerator = interface(DNObject)
  ['{496B0ABF-CDEE-11D3-88E8-00902754C43A}']
  { getter & setter } 

    function get_Current: DNObject;

  { methods } 

    /// <summary>
    ///   将枚举数推进到集合的下一个元素。
    /// </summary>
    function MoveNext: Boolean;
    /// <summary>
    ///   将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
    /// </summary>
    procedure Reset;

  { propertys } 

    /// <summary>
    ///   获取集合中位于枚举数当前位置的元素。
    /// </summary>
    property Current: DNObject read get_Current;
  end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   枚举非泛型字典中的元素。
  /// </summary>
  [DNTypeName('System.Collections.IDictionaryEnumerator')]
  DNIDictionaryEnumerator = interface(DNIEnumerator)
  ['{35D574BF-7A4F-3588-8C19-12212A0FE4DC}']
  { getter & setter } 

    function get_Key: DNObject;
    function get_Value: DNObject;
    function get_Entry: DNDictionaryEntry;

  { propertys } 

    /// <summary>
    ///   获取当前字典项的键。
    /// </summary>
    property Key: DNObject read get_Key;
    /// <summary>
    ///   获取当前字典项的值。
    /// </summary>
    property Value: DNObject read get_Value;
    /// <summary>
    ///   获取密钥和当前字典项的值。
    /// </summary>
    property Entry: DNDictionaryEntry read get_Entry;
  end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   定义用于支持比较对象是否相等的方法。
  /// </summary>
  [DNTypeName('System.Collections.IEqualityComparer')]
  DNIEqualityComparer = interface(DNObject)
  ['{AAB7C6EA-CAB0-3ADB-82AA-CF32E29AF238}']
  { methods } 

    /// <summary>
    ///   确定指定的对象是否相等。
    /// </summary>
    function Equals(x: DNObject; y: DNObject): Boolean;
    /// <summary>
    ///   返回指定对象的哈希代码。
    /// </summary>
    function GetHashCode(obj: DNObject): Int32;

  end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   提供了使用自定义哈希函数的对象的哈希代码。
  /// </summary>
  [DNTypeName('System.Collections.IHashCodeProvider')]
  DNIHashCodeProvider = interface(DNObject)
  ['{5D573036-3435-3C5A-AEFF-2B8191082C71}']
  { methods } 

    /// <summary>
    ///   返回指定对象的哈希代码。
    /// </summary>
    function GetHashCode(obj: DNObject): Int32;

  end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   支持集合对象的结构化比较。
  /// </summary>
  [DNTypeName('System.Collections.IStructuralComparable')]
  DNIStructuralComparable = interface(DNObject)
  ['{5F42069E-418C-3D99-802E-D15197F23880}']
  { methods } 

    /// <summary>
    ///   确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。
    /// </summary>
    function CompareTo(other: DNObject; comparer: DNIComparer): Int32;

  end;

  //-------------namespace: System.Collections----------------
  /// <summary>
  ///   定义用于支持比较对象是否在结构上相等的方法。
  /// </summary>
  [DNTypeName('System.Collections.IStructuralEquatable')]
  DNIStructuralEquatable = interface(DNObject)
  ['{F077A941-0EFB-39D2-8DE3-E207BCB7A7DB}']
  { methods } 

    /// <summary>
    ///   确定对象是否等于当前实例在结构上。
    /// </summary>
    function Equals(other: DNObject; comparer: DNIEqualityComparer): Boolean;
    /// <summary>
    ///   返回当前实例的哈希代码。
    /// </summary>
    function GetHashCode(comparer: DNIEqualityComparer): Int32;

  end;

  //-------------namespace: System.Collections----------------
  DNQueueClass = interface(DNObjectClass)
  ['{7F2DFCA4-B83D-443C-814E-9FCC6800B4CF}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类为空，具有默认初始容量，并使用默认的增长因子。
    /// </summary>
    {class} function init: DNQueue; overload;
    /// <summary>
    ///   新实例初始化  类为空，具有指定的初始容量并使用默认的增长因子。
    /// </summary>
    {class} function init(capacity: Int32): DNQueue; overload;
    /// <summary>
    ///   新实例初始化  类为空，具有指定的初始容量并使用指定的增长因子。
    /// </summary>
    {class} function init(capacity: Int32; growFactor: Single): DNQueue; overload;
    /// <summary>
    ///   新实例初始化  类，该类包含从指定集合中复制的元素具有与所复制的元素数相同的初始容量并使用默认的增长因子。
    /// </summary>
    {class} function init(col: DNICollection): DNQueue; overload;

  { static methods } 

    /// <summary>
    ///   返回将包装原始队列并且是线程安全的新的 。
    /// </summary>
    {class} function Synchronized(queue: DNQueue): DNQueue;

  end;

  /// <summary>
  ///   表示对象的先进先出集合。
  /// </summary>
  [DNTypeName('System.Collections.Queue')]
  DNQueue = interface(DNObject)
  ['{7F976B72-4B71-3858-BEE8-8E3A3189A651}']
  { getter & setter } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    /// <summary>
    ///   创建  的浅表副本。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   从  中移除所有对象。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   从指定数组索引开始将  元素复制到现有一维  中。
    /// </summary>
    procedure CopyTo(&array: DNArray; index: Int32);
    /// <summary>
    ///   将对象添加到  的结尾处。
    /// </summary>
    procedure Enqueue(obj: DNObject);
    /// <summary>
    ///   返回循环访问  的枚举数。
    /// </summary>
    function GetEnumerator: DNIEnumerator;
    /// <summary>
    ///   移除并返回位于  开始处的对象。
    /// </summary>
    function Dequeue: DNObject;
    /// <summary>
    ///   返回位于  开始处的对象但不将其移除。
    /// </summary>
    function Peek: DNObject;
    /// <summary>
    ///   确定某元素是否在  中。
    /// </summary>
    function &Contains(obj: DNObject): Boolean;
    /// <summary>
    ///   将  元素复制到新数组。
    /// </summary>
    function ToArray: TArray<DNObject>;
    /// <summary>
    ///   将容量设置为  中元素的实际数目。
    /// </summary>
    procedure TrimToSize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  中包含的元素数。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取一个值，该值指示是否同步对  的访问（线程安全）。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    /// <summary>
    ///   获取可用于同步对  的访问的对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNQueue = class(TDNGenericImport<DNQueueClass, DNQueue>) end;

  //-------------namespace: System.Collections----------------
  DNReadOnlyCollectionBaseClass = interface(DNObjectClass)
  ['{72772F30-4261-4A70-81DC-04F43333E5B4}']
  end;

  /// <summary>
  ///   提供强类型化非泛型只读集合的  基类。
  /// </summary>
  [DNTypeName('System.Collections.ReadOnlyCollectionBase')]
  DNReadOnlyCollectionBase = interface(DNObject)
  ['{B66406BD-746D-3D10-98A1-41D097CF42B7}']
  { getter & setter } 

    function get_Count: Int32;

  { methods } 

    /// <summary>
    ///   返回一个枚举数循环访问  实例。
    /// </summary>
    function GetEnumerator: DNIEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包含中的元素数  实例。
    /// </summary>
    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyCollectionBase = class(TDNGenericImport<DNReadOnlyCollectionBaseClass, DNReadOnlyCollectionBase>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAuthorizationRuleCollectionClass = interface(DNReadOnlyCollectionBaseClass)
  ['{7E11B5A7-643B-4536-9C08-3C373617705D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNAuthorizationRuleCollection;

  end;

  /// <summary>
  ///   表示  对象集合。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AuthorizationRuleCollection')]
  DNAuthorizationRuleCollection = interface(DNReadOnlyCollectionBase)
  ['{06363577-4FAB-38EA-A50C-6B8AF3BC81BE}']
  { getter & setter } 

    function get_Item(index: Int32): DNAuthorizationRule;
    function get_Count: Int32;

  { methods } 

    /// <summary>
    ///   将  对象添加到集合。
    /// </summary>
    procedure AddRule(rule: DNAuthorizationRule);
    /// <summary>
    ///   将集合的内容复制到数组中。
    /// </summary>
    procedure CopyTo(rules: TArray<DNAuthorizationRule>; index: Int32);
    function GetEnumerator: DNIEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNAuthorizationRule read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNAuthorizationRuleCollection = class(TDNGenericImport<DNAuthorizationRuleCollectionClass, DNAuthorizationRuleCollection>) end;

  //-------------namespace: System.Collections----------------
  DNSortedListClass = interface(DNObjectClass)
  ['{87625B82-2199-4646-8F2C-8E99F9A12689}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类为空，具有默认初始容量，并且根据排序  接口由添加到每个键实现  对象。
    /// </summary>
    {class} function init: DNSortedList; overload;
    /// <summary>
    ///   新实例初始化  类为空，具有指定的初始容量，并且根据排序  接口由添加到每个键实现  对象。
    /// </summary>
    {class} function init(initialCapacity: Int32): DNSortedList; overload;
    /// <summary>
    ///   新实例初始化  类为空，具有默认初始容量，并且排序按照指定  接口。
    /// </summary>
    {class} function init(comparer: DNIComparer): DNSortedList; overload;
    /// <summary>
    ///   新实例初始化  类为空，具有指定的初始容量，并且排序按照指定  接口。
    /// </summary>
    {class} function init(comparer: DNIComparer; capacity: Int32): DNSortedList; overload;
    /// <summary>
    ///   新实例初始化  类，该类包含从指定字典复制的元素已复制的元素数相同的初始容量并根据排序  由每个键实现的接口。
    /// </summary>
    {class} function init(d: DNIDictionary): DNSortedList; overload;
    /// <summary>
    ///   新实例初始化  类，该类包含从指定字典复制的元素已复制的元素数相同的初始容量，并且排序按照指定  接口。
    /// </summary>
    {class} function init(d: DNIDictionary; comparer: DNIComparer): DNSortedList; overload;

  { static methods } 

    /// <summary>
    ///   返回的同步 （线程安全） 包装  对象。
    /// </summary>
    {class} function Synchronized(list: DNSortedList): DNSortedList;

  end;

  /// <summary>
  ///   表示键/值对的集合，这些键值对按键排序并可按照键和索引访问。
  /// </summary>
  [DNTypeName('System.Collections.SortedList')]
  DNSortedList = interface(DNObject)
  ['{026CC6D7-34B2-33D5-B551-CA31EB6CE345}']
  { getter & setter } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;
    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);

  { methods } 

    /// <summary>
    ///   添加一个带有指定的键和值的元素  对象。
    /// </summary>
    procedure Add(key: DNObject; value: DNObject);
    /// <summary>
    ///   从  对象中移除所有元素。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   创建的浅表副本  对象。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   确定是否  对象包含特定键。
    /// </summary>
    function &Contains(key: DNObject): Boolean;
    /// <summary>
    ///   确定是否  对象包含特定键。
    /// </summary>
    function ContainsKey(key: DNObject): Boolean;
    /// <summary>
    ///   确定是否  对象包含特定值。
    /// </summary>
    function ContainsValue(value: DNObject): Boolean;
    /// <summary>
    ///   副本  元素到一维  对象，该数组中的指定索引处开始。
    /// </summary>
    procedure CopyTo(&array: DNArray; arrayIndex: Int32);
    /// <summary>
    ///   获取的指定索引处的值  对象。
    /// </summary>
    function GetByIndex(index: Int32): DNObject;
    /// <summary>
    ///   返回  循环访问的对象  对象。
    /// </summary>
    function GetEnumerator: DNIDictionaryEnumerator;
    /// <summary>
    ///   获取指定索引处的键  对象。
    /// </summary>
    function GetKey(index: Int32): DNObject;
    /// <summary>
    ///   获取中的键  对象。
    /// </summary>
    function GetKeyList: DNIList;
    /// <summary>
    ///   获取中的值  对象。
    /// </summary>
    function GetValueList: DNIList;
    /// <summary>
    ///   返回中的指定键的从零开始索引  对象。
    /// </summary>
    function IndexOfKey(key: DNObject): Int32;
    /// <summary>
    ///   返回在指定的值的第一个匹配项的从零开始索引  对象。
    /// </summary>
    function IndexOfValue(value: DNObject): Int32;
    /// <summary>
    ///   移除的指定索引处的元素  对象。
    /// </summary>
    procedure RemoveAt(index: Int32);
    /// <summary>
    ///   移除带有指定键的元素  对象。
    /// </summary>
    procedure Remove(key: DNObject);
    /// <summary>
    ///   替换中的特定索引处的值  对象。
    /// </summary>
    procedure SetByIndex(index: Int32; value: DNObject);
    /// <summary>
    ///   将容量设置中的元素的实际数目  对象。
    /// </summary>
    procedure TrimToSize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置的容量  对象。
    /// </summary>
    property Capacity: Int32 read get_Capacity write set_Capacity;
    /// <summary>
    ///   获取包含中的元素数  对象。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取中的键  对象。
    /// </summary>
    property Keys: DNICollection read get_Keys;
    /// <summary>
    ///   获取中的值  对象。
    /// </summary>
    property Values: DNICollection read get_Values;
    /// <summary>
    ///   获取一个值，该值指示是否  对象是只读的。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取一个值，该值指示是否  对象具有固定的大小。
    /// </summary>
    property IsFixedSize: Boolean read get_IsFixedSize;
    /// <summary>
    ///   获取一个值，该值指示是否访问  对象已同步 （线程安全）。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    /// <summary>
    ///   获取一个对象，可用于同步对访问  对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
  end;

  TDNSortedList = class(TDNGenericImport<DNSortedListClass, DNSortedList>) end;

  //-------------namespace: System.Collections----------------
  DNStackClass = interface(DNObjectClass)
  ['{AED51682-0420-4756-AAF9-EA11C53A104F}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，该实例为空并且具有默认初始容量。
    /// </summary>
    {class} function init: DNStack; overload;
    /// <summary>
    ///   新实例初始化  ，该类为空并具有指定的初始容量或默认的初始容量，则两者中较大。
    /// </summary>
    {class} function init(initialCapacity: Int32): DNStack; overload;
    /// <summary>
    ///   新实例初始化  类，该类包含从指定集合复制的元素并具有相同的初始容量与复制的元素数。
    /// </summary>
    {class} function init(col: DNICollection): DNStack; overload;

  { static methods } 

    /// <summary>
    ///   返回已同步 （线程安全） 包装器 。
    /// </summary>
    {class} function Synchronized(stack: DNStack): DNStack;

  end;

  /// <summary>
  ///   表示对象的简单后进先出 (LIFO) 非泛型集合。
  /// </summary>
  [DNTypeName('System.Collections.Stack')]
  DNStack = interface(DNObject)
  ['{4599202D-460F-3FB7-8A1C-C2CC6ED6C7C8}']
  { getter & setter } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    /// <summary>
    ///   从  中移除所有对象。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   创建  的浅表副本。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   确定某元素是否在  中。
    /// </summary>
    function &Contains(obj: DNObject): Boolean;
    /// <summary>
    ///   副本  到现有一维 , 指定的数组索引处开始。
    /// </summary>
    procedure CopyTo(&array: DNArray; index: Int32);
    /// <summary>
    ///   返回  的 。
    /// </summary>
    function GetEnumerator: DNIEnumerator;
    /// <summary>
    ///   返回的对象顶部的  而不删除它。
    /// </summary>
    function Peek: DNObject;
    /// <summary>
    ///   删除并返回  顶部的对象。
    /// </summary>
    function Pop: DNObject;
    /// <summary>
    ///   在  的顶部插入一个对象。
    /// </summary>
    procedure Push(obj: DNObject);
    /// <summary>
    ///   副本  到新数组。
    /// </summary>
    function ToArray: TArray<DNObject>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  中包含的元素数。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取一个值，该值指示是否同步对  的访问（线程安全）。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    /// <summary>
    ///   获取可用于同步对  的访问的对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNStack = class(TDNGenericImport<DNStackClass, DNStack>) end;

  //-------------namespace: System.Collections----------------
  DNStructuralComparisonsClass = interface(DNObjectClass)
  ['{95226A37-5C67-4FD4-85BC-B03518222561}']
  { static getter & setter } 

    {class} function get_StructuralComparer: DNIComparer;
    {class} function get_StructuralEqualityComparer: DNIEqualityComparer;

  { static propertys } 

    /// <summary>
    ///   获取执行结构比较两个对象的一个预定义的对象。
    /// </summary>
    {class} property StructuralComparer: DNIComparer read get_StructuralComparer;
    /// <summary>
    ///   获取预定义的对象比较的结构相等的两个对象。
    /// </summary>
    {class} property StructuralEqualityComparer: DNIEqualityComparer read get_StructuralEqualityComparer;
  end;

  /// <summary>
  ///   提供用于执行两个集合对象的结构化比较的对象。
  /// </summary>
  [DNTypeName('System.Collections.StructuralComparisons')]
  DNStructuralComparisons = interface(DNObject)
  ['{C255CFED-7B22-3122-AF20-925C66CDCB5B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNStructuralComparisons = class(TDNGenericImport<DNStructuralComparisonsClass, DNStructuralComparisons>) end;

  //-------------namespace: System----------------
  DNConsoleClass = interface(DNObjectClass)
  ['{049A218D-C607-4280-A5ED-12EC36520133}']
  { static getter & setter } 

    {class} function get_IsInputRedirected: Boolean;
    {class} function get_IsOutputRedirected: Boolean;
    {class} function get_IsErrorRedirected: Boolean;
    {class} function get_In: DNTextReader;
    {class} function get_Out: DNTextWriter;
    {class} function get_Error: DNTextWriter;
    {class} function get_InputEncoding: DNEncoding;
    {class} procedure set_InputEncoding(value: DNEncoding);
    {class} function get_OutputEncoding: DNEncoding;
    {class} procedure set_OutputEncoding(value: DNEncoding);
    {class} function get_BackgroundColor: DNConsoleColor;
    {class} procedure set_BackgroundColor(value: DNConsoleColor);
    {class} function get_ForegroundColor: DNConsoleColor;
    {class} procedure set_ForegroundColor(value: DNConsoleColor);
    {class} function get_BufferHeight: Int32;
    {class} procedure set_BufferHeight(value: Int32);
    {class} function get_BufferWidth: Int32;
    {class} procedure set_BufferWidth(value: Int32);
    {class} function get_WindowHeight: Int32;
    {class} procedure set_WindowHeight(value: Int32);
    {class} function get_WindowWidth: Int32;
    {class} procedure set_WindowWidth(value: Int32);
    {class} function get_LargestWindowWidth: Int32;
    {class} function get_LargestWindowHeight: Int32;
    {class} function get_WindowLeft: Int32;
    {class} procedure set_WindowLeft(value: Int32);
    {class} function get_WindowTop: Int32;
    {class} procedure set_WindowTop(value: Int32);
    {class} function get_CursorLeft: Int32;
    {class} procedure set_CursorLeft(value: Int32);
    {class} function get_CursorTop: Int32;
    {class} procedure set_CursorTop(value: Int32);
    {class} function get_CursorSize: Int32;
    {class} procedure set_CursorSize(value: Int32);
    {class} function get_CursorVisible: Boolean;
    {class} procedure set_CursorVisible(value: Boolean);
    {class} function get_Title: string;
    {class} procedure set_Title(value: string);
    {class} function get_KeyAvailable: Boolean;
    {class} function get_NumberLock: Boolean;
    {class} function get_CapsLock: Boolean;
    {class} function get_TreatControlCAsInput: Boolean;
    {class} procedure set_TreatControlCAsInput(value: Boolean);

  { static methods } 

    /// <summary>
    ///   通过控制台扬声器播放提示音。
    /// </summary>
    {class} procedure Beep; overload;
    /// <summary>
    ///   通过控制台扬声器播放具有指定频率和持续时间的提示音。
    /// </summary>
    {class} procedure Beep(frequency: Int32; duration: Int32); overload;
    /// <summary>
    ///   清除控制台缓冲区和相应的控制台窗口的显示信息。
    /// </summary>
    {class} procedure Clear;
    /// <summary>
    ///   将控制台的前景色和背景色设置为默认值。
    /// </summary>
    {class} procedure ResetColor;
    /// <summary>
    ///   将屏幕缓冲区的指定源区域复制到指定的目标区域。
    /// </summary>
    {class} procedure MoveBufferArea(sourceLeft: Int32; sourceTop: Int32; sourceWidth: Int32; sourceHeight: Int32; targetLeft: Int32; targetTop: Int32); overload;
    /// <summary>
    ///   将屏幕缓冲区的指定源区域复制到指定的目标区域。
    /// </summary>
    {class} procedure MoveBufferArea(sourceLeft: Int32; sourceTop: Int32; sourceWidth: Int32; sourceHeight: Int32; targetLeft: Int32; targetTop: Int32; sourceChar: Char; sourceForeColor: DNConsoleColor; sourceBackColor: DNConsoleColor); overload;
    /// <summary>
    ///   将屏幕缓冲区的高度和宽度设置为指定值。
    /// </summary>
    {class} procedure SetBufferSize(width: Int32; height: Int32);
    /// <summary>
    ///   将控制台窗口的高度和宽度设置为指定值。
    /// </summary>
    {class} procedure SetWindowSize(width: Int32; height: Int32);
    /// <summary>
    ///   设置控制台窗口相对于屏幕缓冲区的位置。
    /// </summary>
    {class} procedure SetWindowPosition(left: Int32; top: Int32);
    /// <summary>
    ///   设置光标位置。
    /// </summary>
    {class} procedure SetCursorPosition(left: Int32; top: Int32);
    /// <summary>
    ///   获取用户按下的下一个字符或功能键。
    ///               按下的键显示在控制台窗口中。
    /// </summary>
    {class} function ReadKey: DNConsoleKeyInfo; overload;
    /// <summary>
    ///   获取用户按下的下一个字符或功能键。
    ///               按下的键可以选择显示在控制台窗口中。
    /// </summary>
    {class} function ReadKey(intercept: Boolean): DNConsoleKeyInfo; overload;
    /// <summary>
    ///   获取标准错误流。
    /// </summary>
    {class} function OpenStandardError: DNStream; overload;
    /// <summary>
    ///   获取设置为指定缓冲区大小的标准错误流。
    /// </summary>
    {class} function OpenStandardError(bufferSize: Int32): DNStream; overload;
    /// <summary>
    ///   获取标准输入流。
    /// </summary>
    {class} function OpenStandardInput: DNStream; overload;
    /// <summary>
    ///   获取设置为指定缓冲区大小的标准输入流。
    /// </summary>
    {class} function OpenStandardInput(bufferSize: Int32): DNStream; overload;
    /// <summary>
    ///   获取标准输出流。
    /// </summary>
    {class} function OpenStandardOutput: DNStream; overload;
    /// <summary>
    ///   获取设置为指定缓冲区大小的标准输出流。
    /// </summary>
    {class} function OpenStandardOutput(bufferSize: Int32): DNStream; overload;
    /// <summary>
    ///   将  属性设置为指定的  对象。
    /// </summary>
    {class} procedure SetIn(newIn: DNTextReader);
    /// <summary>
    ///   将  属性设置为指定的  对象。
    /// </summary>
    {class} procedure SetOut(newOut: DNTextWriter);
    /// <summary>
    ///   将  属性设置为指定的  对象。
    /// </summary>
    {class} procedure SetError(newError: DNTextWriter);
    /// <summary>
    ///   从标准输入流读取下一个字符。
    /// </summary>
    {class} function Read: Int32;
    /// <summary>
    ///   从标准输入流读取下一行字符。
    /// </summary>
    {class} function ReadLine: string;
    /// <summary>
    ///   将当前行终止符写入标准输出流。
    /// </summary>
    {class} procedure WriteLine; overload;
    /// <summary>
    ///   将指定布尔值的文本表示形式（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: Boolean); overload;
    /// <summary>
    ///   将指定的 Unicode 字符值（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: Char); overload;
    /// <summary>
    ///   将指定的 Unicode 字符数组（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(buffer: TArray<Char>); overload;
    /// <summary>
    ///   将指定的 Unicode 字符子数组（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    /// <summary>
    ///   将指定的  值的文本表示形式（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: DNDecimal); overload;
    /// <summary>
    ///   将指定的双精度浮点值的文本表示形式（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: Double); overload;
    /// <summary>
    ///   将指定的单精度浮点值的文本表示形式（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: Single); overload;
    /// <summary>
    ///   将指定的 32 位有符号整数值的文本表示（后跟当前行的结束符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: Int32); overload;
    /// <summary>
    ///   将指定的 32 位无符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: UInt32); overload;
    /// <summary>
    ///   将指定的 64 位有符号整数值的文本表示（后跟当前行的结束符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: Int64); overload;
    /// <summary>
    ///   将指定的 64 位无符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: UInt64); overload;
    /// <summary>
    ///   将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: DNObject); overload;
    /// <summary>
    ///   将指定的字符串值（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(value: string); overload;
    /// <summary>
    ///   使用指定的格式信息，将指定对象（后跟当前行终止符）的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(format: string; arg0: DNObject); overload;
    /// <summary>
    ///   使用指定的格式信息，将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    /// <summary>
    ///   使用指定的格式信息，将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    /// <summary>
    ///   使用指定的格式信息，将指定的对象和可变长度参数列表（后跟当前行终止符）的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject; arg3: DNObject); overload;
    /// <summary>
    ///   使用指定的格式信息，将指定的对象数组（后跟当前行终止符）的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    /// <summary>
    ///   使用指定的格式信息将指定对象的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure Write(format: string; arg0: DNObject); overload;
    /// <summary>
    ///   使用指定的格式信息将指定对象的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    /// <summary>
    ///   使用指定的格式信息将指定对象的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    /// <summary>
    ///   使用指定的格式信息将指定的对象和可变长度参数列表的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject; arg3: DNObject); overload;
    /// <summary>
    ///   使用指定的格式信息将指定的对象数组的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure Write(format: string; arg: TArray<DNObject>); overload;
    /// <summary>
    ///   将指定的布尔值的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure Write(value: Boolean); overload;
    /// <summary>
    ///   将指定的 Unicode 字符值写入标准输出流。
    /// </summary>
    {class} procedure Write(value: Char); overload;
    /// <summary>
    ///   将指定的 Unicode 字符数组写入标准输出流。
    /// </summary>
    {class} procedure Write(buffer: TArray<Char>); overload;
    /// <summary>
    ///   将指定的 Unicode 字符子数组写入标准输出流。
    /// </summary>
    {class} procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    /// <summary>
    ///   将指定的双精度浮点值的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure Write(value: Double); overload;
    /// <summary>
    ///   将指定的  值的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure Write(value: DNDecimal); overload;
    /// <summary>
    ///   将指定的单精度浮点值的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure Write(value: Single); overload;
    /// <summary>
    ///   将指定的 32 位有符号整数值的文本表示写入标准输出流。
    /// </summary>
    {class} procedure Write(value: Int32); overload;
    /// <summary>
    ///   将指定的 32 位无符号整数值的文本表示写入标准输出流。
    /// </summary>
    {class} procedure Write(value: UInt32); overload;
    /// <summary>
    ///   将指定的 64 位有符号整数值的文本表示写入标准输出流。
    /// </summary>
    {class} procedure Write(value: Int64); overload;
    /// <summary>
    ///   将指定的 64 位无符号整数值的文本表示写入标准输出流。
    /// </summary>
    {class} procedure Write(value: UInt64); overload;
    /// <summary>
    ///   将指定对象的文本表示形式写入标准输出流。
    /// </summary>
    {class} procedure Write(value: DNObject); overload;
    /// <summary>
    ///   将指定的字符串值写入标准输出流。
    /// </summary>
    {class} procedure Write(value: string); overload;

  { static propertys } 

    /// <summary>
    ///   获取指示输入是否已从标准输入流中重定向的值。
    /// </summary>
    {class} property IsInputRedirected: Boolean read get_IsInputRedirected;
    /// <summary>
    ///   获取指示输出是否已从标准输入流中重定向的值。
    /// </summary>
    {class} property IsOutputRedirected: Boolean read get_IsOutputRedirected;
    /// <summary>
    ///   获取指示错误输出流是否已经从标准错误流被再定位的值。
    /// </summary>
    {class} property IsErrorRedirected: Boolean read get_IsErrorRedirected;
    /// <summary>
    ///   获取标准输入流。
    /// </summary>
    {class} property &In: DNTextReader read get_In;
    /// <summary>
    ///   获取标准输出流。
    /// </summary>
    {class} property &Out: DNTextWriter read get_Out;
    /// <summary>
    ///   获取标准错误输出流。
    /// </summary>
    {class} property Error: DNTextWriter read get_Error;
    /// <summary>
    ///   获取或设置控制台用于读取输入的编码。
    /// </summary>
    {class} property InputEncoding: DNEncoding read get_InputEncoding write set_InputEncoding;
    /// <summary>
    ///   获取或设置控制台用于写入输出的编码。
    /// </summary>
    {class} property OutputEncoding: DNEncoding read get_OutputEncoding write set_OutputEncoding;
    /// <summary>
    ///   获取或设置控制台的背景色。
    /// </summary>
    {class} property BackgroundColor: DNConsoleColor read get_BackgroundColor write set_BackgroundColor;
    /// <summary>
    ///   获取或设置控制台的前景色。
    /// </summary>
    {class} property ForegroundColor: DNConsoleColor read get_ForegroundColor write set_ForegroundColor;
    /// <summary>
    ///   获取或设置缓冲区的高度。
    /// </summary>
    {class} property BufferHeight: Int32 read get_BufferHeight write set_BufferHeight;
    /// <summary>
    ///   获取或设置缓冲区的宽度。
    /// </summary>
    {class} property BufferWidth: Int32 read get_BufferWidth write set_BufferWidth;
    /// <summary>
    ///   获取或设置控制台窗口区域的高度。
    /// </summary>
    {class} property WindowHeight: Int32 read get_WindowHeight write set_WindowHeight;
    /// <summary>
    ///   获取或设置控制台窗口的宽度。
    /// </summary>
    {class} property WindowWidth: Int32 read get_WindowWidth write set_WindowWidth;
    /// <summary>
    ///   根据当前字体和屏幕分辨率获取控制台窗口可能具有的最大列数。
    /// </summary>
    {class} property LargestWindowWidth: Int32 read get_LargestWindowWidth;
    /// <summary>
    ///   根据当前字体和屏幕分辨率获取控制台窗口可能具有的最大行数。
    /// </summary>
    {class} property LargestWindowHeight: Int32 read get_LargestWindowHeight;
    /// <summary>
    ///   获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置。
    /// </summary>
    {class} property WindowLeft: Int32 read get_WindowLeft write set_WindowLeft;
    /// <summary>
    ///   获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置。
    /// </summary>
    {class} property WindowTop: Int32 read get_WindowTop write set_WindowTop;
    /// <summary>
    ///   获取或设置光标在缓冲区中的列位置。
    /// </summary>
    {class} property CursorLeft: Int32 read get_CursorLeft write set_CursorLeft;
    /// <summary>
    ///   获取或设置光标在缓冲区中的行位置。
    /// </summary>
    {class} property CursorTop: Int32 read get_CursorTop write set_CursorTop;
    /// <summary>
    ///   获取或设置光标在字符单元格中的高度。
    /// </summary>
    {class} property CursorSize: Int32 read get_CursorSize write set_CursorSize;
    /// <summary>
    ///   获取或设置一个值，用以指示光标是否可见。
    /// </summary>
    {class} property CursorVisible: Boolean read get_CursorVisible write set_CursorVisible;
    /// <summary>
    ///   获取或设置要显示在控制台标题栏中的标题。
    /// </summary>
    {class} property Title: string read get_Title write set_Title;
    /// <summary>
    ///   获取一个值，该值指示按键操作在输入流中是否可用。
    /// </summary>
    {class} property KeyAvailable: Boolean read get_KeyAvailable;
    /// <summary>
    ///   获取一个值，该值指示 Num Lock 键盘切换键是打开的还是关闭的。
    /// </summary>
    {class} property NumberLock: Boolean read get_NumberLock;
    /// <summary>
    ///   获取一个值，该值指示 Caps Lock 键盘切换键是打开的还是关闭的。
    /// </summary>
    {class} property CapsLock: Boolean read get_CapsLock;
    /// <summary>
    ///   获取或设置一个值，该值指示是将修改键  和控制台键  的组合 (Ctrl+C) 视为普通输入，还是视为由操作系统处理的中断。
    /// </summary>
    {class} property TreatControlCAsInput: Boolean read get_TreatControlCAsInput write set_TreatControlCAsInput;
  end;

  /// <summary>
  ///   表示控制台应用程序的标准输入流、输出流和错误流。
  ///               无法继承此类。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
  /// </summary>
  [DNTypeName('System.Console')]
  DNConsole = interface(DNObject)
  ['{1929386A-E10F-3B73-84A1-F50E745332F0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNConsole = class(TDNGenericImport<DNConsoleClass, DNConsole>) end;

  //-------------namespace: System----------------
  DNConvertClass = interface(DNObjectClass)
  ['{0544C364-53BE-4028-8DE3-11B0061073A3}']
  { static methods } 

    /// <summary>
    ///   返回指定对象的 。
    /// </summary>
    {class} function GetTypeCode(value: DNObject): DNTypeCode;
    /// <summary>
    ///   返回有关指定对象是否为  类型的指示。
    /// </summary>
    {class} function IsDBNull(value: DNObject): Boolean;
    /// <summary>
    ///   返回指定类型的对象，其值等效于指定对象。
    /// </summary>
    {class} function ChangeType(value: DNObject; typeCode: DNTypeCode): DNObject; overload;
    /// <summary>
    ///   返回指定类型的对象，其值等效于指定对象。
    ///               参数提供区域性特定的格式设置信息。
    /// </summary>
    {class} function ChangeType(value: DNObject; typeCode: DNTypeCode; provider: DNIFormatProvider): DNObject; overload;
    /// <summary>
    ///   返回一个指定类型的对象，该对象的值等效于指定的对象。
    /// </summary>
    {class} function ChangeType(value: DNObject; conversionType: DNType): DNObject; overload;
    /// <summary>
    ///   返回指定类型的对象，其值等效于指定对象。
    ///               参数提供区域性特定的格式设置信息。
    /// </summary>
    {class} function ChangeType(value: DNObject; conversionType: DNType; provider: DNIFormatProvider): DNObject; overload;
    /// <summary>
    ///   将指定对象的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: DNObject): Boolean; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定对象的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: DNObject; provider: DNIFormatProvider): Boolean; overload;
    /// <summary>
    ///   返回指定的布尔值；不执行任何实际的转换。
    /// </summary>
    {class} function ToBoolean(value: Boolean): Boolean; overload;
    /// <summary>
    ///   将指定的 8 位有符号整数的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: SByte): Boolean; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToBoolean(value: Char): Boolean; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: Byte): Boolean; overload;
    /// <summary>
    ///   将指定的 16 位有符号整数的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: Int16): Boolean; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: UInt16): Boolean; overload;
    /// <summary>
    ///   将指定的 32 位有符号整数的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: Int32): Boolean; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: UInt32): Boolean; overload;
    /// <summary>
    ///   将指定的 64 位有符号整数的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: Int64): Boolean; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: UInt64): Boolean; overload;
    /// <summary>
    ///   将逻辑值的指定字符串表示形式转换为其等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: string): Boolean; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将逻辑值的指定字符串表示形式转换为其等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: string; provider: DNIFormatProvider): Boolean; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: Single): Boolean; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: Double): Boolean; overload;
    /// <summary>
    ///   将指定的十进制数字的值转换为等效的布尔值。
    /// </summary>
    {class} function ToBoolean(value: DNDecimal): Boolean; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToBoolean(value: DNDateTime): Boolean; overload;
    /// <summary>
    ///   将指定对象的值转换为 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: DNObject): Char; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息将指定对象的值转换为其等效的 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: DNObject; provider: DNIFormatProvider): Char; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToChar(value: Boolean): Char; overload;
    /// <summary>
    ///   返回指定的 Unicode 字符值；不执行任何实际的转换。
    /// </summary>
    {class} function ToChar(value: Char): Char; overload;
    /// <summary>
    ///   将指定的 8 位有符号整数的值转换为它的等效 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: SByte): Char; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为其等效的 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: Byte): Char; overload;
    /// <summary>
    ///   将指定的 16 位有符号整数的值转换为它的等效 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: Int16): Char; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为其等效的 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: UInt16): Char; overload;
    /// <summary>
    ///   将指定的 32 位有符号整数的值转换为它的等效 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: Int32): Char; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为其等效的 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: UInt32): Char; overload;
    /// <summary>
    ///   将指定的 64 位有符号整数的值转换为它的等效 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: Int64): Char; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为其等效的 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: UInt64): Char; overload;
    /// <summary>
    ///   将指定字符串的第一个字符转换为 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: string): Char; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定字符串的第一个字符转换为 Unicode 字符。
    /// </summary>
    {class} function ToChar(value: string; provider: DNIFormatProvider): Char; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToChar(value: Single): Char; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToChar(value: Double): Char; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToChar(value: DNDecimal): Char; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToChar(value: DNDateTime): Char; overload;
    /// <summary>
    ///   将指定对象的值转换为 8 位带符号整数。
    /// </summary>
    {class} function ToSByte(value: DNObject): SByte; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息，将指定对象的值转换为 8 位带符号整数。
    /// </summary>
    {class} function ToSByte(value: DNObject; provider: DNIFormatProvider): SByte; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的 8 位带符号整数。
    /// </summary>
    {class} function ToSByte(value: Boolean): SByte; overload;
    /// <summary>
    ///   返回指定的 8 位有符号整数；不执行实际的转换。
    /// </summary>
    {class} function ToSByte(value: SByte): SByte; overload;
    /// <summary>
    ///   将指定的 Unicode 字符的值转换为等效的 8 位有符号整数。
    /// </summary>
    {class} function ToSByte(value: Char): SByte; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的 8 位有符号整数。
    /// </summary>
    {class} function ToSByte(value: Byte): SByte; overload;
    /// <summary>
    ///   将指定的 16 位带符号整数的值转换为等效的 8 位带符号整数。
    /// </summary>
    {class} function ToSByte(value: Int16): SByte; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的 8 位有符号整数。
    /// </summary>
    {class} function ToSByte(value: UInt16): SByte; overload;
    /// <summary>
    ///   将指定的 32 位有符号整数的值转换为等效的 8 位有符号整数。
    /// </summary>
    {class} function ToSByte(value: Int32): SByte; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的 8 位有符号整数。
    /// </summary>
    {class} function ToSByte(value: UInt32): SByte; overload;
    /// <summary>
    ///   将指定的 64 位有符号整数的值转换为等效的 8 位有符号整数。
    /// </summary>
    {class} function ToSByte(value: Int64): SByte; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的 8 位有符号整数。
    /// </summary>
    {class} function ToSByte(value: UInt64): SByte; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的 8 位带符号整数。
    /// </summary>
    {class} function ToSByte(value: Single): SByte; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的 8 位带符号整数。
    /// </summary>
    {class} function ToSByte(value: Double): SByte; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为等效的 8 位带符号整数。
    /// </summary>
    {class} function ToSByte(value: DNDecimal): SByte; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的 8 位带符号整数。
    /// </summary>
    {class} function ToSByte(value: string): SByte; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 8 位带符号整数。
    /// </summary>
    {class} function ToSByte(value: string; provider: DNIFormatProvider): SByte; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToSByte(value: DNDateTime): SByte; overload;
    /// <summary>
    ///   将指定对象的值转换为 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: DNObject): Byte; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定对象的值转换为 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: DNObject; provider: DNIFormatProvider): Byte; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: Boolean): Byte; overload;
    /// <summary>
    ///   返回指定的 8 位无符号整数；不执行任何实际的转换。
    /// </summary>
    {class} function ToByte(value: Byte): Byte; overload;
    /// <summary>
    ///   将指定 Unicode 字符的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: Char): Byte; overload;
    /// <summary>
    ///   将指定的 8 位有符号整数的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: SByte): Byte; overload;
    /// <summary>
    ///   将指定的 16 位有符号整数的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: Int16): Byte; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: UInt16): Byte; overload;
    /// <summary>
    ///   将指定的 32 位有符号整数的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: Int32): Byte; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: UInt32): Byte; overload;
    /// <summary>
    ///   将指定的 64 位有符号整数的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: Int64): Byte; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: UInt64): Byte; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: Single): Byte; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: Double): Byte; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: DNDecimal): Byte; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: string): Byte; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: string; provider: DNIFormatProvider): Byte; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToByte(value: DNDateTime): Byte; overload;
    /// <summary>
    ///   将指定对象的值转换为 16 位带符号整数。
    /// </summary>
    {class} function ToInt16(value: DNObject): Int16; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息，将指定对象的值转换为 16 位带符号整数。
    /// </summary>
    {class} function ToInt16(value: DNObject; provider: DNIFormatProvider): Int16; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的 16 位带符号整数。
    /// </summary>
    {class} function ToInt16(value: Boolean): Int16; overload;
    /// <summary>
    ///   将指定的 Unicode 字符的值转换为等效的 16 位有符号整数。
    /// </summary>
    {class} function ToInt16(value: Char): Int16; overload;
    /// <summary>
    ///   将指定的 8 位带符号整数的值转换为等效的 16 位带符号整数。
    /// </summary>
    {class} function ToInt16(value: SByte): Int16; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的 16 位有符号整数。
    /// </summary>
    {class} function ToInt16(value: Byte): Int16; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的 16 位有符号整数。
    /// </summary>
    {class} function ToInt16(value: UInt16): Int16; overload;
    /// <summary>
    ///   将指定的 32 位有符号整数的值转换为等效的 16 位有符号整数。
    /// </summary>
    {class} function ToInt16(value: Int32): Int16; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的 16 位有符号整数。
    /// </summary>
    {class} function ToInt16(value: UInt32): Int16; overload;
    /// <summary>
    ///   返回指定的 16 位有符号整数；不执行实际的转换。
    /// </summary>
    {class} function ToInt16(value: Int16): Int16; overload;
    /// <summary>
    ///   将指定的 64 位有符号整数的值转换为等效的 16 位有符号整数。
    /// </summary>
    {class} function ToInt16(value: Int64): Int16; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的 16 位有符号整数。
    /// </summary>
    {class} function ToInt16(value: UInt64): Int16; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的 16 位带符号整数。
    /// </summary>
    {class} function ToInt16(value: Single): Int16; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的 16 位带符号整数。
    /// </summary>
    {class} function ToInt16(value: Double): Int16; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为等效的 16 位带符号整数。
    /// </summary>
    {class} function ToInt16(value: DNDecimal): Int16; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的 16 位带符号整数。
    /// </summary>
    {class} function ToInt16(value: string): Int16; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 16 位带符号整数。
    /// </summary>
    {class} function ToInt16(value: string; provider: DNIFormatProvider): Int16; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToInt16(value: DNDateTime): Int16; overload;
    /// <summary>
    ///   将指定对象的值转换为 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: DNObject): UInt16; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息，将指定对象的值转换为 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: DNObject; provider: DNIFormatProvider): UInt16; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: Boolean): UInt16; overload;
    /// <summary>
    ///   将指定 Unicode 字符的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: Char): UInt16; overload;
    /// <summary>
    ///   将指定的 8 位有符号整数的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: SByte): UInt16; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: Byte): UInt16; overload;
    /// <summary>
    ///   将指定的 16 位有符号整数的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: Int16): UInt16; overload;
    /// <summary>
    ///   将指定的 32 位有符号整数的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: Int32): UInt16; overload;
    /// <summary>
    ///   返回指定的 16 位无符号整数；不执行任何实际的转换。
    /// </summary>
    {class} function ToUInt16(value: UInt16): UInt16; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: UInt32): UInt16; overload;
    /// <summary>
    ///   将指定的 64 位有符号整数的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: Int64): UInt16; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: UInt64): UInt16; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: Single): UInt16; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: Double): UInt16; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: DNDecimal): UInt16; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: string): UInt16; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: string; provider: DNIFormatProvider): UInt16; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToUInt16(value: DNDateTime): UInt16; overload;
    /// <summary>
    ///   将指定对象的值转换为 32 位带符号整数。
    /// </summary>
    {class} function ToInt32(value: DNObject): Int32; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息，将指定对象的值转换为 32 位带符号整数。
    /// </summary>
    {class} function ToInt32(value: DNObject; provider: DNIFormatProvider): Int32; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的 32 位带符号整数。
    /// </summary>
    {class} function ToInt32(value: Boolean): Int32; overload;
    /// <summary>
    ///   将指定的 Unicode 字符的值转换为等效的 32 位有符号整数。
    /// </summary>
    {class} function ToInt32(value: Char): Int32; overload;
    /// <summary>
    ///   将指定的 8 位带符号整数的值转换为等效的 32 位带符号整数。
    /// </summary>
    {class} function ToInt32(value: SByte): Int32; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的 32 位有符号整数。
    /// </summary>
    {class} function ToInt32(value: Byte): Int32; overload;
    /// <summary>
    ///   将指定的 16 位有符号整数的值转换为等效的 32 位有符号整数。
    /// </summary>
    {class} function ToInt32(value: Int16): Int32; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的 32 位有符号整数。
    /// </summary>
    {class} function ToInt32(value: UInt16): Int32; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的 32 位有符号整数。
    /// </summary>
    {class} function ToInt32(value: UInt32): Int32; overload;
    /// <summary>
    ///   返回指定的 32 位有符号整数；不执行实际的转换。
    /// </summary>
    {class} function ToInt32(value: Int32): Int32; overload;
    /// <summary>
    ///   将指定的 64 位有符号整数的值转换为等效的 32 位有符号整数。
    /// </summary>
    {class} function ToInt32(value: Int64): Int32; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的 32 位有符号整数。
    /// </summary>
    {class} function ToInt32(value: UInt64): Int32; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的 32 位带符号整数。
    /// </summary>
    {class} function ToInt32(value: Single): Int32; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的 32 位带符号整数。
    /// </summary>
    {class} function ToInt32(value: Double): Int32; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为等效的 32 位带符号整数。
    /// </summary>
    {class} function ToInt32(value: DNDecimal): Int32; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的 32 位带符号整数。
    /// </summary>
    {class} function ToInt32(value: string): Int32; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 32 位带符号整数。
    /// </summary>
    {class} function ToInt32(value: string; provider: DNIFormatProvider): Int32; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToInt32(value: DNDateTime): Int32; overload;
    /// <summary>
    ///   将指定对象的值转换为 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: DNObject): UInt32; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息，将指定对象的值转换为 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: DNObject; provider: DNIFormatProvider): UInt32; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: Boolean): UInt32; overload;
    /// <summary>
    ///   将指定 Unicode 字符的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: Char): UInt32; overload;
    /// <summary>
    ///   将指定的 8 位有符号整数的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: SByte): UInt32; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: Byte): UInt32; overload;
    /// <summary>
    ///   将指定的 16 位有符号整数的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: Int16): UInt32; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: UInt16): UInt32; overload;
    /// <summary>
    ///   将指定的 32 位有符号整数的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: Int32): UInt32; overload;
    /// <summary>
    ///   返回指定的 32 位无符号整数；不执行任何实际的转换。
    /// </summary>
    {class} function ToUInt32(value: UInt32): UInt32; overload;
    /// <summary>
    ///   将指定的 64 位有符号整数的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: Int64): UInt32; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: UInt64): UInt32; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: Single): UInt32; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: Double): UInt32; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: DNDecimal): UInt32; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: string): UInt32; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: string; provider: DNIFormatProvider): UInt32; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToUInt32(value: DNDateTime): UInt32; overload;
    /// <summary>
    ///   将指定对象的值转换为 64 位带符号整数。
    /// </summary>
    {class} function ToInt64(value: DNObject): Int64; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息，将指定对象的值转换为 64 位带符号整数。
    /// </summary>
    {class} function ToInt64(value: DNObject; provider: DNIFormatProvider): Int64; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的 64 位带符号整数。
    /// </summary>
    {class} function ToInt64(value: Boolean): Int64; overload;
    /// <summary>
    ///   将指定的 Unicode 字符的值转换为等效的 64 位有符号整数。
    /// </summary>
    {class} function ToInt64(value: Char): Int64; overload;
    /// <summary>
    ///   将指定的 8 位带符号整数的值转换为等效的 64 位带符号整数。
    /// </summary>
    {class} function ToInt64(value: SByte): Int64; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的 64 位有符号整数。
    /// </summary>
    {class} function ToInt64(value: Byte): Int64; overload;
    /// <summary>
    ///   将指定的 16 位有符号整数的值转换为等效的 64 位有符号整数。
    /// </summary>
    {class} function ToInt64(value: Int16): Int64; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的 64 位有符号整数。
    /// </summary>
    {class} function ToInt64(value: UInt16): Int64; overload;
    /// <summary>
    ///   将指定的 32 位有符号整数的值转换为等效的 64 位有符号整数。
    /// </summary>
    {class} function ToInt64(value: Int32): Int64; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的 64 位有符号整数。
    /// </summary>
    {class} function ToInt64(value: UInt32): Int64; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的 64 位有符号整数。
    /// </summary>
    {class} function ToInt64(value: UInt64): Int64; overload;
    /// <summary>
    ///   返回指定的 64 位有符号整数；不执行实际的转换。
    /// </summary>
    {class} function ToInt64(value: Int64): Int64; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的 64 位带符号整数。
    /// </summary>
    {class} function ToInt64(value: Single): Int64; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的 64 位带符号整数。
    /// </summary>
    {class} function ToInt64(value: Double): Int64; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为等效的 64 位带符号整数。
    /// </summary>
    {class} function ToInt64(value: DNDecimal): Int64; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的 64 位带符号整数。
    /// </summary>
    {class} function ToInt64(value: string): Int64; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 64 位带符号整数。
    /// </summary>
    {class} function ToInt64(value: string; provider: DNIFormatProvider): Int64; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToInt64(value: DNDateTime): Int64; overload;
    /// <summary>
    ///   将指定对象的值转换为 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: DNObject): UInt64; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息，将指定对象的值转换为 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: DNObject; provider: DNIFormatProvider): UInt64; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: Boolean): UInt64; overload;
    /// <summary>
    ///   将指定 Unicode 字符的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: Char): UInt64; overload;
    /// <summary>
    ///   将指定的 8 位有符号整数的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: SByte): UInt64; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: Byte): UInt64; overload;
    /// <summary>
    ///   将指定的 16 位有符号整数的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: Int16): UInt64; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: UInt16): UInt64; overload;
    /// <summary>
    ///   将指定的 32 位有符号整数的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: Int32): UInt64; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: UInt32): UInt64; overload;
    /// <summary>
    ///   将指定的 64 位有符号整数的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: Int64): UInt64; overload;
    /// <summary>
    ///   返回指定的 64 位无符号整数；不执行任何实际的转换。
    /// </summary>
    {class} function ToUInt64(value: UInt64): UInt64; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: Single): UInt64; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: Double): UInt64; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: DNDecimal): UInt64; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: string): UInt64; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: string; provider: DNIFormatProvider): UInt64; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToUInt64(value: DNDateTime): UInt64; overload;
    /// <summary>
    ///   将指定对象的值转换为单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: DNObject): Single; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定对象的值转换为单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: DNObject; provider: DNIFormatProvider): Single; overload;
    /// <summary>
    ///   将指定的 8 位带符号整数的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: SByte): Single; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: Byte): Single; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToSingle(value: Char): Single; overload;
    /// <summary>
    ///   将指定的 16 位带符号整数的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: Int16): Single; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: UInt16): Single; overload;
    /// <summary>
    ///   将指定的 32 位带符号整数的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: Int32): Single; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: UInt32): Single; overload;
    /// <summary>
    ///   将指定的 64 位带符号整数的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: Int64): Single; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: UInt64): Single; overload;
    /// <summary>
    ///   返回指定的单精度浮点数；不执行任何实际的转换。
    /// </summary>
    {class} function ToSingle(value: Single): Single; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: Double): Single; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: DNDecimal): Single; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: string): Single; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: string; provider: DNIFormatProvider): Single; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(value: Boolean): Single; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToSingle(value: DNDateTime): Single; overload;
    /// <summary>
    ///   将指定对象的值转换为双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: DNObject): Double; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定对象的值转换为双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: DNObject; provider: DNIFormatProvider): Double; overload;
    /// <summary>
    ///   将指定的 8 位带符号整数的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: SByte): Double; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: Byte): Double; overload;
    /// <summary>
    ///   将指定的 16 位带符号整数的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: Int16): Double; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDouble(value: Char): Double; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: UInt16): Double; overload;
    /// <summary>
    ///   将指定的 32 位带符号整数的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: Int32): Double; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: UInt32): Double; overload;
    /// <summary>
    ///   将指定的 64 位带符号整数的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: Int64): Double; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: UInt64): Double; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: Single): Double; overload;
    /// <summary>
    ///   返回指定的双精度浮点数；不执行任何实际的转换。
    /// </summary>
    {class} function ToDouble(value: Double): Double; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: DNDecimal): Double; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: string): Double; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: string; provider: DNIFormatProvider): Double; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(value: Boolean): Double; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDouble(value: DNDateTime): Double; overload;
    /// <summary>
    ///   将指定对象的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: DNObject): DNDecimal; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定对象的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: DNObject; provider: DNIFormatProvider): DNDecimal; overload;
    /// <summary>
    ///   将指定的 8 位带符号整数的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: SByte): DNDecimal; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: Byte): DNDecimal; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDecimal(value: Char): DNDecimal; overload;
    /// <summary>
    ///   将指定的 16 位带符号整数的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: Int16): DNDecimal; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: UInt16): DNDecimal; overload;
    /// <summary>
    ///   将指定的 32 位带符号整数的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: Int32): DNDecimal; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: UInt32): DNDecimal; overload;
    /// <summary>
    ///   将指定的 64 位带符号整数的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: Int64): DNDecimal; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: UInt64): DNDecimal; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: Single): DNDecimal; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: Double): DNDecimal; overload;
    /// <summary>
    ///   将数字的指定字符串表示形式转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: string): DNDecimal; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: string; provider: DNIFormatProvider): DNDecimal; overload;
    /// <summary>
    ///   返回指定的十进制数；不执行任何实际的转换。
    /// </summary>
    {class} function ToDecimal(value: DNDecimal): DNDecimal; overload;
    /// <summary>
    ///   将指定的布尔值转换为等效的十进制数。
    /// </summary>
    {class} function ToDecimal(value: Boolean): DNDecimal; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDecimal(value: DNDateTime): DNDecimal; overload;
    /// <summary>
    ///   返回指定的  对象；不执行任何实际的转换。
    /// </summary>
    {class} function ToDateTime(value: DNDateTime): DNDateTime; overload;
    /// <summary>
    ///   将指定对象的值转换为  对象。
    /// </summary>
    {class} function ToDateTime(value: DNObject): DNDateTime; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息将指定对象的值转换为  对象。
    /// </summary>
    {class} function ToDateTime(value: DNObject; provider: DNIFormatProvider): DNDateTime; overload;
    /// <summary>
    ///   将日期和时间的指定字符串表示形式转换为等效的日期和时间值。
    /// </summary>
    {class} function ToDateTime(value: string): DNDateTime; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将数字的指定字符串表示形式转换为等效的日期和时间。
    /// </summary>
    {class} function ToDateTime(value: string; provider: DNIFormatProvider): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: SByte): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: Byte): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: Int16): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: UInt16): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: Int32): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: UInt32): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: Int64): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: UInt64): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: Boolean): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: Char): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: Single): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: Double): DNDateTime; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    {class} function ToDateTime(value: DNDecimal): DNDateTime; overload;
    /// <summary>
    ///   将指定对象的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: DNObject): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息将指定对象的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: DNObject; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的 Unicode 字符的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Char): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息将指定的 Unicode 字符的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Char; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的 8 位带符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: SByte): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定的 8 位带符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: SByte; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Byte): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定的 8 位无符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Byte; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的 16 位带符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Int16): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定的 16 位带符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Int16; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: UInt16): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定的 16 位无符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: UInt16; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的 32 位带符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Int32): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定的 32 位带符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Int32; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: UInt32): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定的 32 位无符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: UInt32; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的 64 位带符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Int64): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定的 64 位带符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Int64; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: UInt64): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定的 64 位无符号整数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: UInt64; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的单精度浮点数的值转换其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Single): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将指定的单精度浮点数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Single; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Double): string; overload;
    /// <summary>
    ///   将指定的双精度浮点数的值转换其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Double; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的十进制数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: DNDecimal): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息将指定的十进制数的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: DNDecimal; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定的  的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: DNDateTime): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息将指定的  的值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: DNDateTime; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   返回指定的字符串实例；不执行任何实际转换。
    /// </summary>
    {class} function ToString(value: string): string; overload;
    /// <summary>
    ///   返回指定的字符串实例；不执行任何实际转换。
    /// </summary>
    {class} function ToString(value: string; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将指定基数的数字的字符串表示形式转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: string; fromBase: Int32): Byte; overload;
    /// <summary>
    ///   将指定基数的数字的字符串表示形式转换为等效的 8 位有符号整数。
    /// </summary>
    {class} function ToSByte(value: string; fromBase: Int32): SByte; overload;
    /// <summary>
    ///   将指定基数的数字的字符串表示形式转换为等效的 16 位有符号整数。
    /// </summary>
    {class} function ToInt16(value: string; fromBase: Int32): Int16; overload;
    /// <summary>
    ///   将指定基数的数字的字符串表示形式转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: string; fromBase: Int32): UInt16; overload;
    /// <summary>
    ///   将指定基数的数字的字符串表示形式转换为等效的 32 位有符号整数。
    /// </summary>
    {class} function ToInt32(value: string; fromBase: Int32): Int32; overload;
    /// <summary>
    ///   将指定基数的数字的字符串表示形式转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(value: string; fromBase: Int32): UInt32; overload;
    /// <summary>
    ///   将指定基数的数字的字符串表示形式转换为等效的 64 位有符号整数。
    /// </summary>
    {class} function ToInt64(value: string; fromBase: Int32): Int64; overload;
    /// <summary>
    ///   将指定基数的数字的字符串表示形式转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(value: string; fromBase: Int32): UInt64; overload;
    /// <summary>
    ///   将 8 位无符号整数的值转换为其等效的指定基数的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Byte; toBase: Int32): string; overload;
    /// <summary>
    ///   将 16 位带符号整数的值转换为其指定基的等效字符串表示形式。
    /// </summary>
    {class} function ToString(value: Int16; toBase: Int32): string; overload;
    /// <summary>
    ///   将 32 位带符号整数的值转换为其指定基的等效字符串表示形式。
    /// </summary>
    {class} function ToString(value: Int32; toBase: Int32): string; overload;
    /// <summary>
    ///   将 64 位带符号整数的值转换为其指定基的等效字符串表示形式。
    /// </summary>
    {class} function ToString(value: Int64; toBase: Int32): string; overload;
    /// <summary>
    ///   将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式。
    /// </summary>
    {class} function ToBase64String(inArray: TArray<Byte>): string; overload;
    /// <summary>
    ///   将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式。
    ///               参数指定是否在返回值中插入分行符。
    /// </summary>
    {class} function ToBase64String(inArray: TArray<Byte>; options: DNBase64FormattingOptions): string; overload;
    /// <summary>
    ///   将 8 位无符号整数数组的子集转换为其用 Base64 数字编码的等效字符串表示形式。
    ///               参数将子集指定为输入数组中的偏移量和数组中要转换的元素数。
    /// </summary>
    {class} function ToBase64String(inArray: TArray<Byte>; offset: Int32; length: Int32): string; overload;
    /// <summary>
    ///   将 8 位无符号整数数组的子集转换为其用 Base64 数字编码的等效字符串表示形式。
    ///               参数指定作为输入数组中偏移量的子集、数组中要转换的元素数以及是否在返回值中插入分行符。
    /// </summary>
    {class} function ToBase64String(inArray: TArray<Byte>; offset: Int32; length: Int32; options: DNBase64FormattingOptions): string; overload;
    /// <summary>
    ///   将 8 位无符号整数数组的子集转换为用 Base64 数字编码的 Unicode 字符数组的等价子集。
    ///               参数将子集指定为输入和输出数组中的偏移量和输入数组中要转换的元素数。
    /// </summary>
    {class} function ToBase64CharArray(inArray: TArray<Byte>; offsetIn: Int32; length: Int32; outArray: TArray<Char>; offsetOut: Int32): Int32; overload;
    /// <summary>
    ///   将 8 位无符号整数数组的子集转换为用 Base64 数字编码的 Unicode 字符数组的等价子集。
    ///               参数指定作为输入和输出数组中偏移量的子集、输入数组中要转换的元素数以及是否在输出数组中插入分行符。
    /// </summary>
    {class} function ToBase64CharArray(inArray: TArray<Byte>; offsetIn: Int32; length: Int32; outArray: TArray<Char>; offsetOut: Int32; options: DNBase64FormattingOptions): Int32; overload;
    /// <summary>
    ///   将指定的字符串（它将二进制数据编码为 Base64 数字）转换为等效的 8 位无符号整数数组。
    /// </summary>
    {class} function FromBase64String(s: string): TArray<Byte>;
    /// <summary>
    ///   将 Unicode 字符数组（它将二进制数据编码为 Base64 数字）的子集转换为等效的 8 位无符号整数数组。
    ///               参数指定输入数组的子集以及要转换的元素数。
    /// </summary>
    {class} function FromBase64CharArray(inArray: TArray<Char>; offset: Int32; length: Int32): TArray<Byte>;
    /// <summary>
    ///   将指定的布尔值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Boolean): string; overload;
    /// <summary>
    ///   将指定的布尔值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function ToString(value: Boolean; provider: DNIFormatProvider): string; overload;

  end;

  /// <summary>
  ///   将一个基本数据类型转换为另一个基本数据类型。
  /// </summary>
  [DNTypeName('System.Convert')]
  DNConvert = interface(DNObject)
  ['{5CB28930-956D-3ED0-B569-AC70F15470F9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string; overload;

  end;

  TDNConvert = class(TDNGenericImport<DNConvertClass, DNConvert>) end;

  //-------------namespace: System----------------
  DNDBNullClass = interface(DNObjectClass)
  ['{23B538D3-1444-4DAC-8A9B-F432A5D908AD}']
  end;

  /// <summary>
  ///   表示不存在的值。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.DBNull')]
  DNDBNull = interface(DNObject)
  ['{8C1A4524-3CEB-3436-B449-CAC456ECAB09}']
  { methods } 

    /// <summary>
    ///   实现  接口，并返回序列化所需的数据  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   返回一个空字符串 ()。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   返回使用指定一个空字符串 。
    /// </summary>
    function ToString(provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   获取  值 。
    /// </summary>
    function GetTypeCode: DNTypeCode;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNDBNull = class(TDNGenericImport<DNDBNullClass, DNDBNull>) end;

  //-------------namespace: System----------------
  DNDelegateClass = interface(DNObjectClass)
  ['{61C972D8-D36B-4EC4-93EA-0D111D19FDE4}']
  { static methods } 

    /// <summary>
    ///   将两个委托的调用列表连接在一起。
    /// </summary>
    {class} function Combine(a: DNDelegate; b: DNDelegate): DNDelegate; overload;
    /// <summary>
    ///   将委托数组的调用列表连接在一起。
    /// </summary>
    {class} function Combine(delegates: TArray<DNDelegate>): DNDelegate; overload;
    /// <summary>
    ///   从一个委托的调用列表中移除另一个委托的最后一个调用列表。
    /// </summary>
    {class} function Remove(source: DNDelegate; value: DNDelegate): DNDelegate;
    /// <summary>
    ///   从一个委托的调用列表中移除另一个委托的所有调用列表。
    /// </summary>
    {class} function RemoveAll(source: DNDelegate; value: DNDelegate): DNDelegate;
    /// <summary>
    ///   创建指定类型的委托，该委托表示要对指定的类实例调用的指定实例方法。
    /// </summary>
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string): DNDelegate; overload;
    /// <summary>
    ///   创建指定类型的委托，该委托表示要按指定的大小写敏感度对指定类实例调用的指定实例方法。
    /// </summary>
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string; ignoreCase: Boolean): DNDelegate; overload;
    /// <summary>
    ///   使用用于指定是否区分大小写的值和针对绑定失败的指定行为，创建指定类型的委托，该委托表示要对指定类实例调用的指定实例方法。
    /// </summary>
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string; ignoreCase: Boolean; throwOnBindFailure: Boolean): DNDelegate; overload;
    /// <summary>
    ///   创建指定类型的委托，该委托表示指定类的指定静态方法。
    /// </summary>
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string): DNDelegate; overload;
    /// <summary>
    ///   使用用于指定是否区分大小写的值创建指定类型的委托，该委托表示指定类的指定静态方法。
    /// </summary>
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string; ignoreCase: Boolean): DNDelegate; overload;
    /// <summary>
    ///   使用用于指定是否区分大小写的值和针对绑定失败的指定行为，创建指定类型的委托，该委托表示指定类的指定静态方法。
    /// </summary>
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string; ignoreCase: Boolean; throwOnBindFailure: Boolean): DNDelegate; overload;
    /// <summary>
    ///   使用针对绑定失败的指定行为，创建用于表示指定静态方法的指定类型的委托。
    /// </summary>
    {class} function CreateDelegate(&type: DNType; method: DNMethodInfo; throwOnBindFailure: Boolean): DNDelegate; overload;
    /// <summary>
    ///   使用指定的第一个参数和针对绑定失败的指定行为，创建表示指定的静态方法或实例方法的指定类型的委托。
    /// </summary>
    {class} function CreateDelegate(&type: DNType; firstArgument: DNObject; method: DNMethodInfo; throwOnBindFailure: Boolean): DNDelegate; overload;
    /// <summary>
    ///   创建指定类型的委托以表示指定的静态方法。
    /// </summary>
    {class} function CreateDelegate(&type: DNType; method: DNMethodInfo): DNDelegate; overload;
    /// <summary>
    ///   使用指定的第一个参数创建指定类型的委托，该委托表示指定的静态方法或实例方法。
    /// </summary>
    {class} function CreateDelegate(&type: DNType; firstArgument: DNObject; method: DNMethodInfo): DNDelegate; overload;

  end;

  /// <summary>
  ///   表示委托，委托是一种数据结构，它引用静态方法或引用类实例及该类的实例方法。
  /// </summary>
  [DNTypeName('System.Delegate')]
  DNDelegate = interface(DNObject)
  ['{03CE85F6-37CB-3588-B3DB-D5628BB1335B}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    /// <summary>
    ///   动态调用（后期绑定）由当前委托所表示的方法。
    /// </summary>
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    /// <summary>
    ///   确定指定的对象和当前委托的类型是否相同，是否共享相同的目标、方法和调用列表。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回委托的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回委托的调用列表。
    /// </summary>
    function GetInvocationList: TArray<DNDelegate>;
    /// <summary>
    ///   创建委托的浅表副本。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   不支持。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取委托所表示的方法。
    /// </summary>
    property Method: DNMethodInfo read get_Method;
    /// <summary>
    ///   获取类实例，当前委托将对其调用实例方法。
    /// </summary>
    property Target: DNObject read get_Target;
  end;

  TDNDelegate = class(TDNGenericImport<DNDelegateClass, DNDelegate>) end;

  //-------------namespace: System----------------
  DNMulticastDelegateClass = interface(DNDelegateClass)
  ['{ECEF608F-9A25-4163-BF2E-189FA7DF4B52}']
  end;

  /// <summary>
  ///   表示多路广播委托；即，其调用列表中可以拥有多个元素的委托。
  /// </summary>
  [DNTypeName('System.MulticastDelegate')]
  DNMulticastDelegate = interface(DNDelegate)
  ['{198FFBDE-A6DB-3CC3-AB15-FBBB7250D624}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    /// <summary>
    ///   填充  对象序列化此实例所需的所有数据。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   确定此多路广播委托和指定的对象是否相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   按照调用顺序返回此多路广播委托的调用列表。
    /// </summary>
    function GetInvocationList: TArray<DNDelegate>;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNMulticastDelegate = class(TDNGenericImport<DNMulticastDelegateClass, DNMulticastDelegate>) end;

  //-------------namespace: System----------------
  DNActionClass = interface(DNMulticastDelegateClass)
  ['{C9429F17-8538-494E-AC29-C13895770564}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNAction;

  end;

  /// <summary>
  ///   封装一个方法，该方法不具有参数且不返回值。
  /// </summary>
  [DNTypeName('System.Action')]
  DNAction = interface(DNMulticastDelegate)
  ['{B9A1A55F-5233-3E10-B44C-A8A141E9933E}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke;
    function BeginInvoke(callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNAction = class(TDNGenericImport<DNActionClass, DNAction>) end;

  //-------------namespace: System----------------
  DNAppDomainInitializerClass = interface(DNMulticastDelegateClass)
  ['{5EEE1B0E-CD5F-4FC6-8353-325F9ED9CBF5}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNAppDomainInitializer;

  end;

  /// <summary>
  ///   表示要在初始化应用程序域时调用的回调方法。
  /// </summary>
  [DNTypeName('System.AppDomainInitializer')]
  DNAppDomainInitializer = interface(DNMulticastDelegate)
  ['{FA525B27-3D69-3116-8D15-0064F6299548}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(args: TArray<string>);
    function BeginInvoke(args: TArray<string>; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNAppDomainInitializer = class(TDNGenericImport<DNAppDomainInitializerClass, DNAppDomainInitializer>) end;

  //-------------namespace: System----------------
  DNAssemblyLoadEventHandlerClass = interface(DNMulticastDelegateClass)
  ['{993E0BE1-19D6-436E-9ED9-B1D29D2397C5}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNAssemblyLoadEventHandler;

  end;

  /// <summary>
  ///   表示处理的方法事件。
  /// </summary>
  [DNTypeName('System.AssemblyLoadEventHandler')]
  DNAssemblyLoadEventHandler = interface(DNMulticastDelegate)
  ['{2E130DC8-564E-397F-A628-397709DA52E9}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(sender: DNObject; args: DNAssemblyLoadEventArgs);
    function BeginInvoke(sender: DNObject; args: DNAssemblyLoadEventArgs; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNAssemblyLoadEventHandler = class(TDNGenericImport<DNAssemblyLoadEventHandlerClass, DNAssemblyLoadEventHandler>) end;

  //-------------namespace: System----------------
  DNAsyncCallbackClass = interface(DNMulticastDelegateClass)
  ['{DD9FFF1B-16ED-41B9-B3A8-E2E19A63FEA9}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNAsyncCallback;

  end;

  /// <summary>
  ///   引用在相应异步操作完成时调用的方法。
  /// </summary>
  [DNTypeName('System.AsyncCallback')]
  DNAsyncCallback = interface(DNMulticastDelegate)
  ['{B2A87DDB-5DAB-395F-B7BE-AD83058FB516}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(ar: DNIAsyncResult);
    function BeginInvoke(ar: DNIAsyncResult; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNAsyncCallback = class(TDNGenericImport<DNAsyncCallbackClass, DNAsyncCallback>) end;

  //-------------namespace: System----------------
  DNConsoleCancelEventHandlerClass = interface(DNMulticastDelegateClass)
  ['{C5DAAFF7-5D7B-4842-B352-5B7A3955DCA3}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNConsoleCancelEventHandler;

  end;

  /// <summary>
  ///   表示将用来处理  的  事件的方法。
  /// </summary>
  [DNTypeName('System.ConsoleCancelEventHandler')]
  DNConsoleCancelEventHandler = interface(DNMulticastDelegate)
  ['{CB118F81-8AF0-3707-AFA4-FABBDAC9CB80}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(sender: DNObject; e: DNConsoleCancelEventArgs);
    function BeginInvoke(sender: DNObject; e: DNConsoleCancelEventArgs; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNConsoleCancelEventHandler = class(TDNGenericImport<DNConsoleCancelEventHandlerClass, DNConsoleCancelEventHandler>) end;

  //-------------namespace: System----------------
  DNCrossAppDomainDelegateClass = interface(DNMulticastDelegateClass)
  ['{25DE3E58-C055-4FD7-8FFC-7F9FF61184C7}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNCrossAppDomainDelegate;

  end;

  /// <summary>
  ///   使用跨应用程序域调用。
  /// </summary>
  [DNTypeName('System.CrossAppDomainDelegate')]
  DNCrossAppDomainDelegate = interface(DNMulticastDelegate)
  ['{496219C1-3FB7-3DCF-8AF7-D56032F7891F}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke;
    function BeginInvoke(callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNCrossAppDomainDelegate = class(TDNGenericImport<DNCrossAppDomainDelegateClass, DNCrossAppDomainDelegate>) end;

  //-------------namespace: System----------------
  DNEventHandlerClass = interface(DNMulticastDelegateClass)
  ['{34E4C098-704B-455C-B06B-40329514D472}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNEventHandler;

  end;

  /// <summary>
  ///   表示将用于处理不具有事件数据的事件的方法。
  /// </summary>
  [DNTypeName('System.EventHandler')]
  DNEventHandler = interface(DNMulticastDelegate)
  ['{DCA836DE-C23D-334C-86B7-8385BE47030D}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function BeginInvoke(sender: DNObject; e: DNEventArgs; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure Invoke(sender: DNObject; e: DNEventArgs);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNEventHandler = class(TDNGenericImport<DNEventHandlerClass, DNEventHandler>) end;

  //-------------namespace: System.Reflection----------------
  DNMemberFilterClass = interface(DNMulticastDelegateClass)
  ['{CB9CFE68-C8C9-4355-9849-8C8381366B7C}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNMemberFilter;

  end;

  /// <summary>
  ///   表示用于筛选以  对象数组表示的成员列表的委托。
  /// </summary>
  [DNTypeName('System.Reflection.MemberFilter')]
  DNMemberFilter = interface(DNMulticastDelegate)
  ['{F52FD74C-ADA6-38CC-AE0F-693AFB9B9A8F}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function Invoke(m: DNMemberInfo; filterCriteria: DNObject): Boolean;
    function BeginInvoke(m: DNMemberInfo; filterCriteria: DNObject; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    function EndInvoke(result: DNIAsyncResult): Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNMemberFilter = class(TDNGenericImport<DNMemberFilterClass, DNMemberFilter>) end;

  //-------------namespace: System.Reflection----------------
  DNModuleResolveEventHandlerClass = interface(DNMulticastDelegateClass)
  ['{B4D72651-0BD3-44F4-AE65-CF27C226AAD5}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNModuleResolveEventHandler;

  end;

  /// <summary>
  ///   表示将处理的方法  事件 。
  /// </summary>
  [DNTypeName('System.Reflection.ModuleResolveEventHandler')]
  DNModuleResolveEventHandler = interface(DNMulticastDelegate)
  ['{AAAA10C6-9902-3DBB-B173-EBA1EBA2CD5E}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function Invoke(sender: DNObject; e: DNResolveEventArgs): DNModule;
    function BeginInvoke(sender: DNObject; e: DNResolveEventArgs; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    function EndInvoke(result: DNIAsyncResult): DNModule;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNModuleResolveEventHandler = class(TDNGenericImport<DNModuleResolveEventHandlerClass, DNModuleResolveEventHandler>) end;

  //-------------namespace: System.Reflection----------------
  DNTypeFilterClass = interface(DNMulticastDelegateClass)
  ['{AEFDFD1D-DBC0-45BE-AEB3-437A944BD1BF}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNTypeFilter;

  end;

  /// <summary>
  ///   筛选  对象数组中表示的类。
  /// </summary>
  [DNTypeName('System.Reflection.TypeFilter')]
  DNTypeFilter = interface(DNMulticastDelegate)
  ['{37E24F25-5EF0-366F-9D0F-F7B9E3EDFFD9}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function Invoke(m: DNType; filterCriteria: DNObject): Boolean;
    function BeginInvoke(m: DNType; filterCriteria: DNObject; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    function EndInvoke(result: DNIAsyncResult): Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNTypeFilter = class(TDNGenericImport<DNTypeFilterClass, DNTypeFilter>) end;

  //-------------namespace: System----------------
  DNResolveEventHandlerClass = interface(DNMulticastDelegateClass)
  ['{3DB99EFE-8E8D-4E3A-84A8-339516310940}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNResolveEventHandler;

  end;

  /// <summary>
  ///   表示处理的方法的 , ，, ，或  事件 。
  /// </summary>
  [DNTypeName('System.ResolveEventHandler')]
  DNResolveEventHandler = interface(DNMulticastDelegate)
  ['{A4B8C851-941A-3DEE-BD08-D9E2EED101C5}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function Invoke(sender: DNObject; args: DNResolveEventArgs): DNAssembly;
    function BeginInvoke(sender: DNObject; args: DNResolveEventArgs; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    function EndInvoke(result: DNIAsyncResult): DNAssembly;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNResolveEventHandler = class(TDNGenericImport<DNResolveEventHandlerClass, DNResolveEventHandler>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeHelpers_CleanupCodeClass = interface(DNMulticastDelegateClass)
  ['{E2B1E6AB-9048-4300-AD2F-15B4FCA2C385}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNRuntimeHelpers_CleanupCode;

  end;

  /// <summary>
  ///   表示要在异常发生时运行的方法。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode')]
  DNRuntimeHelpers_CleanupCode = interface(DNMulticastDelegate)
  ['{181E8A69-44E5-3F54-81CD-23CFD78C0791}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function BeginInvoke(userData: DNObject; exceptionThrown: Boolean; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure Invoke(userData: DNObject; exceptionThrown: Boolean);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNRuntimeHelpers_CleanupCode = class(TDNGenericImport<DNRuntimeHelpers_CleanupCodeClass, DNRuntimeHelpers_CleanupCode>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeHelpers_TryCodeClass = interface(DNMulticastDelegateClass)
  ['{B957895A-2646-4D4D-BA4A-4682BEA37A15}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNRuntimeHelpers_TryCode;

  end;

  /// <summary>
  ///   表示应在 try 块中运行的代码的委托...
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers+TryCode')]
  DNRuntimeHelpers_TryCode = interface(DNMulticastDelegate)
  ['{54836FE7-E1CD-310E-95B3-0BE8C520BE56}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(userData: DNObject);
    function BeginInvoke(userData: DNObject; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNRuntimeHelpers_TryCode = class(TDNGenericImport<DNRuntimeHelpers_TryCodeClass, DNRuntimeHelpers_TryCode>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNObjectCreationDelegateClass = interface(DNMulticastDelegateClass)
  ['{382452DE-EE10-4105-A67E-E48C8390BA97}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNObjectCreationDelegate;

  end;

  /// <summary>
  ///   创建 COM 对象。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ObjectCreationDelegate')]
  DNObjectCreationDelegate = interface(DNMulticastDelegate)
  ['{8A21DF64-F31A-306F-9DB8-0DFA164ED9EE}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function Invoke(aggregator: IntPtr): IntPtr;
    function BeginInvoke(aggregator: IntPtr; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    function EndInvoke(result: DNIAsyncResult): IntPtr;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNObjectCreationDelegate = class(TDNGenericImport<DNObjectCreationDelegateClass, DNObjectCreationDelegate>) end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  DNCrossContextDelegateClass = interface(DNMulticastDelegateClass)
  ['{D5951292-0A0A-4B88-8B00-C014BECB32D2}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNCrossContextDelegate;

  end;

  /// <summary>
  ///   表示将处理的另一个上下文中的某些代码执行的请求的方法。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.CrossContextDelegate')]
  DNCrossContextDelegate = interface(DNMulticastDelegate)
  ['{8DE7F105-07F6-31A8-8469-BAFCDC5024B8}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke;
    function BeginInvoke(callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNCrossContextDelegate = class(TDNGenericImport<DNCrossContextDelegateClass, DNCrossContextDelegate>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNHeaderHandlerClass = interface(DNMulticastDelegateClass)
  ['{2B52EF40-303D-4C49-A4D0-4C3CFC1D0DB8}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNHeaderHandler;

  end;

  /// <summary>
  ///   表示将处理在反序列化期间处理流上的标头的方法。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.HeaderHandler')]
  DNHeaderHandler = interface(DNMulticastDelegate)
  ['{CC4C81B2-365E-3BA5-B374-A949B727E929}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function Invoke(headers: TArray<DNHeader>): DNObject;
    function BeginInvoke(headers: TArray<DNHeader>; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    function EndInvoke(result: DNIAsyncResult): DNObject;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNHeaderHandler = class(TDNGenericImport<DNHeaderHandlerClass, DNHeaderHandler>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNMessageSurrogateFilterClass = interface(DNMulticastDelegateClass)
  ['{BC03D004-BF1C-4C28-AE9D-3CD39242D045}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNMessageSurrogateFilter;

  end;

  /// <summary>
  ///   确定是否  类应该忽略特定  属性在创建时  为  类。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.MessageSurrogateFilter')]
  DNMessageSurrogateFilter = interface(DNMulticastDelegate)
  ['{C48CA9BC-BBDB-3059-AEC8-763CF7E9A88C}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function Invoke(key: string; value: DNObject): Boolean;
    function BeginInvoke(key: string; value: DNObject; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    function EndInvoke(result: DNIAsyncResult): Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNMessageSurrogateFilter = class(TDNGenericImport<DNMessageSurrogateFilterClass, DNMessageSurrogateFilter>) end;

  //-------------namespace: System.Threading----------------
  DNContextCallbackClass = interface(DNMulticastDelegateClass)
  ['{62FDDBBF-17E7-49AD-8C95-63307DF709B1}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNContextCallback;

  end;

  /// <summary>
  ///   表示要在新的上下文中调用的方法。
  /// </summary>
  [DNTypeName('System.Threading.ContextCallback')]
  DNContextCallback = interface(DNMulticastDelegate)
  ['{5B193863-A73E-3EC3-80D0-35B36E3CF4ED}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(state: DNObject);
    function BeginInvoke(state: DNObject; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNContextCallback = class(TDNGenericImport<DNContextCallbackClass, DNContextCallback>) end;

  //-------------namespace: System.Threading----------------
  DNIOCompletionCallbackClass = interface(DNMulticastDelegateClass)
  ['{C72E9756-AA38-46DC-9A94-E887CD1C6674}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNIOCompletionCallback;

  end;

  /// <summary>
  ///   将在线程池上的 I/O 操作完成时收到错误代码的字节数和重叠的值类型。
  /// </summary>
  [DNTypeName('System.Threading.IOCompletionCallback')]
  DNIOCompletionCallback = interface(DNMulticastDelegate)
  ['{8A937E3B-9C07-3D4D-B50A-4F4F3C85317C}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(errorCode: UInt32; numBytes: UInt32; var pOVERLAP: DNNativeOverlapped);
    function BeginInvoke(errorCode: UInt32; numBytes: UInt32; var pOVERLAP: DNNativeOverlapped; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNIOCompletionCallback = class(TDNGenericImport<DNIOCompletionCallbackClass, DNIOCompletionCallback>) end;

  //-------------namespace: System.Threading----------------
  DNParameterizedThreadStartClass = interface(DNMulticastDelegateClass)
  ['{F8DA03BD-1BC6-4F05-A2DA-D4D7013BDF99}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNParameterizedThreadStart;

  end;

  /// <summary>
  ///   表示在  上执行的方法。
  /// </summary>
  [DNTypeName('System.Threading.ParameterizedThreadStart')]
  DNParameterizedThreadStart = interface(DNMulticastDelegate)
  ['{0A16EEF2-0D00-34B0-968D-F6DCCC9DDA95}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(obj: DNObject);
    function BeginInvoke(obj: DNObject; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNParameterizedThreadStart = class(TDNGenericImport<DNParameterizedThreadStartClass, DNParameterizedThreadStart>) end;

  //-------------namespace: System.Threading----------------
  DNSendOrPostCallbackClass = interface(DNMulticastDelegateClass)
  ['{D7BA4404-24BF-4693-A30B-3AAECDA2D6EF}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNSendOrPostCallback;

  end;

  /// <summary>
  ///   表示在消息即将被调度到同步上下文时要调用的方法。
  /// </summary>
  [DNTypeName('System.Threading.SendOrPostCallback')]
  DNSendOrPostCallback = interface(DNMulticastDelegate)
  ['{D75D384C-68A5-37DF-B959-AFE5F25C5351}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(state: DNObject);
    function BeginInvoke(state: DNObject; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNSendOrPostCallback = class(TDNGenericImport<DNSendOrPostCallbackClass, DNSendOrPostCallback>) end;

  //-------------namespace: System.Threading----------------
  DNThreadStartClass = interface(DNMulticastDelegateClass)
  ['{45274351-6307-4023-9580-00DA18D573C9}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNThreadStart;

  end;

  /// <summary>
  ///   表示对执行的方法 。
  /// </summary>
  [DNTypeName('System.Threading.ThreadStart')]
  DNThreadStart = interface(DNMulticastDelegate)
  ['{E7AC1E4D-35DB-3432-A032-E94C012B2D39}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke;
    function BeginInvoke(callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNThreadStart = class(TDNGenericImport<DNThreadStartClass, DNThreadStart>) end;

  //-------------namespace: System.Threading----------------
  DNTimerCallbackClass = interface(DNMulticastDelegateClass)
  ['{A4734159-BB3B-406D-852D-02F4F723ECFE}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNTimerCallback;

  end;

  /// <summary>
  ///   表示处理来自调用的方法 。
  /// </summary>
  [DNTypeName('System.Threading.TimerCallback')]
  DNTimerCallback = interface(DNMulticastDelegate)
  ['{DDF7BA7F-4B7C-378D-A153-6285B84C6593}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(state: DNObject);
    function BeginInvoke(state: DNObject; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNTimerCallback = class(TDNGenericImport<DNTimerCallbackClass, DNTimerCallback>) end;

  //-------------namespace: System.Threading----------------
  DNWaitCallbackClass = interface(DNMulticastDelegateClass)
  ['{8596C572-3F54-4E52-B1E7-41FA16EDFDCA}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNWaitCallback;

  end;

  /// <summary>
  ///   表示要由线程池线程执行的回调方法。
  /// </summary>
  [DNTypeName('System.Threading.WaitCallback')]
  DNWaitCallback = interface(DNMulticastDelegate)
  ['{D8E04CC2-F4F5-367D-A23F-F71AFF4F14F3}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(state: DNObject);
    function BeginInvoke(state: DNObject; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNWaitCallback = class(TDNGenericImport<DNWaitCallbackClass, DNWaitCallback>) end;

  //-------------namespace: System.Threading----------------
  DNWaitOrTimerCallbackClass = interface(DNMulticastDelegateClass)
  ['{D619C0BA-7735-404C-A50E-6021AFDF0DE7}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNWaitOrTimerCallback;

  end;

  /// <summary>
  ///   表示一个方法时要调用  发出信号或超时。
  /// </summary>
  [DNTypeName('System.Threading.WaitOrTimerCallback')]
  DNWaitOrTimerCallback = interface(DNMulticastDelegate)
  ['{3C8C9F02-2C23-39FF-AC7B-CD0EE1D14A79}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(state: DNObject; timedOut: Boolean);
    function BeginInvoke(state: DNObject; timedOut: Boolean; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNWaitOrTimerCallback = class(TDNGenericImport<DNWaitOrTimerCallbackClass, DNWaitOrTimerCallback>) end;

  //-------------namespace: System----------------
  DNUnhandledExceptionEventHandlerClass = interface(DNMulticastDelegateClass)
  ['{B5394D2E-96B9-4CD2-874F-6945C09EF7BF}']
  { constructors } 

    {class} function init(&object: DNObject; method: IntPtr): DNUnhandledExceptionEventHandler;

  end;

  /// <summary>
  ///   表示将处理事件的方法，该事件由应用程序域不处理的异常引发。
  /// </summary>
  [DNTypeName('System.UnhandledExceptionEventHandler')]
  DNUnhandledExceptionEventHandler = interface(DNMulticastDelegate)
  ['{DB4D2D94-3FA3-36F5-B22E-A00FF22F08BD}']
  { getter & setter } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure Invoke(sender: DNObject; e: DNUnhandledExceptionEventArgs);
    function BeginInvoke(sender: DNObject; e: DNUnhandledExceptionEventArgs; callback: DNAsyncCallback; &object: DNObject): DNIAsyncResult;
    procedure EndInvoke(result: DNIAsyncResult);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNUnhandledExceptionEventHandler = class(TDNGenericImport<DNUnhandledExceptionEventHandlerClass, DNUnhandledExceptionEventHandler>) end;

  //-------------namespace: System.Deployment.Internal----------------
  DNInternalActivationContextHelperClass = interface(DNObjectClass)
  ['{9C8E28A5-3DF3-4ED1-BD4A-E3087AABFCBA}']
  { static methods } 

    /// <summary>
    ///   获取清单的文件的应用程序内容  对象。
    /// </summary>
    {class} function GetActivationContextData(appInfo: DNActivationContext): DNObject;
    /// <summary>
    ///   获取在最后一个部署组件的清单  对象。
    /// </summary>
    {class} function GetApplicationComponentManifest(appInfo: DNActivationContext): DNObject;
    /// <summary>
    ///   获取清单中的第一个部署组件的  对象。
    /// </summary>
    {class} function GetDeploymentComponentManifest(appInfo: DNActivationContext): DNObject;
    /// <summary>
    ///   通知  以准备要运行。
    /// </summary>
    {class} procedure PrepareForExecution(appInfo: DNActivationContext);
    /// <summary>
    ///   获取一个值，该值指示这是否第一个记录此  对象已运行。
    /// </summary>
    {class} function IsFirstRun(appInfo: DNActivationContext): Boolean;
    /// <summary>
    ///   获取一个字节数组，包含应用程序清单的原始内容...
    /// </summary>
    {class} function GetApplicationManifestBytes(appInfo: DNActivationContext): TArray<Byte>;
    /// <summary>
    ///   获取包含部署清单的原始内容的字节数组。
    /// </summary>
    {class} function GetDeploymentManifestBytes(appInfo: DNActivationContext): TArray<Byte>;

  end;

  /// <summary>
  ///   将数据从提供的访问  对象。
  /// </summary>
  [DNTypeName('System.Deployment.Internal.InternalActivationContextHelper')]
  DNInternalActivationContextHelper = interface(DNObject)
  ['{D1E7BF57-54F0-3BC3-B1F8-CAD4C98F1448}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalActivationContextHelper = class(TDNGenericImport<DNInternalActivationContextHelperClass, DNInternalActivationContextHelper>) end;

  //-------------namespace: System.Deployment.Internal----------------
  DNInternalApplicationIdentityHelperClass = interface(DNObjectClass)
  ['{175FD20B-484E-4F61-AC55-06552CE331E9}']
  { static methods } 

    /// <summary>
    ///   获取 IDefinitionAppId 接口 表示唯一标识符的  对象。
    /// </summary>
    {class} function GetInternalAppId(id: DNApplicationIdentity): DNObject;

  end;

  /// <summary>
  ///   提供可访问的内部属性  对象。
  /// </summary>
  [DNTypeName('System.Deployment.Internal.InternalApplicationIdentityHelper')]
  DNInternalApplicationIdentityHelper = interface(DNObject)
  ['{6B2A2D2F-BB61-367E-BF8C-25E80F5612B8}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalApplicationIdentityHelper = class(TDNGenericImport<DNInternalApplicationIdentityHelperClass, DNInternalApplicationIdentityHelper>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClass = interface(DNObjectClass)
  ['{9BB3784C-3746-4C31-9728-C236163EF64F}']
  { static methods } 

    /// <summary>
    ///   指示代码分析工具假设指定的条件为 , ，即使无法静态地证明将始终是 。
    /// </summary>
    {class} procedure Assume(condition: Boolean); overload;
    /// <summary>
    ///   指示代码分析工具假设条件是 , ，即使无法静态地证明将始终是 , ，并在假设失败时显示一条消息。
    /// </summary>
    {class} procedure Assume(condition: Boolean; userMessage: string); overload;
    /// <summary>
    ///   检查条件;如果条件为 , ，遵循为分析器设置的升级策略。
    /// </summary>
    {class} procedure Assert(condition: Boolean); overload;
    /// <summary>
    ///   检查条件;如果条件为 , ，遵循分析器设置的升级策略，并显示指定的消息。
    /// </summary>
    {class} procedure Assert(condition: Boolean; userMessage: string); overload;
    /// <summary>
    ///   方法的协定包含仅在前置条件时，标记协定部分的结尾 -- 窗体。
    /// </summary>
    {class} procedure EndContractBlock;
    /// <summary>
    ///   为封闭方法或属性指定一个前置条件协定。
    /// </summary>
    {class} procedure &Requires(condition: Boolean); overload;
    /// <summary>
    ///   为封闭方法或属性指定一个前置条件协定，并在该协定的条件失败时显示一条消息。
    /// </summary>
    {class} procedure &Requires(condition: Boolean; userMessage: string); overload;
    /// <summary>
    ///   为封闭方法或属性指定一个后置条件协定。
    /// </summary>
    {class} procedure Ensures(condition: Boolean); overload;
    /// <summary>
    ///   为指定一个后置条件协定提供的退出条件以及要显示如果条件为消息 。
    /// </summary>
    {class} procedure Ensures(condition: Boolean; userMessage: string); overload;
    /// <summary>
    ///   为封闭方法或属性指定一个固定的协定。
    /// </summary>
    {class} procedure Invariant(condition: Boolean); overload;
    /// <summary>
    ///   为封闭方法或属性指定一个固定协定，并在该协定的条件失败时显示一条消息。
    /// </summary>
    {class} procedure Invariant(condition: Boolean; userMessage: string); overload;

  end;

  /// <summary>
  ///   包含用于表示程序协定（如前置条件、后置条件和对象固定）的静态方法。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.Contract')]
  DNContract = interface(DNObject)
  ['{10300CE0-8000-3472-B685-8A378A1829AF}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNContract = class(TDNGenericImport<DNContractClass, DNContract>) end;

  //-------------namespace: System.Diagnostics.Contracts.Internal----------------
  DNInternal_ContractHelperClass = interface(DNObjectClass)
  ['{3D48E01C-ABE0-4BE6-9B0C-2D293290B06B}']
  { static methods } 

    /// <summary>
    ///   触发默认失败行为。
    /// </summary>
    {class} procedure TriggerFailure(kind: DNContractFailureKind; displayMessage: string; userMessage: string; conditionText: string; innerException: DNException);
    /// <summary>
    ///   按二进制重写程序用来激活默认失败行为。
    /// </summary>
    {class} function RaiseContractFailedEvent(failureKind: DNContractFailureKind; userMessage: string; conditionText: string; innerException: DNException): string;

  end;

  /// <summary>
  ///   提供二进制重写程序用以处理协定失败的方法。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.Internal.ContractHelper')]
  DNInternal_ContractHelper = interface(DNObject)
  ['{767074F1-D2DF-3048-8A10-581678809A80}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternal_ContractHelper = class(TDNGenericImport<DNInternal_ContractHelperClass, DNInternal_ContractHelper>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerClass = interface(DNObjectClass)
  ['{A22B8BA5-B858-4678-9990-85E416F8538E}']
  { static getter & setter } 

    {class} function get_IsAttached: Boolean;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDebugger;

  { static methods } 

    /// <summary>
    ///   发出信号表示连接调试器的断点。
    /// </summary>
    {class} procedure Break;
    /// <summary>
    ///   启动调试器并将其连接到进程。
    /// </summary>
    {class} function Launch: Boolean;
    /// <summary>
    ///   通知调试器执行即将进入一个涉及跨线程依赖项的路径。
    /// </summary>
    {class} procedure NotifyOfCrossThreadDependency;
    /// <summary>
    ///   发送连接调试器的消息。
    /// </summary>
    {class} procedure Log(level: Int32; category: string; message: string);
    /// <summary>
    ///   检查连接的调试器是否已启用日志记录。
    /// </summary>
    {class} function IsLogging: Boolean;

  { static propertys } 

    /// <summary>
    ///   获取一个值，它指示调试器是否已附加到进程。
    /// </summary>
    {class} property IsAttached: Boolean read get_IsAttached;
  end;

  /// <summary>
  ///   启用与调试器的通讯。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Diagnostics.Debugger')]
  DNDebugger = interface(DNObject)
  ['{91F672A3-6B82-3E04-B2D7-BAC5D6676609}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNDebugger = class(TDNGenericImport<DNDebuggerClass, DNDebugger>) end;

  //-------------namespace: System.Diagnostics----------------
  DNStackFrameClass = interface(DNObjectClass)
  ['{772B35F5-EB67-400F-B318-6378C69BB6E4}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNStackFrame; overload;
    /// <summary>
    ///   初始化  类的新实例，可以选择捕获源信息。
    /// </summary>
    {class} function init(fNeedFileInfo: Boolean): DNStackFrame; overload;
    /// <summary>
    ///   初始化与当前堆栈帧之上的帧对应的  类的新实例。
    /// </summary>
    {class} function init(skipFrames: Int32): DNStackFrame; overload;
    /// <summary>
    ///   初始化与当前堆栈帧之上的帧对应的  类的新实例，可以选择捕获源信息。
    /// </summary>
    {class} function init(skipFrames: Int32; fNeedFileInfo: Boolean): DNStackFrame; overload;
    /// <summary>
    ///   初始化只包含给定文件名和行号的  类的新实例。
    /// </summary>
    {class} function init(fileName: string; lineNumber: Int32): DNStackFrame; overload;
    /// <summary>
    ///   初始化只包含给定文件名、行号和列号的  类的新实例。
    /// </summary>
    {class} function init(fileName: string; lineNumber: Int32; colNumber: Int32): DNStackFrame; overload;

  end;

  /// <summary>
  ///   提供关于 （表示当前线程的调用堆栈中的一个函数调用）的信息。
  /// </summary>
  [DNTypeName('System.Diagnostics.StackFrame')]
  DNStackFrame = interface(DNObject)
  ['{14910622-09D4-3B4A-8C1E-9991DBDCC553}']
  { methods } 

    /// <summary>
    ///   获取在其中执行帧的方法。
    /// </summary>
    function GetMethod: DNMethodBase;
    /// <summary>
    ///   获取相对于所执行方法的本机实时 (JIT) 编译代码开头的偏移量。
    ///               该调试信息的生成受  类控制。
    /// </summary>
    function GetNativeOffset: Int32;
    /// <summary>
    ///   获取离开所执行方法的 Microsoft 中间语言 (Microsoft Intermediate Language, MSIL) 代码开头的偏移量。
    ///               根据实时 (JIT) 编译器是否正在生成调试代码，此偏移量可能是近似量。
    ///               该调试信息的生成受  控制。
    /// </summary>
    function GetILOffset: Int32;
    /// <summary>
    ///   获取包含所执行代码的文件名。
    ///               该信息通常从可执行文件的调试符号中提取。
    /// </summary>
    function GetFileName: string;
    /// <summary>
    ///   获取文件中包含所执行代码的行号。
    ///               该信息通常从可执行文件的调试符号中提取。
    /// </summary>
    function GetFileLineNumber: Int32;
    /// <summary>
    ///   获取文件中包含所执行代码的列号。
    ///               该信息通常从可执行文件的调试符号中提取。
    /// </summary>
    function GetFileColumnNumber: Int32;
    /// <summary>
    ///   生成堆栈跟踪的可读表示形式。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNStackFrame = class(TDNGenericImport<DNStackFrameClass, DNStackFrame>) end;

  //-------------namespace: System.Diagnostics----------------
  DNStackTraceClass = interface(DNObjectClass)
  ['{5098F109-540C-4259-A88E-2BF38804ED7D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  从调用方的框架的类。
    /// </summary>
    {class} function init: DNStackTrace; overload;
    /// <summary>
    ///   新实例初始化  从调用方的框架，可以选择捕获源信息的类。
    /// </summary>
    {class} function init(fNeedFileInfo: Boolean): DNStackTrace; overload;
    /// <summary>
    ///   新实例初始化  类从调用方的框架，跳过指定的帧数。
    /// </summary>
    {class} function init(skipFrames: Int32): DNStackTrace; overload;
    /// <summary>
    ///   新实例初始化  类从调用方的框架，跳过指定的帧数，并可以选择捕获源信息。
    /// </summary>
    {class} function init(skipFrames: Int32; fNeedFileInfo: Boolean): DNStackTrace; overload;
    /// <summary>
    ///   新实例初始化  类使用提供的异常对象。
    /// </summary>
    {class} function init(e: DNException): DNStackTrace; overload;
    /// <summary>
    ///   新实例初始化  类，使用提供的异常对象，并可以选择捕获源信息。
    /// </summary>
    {class} function init(e: DNException; fNeedFileInfo: Boolean): DNStackTrace; overload;
    /// <summary>
    ///   新实例初始化  类使用提供的异常对象和跳过指定的帧数。
    /// </summary>
    {class} function init(e: DNException; skipFrames: Int32): DNStackTrace; overload;
    /// <summary>
    ///   新实例初始化  类使用提供的异常对象、 跳过指定的帧数以及可以选择捕获源信息。
    /// </summary>
    {class} function init(e: DNException; skipFrames: Int32; fNeedFileInfo: Boolean): DNStackTrace; overload;
    /// <summary>
    ///   新实例初始化  类，该类包含单个帧。
    /// </summary>
    {class} function init(frame: DNStackFrame): DNStackTrace; overload;
    /// <summary>
    ///   新实例初始化  特定线程，可以选择捕获源信息的类。
    ///            
    ///              不要使用此构造函数重载。
    /// </summary>
    {class} function init(targetThread: DNThread; needFileInfo: Boolean): DNStackTrace; overload;

  end;

  /// <summary>
  ///   表示堆栈跟踪，这是一个或多个堆栈帧的有序的集合。
  /// </summary>
  [DNTypeName('System.Diagnostics.StackTrace')]
  DNStackTrace = interface(DNObject)
  ['{405C2D81-315B-3CB0-8442-EF5A38D4C3B8}']
  { getter & setter } 

    function get_FrameCount: Int32;

  { methods } 

    /// <summary>
    ///   获取指定的堆栈帧。
    /// </summary>
    function GetFrame(index: Int32): DNStackFrame;
    /// <summary>
    ///   返回当前的堆栈跟踪中的所有堆栈帧的副本。
    /// </summary>
    function GetFrames: TArray<DNStackFrame>;
    /// <summary>
    ///   生成堆栈跟踪的可读表示形式。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取堆栈跟踪中的帧数。
    /// </summary>
    property FrameCount: Int32 read get_FrameCount;
  end;

  TDNStackTrace = class(TDNGenericImport<DNStackTraceClass, DNStackTrace>) end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   表示托管代码的符号联编程序。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolBinder')]
  DNISymbolBinder = interface(DNObject)
  ['{20808ADC-CC01-3F3A-8F09-ED12940FC212}']
  { methods } 

    /// <summary>
    ///   获取当前文件的符号读取器的接口。
    /// </summary>
    function GetReader(importer: Int32; filename: string; searchPath: string): DNISymbolReader;

  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   表示托管代码的符号联编程序。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolBinder1')]
  DNISymbolBinder1 = interface(DNObject)
  ['{027C036A-4052-3821-85DE-B53319DF1211}']
  { methods } 

    /// <summary>
    ///   获取当前文件的符号读取器的接口。
    /// </summary>
    function GetReader(importer: IntPtr; filename: string; searchPath: string): DNISymbolReader;

  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   表示由符号存储引用的文档。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolDocument')]
  DNISymbolDocument = interface(DNObject)
  ['{1C32F012-2684-3EFE-8D50-9C2973ACC00B}']
  { getter & setter } 

    function get_URL: string;
    function get_DocumentType: DNGuid;
    function get_Language: DNGuid;
    function get_LanguageVendor: DNGuid;
    function get_CheckSumAlgorithmId: DNGuid;
    function get_HasEmbeddedSource: Boolean;
    function get_SourceLength: Int32;

  { methods } 

    /// <summary>
    ///   获取校验和。
    /// </summary>
    function GetCheckSum: TArray<Byte>;
    /// <summary>
    ///   在当前文档中的一行不一定是序列点的情况下，返回作为序列点的最近的一行。
    /// </summary>
    function FindClosestLine(line: Int32): Int32;
    /// <summary>
    ///   获取指定范围内的嵌入文档源。
    /// </summary>
    function GetSourceRange(startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32): TArray<Byte>;

  { propertys } 

    /// <summary>
    ///   获取当前文档的 URL。
    /// </summary>
    property URL: string read get_URL;
    /// <summary>
    ///   获取当前文档的类型。
    /// </summary>
    property DocumentType: DNGuid read get_DocumentType;
    /// <summary>
    ///   获取当前文档的语言。
    /// </summary>
    property Language: DNGuid read get_Language;
    /// <summary>
    ///   获取当前文档的语言供应商。
    /// </summary>
    property LanguageVendor: DNGuid read get_LanguageVendor;
    /// <summary>
    ///   获取校验和算法标识符。
    /// </summary>
    property CheckSumAlgorithmId: DNGuid read get_CheckSumAlgorithmId;
    /// <summary>
    ///   检查当前文档是否存储在符号存储区中。
    /// </summary>
    property HasEmbeddedSource: Boolean read get_HasEmbeddedSource;
    /// <summary>
    ///   获取嵌入源的长度（以字节表示）。
    /// </summary>
    property SourceLength: Int32 read get_SourceLength;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   表示由符号存储引用的文档。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolDocumentWriter')]
  DNISymbolDocumentWriter = interface(DNObject)
  ['{FA682F24-3A3C-390D-B8A2-96F1106F4B37}']
  { methods } 

    /// <summary>
    ///   将文档的原始源存储在符号存储区中。
    /// </summary>
    procedure SetSource(source: TArray<Byte>);
    /// <summary>
    ///   设置校验和信息。
    /// </summary>
    procedure SetCheckSum(algorithmId: DNGuid; checkSum: TArray<Byte>);

  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   表示符号存储区内的方法。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolMethod')]
  DNISymbolMethod = interface(DNObject)
  ['{25C72EB0-E437-3F17-946D-3B72A3ACFF37}']
  { getter & setter } 

    function get_Token: DNSymbolToken;
    function get_SequencePointCount: Int32;
    function get_RootScope: DNISymbolScope;

  { methods } 

    /// <summary>
    ///   获取当前方法的序列点。
    /// </summary>
    procedure GetSequencePoints(offsets: TArray<Int32>; documents: TArray<DNISymbolDocument>; lines: TArray<Int32>; columns: TArray<Int32>; endLines: TArray<Int32>; endColumns: TArray<Int32>);
    /// <summary>
    ///   在给定方法内的一个偏移量的情况下，返回最封闭的词法范围。
    /// </summary>
    function GetScope(offset: Int32): DNISymbolScope;
    /// <summary>
    ///   获取与指定位置对应的方法内的 Microsoft 中间语言 (MSIL) 偏移量。
    /// </summary>
    function GetOffset(document: DNISymbolDocument; line: Int32; column: Int32): Int32;
    /// <summary>
    ///   获取与 Microsoft 中间语言 (MSIL) 的范围对应的起始和结束偏移量对的数组，给定位置在此方法内包括该数组。
    /// </summary>
    function GetRanges(document: DNISymbolDocument; line: Int32; column: Int32): TArray<Int32>;
    /// <summary>
    ///   获取当前方法的参数。
    /// </summary>
    function GetParameters: TArray<DNISymbolVariable>;
    /// <summary>
    ///   获取在其中定义当前方法的命名空间。
    /// </summary>
    function GetNamespace: DNISymbolNamespace;
    /// <summary>
    ///   获取当前方法的源的起始和结束位置。
    /// </summary>
    function GetSourceStartEnd(docs: TArray<DNISymbolDocument>; lines: TArray<Int32>; columns: TArray<Int32>): Boolean;

  { propertys } 

    /// <summary>
    ///   获取 ，它包含当前方法的元数据。
    /// </summary>
    property Token: DNSymbolToken read get_Token;
    /// <summary>
    ///   获取方法中序列点的计数。
    /// </summary>
    property SequencePointCount: Int32 read get_SequencePointCount;
    /// <summary>
    ///   获取当前方法的根词法范围。
    ///               此范围包括整个方法。
    /// </summary>
    property RootScope: DNISymbolScope read get_RootScope;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   表示符号存储区内的命名空间。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolNamespace')]
  DNISymbolNamespace = interface(DNObject)
  ['{23ED2454-6899-3C28-BAB7-6EC86683964A}']
  { getter & setter } 

    function get_Name: string;

  { methods } 

    /// <summary>
    ///   获取当前命名空间的成员的子级。
    /// </summary>
    function GetNamespaces: TArray<DNISymbolNamespace>;
    /// <summary>
    ///   获取在当前命名空间中的全局范围内定义的所有变量。
    /// </summary>
    function GetVariables: TArray<DNISymbolVariable>;

  { propertys } 

    /// <summary>
    ///   获取当前命名空间。
    /// </summary>
    property Name: string read get_Name;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   表示托管代码的符号读取器。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolReader')]
  DNISymbolReader = interface(DNObject)
  ['{E809A5F1-D3D7-3144-9BEF-FE8AC0364699}']
  { getter & setter } 

    function get_UserEntryPoint: DNSymbolToken;

  { methods } 

    /// <summary>
    ///   获取指定的语言、 供应商和类型的文档。
    /// </summary>
    function GetDocument(url: string; language: DNGuid; languageVendor: DNGuid; documentType: DNGuid): DNISymbolDocument;
    /// <summary>
    ///   获取在符号存储区中定义的所有文档的数组。
    /// </summary>
    function GetDocuments: TArray<DNISymbolDocument>;
    /// <summary>
    ///   在给定方法的标识符的情况下，获取符号读取器方法对象。
    /// </summary>
    function GetMethod(method: DNSymbolToken): DNISymbolMethod; overload;
    /// <summary>
    ///   在给定方法的标识符及其编辑和连续版本的情况下，获取符号读取器方法对象。
    /// </summary>
    function GetMethod(method: DNSymbolToken; version: Int32): DNISymbolMethod; overload;
    /// <summary>
    ///   获取不是在给定父级本地的变量。
    /// </summary>
    function GetVariables(parent: DNSymbolToken): TArray<DNISymbolVariable>;
    /// <summary>
    ///   获取模块中的所有全局变量。
    /// </summary>
    function GetGlobalVariables: TArray<DNISymbolVariable>;
    /// <summary>
    ///   获取包含文档中的指定位置的符号读取器方法对象。
    /// </summary>
    function GetMethodFromDocumentPosition(document: DNISymbolDocument; line: Int32; column: Int32): DNISymbolMethod;
    /// <summary>
    ///   获取属性值在给定属性名称。
    /// </summary>
    function GetSymAttribute(parent: DNSymbolToken; name: string): TArray<Byte>;
    /// <summary>
    ///   获取在全局范围内当前符号存储区中定义的命名空间。
    /// </summary>
    function GetNamespaces: TArray<DNISymbolNamespace>;

  { propertys } 

    /// <summary>
    ///   获取方法的元数据标记，它指定为模块的用户入口点（如果有的话）。
    /// </summary>
    property UserEntryPoint: DNSymbolToken read get_UserEntryPoint;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   表示  内的词法范围，提供对范围及其子范围和父范围的起始和结束偏移量的访问。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolScope')]
  DNISymbolScope = interface(DNObject)
  ['{1CEE3A11-01AE-3244-A939-4972FC9703EF}']
  { getter & setter } 

    function get_Method: DNISymbolMethod;
    function get_Parent: DNISymbolScope;
    function get_StartOffset: Int32;
    function get_EndOffset: Int32;

  { methods } 

    /// <summary>
    ///   获取当前词法范围的子词法范围。
    /// </summary>
    function GetChildren: TArray<DNISymbolScope>;
    /// <summary>
    ///   获取当前词法范围内的局部变量。
    /// </summary>
    function GetLocals: TArray<DNISymbolVariable>;
    /// <summary>
    ///   获取当前范围内使用的命名空间。
    /// </summary>
    function GetNamespaces: TArray<DNISymbolNamespace>;

  { propertys } 

    /// <summary>
    ///   获取包含当前词法范围的方法。
    /// </summary>
    property Method: DNISymbolMethod read get_Method;
    /// <summary>
    ///   获取当前范围的父词法范围。
    /// </summary>
    property Parent: DNISymbolScope read get_Parent;
    /// <summary>
    ///   获取当前词法范围的起始偏移量。
    /// </summary>
    property StartOffset: Int32 read get_StartOffset;
    /// <summary>
    ///   获取当前词法范围的结束偏移量。
    /// </summary>
    property EndOffset: Int32 read get_EndOffset;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   表示符号存储区内的变量。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolVariable')]
  DNISymbolVariable = interface(DNObject)
  ['{4042BD4D-B5AB-30E8-919B-14910687BAAE}']
  { getter & setter } 

    function get_Name: string;
    function get_Attributes: DNObject;
    function get_AddressKind: DNSymAddressKind;
    function get_AddressField1: Int32;
    function get_AddressField2: Int32;
    function get_AddressField3: Int32;
    function get_StartOffset: Int32;
    function get_EndOffset: Int32;

  { methods } 

    /// <summary>
    ///   获取变量签名。
    /// </summary>
    function GetSignature: TArray<Byte>;

  { propertys } 

    /// <summary>
    ///   获取变量名。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取变量的特性。
    /// </summary>
    property Attributes: DNObject read get_Attributes;
    /// <summary>
    ///   获取描述地址类型的  值。
    /// </summary>
    property AddressKind: DNSymAddressKind read get_AddressKind;
    /// <summary>
    ///   获取变量的第一个地址。
    /// </summary>
    property AddressField1: Int32 read get_AddressField1;
    /// <summary>
    ///   获取变量的第二个地址。
    /// </summary>
    property AddressField2: Int32 read get_AddressField2;
    /// <summary>
    ///   获取变量的第三个地址。
    /// </summary>
    property AddressField3: Int32 read get_AddressField3;
    /// <summary>
    ///   获取变量范围内的变量的起始偏移量。
    /// </summary>
    property StartOffset: Int32 read get_StartOffset;
    /// <summary>
    ///   获取变量范围内的变量的结束偏移量。
    /// </summary>
    property EndOffset: Int32 read get_EndOffset;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  /// <summary>
  ///   表示托管代码的符号编写器。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolWriter')]
  DNISymbolWriter = interface(DNObject)
  ['{DA295A1B-C5BD-3B34-8ACD-1D7D334FFB7F}']
  { methods } 

    /// <summary>
    ///   设置元数据发射器接口与编写器相关联。
    /// </summary>
    procedure Initialize(emitter: IntPtr; filename: string; fFullBuild: Boolean);
    /// <summary>
    ///   定义源文档。
    /// </summary>
    function DefineDocument(url: string; language: DNGuid; languageVendor: DNGuid; documentType: DNGuid): DNISymbolDocumentWriter;
    /// <summary>
    ///   将用户定义的方法标识为当前模块的入口点。
    /// </summary>
    procedure SetUserEntryPoint(entryMethod: DNSymbolToken);
    /// <summary>
    ///   打开要放入符号信息的方法。
    /// </summary>
    procedure OpenMethod(method: DNSymbolToken);
    /// <summary>
    ///   关闭当前方法。
    /// </summary>
    procedure CloseMethod;
    /// <summary>
    ///   在当前方法内定义一组序列点。
    /// </summary>
    procedure DefineSequencePoints(document: DNISymbolDocumentWriter; offsets: TArray<Int32>; lines: TArray<Int32>; columns: TArray<Int32>; endLines: TArray<Int32>; endColumns: TArray<Int32>);
    /// <summary>
    ///   在当前方法中打开新的词法范围。
    /// </summary>
    function OpenScope(startOffset: Int32): Int32;
    /// <summary>
    ///   关闭当前词法范围。
    /// </summary>
    procedure CloseScope(endOffset: Int32);
    /// <summary>
    ///   定义指定词法范围的偏移量范围。
    /// </summary>
    procedure SetScopeRange(scopeID: Int32; startOffset: Int32; endOffset: Int32);
    /// <summary>
    ///   在当前词法范围内定义单个变量。
    /// </summary>
    procedure DefineLocalVariable(name: string; attributes: DNFieldAttributes; signature: TArray<Byte>; addrKind: DNSymAddressKind; addr1: Int32; addr2: Int32; addr3: Int32; startOffset: Int32; endOffset: Int32);
    /// <summary>
    ///   在当前方法中定义的单个参数。
    ///               从该方法签名中的位置中获取每个参数的类型。
    /// </summary>
    procedure DefineParameter(name: string; attributes: DNParameterAttributes; sequence: Int32; addrKind: DNSymAddressKind; addr1: Int32; addr2: Int32; addr3: Int32);
    /// <summary>
    ///   一种类型或全局字段中定义的字段。
    /// </summary>
    procedure DefineField(parent: DNSymbolToken; name: string; attributes: DNFieldAttributes; signature: TArray<Byte>; addrKind: DNSymAddressKind; addr1: Int32; addr2: Int32; addr3: Int32);
    /// <summary>
    ///   定义一个全局变量。
    /// </summary>
    procedure DefineGlobalVariable(name: string; attributes: DNFieldAttributes; signature: TArray<Byte>; addrKind: DNSymAddressKind; addr1: Int32; addr2: Int32; addr3: Int32);
    /// <summary>
    ///   关闭  并将符号提交到符号存储区。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   在给定特性名称和特性值的情况下，定义特性。
    /// </summary>
    procedure SetSymAttribute(parent: DNSymbolToken; name: string; data: TArray<Byte>);
    /// <summary>
    ///   打开一个新的命名空间。
    /// </summary>
    procedure OpenNamespace(name: string);
    /// <summary>
    ///   关闭最近的命名空间。
    /// </summary>
    procedure CloseNamespace;
    /// <summary>
    ///   指定在打开的词法范围内使用给定的、完全限定的命名空间名称。
    /// </summary>
    procedure UsingNamespace(fullName: string);
    /// <summary>
    ///   指定的则返回 true 的开始和结束的源文件中的一个方法。
    ///               使用  指定独立存在的方法中序列点的方法的范围。
    /// </summary>
    procedure SetMethodSourceRange(startDoc: DNISymbolDocumentWriter; startLine: Int32; startColumn: Int32; endDoc: DNISymbolDocumentWriter; endLine: Int32; endColumn: Int32);
    /// <summary>
    ///   设置基础  （对应的非托管接口），托管  使用它来发出符号。
    /// </summary>
    procedure SetUnderlyingWriter(underlyingWriter: IntPtr);

  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  DNSymDocumentTypeClass = interface(DNObjectClass)
  ['{D1D3223B-31A4-4E9B-B04C-4529927193CB}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSymDocumentType;

  end;

  /// <summary>
  ///   保存用于在符号存储区的文档类型的公共 Guid。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.SymDocumentType')]
  DNSymDocumentType = interface(DNObject)
  ['{40AE2088-CE00-33AD-9320-5D201CB46FC9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSymDocumentType = class(TDNGenericImport<DNSymDocumentTypeClass, DNSymDocumentType>) end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  DNSymLanguageTypeClass = interface(DNObjectClass)
  ['{A9F4DC70-C95C-4DB0-A90B-E648889F0D99}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSymLanguageType;

  end;

  /// <summary>
  ///   保存用于在符号存储区的语言类型的公共 Guid。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.SymLanguageType')]
  DNSymLanguageType = interface(DNObject)
  ['{5A18D43E-115B-3B8B-8245-9A06B204B717}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSymLanguageType = class(TDNGenericImport<DNSymLanguageTypeClass, DNSymLanguageType>) end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  DNSymLanguageVendorClass = interface(DNObjectClass)
  ['{1782AA7D-6447-425D-9BE1-298BEB556C4E}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSymLanguageVendor;

  end;

  /// <summary>
  ///   保存的语言供应商要与符号存储区使用公用的 Guid。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.SymLanguageVendor')]
  DNSymLanguageVendor = interface(DNObject)
  ['{DFD888A7-A6B0-3B1B-985E-4CDAB0E4C17D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSymLanguageVendor = class(TDNGenericImport<DNSymLanguageVendorClass, DNSymLanguageVendor>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventListenerClass = interface(DNObjectClass)
  ['{FCA98E3D-BEC6-44B1-9704-A260CCF76AF4}']
  { constructors } 

    /// <summary>
    ///   创建  类的新实例。
    /// </summary>
    {class} function init: DNEventListener;

  { static methods } 

    /// <summary>
    ///   获取表示指定事件源的较小非负数。
    /// </summary>
    {class} function EventSourceIndex(eventSource: DNEventSource): Int32;

  end;

  /// <summary>
  ///   提供用于启用和禁用事件源中事件的方法。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventListener')]
  DNEventListener = interface(DNObject)
  ['{17F17032-DA5A-3EDC-8CB6-4895F2E25BB7}']
  { methods } 

    /// <summary>
    ///   释放  类的当前实例使用的资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   启用具有指定详细级别或更低详细级别的指定事件源的事件。
    /// </summary>
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel); overload;
    /// <summary>
    ///   启动具有指定详细级别或更低详细级别且与关键字标志匹配的指定事件源的事件。
    /// </summary>
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel; matchAnyKeyword: DNEventKeywords); overload;
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel; matchAnyKeyword: DNEventKeywords; arguments: DNIDictionary<string, string>); overload;
    /// <summary>
    ///   禁用指定事件源的所有事件。
    /// </summary>
    procedure DisableEvents(eventSource: DNEventSource);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEventListener = class(TDNGenericImport<DNEventListenerClass, DNEventListener>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceClass = interface(DNObjectClass)
  ['{5BE59BFE-4A03-4409-B17F-5EB378F8D19B}']
  { static getter & setter } 

    {class} function get_CurrentThreadActivityId: DNGuid;

  { constructors } 

    /// <summary>
    ///   使用指定的名称创建  类的新实例。
    /// </summary>
    {class} function init(eventSourceName: string): DNEventSource; overload;
    /// <summary>
    ///   使用指定的名称和设置创建  类的新实例。
    /// </summary>
    {class} function init(eventSourceName: string; config: DNEventSourceSettings): DNEventSource; overload;
    /// <summary>
    ///   使用指定的配置设置创建  类的新实例。
    /// </summary>
    {class} function init(eventSourceName: string; config: DNEventSourceSettings; traits: TArray<string>): DNEventSource; overload;

  { static methods } 

    /// <summary>
    ///   获取事件源的实现的唯一标识符。
    /// </summary>
    {class} function GetGuid(eventSourceType: DNType): DNGuid;
    /// <summary>
    ///   获取事件源的好友名称。
    /// </summary>
    {class} function GetName(eventSourceType: DNType): string;
    /// <summary>
    ///   返回与当前事件源关联的 XML 清单的字符串。
    /// </summary>
    {class} function GenerateManifest(eventSourceType: DNType; assemblyPathToIncludeInManifest: string): string; overload;
    /// <summary>
    ///   返回与当前事件源关联的 XML 清单的字符串。
    /// </summary>
    {class} function GenerateManifest(eventSourceType: DNType; assemblyPathToIncludeInManifest: string; flags: DNEventManifestOptions): string; overload;
    /// <summary>
    ///   获取应用程序域的所有事件源的快照。
    /// </summary>
    {class} function GetSources: DNIEnumerable<DNEventSource>;
    {class} procedure SendCommand(eventSource: DNEventSource; command: DNEventCommand; commandArguments: DNIDictionary<string, string>);
    /// <summary>
    ///   [在 .NET Framework 4.5.1 和更高版本中受支持] 
    ///            
    ///              在当前线程上设置活动 ID。
    /// </summary>
    {class} procedure SetCurrentThreadActivityId(activityId: DNGuid); overload;
    {class} procedure SetCurrentThreadActivityId(activityId: DNGuid; out oldActivityThatWillContinue: DNGuid); overload;

  { static propertys } 

    /// <summary>
    ///   [在 .NET Framework 4.5.1 和更高版本中受支持] 
    ///            
    ///              获取当前线程的活动 ID。
    /// </summary>
    {class} property CurrentThreadActivityId: DNGuid read get_CurrentThreadActivityId;
  end;

  /// <summary>
  ///   提供为 Windows 事件跟踪 (ETW) 创建事件的功能。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventSource')]
  DNEventSource = interface(DNObject)
  ['{318D6207-7490-3E8D-A16B-10DE0F4F77EA}']
  { getter & setter } 

    function get_Name: string;
    function get_Guid: DNGuid;
    function get_Settings: DNEventSourceSettings;
    function get_ConstructionException: DNException;

  { methods } 

    /// <summary>
    ///   确定是否已启用当前事件源。
    /// </summary>
    function IsEnabled: Boolean; overload;
    /// <summary>
    ///   确定是否已启用具有指定级别和关键字的当前事件源。
    /// </summary>
    function IsEnabled(level: DNEventLevel; keywords: DNEventKeywords): Boolean; overload;
    /// <summary>
    ///   确定是否对带有指定级别、关键字和通道的事件启用了当前事件源。
    /// </summary>
    function IsEnabled(level: DNEventLevel; keywords: DNEventKeywords; channel: DNEventChannel): Boolean; overload;
    /// <summary>
    ///   获取与指定键关联的特性值。
    /// </summary>
    function GetTrait(key: string): string;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   使用指定的名称和默认选项而非字段来写入事件。
    /// </summary>
    procedure Write(eventName: string); overload;
    /// <summary>
    ///   使用指定的名称和选项而非字段来写入事件。
    /// </summary>
    procedure Write(eventName: string; options: DNEventSourceOptions); overload;
    /// <summary>
    ///   获得当前事件源实例的字符串表示形式。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   从事件源中派生出来的类的友好名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   此事件源的唯一标识符。
    /// </summary>
    property Guid: DNGuid read get_Guid;
    /// <summary>
    ///   获取应用于此事件源的设置。
    /// </summary>
    property Settings: DNEventSourceSettings read get_Settings;
    /// <summary>
    ///   [在 .NET Framework 4.5.1 和更高版本中受支持] 
    ///            
    ///              获取在事件源的构造过程中引发的任何异常。
    /// </summary>
    property ConstructionException: DNException read get_ConstructionException;
  end;

  TDNEventSource = class(TDNGenericImport<DNEventSourceClass, DNEventSource>) end;

  //-------------namespace: System----------------
  DNEnvironmentClass = interface(DNObjectClass)
  ['{A031D918-86DE-4D04-AEAA-9258FB26D302}']
  { static getter & setter } 

    {class} function get_TickCount: Int32;
    {class} function get_ExitCode: Int32;
    {class} procedure set_ExitCode(value: Int32);
    {class} function get_CommandLine: string;
    {class} function get_CurrentDirectory: string;
    {class} procedure set_CurrentDirectory(value: string);
    {class} function get_SystemDirectory: string;
    {class} function get_MachineName: string;
    {class} function get_ProcessorCount: Int32;
    {class} function get_SystemPageSize: Int32;
    {class} function get_NewLine: string;
    {class} function get_Version: DNVersion;
    {class} function get_WorkingSet: Int64;
    {class} function get_OSVersion: DNOperatingSystem;
    {class} function get_StackTrace: string;
    {class} function get_Is64BitProcess: Boolean;
    {class} function get_Is64BitOperatingSystem: Boolean;
    {class} function get_HasShutdownStarted: Boolean;
    {class} function get_UserName: string;
    {class} function get_UserInteractive: Boolean;
    {class} function get_UserDomainName: string;
    {class} function get_CurrentManagedThreadId: Int32;

  { static methods } 

    /// <summary>
    ///   终止此进程，并将退出代码返回到操作系统。
    /// </summary>
    {class} procedure &Exit(exitCode: Int32);
    /// <summary>
    ///   从当前进程检索环境变量的值。
    /// </summary>
    {class} function GetEnvironmentVariable(variable: string): string; overload;
    /// <summary>
    ///   从当前进程检索所有环境变量名及其值。
    /// </summary>
    {class} function GetEnvironmentVariables: DNIDictionary; overload;
    /// <summary>
    ///   创建、修改或删除当前进程中存储的环境变量。
    /// </summary>
    {class} procedure SetEnvironmentVariable(variable: string; value: string); overload;
    /// <summary>
    ///   返回包含当前计算机中的逻辑驱动器名称的字符串数组。
    /// </summary>
    {class} function GetLogicalDrives: TArray<string>;
    /// <summary>
    ///   获取由指定枚举标识的系统特殊文件夹的路径。
    /// </summary>
    {class} function GetFolderPath(folder: DNEnvironment_SpecialFolder): string; overload;
    /// <summary>
    ///   获取由指定枚举标识的系统特殊文件夹的路径，并使用用于访问特殊文件夹的指定选项。
    /// </summary>
    {class} function GetFolderPath(folder: DNEnvironment_SpecialFolder; option: DNEnvironment_SpecialFolderOption): string; overload;
    /// <summary>
    ///   向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息。
    /// </summary>
    {class} procedure FailFast(message: string); overload;
    /// <summary>
    ///   向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息和异常信息。
    /// </summary>
    {class} procedure FailFast(message: string; exception: DNException); overload;
    /// <summary>
    ///   从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索所有环境变量名及其值。
    /// </summary>
    {class} function GetEnvironmentVariables(target: DNEnvironmentVariableTarget): DNIDictionary; overload;
    /// <summary>
    ///   创建、修改或删除当前进程中或者为当前用户或本地计算机保留的 Windows 操作系统注册表项中存储的环境变量。
    /// </summary>
    {class} procedure SetEnvironmentVariable(variable: string; value: string; target: DNEnvironmentVariableTarget); overload;
    /// <summary>
    ///   将嵌入到指定字符串中的每个环境变量的名称替换为该变量的值的等效字符串，然后返回结果字符串。
    /// </summary>
    {class} function ExpandEnvironmentVariables(name: string): string;
    /// <summary>
    ///   返回包含当前进程的命令行参数的字符串数组。
    /// </summary>
    {class} function GetCommandLineArgs: TArray<string>;
    /// <summary>
    ///   从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索环境变量的值。
    /// </summary>
    {class} function GetEnvironmentVariable(variable: string; target: DNEnvironmentVariableTarget): string; overload;

  { static propertys } 

    /// <summary>
    ///   获取系统启动后经过的毫秒数。
    /// </summary>
    {class} property TickCount: Int32 read get_TickCount;
    /// <summary>
    ///   获取或设置进程的退出代码。
    /// </summary>
    {class} property ExitCode: Int32 read get_ExitCode write set_ExitCode;
    /// <summary>
    ///   获取该进程的命令行。
    /// </summary>
    {class} property CommandLine: string read get_CommandLine;
    /// <summary>
    ///   获取或设置当前工作目录的完全限定路径。
    /// </summary>
    {class} property CurrentDirectory: string read get_CurrentDirectory write set_CurrentDirectory;
    /// <summary>
    ///   获取系统目录的完全限定路径。
    /// </summary>
    {class} property SystemDirectory: string read get_SystemDirectory;
    /// <summary>
    ///   获取此本地计算机的 NetBIOS 名称。
    /// </summary>
    {class} property MachineName: string read get_MachineName;
    /// <summary>
    ///   获取当前计算机上的处理器数。
    /// </summary>
    {class} property ProcessorCount: Int32 read get_ProcessorCount;
    /// <summary>
    ///   获取操作系统的内存页的字节数。
    /// </summary>
    {class} property SystemPageSize: Int32 read get_SystemPageSize;
    /// <summary>
    ///   获取为此环境定义的换行字符串。
    /// </summary>
    {class} property NewLine: string read get_NewLine;
    /// <summary>
    ///   获取一个  对象，该对象描述公共语言运行时的主版本、次版本、内部版本和修订号。
    /// </summary>
    {class} property Version: DNVersion read get_Version;
    /// <summary>
    ///   获取映射到进程上下文的物理内存量。
    /// </summary>
    {class} property WorkingSet: Int64 read get_WorkingSet;
    /// <summary>
    ///   获取包含当前平台标识符和版本号的  对象。
    /// </summary>
    {class} property OSVersion: DNOperatingSystem read get_OSVersion;
    /// <summary>
    ///   获取当前的堆栈跟踪信息。
    /// </summary>
    {class} property StackTrace: string read get_StackTrace;
    /// <summary>
    ///   确定当前进程是否为 64 位进程。
    /// </summary>
    {class} property Is64BitProcess: Boolean read get_Is64BitProcess;
    /// <summary>
    ///   确定当前操作系统是否为 64 位操作系统。
    /// </summary>
    {class} property Is64BitOperatingSystem: Boolean read get_Is64BitOperatingSystem;
    /// <summary>
    ///   获取一个值，该值指示当前的应用程序域是否正在卸载或者公共语言运行时 (CLR) 是否正在关闭。
    /// </summary>
    {class} property HasShutdownStarted: Boolean read get_HasShutdownStarted;
    /// <summary>
    ///   获取当前已登录到 Windows 操作系统的人员的用户名。
    /// </summary>
    {class} property UserName: string read get_UserName;
    /// <summary>
    ///   获取一个值，用以指示当前进程是否在用户交互模式中运行。
    /// </summary>
    {class} property UserInteractive: Boolean read get_UserInteractive;
    /// <summary>
    ///   获取与当前用户关联的网络域名。
    /// </summary>
    {class} property UserDomainName: string read get_UserDomainName;
    /// <summary>
    ///   获取当前托管线程的唯一标识符。
    /// </summary>
    {class} property CurrentManagedThreadId: Int32 read get_CurrentManagedThreadId;
  end;

  /// <summary>
  ///   提供有关当前环境和平台的信息以及操作它们的方法。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Environment')]
  DNEnvironment = interface(DNObject)
  ['{DF81B4FF-7226-30FA-84DF-80795BA1A642}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEnvironment = class(TDNGenericImport<DNEnvironmentClass, DNEnvironment>) end;

  //-------------namespace: System----------------
  DNEventArgsClass = interface(DNObjectClass)
  ['{65D24C44-9524-42AD-8F0C-3F375DC73DE7}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEventArgs;

  end;

  /// <summary>
  ///   表示包含事件数据的类的基类，并提供用于不包含事件数据的事件的值。
  /// </summary>
  [DNTypeName('System.EventArgs')]
  DNEventArgs = interface(DNObject)
  ['{3FB717AF-9D21-3016-871A-DF817ABDDD51}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEventArgs = class(TDNGenericImport<DNEventArgsClass, DNEventArgs>) end;

  //-------------namespace: System----------------
  DNAssemblyLoadEventArgsClass = interface(DNEventArgsClass)
  ['{FEBE708A-4E22-47BF-9AA9-44172954B002}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(loadedAssembly: DNAssembly): DNAssemblyLoadEventArgs;

  end;

  /// <summary>
  ///   为  事件提供数据。
  /// </summary>
  [DNTypeName('System.AssemblyLoadEventArgs')]
  DNAssemblyLoadEventArgs = interface(DNEventArgs)
  ['{81548590-3849-32A8-AA6F-F2B3137CF4A3}']
  { getter & setter } 

    function get_LoadedAssembly: DNAssembly;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  ，它表示当前加载的程序集。
    /// </summary>
    property LoadedAssembly: DNAssembly read get_LoadedAssembly;
  end;

  TDNAssemblyLoadEventArgs = class(TDNGenericImport<DNAssemblyLoadEventArgsClass, DNAssemblyLoadEventArgs>) end;

  //-------------namespace: System----------------
  DNConsoleCancelEventArgsClass = interface(DNEventArgsClass)
  ['{5062BAD8-83D3-4259-A807-253628E654CD}']
  end;

  /// <summary>
  ///   为  事件提供数据。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.ConsoleCancelEventArgs')]
  DNConsoleCancelEventArgs = interface(DNEventArgs)
  ['{E444D8F6-90C6-3C27-8248-A3F0970BC439}']
  { getter & setter } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_SpecialKey: DNConsoleSpecialKey;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置一个值，该值指示是否同时按下修改键和console 键 (Ctrl + C) 或 Ctrl + Break 键将终止当前进程。
    ///               默认值是，这会终止当前进程。
    /// </summary>
    property Cancel: Boolean read get_Cancel write set_Cancel;
    /// <summary>
    ///   获取修饰符和中断当前进程的控制台键的组合。
    /// </summary>
    property SpecialKey: DNConsoleSpecialKey read get_SpecialKey;
  end;

  TDNConsoleCancelEventArgs = class(TDNGenericImport<DNConsoleCancelEventArgsClass, DNConsoleCancelEventArgs>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractFailedEventArgsClass = interface(DNEventArgsClass)
  ['{1F7E1772-2C3C-4290-89F0-E05445536E03}']
  { constructors } 

    /// <summary>
    ///   为  事件提供数据。
    /// </summary>
    {class} function init(failureKind: DNContractFailureKind; message: string; condition: string; originalException: DNException): DNContractFailedEventArgs;

  end;

  /// <summary>
  ///   提供方法和数据  事件。
  /// </summary>
  [DNTypeName('System.Diagnostics.Contracts.ContractFailedEventArgs')]
  DNContractFailedEventArgs = interface(DNEventArgs)
  ['{F997CD55-C3B7-3A92-8398-27E3F3BC9C70}']
  { getter & setter } 

    function get_Message: string;
    function get_Condition: string;
    function get_FailureKind: DNContractFailureKind;
    function get_OriginalException: DNException;
    function get_Handled: Boolean;
    function get_Unwind: Boolean;

  { methods } 

    /// <summary>
    ///   将  属性设置为 。
    /// </summary>
    procedure SetHandled;
    /// <summary>
    ///   将  属性设置为 。
    /// </summary>
    procedure SetUnwind;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取描述的消息  事件。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取失败的协定的条件。
    /// </summary>
    property Condition: string read get_Condition;
    /// <summary>
    ///   获取失败的协定的类型。
    /// </summary>
    property FailureKind: DNContractFailureKind read get_FailureKind;
    /// <summary>
    ///   获取导致原始异常  事件。
    /// </summary>
    property OriginalException: DNException read get_OriginalException;
    /// <summary>
    ///   指示是否  处理事件。
    /// </summary>
    property Handled: Boolean read get_Handled;
    /// <summary>
    ///   指示是否应该应用代码协定升级策略。
    /// </summary>
    property Unwind: Boolean read get_Unwind;
  end;

  TDNContractFailedEventArgs = class(TDNGenericImport<DNContractFailedEventArgsClass, DNContractFailedEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventCommandEventArgsClass = interface(DNEventArgsClass)
  ['{B110CA82-82FB-4C0C-B64A-35932CE73E7C}']
  end;

  /// <summary>
  ///   提供的参数  回调。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventCommandEventArgs')]
  DNEventCommandEventArgs = interface(DNEventArgs)
  ['{0E211CC0-E232-3BB5-97F5-9065EF4E199B}']
  { getter & setter } 

    function get_Command: DNEventCommand;
    function get_Arguments: DNIDictionary<string, string>;

  { methods } 

    /// <summary>
    ///   使具有指定的标识符的事件。
    /// </summary>
    function EnableEvent(eventId: Int32): Boolean;
    /// <summary>
    ///   禁用具有指定的标识符的事件。
    /// </summary>
    function DisableEvent(eventId: Int32): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取用于回调的命令。
    /// </summary>
    property Command: DNEventCommand read get_Command;
    /// <summary>
    ///   获取回调参数的数组。
    /// </summary>
    property Arguments: DNIDictionary<string, string> read get_Arguments;
  end;

  TDNEventCommandEventArgs = class(TDNGenericImport<DNEventCommandEventArgsClass, DNEventCommandEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceCreatedEventArgsClass = interface(DNEventArgsClass)
  ['{2ECBB888-D12B-469E-B276-978FD7260EB4}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEventSourceCreatedEventArgs;

  end;

  /// <summary>
  ///   为  事件提供数据。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventSourceCreatedEventArgs')]
  DNEventSourceCreatedEventArgs = interface(DNEventArgs)
  ['{1B07040C-7ADE-32B0-B009-4132C14D7B34}']
  { getter & setter } 

    function get_EventSource: DNEventSource;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取附加到侦听器的事件源。
    /// </summary>
    property EventSource: DNEventSource read get_EventSource;
  end;

  TDNEventSourceCreatedEventArgs = class(TDNGenericImport<DNEventSourceCreatedEventArgsClass, DNEventSourceCreatedEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventWrittenEventArgsClass = interface(DNEventArgsClass)
  ['{813096C6-5B98-4855-8C59-201A1122E15F}']
  end;

  /// <summary>
  ///   为  回调提供数据。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventWrittenEventArgs')]
  DNEventWrittenEventArgs = interface(DNEventArgs)
  ['{F96AC8CE-5F35-35FC-9975-43DCBDF063A2}']
  { getter & setter } 

    function get_EventName: string;
    function get_EventId: Int32;
    function get_ActivityId: DNGuid;
    function get_RelatedActivityId: DNGuid;
    function get_EventSource: DNEventSource;
    function get_Keywords: DNEventKeywords;
    function get_Opcode: DNEventOpcode;
    function get_Task: DNEventTask;
    function get_Tags: DNEventTags;
    function get_Message: string;
    function get_Channel: DNEventChannel;
    function get_Version: Byte;
    function get_Level: DNEventLevel;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取事件的名称。
    /// </summary>
    property EventName: string read get_EventName;
    /// <summary>
    ///   获取事件标识符。
    /// </summary>
    property EventId: Int32 read get_EventId;
    /// <summary>
    ///   [在 .NET Framework 4.5.1 和更高版本中受支持] 
    ///            
    ///              获取向其写入了事件的线程上的活动 ID。
    /// </summary>
    property ActivityId: DNGuid read get_ActivityId;
    /// <summary>
    ///   [在 .NET Framework 4.5.1 和更高版本中受支持] 
    ///            
    ///              获取与当前实例表示的活动相关的活动的标识符。
    /// </summary>
    property RelatedActivityId: DNGuid read get_RelatedActivityId;
    /// <summary>
    ///   获取事件源对象。
    /// </summary>
    property EventSource: DNEventSource read get_EventSource;
    /// <summary>
    ///   获取事件的关键字。
    /// </summary>
    property Keywords: DNEventKeywords read get_Keywords;
    /// <summary>
    ///   获取事件的操作代码。
    /// </summary>
    property Opcode: DNEventOpcode read get_Opcode;
    /// <summary>
    ///   获取事件的任务。
    /// </summary>
    property Task: DNEventTask read get_Task;
    /// <summary>
    ///   返回在  方法调用中指定的标记。
    /// </summary>
    property Tags: DNEventTags read get_Tags;
    /// <summary>
    ///   获取事件的消息。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取事件的通道。
    /// </summary>
    property Channel: DNEventChannel read get_Channel;
    /// <summary>
    ///   获取事件的版本。
    /// </summary>
    property Version: Byte read get_Version;
    /// <summary>
    ///   获取事件的级别。
    /// </summary>
    property Level: DNEventLevel read get_Level;
  end;

  TDNEventWrittenEventArgs = class(TDNGenericImport<DNEventWrittenEventArgsClass, DNEventWrittenEventArgs>) end;

  //-------------namespace: System----------------
  DNResolveEventArgsClass = interface(DNEventArgsClass)
  ['{D7EB62E7-3F52-476D-88F0-D990DDDE3F49}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定要解析的项的名称。
    /// </summary>
    {class} function init(name: string): DNResolveEventArgs; overload;
    /// <summary>
    ///   新实例初始化  类，同时指定要解析的项和要解析其依赖项的程序集的名称。
    /// </summary>
    {class} function init(name: string; requestingAssembly: DNAssembly): DNResolveEventArgs; overload;

  end;

  /// <summary>
  ///   提供数据加载程序解析事件，如， ， ，和事件。
  /// </summary>
  [DNTypeName('System.ResolveEventArgs')]
  DNResolveEventArgs = interface(DNEventArgs)
  ['{1C1D34A9-3F45-3B51-A9AF-0354975BF8CC}']
  { getter & setter } 

    function get_Name: string;
    function get_RequestingAssembly: DNAssembly;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取要解析的项的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取要解析其依赖项的程序集。
    /// </summary>
    property RequestingAssembly: DNAssembly read get_RequestingAssembly;
  end;

  TDNResolveEventArgs = class(TDNGenericImport<DNResolveEventArgsClass, DNResolveEventArgs>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNFirstChanceExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{80CFE270-2AB3-4495-AF15-44FF698B384F}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  以指定的异常类。
    /// </summary>
    {class} function init(exception: DNException): DNFirstChanceExceptionEventArgs;

  end;

  /// <summary>
  ///   为托管的异常第一次发生时，公共语言运行时开始搜索事件处理程序之前引发通知事件提供数据。
  /// </summary>
  [DNTypeName('System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs')]
  DNFirstChanceExceptionEventArgs = interface(DNEventArgs)
  ['{14B3E9AC-A33D-32DA-B476-AE79B42417CC}']
  { getter & setter } 

    function get_Exception: DNException;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   对在托管代码中引发的异常相对应的托管的异常对象。
    /// </summary>
    property Exception: DNException read get_Exception;
  end;

  TDNFirstChanceExceptionEventArgs = class(TDNGenericImport<DNFirstChanceExceptionEventArgsClass, DNFirstChanceExceptionEventArgs>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNDesignerNamespaceResolveEventArgsClass = interface(DNEventArgsClass)
  ['{FF237F4C-CCA3-47A8-9626-721C48E04C06}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(namespaceName: string): DNDesignerNamespaceResolveEventArgs;

  end;

  /// <summary>
  ///   为  事件提供数据。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.DesignerNamespaceResolveEventArgs')]
  DNDesignerNamespaceResolveEventArgs = interface(DNEventArgs)
  ['{DD01A789-F423-3A77-9685-81858AF62D21}']
  { getter & setter } 

    function get_NamespaceName: string;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取要解析的命名空间的名称。
    /// </summary>
    property NamespaceName: string read get_NamespaceName;
  end;

  TDNDesignerNamespaceResolveEventArgs = class(TDNGenericImport<DNDesignerNamespaceResolveEventArgsClass, DNDesignerNamespaceResolveEventArgs>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNNamespaceResolveEventArgsClass = interface(DNEventArgsClass)
  ['{F5ABFF6C-1ABC-4B2E-BF64-B72F0E588725}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定要解析的命名空间和程序集要解析其依赖项。
    /// </summary>
    {class} function init(namespaceName: string; requestingAssembly: DNAssembly): DNNamespaceResolveEventArgs;

  end;

  /// <summary>
  ///   为  事件提供数据。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.NamespaceResolveEventArgs')]
  DNNamespaceResolveEventArgs = interface(DNEventArgs)
  ['{C22C5011-D04F-339E-B6BC-267696765024}']
  { getter & setter } 

    function get_NamespaceName: string;
    function get_RequestingAssembly: DNAssembly;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取要解析的命名空间的名称。
    /// </summary>
    property NamespaceName: string read get_NamespaceName;
    /// <summary>
    ///   获取要解析其依赖项的程序集的名称。
    /// </summary>
    property RequestingAssembly: DNAssembly read get_RequestingAssembly;
  end;

  TDNNamespaceResolveEventArgs = class(TDNGenericImport<DNNamespaceResolveEventArgsClass, DNNamespaceResolveEventArgs>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSafeSerializationEventArgsClass = interface(DNEventArgsClass)
  ['{42144968-7EF0-4E57-84B5-5743610FF83E}']
  end;

  /// <summary>
  ///   为  事件提供数据。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.SafeSerializationEventArgs')]
  DNSafeSerializationEventArgs = interface(DNEventArgs)
  ['{DE9620B1-BFD5-3CE7-8F86-CF01F41357DB}']
  { getter & setter } 

    function get_StreamingContext: DNStreamingContext;

  { methods } 

    /// <summary>
    ///   将该异常的状态存储。
    /// </summary>
    procedure AddSerializedState(serializedState: DNISafeSerializationData);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置描述的源和目标的序列化流的对象。
    /// </summary>
    property StreamingContext: DNStreamingContext read get_StreamingContext;
  end;

  TDNSafeSerializationEventArgs = class(TDNGenericImport<DNSafeSerializationEventArgsClass, DNSafeSerializationEventArgs>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNUnobservedTaskExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{9346628C-ACF2-404C-8944-E594C9D25907}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  具有未观察到异常类。
    /// </summary>
    {class} function init(exception: DNAggregateException): DNUnobservedTaskExceptionEventArgs;

  end;

  /// <summary>
  ///   为在出错时引发的事件提供数据 的异常未观察到时。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.UnobservedTaskExceptionEventArgs')]
  DNUnobservedTaskExceptionEventArgs = interface(DNEventArgs)
  ['{E8D922E3-4CDB-3266-9DCC-FB4E17E166C6}']
  { getter & setter } 

    function get_Observed: Boolean;
    function get_Exception: DNAggregateException;

  { methods } 

    /// <summary>
    ///   标记  为"已观察到，"这样将阻止该触发异常升级策略，默认情况下，会终止进程。
    /// </summary>
    procedure SetObserved;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取是否已标记此异常为"已观察到。"
    /// </summary>
    property Observed: Boolean read get_Observed;
    /// <summary>
    ///   未观察到异常。
    /// </summary>
    property Exception: DNAggregateException read get_Exception;
  end;

  TDNUnobservedTaskExceptionEventArgs = class(TDNGenericImport<DNUnobservedTaskExceptionEventArgsClass, DNUnobservedTaskExceptionEventArgs>) end;

  //-------------namespace: System----------------
  DNUnhandledExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{AF6632A0-0F22-4D64-9A8D-0D9E625222D4}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  带有异常对象和公共语言运行时终止标记的类。
    /// </summary>
    {class} function init(exception: DNObject; isTerminating: Boolean): DNUnhandledExceptionEventArgs;

  end;

  /// <summary>
  ///   为以下情况下引发的事件提供数据：存在一个不是在任何应用程序域中处理的异常。
  /// </summary>
  [DNTypeName('System.UnhandledExceptionEventArgs')]
  DNUnhandledExceptionEventArgs = interface(DNEventArgs)
  ['{B55DAE2E-C8E8-3C48-B404-D991979A9D9D}']
  { getter & setter } 

    function get_ExceptionObject: DNObject;
    function get_IsTerminating: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取未处理的异常对象。
    /// </summary>
    property ExceptionObject: DNObject read get_ExceptionObject;
    /// <summary>
    ///   指示公共语言运行时是否即将终止。
    /// </summary>
    property IsTerminating: Boolean read get_IsTerminating;
  end;

  TDNUnhandledExceptionEventArgs = class(TDNGenericImport<DNUnhandledExceptionEventArgsClass, DNUnhandledExceptionEventArgs>) end;

  //-------------namespace: System----------------
  DNExceptionClass = interface(DNObjectClass)
  ['{80F863E6-7641-408A-BC4E-BEBCFFF77262}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNException; overload;

  end;

  /// <summary>
  ///   表示在应用程序执行过程中发生的错误。
  ///            
  ///              若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
  /// </summary>
  [DNTypeName('System.Exception')]
  DNException = interface(DNObject)
  ['{A1C0A095-DF97-3441-BFC1-C9F194E494DB}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   当在派生类中重写时，返回 ，它是一个或多个并发的异常的根源。
    /// </summary>
    function GetBaseException: DNException;
    /// <summary>
    ///   创建并返回当前异常的字符串表示形式。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   当在派生类中重写时，用关于异常的信息设置 。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    /// <summary>
    ///   获取当前实例的运行时类型。
    /// </summary>
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取描述当前异常的消息。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取提供有关异常的其他用户定义信息的键/值对集合。
    /// </summary>
    property Data: DNIDictionary read get_Data;
    /// <summary>
    ///   获取导致当前异常的  实例。
    /// </summary>
    property InnerException: DNException read get_InnerException;
    /// <summary>
    ///   获取引发当前异常的方法。
    /// </summary>
    property TargetSite: DNMethodBase read get_TargetSite;
    /// <summary>
    ///   获取调用堆栈上的即时框架字符串表示形式。
    /// </summary>
    property StackTrace: string read get_StackTrace;
    /// <summary>
    ///   获取或设置指向与此异常关联的帮助文件链接。
    /// </summary>
    property HelpLink: string read get_HelpLink write set_HelpLink;
    /// <summary>
    ///   获取或设置导致错误的应用程序或对象的名称。
    /// </summary>
    property Source: string read get_Source write set_Source;
    /// <summary>
    ///   获取或设置 HRESULT（一个分配给特定异常的编码数字值）。
    /// </summary>
    property HResult: Int32 read get_HResult;
  end;

  TDNException = class(TDNGenericImport<DNExceptionClass, DNException>) end;

  //-------------namespace: System----------------
  DNAggregateExceptionClass = interface(DNExceptionClass)
  ['{74DEF4AE-E47B-47EC-95E8-B8175573FE59}']
  { constructors } 

    /// <summary>
    ///   使用由系统提供的用于描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init: DNAggregateException; overload;
    /// <summary>
    ///   使用指定的描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNAggregateException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNAggregateException; overload;
    {class} function init(innerExceptions: DNIEnumerable<DNException>): DNAggregateException; overload;
    /// <summary>
    ///   初始化的新实例类对导致此异常的原因的内部异常的引用。
    /// </summary>
    {class} function init(innerExceptions: TArray<DNException>): DNAggregateException; overload;
    {class} function init(message: string; innerExceptions: DNIEnumerable<DNException>): DNAggregateException; overload;
    /// <summary>
    ///   初始化的新实例使用指定的错误消息和对导致此异常的原因的内部异常的引用的类。
    /// </summary>
    {class} function init(message: string; innerExceptions: TArray<DNException>): DNAggregateException; overload;

  end;

  /// <summary>
  ///   表示在应用程序执行过程中发生的一个或多个错误。
  /// </summary>
  [DNTypeName('System.AggregateException')]
  DNAggregateException = interface(DNException)
  ['{AA4EDB24-5ABA-3706-9832-AFC39E01F712}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   返回，它是此异常的根本原因。
    /// </summary>
    function GetBaseException: DNException;
    /// <summary>
    ///   将  实例平展到一个新实例。
    /// </summary>
    function Flatten: DNAggregateException;
    /// <summary>
    ///   用序列化数据初始化  类的新实例。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   创建并返回的字符串表示形式当前 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAggregateException = class(TDNGenericImport<DNAggregateExceptionClass, DNAggregateException>) end;

  //-------------namespace: System----------------
  DNApplicationExceptionClass = interface(DNExceptionClass)
  ['{4CF26078-22DF-421E-8761-ACAD3F86724D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNApplicationException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNApplicationException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNApplicationException; overload;

  end;

  /// <summary>
  ///   用作应用程序定义的异常的基类。
  /// </summary>
  [DNTypeName('System.ApplicationException')]
  DNApplicationException = interface(DNException)
  ['{682D63B8-1692-31BE-88CD-5CB1F79EDB7B}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNApplicationException = class(TDNGenericImport<DNApplicationExceptionClass, DNApplicationException>) end;

  //-------------namespace: System.Reflection----------------
  DNInvalidFilterCriteriaExceptionClass = interface(DNApplicationExceptionClass)
  ['{2482DAA0-6D8D-4360-8534-4654AE9CECAF}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNInvalidFilterCriteriaException; overload;
    /// <summary>
    ///   使用给定的 HRESULT 和消息字符串初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNInvalidFilterCriteriaException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNInvalidFilterCriteriaException; overload;

  end;

  /// <summary>
  ///   当筛选条件对正使用的筛选器类型无效时，在  中引发的异常。
  /// </summary>
  [DNTypeName('System.Reflection.InvalidFilterCriteriaException')]
  DNInvalidFilterCriteriaException = interface(DNApplicationException)
  ['{7B938A6F-77BF-351C-A712-69483C91115D}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidFilterCriteriaException = class(TDNGenericImport<DNInvalidFilterCriteriaExceptionClass, DNInvalidFilterCriteriaException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetExceptionClass = interface(DNApplicationExceptionClass)
  ['{E54F4748-0268-4D97-9827-8BA5A4A53E20}']
  { constructors } 

    /// <summary>
    ///   使用空消息和异常的根本原因初始化  类的新实例。
    /// </summary>
    {class} function init: DNTargetException; overload;
    /// <summary>
    ///   使用给定消息和根源异常初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNTargetException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNTargetException; overload;

  end;

  /// <summary>
  ///   表示尝试调用无效目标时引发的异常。
  /// </summary>
  [DNTypeName('System.Reflection.TargetException')]
  DNTargetException = interface(DNApplicationException)
  ['{0D23F8B4-F2A6-3EFF-9D37-BDF79AC6B440}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTargetException = class(TDNGenericImport<DNTargetExceptionClass, DNTargetException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetInvocationExceptionClass = interface(DNApplicationExceptionClass)
  ['{18F525EF-5A71-43A4-B465-12011505414A}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类提供对导致此异常的内部异常的引用。
    /// </summary>
    {class} function init(inner: DNException): DNTargetInvocationException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNTargetInvocationException; overload;

  end;

  /// <summary>
  ///   由通过反射调用的方法引发的异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Reflection.TargetInvocationException')]
  DNTargetInvocationException = interface(DNApplicationException)
  ['{03D016E3-CAE1-3068-880E-AF8D08D517F0}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTargetInvocationException = class(TDNGenericImport<DNTargetInvocationExceptionClass, DNTargetInvocationException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetParameterCountExceptionClass = interface(DNApplicationExceptionClass)
  ['{0D7D648B-6C6B-46C7-AA89-C9E4BED46FBD}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  用空消息字符串和异常的根源。
    /// </summary>
    {class} function init: DNTargetParameterCountException; overload;
    /// <summary>
    ///   新实例初始化  类，将其设置为给定的消息和将根源异常的消息字符串。
    /// </summary>
    {class} function init(message: string): DNTargetParameterCountException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNTargetParameterCountException; overload;

  end;

  /// <summary>
  ///   当调用的参数数目与预期的数目不匹配时引发的异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Reflection.TargetParameterCountException')]
  DNTargetParameterCountException = interface(DNApplicationException)
  ['{DA317BE2-1A0D-37B3-83F2-A0F32787FC67}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTargetParameterCountException = class(TDNGenericImport<DNTargetParameterCountExceptionClass, DNTargetParameterCountException>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleCannotBeOpenedExceptionClass = interface(DNApplicationExceptionClass)
  ['{92013E2D-B6EB-473E-AEB8-9AC4CC646299}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNWaitHandleCannotBeOpenedException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNWaitHandleCannotBeOpenedException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNWaitHandleCannotBeOpenedException; overload;

  end;

  /// <summary>
  ///   当尝试打开的系统 mutex、 信号量或事件等待句柄不存在时引发的异常。
  /// </summary>
  [DNTypeName('System.Threading.WaitHandleCannotBeOpenedException')]
  DNWaitHandleCannotBeOpenedException = interface(DNApplicationException)
  ['{D4AC0E05-5763-310F-BF35-8B2BB3B4E593}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNWaitHandleCannotBeOpenedException = class(TDNGenericImport<DNWaitHandleCannotBeOpenedExceptionClass, DNWaitHandleCannotBeOpenedException>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceExceptionClass = interface(DNExceptionClass)
  ['{06B7844B-FB07-4FBF-A133-276D599AD220}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEventSourceException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNEventSourceException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNEventSourceException; overload;

  end;

  /// <summary>
  ///   当跟踪 Windows (ETW) 事件过程中发生错误时引发的异常。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventSourceException')]
  DNEventSourceException = interface(DNException)
  ['{B8DFBCB1-BBF7-3D85-BEFC-190A627583A7}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventSourceException = class(TDNGenericImport<DNEventSourceExceptionClass, DNEventSourceException>) end;

  //-------------namespace: System----------------
  DNInvalidTimeZoneExceptionClass = interface(DNExceptionClass)
  ['{9CB1451C-3C12-4C1D-A26C-F30625BF7EF5}']
  { constructors } 

    /// <summary>
    ///   使用指定的消息字符串初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNInvalidTimeZoneException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNInvalidTimeZoneException; overload;
    /// <summary>
    ///   使用由系统提供的消息初始化  类的新实例。
    /// </summary>
    {class} function init: DNInvalidTimeZoneException; overload;

  end;

  /// <summary>
  ///   当时区信息无效时引发的异常。
  /// </summary>
  [DNTypeName('System.InvalidTimeZoneException')]
  DNInvalidTimeZoneException = interface(DNException)
  ['{9A2065C0-960C-3EEE-A37E-980766375A62}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidTimeZoneException = class(TDNGenericImport<DNInvalidTimeZoneExceptionClass, DNInvalidTimeZoneException>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  DNIsolatedStorageExceptionClass = interface(DNExceptionClass)
  ['{D3EBE971-E8FE-4789-BB0D-0382740DCD1D}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNIsolatedStorageException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNIsolatedStorageException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNIsolatedStorageException; overload;

  end;

  /// <summary>
  ///   独立存储中的操作失败时所引发的异常。
  /// </summary>
  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageException')]
  DNIsolatedStorageException = interface(DNException)
  ['{4479C009-4CC3-39A2-8F92-DFCDF034F748}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIsolatedStorageException = class(TDNGenericImport<DNIsolatedStorageExceptionClass, DNIsolatedStorageException>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeWrappedExceptionClass = interface(DNExceptionClass)
  ['{D17B2A47-09B2-4C9A-B4EA-943CA5119BC8}']
  end;

  /// <summary>
  ///   包装不是派生自异常  类。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.RuntimeWrappedException')]
  DNRuntimeWrappedException = interface(DNException)
  ['{094081A4-421F-34DD-A05B-F0A5160DC5B2}']
  { getter & setter } 

    function get_WrappedException: DNObject;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   使用有关异常的信息设置  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取已包装的对象  对象。
    /// </summary>
    property WrappedException: DNObject read get_WrappedException;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRuntimeWrappedException = class(TDNGenericImport<DNRuntimeWrappedExceptionClass, DNRuntimeWrappedException>) end;

  //-------------namespace: System----------------
  DNSystemExceptionClass = interface(DNExceptionClass)
  ['{24526572-DE57-4A2D-BC2D-52735A018893}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSystemException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNSystemException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNSystemException; overload;

  end;

  /// <summary>
  ///   用作系统异常命名空间的基类。
  /// </summary>
  [DNTypeName('System.SystemException')]
  DNSystemException = interface(DNException)
  ['{4224AC84-9B11-3561-8923-C893CA77ACBE}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSystemException = class(TDNGenericImport<DNSystemExceptionClass, DNSystemException>) end;

  //-------------namespace: System----------------
  DNAccessViolationExceptionClass = interface(DNSystemExceptionClass)
  ['{8D07853F-0A7B-4C7E-8EFD-16643636AB32}']
  { constructors } 

    /// <summary>
    ///   使用由系统提供的用于描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init: DNAccessViolationException; overload;
    /// <summary>
    ///   使用指定的描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNAccessViolationException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNAccessViolationException; overload;

  end;

  /// <summary>
  ///   在试图读写受保护内存时引发的异常。
  /// </summary>
  [DNTypeName('System.AccessViolationException')]
  DNAccessViolationException = interface(DNSystemException)
  ['{4C3EBFD5-FC72-33DC-BC37-9953EB25B8D7}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAccessViolationException = class(TDNGenericImport<DNAccessViolationExceptionClass, DNAccessViolationException>) end;

  //-------------namespace: System----------------
  DNAppDomainUnloadedExceptionClass = interface(DNSystemExceptionClass)
  ['{FCEE20F7-B991-46DE-AB09-7F4FB90C4114}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNAppDomainUnloadedException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNAppDomainUnloadedException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNAppDomainUnloadedException; overload;

  end;

  /// <summary>
  ///   当尝试访问已卸载的应用程序域时引发的异常。
  /// </summary>
  [DNTypeName('System.AppDomainUnloadedException')]
  DNAppDomainUnloadedException = interface(DNSystemException)
  ['{61B3E12B-3586-3A58-A497-7ED7C4C794B9}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAppDomainUnloadedException = class(TDNGenericImport<DNAppDomainUnloadedExceptionClass, DNAppDomainUnloadedException>) end;

  //-------------namespace: System----------------
  DNArgumentExceptionClass = interface(DNSystemExceptionClass)
  ['{D35C1F15-0D1B-4E86-A0EB-031A682DB258}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNArgumentException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNArgumentException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNArgumentException; overload;
    /// <summary>
    ///   使用指定的错误消息、参数名称和对内部异常的引用（为该异常根源）来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; paramName: string; innerException: DNException): DNArgumentException; overload;
    /// <summary>
    ///   使用指定的错误消息和导致此异常的参数的名称来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; paramName: string): DNArgumentException; overload;

  end;

  /// <summary>
  ///   当向方法提供的参数之一无效时引发的异常。
  /// </summary>
  [DNTypeName('System.ArgumentException')]
  DNArgumentException = interface(DNSystemException)
  ['{3FDCEEC6-B14B-37E2-BB69-ABC7CA0DA22F}']
  { getter & setter } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   设置带有参数名和附加异常信息的  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取错误消息和参数名；如果未设置参数名，则仅获取错误消息。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取导致该异常的参数的名称。
    /// </summary>
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArgumentException = class(TDNGenericImport<DNArgumentExceptionClass, DNArgumentException>) end;

  //-------------namespace: System----------------
  DNArgumentNullExceptionClass = interface(DNArgumentExceptionClass)
  ['{457D1990-B216-4537-BB10-1EFD5E734397}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNArgumentNullException; overload;
    /// <summary>
    ///   初始化的新实例同名会导致此异常的参数的类。
    /// </summary>
    {class} function init(paramName: string): DNArgumentNullException; overload;
    /// <summary>
    ///   初始化的新实例使用指定的错误消息和导致此异常的异常类。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNArgumentNullException; overload;
    /// <summary>
    ///   初始化的实例使用指定的错误消息和导致此异常的参数的名称的类。
    /// </summary>
    {class} function init(paramName: string; message: string): DNArgumentNullException; overload;

  end;

  /// <summary>
  ///   当将 null 引用（Visual Basic 中为 ）传递到不接受其作为有效参数的方法时引发的异常。
  /// </summary>
  [DNTypeName('System.ArgumentNullException')]
  DNArgumentNullException = interface(DNArgumentException)
  ['{3BD1F243-9BC4-305D-9B1C-0D10C80329FC}']
  { getter & setter } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArgumentNullException = class(TDNGenericImport<DNArgumentNullExceptionClass, DNArgumentNullException>) end;

  //-------------namespace: System----------------
  DNArgumentOutOfRangeExceptionClass = interface(DNArgumentExceptionClass)
  ['{C2D8C5AC-86BA-4E11-AA47-E83DF41EFF82}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNArgumentOutOfRangeException; overload;
    /// <summary>
    ///   初始化的新实例同名会导致此异常的参数的类。
    /// </summary>
    {class} function init(paramName: string): DNArgumentOutOfRangeException; overload;
    /// <summary>
    ///   初始化的新实例同名会导致此异常和指定的错误消息的参数的类。
    /// </summary>
    {class} function init(paramName: string; message: string): DNArgumentOutOfRangeException; overload;
    /// <summary>
    ///   初始化的新实例使用指定的错误消息和导致此异常的异常类。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNArgumentOutOfRangeException; overload;
    /// <summary>
    ///   初始化的新实例与参数的类名称，该参数，并且指定的错误消息的值。
    /// </summary>
    {class} function init(paramName: string; actualValue: DNObject; message: string): DNArgumentOutOfRangeException; overload;

  end;

  /// <summary>
  ///   当自变量的值超出了所调用方法定义的允许值范围时引发的异常。
  /// </summary>
  [DNTypeName('System.ArgumentOutOfRangeException')]
  DNArgumentOutOfRangeException = interface(DNArgumentException)
  ['{74BDD0B9-38D7-3FDA-A67E-D404EE684F24}']
  { getter & setter } 

    function get_Message: string;
    function get_ActualValue: DNObject;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   集  具有无效的参数值和附加异常信息对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取错误消息和参数值无效或仅错误消息的字符串表示形式，如果参数值为 null。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取导致该异常的参数值。
    /// </summary>
    property ActualValue: DNObject read get_ActualValue;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArgumentOutOfRangeException = class(TDNGenericImport<DNArgumentOutOfRangeExceptionClass, DNArgumentOutOfRangeException>) end;

  //-------------namespace: System----------------
  DNDuplicateWaitObjectExceptionClass = interface(DNArgumentExceptionClass)
  ['{F7FF866A-9E61-4239-8FE6-AA0A7CF88CDC}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDuplicateWaitObjectException; overload;
    /// <summary>
    ///   新实例初始化  同名会导致此异常的参数的类。
    /// </summary>
    {class} function init(parameterName: string): DNDuplicateWaitObjectException; overload;
    /// <summary>
    ///   使用指定的错误消息和导致此异常的参数的名称来初始化  类的新实例。
    /// </summary>
    {class} function init(parameterName: string; message: string): DNDuplicateWaitObjectException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNDuplicateWaitObjectException; overload;

  end;

  /// <summary>
  ///   当对象在同步对象数组中多次出现时引发异常。
  /// </summary>
  [DNTypeName('System.DuplicateWaitObjectException')]
  DNDuplicateWaitObjectException = interface(DNArgumentException)
  ['{CC20C6DF-A054-3F09-A5F5-A3B5A25F4CE6}']
  { getter & setter } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDuplicateWaitObjectException = class(TDNGenericImport<DNDuplicateWaitObjectExceptionClass, DNDuplicateWaitObjectException>) end;

  //-------------namespace: System.Globalization----------------
  DNCultureNotFoundExceptionClass = interface(DNArgumentExceptionClass)
  ['{A7DF2DBA-4C05-4E97-BA0E-860D69449690}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，将其消息字符串设置为系统提供的消息。
    /// </summary>
    {class} function init: DNCultureNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNCultureNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息和导致此异常的参数的名称来初始化  类的新实例。
    /// </summary>
    {class} function init(paramName: string; message: string): DNCultureNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNCultureNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息、无效的区域性 ID 和导致此异常的参数的名称来初始化  类的新实例。
    /// </summary>
    {class} function init(paramName: string; invalidCultureId: Int32; message: string): DNCultureNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息、无效的区域性 ID 和对导致此异常的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; invalidCultureId: Int32; innerException: DNException): DNCultureNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息、无效的区域性名称和导致此异常的参数的名称来初始化  类的新实例。
    /// </summary>
    {class} function init(paramName: string; invalidCultureName: string; message: string): DNCultureNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息、无效的区域性名称和对导致此异常的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; invalidCultureName: string; innerException: DNException): DNCultureNotFoundException; overload;

  end;

  /// <summary>
  ///   当方法尝试构造不可用的区域性时引发的异常。
  /// </summary>
  [DNTypeName('System.Globalization.CultureNotFoundException')]
  DNCultureNotFoundException = interface(DNArgumentException)
  ['{5DF1CE00-4EBD-3F48-887A-C4BCCA7AD912}']
  { getter & setter } 

    function get_InvalidCultureName: string;
    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   设置带有参数名和附加异常信息的  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取找不到的区域性名称。
    /// </summary>
    property InvalidCultureName: string read get_InvalidCultureName;
    /// <summary>
    ///   获取解释异常原因的错误消息。
    /// </summary>
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCultureNotFoundException = class(TDNGenericImport<DNCultureNotFoundExceptionClass, DNCultureNotFoundException>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackExceptionClass = interface(DNArgumentExceptionClass)
  ['{33B541AC-9B3D-4328-8BBC-3EE6D9AA6AF7}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDecoderFallbackException; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               一个参数指定的错误消息。
    /// </summary>
    {class} function init(message: string): DNDecoderFallbackException; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               参数指定的错误消息和导致此异常的内部异常。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNDecoderFallbackException; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               参数指定的错误消息、 被解码的字节数组以及不能进行解码的字节的索引。
    /// </summary>
    {class} function init(message: string; bytesUnknown: TArray<Byte>; index: Int32): DNDecoderFallbackException; overload;

  end;

  /// <summary>
  ///   解码器回退操作失败时引发的异常。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Text.DecoderFallbackException')]
  DNDecoderFallbackException = interface(DNArgumentException)
  ['{84FC747A-1940-3D85-8819-EA53FC73DB1B}']
  { getter & setter } 

    function get_BytesUnknown: TArray<Byte>;
    function get_Index: Int32;
    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取导致异常的输入的字节序列。
    /// </summary>
    property BytesUnknown: TArray<Byte> read get_BytesUnknown;
    /// <summary>
    ///   获取导致异常的字节输入的字节序列中的索引位置。
    /// </summary>
    property Index: Int32 read get_Index;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDecoderFallbackException = class(TDNGenericImport<DNDecoderFallbackExceptionClass, DNDecoderFallbackException>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackExceptionClass = interface(DNArgumentExceptionClass)
  ['{8D064F0A-BDB4-4771-9872-4A99882EF08C}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEncoderFallbackException; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               一个参数指定的错误消息。
    /// </summary>
    {class} function init(message: string): DNEncoderFallbackException; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               参数指定的错误消息和导致此异常的内部异常。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNEncoderFallbackException; overload;

  end;

  /// <summary>
  ///   编码器回退操作失败时引发的异常。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Text.EncoderFallbackException')]
  DNEncoderFallbackException = interface(DNArgumentException)
  ['{8078DA75-F43F-341D-A00E-20D6D736415E}']
  { getter & setter } 

    function get_CharUnknown: Char;
    function get_CharUnknownHigh: Char;
    function get_CharUnknownLow: Char;
    function get_Index: Int32;
    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   指示导致异常的输入是否为代理项对。
    /// </summary>
    function IsUnknownSurrogate: Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取导致异常的输入的字符。
    /// </summary>
    property CharUnknown: Char read get_CharUnknown;
    /// <summary>
    ///   获取导致异常的代理项对的高组件字符。
    /// </summary>
    property CharUnknownHigh: Char read get_CharUnknownHigh;
    /// <summary>
    ///   获取导致异常的代理项对的低组件字符。
    /// </summary>
    property CharUnknownLow: Char read get_CharUnknownLow;
    /// <summary>
    ///   获取导致异常的字符输入缓冲区中的索引位置。
    /// </summary>
    property Index: Int32 read get_Index;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEncoderFallbackException = class(TDNGenericImport<DNEncoderFallbackExceptionClass, DNEncoderFallbackException>) end;

  //-------------namespace: System----------------
  DNArithmeticExceptionClass = interface(DNSystemExceptionClass)
  ['{534FC3CC-5C56-4011-8189-41BD2C84804D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNArithmeticException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNArithmeticException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNArithmeticException; overload;

  end;

  /// <summary>
  ///   当算术、强制转换或转换操作发生错误时引发的异常。
  /// </summary>
  [DNTypeName('System.ArithmeticException')]
  DNArithmeticException = interface(DNSystemException)
  ['{647053C3-1879-34D7-AE57-67015C91FC70}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArithmeticException = class(TDNGenericImport<DNArithmeticExceptionClass, DNArithmeticException>) end;

  //-------------namespace: System----------------
  DNDivideByZeroExceptionClass = interface(DNArithmeticExceptionClass)
  ['{9069E68F-063C-47CD-BB35-84592E8E4881}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDivideByZeroException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNDivideByZeroException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNDivideByZeroException; overload;

  end;

  /// <summary>
  ///   尝试将整数或  值除以零时引发的异常。
  /// </summary>
  [DNTypeName('System.DivideByZeroException')]
  DNDivideByZeroException = interface(DNArithmeticException)
  ['{F6914A11-D95D-324F-BA0F-39A374625290}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDivideByZeroException = class(TDNGenericImport<DNDivideByZeroExceptionClass, DNDivideByZeroException>) end;

  //-------------namespace: System----------------
  DNNotFiniteNumberExceptionClass = interface(DNArithmeticExceptionClass)
  ['{3C5D2C4D-74A1-4CB0-A567-13C92BD1D760}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNNotFiniteNumberException; overload;
    /// <summary>
    ///   新实例初始化  与无效数量的类。
    /// </summary>
    {class} function init(offendingNumber: Double): DNNotFiniteNumberException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNNotFiniteNumberException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的错误消息和数无效。
    /// </summary>
    {class} function init(message: string; offendingNumber: Double): DNNotFiniteNumberException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的错误消息和对此异常的根本原因的内部异常的引用。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNNotFiniteNumberException; overload;
    /// <summary>
    ///   新实例初始化  类指定的错误消息、 无效的编号，与此异常的根本原因的内部异常的引用。
    /// </summary>
    {class} function init(message: string; offendingNumber: Double; innerException: DNException): DNNotFiniteNumberException; overload;

  end;

  /// <summary>
  ///   浮点值为正无穷大、 负无穷大或非数字 (NaN) 时引发的异常。
  /// </summary>
  [DNTypeName('System.NotFiniteNumberException')]
  DNNotFiniteNumberException = interface(DNArithmeticException)
  ['{7E34AB89-0684-3B86-8A0F-E638EB4E6252}']
  { getter & setter } 

    function get_OffendingNumber: Double;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   集  具有无效数字和附加异常信息的对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取为正无穷大、 负无穷大或非数字 (NaN) 的数无效。
    /// </summary>
    property OffendingNumber: Double read get_OffendingNumber;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNotFiniteNumberException = class(TDNGenericImport<DNNotFiniteNumberExceptionClass, DNNotFiniteNumberException>) end;

  //-------------namespace: System----------------
  DNOverflowExceptionClass = interface(DNArithmeticExceptionClass)
  ['{B2E62394-D0B7-4E2E-A800-FB2F15E1E4AC}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNOverflowException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNOverflowException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNOverflowException; overload;

  end;

  /// <summary>
  ///   当在检查的上下文中执行的算术、强制转换或转换运算导致溢出时引发的异常。
  /// </summary>
  [DNTypeName('System.OverflowException')]
  DNOverflowException = interface(DNArithmeticException)
  ['{4286FA72-A2FA-3245-8751-D4206070A191}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOverflowException = class(TDNGenericImport<DNOverflowExceptionClass, DNOverflowException>) end;

  //-------------namespace: System----------------
  DNArrayTypeMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{1AC8B894-33DA-40A3-97B9-5A1B10801CD3}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNArrayTypeMismatchException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNArrayTypeMismatchException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNArrayTypeMismatchException; overload;

  end;

  /// <summary>
  ///   当尝试在数组内存储错误类型的元素时引发的异常。
  /// </summary>
  [DNTypeName('System.ArrayTypeMismatchException')]
  DNArrayTypeMismatchException = interface(DNSystemException)
  ['{676E1164-752C-3A74-8D3F-BCD32A2026D6}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArrayTypeMismatchException = class(TDNGenericImport<DNArrayTypeMismatchExceptionClass, DNArrayTypeMismatchException>) end;

  //-------------namespace: System----------------
  DNBadImageFormatExceptionClass = interface(DNSystemExceptionClass)
  ['{7BD2FA2A-C6FA-4519-8B19-D2FAC242CA71}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNBadImageFormatException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNBadImageFormatException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNBadImageFormatException; overload;
    /// <summary>
    ///   初始化的新实例使用指定的错误消息和文件名称的类。
    /// </summary>
    {class} function init(message: string; fileName: string): DNBadImageFormatException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; fileName: string; inner: DNException): DNBadImageFormatException; overload;

  end;

  /// <summary>
  ///   当动态链接库 (DLL) 或可执行程序的文件映像无效时引发的异常。
  /// </summary>
  [DNTypeName('System.BadImageFormatException')]
  DNBadImageFormatException = interface(DNSystemException)
  ['{E9148312-A9BF-3A45-BBCA-350967FD78F5}']
  { getter & setter } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   返回该异常的完全限定名，还可能返回错误消息、内部异常的名称和堆栈跟踪。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   集  用文件名、 程序集缓存日志和附加异常信息的对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取错误消息和引发此异常的文件的名称。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取导致该异常的文件的名称。
    /// </summary>
    property FileName: string read get_FileName;
    /// <summary>
    ///   获取描述程序集加载失败的原因的日志文件。
    /// </summary>
    property FusionLog: string read get_FusionLog;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNBadImageFormatException = class(TDNGenericImport<DNBadImageFormatExceptionClass, DNBadImageFormatException>) end;

  //-------------namespace: System----------------
  DNCannotUnloadAppDomainExceptionClass = interface(DNSystemExceptionClass)
  ['{7FDE6458-2836-418F-8281-BADCA9D478EE}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCannotUnloadAppDomainException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNCannotUnloadAppDomainException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNCannotUnloadAppDomainException; overload;

  end;

  /// <summary>
  ///   当尝试卸载应用程序域失败时引发的异常。
  /// </summary>
  [DNTypeName('System.CannotUnloadAppDomainException')]
  DNCannotUnloadAppDomainException = interface(DNSystemException)
  ['{29C69707-875F-3678-8F01-283094A2DFB1}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCannotUnloadAppDomainException = class(TDNGenericImport<DNCannotUnloadAppDomainExceptionClass, DNCannotUnloadAppDomainException>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNKeyNotFoundExceptionClass = interface(DNSystemExceptionClass)
  ['{B60FCF5F-9FD7-456E-8298-DCC323F5ABD7}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用默认属性值。
    /// </summary>
    {class} function init: DNKeyNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNKeyNotFoundException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的错误消息和对导致此异常的内部异常的引用。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNKeyNotFoundException; overload;

  end;

  /// <summary>
  ///   当指定用于访问集合中元素的键与集合中的任意键均不匹配时所引发的异常。
  /// </summary>
  [DNTypeName('System.Collections.Generic.KeyNotFoundException')]
  DNKeyNotFoundException = interface(DNSystemException)
  ['{0D52ABE3-3C93-3D94-A744-AC44850BACCD}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNKeyNotFoundException = class(TDNGenericImport<DNKeyNotFoundExceptionClass, DNKeyNotFoundException>) end;

  //-------------namespace: System----------------
  DNContextMarshalExceptionClass = interface(DNSystemExceptionClass)
  ['{B616791D-FCC6-44AB-9265-70ACF7656A61}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNContextMarshalException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNContextMarshalException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNContextMarshalException; overload;

  end;

  /// <summary>
  ///   在尝试跨上下文边界封送对象失败时引发的异常。
  /// </summary>
  [DNTypeName('System.ContextMarshalException')]
  DNContextMarshalException = interface(DNSystemException)
  ['{CBEAA915-4D2C-3F77-98E8-A258B0FD3CEF}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNContextMarshalException = class(TDNGenericImport<DNContextMarshalExceptionClass, DNContextMarshalException>) end;

  //-------------namespace: System----------------
  DNDataMisalignedExceptionClass = interface(DNSystemExceptionClass)
  ['{528F76CC-68A7-4315-AD6D-537CA5AD1E19}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDataMisalignedException; overload;
    /// <summary>
    ///   使用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNDataMisalignedException; overload;
    /// <summary>
    ///   新实例初始化  类使用指定的错误消息和基础异常。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNDataMisalignedException; overload;

  end;

  /// <summary>
  ///   当在某个地址读取或写入一个单元的数据，但该地址的数据大小不是该数据单元的整数倍时引发的异常。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.DataMisalignedException')]
  DNDataMisalignedException = interface(DNSystemException)
  ['{AAD4BDD3-81AA-3ABC-B53B-D904D25BC01E}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDataMisalignedException = class(TDNGenericImport<DNDataMisalignedExceptionClass, DNDataMisalignedException>) end;

  //-------------namespace: System----------------
  DNExecutionEngineExceptionClass = interface(DNSystemExceptionClass)
  ['{A1CC8118-9BF5-4F13-9BB6-E5E87D2C82D0}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNExecutionEngineException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNExecutionEngineException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNExecutionEngineException; overload;

  end;

  /// <summary>
  ///   当公共语言运行时的执行引擎中存在内部错误时引发的异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.ExecutionEngineException')]
  DNExecutionEngineException = interface(DNSystemException)
  ['{E786FB32-B659-3D96-94C4-E1A9FC037868}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNExecutionEngineException = class(TDNGenericImport<DNExecutionEngineExceptionClass, DNExecutionEngineException>) end;

  //-------------namespace: System----------------
  DNFormatExceptionClass = interface(DNSystemExceptionClass)
  ['{39BA8F4C-DAE6-41EF-BFB6-D96994CB3A82}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNFormatException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNFormatException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNFormatException; overload;

  end;

  /// <summary>
  ///   当参数的格式无效或复合格式字符串的格式不标准时引发的异常。
  /// </summary>
  [DNTypeName('System.FormatException')]
  DNFormatException = interface(DNSystemException)
  ['{964AA3BD-4B12-3E23-9D7F-99342AFAE812}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFormatException = class(TDNGenericImport<DNFormatExceptionClass, DNFormatException>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeFormatExceptionClass = interface(DNFormatExceptionClass)
  ['{69E3C844-09BA-444B-B975-FA9B14A0F01E}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  使用默认属性的类。
    /// </summary>
    {class} function init: DNCustomAttributeFormatException; overload;
    /// <summary>
    ///   使用指定的消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNCustomAttributeFormatException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNCustomAttributeFormatException; overload;

  end;

  /// <summary>
  ///   当自定义特性的二进制格式无效时引发的异常。
  /// </summary>
  [DNTypeName('System.Reflection.CustomAttributeFormatException')]
  DNCustomAttributeFormatException = interface(DNFormatException)
  ['{D5CB383D-99F4-3C7E-A9C3-85B53661448F}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCustomAttributeFormatException = class(TDNGenericImport<DNCustomAttributeFormatExceptionClass, DNCustomAttributeFormatException>) end;

  //-------------namespace: System----------------
  DNIndexOutOfRangeExceptionClass = interface(DNSystemExceptionClass)
  ['{EBF1D0CB-31DD-4D1D-8D23-11FDB6E5628E}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNIndexOutOfRangeException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNIndexOutOfRangeException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNIndexOutOfRangeException; overload;

  end;

  /// <summary>
  ///   试图访问索引超出界限的数组或集合的元素时引发的异常。
  /// </summary>
  [DNTypeName('System.IndexOutOfRangeException')]
  DNIndexOutOfRangeException = interface(DNSystemException)
  ['{5CA9971B-2DC3-3BC8-847A-5E6D15CBB16E}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIndexOutOfRangeException = class(TDNGenericImport<DNIndexOutOfRangeExceptionClass, DNIndexOutOfRangeException>) end;

  //-------------namespace: System----------------
  DNInsufficientExecutionStackExceptionClass = interface(DNSystemExceptionClass)
  ['{17F61E6D-765C-42F9-8D34-3E8A6FB08D5C}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNInsufficientExecutionStackException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNInsufficientExecutionStackException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNInsufficientExecutionStackException; overload;

  end;

  /// <summary>
  ///   当存在的执行堆栈不足以允许大多数方法执行时引发的异常。
  /// </summary>
  [DNTypeName('System.InsufficientExecutionStackException')]
  DNInsufficientExecutionStackException = interface(DNSystemException)
  ['{6976E0CF-989A-3BE8-94A6-5F26E27B5F53}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInsufficientExecutionStackException = class(TDNGenericImport<DNInsufficientExecutionStackExceptionClass, DNInsufficientExecutionStackException>) end;

  //-------------namespace: System----------------
  DNInvalidCastExceptionClass = interface(DNSystemExceptionClass)
  ['{7CF0BF3C-4259-4C47-B220-924840E33311}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNInvalidCastException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNInvalidCastException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNInvalidCastException; overload;
    /// <summary>
    ///   新实例初始化  类替换指定的消息和错误代码。
    /// </summary>
    {class} function init(message: string; errorCode: Int32): DNInvalidCastException; overload;

  end;

  /// <summary>
  ///   当执行了无效的强制转换或显式转换时引发的异常。
  /// </summary>
  [DNTypeName('System.InvalidCastException')]
  DNInvalidCastException = interface(DNSystemException)
  ['{7F6BCBE5-EB30-370B-9F1B-92A6265AFEDD}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidCastException = class(TDNGenericImport<DNInvalidCastExceptionClass, DNInvalidCastException>) end;

  //-------------namespace: System----------------
  DNInvalidOperationExceptionClass = interface(DNSystemExceptionClass)
  ['{FDEE9C47-78DB-4BED-B73B-E68C397FFD9B}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNInvalidOperationException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNInvalidOperationException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNInvalidOperationException; overload;

  end;

  /// <summary>
  ///   当方法调用对于对象的当前状态无效时引发的异常。
  /// </summary>
  [DNTypeName('System.InvalidOperationException')]
  DNInvalidOperationException = interface(DNSystemException)
  ['{9546306B-1B68-33AF-80DB-3A9206501515}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidOperationException = class(TDNGenericImport<DNInvalidOperationExceptionClass, DNInvalidOperationException>) end;

  //-------------namespace: System----------------
  DNObjectDisposedExceptionClass = interface(DNInvalidOperationExceptionClass)
  ['{0A5D43BA-3314-4CCD-80F3-B8049E45F428}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例类包含已释放对象的名称的字符串。
    /// </summary>
    {class} function init(objectName: string): DNObjectDisposedException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的对象名称和消息的类。
    /// </summary>
    {class} function init(objectName: string; message: string): DNObjectDisposedException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNObjectDisposedException; overload;

  end;

  /// <summary>
  ///   对已释放的对象执行操作时所引发的异常。
  /// </summary>
  [DNTypeName('System.ObjectDisposedException')]
  DNObjectDisposedException = interface(DNInvalidOperationException)
  ['{F17BAAF6-D35C-3C6E-ACD3-D0D49A5022C4}']
  { getter & setter } 

    function get_Message: string;
    function get_ObjectName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   检索  参数名称和附加异常信息的对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取描述错误的消息。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取已释放对象的名称。
    /// </summary>
    property ObjectName: string read get_ObjectName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNObjectDisposedException = class(TDNGenericImport<DNObjectDisposedExceptionClass, DNObjectDisposedException>) end;

  //-------------namespace: System----------------
  DNInvalidProgramExceptionClass = interface(DNSystemExceptionClass)
  ['{5687A0A6-FF6A-4090-AAFC-9D514820740F}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNInvalidProgramException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNInvalidProgramException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNInvalidProgramException; overload;

  end;

  /// <summary>
  ///   当程序包含无效的 Microsoft 中间语言 (MSIL) 或元数据时引发的异常。
  ///               这通常表示生成该程序的编译器中存在 bug。
  /// </summary>
  [DNTypeName('System.InvalidProgramException')]
  DNInvalidProgramException = interface(DNSystemException)
  ['{91591469-EFEF-3D63-90F9-88520F0AA1EF}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidProgramException = class(TDNGenericImport<DNInvalidProgramExceptionClass, DNInvalidProgramException>) end;

  //-------------namespace: System.IO----------------
  DNIOExceptionClass = interface(DNSystemExceptionClass)
  ['{B66DC75B-3E8A-4AEE-8F4D-A721AB4B6EB0}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，其消息字符串设置为空字符串 ("")，其 HRESULT 设置为 COR_E_IO，并且其内部异常设置为 null 引用。
    /// </summary>
    {class} function init: DNIOException; overload;
    /// <summary>
    ///   初始化  类的新实例，其中将消息字符串设置为 ，将其 HRESULT 设置为 COR_E_IO，并且将其内部异常设置为 。
    /// </summary>
    {class} function init(message: string): DNIOException; overload;
    /// <summary>
    ///   初始化  类的新实例，将其消息字符串设置为  以及将其 HERSULT 设置为用户定义的。
    /// </summary>
    {class} function init(message: string; hresult: Int32): DNIOException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNIOException; overload;

  end;

  /// <summary>
  ///   发生 I/O 错误时引发的异常。
  /// </summary>
  [DNTypeName('System.IO.IOException')]
  DNIOException = interface(DNSystemException)
  ['{A164C0BF-67AE-3C7E-BC05-BFE24A8CDB62}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIOException = class(TDNGenericImport<DNIOExceptionClass, DNIOException>) end;

  //-------------namespace: System.IO----------------
  DNDirectoryNotFoundExceptionClass = interface(DNIOExceptionClass)
  ['{32968121-F958-4D46-8A8E-D590C1C68B8D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  带有其消息字符串设置为系统提供的消息和将设置为 COR_E_DIRECTORYNOTFOUND 其 HRESULT 的类。
    /// </summary>
    {class} function init: DNDirectoryNotFoundException; overload;
    /// <summary>
    ///   新实例初始化  类，其消息字符串设置为  并其 HRESULT 将设置为 COR_E_DIRECTORYNOTFOUND。
    /// </summary>
    {class} function init(message: string): DNDirectoryNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNDirectoryNotFoundException; overload;

  end;

  /// <summary>
  ///   找不到文件或目录的部件时引发的异常。
  /// </summary>
  [DNTypeName('System.IO.DirectoryNotFoundException')]
  DNDirectoryNotFoundException = interface(DNIOException)
  ['{8833BC41-DC6B-34B9-A799-682D2554F02F}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDirectoryNotFoundException = class(TDNGenericImport<DNDirectoryNotFoundExceptionClass, DNDirectoryNotFoundException>) end;

  //-------------namespace: System.IO----------------
  DNDriveNotFoundExceptionClass = interface(DNIOExceptionClass)
  ['{DC445F06-C67F-4DB2-9CE8-1EA4D2D1306F}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  带有其消息字符串设置为系统提供的消息和将设置为 COR_E_DIRECTORYNOTFOUND 其 HRESULT 的类。
    /// </summary>
    {class} function init: DNDriveNotFoundException; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的消息字符串并设置为 COR_E_DIRECTORYNOTFOUND 的 HRESULT。
    /// </summary>
    {class} function init(message: string): DNDriveNotFoundException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的错误消息和对导致此异常的内部异常的引用。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNDriveNotFoundException; overload;

  end;

  /// <summary>
  ///   当尝试访问的驱动器或共享不可用时引发的异常。
  /// </summary>
  [DNTypeName('System.IO.DriveNotFoundException')]
  DNDriveNotFoundException = interface(DNIOException)
  ['{A8F9F740-70C9-30A7-937C-59785A9BB5A4}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDriveNotFoundException = class(TDNGenericImport<DNDriveNotFoundExceptionClass, DNDriveNotFoundException>) end;

  //-------------namespace: System.IO----------------
  DNEndOfStreamExceptionClass = interface(DNIOExceptionClass)
  ['{6769C081-C5D6-4C2E-9D45-36D36A094BD1}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  带有其消息字符串设置为系统提供的消息和将设置为 COR_E_ENDOFSTREAM 其 HRESULT 的类。
    /// </summary>
    {class} function init: DNEndOfStreamException; overload;
    /// <summary>
    ///   新实例初始化  类，其消息字符串设置为  并其 HRESULT 将设置为 COR_E_ENDOFSTREAM。
    /// </summary>
    {class} function init(message: string): DNEndOfStreamException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNEndOfStreamException; overload;

  end;

  /// <summary>
  ///   尝试在流末尾之后读取时引发的异常。
  /// </summary>
  [DNTypeName('System.IO.EndOfStreamException')]
  DNEndOfStreamException = interface(DNIOException)
  ['{58D052BC-A3DF-3508-AC95-FF297BDC9F0C}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEndOfStreamException = class(TDNGenericImport<DNEndOfStreamExceptionClass, DNEndOfStreamException>) end;

  //-------------namespace: System.IO----------------
  DNFileLoadExceptionClass = interface(DNIOExceptionClass)
  ['{33F9211F-A003-494D-929C-E152441DAE09}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类设置  系统提供的描述错误的消息的新实例的属性如"无法加载指定的文件。"
    ///               此消息将当前系统区域性考虑在内。
    /// </summary>
    {class} function init: DNFileLoadException; overload;
    /// <summary>
    ///   使用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNFileLoadException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNFileLoadException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的错误消息和无法加载该文件的名称。
    /// </summary>
    {class} function init(message: string; fileName: string): DNFileLoadException; overload;
    /// <summary>
    ///   新实例初始化  用指定的错误消息、 无法加载该文件的名称和对导致此异常的内部异常的引用。
    /// </summary>
    {class} function init(message: string; fileName: string; inner: DNException): DNFileLoadException; overload;

  end;

  /// <summary>
  ///   找到托管程序集但不能加载时引发的异常。
  /// </summary>
  [DNTypeName('System.IO.FileLoadException')]
  DNFileLoadException = interface(DNIOException)
  ['{AF8C5F8A-9999-3E92-BB41-C5F4955174CD}']
  { getter & setter } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   返回当前异常，可能还包括的错误消息、 内部异常和堆栈跟踪的名称的完全限定的名称。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   集  用文件名和附加异常信息。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取错误消息和引发此异常的文件的名称。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取导致该异常的文件的名称。
    /// </summary>
    property FileName: string read get_FileName;
    /// <summary>
    ///   获取描述程序集加载失败的原因的日志文件。
    /// </summary>
    property FusionLog: string read get_FusionLog;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFileLoadException = class(TDNGenericImport<DNFileLoadExceptionClass, DNFileLoadException>) end;

  //-------------namespace: System.IO----------------
  DNFileNotFoundExceptionClass = interface(DNIOExceptionClass)
  ['{002F581A-FC41-4A03-A8ED-5BF8E3BA3A4E}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，将其消息字符串设置为系统提供的消息，将其 HERSULT 设置为 COR_E_FILENOTFOUND。
    /// </summary>
    {class} function init: DNFileNotFoundException; overload;
    /// <summary>
    ///   初始化  类的新实例，将其消息字符串设置为 ，并将其 HRESULT 设置为 COR_E_FILENOTFOUND。
    /// </summary>
    {class} function init(message: string): DNFileNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNFileNotFoundException; overload;
    /// <summary>
    ///   初始化  类的新实例，将其消息字符串设置为 ，指定无法找到的文件名，并且将其 HERSULT 设置为 COR_E_FILENOTFOUND。
    /// </summary>
    {class} function init(message: string; fileName: string): DNFileNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; fileName: string; innerException: DNException): DNFileNotFoundException; overload;

  end;

  /// <summary>
  ///   尝试访问磁盘上不存在的文件失败时引发的异常。
  /// </summary>
  [DNTypeName('System.IO.FileNotFoundException')]
  DNFileNotFoundException = interface(DNIOException)
  ['{48C6E96F-A2F3-33E7-BA7F-C8F74866760B}']
  { getter & setter } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   返回该异常的完全限定名，还可能返回错误消息、内部异常的名称和堆栈跟踪。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   设置带有文件名和附加异常信息的  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取解释异常原因的错误消息。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取无法找到的文件的名称。
    /// </summary>
    property FileName: string read get_FileName;
    /// <summary>
    ///   获取描述程序集加载失败的原因的日志文件。
    /// </summary>
    property FusionLog: string read get_FusionLog;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFileNotFoundException = class(TDNGenericImport<DNFileNotFoundExceptionClass, DNFileNotFoundException>) end;

  //-------------namespace: System.IO----------------
  DNPathTooLongExceptionClass = interface(DNIOExceptionClass)
  ['{B4ECD22A-9520-45D1-BB25-FF152790F047}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，其设置为 COR_E_PATHTOOLONG 的 HRESULT。
    /// </summary>
    {class} function init: DNPathTooLongException; overload;
    /// <summary>
    ///   新实例初始化  类，其消息字符串设置为  并其 HRESULT 将设置为 COR_E_PATHTOOLONG。
    /// </summary>
    {class} function init(message: string): DNPathTooLongException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNPathTooLongException; overload;

  end;

  /// <summary>
  ///   路径或完全限定的文件名的长度超过了系统定义的最大长度时引发的异常。
  /// </summary>
  [DNTypeName('System.IO.PathTooLongException')]
  DNPathTooLongException = interface(DNIOException)
  ['{C016A313-9606-36D3-A823-33EBF5006189}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPathTooLongException = class(TDNGenericImport<DNPathTooLongExceptionClass, DNPathTooLongException>) end;

  //-------------namespace: System----------------
  DNMemberAccessExceptionClass = interface(DNSystemExceptionClass)
  ['{C3DBAA7E-369E-4279-8F21-D2A8DD73FC3A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNMemberAccessException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNMemberAccessException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNMemberAccessException; overload;

  end;

  /// <summary>
  ///   访问类成员的尝试失败时引发的异常。
  /// </summary>
  [DNTypeName('System.MemberAccessException')]
  DNMemberAccessException = interface(DNSystemException)
  ['{0FF66430-C796-3EE7-902B-166C402CA288}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMemberAccessException = class(TDNGenericImport<DNMemberAccessExceptionClass, DNMemberAccessException>) end;

  //-------------namespace: System----------------
  DNFieldAccessExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{FDDA4875-E0CC-4EA9-A8EB-A8FC59F74383}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNFieldAccessException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNFieldAccessException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNFieldAccessException; overload;

  end;

  /// <summary>
  ///   无效地尝试访问类中的私有或受保护字段时引发的异常。
  /// </summary>
  [DNTypeName('System.FieldAccessException')]
  DNFieldAccessException = interface(DNMemberAccessException)
  ['{BDA7BEE5-85F1-3B66-B610-DDF1D5898006}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFieldAccessException = class(TDNGenericImport<DNFieldAccessExceptionClass, DNFieldAccessException>) end;

  //-------------namespace: System----------------
  DNMethodAccessExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{480E996A-F798-4AAA-AA92-2A46BE4878CB}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类设置  系统提供的描述诸如"尝试访问该方法时失败。"的错误的消息的新实例的属性
    ///               此消息将当前系统区域性考虑在内。
    /// </summary>
    {class} function init: DNMethodAccessException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNMethodAccessException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNMethodAccessException; overload;

  end;

  /// <summary>
  ///   无效地尝试访问方法时（例如从部分信任的代码访问私有方法）引发的异常。
  /// </summary>
  [DNTypeName('System.MethodAccessException')]
  DNMethodAccessException = interface(DNMemberAccessException)
  ['{92E76A74-2622-3AA9-A3CA-1AE8BD7BC4A8}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMethodAccessException = class(TDNGenericImport<DNMethodAccessExceptionClass, DNMethodAccessException>) end;

  //-------------namespace: System----------------
  DNMissingMemberExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{C4B573E1-9F3F-4239-B4A3-06EE99333337}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNMissingMemberException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNMissingMemberException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常根本原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNMissingMemberException; overload;
    /// <summary>
    ///   新实例初始化  带有指定的类名称和成员名称的类。
    /// </summary>
    {class} function init(className: string; memberName: string): DNMissingMemberException; overload;

  end;

  /// <summary>
  ///   当尝试动态访问一个不存或未声明为公共的类成员时引发的异常。
  ///               如果类库中的某个成员已移除或重命名，请重新编译引用该库的所有程序集。
  /// </summary>
  [DNTypeName('System.MissingMemberException')]
  DNMissingMemberException = interface(DNMemberAccessException)
  ['{CDC70043-D56B-3799-B7BD-6113BBCA160A}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   集  对象使用的类名、 成员名称、 缺少的成员和附加异常信息的签名。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取文本字符串，它显示类名、成员名称，以及缺失成员的签名。
    /// </summary>
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingMemberException = class(TDNGenericImport<DNMissingMemberExceptionClass, DNMissingMemberException>) end;

  //-------------namespace: System----------------
  DNMissingFieldExceptionClass = interface(DNMissingMemberExceptionClass)
  ['{9A177629-C76A-4D4A-9135-55EFA57100D1}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNMissingFieldException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNMissingFieldException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNMissingFieldException; overload;
    /// <summary>
    ///   新实例初始化  带有指定的类名称和字段名称的类。
    /// </summary>
    {class} function init(className: string; fieldName: string): DNMissingFieldException; overload;

  end;

  /// <summary>
  ///   尝试动态访问不存在的字段时引发的异常。
  ///               如果类库中的某个字段已被移除或重命名，请重新编译引用该库的所有程序集。
  /// </summary>
  [DNTypeName('System.MissingFieldException')]
  DNMissingFieldException = interface(DNMissingMemberException)
  ['{8D36569B-14D6-3C3D-B55C-9D02A45BFC3D}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取显示缺少的字段、 类名和字段名的签名的文本字符串。
    ///               此属性是只读的。
    /// </summary>
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingFieldException = class(TDNGenericImport<DNMissingFieldExceptionClass, DNMissingFieldException>) end;

  //-------------namespace: System----------------
  DNMissingMethodExceptionClass = interface(DNMissingMemberExceptionClass)
  ['{07FFB94B-2438-4F45-A8A6-0047BB6AD02A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNMissingMethodException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNMissingMethodException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNMissingMethodException; overload;
    /// <summary>
    ///   新实例初始化  带有指定的类名称和方法名称的类。
    /// </summary>
    {class} function init(className: string; methodName: string): DNMissingMethodException; overload;

  end;

  /// <summary>
  ///   尝试动态访问不存在的方法时引发的异常。
  /// </summary>
  [DNTypeName('System.MissingMethodException')]
  DNMissingMethodException = interface(DNMissingMemberException)
  ['{58897D76-EF6C-327A-93F7-6CD66C424E11}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取显示的类名、 方法名称，以及缺少的方法的签名的文本字符串。
    ///               此属性是只读的。
    /// </summary>
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingMethodException = class(TDNGenericImport<DNMissingMethodExceptionClass, DNMissingMethodException>) end;

  //-------------namespace: System----------------
  DNMulticastNotSupportedExceptionClass = interface(DNSystemExceptionClass)
  ['{4EED95C6-F34D-40CC-881E-00261260EAE4}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNMulticastNotSupportedException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNMulticastNotSupportedException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNMulticastNotSupportedException; overload;

  end;

  /// <summary>
  ///   当尝试组合两个委托时引发的异常基于  类型而不是  类型。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.MulticastNotSupportedException')]
  DNMulticastNotSupportedException = interface(DNSystemException)
  ['{9DA2F8B8-59F0-3852-B509-0663E3BF643B}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMulticastNotSupportedException = class(TDNGenericImport<DNMulticastNotSupportedExceptionClass, DNMulticastNotSupportedException>) end;

  //-------------namespace: System----------------
  DNNotImplementedExceptionClass = interface(DNSystemExceptionClass)
  ['{189F0946-7F9F-4F99-A047-1463671EF653}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNNotImplementedException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNNotImplementedException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNNotImplementedException; overload;

  end;

  /// <summary>
  ///   在无法实现请求的方法或操作时引发的异常。
  /// </summary>
  [DNTypeName('System.NotImplementedException')]
  DNNotImplementedException = interface(DNSystemException)
  ['{F8BE2AD5-4E99-3E00-B10E-7C54D31C1C1D}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNotImplementedException = class(TDNGenericImport<DNNotImplementedExceptionClass, DNNotImplementedException>) end;

  //-------------namespace: System----------------
  DNNotSupportedExceptionClass = interface(DNSystemExceptionClass)
  ['{5B147623-E169-451E-B7EB-DA3B00FBEEA6}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类设置  系统提供的描述错误的消息的新实例的属性。
    ///               此消息将当前系统区域性考虑在内。
    /// </summary>
    {class} function init: DNNotSupportedException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNNotSupportedException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNNotSupportedException; overload;

  end;

  /// <summary>
  ///   当调用的方法不受支持时，或者当尝试读取、搜索或写入不支持所调用功能的流时引发的异常。
  /// </summary>
  [DNTypeName('System.NotSupportedException')]
  DNNotSupportedException = interface(DNSystemException)
  ['{DAFB2462-2A5B-3818-B17E-602984FE1BB0}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNotSupportedException = class(TDNGenericImport<DNNotSupportedExceptionClass, DNNotSupportedException>) end;

  //-------------namespace: System----------------
  DNPlatformNotSupportedExceptionClass = interface(DNNotSupportedExceptionClass)
  ['{B7C52ADA-E47B-4000-85D4-01C7E498CC15}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNPlatformNotSupportedException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNPlatformNotSupportedException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNPlatformNotSupportedException; overload;

  end;

  /// <summary>
  ///   当功能不在特定平台上运行时引发的操作。
  /// </summary>
  [DNTypeName('System.PlatformNotSupportedException')]
  DNPlatformNotSupportedException = interface(DNNotSupportedException)
  ['{A36738B5-FA8F-3316-A929-68099A32B43B}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPlatformNotSupportedException = class(TDNGenericImport<DNPlatformNotSupportedExceptionClass, DNPlatformNotSupportedException>) end;

  //-------------namespace: System----------------
  DNNullReferenceExceptionClass = interface(DNSystemExceptionClass)
  ['{E3114638-B6B1-4516-A85C-397380481CE9}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例类，设置为系统提供的消息的描述错误，如"值 'null' 找到其中对象的实例了所需。"的新实例的属性
    ///               此消息将当前系统区域性考虑在内。
    /// </summary>
    {class} function init: DNNullReferenceException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNNullReferenceException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNNullReferenceException; overload;

  end;

  /// <summary>
  ///   尝试取消引用空对象引用时引发的异常。
  /// </summary>
  [DNTypeName('System.NullReferenceException')]
  DNNullReferenceException = interface(DNSystemException)
  ['{7F71DB2D-1EA0-3CAE-8087-26095F5215E6}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNullReferenceException = class(TDNGenericImport<DNNullReferenceExceptionClass, DNNullReferenceException>) end;

  //-------------namespace: System----------------
  DNOperationCanceledExceptionClass = interface(DNSystemExceptionClass)
  ['{F506DA74-2753-48D9-850F-50E8CB1BDC62}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  使用系统提供的错误消息。
    /// </summary>
    {class} function init: DNOperationCanceledException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNOperationCanceledException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNOperationCanceledException; overload;
    /// <summary>
    ///   新实例初始化  的取消标记的类。
    /// </summary>
    {class} function init(token: DNCancellationToken): DNOperationCanceledException; overload;
    /// <summary>
    ///   新实例初始化  带有指定的错误消息和取消标记的类。
    /// </summary>
    {class} function init(message: string; token: DNCancellationToken): DNOperationCanceledException; overload;
    /// <summary>
    ///   使用指定的错误消息、对作为此异常原因的内部异常的引用以及取消标记来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException; token: DNCancellationToken): DNOperationCanceledException; overload;

  end;

  /// <summary>
  ///   当线程取消一个正在执行的操作时在线程中引发的异常。
  /// </summary>
  [DNTypeName('System.OperationCanceledException')]
  DNOperationCanceledException = interface(DNSystemException)
  ['{11581718-2434-32E3-B559-E86CE9923744}']
  { getter & setter } 

    function get_CancellationToken: DNCancellationToken;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取与已取消该操作关联的令牌。
    /// </summary>
    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOperationCanceledException = class(TDNGenericImport<DNOperationCanceledExceptionClass, DNOperationCanceledException>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskCanceledExceptionClass = interface(DNOperationCanceledExceptionClass)
  ['{34AAF673-37C2-44B7-8C65-1AE02E9392B1}']
  { constructors } 

    /// <summary>
    ///   使用由系统提供的用来描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init: DNTaskCanceledException; overload;
    /// <summary>
    ///   使用指定的描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNTaskCanceledException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNTaskCanceledException; overload;
    /// <summary>
    ///   新实例初始化  类的引用和对  已取消。
    /// </summary>
    {class} function init(task: DNTask): DNTaskCanceledException; overload;

  end;

  /// <summary>
  ///   表示一个用于告知任务取消的异常。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.TaskCanceledException')]
  DNTaskCanceledException = interface(DNOperationCanceledException)
  ['{476C5101-4461-3F41-B57A-47EC843B2912}']
  { getter & setter } 

    function get_Task: DNTask;
    function get_CancellationToken: DNCancellationToken;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取与此异常关联的任务。
    /// </summary>
    property Task: DNTask read get_Task;
    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTaskCanceledException = class(TDNGenericImport<DNTaskCanceledExceptionClass, DNTaskCanceledException>) end;

  //-------------namespace: System----------------
  DNOutOfMemoryExceptionClass = interface(DNSystemExceptionClass)
  ['{AB55BB48-61F8-4F02-A096-43653DB1EE5A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNOutOfMemoryException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNOutOfMemoryException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNOutOfMemoryException; overload;

  end;

  /// <summary>
  ///   没有足够的内存继续执行程序时引发的异常。
  /// </summary>
  [DNTypeName('System.OutOfMemoryException')]
  DNOutOfMemoryException = interface(DNSystemException)
  ['{CCF306AE-33BD-3003-9CCE-DAF5BEFEF611}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOutOfMemoryException = class(TDNGenericImport<DNOutOfMemoryExceptionClass, DNOutOfMemoryException>) end;

  //-------------namespace: System----------------
  DNInsufficientMemoryExceptionClass = interface(DNOutOfMemoryExceptionClass)
  ['{0FE5CBD4-3AD4-4EE0-8D26-A0409CBCA758}']
  { constructors } 

    /// <summary>
    ///   使用由系统提供的用来描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init: DNInsufficientMemoryException; overload;
    /// <summary>
    ///   使用指定的描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNInsufficientMemoryException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNInsufficientMemoryException; overload;

  end;

  /// <summary>
  ///   当检测到没有足够的可用内存时引发的异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.InsufficientMemoryException')]
  DNInsufficientMemoryException = interface(DNOutOfMemoryException)
  ['{90F14FF0-0FD2-3C06-BDB1-1934DB80859E}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInsufficientMemoryException = class(TDNGenericImport<DNInsufficientMemoryExceptionClass, DNInsufficientMemoryException>) end;

  //-------------namespace: System----------------
  DNRankExceptionClass = interface(DNSystemExceptionClass)
  ['{8DB3E23E-F89D-43AD-85B7-2E5B6E31FC8C}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRankException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNRankException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNRankException; overload;

  end;

  /// <summary>
  ///   将具有错误维数的数组传入方法时引发的异常。
  /// </summary>
  [DNTypeName('System.RankException')]
  DNRankException = interface(DNSystemException)
  ['{C9F61CBD-287F-3D24-9FEB-2C3F347CF570}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRankException = class(TDNGenericImport<DNRankExceptionClass, DNRankException>) end;

  //-------------namespace: System.Reflection----------------
  DNAmbiguousMatchExceptionClass = interface(DNSystemExceptionClass)
  ['{0372EE43-B747-4CD0-92D5-EBDA4FE0D4AF}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  带有空消息字符串和根的类会导致异常设置为 。
    /// </summary>
    {class} function init: DNAmbiguousMatchException; overload;
    /// <summary>
    ///   新实例初始化  带有其消息字符串设置为给定的消息和将设置为将根源异常类 。
    /// </summary>
    {class} function init(message: string): DNAmbiguousMatchException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNAmbiguousMatchException; overload;

  end;

  /// <summary>
  ///   当绑定到成员导致多个成员匹配绑定条件时引发的异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Reflection.AmbiguousMatchException')]
  DNAmbiguousMatchException = interface(DNSystemException)
  ['{2846AE5E-A9FA-36CF-B2D1-6E95596DBDE7}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAmbiguousMatchException = class(TDNGenericImport<DNAmbiguousMatchExceptionClass, DNAmbiguousMatchException>) end;

  //-------------namespace: System.Reflection----------------
  DNReflectionTypeLoadExceptionClass = interface(DNSystemExceptionClass)
  ['{3490719F-E4EE-43D1-AF68-F9366EBD1962}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  与给定的类和及其关联的异常类。
    /// </summary>
    {class} function init(classes: TArray<DNType>; exceptions: TArray<DNException>): DNReflectionTypeLoadException; overload;
    /// <summary>
    ///   新实例初始化  用给定的类、 其关联的异常和异常说明。
    /// </summary>
    {class} function init(classes: TArray<DNType>; exceptions: TArray<DNException>; message: string): DNReflectionTypeLoadException; overload;

  end;

  /// <summary>
  ///   当模块中有任何类无法加载时由  方法引发的异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Reflection.ReflectionTypeLoadException')]
  DNReflectionTypeLoadException = interface(DNSystemException)
  ['{843B19AD-A02B-3852-AC56-FDC798935630}']
  { getter & setter } 

    function get_Types: TArray<DNType>;
    function get_LoaderExceptions: TArray<DNException>;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   提供了  实现序列化的对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取模块中定义并加载的类的数组。
    /// </summary>
    property Types: TArray<DNType> read get_Types;
    /// <summary>
    ///   获取由类加载程序引发的一系列异常。
    /// </summary>
    property LoaderExceptions: TArray<DNException> read get_LoaderExceptions;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNReflectionTypeLoadException = class(TDNGenericImport<DNReflectionTypeLoadExceptionClass, DNReflectionTypeLoadException>) end;

  //-------------namespace: System.Resources----------------
  DNMissingManifestResourceExceptionClass = interface(DNSystemExceptionClass)
  ['{3210F748-364A-4B63-A28D-5A49F294E39A}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNMissingManifestResourceException; overload;
    /// <summary>
    ///   使用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNMissingManifestResourceException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNMissingManifestResourceException; overload;

  end;

  /// <summary>
  ///   如果主程序集不包含非特定区域性的资源，并且适当的附属程序集丢失，则引发异常。
  /// </summary>
  [DNTypeName('System.Resources.MissingManifestResourceException')]
  DNMissingManifestResourceException = interface(DNSystemException)
  ['{726BBDF4-6C6D-30F4-B3A0-F14D6AEC08C7}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingManifestResourceException = class(TDNGenericImport<DNMissingManifestResourceExceptionClass, DNMissingManifestResourceException>) end;

  //-------------namespace: System.Resources----------------
  DNMissingSatelliteAssemblyExceptionClass = interface(DNSystemExceptionClass)
  ['{2527D9BF-863F-40D6-BF81-81A2B5C506DB}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNMissingSatelliteAssemblyException; overload;
    /// <summary>
    ///   使用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNMissingSatelliteAssemblyException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的错误消息和一个非特定区域性的名称。
    /// </summary>
    {class} function init(message: string; cultureName: string): DNMissingSatelliteAssemblyException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNMissingSatelliteAssemblyException; overload;

  end;

  /// <summary>
  ///   缺少默认区域性的资源的附属程序集时引发的异常。
  /// </summary>
  [DNTypeName('System.Resources.MissingSatelliteAssemblyException')]
  DNMissingSatelliteAssemblyException = interface(DNSystemException)
  ['{D41969A6-C394-34B9-BD24-DD408F39F261}']
  { getter & setter } 

    function get_CultureName: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取默认区域性的名称。
    /// </summary>
    property CultureName: string read get_CultureName;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingSatelliteAssemblyException = class(TDNGenericImport<DNMissingSatelliteAssemblyExceptionClass, DNMissingSatelliteAssemblyException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNExternalExceptionClass = interface(DNSystemExceptionClass)
  ['{EA757C0E-A89B-41DF-A344-D648E0675BB4}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNExternalException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNExternalException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNExternalException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的错误消息和错误的 HRESULT。
    /// </summary>
    {class} function init(message: string; errorCode: Int32): DNExternalException; overload;

  end;

  /// <summary>
  ///   所有 COM 互操作 异常和结构化异常处理 (SEH) 异常的异常基类型。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ExternalException')]
  DNExternalException = interface(DNSystemException)
  ['{AFC681CF-E82F-361A-8280-CF4E1F844C3E}']
  { getter & setter } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   返回一个字符串，包含错误的 HRESULT。
    /// </summary>
    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取错误的 。
    /// </summary>
    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNExternalException = class(TDNGenericImport<DNExternalExceptionClass, DNExternalException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCOMExceptionClass = interface(DNExternalExceptionClass)
  ['{759460E2-7495-43C5-A4B7-294B0D4CC42C}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNCOMException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的消息的类。
    /// </summary>
    {class} function init(message: string): DNCOMException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNCOMException; overload;
    /// <summary>
    ///   新实例初始化  类替换指定的消息和错误代码。
    /// </summary>
    {class} function init(message: string; errorCode: Int32): DNCOMException; overload;

  end;

  /// <summary>
  ///   当 COM 方法调用返回一个无法识别的 HRESULT 时引发的异常。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.COMException')]
  DNCOMException = interface(DNExternalException)
  ['{07F94112-A42E-328B-B508-702EF62BCC29}']
  { getter & setter } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   将异常的内容转换为字符串。
    /// </summary>
    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCOMException = class(TDNGenericImport<DNCOMExceptionClass, DNCOMException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSEHExceptionClass = interface(DNExternalExceptionClass)
  ['{189F915E-AD87-4A3F-9083-D4FCDA670156}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSEHException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的消息的类。
    /// </summary>
    {class} function init(message: string): DNSEHException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNSEHException; overload;

  end;

  /// <summary>
  ///   表示结构化异常处理 (SEH) 错误。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.SEHException')]
  DNSEHException = interface(DNExternalException)
  ['{CA805B13-468C-3A22-BF9A-818E97EFA6B7}']
  { getter & setter } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   指示是否可以将异常恢复，并且从引发异常的点，代码可以继续是否。
    /// </summary>
    function CanResume: Boolean;
    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSEHException = class(TDNGenericImport<DNSEHExceptionClass, DNSEHException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInvalidComObjectExceptionClass = interface(DNSystemExceptionClass)
  ['{A8435B77-0700-49BA-A8BA-2171D0B9E34A}']
  { constructors } 

    /// <summary>
    ///   初始化的实例  使用默认属性。
    /// </summary>
    {class} function init: DNInvalidComObjectException; overload;
    /// <summary>
    ///   初始化的实例  与一条消息。
    /// </summary>
    {class} function init(message: string): DNInvalidComObjectException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNInvalidComObjectException; overload;

  end;

  /// <summary>
  ///   当使用无效的 COM 对象时引发的异常。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.InvalidComObjectException')]
  DNInvalidComObjectException = interface(DNSystemException)
  ['{A7248EC6-A8A5-3D07-890E-6107F8C247E5}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidComObjectException = class(TDNGenericImport<DNInvalidComObjectExceptionClass, DNInvalidComObjectException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInvalidOleVariantTypeExceptionClass = interface(DNSystemExceptionClass)
  ['{7A57640A-FEA5-465B-8E2B-ED4EF237CD82}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNInvalidOleVariantTypeException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的消息的类。
    /// </summary>
    {class} function init(message: string): DNInvalidOleVariantTypeException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNInvalidOleVariantTypeException; overload;

  end;

  /// <summary>
  ///   当封送处理程序遇到无法封送到托管代码的变量类型自变量时，由该封送处理程序引发的异常。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.InvalidOleVariantTypeException')]
  DNInvalidOleVariantTypeException = interface(DNSystemException)
  ['{9A944885-EDAF-3A81-A2FF-6A9D5D1ABFC7}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidOleVariantTypeException = class(TDNGenericImport<DNInvalidOleVariantTypeExceptionClass, DNInvalidOleVariantTypeException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalDirectiveExceptionClass = interface(DNSystemExceptionClass)
  ['{EF8B6DA4-2432-4505-9845-BA6B805CB52B}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNMarshalDirectiveException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNMarshalDirectiveException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNMarshalDirectiveException; overload;

  end;

  /// <summary>
  ///   当封送拆收器遇到它不支持的  时由该封送拆收器引发的异常。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.MarshalDirectiveException')]
  DNMarshalDirectiveException = interface(DNSystemException)
  ['{742AD1FB-B2F0-3681-B4AA-E736A3BCE4E1}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMarshalDirectiveException = class(TDNGenericImport<DNMarshalDirectiveExceptionClass, DNMarshalDirectiveException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeArrayRankMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{4D3CAB57-50EF-41D8-8955-03D2ABDF62DE}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNSafeArrayRankMismatchException; overload;
    /// <summary>
    ///   使用指定的消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNSafeArrayRankMismatchException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNSafeArrayRankMismatchException; overload;

  end;

  /// <summary>
  ///   时引发的异常的传入秩  与托管签名中指定的秩不匹配。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.SafeArrayRankMismatchException')]
  DNSafeArrayRankMismatchException = interface(DNSystemException)
  ['{4BE89AC3-603D-36B2-AB9B-9C38866F56D5}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSafeArrayRankMismatchException = class(TDNGenericImport<DNSafeArrayRankMismatchExceptionClass, DNSafeArrayRankMismatchException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeArrayTypeMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{38AD9875-5C1B-4638-903B-B7BAF0905304}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNSafeArrayTypeMismatchException; overload;
    /// <summary>
    ///   使用指定的消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNSafeArrayTypeMismatchException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNSafeArrayTypeMismatchException; overload;

  end;

  /// <summary>
  ///   时引发的异常的类型传入  与托管签名中指定的类型不匹配。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.SafeArrayTypeMismatchException')]
  DNSafeArrayTypeMismatchException = interface(DNSystemException)
  ['{2D5EC63C-1B3E-3EE4-9052-EB0D0303549C}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSafeArrayTypeMismatchException = class(TDNGenericImport<DNSafeArrayTypeMismatchExceptionClass, DNSafeArrayTypeMismatchException>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNRemotingExceptionClass = interface(DNSystemExceptionClass)
  ['{CB2D70B7-6ED5-42F7-9258-D913E74A2D2D}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNRemotingException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的消息的类。
    /// </summary>
    {class} function init(message: string): DNRemotingException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; InnerException: DNException): DNRemotingException; overload;

  end;

  /// <summary>
  ///   出现了问题远程处理的过程时，将引发异常。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.RemotingException')]
  DNRemotingException = interface(DNSystemException)
  ['{24540EBC-316E-35D2-80DB-8A535CAF6A35}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRemotingException = class(TDNGenericImport<DNRemotingExceptionClass, DNRemotingException>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNRemotingTimeoutExceptionClass = interface(DNRemotingExceptionClass)
  ['{F8E6285D-2E75-4895-8FA2-4B7611C18A0E}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNRemotingTimeoutException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的消息的类。
    /// </summary>
    {class} function init(message: string): DNRemotingTimeoutException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; InnerException: DNException): DNRemotingTimeoutException; overload;

  end;

  /// <summary>
  ///   在以前指定的某个时期内无法到达服务器或客户端时引发的异常。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.RemotingTimeoutException')]
  DNRemotingTimeoutException = interface(DNRemotingException)
  ['{3CDED51A-86B4-39F0-A12A-5D1FDCED6546}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRemotingTimeoutException = class(TDNGenericImport<DNRemotingTimeoutExceptionClass, DNRemotingTimeoutException>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNServerExceptionClass = interface(DNSystemExceptionClass)
  ['{103C0606-7F20-4944-A48D-F36117E8C760}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNServerException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的消息的类。
    /// </summary>
    {class} function init(message: string): DNServerException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; InnerException: DNException): DNServerException; overload;

  end;

  /// <summary>
  ///   当客户端连接到无法引发异常的非 .NET Framework 应用程序时，则引发该异常，以向客户端传达错误。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.ServerException')]
  DNServerException = interface(DNSystemException)
  ['{DB13821E-9835-3958-8539-1E021399AB6C}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNServerException = class(TDNGenericImport<DNServerExceptionClass, DNServerException>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationExceptionClass = interface(DNSystemExceptionClass)
  ['{0BF39C4D-1A00-4ECE-9D93-A2780015172F}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNSerializationException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的消息的类。
    /// </summary>
    {class} function init(message: string): DNSerializationException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNSerializationException; overload;

  end;

  /// <summary>
  ///   当序列化或反序列化过程中发生错误时引发的异常。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.SerializationException')]
  DNSerializationException = interface(DNSystemException)
  ['{57154C7C-EDB2-3BFD-A8BA-924C60913EBF}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSerializationException = class(TDNGenericImport<DNSerializationExceptionClass, DNSerializationException>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptographicExceptionClass = interface(DNSystemExceptionClass)
  ['{0EB7D826-F580-4007-9697-BDD47E699651}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNCryptographicException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNCryptographicException; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的错误消息中指定的格式。
    /// </summary>
    {class} function init(format: string; insert: string): DNCryptographicException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNCryptographicException; overload;
    /// <summary>
    ///   新实例初始化  类与指定  错误代码。
    /// </summary>
    {class} function init(hr: Int32): DNCryptographicException; overload;

  end;

  /// <summary>
  ///   当加密操作中出现错误时引发的异常。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.CryptographicException')]
  DNCryptographicException = interface(DNSystemException)
  ['{7F8C7DC5-D8B4-3758-981F-02AF6B42461A}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCryptographicException = class(TDNGenericImport<DNCryptographicExceptionClass, DNCryptographicException>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptographicUnexpectedOperationExceptionClass = interface(DNCryptographicExceptionClass)
  ['{225632B2-C4FD-4B29-B50B-FF34CDB4D8E8}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNCryptographicUnexpectedOperationException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNCryptographicUnexpectedOperationException; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的错误消息中指定的格式。
    /// </summary>
    {class} function init(format: string; insert: string): DNCryptographicUnexpectedOperationException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNCryptographicUnexpectedOperationException; overload;

  end;

  /// <summary>
  ///   当加密操作中出现意外操作时引发的异常。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.CryptographicUnexpectedOperationException')]
  DNCryptographicUnexpectedOperationException = interface(DNCryptographicException)
  ['{C41FA05C-8A7A-3157-8166-4104BB4925BA}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCryptographicUnexpectedOperationException = class(TDNGenericImport<DNCryptographicUnexpectedOperationExceptionClass, DNCryptographicUnexpectedOperationException>) end;

  //-------------namespace: System.Security----------------
  DNHostProtectionExceptionClass = interface(DNSystemExceptionClass)
  ['{296DDA04-A259-4A2B-BC74-4DE32FCF9404}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNHostProtectionException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNHostProtectionException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; e: DNException): DNHostProtectionException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的错误消息、 受保护的主机资源，以及导致引发异常的主机资源。
    /// </summary>
    {class} function init(message: string; protectedResources: DNHostProtectionResource; demandedResources: DNHostProtectionResource): DNHostProtectionException; overload;

  end;

  /// <summary>
  ///   检测到被拒绝的主机资源时引发的异常。
  /// </summary>
  [DNTypeName('System.Security.HostProtectionException')]
  DNHostProtectionException = interface(DNSystemException)
  ['{ECC82A10-B731-3A01-8A17-AC0DDD7666CF}']
  { getter & setter } 

    function get_ProtectedResources: DNHostProtectionResource;
    function get_DemandedResources: DNHostProtectionResource;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   返回的字符串表示形式的当前主机保护异常。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   设置指定  主机保护异常有关的信息的对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置保护的部分受信任的代码无法访问的资源的主机。
    /// </summary>
    property ProtectedResources: DNHostProtectionResource read get_ProtectedResources;
    /// <summary>
    ///   获取或设置导致引发异常的保护资源的要求的主机。
    /// </summary>
    property DemandedResources: DNHostProtectionResource read get_DemandedResources;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNHostProtectionException = class(TDNGenericImport<DNHostProtectionExceptionClass, DNHostProtectionException>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPolicyExceptionClass = interface(DNSystemExceptionClass)
  ['{B90B0025-6ADD-468D-9D11-29D8EAC4BEB0}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNPolicyException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNPolicyException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; exception: DNException): DNPolicyException; overload;

  end;

  /// <summary>
  ///   当策略禁止代码运行时引发的异常。
  /// </summary>
  [DNTypeName('System.Security.Policy.PolicyException')]
  DNPolicyException = interface(DNSystemException)
  ['{89D26277-8408-3FC8-BD44-CF5F0E614C82}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPolicyException = class(TDNGenericImport<DNPolicyExceptionClass, DNPolicyException>) end;

  //-------------namespace: System.Security.Principal----------------
  DNIdentityNotMappedExceptionClass = interface(DNSystemExceptionClass)
  ['{44E0BD52-03D5-4082-BB06-F36565D02D40}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNIdentityNotMappedException; overload;
    /// <summary>
    ///   使用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNIdentityNotMappedException; overload;
    /// <summary>
    ///   通过使用指定的错误消息和内部异常初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNIdentityNotMappedException; overload;

  end;

  /// <summary>
  ///   表示某个主体异常，此主体的标识无法映射到已知标识。
  /// </summary>
  [DNTypeName('System.Security.Principal.IdentityNotMappedException')]
  DNIdentityNotMappedException = interface(DNSystemException)
  ['{8E974B5A-A286-37DA-94F8-5872C500EB0E}']
  { getter & setter } 

    function get_UnmappedIdentities: DNIdentityReferenceCollection;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   获取序列化信息，其中包含创建此  对象的实例所需的数据。
    /// </summary>
    procedure GetObjectData(serializationInfo: DNSerializationInfo; streamingContext: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   表示针对  异常的未映射标识的集合 。
    /// </summary>
    property UnmappedIdentities: DNIdentityReferenceCollection read get_UnmappedIdentities;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIdentityNotMappedException = class(TDNGenericImport<DNIdentityNotMappedExceptionClass, DNIdentityNotMappedException>) end;

  //-------------namespace: System.Security----------------
  DNSecurityExceptionClass = interface(DNSystemExceptionClass)
  ['{61181451-6473-4BCB-89E6-4EFA3AA90915}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNSecurityException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNSecurityException; overload;
    /// <summary>
    ///   利用指定错误消息以及引发异常的权限类型来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; &type: DNType): DNSecurityException; overload;
    /// <summary>
    ///   使用指定的错误消息、引发异常的权限类型和权限状态来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; &type: DNType; state: string): DNSecurityException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNSecurityException; overload;
    /// <summary>
    ///   初始化  类的新实例，用于处理因授予权限集不足导致的异常。
    /// </summary>
    {class} function init(message: string; assemblyName: DNAssemblyName; grant: DNPermissionSet; refused: DNPermissionSet; method: DNMethodInfo; action: DNSecurityAction; demanded: DNObject; permThatFailed: DNIPermission; evidence: DNEvidence): DNSecurityException; overload;
    /// <summary>
    ///   初始化  类的新实例，用于处理因堆栈上的拒绝导致的异常。
    /// </summary>
    {class} function init(message: string; deny: DNObject; permitOnly: DNObject; method: DNMethodInfo; demanded: DNObject; permThatFailed: DNIPermission): DNSecurityException; overload;

  end;

  /// <summary>
  ///   检测到安全错误时引发的异常。
  /// </summary>
  [DNTypeName('System.Security.SecurityException')]
  DNSecurityException = interface(DNSystemException)
  ['{EEF05C76-5C98-3685-A69C-6E1A26A7F846}']
  { getter & setter } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_PermissionType: DNType;
    procedure set_PermissionType(value: DNType);
    function get_FirstPermissionThatFailed: DNIPermission;
    procedure set_FirstPermissionThatFailed(value: DNIPermission);
    function get_PermissionState: string;
    procedure set_PermissionState(value: string);
    function get_Demanded: DNObject;
    procedure set_Demanded(value: DNObject);
    function get_GrantedSet: string;
    procedure set_GrantedSet(value: string);
    function get_RefusedSet: string;
    procedure set_RefusedSet(value: string);
    function get_DenySetInstance: DNObject;
    procedure set_DenySetInstance(value: DNObject);
    function get_PermitOnlySetInstance: DNObject;
    procedure set_PermitOnlySetInstance(value: DNObject);
    function get_FailedAssemblyInfo: DNAssemblyName;
    procedure set_FailedAssemblyInfo(value: DNAssemblyName);
    function get_Method: DNMethodInfo;
    procedure set_Method(value: DNMethodInfo);
    function get_Zone: DNSecurityZone;
    procedure set_Zone(value: DNSecurityZone);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   返回当前  的表示形式。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   使用有关  的信息设置 。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置导致异常的安全操作。
    /// </summary>
    property Action: DNSecurityAction read get_Action write set_Action;
    /// <summary>
    ///   获取或设置失败的权限类型。
    /// </summary>
    property PermissionType: DNType read get_PermissionType write set_PermissionType;
    /// <summary>
    ///   获取或设置权限集中的第一个权限或者导致要求失败的权限集集合。
    /// </summary>
    property FirstPermissionThatFailed: DNIPermission read get_FirstPermissionThatFailed write set_FirstPermissionThatFailed;
    /// <summary>
    ///   获取或设置引发异常的权限的状态。
    /// </summary>
    property PermissionState: string read get_PermissionState write set_PermissionState;
    /// <summary>
    ///   获取或设置未通过验证的所需的安全权限、权限集或权限集的集合。
    /// </summary>
    property Demanded: DNObject read get_Demanded write set_Demanded;
    /// <summary>
    ///   获取或设置导致  的程序集的授予的权限集。
    /// </summary>
    property GrantedSet: string read get_GrantedSet write set_GrantedSet;
    /// <summary>
    ///   获取或设置导致  的程序集的被拒绝权限集。
    /// </summary>
    property RefusedSet: string read get_RefusedSet write set_RefusedSet;
    /// <summary>
    ///   获取或设置导致请求失败的被拒绝安全权限、权限集或权限集的集合。
    /// </summary>
    property DenySetInstance: DNObject read get_DenySetInstance write set_DenySetInstance;
    /// <summary>
    ///   获取或设置权限、权限集或权限集集合，它是导致安全检查失败的唯一允许堆栈帧的一部分。
    /// </summary>
    property PermitOnlySetInstance: DNObject read get_PermitOnlySetInstance write set_PermitOnlySetInstance;
    /// <summary>
    ///   获取或设置关于失败的程序集的信息。
    /// </summary>
    property FailedAssemblyInfo: DNAssemblyName read get_FailedAssemblyInfo write set_FailedAssemblyInfo;
    /// <summary>
    ///   获取或设置关于与异常关联的方法的信息。
    /// </summary>
    property Method: DNMethodInfo read get_Method write set_Method;
    /// <summary>
    ///   获取或设置导致异常的程序集的区域。
    /// </summary>
    property Zone: DNSecurityZone read get_Zone write set_Zone;
    /// <summary>
    ///   获取或设置导致异常的程序集的 URL。
    /// </summary>
    property Url: string read get_Url write set_Url;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSecurityException = class(TDNGenericImport<DNSecurityExceptionClass, DNSecurityException>) end;

  //-------------namespace: System.Security----------------
  DNVerificationExceptionClass = interface(DNSystemExceptionClass)
  ['{DA774D75-2A27-41C3-A7C2-2F7DD13C8814}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNVerificationException; overload;
    /// <summary>
    ///   新实例初始化  类是说明性消息。
    /// </summary>
    {class} function init(message: string): DNVerificationException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNVerificationException; overload;

  end;

  /// <summary>
  ///   当安全策略要求代码是类型安全的但验证过程无法验证该代码是否是类型安全的时引发的异常。
  /// </summary>
  [DNTypeName('System.Security.VerificationException')]
  DNVerificationException = interface(DNSystemException)
  ['{EBAA029C-01C0-32B6-AAE6-FE21ADFC3E5D}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNVerificationException = class(TDNGenericImport<DNVerificationExceptionClass, DNVerificationException>) end;

  //-------------namespace: System.Security----------------
  DNXmlSyntaxExceptionClass = interface(DNSystemExceptionClass)
  ['{01C4E63E-D8C3-4098-813E-0D4F2F5B39A8}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNXmlSyntaxException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNXmlSyntaxException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNXmlSyntaxException; overload;
    /// <summary>
    ///   新实例初始化  类中检测到异常的行号。
    /// </summary>
    {class} function init(lineNumber: Int32): DNXmlSyntaxException; overload;
    /// <summary>
    ///   新实例初始化  使用指定的错误消息和异常检测到的行号。
    /// </summary>
    {class} function init(lineNumber: Int32; message: string): DNXmlSyntaxException; overload;

  end;

  /// <summary>
  ///   XML 分析中出现语法错误时引发的异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.XmlSyntaxException')]
  DNXmlSyntaxException = interface(DNSystemException)
  ['{E38DA416-8050-3786-8201-46F187C15213}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlSyntaxException = class(TDNGenericImport<DNXmlSyntaxExceptionClass, DNXmlSyntaxException>) end;

  //-------------namespace: System----------------
  DNStackOverflowExceptionClass = interface(DNSystemExceptionClass)
  ['{14F744EB-2085-4B8F-80FB-E94C888438C9}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，将新实例的  属性设置为系统提供的描述错误的消息，如“所请求的操作导致堆栈溢出”。
    ///               此消息将当前系统区域性考虑在内。
    /// </summary>
    {class} function init: DNStackOverflowException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNStackOverflowException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNStackOverflowException; overload;

  end;

  /// <summary>
  ///   因包含的嵌套方法调用过多而导致执行堆栈溢出时引发的异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.StackOverflowException')]
  DNStackOverflowException = interface(DNSystemException)
  ['{9C125A6F-EAE2-3FC1-97A1-C0DCEAB0B5DF}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNStackOverflowException = class(TDNGenericImport<DNStackOverflowExceptionClass, DNStackOverflowException>) end;

  //-------------namespace: System.Threading----------------
  DNAbandonedMutexExceptionClass = interface(DNSystemExceptionClass)
  ['{F6D3A837-2CC3-4B54-9530-8E77198FEF0D}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNAbandonedMutexException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNAbandonedMutexException; overload;
    /// <summary>
    ///   新实例初始化  具有指定的错误消息和内部异常类。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNAbandonedMutexException; overload;
    /// <summary>
    ///   新实例初始化  类放弃的互斥体的指定索引，如果适用，并且  表示互斥体的对象。
    /// </summary>
    {class} function init(location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;
    /// <summary>
    ///   新实例初始化  类用指定的错误消息时，放弃的 mutex，如果合适的话和放弃的 mutex 的索引。
    /// </summary>
    {class} function init(message: string; location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;
    /// <summary>
    ///   新实例初始化  类使用指定的错误消息、 内部异常、 放弃的 mutex 的索引，如果适用，并且  表示互斥体的对象。
    /// </summary>
    {class} function init(message: string; inner: DNException; location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;

  end;

  /// <summary>
  ///   当某个线程获取时引发的异常  对象的另一个线程已放弃由正在退出而不将其释放。
  /// </summary>
  [DNTypeName('System.Threading.AbandonedMutexException')]
  DNAbandonedMutexException = interface(DNSystemException)
  ['{4ECD758F-49DC-313F-BEA0-70811C6DC556}']
  { getter & setter } 

    function get_Mutex: DNMutex;
    function get_MutexIndex: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取导致异常，放弃的 mutex，如果已知。
    /// </summary>
    property Mutex: DNMutex read get_Mutex;
    /// <summary>
    ///   获取导致异常，放弃的 mutex 的索引，如果已知。
    /// </summary>
    property MutexIndex: Int32 read get_MutexIndex;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAbandonedMutexException = class(TDNGenericImport<DNAbandonedMutexExceptionClass, DNAbandonedMutexException>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreFullExceptionClass = interface(DNSystemExceptionClass)
  ['{72E48599-5290-4081-B25E-82643DB08EA9}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNSemaphoreFullException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNSemaphoreFullException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNSemaphoreFullException; overload;

  end;

  /// <summary>
  ///   对已经达到最大计数值的信号量调用  方法时引发的异常。
  /// </summary>
  [DNTypeName('System.Threading.SemaphoreFullException')]
  DNSemaphoreFullException = interface(DNSystemException)
  ['{BD2D27C7-9D3E-3803-8CE2-DE6647543B01}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSemaphoreFullException = class(TDNGenericImport<DNSemaphoreFullExceptionClass, DNSemaphoreFullException>) end;

  //-------------namespace: System.Threading----------------
  DNSynchronizationLockExceptionClass = interface(DNSystemExceptionClass)
  ['{8DF8CCF0-7182-4594-BCD8-D9855A5E0AF6}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNSynchronizationLockException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNSynchronizationLockException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNSynchronizationLockException; overload;

  end;

  /// <summary>
  ///   当某个方法要求调用方拥有给定 Monitor 上的锁并且该方法由不拥有该锁的调用方调用时引发的异常。
  /// </summary>
  [DNTypeName('System.Threading.SynchronizationLockException')]
  DNSynchronizationLockException = interface(DNSystemException)
  ['{48A75519-CB7A-3D18-B91E-BE62EE842A3E}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSynchronizationLockException = class(TDNGenericImport<DNSynchronizationLockExceptionClass, DNSynchronizationLockException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadAbortExceptionClass = interface(DNSystemExceptionClass)
  ['{3DA787F5-CE9C-4E36-9843-EE41E67C8F98}']
  end;

  /// <summary>
  ///   当对  方法发出调用时引发的异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Threading.ThreadAbortException')]
  DNThreadAbortException = interface(DNSystemException)
  ['{EA1CF67D-7904-36A3-BD5B-DD028985861C}']
  { getter & setter } 

    function get_ExceptionState: DNObject;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取一个对象，包含与线程中止相关的应用程序特定信息。
    /// </summary>
    property ExceptionState: DNObject read get_ExceptionState;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadAbortException = class(TDNGenericImport<DNThreadAbortExceptionClass, DNThreadAbortException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadInterruptedExceptionClass = interface(DNSystemExceptionClass)
  ['{3739F057-54DA-48F0-8088-0D3FDCBEBDDC}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNThreadInterruptedException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNThreadInterruptedException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNThreadInterruptedException; overload;

  end;

  /// <summary>
  ///   时，将引发的异常  处于等待状态时被中断。
  /// </summary>
  [DNTypeName('System.Threading.ThreadInterruptedException')]
  DNThreadInterruptedException = interface(DNSystemException)
  ['{27E986E1-BAEC-3D48-82E4-14169CA8CECF}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadInterruptedException = class(TDNGenericImport<DNThreadInterruptedExceptionClass, DNThreadInterruptedException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadStartExceptionClass = interface(DNSystemExceptionClass)
  ['{7C385587-648C-457D-83B3-417A49AA70FF}']
  end;

  /// <summary>
  ///   当基础操作系统线程已启动但该线程尚未准备好执行用户代码前，托管线程中出现错误，则会引发异常。
  /// </summary>
  [DNTypeName('System.Threading.ThreadStartException')]
  DNThreadStartException = interface(DNSystemException)
  ['{FB09B094-51E4-317B-B19F-AA81EDE4A0F0}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadStartException = class(TDNGenericImport<DNThreadStartExceptionClass, DNThreadStartException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadStateExceptionClass = interface(DNSystemExceptionClass)
  ['{3DD260E3-E79C-4641-B799-A6DFC4DE6C3A}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNThreadStateException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNThreadStateException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNThreadStateException; overload;

  end;

  /// <summary>
  ///   时，将引发的异常  无效  方法调用。
  /// </summary>
  [DNTypeName('System.Threading.ThreadStateException')]
  DNThreadStateException = interface(DNSystemException)
  ['{3E5509F0-1FB9-304D-8174-75D6C9AFE5DA}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadStateException = class(TDNGenericImport<DNThreadStateExceptionClass, DNThreadStateException>) end;

  //-------------namespace: System----------------
  DNTimeoutExceptionClass = interface(DNSystemExceptionClass)
  ['{81E7CBA3-779A-4490-8C37-8396DD85098D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNTimeoutException; overload;
    /// <summary>
    ///   使用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNTimeoutException; overload;
    /// <summary>
    ///   使用指定的错误消息和内部异常初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNTimeoutException; overload;

  end;

  /// <summary>
  ///   当为进程或操作分配的时间已过期时引发的异常。
  /// </summary>
  [DNTypeName('System.TimeoutException')]
  DNTimeoutException = interface(DNSystemException)
  ['{EAA78D4A-20A3-3FDE-AB72-D3D55E3AEFE6}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTimeoutException = class(TDNGenericImport<DNTimeoutExceptionClass, DNTimeoutException>) end;

  //-------------namespace: System----------------
  DNTypeInitializationExceptionClass = interface(DNSystemExceptionClass)
  ['{F520E942-E233-4A34-9274-9EEFFA3D4BA6}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  包含类的默认错误消息指定的类型名称，是此异常的根本原因的内部异常的引用。
    /// </summary>
    {class} function init(fullTypeName: string; innerException: DNException): DNTypeInitializationException;

  end;

  /// <summary>
  ///   作为类初始值设定项引发的异常的包装器而引发的异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.TypeInitializationException')]
  DNTypeInitializationException = interface(DNSystemException)
  ['{811FB5F2-9BFE-3557-83DE-1279F0B3EB55}']
  { getter & setter } 

    function get_TypeName: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   集  用类型名称和附加异常信息的对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取无法初始化的类型的完全限定的名称。
    /// </summary>
    property TypeName: string read get_TypeName;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeInitializationException = class(TDNGenericImport<DNTypeInitializationExceptionClass, DNTypeInitializationException>) end;

  //-------------namespace: System----------------
  DNTypeLoadExceptionClass = interface(DNSystemExceptionClass)
  ['{CAC3F465-4C6F-45C7-85A7-A16305313E5F}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNTypeLoadException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNTypeLoadException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNTypeLoadException; overload;

  end;

  /// <summary>
  ///   当发生类型加载失败时引发的异常。
  /// </summary>
  [DNTypeName('System.TypeLoadException')]
  DNTypeLoadException = interface(DNSystemException)
  ['{112BC2E7-9EF9-3648-AF9E-45C0D4B89929}']
  { getter & setter } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   设置具有类名、方法名称、资源 ID 和其他异常信息的  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取此异常的错误消息。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   获取导致异常的完全限定的类型名称。
    /// </summary>
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeLoadException = class(TDNGenericImport<DNTypeLoadExceptionClass, DNTypeLoadException>) end;

  //-------------namespace: System----------------
  DNDllNotFoundExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{51154A39-459B-481B-909C-3A3902177052}']
  { constructors } 

    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNDllNotFoundException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNDllNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNDllNotFoundException; overload;

  end;

  /// <summary>
  ///   当未找到在 DLL 导入中指定的 DLL 时所引发的异常。
  /// </summary>
  [DNTypeName('System.DllNotFoundException')]
  DNDllNotFoundException = interface(DNTypeLoadException)
  ['{46E97093-B2EC-3787-A9A5-470D1A27417C}']
  { getter & setter } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDllNotFoundException = class(TDNGenericImport<DNDllNotFoundExceptionClass, DNDllNotFoundException>) end;

  //-------------namespace: System----------------
  DNEntryPointNotFoundExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{F8FEF531-4DEF-4AFD-9A30-106A34B042F0}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEntryPointNotFoundException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNEntryPointNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNEntryPointNotFoundException; overload;

  end;

  /// <summary>
  ///   因不存在项方法而导致加载类的尝试失败时引发的异常。
  /// </summary>
  [DNTypeName('System.EntryPointNotFoundException')]
  DNEntryPointNotFoundException = interface(DNTypeLoadException)
  ['{AD326409-BF80-3E0C-BA6F-EE2C33B675A5}']
  { getter & setter } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEntryPointNotFoundException = class(TDNGenericImport<DNEntryPointNotFoundExceptionClass, DNEntryPointNotFoundException>) end;

  //-------------namespace: System----------------
  DNTypeAccessExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{BF374E8C-69D3-444F-B9EE-588C7C8CCD5B}']
  { constructors } 

    /// <summary>
    ///   使用由系统提供的用来描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init: DNTypeAccessException; overload;
    /// <summary>
    ///   使用指定的描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNTypeAccessException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNTypeAccessException; overload;

  end;

  /// <summary>
  ///   当方法试图使用它无权访问的类型时引发的异常。
  /// </summary>
  [DNTypeName('System.TypeAccessException')]
  DNTypeAccessException = interface(DNTypeLoadException)
  ['{BB1919CC-B729-3C1B-858F-FC4F60A204D2}']
  { getter & setter } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeAccessException = class(TDNGenericImport<DNTypeAccessExceptionClass, DNTypeAccessException>) end;

  //-------------namespace: System----------------
  DNTypeUnloadedExceptionClass = interface(DNSystemExceptionClass)
  ['{8C8D3823-A4F1-4528-B51A-3D4AFF866454}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNTypeUnloadedException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNTypeUnloadedException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNTypeUnloadedException; overload;

  end;

  /// <summary>
  ///   尝试访问已卸载的类时所引发的异常。
  /// </summary>
  [DNTypeName('System.TypeUnloadedException')]
  DNTypeUnloadedException = interface(DNSystemException)
  ['{D6D2034D-5F67-30D7-9CC5-452F2C46694F}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeUnloadedException = class(TDNGenericImport<DNTypeUnloadedExceptionClass, DNTypeUnloadedException>) end;

  //-------------namespace: System----------------
  DNUnauthorizedAccessExceptionClass = interface(DNSystemExceptionClass)
  ['{B1CFFBEB-57C3-4134-8F9F-5C3162B25A6F}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNUnauthorizedAccessException; overload;
    /// <summary>
    ///   用指定的错误消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNUnauthorizedAccessException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; inner: DNException): DNUnauthorizedAccessException; overload;

  end;

  /// <summary>
  ///   当操作系统因 I/O 错误或指定类型的安全错误而拒绝访问时所引发的异常。
  /// </summary>
  [DNTypeName('System.UnauthorizedAccessException')]
  DNUnauthorizedAccessException = interface(DNSystemException)
  ['{75215200-A2FE-30F6-A34B-8F1A1830358E}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNUnauthorizedAccessException = class(TDNGenericImport<DNUnauthorizedAccessExceptionClass, DNUnauthorizedAccessException>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNPrivilegeNotHeldExceptionClass = interface(DNUnauthorizedAccessExceptionClass)
  ['{38B775DD-3E04-4945-BCB0-16B4497A7843}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNPrivilegeNotHeldException; overload;
    /// <summary>
    ///   新实例初始化  类通过使用指定的特权。
    /// </summary>
    {class} function init(privilege: string): DNPrivilegeNotHeldException; overload;
    /// <summary>
    ///   新实例初始化  类通过使用指定的异常。
    /// </summary>
    {class} function init(privilege: string; inner: DNException): DNPrivilegeNotHeldException; overload;

  end;

  /// <summary>
  ///   当  命名空间中的方法尝试启用它所不具备的特权时引发的异常。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.PrivilegeNotHeldException')]
  DNPrivilegeNotHeldException = interface(DNUnauthorizedAccessException)
  ['{B35EA47E-FA71-34FD-B7E2-EBC050A4FB5A}']
  { getter & setter } 

    function get_PrivilegeName: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    /// <summary>
    ///   集  有关异常的信息的参数。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取未启用的权限的名称。
    /// </summary>
    property PrivilegeName: string read get_PrivilegeName;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrivilegeNotHeldException = class(TDNGenericImport<DNPrivilegeNotHeldExceptionClass, DNPrivilegeNotHeldException>) end;

  //-------------namespace: System.Threading----------------
  DNLockRecursionExceptionClass = interface(DNExceptionClass)
  ['{15DD1713-DA22-48C1-B736-7603F440A29E}']
  { constructors } 

    /// <summary>
    ///   使用由系统提供的用来描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init: DNLockRecursionException; overload;
    /// <summary>
    ///   使用指定的描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNLockRecursionException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNLockRecursionException; overload;

  end;

  /// <summary>
  ///   当进入锁定状态的递归与此锁定的递归策略不兼容时引发的异常。
  /// </summary>
  [DNTypeName('System.Threading.LockRecursionException')]
  DNLockRecursionException = interface(DNException)
  ['{31F76568-0C8D-3653-9897-03EF1590D4B0}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNLockRecursionException = class(TDNGenericImport<DNLockRecursionExceptionClass, DNLockRecursionException>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskSchedulerExceptionClass = interface(DNExceptionClass)
  ['{DE790D0E-12FC-4C6F-8503-2992D0729B16}']
  { constructors } 

    /// <summary>
    ///   使用由系统提供的用来描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init: DNTaskSchedulerException; overload;
    /// <summary>
    ///   使用指定的描述错误的消息初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNTaskSchedulerException; overload;
    /// <summary>
    ///   新实例初始化  类使用的默认错误消息和对导致此异常的内部异常的引用。
    /// </summary>
    {class} function init(innerException: DNException): DNTaskSchedulerException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNTaskSchedulerException; overload;

  end;

  /// <summary>
  ///   表示一个用于通信的无效操作异常 。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.TaskSchedulerException')]
  DNTaskSchedulerException = interface(DNException)
  ['{8173E27C-D446-3923-9852-E270F41F5F67}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTaskSchedulerException = class(TDNGenericImport<DNTaskSchedulerExceptionClass, DNTaskSchedulerException>) end;

  //-------------namespace: System----------------
  DNTimeZoneNotFoundExceptionClass = interface(DNExceptionClass)
  ['{BEB371D8-EE07-4B8F-A1D4-43B5A5637D93}']
  { constructors } 

    /// <summary>
    ///   使用指定的消息字符串初始化  类的新实例。
    /// </summary>
    {class} function init(message: string): DNTimeZoneNotFoundException; overload;
    /// <summary>
    ///   使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化  类的新实例。
    /// </summary>
    {class} function init(message: string; innerException: DNException): DNTimeZoneNotFoundException; overload;
    /// <summary>
    ///   使用由系统提供的消息初始化  类的新实例。
    /// </summary>
    {class} function init: DNTimeZoneNotFoundException; overload;

  end;

  /// <summary>
  ///   找不到时区时引发的异常。
  /// </summary>
  [DNTypeName('System.TimeZoneNotFoundException')]
  DNTimeZoneNotFoundException = interface(DNException)
  ['{AAAFA086-E0CE-34FC-B534-7A000F18B2B7}']
  { getter & setter } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTimeZoneNotFoundException = class(TDNGenericImport<DNTimeZoneNotFoundExceptionClass, DNTimeZoneNotFoundException>) end;

  //-------------namespace: System----------------
  DNFormattableStringClass = interface(DNObjectClass)
  ['{F4346741-77D2-4BBA-972E-C5079FF5A0DA}']
  { static methods } 

    /// <summary>
    ///   返回自变量通过使用固定区域性的约定的格式的结果字符串。
    /// </summary>
    {class} function Invariant(formattable: DNFormattableString): string;

  end;

  /// <summary>
  ///   表示复合格式字符串和要设置格式的自变量。
  /// </summary>
  [DNTypeName('System.FormattableString')]
  DNFormattableString = interface(DNObject)
  ['{9ECB37AB-3E0F-38F3-A068-8029F843560E}']
  { getter & setter } 

    function get_Format: string;
    function get_ArgumentCount: Int32;

  { methods } 

    /// <summary>
    ///   返回使用当前区域性的格式设置约定设置格式沿其参数的复合格式字符串的结果的字符串。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   返回一个对象数组，包含一个或多个要格式化的对象。
    /// </summary>
    function GetArguments: TArray<DNObject>;
    /// <summary>
    ///   返回位于指定的索引位置处的参数。
    /// </summary>
    function GetArgument(index: Int32): DNObject;
    /// <summary>
    ///   返回使用指定的区域性的格式设置约定设置格式沿其参数的复合格式字符串的结果的字符串。
    /// </summary>
    function ToString(formatProvider: DNIFormatProvider): string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   返回复合格式字符串。
    /// </summary>
    property Format: string read get_Format;
    /// <summary>
    ///   获取参数要设置格式的数目。
    /// </summary>
    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  TDNFormattableString = class(TDNGenericImport<DNFormattableStringClass, DNFormattableString>) end;

  //-------------namespace: System----------------
  DNGCClass = interface(DNObjectClass)
  ['{E3C07C26-0610-480C-ACC7-6CA8C795D38E}']
  { static getter & setter } 

    {class} function get_MaxGeneration: Int32;

  { static methods } 

    /// <summary>
    ///   通知运行时在安排垃圾回收时应考虑分配大量的非托管内存。
    /// </summary>
    {class} procedure AddMemoryPressure(bytesAllocated: Int64);
    /// <summary>
    ///   通知运行时已释放非托管内存，在安排垃圾回收时不需要再考虑它。
    /// </summary>
    {class} procedure RemoveMemoryPressure(bytesAllocated: Int64);
    /// <summary>
    ///   强制对 0 代到指定代进行即时垃圾回收。
    /// </summary>
    {class} procedure Collect(generation: Int32); overload;
    /// <summary>
    ///   强制对所有代进行即时垃圾回收。
    /// </summary>
    {class} procedure Collect; overload;
    /// <summary>
    ///   强制在  值所指定的时间对 0 代到指定代进行垃圾回收。
    /// </summary>
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode); overload;
    /// <summary>
    ///   在由  值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收是否应该为阻碍性。
    /// </summary>
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode; blocking: Boolean); overload;
    /// <summary>
    ///   在由  值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收应该为阻碍性还是压缩性。
    /// </summary>
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode; blocking: Boolean; compacting: Boolean); overload;
    /// <summary>
    ///   返回已经对对象的指定代进行的垃圾回收次数。
    /// </summary>
    {class} function CollectionCount(generation: Int32): Int32;
    /// <summary>
    ///   引用指定对象，使其从当前例程开始到调用此方法的那一刻为止均不符合进行垃圾回收的条件。
    /// </summary>
    {class} procedure KeepAlive(obj: DNObject);
    /// <summary>
    ///   返回指定弱引用的目标的当前代数。
    /// </summary>
    {class} function GetGeneration(wo: DNWeakReference): Int32; overload;
    /// <summary>
    ///   挂起当前线程，直到处理终结器队列的线程清空该队列为止。
    /// </summary>
    {class} procedure WaitForPendingFinalizers;
    /// <summary>
    ///   请求公共语言运行时不要调用指定对象的终结器。
    /// </summary>
    {class} procedure SuppressFinalize(obj: DNObject);
    /// <summary>
    ///   请求系统调用指定对象的终结器，此前已为该对象调用 。
    /// </summary>
    {class} procedure ReRegisterForFinalize(obj: DNObject);
    /// <summary>
    ///   检索当前认为要分配的字节数。
    ///               一个参数，指示此方法是否可以等待较短间隔再返回，以便系统回收垃圾和终结对象。
    /// </summary>
    {class} function GetTotalMemory(forceFullCollection: Boolean): Int64;
    {class} function GetAllocatedBytesForCurrentThread: Int64;
    /// <summary>
    ///   指定当条件支持完整垃圾回收以及回收完成时，应引发垃圾回收通知。
    /// </summary>
    {class} procedure RegisterForFullGCNotification(maxGenerationThreshold: Int32; largeObjectHeapThreshold: Int32);
    /// <summary>
    ///   取消注册垃圾回收通知。
    /// </summary>
    {class} procedure CancelFullGCNotification;
    /// <summary>
    ///   返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。
    /// </summary>
    {class} function WaitForFullGCApproach: DNGCNotificationStatus; overload;
    /// <summary>
    ///   在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。
    /// </summary>
    {class} function WaitForFullGCApproach(millisecondsTimeout: Int32): DNGCNotificationStatus; overload;
    /// <summary>
    ///   返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。
    /// </summary>
    {class} function WaitForFullGCComplete: DNGCNotificationStatus; overload;
    /// <summary>
    ///   在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。
    /// </summary>
    {class} function WaitForFullGCComplete(millisecondsTimeout: Int32): DNGCNotificationStatus; overload;
    /// <summary>
    ///   如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收。
    /// </summary>
    {class} function TryStartNoGCRegion(totalSize: Int64): Boolean; overload;
    /// <summary>
    ///   如果指定数量的内存可用于大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收。
    /// </summary>
    {class} function TryStartNoGCRegion(totalSize: Int64; lohSize: Int64): Boolean; overload;
    /// <summary>
    ///   如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收；并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。
    /// </summary>
    {class} function TryStartNoGCRegion(totalSize: Int64; disallowFullBlockingGC: Boolean): Boolean; overload;
    /// <summary>
    ///   如果指定数量的内存可用大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收；并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。
    /// </summary>
    {class} function TryStartNoGCRegion(totalSize: Int64; lohSize: Int64; disallowFullBlockingGC: Boolean): Boolean; overload;
    /// <summary>
    ///   结束无 GC 区域延迟模式。
    /// </summary>
    {class} procedure EndNoGCRegion;
    /// <summary>
    ///   返回指定对象的当前代数。
    /// </summary>
    {class} function GetGeneration(obj: DNObject): Int32; overload;

  { static propertys } 

    /// <summary>
    ///   获取系统当前支持的最大代数。
    /// </summary>
    {class} property MaxGeneration: Int32 read get_MaxGeneration;
  end;

  /// <summary>
  ///   控制系统垃圾回收器（一种自动回收未使用内存的服务）。
  /// </summary>
  [DNTypeName('System.GC')]
  DNGC = interface(DNObject)
  ['{F87CDD00-CBF2-365C-BC2D-78CECD0CBF49}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNGC = class(TDNGenericImport<DNGCClass, DNGC>) end;

  //-------------namespace: System.Globalization----------------
  DNCalendarClass = interface(DNObjectClass)
  ['{2527880B-8748-47F5-9812-B9E082F2896B}']
  { static methods } 

    /// <summary>
    ///   返回指定的只读版本  对象。
    /// </summary>
    {class} function &ReadOnly(calendar: DNCalendar): DNCalendar;

  end;

  /// <summary>
  ///   表示部门中的时间（如周、月和年）。
  /// </summary>
  [DNTypeName('System.Globalization.Calendar')]
  DNCalendar = interface(DNObject)
  ['{8A93390F-4331-317F-B450-1E0E4914E335}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_IsReadOnly: Boolean;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);

  { methods } 

    /// <summary>
    ///   创建一个新对象的当前副本  对象。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   返回  ，它是指定的相距指定的毫秒数 。
    /// </summary>
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的天数相距指定 。
    /// </summary>
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的相距指定的小时数 。
    /// </summary>
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的相距指定的分钟数 。
    /// </summary>
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的相距指定的秒数 。
    /// </summary>
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的周数相距指定 。
    /// </summary>
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    /// <summary>
    ///   返回指定的月份和当前纪元年份中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    /// <summary>
    ///   返回当前纪元的指定年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定的小时值 。
    /// </summary>
    function GetHour(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的毫秒值 。
    /// </summary>
    function GetMilliseconds(time: DNDateTime): Double;
    /// <summary>
    ///   返回在指定的分钟值 。
    /// </summary>
    function GetMinute(time: DNDateTime): Int32;
    /// <summary>
    ///   返回当前纪元中指定年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定的秒值 。
    /// </summary>
    function GetSecond(time: DNDateTime): Int32;
    /// <summary>
    ///   返回包括中指定的日期的年份的周  值。
    /// </summary>
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    /// <summary>
    ///   确定当前纪元中指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    /// <summary>
    ///   确定当前纪元中指定年份中的指定的月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定年份的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32): Int32; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定当前纪元中的指定的年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32): Boolean; overload;
    /// <summary>
    ///   返回  已设置为指定的日期和时间以当前纪元。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份，通过使用  属性来确定相应的纪元。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    /// <summary>
    ///   当在派生类中重写返回  ，它是指定的相距指定的月数 。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   当在派生类中重写返回  ，它是指定的相距指定的年份数 。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   当在派生类中重写，返回每月天数中指定 。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   当在派生类中重写返回在指定的日期是星期几 。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   当在派生类中重写时返回该年的天中指定 。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   当在派生类中重写，返回指定的月份、 年份和纪元中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   当在派生类中重写，返回指定的纪元年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   当在派生类中重写，会返回纪元中指定 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   当在派生类中重写，以指定返回月份 。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   当在派生类中重写，请指定纪元中指定年份中返回月的数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   当在派生类中重写返回年份中指定 。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   当在派生类中重写，确定指定纪元中指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   当在派生类中重写，确定指定纪元中的指定年份中的指定的月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   当在派生类中重写，确定指定纪元中的指定的年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   当在派生类中重写返回  已设置为指定的日期和时间指定纪元中的。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取最早支持日期和时间由此  对象。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取最新的日期和时间受此  对象。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取一个值，该值指示是否此  对象是只读的。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   当在派生类中重写，获取当前日历中的纪元列表。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
  end;

  TDNCalendar = class(TDNGenericImport<DNCalendarClass, DNCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNEastAsianLunisolarCalendarClass = interface(DNCalendarClass)
  ['{DC2988A9-CFAE-4477-A169-B6726A02900D}']
  end;

  /// <summary>
  ///   表示将时间划分为月、 日、 年中和纪元，并且其基于的太阳和月亮循环的日期的日历。
  /// </summary>
  [DNTypeName('System.Globalization.EastAsianLunisolarCalendar')]
  DNEastAsianLunisolarCalendar = interface(DNCalendar)
  ['{47FF8F5E-F989-39FF-A985-898BF36109BD}']
  { getter & setter } 

    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_IsReadOnly: Boolean;
    function get_Eras: TArray<Int32>;

  { methods } 

    /// <summary>
    ///   计算中甲子 （60 年） 循环，对应于指定日期的年份。
    /// </summary>
    function GetSexagenaryYear(time: DNDateTime): Int32;
    /// <summary>
    ///   计算甲子 （60 年） 循环中的指定年份天体词干。
    /// </summary>
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    /// <summary>
    ///   计算甲子 （60 年） 循环中的指定年份的地面分支。
    /// </summary>
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    /// <summary>
    ///   计算指定的年和纪元的指定月份中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回  设置为指定的日期、 时间和纪元。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    /// <summary>
    ///   计算指定的从指定日期的月数的日期。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   计算指定的从指定日期的年数的日期。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   计算中指定日期的年份的日期。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   计算指定日期的月份日期。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   计算指定的纪元年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定日期的月份。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定日期的年份。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   计算中指定日期的周日期。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   计算指定的纪元年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元中指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   确定指定纪元年份中的指定月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetEra(time: DNDateTime): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Eras: TArray<Int32> read get_Eras;
  end;

  TDNEastAsianLunisolarCalendar = class(TDNGenericImport<DNEastAsianLunisolarCalendarClass, DNEastAsianLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNChineseLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{B49CEC2F-522F-45A9-8ED8-DCEEA6FC5D42}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNChineseLunisolarCalendar;

  end;

  /// <summary>
  ///   表示部门，例如月、 日和年中的时间。
  ///               年日和月阴阳历计算时使用中文日历上，进行计算。
  /// </summary>
  [DNTypeName('System.Globalization.ChineseLunisolarCalendar')]
  DNChineseLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{9EFD4CF2-0BAA-350B-9D73-0974077B2F7B}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   检索对应于指定的纪元  类型。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的最小日期和时间受  类。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取的最大日期和时间受  类。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取对应于日期和时间由当前支持的范围的纪元  对象。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNChineseLunisolarCalendar = class(TDNGenericImport<DNChineseLunisolarCalendarClass, DNChineseLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNJapaneseLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{9E93E25D-C92C-46EC-8DE1-D2B84BE2E84B}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNJapaneseLunisolarCalendar;

  end;

  /// <summary>
  ///   表示部门，例如月、 日和年中的时间。
  ///               虽然日和月阴阳历计算年计算日本历。
  /// </summary>
  [DNTypeName('System.Globalization.JapaneseLunisolarCalendar')]
  DNJapaneseLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{2C731933-62A6-31A0-AFE1-1034F46361D2}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   检索对应于指定的纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的最小日期和时间受  类。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取的最大日期和时间受  类。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取与相关的纪元  对象。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJapaneseLunisolarCalendar = class(TDNGenericImport<DNJapaneseLunisolarCalendarClass, DNJapaneseLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNKoreanLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{B13D075B-3812-45C1-80C8-4DA04D5CA267}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNKoreanLunisolarCalendar;

  end;

  /// <summary>
  ///   表示部门，例如月、 日和年中的时间。
  ///               年计算日和月阴阳历计算时使用公历日历。
  /// </summary>
  [DNTypeName('System.Globalization.KoreanLunisolarCalendar')]
  DNKoreanLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{12426E70-50E2-3129-B617-E252B36ECE89}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   检索对应于指定的纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的最小日期和时间受  类。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取的最大日期和时间受  类。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取对应于日期和时间由当前支持的范围的纪元  对象。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNKoreanLunisolarCalendar = class(TDNGenericImport<DNKoreanLunisolarCalendarClass, DNKoreanLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNTaiwanLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{82A9C079-0DE5-4376-890D-1B9B4DE8157F}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNTaiwanLunisolarCalendar;

  end;

  /// <summary>
  ///   表示中国台湾阴阳历。
  ///               台湾日历年日和月阴阳历计算时使用公历，进行计算。
  /// </summary>
  [DNTypeName('System.Globalization.TaiwanLunisolarCalendar')]
  DNTaiwanLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{2B4B0612-E1F4-376F-A9B9-86BA3F72A670}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   检索对应于指定的纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的最小日期和时间受  类。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取的最大日期和时间受  类。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取与当前相关的纪元  对象。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNTaiwanLunisolarCalendar = class(TDNGenericImport<DNTaiwanLunisolarCalendarClass, DNTaiwanLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNGregorianCalendarClass = interface(DNCalendarClass)
  ['{ED1AA113-1C40-4383-8AB1-D7FC30519ACC}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用默认  值。
    /// </summary>
    {class} function init: DNGregorianCalendar; overload;
    /// <summary>
    ///   新实例初始化  类使用指定  值。
    /// </summary>
    {class} function init(&type: DNGregorianCalendarTypes): DNGregorianCalendar; overload;

  end;

  /// <summary>
  ///   表示公历。
  /// </summary>
  [DNTypeName('System.Globalization.GregorianCalendar')]
  DNGregorianCalendar = interface(DNCalendar)
  ['{68F8AEA9-1968-35B9-8A0E-6FDC637A4F8E}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_CalendarType: DNGregorianCalendarTypes;
    procedure set_CalendarType(value: DNGregorianCalendarTypes);
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   返回  ，它是指定的相距指定的月数 。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的相距指定的年份数 。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   返回在指定的每月天数 。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的日期是星期几 。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   返回在指定的年份结束 。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中的指定年份中的指定月份中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元中指定年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定月份 。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中指定年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定的年份 。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   确定指定纪元中指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份中的指定的月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回  已设置为指定的日期和时间指定纪元中的。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份，通过使用  属性来确定相应的纪元。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取最早的日期和时间受  类型。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取最新的日期和时间受  类型。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，该值指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取或设置  值，该值指示当前的语言版本 。
    /// </summary>
    property CalendarType: DNGregorianCalendarTypes read get_CalendarType write set_CalendarType;
    /// <summary>
    ///   获取列表中的纪元 。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNGregorianCalendar = class(TDNGenericImport<DNGregorianCalendarClass, DNGregorianCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNHebrewCalendarClass = interface(DNCalendarClass)
  ['{3B96932B-D541-4653-B651-D3E0B9374533}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNHebrewCalendar;

  end;

  /// <summary>
  ///   表示希伯来历。
  /// </summary>
  [DNTypeName('System.Globalization.HebrewCalendar')]
  DNHebrewCalendar = interface(DNCalendar)
  ['{2206D773-CA1C-3258-9456-CEB7706C3710}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   返回  ，它是指定的相距指定的月数 。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   返回在指定的每月天数 。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的日期是星期几 。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   返回指定  中的日期是该年中的第几天。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中的指定年份中的指定月份中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元中指定年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定月份 。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中指定年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定的年份  值。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   确定指定纪元中指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份中的指定的月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份，通过使用  属性来确定相应的纪元。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    /// <summary>
    ///   返回  ，它是指定的相距指定的年份数 。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回  已设置为指定的日期和时间指定纪元中的。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取最早的日期和时间受  类型。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取最新的日期和时间受  类型。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，该值指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取列表中的纪元 。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNHebrewCalendar = class(TDNGenericImport<DNHebrewCalendarClass, DNHebrewCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNHijriCalendarClass = interface(DNCalendarClass)
  ['{C0F15ABF-795E-4E58-AC76-53B3C92F6F76}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNHijriCalendar;

  end;

  /// <summary>
  ///   表示回历。
  /// </summary>
  [DNTypeName('System.Globalization.HijriCalendar')]
  DNHijriCalendar = interface(DNCalendar)
  ['{EE832CE3-06CA-33EF-8F01-61C7C218BD7E}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_HijriAdjustment: Int32;
    procedure set_HijriAdjustment(value: Int32);
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   返回  ，它是指定的相距指定的月数 。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的相距指定的年份数 。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   返回在指定的每月天数 。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的日期是星期几 。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   返回在指定的年份结束 。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元年份中指定月份的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定的纪元年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定月份 。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定的纪元年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定的年份 。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   确定指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元年份中的指定月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回  设置为指定的日期、 时间和纪元。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份，通过使用  属性来确定相应的纪元。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此日历支持的最早日期和时间。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取最新的日期和时间此日历支持。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，该值指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取或设置要添加或从日历若要容纳开始和结束的斋月的方差，并以适应日期之差国家/地区中减去天数。
    /// </summary>
    property HijriAdjustment: Int32 read get_HijriAdjustment write set_HijriAdjustment;
    /// <summary>
    ///   获取列表中的纪元 。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNHijriCalendar = class(TDNGenericImport<DNHijriCalendarClass, DNHijriCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNJapaneseCalendarClass = interface(DNCalendarClass)
  ['{304585D2-46B0-4B52-BC15-1A4B0C331B40}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNJapaneseCalendar;

  end;

  /// <summary>
  ///   表示日本历。
  /// </summary>
  [DNTypeName('System.Globalization.JapaneseCalendar')]
  DNJapaneseCalendar = interface(DNCalendar)
  ['{374050DD-6190-3257-8812-8230BF095147}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   返回  ，它是指定的相距指定的月数 。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的相距指定的年份数 。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   返回指定纪元中的指定年份中的指定月份中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元中指定年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定的每月天数 。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的日期是星期几 。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   返回在指定的年份结束 。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中指定年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回包括中指定的日期的年份的周 。
    /// </summary>
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    /// <summary>
    ///   返回指定纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定月份 。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的年份 。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   确定指定纪元中指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份中的指定的月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回  已设置为指定的日期和时间指定纪元中的。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份，通过使用  属性来确定相应的纪元。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取最早支持日期和时间由当前  对象。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取最新的日期和时间由当前支持  对象。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，该值指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取列表中的纪元 。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJapaneseCalendar = class(TDNGenericImport<DNJapaneseCalendarClass, DNJapaneseCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNJulianCalendarClass = interface(DNCalendarClass)
  ['{6A0E906F-5F24-4649-8568-C743E19C07EF}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNJulianCalendar;

  end;

  /// <summary>
  ///   表示儒略历。
  /// </summary>
  [DNTypeName('System.Globalization.JulianCalendar')]
  DNJulianCalendar = interface(DNCalendar)
  ['{5C3E6CE8-B218-3762-883C-91BC987CDC2D}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   返回  ，它是指定的相距指定的月数 。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的相距指定的年份数 。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   返回在指定的每月天数 。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的日期是星期几 。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   返回在指定的年份结束 。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中的指定年份中的指定月份中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元中指定年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定月份 。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中指定年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定的年份 。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   确定指定纪元中指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份中的指定的月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回  已设置为指定的日期和时间指定纪元中的。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份，通过使用  属性来确定相应的纪元。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  类支持的最早日期和时间。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取  类支持的最晚日期和时间。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，该值指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取列表中的纪元 。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJulianCalendar = class(TDNGenericImport<DNJulianCalendarClass, DNJulianCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNKoreanCalendarClass = interface(DNCalendarClass)
  ['{5B47C14F-89ED-4DD8-A941-33A7855A980D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNKoreanCalendar;

  end;

  /// <summary>
  ///   表示韩国历。
  /// </summary>
  [DNTypeName('System.Globalization.KoreanCalendar')]
  DNKoreanCalendar = interface(DNCalendar)
  ['{1A06A4DC-E239-3717-89E1-D0683F3A5320}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   返回  ，它是指定的相距指定的月数 。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的相距指定的年份数 。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   返回指定纪元中的指定年份中的指定月份中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元中指定年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定的每月天数 。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的日期是星期几 。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   返回在指定的年份结束 。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中指定年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回包括中指定的日期的年份的周 。
    /// </summary>
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    /// <summary>
    ///   返回指定纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定月份 。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的年份 。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   确定指定纪元中指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份中的指定的月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回  已设置为指定的日期和时间指定纪元中的。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份，通过使用  属性来确定相应的纪元。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  类支持的最早日期和时间。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取  类支持的最晚日期和时间。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取列表中的纪元 。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNKoreanCalendar = class(TDNGenericImport<DNKoreanCalendarClass, DNKoreanCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNPersianCalendarClass = interface(DNCalendarClass)
  ['{EE24EFEB-1B1C-40B9-BA47-D2B1580A116C}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNPersianCalendar;

  end;

  /// <summary>
  ///   表示波斯历。
  /// </summary>
  [DNTypeName('System.Globalization.PersianCalendar')]
  DNPersianCalendar = interface(DNCalendar)
  ['{507FD334-04AF-31A7-8026-4C544B703A9D}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   返回一个基于指定  对象偏移指定月数的  对象。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   返回一个基于指定  对象偏移指定年数的  对象。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   返回指定  对象中的日期是该月的几号。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定  对象中的日期是星期几。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   返回指定  对象中的日期是该年中的第几天。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元年份中指定月份的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元中指定年份的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定  对象中的纪元。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定  对象中的月份。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中指定年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定  对象中的年份。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   确定指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回指定纪元年份的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元年份中的指定月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回一个  对象，该对象设置为指定日期、时间和纪元。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    /// <summary>
    ///   将指定的年份转换为四位数的年份表示形式。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  类支持的最早日期和时间。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取  类支持的最晚日期和时间。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取  对象中的纪元列表。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNPersianCalendar = class(TDNGenericImport<DNPersianCalendarClass, DNPersianCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNTaiwanCalendarClass = interface(DNCalendarClass)
  ['{0925B3C7-94FF-4A16-8331-F9063D07A8A5}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNTaiwanCalendar;

  end;

  /// <summary>
  ///   表示中国台湾日历。
  /// </summary>
  [DNTypeName('System.Globalization.TaiwanCalendar')]
  DNTaiwanCalendar = interface(DNCalendar)
  ['{769B8B68-64F7-3B61-B744-160A9FCC3216}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   返回  ，它是指定的相距指定的月数 。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的相距指定的年份数 。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   返回指定纪元中的指定年份中的指定月份中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元中指定年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定的每月天数 。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的日期是星期几 。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   返回在指定的年份结束 。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中指定年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回包括中指定的日期的年份的周 。
    /// </summary>
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    /// <summary>
    ///   返回指定纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定月份 。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的年份 。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   确定指定纪元中指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份中的指定的月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回  已设置为指定的日期和时间指定纪元中的。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份，通过使用  属性来确定相应的纪元。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  类支持的最早日期和时间。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取  类支持的最晚日期和时间。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，该值指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取列表中的纪元 。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNTaiwanCalendar = class(TDNGenericImport<DNTaiwanCalendarClass, DNTaiwanCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNThaiBuddhistCalendarClass = interface(DNCalendarClass)
  ['{CB8083BF-1A73-42E4-BCB1-62171A673022}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNThaiBuddhistCalendar;

  end;

  /// <summary>
  ///   表示泰国佛教日历。
  /// </summary>
  [DNTypeName('System.Globalization.ThaiBuddhistCalendar')]
  DNThaiBuddhistCalendar = interface(DNCalendar)
  ['{EC3DAC94-DF80-3017-B381-B13DCED6C4D8}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   返回  ，它是指定的相距指定的月数 。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   返回  ，它是指定的相距指定的年份数 。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   返回指定纪元中的指定年份中的指定月份中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回指定纪元中指定年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回在指定的每月天数 。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的日期是星期几 。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   返回在指定的年份结束 。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   返回指定纪元中指定年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   返回包括中指定的日期的年份的周 。
    /// </summary>
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    /// <summary>
    ///   返回指定纪元 。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定月份 。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   返回在指定的年份 。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   确定指定纪元中指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份中的指定的月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回  已设置为指定的日期和时间指定纪元中的。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份，通过使用  属性来确定相应的纪元。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  类支持的最早日期和时间。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取  类支持的最晚日期和时间。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取列表中的纪元  类。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNThaiBuddhistCalendar = class(TDNGenericImport<DNThaiBuddhistCalendarClass, DNThaiBuddhistCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNUmAlQuraCalendarClass = interface(DNCalendarClass)
  ['{BDF14E5A-C590-4F9B-8CC1-50F06032D933}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNUmAlQuraCalendar;

  end;

  /// <summary>
  ///   表示沙特阿拉伯 (Um Al Qura) 回历。
  /// </summary>
  [DNTypeName('System.Globalization.UmAlQuraCalendar')]
  DNUmAlQuraCalendar = interface(DNCalendar)
  ['{68B67DA9-7212-396E-9528-33F70547660E}']
  { getter & setter } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   计算指定的从指定的初始日期的月数的日期。
    /// </summary>
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    /// <summary>
    ///   计算指定的从指定的初始日期的年数的日期。
    /// </summary>
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    /// <summary>
    ///   计算在其发生指定的日期的月份日期。
    /// </summary>
    function GetDayOfMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   计算指定的日期在其发生的每周日期。
    /// </summary>
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    /// <summary>
    ///   计算指定日期出现在年中的哪一天。
    /// </summary>
    function GetDayOfYear(time: DNDateTime): Int32;
    /// <summary>
    ///   计算指定的年和纪元的指定月份中的天数。
    /// </summary>
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   计算指定指定纪元年份中的天数。
    /// </summary>
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   计算指定的日期会发生的纪元。
    /// </summary>
    function GetEra(time: DNDateTime): Int32;
    /// <summary>
    ///   计算指定的日期发生的月份。
    /// </summary>
    function GetMonth(time: DNDateTime): Int32;
    /// <summary>
    ///   计算指定纪元的指定年份中的月数。
    /// </summary>
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   计算指定所表示日期的年份 。
    /// </summary>
    function GetYear(time: DNDateTime): Int32;
    /// <summary>
    ///   确定指定的日期是否为闰日。
    /// </summary>
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   计算指定的年和纪元的闰月。
    /// </summary>
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    /// <summary>
    ///   确定指定纪元年份中的指定月份是否为闰月。
    /// </summary>
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   确定指定纪元中的指定年份是否为闰年。
    /// </summary>
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    /// <summary>
    ///   返回  设置为指定的日期、 时间和纪元。
    /// </summary>
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    /// <summary>
    ///   将指定的年份转换为四位数年份，通过使用  属性来确定相应的纪元。
    /// </summary>
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此日历支持的最早日期和时间。
    /// </summary>
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    /// <summary>
    ///   获取最新的日期和时间此日历支持。
    /// </summary>
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    /// <summary>
    ///   获取一个值，指示当前日历是阳历、 阴历还是二者的组合。
    /// </summary>
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    /// <summary>
    ///   获取由当前支持的纪元列表 。
    /// </summary>
    property Eras: TArray<Int32> read get_Eras;
    /// <summary>
    ///   获取或设置可以用两位数年份表示的 100 年范围内的最后一年。
    /// </summary>
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNUmAlQuraCalendar = class(TDNGenericImport<DNUmAlQuraCalendarClass, DNUmAlQuraCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNCharUnicodeInfoClass = interface(DNObjectClass)
  ['{9DD70CF8-4975-4D52-B8FA-3CF175C5965F}']
  { static methods } 

    /// <summary>
    ///   获取与指定的字符关联的数字值。
    /// </summary>
    {class} function GetNumericValue(ch: Char): Double; overload;
    /// <summary>
    ///   获取与指定的字符串的指定索引处的字符关联的数字值。
    /// </summary>
    {class} function GetNumericValue(s: string; index: Int32): Double; overload;
    /// <summary>
    ///   获取指定的数字字符的十进制数字值。
    /// </summary>
    {class} function GetDecimalDigitValue(ch: Char): Int32; overload;
    /// <summary>
    ///   指定的字符串的指定索引处获取的数字字符的十进制数字值。
    /// </summary>
    {class} function GetDecimalDigitValue(s: string; index: Int32): Int32; overload;
    /// <summary>
    ///   获取指定的数字字符的数字值。
    /// </summary>
    {class} function GetDigitValue(ch: Char): Int32; overload;
    /// <summary>
    ///   指定的字符串的指定索引处获取的数字字符的数字值。
    /// </summary>
    {class} function GetDigitValue(s: string; index: Int32): Int32; overload;
    /// <summary>
    ///   获取指定的字符的 Unicode 类别。
    /// </summary>
    {class} function GetUnicodeCategory(ch: Char): DNUnicodeCategory; overload;
    /// <summary>
    ///   获取指定的字符串的指定索引处的字符的 Unicode 类别。
    /// </summary>
    {class} function GetUnicodeCategory(s: string; index: Int32): DNUnicodeCategory; overload;

  end;

  /// <summary>
  ///   检索关于 Unicode 字符的信息。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Globalization.CharUnicodeInfo')]
  DNCharUnicodeInfo = interface(DNObject)
  ['{56321278-32BA-3A80-8E75-15114E9D16EF}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCharUnicodeInfo = class(TDNGenericImport<DNCharUnicodeInfoClass, DNCharUnicodeInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNCompareInfoClass = interface(DNObjectClass)
  ['{653A7FA2-435B-4C6C-83BD-6FD77D706232}']
  { static methods } 

    /// <summary>
    ///   初始化新  对象与指定的区域性相关联并且在指定中使用的字符串比较方法 。
    /// </summary>
    {class} function GetCompareInfo(culture: Int32; assembly: DNAssembly): DNCompareInfo; overload;
    /// <summary>
    ///   初始化新  与具有指定标识符的区域性相关联的对象。
    /// </summary>
    {class} function GetCompareInfo(culture: Int32): DNCompareInfo; overload;
    /// <summary>
    ///   初始化新  与具有指定名称的区域性相关联的对象。
    /// </summary>
    {class} function GetCompareInfo(name: string): DNCompareInfo; overload;
    /// <summary>
    ///   指示指定的 Unicode 字符是否可排序。
    /// </summary>
    {class} function IsSortable(ch: Char): Boolean; overload;
    /// <summary>
    ///   指示指定的 Unicode 字符串是否可排序。
    /// </summary>
    {class} function IsSortable(text: string): Boolean; overload;
    /// <summary>
    ///   初始化新  对象与指定的区域性相关联并且在指定中使用的字符串比较方法 。
    /// </summary>
    {class} function GetCompareInfo(name: string; assembly: DNAssembly): DNCompareInfo; overload;

  end;

  /// <summary>
  ///   实现用于区分区域性的字符串的一组方法。
  /// </summary>
  [DNTypeName('System.Globalization.CompareInfo')]
  DNCompareInfo = interface(DNObject)
  ['{6747FF61-F8DA-3689-BB01-47F2266AE261}']
  { getter & setter } 

    function get_Name: string;
    function get_LCID: Int32;
    function get_Version: DNSortVersion;

  { methods } 

    /// <summary>
    ///   比较两个字符串。
    /// </summary>
    function Compare(string1: string; string2: string): Int32; overload;
    /// <summary>
    ///   比较两个字符串使用指定  值。
    /// </summary>
    function Compare(string1: string; string2: string; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   将一个字符串的一部分与另一个字符串的一部分相比较。
    /// </summary>
    function Compare(string1: string; offset1: Int32; length1: Int32; string2: string; offset2: Int32; length2: Int32): Int32; overload;
    /// <summary>
    ///   比较字符串的结尾部分与另一个使用指定的字符串的结尾部分与  值。
    /// </summary>
    function Compare(string1: string; offset1: Int32; string2: string; offset2: Int32; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   将一个字符串的结尾部分与另一个字符串的结尾部分相比较。
    /// </summary>
    function Compare(string1: string; offset1: Int32; string2: string; offset2: Int32): Int32; overload;
    /// <summary>
    ///   确定指定的源字符串是否以指定的前缀开头。
    /// </summary>
    function IsPrefix(source: string; prefix: string): Boolean; overload;
    /// <summary>
    ///   确定指定的源字符串是否以指定的后缀结尾。
    /// </summary>
    function IsSuffix(source: string; suffix: string): Boolean; overload;
    /// <summary>
    ///   搜索指定的字符并返回整个源字符串内第一个匹配项的从零开始的索引。
    /// </summary>
    function IndexOf(source: string; value: Char): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串并返回整个源字符串内第一个匹配项的从零开始的索引。
    /// </summary>
    function IndexOf(source: string; value: string): Int32; overload;
    /// <summary>
    ///   搜索指定的字符，并返回使用指定的整个源字符串内的第一个匹配项的从零开始索引  值。
    /// </summary>
    function IndexOf(source: string; value: Char; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串，并返回使用指定的整个源字符串内的第一个匹配项的从零开始索引  值。
    /// </summary>
    function IndexOf(source: string; value: string; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的字符，并返回源字符串内从指定的索引位置到字符串结尾这一部分中第一个匹配项的从零开始的索引。
    /// </summary>
    function IndexOf(source: string; value: Char; startIndex: Int32): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串，并返回源字符串内从指定的索引位置到字符串结尾这一部分中第一个匹配项的从零开始的索引。
    /// </summary>
    function IndexOf(source: string; value: string; startIndex: Int32): Int32; overload;
    /// <summary>
    ///   搜索指定的字符并将从指定索引的扩展的源字符串内的部分中的第一个匹配项的从零开始索引返回使用指定的字符串的末尾  值。
    /// </summary>
    function IndexOf(source: string; value: Char; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串并将从指定索引的扩展的源字符串内的部分中的第一个匹配项的从零开始索引返回使用指定的字符串的末尾  值。
    /// </summary>
    function IndexOf(source: string; value: string; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的字符，并返回源字符串内从指定的索引位置开始、包含指定的元素数的部分中第一个匹配项的从零开始的索引。
    /// </summary>
    function IndexOf(source: string; value: Char; startIndex: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串，并返回源字符串内从指定的索引位置开始、包含指定的元素数的部分中第一个匹配项的从零开始的索引。
    /// </summary>
    function IndexOf(source: string; value: string; startIndex: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   搜索指定的字符，并返回源字符串中指定索引处开始并包含指定的数量的使用指定的元素的部分中的第一个匹配项的从零开始索引  值。
    /// </summary>
    function IndexOf(source: string; value: Char; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串，并返回源字符串中指定索引处开始并包含指定的数量的使用指定的元素的部分中的第一个匹配项的从零开始索引  值。
    /// </summary>
    function IndexOf(source: string; value: string; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的字符，并返回整个源字符串内最后一个匹配项的从零开始的索引。
    /// </summary>
    function LastIndexOf(source: string; value: Char): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串，并返回整个源字符串内最后一个匹配项的从零开始的索引。
    /// </summary>
    function LastIndexOf(source: string; value: string): Int32; overload;
    /// <summary>
    ///   搜索指定的字符，并返回使用指定的整个源字符串内的最后一个匹配项的从零开始索引  值。
    /// </summary>
    function LastIndexOf(source: string; value: Char; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串，并返回使用指定的整个源字符串内的最后一个匹配项的从零开始索引  值。
    /// </summary>
    function LastIndexOf(source: string; value: string; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的字符，并返回源字符串内从字符串开头到指定的索引位置这一部分中最后一个匹配项的从零开始的索引。
    /// </summary>
    function LastIndexOf(source: string; value: Char; startIndex: Int32): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串，并返回源字符串内从字符串开头到指定的索引位置这一部分中最后一个匹配项的从零开始的索引。
    /// </summary>
    function LastIndexOf(source: string; value: string; startIndex: Int32): Int32; overload;
    /// <summary>
    ///   搜索指定的字符并将扩展的源字符串内的部分中的最后一个匹配项的从零开始索引从字符串的开头返回指定的索引使用指定  值。
    /// </summary>
    function LastIndexOf(source: string; value: Char; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串并将扩展的源字符串内的部分中的最后一个匹配项的从零开始索引从字符串的开头返回指定的索引使用指定  值。
    /// </summary>
    function LastIndexOf(source: string; value: string; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的字符，并返回源字符串内包含指定的元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。
    /// </summary>
    function LastIndexOf(source: string; value: Char; startIndex: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串，并返回源字符串内包含指定的元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。
    /// </summary>
    function LastIndexOf(source: string; value: string; startIndex: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   搜索指定的字符，并返回包含指定的数目的元素且使用指定的指定索引处结尾的源字符串内的部分中的最后一个匹配项的从零开始索引  值。
    /// </summary>
    function LastIndexOf(source: string; value: Char; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   搜索指定的子字符串，并返回包含指定的数目的元素且使用指定的指定索引处结尾的源字符串内的部分中的最后一个匹配项的从零开始索引  值。
    /// </summary>
    function LastIndexOf(source: string; value: string; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   获取  对象使用指定的指定字符串  值。
    /// </summary>
    function GetSortKey(source: string; options: DNCompareOptions): DNSortKey; overload;
    /// <summary>
    ///   获取指定字符串的排序关键字。
    /// </summary>
    function GetSortKey(source: string): DNSortKey; overload;
    /// <summary>
    ///   确定指定的对象是否等于当前  对象。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   用作当前哈希函数  于哈希算法和数据结构，如哈希表。
    /// </summary>
    function GetHashCode: Int32; overload;
    /// <summary>
    ///   获取基于指定的比较选项的字符串的哈希代码。
    /// </summary>
    function GetHashCode(source: string; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   将一个字符串的一部分与另一个使用指定的字符串的一部分进行比较  值。
    /// </summary>
    function Compare(string1: string; offset1: Int32; length1: Int32; string2: string; offset2: Int32; length2: Int32; options: DNCompareOptions): Int32; overload;
    /// <summary>
    ///   确定指定的源字符串是否以指定使用指定的前缀开头  值。
    /// </summary>
    function IsPrefix(source: string; prefix: string; options: DNCompareOptions): Boolean; overload;
    /// <summary>
    ///   确定指定的源字符串是否以指定使用指定的后缀结尾  值。
    /// </summary>
    function IsSuffix(source: string; suffix: string; options: DNCompareOptions): Boolean; overload;
    /// <summary>
    ///   返回表示当前  对象的字符串。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取由此执行排序操作所用的区域性名称  对象。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取当前的格式正确的区域性标识符 。
    /// </summary>
    property LCID: Int32 read get_LCID;
    /// <summary>
    ///   获取用于比较和排序字符串的 Unicode 版本的相关信息。
    /// </summary>
    property Version: DNSortVersion read get_Version;
  end;

  TDNCompareInfo = class(TDNGenericImport<DNCompareInfoClass, DNCompareInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNCultureInfoClass = interface(DNObjectClass)
  ['{4BE49F6F-6111-4165-97B2-385BE9B7104D}']
  { static getter & setter } 

    {class} function get_CurrentCulture: DNCultureInfo;
    {class} procedure set_CurrentCulture(value: DNCultureInfo);
    {class} function get_CurrentUICulture: DNCultureInfo;
    {class} procedure set_CurrentUICulture(value: DNCultureInfo);
    {class} function get_InstalledUICulture: DNCultureInfo;
    {class} function get_DefaultThreadCurrentCulture: DNCultureInfo;
    {class} procedure set_DefaultThreadCurrentCulture(value: DNCultureInfo);
    {class} function get_DefaultThreadCurrentUICulture: DNCultureInfo;
    {class} procedure set_DefaultThreadCurrentUICulture(value: DNCultureInfo);
    {class} function get_InvariantCulture: DNCultureInfo;

  { constructors } 

    /// <summary>
    ///   根据由名称指定的区域性初始化  类的新实例。
    /// </summary>
    {class} function init(name: string): DNCultureInfo; overload;
    /// <summary>
    ///   基于名称指定的区域性并基于布尔值（指定是否使用系统中用户选定的区域性设置）来初始化  类的新实例。
    /// </summary>
    {class} function init(name: string; useUserOverride: Boolean): DNCultureInfo; overload;
    /// <summary>
    ///   根据区域性标识符指定的区域性初始化  类的新实例。
    /// </summary>
    {class} function init(culture: Int32): DNCultureInfo; overload;
    /// <summary>
    ///   基于区域性标识符指定的区域性并基于布尔值（指定是否使用系统中用户选定的区域性设置）来初始化  类的新实例。
    /// </summary>
    {class} function init(culture: Int32; useUserOverride: Boolean): DNCultureInfo; overload;

  { static methods } 

    /// <summary>
    ///   创建表示与指定名称关联的特定区域性的 。
    /// </summary>
    {class} function CreateSpecificCulture(name: string): DNCultureInfo;
    /// <summary>
    ///   获取由指定  参数筛选的支持的区域性列表。
    /// </summary>
    {class} function GetCultures(types: DNCultureTypes): TArray<DNCultureInfo>;
    /// <summary>
    ///   返回指定的  对象周围的只读包装。
    /// </summary>
    {class} function &ReadOnly(ci: DNCultureInfo): DNCultureInfo;
    /// <summary>
    ///   使用特定的区域性标识符检索某个区域性的缓存的只读实例。
    /// </summary>
    {class} function GetCultureInfo(culture: Int32): DNCultureInfo; overload;
    /// <summary>
    ///   使用特定的区域性名称检索某个区域性的缓存的只读实例。
    /// </summary>
    {class} function GetCultureInfo(name: string): DNCultureInfo; overload;
    /// <summary>
    ///   检索某个区域性的缓存的只读实例。
    ///               参数指定了一个使用  和  对象进行初始化的区域性，而这些对象则是由另一个区域性指定的。
    /// </summary>
    {class} function GetCultureInfo(name: string; altName: string): DNCultureInfo; overload;
    /// <summary>
    ///   已否决。
    ///               检索只读的  对象，其语言特征由指定的 RFC 4646 语言标记标识。
    /// </summary>
    {class} function GetCultureInfoByIetfLanguageTag(name: string): DNCultureInfo;

  { static propertys } 

    /// <summary>
    ///   获取表示当前线程使用的区域性的  对象。
    /// </summary>
    {class} property CurrentCulture: DNCultureInfo read get_CurrentCulture write set_CurrentCulture;
    /// <summary>
    ///   获取或设置  对象，该对象表示资源管理器在运行时查找区域性特定资源时所用的当前用户接口区域性。
    /// </summary>
    {class} property CurrentUICulture: DNCultureInfo read get_CurrentUICulture write set_CurrentUICulture;
    /// <summary>
    ///   获取表示操作系统中安装的区域性的 。
    /// </summary>
    {class} property InstalledUICulture: DNCultureInfo read get_InstalledUICulture;
    /// <summary>
    ///   获取或设置当前应用程序域中线程的默认区域性。
    /// </summary>
    {class} property DefaultThreadCurrentCulture: DNCultureInfo read get_DefaultThreadCurrentCulture write set_DefaultThreadCurrentCulture;
    /// <summary>
    ///   获取或设置当前应用程序域中线程的默认 UI 区域性。
    /// </summary>
    {class} property DefaultThreadCurrentUICulture: DNCultureInfo read get_DefaultThreadCurrentUICulture write set_DefaultThreadCurrentUICulture;
    /// <summary>
    ///   获取不依赖于区域性（固定）的  对象。
    /// </summary>
    {class} property InvariantCulture: DNCultureInfo read get_InvariantCulture;
  end;

  /// <summary>
  ///   提供有关特定区域性的信息 (称为区域设置对于非托管的代码开发)。
  ///               这些信息包括区域性的名称、书写系统、使用的日历、字符串的排序顺序以及对日期和数字的格式化设置。
  /// </summary>
  [DNTypeName('System.Globalization.CultureInfo')]
  DNCultureInfo = interface(DNObject)
  ['{348A8C6D-464A-3F21-856B-061370D54599}']
  { getter & setter } 

    function get_Parent: DNCultureInfo;
    function get_LCID: Int32;
    function get_KeyboardLayoutId: Int32;
    function get_Name: string;
    function get_IetfLanguageTag: string;
    function get_DisplayName: string;
    function get_NativeName: string;
    function get_EnglishName: string;
    function get_TwoLetterISOLanguageName: string;
    function get_ThreeLetterISOLanguageName: string;
    function get_ThreeLetterWindowsLanguageName: string;
    function get_CompareInfo: DNCompareInfo;
    function get_TextInfo: DNTextInfo;
    function get_IsNeutralCulture: Boolean;
    function get_CultureTypes: DNCultureTypes;
    function get_NumberFormat: DNNumberFormatInfo;
    procedure set_NumberFormat(value: DNNumberFormatInfo);
    function get_DateTimeFormat: DNDateTimeFormatInfo;
    procedure set_DateTimeFormat(value: DNDateTimeFormatInfo);
    function get_Calendar: DNCalendar;
    function get_OptionalCalendars: TArray<DNCalendar>;
    function get_UseUserOverride: Boolean;
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   确定指定的对象是否与当前  具有相同的区域性。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   用作当前  的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回一个字符串，该字符串包含当前  的名称，其格式为 languagecode2-country/regioncode2。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   获取一个定义如何格式化指定类型的对象。
    /// </summary>
    function GetFormat(formatType: DNType): DNObject;
    /// <summary>
    ///   刷新缓存的区域性相关信息。
    /// </summary>
    procedure ClearCachedData;
    /// <summary>
    ///   如果默认的图形用户界面区域性不合适，则获取适合控制台应用程序的备用用户界面区域性。
    /// </summary>
    function GetConsoleFallbackUICulture: DNCultureInfo;
    /// <summary>
    ///   创建当前  的副本。
    /// </summary>
    function Clone: DNObject;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取表示当前  的父区域性的 。
    /// </summary>
    property Parent: DNCultureInfo read get_Parent;
    /// <summary>
    ///   获取当前  的区域性标识符。
    /// </summary>
    property LCID: Int32 read get_LCID;
    /// <summary>
    ///   获取活动的输入区域设置标识符。
    /// </summary>
    property KeyboardLayoutId: Int32 read get_KeyboardLayoutId;
    /// <summary>
    ///   获取格式为 languagecode2-country/regioncode2 的区域性名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   已否决。
    ///               获取某种语言的 RFC 4646 标准标识。
    /// </summary>
    property IetfLanguageTag: string read get_IetfLanguageTag;
    /// <summary>
    ///   获取完整的本地化区域性名称。
    /// </summary>
    property DisplayName: string read get_DisplayName;
    /// <summary>
    ///   获取为区域性设置的显示名称，它由语言、国家/地区以及可选脚本组成。
    /// </summary>
    property NativeName: string read get_NativeName;
    /// <summary>
    ///   获取格式为 languagefull [country/regionfull] 的英语区域性名称。
    /// </summary>
    property EnglishName: string read get_EnglishName;
    /// <summary>
    ///   获取当前  的语言的由两个字母构成的 ISO 639-1 代码。
    /// </summary>
    property TwoLetterISOLanguageName: string read get_TwoLetterISOLanguageName;
    /// <summary>
    ///   获取当前  的语言的由三个字母构成的 ISO 639-2 代码。
    /// </summary>
    property ThreeLetterISOLanguageName: string read get_ThreeLetterISOLanguageName;
    /// <summary>
    ///   获取 Windows API 中定义的由三个字母构成的语言代码。
    /// </summary>
    property ThreeLetterWindowsLanguageName: string read get_ThreeLetterWindowsLanguageName;
    /// <summary>
    ///   获取为区域性定义如何比较字符串的 。
    /// </summary>
    property CompareInfo: DNCompareInfo read get_CompareInfo;
    /// <summary>
    ///   获取定义与区域性关联的书写体系的 。
    /// </summary>
    property TextInfo: DNTextInfo read get_TextInfo;
    /// <summary>
    ///   获取一个值，该值指示当前  是否表示非特定区域性。
    /// </summary>
    property IsNeutralCulture: Boolean read get_IsNeutralCulture;
    /// <summary>
    ///   获取属于当前  对象的区域性类型。
    /// </summary>
    property CultureTypes: DNCultureTypes read get_CultureTypes;
    /// <summary>
    ///   获取或设置 ，它定义适合区域性的、显示数字、货币和百分比的格式。
    /// </summary>
    property NumberFormat: DNNumberFormatInfo read get_NumberFormat write set_NumberFormat;
    /// <summary>
    ///   获取或设置 ，它定义适合区域性的、显示日期和时间的格式。
    /// </summary>
    property DateTimeFormat: DNDateTimeFormatInfo read get_DateTimeFormat write set_DateTimeFormat;
    /// <summary>
    ///   获取区域性使用的默认日历。
    /// </summary>
    property Calendar: DNCalendar read get_Calendar;
    /// <summary>
    ///   获取该区域性可使用的日历的列表。
    /// </summary>
    property OptionalCalendars: TArray<DNCalendar> read get_OptionalCalendars;
    /// <summary>
    ///   获取一个值，该值指示当前  对象是否使用用户选定的区域性设置。
    /// </summary>
    property UseUserOverride: Boolean read get_UseUserOverride;
    /// <summary>
    ///   获取一个值，该值指示当前  是否为只读。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNCultureInfo = class(TDNGenericImport<DNCultureInfoClass, DNCultureInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNDateTimeFormatInfoClass = interface(DNObjectClass)
  ['{5D4BEF1D-88C1-4F36-9653-1D1C44B6088F}']
  { static getter & setter } 

    {class} function get_InvariantInfo: DNDateTimeFormatInfo;
    {class} function get_CurrentInfo: DNDateTimeFormatInfo;

  { constructors } 

    /// <summary>
    ///   初始化不依赖于区域性的（固定的） 类的新可写实例。
    /// </summary>
    {class} function init: DNDateTimeFormatInfo;

  { static methods } 

    /// <summary>
    ///   返回  对象关联的 。
    /// </summary>
    {class} function GetInstance(provider: DNIFormatProvider): DNDateTimeFormatInfo;
    /// <summary>
    ///   返回只读的  包装。
    /// </summary>
    {class} function &ReadOnly(dtfi: DNDateTimeFormatInfo): DNDateTimeFormatInfo;

  { static propertys } 

    /// <summary>
    ///   获取默认值，只读  对象，该对象依赖于区域性的 （固定）。
    /// </summary>
    {class} property InvariantInfo: DNDateTimeFormatInfo read get_InvariantInfo;
    /// <summary>
    ///   获取基于当前区域性对值进行格式设置的只读的  对象。
    /// </summary>
    {class} property CurrentInfo: DNDateTimeFormatInfo read get_CurrentInfo;
  end;

  /// <summary>
  ///   提供有关日期和时间值格式的区域性特定信息。
  /// </summary>
  [DNTypeName('System.Globalization.DateTimeFormatInfo')]
  DNDateTimeFormatInfo = interface(DNObject)
  ['{70A738D1-1BC5-3175-BD42-603E2B82C08B}']
  { getter & setter } 

    function get_AMDesignator: string;
    procedure set_AMDesignator(value: string);
    function get_Calendar: DNCalendar;
    procedure set_Calendar(value: DNCalendar);
    function get_DateSeparator: string;
    procedure set_DateSeparator(value: string);
    function get_FirstDayOfWeek: DNDayOfWeek;
    procedure set_FirstDayOfWeek(value: DNDayOfWeek);
    function get_CalendarWeekRule: DNCalendarWeekRule;
    procedure set_CalendarWeekRule(value: DNCalendarWeekRule);
    function get_FullDateTimePattern: string;
    procedure set_FullDateTimePattern(value: string);
    function get_LongDatePattern: string;
    procedure set_LongDatePattern(value: string);
    function get_LongTimePattern: string;
    procedure set_LongTimePattern(value: string);
    function get_MonthDayPattern: string;
    procedure set_MonthDayPattern(value: string);
    function get_PMDesignator: string;
    procedure set_PMDesignator(value: string);
    function get_RFC1123Pattern: string;
    function get_ShortDatePattern: string;
    procedure set_ShortDatePattern(value: string);
    function get_ShortTimePattern: string;
    procedure set_ShortTimePattern(value: string);
    function get_SortableDateTimePattern: string;
    function get_TimeSeparator: string;
    procedure set_TimeSeparator(value: string);
    function get_UniversalSortableDateTimePattern: string;
    function get_YearMonthPattern: string;
    procedure set_YearMonthPattern(value: string);
    function get_AbbreviatedDayNames: TArray<string>;
    procedure set_AbbreviatedDayNames(value: TArray<string>);
    function get_ShortestDayNames: TArray<string>;
    procedure set_ShortestDayNames(value: TArray<string>);
    function get_DayNames: TArray<string>;
    procedure set_DayNames(value: TArray<string>);
    function get_AbbreviatedMonthNames: TArray<string>;
    procedure set_AbbreviatedMonthNames(value: TArray<string>);
    function get_MonthNames: TArray<string>;
    procedure set_MonthNames(value: TArray<string>);
    function get_IsReadOnly: Boolean;
    function get_NativeCalendarName: string;
    function get_AbbreviatedMonthGenitiveNames: TArray<string>;
    procedure set_AbbreviatedMonthGenitiveNames(value: TArray<string>);
    function get_MonthGenitiveNames: TArray<string>;
    procedure set_MonthGenitiveNames(value: TArray<string>);

  { methods } 

    /// <summary>
    ///   返回指定类型的对象，它提供日期和时间格式化服务。
    /// </summary>
    function GetFormat(formatType: DNType): DNObject;
    /// <summary>
    ///   创建的浅表副本 。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   返回表示指定纪元的整数。
    /// </summary>
    function GetEra(eraName: string): Int32;
    /// <summary>
    ///   返回包含指定纪元名称的字符串。
    /// </summary>
    function GetEraName(era: Int32): string;
    /// <summary>
    ///   返回包含指定纪元的缩写名称的字符串（如果缩写名称存在）。
    /// </summary>
    function GetAbbreviatedEraName(era: Int32): string;
    /// <summary>
    ///   返回一周根据与当前关联的区域性的指定日期的特定于区域性的缩写的名称  对象。
    /// </summary>
    function GetAbbreviatedDayName(dayofweek: DNDayOfWeek): string;
    /// <summary>
    ///   获取最短日期名缩写中指定日期的关联与当前的周  对象。
    /// </summary>
    function GetShortestDayName(dayOfWeek: DNDayOfWeek): string;
    /// <summary>
    ///   返回可用于对日期和时间值进行格式设置的所有标准模式。
    /// </summary>
    function GetAllDateTimePatterns: TArray<string>; overload;
    /// <summary>
    ///   返回一周根据与当前关联的区域性的指定日期的特定于区域性的完整名称  对象。
    /// </summary>
    function GetDayName(dayofweek: DNDayOfWeek): string;
    /// <summary>
    ///   返回基于与当前关联的区域性的指定月份的特定于区域性的缩写的名称  对象。
    /// </summary>
    function GetAbbreviatedMonthName(month: Int32): string;
    /// <summary>
    ///   返回基于与当前关联的区域性的指定月份的特定于区域性的完整名称  对象。
    /// </summary>
    function GetMonthName(month: Int32): string;
    /// <summary>
    ///   设置对应于指定的标准格式字符串的自定义日期和时间格式字符串。
    /// </summary>
    procedure SetAllDateTimePatterns(patterns: TArray<string>; format: Char);
    /// <summary>
    ///   返回可在其中使用指定标准格式字符串对日期和时间值进行格式设置的所有模式。
    /// </summary>
    function GetAllDateTimePatterns(format: Char): TArray<string>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置表示处于“上午”（中午前）的各小时的字符串指示符。
    /// </summary>
    property AMDesignator: string read get_AMDesignator write set_AMDesignator;
    /// <summary>
    ///   获取或设置用于当前区域性的日历。
    /// </summary>
    property Calendar: DNCalendar read get_Calendar write set_Calendar;
    /// <summary>
    ///   获取或设置分隔日期中各组成部分（即年、月、日）的字符串。
    /// </summary>
    property DateSeparator: string read get_DateSeparator write set_DateSeparator;
    /// <summary>
    ///   获取或设置一周的第一天。
    /// </summary>
    property FirstDayOfWeek: DNDayOfWeek read get_FirstDayOfWeek write set_FirstDayOfWeek;
    /// <summary>
    ///   获取或设置一个值，该值指定使用哪个规则确定该年的第一个日历周。
    /// </summary>
    property CalendarWeekRule: DNCalendarWeekRule read get_CalendarWeekRule write set_CalendarWeekRule;
    /// <summary>
    ///   为长日期和长时间值获取或设置自定义格式字符串。
    /// </summary>
    property FullDateTimePattern: string read get_FullDateTimePattern write set_FullDateTimePattern;
    /// <summary>
    ///   获取或设置长日期值的自定义格式字符串。
    /// </summary>
    property LongDatePattern: string read get_LongDatePattern write set_LongDatePattern;
    /// <summary>
    ///   为长时间值获取或设置自定义格式字符串。
    /// </summary>
    property LongTimePattern: string read get_LongTimePattern write set_LongTimePattern;
    /// <summary>
    ///   获取或设置月份和日期值的自定义格式字符串。
    /// </summary>
    property MonthDayPattern: string read get_MonthDayPattern write set_MonthDayPattern;
    /// <summary>
    ///   获取或设置表示处于“下午”（中午后）的各小时的字符串指示符。
    /// </summary>
    property PMDesignator: string read get_PMDesignator write set_PMDesignator;
    /// <summary>
    ///   获取自定义的格式字符串，该字符串用于基于 Internet 工程任务组 (IETF) 征求意见文档 (RFC) 1123 规范的时间值。
    /// </summary>
    property RFC1123Pattern: string read get_RFC1123Pattern;
    /// <summary>
    ///   获取或设置短日期值的自定义格式字符串。
    /// </summary>
    property ShortDatePattern: string read get_ShortDatePattern write set_ShortDatePattern;
    /// <summary>
    ///   获取或设置短时间值的自定义格式字符串。
    /// </summary>
    property ShortTimePattern: string read get_ShortTimePattern write set_ShortTimePattern;
    /// <summary>
    ///   获取可排序数据和时间值的自定义格式字符串。
    /// </summary>
    property SortableDateTimePattern: string read get_SortableDateTimePattern;
    /// <summary>
    ///   获取或设置分隔时间中各组成部分（即小时、分钟和秒钟）的字符串。
    /// </summary>
    property TimeSeparator: string read get_TimeSeparator write set_TimeSeparator;
    /// <summary>
    ///   获取通用的可排序数据和时间字符串的自定义格式字符串。
    /// </summary>
    property UniversalSortableDateTimePattern: string read get_UniversalSortableDateTimePattern;
    /// <summary>
    ///   获取或设置年份和月份值的自定义格式字符串。
    /// </summary>
    property YearMonthPattern: string read get_YearMonthPattern write set_YearMonthPattern;
    /// <summary>
    ///   获取或设置类型的一维数组  包含区域性特定的日期是星期几的缩写的名称。
    /// </summary>
    property AbbreviatedDayNames: TArray<string> read get_AbbreviatedDayNames write set_AbbreviatedDayNames;
    /// <summary>
    ///   获取或设置与当前关联的最短唯一日期缩写的名称的字符串数组  对象。
    /// </summary>
    property ShortestDayNames: TArray<string> read get_ShortestDayNames write set_ShortestDayNames;
    /// <summary>
    ///   获取或设置一维字符串数组，它包含该周中各天的特定于区域性的完整名称。
    /// </summary>
    property DayNames: TArray<string> read get_DayNames write set_DayNames;
    /// <summary>
    ///   获取或设置一维字符串数组，它包含各月的特定于区域性的缩写名称。
    /// </summary>
    property AbbreviatedMonthNames: TArray<string> read get_AbbreviatedMonthNames write set_AbbreviatedMonthNames;
    /// <summary>
    ///   获取或设置类型的一维数组  包含各月的特定于区域性的完整名称。
    /// </summary>
    property MonthNames: TArray<string> read get_MonthNames write set_MonthNames;
    /// <summary>
    ///   获取一个值，该值指示是否  对象是只读的。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取与当前关联的日历的本机名称  对象。
    /// </summary>
    property NativeCalendarName: string read get_NativeCalendarName;
    /// <summary>
    ///   获取或设置与当前相关联的缩写的月份名称的字符串数组  对象。
    /// </summary>
    property AbbreviatedMonthGenitiveNames: TArray<string> read get_AbbreviatedMonthGenitiveNames write set_AbbreviatedMonthGenitiveNames;
    /// <summary>
    ///   获取或设置与当前关联的月份名称的字符串数组  对象。
    /// </summary>
    property MonthGenitiveNames: TArray<string> read get_MonthGenitiveNames write set_MonthGenitiveNames;
  end;

  TDNDateTimeFormatInfo = class(TDNGenericImport<DNDateTimeFormatInfoClass, DNDateTimeFormatInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNDaylightTimeClass = interface(DNObjectClass)
  ['{A8825842-A95F-4677-885D-8FE194440DB9}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  用指定的开始、 结束时和时间差异信息。
    /// </summary>
    {class} function init(start: DNDateTime; &end: DNDateTime; delta: DNTimeSpan): DNDaylightTime;

  end;

  /// <summary>
  ///   定义夏时制的段。
  /// </summary>
  [DNTypeName('System.Globalization.DaylightTime')]
  DNDaylightTime = interface(DNObject)
  ['{5050FE97-72A6-3BC6-92F2-9DD0413041E3}']
  { getter & setter } 

    function get_Start: DNDateTime;
    function get_End: DNDateTime;
    function get_Delta: DNTimeSpan;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取表示的日期和夏时制时间的开始的时间的对象。
    /// </summary>
    property Start: DNDateTime read get_Start;
    /// <summary>
    ///   获取的对象，表示的日期和时间夏时制周期结束。
    /// </summary>
    property &End: DNDateTime read get_End;
    /// <summary>
    ///   获取表示标准时间和夏令时之间的差异的时间间隔。
    /// </summary>
    property Delta: DNTimeSpan read get_Delta;
  end;

  TDNDaylightTime = class(TDNGenericImport<DNDaylightTimeClass, DNDaylightTime>) end;

  //-------------namespace: System.Globalization----------------
  DNGlobalizationExtensionsClass = interface(DNObjectClass)
  ['{8B0BF3FF-0B6A-4776-A8EB-8BDBD27BAF21}']
  { static methods } 

    /// <summary>
    ///   根据指定  对象区分区域性的字符串比较规则，返回  对象。
    /// </summary>
    {class} function GetStringComparer(compareInfo: DNCompareInfo; options: DNCompareOptions): DNStringComparer;

  end;

  /// <summary>
  ///   提供与全球化相关的扩展方法。
  /// </summary>
  [DNTypeName('System.Globalization.GlobalizationExtensions')]
  DNGlobalizationExtensions = interface(DNObject)
  ['{DAA5C118-9A71-3F66-99FE-F9D65350559E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNGlobalizationExtensions = class(TDNGenericImport<DNGlobalizationExtensionsClass, DNGlobalizationExtensions>) end;

  //-------------namespace: System.Globalization----------------
  DNIdnMappingClass = interface(DNObjectClass)
  ['{A04EADD4-0CCE-4245-BB17-A56BC3AE67E0}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNIdnMapping;

  end;

  /// <summary>
  ///   支持 Internet 域名使用非 ASCII 字符。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Globalization.IdnMapping')]
  DNIdnMapping = interface(DNObject)
  ['{0BA2A2AC-A4D5-38CB-AD03-A0D5B6EC4646}']
  { getter & setter } 

    function get_AllowUnassigned: Boolean;
    procedure set_AllowUnassigned(value: Boolean);
    function get_UseStd3AsciiRules: Boolean;
    procedure set_UseStd3AsciiRules(value: Boolean);

  { methods } 

    /// <summary>
    ///   包含为 US-ASCII 字符范围中的可显示 Unicode 字符的字符串的 Unicode 字符的域名标签的字符串进行编码。
    ///               根据标准 IDNA 是设置字符串的格式。
    /// </summary>
    function GetAscii(unicode: string): string; overload;
    /// <summary>
    ///   对域名标签包含非 US-ASCII 字符范围之外的 Unicode 字符的子字符串进行编码。
    ///               子字符串转换为 US-ASCII 字符范围中的可显示 Unicode 字符的字符串，并按照 IDNA 标准设置格式。
    /// </summary>
    function GetAscii(unicode: string; index: Int32): string; overload;
    /// <summary>
    ///   对一个或多个域名标签，根据 IDNA 标准，为 Unicode 字符的字符串编码的字符串进行解码。
    /// </summary>
    function GetUnicode(ascii: string): string; overload;
    /// <summary>
    ///   对一个或多个编码的域名标签，根据 IDNA 标准，为 Unicode 字符的字符串的子字符串进行解码。
    /// </summary>
    function GetUnicode(ascii: string; index: Int32): string; overload;
    /// <summary>
    ///   指示是否指定的对象和当前  对象是否相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此哈希代码  对象。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   编码指定中包含非 US-ASCII 字符范围之外的 Unicode 字符的域名标签的子字符串的字符数。
    ///               子字符串转换为 US-ASCII 字符范围中的可显示 Unicode 字符的字符串，并按照 IDNA 标准设置格式。
    /// </summary>
    function GetAscii(unicode: string; index: Int32; count: Int32): string; overload;
    /// <summary>
    ///   包含一个或多个编码的域名标签，根据 IDNA 标准，为 Unicode 字符的字符串的指定长度的子字符串进行解码。
    /// </summary>
    function GetUnicode(ascii: string; index: Int32; count: Int32): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置一个值，该值指示是否在由当前的成员执行的操作中使用未分配的 Unicode 码位  对象。
    /// </summary>
    property AllowUnassigned: Boolean read get_AllowUnassigned write set_AllowUnassigned;
    /// <summary>
    ///   获取或设置一个值，该值指示是否在由当前的成员执行的操作中使用标准或宽松的命名约定  对象。
    /// </summary>
    property UseStd3AsciiRules: Boolean read get_UseStd3AsciiRules write set_UseStd3AsciiRules;
  end;

  TDNIdnMapping = class(TDNGenericImport<DNIdnMappingClass, DNIdnMapping>) end;

  //-------------namespace: System.Globalization----------------
  DNNumberFormatInfoClass = interface(DNObjectClass)
  ['{2F19749A-204D-4414-A113-5252E56D82F3}']
  { static getter & setter } 

    {class} function get_InvariantInfo: DNNumberFormatInfo;
    {class} function get_CurrentInfo: DNNumberFormatInfo;

  { constructors } 

    /// <summary>
    ///   初始化不依赖于区域性的（固定的） 类的新可写实例。
    /// </summary>
    {class} function init: DNNumberFormatInfo;

  { static methods } 

    /// <summary>
    ///   获取与指定  关联的 。
    /// </summary>
    {class} function GetInstance(formatProvider: DNIFormatProvider): DNNumberFormatInfo;
    /// <summary>
    ///   返回只读的  包装。
    /// </summary>
    {class} function &ReadOnly(nfi: DNNumberFormatInfo): DNNumberFormatInfo;

  { static propertys } 

    /// <summary>
    ///   获取不依赖于区域性的（固定）只读的  对象。
    /// </summary>
    {class} property InvariantInfo: DNNumberFormatInfo read get_InvariantInfo;
    /// <summary>
    ///   获取基于当前区域性对值进行格式设置的只读的 。
    /// </summary>
    {class} property CurrentInfo: DNNumberFormatInfo read get_CurrentInfo;
  end;

  /// <summary>
  ///   提供用于对数字值进行格式设置和分析的区域性特定信息。
  /// </summary>
  [DNTypeName('System.Globalization.NumberFormatInfo')]
  DNNumberFormatInfo = interface(DNObject)
  ['{146A47AB-A2CF-3587-BB25-2B286D7566B4}']
  { getter & setter } 

    function get_CurrencyDecimalDigits: Int32;
    procedure set_CurrencyDecimalDigits(value: Int32);
    function get_CurrencyDecimalSeparator: string;
    procedure set_CurrencyDecimalSeparator(value: string);
    function get_IsReadOnly: Boolean;
    function get_CurrencyGroupSizes: TArray<Int32>;
    procedure set_CurrencyGroupSizes(value: TArray<Int32>);
    function get_NumberGroupSizes: TArray<Int32>;
    procedure set_NumberGroupSizes(value: TArray<Int32>);
    function get_PercentGroupSizes: TArray<Int32>;
    procedure set_PercentGroupSizes(value: TArray<Int32>);
    function get_CurrencyGroupSeparator: string;
    procedure set_CurrencyGroupSeparator(value: string);
    function get_CurrencySymbol: string;
    procedure set_CurrencySymbol(value: string);
    function get_NaNSymbol: string;
    procedure set_NaNSymbol(value: string);
    function get_CurrencyNegativePattern: Int32;
    procedure set_CurrencyNegativePattern(value: Int32);
    function get_NumberNegativePattern: Int32;
    procedure set_NumberNegativePattern(value: Int32);
    function get_PercentPositivePattern: Int32;
    procedure set_PercentPositivePattern(value: Int32);
    function get_PercentNegativePattern: Int32;
    procedure set_PercentNegativePattern(value: Int32);
    function get_NegativeInfinitySymbol: string;
    procedure set_NegativeInfinitySymbol(value: string);
    function get_NegativeSign: string;
    procedure set_NegativeSign(value: string);
    function get_NumberDecimalDigits: Int32;
    procedure set_NumberDecimalDigits(value: Int32);
    function get_NumberDecimalSeparator: string;
    procedure set_NumberDecimalSeparator(value: string);
    function get_NumberGroupSeparator: string;
    procedure set_NumberGroupSeparator(value: string);
    function get_CurrencyPositivePattern: Int32;
    procedure set_CurrencyPositivePattern(value: Int32);
    function get_PositiveInfinitySymbol: string;
    procedure set_PositiveInfinitySymbol(value: string);
    function get_PositiveSign: string;
    procedure set_PositiveSign(value: string);
    function get_PercentDecimalDigits: Int32;
    procedure set_PercentDecimalDigits(value: Int32);
    function get_PercentDecimalSeparator: string;
    procedure set_PercentDecimalSeparator(value: string);
    function get_PercentGroupSeparator: string;
    procedure set_PercentGroupSeparator(value: string);
    function get_PercentSymbol: string;
    procedure set_PercentSymbol(value: string);
    function get_PerMilleSymbol: string;
    procedure set_PerMilleSymbol(value: string);
    function get_NativeDigits: TArray<string>;
    procedure set_NativeDigits(value: TArray<string>);
    function get_DigitSubstitution: DNDigitShapes;
    procedure set_DigitSubstitution(value: DNDigitShapes);

  { methods } 

    /// <summary>
    ///   创建  对象的浅表副本。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   获取提供数字格式化服务的指定类型的对象。
    /// </summary>
    function GetFormat(formatType: DNType): DNObject;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置在货币值中使用的小数位数。
    /// </summary>
    property CurrencyDecimalDigits: Int32 read get_CurrencyDecimalDigits write set_CurrencyDecimalDigits;
    /// <summary>
    ///   获取或设置要在货币值中用作小数分隔符的字符串。
    /// </summary>
    property CurrencyDecimalSeparator: string read get_CurrencyDecimalSeparator write set_CurrencyDecimalSeparator;
    /// <summary>
    ///   获取一个值，该值指示  对象是否为只读。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取或设置货币值中小数点左边每一组的位数。
    /// </summary>
    property CurrencyGroupSizes: TArray<Int32> read get_CurrencyGroupSizes write set_CurrencyGroupSizes;
    /// <summary>
    ///   获取或设置数值中小数点左边每一组的位数。
    /// </summary>
    property NumberGroupSizes: TArray<Int32> read get_NumberGroupSizes write set_NumberGroupSizes;
    /// <summary>
    ///   获取或设置在百分比值中小数点左边每一组的位数。
    /// </summary>
    property PercentGroupSizes: TArray<Int32> read get_PercentGroupSizes write set_PercentGroupSizes;
    /// <summary>
    ///   获取或设置在货币值中隔开小数点左边的位数组的字符串。
    /// </summary>
    property CurrencyGroupSeparator: string read get_CurrencyGroupSeparator write set_CurrencyGroupSeparator;
    /// <summary>
    ///   获取或设置用作货币符号的字符串。
    /// </summary>
    property CurrencySymbol: string read get_CurrencySymbol write set_CurrencySymbol;
    /// <summary>
    ///   获取或设置表示 IEEE NaN（非数字）值的字符串。
    /// </summary>
    property NaNSymbol: string read get_NaNSymbol write set_NaNSymbol;
    /// <summary>
    ///   获取或设置负货币值的格式模式。
    /// </summary>
    property CurrencyNegativePattern: Int32 read get_CurrencyNegativePattern write set_CurrencyNegativePattern;
    /// <summary>
    ///   获取或设置负数值的格式模式。
    /// </summary>
    property NumberNegativePattern: Int32 read get_NumberNegativePattern write set_NumberNegativePattern;
    /// <summary>
    ///   获取或设置正百分比值的格式模式。
    /// </summary>
    property PercentPositivePattern: Int32 read get_PercentPositivePattern write set_PercentPositivePattern;
    /// <summary>
    ///   获取或设置负百分比值的格式模式。
    /// </summary>
    property PercentNegativePattern: Int32 read get_PercentNegativePattern write set_PercentNegativePattern;
    /// <summary>
    ///   获取或设置表示负无穷大的字符串。
    /// </summary>
    property NegativeInfinitySymbol: string read get_NegativeInfinitySymbol write set_NegativeInfinitySymbol;
    /// <summary>
    ///   获取或设置表示关联数字是负值的字符串。
    /// </summary>
    property NegativeSign: string read get_NegativeSign write set_NegativeSign;
    /// <summary>
    ///   获取或设置在数值中使用的小数位数。
    /// </summary>
    property NumberDecimalDigits: Int32 read get_NumberDecimalDigits write set_NumberDecimalDigits;
    /// <summary>
    ///   获取或设置在数值中用作小数分隔符的字符串。
    /// </summary>
    property NumberDecimalSeparator: string read get_NumberDecimalSeparator write set_NumberDecimalSeparator;
    /// <summary>
    ///   获取或设置在数值中隔开小数点左边的位数组的字符串。
    /// </summary>
    property NumberGroupSeparator: string read get_NumberGroupSeparator write set_NumberGroupSeparator;
    /// <summary>
    ///   获取或设置正货币值的格式模式。
    /// </summary>
    property CurrencyPositivePattern: Int32 read get_CurrencyPositivePattern write set_CurrencyPositivePattern;
    /// <summary>
    ///   获取或设置表示正无穷大的字符串。
    /// </summary>
    property PositiveInfinitySymbol: string read get_PositiveInfinitySymbol write set_PositiveInfinitySymbol;
    /// <summary>
    ///   获取或设置指示关联数字是正值的字符串。
    /// </summary>
    property PositiveSign: string read get_PositiveSign write set_PositiveSign;
    /// <summary>
    ///   获取或设置在百分比值中使用的小数位数。
    /// </summary>
    property PercentDecimalDigits: Int32 read get_PercentDecimalDigits write set_PercentDecimalDigits;
    /// <summary>
    ///   获取或设置在百分比值中用作小数点分隔符的字符串。
    /// </summary>
    property PercentDecimalSeparator: string read get_PercentDecimalSeparator write set_PercentDecimalSeparator;
    /// <summary>
    ///   获取或设置在百分比值中隔离小数点左边数字组的字符串。
    /// </summary>
    property PercentGroupSeparator: string read get_PercentGroupSeparator write set_PercentGroupSeparator;
    /// <summary>
    ///   获取或设置用作百分比符号的字符串。
    /// </summary>
    property PercentSymbol: string read get_PercentSymbol write set_PercentSymbol;
    /// <summary>
    ///   获取或设置用作千分比符号的字符串。
    /// </summary>
    property PerMilleSymbol: string read get_PerMilleSymbol write set_PerMilleSymbol;
    /// <summary>
    ///   获取或设置与西文数字 0 到 9 等同的本机数字的字符串数组。
    /// </summary>
    property NativeDigits: TArray<string> read get_NativeDigits write set_NativeDigits;
    /// <summary>
    ///   获取或设置指定图形用户界面如何显示数字形状的值。
    /// </summary>
    property DigitSubstitution: DNDigitShapes read get_DigitSubstitution write set_DigitSubstitution;
  end;

  TDNNumberFormatInfo = class(TDNGenericImport<DNNumberFormatInfoClass, DNNumberFormatInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNRegionInfoClass = interface(DNObjectClass)
  ['{61BF97B6-AAAC-46D8-B346-3D135AAD551B}']
  { static getter & setter } 

    {class} function get_CurrentRegion: DNRegionInfo;

  { constructors } 

    /// <summary>
    ///   新实例初始化  类根据国家/地区或特定区域性，由名称指定。
    /// </summary>
    {class} function init(name: string): DNRegionInfo; overload;
    /// <summary>
    ///   初始化的新实例类根据与指定的区域性标识符关联的国家/地区。
    /// </summary>
    {class} function init(culture: Int32): DNRegionInfo; overload;

  { static propertys } 

    /// <summary>
    ///   获取  ，它表示由当前线程使用的国家/地区。
    /// </summary>
    {class} property CurrentRegion: DNRegionInfo read get_CurrentRegion;
  end;

  /// <summary>
  ///   包含国家/地区的相关信息。
  /// </summary>
  [DNTypeName('System.Globalization.RegionInfo')]
  DNRegionInfo = interface(DNObject)
  ['{0C630393-7583-333C-AB5D-CB10B910F69B}']
  { getter & setter } 

    function get_Name: string;
    function get_EnglishName: string;
    function get_DisplayName: string;
    function get_NativeName: string;
    function get_TwoLetterISORegionName: string;
    function get_ThreeLetterISORegionName: string;
    function get_ThreeLetterWindowsRegionName: string;
    function get_IsMetric: Boolean;
    function get_GeoId: Int32;
    function get_CurrencyEnglishName: string;
    function get_CurrencyNativeName: string;
    function get_CurrencySymbol: string;
    function get_ISOCurrencySymbol: string;

  { methods } 

    /// <summary>
    ///   确定指定的对象是否是当前所在的同一实例 。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   用作当前  的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回一个包含区域性名称或 ISO 3166 双字母国家/地区代码指定当前字符串 。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取当前的名称或 ISO 3166 双字母国家/地区代码  对象。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取以英文表示的国家/地区的全名。
    /// </summary>
    property EnglishName: string read get_EnglishName;
    /// <summary>
    ///   获取以 .NET Framework 本地化版本语言表示的国家/地区的全名。
    /// </summary>
    property DisplayName: string read get_DisplayName;
    /// <summary>
    ///   获取一个国家/地区的名称，它使用该国家/地区的本地语言格式表示。
    /// </summary>
    property NativeName: string read get_NativeName;
    /// <summary>
    ///   获取在 ISO 3166 中定义的由两个字母组成的国家/地区代码。
    /// </summary>
    property TwoLetterISORegionName: string read get_TwoLetterISORegionName;
    /// <summary>
    ///   获取在 ISO 3166 中定义的由三个字母组成的国家/地区代码。
    /// </summary>
    property ThreeLetterISORegionName: string read get_ThreeLetterISORegionName;
    /// <summary>
    ///   获取 Windows 分配给此表示的国家/地区的三个字母代码 。
    /// </summary>
    property ThreeLetterWindowsRegionName: string read get_ThreeLetterWindowsRegionName;
    /// <summary>
    ///   获取一个值，该值指示该国家/地区是否使用公制进行度量。
    /// </summary>
    property IsMetric: Boolean read get_IsMetric;
    /// <summary>
    ///   获取地理区域、国家/地区、城市或地点的唯一标识号。
    /// </summary>
    property GeoId: Int32 read get_GeoId;
    /// <summary>
    ///   获取该国家/地区中使用的货币的英文名称。
    /// </summary>
    property CurrencyEnglishName: string read get_CurrencyEnglishName;
    /// <summary>
    ///   获取国家/地区、 国家/地区的本地语言格式中所用货币的名称。
    /// </summary>
    property CurrencyNativeName: string read get_CurrencyNativeName;
    /// <summary>
    ///   获取与国家/地区关联的货币符号。
    /// </summary>
    property CurrencySymbol: string read get_CurrencySymbol;
    /// <summary>
    ///   获取与国家/地区关联的由三个字符组成的 ISO 4217 货币符号。
    /// </summary>
    property ISOCurrencySymbol: string read get_ISOCurrencySymbol;
  end;

  TDNRegionInfo = class(TDNGenericImport<DNRegionInfoClass, DNRegionInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNSortKeyClass = interface(DNObjectClass)
  ['{A6CBF3DF-A3E6-4CB3-8F47-A718AAFDE4FB}']
  { static methods } 

    /// <summary>
    ///   比较两个排序关键字。
    /// </summary>
    {class} function Compare(sortkey1: DNSortKey; sortkey2: DNSortKey): Int32;

  end;

  /// <summary>
  ///   表示将字符串映射到其排序关键字的映射结果。
  /// </summary>
  [DNTypeName('System.Globalization.SortKey')]
  DNSortKey = interface(DNObject)
  ['{F34B5293-82D0-32A5-9165-AE789FD3CF15}']
  { getter & setter } 

    function get_OriginalString: string;
    function get_KeyData: TArray<Byte>;

  { methods } 

    /// <summary>
    ///   确定指定的对象是否等于当前  对象。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   用作当前哈希函数  适用于哈希算法和数据结构，如哈希表的对象。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回表示当前  对象的字符串。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取用于创建当前的原始字符串  对象。
    /// </summary>
    property OriginalString: string read get_OriginalString;
    /// <summary>
    ///   获取表示当前的字节数组  对象。
    /// </summary>
    property KeyData: TArray<Byte> read get_KeyData;
  end;

  TDNSortKey = class(TDNGenericImport<DNSortKeyClass, DNSortKey>) end;

  //-------------namespace: System.Globalization----------------
  DNSortVersionClass = interface(DNObjectClass)
  ['{C42BB1AB-716C-488E-BFD0-DB2C1A642EFE}']
  { constructors } 

    /// <summary>
    ///   创建  类的新实例。
    /// </summary>
    {class} function init(fullVersion: Int32; sortId: DNGuid): DNSortVersion;

  end;

  /// <summary>
  ///   提供用于比较和排序字符串的 Unicode 版本的相关信息。
  /// </summary>
  [DNTypeName('System.Globalization.SortVersion')]
  DNSortVersion = interface(DNObject)
  ['{86BD6280-2A64-3A68-A3D2-5D05A4981029}']
  { getter & setter } 

    function get_FullVersion: Int32;
    function get_SortId: DNGuid;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示是否此  实例是否等于指定的对象。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   返回一个值，该值指示是否此  实例是否等于指定  对象。
    /// </summary>
    function Equals(other: DNSortVersion): Boolean; overload;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取完整版本号  对象。
    /// </summary>
    property FullVersion: Int32 read get_FullVersion;
    /// <summary>
    ///   获取此全局唯一标识符  对象。
    /// </summary>
    property SortId: DNGuid read get_SortId;
  end;

  TDNSortVersion = class(TDNGenericImport<DNSortVersionClass, DNSortVersion>) end;

  //-------------namespace: System.Globalization----------------
  DNStringInfoClass = interface(DNObjectClass)
  ['{A64E48B5-2E5D-4BE2-898B-1919548659D0}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNStringInfo; overload;
    /// <summary>
    ///   将  类的新实例初始化为指定的字符串。
    /// </summary>
    {class} function init(value: string): DNStringInfo; overload;

  { static methods } 

    /// <summary>
    ///   获取指定的字符串的指定索引处的文本元素。
    /// </summary>
    {class} function GetNextTextElement(str: string; index: Int32): string; overload;
    /// <summary>
    ///   获取指定字符串中第一个文本元素。
    /// </summary>
    {class} function GetNextTextElement(str: string): string; overload;
    /// <summary>
    ///   返回循环访问整个字符串的文本元素的枚举。
    /// </summary>
    {class} function GetTextElementEnumerator(str: string): DNTextElementEnumerator; overload;
    /// <summary>
    ///   返回指定索引处开始，循环访问字符串中的文本元素的枚举。
    /// </summary>
    {class} function GetTextElementEnumerator(str: string; index: Int32): DNTextElementEnumerator; overload;
    /// <summary>
    ///   返回的每个基字符、 高代理项或指定字符串中的控制字符的索引。
    /// </summary>
    {class} function ParseCombiningCharacters(str: string): TArray<Int32>;

  end;

  /// <summary>
  ///   提供将字符串拆分为文本元素和循环访问这些文本元素的功能。
  /// </summary>
  [DNTypeName('System.Globalization.StringInfo')]
  DNStringInfo = interface(DNObject)
  ['{31C967B5-2F8A-3957-9C6D-34A0731DB36C}']
  { getter & setter } 

    function get_String: string;
    procedure set_String(value: string);
    function get_LengthInTextElements: Int32;

  { methods } 

    /// <summary>
    ///   检索文本元素的子字符串从当前  对象从指定的文本元素开始，一直到指定数量的文本元素。
    /// </summary>
    function SubstringByTextElements(startingTextElement: Int32; lengthInTextElements: Int32): string; overload;
    /// <summary>
    ///   指示当前  对象是否与指定的对象相等。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   计算当前的值的哈希代码  对象。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   检索文本元素的子字符串从当前  对象从指定的文本元素开始，一直到最后一个文本元素。
    /// </summary>
    function SubstringByTextElements(startingTextElement: Int32): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置当前  对象的值。
    /// </summary>
    property &String: string read get_String write set_String;
    /// <summary>
    ///   获取当前  对象中的文本元素数量。
    /// </summary>
    property LengthInTextElements: Int32 read get_LengthInTextElements;
  end;

  TDNStringInfo = class(TDNGenericImport<DNStringInfoClass, DNStringInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNTextElementEnumeratorClass = interface(DNObjectClass)
  ['{6D6B904F-6044-4382-A481-352882F17F6F}']
  end;

  /// <summary>
  ///   枚举字符串的文本元素。
  /// </summary>
  [DNTypeName('System.Globalization.TextElementEnumerator')]
  DNTextElementEnumerator = interface(DNObject)
  ['{4C96DA7C-8858-3C24-A973-CB50F2860A91}']
  { getter & setter } 

    function get_Current: DNObject;
    function get_ElementIndex: Int32;

  { methods } 

    /// <summary>
    ///   将枚举数前移到字符串的下一个文本元素。
    /// </summary>
    function MoveNext: Boolean;
    /// <summary>
    ///   获取字符串中的当前文本元素。
    /// </summary>
    function GetTextElement: string;
    /// <summary>
    ///   将枚举数设置为其初始位置，该位置位于字符串中第一个文本元素之前。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取字符串中的当前文本元素。
    /// </summary>
    property Current: DNObject read get_Current;
    /// <summary>
    ///   获取枚举数当前置于其上的文本元素的索引。
    /// </summary>
    property ElementIndex: Int32 read get_ElementIndex;
  end;

  TDNTextElementEnumerator = class(TDNGenericImport<DNTextElementEnumeratorClass, DNTextElementEnumerator>) end;

  //-------------namespace: System.Globalization----------------
  DNTextInfoClass = interface(DNObjectClass)
  ['{932F46CB-F76C-4186-8839-7EF40C1BD116}']
  { static methods } 

    /// <summary>
    ///   返回指定的只读版本  对象。
    /// </summary>
    {class} function &ReadOnly(textInfo: DNTextInfo): DNTextInfo;

  end;

  /// <summary>
  ///   定义特定于书写系统的文本属性和行为，如大小写。
  /// </summary>
  [DNTypeName('System.Globalization.TextInfo')]
  DNTextInfo = interface(DNObject)
  ['{BCA1528C-6369-37AD-8CC1-DB24A92CC6B1}']
  { getter & setter } 

    function get_ANSICodePage: Int32;
    function get_OEMCodePage: Int32;
    function get_MacCodePage: Int32;
    function get_EBCDICCodePage: Int32;
    function get_LCID: Int32;
    function get_CultureName: string;
    function get_IsReadOnly: Boolean;
    function get_ListSeparator: string;
    procedure set_ListSeparator(value: string);
    function get_IsRightToLeft: Boolean;

  { methods } 

    /// <summary>
    ///   创建一个新对象的当前副本  对象。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   将指定的字符转换为小写。
    /// </summary>
    function ToLower(c: Char): Char; overload;
    /// <summary>
    ///   将指定的字符串转换为小写。
    /// </summary>
    function ToLower(str: string): string; overload;
    /// <summary>
    ///   将指定的字符转换为大写。
    /// </summary>
    function ToUpper(c: Char): Char; overload;
    /// <summary>
    ///   将指定的字符串转换为大写。
    /// </summary>
    function ToUpper(str: string): string; overload;
    /// <summary>
    ///   确定指定的对象是否表示同一书写系统，与当前  对象。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   用作当前  的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   将指定字符串转换为标题大写（全部大写将被视为首字母缩写的词不包含在内）。
    /// </summary>
    function ToTitleCase(str: string): string;
    /// <summary>
    ///   返回表示当前  的字符串。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取由当前所表示书写系统使用的美国国家标准协会 (ANSI) 代码页 。
    /// </summary>
    property ANSICodePage: Int32 read get_ANSICodePage;
    /// <summary>
    ///   获取由当前所表示书写系统使用的原始设备制造商 (OEM) 代码页 。
    /// </summary>
    property OEMCodePage: Int32 read get_OEMCodePage;
    /// <summary>
    ///   获取由当前所表示书写系统使用的 Macintosh 代码页 。
    /// </summary>
    property MacCodePage: Int32 read get_MacCodePage;
    /// <summary>
    ///   获取由当前所表示书写系统使用的扩展二进制编码的十进制交换码 (EBCDIC) 代码页 。
    /// </summary>
    property EBCDICCodePage: Int32 read get_EBCDICCodePage;
    /// <summary>
    ///   获取与当前关联的区域性的区域性标识符  对象。
    /// </summary>
    property LCID: Int32 read get_LCID;
    /// <summary>
    ///   获取与当前关联的区域性名称  对象。
    /// </summary>
    property CultureName: string read get_CultureName;
    /// <summary>
    ///   获取一个值，该值指示是否当前  对象是只读的。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取或设置在列表中分隔项的字符串。
    /// </summary>
    property ListSeparator: string read get_ListSeparator write set_ListSeparator;
    /// <summary>
    ///   获取一个值，该值指示是否当前  对象都表示一个文本从右到左书写的书写体系。
    /// </summary>
    property IsRightToLeft: Boolean read get_IsRightToLeft;
  end;

  TDNTextInfo = class(TDNGenericImport<DNTextInfoClass, DNTextInfo>) end;

  //-------------namespace: System----------------
  /// <summary>
  ///   表示可以添加到  的实例的程序集绑定信息。
  /// </summary>
  [DNTypeName('System.IAppDomainSetup')]
  DNIAppDomainSetup = interface(DNObject)
  ['{27FFF232-A7A8-40DD-8D4A-734AD59FCD41}']
  { getter & setter } 

    function get_ApplicationBase: string;
    procedure set_ApplicationBase(value: string);
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_CachePath: string;
    procedure set_CachePath(value: string);
    function get_ConfigurationFile: string;
    procedure set_ConfigurationFile(value: string);
    function get_DynamicBase: string;
    procedure set_DynamicBase(value: string);
    function get_LicenseFile: string;
    procedure set_LicenseFile(value: string);
    function get_PrivateBinPath: string;
    procedure set_PrivateBinPath(value: string);
    function get_PrivateBinPathProbe: string;
    procedure set_PrivateBinPathProbe(value: string);
    function get_ShadowCopyDirectories: string;
    procedure set_ShadowCopyDirectories(value: string);
    function get_ShadowCopyFiles: string;
    procedure set_ShadowCopyFiles(value: string);

  { propertys } 

    /// <summary>
    ///   获取或设置包含该应用程序的目录的名称。
    /// </summary>
    property ApplicationBase: string read get_ApplicationBase write set_ApplicationBase;
    /// <summary>
    ///   获取或设置应用程序的名称。
    /// </summary>
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    /// <summary>
    ///   获取和设置特定于应用程序的、 从中对文件进行卷影复制使用的区域名称。
    /// </summary>
    property CachePath: string read get_CachePath write set_CachePath;
    /// <summary>
    ///   获取和设置应用程序域的配置文件的名称。
    /// </summary>
    property ConfigurationFile: string read get_ConfigurationFile write set_ConfigurationFile;
    /// <summary>
    ///   获取或设置在其中存储和访问动态生成的文件的目录。
    /// </summary>
    property DynamicBase: string read get_DynamicBase write set_DynamicBase;
    /// <summary>
    ///   获取或设置与此域关联的许可证文件的位置。
    /// </summary>
    property LicenseFile: string read get_LicenseFile write set_LicenseFile;
    /// <summary>
    ///   获取或设置与组合的目录列表  目录来探测专用程序集。
    /// </summary>
    property PrivateBinPath: string read get_PrivateBinPath write set_PrivateBinPath;
    /// <summary>
    ///   获取或设置用来定位应用程序的专用二进制目录路径。
    /// </summary>
    property PrivateBinPathProbe: string read get_PrivateBinPathProbe write set_PrivateBinPathProbe;
    /// <summary>
    ///   获取或设置目录的名称，这些目录包含要进行卷影复制的程序集。
    /// </summary>
    property ShadowCopyDirectories: string read get_ShadowCopyDirectories write set_ShadowCopyDirectories;
    /// <summary>
    ///   获取或设置指示卷影复制是打开还是关闭的字符串。
    /// </summary>
    property ShadowCopyFiles: string read get_ShadowCopyFiles write set_ShadowCopyFiles;
  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   表示异步操作的状态。
  /// </summary>
  [DNTypeName('System.IAsyncResult')]
  DNIAsyncResult = interface(DNObject)
  ['{11AB34E7-0176-3C9E-9EFE-197858400A3D}']
  { getter & setter } 

    function get_IsCompleted: Boolean;
    function get_AsyncWaitHandle: DNWaitHandle;
    function get_AsyncState: DNObject;
    function get_CompletedSynchronously: Boolean;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示异步操作是否已完成。
    /// </summary>
    property IsCompleted: Boolean read get_IsCompleted;
    /// <summary>
    ///   获取用于等待异步操作完成的 。
    /// </summary>
    property AsyncWaitHandle: DNWaitHandle read get_AsyncWaitHandle;
    /// <summary>
    ///   获取一个用户定义的对象，该对象限定或包含有关异步操作的信息。
    /// </summary>
    property AsyncState: DNObject read get_AsyncState;
    /// <summary>
    ///   获取一个值，该值指示异步操作是否同步完成。
    /// </summary>
    property CompletedSynchronously: Boolean read get_CompletedSynchronously;
  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   克隆的支持，这将类的新实例创建与现有实例相同的值。
  /// </summary>
  [DNTypeName('System.ICloneable')]
  DNICloneable = interface(DNObject)
  ['{0CB251A7-3AB3-3B5C-A0B8-9DDF88824B85}']
  { methods } 

    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNObject;

  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   定义由值类型或类实现的通用比较方法，以为排序实例创建类型特定的比较方法。
  /// </summary>
  [DNTypeName('System.IComparable`1')]
  DNIComparable<T> = interface(DNObject)
  ['{338A8432-786C-3D79-B779-A4F8DCF27835}']
  { methods } 

    function CompareTo(other: T): Int32;

  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   定义由值类型或类实现的特定于类型的通用比较方法，旨在对其实例进行排序。
  /// </summary>
  [DNTypeName('System.IComparable')]
  DNIComparable = interface(DNObject)
  ['{DEB0E770-91FD-3CF6-9A6C-E6A3656F3965}']
  { methods } 

    /// <summary>
    ///   将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。
    /// </summary>
    function CompareTo(obj: DNObject): Int32;

  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   定义将实现引用或值类型的值转换为具有等效值的公共语言运行时类型的方法。
  /// </summary>
  [DNTypeName('System.IConvertible')]
  DNIConvertible = interface(DNObject)
  ['{805E3B62-B5E9-393D-8941-377D8BF4556B}']
  { methods } 

    /// <summary>
    ///   返回此实例。
    /// </summary>
    function GetTypeCode: DNTypeCode;
    /// <summary>
    ///   将此实例的值转换为等效的布尔值使用指定的区域性特定格式设置信息。
    /// </summary>
    function ToBoolean(provider: DNIFormatProvider): Boolean;
    /// <summary>
    ///   将此实例的值转换为等效的 Unicode 字符使用指定的区域性特定格式设置信息。
    /// </summary>
    function ToChar(provider: DNIFormatProvider): Char;
    /// <summary>
    ///   将此实例的值转换为使用指定的区域性特定格式设置信息的等效 8 位有符号整数。
    /// </summary>
    function ToSByte(provider: DNIFormatProvider): SByte;
    /// <summary>
    ///   将此实例的值转换为使用指定的区域性特定格式设置信息的等效 8 位无符号整数。
    /// </summary>
    function ToByte(provider: DNIFormatProvider): Byte;
    /// <summary>
    ///   将此实例的值转换为使用指定的区域性特定格式设置信息的等效 16 位有符号整数。
    /// </summary>
    function ToInt16(provider: DNIFormatProvider): Int16;
    /// <summary>
    ///   将此实例的值转换为使用指定的区域性特定格式设置信息的等效 16 位无符号整数。
    /// </summary>
    function ToUInt16(provider: DNIFormatProvider): UInt16;
    /// <summary>
    ///   将此实例的值转换为使用指定的区域性特定格式设置信息的等效 32 位有符号整数。
    /// </summary>
    function ToInt32(provider: DNIFormatProvider): Int32;
    /// <summary>
    ///   将此实例的值转换为等效使用指定的区域性特定格式设置信息的 32 位无符号整数。
    /// </summary>
    function ToUInt32(provider: DNIFormatProvider): UInt32;
    /// <summary>
    ///   将此实例的值转换为使用指定的区域性特定格式设置信息的等效 64 位有符号整数。
    /// </summary>
    function ToInt64(provider: DNIFormatProvider): Int64;
    /// <summary>
    ///   将此实例的值转换为等效使用指定的区域性特定格式设置信息的 64 位无符号整数。
    /// </summary>
    function ToUInt64(provider: DNIFormatProvider): UInt64;
    /// <summary>
    ///   将此实例的值转换为等效单精度浮点数使用指定的区域性特定格式设置信息。
    /// </summary>
    function ToSingle(provider: DNIFormatProvider): Single;
    /// <summary>
    ///   将此实例的值转换为等效双精度浮点数使用指定的区域性特定格式设置信息。
    /// </summary>
    function ToDouble(provider: DNIFormatProvider): Double;
    /// <summary>
    ///   将此实例的值转换为等效  数字使用指定的区域性特定格式设置信息。
    /// </summary>
    function ToDecimal(provider: DNIFormatProvider): DNDecimal;
    /// <summary>
    ///   将此实例的值转换为等效使用指定的区域性特定格式设置信息。
    /// </summary>
    function ToDateTime(provider: DNIFormatProvider): DNDateTime;
    /// <summary>
    ///   将此实例的值转换为等效使用指定的区域性特定格式设置信息。
    /// </summary>
    function ToString(provider: DNIFormatProvider): string;
    /// <summary>
    ///   将此实例与的值转换指定，具有等效值，使用指定的区域性特定格式设置信息。
    /// </summary>
    function ToType(conversionType: DNType; provider: DNIFormatProvider): DNObject;

  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   定义一个方法，该方法支持自定义对象值的格式。
  /// </summary>
  [DNTypeName('System.ICustomFormatter')]
  DNICustomFormatter = interface(DNObject)
  ['{2B130940-CA5E-3406-8385-E259E68AB039}']
  { methods } 

    /// <summary>
    ///   使用指定的格式和区域性特定格式信息将指定对象的值转换为它的等效字符串表示形式。
    /// </summary>
    function Format(format: string; arg: DNObject; formatProvider: DNIFormatProvider): string;

  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   提供一种用于释放非托管资源的机制。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
  /// </summary>
  [DNTypeName('System.IDisposable')]
  DNIDisposable = interface(DNObject)
  ['{805D7A98-D4AF-3F0F-967F-E5CF45312D2C}']
  { methods } 

    /// <summary>
    ///   执行与释放或重置非托管资源关联的应用程序定义的任务。
    /// </summary>
    procedure Dispose;

  end;

  //-------------namespace: System.Collections.Generic----------------
  /// <summary>
  ///   支持在泛型集合上进行简单迭代。
  /// </summary>
  [DNTypeName('System.Collections.Generic.IEnumerator`1')]
  DNIEnumerator<T> = interface(DNIDisposable)
  ['{ACCB6202-26B6-3447-AEFA-73B653F93530}']
  { getter & setter } 

    function get_Current: T;

  { propertys } 

    /// <summary>
    ///   获取集合中位于枚举数当前位置的元素。
    /// </summary>
    property Current: T read get_Current;
  end;

  //-------------namespace: System.Resources----------------
  /// <summary>
  ///   提供用于将资源写入一个输出文件或流的基本功能。
  /// </summary>
  [DNTypeName('System.Resources.IResourceWriter')]
  DNIResourceWriter = interface(DNIDisposable)
  ['{E97AA6E5-595E-31C3-82F0-688FB91954C6}']
  { methods } 

    /// <summary>
    ///   添加类型的已命名的资源  到要写入的资源的列表。
    /// </summary>
    procedure AddResource(name: string; value: string); overload;
    /// <summary>
    ///   添加类型的已命名的资源  到要写入的资源的列表。
    /// </summary>
    procedure AddResource(name: string; value: DNObject); overload;
    /// <summary>
    ///   将 8 位无符号的整数数组作为命名资源添加到要写入的资源的列表。
    /// </summary>
    procedure AddResource(name: string; value: TArray<Byte>); overload;
    /// <summary>
    ///   关闭基础资源文件或流，并确保所有数据写入该文件。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   将通过添加的所有资源都写入  方法写入输出文件或流。
    /// </summary>
    procedure Generate;

  end;

  //-------------namespace: System.Security.Cryptography----------------
  /// <summary>
  ///   定义加密转换的基本操作。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.ICryptoTransform')]
  DNICryptoTransform = interface(DNIDisposable)
  ['{8ABAD867-F515-3CF6-BB62-5F0C88B3BB11}']
  { getter & setter } 

    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   转换输入的字节数组的指定的区域，并将转换结果复制到输出字节数组的指定区域。
    /// </summary>
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    /// <summary>
    ///   转换指定的字节数组的指定的区域。
    /// </summary>
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;

  { propertys } 

    /// <summary>
    ///   获取输入块大小。
    /// </summary>
    property InputBlockSize: Int32 read get_InputBlockSize;
    /// <summary>
    ///   获取输出块大小。
    /// </summary>
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    /// <summary>
    ///   获取一个值，该值指示是否可以转换多个块。
    /// </summary>
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    /// <summary>
    ///   获取一个值，该值指示是否可重复使用当前转换。
    /// </summary>
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   定义由值类型或类实现的通用方法，旨在创建特定于类型的方法以确定实例的质量。
  /// </summary>
  [DNTypeName('System.IEquatable`1')]
  DNIEquatable<T> = interface(DNObject)
  ['{D8C49BA7-BBAC-3BE5-8E80-A1E4303A61C0}']
  { methods } 

    function Equals(other: T): Boolean;

  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   提供一种机制，用于检索对象以控制格式化。
  /// </summary>
  [DNTypeName('System.IFormatProvider')]
  DNIFormatProvider = interface(DNObject)
  ['{C8CB1DED-2814-396A-9CC0-473CA49779CC}']
  { methods } 

    /// <summary>
    ///   返回一个对象，提供的指定类型的格式设置服务。
    /// </summary>
    function GetFormat(formatType: DNType): DNObject;

  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   提供一种功能，用以将对象的值格式化为字符串表示形式。
  /// </summary>
  [DNTypeName('System.IFormattable')]
  DNIFormattable = interface(DNObject)
  ['{9A604EE7-E630-3DED-9444-BAAE247075AB}']
  { methods } 

    /// <summary>
    ///   使用指定格式对当前实例的值设置格式。
    /// </summary>
    function ToString(format: string; formatProvider: DNIFormatProvider): string;

  end;

  //-------------namespace: System.IO----------------
  DNBinaryReaderClass = interface(DNObjectClass)
  ['{FB66FC58-6A6C-4568-B12D-D48317EF49C3}']
  { constructors } 

    /// <summary>
    ///   基于所指定的流和特定的 UTF-8 编码，初始化  类的新实例。
    /// </summary>
    {class} function init(input: DNStream): DNBinaryReader; overload;
    /// <summary>
    ///   基于所指定的流和特定的字符编码，初始化  类的新实例。
    /// </summary>
    {class} function init(input: DNStream; encoding: DNEncoding): DNBinaryReader; overload;
    /// <summary>
    ///   基于所提供的流和特定的字符编码，初始化  类的新实例，有选择性的打开流。
    /// </summary>
    {class} function init(input: DNStream; encoding: DNEncoding; leaveOpen: Boolean): DNBinaryReader; overload;

  end;

  /// <summary>
  ///   用特定的编码将基元数据类型读作二进制值。
  /// </summary>
  [DNTypeName('System.IO.BinaryReader')]
  DNBinaryReader = interface(DNObject)
  ['{2484AFDA-7B47-3CD7-97B5-951F5C6AB5B6}']
  { getter & setter } 

    function get_BaseStream: DNStream;

  { methods } 

    /// <summary>
    ///   关闭当前阅读器及基础流。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   返回下一个可用的字符，并且不提升字节或字符的位置。
    /// </summary>
    function PeekChar: Int32;
    /// <summary>
    ///   从基础流中读取字符，并根据所使用的  和从流中读取的特定字符，提升流的当前位置。
    /// </summary>
    function Read: Int32; overload;
    /// <summary>
    ///   从当前流中读取  值，并使该流的当前位置提升 1 个字节。
    /// </summary>
    function ReadBoolean: Boolean;
    /// <summary>
    ///   从当前流中读取下一个字节，并使流的当前位置提升 1 个字节。
    /// </summary>
    function ReadByte: Byte;
    /// <summary>
    ///   从此流中读取 1 个有符号字节，并使流的当前位置提升 1 个字节。
    /// </summary>
    function ReadSByte: SByte;
    /// <summary>
    ///   从当前流中读取下一个字符，并根据所使用的  和从流中读取的特定字符，提升流的当前位置。
    /// </summary>
    function ReadChar: Char;
    /// <summary>
    ///   从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。
    /// </summary>
    function ReadInt16: Int16;
    /// <summary>
    ///   使用 Little-Endian 编码从当前流中读取 2 字节无符号整数，并将流的位置提升 2 个字节。
    /// </summary>
    function ReadUInt16: UInt16;
    /// <summary>
    ///   从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。
    /// </summary>
    function ReadInt32: Int32;
    /// <summary>
    ///   从当前流中读取 4 字节无符号整数并使流的当前位置提升 4 个字节。
    /// </summary>
    function ReadUInt32: UInt32;
    /// <summary>
    ///   从当前流中读取 8 字节有符号整数，并使流的当前位置提升 8 个字节。
    /// </summary>
    function ReadInt64: Int64;
    /// <summary>
    ///   从当前流中读取 8 字节无符号整数并使流的当前位置提升 8 个字节。
    /// </summary>
    function ReadUInt64: UInt64;
    /// <summary>
    ///   从当前流中读取 4 字节浮点值，并使流的当前位置提升 4 个字节。
    /// </summary>
    function ReadSingle: Single;
    /// <summary>
    ///   从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节。
    /// </summary>
    function ReadDouble: Double;
    /// <summary>
    ///   从当前流中读取十进制数值，并将该流的当前位置提升十六个字节。
    /// </summary>
    function ReadDecimal: DNDecimal;
    /// <summary>
    ///   从当前流中读取一个字符串。
    ///               字符串有长度前缀，一次 7 位地被编码为整数。
    /// </summary>
    function ReadString: string;
    /// <summary>
    ///   从字符数组中的指定点开始，从流中读取指定的字符数。
    /// </summary>
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   从当前流中读取指定的字符数，并以字符数组的形式返回数据，然后根据所使用的  和从流中读取的特定字符，将当前位置前移。
    /// </summary>
    function ReadChars(count: Int32): TArray<Char>;
    /// <summary>
    ///   从字节数组中的指定点开始，从流中读取指定的字节数。
    /// </summary>
    function Read(buffer: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   从当前流中读取指定的字节数以写入字节数组中，并将当前位置前移相应的字节数。
    /// </summary>
    function ReadBytes(count: Int32): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   公开对  的基础流的访问。
    /// </summary>
    property BaseStream: DNStream read get_BaseStream;
  end;

  TDNBinaryReader = class(TDNGenericImport<DNBinaryReaderClass, DNBinaryReader>) end;

  //-------------namespace: System.IO----------------
  DNBinaryWriterClass = interface(DNObjectClass)
  ['{568E972C-EF08-4F40-9447-5558C7A95493}']
  { constructors } 

    /// <summary>
    ///   基于所指定的流和特定的 UTF-8 编码，初始化  类的新实例。
    /// </summary>
    {class} function init(output: DNStream): DNBinaryWriter; overload;
    /// <summary>
    ///   基于所指定的流和特定的字符编码，初始化  类的新实例。
    /// </summary>
    {class} function init(output: DNStream; encoding: DNEncoding): DNBinaryWriter; overload;
    /// <summary>
    ///   基于所提供的流和特定的字符编码，初始化  类的新实例，有选择性的打开流。
    /// </summary>
    {class} function init(output: DNStream; encoding: DNEncoding; leaveOpen: Boolean): DNBinaryWriter; overload;

  end;

  /// <summary>
  ///   将二进制中的基元类型写入流并支持用特定的编码写入字符串。
  /// </summary>
  [DNTypeName('System.IO.BinaryWriter')]
  DNBinaryWriter = interface(DNObject)
  ['{D92CCD03-5C88-3339-8011-46E8B01A2BA8}']
  { getter & setter } 

    function get_BaseStream: DNStream;

  { methods } 

    /// <summary>
    ///   关闭当前  和基础流。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
    /// </summary>
    procedure Flush;
    /// <summary>
    ///   设置当前流中的位置。
    /// </summary>
    function Seek(offset: Int32; origin: DNSeekOrigin): Int64;
    /// <summary>
    ///   将一个字节  值写入当前流，其中 0 表示  ，1 表示 。
    /// </summary>
    procedure Write(value: Boolean); overload;
    /// <summary>
    ///   无符号的字节写入当前流并将流的位置前移一个字节。
    /// </summary>
    procedure Write(value: Byte); overload;
    /// <summary>
    ///   一个有符号的字节写入当前流并将流的位置前移一个字节。
    /// </summary>
    procedure Write(value: SByte); overload;
    /// <summary>
    ///   将写入基础流的字节数组。
    /// </summary>
    procedure Write(buffer: TArray<Byte>); overload;
    /// <summary>
    ///   将写入当前流的字节数组的区域。
    /// </summary>
    procedure Write(buffer: TArray<Byte>; index: Int32; count: Int32); overload;
    /// <summary>
    ///   一个 Unicode 字符写入当前流，并根据所使用的流的当前位置  使用和的特定字符写入到流。
    /// </summary>
    procedure Write(ch: Char); overload;
    /// <summary>
    ///   字符数组写入当前流，并根据流的当前位置向前移动使用和的特定字符写入到流。
    /// </summary>
    procedure Write(chars: TArray<Char>); overload;
    /// <summary>
    ///   将字符数组中的一部分写入到当前流，并根据所使用的流的当前位置  使用并且可能的特定字符写入到流。
    /// </summary>
    procedure Write(chars: TArray<Char>; index: Int32; count: Int32); overload;
    /// <summary>
    ///   8 字节浮点值写入当前流，并将流的位置提升 8 个字节。
    /// </summary>
    procedure Write(value: Double); overload;
    /// <summary>
    ///   将十进制值写入当前流并将流的位置提升十六个字节。
    /// </summary>
    procedure Write(value: DNDecimal); overload;
    /// <summary>
    ///   双字节有符号的整数写入当前流，并将流的位置提升 2 个字节。
    /// </summary>
    procedure Write(value: Int16); overload;
    /// <summary>
    ///   双字节无符号的整数写入当前流，并将流的位置提升 2 个字节。
    /// </summary>
    procedure Write(value: UInt16); overload;
    /// <summary>
    ///   四字节有符号的整数写入当前流，并将流的位置提升 4 个字节。
    /// </summary>
    procedure Write(value: Int32); overload;
    /// <summary>
    ///   将 4 字节无符号的整数写入到当前流并将流的位置提升 4 个字节。
    /// </summary>
    procedure Write(value: UInt32); overload;
    /// <summary>
    ///   8 字节有符号的整数写入当前流，并将流的位置提升 8 个字节。
    /// </summary>
    procedure Write(value: Int64); overload;
    /// <summary>
    ///   八字节无符号的整数写入当前流，并将流的位置提升 8 个字节。
    /// </summary>
    procedure Write(value: UInt64); overload;
    /// <summary>
    ///   4 字节浮点值写入当前流，并将流的位置提升 4 个字节。
    /// </summary>
    procedure Write(value: Single); overload;
    /// <summary>
    ///   将长度前缀的字符串写入此流的当前编码的 , ，并根据所使用的编码的流和特定的字符写入到流的当前位置向前移动。
    /// </summary>
    procedure Write(value: string); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取基础流的 。
    /// </summary>
    property BaseStream: DNStream read get_BaseStream;
  end;

  TDNBinaryWriter = class(TDNGenericImport<DNBinaryWriterClass, DNBinaryWriter>) end;

  //-------------namespace: System.IO----------------
  DNDirectoryClass = interface(DNObjectClass)
  ['{DCD33C4A-7134-471A-B191-1815E883D4EA}']
  { static methods } 

    /// <summary>
    ///   检索指定路径的父目录，包括绝对路径和相对路径。
    /// </summary>
    {class} function GetParent(path: string): DNDirectoryInfo;
    /// <summary>
    ///   在指定路径中创建所有目录和子目录，除非它们已经存在。
    /// </summary>
    {class} function CreateDirectory(path: string): DNDirectoryInfo; overload;
    /// <summary>
    ///   在指定路径中创建所有目录（除非已存在），并应用指定的 Windows 安全性。
    /// </summary>
    {class} function CreateDirectory(path: string; directorySecurity: DNDirectorySecurity): DNDirectoryInfo; overload;
    /// <summary>
    ///   确定给定路径是否引用磁盘上的现有目录。
    /// </summary>
    {class} function Exists(path: string): Boolean;
    /// <summary>
    ///   为指定的文件或目录设置创建日期和时间。
    /// </summary>
    {class} procedure SetCreationTime(path: string; creationTime: DNDateTime);
    /// <summary>
    ///   设置指定文件或目录的创建日期和时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} procedure SetCreationTimeUtc(path: string; creationTimeUtc: DNDateTime);
    /// <summary>
    ///   获取目录的创建日期和时间。
    /// </summary>
    {class} function GetCreationTime(path: string): DNDateTime;
    /// <summary>
    ///   获取目录创建的日期和时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} function GetCreationTimeUtc(path: string): DNDateTime;
    /// <summary>
    ///   设置上次写入目录的日期和时间。
    /// </summary>
    {class} procedure SetLastWriteTime(path: string; lastWriteTime: DNDateTime);
    /// <summary>
    ///   设置上次写入某个目录的日期和时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} procedure SetLastWriteTimeUtc(path: string; lastWriteTimeUtc: DNDateTime);
    /// <summary>
    ///   返回上次写入指定文件或目录的日期和时间。
    /// </summary>
    {class} function GetLastWriteTime(path: string): DNDateTime;
    /// <summary>
    ///   返回上次写入指定文件或目录的日期和时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} function GetLastWriteTimeUtc(path: string): DNDateTime;
    /// <summary>
    ///   设置上次访问指定文件或目录的日期和时间。
    /// </summary>
    {class} procedure SetLastAccessTime(path: string; lastAccessTime: DNDateTime);
    /// <summary>
    ///   设置上次访问指定文件或目录的日期和时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} procedure SetLastAccessTimeUtc(path: string; lastAccessTimeUtc: DNDateTime);
    /// <summary>
    ///   返回上次访问指定文件或目录的日期和时间。
    /// </summary>
    {class} function GetLastAccessTime(path: string): DNDateTime;
    /// <summary>
    ///   返回上次访问指定文件或目录的日期和时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} function GetLastAccessTimeUtc(path: string): DNDateTime;
    /// <summary>
    ///   获取  对象，该对象封装指定目录的访问控制列表 (ACL) 项。
    /// </summary>
    {class} function GetAccessControl(path: string): DNDirectorySecurity; overload;
    /// <summary>
    ///   获取一个  对象，它封装指定目录的指定类型的访问控制列表 (ACL) 条目。
    /// </summary>
    {class} function GetAccessControl(path: string; includeSections: DNAccessControlSections): DNDirectorySecurity; overload;
    /// <summary>
    ///   将  对象描述的访问控制列表 (ACL) 项应用于指定的目录。
    /// </summary>
    {class} procedure SetAccessControl(path: string; directorySecurity: DNDirectorySecurity);
    /// <summary>
    ///   返回指定目录中与指定的搜索模式匹配的文件的名称（包含其路径）。
    /// </summary>
    {class} function GetFiles(path: string; searchPattern: string): TArray<string>; overload;
    /// <summary>
    ///   返回指定目录中与指定的搜索模式匹配的文件的名称（包含其路径），使用某个值确定是否要搜索子目录。
    /// </summary>
    {class} function GetFiles(path: string; searchPattern: string; searchOption: DNSearchOption): TArray<string>; overload;
    /// <summary>
    ///   返回指定目录中与指定的搜索模式匹配的子目录的名称（包括其路径）。
    /// </summary>
    {class} function GetDirectories(path: string; searchPattern: string): TArray<string>; overload;
    /// <summary>
    ///   返回与在指定目录中的指定搜索模式匹配的子目录的名称（包括其路径），还可以选择地搜索子目录。
    /// </summary>
    {class} function GetDirectories(path: string; searchPattern: string; searchOption: DNSearchOption): TArray<string>; overload;
    /// <summary>
    ///   返回与指定路径中搜索模式匹配的文件名和目录名的数组。
    /// </summary>
    {class} function GetFileSystemEntries(path: string; searchPattern: string): TArray<string>; overload;
    /// <summary>
    ///   返回指定路径中与搜索模式匹配的所有文件名和目录名的数组，还可以搜索子目录。
    /// </summary>
    {class} function GetFileSystemEntries(path: string; searchPattern: string; searchOption: DNSearchOption): TArray<string>; overload;
    /// <summary>
    ///   返回指定路径中与搜索模式匹配的目录名的可枚举集合。
    /// </summary>
    {class} function EnumerateDirectories(path: string; searchPattern: string): DNIEnumerable<string>; overload;
    /// <summary>
    ///   返回指定路径中与搜索模式匹配的目录名称的可枚举集合，还可以搜索子目录。
    /// </summary>
    {class} function EnumerateDirectories(path: string; searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<string>; overload;
    /// <summary>
    ///   返回指定路径中与搜索模式匹配的文件名称的可枚举集合。
    /// </summary>
    {class} function EnumerateFiles(path: string; searchPattern: string): DNIEnumerable<string>; overload;
    /// <summary>
    ///   返回指定路径中与搜索模式匹配的文件名称的可枚举集合，还可以搜索子目录。
    /// </summary>
    {class} function EnumerateFiles(path: string; searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<string>; overload;
    /// <summary>
    ///   返回指定路径中与搜索模式匹配的文件名和目录名的可枚举集合。
    /// </summary>
    {class} function EnumerateFileSystemEntries(path: string; searchPattern: string): DNIEnumerable<string>; overload;
    /// <summary>
    ///   返回指定路径中与搜索模式匹配的文件名称和目录名的可枚举集合，还可以搜索子目录。
    /// </summary>
    {class} function EnumerateFileSystemEntries(path: string; searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<string>; overload;
    /// <summary>
    ///   检索此计算机上格式为 "<drive letter>:\" 的逻辑驱动器的名称。
    /// </summary>
    {class} function GetLogicalDrives: TArray<string>;
    /// <summary>
    ///   返回指定路径的卷信息、根信息或两者同时返回。
    /// </summary>
    {class} function GetDirectoryRoot(path: string): string;
    /// <summary>
    ///   获取应用程序的当前工作目录。
    /// </summary>
    {class} function GetCurrentDirectory: string;
    /// <summary>
    ///   将应用程序的当前工作目录设置为指定的目录。
    /// </summary>
    {class} procedure SetCurrentDirectory(path: string);
    /// <summary>
    ///   将文件或目录及其内容移到新位置。
    /// </summary>
    {class} procedure Move(sourceDirName: string; destDirName: string);
    /// <summary>
    ///   从指定路径删除空目录。
    /// </summary>
    {class} procedure Delete(path: string); overload;
    /// <summary>
    ///   删除指定的目录，并删除该目录中的所有子目录和文件（如果表示）。
    /// </summary>
    {class} procedure Delete(path: string; recursive: Boolean); overload;
    /// <summary>
    ///   返回指定路径中的所有文件和子目录的名称。
    /// </summary>
    {class} function GetFileSystemEntries(path: string): TArray<string>; overload;
    /// <summary>
    ///   返回指定路径中的文件名的可枚举集合。
    /// </summary>
    {class} function EnumerateFiles(path: string): DNIEnumerable<string>; overload;
    /// <summary>
    ///   返回指定路径中的文件名和目录名的可枚举集合。
    /// </summary>
    {class} function EnumerateFileSystemEntries(path: string): DNIEnumerable<string>; overload;
    /// <summary>
    ///   返回指定目录中文件的名称（包括其路径）。
    /// </summary>
    {class} function GetFiles(path: string): TArray<string>; overload;
    /// <summary>
    ///   返回指定目录中的子目录的名称（包括其路径）。
    /// </summary>
    {class} function GetDirectories(path: string): TArray<string>; overload;
    /// <summary>
    ///   返回指定路径中的目录名的可枚举集合。
    /// </summary>
    {class} function EnumerateDirectories(path: string): DNIEnumerable<string>; overload;

  end;

  /// <summary>
  ///   公开用于通过目录和子目录进行创建、移动和枚举的静态方法。
  ///               无法继承此类。
  ///            
  ///              若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
  /// </summary>
  [DNTypeName('System.IO.Directory')]
  DNDirectory = interface(DNObject)
  ['{0EBD869E-64BF-3682-80BB-690A70114BE0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNDirectory = class(TDNGenericImport<DNDirectoryClass, DNDirectory>) end;

  //-------------namespace: System.IO----------------
  DNDriveInfoClass = interface(DNObjectClass)
  ['{15528DE8-06FB-4372-BE54-8EEF85BE3394}']
  { constructors } 

    /// <summary>
    ///   提供对有关指定驱动器的信息的访问。
    /// </summary>
    {class} function init(driveName: string): DNDriveInfo;

  { static methods } 

    /// <summary>
    ///   检索计算机上的所有逻辑驱动器的驱动器名称。
    /// </summary>
    {class} function GetDrives: TArray<DNDriveInfo>;

  end;

  /// <summary>
  ///   提供对有关驱动器的信息的访问。
  /// </summary>
  [DNTypeName('System.IO.DriveInfo')]
  DNDriveInfo = interface(DNObject)
  ['{B7C87928-B1AD-35CE-AA58-3DC3AAB7AC67}']
  { getter & setter } 

    function get_Name: string;
    function get_DriveType: DNDriveType;
    function get_DriveFormat: string;
    function get_IsReady: Boolean;
    function get_AvailableFreeSpace: Int64;
    function get_TotalFreeSpace: Int64;
    function get_TotalSize: Int64;
    function get_RootDirectory: DNDirectoryInfo;
    function get_VolumeLabel: string;
    procedure set_VolumeLabel(value: string);

  { methods } 

    /// <summary>
    ///   将驱动器名称作为字符串返回。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取驱动器的名称，如 C:\。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取驱动器类型，如 CD-ROM、可移动、网络或固定。
    /// </summary>
    property DriveType: DNDriveType read get_DriveType;
    /// <summary>
    ///   获取文件系统的名称，例如 NTFS 或 FAT32。
    /// </summary>
    property DriveFormat: string read get_DriveFormat;
    /// <summary>
    ///   获取一个指示驱动器是否已准备好的值。
    /// </summary>
    property IsReady: Boolean read get_IsReady;
    /// <summary>
    ///   指示驱动器上的可用空闲空间总量（以字节为单位）。
    /// </summary>
    property AvailableFreeSpace: Int64 read get_AvailableFreeSpace;
    /// <summary>
    ///   获取驱动器上的可用空闲空间总量（以字节为单位）。
    /// </summary>
    property TotalFreeSpace: Int64 read get_TotalFreeSpace;
    /// <summary>
    ///   获取驱动器上存储空间的总大小（以字节为单位）。
    /// </summary>
    property TotalSize: Int64 read get_TotalSize;
    /// <summary>
    ///   获取驱动器的根目录。
    /// </summary>
    property RootDirectory: DNDirectoryInfo read get_RootDirectory;
    /// <summary>
    ///   获取或设置驱动器的卷标。
    /// </summary>
    property VolumeLabel: string read get_VolumeLabel write set_VolumeLabel;
  end;

  TDNDriveInfo = class(TDNGenericImport<DNDriveInfoClass, DNDriveInfo>) end;

  //-------------namespace: System.IO----------------
  DNFileClass = interface(DNObjectClass)
  ['{41771616-C82A-4C90-B71A-908A3E67EDAB}']
  { static methods } 

    /// <summary>
    ///   打开现有 UTF-8 编码文本文件以进行读取。
    /// </summary>
    {class} function OpenText(path: string): DNStreamReader;
    /// <summary>
    ///   创建或打开用于写入 UTF-8 编码文本的文件。
    /// </summary>
    {class} function CreateText(path: string): DNStreamWriter;
    /// <summary>
    ///   创建一个 ，它将 UTF-8 编码文本追加到现有文件或新文件（如果指定文件不存在）。
    /// </summary>
    {class} function AppendText(path: string): DNStreamWriter;
    /// <summary>
    ///   将现有文件复制到新文件。
    ///               不允许覆盖同名的文件。
    /// </summary>
    {class} procedure Copy(sourceFileName: string; destFileName: string); overload;
    /// <summary>
    ///   将现有文件复制到新文件。
    ///               允许覆盖同名的文件。
    /// </summary>
    {class} procedure Copy(sourceFileName: string; destFileName: string; overwrite: Boolean); overload;
    /// <summary>
    ///   在指定路径中创建或覆盖文件。
    /// </summary>
    {class} function Create(path: string): DNFileStream; overload;
    /// <summary>
    ///   创建或覆盖指定的文件。
    /// </summary>
    {class} function Create(path: string; bufferSize: Int32): DNFileStream; overload;
    /// <summary>
    ///   创建或覆盖指定的文件，指定缓冲区大小和一个描述如何创建或覆盖该文件的  值。
    /// </summary>
    {class} function Create(path: string; bufferSize: Int32; options: DNFileOptions): DNFileStream; overload;
    /// <summary>
    ///   创建或覆盖具有指定的缓冲区大小、文件选项和文件安全性的指定文件。
    /// </summary>
    {class} function Create(path: string; bufferSize: Int32; options: DNFileOptions; fileSecurity: DNFileSecurity): DNFileStream; overload;
    /// <summary>
    ///   删除指定的文件。
    /// </summary>
    {class} procedure Delete(path: string);
    /// <summary>
    ///   确定指定的文件是否存在。
    /// </summary>
    {class} function Exists(path: string): Boolean;
    /// <summary>
    ///   以读/写访问权限打开指定路径上的 。
    /// </summary>
    {class} function Open(path: string; mode: DNFileMode): DNFileStream; overload;
    /// <summary>
    ///   以指定的模式和访问权限打开指定路径上的 。
    /// </summary>
    {class} function Open(path: string; mode: DNFileMode; access: DNFileAccess): DNFileStream; overload;
    /// <summary>
    ///   打开指定路径上的 ，具有带读、写或读/写访问的指定模式和指定的共享选项。
    /// </summary>
    {class} function Open(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNFileStream; overload;
    /// <summary>
    ///   设置创建该文件的日期和时间。
    /// </summary>
    {class} procedure SetCreationTime(path: string; creationTime: DNDateTime);
    /// <summary>
    ///   设置文件创建的日期和时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} procedure SetCreationTimeUtc(path: string; creationTimeUtc: DNDateTime);
    /// <summary>
    ///   返回指定文件或目录的创建日期和时间。
    /// </summary>
    {class} function GetCreationTime(path: string): DNDateTime;
    /// <summary>
    ///   返回指定的文件或目录的创建日期及时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} function GetCreationTimeUtc(path: string): DNDateTime;
    /// <summary>
    ///   设置上次访问指定文件的日期和时间。
    /// </summary>
    {class} procedure SetLastAccessTime(path: string; lastAccessTime: DNDateTime);
    /// <summary>
    ///   设置上次访问指定的文件的日期和时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} procedure SetLastAccessTimeUtc(path: string; lastAccessTimeUtc: DNDateTime);
    /// <summary>
    ///   返回上次访问指定文件或目录的日期和时间。
    /// </summary>
    {class} function GetLastAccessTime(path: string): DNDateTime;
    /// <summary>
    ///   返回上次访问指定的文件或目录的日期及时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} function GetLastAccessTimeUtc(path: string): DNDateTime;
    /// <summary>
    ///   设置上次写入指定文件的日期和时间。
    /// </summary>
    {class} procedure SetLastWriteTime(path: string; lastWriteTime: DNDateTime);
    /// <summary>
    ///   设置上次写入指定的文件的日期和时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} procedure SetLastWriteTimeUtc(path: string; lastWriteTimeUtc: DNDateTime);
    /// <summary>
    ///   返回上次写入指定文件或目录的日期和时间。
    /// </summary>
    {class} function GetLastWriteTime(path: string): DNDateTime;
    /// <summary>
    ///   返回上次写入指定的文件或目录的日期和时间，其格式为协调通用时 (UTC)。
    /// </summary>
    {class} function GetLastWriteTimeUtc(path: string): DNDateTime;
    /// <summary>
    ///   获取在此路径上的文件的 。
    /// </summary>
    {class} function GetAttributes(path: string): DNFileAttributes;
    /// <summary>
    ///   获取指定路径上的文件的指定 。
    /// </summary>
    {class} procedure SetAttributes(path: string; fileAttributes: DNFileAttributes);
    /// <summary>
    ///   获取一个  对象，它封装指定文件的访问控制列表 (ACL) 条目。
    /// </summary>
    {class} function GetAccessControl(path: string): DNFileSecurity; overload;
    /// <summary>
    ///   获取一个  对象，封装特定文件的指定类型的访问控制列表 (ACL) 项。
    /// </summary>
    {class} function GetAccessControl(path: string; includeSections: DNAccessControlSections): DNFileSecurity; overload;
    /// <summary>
    ///   将  对象描述的访问控制列表 (ACL) 项应用于指定的文件。
    /// </summary>
    {class} procedure SetAccessControl(path: string; fileSecurity: DNFileSecurity);
    /// <summary>
    ///   打开现有文件以进行读取。
    /// </summary>
    {class} function OpenRead(path: string): DNFileStream;
    /// <summary>
    ///   打开一个现有文件或创建一个新文件以进行写入。
    /// </summary>
    {class} function OpenWrite(path: string): DNFileStream;
    /// <summary>
    ///   打开一个文本文件，读取文件的所有行，然后关闭该文件。
    /// </summary>
    {class} function ReadAllText(path: string): string; overload;
    /// <summary>
    ///   打开一个文件，使用指定的编码读取文件的所有行，然后关闭该文件。
    /// </summary>
    {class} function ReadAllText(path: string; encoding: DNEncoding): string; overload;
    /// <summary>
    ///   创建一个新文件，向其中写入指定的字符串，然后关闭文件。
    ///               如果目标文件已存在，则覆盖该文件。
    /// </summary>
    {class} procedure WriteAllText(path: string; contents: string); overload;
    /// <summary>
    ///   创建一个新文件，使用指定编码向其中写入指定的字符串，然后关闭文件。
    ///               如果目标文件已存在，则覆盖该文件。
    /// </summary>
    {class} procedure WriteAllText(path: string; contents: string; encoding: DNEncoding); overload;
    /// <summary>
    ///   打开一个二进制文件，将文件的内容读入一个字节数组，然后关闭该文件。
    /// </summary>
    {class} function ReadAllBytes(path: string): TArray<Byte>;
    /// <summary>
    ///   创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。
    ///               如果目标文件已存在，则覆盖该文件。
    /// </summary>
    {class} procedure WriteAllBytes(path: string; bytes: TArray<Byte>);
    /// <summary>
    ///   打开一个文本文件，读取文件的所有行，然后关闭该文件。
    /// </summary>
    {class} function ReadAllLines(path: string): TArray<string>; overload;
    /// <summary>
    ///   打开一个文件，使用指定的编码读取文件的所有行，然后关闭该文件。
    /// </summary>
    {class} function ReadAllLines(path: string; encoding: DNEncoding): TArray<string>; overload;
    /// <summary>
    ///   读取文件的行。
    /// </summary>
    {class} function ReadLines(path: string): DNIEnumerable<string>; overload;
    /// <summary>
    ///   读取具有指定编码的文件的行。
    /// </summary>
    {class} function ReadLines(path: string; encoding: DNEncoding): DNIEnumerable<string>; overload;
    /// <summary>
    ///   创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。
    /// </summary>
    {class} procedure WriteAllLines(path: string; contents: TArray<string>); overload;
    /// <summary>
    ///   创建一个新文件，使用指定编码在其中写入指定的字符串数组，然后关闭该文件。
    /// </summary>
    {class} procedure WriteAllLines(path: string; contents: TArray<string>; encoding: DNEncoding); overload;
    {class} procedure WriteAllLines(path: string; contents: DNIEnumerable<string>); overload;
    {class} procedure WriteAllLines(path: string; contents: DNIEnumerable<string>; encoding: DNEncoding); overload;
    /// <summary>
    ///   打开一个文件，向其中追加指定的字符串，然后关闭该文件。
    ///               如果文件不存在，此方法将创建一个文件，将指定的字符串写入文件，然后关闭该文件。
    /// </summary>
    {class} procedure AppendAllText(path: string; contents: string); overload;
    /// <summary>
    ///   将指定的字符串追加到文件中，如果文件还不存在则创建该文件。
    /// </summary>
    {class} procedure AppendAllText(path: string; contents: string; encoding: DNEncoding); overload;
    {class} procedure AppendAllLines(path: string; contents: DNIEnumerable<string>); overload;
    {class} procedure AppendAllLines(path: string; contents: DNIEnumerable<string>; encoding: DNEncoding); overload;
    /// <summary>
    ///   将指定文件移到新位置，提供要指定新文件名的选项。
    /// </summary>
    {class} procedure Move(sourceFileName: string; destFileName: string);
    /// <summary>
    ///   使用其他文件的内容替换指定文件的内容，这一过程将删除原始文件，并创建被替换文件的备份。
    /// </summary>
    {class} procedure Replace(sourceFileName: string; destinationFileName: string; destinationBackupFileName: string); overload;
    /// <summary>
    ///   用其他文件的内容替换指定文件的内容，这一过程将删除原始文件，并创建被替换文件的备份，还可以忽略合并错误。
    /// </summary>
    {class} procedure Replace(sourceFileName: string; destinationFileName: string; destinationBackupFileName: string; ignoreMetadataErrors: Boolean); overload;
    /// <summary>
    ///   使用  方法解密由当前帐户加密的文件。
    /// </summary>
    {class} procedure Decrypt(path: string);
    /// <summary>
    ///   将某个文件加密，使得只有加密该文件的帐户才能将其解密。
    /// </summary>
    {class} procedure Encrypt(path: string);

  end;

  /// <summary>
  ///   提供用于创建、复制、删除、移动和打开单一文件的静态方法，并协助创建  对象。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.IO.File')]
  DNFile = interface(DNObject)
  ['{2A96793E-4CF3-3976-A893-B66886D89A03}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNFile = class(TDNGenericImport<DNFileClass, DNFile>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  /// <summary>
  ///   启用独立存储区和应用程序域和程序集的证据之间的比较。
  /// </summary>
  [DNTypeName('System.IO.IsolatedStorage.INormalizeForIsolatedStorage')]
  DNINormalizeForIsolatedStorage = interface(DNObject)
  ['{F5006531-D4D7-319E-9EDA-9B4B65AD8D4F}']
  { methods } 

    /// <summary>
    ///   当在派生类中重写返回规范化在其调用的对象的副本。
    /// </summary>
    function Normalize: DNObject;

  end;

  //-------------namespace: System.IO----------------
  DNPathClass = interface(DNObjectClass)
  ['{8CBD39AD-D2AD-4F44-AB8B-E609A3818826}']
  { static methods } 

    /// <summary>
    ///   返回指定路径字符串的目录信息。
    /// </summary>
    {class} function GetDirectoryName(path: string): string;
    /// <summary>
    ///   获取包含不允许在路径名中使用的字符的数组。
    /// </summary>
    {class} function GetInvalidPathChars: TArray<Char>;
    /// <summary>
    ///   获取包含不允许在文件名中使用的字符的数组。
    /// </summary>
    {class} function GetInvalidFileNameChars: TArray<Char>;
    /// <summary>
    ///   返回指定的路径字符串的扩展名。
    /// </summary>
    {class} function GetExtension(path: string): string;
    /// <summary>
    ///   返回指定路径字符串的绝对路径。
    /// </summary>
    {class} function GetFullPath(path: string): string;
    /// <summary>
    ///   返回指定路径字符串的文件名和扩展名。
    /// </summary>
    {class} function GetFileName(path: string): string;
    /// <summary>
    ///   返回不具有扩展名的指定路径字符串的文件名。
    /// </summary>
    {class} function GetFileNameWithoutExtension(path: string): string;
    /// <summary>
    ///   获取指定路径的根目录信息。
    /// </summary>
    {class} function GetPathRoot(path: string): string;
    /// <summary>
    ///   返回当前用户的临时文件夹的路径。
    /// </summary>
    {class} function GetTempPath: string;
    /// <summary>
    ///   返回随机文件夹名或文件名。
    /// </summary>
    {class} function GetRandomFileName: string;
    /// <summary>
    ///   在磁盘上创建磁唯一命名的零字节的临时文件并返回该文件的完整路径。
    /// </summary>
    {class} function GetTempFileName: string;
    /// <summary>
    ///   确定路径是否包括文件扩展名。
    /// </summary>
    {class} function HasExtension(path: string): Boolean;
    /// <summary>
    ///   获取一个值，该值指示指定的路径字符串是否包含根。
    /// </summary>
    {class} function IsPathRooted(path: string): Boolean;
    /// <summary>
    ///   将字符串数组组合成一个路径。
    /// </summary>
    {class} function Combine(paths: TArray<string>): string; overload;
    /// <summary>
    ///   更改路径字符串的扩展名。
    /// </summary>
    {class} function ChangeExtension(path: string; extension: string): string;
    /// <summary>
    ///   将两个字符串组合成一个路径。
    /// </summary>
    {class} function Combine(path1: string; path2: string): string; overload;
    /// <summary>
    ///   将三个字符串组合成一个路径。
    /// </summary>
    {class} function Combine(path1: string; path2: string; path3: string): string; overload;
    /// <summary>
    ///   将四个字符串组合成一个路径。
    /// </summary>
    {class} function Combine(path1: string; path2: string; path3: string; path4: string): string; overload;

  end;

  /// <summary>
  ///   对包含文件或目录路径信息的  实例执行操作。
  ///               这些操作是以跨平台的方式执行的。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.IO.Path')]
  DNPath = interface(DNObject)
  ['{B7AE0CAE-979E-3EBF-B33F-8F121DAFD78E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNPath = class(TDNGenericImport<DNPathClass, DNPath>) end;

  //-------------namespace: System.IO----------------
  DNUnmanagedMemoryAccessorClass = interface(DNObjectClass)
  ['{86CEA5AF-781E-4184-B304-B006ED590F9E}']
  { constructors } 

    /// <summary>
    ///   使用指定的缓冲区、偏移量和容量初始化  类的新实例。
    /// </summary>
    {class} function init(buffer: DNSafeBuffer; offset: Int64; capacity: Int64): DNUnmanagedMemoryAccessor; overload;
    /// <summary>
    ///   使用指定的缓冲区、偏移量、容量和访问权限初始化  类的新实例。
    /// </summary>
    {class} function init(buffer: DNSafeBuffer; offset: Int64; capacity: Int64; access: DNFileAccess): DNUnmanagedMemoryAccessor; overload;

  end;

  /// <summary>
  ///   提供从托管代码随机访问非托管内存块的能力。
  /// </summary>
  [DNTypeName('System.IO.UnmanagedMemoryAccessor')]
  DNUnmanagedMemoryAccessor = interface(DNObject)
  ['{4C94CD7B-C020-34C8-A104-9C86AE0B3335}']
  { getter & setter } 

    function get_Capacity: Int64;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;

  { methods } 

    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   从访问器读取一个布尔值。
    /// </summary>
    function ReadBoolean(position: Int64): Boolean;
    /// <summary>
    ///   从访问器读取一个字节值。
    /// </summary>
    function ReadByte(position: Int64): Byte;
    /// <summary>
    ///   从访问器读取一个小数值。
    /// </summary>
    function ReadDecimal(position: Int64): DNDecimal;
    /// <summary>
    ///   将一个布尔值写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: Boolean); overload;
    /// <summary>
    ///   将一个字节值写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: Byte); overload;
    /// <summary>
    ///   将一个小数值写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: DNDecimal); overload;
    /// <summary>
    ///   从访问器读取一个字符。
    /// </summary>
    function ReadChar(position: Int64): Char;
    /// <summary>
    ///   从访问器读取一个 16 位整数。
    /// </summary>
    function ReadInt16(position: Int64): Int16;
    /// <summary>
    ///   从访问器读取一个 32 位整数。
    /// </summary>
    function ReadInt32(position: Int64): Int32;
    /// <summary>
    ///   从访问器读取一个 64 位整数。
    /// </summary>
    function ReadInt64(position: Int64): Int64;
    /// <summary>
    ///   从访问器读取一个单精度浮点值。
    /// </summary>
    function ReadSingle(position: Int64): Single;
    /// <summary>
    ///   从访问器读取一个双精度浮点值。
    /// </summary>
    function ReadDouble(position: Int64): Double;
    /// <summary>
    ///   从访问器读取一个 8 位带符号整数。
    /// </summary>
    function ReadSByte(position: Int64): SByte;
    /// <summary>
    ///   从访问器读取一个 16 位无符号整数。
    /// </summary>
    function ReadUInt16(position: Int64): UInt16;
    /// <summary>
    ///   从访问器读取一个 32 位无符号整数。
    /// </summary>
    function ReadUInt32(position: Int64): UInt32;
    /// <summary>
    ///   从访问器读取一个 64 位无符号整数。
    /// </summary>
    function ReadUInt64(position: Int64): UInt64;
    /// <summary>
    ///   将一个字符写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: Char); overload;
    /// <summary>
    ///   将一个 16 位整数写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: Int16); overload;
    /// <summary>
    ///   将一个 32 位整数写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: Int32); overload;
    /// <summary>
    ///   将一个 64 位整数写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: Int64); overload;
    /// <summary>
    ///   将一个  写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: Single); overload;
    /// <summary>
    ///   将一个  值写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: Double); overload;
    /// <summary>
    ///   将一个 8 位整数写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: SByte); overload;
    /// <summary>
    ///   将一个 16 位无符号整数写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: UInt16); overload;
    /// <summary>
    ///   将一个 32 位无符号整数写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: UInt32); overload;
    /// <summary>
    ///   将一个 64 位无符号整数写入访问器。
    /// </summary>
    procedure Write(position: Int64; value: UInt64); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取访问器的容量。
    /// </summary>
    property Capacity: Int64 read get_Capacity;
    /// <summary>
    ///   确定访问器是否可读。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   确定访问器是否可写。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
  end;

  TDNUnmanagedMemoryAccessor = class(TDNGenericImport<DNUnmanagedMemoryAccessorClass, DNUnmanagedMemoryAccessor>) end;

  //-------------namespace: System----------------
  /// <summary>
  ///   定义基于推送的通知的提供程序。
  /// </summary>
  [DNTypeName('System.IObservable`1')]
  DNIObservable<T> = interface(DNObject)
  ['{77D444A0-2C02-3905-95B0-C8472428A426}']
  { methods } 

    function Subscribe(observer: DNIObserver<T>): DNIDisposable;

  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   提供用于接收基于推送的通知的机制。
  /// </summary>
  [DNTypeName('System.IObserver`1')]
  DNIObserver<T> = interface(DNObject)
  ['{4A56B314-BB5D-3AF3-94A0-2AEE2D46D190}']
  { methods } 

    procedure OnNext(value: T);
    /// <summary>
    ///   通知观察者提供程序遇到错误情况。
    /// </summary>
    procedure OnError(error: DNException);
    /// <summary>
    ///   通知观察者提供程序已完成发送基于推送的通知。
    /// </summary>
    procedure OnCompleted;

  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   定义进度更新的提供程序。
  /// </summary>
  [DNTypeName('System.IProgress`1')]
  DNIProgress<T> = interface(DNObject)
  ['{8085FDF6-F705-333C-ABF8-57C1AB36DB20}']
  { methods } 

    procedure Report(value: T);

  end;

  //-------------namespace: System----------------
  /// <summary>
  ///   定义用于检索服务对象的机制；也即，向其他对象提供自定义支持的对象。
  /// </summary>
  [DNTypeName('System.IServiceProvider')]
  DNIServiceProvider = interface(DNObject)
  ['{8F10F540-7F5D-3F37-8D79-1E0AEB074AA0}']
  { methods } 

    /// <summary>
    ///   获取指定类型的服务对象。
    /// </summary>
    function GetService(serviceType: DNType): DNObject;

  end;

  //-------------namespace: System----------------
  DNLocalDataStoreSlotClass = interface(DNObjectClass)
  ['{5361A136-9245-4AFC-BD9B-46BFA3759769}']
  end;

  /// <summary>
  ///   封装内存槽以存储本地数据。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.LocalDataStoreSlot')]
  DNLocalDataStoreSlot = interface(DNObject)
  ['{E95E800A-CBA4-3613-821D-6D6EF3BCBF6B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNLocalDataStoreSlot = class(TDNGenericImport<DNLocalDataStoreSlotClass, DNLocalDataStoreSlot>) end;

  //-------------namespace: System----------------
  DNMarshalByRefObjectClass = interface(DNObjectClass)
  ['{B43E944A-6904-4FF7-8B3F-3858AFF9343A}']
  end;

  /// <summary>
  ///   在支持远程处理的应用程序中，允许跨应用程序域边界访问对象。
  /// </summary>
  [DNTypeName('System.MarshalByRefObject')]
  DNMarshalByRefObject = interface(DNObject)
  ['{14B542C6-1C5A-3869-B8F8-FEEFD7B29D09}']
  { methods } 

    /// <summary>
    ///   检索当前生存期服务对象，用于控制此实例的生存期策略。
    /// </summary>
    function GetLifetimeService: DNObject;
    /// <summary>
    ///   获取生存期服务对象来控制此实例的生存期策略。
    /// </summary>
    function InitializeLifetimeService: DNObject;
    /// <summary>
    ///   创建包含所有生成代理用于与远程对象进行通信所需的相关信息的对象。
    /// </summary>
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMarshalByRefObject = class(TDNGenericImport<DNMarshalByRefObjectClass, DNMarshalByRefObject>) end;

  //-------------namespace: Microsoft.Win32----------------
  DNRegistryKeyClass = interface(DNMarshalByRefObjectClass)
  ['{F0E5BD64-FDB5-4957-A681-0FD3BDF9AEF8}']
  { static methods } 

    /// <summary>
    ///   打开一个新，表示具有指定的视图的本地计算机上请求的项。
    /// </summary>
    {class} function OpenBaseKey(hKey: DNRegistryHive; view: DNRegistryView): DNRegistryKey;
    /// <summary>
    ///   打开一个新  表示远程计算机上请求的项。
    /// </summary>
    {class} function OpenRemoteBaseKey(hKey: DNRegistryHive; machineName: string): DNRegistryKey; overload;
    /// <summary>
    ///   打开一个新的注册表项，它使用指定的视图在远程计算机上表示请求的项。
    /// </summary>
    {class} function OpenRemoteBaseKey(hKey: DNRegistryHive; machineName: string; view: DNRegistryView): DNRegistryKey; overload;
    /// <summary>
    ///   根据指定的句柄创建注册表项。
    /// </summary>
    {class} function FromHandle(handle: DNSafeRegistryHandle): DNRegistryKey; overload;
    /// <summary>
    ///   利用指定的句柄和注册表视图设置创建注册表项。
    /// </summary>
    {class} function FromHandle(handle: DNSafeRegistryHandle; view: DNRegistryView): DNRegistryKey; overload;

  end;

  /// <summary>
  ///   表示 Windows 注册表中的项级节点。
  ///               此类是注册表封装。
  /// </summary>
  [DNTypeName('Microsoft.Win32.RegistryKey')]
  DNRegistryKey = interface(DNMarshalByRefObject)
  ['{2C8FA9BD-CBE4-3223-B592-41B5A22FB820}']
  { getter & setter } 

    function get_SubKeyCount: Int32;
    function get_View: DNRegistryView;
    function get_Handle: DNSafeRegistryHandle;
    function get_ValueCount: Int32;
    function get_Name: string;

  { methods } 

    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   检索此项的字符串表示形式。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   关闭该项，如果其内容已修改，则将其刷新到磁盘。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   将指定的打开注册表项的全部特性写到注册表中。
    /// </summary>
    procedure Flush;
    /// <summary>
    ///   创建一个新子项或打开一个现有子项以进行写访问。
    /// </summary>
    function CreateSubKey(subkey: string): DNRegistryKey; overload;
    /// <summary>
    ///   使用指定的权限检查选项创建一个新子项或打开一个现有子项以进行写访问。
    /// </summary>
    function CreateSubKey(subkey: string; permissionCheck: DNRegistryKeyPermissionCheck): DNRegistryKey; overload;
    /// <summary>
    ///   创建一个子项或打开子项以进行写访问，使用指定的权限检查和注册表选项。
    /// </summary>
    function CreateSubKey(subkey: string; permissionCheck: DNRegistryKeyPermissionCheck; options: DNRegistryOptions): DNRegistryKey; overload;
    /// <summary>
    ///   创建一个新子项或打开具有指定访问权限的现有子项。
    ///            
    ///              可以开始于 .NET Framework 4.6
    /// </summary>
    function CreateSubKey(subkey: string; writable: Boolean): DNRegistryKey; overload;
    /// <summary>
    ///   创建一个新子项或打开具有指定访问权限的现有子项。
    ///            
    ///              可以开始于 .NET Framework 4.6
    /// </summary>
    function CreateSubKey(subkey: string; writable: Boolean; options: DNRegistryOptions): DNRegistryKey; overload;
    /// <summary>
    ///   使用指定的权限检查选项和注册表安全性创建一个新子项或打开一个现有子项以进行写访问。
    /// </summary>
    function CreateSubKey(subkey: string; permissionCheck: DNRegistryKeyPermissionCheck; registrySecurity: DNRegistrySecurity): DNRegistryKey; overload;
    /// <summary>
    ///   使用指定的权限检查选项、注册表选项和注册表安全性，创建或打开一个用于写访问的子项。
    /// </summary>
    function CreateSubKey(subkey: string; permissionCheck: DNRegistryKeyPermissionCheck; registryOptions: DNRegistryOptions; registrySecurity: DNRegistrySecurity): DNRegistryKey; overload;
    /// <summary>
    ///   删除指定子项。
    /// </summary>
    procedure DeleteSubKey(subkey: string); overload;
    /// <summary>
    ///   删除指定的子项，并指定在找不到该子项时是否引发异常。
    /// </summary>
    procedure DeleteSubKey(subkey: string; throwOnMissingSubKey: Boolean); overload;
    /// <summary>
    ///   递归删除子项和任何子级子项。
    /// </summary>
    procedure DeleteSubKeyTree(subkey: string); overload;
    /// <summary>
    ///   以递归方式删除指定的子项和任何子级子项，并指定在找不到子项时是否引发异常。
    /// </summary>
    procedure DeleteSubKeyTree(subkey: string; throwOnMissingSubKey: Boolean); overload;
    /// <summary>
    ///   从此项中删除指定值。
    /// </summary>
    procedure DeleteValue(name: string); overload;
    /// <summary>
    ///   从此项中删除指定的值，并指定在找不到该值时是否引发异常。
    /// </summary>
    procedure DeleteValue(name: string; throwOnMissingValue: Boolean); overload;
    /// <summary>
    ///   检索指定的子项，并指定是否要应用于密钥写访问权限。
    /// </summary>
    function OpenSubKey(name: string; writable: Boolean): DNRegistryKey; overload;
    /// <summary>
    ///   检索指定的子项以进行读取或读/写访问。
    /// </summary>
    function OpenSubKey(name: string; permissionCheck: DNRegistryKeyPermissionCheck): DNRegistryKey; overload;
    /// <summary>
    ///   检索具有指定名称的子项。
    ///            
    ///              可以开始于 .NET Framework 4.6
    /// </summary>
    function OpenSubKey(name: string; rights: DNRegistryRights): DNRegistryKey; overload;
    /// <summary>
    ///   检索指定的子项以进行读取或读/写访问，请求指定的访问权限。
    /// </summary>
    function OpenSubKey(name: string; permissionCheck: DNRegistryKeyPermissionCheck; rights: DNRegistryRights): DNRegistryKey; overload;
    /// <summary>
    ///   以只读方式检索子项。
    /// </summary>
    function OpenSubKey(name: string): DNRegistryKey; overload;
    /// <summary>
    ///   检索包含所有子项名称的字符串数组。
    /// </summary>
    function GetSubKeyNames: TArray<string>;
    /// <summary>
    ///   检索包含与此项关联的所有值名称的字符串数组。
    /// </summary>
    function GetValueNames: TArray<string>;
    /// <summary>
    ///   检索与指定名称关联的值。
    ///               返回如果注册表中不存在的名称/值对。
    /// </summary>
    function GetValue(name: string): DNObject; overload;
    /// <summary>
    ///   检索与指定名称关联的值。
    ///               如果未找到名称，则返回你提供的默认值。
    /// </summary>
    function GetValue(name: string; defaultValue: DNObject): DNObject; overload;
    /// <summary>
    ///   检索与指定的名称和检索选项关联的值。
    ///               如果未找到名称，则返回你提供的默认值。
    /// </summary>
    function GetValue(name: string; defaultValue: DNObject; options: DNRegistryValueOptions): DNObject; overload;
    /// <summary>
    ///   检索与指定名称关联的值的注册表数据类型。
    /// </summary>
    function GetValueKind(name: string): DNRegistryValueKind;
    /// <summary>
    ///   设置指定的名称/值对。
    /// </summary>
    procedure SetValue(name: string; value: DNObject); overload;
    /// <summary>
    ///   使用指定的注册表数据类型设置注册表项中的名称/值对的值。
    /// </summary>
    procedure SetValue(name: string; value: DNObject; valueKind: DNRegistryValueKind); overload;
    /// <summary>
    ///   返回当前注册表项的访问控制安全性。
    /// </summary>
    function GetAccessControl: DNRegistrySecurity; overload;
    /// <summary>
    ///   返回当前注册表项的访问控制安全性的指定部分。
    /// </summary>
    function GetAccessControl(includeSections: DNAccessControlSections): DNRegistrySecurity; overload;
    /// <summary>
    ///   向现有注册表项应用 Windows 访问控制安全性。
    /// </summary>
    procedure SetAccessControl(registrySecurity: DNRegistrySecurity);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   检索当前项的子项计数。
    /// </summary>
    property SubKeyCount: Int32 read get_SubKeyCount;
    /// <summary>
    ///   获取用于创建注册表项的视图。
    /// </summary>
    property View: DNRegistryView read get_View;
    /// <summary>
    ///   获取对象，表示注册表项当前对象所封装。
    /// </summary>
    property Handle: DNSafeRegistryHandle read get_Handle;
    /// <summary>
    ///   检索项中值的计数。
    /// </summary>
    property ValueCount: Int32 read get_ValueCount;
    /// <summary>
    ///   检索项的名称。
    /// </summary>
    property Name: string read get_Name;
  end;

  TDNRegistryKey = class(TDNGenericImport<DNRegistryKeyClass, DNRegistryKey>) end;

  //-------------namespace: System----------------
  DNAppDomainClass = interface(DNMarshalByRefObjectClass)
  ['{63E029AB-968D-4134-8448-695EFE9E27F5}']
  { static getter & setter } 

    {class} function get_CurrentDomain: DNAppDomain;
    {class} function get_MonitoringIsEnabled: Boolean;
    {class} procedure set_MonitoringIsEnabled(value: Boolean);
    {class} function get_MonitoringSurvivedProcessMemorySize: Int64;

  { static methods } 

    /// <summary>
    ///   卸载指定的应用程序域。
    /// </summary>
    {class} procedure Unload(domain: DNAppDomain);
    /// <summary>
    ///   使用所提供的证据创建具有给定名称的新应用程序域。
    /// </summary>
    {class} function CreateDomain(friendlyName: string; securityInfo: DNEvidence): DNAppDomain; overload;
    /// <summary>
    ///   使用指定的名称新建应用程序域。
    /// </summary>
    {class} function CreateDomain(friendlyName: string): DNAppDomain; overload;
    /// <summary>
    ///   使用指定的名称、证据和应用程序域设置信息创建新的应用程序域。
    /// </summary>
    {class} function CreateDomain(friendlyName: string; securityInfo: DNEvidence; info: DNAppDomainSetup): DNAppDomain; overload;
    /// <summary>
    ///   使用指定的名称、证据、应用程序域设置信息、默认权限集和一组完全受信任的程序集创建新的应用程序域。
    /// </summary>
    {class} function CreateDomain(friendlyName: string; securityInfo: DNEvidence; info: DNAppDomainSetup; grantSet: DNPermissionSet; fullTrustAssemblies: TArray<DNStrongName>): DNAppDomain; overload;
    /// <summary>
    ///   获取当前线程标识符。
    /// </summary>
    {class} function GetCurrentThreadId: Int32;
    /// <summary>
    ///   使用证据、应用程序基路径、相对搜索路径和指定是否向应用程序域中加载程序集的影像副本的形参创建具有给定名称的新应用程序域。
    /// </summary>
    {class} function CreateDomain(friendlyName: string; securityInfo: DNEvidence; appBasePath: string; appRelativeSearchPath: string; shadowCopyFiles: Boolean): DNAppDomain; overload;
    /// <summary>
    ///   使用证据、应用程序基路径、相对搜索路径和指定是否向应用程序域中加载程序集的影像副本的形参创建具有给定名称的新应用程序域。
    ///               指定在初始化应用程序域时调用的回调方法，以及传递回调方法的字符串实参数组。
    /// </summary>
    {class} function CreateDomain(friendlyName: string; securityInfo: DNEvidence; appBasePath: string; appRelativeSearchPath: string; shadowCopyFiles: Boolean; adInit: DNAppDomainInitializer; adInitArgs: TArray<string>): DNAppDomain; overload;

  { static propertys } 

    /// <summary>
    ///   获取当前  的当前应用程序域。
    /// </summary>
    {class} property CurrentDomain: DNAppDomain read get_CurrentDomain;
    /// <summary>
    ///   获取或设置一个值，该值指示是否对当前进程启用应用程序域的 CPU 和内存监视。
    ///               一旦对进程启用了监视，则无法将其禁用。
    /// </summary>
    {class} property MonitoringIsEnabled: Boolean read get_MonitoringIsEnabled write set_MonitoringIsEnabled;
    /// <summary>
    ///   获取进程中所有应用程序域的上次回收后保留下来的总字节数。
    /// </summary>
    {class} property MonitoringSurvivedProcessMemorySize: Int64 read get_MonitoringSurvivedProcessMemorySize;
  end;

  /// <summary>
  ///   表示应用程序域，它是一个应用程序在其中执行的独立环境。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.AppDomain')]
  DNAppDomain = interface(DNMarshalByRefObject)
  ['{5FE0A145-A82B-3D96-94E3-FD214C9D6EB9}']
  { getter & setter } 

    function get_DomainManager: DNAppDomainManager;
    function get_Evidence: DNEvidence;
    function get_FriendlyName: string;
    function get_BaseDirectory: string;
    function get_RelativeSearchPath: string;
    function get_ShadowCopyFiles: Boolean;
    function get_ActivationContext: DNActivationContext;
    function get_ApplicationIdentity: DNApplicationIdentity;
    function get_ApplicationTrust: DNApplicationTrust;
    function get_DynamicDirectory: string;
    function get_SetupInformation: DNAppDomainSetup;
    function get_PermissionSet: DNPermissionSet;
    function get_IsFullyTrusted: Boolean;
    function get_IsHomogenous: Boolean;
    function get_Id: Int32;
    function get_MonitoringTotalProcessorTime: DNTimeSpan;
    function get_MonitoringTotalAllocatedMemorySize: Int64;
    function get_MonitoringSurvivedMemorySize: Int64;

  { methods } 

    /// <summary>
    ///   以指定名称和访问模式定义动态程序集。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess): DNAssemblyBuilder; overload;
    /// <summary>
    ///   使用指定名称、访问模式和存储目录定义动态程序集。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string): DNAssemblyBuilder; overload;
    /// <summary>
    ///   使用指定名称、访问模式和证据定义动态程序集。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; evidence: DNEvidence): DNAssemblyBuilder; overload;
    /// <summary>
    ///   使用指定名称、访问模式和权限请求定义动态程序集。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    /// <summary>
    ///   使用指定名称、访问模式、存储目录和证据定义动态程序集。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence): DNAssemblyBuilder; overload;
    /// <summary>
    ///   使用指定名称、访问模式、存储目录和权限请求定义动态程序集。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    /// <summary>
    ///   使用指定名称、访问模式、证据和权限请求定义动态程序集。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    /// <summary>
    ///   使用指定名称、访问模式、存储目录、证据和权限请求定义动态程序集。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    /// <summary>
    ///   使用指定名称、访问模式、存储目录、证据、权限请求和同步选项定义动态程序集。
    /// </summary>
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet; isSynchronized: Boolean): DNAssemblyBuilder; overload;
    /// <summary>
    ///   创建在指定程序集中定义的指定类型的新实例。
    /// </summary>
    function CreateInstance(assemblyName: string; typeName: string): DNObjectHandle; overload;
    /// <summary>
    ///   创建在指定程序集文件中定义的指定类型的新实例。
    /// </summary>
    function CreateInstanceFrom(assemblyFile: string; typeName: string): DNObjectHandle; overload;
    /// <summary>
    ///   创建在指定程序集中定义的指定类型的新实例。
    ///               形参指定激活特性数组。
    /// </summary>
    function CreateInstance(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   创建在指定程序集文件中定义的指定类型的新实例。
    /// </summary>
    function CreateInstanceFrom(assemblyFile: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   创建在指定程序集中定义的指定类型的新实例。
    ///               形参指定联编程序、绑定标志、构造函数实参、特定于区域性的信息，这些信息用于解释实参、激活特性和授权，以创建类型。
    /// </summary>
    function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    /// <summary>
    ///   创建在指定程序集文件中定义的指定类型的新实例。
    /// </summary>
    function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    /// <summary>
    ///   在给定  的情况下加载 。
    /// </summary>
    function Load(assemblyRef: DNAssemblyName): DNAssembly; overload;
    /// <summary>
    ///   在给定其显示名称的情况下加载 。
    /// </summary>
    function Load(assemblyString: string): DNAssembly; overload;
    /// <summary>
    ///   加载带有基于通用对象文件格式 (COFF) 的图像的 ，该图像包含已发出的 。
    /// </summary>
    function Load(rawAssembly: TArray<Byte>): DNAssembly; overload;
    /// <summary>
    ///   加载带有基于通用对象文件格式 (COFF) 的图像的 ，该图像包含已发出的 。
    ///               还加载表示  的符号的原始字节。
    /// </summary>
    function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNAssembly; overload;
    /// <summary>
    ///   加载带有基于通用对象文件格式 (COFF) 的图像的 ，该图像包含已发出的 。
    ///               还加载表示  的符号的原始字节。
    /// </summary>
    function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>; securityEvidence: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   在给定  的情况下加载 。
    /// </summary>
    function Load(assemblyRef: DNAssemblyName; assemblySecurity: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   在给定其显示名称的情况下加载 。
    /// </summary>
    function Load(assemblyString: string; assemblySecurity: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   执行指定文件中包含的程序集。
    /// </summary>
    function ExecuteAssembly(assemblyFile: string): Int32; overload;
    /// <summary>
    ///   使用指定的证据执行指定文件中包含的程序集。
    /// </summary>
    function ExecuteAssembly(assemblyFile: string; assemblySecurity: DNEvidence): Int32; overload;
    /// <summary>
    ///   使用指定的证据和自变量执行指定文件中包含的程序集。
    /// </summary>
    function ExecuteAssembly(assemblyFile: string; assemblySecurity: DNEvidence; args: TArray<string>): Int32; overload;
    /// <summary>
    ///   获取已加载到此应用程序域的执行上下文中的程序集。
    /// </summary>
    function GetAssemblies: TArray<DNAssembly>;
    /// <summary>
    ///   将指定的目录名追加到专用路径列表。
    /// </summary>
    procedure AppendPrivatePath(path: string);
    /// <summary>
    ///   将指定专用程序集位置的路径重置为空字符串 ("")。
    /// </summary>
    procedure ClearPrivatePath;
    /// <summary>
    ///   将包含影像复制的程序集的目录列表重置为空字符串 ("")。
    /// </summary>
    procedure ClearShadowCopyPath;
    /// <summary>
    ///   确定指定目录路径为对程序集进行影像复制的位置。
    /// </summary>
    procedure SetCachePath(path: string);
    /// <summary>
    ///   为指定的应用程序域属性分配指定值。
    /// </summary>
    procedure SetData(name: string; data: DNObject); overload;
    /// <summary>
    ///   为指定名称获取存储在当前应用程序域中的值。
    /// </summary>
    function GetData(name: string): DNObject;
    /// <summary>
    ///   为此应用程序域确定安全策略级别。
    /// </summary>
    procedure SetAppDomainPolicy(domainPolicy: DNPolicyLevel);
    /// <summary>
    ///   设置在以下情况下要附加到线程的默认主体对象，即当线程在此应用程序域中执行时，如果线程尝试绑定到主体这种情况。
    /// </summary>
    procedure SetThreadPrincipal(principal: DNIPrincipal);
    /// <summary>
    ///   指定在此应用程序域中执行时如果线程尝试绑定到用户，用户和标识对象应如何附加到该线程。
    /// </summary>
    procedure SetPrincipalPolicy(policy: DNPrincipalPolicy);
    /// <summary>
    ///   通过防止创建租约来给予  无限生存期。
    /// </summary>
    function InitializeLifetimeService: DNObject;
    /// <summary>
    ///   在另一个应用程序域中执行代码，该应用程序域由指定的委托标识。
    /// </summary>
    procedure DoCallBack(callBackDelegate: DNCrossAppDomainDelegate);
    /// <summary>
    ///   确定指定目录路径为要进行影像复制的程序集的位置。
    /// </summary>
    procedure SetShadowCopyPath(path: string);
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>; securityContextSource: DNSecurityContextSource): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet; isSynchronized: Boolean; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; isSynchronized: Boolean; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>): DNAssemblyBuilder; overload;
    /// <summary>
    ///   返回应用策略后的程序集显示名称。
    /// </summary>
    function ApplyPolicy(assemblyName: string): string;
    /// <summary>
    ///   创建指定 COM 类型的新实例。
    ///               形参指定文件的名称，该文件包含含有类型和类型名称的程序集。
    /// </summary>
    function CreateComInstanceFrom(assemblyName: string; typeName: string): DNObjectHandle; overload;
    /// <summary>
    ///   创建指定 COM 类型的新实例。
    ///               形参指定文件的名称，该文件包含含有类型和类型名称的程序集。
    /// </summary>
    function CreateComInstanceFrom(assemblyFile: string; typeName: string; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): DNObjectHandle; overload;
    /// <summary>
    ///   创建在指定程序集中定义的指定类型的新实例。
    ///               形参指定联编程序、绑定标志、构造函数实参、用于解释实参的特定于区域性的信息，以及可选激活特性。
    /// </summary>
    function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   创建在指定程序集文件中定义的指定类型的新实例。
    /// </summary>
    function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    /// <summary>
    ///   使用指定的自变量执行指定文件中包含的程序集。
    /// </summary>
    function ExecuteAssembly(assemblyFile: string; args: TArray<string>): Int32; overload;
    /// <summary>
    ///   使用指定的证据、自变量、哈希值和哈希算法执行指定文件中包含的程序集。
    /// </summary>
    function ExecuteAssembly(assemblyFile: string; assemblySecurity: DNEvidence; args: TArray<string>; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): Int32; overload;
    /// <summary>
    ///   使用指定的自变量、哈希值和哈希算法执行指定文件中包含的程序集。
    /// </summary>
    function ExecuteAssembly(assemblyFile: string; args: TArray<string>; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): Int32; overload;
    /// <summary>
    ///   在给定其显示名称的情况下执行程序集。
    /// </summary>
    function ExecuteAssemblyByName(assemblyName: string): Int32; overload;
    /// <summary>
    ///   在给定显示名称的情况下，使用指定证据执行程序集。
    /// </summary>
    function ExecuteAssemblyByName(assemblyName: string; assemblySecurity: DNEvidence): Int32; overload;
    /// <summary>
    ///   在给定其显示名称的情况下，使用指定证据和自变量执行程序集。
    /// </summary>
    function ExecuteAssemblyByName(assemblyName: string; assemblySecurity: DNEvidence; args: TArray<string>): Int32; overload;
    /// <summary>
    ///   在给定显示名称的情况下，使用指定自变量执行程序集。
    /// </summary>
    function ExecuteAssemblyByName(assemblyName: string; args: TArray<string>): Int32; overload;
    /// <summary>
    ///   根据给定的  使用指定的证据和实参执行程序集。
    /// </summary>
    function ExecuteAssemblyByName(assemblyName: DNAssemblyName; assemblySecurity: DNEvidence; args: TArray<string>): Int32; overload;
    /// <summary>
    ///   根据给定的  使用指定的参数执行程序集。
    /// </summary>
    function ExecuteAssemblyByName(assemblyName: DNAssemblyName; args: TArray<string>): Int32; overload;
    /// <summary>
    ///   获取一个字符串表示，包含应用程序域友好名称和任意上下文策略。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回已加载到应用程序域的只反射上下文中的程序集。
    /// </summary>
    function ReflectionOnlyGetAssemblies: TArray<DNAssembly>;
    /// <summary>
    ///   指示此应用程序域是否正在卸载以及公共语言运行时是否正在终止该域包含的对象。
    /// </summary>
    function IsFinalizingForUnload: Boolean;
    /// <summary>
    ///   将指定值分配给指定应用程序域属性，检索该属性时要求调用方具有指定权限。
    /// </summary>
    procedure SetData(name: string; data: DNObject; permission: DNIPermission); overload;
    /// <summary>
    ///   打开影像复制功能。
    /// </summary>
    procedure SetShadowCopyFiles;
    /// <summary>
    ///   建立指定的目录路径，作为存储和访问动态生成的文件的子目录的基目录。
    /// </summary>
    procedure SetDynamicBase(path: string);
    /// <summary>
    ///   创建指定类型的新实例。
    ///               形参指定定义类型的程序集以及类型的名称。
    /// </summary>
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string): DNObject; overload;
    /// <summary>
    ///   创建指定类型的新实例。
    ///               形参指定定义类型的程序集、类型的名称和激活特性的数组。
    /// </summary>
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   创建指定类型的新实例。
    ///               形参指定类型的名称以及查找和创建该类型的方式。
    /// </summary>
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObject; overload;
    /// <summary>
    ///   创建在指定的程序集中定义的指定类型的新实例，指定是否忽略类型名称的大小写，并指定绑定特性和用于选择要创建的类型的联编程序、构造函数的自变量、区域性以及激活特性。
    /// </summary>
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   创建在指定程序集文件中定义的指定类型的新实例。
    /// </summary>
    function CreateInstanceFromAndUnwrap(assemblyName: string; typeName: string): DNObject; overload;
    /// <summary>
    ///   创建在指定程序集文件中定义的指定类型的新实例。
    /// </summary>
    function CreateInstanceFromAndUnwrap(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   创建在指定程序集文件中定义的指定类型的新实例。
    /// </summary>
    function CreateInstanceFromAndUnwrap(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObject; overload;
    /// <summary>
    ///   创建在指定的程序集文件中定义的指定类型的新实例，指定是否忽略类型名称的大小写，并指定绑定特性和用于选择要创建的类型的联编程序、构造函数的自变量、区域性以及激活特性。
    /// </summary>
    function CreateInstanceFromAndUnwrap(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   返回一个值，指示应用程序域是否是进程的默认应用程序域。
    /// </summary>
    function IsDefaultAppDomain: Boolean;
    function GetLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    /// <summary>
    ///   获取当前实例的类型。
    /// </summary>
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获得初始化应用程序域时主机提供的域管理器。
    /// </summary>
    property DomainManager: DNAppDomainManager read get_DomainManager;
    /// <summary>
    ///   获取与该应用程序域关联的 。
    /// </summary>
    property Evidence: DNEvidence read get_Evidence;
    /// <summary>
    ///   获取此应用程序域的友好名称。
    /// </summary>
    property FriendlyName: string read get_FriendlyName;
    /// <summary>
    ///   获取基目录，它由程序集冲突解决程序用来探测程序集。
    /// </summary>
    property BaseDirectory: string read get_BaseDirectory;
    /// <summary>
    ///   获取基目录下的路径，在此程序集冲突解决程序应探测专用程序集。
    /// </summary>
    property RelativeSearchPath: string read get_RelativeSearchPath;
    /// <summary>
    ///   获取应用程序域是否配置为影像副本文件的指示。
    /// </summary>
    property ShadowCopyFiles: Boolean read get_ShadowCopyFiles;
    /// <summary>
    ///   获取当前应用程序域的激活上下文。
    /// </summary>
    property ActivationContext: DNActivationContext read get_ActivationContext;
    /// <summary>
    ///   获得应用程序域中的应用程序标识。
    /// </summary>
    property ApplicationIdentity: DNApplicationIdentity read get_ApplicationIdentity;
    /// <summary>
    ///   获取说明授予应用程序的权限以及应用程序是否拥有允许其运行的信任级别的信息。
    /// </summary>
    property ApplicationTrust: DNApplicationTrust read get_ApplicationTrust;
    /// <summary>
    ///   获取目录，它由程序集冲突解决程序用来探测动态创建的程序集。
    /// </summary>
    property DynamicDirectory: string read get_DynamicDirectory;
    /// <summary>
    ///   获取此实例的应用程序域配置信息。
    /// </summary>
    property SetupInformation: DNAppDomainSetup read get_SetupInformation;
    /// <summary>
    ///   获取沙盒应用程序域的权限集。
    /// </summary>
    property PermissionSet: DNPermissionSet read get_PermissionSet;
    /// <summary>
    ///   获取一个值，该值指示加载到当前应用程序域的程序集是否是以完全信任方式执行的。
    /// </summary>
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    /// <summary>
    ///   获取一个值，该值指示当前应用程序域是否拥有一个为加载到该应用程序域的所有程序集授予的权限集。
    /// </summary>
    property IsHomogenous: Boolean read get_IsHomogenous;
    /// <summary>
    ///   获得一个整数，该整数唯一标识进程中的应用程序域。
    /// </summary>
    property Id: Int32 read get_Id;
    /// <summary>
    ///   获取自从进程启动后所有线程在当前应用程序域中执行时所使用的总处理器时间。
    /// </summary>
    property MonitoringTotalProcessorTime: DNTimeSpan read get_MonitoringTotalProcessorTime;
    /// <summary>
    ///   获取自从创建应用程序域后由应用程序域进行的所有内存分配的总大小（以字节为单位，不扣除已回收的内存）。
    /// </summary>
    property MonitoringTotalAllocatedMemorySize: Int64 read get_MonitoringTotalAllocatedMemorySize;
    /// <summary>
    ///   获取上次回收后保留下来的，已知由当前应用程序域引用的字节数。
    /// </summary>
    property MonitoringSurvivedMemorySize: Int64 read get_MonitoringSurvivedMemorySize;
  end;

  TDNAppDomain = class(TDNGenericImport<DNAppDomainClass, DNAppDomain>) end;

  //-------------namespace: System----------------
  DNAppDomainManagerClass = interface(DNMarshalByRefObjectClass)
  ['{E4D19A86-5CA1-4631-BD91-E63B09C7EA6C}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNAppDomainManager;

  end;

  /// <summary>
  ///   提供非托管宿主的托管等效项。
  /// </summary>
  [DNTypeName('System.AppDomainManager')]
  DNAppDomainManager = interface(DNMarshalByRefObject)
  ['{C03880A5-0B5E-39AD-954A-CE0DCBD5EF7D}']
  { getter & setter } 

    function get_InitializationFlags: DNAppDomainManagerInitializationOptions;
    procedure set_InitializationFlags(value: DNAppDomainManagerInitializationOptions);
    function get_ApplicationActivator: DNApplicationActivator;
    function get_HostSecurityManager: DNHostSecurityManager;
    function get_HostExecutionContextManager: DNHostExecutionContextManager;
    function get_EntryAssembly: DNAssembly;

  { methods } 

    /// <summary>
    ///   返回一个新的或现有的应用程序域。
    /// </summary>
    function CreateDomain(friendlyName: string; securityInfo: DNEvidence; appDomainInfo: DNAppDomainSetup): DNAppDomain;
    /// <summary>
    ///   初始化新的应用程序域。
    /// </summary>
    procedure InitializeNewDomain(appDomainInfo: DNAppDomainSetup);
    /// <summary>
    ///   指示是否允许应用程序域中执行指定的操作。
    /// </summary>
    function CheckSecuritySettings(state: DNSecurityState): Boolean;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取自定义应用程序域管理器初始化标志。
    /// </summary>
    property InitializationFlags: DNAppDomainManagerInitializationOptions read get_InitializationFlags write set_InitializationFlags;
    /// <summary>
    ///   获取应用程序激活器处理的外接程序和基于清单的应用程序域激活。
    /// </summary>
    property ApplicationActivator: DNApplicationActivator read get_ApplicationActivator;
    /// <summary>
    ///   获取主机安全管理器来参与安全决策应用程序域。
    /// </summary>
    property HostSecurityManager: DNHostSecurityManager read get_HostSecurityManager;
    /// <summary>
    ///   获取主机管理的执行上下文的数据流的执行上下文管理器。
    /// </summary>
    property HostExecutionContextManager: DNHostExecutionContextManager read get_HostExecutionContextManager;
    /// <summary>
    ///   获取应用程序的入口程序集。
    /// </summary>
    property EntryAssembly: DNAssembly read get_EntryAssembly;
  end;

  TDNAppDomainManager = class(TDNGenericImport<DNAppDomainManagerClass, DNAppDomainManager>) end;

  //-------------namespace: System----------------
  DNContextBoundObjectClass = interface(DNMarshalByRefObjectClass)
  ['{F42CFA99-F164-4CCA-898F-D745CCD7938A}']
  end;

  /// <summary>
  ///   定义所有上下文绑定类的基类。
  /// </summary>
  [DNTypeName('System.ContextBoundObject')]
  DNContextBoundObject = interface(DNMarshalByRefObject)
  ['{7916CBEF-050E-3E39-B83A-5AB9558E72F1}']
  { methods } 

    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNContextBoundObject = class(TDNGenericImport<DNContextBoundObjectClass, DNContextBoundObject>) end;

  //-------------namespace: System.IO----------------
  DNFileSystemInfoClass = interface(DNMarshalByRefObjectClass)
  ['{BD46BE89-6C54-49CF-ABF6-894E2D5E6090}']
  end;

  /// <summary>
  ///   为  和  对象提供基类。
  /// </summary>
  [DNTypeName('System.IO.FileSystemInfo')]
  DNFileSystemInfo = interface(DNMarshalByRefObject)
  ['{1F0E8DB5-8F52-3360-8A47-9D3DC3A5ACAF}']
  { getter & setter } 

    function get_FullName: string;
    function get_Extension: string;
    function get_Name: string;
    function get_Exists: Boolean;
    function get_CreationTime: DNDateTime;
    procedure set_CreationTime(value: DNDateTime);
    function get_CreationTimeUtc: DNDateTime;
    procedure set_CreationTimeUtc(value: DNDateTime);
    function get_LastAccessTime: DNDateTime;
    procedure set_LastAccessTime(value: DNDateTime);
    function get_LastAccessTimeUtc: DNDateTime;
    procedure set_LastAccessTimeUtc(value: DNDateTime);
    function get_LastWriteTime: DNDateTime;
    procedure set_LastWriteTime(value: DNDateTime);
    function get_LastWriteTimeUtc: DNDateTime;
    procedure set_LastWriteTimeUtc(value: DNDateTime);
    function get_Attributes: DNFileAttributes;
    procedure set_Attributes(value: DNFileAttributes);

  { methods } 

    /// <summary>
    ///   删除文件或目录。
    /// </summary>
    procedure Delete;
    /// <summary>
    ///   刷新对象的状态。
    /// </summary>
    procedure Refresh;
    /// <summary>
    ///   设置带有文件名和附加异常信息的  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取目录或文件的完整目录。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   获取表示文件扩展名部分的字符串。
    /// </summary>
    property Extension: string read get_Extension;
    /// <summary>
    ///   对于文件，获取该文件的名称。
    ///               对于目录，如果存在层次结构，则获取层次结构中最后一个目录的名称。
    ///               否则， 属性获取该目录的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取指示文件或目录是否存在的值。
    /// </summary>
    property Exists: Boolean read get_Exists;
    /// <summary>
    ///   获取或设置当前文件或目录的创建时间。
    /// </summary>
    property CreationTime: DNDateTime read get_CreationTime write set_CreationTime;
    /// <summary>
    ///   获取或设置当前文件或目录的创建时间，其格式为协调世界时 (UTC)。
    /// </summary>
    property CreationTimeUtc: DNDateTime read get_CreationTimeUtc write set_CreationTimeUtc;
    /// <summary>
    ///   获取或设置上次访问当前文件或目录的时间。
    /// </summary>
    property LastAccessTime: DNDateTime read get_LastAccessTime write set_LastAccessTime;
    /// <summary>
    ///   获取或设置上次访问当前文件或目录的时间，其格式为协调世界时 (UTC)。
    /// </summary>
    property LastAccessTimeUtc: DNDateTime read get_LastAccessTimeUtc write set_LastAccessTimeUtc;
    /// <summary>
    ///   获取或设置上次写入当前文件或目录的时间。
    /// </summary>
    property LastWriteTime: DNDateTime read get_LastWriteTime write set_LastWriteTime;
    /// <summary>
    ///   获取或设置上次写入当前文件或目录的时间，其格式为协调世界时 (UTC)。
    /// </summary>
    property LastWriteTimeUtc: DNDateTime read get_LastWriteTimeUtc write set_LastWriteTimeUtc;
    /// <summary>
    ///   获取或设置当前文件或目录的特性。
    /// </summary>
    property Attributes: DNFileAttributes read get_Attributes write set_Attributes;
  end;

  TDNFileSystemInfo = class(TDNGenericImport<DNFileSystemInfoClass, DNFileSystemInfo>) end;

  //-------------namespace: System.IO----------------
  DNDirectoryInfoClass = interface(DNFileSystemInfoClass)
  ['{A2323755-707C-4D5C-82C4-349A2F14437D}']
  { constructors } 

    /// <summary>
    ///   初始化指定路径上的  类的新实例。
    /// </summary>
    {class} function init(path: string): DNDirectoryInfo;

  end;

  /// <summary>
  ///   公开用于通过目录和子目录进行创建、移动和枚举的实例方法。
  ///               此类不能被继承。
  ///            
  ///              若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
  /// </summary>
  [DNTypeName('System.IO.DirectoryInfo')]
  DNDirectoryInfo = interface(DNFileSystemInfo)
  ['{40A8B2FA-E055-3F59-8BA6-54C4E35649B5}']
  { getter & setter } 

    function get_Name: string;
    function get_FullName: string;
    function get_Parent: DNDirectoryInfo;
    function get_Exists: Boolean;
    function get_Root: DNDirectoryInfo;
    function get_Extension: string;
    function get_CreationTime: DNDateTime;
    procedure set_CreationTime(value: DNDateTime);
    function get_CreationTimeUtc: DNDateTime;
    procedure set_CreationTimeUtc(value: DNDateTime);
    function get_LastAccessTime: DNDateTime;
    procedure set_LastAccessTime(value: DNDateTime);
    function get_LastAccessTimeUtc: DNDateTime;
    procedure set_LastAccessTimeUtc(value: DNDateTime);
    function get_LastWriteTime: DNDateTime;
    procedure set_LastWriteTime(value: DNDateTime);
    function get_LastWriteTimeUtc: DNDateTime;
    procedure set_LastWriteTimeUtc(value: DNDateTime);
    function get_Attributes: DNFileAttributes;
    procedure set_Attributes(value: DNFileAttributes);

  { methods } 

    /// <summary>
    ///   如果此  为空则将其删除。
    /// </summary>
    procedure Delete; overload;
    /// <summary>
    ///   返回用户所传递的原始路径。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   在指定路径上创建一个或多个子目录。
    ///               指定路径可以是相对于  类的此实例的路径。
    /// </summary>
    function CreateSubdirectory(path: string): DNDirectoryInfo; overload;
    /// <summary>
    ///   使用指定的安全性在指定的路径上创建一个或多个子目录。
    ///               指定路径可以是相对于  类的此实例的路径。
    /// </summary>
    function CreateSubdirectory(path: string; directorySecurity: DNDirectorySecurity): DNDirectoryInfo; overload;
    /// <summary>
    ///   创建目录。
    /// </summary>
    procedure Create; overload;
    /// <summary>
    ///   使用  对象创建目录。
    /// </summary>
    procedure Create(directorySecurity: DNDirectorySecurity); overload;
    /// <summary>
    ///   获取一个  对象，该对象封装当前  对象所描述的目录的访问控制列表 (ACL) 项。
    /// </summary>
    function GetAccessControl: DNDirectorySecurity; overload;
    /// <summary>
    ///   获取一个  对象，该对象封装当前  对象所描述的目录的指定类型的访问控制列表 (ACL) 项。
    /// </summary>
    function GetAccessControl(includeSections: DNAccessControlSections): DNDirectorySecurity; overload;
    /// <summary>
    ///   将  对象所描述的访问控制列表 (ACL) 项应用于当前  对象所描述的目录。
    /// </summary>
    procedure SetAccessControl(directorySecurity: DNDirectorySecurity);
    /// <summary>
    ///   返回当前目录中与给定的搜索模式匹配的文件列表。
    /// </summary>
    function GetFiles(searchPattern: string): TArray<DNFileInfo>; overload;
    /// <summary>
    ///   返回当前目录的文件列表，该列表与给定的搜索模式匹配并且使用某个值确定是否搜索子目录。
    /// </summary>
    function GetFiles(searchPattern: string; searchOption: DNSearchOption): TArray<DNFileInfo>; overload;
    /// <summary>
    ///   返回当前目录的文件列表。
    /// </summary>
    function GetFiles: TArray<DNFileInfo>; overload;
    /// <summary>
    ///   返回当前目录的子目录。
    /// </summary>
    function GetDirectories: TArray<DNDirectoryInfo>; overload;
    /// <summary>
    ///   检索强类型  对象的数组，该数组表示与指定的搜索条件匹配的文件和子目录。
    /// </summary>
    function GetFileSystemInfos(searchPattern: string): TArray<DNFileSystemInfo>; overload;
    /// <summary>
    ///   检索  对象的数组，该数组表示与指定的搜索条件匹配的文件和子目录。
    /// </summary>
    function GetFileSystemInfos(searchPattern: string; searchOption: DNSearchOption): TArray<DNFileSystemInfo>; overload;
    /// <summary>
    ///   返回表示某个目录中所有文件和子目录的强类型  项的数组。
    /// </summary>
    function GetFileSystemInfos: TArray<DNFileSystemInfo>; overload;
    /// <summary>
    ///   返回当前  中与给定搜索条件匹配的目录的数组。
    /// </summary>
    function GetDirectories(searchPattern: string): TArray<DNDirectoryInfo>; overload;
    /// <summary>
    ///   返回当前  中目录的数组，该数组与给定的搜索条件匹配并使用某个值确定是否搜索子目录。
    /// </summary>
    function GetDirectories(searchPattern: string; searchOption: DNSearchOption): TArray<DNDirectoryInfo>; overload;
    /// <summary>
    ///   返回当前目录中目录信息的可枚举集合。
    /// </summary>
    function EnumerateDirectories: DNIEnumerable<DNDirectoryInfo>; overload;
    /// <summary>
    ///   返回与指定的搜索模式匹配的目录信息的可枚举集合。
    /// </summary>
    function EnumerateDirectories(searchPattern: string): DNIEnumerable<DNDirectoryInfo>; overload;
    /// <summary>
    ///   返回与指定的搜索模式和搜索子目录选项匹配的目录信息的可枚举集合。
    /// </summary>
    function EnumerateDirectories(searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<DNDirectoryInfo>; overload;
    /// <summary>
    ///   返回当前目录中的文件信息的可枚举集合。
    /// </summary>
    function EnumerateFiles: DNIEnumerable<DNFileInfo>; overload;
    /// <summary>
    ///   返回与搜索模式匹配的文件信息的可枚举集合。
    /// </summary>
    function EnumerateFiles(searchPattern: string): DNIEnumerable<DNFileInfo>; overload;
    /// <summary>
    ///   返回与指定的搜索模式和搜索子目录选项匹配的文件信息的可枚举集合。
    /// </summary>
    function EnumerateFiles(searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<DNFileInfo>; overload;
    /// <summary>
    ///   返回当前目录中的文件系统信息的可枚举集合。
    /// </summary>
    function EnumerateFileSystemInfos: DNIEnumerable<DNFileSystemInfo>; overload;
    /// <summary>
    ///   返回与指定的搜索模式匹配的文件系统信息的可枚举集合。
    /// </summary>
    function EnumerateFileSystemInfos(searchPattern: string): DNIEnumerable<DNFileSystemInfo>; overload;
    /// <summary>
    ///   返回与指定的搜索模式和搜索子目录选项匹配的文件系统信息的可枚举集合。
    /// </summary>
    function EnumerateFileSystemInfos(searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<DNFileSystemInfo>; overload;
    /// <summary>
    ///   将  实例及其内容移动到新路径。
    /// </summary>
    procedure MoveTo(destDirName: string);
    /// <summary>
    ///   删除  的此实例，指定是否删除子目录和文件。
    /// </summary>
    procedure Delete(recursive: Boolean); overload;
    procedure Refresh;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取此  实例的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取目录的完整路径。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   获取指定的子目录的父目录。
    /// </summary>
    property Parent: DNDirectoryInfo read get_Parent;
    /// <summary>
    ///   获取指示目录是否存在的值。
    /// </summary>
    property Exists: Boolean read get_Exists;
    /// <summary>
    ///   获取目录的根部分。
    /// </summary>
    property Root: DNDirectoryInfo read get_Root;
    property Extension: string read get_Extension;
    property CreationTime: DNDateTime read get_CreationTime write set_CreationTime;
    property CreationTimeUtc: DNDateTime read get_CreationTimeUtc write set_CreationTimeUtc;
    property LastAccessTime: DNDateTime read get_LastAccessTime write set_LastAccessTime;
    property LastAccessTimeUtc: DNDateTime read get_LastAccessTimeUtc write set_LastAccessTimeUtc;
    property LastWriteTime: DNDateTime read get_LastWriteTime write set_LastWriteTime;
    property LastWriteTimeUtc: DNDateTime read get_LastWriteTimeUtc write set_LastWriteTimeUtc;
    property Attributes: DNFileAttributes read get_Attributes write set_Attributes;
  end;

  TDNDirectoryInfo = class(TDNGenericImport<DNDirectoryInfoClass, DNDirectoryInfo>) end;

  //-------------namespace: System.IO----------------
  DNFileInfoClass = interface(DNFileSystemInfoClass)
  ['{8D309281-81E9-43F1-9DB4-4849CCA0B396}']
  { constructors } 

    /// <summary>
    ///   初始化作为文件路径的包装的  类的新实例。
    /// </summary>
    {class} function init(fileName: string): DNFileInfo;

  end;

  /// <summary>
  ///   提供用于创建、复制、删除、移动和打开文件的属性和实例方法，并且帮助创建  对象。
  ///               此类不能被继承。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.IO.FileInfo')]
  DNFileInfo = interface(DNFileSystemInfo)
  ['{D6DFFEAD-0B46-3DED-83DE-1943413B94D5}']
  { getter & setter } 

    function get_Name: string;
    function get_Length: Int64;
    function get_DirectoryName: string;
    function get_Directory: DNDirectoryInfo;
    function get_IsReadOnly: Boolean;
    procedure set_IsReadOnly(value: Boolean);
    function get_Exists: Boolean;
    function get_FullName: string;
    function get_Extension: string;
    function get_CreationTime: DNDateTime;
    procedure set_CreationTime(value: DNDateTime);
    function get_CreationTimeUtc: DNDateTime;
    procedure set_CreationTimeUtc(value: DNDateTime);
    function get_LastAccessTime: DNDateTime;
    procedure set_LastAccessTime(value: DNDateTime);
    function get_LastAccessTimeUtc: DNDateTime;
    procedure set_LastAccessTimeUtc(value: DNDateTime);
    function get_LastWriteTime: DNDateTime;
    procedure set_LastWriteTime(value: DNDateTime);
    function get_LastWriteTimeUtc: DNDateTime;
    procedure set_LastWriteTimeUtc(value: DNDateTime);
    function get_Attributes: DNFileAttributes;
    procedure set_Attributes(value: DNFileAttributes);

  { methods } 

    /// <summary>
    ///   永久删除文件。
    /// </summary>
    procedure Delete;
    /// <summary>
    ///   以字符串形式返回路径。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   获取  对象，该对象封装当前  对象所描述的文件的访问控制列表 (ACL) 项。
    /// </summary>
    function GetAccessControl: DNFileSecurity; overload;
    /// <summary>
    ///   获取一个  对象，该对象封装当前  对象所描述的文件的指定类型的访问控制列表 (ACL) 项。
    /// </summary>
    function GetAccessControl(includeSections: DNAccessControlSections): DNFileSecurity; overload;
    /// <summary>
    ///   将  对象所描述的访问控制列表 (ACL) 项应用于当前  对象所描述的文件。
    /// </summary>
    procedure SetAccessControl(fileSecurity: DNFileSecurity);
    /// <summary>
    ///   创建使用从现有文本文件中读取的 UTF8 编码的 。
    /// </summary>
    function OpenText: DNStreamReader;
    /// <summary>
    ///   创建写入新文本文件的 。
    /// </summary>
    function CreateText: DNStreamWriter;
    /// <summary>
    ///   创建一个 ，它向  的此实例表示的文件追加文本。
    /// </summary>
    function AppendText: DNStreamWriter;
    /// <summary>
    ///   将现有文件复制到新文件，不允许覆盖现有文件。
    /// </summary>
    function CopyTo(destFileName: string): DNFileInfo; overload;
    /// <summary>
    ///   将现有文件复制到新文件，允许覆盖现有文件。
    /// </summary>
    function CopyTo(destFileName: string; overwrite: Boolean): DNFileInfo; overload;
    /// <summary>
    ///   创建文件。
    /// </summary>
    function Create: DNFileStream;
    /// <summary>
    ///   使用  方法解密由当前帐户加密的文件。
    /// </summary>
    procedure Decrypt;
    /// <summary>
    ///   将某个文件加密，使得只有加密该文件的帐户才能将其解密。
    /// </summary>
    procedure Encrypt;
    /// <summary>
    ///   在指定的模式中打开文件。
    /// </summary>
    function Open(mode: DNFileMode): DNFileStream; overload;
    /// <summary>
    ///   用读、写或读/写访问权限在指定模式下打开文件。
    /// </summary>
    function Open(mode: DNFileMode; access: DNFileAccess): DNFileStream; overload;
    /// <summary>
    ///   用读、写或读/写访问权限和指定的共享选项在指定的模式中打开文件。
    /// </summary>
    function Open(mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNFileStream; overload;
    /// <summary>
    ///   创建一个只读的 。
    /// </summary>
    function OpenRead: DNFileStream;
    /// <summary>
    ///   创建一个只写的 。
    /// </summary>
    function OpenWrite: DNFileStream;
    /// <summary>
    ///   将指定文件移到新位置，提供要指定新文件名的选项。
    /// </summary>
    procedure MoveTo(destFileName: string);
    /// <summary>
    ///   使用当前  对象所描述的文件替换指定文件的内容，这一过程将删除原始文件，并创建被替换文件的备份。
    /// </summary>
    function Replace(destinationFileName: string; destinationBackupFileName: string): DNFileInfo; overload;
    /// <summary>
    ///   使用当前  对象所描述的文件替换指定文件的内容，这一过程将删除原始文件，并创建被替换文件的备份。
    ///                还指定是否忽略合并错误。
    /// </summary>
    function Replace(destinationFileName: string; destinationBackupFileName: string; ignoreMetadataErrors: Boolean): DNFileInfo; overload;
    procedure Refresh;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取文件名。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取当前文件的大小（以字节为单位）。
    /// </summary>
    property Length: Int64 read get_Length;
    /// <summary>
    ///   获取表示目录的完整路径的字符串。
    /// </summary>
    property DirectoryName: string read get_DirectoryName;
    /// <summary>
    ///   获取父目录的实例。
    /// </summary>
    property Directory: DNDirectoryInfo read get_Directory;
    /// <summary>
    ///   获取或设置确定当前文件是否为只读的值。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly write set_IsReadOnly;
    /// <summary>
    ///   获取指示文件是否存在的值。
    /// </summary>
    property Exists: Boolean read get_Exists;
    property FullName: string read get_FullName;
    property Extension: string read get_Extension;
    property CreationTime: DNDateTime read get_CreationTime write set_CreationTime;
    property CreationTimeUtc: DNDateTime read get_CreationTimeUtc write set_CreationTimeUtc;
    property LastAccessTime: DNDateTime read get_LastAccessTime write set_LastAccessTime;
    property LastAccessTimeUtc: DNDateTime read get_LastAccessTimeUtc write set_LastAccessTimeUtc;
    property LastWriteTime: DNDateTime read get_LastWriteTime write set_LastWriteTime;
    property LastWriteTimeUtc: DNDateTime read get_LastWriteTimeUtc write set_LastWriteTimeUtc;
    property Attributes: DNFileAttributes read get_Attributes write set_Attributes;
  end;

  TDNFileInfo = class(TDNGenericImport<DNFileInfoClass, DNFileInfo>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  DNIsolatedStorageClass = interface(DNMarshalByRefObjectClass)
  ['{244EEC22-EACD-4EAA-A661-1E62E3552C71}']
  end;

  /// <summary>
  ///   表示必须从中派生所有独立的存储实现的抽象基类。
  /// </summary>
  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorage')]
  DNIsolatedStorage = interface(DNMarshalByRefObject)
  ['{70541B17-BF7E-399B-8D33-2AFA4F5AF395}']
  { getter & setter } 

    function get_MaximumSize: UInt64;
    function get_CurrentSize: UInt64;
    function get_UsedSize: Int64;
    function get_Quota: Int64;
    function get_AvailableFreeSpace: Int64;
    function get_DomainIdentity: DNObject;
    function get_ApplicationIdentity: DNObject;
    function get_AssemblyIdentity: DNObject;
    function get_Scope: DNIsolatedStorageScope;

  { methods } 

    /// <summary>
    ///   当在派生类中重写，将提示用户批准更大的配额大小，以字节为单位的独立存储的。
    /// </summary>
    function IncreaseQuotaTo(newQuotaSize: Int64): Boolean;
    /// <summary>
    ///   当在派生类中重写中删除的单个独立存储区和包含的所有数据。
    /// </summary>
    procedure Remove;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，表示的最大的独立存储的可用空间量。
    ///               当在派生类中重写此值可能需要不同度量单位。
    /// </summary>
    property MaximumSize: UInt64 read get_MaximumSize;
    /// <summary>
    ///   获取一个值，表示独立存储的当前大小。
    /// </summary>
    property CurrentSize: UInt64 read get_CurrentSize;
    /// <summary>
    ///   当在派生类中重写，获取一个值，该值表示用于独立存储的空间量。
    /// </summary>
    property UsedSize: Int64 read get_UsedSize;
    /// <summary>
    ///   当在派生类中重写，获取一个值，表示的最大的独立存储的可用空间量。
    /// </summary>
    property Quota: Int64 read get_Quota;
    /// <summary>
    ///   在派生类中重写时，获取独立存储的可用空间（以字节为单位）。
    /// </summary>
    property AvailableFreeSpace: Int64 read get_AvailableFreeSpace;
    /// <summary>
    ///   获取一个域标识用于作用域确定独立的存储。
    /// </summary>
    property DomainIdentity: DNObject read get_DomainIdentity;
    /// <summary>
    ///   获取一个应用程序标识用于作用域确定独立的存储。
    /// </summary>
    property ApplicationIdentity: DNObject read get_ApplicationIdentity;
    /// <summary>
    ///   获取用于确定独立的存储范围的程序集标识。
    /// </summary>
    property AssemblyIdentity: DNObject read get_AssemblyIdentity;
    /// <summary>
    ///   获取  枚举值，该值指定用于隔离存储区的范围。
    /// </summary>
    property Scope: DNIsolatedStorageScope read get_Scope;
  end;

  TDNIsolatedStorage = class(TDNGenericImport<DNIsolatedStorageClass, DNIsolatedStorage>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  DNIsolatedStorageFileClass = interface(DNIsolatedStorageClass)
  ['{D510256F-A15C-4939-BA40-F7ED500D8130}']
  { static getter & setter } 

    {class} function get_IsEnabled: Boolean;

  { static methods } 

    /// <summary>
    ///   获取对应于应用程序域标识和程序集标识的用户范围的独立的存储。
    /// </summary>
    {class} function GetUserStoreForDomain: DNIsolatedStorageFile;
    /// <summary>
    ///   获取对应于调用代码的程序集标识的用户范围的独立的存储。
    /// </summary>
    {class} function GetUserStoreForAssembly: DNIsolatedStorageFile;
    /// <summary>
    ///   获取对应于调用代码的应用程序标识的用户范围的独立的存储。
    /// </summary>
    {class} function GetUserStoreForApplication: DNIsolatedStorageFile;
    /// <summary>
    ///   通过虚拟主机域中应用程序来获取用户范围的使用的独立的存储。
    /// </summary>
    {class} function GetUserStoreForSite: DNIsolatedStorageFile;
    /// <summary>
    ///   获取对应于应用程序域标识和程序集标识的计算机范围的独立的存储。
    /// </summary>
    {class} function GetMachineStoreForDomain: DNIsolatedStorageFile;
    /// <summary>
    ///   获取对应于调用代码的程序集标识的计算机范围的独立的存储。
    /// </summary>
    {class} function GetMachineStoreForAssembly: DNIsolatedStorageFile;
    /// <summary>
    ///   获取对应于调用代码的应用程序标识的计算机范围的独立的存储。
    /// </summary>
    {class} function GetMachineStoreForApplication: DNIsolatedStorageFile;
    /// <summary>
    ///   获取给定类型的应用程序域和程序集证据的独立的存储范围对应的独立的存储。
    /// </summary>
    {class} function GetStore(scope: DNIsolatedStorageScope; domainEvidenceType: DNType; assemblyEvidenceType: DNType): DNIsolatedStorageFile; overload;
    /// <summary>
    ///   获取对应于给定的应用程序域和程序集的证据对象独立的存储。
    /// </summary>
    {class} function GetStore(scope: DNIsolatedStorageScope; domainIdentity: DNObject; assemblyIdentity: DNObject): DNIsolatedStorageFile; overload;
    /// <summary>
    ///   获取对应于给定的应用程序域和程序集的证据对象和类型的独立的存储。
    /// </summary>
    {class} function GetStore(scope: DNIsolatedStorageScope; domainEvidence: DNEvidence; domainEvidenceType: DNType; assemblyEvidence: DNEvidence; assemblyEvidenceType: DNType): DNIsolatedStorageFile; overload;
    /// <summary>
    ///   获取对应于隔离作用域和应用程序标识对象的独立的存储。
    /// </summary>
    {class} function GetStore(scope: DNIsolatedStorageScope; applicationEvidenceType: DNType): DNIsolatedStorageFile; overload;
    /// <summary>
    ///   获取与给定的应用程序标识对应的独立的存储。
    /// </summary>
    {class} function GetStore(scope: DNIsolatedStorageScope; applicationIdentity: DNObject): DNIsolatedStorageFile; overload;
    /// <summary>
    ///   删除所有标识指定独立的存储范围。
    /// </summary>
    {class} procedure Remove(scope: DNIsolatedStorageScope); overload;
    /// <summary>
    ///   获取枚举器  将存储在独立的存储范围内。
    /// </summary>
    {class} function GetEnumerator(scope: DNIsolatedStorageScope): DNIEnumerator;

  { static propertys } 

    /// <summary>
    ///   获取一个值，该值指示是否启用了独立的存储。
    /// </summary>
    {class} property IsEnabled: Boolean read get_IsEnabled;
  end;

  /// <summary>
  ///   表示包含文件和目录的独立存储区。
  /// </summary>
  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageFile')]
  DNIsolatedStorageFile = interface(DNIsolatedStorage)
  ['{5E45C68A-E894-3B38-AEEE-634540BD0D57}']
  { getter & setter } 

    function get_UsedSize: Int64;
    function get_CurrentSize: UInt64;
    function get_AvailableFreeSpace: Int64;
    function get_Quota: Int64;
    function get_MaximumSize: UInt64;
    function get_DomainIdentity: DNObject;
    function get_ApplicationIdentity: DNObject;
    function get_AssemblyIdentity: DNObject;
    function get_Scope: DNIsolatedStorageScope;

  { methods } 

    /// <summary>
    ///   允许应用程序显式请求更大的配额大小，以字节为单位。
    /// </summary>
    function IncreaseQuotaTo(newQuotaSize: Int64): Boolean;
    /// <summary>
    ///   删除独立的存储范围及其所有内容。
    /// </summary>
    procedure Remove; overload;
    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   删除独立的存储范围中的文件。
    /// </summary>
    procedure DeleteFile(&file: string);
    /// <summary>
    ///   确定指定的路径是否引用到独立存储区中的现有文件。
    /// </summary>
    function FileExists(path: string): Boolean;
    /// <summary>
    ///   确定指定的路径是否引用独立存储区中的现有目录。
    /// </summary>
    function DirectoryExists(path: string): Boolean;
    /// <summary>
    ///   在独立的存储范围内创建一个目录。
    /// </summary>
    procedure CreateDirectory(dir: string);
    /// <summary>
    ///   返回的创建日期和时间的指定的文件或目录。
    /// </summary>
    function GetCreationTime(path: string): DNDateTimeOffset;
    /// <summary>
    ///   返回指定的文件的日期和时间或最后一次访问目录。
    /// </summary>
    function GetLastAccessTime(path: string): DNDateTimeOffset;
    /// <summary>
    ///   返回指定的文件的日期和时间或上次写入目录。
    /// </summary>
    function GetLastWriteTime(path: string): DNDateTimeOffset;
    /// <summary>
    ///   将现有文件复制到新文件。
    /// </summary>
    procedure CopyFile(sourceFileName: string; destinationFileName: string); overload;
    /// <summary>
    ///   将现有文件复制到新的文件，并根据需要覆盖现有文件。
    /// </summary>
    procedure CopyFile(sourceFileName: string; destinationFileName: string; overwrite: Boolean); overload;
    /// <summary>
    ///   将指定的文件移到新位置，并 （可选） 允许您指定新文件名。
    /// </summary>
    procedure MoveFile(sourceFileName: string; destinationFileName: string);
    /// <summary>
    ///   将指定的目录及其内容移到新位置。
    /// </summary>
    procedure MoveDirectory(sourceDirectoryName: string; destinationDirectoryName: string);
    /// <summary>
    ///   删除独立的存储范围中的目录。
    /// </summary>
    procedure DeleteDirectory(dir: string);
    /// <summary>
    ///   枚举根目录下的独立存储区的文件名称。
    /// </summary>
    function GetFileNames: TArray<string>; overload;
    /// <summary>
    ///   获取与搜索模式匹配的文件名。
    /// </summary>
    function GetFileNames(searchPattern: string): TArray<string>; overload;
    /// <summary>
    ///   枚举根目录下的独立存储区的目录。
    /// </summary>
    function GetDirectoryNames: TArray<string>; overload;
    /// <summary>
    ///   枚举独立的存储范围中与给定的搜索模式匹配的目录。
    /// </summary>
    function GetDirectoryNames(searchPattern: string): TArray<string>; overload;
    /// <summary>
    ///   在指定的模式中打开文件。
    /// </summary>
    function OpenFile(path: string; mode: DNFileMode): DNIsolatedStorageFileStream; overload;
    /// <summary>
    ///   具有指定的读/写访问权限在指定的模式中打开一个文件。
    /// </summary>
    function OpenFile(path: string; mode: DNFileMode; access: DNFileAccess): DNIsolatedStorageFileStream; overload;
    /// <summary>
    ///   在指定的模式、 用指定的读/写访问权限和共享权限打开文件。
    /// </summary>
    function OpenFile(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNIsolatedStorageFileStream; overload;
    /// <summary>
    ///   在独立存储区中创建一个文件。
    /// </summary>
    function CreateFile(path: string): DNIsolatedStorageFileStream;
    /// <summary>
    ///   关闭以前打开过与存储区 , ，, ，或 。
    /// </summary>
    procedure Close;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值表示用于独立存储的空间量。
    /// </summary>
    property UsedSize: Int64 read get_UsedSize;
    /// <summary>
    ///   获取独立存储的当前大小。
    /// </summary>
    property CurrentSize: UInt64 read get_CurrentSize;
    /// <summary>
    ///   获取一个值，表示可用于独立存储的可用空间量。
    /// </summary>
    property AvailableFreeSpace: Int64 read get_AvailableFreeSpace;
    /// <summary>
    ///   获取一个值，表示的最大的独立存储的可用空间量。
    /// </summary>
    property Quota: Int64 read get_Quota;
    /// <summary>
    ///   获取一个值，表示的最大配额的限制所建立的限制内独立存储的可用空间量。
    /// </summary>
    property MaximumSize: UInt64 read get_MaximumSize;
    property DomainIdentity: DNObject read get_DomainIdentity;
    property ApplicationIdentity: DNObject read get_ApplicationIdentity;
    property AssemblyIdentity: DNObject read get_AssemblyIdentity;
    property Scope: DNIsolatedStorageScope read get_Scope;
  end;

  TDNIsolatedStorageFile = class(TDNGenericImport<DNIsolatedStorageFileClass, DNIsolatedStorageFile>) end;

  //-------------namespace: System.IO----------------
  DNStreamClass = interface(DNMarshalByRefObjectClass)
  ['{5E7A7A96-5298-4A26-B543-3E7C23BDAD5C}']
  { static methods } 

    /// <summary>
    ///   在指定的  对象周围创建线程安全（同步）包装。
    /// </summary>
    {class} function Synchronized(stream: DNStream): DNStream;

  end;

  /// <summary>
  ///   提供字节序列的一般视图。
  ///               这是一个抽象类。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
  /// </summary>
  [DNTypeName('System.IO.Stream')]
  DNStream = interface(DNMarshalByRefObject)
  ['{E331083B-C22D-3046-8EC7-D222D6BE031F}']
  { getter & setter } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanTimeout: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    /// <summary>
    ///   使用指定的缓冲区大小和取消令牌，从当前流中异步读取字节并将其写入到另一个流中。
    /// </summary>
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
    ///               不直接调用此方法，而应确保流得以正确释放。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   开始异步读操作。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    /// <summary>
    ///   等待挂起的异步读取完成。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    /// <summary>
    ///   开始异步写操作。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    /// <summary>
    ///   结束异步写操作。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    procedure EndWrite(asyncResult: DNIAsyncResult);
    /// <summary>
    ///   将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
    /// </summary>
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   从流中读取一个字节，并将流内的位置向前提升一个字节，或者如果已到达流结尾，则返回 -1。
    /// </summary>
    function ReadByte: Int32;
    /// <summary>
    ///   将一个字节写入流内的当前位置，并将流内的位置向前提升一个字节。
    /// </summary>
    procedure WriteByte(value: Byte);
    /// <summary>
    ///   从当前流中异步读取字节并将其写入到另一个流中。
    /// </summary>
    function CopyToAsync(destination: DNStream): DNTask; overload;
    /// <summary>
    ///   使用指定的缓冲区大小，从当前流中异步读取字节并将其写入到另一流中。
    /// </summary>
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    /// <summary>
    ///   从当前流中读取字节并将其写入到另一流中。
    /// </summary>
    procedure CopyTo(destination: DNStream); overload;
    /// <summary>
    ///   使用指定的缓冲区大小，从当前流中读取字节并将其写入到另一流中。
    /// </summary>
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    /// <summary>
    ///   当在派生类中重写时，将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
    /// </summary>
    procedure Flush;
    /// <summary>
    ///   异步清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。
    /// </summary>
    function FlushAsync: DNTask; overload;
    /// <summary>
    ///   异步清理这个流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。
    /// </summary>
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   将字节序列异步写入当前流，并将流的当前位置提升写入的字节数。
    /// </summary>
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    /// <summary>
    ///   当在派生类中重写时，设置当前流中的位置。
    /// </summary>
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    /// <summary>
    ///   当在派生类中重写时，设置当前流的长度。
    /// </summary>
    procedure SetLength(value: Int64);
    /// <summary>
    ///   当在派生类中重写时，从当前流读取字节序列，并将此流中的位置提升读取的字节数。
    /// </summary>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    /// <summary>
    ///   当在派生类中重写时，向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
    /// </summary>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   当在派生类中重写时，获取指示当前流是否支持读取的值。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   当在派生类中重写时，获取指示当前流是否支持查找功能的值。
    /// </summary>
    property CanSeek: Boolean read get_CanSeek;
    /// <summary>
    ///   获取一个值，该值确定当前流是否可以超时。
    /// </summary>
    property CanTimeout: Boolean read get_CanTimeout;
    /// <summary>
    ///   当在派生类中重写时，获取指示当前流是否支持写入功能的值。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
    /// <summary>
    ///   当在派生类中重写时，获取流长度（以字节为单位）。
    /// </summary>
    property Length: Int64 read get_Length;
    /// <summary>
    ///   当在派生类中重写时，获取或设置当前流中的位置。
    /// </summary>
    property Position: Int64 read get_Position write set_Position;
    /// <summary>
    ///   获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试读取多长时间。
    /// </summary>
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    /// <summary>
    ///   获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试写入多长时间。
    /// </summary>
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNStream = class(TDNGenericImport<DNStreamClass, DNStream>) end;

  //-------------namespace: System.IO----------------
  DNBufferedStreamClass = interface(DNStreamClass)
  ['{BD6C8DAA-83B7-4E7F-B8CD-4A1F41BD5143}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用默认的缓冲区大小为 4096 字节。
    /// </summary>
    {class} function init(stream: DNStream): DNBufferedStream; overload;
    /// <summary>
    ///   新实例初始化  类具有指定的缓冲区大小。
    /// </summary>
    {class} function init(stream: DNStream; bufferSize: Int32): DNBufferedStream; overload;

  end;

  /// <summary>
  ///   添加缓冲层以读取和写入另一个流上的操作。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.IO.BufferedStream')]
  DNBufferedStream = interface(DNStream)
  ['{1500ABC0-1DD4-37DD-985F-82430314C798}']
  { getter & setter } 

    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    /// <summary>
    ///   清除此流的所有缓冲区并导致所有缓冲的数据写入基础设备。
    /// </summary>
    procedure Flush;
    /// <summary>
    ///   异步清理这个流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。
    /// </summary>
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   将字节从当前缓冲的流复制到一个数组。
    /// </summary>
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32;
    /// <summary>
    ///   开始异步读操作。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    /// <summary>
    ///   等待挂起的异步读操作完成。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    /// <summary>
    ///   从基础流中读取一个字节，并返回转换为字节 , ，或如果读取来自流的末尾，则返回-1。
    /// </summary>
    function ReadByte: Int32;
    /// <summary>
    ///   将字节复制到缓冲的流，并使中缓冲的流的当前位置提升写入的字节数。
    /// </summary>
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32);
    /// <summary>
    ///   开始异步写操作。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    /// <summary>
    ///   结束异步写入操作，在 I/O 操作完成之前一直阻止。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    procedure EndWrite(asyncResult: DNIAsyncResult);
    /// <summary>
    ///   将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
    /// </summary>
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   将一个字节写入中缓冲的流的当前位置。
    /// </summary>
    procedure WriteByte(value: Byte);
    /// <summary>
    ///   当前缓冲的流中设置的位置。
    /// </summary>
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    /// <summary>
    ///   设置缓冲的流的长度。
    /// </summary>
    procedure SetLength(value: Int64);
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示当前流是否支持读取。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   获取一个值，该值指示当前流是否支持写入。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
    /// <summary>
    ///   获取一个值，该值指示当前流是否支持查找。
    /// </summary>
    property CanSeek: Boolean read get_CanSeek;
    /// <summary>
    ///   获取流的长度以字节为单位。
    /// </summary>
    property Length: Int64 read get_Length;
    /// <summary>
    ///   获取当前流中的位置。
    /// </summary>
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNBufferedStream = class(TDNGenericImport<DNBufferedStreamClass, DNBufferedStream>) end;

  //-------------namespace: System.IO----------------
  DNFileStreamClass = interface(DNStreamClass)
  ['{272B28A5-FDB2-49FA-A2B2-1E9F4C87E42D}']
  { constructors } 

    /// <summary>
    ///   使用指定的路径和创建模式初始化  类的新实例。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode): DNFileStream; overload;
    /// <summary>
    ///   使用指定的路径、创建模式和读/写权限初始化  类的新实例。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess): DNFileStream; overload;
    /// <summary>
    ///   使用指定的路径、创建模式、读/写权限和共享权限创建  类的新实例。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNFileStream; overload;
    /// <summary>
    ///   用指定的路径、创建模式、读/写及共享权限和缓冲区大小初始化  类的新实例。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32): DNFileStream; overload;
    /// <summary>
    ///   使用指定的路径、创建模式、读/写和共享权限、其他 FileStreams 可以具有的对此文件的访问权限、缓冲区大小和附加文件选项初始化  类的新实例。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32; options: DNFileOptions): DNFileStream; overload;
    /// <summary>
    ///   使用指定的路径、创建模式、读/写和共享权限、缓冲区大小和同步或异步状态初始化  类的新实例。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32; useAsync: Boolean): DNFileStream; overload;
    /// <summary>
    ///   使用指定的路径、创建模式、访问权限和共享权限、缓冲区大小、附加文件选项、访问控制和审核安全初始化  类的新实例。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; rights: DNFileSystemRights; share: DNFileShare; bufferSize: Int32; options: DNFileOptions; fileSecurity: DNFileSecurity): DNFileStream; overload;
    /// <summary>
    ///   使用指定的路径、创建模式、访问权限和共享权限、缓冲区大小和附加文件选项初始化  类的新实例。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; rights: DNFileSystemRights; share: DNFileShare; bufferSize: Int32; options: DNFileOptions): DNFileStream; overload;
    /// <summary>
    ///   使用指定的读/写权限为指定的文件句柄初始化  类的新实例。
    /// </summary>
    {class} function init(handle: IntPtr; access: DNFileAccess): DNFileStream; overload;
    /// <summary>
    ///   使用指定的读/写权限和  实例所属权为指定的文件句柄初始化  类的新实例。
    /// </summary>
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean): DNFileStream; overload;
    /// <summary>
    ///   使用指定的读/写权限、 实例所属权和缓冲区大小为指定的文件句柄初始化  类的新实例。
    /// </summary>
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean; bufferSize: Int32): DNFileStream; overload;
    /// <summary>
    ///   使用指定的读/写权限、 实例所属权、缓冲区大小和同步或异步状态为指定的文件句柄初始化  类的新实例。
    /// </summary>
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean; bufferSize: Int32; isAsync: Boolean): DNFileStream; overload;
    /// <summary>
    ///   使用指定的读/写权限为指定的文件句柄初始化  类的新实例。
    /// </summary>
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess): DNFileStream; overload;
    /// <summary>
    ///   使用指定的读/写权限和缓冲区大小为指定的文件句柄初始化  类的新实例。
    /// </summary>
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess; bufferSize: Int32): DNFileStream; overload;
    /// <summary>
    ///   使用指定的读/写权限、缓冲区大小和同步或异步状态为指定的文件句柄初始化  类的新实例。
    /// </summary>
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess; bufferSize: Int32; isAsync: Boolean): DNFileStream; overload;

  end;

  /// <summary>
  ///   为文件提供 ，既支持同步读写操作，也支持异步读写操作。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.IO.FileStream')]
  DNFileStream = interface(DNStream)
  ['{7F25E491-33BE-31E2-A334-CB506D4EE471}']
  { getter & setter } 

    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_IsAsync: Boolean;
    function get_Length: Int64;
    function get_Name: string;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_Handle: IntPtr;
    function get_SafeFileHandle: DNSafeFileHandle;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    /// <summary>
    ///   清除此流的缓冲区，使得所有缓冲数据都写入到文件中。
    /// </summary>
    procedure Flush; overload;
    /// <summary>
    ///   清除此流的缓冲区，将所有缓冲数据都写入到文件中，并且也清除所有中间文件缓冲区。
    /// </summary>
    procedure Flush(flushToDisk: Boolean); overload;
    /// <summary>
    ///   将该流的长度设置为给定值。
    /// </summary>
    procedure SetLength(value: Int64);
    /// <summary>
    ///   从流中读取字节块并将该数据写入给定缓冲区中。
    /// </summary>
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32;
    /// <summary>
    ///   将该流的当前位置设置为给定值。
    /// </summary>
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    /// <summary>
    ///   将字节块写入文件流。
    /// </summary>
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32);
    /// <summary>
    ///   开始异步读操作。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    function BeginRead(&array: TArray<Byte>; offset: Int32; numBytes: Int32; userCallback: DNAsyncCallback; stateObject: DNObject): DNIAsyncResult;
    /// <summary>
    ///   等待挂起的异步读操作完成。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    /// <summary>
    ///   从文件中读取一个字节，并将读取位置提升一个字节。
    /// </summary>
    function ReadByte: Int32;
    /// <summary>
    ///   开始异步写操作。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    function BeginWrite(&array: TArray<Byte>; offset: Int32; numBytes: Int32; userCallback: DNAsyncCallback; stateObject: DNObject): DNIAsyncResult;
    /// <summary>
    ///   结束异步写入操作，在 I/O 操作完成之前一直阻止。
    ///               （考虑使用  进行替换；请参见“备注”部分。）
    /// </summary>
    procedure EndWrite(asyncResult: DNIAsyncResult);
    /// <summary>
    ///   一个字节写入文件流中的当前位置。
    /// </summary>
    procedure WriteByte(value: Byte);
    /// <summary>
    ///   获取  对象，该对象封装当前  对象所描述的文件的访问控制列表 (ACL) 项。
    /// </summary>
    function GetAccessControl: DNFileSecurity;
    /// <summary>
    ///   将  对象所描述的访问控制列表 (ACL) 项应用于当前  对象所描述的文件。
    /// </summary>
    procedure SetAccessControl(fileSecurity: DNFileSecurity);
    /// <summary>
    ///   防止其他进程读取或写入 。
    /// </summary>
    procedure Lock(position: Int64; length: Int64);
    /// <summary>
    ///   允许其他进程访问以前锁定的某个文件的全部或部分。
    /// </summary>
    procedure Unlock(position: Int64; length: Int64);
    /// <summary>
    ///   将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
    /// </summary>
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   异步清理这个流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。
    /// </summary>
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示当前流是否支持读取。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   获取一个值，该值指示当前流是否支持写入。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
    /// <summary>
    ///   获取一个值，该值指示当前流是否支持查找。
    /// </summary>
    property CanSeek: Boolean read get_CanSeek;
    /// <summary>
    ///   获取一个值，该值指示  是异步还是同步打开的。
    /// </summary>
    property IsAsync: Boolean read get_IsAsync;
    /// <summary>
    ///   获取用字节表示的流长度。
    /// </summary>
    property Length: Int64 read get_Length;
    /// <summary>
    ///   获取传递给构造函数的  的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取或设置此流的当前位置。
    /// </summary>
    property Position: Int64 read get_Position write set_Position;
    /// <summary>
    ///   获取当前  对象所封装文件的操作系统文件句柄。
    /// </summary>
    property Handle: IntPtr read get_Handle;
    /// <summary>
    ///   获取  对象，它代表当前  对象所封装的文件的操作系统文件句柄。
    /// </summary>
    property SafeFileHandle: DNSafeFileHandle read get_SafeFileHandle;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNFileStream = class(TDNGenericImport<DNFileStreamClass, DNFileStream>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  DNIsolatedStorageFileStreamClass = interface(DNFileStreamClass)
  ['{66E1E6F9-8293-4D13-A514-F40B3E8158AF}']
  { constructors } 

    /// <summary>
    ///   初始化  对象的新实例，通过该实例可以访问指定  中的  指定的文件。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode): DNIsolatedStorageFileStream; overload;
    /// <summary>
    ///   初始化  类的一个新实例，以便可以在  指定的  的上下文中，以指定的  来访问  所指定的文件。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; isf: DNIsolatedStorageFile): DNIsolatedStorageFileStream; overload;
    /// <summary>
    ///   初始化  类的一个新实例，以便可以指定的 、用请求类型的  访问  所指定的文件。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess): DNIsolatedStorageFileStream; overload;
    /// <summary>
    ///   初始化  类的一个新实例，以便可以在  所指定的  的上下文中，以指定的 、用指定的文件  来访问  所指定的文件。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; isf: DNIsolatedStorageFile): DNIsolatedStorageFileStream; overload;
    /// <summary>
    ///   初始化  类的一个新实例，以便可以使用  指定的文件共享模式，以指定的 、用指定的文件  访问  所指定的文件。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNIsolatedStorageFileStream; overload;
    /// <summary>
    ///   初始化  类的一个新实例，以便可以在  指定的  的上下文中，使用  指定的文件共享模式，以指定的 、用指定的文件  来访问  所指定的文件。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; isf: DNIsolatedStorageFile): DNIsolatedStorageFileStream; overload;
    /// <summary>
    ///   初始化  类的一个新实例，以便可以使用  指定的文件共享模式（指定了 ），以指定的 、用指定的文件  访问  所指定的文件。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32): DNIsolatedStorageFileStream; overload;
    /// <summary>
    ///   初始化  类的一个新实例，以便可以在  指定的  的上下文中，使用  指定的文件享模式（指定了 ），以指定的 、用指定的文件  来访问  所指定的文件。
    /// </summary>
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32; isf: DNIsolatedStorageFile): DNIsolatedStorageFileStream; overload;

  end;

  /// <summary>
  ///   公开独立存储中的文件。
  /// </summary>
  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageFileStream')]
  DNIsolatedStorageFileStream = interface(DNFileStream)
  ['{E5CFDFFC-AEB5-3489-B12C-640F7B031B57}']
  { getter & setter } 

    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_IsAsync: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_Handle: IntPtr;
    function get_SafeFileHandle: DNSafeFileHandle;
    function get_Name: string;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    /// <summary>
    ///   清除此流的缓冲区，使得所有缓冲数据都写入到文件中。
    /// </summary>
    procedure Flush; overload;
    /// <summary>
    ///   清除此流的缓冲区，将所有缓冲数据都写入到文件中，并且也清除所有中间文件缓冲区。
    /// </summary>
    procedure Flush(flushToDisk: Boolean); overload;
    /// <summary>
    ///   将字节从当前缓冲的  对象复制到数组。
    /// </summary>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    /// <summary>
    ///   从独立存储中的  对象读取一个字节。
    /// </summary>
    function ReadByte: Int32;
    /// <summary>
    ///   开始异步读。
    /// </summary>
    function BeginRead(buffer: TArray<Byte>; offset: Int32; numBytes: Int32; userCallback: DNAsyncCallback; stateObject: DNObject): DNIAsyncResult;
    /// <summary>
    ///   结束挂起的异步读取请求。
    /// </summary>
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    /// <summary>
    ///   结束异步写入。
    /// </summary>
    procedure EndWrite(asyncResult: DNIAsyncResult);
    /// <summary>
    ///   将此  对象的长度设置为指定的 。
    /// </summary>
    procedure SetLength(value: Int64);
    /// <summary>
    ///   防止其他进程读取或写入流。
    /// </summary>
    procedure Lock(position: Int64; length: Int64);
    /// <summary>
    ///   允许其他进程访问以前锁定的某个文件的全部或部分内容。
    /// </summary>
    procedure Unlock(position: Int64; length: Int64);
    /// <summary>
    ///   将此  对象的当前位置设置为指定值。
    /// </summary>
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    /// <summary>
    ///   使用从字节数组中读取的数据将字节块写入  对象。
    /// </summary>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    /// <summary>
    ///   将一个字节写入  对象。
    /// </summary>
    procedure WriteByte(value: Byte);
    /// <summary>
    ///   开始异步写。
    /// </summary>
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; numBytes: Int32; userCallback: DNAsyncCallback; stateObject: DNObject): DNIAsyncResult;
    function GetAccessControl: DNFileSecurity;
    procedure SetAccessControl(fileSecurity: DNFileSecurity);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个布尔值，该值指示该文件是否可读。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   获取一个布尔值，该值指示是否可以写入文件。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
    /// <summary>
    ///   获取一个布尔值，该值指示查找操作是否受支持。
    /// </summary>
    property CanSeek: Boolean read get_CanSeek;
    /// <summary>
    ///   获取一个布尔值，该值指示  对象是异步打开的还是同步打开的。
    /// </summary>
    property IsAsync: Boolean read get_IsAsync;
    /// <summary>
    ///   获取  对象的长度。
    /// </summary>
    property Length: Int64 read get_Length;
    /// <summary>
    ///   获取或设置当前  对象的当前位置。
    /// </summary>
    property Position: Int64 read get_Position write set_Position;
    /// <summary>
    ///   获取当前  对象封装的文件的文件句柄。
    ///               不允许在  对象上访问此属性，如果访问，将引发 。
    /// </summary>
    property Handle: IntPtr read get_Handle;
    /// <summary>
    ///   获取  对象，它代表当前  对象所封装的文件的操作系统文件句柄。
    /// </summary>
    property SafeFileHandle: DNSafeFileHandle read get_SafeFileHandle;
    property Name: string read get_Name;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNIsolatedStorageFileStream = class(TDNGenericImport<DNIsolatedStorageFileStreamClass, DNIsolatedStorageFileStream>) end;

  //-------------namespace: System.IO----------------
  DNMemoryStreamClass = interface(DNStreamClass)
  ['{ACD51454-22EF-4AAD-BAE8-B601C6C91D83}']
  { constructors } 

    /// <summary>
    ///   使用初始化为零的可扩展容量初始化  类的新实例。
    /// </summary>
    {class} function init: DNMemoryStream; overload;
    /// <summary>
    ///   使用按指定要求初始化的可扩展容量初始化  类的新实例。
    /// </summary>
    {class} function init(capacity: Int32): DNMemoryStream; overload;
    /// <summary>
    ///   基于指定的字节数组初始化  类的无法调整大小的新实例。
    /// </summary>
    {class} function init(buffer: TArray<Byte>): DNMemoryStream; overload;
    /// <summary>
    ///   在  属性按指定设置的状态下，基于指定的字节数组初始化  类的无法调整大小的新实例。
    /// </summary>
    {class} function init(buffer: TArray<Byte>; writable: Boolean): DNMemoryStream; overload;
    /// <summary>
    ///   基于字节数组的指定区域（索引）初始化  类的无法调整大小的新实例。
    /// </summary>
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32): DNMemoryStream; overload;
    /// <summary>
    ///   在  属性按指定设置的状态下，基于字节数组的指定区域，初始化  类的无法调整大小的新实例。
    /// </summary>
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32; writable: Boolean): DNMemoryStream; overload;
    /// <summary>
    ///   在  属性和调用  的能力按指定设置的状态下，基于字节数组的指定区域初始化  类的新实例。
    /// </summary>
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32; writable: Boolean; publiclyVisible: Boolean): DNMemoryStream; overload;

  end;

  /// <summary>
  ///   创建一个流，其后备存储为内存。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.IO.MemoryStream')]
  DNMemoryStream = interface(DNStream)
  ['{F5E692D9-8A87-349D-9657-F96E5799D2F4}']
  { getter & setter } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    /// <summary>
    ///   重写  方法以便不执行任何操作。
    /// </summary>
    procedure Flush;
    /// <summary>
    ///   异步清除此流的所有缓冲区，并监视取消请求。
    /// </summary>
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   返回从中创建此流的无符号字节的数组。
    /// </summary>
    function GetBuffer: TArray<Byte>;
    /// <summary>
    ///   从当前流中读取字节块并将数据写入缓冲区。
    /// </summary>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    /// <summary>
    ///   从当前流中读取一个字节。
    /// </summary>
    function ReadByte: Int32;
    /// <summary>
    ///   使用指定的缓冲区大小和取消令牌，从当前流中异步读取所有字节并将其写入到另一个流中。
    /// </summary>
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   将当前流中的位置设置为指定值。
    /// </summary>
    function Seek(offset: Int64; loc: DNSeekOrigin): Int64;
    /// <summary>
    ///   将当前流的长度设为指定值。
    /// </summary>
    procedure SetLength(value: Int64);
    /// <summary>
    ///   将流内容写入字节数组，而与  属性无关。
    /// </summary>
    function ToArray: TArray<Byte>;
    /// <summary>
    ///   使用从缓冲区读取的数据将字节块写入当前流。
    /// </summary>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    /// <summary>
    ///   将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
    /// </summary>
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   将一个字节写入当前位置上的当前流。
    /// </summary>
    procedure WriteByte(value: Byte);
    /// <summary>
    ///   将此内存流的整个内容写入到另一个流中。
    /// </summary>
    procedure WriteTo(stream: DNStream);
    procedure Close;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示当前流是否支持读取。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   获取一个值，该值指示当前流是否支持查找。
    /// </summary>
    property CanSeek: Boolean read get_CanSeek;
    /// <summary>
    ///   获取一个值，该值指示当前流是否支持写入。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
    /// <summary>
    ///   获取或设置分配给该流的字节数。
    /// </summary>
    property Capacity: Int32 read get_Capacity write set_Capacity;
    /// <summary>
    ///   获取流的长度（以字节为单位）。
    /// </summary>
    property Length: Int64 read get_Length;
    /// <summary>
    ///   获取或设置流中的当前位置。
    /// </summary>
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNMemoryStream = class(TDNGenericImport<DNMemoryStreamClass, DNMemoryStream>) end;

  //-------------namespace: System.IO----------------
  DNUnmanagedMemoryStreamClass = interface(DNStreamClass)
  ['{CF9A698D-7008-43CA-A6B4-944A7E9AE420}']
  { constructors } 

    /// <summary>
    ///   在具有指定的偏移量和长度的安全缓冲区中初始化  类的新实例。
    /// </summary>
    {class} function init(buffer: DNSafeBuffer; offset: Int64; length: Int64): DNUnmanagedMemoryStream; overload;
    /// <summary>
    ///   在具有指定的偏移量、长度和文件访问的安全缓冲区中初始化  类的新实例。
    /// </summary>
    {class} function init(buffer: DNSafeBuffer; offset: Int64; length: Int64; access: DNFileAccess): DNUnmanagedMemoryStream; overload;
    /// <summary>
    ///   用指定的位置和内存长度初始化  类的新实例。
    /// </summary>
    {class} function init(pointer: PByte; length: Int64): DNUnmanagedMemoryStream; overload;
    /// <summary>
    ///   使用指定的位置、内存长度、内存总量和文件访问值初始化  类的新实例。
    /// </summary>
    {class} function init(pointer: PByte; length: Int64; capacity: Int64; access: DNFileAccess): DNUnmanagedMemoryStream; overload;

  end;

  /// <summary>
  ///   提供从托管代码访问非托管内存块的能力。
  /// </summary>
  [DNTypeName('System.IO.UnmanagedMemoryStream')]
  DNUnmanagedMemoryStream = interface(DNStream)
  ['{A9747127-52A6-3987-A492-7AD23522D2B4}']
  { getter & setter } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Capacity: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_PositionPointer: PByte;
    procedure set_PositionPointer(value: PByte);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    /// <summary>
    ///   重写  方法以便不执行任何操作。
    /// </summary>
    procedure Flush;
    /// <summary>
    ///   重写  方法，以便取消操作（如果已指定），但不执行其他任何操作。
    ///            
    ///              可以开始于 .NET Framework 4.6
    /// </summary>
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   将当前流的当前位置设置为给定值。
    /// </summary>
    function Seek(offset: Int64; loc: DNSeekOrigin): Int64;
    /// <summary>
    ///   将流的长度设置为指定的值。
    /// </summary>
    procedure SetLength(value: Int64);
    /// <summary>
    ///   将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。
    ///            
    ///              可以开始于 .NET Framework 4.6
    /// </summary>
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   将指定数量的字节读入指定的数组。
    /// </summary>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    /// <summary>
    ///   从流中读取一个字节，并将流内的位置前移一个字节，或者如果已到达流的末尾，则返回 -1。
    /// </summary>
    function ReadByte: Int32;
    /// <summary>
    ///   使用缓冲区中的数据将字节块写入当前流。
    /// </summary>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    /// <summary>
    ///   一个字节写入文件流中的当前位置。
    /// </summary>
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示流是否支持读取。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   获取一个值，该值指示流是否支持查找。
    /// </summary>
    property CanSeek: Boolean read get_CanSeek;
    /// <summary>
    ///   获取一个值，该值指示流是否支持写入。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
    /// <summary>
    ///   获取流中数据的长度。
    /// </summary>
    property Length: Int64 read get_Length;
    /// <summary>
    ///   获取流的长度（大小）或分配给流的内存总量（容量）。
    /// </summary>
    property Capacity: Int64 read get_Capacity;
    /// <summary>
    ///   获取或设置流中的当前位置。
    /// </summary>
    property Position: Int64 read get_Position write set_Position;
    /// <summary>
    ///   获取或设置基于流中当前位置的指向流的字节指针。
    /// </summary>
    property PositionPointer: PByte read get_PositionPointer write set_PositionPointer;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNUnmanagedMemoryStream = class(TDNGenericImport<DNUnmanagedMemoryStreamClass, DNUnmanagedMemoryStream>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptoStreamClass = interface(DNStreamClass)
  ['{5AB21183-AFF4-4487-BB28-5BF048C629A1}']
  { constructors } 

    /// <summary>
    ///   用目标数据流、要使用的转换和流的模式初始化  类的新实例。
    /// </summary>
    {class} function init(stream: DNStream; transform: DNICryptoTransform; mode: DNCryptoStreamMode): DNCryptoStream; overload;
    {class} function init(stream: DNStream; transform: DNICryptoTransform; mode: DNCryptoStreamMode; leaveOpen: Boolean): DNCryptoStream; overload;

  end;

  /// <summary>
  ///   定义将数据流链接到加密转换的流。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.CryptoStream')]
  DNCryptoStream = interface(DNStream)
  ['{B5C4E3CA-476A-3961-BCA5-A6C0AD73E7B1}']
  { getter & setter } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_HasFlushedFinalBlock: Boolean;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    /// <summary>
    ///   用缓冲区的当前状态更新基础数据源或存储库，随后清除缓冲区。
    /// </summary>
    procedure FlushFinalBlock;
    /// <summary>
    ///   清理当前流的所有缓冲区，并使所有缓冲数据写入基础设备。
    /// </summary>
    procedure Flush;
    /// <summary>
    ///   异步清理当前流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。
    /// </summary>
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   设置当前流中的位置。
    /// </summary>
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    /// <summary>
    ///   设置当前流的长度。
    /// </summary>
    procedure SetLength(value: Int64);
    /// <summary>
    ///   从当前流读取字节序列，并将流中的位置向前移动读取的字节数。
    /// </summary>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    /// <summary>
    ///   将一字节序列写入当前的 ，并将通过写入的字节数提前该流的当前位置。
    /// </summary>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    /// <summary>
    ///   将字节序列异步写入当前流，将该流的当前位置向前移动写入的字节数，并监视取消请求。
    /// </summary>
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Clear;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示当前的  是否可读。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   获取一个值，该值指示你是否可以在当前  中搜索。
    /// </summary>
    property CanSeek: Boolean read get_CanSeek;
    /// <summary>
    ///   获取一个值，该值指示当前的  是否可写。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
    /// <summary>
    ///   获取用字节表示的流长度。
    /// </summary>
    property Length: Int64 read get_Length;
    /// <summary>
    ///   获取或设置当前流中的位置。
    /// </summary>
    property Position: Int64 read get_Position write set_Position;
    /// <summary>
    ///   获取一个值，该值指示最终缓冲区块是否已写入基础流。
    /// </summary>
    property HasFlushedFinalBlock: Boolean read get_HasFlushedFinalBlock;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNCryptoStream = class(TDNGenericImport<DNCryptoStreamClass, DNCryptoStream>) end;

  //-------------namespace: System.IO----------------
  DNTextReaderClass = interface(DNMarshalByRefObjectClass)
  ['{6E665F06-1116-4CB1-AA32-78B99CFF18AF}']
  { static methods } 

    /// <summary>
    ///   在指定的  周围创建线程安全包装。
    /// </summary>
    {class} function Synchronized(reader: DNTextReader): DNTextReader;

  end;

  /// <summary>
  ///   表示可读取有序字符系列的读取器。
  /// </summary>
  [DNTypeName('System.IO.TextReader')]
  DNTextReader = interface(DNMarshalByRefObject)
  ['{7457D481-248A-3C89-B7E0-FCEB8FD827E5}']
  { methods } 

    /// <summary>
    ///   关闭  并释放与该  关联的所有系统资源。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   释放由  对象使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   读取下一个字符，而不更改读取器状态或字符源。
    ///               返回下一个可用字符，而实际上并不从读取器中读取此字符。
    /// </summary>
    function Peek: Int32;
    /// <summary>
    ///   读取文本读取器中的下一个字符并使该字符的位置前移一个字符。
    /// </summary>
    function Read: Int32; overload;
    /// <summary>
    ///   从当前读取器中读取指定数目的字符并从指定索引开始将该数据写入缓冲区。
    /// </summary>
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   读取从当前位置到文本读取器末尾的所有字符并将它们作为一个字符串返回。
    /// </summary>
    function ReadToEnd: string;
    /// <summary>
    ///   从当前文本读取器中读取指定的最大字符数并从指定索引处开始将该数据写入缓冲区。
    /// </summary>
    function ReadBlock(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    /// <summary>
    ///   从文本读取器中读取一行字符并将数据作为字符串返回。
    /// </summary>
    function ReadLine: string;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTextReader = class(TDNGenericImport<DNTextReaderClass, DNTextReader>) end;

  //-------------namespace: System.IO----------------
  DNStreamReaderClass = interface(DNTextReaderClass)
  ['{68AF7ECD-3ADA-4E4C-B880-884BEBDE2282}']
  { constructors } 

    /// <summary>
    ///   为指定的流初始化  类的新实例。
    /// </summary>
    {class} function init(stream: DNStream): DNStreamReader; overload;
    /// <summary>
    ///   用指定的字节顺序标记检测选项，为指定的流初始化  类的一个新实例。
    /// </summary>
    {class} function init(stream: DNStream; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    /// <summary>
    ///   用指定的字符编码为指定的流初始化  类的一个新实例。
    /// </summary>
    {class} function init(stream: DNStream; encoding: DNEncoding): DNStreamReader; overload;
    /// <summary>
    ///   为指定的流初始化  类的新实例，带有指定的字符编码和字节顺序标记检测选项。
    /// </summary>
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    /// <summary>
    ///   为指定的流初始化  类的新实例，带有指定的字符编码、字节顺序标记检测选项和缓冲区大小。
    /// </summary>
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32): DNStreamReader; overload;
    /// <summary>
    ///   为指定的流初始化  类的新实例，带有指定的字符编码、字节顺序标记检测选项和缓冲区大小，有选择性的打开流。
    /// </summary>
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32; leaveOpen: Boolean): DNStreamReader; overload;
    /// <summary>
    ///   为指定的文件名初始化  类的新实例。
    /// </summary>
    {class} function init(path: string): DNStreamReader; overload;
    /// <summary>
    ///   为指定的文件名初始化  类的新实例，带有指定的字节顺序标记检测选项。
    /// </summary>
    {class} function init(path: string; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    /// <summary>
    ///   用指定的字符编码，为指定的文件名初始化  类的一个新实例。
    /// </summary>
    {class} function init(path: string; encoding: DNEncoding): DNStreamReader; overload;
    /// <summary>
    ///   为指定的文件名初始化  类的新实例，带有指定的字符编码和字节顺序标记检测选项。
    /// </summary>
    {class} function init(path: string; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    /// <summary>
    ///   为指定的文件名初始化  类的新实例，带有指定字符编码、字节顺序标记检测选项和缓冲区大小。
    /// </summary>
    {class} function init(path: string; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32): DNStreamReader; overload;

  end;

  /// <summary>
  ///   实现一个 ，使其以一种特定的编码从字节流中读取字符。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.IO.StreamReader')]
  DNStreamReader = interface(DNTextReader)
  ['{405FB68B-360D-382C-8A64-1DA3C853D161}']
  { getter & setter } 

    function get_CurrentEncoding: DNEncoding;
    function get_BaseStream: DNStream;
    function get_EndOfStream: Boolean;

  { methods } 

    /// <summary>
    ///   关闭  对象和基础流，并释放与读取器关联的所有系统资源。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   返回下一个可用字符，但不使用它。
    /// </summary>
    function Peek: Int32;
    /// <summary>
    ///   读取输入流中的下一个字符并使该字符位置提升一个字符。
    /// </summary>
    function Read: Int32; overload;
    /// <summary>
    ///   读取来自流的当前位置到结尾的所有字符。
    /// </summary>
    function ReadToEnd: string;
    /// <summary>
    ///   从当前流中读取一行字符并将数据作为字符串返回。
    /// </summary>
    function ReadLine: string;
    /// <summary>
    ///   清除内部缓冲区。
    /// </summary>
    procedure DiscardBufferedData;
    /// <summary>
    ///   从指定的索引位置开始将来自当前流的指定的最多字符读到缓冲区。
    /// </summary>
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   从当前流中读取指定的最大字符数并从指定的索引位置开始将该数据写入缓冲区。
    /// </summary>
    function ReadBlock(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前  对象正在使用的当前字符编码。
    /// </summary>
    property CurrentEncoding: DNEncoding read get_CurrentEncoding;
    /// <summary>
    ///   返回基础流。
    /// </summary>
    property BaseStream: DNStream read get_BaseStream;
    /// <summary>
    ///   获取一个值，该值指示当前的流位置是否在流结尾。
    /// </summary>
    property EndOfStream: Boolean read get_EndOfStream;
  end;

  TDNStreamReader = class(TDNGenericImport<DNStreamReaderClass, DNStreamReader>) end;

  //-------------namespace: System.IO----------------
  DNStringReaderClass = interface(DNTextReaderClass)
  ['{7BA00ECB-99D8-488A-B1C9-CFC273DF11C4}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  读取指定的字符串中的类。
    /// </summary>
    {class} function init(s: string): DNStringReader;

  end;

  /// <summary>
  ///   实现  ，使其从字符串读取。
  /// </summary>
  [DNTypeName('System.IO.StringReader')]
  DNStringReader = interface(DNTextReader)
  ['{0247D5AF-D61D-341C-8615-0FF28865B7CB}']
  { methods } 

    /// <summary>
    ///   关闭 。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   返回下一个可用字符，但不使用它。
    /// </summary>
    function Peek: Int32;
    /// <summary>
    ///   输入字符串中读取下一个字符并将字符位置提升一个字符。
    /// </summary>
    function Read: Int32; overload;
    /// <summary>
    ///   在输入字符串中读取的字符块，并通过将字符位置提升 。
    /// </summary>
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   读取从当前位置到字符串结尾的所有字符并将它们作为一个字符串返回。
    /// </summary>
    function ReadToEnd: string;
    /// <summary>
    ///   从当前字符串中读取一行字符并返回数据作为字符串。
    /// </summary>
    function ReadLine: string;
    procedure Dispose;
    function ReadBlock(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNStringReader = class(TDNGenericImport<DNStringReaderClass, DNStringReader>) end;

  //-------------namespace: System.IO----------------
  DNTextWriterClass = interface(DNMarshalByRefObjectClass)
  ['{896D56EE-F697-4716-AEF0-966E900E6A0A}']
  { static methods } 

    /// <summary>
    ///   在指定的  周围创建线程安全包装。
    /// </summary>
    {class} function Synchronized(writer: DNTextWriter): DNTextWriter;

  end;

  /// <summary>
  ///   表示可以编写一个有序字符系列的编写器。
  ///               此类为抽象类。
  /// </summary>
  [DNTypeName('System.IO.TextWriter')]
  DNTextWriter = interface(DNMarshalByRefObject)
  ['{08416C5B-A003-327C-9F0F-93942467E6E0}']
  { getter & setter } 

    function get_FormatProvider: DNIFormatProvider;
    function get_Encoding: DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    /// <summary>
    ///   关闭当前编写器并释放任何与该编写器关联的系统资源。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   释放由  对象使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
    /// </summary>
    procedure Flush;
    /// <summary>
    ///   将字符写入该文本字符串或流。
    /// </summary>
    procedure Write(value: Char); overload;
    /// <summary>
    ///   将字符数组写入该文本字符串或流。
    /// </summary>
    procedure Write(buffer: TArray<Char>); overload;
    /// <summary>
    ///   将字符的子数组写入文本字符串或流。
    /// </summary>
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    /// <summary>
    ///   将 4 字节有符号整数的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure Write(value: Int32); overload;
    /// <summary>
    ///   将 4 字节无符号整数的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure Write(value: UInt32); overload;
    /// <summary>
    ///   将 8 字节有符号整数的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure Write(value: Int64); overload;
    /// <summary>
    ///   将 8 字节无符号整数的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure Write(value: UInt64); overload;
    /// <summary>
    ///   将 4 字节浮点值的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure Write(value: Single); overload;
    /// <summary>
    ///   将 8 字节浮点值的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure Write(value: Double); overload;
    /// <summary>
    ///   将十进制值的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure Write(value: DNDecimal); overload;
    /// <summary>
    ///   以异步形式将字符串写入到文本字符串或流。
    /// </summary>
    procedure Write(value: string); overload;
    /// <summary>
    ///   通过在对象上调用  方法将此对象的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure Write(value: DNObject); overload;
    /// <summary>
    ///   使用与  方法相同的语义将格式化字符串和新行写入文本字符串或流。
    /// </summary>
    procedure Write(format: string; arg0: DNObject); overload;
    /// <summary>
    ///   使用与  方法相同的语义将格式化字符串和新行写入文本字符串或流。
    /// </summary>
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    /// <summary>
    ///   使用与  方法相同的语义将格式化字符串和新行写入文本字符串或流。
    /// </summary>
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    /// <summary>
    ///   使用与  方法相同的语义将格式化字符串和新行写入文本字符串或流。
    /// </summary>
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    /// <summary>
    ///   将行结束符的字符串写入文本字符串或流。
    /// </summary>
    procedure WriteLine; overload;
    /// <summary>
    ///   将后跟行结束符的字符写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: Char); overload;
    /// <summary>
    ///   将后跟行结束符的字符数组写入文本字符串或流。
    /// </summary>
    procedure WriteLine(buffer: TArray<Char>); overload;
    /// <summary>
    ///   将后跟行结束符的字符子数组写入文本字符串或流。
    /// </summary>
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    /// <summary>
    ///   将后面带有行结束符的  值的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: Boolean); overload;
    /// <summary>
    ///   将后跟行结束符的 4 字节有符号整数的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: Int32); overload;
    /// <summary>
    ///   将后跟行结束符的 4 字节无符号整数的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: UInt32); overload;
    /// <summary>
    ///   将后跟行结束符的 8 字节有符号整数的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: Int64); overload;
    /// <summary>
    ///   将后跟行结束符的 8 字节无符号整数的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: UInt64); overload;
    /// <summary>
    ///   将后跟行结束符的 4 字节浮点值的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: Single); overload;
    /// <summary>
    ///   将后跟行结束符的 8 字节浮点值的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: Double); overload;
    /// <summary>
    ///   将后面带有行结束符的十进制值的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: DNDecimal); overload;
    /// <summary>
    ///   将后跟行结束符的字符串写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: string); overload;
    /// <summary>
    ///   通过在对象上调用  方法将后跟行结束符的此对象的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure WriteLine(value: DNObject); overload;
    /// <summary>
    ///   使用与  方法相同的语义将格式化字符串和新行写入文本字符串或流。
    /// </summary>
    procedure WriteLine(format: string; arg0: DNObject); overload;
    /// <summary>
    ///   使用与  方法相同的语义将格式化字符串和新行写入文本字符串或流。
    /// </summary>
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    /// <summary>
    ///   使用与  相同的语义写出格式化的字符串和一个新行。
    /// </summary>
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    /// <summary>
    ///   使用与  相同的语义写出格式化的字符串和一个新行。
    /// </summary>
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    /// <summary>
    ///   以异步形式将字符写入到下一个文本字符串或流。
    /// </summary>
    function WriteAsync(value: Char): DNTask; overload;
    /// <summary>
    ///   以异步形式将字符串写入到下一字符串或流。
    /// </summary>
    function WriteAsync(value: string): DNTask; overload;
    /// <summary>
    ///   将字符的子数组异步写入文本字符串或流。
    /// </summary>
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    /// <summary>
    ///   将后跟行结束符的字符异步写入文本字符串或流。
    /// </summary>
    function WriteLineAsync(value: Char): DNTask; overload;
    /// <summary>
    ///   将后跟行结束符的字符串异步写入文本字符串或流。
    /// </summary>
    function WriteLineAsync(value: string): DNTask; overload;
    /// <summary>
    ///   将后跟行结束符的字符子数组异步写入文本字符串或流。
    /// </summary>
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    /// <summary>
    ///   将行结束符的字符串异步写入文本字符串或流。
    /// </summary>
    function WriteLineAsync: DNTask; overload;
    /// <summary>
    ///   异步清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
    /// </summary>
    function FlushAsync: DNTask;
    /// <summary>
    ///   将  值的文本表示形式写入文本字符串或流。
    /// </summary>
    procedure Write(value: Boolean); overload;
    /// <summary>
    ///   以异步形式将字符数组写入到下一个字符串或流。
    /// </summary>
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    /// <summary>
    ///   将后跟行结束符的字符数组异步写入文本字符串或流。
    /// </summary>
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取控制格式设置的对象。
    /// </summary>
    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    /// <summary>
    ///   当在派生类中重写时，返回用来写输出的该字符编码。
    /// </summary>
    property Encoding: DNEncoding read get_Encoding;
    /// <summary>
    ///   获取或设置由当前  使用的行结束符字符串。
    /// </summary>
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNTextWriter = class(TDNGenericImport<DNTextWriterClass, DNTextWriter>) end;

  //-------------namespace: System.IO----------------
  DNStreamWriterClass = interface(DNTextWriterClass)
  ['{83EF0ABF-9853-47BF-B99E-BD0D105B14E2}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类为使用 utf-8 编码及默认的缓冲区大小指定的流。
    /// </summary>
    {class} function init(stream: DNStream): DNStreamWriter; overload;
    /// <summary>
    ///   新实例初始化  为通过使用指定的编码及默认的缓冲区大小指定的流的类。
    /// </summary>
    {class} function init(stream: DNStream; encoding: DNEncoding): DNStreamWriter; overload;
    /// <summary>
    ///   新实例初始化  为指定的流类通过使用指定的编码和缓冲区大小。
    /// </summary>
    {class} function init(stream: DNStream; encoding: DNEncoding; bufferSize: Int32): DNStreamWriter; overload;
    /// <summary>
    ///   新实例初始化  为通过使用为指定的编码和缓冲区大小，并可以选择保持流处于打开指定的流的类。
    /// </summary>
    {class} function init(stream: DNStream; encoding: DNEncoding; bufferSize: Int32; leaveOpen: Boolean): DNStreamWriter; overload;
    /// <summary>
    ///   新实例初始化  类为指定的文件使用默认的编码和缓冲区大小。
    /// </summary>
    {class} function init(path: string): DNStreamWriter; overload;
    /// <summary>
    ///   新实例初始化  类为指定的文件使用默认的编码和缓冲区大小。
    ///               如果该文件存在，则可以将其覆盖或向其追加。
    ///               如果该文件不存在，此构造函数将创建一个新文件。
    /// </summary>
    {class} function init(path: string; append: Boolean): DNStreamWriter; overload;
    /// <summary>
    ///   新实例初始化  类通过使用指定的编码和默认的缓冲区大小指定的文件。
    ///               如果该文件存在，则可以将其覆盖或向其追加。
    ///               如果该文件不存在，此构造函数将创建一个新文件。
    /// </summary>
    {class} function init(path: string; append: Boolean; encoding: DNEncoding): DNStreamWriter; overload;
    /// <summary>
    ///   新实例初始化  类上使用指定的编码为指定路径的指定文件和缓冲区大小。
    ///               如果该文件存在，则可以将其覆盖或向其追加。
    ///               如果该文件不存在，此构造函数将创建一个新文件。
    /// </summary>
    {class} function init(path: string; append: Boolean; encoding: DNEncoding; bufferSize: Int32): DNStreamWriter; overload;

  end;

  /// <summary>
  ///   实现  用于将字符写入到流中特定的编码。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.IO.StreamWriter')]
  DNStreamWriter = interface(DNTextWriter)
  ['{EF1AB726-0B87-3E09-AEF4-3A87C5DCDDA0}']
  { getter & setter } 

    function get_AutoFlush: Boolean;
    procedure set_AutoFlush(value: Boolean);
    function get_BaseStream: DNStream;
    function get_Encoding: DNEncoding;
    function get_FormatProvider: DNIFormatProvider;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    /// <summary>
    ///   关闭当前  对象和基础流。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   清理当前写入器的所有缓冲区，并使所有缓冲数据写入基础流。
    /// </summary>
    procedure Flush;
    /// <summary>
    ///   将字符写入流。
    /// </summary>
    procedure Write(value: Char); overload;
    /// <summary>
    ///   将字符数组写入流。
    /// </summary>
    procedure Write(buffer: TArray<Char>); overload;
    /// <summary>
    ///   将字符的子数组写入流。
    /// </summary>
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    /// <summary>
    ///   将字符串写入流。
    /// </summary>
    procedure Write(value: string); overload;
    /// <summary>
    ///   将字符异步写入该流。
    /// </summary>
    function WriteAsync(value: Char): DNTask; overload;
    /// <summary>
    ///   将字符串异步写入该流。
    /// </summary>
    function WriteAsync(value: string): DNTask; overload;
    /// <summary>
    ///   将字符的子数组异步写入该流。
    /// </summary>
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    /// <summary>
    ///   将行终止符异步写入该流。
    /// </summary>
    function WriteLineAsync: DNTask; overload;
    /// <summary>
    ///   将后跟行终止符的字符异步写入该流。
    /// </summary>
    function WriteLineAsync(value: Char): DNTask; overload;
    /// <summary>
    ///   将后跟行终止符的字符串异步写入该流。
    /// </summary>
    function WriteLineAsync(value: string): DNTask; overload;
    /// <summary>
    ///   将后跟行终止符的字符的子数组异步写入该流。
    /// </summary>
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    /// <summary>
    ///   异步清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。
    /// </summary>
    function FlushAsync: DNTask;
    procedure Dispose;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    procedure Write(value: Boolean); overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置一个值，该值指示是否  将其缓冲区刷新到基础流在每次调用后 。
    /// </summary>
    property AutoFlush: Boolean read get_AutoFlush write set_AutoFlush;
    /// <summary>
    ///   获取同后备存储连接的基础流。
    /// </summary>
    property BaseStream: DNStream read get_BaseStream;
    /// <summary>
    ///   获取在其中写入输出的 。
    /// </summary>
    property Encoding: DNEncoding read get_Encoding;
    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNStreamWriter = class(TDNGenericImport<DNStreamWriterClass, DNStreamWriter>) end;

  //-------------namespace: System.IO----------------
  DNStringWriterClass = interface(DNTextWriterClass)
  ['{1610C078-78CA-45EA-98DC-FADC547D3E37}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNStringWriter; overload;
    /// <summary>
    ///   使用指定的格式控件初始化  类的新实例。
    /// </summary>
    {class} function init(formatProvider: DNIFormatProvider): DNStringWriter; overload;
    /// <summary>
    ///   初始化写入到指定的  中的  类的新实例。
    /// </summary>
    {class} function init(sb: DNStringBuilder): DNStringWriter; overload;
    /// <summary>
    ///   新实例初始化  写入指定的类  并且具有指定的格式提供程序。
    /// </summary>
    {class} function init(sb: DNStringBuilder; formatProvider: DNIFormatProvider): DNStringWriter; overload;

  end;

  /// <summary>
  ///   实现用于将信息写入字符串的 。
  ///               信息存储在基础  中。
  /// </summary>
  [DNTypeName('System.IO.StringWriter')]
  DNStringWriter = interface(DNTextWriter)
  ['{27F31D55-D6C6-3676-9D42-C40F3A918636}']
  { getter & setter } 

    function get_Encoding: DNEncoding;
    function get_FormatProvider: DNIFormatProvider;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    /// <summary>
    ///   关闭当前  和基础流。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   返回基础 。
    /// </summary>
    function GetStringBuilder: DNStringBuilder;
    /// <summary>
    ///   将字符写入字符串。
    /// </summary>
    procedure Write(value: Char); overload;
    /// <summary>
    ///   将字符的子数组写入字符串。
    /// </summary>
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    /// <summary>
    ///   将字符串写入当前字符串。
    /// </summary>
    procedure Write(value: string); overload;
    /// <summary>
    ///   将字符异步写入该字符串。
    /// </summary>
    function WriteAsync(value: Char): DNTask; overload;
    /// <summary>
    ///   以异步方式将字符串写入当前的字符串。
    /// </summary>
    function WriteAsync(value: string): DNTask; overload;
    /// <summary>
    ///   将字符的子数组异步写入字符串。
    /// </summary>
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    /// <summary>
    ///   将后跟行终止符的字符异步写入字符串。
    /// </summary>
    function WriteLineAsync(value: Char): DNTask; overload;
    /// <summary>
    ///   将后跟行终止符的字符串异步写入当前字符串。
    /// </summary>
    function WriteLineAsync(value: string): DNTask; overload;
    /// <summary>
    ///   将写入到字符串以异步方式跟行结束符的字符子数组。
    /// </summary>
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    /// <summary>
    ///   异步清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
    /// </summary>
    function FlushAsync: DNTask;
    /// <summary>
    ///   返回包含迄今为止写入到当前  中的字符的字符串。
    /// </summary>
    function ToString: string;
    procedure Dispose;
    procedure Flush;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    function WriteLineAsync: DNTask; overload;
    procedure Write(value: Boolean); overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取在其中写入输出的 。
    /// </summary>
    property Encoding: DNEncoding read get_Encoding;
    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNStringWriter = class(TDNGenericImport<DNStringWriterClass, DNStringWriter>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyNameProxyClass = interface(DNMarshalByRefObjectClass)
  ['{8BE9C005-683A-4640-AE3E-23BBABD605F1}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNAssemblyNameProxy;

  end;

  /// <summary>
  ///   提供的可远程处理版本 。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyNameProxy')]
  DNAssemblyNameProxy = interface(DNMarshalByRefObject)
  ['{3F4A4283-6A08-3E90-A976-2C2D3BE4EB0B}']
  { methods } 

    /// <summary>
    ///   获取  对于给定的文件。
    /// </summary>
    function GetAssemblyName(assemblyFile: string): DNAssemblyName;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNAssemblyNameProxy = class(TDNGenericImport<DNAssemblyNameProxyClass, DNAssemblyNameProxy>) end;

  //-------------namespace: System.Runtime.Remoting.Lifetime----------------
  DNClientSponsorClass = interface(DNMarshalByRefObjectClass)
  ['{6505F13E-D6EA-46FD-ACD3-990DF7B25CCB}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNClientSponsor; overload;
    /// <summary>
    ///   初始化的新实例  发起对象类的续订时间。
    /// </summary>
    {class} function init(renewalTime: DNTimeSpan): DNClientSponsor; overload;

  end;

  /// <summary>
  ///   提供了生存期主办方类的默认实现。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Lifetime.ClientSponsor')]
  DNClientSponsor = interface(DNMarshalByRefObject)
  ['{FD8C8FCE-4F85-36B2-B8E8-F5A183654539}']
  { getter & setter } 

    function get_RenewalTime: DNTimeSpan;
    procedure set_RenewalTime(value: DNTimeSpan);

  { methods } 

    /// <summary>
    ///   请求发起客户端续订指定的对象的租约。
    /// </summary>
    function Renewal(lease: DNILease): DNTimeSpan;
    /// <summary>
    ///   新实例初始化 , ，提供当前对象的租约。
    /// </summary>
    function InitializeLifetimeService: DNObject;
    /// <summary>
    ///   注册指定  为主办关系。
    /// </summary>
    function &Register(obj: DNMarshalByRefObject): Boolean;
    /// <summary>
    ///   注销指定  发起由当前的对象列表从 。
    /// </summary>
    procedure Unregister(obj: DNMarshalByRefObject);
    /// <summary>
    ///   与当前注册的列表对象的空成员 。
    /// </summary>
    procedure Close;
    function GetLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  用以请求续订时增加发起对象的生存期。
    /// </summary>
    property RenewalTime: DNTimeSpan read get_RenewalTime write set_RenewalTime;
  end;

  TDNClientSponsor = class(TDNGenericImport<DNClientSponsorClass, DNClientSponsor>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNObjectHandleClass = interface(DNMarshalByRefObjectClass)
  ['{92EE0C4F-2175-49C1-AD81-5C04B001FD82}']
  { constructors } 

    /// <summary>
    ///   初始化的实例  类，包装给定的对象 。
    /// </summary>
    {class} function init(o: DNObject): DNObjectHandle;

  end;

  /// <summary>
  ///   包装按值封送的对象引用，从而使它们可以通过间接寻址返回。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.ObjectHandle')]
  DNObjectHandle = interface(DNMarshalByRefObject)
  ['{ABEB0459-03B9-35AF-96E1-66BB7BC923F7}']
  { methods } 

    /// <summary>
    ///   返回包装的对象。
    /// </summary>
    function Unwrap: DNObject;
    /// <summary>
    ///   初始化包装的对象的生存期租约。
    /// </summary>
    function InitializeLifetimeService: DNObject;
    function GetLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNObjectHandle = class(TDNGenericImport<DNObjectHandleClass, DNObjectHandle>) end;

  //-------------namespace: System.Threading----------------
  DNRegisteredWaitHandleClass = interface(DNMarshalByRefObjectClass)
  ['{18A88498-F7A8-40BA-A573-B8DFB05C08EA}']
  end;

  /// <summary>
  ///   表示在调用时已注册的句柄 。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Threading.RegisteredWaitHandle')]
  DNRegisteredWaitHandle = interface(DNMarshalByRefObject)
  ['{50F8AE2B-69F0-37EF-954B-D2618E3E8267}']
  { methods } 

    /// <summary>
    ///   取消由颁发一个已注册的等待操作  方法。
    /// </summary>
    function Unregister(waitObject: DNWaitHandle): Boolean;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRegisteredWaitHandle = class(TDNGenericImport<DNRegisteredWaitHandleClass, DNRegisteredWaitHandle>) end;

  //-------------namespace: System.Threading----------------
  DNTimerClass = interface(DNMarshalByRefObjectClass)
  ['{8189715E-1A9D-47D9-89C8-70A61CDFCC31}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，使用 32 位带符号的整数指定时间间隔。
    /// </summary>
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: Int32; period: Int32): DNTimer; overload;
    /// <summary>
    ///   新实例初始化  类，使用  值度量时间间隔。
    /// </summary>
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: DNTimeSpan; period: DNTimeSpan): DNTimer; overload;
    /// <summary>
    ///   新实例初始化  类，用 32 位无符号的整数度量时间间隔。
    /// </summary>
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: UInt32; period: UInt32): DNTimer; overload;
    /// <summary>
    ///   新实例初始化  类，用 64 位有符号的整数度量时间间隔。
    /// </summary>
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: Int64; period: Int64): DNTimer; overload;
    /// <summary>
    ///   新实例初始化  类，具有无限期和无限到期时间，请使用新创建  对象作为状态对象。
    /// </summary>
    {class} function init(callback: DNTimerCallback): DNTimer; overload;

  end;

  /// <summary>
  ///   提供以指定的时间间隔对线程池线程执行方法的机制。
  ///               无法继承此类。
  ///            
  ///              若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
  /// </summary>
  [DNTypeName('System.Threading.Timer')]
  DNTimer = interface(DNMarshalByRefObject)
  ['{490CA7A8-D03F-3459-8208-D428EA010DA0}']
  { methods } 

    /// <summary>
    ///   释放当前实例所使用的所有资源 。
    /// </summary>
    procedure Dispose; overload;
    /// <summary>
    ///   更改计时器的启动时间和方法调用之间的间隔，用 32 位有符号整数度量时间间隔。
    /// </summary>
    function Change(dueTime: Int32; period: Int32): Boolean; overload;
    /// <summary>
    ///   更改开始时间和计时器，并将方法调用之间的间隔  值度量时间间隔。
    /// </summary>
    function Change(dueTime: DNTimeSpan; period: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   更改计时器的启动时间和方法调用之间的间隔，用 32 位无符号整数度量时间间隔。
    /// </summary>
    function Change(dueTime: UInt32; period: UInt32): Boolean; overload;
    /// <summary>
    ///   更改计时器的启动时间和方法调用之间的间隔，用 64 位有符号整数度量时间间隔。
    /// </summary>
    function Change(dueTime: Int64; period: Int64): Boolean; overload;
    /// <summary>
    ///   释放当前实例所使用的所有资源  和信号时已释放计时器。
    /// </summary>
    function Dispose(notifyObject: DNWaitHandle): Boolean; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTimer = class(TDNGenericImport<DNTimerClass, DNTimer>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleClass = interface(DNMarshalByRefObjectClass)
  ['{5F442239-1978-4142-BE57-7B505894155E}']
  { static methods } 

    /// <summary>
    ///   等待指定数组中的所有元素收到信号，使用  值指定时间间隔，并指定是否在等待之前退出同步域。
    /// </summary>
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    /// <summary>
    ///   等待指定数组中的所有元素收到信号，使用  值指定时间间隔，并指定是否在等待之前退出同步域。
    /// </summary>
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    /// <summary>
    ///   等待指定数组中的所有元素都收到信号。
    /// </summary>
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>): Boolean; overload;
    /// <summary>
    ///   等待指定数组中的所有元素接收信号，同时使用  值指定时间间隔。
    /// </summary>
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32): Boolean; overload;
    /// <summary>
    ///   等待指定数组中的所有元素接收信号，同时使用  值指定时间间隔。
    /// </summary>
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   等待指定数组中的任一元素收到信号，使用 32 位带符号整数指定时间间隔并指定是否在等待之前退出同步域。
    /// </summary>
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32; exitContext: Boolean): Int32; overload;
    /// <summary>
    ///   等待指定数组中的任一元素收到信号，使用  指定时间间隔并指定是否在等待之前退出同步域。
    /// </summary>
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan; exitContext: Boolean): Int32; overload;
    /// <summary>
    ///   等待指定数组中的任意元素接收信号，同时使用  指定时间间隔。
    /// </summary>
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan): Int32; overload;
    /// <summary>
    ///   等待指定数组中的任一元素收到信号。
    /// </summary>
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>): Int32; overload;
    /// <summary>
    ///   等待指定数组中的任意元素接收信号，同时使用 32 位有符号整数指定时间间隔。
    /// </summary>
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32): Int32; overload;
    /// <summary>
    ///   向一个  发出信号并等待另一个。
    /// </summary>
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle): Boolean; overload;
    /// <summary>
    ///   向一个  发出信号并等待另一个，指定超时间隔为 ，并指定在进入等待前是否退出上下文的同步域。
    /// </summary>
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    /// <summary>
    ///   向一个  发出信号并等待另一个，指定超时间隔为 32 位有符号整数，并指定在进入等待前是否退出上下文的同步域。
    /// </summary>
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;

  end;

  /// <summary>
  ///   封装等待对共享资源的独占访问的操作系统特定的对象。
  /// </summary>
  [DNTypeName('System.Threading.WaitHandle')]
  DNWaitHandle = interface(DNMarshalByRefObject)
  ['{4D0E564A-78C8-31E0-BA03-73AF7BDFF5A9}']
  { getter & setter } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    /// <summary>
    ///   阻止当前线程，直到当前的  收到信号为止，同时使用 32 位带符号整数指定时间间隔，并指定是否在等待之前退出同步域。
    /// </summary>
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直到当前实例收到信号为止，同时使用  指定时间间隔，并指定是否在等待之前退出同步域。
    /// </summary>
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直到当前  收到信号。
    /// </summary>
    function WaitOne: Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直到当前  收到信号，同时使用 32 位带符号整数指定时间间隔（以毫秒为单位）。
    /// </summary>
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直到当前实例收到信号，同时使用  指定时间间隔。
    /// </summary>
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   释放由当前  占用的所有资源。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置本机操作系统句柄。
    /// </summary>
    property Handle: IntPtr read get_Handle write set_Handle;
    /// <summary>
    ///   获取或设置本机操作系统句柄。
    /// </summary>
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNWaitHandle = class(TDNGenericImport<DNWaitHandleClass, DNWaitHandle>) end;

  //-------------namespace: System.Threading----------------
  DNEventWaitHandleClass = interface(DNWaitHandleClass)
  ['{41091D01-FB86-414E-B90D-46D05900B391}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类中，指定是否在等待句柄最初发出信号，以及是否它将重置自动或手动。
    /// </summary>
    {class} function init(initialState: Boolean; mode: DNEventResetMode): DNEventWaitHandle; overload;
    /// <summary>
    ///   新实例初始化  类，同时指定是否在等待句柄最初处于终止状态创建此调用后，是否自动或手动，则就会重置和系统同步事件的名称。
    /// </summary>
    {class} function init(initialState: Boolean; mode: DNEventResetMode; name: string): DNEventWaitHandle; overload;
    {class} function init(initialState: Boolean; mode: DNEventResetMode; name: string; out createdNew: Boolean): DNEventWaitHandle; overload;
    {class} function init(initialState: Boolean; mode: DNEventResetMode; name: string; out createdNew: Boolean; eventSecurity: DNEventWaitHandleSecurity): DNEventWaitHandle; overload;

  { static methods } 

    /// <summary>
    ///   打开指定的命名的同步事件，如果它已存在。
    /// </summary>
    {class} function OpenExisting(name: string): DNEventWaitHandle; overload;
    /// <summary>
    ///   打开指定的名为同步事件，如果它已存在，所需的安全访问权限。
    /// </summary>
    {class} function OpenExisting(name: string; rights: DNEventWaitHandleRights): DNEventWaitHandle; overload;
    {class} function TryOpenExisting(name: string; out result: DNEventWaitHandle): Boolean; overload;
    {class} function TryOpenExisting(name: string; rights: DNEventWaitHandleRights; out result: DNEventWaitHandle): Boolean; overload;

  end;

  /// <summary>
  ///   表示一个线程同步事件。
  /// </summary>
  [DNTypeName('System.Threading.EventWaitHandle')]
  DNEventWaitHandle = interface(DNWaitHandle)
  ['{80226212-1832-310F-862C-A511E3534E62}']
  { getter & setter } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    /// <summary>
    ///   将事件状态设置为非终止，从而导致线程受阻。
    /// </summary>
    function Reset: Boolean;
    /// <summary>
    ///   将事件状态设置为有信号，从而允许一个或多个等待线程继续执行。
    /// </summary>
    function &Set: Boolean;
    /// <summary>
    ///   获取一个  对象，它表示当前  对象所表示的已命名系统事件的访问控件安全性。
    /// </summary>
    function GetAccessControl: DNEventWaitHandleSecurity;
    /// <summary>
    ///   设置已命名的系统事件的访问控制安全性。
    /// </summary>
    procedure SetAccessControl(eventSecurity: DNEventWaitHandleSecurity);
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNEventWaitHandle = class(TDNGenericImport<DNEventWaitHandleClass, DNEventWaitHandle>) end;

  //-------------namespace: System.Threading----------------
  DNAutoResetEventClass = interface(DNEventWaitHandleClass)
  ['{1A3298A9-3287-4991-846F-9F322199821E}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  使用 Boolean 值，该值指示是否将初始状态设置为终止状态的类。
    /// </summary>
    {class} function init(initialState: Boolean): DNAutoResetEvent;

  end;

  /// <summary>
  ///   通知正在等待的线程已发生事件。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Threading.AutoResetEvent')]
  DNAutoResetEvent = interface(DNEventWaitHandle)
  ['{E35AF4DD-EB37-39FC-9071-4CE39B1A54BE}']
  { getter & setter } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    function GetAccessControl: DNEventWaitHandleSecurity;
    procedure SetAccessControl(eventSecurity: DNEventWaitHandleSecurity);
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNAutoResetEvent = class(TDNGenericImport<DNAutoResetEventClass, DNAutoResetEvent>) end;

  //-------------namespace: System.Threading----------------
  DNManualResetEventClass = interface(DNEventWaitHandleClass)
  ['{04484951-B26B-4203-91E3-3283C46A9197}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  使用 Boolean 值，该值指示是否将初始状态设置为终止状态的类。
    /// </summary>
    {class} function init(initialState: Boolean): DNManualResetEvent;

  end;

  /// <summary>
  ///   通知一个或多个正在等待的线程已发生事件。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Threading.ManualResetEvent')]
  DNManualResetEvent = interface(DNEventWaitHandle)
  ['{17A355C3-C65E-3F26-8A80-236890EBC997}']
  { getter & setter } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    function GetAccessControl: DNEventWaitHandleSecurity;
    procedure SetAccessControl(eventSecurity: DNEventWaitHandleSecurity);
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNManualResetEvent = class(TDNGenericImport<DNManualResetEventClass, DNManualResetEvent>) end;

  //-------------namespace: System.Threading----------------
  DNMutexClass = interface(DNWaitHandleClass)
  ['{C2C37531-9E66-49CE-9358-403663A26406}']
  { constructors } 

    {class} function init(initiallyOwned: Boolean; name: string; out createdNew: Boolean): DNMutex; overload;
    {class} function init(initiallyOwned: Boolean; name: string; out createdNew: Boolean; mutexSecurity: DNMutexSecurity): DNMutex; overload;
    /// <summary>
    ///   使用 Boolean 值（指示调用线程是否应具有互斥体的初始所有权以及字符串是否为互斥体的名称）初始化  类的新实例。
    /// </summary>
    {class} function init(initiallyOwned: Boolean; name: string): DNMutex; overload;
    /// <summary>
    ///   使用 Boolean 值（指示调用线程是否应具有互斥体的初始所有权）初始化  类的新实例。
    /// </summary>
    {class} function init(initiallyOwned: Boolean): DNMutex; overload;
    /// <summary>
    ///   使用默认属性初始化  类的新实例。
    /// </summary>
    {class} function init: DNMutex; overload;

  { static methods } 

    /// <summary>
    ///   打开指定的已命名的互斥体（如果已经存在）。
    /// </summary>
    {class} function OpenExisting(name: string): DNMutex; overload;
    /// <summary>
    ///   利用所需的安全访问权限，打开指定的已命名的互斥体（如果已经存在）。
    /// </summary>
    {class} function OpenExisting(name: string; rights: DNMutexRights): DNMutex; overload;
    {class} function TryOpenExisting(name: string; out result: DNMutex): Boolean; overload;
    {class} function TryOpenExisting(name: string; rights: DNMutexRights; out result: DNMutex): Boolean; overload;

  end;

  /// <summary>
  ///   还可用于进程间同步的同步基元。
  /// </summary>
  [DNTypeName('System.Threading.Mutex')]
  DNMutex = interface(DNWaitHandle)
  ['{D74D613D-F27F-311B-A9A3-27EBC63A1A5D}']
  { getter & setter } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    /// <summary>
    ///   释放  一次。
    /// </summary>
    procedure ReleaseMutex;
    /// <summary>
    ///   获取表示已命名的互斥体的访问控制安全性的  对象。
    /// </summary>
    function GetAccessControl: DNMutexSecurity;
    /// <summary>
    ///   设置已命名的系统互斥体的访问控制安全性。
    /// </summary>
    procedure SetAccessControl(mutexSecurity: DNMutexSecurity);
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNMutex = class(TDNGenericImport<DNMutexClass, DNMutex>) end;

  //-------------namespace: System----------------
  DNMathClass = interface(DNObjectClass)
  ['{F01FC718-E29C-4016-8B5C-D8ADBEC3326E}']
  { static methods } 

    /// <summary>
    ///   返回大于或等于指定的十进制数的最小整数值。
    /// </summary>
    {class} function Ceiling(d: DNDecimal): DNDecimal; overload;
    /// <summary>
    ///   返回小于或等于指定小数的最大整数。
    /// </summary>
    {class} function Floor(d: DNDecimal): DNDecimal; overload;
    /// <summary>
    ///   将双精度浮点值按指定的小数位数舍入。
    /// </summary>
    {class} function Round(value: Double; digits: Int32): Double; overload;
    /// <summary>
    ///   将双精度浮点值舍入为最接近的整数。
    ///               一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。
    /// </summary>
    {class} function Round(value: Double; mode: DNMidpointRounding): Double; overload;
    /// <summary>
    ///   将双精度浮点值按指定的小数位数舍入。
    ///               一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。
    /// </summary>
    {class} function Round(value: Double; digits: Int32; mode: DNMidpointRounding): Double; overload;
    /// <summary>
    ///   将小数值舍入到最接近的整数值。
    /// </summary>
    {class} function Round(d: DNDecimal): DNDecimal; overload;
    /// <summary>
    ///   将小数值按指定的小数位数舍入。
    /// </summary>
    {class} function Round(d: DNDecimal; decimals: Int32): DNDecimal; overload;
    /// <summary>
    ///   将小数值舍入到最接近的整数。
    ///               一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。
    /// </summary>
    {class} function Round(d: DNDecimal; mode: DNMidpointRounding): DNDecimal; overload;
    /// <summary>
    ///   将小数值按指定的小数位数舍入。
    ///               一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。
    /// </summary>
    {class} function Round(d: DNDecimal; decimals: Int32; mode: DNMidpointRounding): DNDecimal; overload;
    /// <summary>
    ///   计算一个数字的整数部分。
    /// </summary>
    {class} function Truncate(d: DNDecimal): DNDecimal; overload;
    /// <summary>
    ///   计算指定双精度浮点数的整数部分。
    /// </summary>
    {class} function Truncate(d: Double): Double; overload;
    /// <summary>
    ///   返回一指定数字被另一指定数字相除的余数。
    /// </summary>
    {class} function IEEERemainder(x: Double; y: Double): Double;
    /// <summary>
    ///   返回 8 位有符号整数的绝对值。
    /// </summary>
    {class} function Abs(value: SByte): SByte; overload;
    /// <summary>
    ///   返回 16 位有符号整数的绝对值。
    /// </summary>
    {class} function Abs(value: Int16): Int16; overload;
    /// <summary>
    ///   返回 32 位有符号整数的绝对值。
    /// </summary>
    {class} function Abs(value: Int32): Int32; overload;
    /// <summary>
    ///   返回 64 位有符号整数的绝对值。
    /// </summary>
    {class} function Abs(value: Int64): Int64; overload;
    /// <summary>
    ///   返回  数字的绝对值。
    /// </summary>
    {class} function Abs(value: DNDecimal): DNDecimal; overload;
    /// <summary>
    ///   返回两个 8 位有符号的整数中较大的一个。
    /// </summary>
    {class} function Max(val1: SByte; val2: SByte): SByte; overload;
    /// <summary>
    ///   返回两个 8 位无符号整数中较大的一个。
    /// </summary>
    {class} function Max(val1: Byte; val2: Byte): Byte; overload;
    /// <summary>
    ///   返回两个 16 位有符号的整数中较大的一个。
    /// </summary>
    {class} function Max(val1: Int16; val2: Int16): Int16; overload;
    /// <summary>
    ///   返回两个 16 位无符号整数中较大的一个。
    /// </summary>
    {class} function Max(val1: UInt16; val2: UInt16): UInt16; overload;
    /// <summary>
    ///   返回两个 32 位有符号的整数中较大的一个。
    /// </summary>
    {class} function Max(val1: Int32; val2: Int32): Int32; overload;
    /// <summary>
    ///   返回两个 32 位无符号整数中较大的一个。
    /// </summary>
    {class} function Max(val1: UInt32; val2: UInt32): UInt32; overload;
    /// <summary>
    ///   返回两个 64 位有符号的整数中较大的一个。
    /// </summary>
    {class} function Max(val1: Int64; val2: Int64): Int64; overload;
    /// <summary>
    ///   返回两个 64 位无符号整数中较大的一个。
    /// </summary>
    {class} function Max(val1: UInt64; val2: UInt64): UInt64; overload;
    /// <summary>
    ///   返回两个单精度浮点数字中较大的一个。
    /// </summary>
    {class} function Max(val1: Single; val2: Single): Single; overload;
    /// <summary>
    ///   返回两个双精度浮点数字中较大的一个。
    /// </summary>
    {class} function Max(val1: Double; val2: Double): Double; overload;
    /// <summary>
    ///   返回两个十进制数中较大的一个。
    /// </summary>
    {class} function Max(val1: DNDecimal; val2: DNDecimal): DNDecimal; overload;
    /// <summary>
    ///   返回两个 8 位有符号整数中较小的一个。
    /// </summary>
    {class} function Min(val1: SByte; val2: SByte): SByte; overload;
    /// <summary>
    ///   返回两个 8 位无符号整数中较小的一个。
    /// </summary>
    {class} function Min(val1: Byte; val2: Byte): Byte; overload;
    /// <summary>
    ///   返回两个 16 位有符号整数中较小的一个。
    /// </summary>
    {class} function Min(val1: Int16; val2: Int16): Int16; overload;
    /// <summary>
    ///   返回两个 16 位无符号整数中较小的一个。
    /// </summary>
    {class} function Min(val1: UInt16; val2: UInt16): UInt16; overload;
    /// <summary>
    ///   返回两个 32 位有符号整数中较小的一个。
    /// </summary>
    {class} function Min(val1: Int32; val2: Int32): Int32; overload;
    /// <summary>
    ///   返回两个 32 位无符号整数中较小的一个。
    /// </summary>
    {class} function Min(val1: UInt32; val2: UInt32): UInt32; overload;
    /// <summary>
    ///   返回两个 64 位有符号整数中较小的一个。
    /// </summary>
    {class} function Min(val1: Int64; val2: Int64): Int64; overload;
    /// <summary>
    ///   返回两个 64 位无符号整数中较小的一个。
    /// </summary>
    {class} function Min(val1: UInt64; val2: UInt64): UInt64; overload;
    /// <summary>
    ///   返回两个单精度浮点数字中较小的一个。
    /// </summary>
    {class} function Min(val1: Single; val2: Single): Single; overload;
    /// <summary>
    ///   返回两个双精度浮点数字中较小的一个。
    /// </summary>
    {class} function Min(val1: Double; val2: Double): Double; overload;
    /// <summary>
    ///   返回两个十进制数中较小的一个。
    /// </summary>
    {class} function Min(val1: DNDecimal; val2: DNDecimal): DNDecimal; overload;
    /// <summary>
    ///   返回指定数字在使用指定底时的对数。
    /// </summary>
    {class} function Log(a: Double; newBase: Double): Double; overload;
    /// <summary>
    ///   返回一个整数，该整数指示 8 位带符号整数的符号。
    /// </summary>
    {class} function Sign(value: SByte): Int32; overload;
    /// <summary>
    ///   返回表示 16 位带符号整数的整数。
    /// </summary>
    {class} function Sign(value: Int16): Int32; overload;
    /// <summary>
    ///   返回表示 32 位带符号整数的整数。
    /// </summary>
    {class} function Sign(value: Int32): Int32; overload;
    /// <summary>
    ///   返回一个整数，该整数指示 64 位带符号整数的符号。
    /// </summary>
    {class} function Sign(value: Int64): Int32; overload;
    /// <summary>
    ///   返回一个整数，该整数表示单精度浮点数字的符号。
    /// </summary>
    {class} function Sign(value: Single): Int32; overload;
    /// <summary>
    ///   返回一个整数，该整数表示双精度浮点数字的符号。
    /// </summary>
    {class} function Sign(value: Double): Int32; overload;
    /// <summary>
    ///   返回表示十进制数符号的整数。
    /// </summary>
    {class} function Sign(value: DNDecimal): Int32; overload;
    /// <summary>
    ///   生成两个 32 位数字的完整乘积。
    /// </summary>
    {class} function BigMul(a: Int32; b: Int32): Int64;
    {class} function DivRem(a: Int32; b: Int32; out result: Int32): Int32; overload;
    {class} function DivRem(a: Int64; b: Int64; out result: Int64): Int64; overload;
    /// <summary>
    ///   返回余弦值为指定数字的角度。
    /// </summary>
    {class} function Acos(d: Double): Double;
    /// <summary>
    ///   返回正弦值为指定数字的角度。
    /// </summary>
    {class} function Asin(d: Double): Double;
    /// <summary>
    ///   返回正切值为指定数字的角度。
    /// </summary>
    {class} function Atan(d: Double): Double;
    /// <summary>
    ///   返回正切值为两个指定数字的商的角度。
    /// </summary>
    {class} function Atan2(y: Double; x: Double): Double;
    /// <summary>
    ///   返回指定角度的余弦值。
    /// </summary>
    {class} function Cos(d: Double): Double;
    /// <summary>
    ///   返回指定角度的双曲余弦值。
    /// </summary>
    {class} function Cosh(value: Double): Double;
    /// <summary>
    ///   返回指定角度的正弦值。
    /// </summary>
    {class} function Sin(a: Double): Double;
    /// <summary>
    ///   返回指定角度的双曲正弦值。
    /// </summary>
    {class} function Sinh(value: Double): Double;
    /// <summary>
    ///   返回指定角度的双曲正切值。
    /// </summary>
    {class} function Tanh(value: Double): Double;
    /// <summary>
    ///   将双精度浮点值舍入为最接近的整数值。
    /// </summary>
    {class} function Round(a: Double): Double; overload;
    /// <summary>
    ///   返回指定数字的平方根。
    /// </summary>
    {class} function Sqrt(d: Double): Double;
    /// <summary>
    ///   返回指定数字以 10 为底的对数。
    /// </summary>
    {class} function Log10(d: Double): Double;
    /// <summary>
    ///   返回单精度浮点数字的绝对值。
    /// </summary>
    {class} function Abs(value: Single): Single; overload;
    /// <summary>
    ///   返回双精度浮点数字的绝对值。
    /// </summary>
    {class} function Abs(value: Double): Double; overload;
    /// <summary>
    ///   返回大于或等于指定的双精度浮点数的最小整数值。
    /// </summary>
    {class} function Ceiling(a: Double): Double; overload;
    /// <summary>
    ///   返回小于或等于指定双精度浮点数的最大整数。
    /// </summary>
    {class} function Floor(d: Double): Double; overload;
    /// <summary>
    ///   返回指定角度的正切值。
    /// </summary>
    {class} function Tan(a: Double): Double;
    /// <summary>
    ///   返回指定数字的自然对数（底为 ）。
    /// </summary>
    {class} function Log(d: Double): Double; overload;
    /// <summary>
    ///   返回  的指定次幂。
    /// </summary>
    {class} function Exp(d: Double): Double;
    /// <summary>
    ///   返回指定数字的指定次幂。
    /// </summary>
    {class} function Pow(x: Double; y: Double): Double;

  end;

  /// <summary>
  ///   为三角函数、对数函数和其他通用数学函数提供常数和静态方法。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
  /// </summary>
  [DNTypeName('System.Math')]
  DNMath = interface(DNObject)
  ['{40CE262D-D951-3EB6-9B05-48A1EB4D0EBC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMath = class(TDNGenericImport<DNMathClass, DNMath>) end;

  //-------------namespace: System----------------
  DNNullableClass = interface(DNObjectClass)
  ['{6EF5378C-8698-4A0E-9F67-48467CAEBC69}']
  { static methods } 

    /// <summary>
    ///   返回指定可以为 null 的类型的基础类型自变量。
    /// </summary>
    {class} function GetUnderlyingType(nullableType: DNType): DNType;

  end;

  /// <summary>
  ///   支持可以分配的值类型。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Nullable')]
  DNNullable = interface(DNObject)
  ['{F358AC62-4569-3705-BE32-B07E799B4223}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNNullable = class(TDNGenericImport<DNNullableClass, DNNullable>) end;

  //-------------namespace: System----------------
  DNOperatingSystemClass = interface(DNObjectClass)
  ['{8985E66E-9AB3-43FF-9E4E-7573D3D2981A}']
  { constructors } 

    /// <summary>
    ///   使用指定的平台标识符值和版本对象来初始化  类的新实例。
    /// </summary>
    {class} function init(platform: DNPlatformID; version: DNVersion): DNOperatingSystem;

  end;

  /// <summary>
  ///   表示有关操作系统的信息，如版本和平台标识符。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.OperatingSystem')]
  DNOperatingSystem = interface(DNObject)
  ['{D7CA3B25-A57B-354C-8758-9FE3A905C1AC}']
  { getter & setter } 

    function get_Platform: DNPlatformID;
    function get_ServicePack: string;
    function get_Version: DNVersion;
    function get_VersionString: string;

  { methods } 

    /// <summary>
    ///   创建与此实例相同的  对象。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   将此  对象的值转换为其等效的字符串表示形式。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   使用反序列化此实例所需的数据填充  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取标识操作系统平台的  枚举值。
    /// </summary>
    property Platform: DNPlatformID read get_Platform;
    /// <summary>
    ///   获取此  对象表示的 Service Pack 版本。
    /// </summary>
    property ServicePack: string read get_ServicePack;
    /// <summary>
    ///   获取标识操作系统的  对象。
    /// </summary>
    property Version: DNVersion read get_Version;
    /// <summary>
    ///   获取平台标识符、版本和当前安装在操作系统上的 Service Pack 的连接字符串表示形式。
    /// </summary>
    property VersionString: string read get_VersionString;
  end;

  TDNOperatingSystem = class(TDNGenericImport<DNOperatingSystemClass, DNOperatingSystem>) end;

  //-------------namespace: System----------------
  DNRandomClass = interface(DNObjectClass)
  ['{D123235D-0187-4E98-A097-E4859A7BA728}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，使用依赖于时间的默认种子值。
    /// </summary>
    {class} function init: DNRandom; overload;
    /// <summary>
    ///   新实例初始化  类，使用指定的种子值。
    /// </summary>
    {class} function init(Seed: Int32): DNRandom; overload;

  end;

  /// <summary>
  ///   表示伪随机数生成器，这是一种能够产生满足某些随机性统计要求的数字序列的设备。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.Random')]
  DNRandom = interface(DNObject)
  ['{4E77EC8F-51D8-386C-85FE-7DC931B7A8E7}']
  { methods } 

    /// <summary>
    ///   返回一个非负随机整数。
    /// </summary>
    function Next: Int32; overload;
    /// <summary>
    ///   返回在指定范围内的任意整数。
    /// </summary>
    function Next(minValue: Int32; maxValue: Int32): Int32; overload;
    /// <summary>
    ///   返回一个小于所指定最大值的非负随机整数。
    /// </summary>
    function Next(maxValue: Int32): Int32; overload;
    /// <summary>
    ///   返回一个大于或等于 0.0 且小于 1.0 的随机浮点数。
    /// </summary>
    function NextDouble: Double;
    /// <summary>
    ///   用随机数填充指定字节数组的元素。
    /// </summary>
    procedure NextBytes(buffer: TArray<Byte>);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRandom = class(TDNGenericImport<DNRandomClass, DNRandom>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyClass = interface(DNObjectClass)
  ['{61E8C1C4-D559-49BC-9B8F-8BA25B29C199}']
  { static methods } 

    /// <summary>
    ///   获取当前加载的程序集在其中定义指定的类型。
    /// </summary>
    {class} function GetAssembly(&type: DNType): DNAssembly;
    /// <summary>
    ///   已知程序集的文件名或路径，加载程序集。
    /// </summary>
    {class} function LoadFrom(assemblyFile: string): DNAssembly; overload;
    /// <summary>
    ///   将给定路径的程序集加载到只反射上下文中。
    /// </summary>
    {class} function ReflectionOnlyLoadFrom(assemblyFile: string): DNAssembly;
    /// <summary>
    ///   在给定程序集的文件名或路径并提供安全证据的情况下，加载程序集。
    /// </summary>
    {class} function LoadFrom(assemblyFile: string; securityEvidence: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   通过给定程序集文件名或路径、安全证据、哈希值及哈希算法来加载程序集。
    /// </summary>
    {class} function LoadFrom(assemblyFile: string; securityEvidence: DNEvidence; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): DNAssembly; overload;
    /// <summary>
    ///   通过给定程序集文件名或路径、哈希值及哈希算法来加载程序集。
    /// </summary>
    {class} function LoadFrom(assemblyFile: string; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): DNAssembly; overload;
    /// <summary>
    ///   绕过某些安全检查，将程序集加载到加载源上下文中。
    /// </summary>
    {class} function UnsafeLoadFrom(assemblyFile: string): DNAssembly;
    /// <summary>
    ///   通过给定程序集的长格式名称加载程序集。
    /// </summary>
    {class} function Load(assemblyString: string): DNAssembly; overload;
    /// <summary>
    ///   将给定显示名称的程序集加载到只反射上下文中。
    /// </summary>
    {class} function ReflectionOnlyLoad(assemblyString: string): DNAssembly; overload;
    /// <summary>
    ///   通过给定的程序集的显示名称来加载程序集，使用提供的证据将程序集加载到调用方的域中。
    /// </summary>
    {class} function Load(assemblyString: string; assemblySecurity: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   在给定程序集的  的情况下，加载程序集。
    /// </summary>
    {class} function Load(assemblyRef: DNAssemblyName): DNAssembly; overload;
    /// <summary>
    ///   在给定程序集的  的情况下，加载程序集。
    ///               使用提供的证据将该程序集加载到调用方的域中。
    /// </summary>
    {class} function Load(assemblyRef: DNAssemblyName; assemblySecurity: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   使用部分名称从应用程序目录或从全局程序集缓存加载程序集。
    /// </summary>
    {class} function LoadWithPartialName(partialName: string): DNAssembly; overload;
    /// <summary>
    ///   使用部分名称从应用程序目录或从全局程序集缓存加载程序集。
    ///               使用提供的证据将该程序集加载到调用方的域中。
    /// </summary>
    {class} function LoadWithPartialName(partialName: string; securityEvidence: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   加载带有基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含已发出的程序集。
    ///               此程序集将会加载到调用方的应用程序域中。
    /// </summary>
    {class} function Load(rawAssembly: TArray<Byte>): DNAssembly; overload;
    /// <summary>
    ///   加载来自基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含已发出的程序集。
    ///               程序集被加载到调用方的应用程序域的只反射上下文中。
    /// </summary>
    {class} function ReflectionOnlyLoad(rawAssembly: TArray<Byte>): DNAssembly; overload;
    /// <summary>
    ///   加载带有基于通用对象文件格式 (COFF) 的映像的程序集，此映像包含一个已发出的程序集，并且还可以选择包括程序集的符号。
    ///               此程序集将会加载到调用方的应用程序域中。
    /// </summary>
    {class} function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNAssembly; overload;
    /// <summary>
    ///   加载带有基于通用对象文件格式 (COFF) 的映像的程序集，此映像包含一个已发出的程序集，并且还可选择包括符号和指定安全上下文的源。
    ///               此程序集将会加载到调用方的应用程序域中。
    /// </summary>
    {class} function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>; securityContextSource: DNSecurityContextSource): DNAssembly; overload;
    /// <summary>
    ///   加载带有基于通用对象文件格式 (COFF) 的映像的程序集，此映像包含一个已发出的程序集，并且还可选择包括程序集的符号和证据。
    ///               此程序集将会加载到调用方的应用程序域中。
    /// </summary>
    {class} function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>; securityEvidence: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   加载指定路径上的程序集文件的内容。
    /// </summary>
    {class} function LoadFile(path: string): DNAssembly; overload;
    /// <summary>
    ///   通过给定的程序集的路径来加载程序集，使用提供的证据将程序集加载到调用方的域中。
    /// </summary>
    {class} function LoadFile(path: string; securityEvidence: DNEvidence): DNAssembly; overload;
    /// <summary>
    ///   获取包含当前执行的代码的程序集。
    /// </summary>
    {class} function GetExecutingAssembly: DNAssembly;
    /// <summary>
    ///   返回方法（该方法调用当前正在执行的方法）的 。
    /// </summary>
    {class} function GetCallingAssembly: DNAssembly;
    /// <summary>
    ///   获取默认应用程序域中的进程可执行文件。
    ///               在其他的应用程序域中，这是由  执行的第一个可执行文件。
    /// </summary>
    {class} function GetEntryAssembly: DNAssembly;
    /// <summary>
    ///   创建由类型的程序集的显示名称限定的类型的名称。
    /// </summary>
    {class} function CreateQualifiedName(assemblyName: string; typeName: string): string;

  end;

  /// <summary>
  ///   表示一个程序集，它是一个可重用、无版本冲突并且可自我描述的公共语言运行时应用程序构建基块。
  /// </summary>
  [DNTypeName('System.Reflection.Assembly')]
  DNAssembly = interface(DNObject)
  ['{28E89A9F-E67D-3028-AA1B-E5EBCDE6F3C8}']
  { getter & setter } 

    function get_CodeBase: string;
    function get_EscapedCodeBase: string;
    function get_FullName: string;
    function get_EntryPoint: DNMethodInfo;
    function get_ExportedTypes: DNIEnumerable<DNType>;
    function get_DefinedTypes: DNIEnumerable<DNTypeInfo>;
    function get_Evidence: DNEvidence;
    function get_PermissionSet: DNPermissionSet;
    function get_IsFullyTrusted: Boolean;
    function get_SecurityRuleSet: DNSecurityRuleSet;
    function get_ManifestModule: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_ReflectionOnly: Boolean;
    function get_Modules: DNIEnumerable<DNModule>;
    function get_Location: string;
    function get_ImageRuntimeVersion: string;
    function get_GlobalAssemblyCache: Boolean;
    function get_HostContext: Int64;
    function get_IsDynamic: Boolean;

  { methods } 

    /// <summary>
    ///   确定此程序集和指定的对象是否相等。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   获取此程序集的 。
    /// </summary>
    function GetName: DNAssemblyName; overload;
    /// <summary>
    ///   获取此程序集的 ，并按  指定的那样设置基本代码。
    /// </summary>
    function GetName(copiedName: Boolean): DNAssemblyName; overload;
    /// <summary>
    ///   获取程序集实例中具有指定名称的  对象。
    /// </summary>
    function GetType(name: string): DNType; overload;
    /// <summary>
    ///   获取程序集实例中具有指定名称的  对象，并选择在找不到该类型时引发异常。
    /// </summary>
    function GetType(name: string; throwOnError: Boolean): DNType; overload;
    /// <summary>
    ///   获取程序集实例中具有指定名称的  对象，带有忽略大小写和在找不到该类型时引发异常的选项。
    /// </summary>
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   获取此程序集中定义的公共类型，这些公共类型在程序集外可见。
    /// </summary>
    function GetExportedTypes: TArray<DNType>;
    /// <summary>
    ///   获取此程序集中定义的类型。
    /// </summary>
    function GetTypes: TArray<DNType>;
    /// <summary>
    ///   从此程序集加载指定清单资源，清单资源的范围由指定类型的命名空间确定。
    /// </summary>
    function GetManifestResourceStream(&type: DNType; name: string): DNStream; overload;
    /// <summary>
    ///   从此程序集加载指定的清单资源。
    /// </summary>
    function GetManifestResourceStream(name: string): DNStream; overload;
    /// <summary>
    ///   获取指定区域性的附属程序集。
    /// </summary>
    function GetSatelliteAssembly(culture: DNCultureInfo): DNAssembly; overload;
    /// <summary>
    ///   获取指定区域性的附属程序集的指定版本。
    /// </summary>
    function GetSatelliteAssembly(culture: DNCultureInfo; version: DNVersion): DNAssembly; overload;
    /// <summary>
    ///   获取序列化信息，其中包含重新实例化此程序集所需的所有数据。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   获取此程序集的所有自定义属性。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   获取按类型指定的此程序集的自定义属性。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   指示指定的属性是否已应用于该程序集。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   返回有关已应用于当前 （表示为  对象）的特性的信息。
    /// </summary>
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    /// <summary>
    ///   加载带有基于通用对象文件格式 (COFF) 的映像（包含已发出的模块）或资源文件的模块（该模块相对于此程序集是内部的）。
    /// </summary>
    function LoadModule(moduleName: string; rawModule: TArray<Byte>): DNModule; overload;
    /// <summary>
    ///   加载带有基于通用对象文件格式 (COFF) 的映像（包含已发出的模块）或资源文件的模块（该模块相对于此程序集是内部的）。
    ///               还加载表示此模块的符号的原始字节。
    /// </summary>
    function LoadModule(moduleName: string; rawModule: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNModule; overload;
    /// <summary>
    ///   使用区分大小写的搜索，从此程序集中查找指定的类型，然后使用系统激活器创建它的实例。
    /// </summary>
    function CreateInstance(typeName: string): DNObject; overload;
    /// <summary>
    ///   使用可选的区分大小写搜索，从此程序集中查找指定的类型，然后使用系统激活器创建它的实例。
    /// </summary>
    function CreateInstance(typeName: string; ignoreCase: Boolean): DNObject; overload;
    /// <summary>
    ///   使用可选的区分大小写搜索并具有指定的区域性、参数和绑定及激活特性，从此程序集中查找指定的类型，并使用系统激活器创建它的实例。
    /// </summary>
    function CreateInstance(typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   获取作为此程序集的一部分的所有加载模块。
    /// </summary>
    function GetLoadedModules: TArray<DNModule>; overload;
    /// <summary>
    ///   获取属于此程序集的所有已加载模块，同时指定是否包括资源模块。
    /// </summary>
    function GetLoadedModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    /// <summary>
    ///   获取作为此程序集的一部分的所有模块。
    /// </summary>
    function GetModules: TArray<DNModule>; overload;
    /// <summary>
    ///   获取属于此程序集的所有模块，同时指定是否包括资源模块。
    /// </summary>
    function GetModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    /// <summary>
    ///   获取此程序集中的指定模块。
    /// </summary>
    function GetModule(name: string): DNModule;
    /// <summary>
    ///   获取此程序集清单的文件表中指定文件的 。
    /// </summary>
    function GetFile(name: string): DNFileStream;
    /// <summary>
    ///   获取程序集清单文件表中的文件。
    /// </summary>
    function GetFiles: TArray<DNFileStream>; overload;
    /// <summary>
    ///   获取程序集清单的文件表中的文件，指定是否包括资源模块。
    /// </summary>
    function GetFiles(getResourceModules: Boolean): TArray<DNFileStream>; overload;
    /// <summary>
    ///   返回此程序集中的所有资源的名称。
    /// </summary>
    function GetManifestResourceNames: TArray<string>;
    /// <summary>
    ///   获取此程序集引用的所有程序集的  对象。
    /// </summary>
    function GetReferencedAssemblies: TArray<DNAssemblyName>;
    /// <summary>
    ///   返回关于给定资源如何保持的信息。
    /// </summary>
    function GetManifestResourceInfo(resourceName: string): DNManifestResourceInfo;
    /// <summary>
    ///   返回程序集的全名，即所谓的显示名称。
    /// </summary>
    function ToString: string;
    function GetType: DNType; overload;

  { propertys } 

    /// <summary>
    ///   获取最初指定的程序集的位置，例如，在  对象中指定的位置。
    /// </summary>
    property CodeBase: string read get_CodeBase;
    /// <summary>
    ///   获取 URI，包括表示基本代码的转义符。
    /// </summary>
    property EscapedCodeBase: string read get_EscapedCodeBase;
    /// <summary>
    ///   获取程序集的显示名称。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   获取此程序集的入口点。
    /// </summary>
    property EntryPoint: DNMethodInfo read get_EntryPoint;
    /// <summary>
    ///   获取此程序集中定义的公共类型的集合，这些公共类型在程序集外可见。
    /// </summary>
    property ExportedTypes: DNIEnumerable<DNType> read get_ExportedTypes;
    /// <summary>
    ///   获取定义在此程序集中的类型的集合。
    /// </summary>
    property DefinedTypes: DNIEnumerable<DNTypeInfo> read get_DefinedTypes;
    /// <summary>
    ///   获取此程序集的证据。
    /// </summary>
    property Evidence: DNEvidence read get_Evidence;
    /// <summary>
    ///   获取当前程序集的授予集。
    /// </summary>
    property PermissionSet: DNPermissionSet read get_PermissionSet;
    /// <summary>
    ///   获取一个值，该值指示当前程序集是否是以完全信任方式加载的。
    /// </summary>
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    /// <summary>
    ///   获取一个值，该值指示公共语言运行时 (CLR) 对此程序集强制执行的安全规则集。
    /// </summary>
    property SecurityRuleSet: DNSecurityRuleSet read get_SecurityRuleSet;
    /// <summary>
    ///   获取包含当前程序集清单的模块。
    /// </summary>
    property ManifestModule: DNModule read get_ManifestModule;
    /// <summary>
    ///   获取包含此程序集自定义属性的集合。
    /// </summary>
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    /// <summary>
    ///   获取  值，该值指示此程序集是否被加载到只反射上下文中。
    /// </summary>
    property ReflectionOnly: Boolean read get_ReflectionOnly;
    /// <summary>
    ///   获取包含此程序集中模块的集合。
    /// </summary>
    property Modules: DNIEnumerable<DNModule> read get_Modules;
    /// <summary>
    ///   获取包含清单的已加载文件的完整路径或 UNC 位置。
    /// </summary>
    property Location: string read get_Location;
    /// <summary>
    ///   获取表示公共语言运行时 (CLR) 的版本的字符串，该信息保存在包含清单的文件中。
    /// </summary>
    property ImageRuntimeVersion: string read get_ImageRuntimeVersion;
    /// <summary>
    ///   获取一个值，该值指示程序集是否是从全局程序集缓存加载的。
    /// </summary>
    property GlobalAssemblyCache: Boolean read get_GlobalAssemblyCache;
    /// <summary>
    ///   获取用于加载程序集的主机上下文。
    /// </summary>
    property HostContext: Int64 read get_HostContext;
    /// <summary>
    ///   获取一个值，该值指示当前程序集是否是通过使用反射发出在当前进程中动态生成的。
    /// </summary>
    property IsDynamic: Boolean read get_IsDynamic;
  end;

  TDNAssembly = class(TDNGenericImport<DNAssemblyClass, DNAssembly>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNAssemblyBuilderClass = interface(DNAssemblyClass)
  ['{B91C2FD8-F38D-41E9-8101-F21BC298AA99}']
  { static methods } 

    /// <summary>
    ///   定义具有指定名称和访问权限的动态程序集。
    /// </summary>
    {class} function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess): DNAssemblyBuilder; overload;
    {class} function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>): DNAssemblyBuilder; overload;

  end;

  /// <summary>
  ///   定义并表示动态程序集。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.AssemblyBuilder')]
  DNAssemblyBuilder = interface(DNAssembly)
  ['{0814BE2A-48E5-3D61-90F3-EF3D05DF9D5E}']
  { getter & setter } 

    function get_Location: string;
    function get_ImageRuntimeVersion: string;
    function get_CodeBase: string;
    function get_EntryPoint: DNMethodInfo;
    function get_FullName: string;
    function get_Evidence: DNEvidence;
    function get_PermissionSet: DNPermissionSet;
    function get_SecurityRuleSet: DNSecurityRuleSet;
    function get_ManifestModule: DNModule;
    function get_ReflectionOnly: Boolean;
    function get_GlobalAssemblyCache: Boolean;
    function get_HostContext: Int64;
    function get_IsDynamic: Boolean;
    function get_EscapedCodeBase: string;
    function get_ExportedTypes: DNIEnumerable<DNType>;
    function get_DefinedTypes: DNIEnumerable<DNTypeInfo>;
    function get_IsFullyTrusted: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_Modules: DNIEnumerable<DNModule>;

  { methods } 

    /// <summary>
    ///   在此程序集中定义命名的暂时动态模块。
    /// </summary>
    function DefineDynamicModule(name: string): DNModuleBuilder; overload;
    /// <summary>
    ///   在此程序集中定义一个暂时动态模块，并指定是否应发出符号信息。
    /// </summary>
    function DefineDynamicModule(name: string; emitSymbolInfo: Boolean): DNModuleBuilder; overload;
    /// <summary>
    ///   定义具有给定名称的持久动态模块，该模块将保存到指定文件中。
    ///               未发出符号信息。
    /// </summary>
    function DefineDynamicModule(name: string; fileName: string): DNModuleBuilder; overload;
    /// <summary>
    ///   定义一个持久的动态模块，指定模块名称、模块将保存到的文件的名称，并指定是否使用默认符号编写器发出符号信息。
    /// </summary>
    function DefineDynamicModule(name: string; fileName: string; emitSymbolInfo: Boolean): DNModuleBuilder; overload;
    /// <summary>
    ///   使用默认公共资源属性，为此程序集定义一个独立托管资源。
    /// </summary>
    function DefineResource(name: string; description: string; fileName: string): DNIResourceWriter; overload;
    /// <summary>
    ///   定义此程序集的独立托管资源。
    ///               可以为托管资源指定的属性。
    /// </summary>
    function DefineResource(name: string; description: string; fileName: string; attribute: DNResourceAttributes): DNIResourceWriter; overload;
    /// <summary>
    ///   将现有资源文件添加到此程序集。
    /// </summary>
    procedure AddResourceFile(name: string; fileName: string); overload;
    /// <summary>
    ///   将现有资源文件添加到此程序集。
    /// </summary>
    procedure AddResourceFile(name: string; fileName: string; attribute: DNResourceAttributes); overload;
    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回已应用于当前的所有自定义特性 。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回已应用于当前  的所有自定义特性和派生自指定特性类型的所有自定义特性。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回一个值，该值指示是否将指定特性类型的一个或多个实例应用于此成员。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   返回  对象，这些对象包含已应用到当前  的特性的相关信息。
    /// </summary>
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    /// <summary>
    ///   从此程序集加载指定的清单资源。
    /// </summary>
    function GetManifestResourceNames: TArray<string>;
    /// <summary>
    ///   获取此程序集清单的文件表中指定文件的 。
    /// </summary>
    function GetFile(name: string): DNFileStream;
    /// <summary>
    ///   获取程序集清单的文件表中的文件，指定是否包括资源模块。
    /// </summary>
    function GetFiles(getResourceModules: Boolean): TArray<DNFileStream>; overload;
    /// <summary>
    ///   从此程序集加载指定清单资源，清单资源的范围由指定类型的命名空间确定。
    /// </summary>
    function GetManifestResourceStream(&type: DNType; name: string): DNStream; overload;
    /// <summary>
    ///   从此程序集加载指定的清单资源。
    /// </summary>
    function GetManifestResourceStream(name: string): DNStream; overload;
    /// <summary>
    ///   返回关于给定资源如何保持的信息。
    /// </summary>
    function GetManifestResourceInfo(resourceName: string): DNManifestResourceInfo;
    /// <summary>
    ///   获取此程序集中定义的导出类型。
    /// </summary>
    function GetExportedTypes: TArray<DNType>;
    /// <summary>
    ///   获取在创建当前动态程序集时指定的 ，并将基本代码设置为指定代码。
    /// </summary>
    function GetName(copiedName: Boolean): DNAssemblyName; overload;
    /// <summary>
    ///   从已在  中定义并创建的类型中获取指定的类型。
    /// </summary>
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   获取此程序集中的指定模块。
    /// </summary>
    function GetModule(name: string): DNModule;
    /// <summary>
    ///   获取由此  引用的程序集的  对象的不完整列表。
    /// </summary>
    function GetReferencedAssemblies: TArray<DNAssemblyName>;
    /// <summary>
    ///   获取属于此程序集的所有模块，并根据需要包括资源模块。
    /// </summary>
    function GetModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    /// <summary>
    ///   返回属于此程序集的所有已加载模块，并根据需要包括资源模块。
    /// </summary>
    function GetLoadedModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    /// <summary>
    ///   获取指定区域性的附属程序集。
    /// </summary>
    function GetSatelliteAssembly(culture: DNCultureInfo): DNAssembly; overload;
    /// <summary>
    ///   获取指定区域性的附属程序集的指定版本。
    /// </summary>
    function GetSatelliteAssembly(culture: DNCultureInfo; version: DNVersion): DNAssembly; overload;
    /// <summary>
    ///   对此具有给定规范的程序集，定义一个非托管的版本信息资源。
    /// </summary>
    procedure DefineVersionInfoResource(product: string; productVersion: string; company: string; copyright: string; trademark: string); overload;
    /// <summary>
    ///   使用在程序集的 AssemblyName 对象中指定的信息和程序集的自定义特性，定义一个非托管的版本信息资源。
    /// </summary>
    procedure DefineVersionInfoResource; overload;
    /// <summary>
    ///   将此程序集的非托管资源定义为字节的不透明 blob。
    /// </summary>
    procedure DefineUnmanagedResource(resource: TArray<Byte>); overload;
    /// <summary>
    ///   定义此程序集的非托管资源文件（已知资源文件名）。
    /// </summary>
    procedure DefineUnmanagedResource(resourceFileName: string); overload;
    /// <summary>
    ///   返回具有指定名称的动态模块。
    /// </summary>
    function GetDynamicModule(name: string): DNModuleBuilder;
    /// <summary>
    ///   为此动态程序集设置一个入口点，假设正构建一个控制台应用程序。
    /// </summary>
    procedure SetEntryPoint(entryMethod: DNMethodInfo); overload;
    /// <summary>
    ///   设置此程序集的入口点并定义正在生成的可移植执行文件（PE 文件）的类型。
    /// </summary>
    procedure SetEntryPoint(entryMethod: DNMethodInfo; fileKind: DNPEFileKinds); overload;
    /// <summary>
    ///   使用指定的自定义属性 blob 在此程序集上设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   使用自定义属性生成器设置此程序集的自定义属性。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    /// <summary>
    ///   将此动态程序集保存到磁盘。
    /// </summary>
    procedure Save(assemblyFileName: string); overload;
    /// <summary>
    ///   将此动态程序集保存到磁盘，并指定此程序集的可执行文件中代码的性质以及目标平台。
    /// </summary>
    procedure Save(assemblyFileName: string; portableExecutableKind: DNPortableExecutableKinds; imageFileMachine: DNImageFileMachine); overload;
    function GetName: DNAssemblyName; overload;
    function GetType(name: string): DNType; overload;
    function GetType(name: string; throwOnError: Boolean): DNType; overload;
    function GetTypes: TArray<DNType>;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function LoadModule(moduleName: string; rawModule: TArray<Byte>): DNModule; overload;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNModule; overload;
    function CreateInstance(typeName: string): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function GetLoadedModules: TArray<DNModule>; overload;
    function GetModules: TArray<DNModule>; overload;
    function GetFiles: TArray<DNFileStream>; overload;
    function ToString: string;
    function GetType: DNType; overload;

  { propertys } 

    /// <summary>
    ///   如果包含清单的已加载文件未进行卷影复制，则以基本代码格式获取其位置。
    /// </summary>
    property Location: string read get_Location;
    /// <summary>
    ///   获取将保存在包含清单的文件中的公共语言运行时的版本。
    /// </summary>
    property ImageRuntimeVersion: string read get_ImageRuntimeVersion;
    /// <summary>
    ///   获取最初指定的程序集的位置（例如，在  对象中）。
    /// </summary>
    property CodeBase: string read get_CodeBase;
    /// <summary>
    ///   返回此程序集的入口点。
    /// </summary>
    property EntryPoint: DNMethodInfo read get_EntryPoint;
    /// <summary>
    ///   获取当前动态程序集的显示名称。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   获取此程序集的证据。
    /// </summary>
    property Evidence: DNEvidence read get_Evidence;
    /// <summary>
    ///   获取当前动态程序集的授予集。
    /// </summary>
    property PermissionSet: DNPermissionSet read get_PermissionSet;
    /// <summary>
    ///   获取一个值，该值指示公共语言运行时 (CLR) 对此程序集强制执行的安全规则集。
    /// </summary>
    property SecurityRuleSet: DNSecurityRuleSet read get_SecurityRuleSet;
    /// <summary>
    ///   获取当前  中包含程序集清单的模块。
    /// </summary>
    property ManifestModule: DNModule read get_ManifestModule;
    /// <summary>
    ///   获取一个值，该值指示动态程序集是否位于仅反射上下文中。
    /// </summary>
    property ReflectionOnly: Boolean read get_ReflectionOnly;
    /// <summary>
    ///   获取一个值，该值指示该程序集是否已从全局程序集缓存中加载。
    /// </summary>
    property GlobalAssemblyCache: Boolean read get_GlobalAssemblyCache;
    /// <summary>
    ///   获取正在创建动态程序集的宿主上下文。
    /// </summary>
    property HostContext: Int64 read get_HostContext;
    /// <summary>
    ///   获取一个值，该值指示当前程序集是动态程序集。
    /// </summary>
    property IsDynamic: Boolean read get_IsDynamic;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property ExportedTypes: DNIEnumerable<DNType> read get_ExportedTypes;
    property DefinedTypes: DNIEnumerable<DNTypeInfo> read get_DefinedTypes;
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property Modules: DNIEnumerable<DNModule> read get_Modules;
  end;

  TDNAssemblyBuilder = class(TDNGenericImport<DNAssemblyBuilderClass, DNAssemblyBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyNameClass = interface(DNObjectClass)
  ['{CF9D50A6-2538-4714-B7CB-40435CFEF6B3}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNAssemblyName; overload;
    /// <summary>
    ///   使用指定的显示名称初始化  类的新实例。
    /// </summary>
    {class} function init(assemblyName: string): DNAssemblyName; overload;

  { static methods } 

    /// <summary>
    ///   获取  对于给定的文件。
    /// </summary>
    {class} function GetAssemblyName(assemblyFile: string): DNAssemblyName;
    /// <summary>
    ///   返回一个值，该值指示两个程序集名称是否相同。
    ///               比较基于简单程序集名称。
    /// </summary>
    {class} function ReferenceMatchesDefinition(reference: DNAssemblyName; definition: DNAssemblyName): Boolean;

  end;

  /// <summary>
  ///   完整描述程序集的唯一标识。
  /// </summary>
  [DNTypeName('System.Reflection.AssemblyName')]
  DNAssemblyName = interface(DNObject)
  ['{F12FDE6A-9394-3C32-8E4D-F3D470947284}']
  { getter & setter } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Version: DNVersion;
    procedure set_Version(value: DNVersion);
    function get_CultureInfo: DNCultureInfo;
    procedure set_CultureInfo(value: DNCultureInfo);
    function get_CultureName: string;
    procedure set_CultureName(value: string);
    function get_CodeBase: string;
    procedure set_CodeBase(value: string);
    function get_EscapedCodeBase: string;
    function get_ProcessorArchitecture: DNProcessorArchitecture;
    procedure set_ProcessorArchitecture(value: DNProcessorArchitecture);
    function get_ContentType: DNAssemblyContentType;
    procedure set_ContentType(value: DNAssemblyContentType);
    function get_Flags: DNAssemblyNameFlags;
    procedure set_Flags(value: DNAssemblyNameFlags);
    function get_HashAlgorithm: DNAssemblyHashAlgorithm;
    procedure set_HashAlgorithm(value: DNAssemblyHashAlgorithm);
    function get_VersionCompatibility: DNAssemblyVersionCompatibility;
    procedure set_VersionCompatibility(value: DNAssemblyVersionCompatibility);
    function get_KeyPair: DNStrongNameKeyPair;
    procedure set_KeyPair(value: DNStrongNameKeyPair);
    function get_FullName: string;

  { methods } 

    /// <summary>
    ///   创建此副本  对象。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   获取程序集的公钥。
    /// </summary>
    function GetPublicKey: TArray<Byte>;
    /// <summary>
    ///   设置标识的程序集的公钥。
    /// </summary>
    procedure SetPublicKey(publicKey: TArray<Byte>);
    /// <summary>
    ///   获取的公钥标记，这是在应用程序集签名的公钥的 sha-1 哈希的最后 8 个字节。
    /// </summary>
    function GetPublicKeyToken: TArray<Byte>;
    /// <summary>
    ///   设置的公钥标记，这是在应用程序集签名的公钥的 sha-1 哈希的最后 8 个字节。
    /// </summary>
    procedure SetPublicKeyToken(publicKeyToken: TArray<Byte>);
    /// <summary>
    ///   返回程序集的全名，即所谓的显示名称。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   用重新创建此实例所需的所有数据获取序列化信息 。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   实现  接口，并在完成反序列化后由反序列化事件回调。
    /// </summary>
    procedure OnDeserialization(sender: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置程序集的简单名称。
    ///               这是通常情况下，但不是一定是该程序集，包括其扩展名的清单文件的文件名。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置主版本号、 次版本号、 内部版本和修订号的程序集。
    /// </summary>
    property Version: DNVersion read get_Version write set_Version;
    /// <summary>
    ///   获取或设置程序集支持的区域性。
    /// </summary>
    property CultureInfo: DNCultureInfo read get_CultureInfo write set_CultureInfo;
    /// <summary>
    ///   获取或设置与该程序集关联的区域性的名称。
    /// </summary>
    property CultureName: string read get_CultureName write set_CultureName;
    /// <summary>
    ///   获取或设置作为 URL 的程序集的位置。
    /// </summary>
    property CodeBase: string read get_CodeBase write set_CodeBase;
    /// <summary>
    ///   获取 URI，包括表示基本代码的转义符。
    /// </summary>
    property EscapedCodeBase: string read get_EscapedCodeBase;
    /// <summary>
    ///   获取或设置一个值，标识的处理器和可执行文件的目标平台的每字位数。
    /// </summary>
    property ProcessorArchitecture: DNProcessorArchitecture read get_ProcessorArchitecture write set_ProcessorArchitecture;
    /// <summary>
    ///   获取或设置一个值，指示该程序集包含的内容类型。
    /// </summary>
    property ContentType: DNAssemblyContentType read get_ContentType write set_ContentType;
    /// <summary>
    ///   获取或设置程序集的特性。
    /// </summary>
    property Flags: DNAssemblyNameFlags read get_Flags write set_Flags;
    /// <summary>
    ///   获取或设置程序集清单使用的哈希算法。
    /// </summary>
    property HashAlgorithm: DNAssemblyHashAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    /// <summary>
    ///   获取或设置与其他程序集的程序集的兼容性相关的信息。
    /// </summary>
    property VersionCompatibility: DNAssemblyVersionCompatibility read get_VersionCompatibility write set_VersionCompatibility;
    /// <summary>
    ///   获取或设置的公钥和私钥加密密钥对用于创建该程序集的强名称签名。
    /// </summary>
    property KeyPair: DNStrongNameKeyPair read get_KeyPair write set_KeyPair;
    /// <summary>
    ///   获取程序集，也称为显示名称的完整名称。
    /// </summary>
    property FullName: string read get_FullName;
  end;

  TDNAssemblyName = class(TDNGenericImport<DNAssemblyNameClass, DNAssemblyName>) end;

  //-------------namespace: System.Reflection----------------
  DNBinderClass = interface(DNObjectClass)
  ['{B0961C5B-82DF-421D-87D3-1DF203851BD0}']
  end;

  /// <summary>
  ///   从候选列表中，选择一个成员，并执行从实参类型到形参类型的类型转换。
  /// </summary>
  [DNTypeName('System.Reflection.Binder')]
  DNBinder = interface(DNObject)
  ['{74A6B90C-8710-32DA-BBF7-9D4445E071E9}']
  { methods } 

    function BindToMethod(bindingAttr: DNBindingFlags; match: TArray<DNMethodBase>; out args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; names: TArray<string>; out state: DNObject): DNMethodBase;
    /// <summary>
    ///   从一组指定的字段中，基于指定的条件中选择一个域。
    /// </summary>
    function BindToField(bindingAttr: DNBindingFlags; match: TArray<DNFieldInfo>; value: DNObject; culture: DNCultureInfo): DNFieldInfo;
    /// <summary>
    ///   选择从一组指定的方法，基于参数类型的方法。
    /// </summary>
    function SelectMethod(bindingAttr: DNBindingFlags; match: TArray<DNMethodBase>; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodBase;
    /// <summary>
    ///   从给定组的属性，基于指定的条件中选择一个属性。
    /// </summary>
    function SelectProperty(bindingAttr: DNBindingFlags; match: TArray<DNPropertyInfo>; returnType: DNType; indexes: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo;
    /// <summary>
    ///   类型更改给定  到给定 。
    /// </summary>
    function ChangeType(value: DNObject; &type: DNType; culture: DNCultureInfo): DNObject;
    procedure ReorderArgumentArray(out args: TArray<DNObject>; state: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNBinder = class(TDNGenericImport<DNBinderClass, DNBinder>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeDataClass = interface(DNObjectClass)
  ['{05E53363-079D-4E0B-8703-04F508D8B290}']
  { static methods } 

    /// <summary>
    ///   返回  对象列表，这些对象表示已应用到目标成员的特性相关数据。
    /// </summary>
    {class} function GetCustomAttributes(target: DNMemberInfo): DNIList<DNCustomAttributeData>; overload;
    /// <summary>
    ///   返回  对象列表，这些对象表示已应用到目标模块的特性相关数据。
    /// </summary>
    {class} function GetCustomAttributes(target: DNModule): DNIList<DNCustomAttributeData>; overload;
    /// <summary>
    ///   返回  对象列表，这些对象表示已应用到目标程序集的特性相关数据。
    /// </summary>
    {class} function GetCustomAttributes(target: DNAssembly): DNIList<DNCustomAttributeData>; overload;
    /// <summary>
    ///   返回  对象列表，这些对象表示已应用到目标参数的特性相关数据。
    /// </summary>
    {class} function GetCustomAttributes(target: DNParameterInfo): DNIList<DNCustomAttributeData>; overload;

  end;

  /// <summary>
  ///   提供对加载到仅反射上下文的程序集、模块、类型、成员和参数的自定义属性数据的访问权限。
  /// </summary>
  [DNTypeName('System.Reflection.CustomAttributeData')]
  DNCustomAttributeData = interface(DNObject)
  ['{C2655AE8-0193-35D4-855E-F64909065C1E}']
  { getter & setter } 

    function get_AttributeType: DNType;
    function get_Constructor: DNConstructorInfo;
    function get_ConstructorArguments: DNIList<DNCustomAttributeTypedArgument>;
    function get_NamedArguments: DNIList<DNCustomAttributeNamedArgument>;

  { methods } 

    /// <summary>
    ///   用作特定类型的哈希函数。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回的字符串表示形式的自定义属性。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取该属性的类型。
    /// </summary>
    property AttributeType: DNType read get_AttributeType;
    /// <summary>
    ///   获取一个  对象，表示应已初始化自定义属性的构造函数。
    /// </summary>
    property &Constructor: DNConstructorInfo read get_Constructor;
    /// <summary>
    ///   获取位置为指定的参数所表示的属性实例的列表  对象。
    /// </summary>
    property ConstructorArguments: DNIList<DNCustomAttributeTypedArgument> read get_ConstructorArguments;
    /// <summary>
    ///   获取已命名为指定的参数所表示的属性实例的列表  对象。
    /// </summary>
    property NamedArguments: DNIList<DNCustomAttributeNamedArgument> read get_NamedArguments;
  end;

  TDNCustomAttributeData = class(TDNGenericImport<DNCustomAttributeDataClass, DNCustomAttributeData>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeExtensionsClass = interface(DNObjectClass)
  ['{17FEAE28-4C6E-4AE7-B32B-61E98EA3A817}']
  { static methods } 

    /// <summary>
    ///   检索应用于指定的程序集的指定类型的自定义属性。
    /// </summary>
    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType): DNAttribute; overload;
    /// <summary>
    ///   检索指定类型的应用于指定的模块的自定义属性。
    /// </summary>
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType): DNAttribute; overload;
    /// <summary>
    ///   检索指定类型的应用于指定的成员的自定义属性。
    /// </summary>
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType): DNAttribute; overload;
    /// <summary>
    ///   检索应用于指定的参数的指定类型的自定义属性。
    /// </summary>
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType): DNAttribute; overload;
    /// <summary>
    ///   检索指定类型的应用于指定的成员，并根据需要检查该成员的祖先的自定义属性。
    /// </summary>
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    /// <summary>
    ///   检索应用于指定的参数，并根据需要检查该参数的祖先的指定类型的自定义属性。
    /// </summary>
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    /// <summary>
    ///   检索应用于指定的程序集的自定义特性的集合。
    /// </summary>
    {class} function GetCustomAttributes(element: DNAssembly): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于指定的模块的自定义特性的集合。
    /// </summary>
    {class} function GetCustomAttributes(element: DNModule): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于指定的成员的自定义特性的集合。
    /// </summary>
    {class} function GetCustomAttributes(element: DNMemberInfo): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于指定的参数的自定义特性的集合。
    /// </summary>
    {class} function GetCustomAttributes(element: DNParameterInfo): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于指定成员的自定义特性的集合，并根据需要检查该成员的祖先。
    /// </summary>
    {class} function GetCustomAttributes(element: DNMemberInfo; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于指定的参数的自定义特性的集合，并根据需要检查该参数的祖先。
    /// </summary>
    {class} function GetCustomAttributes(element: DNParameterInfo; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索具有指定类型的自定义应用于指定的程序集的特性的集合。
    /// </summary>
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索具有指定类型的自定义应用于指定的模块的属性的集合。
    /// </summary>
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索具有指定类型的自定义应用于指定的成员的特性的集合。
    /// </summary>
    {class} function GetCustomAttributes(element: DNMemberInfo; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于指定的参数的自定义特性的指定类型的集合。
    /// </summary>
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于指定成员的自定义特性的指定类型的集合，并根据需要检查该成员的祖先。
    /// </summary>
    {class} function GetCustomAttributes(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   检索应用于指定的参数的自定义特性的指定类型的集合，并根据需要检查该参数的祖先。
    /// </summary>
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    /// <summary>
    ///   指示是否为指定类型的自定义特性随即应用于指定的程序集。
    /// </summary>
    {class} function IsDefined(element: DNAssembly; attributeType: DNType): Boolean; overload;
    /// <summary>
    ///   指示是否为指定类型的自定义特性随即应用于指定的模块。
    /// </summary>
    {class} function IsDefined(element: DNModule; attributeType: DNType): Boolean; overload;
    /// <summary>
    ///   指示是否为指定类型的自定义特性随即应用于指定的成员。
    /// </summary>
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType): Boolean; overload;
    /// <summary>
    ///   指示是否为指定类型的自定义特性应用于指定的参数。
    /// </summary>
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType): Boolean; overload;
    /// <summary>
    ///   指示是否为指定类型的自定义特性被应用于指定的成员，并，（可选） 应用到其祖先。
    /// </summary>
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    /// <summary>
    ///   指示是否为指定类型的自定义特性被应用于指定的参数，并，（可选） 应用到其祖先。
    /// </summary>
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;

  end;

  /// <summary>
  ///   包含用于检索自定义属性的静态方法。
  /// </summary>
  [DNTypeName('System.Reflection.CustomAttributeExtensions')]
  DNCustomAttributeExtensions = interface(DNObject)
  ['{FD5B3D3D-D6FF-364C-A510-1A90CBFF67AD}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCustomAttributeExtensions = class(TDNGenericImport<DNCustomAttributeExtensionsClass, DNCustomAttributeExtensions>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNCustomAttributeBuilderClass = interface(DNObjectClass)
  ['{8D2E65F2-D725-4D21-90D2-37A3B34662FA}']
  { constructors } 

    /// <summary>
    ///   在给定了自定义属性的构造函数和构造函数的参数的情况下，初始化  类的实例。
    /// </summary>
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    /// <summary>
    ///   初始化的实例  类为自定义属性、 参数的构造函数分配给构造函数中，以及一组命名的属性 / 值对。
    /// </summary>
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedProperties: TArray<DNPropertyInfo>; propertyValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    /// <summary>
    ///   初始化的实例  类为自定义属性、 参数的构造函数分配给构造函数中，以及一组命名的字段/值对。
    /// </summary>
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedFields: TArray<DNFieldInfo>; fieldValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    /// <summary>
    ///   初始化的实例  类赋予构造函数的自定义属性、 参数的构造函数、 命名的属性 / 值对一组和一组命名为字段 / 值对。
    /// </summary>
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedProperties: TArray<DNPropertyInfo>; propertyValues: TArray<DNObject>; namedFields: TArray<DNFieldInfo>; fieldValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;

  end;

  /// <summary>
  ///   帮助生成自定义属性。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.CustomAttributeBuilder')]
  DNCustomAttributeBuilder = interface(DNObject)
  ['{71BC3E08-0082-320A-8BA5-EFA8D2B9798A}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCustomAttributeBuilder = class(TDNGenericImport<DNCustomAttributeBuilderClass, DNCustomAttributeBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNDynamicILInfoClass = interface(DNObjectClass)
  ['{96772112-F66F-4346-860C-79FE2E3A4A90}']
  end;

  /// <summary>
  ///   提供对用于生成 Microsoft 中间语言 (MSIL) 的其他方法的支持和动态方法，包括方法来创建标记和用于插入代码、 异常处理和局部变量签名的 blob 的元数据。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.DynamicILInfo')]
  DNDynamicILInfo = interface(DNObject)
  ['{A6D0F5A1-9218-30D4-8AD7-18CA98AC8026}']
  { getter & setter } 

    function get_DynamicMethod: DNDynamicMethod;

  { methods } 

    /// <summary>
    ///   设置关联的动态方法的代码体。
    /// </summary>
    procedure SetCode(code: TArray<Byte>; maxStackSize: Int32); overload;
    /// <summary>
    ///   设置关联的动态方法的代码体。
    /// </summary>
    procedure SetCode(code: PByte; codeSize: Int32; maxStackSize: Int32); overload;
    /// <summary>
    ///   设置关联的动态方法的异常元数据。
    /// </summary>
    procedure SetExceptions(exceptions: TArray<Byte>); overload;
    /// <summary>
    ///   设置关联的动态方法的异常元数据。
    /// </summary>
    procedure SetExceptions(exceptions: PByte; exceptionsSize: Int32); overload;
    /// <summary>
    ///   设置描述的关联的动态方法的本地变量的布局的本地变量签名。
    /// </summary>
    procedure SetLocalSignature(localSignature: TArray<Byte>); overload;
    /// <summary>
    ///   设置描述的关联的动态方法的本地变量的布局的本地变量签名。
    /// </summary>
    procedure SetLocalSignature(localSignature: PByte; signatureSize: Int32); overload;
    /// <summary>
    ///   获取当前范围内有效的标记 , ，表示要从关联的动态方法访问的方法。
    /// </summary>
    function GetTokenFor(method: DNRuntimeMethodHandle): Int32; overload;
    /// <summary>
    ///   获取当前范围内有效的标记 , ，表示从关联的方法调用的动态方法。
    /// </summary>
    function GetTokenFor(method: DNDynamicMethod): Int32; overload;
    /// <summary>
    ///   获取当前范围内有效的标记 , ，表示泛型类型上的方法。
    /// </summary>
    function GetTokenFor(method: DNRuntimeMethodHandle; contextType: DNRuntimeTypeHandle): Int32; overload;
    /// <summary>
    ///   获取当前范围内有效的标记 , ，表示要从关联的动态方法访问的字段。
    /// </summary>
    function GetTokenFor(field: DNRuntimeFieldHandle): Int32; overload;
    /// <summary>
    ///   获取当前范围内有效的标记 , ，表示要从关联的动态方法; 访问的字段的字段是在指定的泛型类型。
    /// </summary>
    function GetTokenFor(field: DNRuntimeFieldHandle; contextType: DNRuntimeTypeHandle): Int32; overload;
    /// <summary>
    ///   获取当前范围内有效的标记 , ，表示要在关联的动态方法中使用的类型。
    /// </summary>
    function GetTokenFor(&type: DNRuntimeTypeHandle): Int32; overload;
    /// <summary>
    ///   获取当前范围内有效的标记 , ，表示字符串文字在关联的动态方法中使用。
    /// </summary>
    function GetTokenFor(literal: string): Int32; overload;
    /// <summary>
    ///   获取当前范围内有效的标记 , ，表示关联的动态方法的签名。
    /// </summary>
    function GetTokenFor(signature: TArray<Byte>): Int32; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取由当前实例生成它的主体的动态方法。
    /// </summary>
    property DynamicMethod: DNDynamicMethod read get_DynamicMethod;
  end;

  TDNDynamicILInfo = class(TDNGenericImport<DNDynamicILInfoClass, DNDynamicILInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEventBuilderClass = interface(DNObjectClass)
  ['{84341A74-4E4A-4AF1-A6C6-808579A8A90B}']
  end;

  /// <summary>
  ///   定义类的事件。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.EventBuilder')]
  DNEventBuilder = interface(DNObject)
  ['{DC18B7EC-91E4-3999-910A-188D7AFA0A68}']
  { methods } 

    /// <summary>
    ///   返回此事件的标记。
    /// </summary>
    function GetEventToken: DNEventToken;
    /// <summary>
    ///   设置用来订阅此事件的方法。
    /// </summary>
    procedure SetAddOnMethod(mdBuilder: DNMethodBuilder);
    /// <summary>
    ///   设置用于取消订阅此事件的方法。
    /// </summary>
    procedure SetRemoveOnMethod(mdBuilder: DNMethodBuilder);
    /// <summary>
    ///   设置用来引发此事件的方法。
    /// </summary>
    procedure SetRaiseMethod(mdBuilder: DNMethodBuilder);
    /// <summary>
    ///   添加一个与此事件关联的"其他"方法。
    ///               "Other"方法是以外的"开"和"引发"方法与事件关联的方法。
    ///               调用此函数可以多次添加任意多个"other"方法。
    /// </summary>
    procedure AddOtherMethod(mdBuilder: DNMethodBuilder);
    /// <summary>
    ///   使用指定的自定义属性 blob 设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   使用自定义属性生成器设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEventBuilder = class(TDNGenericImport<DNEventBuilderClass, DNEventBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNILGeneratorClass = interface(DNObjectClass)
  ['{A502C6F4-F16E-49E3-AAF3-B70F0C265A3D}']
  end;

  /// <summary>
  ///   生成 Microsoft 中间语言 (MSIL) 指令。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.ILGenerator')]
  DNILGenerator = interface(DNObject)
  ['{5A3DCD44-5855-3D89-A0EC-CE50A3B144A9}']
  { getter & setter } 

    function get_ILOffset: Int32;

  { methods } 

    /// <summary>
    ///   将指定的指令放到的指令流中。
    /// </summary>
    procedure Emit(opcode: DNOpCode); overload;
    /// <summary>
    ///   将指定的指令和字符参数放置的 Microsoft 中间语言 (MSIL) 流的说明进行操作。
    /// </summary>
    procedure Emit(opcode: DNOpCode; arg: Byte); overload;
    /// <summary>
    ///   将指定的指令和字符参数放置的 Microsoft 中间语言 (MSIL) 流的说明进行操作。
    /// </summary>
    procedure Emit(opcode: DNOpCode; arg: SByte); overload;
    /// <summary>
    ///   将指定的指令和的数值参数放置的 Microsoft 中间语言 (MSIL) 流的说明进行操作。
    /// </summary>
    procedure Emit(opcode: DNOpCode; arg: Int16); overload;
    /// <summary>
    ///   将指定的指令和的数值参数放置的 Microsoft 中间语言 (MSIL) 流的说明进行操作。
    /// </summary>
    procedure Emit(opcode: DNOpCode; arg: Int32); overload;
    /// <summary>
    ///   将指定的指令到 Microsoft 中间语言 (MSIL) 流跟给定方法的元数据标记。
    /// </summary>
    procedure Emit(opcode: DNOpCode; meth: DNMethodInfo); overload;
    /// <summary>
    ///   将  指令放到 Microsoft 中间语言 (MSIL) 流，指定间接调用的托管调用约定。
    /// </summary>
    procedure EmitCalli(opcode: DNOpCode; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; optionalParameterTypes: TArray<DNType>); overload;
    /// <summary>
    ///   将  指令放到 Microsoft 中间语言 (MSIL) 流，指定间接调用非托管调用约定。
    /// </summary>
    procedure EmitCalli(opcode: DNOpCode; unmanagedCallConv: DNCallingConvention; returnType: DNType; parameterTypes: TArray<DNType>); overload;
    /// <summary>
    ///   将  或  指令置于 Microsoft 中间语言 (MSIL) 流，以调用  方法。
    /// </summary>
    procedure EmitCall(opcode: DNOpCode; methodInfo: DNMethodInfo; optionalParameterTypes: TArray<DNType>);
    /// <summary>
    ///   将指定的指令和签名令牌放置的 Microsoft 中间语言 (MSIL) 流的说明进行操作。
    /// </summary>
    procedure Emit(opcode: DNOpCode; signature: DNSignatureHelper); overload;
    /// <summary>
    ///   将指定的指令并指定构造函数的元数据标记放置的 Microsoft 中间语言 (MSIL) 流的说明进行操作。
    /// </summary>
    procedure Emit(opcode: DNOpCode; con: DNConstructorInfo); overload;
    /// <summary>
    ///   将指定的指令到 Microsoft 中间语言 (MSIL) 流跟给定类型的元数据标记。
    /// </summary>
    procedure Emit(opcode: DNOpCode; cls: DNType); overload;
    /// <summary>
    ///   将指定的指令和的数值参数放置的 Microsoft 中间语言 (MSIL) 流的说明进行操作。
    /// </summary>
    procedure Emit(opcode: DNOpCode; arg: Int64); overload;
    /// <summary>
    ///   将指定的指令和的数值参数放置的 Microsoft 中间语言 (MSIL) 流的说明进行操作。
    /// </summary>
    procedure Emit(opcode: DNOpCode; arg: Single); overload;
    /// <summary>
    ///   将指定的指令和的数值参数放置的 Microsoft 中间语言 (MSIL) 流的说明进行操作。
    /// </summary>
    procedure Emit(opcode: DNOpCode; arg: Double); overload;
    /// <summary>
    ///   将指定的指令放到 Microsoft 中间语言 (MSIL) 流，并保留空间，无法完成修复时包含一个标签。
    /// </summary>
    procedure Emit(opcode: DNOpCode; &label: DNLabel); overload;
    /// <summary>
    ///   将指定的指令放到 Microsoft 中间语言 (MSIL) 流，并保留空间，无法完成修复时包含一个标签。
    /// </summary>
    procedure Emit(opcode: DNOpCode; labels: TArray<DNLabel>); overload;
    /// <summary>
    ///   将指定的指令并指定字段的元数据标记放置的 Microsoft 中间语言 (MSIL) 流的说明进行操作。
    /// </summary>
    procedure Emit(opcode: DNOpCode; field: DNFieldInfo); overload;
    /// <summary>
    ///   将指定的指令到 Microsoft 中间语言 (MSIL) 流跟给定字符串的元数据标记。
    /// </summary>
    procedure Emit(opcode: DNOpCode; str: string); overload;
    /// <summary>
    ///   将指定的指令到 Microsoft 中间语言 (MSIL) 流跟给定本地变量的索引。
    /// </summary>
    procedure Emit(opcode: DNOpCode; local: DNLocalBuilder); overload;
    /// <summary>
    ///   开始某一非筛选的异常的异常块。
    /// </summary>
    function BeginExceptionBlock: DNLabel;
    /// <summary>
    ///   结束异常块。
    /// </summary>
    procedure EndExceptionBlock;
    /// <summary>
    ///   开始筛选后的异常的异常块。
    /// </summary>
    procedure BeginExceptFilterBlock;
    /// <summary>
    ///   开始一个 catch 块。
    /// </summary>
    procedure BeginCatchBlock(exceptionType: DNType);
    /// <summary>
    ///   开始在 Microsoft 中间语言 (MSIL) 流中的异常错误块。
    /// </summary>
    procedure BeginFaultBlock;
    /// <summary>
    ///   开始在 Microsoft 中间语言 (MSIL) 指令流中 finally 块。
    /// </summary>
    procedure BeginFinallyBlock;
    /// <summary>
    ///   声明了一个新标签。
    /// </summary>
    function DefineLabel: DNLabel;
    /// <summary>
    ///   将标记与给定的标签的 Microsoft 中间语言 (MSIL) 流的当前位置。
    /// </summary>
    procedure MarkLabel(loc: DNLabel);
    /// <summary>
    ///   发出指令以引发异常。
    /// </summary>
    procedure ThrowException(excType: DNType);
    /// <summary>
    ///   声明指定类型的一个本地变量。
    /// </summary>
    function DeclareLocal(localType: DNType): DNLocalBuilder; overload;
    /// <summary>
    ///   声明指定类型，还可以选择固定变量引用的对象的一个本地变量。
    /// </summary>
    function DeclareLocal(localType: DNType; pinned: Boolean): DNLocalBuilder; overload;
    /// <summary>
    ///   指定要在评估局部变量中使用的命名空间，并监视当前活动的词法范围。
    /// </summary>
    procedure UsingNamespace(usingNamespace: string);
    /// <summary>
    ///   将 Microsoft 中间语言 (MSIL) 流中的序列点的标记。
    /// </summary>
    procedure MarkSequencePoint(document: DNISymbolDocumentWriter; startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32);
    /// <summary>
    ///   开始的词法范围。
    /// </summary>
    procedure BeginScope;
    /// <summary>
    ///   结束的词法范围。
    /// </summary>
    procedure EndScope;
    /// <summary>
    ///   发出 Microsoft 中间语言 (MSIL) 来调用  的字符串。
    /// </summary>
    procedure EmitWriteLine(value: string); overload;
    /// <summary>
    ///   发出使用给定本地变量调用  时必需的 Microsoft 中间语言 (MSIL)。
    /// </summary>
    procedure EmitWriteLine(localBuilder: DNLocalBuilder); overload;
    /// <summary>
    ///   发出 Microsoft 中间语言 (MSIL) 不必调用  具有给定字段。
    /// </summary>
    procedure EmitWriteLine(fld: DNFieldInfo); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前的偏移量，以字节为单位，由发出 Microsoft 中间语言 (MSIL) 流中 。
    /// </summary>
    property ILOffset: Int32 read get_ILOffset;
  end;

  TDNILGenerator = class(TDNGenericImport<DNILGeneratorClass, DNILGenerator>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNMethodRentalClass = interface(DNObjectClass)
  ['{D61E8241-711C-4415-82F5-C41475E098DA}']
  { static methods } 

    /// <summary>
    ///   交换方法的主体。
    /// </summary>
    {class} procedure SwapMethodBody(cls: DNType; methodtoken: Int32; rgIL: IntPtr; methodSize: Int32; flags: Int32);

  end;

  /// <summary>
  ///   提供了一种交换对于给定类的方法的方法体实现快速方法。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.MethodRental')]
  DNMethodRental = interface(DNObject)
  ['{726D83B0-9A52-36B0-919C-60E625F03211}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMethodRental = class(TDNGenericImport<DNMethodRentalClass, DNMethodRental>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNOpCodesClass = interface(DNObjectClass)
  ['{0CCF6F0A-FC9C-47EE-980E-EF8BB9DB4DF2}']
  { static methods } 

    /// <summary>
    ///   如果提供的操作码采用单字节参数则返回真或假。
    /// </summary>
    {class} function TakesSingleByteArgument(inst: DNOpCode): Boolean;

  end;

  /// <summary>
  ///   提供通过发出的 Microsoft 中间语言 (MSIL) 指令的字段表示  类成员 (如 )。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.OpCodes')]
  DNOpCodes = interface(DNObject)
  ['{2A59A0E6-11B2-3025-92DE-E036A6DDBC00}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNOpCodes = class(TDNGenericImport<DNOpCodesClass, DNOpCodes>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNParameterBuilderClass = interface(DNObjectClass)
  ['{801F87FD-2A9A-44D0-AE7D-3CDBF05CE962}']
  end;

  /// <summary>
  ///   创建或关联参数信息。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.ParameterBuilder')]
  DNParameterBuilder = interface(DNObject)
  ['{027AD5C3-D619-3506-B8E6-CA67A33B9C8F}']
  { getter & setter } 

    function get_Name: string;
    function get_Position: Int32;
    function get_Attributes: Int32;
    function get_IsIn: Boolean;
    function get_IsOut: Boolean;
    function get_IsOptional: Boolean;

  { methods } 

    /// <summary>
    ///   指定此参数的封送处理。
    /// </summary>
    procedure SetMarshal(unmanagedMarshal: DNUnmanagedMarshal);
    /// <summary>
    ///   设置参数的默认值。
    /// </summary>
    procedure SetConstant(defaultValue: DNObject);
    /// <summary>
    ///   使用指定的自定义属性 blob 设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   使用自定义属性生成器设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    /// <summary>
    ///   检索此参数的标记。
    /// </summary>
    function GetToken: DNParameterToken;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   检索此参数的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   检索此参数的签名位置。
    /// </summary>
    property Position: Int32 read get_Position;
    /// <summary>
    ///   检索此参数的属性。
    /// </summary>
    property Attributes: Int32 read get_Attributes;
    /// <summary>
    ///   检索是否这是一个输入的参数。
    /// </summary>
    property IsIn: Boolean read get_IsIn;
    /// <summary>
    ///   检索此参数是否为输出参数。
    /// </summary>
    property IsOut: Boolean read get_IsOut;
    /// <summary>
    ///   检索此参数是否可选。
    /// </summary>
    property IsOptional: Boolean read get_IsOptional;
  end;

  TDNParameterBuilder = class(TDNGenericImport<DNParameterBuilderClass, DNParameterBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNSignatureHelperClass = interface(DNObjectClass)
  ['{5F86B49F-B836-4369-95EE-379427E6314C}']
  { static methods } 

    /// <summary>
    ///   返回的签名帮助器方法使用标准调用约定，在给定方法的模块、 返回类型和参数类型。
    /// </summary>
    {class} function GetMethodSigHelper(&mod: DNModule; returnType: DNType; parameterTypes: TArray<DNType>): DNSignatureHelper; overload;
    /// <summary>
    ///   在给定了方法的模块、调用约定和返回类型的情况下，返回方法的签名帮助程序。
    /// </summary>
    {class} function GetMethodSigHelper(&mod: DNModule; callingConvention: DNCallingConventions; returnType: DNType): DNSignatureHelper; overload;
    /// <summary>
    ///   返回的签名帮助的方法的方法的模块、 非托管调用约定和返回类型。
    /// </summary>
    {class} function GetMethodSigHelper(&mod: DNModule; unmanagedCallConv: DNCallingConvention; returnType: DNType): DNSignatureHelper; overload;
    /// <summary>
    ///   返回一个本地变量的签名帮助。
    /// </summary>
    {class} function GetLocalVarSigHelper: DNSignatureHelper; overload;
    /// <summary>
    ///   返回的签名帮助器方法对于给定的方法的调用约定和返回类型。
    /// </summary>
    {class} function GetMethodSigHelper(callingConvention: DNCallingConventions; returnType: DNType): DNSignatureHelper; overload;
    /// <summary>
    ///   返回给定方法的非托管调用约定和返回类型的方法的签名帮助。
    /// </summary>
    {class} function GetMethodSigHelper(unmanagedCallingConvention: DNCallingConvention; returnType: DNType): DNSignatureHelper; overload;
    /// <summary>
    ///   返回一个本地变量的签名帮助。
    /// </summary>
    {class} function GetLocalVarSigHelper(&mod: DNModule): DNSignatureHelper; overload;
    /// <summary>
    ///   返回一个字段的签名帮助。
    /// </summary>
    {class} function GetFieldSigHelper(&mod: DNModule): DNSignatureHelper;
    /// <summary>
    ///   返回一个属性的签名帮助已知包含属性、 属性类型和属性参数的动态模块。
    /// </summary>
    {class} function GetPropertySigHelper(&mod: DNModule; returnType: DNType; parameterTypes: TArray<DNType>): DNSignatureHelper; overload;
    /// <summary>
    ///   返回一个属性的签名帮助已知包含属性、 属性类型、 属性参数和返回类型和参数的自定义修饰符的动态模块。
    /// </summary>
    {class} function GetPropertySigHelper(&mod: DNModule; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNSignatureHelper; overload;
    /// <summary>
    ///   返回一个属性的签名帮助已知包含属性、 调用约定、 属性类型、 属性参数和返回类型和参数的自定义修饰符的动态模块。
    /// </summary>
    {class} function GetPropertySigHelper(&mod: DNModule; callingConvention: DNCallingConventions; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNSignatureHelper; overload;

  end;

  /// <summary>
  ///   提供用于生成签名的方法。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.SignatureHelper')]
  DNSignatureHelper = interface(DNObject)
  ['{798B57A2-064A-3098-9A80-E12DA70E0085}']
  { methods } 

    /// <summary>
    ///   将参数添加到签名。
    /// </summary>
    procedure AddArgument(clsArgument: DNType); overload;
    /// <summary>
    ///   将指定类型的一个参数添加到签名中，指定该参数被钉住。
    /// </summary>
    procedure AddArgument(argument: DNType; pinned: Boolean); overload;
    /// <summary>
    ///   将一组参数添加到带有指定的自定义修饰符的签名。
    /// </summary>
    procedure AddArguments(arguments: TArray<DNType>; requiredCustomModifiers: TArray<TArray<DNType>>; optionalCustomModifiers: TArray<TArray<DNType>>);
    /// <summary>
    ///   将参数添加到签名中，具有指定的自定义修饰符。
    /// </summary>
    procedure AddArgument(argument: DNType; requiredCustomModifiers: TArray<DNType>; optionalCustomModifiers: TArray<DNType>); overload;
    /// <summary>
    ///   标记的末尾 vararg 固定的一部分。
    ///               如果调用方创建 vararg 签名调用站点才使用此选项。
    /// </summary>
    procedure AddSentinel;
    /// <summary>
    ///   检查此实例是否与给定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   创建并返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   向签名添加结束标记并将签名完成后，标记以便可添加没有更多的标记。
    /// </summary>
    function GetSignature: TArray<Byte>;
    /// <summary>
    ///   返回表示签名参数的字符串。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  end;

  TDNSignatureHelper = class(TDNGenericImport<DNSignatureHelperClass, DNSignatureHelper>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNUnmanagedMarshalClass = interface(DNObjectClass)
  ['{27A0EC84-37DE-4158-9CBA-D740DB296BCE}']
  { static methods } 

    /// <summary>
    ///   指定某个给定的类型的是进行封送到非托管代码。
    /// </summary>
    {class} function DefineUnmanagedMarshal(unmanagedType: DNUnmanagedType): DNUnmanagedMarshal;
    /// <summary>
    ///   固定的数组缓冲区 (ByValTStr) 要封送到非托管代码中指定的字符串。
    /// </summary>
    {class} function DefineByValTStr(elemCount: Int32): DNUnmanagedMarshal;
    /// <summary>
    ///   指定  要封送到非托管代码。
    /// </summary>
    {class} function DefineSafeArray(elemType: DNUnmanagedType): DNUnmanagedMarshal;
    /// <summary>
    ///   指定一个固定长度的数组 (ByValArray) 要封送到非托管代码。
    /// </summary>
    {class} function DefineByValArray(elemCount: Int32): DNUnmanagedMarshal;
    /// <summary>
    ///   指定  要封送到非托管代码。
    ///               长度  在运行时由实际经过封送处理数组的大小。
    /// </summary>
    {class} function DefineLPArray(elemType: DNUnmanagedType): DNUnmanagedMarshal;

  end;

  /// <summary>
  ///   表示类，用于描述如何将字段从封送托管代码流向非托管代码。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.UnmanagedMarshal')]
  DNUnmanagedMarshal = interface(DNObject)
  ['{E3C3A258-E508-3704-B9EB-264601956FE5}']
  { getter & setter } 

    function get_GetUnmanagedType: DNUnmanagedType;
    function get_IIDGuid: DNGuid;
    function get_ElementCount: Int32;
    function get_BaseType: DNUnmanagedType;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   指示非托管的类型。
    ///               此属性是只读的。
    /// </summary>
    property GetUnmanagedType: DNUnmanagedType read get_GetUnmanagedType;
    /// <summary>
    ///   获取的 GUID。
    ///               此属性是只读的。
    /// </summary>
    property IIDGuid: DNGuid read get_IIDGuid;
    /// <summary>
    ///   获取一个数字元素。
    ///               此属性是只读的。
    /// </summary>
    property ElementCount: Int32 read get_ElementCount;
    /// <summary>
    ///   获取非托管的基类型。
    ///               此属性是只读的。
    /// </summary>
    property BaseType: DNUnmanagedType read get_BaseType;
  end;

  TDNUnmanagedMarshal = class(TDNGenericImport<DNUnmanagedMarshalClass, DNUnmanagedMarshal>) end;

  //-------------namespace: System.Reflection----------------
  DNExceptionHandlingClauseClass = interface(DNObjectClass)
  ['{0A054C5B-144A-47F5-AB49-06AEAD04619B}']
  end;

  /// <summary>
  ///   表示结构化异常处理块中的子句。
  /// </summary>
  [DNTypeName('System.Reflection.ExceptionHandlingClause')]
  DNExceptionHandlingClause = interface(DNObject)
  ['{17CA8E14-F624-3879-94CA-6B9556A97D1F}']
  { getter & setter } 

    function get_Flags: DNExceptionHandlingClauseOptions;
    function get_TryOffset: Int32;
    function get_TryLength: Int32;
    function get_HandlerOffset: Int32;
    function get_HandlerLength: Int32;
    function get_FilterOffset: Int32;
    function get_CatchType: DNType;

  { methods } 

    /// <summary>
    ///   异常处理子句的字符串表示形式。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示此异常处理子句 finally 子句、 类型筛选子句或用户筛选子句。
    /// </summary>
    property Flags: DNExceptionHandlingClauseOptions read get_Flags;
    /// <summary>
    ///   该方法，以字节为单位，包括此异常处理子句的 try 块内的偏移量。
    /// </summary>
    property TryOffset: Int32 read get_TryOffset;
    /// <summary>
    ///   总长度，以字节为单位，包括此异常处理子句的 try 块。
    /// </summary>
    property TryLength: Int32 read get_TryLength;
    /// <summary>
    ///   获取用字节表示，此异常处理子句在方法体内的偏移量。
    /// </summary>
    property HandlerOffset: Int32 read get_HandlerOffset;
    /// <summary>
    ///   获取以字节为单位，此异常处理子句的正文的长度。
    /// </summary>
    property HandlerLength: Int32 read get_HandlerLength;
    /// <summary>
    ///   获取用字节表示，用户提供的筛选器代码在方法体内的偏移量。
    /// </summary>
    property FilterOffset: Int32 read get_FilterOffset;
    /// <summary>
    ///   获取此子句所处理的异常的类型。
    /// </summary>
    property CatchType: DNType read get_CatchType;
  end;

  TDNExceptionHandlingClause = class(TDNGenericImport<DNExceptionHandlingClauseClass, DNExceptionHandlingClause>) end;

  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   为支持自定义属性的反映对象提供自定义属性。
  /// </summary>
  [DNTypeName('System.Reflection.ICustomAttributeProvider')]
  DNICustomAttributeProvider = interface(DNObject)
  ['{B9B91146-D6C2-3A62-8159-C2D1794CDEB0}']
  { methods } 

    /// <summary>
    ///   返回在该成员上定义、由类型标识的自定义属性数组，如果没有该类型的自定义属性，则返回空数组。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回在该成员上定义的所有自定义特性的数组（已命名的特性除外），如果没有自定义特性，则返回空数组。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   指示是否在该成员上定义了一个或多个  实例。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;

  end;

  //-------------namespace: System.Reflection----------------
  DNIntrospectionExtensionsClass = interface(DNObjectClass)
  ['{5B19C35D-A67C-4EDF-BF63-09F5EA53A059}']
  { static methods } 

    /// <summary>
    ///   返回  指定类型的表示形式。
    /// </summary>
    {class} function GetTypeInfo(&type: DNType): DNTypeInfo;

  end;

  /// <summary>
  ///   包含用于转换方法  对象。
  /// </summary>
  [DNTypeName('System.Reflection.IntrospectionExtensions')]
  DNIntrospectionExtensions = interface(DNObject)
  ['{E12C7C7C-CF5F-3F2D-8F6D-36EC74ACA3F0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIntrospectionExtensions = class(TDNGenericImport<DNIntrospectionExtensionsClass, DNIntrospectionExtensions>) end;

  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   与互操作 IDispatch 接口。
  /// </summary>
  [DNTypeName('System.Reflection.IReflect')]
  DNIReflect = interface(DNObject)
  ['{AFBF15E5-C37C-11D2-B88E-00A0C9B471B8}']
  { getter & setter } 

    function get_UnderlyingSystemType: DNType;

  { methods } 

    /// <summary>
    ///   检索  对象对应于指定的方法，请使用  数组从之间进行选择的重载方法。
    /// </summary>
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    /// <summary>
    ///   检索  对应于在下一个指定方法的对象指定的搜索约束。
    /// </summary>
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    /// <summary>
    ///   检索的数组  具有所有公共方法或当前类的所有方法的对象。
    /// </summary>
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>;
    /// <summary>
    ///   返回  对应于指定的字段和绑定标志的对象。
    /// </summary>
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo;
    /// <summary>
    ///   返回的数组  对应于当前类的所有字段的对象。
    /// </summary>
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>;
    /// <summary>
    ///   检索  对应于在指定的属性对象指定的搜索约束。
    /// </summary>
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    /// <summary>
    ///   检索  对应于与指定属性的对象指定的搜索约束。
    /// </summary>
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    /// <summary>
    ///   检索的数组  对象对应于所有公共属性或当前类的所有属性。
    /// </summary>
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>;
    /// <summary>
    ///   检索的数组  对象对应于所有公共成员或指定的名称匹配的所有成员。
    /// </summary>
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>;
    /// <summary>
    ///   检索的数组  对应到所有公共成员或当前类的所有成员的对象。
    /// </summary>
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>;
    /// <summary>
    ///   调用指定的成员。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject;

  { propertys } 

    /// <summary>
    ///   获取表示的基础类型  对象。
    /// </summary>
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
  end;

  //-------------namespace: System.Runtime.InteropServices.Expando----------------
  /// <summary>
  ///   通过添加和删除成员，由表示可用于修改对象  对象。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.Expando.IExpando')]
  DNIExpando = interface(DNIReflect)
  ['{AFBF15E6-C37C-11D2-B88E-00A0C9B471B8}']
  { methods } 

    /// <summary>
    ///   将指定的字段添加到反射对象。
    /// </summary>
    function AddField(name: string): DNFieldInfo;
    /// <summary>
    ///   将已命名的属性添加到反射对象。
    /// </summary>
    function AddProperty(name: string): DNPropertyInfo;
    /// <summary>
    ///   将命名的方法添加到反射对象。
    /// </summary>
    function AddMethod(name: string; method: DNDelegate): DNMethodInfo;
    /// <summary>
    ///   移除指定的成员。
    /// </summary>
    procedure RemoveMember(m: DNMemberInfo);

  end;

  //-------------namespace: System.Reflection----------------
  /// <summary>
  ///   表示可以反映的类型。
  /// </summary>
  [DNTypeName('System.Reflection.IReflectableType')]
  DNIReflectableType = interface(DNObject)
  ['{9D4D816F-A167-38FF-83F1-F4AFAF7C0412}']
  { methods } 

    /// <summary>
    ///   检索表示此类型的对象。
    /// </summary>
    function GetTypeInfo: DNTypeInfo;

  end;

  //-------------namespace: System.Reflection----------------
  DNLocalVariableInfoClass = interface(DNObjectClass)
  ['{69F38C6A-4A2C-43E7-AA96-B2578136FFD2}']
  end;

  /// <summary>
  ///   发现局部变量的属性，并提供对本地变量元数据的访问权限。
  /// </summary>
  [DNTypeName('System.Reflection.LocalVariableInfo')]
  DNLocalVariableInfo = interface(DNObject)
  ['{14C0B634-A0E7-3E5D-BE59-B2BF1A571FFC}']
  { getter & setter } 

    function get_LocalType: DNType;
    function get_IsPinned: Boolean;
    function get_LocalIndex: Int32;

  { methods } 

    /// <summary>
    ///   返回一个描述本地变量的用户可读字符串。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取本地变量的类型。
    /// </summary>
    property LocalType: DNType read get_LocalType;
    /// <summary>
    ///   获取  值，该值指示是否引用的对象由本地变量固定在内存中。
    /// </summary>
    property IsPinned: Boolean read get_IsPinned;
    /// <summary>
    ///   获取方法主体内的局部变量的索引。
    /// </summary>
    property LocalIndex: Int32 read get_LocalIndex;
  end;

  TDNLocalVariableInfo = class(TDNGenericImport<DNLocalVariableInfoClass, DNLocalVariableInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNLocalBuilderClass = interface(DNLocalVariableInfoClass)
  ['{4345C5E1-88D2-476E-805B-198404856F9C}']
  end;

  /// <summary>
  ///   表示方法或构造函数内的局部变量。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.LocalBuilder')]
  DNLocalBuilder = interface(DNLocalVariableInfo)
  ['{A6BCAA25-D357-3F79-A716-AD1434E4D832}']
  { getter & setter } 

    function get_IsPinned: Boolean;
    function get_LocalType: DNType;
    function get_LocalIndex: Int32;

  { methods } 

    /// <summary>
    ///   设置这个本地变量的名称。
    /// </summary>
    procedure SetLocalSymInfo(name: string); overload;
    /// <summary>
    ///   设置名称和这个本地变量的词法范围。
    /// </summary>
    procedure SetLocalSymInfo(name: string; startOffset: Int32; endOffset: Int32); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值由本地变量引用的对象被固定在内存中。
    /// </summary>
    property IsPinned: Boolean read get_IsPinned;
    /// <summary>
    ///   获取本地变量的类型。
    /// </summary>
    property LocalType: DNType read get_LocalType;
    /// <summary>
    ///   获取方法主体内的局部变量的从零开始索引。
    /// </summary>
    property LocalIndex: Int32 read get_LocalIndex;
  end;

  TDNLocalBuilder = class(TDNGenericImport<DNLocalBuilderClass, DNLocalBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNManifestResourceInfoClass = interface(DNObjectClass)
  ['{0FFE4D97-F48F-47ED-B5EA-B64F1233468D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类所包含的指定程序集和文件，并具有指定的位置的资源。
    /// </summary>
    {class} function init(containingAssembly: DNAssembly; containingFileName: string; resourceLocation: DNResourceLocation): DNManifestResourceInfo;

  end;

  /// <summary>
  ///   提供对清单资源的访问权限，清单资源是用于描述应用程序依赖项的 XML 文件。
  /// </summary>
  [DNTypeName('System.Reflection.ManifestResourceInfo')]
  DNManifestResourceInfo = interface(DNObject)
  ['{F695C021-DCF5-397B-A300-EDAA51DA5A5B}']
  { getter & setter } 

    function get_ReferencedAssembly: DNAssembly;
    function get_FileName: string;
    function get_ResourceLocation: DNResourceLocation;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包含的程序集的清单资源。
    /// </summary>
    property ReferencedAssembly: DNAssembly read get_ReferencedAssembly;
    /// <summary>
    ///   获取包含清单的资源，该文件的名称，如果不是清单文件相同。
    /// </summary>
    property FileName: string read get_FileName;
    /// <summary>
    ///   获取清单资源的位置。
    /// </summary>
    property ResourceLocation: DNResourceLocation read get_ResourceLocation;
  end;

  TDNManifestResourceInfo = class(TDNGenericImport<DNManifestResourceInfoClass, DNManifestResourceInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNMemberInfoClass = interface(DNObjectClass)
  ['{5A4844C4-F74F-4C81-A116-2BFE670175D2}']
  end;

  /// <summary>
  ///   获取有关成员属性的信息并提供对成员元数据的访问权限。
  /// </summary>
  [DNTypeName('System.Reflection.MemberInfo')]
  DNMemberInfo = interface(DNObject)
  ['{5AE028B5-9A3A-32A9-899C-1DEEFB85CC50}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    /// <summary>
    ///   返回的列表  对象表示有关已应用于目标成员的特性的数据。
    /// </summary>
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   当在派生类中重写，则返回的所有自定义特性应用于此成员的数组。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   在派生类中重写时，返回应用于此成员并由  标识的自定义属性的数组。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   当在派生类中重写，该值指示是否指定类型的字段或其派生类型的一个或多个特性应用于此成员。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   在派生类中重写时，获取  值，该值指示成员类型 - 方法、构造函数、事件等。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   获取当前成员的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取声明此成员的类。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   获取用于获取此实例的类对象 。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   获取包含此成员的自定义特性的集合。
    /// </summary>
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    /// <summary>
    ///   获取一个值，该值标识元数据元素。
    /// </summary>
    property MetadataToken: Int32 read get_MetadataToken;
    /// <summary>
    ///   获取在其中声明该成员的类型表示由当前类型的模块  定义。
    /// </summary>
    property Module: DNModule read get_Module;
  end;

  TDNMemberInfo = class(TDNGenericImport<DNMemberInfoClass, DNMemberInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNEventInfoClass = interface(DNMemberInfoClass)
  ['{5BE7CB53-2B07-442F-9E3A-39DC4F1170F5}']
  end;

  /// <summary>
  ///   发现事件的属性并提供对事件元数据的访问权限。
  /// </summary>
  [DNTypeName('System.Reflection.EventInfo')]
  DNEventInfo = interface(DNMemberInfo)
  ['{15762CA5-BC5C-3B86-A450-ACF32FC98AA5}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_Attributes: DNEventAttributes;
    function get_AddMethod: DNMethodInfo;
    function get_RemoveMethod: DNMethodInfo;
    function get_RaiseMethod: DNMethodInfo;
    function get_EventHandlerType: DNType;
    function get_IsSpecialName: Boolean;
    function get_IsMulticast: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回已与中元数据中使用的事件相关联的方法  指令，指定是否包括非公共方法。
    /// </summary>
    function GetOtherMethods(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   返回已与中元数据中使用的事件相关联的公共方法  指令。
    /// </summary>
    function GetOtherMethods: TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   返回用于向事件源添加事件处理程序委托的方法。
    /// </summary>
    function GetAddMethod: DNMethodInfo; overload;
    /// <summary>
    ///   返回用于从事件源删除事件处理程序委托的方法。
    /// </summary>
    function GetRemoveMethod: DNMethodInfo; overload;
    /// <summary>
    ///   返回引发事件时所调用的方法。
    /// </summary>
    function GetRaiseMethod: DNMethodInfo; overload;
    /// <summary>
    ///   将事件处理程序添加到事件源。
    /// </summary>
    procedure AddEventHandler(target: DNObject; handler: DNDelegate);
    /// <summary>
    ///   从事件源中删除事件处理程序。
    /// </summary>
    procedure RemoveEventHandler(target: DNObject; handler: DNDelegate);
    /// <summary>
    ///   在派生类中重写时，为事件的  方法检索  对象，指定是否返回非公共方法。
    /// </summary>
    function GetAddMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   在派生类中重写时，检索用于删除事件方法的  对象，指定是否返回非公共方法。
    /// </summary>
    function GetRemoveMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   在派生类中重写时，返回引发事件时调用的方法，指定是否返回非公共方法。
    /// </summary>
    function GetRaiseMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值，指示此成员为一个事件。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   获取此事件的属性。
    /// </summary>
    property Attributes: DNEventAttributes read get_Attributes;
    /// <summary>
    ///   获取  对象  事件，包括非公共方法的方法。
    /// </summary>
    property AddMethod: DNMethodInfo read get_AddMethod;
    /// <summary>
    ///   获取  移除该事件，包括非公共方法的方法的对象。
    /// </summary>
    property RemoveMethod: DNMethodInfo read get_RemoveMethod;
    /// <summary>
    ///   获取引发该事件，包括非公共方法时，将调用的方法。
    /// </summary>
    property RaiseMethod: DNMethodInfo read get_RaiseMethod;
    /// <summary>
    ///   获取  与此事件关联的基础的事件处理程序委托的对象。
    /// </summary>
    property EventHandlerType: DNType read get_EventHandlerType;
    /// <summary>
    ///   获取一个值，该值指示是否  的名称具有特殊含义。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    /// <summary>
    ///   获取一个值，该值指示事件是否为多播。
    /// </summary>
    property IsMulticast: Boolean read get_IsMulticast;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNEventInfo = class(TDNGenericImport<DNEventInfoClass, DNEventInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNFieldInfoClass = interface(DNMemberInfoClass)
  ['{B52E524F-27E8-45D3-B555-33B0790B04F7}']
  { static methods } 

    /// <summary>
    ///   获取  指定句柄表示的字段。
    /// </summary>
    {class} function GetFieldFromHandle(handle: DNRuntimeFieldHandle): DNFieldInfo; overload;
    /// <summary>
    ///   获取  表示由指定的句柄，用于指定泛型类型的字段。
    /// </summary>
    {class} function GetFieldFromHandle(handle: DNRuntimeFieldHandle; declaringType: DNRuntimeTypeHandle): DNFieldInfo; overload;

  end;

  /// <summary>
  ///   发现字段的属性并提供对字段元数据的访问权限。
  /// </summary>
  [DNTypeName('System.Reflection.FieldInfo')]
  DNFieldInfo = interface(DNMemberInfo)
  ['{98BA57DC-4CF2-3ED1-B4A2-890C21BBBF4B}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_FieldHandle: DNRuntimeFieldHandle;
    function get_FieldType: DNType;
    function get_Attributes: DNFieldAttributes;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   获取一个类型数组，这些类型标识属性所需的自定义修饰符。
    /// </summary>
    function GetRequiredCustomModifiers: TArray<DNType>;
    /// <summary>
    ///   获取一个类型数组，这些类型标识字段的可选自定义修饰符。
    /// </summary>
    function GetOptionalCustomModifiers: TArray<DNType>;
    /// <summary>
    ///   设置给定对象支持的字段的值。
    /// </summary>
    procedure SetValueDirect(obj: DNTypedReference; value: DNObject);
    /// <summary>
    ///   返回给定对象所支持的字段的值。
    /// </summary>
    function GetValueDirect(obj: DNTypedReference): DNObject;
    /// <summary>
    ///   由编译器返回与字段关联的文本值。
    /// </summary>
    function GetRawConstantValue: DNObject;
    /// <summary>
    ///   设置给定对象支持的字段的值。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    /// <summary>
    ///   当在派生类中重写时，返回给定对象支持的字段的值。
    /// </summary>
    function GetValue(obj: DNObject): DNObject;
    /// <summary>
    ///   当在派生类中重写设置支持给定的对象的字段的值。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; culture: DNCultureInfo); overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值，该值指示此成员是字段。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   获取 , ，这是内部元数据字段的表示形式的句柄。
    /// </summary>
    property FieldHandle: DNRuntimeFieldHandle read get_FieldHandle;
    /// <summary>
    ///   获取此字段对象的类型。
    /// </summary>
    property FieldType: DNType read get_FieldType;
    /// <summary>
    ///   获取与此字段相关联的属性。
    /// </summary>
    property Attributes: DNFieldAttributes read get_Attributes;
    /// <summary>
    ///   获取一个值，该值指示字段是否为公共。
    /// </summary>
    property IsPublic: Boolean read get_IsPublic;
    /// <summary>
    ///   获取一个值，该值指示字段是否为私有。
    /// </summary>
    property IsPrivate: Boolean read get_IsPrivate;
    /// <summary>
    ///   获取一个值，该值指示是否由描述此字段的可见性 ; 也就是说，该字段是仅在其类以及派生的类中可见。
    /// </summary>
    property IsFamily: Boolean read get_IsFamily;
    /// <summary>
    ///   获取一个值，该值指示是否由描述此字段的潜在可见 ; 也就是说，字段都可见最多为其他类型在同一程序集中，而看不到派生类型的程序集之外。
    /// </summary>
    property IsAssembly: Boolean read get_IsAssembly;
    /// <summary>
    ///   获取一个值，该值指示是否由描述此字段的可见性 ; 即，该字段可以访问来自派生类，但只有当它们处于相同的程序集。
    /// </summary>
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    /// <summary>
    ///   获取一个值，该值指示是否由描述此字段的潜在可见 ; 也就是说，字段可由派生类无论他们身在何处，并由同一程序集中的类。
    /// </summary>
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    /// <summary>
    ///   获取一个值，该值指示字段是否为静态。
    /// </summary>
    property IsStatic: Boolean read get_IsStatic;
    /// <summary>
    ///   获取一个值，该值指示字段是否只能在构造函数主体中设置。
    /// </summary>
    property IsInitOnly: Boolean read get_IsInitOnly;
    /// <summary>
    ///   获取一个值，该值指示是否在写入的值编译时间，并且不能更改。
    /// </summary>
    property IsLiteral: Boolean read get_IsLiteral;
    /// <summary>
    ///   获取一个值，该值指示此字段是否有  属性。
    /// </summary>
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    /// <summary>
    ///   获取一个值，该值指示是否在相应  属性设置  枚举器。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    /// <summary>
    ///   获取一个值，该值指示是否在相应  属性设置 。
    /// </summary>
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    /// <summary>
    ///   获取一个值，该值指示当前的字段在当前信任级别中是否是安全关键或安全可靠关键。
    /// </summary>
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    /// <summary>
    ///   获取一个值，该值指示当前的字段在当前信任级别是安全可靠关键。
    /// </summary>
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    /// <summary>
    ///   获取一个值，该值指示在当前信任级别是否透明当前字段。
    /// </summary>
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNFieldInfo = class(TDNGenericImport<DNFieldInfoClass, DNFieldInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNFieldBuilderClass = interface(DNFieldInfoClass)
  ['{0D6ED740-F9F1-4B9C-9CB0-3E704E2C8439}']
  end;

  /// <summary>
  ///   定义和表示的字段。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.FieldBuilder')]
  DNFieldBuilder = interface(DNFieldInfo)
  ['{36D63E48-1646-345F-A3D4-B34E4C42C3C5}']
  { getter & setter } 

    function get_Module: DNModule;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_FieldType: DNType;
    function get_FieldHandle: DNRuntimeFieldHandle;
    function get_Attributes: DNFieldAttributes;
    function get_MemberType: DNMemberTypes;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    /// <summary>
    ///   检索给定对象支持的字段的值。
    /// </summary>
    function GetValue(obj: DNObject): DNObject;
    /// <summary>
    ///   设置给定对象支持的字段的值。
    /// </summary>
    procedure SetValue(obj: DNObject; val: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; culture: DNCultureInfo); overload;
    /// <summary>
    ///   返回为该字段定义的所有自定义属性。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回为此字段定义标识由给定类型的所有自定义属性。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   指示是否具有指定的类型的属性定义的字段。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   返回表示该字段的标记。
    /// </summary>
    function GetToken: DNFieldToken;
    /// <summary>
    ///   指定的字段布局。
    /// </summary>
    procedure SetOffset(iOffset: Int32);
    /// <summary>
    ///   描述字段的本机封送处理。
    /// </summary>
    procedure SetMarshal(unmanagedMarshal: DNUnmanagedMarshal);
    /// <summary>
    ///   设置此字段的默认值。
    /// </summary>
    procedure SetConstant(defaultValue: DNObject);
    /// <summary>
    ///   使用指定的自定义属性 blob 设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   使用自定义属性生成器设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetOptionalCustomModifiers: TArray<DNType>;
    procedure SetValueDirect(obj: DNTypedReference; value: DNObject);
    function GetValueDirect(obj: DNTypedReference): DNObject;
    function GetRawConstantValue: DNObject;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取在其中定义包含此字段的类型的模块。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   指示此字段的名称。
    ///               此属性是只读的。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   指示对引用  声明此字段的类型的对象。
    ///               此属性是只读的。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   指示对引用  对象中获取此对象。
    ///               此属性是只读的。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   指示  对象，表示此字段的类型。
    ///               此属性是只读的。
    /// </summary>
    property FieldType: DNType read get_FieldType;
    /// <summary>
    ///   指示此字段的内部元数据句柄。
    ///               此属性是只读的。
    /// </summary>
    property FieldHandle: DNRuntimeFieldHandle read get_FieldHandle;
    /// <summary>
    ///   指示此字段的特性。
    ///               此属性是只读的。
    /// </summary>
    property Attributes: DNFieldAttributes read get_Attributes;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNFieldBuilder = class(TDNGenericImport<DNFieldBuilderClass, DNFieldBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodBaseClass = interface(DNMemberInfoClass)
  ['{EB5CFF61-703A-4EBA-9FA6-42FD40DACA6D}']
  { static methods } 

    /// <summary>
    ///   通过使用该方法的内部元数据表示形式 （句柄） 获取方法的信息。
    /// </summary>
    {class} function GetMethodFromHandle(handle: DNRuntimeMethodHandle): DNMethodBase; overload;
    /// <summary>
    ///   获取  构造函数或由指定的句柄，用于指定泛型类型的方法的对象。
    /// </summary>
    {class} function GetMethodFromHandle(handle: DNRuntimeMethodHandle; declaringType: DNRuntimeTypeHandle): DNMethodBase; overload;
    /// <summary>
    ///   返回表示当前的执行方法的  对象。
    /// </summary>
    {class} function GetCurrentMethod: DNMethodBase;

  end;

  /// <summary>
  ///   提供有关方法和构造函数的信息。
  /// </summary>
  [DNTypeName('System.Reflection.MethodBase')]
  DNMethodBase = interface(DNMemberInfo)
  ['{CA308C9F-3B97-3152-ACFA-8AB23C17DF73}']
  { getter & setter } 

    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回  对象的数组，这些对象表示泛型方法的类型实参或泛型方法定义的类型形参。
    /// </summary>
    function GetGenericArguments: TArray<DNType>;
    /// <summary>
    ///   使用指定参数调用由当前实例表示的方法或构造函数。
    /// </summary>
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   当在派生类中重写时获取  对象，它提供访问当前方法的 MSIL 流、 本地变量和异常。
    /// </summary>
    function GetMethodBody: DNMethodBody;
    /// <summary>
    ///   当在派生类中重写，获取指定的方法或构造函数的参数。
    /// </summary>
    function GetParameters: TArray<DNParameterInfo>;
    /// <summary>
    ///   在派生的类中重写时，返回  标志。
    /// </summary>
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    /// <summary>
    ///   当在派生类中重写时，将调用的反射的方法或使用给定的参数的构造函数。
    /// </summary>
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  标志，用于指定某个方法实现的属性。
    /// </summary>
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    /// <summary>
    ///   获取一种方法的内部元数据表示的句柄。
    /// </summary>
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    /// <summary>
    ///   获取与此方法关联的属性。
    /// </summary>
    property Attributes: DNMethodAttributes read get_Attributes;
    /// <summary>
    ///   获取一个值，该值指示此方法的调用约定。
    /// </summary>
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    /// <summary>
    ///   获取一个值，该值指示方法是否泛型方法定义。
    /// </summary>
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    /// <summary>
    ///   获取一个值，该值指示泛型方法是否包含未分配的泛型类型参数。
    /// </summary>
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    /// <summary>
    ///   获取一个值，该值指示该方法泛型。
    /// </summary>
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    /// <summary>
    ///   获取一个值，该值指示当前方法或构造函数是安全关键或安全可靠关键在当前信任级别，因此可以执行关键操作。
    /// </summary>
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    /// <summary>
    ///   获取一个值，该值指示是否当前方法或构造函数是安全可靠关键在当前信任级别;也就是说，它是否可以执行关键操作并可以由透明代码访问。
    /// </summary>
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    /// <summary>
    ///   获取一个值，该值指示是否当前方法或构造函数是在透明当前信任级别，并因此不能执行一些关键操作。
    /// </summary>
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    /// <summary>
    ///   获取一个值，该值指示这是否为公共方法。
    /// </summary>
    property IsPublic: Boolean read get_IsPublic;
    /// <summary>
    ///   获取一个值，该值指示此成员私有。
    /// </summary>
    property IsPrivate: Boolean read get_IsPrivate;
    /// <summary>
    ///   获取一个值，该值指示是否由描述此方法或构造函数的可见性 ; 即方法或构造函数是仅在其类以及派生的类中可见。
    /// </summary>
    property IsFamily: Boolean read get_IsFamily;
    /// <summary>
    ///   获取一个值，该值指示是否由描述此方法或构造函数的潜在可见 ; 也就是说，方法或构造函数显示最多为同一程序集中的其他类型也看不到派生类型的程序集之外。
    /// </summary>
    property IsAssembly: Boolean read get_IsAssembly;
    /// <summary>
    ///   获取一个值，该值指示是否由描述此方法或构造函数的可见性 ; 也就是说，方法或构造函数可由派生类中，但仅限它们是否位于同一程序集中。
    /// </summary>
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    /// <summary>
    ///   获取一个值，该值指示是否由描述此方法或构造函数的潜在可见 ; 也就是说，该方法或构造函数可以调用由派生类无论他们身在何处，并由同一程序集中的类。
    /// </summary>
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    /// <summary>
    ///   获取一个值，该值指示方法是否 。
    /// </summary>
    property IsStatic: Boolean read get_IsStatic;
    /// <summary>
    ///   获取一个值，该值指示此方法是否 。
    /// </summary>
    property IsFinal: Boolean read get_IsFinal;
    /// <summary>
    ///   获取一个值，该值指示方法是否为 。
    /// </summary>
    property IsVirtual: Boolean read get_IsVirtual;
    /// <summary>
    ///   获取一个值，该值指示是否在派生类中隐藏只有完全相同的签名的相同种类的成员。
    /// </summary>
    property IsHideBySig: Boolean read get_IsHideBySig;
    /// <summary>
    ///   获取一个值，该值指示该方法为抽象。
    /// </summary>
    property IsAbstract: Boolean read get_IsAbstract;
    /// <summary>
    ///   获取一个值，该值指示此方法是否具有特殊名称。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    /// <summary>
    ///   获取一个值，该值指示方法是否一个构造函数。
    /// </summary>
    property IsConstructor: Boolean read get_IsConstructor;
    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNMethodBase = class(TDNGenericImport<DNMethodBaseClass, DNMethodBase>) end;

  //-------------namespace: System.Reflection----------------
  DNConstructorInfoClass = interface(DNMethodBaseClass)
  ['{D019E183-9713-41FC-B076-65BE9B7DABEA}']
  end;

  /// <summary>
  ///   发现类构造函数的属性，并提供对构造函数元数据的访问权限。
  /// </summary>
  [DNTypeName('System.Reflection.ConstructorInfo')]
  DNConstructorInfo = interface(DNMethodBase)
  ['{0A541F87-EBD7-36A0-9A7D-9BBF86188766}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   调用由具有指定参数的实例反映的构造函数，为不常用的参数提供默认值。
    /// </summary>
    function Invoke(parameters: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   派生类中实现时，调用构造函数，由此反映  用指定的参数，指定的约束下 。
    /// </summary>
    function Invoke(invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值，该值指示此成员是构造函数。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNConstructorInfo = class(TDNGenericImport<DNConstructorInfoClass, DNConstructorInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNConstructorBuilderClass = interface(DNConstructorInfoClass)
  ['{2061CEDB-8ABD-4E46-9E94-392C21EAF221}']
  end;

  /// <summary>
  ///   定义并表示动态类的构造函数。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.ConstructorBuilder')]
  DNConstructorBuilder = interface(DNConstructorInfo)
  ['{93C24CDB-4014-3EFD-B564-E836BA48C765}']
  { getter & setter } 

    function get_Module: DNModule;
    function get_ReflectedType: DNType;
    function get_DeclaringType: DNType;
    function get_Name: string;
    function get_Attributes: DNMethodAttributes;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_CallingConvention: DNCallingConventions;
    function get_ReturnType: DNType;
    function get_Signature: string;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    /// <summary>
    ///   将此  实例作为  返回。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   在指定  的约束下，用指定的参数动态调用此实例反射的构造函数。
    /// </summary>
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   返回此构造函数的参数。
    /// </summary>
    function GetParameters: TArray<DNParameterInfo>;
    /// <summary>
    ///   返回此构造函数的方法实现标志。
    /// </summary>
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    /// <summary>
    ///   调用由给定对象上的此实例动态反映的构造函数，传递指定的参数，并受给定绑定器的约束。
    /// </summary>
    function Invoke(invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   返回为此构造函数定义的所有自定义属性。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回由给定类型标识的自定义属性。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   检查是否定义了指定的自定义属性类型。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   返回表示此构造函数的标记的 。
    /// </summary>
    function GetToken: DNMethodToken;
    /// <summary>
    ///   设置此构造函数与符号信息关联的自定义属性。
    /// </summary>
    procedure SetSymCustomAttribute(name: string; data: TArray<Byte>);
    /// <summary>
    ///   获取此构造函数的 。
    /// </summary>
    function GetILGenerator: DNILGenerator; overload;
    /// <summary>
    ///   获取具有指定 MSIL 流大小的  对象，它可以用来生成此构造函数的方法体。
    /// </summary>
    function GetILGenerator(streamSize: Int32): DNILGenerator; overload;
    procedure SetMethodBody(il: TArray<Byte>; maxStack: Int32; localSignature: TArray<Byte>; exceptionHandlers: DNIEnumerable<DNExceptionHandler>; tokenFixups: DNIEnumerable<Int32>);
    /// <summary>
    ///   将声明性安全添加到此构造函数。
    /// </summary>
    procedure AddDeclarativeSecurity(action: DNSecurityAction; pset: DNPermissionSet);
    /// <summary>
    ///   返回包含此构造函数的模块的引用。
    /// </summary>
    function GetModule: DNModule;
    /// <summary>
    ///   使用指定的自定义属性 blob 设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   使用自定义属性生成器设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    /// <summary>
    ///   设置此构造函数的方法实现标志。
    /// </summary>
    procedure SetImplementationFlags(attributes: DNMethodImplAttributes);
    /// <summary>
    ///   定义此构造函数的参数。
    /// </summary>
    function DefineParameter(iSequence: Int32; attributes: DNParameterAttributes; strParamName: string): DNParameterBuilder;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Invoke(parameters: TArray<DNObject>): DNObject; overload;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取在其中定义此构造函数的动态模块。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   保存对从中获取此对象的  对象的引用。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   检索对声明此成员的类型的  对象的引用。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   检索此构造函数的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   检索此构造函数的属性。
    /// </summary>
    property Attributes: DNMethodAttributes read get_Attributes;
    /// <summary>
    ///   检索此方法的内部句柄。
    ///               使用此句柄来访问基础元数据句柄。
    /// </summary>
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    /// <summary>
    ///   获取一个  值，该值取决于声明类型是否为泛型。
    /// </summary>
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    /// <summary>
    ///   获取 。
    /// </summary>
    property ReturnType: DNType read get_ReturnType;
    /// <summary>
    ///   检索字符串形式的字段的签名。
    /// </summary>
    property Signature: string read get_Signature;
    /// <summary>
    ///   获取或设置在此构造函数中的本地变量是否应初始化为零。
    /// </summary>
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNConstructorBuilder = class(TDNGenericImport<DNConstructorBuilderClass, DNConstructorBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodInfoClass = interface(DNMethodBaseClass)
  ['{F223D2E3-F717-4365-BD42-5F3AC54F29F0}']
  end;

  /// <summary>
  ///   发现方法的属性并提供对方法元数据的访问。
  /// </summary>
  [DNTypeName('System.Reflection.MethodInfo')]
  DNMethodInfo = interface(DNMethodBase)
  ['{0E22CC27-CA1E-3138-9640-BE831F721659}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_ReturnType: DNType;
    function get_ReturnParameter: DNParameterInfo;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回  对象的数组，这些对象表示泛型方法的类型实参或泛型方法定义的类型形参。
    /// </summary>
    function GetGenericArguments: TArray<DNType>;
    /// <summary>
    ///   返回一个  对象，该对象表示可从其构造当前方法的泛型方法定义。
    /// </summary>
    function GetGenericMethodDefinition: DNMethodInfo;
    /// <summary>
    ///   用类型数组的元素替代当前泛型方法定义的类型参数，并返回表示结果构造方法的  对象。
    /// </summary>
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    /// <summary>
    ///   从此方法创建指定类型的委托。
    /// </summary>
    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    /// <summary>
    ///   从此方法创建具有指定目标的指定类型的委托。
    /// </summary>
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    /// <summary>
    ///   当在派生类中被重写时，为直接或间接的基类（用该实例表示的方法首先在此类中声明）上的方法返回  对象。
    /// </summary>
    function GetBaseDefinition: DNMethodInfo;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个  值，该值指示此成员是方法。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   获取此方法的返回类型。
    /// </summary>
    property ReturnType: DNType read get_ReturnType;
    /// <summary>
    ///   获取一个  对象，该对象包含有关方法的返回类型的信息（例如返回类型是否具有自定义修饰符）。
    /// </summary>
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    /// <summary>
    ///   获取返回类型的自定义属性。
    /// </summary>
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNMethodInfo = class(TDNGenericImport<DNMethodInfoClass, DNMethodInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNDynamicMethodClass = interface(DNMethodInfoClass)
  ['{05588CB2-0C2B-44CF-9437-AA249A8AE7D6}']
  { constructors } 

    /// <summary>
    ///   初始化匿名承载的动态方法，指定方法名称、返回类型和参数类型。
    /// </summary>
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>): DNDynamicMethod; overload;
    /// <summary>
    ///   初始化匿名托管的动态方法，同时指定方法名称、返回类型、参数类型并指定是否应针对动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员跳过实时 (JIT) 可见性检查。
    /// </summary>
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; restrictedSkipVisibility: Boolean): DNDynamicMethod; overload;
    /// <summary>
    ///   创建一个对模块全局有效的动态方法，指定方法名称、返回类型、参数类型和模块。
    /// </summary>
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule): DNDynamicMethod; overload;
    /// <summary>
    ///   创建一个对模块全局有效的动态方法，指定方法名称、返回类型、参数类型和模块，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。
    /// </summary>
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule; skipVisibility: Boolean): DNDynamicMethod; overload;
    /// <summary>
    ///   创建一个对模块全局有效的动态方法，指定方法名称、属性、调用约定、返回类型、参数类型和模块，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。
    /// </summary>
    {class} function init(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule; skipVisibility: Boolean): DNDynamicMethod; overload;
    /// <summary>
    ///   创建动态方法，并指定方法的名称、 返回类型、 参数类型和此动态方法与之在逻辑上相关联的类型。
    /// </summary>
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType): DNDynamicMethod; overload;
    /// <summary>
    ///   创建一个动态方法，指定方法名称、返回类型、参数类型，以及与该动态方法逻辑上相关联的类型，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。
    /// </summary>
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType; skipVisibility: Boolean): DNDynamicMethod; overload;
    /// <summary>
    ///   创建一个动态方法，指定方法名称、属性、调用约定、返回类型、参数类型，以及与该动态方法逻辑上相关联的类型，并指定动态方法的 Microsoft 中间语言 (MSIL) 访问的类型和成员是否应跳过实时 (JIT) 可见性检查。
    /// </summary>
    {class} function init(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType; skipVisibility: Boolean): DNDynamicMethod; overload;

  end;

  /// <summary>
  ///   定义并表示可以编译、执行和丢弃的一种动态方法。
  ///               丢弃的方法可用于垃圾回收。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.DynamicMethod')]
  DNDynamicMethod = interface(DNMethodInfo)
  ['{5B9F3FA2-DABB-3887-93F6-663D83A93858}']
  { getter & setter } 

    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_ReturnType: DNType;
    function get_ReturnParameter: DNParameterInfo;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    /// <summary>
    ///   完成动态方法并创建一个可执行此方法的委托。
    /// </summary>
    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    /// <summary>
    ///   完成动态方法并创建一个可用于执行该方法的委托，指定委托类型和委托绑定到的对象。
    /// </summary>
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    /// <summary>
    ///   返回表示为字符串的方法的签名。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回方法的基实现。
    /// </summary>
    function GetBaseDefinition: DNMethodInfo;
    /// <summary>
    ///   返回动态方法的参数。
    /// </summary>
    function GetParameters: TArray<DNParameterInfo>;
    /// <summary>
    ///   为此方法返回实现标志。
    /// </summary>
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    /// <summary>
    ///   在指定的活页夹的约束下，用指定的区域性信息，使用指定的参数调用动态方法。
    /// </summary>
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   返回已应用到此方法的指定类型的自定义属性。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回为该方法定义的所有自定义属性。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   表示是否定义了指定的自定义属性类型。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   定义动态方法的参数。
    /// </summary>
    function DefineParameter(position: Int32; attributes: DNParameterAttributes; parameterName: string): DNParameterBuilder;
    /// <summary>
    ///   返回  对象，该对象可以用于从元数据标记、范围和 Microsoft 中间语言 (MSIL) 流中生成方法主体。
    /// </summary>
    function GetDynamicILInfo: DNDynamicILInfo;
    /// <summary>
    ///   为具有默认 64 字节 Microsoft 中间语言 (MSIL) 流大小的方法返回 MSIL 生成器。
    /// </summary>
    function GetILGenerator: DNILGenerator; overload;
    /// <summary>
    ///   为方法返回一个具有指定 MSIL 流大小的 Microsoft 中间语言 (MSIL) 生成器。
    /// </summary>
    function GetILGenerator(streamSize: Int32): DNILGenerator; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericMethodDefinition: DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取动态方法的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取声明方法的类型，对于动态方法，此类型始终为 。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   获取在反射中用于获取该方法的类。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   获取动态方法与之在逻辑上相关联的模块。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   不支持动态方法。
    /// </summary>
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    /// <summary>
    ///   创建动态方法后获取指定的属性。
    /// </summary>
    property Attributes: DNMethodAttributes read get_Attributes;
    /// <summary>
    ///   创建动态方法后获取指定的调用约定。
    /// </summary>
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    /// <summary>
    ///   获取一个值，该值指示当前的动态方法是否为安全关键或安全可靠关键，以执行关键操作。
    /// </summary>
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    /// <summary>
    ///   获取一个值，该值指示当前动态方法在当前信任级别上是否是安全可靠关键的；即它是否可以执行关键操作并可以由透明代码访问。
    /// </summary>
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    /// <summary>
    ///   获取一个值，该值指示当前的动态方法是否在当前的信任级别是透明的，并因此无法执行关键操作。
    /// </summary>
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    /// <summary>
    ///   获取动态方法的返回值的类型。
    /// </summary>
    property ReturnType: DNType read get_ReturnType;
    /// <summary>
    ///   获取动态方法的返回参数。
    /// </summary>
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    /// <summary>
    ///   获取动态方法的返回类型的自定义属性。
    /// </summary>
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    /// <summary>
    ///   获取或设置一个值，该值指示方法中的本地变量是否初始化为零。
    /// </summary>
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNDynamicMethod = class(TDNGenericImport<DNDynamicMethodClass, DNDynamicMethod>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNMethodBuilderClass = interface(DNMethodInfoClass)
  ['{7B328341-9119-4C6F-A44F-8FA342290BB6}']
  end;

  /// <summary>
  ///   定义并表示动态类上的方法（或构造函数）。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.MethodBuilder')]
  DNMethodBuilder = interface(DNMethodInfo)
  ['{53DF4FB3-A164-37D3-8310-F0D15730AB32}']
  { getter & setter } 

    function get_Name: string;
    function get_Module: DNModule;
    function get_DeclaringType: DNType;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_ReflectedType: DNType;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_ReturnType: DNType;
    function get_ReturnParameter: DNParameterInfo;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_Signature: string;
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    /// <summary>
    ///   确定给定对象是否等于此实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   获取此方法的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   动态调用方法，此方法由此实例在给定对象上进行反射，传递指定的参数，并受给定绑定器的约束。
    /// </summary>
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   为此方法返回实现标志。
    /// </summary>
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    /// <summary>
    ///   返回方法的基实现。
    /// </summary>
    function GetBaseDefinition: DNMethodInfo;
    /// <summary>
    ///   返回此方法的参数。
    /// </summary>
    function GetParameters: TArray<DNParameterInfo>;
    /// <summary>
    ///   返回为此方法定义的所有自定义属性。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回由给定类型标识的自定义属性。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   检查是否定义了指定的自定义属性类型。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   返回此方法。
    /// </summary>
    function GetGenericMethodDefinition: DNMethodInfo;
    /// <summary>
    ///   返回表示此方法的类型参数的  对象数组（如果为泛型）。
    /// </summary>
    function GetGenericArguments: TArray<DNType>;
    /// <summary>
    ///   返回使用指定泛型类型参数从当前泛型方法定义构造的泛型方法。
    /// </summary>
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    /// <summary>
    ///   设置当前方法的泛型类型参数的数目，指定其名称并返回一个可用于定义其约束的  对象的数组。
    /// </summary>
    function DefineGenericParameters(names: TArray<string>): TArray<DNGenericTypeParameterBuilder>;
    /// <summary>
    ///   返回表示此方法的标记的 。
    /// </summary>
    function GetToken: DNMethodToken;
    /// <summary>
    ///   为方法设置参数的数量和类型。
    /// </summary>
    procedure SetParameters(parameterTypes: TArray<DNType>);
    /// <summary>
    ///   设置方法的返回类型。
    /// </summary>
    procedure SetReturnType(returnType: DNType);
    /// <summary>
    ///   设置方法签名，包括返回类型、参数类型以及返回类型和参数类型所需和可选的自定义修饰符。
    /// </summary>
    procedure SetSignature(returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>);
    /// <summary>
    ///   设置参数属性和此方法的参数名称或此方法的返回值的名称。
    ///               返回可用于应用自定义属性的 ParameterBuilder。
    /// </summary>
    function DefineParameter(position: Int32; attributes: DNParameterAttributes; strParamName: string): DNParameterBuilder;
    /// <summary>
    ///   设置此方法的返回类型的封送处理信息。
    /// </summary>
    procedure SetMarshal(unmanagedMarshal: DNUnmanagedMarshal);
    /// <summary>
    ///   使用 blob 设置符号自定义属性。
    /// </summary>
    procedure SetSymCustomAttribute(name: string; data: TArray<Byte>);
    /// <summary>
    ///   向此方法添加声明性安全。
    /// </summary>
    procedure AddDeclarativeSecurity(action: DNSecurityAction; pset: DNPermissionSet);
    procedure SetMethodBody(il: TArray<Byte>; maxStack: Int32; localSignature: TArray<Byte>; exceptionHandlers: DNIEnumerable<DNExceptionHandler>; tokenFixups: DNIEnumerable<Int32>);
    /// <summary>
    ///   使用 Microsoft 中间语言 (MSIL) 指令提供的字节数组的创建方法的主体。
    /// </summary>
    procedure CreateMethodBody(il: TArray<Byte>; count: Int32);
    /// <summary>
    ///   为此方法设置实现标志。
    /// </summary>
    procedure SetImplementationFlags(attributes: DNMethodImplAttributes);
    /// <summary>
    ///   为此方法返回默认 Microsoft 中间语言 (MSIL) 流大小为 64 字节的 。
    /// </summary>
    function GetILGenerator: DNILGenerator; overload;
    /// <summary>
    ///   为此方法返回具有指定的 Microsoft 中间语言 (MSIL) 流大小的 。
    /// </summary>
    function GetILGenerator(size: Int32): DNILGenerator; overload;
    /// <summary>
    ///   返回对包含此方法的模块的引用。
    /// </summary>
    function GetModule: DNModule;
    /// <summary>
    ///   使用指定的自定义属性 blob 设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   使用自定义属性生成器设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    /// <summary>
    ///   将此  实例作为字符串返回。
    /// </summary>
    function ToString: string;
    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   检索此方法的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取在其中定义了当前方法的模块。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   返回声明此方法的类型。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   返回此方法的返回类型的自定义属性。
    /// </summary>
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    /// <summary>
    ///   检索在反射中用于获取此对象的类。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   检索此方法的属性。
    /// </summary>
    property Attributes: DNMethodAttributes read get_Attributes;
    /// <summary>
    ///   返回此方法的调用约定。
    /// </summary>
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    /// <summary>
    ///   检索此方法的内部句柄。
    ///               使用此句柄来访问基础元数据句柄。
    /// </summary>
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    /// <summary>
    ///   在所有情况下均引发 。
    /// </summary>
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    /// <summary>
    ///   在所有情况下均引发 。
    /// </summary>
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    /// <summary>
    ///   在所有情况下均引发 。
    /// </summary>
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    /// <summary>
    ///   获取此  所表示的方法的返回类型。
    /// </summary>
    property ReturnType: DNType read get_ReturnType;
    /// <summary>
    ///   获取一个  对象，该对象包含有关方法的返回类型的信息（例如返回类型是否具有自定义修饰符）。
    /// </summary>
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    /// <summary>
    ///   获取一个值，该值指示当前  对象是否表示泛型方法的定义。
    /// </summary>
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    /// <summary>
    ///   不支持此类型。
    /// </summary>
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    /// <summary>
    ///   获取一个值，该值指示方法是否为泛型方法。
    /// </summary>
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    /// <summary>
    ///   获取或设置一个布尔值，该值指定此方法中的局部变量是否初始化为零。
    ///               此属性的默认值为 。
    /// </summary>
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    /// <summary>
    ///   检索方法的签名。
    /// </summary>
    property Signature: string read get_Signature;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNMethodBuilder = class(TDNGenericImport<DNMethodBuilderClass, DNMethodBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNPropertyInfoClass = interface(DNMemberInfoClass)
  ['{F69500EA-5DCE-4FF3-B695-1EBE9F817774}']
  end;

  /// <summary>
  ///   发现属性 (Property) 的属性 (Attribute) 并提供对属性 (Property) 元数据的访问。
  /// </summary>
  [DNTypeName('System.Reflection.PropertyInfo')]
  DNPropertyInfo = interface(DNMemberInfo)
  ['{BFDF1F57-230D-394A-B773-D9EC58CBEF9A}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_PropertyType: DNType;
    function get_Attributes: DNPropertyAttributes;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_GetMethod: DNMethodInfo;
    function get_SetMethod: DNMethodInfo;
    function get_IsSpecialName: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   由编译器返回与属性关联的文本值。
    /// </summary>
    function GetConstantValue: DNObject;
    /// <summary>
    ///   由编译器返回与属性关联的文本值。
    /// </summary>
    function GetRawConstantValue: DNObject;
    /// <summary>
    ///   返回指定对象的属性值。
    /// </summary>
    function GetValue(obj: DNObject): DNObject; overload;
    /// <summary>
    ///   用索引化属性的可选索引值返回指定对象的该属性值。
    /// </summary>
    function GetValue(obj: DNObject; index: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   设置指定对象的属性值。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    /// <summary>
    ///   用索引化属性的可选索引值设置指定对象的该属性值。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject; index: TArray<DNObject>); overload;
    /// <summary>
    ///   返回一个类型数组，其中的类型表示属性所必需的自定义修饰符。
    /// </summary>
    function GetRequiredCustomModifiers: TArray<DNType>;
    /// <summary>
    ///   返回一个类型数组，其中的类型表示属性的可选自定义修饰符。
    /// </summary>
    function GetOptionalCustomModifiers: TArray<DNType>;
    /// <summary>
    ///   返回一个数组，其元素反射了由当前实例反射的属性的公共  和  访问器。
    /// </summary>
    function GetAccessors: TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   返回此属性的公共  访问器。
    /// </summary>
    function GetGetMethod: DNMethodInfo; overload;
    /// <summary>
    ///   返回此属性的公共  访问器。
    /// </summary>
    function GetSetMethod: DNMethodInfo; overload;
    /// <summary>
    ///   当在派生类中重写时，为具有指定绑定、索引和区域性特定信息的指定对象设置属性值。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo); overload;
    /// <summary>
    ///   返回一个数组，其元素反射了当前实例反射的属性的公共及非公共（如果指定） 和  取值函数。
    /// </summary>
    function GetAccessors(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   当在派生类中重写时，返回此属性的公共或非公共  访问器。
    /// </summary>
    function GetGetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   当在派生类中重写时，返回此属性的  访问器。
    /// </summary>
    function GetSetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   当在派生类中重写时，返回此属性的所有索引参数的数组。
    /// </summary>
    function GetIndexParameters: TArray<DNParameterInfo>;
    /// <summary>
    ///   当在派生类中重写时，将返回具有指定绑定、索引和区域性特定信息的指定对象的属性值。
    /// </summary>
    function GetValue(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个  值，该值指示此成员是属性。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   获取此属性的类型。
    /// </summary>
    property PropertyType: DNType read get_PropertyType;
    /// <summary>
    ///   获取此属性 (Property) 的属性 (Attribute)。
    /// </summary>
    property Attributes: DNPropertyAttributes read get_Attributes;
    /// <summary>
    ///   获取一个值，该值指示此属性是否可读。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   获取一个值，该值指示此属性是否可写。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
    /// <summary>
    ///   获取此属性的  访问器。
    /// </summary>
    property GetMethod: DNMethodInfo read get_GetMethod;
    /// <summary>
    ///   获取此属性的  访问器。
    /// </summary>
    property SetMethod: DNMethodInfo read get_SetMethod;
    /// <summary>
    ///   获取一个值，该值指示此属性是否是特殊名称。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNPropertyInfo = class(TDNGenericImport<DNPropertyInfoClass, DNPropertyInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNPropertyBuilderClass = interface(DNPropertyInfoClass)
  ['{14D38113-B9D4-42AC-B2B4-07BC92B380CA}']
  end;

  /// <summary>
  ///   定义一种类型的属性。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.PropertyBuilder')]
  DNPropertyBuilder = interface(DNPropertyInfo)
  ['{22D4C021-1B3C-3EE3-93B6-4C9D810CE077}']
  { getter & setter } 

    function get_PropertyToken: DNPropertyToken;
    function get_Module: DNModule;
    function get_PropertyType: DNType;
    function get_Attributes: DNPropertyAttributes;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_MemberType: DNMemberTypes;
    function get_GetMethod: DNMethodInfo;
    function get_SetMethod: DNMethodInfo;
    function get_IsSpecialName: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    /// <summary>
    ///   设置此属性的默认值。
    /// </summary>
    procedure SetConstant(defaultValue: DNObject);
    /// <summary>
    ///   设置获取属性值的方法。
    /// </summary>
    procedure SetGetMethod(mdBuilder: DNMethodBuilder);
    /// <summary>
    ///   设置设置的属性值的方法。
    /// </summary>
    procedure SetSetMethod(mdBuilder: DNMethodBuilder);
    /// <summary>
    ///   添加此属性与关联的其他方法之一。
    /// </summary>
    procedure AddOtherMethod(mdBuilder: DNMethodBuilder);
    /// <summary>
    ///   使用指定的自定义属性 blob 设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   使用自定义属性生成器设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    /// <summary>
    ///   通过调用该属性的 getter 方法获取的索引属性的值。
    /// </summary>
    function GetValue(obj: DNObject; index: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   获取具有指定属性的值的绑定、 索引和 。
    /// </summary>
    function GetValue(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   设置的属性的值用索引化属性的可选索引值。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject; index: TArray<DNObject>); overload;
    /// <summary>
    ///   将给定对象的属性值设置为给定的值。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo); overload;
    /// <summary>
    ///   返回的公共及非公共数组  和  上此属性访问器。
    /// </summary>
    function GetAccessors(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   返回公共及非公共 get 访问器，此属性。
    /// </summary>
    function GetGetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   返回此属性的 set 访问器。
    /// </summary>
    function GetSetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   返回数组的属性的所有索引参数。
    /// </summary>
    function GetIndexParameters: TArray<DNParameterInfo>;
    /// <summary>
    ///   返回此属性的所有自定义特性的数组。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回由标识的自定义特性的数组 。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   表示一台或多个实例  上此属性定义。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetConstantValue: DNObject;
    function GetRawConstantValue: DNObject;
    function GetValue(obj: DNObject): DNObject; overload;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetAccessors: TArray<DNMethodInfo>; overload;
    function GetGetMethod: DNMethodInfo; overload;
    function GetSetMethod: DNMethodInfo; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   检索此属性的标记。
    /// </summary>
    property PropertyToken: DNPropertyToken read get_PropertyToken;
    /// <summary>
    ///   获取在其中定义来声明当前属性的类型的模块。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   获取此属性的字段的类型。
    /// </summary>
    property PropertyType: DNType read get_PropertyType;
    /// <summary>
    ///   获取此属性 (Property) 的属性 (Attribute)。
    /// </summary>
    property Attributes: DNPropertyAttributes read get_Attributes;
    /// <summary>
    ///   获取一个值，该值指示此属性是否可读。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   获取一个值，该值指示此属性是否可写。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
    /// <summary>
    ///   获取此成员的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取声明此成员的类。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   获取用于获取此实例的类对象 。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    property MemberType: DNMemberTypes read get_MemberType;
    property GetMethod: DNMethodInfo read get_GetMethod;
    property SetMethod: DNMethodInfo read get_SetMethod;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNPropertyBuilder = class(TDNGenericImport<DNPropertyBuilderClass, DNPropertyBuilder>) end;

  //-------------namespace: System----------------
  DNTypeClass = interface(DNMemberInfoClass)
  ['{88255850-878F-4020-8ED6-F018FD95912F}']
  { static getter & setter } 

    {class} function get_DefaultBinder: DNBinder;

  { static methods } 

    /// <summary>
    ///   获取具有指定名称的 ，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。
    /// </summary>
    {class} function GetType(typeName: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   获取具有指定名称的 ，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。
    /// </summary>
    {class} function GetType(typeName: string; throwOnError: Boolean): DNType; overload;
    /// <summary>
    ///   获取具有指定名称的 ，执行区分大小写的搜索。
    /// </summary>
    {class} function GetType(typeName: string): DNType; overload;
    /// <summary>
    ///   获取具有指定名称的 ，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。
    ///               该类型只为反射加载，而不为执行加载。
    /// </summary>
    {class} function ReflectionOnlyGetType(typeName: string; throwIfNotFound: Boolean; ignoreCase: Boolean): DNType;
    /// <summary>
    ///   获取与指定程序标识符 (ProgID) 关联的类型，如果在加载  时遇到错误，则返回空值。
    /// </summary>
    {class} function GetTypeFromProgID(progID: string): DNType; overload;
    /// <summary>
    ///   获取与指定程序标识符 (ProgID) 关联的类型，指定如果在加载该类型时发生错误是否引发异常。
    /// </summary>
    {class} function GetTypeFromProgID(progID: string; throwOnError: Boolean): DNType; overload;
    /// <summary>
    ///   从指定服务器获取与指定程序标识符 (progID) 关联的类型，如果在加载该类型时遇到错误则返回空值。
    /// </summary>
    {class} function GetTypeFromProgID(progID: string; server: string): DNType; overload;
    /// <summary>
    ///   从指定服务器获取与指定程序标识符 (progID) 关联的类型，指定如果在加载该类型时发生错误是否引发异常。
    /// </summary>
    {class} function GetTypeFromProgID(progID: string; server: string; throwOnError: Boolean): DNType; overload;
    /// <summary>
    ///   获取与指定类标识符 (CLSID) 关联的类型。
    /// </summary>
    {class} function GetTypeFromCLSID(clsid: DNGuid): DNType; overload;
    /// <summary>
    ///   获取与指定类标识符 (CLSID) 关联的类型，指定在加载该类型时如果发生错误是否引发异常。
    /// </summary>
    {class} function GetTypeFromCLSID(clsid: DNGuid; throwOnError: Boolean): DNType; overload;
    /// <summary>
    ///   从指定服务器获取与指定类标识符 (CLSID) 关联的类型。
    /// </summary>
    {class} function GetTypeFromCLSID(clsid: DNGuid; server: string): DNType; overload;
    /// <summary>
    ///   从指定服务器获取与指定类标识符 (CLSID) 关联的类型，指定在加载该类型时如果发生错误是否引发异常。
    /// </summary>
    {class} function GetTypeFromCLSID(clsid: DNGuid; server: string; throwOnError: Boolean): DNType; overload;
    /// <summary>
    ///   获取指定  的基础类型代码。
    /// </summary>
    {class} function GetTypeCode(&type: DNType): DNTypeCode;
    /// <summary>
    ///   获取指定对象的  的句柄。
    /// </summary>
    {class} function GetTypeHandle(o: DNObject): DNRuntimeTypeHandle;
    /// <summary>
    ///   获取指定数组中对象的类型。
    /// </summary>
    {class} function GetTypeArray(args: TArray<DNObject>): TArray<DNType>;
    /// <summary>
    ///   获取由指定类型句柄引用的类型。
    /// </summary>
    {class} function GetTypeFromHandle(handle: DNRuntimeTypeHandle): DNType;

  { static propertys } 

    /// <summary>
    ///   获取默认联编程序的引用，该程序实现的内部规则用于选择由  调用的合适成员。
    /// </summary>
    {class} property DefaultBinder: DNBinder read get_DefaultBinder;
  end;

  /// <summary>
  ///   表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。
  ///            
  ///              若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
  /// </summary>
  [DNTypeName('System.Type')]
  DNType = interface(DNMemberInfo)
  ['{6C9863DC-7207-327F-A048-C3BB63474BFC}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_GUID: DNGuid;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_Name: string;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    /// <summary>
    ///   返回表示指向当前类型的指针的  对象。
    /// </summary>
    function MakePointerType: DNType;
    /// <summary>
    ///   返回表示作为  参数（在 Visual Basic 中为  参数）传递时的当前类型的  对象。
    /// </summary>
    function MakeByRefType: DNType;
    /// <summary>
    ///   返回  对象，该对象表示当前类型的一维数组（下限为零）。
    /// </summary>
    function MakeArrayType: DNType; overload;
    /// <summary>
    ///   返回  对象，该对象表示一个具有指定维数的当前类型的数组。
    /// </summary>
    function MakeArrayType(rank: Int32): DNType; overload;
    /// <summary>
    ///   使用指定的绑定约束和匹配的指定参数列表及区域性来调用指定成员。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   使用指定的绑定约束并匹配指定的参数列表，调用指定成员。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   获取数组中的维数。
    /// </summary>
    function GetArrayRank: Int32;
    /// <summary>
    ///   用指定绑定约束和指定调用约定，搜索其参数与指定参数类型及修饰符匹配的构造函数。
    /// </summary>
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    /// <summary>
    ///   使用指定绑定约束搜索其参数与指定参数类型和修饰符匹配的构造函数。
    /// </summary>
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    /// <summary>
    ///   搜索其参数与指定数组中的类型匹配的公共实例构造函数。
    /// </summary>
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    /// <summary>
    ///   返回为当前  定义的所有公共构造函数。
    /// </summary>
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    /// <summary>
    ///   用指定的绑定约束和指定的调用约定，搜索参数与指定的参数类型及修饰符相匹配的指定方法。
    /// </summary>
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    /// <summary>
    ///   使用指定绑定约束，搜索其参数与指定参数类型及修饰符匹配的指定方法。
    /// </summary>
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    /// <summary>
    ///   搜索其参数与指定参数类型及修饰符匹配的指定公共方法。
    /// </summary>
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    /// <summary>
    ///   搜索其参数与指定参数类型匹配的指定公共方法。
    /// </summary>
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    /// <summary>
    ///   使用指定绑定约束搜索指定方法。
    /// </summary>
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    /// <summary>
    ///   搜索具有指定名称的公共方法。
    /// </summary>
    function GetMethod(name: string): DNMethodInfo; overload;
    /// <summary>
    ///   返回为当前  的所有公共方法。
    /// </summary>
    function GetMethods: TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   搜索具有指定名称的公共字段。
    /// </summary>
    function GetField(name: string): DNFieldInfo; overload;
    /// <summary>
    ///   返回当前  的所有公共字段。
    /// </summary>
    function GetFields: TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   搜索具有指定名称的接口。
    /// </summary>
    function GetInterface(name: string): DNType; overload;
    /// <summary>
    ///   返回表示接口（由当前  所实现或继承）的筛选列表的  对象数组。
    /// </summary>
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    /// <summary>
    ///   返回表示指定的公共事件的  对象。
    /// </summary>
    function GetEvent(name: string): DNEventInfo; overload;
    /// <summary>
    ///   返回由当前  声明或继承的所有公共事件。
    /// </summary>
    function GetEvents: TArray<DNEventInfo>; overload;
    /// <summary>
    ///   使用指定的绑定约束，搜索参数与指定的参数类型及修饰符匹配的指定属性。
    /// </summary>
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    /// <summary>
    ///   搜索其参数与指定参数类型及修饰符匹配的指定公共属性。
    /// </summary>
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    /// <summary>
    ///   使用指定的绑定约束搜索指定属性。
    /// </summary>
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    /// <summary>
    ///   搜索其参数与指定参数类型匹配的指定公共属性。
    /// </summary>
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    /// <summary>
    ///   搜索其参数与指定参数类型匹配的指定公共属性。
    /// </summary>
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    /// <summary>
    ///   搜索具有指定名称和返回类型的公共属性。
    /// </summary>
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    /// <summary>
    ///   搜索具有指定名称的公共属性。
    /// </summary>
    function GetProperty(name: string): DNPropertyInfo; overload;
    /// <summary>
    ///   返回为当前  的所有公共属性。
    /// </summary>
    function GetProperties: TArray<DNPropertyInfo>; overload;
    /// <summary>
    ///   返回嵌套在当前的  中的公共类型。
    /// </summary>
    function GetNestedTypes: TArray<DNType>; overload;
    /// <summary>
    ///   搜索具有指定名称的公共嵌套类型。
    /// </summary>
    function GetNestedType(name: string): DNType; overload;
    /// <summary>
    ///   搜索具有指定名称的公共成员。
    /// </summary>
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   使用指定绑定约束搜索指定成员。
    /// </summary>
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   使用指定绑定约束搜索指定成员类型的指定成员。
    /// </summary>
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   返回为当前  的所有公共成员。
    /// </summary>
    function GetMembers: TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   搜索为设置了  的当前  定义的成员。
    /// </summary>
    function GetDefaultMembers: TArray<DNMemberInfo>;
    /// <summary>
    ///   返回指定成员类型的  对象的筛选数组。
    /// </summary>
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    /// <summary>
    ///   返回表示当前泛型类型参数约束的  对象的数组。
    /// </summary>
    function GetGenericParameterConstraints: TArray<DNType>;
    /// <summary>
    ///   替代由当前泛型类型定义的类型参数组成的类型数组的元素，并返回表示结果构造类型的  对象。
    /// </summary>
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    /// <summary>
    ///   返回表示封闭式泛型类型的类型参数或泛型类型定义的类型参数的  对象的数组。
    /// </summary>
    function GetGenericArguments: TArray<DNType>;
    /// <summary>
    ///   返回一个表示可用于构造当前泛型类型的泛型类型定义的  对象。
    /// </summary>
    function GetGenericTypeDefinition: DNType;
    /// <summary>
    ///   返回当前枚举类型中各个成员的名称。
    /// </summary>
    function GetEnumNames: TArray<string>;
    /// <summary>
    ///   返回当前枚举类型中各个常数的值组成的数组。
    /// </summary>
    function GetEnumValues: DNArray;
    /// <summary>
    ///   返回当前枚举类型的基础类型。
    /// </summary>
    function GetEnumUnderlyingType: DNType;
    /// <summary>
    ///   返回一个值，该值指示当前的枚举类型中是否存在指定的值。
    /// </summary>
    function IsEnumDefined(value: DNObject): Boolean;
    /// <summary>
    ///   返回当前枚举类型中具有指定值的常数的名称。
    /// </summary>
    function GetEnumName(value: DNObject): string;
    /// <summary>
    ///   确定当前  是否派生自指定的 。
    /// </summary>
    function IsSubclassOf(c: DNType): Boolean;
    /// <summary>
    ///   确定指定的对象是否是当前  的实例。
    /// </summary>
    function IsInstanceOfType(o: DNObject): Boolean;
    /// <summary>
    ///   确定指定类型的实例是否可以分配给当前类型的实例。
    /// </summary>
    function IsAssignableFrom(c: DNType): Boolean;
    /// <summary>
    ///   确定两个 COM 类型是否具有相同的标识，以及是否符合类型等效的条件。
    /// </summary>
    function IsEquivalentTo(other: DNType): Boolean;
    /// <summary>
    ///   确定当前的基础系统类型是否  对象是指定的基础系统类型相同 。
    /// </summary>
    function Equals(o: DNObject): Boolean; overload;
    /// <summary>
    ///   确定当前  的基础系统类型是否与指定  的基础系统类型相同。
    /// </summary>
    function Equals(o: DNType): Boolean; overload;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回指定接口类型的接口映射。
    /// </summary>
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    /// <summary>
    ///   当在派生类中重写时，使用指定的绑定约束并匹配指定的参数列表、修饰符和区域性，调用指定成员。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    /// <summary>
    ///   当在派生类中重写时，使用指定  搜索为当前  定义的构造函数。
    /// </summary>
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    /// <summary>
    ///   当在派生类中重写时，使用指定绑定约束，搜索为当前  定义的方法。
    /// </summary>
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   使用指定绑定约束搜索指定字段。
    /// </summary>
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    /// <summary>
    ///   当在派生类中重写时，使用指定绑定约束，搜索为当前  定义的字段。
    /// </summary>
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   当在派生类中重写时，搜索指定的接口，指定是否要对接口名称执行不区分大小写的搜索。
    /// </summary>
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   当在派生类中重写时，获取由当前  实现或继承的所有接口。
    /// </summary>
    function GetInterfaces: TArray<DNType>;
    /// <summary>
    ///   当在派生类中重写时，使用指定绑定约束，返回表示指定事件的  对象。
    /// </summary>
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    /// <summary>
    ///   当在派生类中重写时，使用指定绑定约束，搜索由当前  声明或继承的事件。
    /// </summary>
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    /// <summary>
    ///   当在派生类中重写时，使用指定绑定约束，搜索当前  的属性。
    /// </summary>
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    /// <summary>
    ///   当在派生类中重写时，使用指定绑定约束搜索嵌套在当前  中的类型。
    /// </summary>
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    /// <summary>
    ///   当在派生类中重写时，使用指定绑定约束搜索指定嵌套类型。
    /// </summary>
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    /// <summary>
    ///   当在派生类中重写时，使用指定绑定约束，搜索为当前  定义的成员。
    /// </summary>
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   当在派生类中重写时，返回当前数组、指针或引用类型包含的或引用的对象的 。
    /// </summary>
    function GetElementType: DNType;
    /// <summary>
    ///   返回表示当前  的名称的 。
    /// </summary>
    function ToString: string;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   获取当前 。
    /// </summary>
    function GetType: DNType; overload;

  { propertys } 

    /// <summary>
    ///   获取一个指示此成员是类型还是嵌套类型的  值。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   获取用来声明当前的嵌套类型或泛型类型参数的类型。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   获取一个表示声明方法的 （如果当前  表示泛型方法的一个类型参数）。
    /// </summary>
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    /// <summary>
    ///   获取用于获取该成员的类对象。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   获取一个描述当前类型的布局的 。
    /// </summary>
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    /// <summary>
    ///   获取与  关联的 GUID。
    /// </summary>
    property GUID: DNGuid read get_GUID;
    /// <summary>
    ///   获取在其中定义当前  的模块 (DLL)。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   获取在其中声明该类型的 。
    ///               对于泛型类型，则获取在其中定义该泛型类型的 。
    /// </summary>
    property Assembly: DNAssembly read get_Assembly;
    /// <summary>
    ///   获取当前  的句柄。
    /// </summary>
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    /// <summary>
    ///   获取该类型的完全限定名称，包括其命名空间，但不包括程序集。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   获取  的命名空间。
    /// </summary>
    property Namespace: string read get_Namespace;
    /// <summary>
    ///   获取类型的程序集限定名，其中包括从中加载  的程序集的名称。
    /// </summary>
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    /// <summary>
    ///   获取当前  直接从中继承的类型。
    /// </summary>
    property BaseType: DNType read get_BaseType;
    /// <summary>
    ///   获取该类型的初始值设定项。
    /// </summary>
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    /// <summary>
    ///   获取一个指示当前  对象是否表示其定义嵌套在另一个类型的定义之内的类型的值。
    /// </summary>
    property IsNested: Boolean read get_IsNested;
    /// <summary>
    ///   获取与  关联的属性。
    /// </summary>
    property Attributes: DNTypeAttributes read get_Attributes;
    /// <summary>
    ///   获取描述当前泛型类型参数的协变和特殊约束的  标志。
    /// </summary>
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    /// <summary>
    ///   获取一个指示  是否可由程序集之外的代码访问的值。
    /// </summary>
    property IsVisible: Boolean read get_IsVisible;
    /// <summary>
    ///   获取一个值，该值指示  是否声明为公共类型。
    /// </summary>
    property IsNotPublic: Boolean read get_IsNotPublic;
    /// <summary>
    ///   获取一个值，该值指示  是否声明为公共类型。
    /// </summary>
    property IsPublic: Boolean read get_IsPublic;
    /// <summary>
    ///   获取一个值，通过该值指示类是否是嵌套的并且声明为公共的。
    /// </summary>
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    /// <summary>
    ///   获取一个值，通过该值指示  是否是嵌套的并声明为私有。
    /// </summary>
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    /// <summary>
    ///   获取一个值，通过该值指示  是否是嵌套的并且只能在它自己的家族内可见。
    /// </summary>
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    /// <summary>
    ///   获取一个值，通过该值指示  是否是嵌套的并且只能在它自己的程序集内可见。
    /// </summary>
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    /// <summary>
    ///   获取一个值，通过该值指示  是否是嵌套的并且只对同时属于自己家族和自己程序集的类可见。
    /// </summary>
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    /// <summary>
    ///   获取一个值，通过该值指示  是否是嵌套的并且只对属于它自己的家族或属于它自己的程序集的类可见。
    /// </summary>
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    /// <summary>
    ///   获取指示当前类型的字段是否由公共语言运行时自动放置的值。
    /// </summary>
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    /// <summary>
    ///   获取指示当前类型的字段是否按顺序（定义顺序或发送到元数据的顺序）放置的值。
    /// </summary>
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    /// <summary>
    ///   获取指示当前类型的字段是否放置在显式指定的偏移量处的值。
    /// </summary>
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    /// <summary>
    ///   获取一个值，通过该值指示  是否是一个类或委托；即，不是值类型或接口。
    /// </summary>
    property IsClass: Boolean read get_IsClass;
    /// <summary>
    ///   获取一个值，通过该值指示  是否是一个接口；即，不是类或值类型。
    /// </summary>
    property IsInterface: Boolean read get_IsInterface;
    /// <summary>
    ///   获取一个值，通过该值指示  是否为值类型。
    /// </summary>
    property IsValueType: Boolean read get_IsValueType;
    /// <summary>
    ///   获取一个值，通过该值指示  是否为抽象的并且必须被重写。
    /// </summary>
    property IsAbstract: Boolean read get_IsAbstract;
    /// <summary>
    ///   获取一个值，该值指示  是否声明为密封的。
    /// </summary>
    property IsSealed: Boolean read get_IsSealed;
    /// <summary>
    ///   获取一个值，该值指示当前的  是否表示枚举。
    /// </summary>
    property IsEnum: Boolean read get_IsEnum;
    /// <summary>
    ///   获取一个值，该值指示该类型是否具有需要特殊处理的名称。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    /// <summary>
    ///   获取一个值，该值指示  是否应用了  属性，如果应用了该属性，则表示它是从 COM 类型库导入的。
    /// </summary>
    property IsImport: Boolean read get_IsImport;
    /// <summary>
    ///   获取一个值，通过该值指示  是否为可序列化的。
    /// </summary>
    property IsSerializable: Boolean read get_IsSerializable;
    /// <summary>
    ///   获取一个值，该值指示是否为  选择了字符串格式属性 。
    /// </summary>
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    /// <summary>
    ///   获取一个值，该值指示是否为  选择了字符串格式属性 。
    /// </summary>
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    /// <summary>
    ///   获取一个值，该值指示是否为  选择了字符串格式属性 。
    /// </summary>
    property IsAutoClass: Boolean read get_IsAutoClass;
    /// <summary>
    ///   获取一个值，该值指示类型是否为数组。
    /// </summary>
    property IsArray: Boolean read get_IsArray;
    /// <summary>
    ///   获取一个值，该值指示当前类型是否是泛型类型。
    /// </summary>
    property IsGenericType: Boolean read get_IsGenericType;
    /// <summary>
    ///   获取一个值，该值指示当前  是否表示可以用来构造其他泛型类型的泛型类型定义。
    /// </summary>
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    /// <summary>
    ///   获取指示此对象是否表示构造的泛型类型的值。
    ///               你可以创建构造型泛型类型的实例。
    /// </summary>
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    /// <summary>
    ///   获取一个值，该值指示当前  是否表示泛型类型或方法的定义中的类型参数。
    /// </summary>
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    /// <summary>
    ///   当  对象表示泛型类型或泛型方法的类型参数时，获取类型参数在声明它的泛型类型或方法的类型参数列表中的位置。
    /// </summary>
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    /// <summary>
    ///   获取一个值，该值指示当前  对象是否具有尚未被特定类型替代的类型参数。
    /// </summary>
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    /// <summary>
    ///   获取一个值，该值指示  是否由引用传递。
    /// </summary>
    property IsByRef: Boolean read get_IsByRef;
    /// <summary>
    ///   获取一个值，通过该值指示  是否为指针。
    /// </summary>
    property IsPointer: Boolean read get_IsPointer;
    /// <summary>
    ///   获取一个值，通过该值指示  是否为基元类型之一。
    /// </summary>
    property IsPrimitive: Boolean read get_IsPrimitive;
    /// <summary>
    ///   获取一个值，通过该值指示  是否为 COM 对象。
    /// </summary>
    property IsCOMObject: Boolean read get_IsCOMObject;
    /// <summary>
    ///   获取一个值，通过该值指示当前  是包含还是引用另一类型，即当前  是数组、指针还是通过引用传递。
    /// </summary>
    property HasElementType: Boolean read get_HasElementType;
    /// <summary>
    ///   获取一个值，通过该值指示  在上下文中是否可以被承载。
    /// </summary>
    property IsContextful: Boolean read get_IsContextful;
    /// <summary>
    ///   获取一个值，该值指示  是否按引用进行封送。
    /// </summary>
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    /// <summary>
    ///   获取此类型泛型类型参数的数组。
    /// </summary>
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    /// <summary>
    ///   获取一个值，该值指示当前的类型在当前信任级别上是安全关键的还是安全可靠关键的，并因此可以执行关键操作。
    /// </summary>
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    /// <summary>
    ///   获取一个值，该值指示当前类型在当前信任级别上是否是安全可靠关键的；即它是否可以执行关键操作并可以由透明代码访问。
    /// </summary>
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    /// <summary>
    ///   获取一个值，该值指示当前类型在当前信任级别上是否是透明的而无法执行关键操作。
    /// </summary>
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    /// <summary>
    ///   指示表示该类型的公共语言运行时提供的类型。
    /// </summary>
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property Name: string read get_Name;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNType = class(TDNGenericImport<DNTypeClass, DNType>) end;

  //-------------namespace: System.Reflection----------------
  DNTypeInfoClass = interface(DNTypeClass)
  ['{1215A64D-A18E-49DB-AECD-8BF4CB07F051}']
  end;

  /// <summary>
  ///   表示类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型的类型声明。
  /// </summary>
  [DNTypeName('System.Reflection.TypeInfo')]
  DNTypeInfo = interface(DNType)
  ['{0DF960BC-125D-3DCB-B55A-E19D773BE4F2}']
  { getter & setter } 

    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_MemberType: DNMemberTypes;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_GUID: DNGuid;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_Name: string;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    /// <summary>
    ///   返回  对象形式的当前类型。
    /// </summary>
    function AsType: DNType;
    /// <summary>
    ///   返回一个值，该值指示指定类型是否可分配给当前的类型。
    /// </summary>
    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    /// <summary>
    ///   返回表示由当前类型声明的指定公共事件的对象。
    /// </summary>
    function GetDeclaredEvent(name: string): DNEventInfo;
    /// <summary>
    ///   返回表示由当前类型声明的指定公共字段的对象。
    /// </summary>
    function GetDeclaredField(name: string): DNFieldInfo;
    /// <summary>
    ///   返回表示由当前类型声明的指定公共方法的对象。
    /// </summary>
    function GetDeclaredMethod(name: string): DNMethodInfo;
    /// <summary>
    ///   返回包含所有与指定名称相匹配在当前类型声明的公共方法的集合。
    /// </summary>
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    /// <summary>
    ///   返回表示由当前类型声明的指定公共嵌套类型的对象。
    /// </summary>
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    /// <summary>
    ///   返回表示由当前类型声明的指定公共属性的对象。
    /// </summary>
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function GetEnumUnderlyingType: DNType;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsSubclassOf(c: DNType): Boolean;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(o: DNType): Boolean; overload;
    function GetHashCode: Int32;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetElementType: DNType;
    function ToString: string;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取当前实例泛型类型参数的数组。
    /// </summary>
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    /// <summary>
    ///   获取由当前类型声明的构造函数的集合。
    /// </summary>
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    /// <summary>
    ///   获取由当前类型定义的事件的集合。
    /// </summary>
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    /// <summary>
    ///   获取由当前类型定义的字段的集合。
    /// </summary>
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    /// <summary>
    ///   获取由当前类型定义的成员的集合。
    /// </summary>
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    /// <summary>
    ///   获取由当前类型定义的方法的集合。
    /// </summary>
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    /// <summary>
    ///   获取由当前类型定义的嵌套类型的集合。
    /// </summary>
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    /// <summary>
    ///   获取由当前类型定义的属性的集合。
    /// </summary>
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    /// <summary>
    ///   获取当前类型实现的接口的集合。
    /// </summary>
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property MemberType: DNMemberTypes read get_MemberType;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property GUID: DNGuid read get_GUID;
    property Module: DNModule read get_Module;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property Name: string read get_Name;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNTypeInfo = class(TDNGenericImport<DNTypeInfoClass, DNTypeInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEnumBuilderClass = interface(DNTypeInfoClass)
  ['{39600C15-304F-414F-96CA-01F00178022E}']
  end;

  /// <summary>
  ///   描述并表示一个枚举类型。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.EnumBuilder')]
  DNEnumBuilder = interface(DNTypeInfo)
  ['{70F855DA-4948-38AB-A727-431C386AB9F5}']
  { getter & setter } 

    function get_TypeToken: DNTypeToken;
    function get_UnderlyingField: DNFieldBuilder;
    function get_Name: string;
    function get_GUID: DNGuid;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_AssemblyQualifiedName: string;
    function get_Namespace: string;
    function get_BaseType: DNType;
    function get_IsConstructedGenericType: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_MemberType: DNMemberTypes;
    function get_DeclaringMethod: DNMethodBase;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    /// <summary>
    ///   获取一个值，该值表示是否可以将指定的  对象赋值给此对象。
    /// </summary>
    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    /// <summary>
    ///   在枚举类型中使用指定的常量值定义命名的静态字段。
    /// </summary>
    function DefineLiteral(literalName: string; literalValue: DNObject): DNFieldBuilder;
    /// <summary>
    ///   获取表示此枚举的  对象。
    /// </summary>
    function CreateTypeInfo: DNTypeInfo;
    /// <summary>
    ///   创建此枚举的  对象。
    /// </summary>
    function CreateType: DNType;
    /// <summary>
    ///   调用指定的成员。
    ///               在指定活页夹和调用特性的约束下，要调用的方法必须是可访问的，并且提供与指定参数列表最精确的匹配。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    /// <summary>
    ///   根据指定，返回  对象的数组，用于表示按指定为此类定义的公共和非公共构造函数。
    /// </summary>
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    /// <summary>
    ///   按照指定，返回此类型声明或继承的所有公共和非公共方法。
    /// </summary>
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   返回由给定名称指定的字段。
    /// </summary>
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    /// <summary>
    ///   返回此类型声明的公共和非公共字段。
    /// </summary>
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   使用指定的完全限定名返回此类型（直接或间接）实现的接口。
    /// </summary>
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   返回在此类及其基类上实现的所有接口的数组。
    /// </summary>
    function GetInterfaces: TArray<DNType>;
    /// <summary>
    ///   返回具有指定名称的事件。
    /// </summary>
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    /// <summary>
    ///   返回此类型声明或继承的公共事件的事件。
    /// </summary>
    function GetEvents: TArray<DNEventInfo>; overload;
    /// <summary>
    ///   按照指定，返回此类型声明或继承的所有公共和非公共属性。
    /// </summary>
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    /// <summary>
    ///   返回此类型声明或继承的公共和非公共嵌套类型。
    /// </summary>
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    /// <summary>
    ///   返回此类型声明的指定嵌套的类型。
    /// </summary>
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    /// <summary>
    ///   返回具有指定名称、类型并由此类型声明或继承其绑定的所有成员。
    /// </summary>
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   返回此类型声明或继承的指定成员。
    /// </summary>
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   返回所请求的接口的接口映射。
    /// </summary>
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    /// <summary>
    ///   返回此类型声明的公共和非公共事件。
    /// </summary>
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    function GetElementType: DNType;
    /// <summary>
    ///   返回当前枚举的基础整数类型，该类型是于定义枚举生成器时设置的。
    /// </summary>
    function GetEnumUnderlyingType: DNType;
    /// <summary>
    ///   返回为此构造函数定义的所有自定义属性。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回由给定类型标识的自定义属性。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   使用指定的自定义属性 blob 设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   使用自定义属性生成器设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    /// <summary>
    ///   检查是否定义了指定的自定义属性类型。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   返回表示指向当前类型的指针的  对象。
    /// </summary>
    function MakePointerType: DNType;
    /// <summary>
    ///   返回一个  对象，该对象表示作为 ref 参数（在 Visual Basic 中为 ByRef 参数）传递时的当前类型。
    /// </summary>
    function MakeByRefType: DNType;
    /// <summary>
    ///   返回  对象，该对象表示当前类型的一维数组（下限为零）。
    /// </summary>
    function MakeArrayType: DNType; overload;
    /// <summary>
    ///   返回  对象，该对象表示一个具有指定维数的当前类型的数组。
    /// </summary>
    function MakeArrayType(rank: Int32): DNType; overload;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsSubclassOf(c: DNType): Boolean;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(o: DNType): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   返回此枚举的内部元数据类型标记。
    /// </summary>
    property TypeToken: DNTypeToken read get_TypeToken;
    /// <summary>
    ///   返回此枚举的基础字段。
    /// </summary>
    property UnderlyingField: DNFieldBuilder read get_UnderlyingField;
    /// <summary>
    ///   返回此枚举的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   返回此枚举的 GUID。
    /// </summary>
    property GUID: DNGuid read get_GUID;
    /// <summary>
    ///   检索包含此  定义的动态模块。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   检索包含此枚举定义的动态程序集。
    /// </summary>
    property Assembly: DNAssembly read get_Assembly;
    /// <summary>
    ///   检索此枚举的内部句柄。
    /// </summary>
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    /// <summary>
    ///   返回此枚举的完整路径。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   返回由父程序集的显示名称限定的此枚举的完整路径。
    /// </summary>
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    /// <summary>
    ///   返回此枚举的命名空间。
    /// </summary>
    property Namespace: string read get_Namespace;
    /// <summary>
    ///   返回始终为  的此类型的父 。
    /// </summary>
    property BaseType: DNType read get_BaseType;
    /// <summary>
    ///   获取指示此对象是否表示构造的泛型类型的值。
    /// </summary>
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    /// <summary>
    ///   返回此枚举的基础系统类型。
    /// </summary>
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    /// <summary>
    ///   返回声明此  的类型。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   返回用于获取此  的类型。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property MemberType: DNMemberTypes read get_MemberType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNEnumBuilder = class(TDNGenericImport<DNEnumBuilderClass, DNEnumBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNGenericTypeParameterBuilderClass = interface(DNTypeInfoClass)
  ['{1DDB9BA8-F298-4422-A443-EE527F13CEA6}']
  end;

  /// <summary>
  ///   为动态定义的泛型类型和方法定义并创建泛型类型参数。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.GenericTypeParameterBuilder')]
  DNGenericTypeParameterBuilder = interface(DNTypeInfo)
  ['{A2289B64-5DE0-38BA-9266-B55E3598C901}']
  { getter & setter } 

    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Name: string;
    function get_Module: DNModule;
    function get_GUID: DNGuid;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_UnderlyingSystemType: DNType;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_DeclaringMethod: DNMethodBase;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_MemberType: DNMemberTypes;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    /// <summary>
    ///   在所有情况下都会引发  异常。
    /// </summary>
    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    /// <summary>
    ///   返回当前泛型类型参数的字符串表示形式。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   检测给定对象是否为  的实例并且是否等于当前实例。
    /// </summary>
    function Equals(o: DNObject): Boolean; overload;
    /// <summary>
    ///   返回当前实例的 32 位整数哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetInterfaces: TArray<DNType>;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetEvents: TArray<DNEventInfo>; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   在所有情况下均引发 。
    /// </summary>
    function GetElementType: DNType;
    /// <summary>
    ///   对泛型类型参数无效。
    /// </summary>
    function GetGenericArguments: TArray<DNType>;
    /// <summary>
    ///   对泛型类型参数无效。
    /// </summary>
    function GetGenericTypeDefinition: DNType;
    /// <summary>
    ///   对于完整的泛型类型参数无效。
    /// </summary>
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    /// <summary>
    ///   在所有情况下都会引发  异常。
    /// </summary>
    function IsAssignableFrom(c: DNType): Boolean; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function IsSubclassOf(c: DNType): Boolean;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   使用指定的自定义属性 blob 设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   使用自定义属性生成器设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    /// <summary>
    ///   设置某类型必须继承的基类型，以替换为类型参数。
    /// </summary>
    procedure SetBaseTypeConstraint(baseTypeConstraint: DNType);
    /// <summary>
    ///   设置一个类型必须实现的接口，以替换为类型参数。
    /// </summary>
    procedure SetInterfaceConstraints(interfaceConstraints: TArray<DNType>);
    /// <summary>
    ///   设置泛型参数的方差特征和特殊约束，例如无参数构造函数约束。
    /// </summary>
    procedure SetGenericParameterAttributes(genericParameterAttributes: DNGenericParameterAttributes);
    /// <summary>
    ///   返回表示指向当前泛型类型参数的指针的  对象。
    /// </summary>
    function MakePointerType: DNType;
    /// <summary>
    ///   返回一个  对象，此对象在作为引用参数传递时表示当前的泛型类型参数。
    /// </summary>
    function MakeByRefType: DNType;
    /// <summary>
    ///   返回元素类型为泛型类型参数的一维数组的类型。
    /// </summary>
    function MakeArrayType: DNType; overload;
    /// <summary>
    ///   返回其元素类型为泛型类型参数，并具有指定维度数的数组类型。
    /// </summary>
    function MakeArrayType(rank: Int32): DNType; overload;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function GetEnumUnderlyingType: DNType;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNType): Boolean; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取泛型类型定义或泛型类型参数所属的泛型方法定义。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   获取用于获取  的  对象。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   获取泛型类型参数的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取包含泛型类型参数的动态模块。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    property GUID: DNGuid read get_GUID;
    /// <summary>
    ///   获取  对象，该对象表示包含当前类型参数所属的泛型类型定义的动态程序集。
    /// </summary>
    property Assembly: DNAssembly read get_Assembly;
    /// <summary>
    ///   不支持不完整的泛型类型参数。
    /// </summary>
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    /// <summary>
    ///   在所有情况下均获取 。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   在所有情况下均获取 。
    /// </summary>
    property Namespace: string read get_Namespace;
    /// <summary>
    ///   在所有情况下均获取 。
    /// </summary>
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    /// <summary>
    ///   获取当前泛型类型参数的基类型约束。
    /// </summary>
    property BaseType: DNType read get_BaseType;
    /// <summary>
    ///   获取当前泛型类型参数。
    /// </summary>
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    /// <summary>
    ///   在所有情况下均获取 。
    /// </summary>
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    /// <summary>
    ///   在所有情况下均返回 。
    /// </summary>
    property IsGenericType: Boolean read get_IsGenericType;
    /// <summary>
    ///   在所有情况下均获取 。
    /// </summary>
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    /// <summary>
    ///   获取指示此对象是否表示构造的泛型类型的值。
    /// </summary>
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    /// <summary>
    ///   获取声明参数的泛型类型或方法的类型参数列表中的类型参数的位置。
    /// </summary>
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    /// <summary>
    ///   在所有情况下均获取 。
    /// </summary>
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    /// <summary>
    ///   获取描述当前泛型类型参数的协变和特殊约束的  标志。
    /// </summary>
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    /// <summary>
    ///   获取一个表示声明方法的 （如果当前  表示泛型方法的一个类型参数）。
    /// </summary>
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property MemberType: DNMemberTypes read get_MemberType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNGenericTypeParameterBuilder = class(TDNGenericImport<DNGenericTypeParameterBuilderClass, DNGenericTypeParameterBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNTypeBuilderClass = interface(DNTypeInfoClass)
  ['{FEF5D555-6EDF-4E8F-B8D4-D0B1275F89D5}']
  { static methods } 

    /// <summary>
    ///   返回与指定泛型类型定义的方法相对应的指定构造泛型类型的方法。
    /// </summary>
    {class} function GetMethod(&type: DNType; method: DNMethodInfo): DNMethodInfo; overload;
    /// <summary>
    ///   返回与指定泛型类型定义的构造函数相对应的指定构造泛型类型的构造函数。
    /// </summary>
    {class} function GetConstructor(&type: DNType; &constructor: DNConstructorInfo): DNConstructorInfo; overload;
    /// <summary>
    ///   返回指定的构造泛型类型的字段，该字段对应于泛型类型定义的指定字段。
    /// </summary>
    {class} function GetField(&type: DNType; field: DNFieldInfo): DNFieldInfo; overload;

  end;

  /// <summary>
  ///   在运行时定义并创建类的新实例。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.TypeBuilder')]
  DNTypeBuilder = interface(DNTypeInfo)
  ['{0F445332-E34C-3F8C-90ED-AB7F0724ADAB}']
  { getter & setter } 

    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Name: string;
    function get_Module: DNModule;
    function get_GUID: DNGuid;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_DeclaringMethod: DNMethodBase;
    function get_Size: Int32;
    function get_PackingSize: DNPackingSize;
    function get_TypeToken: DNTypeToken;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_MemberType: DNMemberTypes;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    /// <summary>
    ///   获取一个值，该值表示是否可以将指定的  对象赋值给此对象。
    /// </summary>
    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    /// <summary>
    ///   返回一个值，该值指示是否已创建当前的动态类型。
    /// </summary>
    function IsCreated: Boolean;
    /// <summary>
    ///   返回不包括命名空间的类型的名称。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   调用指定的成员。
    ///               在指定的活页夹和调用属性的约束下，要调用的方法必须为可访问，并且提供与指定的参数列表最具体的匹配。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    /// <summary>
    ///   根据指定，返回  对象的数组，用于表示按指定为此类定义的公共和非公共构造函数。
    /// </summary>
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    /// <summary>
    ///   按照指定，返回此类型声明或继承的所有公共和非公共方法。
    /// </summary>
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   返回由给定名称指定的字段。
    /// </summary>
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    /// <summary>
    ///   返回此类型声明的公共和非公共字段。
    /// </summary>
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   返回由此类直接或间接实现的接口，该接口具有与给定接口名匹配的完全限定名。
    /// </summary>
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   返回在此类型及其基类上实现的所有接口的数组。
    /// </summary>
    function GetInterfaces: TArray<DNType>;
    /// <summary>
    ///   返回具有指定名称的事件。
    /// </summary>
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    /// <summary>
    ///   返回此类型声明或继承的公共事件。
    /// </summary>
    function GetEvents: TArray<DNEventInfo>; overload;
    /// <summary>
    ///   按照指定，返回此类型声明或继承的所有公共和非公共属性。
    /// </summary>
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    /// <summary>
    ///   返回此类型声明或继承的公共和非公共嵌套类型。
    /// </summary>
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    /// <summary>
    ///   返回此类型声明的公共和非公共嵌套类型。
    /// </summary>
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    /// <summary>
    ///   按照指定，返回此类型声明或继承的所有公共和非公共成员。
    /// </summary>
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   返回请求的接口的接口映射。
    /// </summary>
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    /// <summary>
    ///   返回此类型声明的公共和非公共事件。
    /// </summary>
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    /// <summary>
    ///   返回此类型声明或继承的公共和非公共成员。
    /// </summary>
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   获取一个值，该值指示是否可将指定的  分配给此对象。
    /// </summary>
    function IsAssignableFrom(c: DNType): Boolean; overload;
    /// <summary>
    ///   调用此方法始终引发 。
    /// </summary>
    function GetElementType: DNType;
    /// <summary>
    ///   确定此类型是否派生自指定类型。
    /// </summary>
    function IsSubclassOf(c: DNType): Boolean;
    /// <summary>
    ///   返回为此类型定义的所有自定义属性。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回当前类型的所有自定义属性，该属性可分配给指定类型。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   确定是否将自定义属性应用于当前类型。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   定义当前类型的泛型类型，指定其数量和名称并返回一个可用于设置其约束的  对象的数组。
    /// </summary>
    function DefineGenericParameters(names: TArray<string>): TArray<DNGenericTypeParameterBuilder>;
    /// <summary>
    ///   将类型数组中的元素替换为当前泛型类型定义的类型参数，并返回生成的构造类型。
    /// </summary>
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    /// <summary>
    ///   返回表示泛型类型的类型实参或泛型类型定义的类型形参的  对象的数组。
    /// </summary>
    function GetGenericArguments: TArray<DNType>;
    /// <summary>
    ///   返回一个  对象，该对象表示可从中获取当前类型的泛型类型定义。
    /// </summary>
    function GetGenericTypeDefinition: DNType;
    /// <summary>
    ///   指定实现给定方法声明的给定方法体（可能使用其他名称）。
    /// </summary>
    procedure DefineMethodOverride(methodInfoBody: DNMethodInfo; methodInfoDeclaration: DNMethodInfo);
    /// <summary>
    ///   向此类型添加新方法，并指定方法的名称、 属性和签名。
    /// </summary>
    function DefineMethod(name: string; attributes: DNMethodAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    /// <summary>
    ///   向此类型添加新方法，使用指定的名称和方法属性。
    /// </summary>
    function DefineMethod(name: string; attributes: DNMethodAttributes): DNMethodBuilder; overload;
    /// <summary>
    ///   将具有指定的名称、 方法属性和调用约定的新方法添加到此类型。
    /// </summary>
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions): DNMethodBuilder; overload;
    /// <summary>
    ///   将一个新方法添加到具有指定的名称、 方法属性、 调用约定和方法签名的类型。
    /// </summary>
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    /// <summary>
    ///   使用指定名称、方法属性、调用约定、方法签名和自定义修饰符向类型中添加新方法。
    /// </summary>
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNMethodBuilder; overload;
    /// <summary>
    ///   定义此类型的初始值设定项。
    /// </summary>
    function DefineTypeInitializer: DNConstructorBuilder;
    /// <summary>
    ///   定义默认的构造函数。
    ///               在此处定义的构造函数将只调用父类的默认构造函数。
    /// </summary>
    function DefineDefaultConstructor(attributes: DNMethodAttributes): DNConstructorBuilder;
    /// <summary>
    ///   用给定的属性和签名，向类型中添加新的构造函数。
    /// </summary>
    function DefineConstructor(attributes: DNMethodAttributes; callingConvention: DNCallingConventions; parameterTypes: TArray<DNType>): DNConstructorBuilder; overload;
    /// <summary>
    ///   将新构造函数添加到该类型，其属性、签名和自定义修饰符已给定。
    /// </summary>
    function DefineConstructor(attributes: DNMethodAttributes; callingConvention: DNCallingConventions; parameterTypes: TArray<DNType>; requiredCustomModifiers: TArray<TArray<DNType>>; optionalCustomModifiers: TArray<TArray<DNType>>): DNConstructorBuilder; overload;
    /// <summary>
    ///   定义  方法，指定方法的名称、定义方法所使用的 DLL 的名称、方法的属性、方法的调用约定、 方法的返回类型、 方法的参数类型，以及  标志。
    /// </summary>
    function DefinePInvokeMethod(name: string; dllName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    /// <summary>
    ///   定义  方法，指定方法的名称、定义方法所使用的 DLL 的名称、入口点名称、 方法的属性、方法的调用约定、 方法的返回类型、 方法的参数类型，以及  标志。
    /// </summary>
    function DefinePInvokeMethod(name: string; dllName: string; entryName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    /// <summary>
    ///   定义  方法，指定方法的名称、定义方法所使用的 DLL 的名称、入口点名称、方法的属性、方法的调用约定、方法的返回类型、方法的参数类型、 标志，以及参数和返回类型的自定义修饰符。
    /// </summary>
    function DefinePInvokeMethod(name: string; dllName: string; entryName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    /// <summary>
    ///   定义嵌套的类型，并给定其名称。
    /// </summary>
    function DefineNestedType(name: string): DNTypeBuilder; overload;
    /// <summary>
    ///   定义嵌套类型，其名称、属性、它所扩展的类型以及它所实现的接口已给定。
    /// </summary>
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; interfaces: TArray<DNType>): DNTypeBuilder; overload;
    /// <summary>
    ///   定义嵌套类型，其名称、属性以及它所扩展的类型已给定。
    /// </summary>
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType): DNTypeBuilder; overload;
    /// <summary>
    ///   已知名称和属性，定义嵌套类型。
    /// </summary>
    function DefineNestedType(name: string; attr: DNTypeAttributes): DNTypeBuilder; overload;
    /// <summary>
    ///   定义嵌套类型，其名称、属性、该类型的总大小以及它所扩展的类型已给定。
    /// </summary>
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; typeSize: Int32): DNTypeBuilder; overload;
    /// <summary>
    ///   定义嵌套类型，其名称、属性、它所扩展的类型以及封装大小已给定。
    /// </summary>
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; packSize: DNPackingSize): DNTypeBuilder; overload;
    /// <summary>
    ///   定义嵌套类型，指定其名称、 属性、 大小和它所扩展的类型。
    /// </summary>
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; packSize: DNPackingSize; typeSize: Int32): DNTypeBuilder; overload;
    /// <summary>
    ///   将新字段添加到该类型，其名称、属性和字段类型已给定。
    /// </summary>
    function DefineField(fieldName: string; &type: DNType; attributes: DNFieldAttributes): DNFieldBuilder; overload;
    /// <summary>
    ///   将新字段添加到该类型，其名称、属性、字段类型和自定义修饰符已给定。
    /// </summary>
    function DefineField(fieldName: string; &type: DNType; requiredCustomModifiers: TArray<DNType>; optionalCustomModifiers: TArray<DNType>; attributes: DNFieldAttributes): DNFieldBuilder; overload;
    /// <summary>
    ///   在可移植可执行 (PE) 文件的 .sdata 部分定义已初始化的数据字段。
    /// </summary>
    function DefineInitializedData(name: string; data: TArray<Byte>; attributes: DNFieldAttributes): DNFieldBuilder;
    /// <summary>
    ///   在可移植可执行 (PE) 文件的  部分中定义未初始化的数据字段。
    /// </summary>
    function DefineUninitializedData(name: string; size: Int32; attributes: DNFieldAttributes): DNFieldBuilder;
    /// <summary>
    ///   将新属性添加到具有给定名称和属性签名的类型中。
    /// </summary>
    function DefineProperty(name: string; attributes: DNPropertyAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNPropertyBuilder; overload;
    /// <summary>
    ///   将新属性添加到具有给定名称、属性、调用约定和属性签名的类型。
    /// </summary>
    function DefineProperty(name: string; attributes: DNPropertyAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNPropertyBuilder; overload;
    /// <summary>
    ///   将新属性添加到具有给定名称、属性签名和自定义修饰符的类型。
    /// </summary>
    function DefineProperty(name: string; attributes: DNPropertyAttributes; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNPropertyBuilder; overload;
    /// <summary>
    ///   将新属性添加到具有给定名称、调用约定、属性签名和自定义修饰符的类型。
    /// </summary>
    function DefineProperty(name: string; attributes: DNPropertyAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNPropertyBuilder; overload;
    /// <summary>
    ///   将新事件添加到该类型，使用给定的名称、属性和事件类型。
    /// </summary>
    function DefineEvent(name: string; attributes: DNEventAttributes; eventtype: DNType): DNEventBuilder;
    /// <summary>
    ///   获取一个表示此类型的  对象。
    /// </summary>
    function CreateTypeInfo: DNTypeInfo;
    /// <summary>
    ///   创建类的  对象。
    ///               在类上定义字段和方法后，调用  以加载其  对象。
    /// </summary>
    function CreateType: DNType;
    /// <summary>
    ///   设置当前正在构造的类型的基类型。
    /// </summary>
    procedure SetParent(parent: DNType);
    /// <summary>
    ///   添加一个此类型实现的接口。
    /// </summary>
    procedure AddInterfaceImplementation(interfaceType: DNType);
    /// <summary>
    ///   将声明性安全添加到此类型。
    /// </summary>
    procedure AddDeclarativeSecurity(action: DNSecurityAction; pset: DNPermissionSet);
    /// <summary>
    ///   使用指定的自定义属性 blob 设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   使用自定义属性生成器设置自定义属性。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    /// <summary>
    ///   返回表示指向当前类型的非托管指针的类型的  对象。
    /// </summary>
    function MakePointerType: DNType;
    /// <summary>
    ///   返回一个  对象，它在作为  参数（Visual Basic 中的 ）传递时表示当前类型。
    /// </summary>
    function MakeByRefType: DNType;
    /// <summary>
    ///   返回  对象，该对象表示当前类型的一维数组（下限为零）。
    /// </summary>
    function MakeArrayType: DNType; overload;
    /// <summary>
    ///   返回  对象，此对象表示当前类型的具有指定维数的数组。
    /// </summary>
    function MakeArrayType(rank: Int32): DNType; overload;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function GetEnumUnderlyingType: DNType;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(o: DNType): Boolean; overload;
    function GetHashCode: Int32;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   返回声明此类型的类型。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   返回用于获取此类型的类型。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   检索此类型的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   检索包含此类型定义的动态模块。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   检索此类型的 GUID。
    /// </summary>
    property GUID: DNGuid read get_GUID;
    /// <summary>
    ///   检索包含此类型定义的动态程序集。
    /// </summary>
    property Assembly: DNAssembly read get_Assembly;
    /// <summary>
    ///   不支持动态模块。
    /// </summary>
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    /// <summary>
    ///   检索此类型的完整路径。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   检索定义了此  的命名空间。
    /// </summary>
    property Namespace: string read get_Namespace;
    /// <summary>
    ///   返回由程序集的显示名称限定的此类型的全名。
    /// </summary>
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    /// <summary>
    ///   检索此类型的基类型。
    /// </summary>
    property BaseType: DNType read get_BaseType;
    /// <summary>
    ///   获取一个值，该值指示当前类型是安全-关键的还是安全-可靠-关键的，且因此是否可执行关键操作。
    /// </summary>
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    /// <summary>
    ///   获取一个值，该值指示当前类型是否为安全-可靠-关键，即它是否可执行关键操作且可由透明代码访问。
    /// </summary>
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    /// <summary>
    ///   获取一个值，该值指示当前类型是否透明，且因此是否无法指定关键操作。
    /// </summary>
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    /// <summary>
    ///   返回此  的基础系统类型。
    /// </summary>
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    /// <summary>
    ///   获取一个值，该值指示当前泛型类型参数的协变和特殊约束。
    /// </summary>
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    /// <summary>
    ///   获取一个值，该值指示当前  是否表示可以用来构造其他泛型类型的泛型类型定义。
    /// </summary>
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    /// <summary>
    ///   获取一个值，该值指示当前类型是否是泛型类型。
    /// </summary>
    property IsGenericType: Boolean read get_IsGenericType;
    /// <summary>
    ///   获取一个值，该值指示当前类型是否是泛型类型参数。
    /// </summary>
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    /// <summary>
    ///   获取指示此对象是否表示构造的泛型类型的值。
    /// </summary>
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    /// <summary>
    ///   获取声明参数的泛型类型的类型参数列表中的类型参数位置。
    /// </summary>
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    /// <summary>
    ///   获取声明了当前泛型类型参数的方法。
    /// </summary>
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    /// <summary>
    ///   检索类型的总大小。
    /// </summary>
    property Size: Int32 read get_Size;
    /// <summary>
    ///   检索此类型的包装大小。
    /// </summary>
    property PackingSize: DNPackingSize read get_PackingSize;
    /// <summary>
    ///   返回此类型的类型标记。
    /// </summary>
    property TypeToken: DNTypeToken read get_TypeToken;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property MemberType: DNMemberTypes read get_MemberType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNTypeBuilder = class(TDNGenericImport<DNTypeBuilderClass, DNTypeBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNTypeDelegatorClass = interface(DNTypeInfoClass)
  ['{B00F34F5-CFE4-43F0-8818-339850D6FBA8}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  指定封装实例的类。
    /// </summary>
    {class} function init(delegatingType: DNType): DNTypeDelegator;

  end;

  /// <summary>
  ///   包装  对象和委托的方法，以便 。
  /// </summary>
  [DNTypeName('System.Reflection.TypeDelegator')]
  DNTypeDelegator = interface(DNTypeInfo)
  ['{19E2E2F7-B53C-366B-8840-ABA2F8CB98B5}']
  { getter & setter } 

    function get_GUID: DNGuid;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_Name: string;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_IsConstructedGenericType: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_MemberType: DNMemberTypes;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示指定的类型是否可以分配给此类型。
    /// </summary>
    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    /// <summary>
    ///   调用指定的成员。
    ///               在指定的活页夹和调用属性的约束下，要调用的方法必须为可访问，并且提供与指定的参数列表最具体的匹配。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    /// <summary>
    ///   返回的数组  对象表示由当前包装类型定义的构造函数 。
    /// </summary>
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    /// <summary>
    ///   返回的数组  对象表示由当前包装类型的指定的方法 。
    /// </summary>
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   返回  对象，表示具有指定名称的字段。
    /// </summary>
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    /// <summary>
    ///   返回的数组  对象表示的数据字段的类型定义的由当前包装 。
    /// </summary>
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   返回由当前包装类型实现的指定的接口 。
    /// </summary>
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   返回在当前类及其基类上实现的所有接口。
    /// </summary>
    function GetInterfaces: TArray<DNType>;
    /// <summary>
    ///   返回指定的事件。
    /// </summary>
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    /// <summary>
    ///   返回的数组  对象表示的所有公共事件声明或继承当前 。
    /// </summary>
    function GetEvents: TArray<DNEventInfo>; overload;
    /// <summary>
    ///   返回的数组  表示由当前包装类型的属性的对象 。
    /// </summary>
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    /// <summary>
    ///   返回在指定的事件  所声明或继承当前 。
    /// </summary>
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    /// <summary>
    ///   返回在指定的嵌套的类型  ，所声明或继承的包装由当前的类型 。
    /// </summary>
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    /// <summary>
    ///   返回由指定的嵌套的类型  并在  ，所声明或继承的表示由当前的类型 。
    /// </summary>
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    /// <summary>
    ///   返回由指定的成员 （属性、 方法、 构造函数、 字段、 事件和嵌套的类型） 给定 , ，, ，和 。
    /// </summary>
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   返回由指定的成员 。
    /// </summary>
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   返回  包含或引用由当前数组、 指针或引用传递的对象。
    /// </summary>
    function GetElementType: DNType;
    /// <summary>
    ///   返回为此类型，指定是否搜索此类型的继承链定义的所有自定义属性。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回包含由类型标识的自定义特性的数组。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   该值指示标识的自定义特性  定义。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   返回指定接口类型的接口映射。
    /// </summary>
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function GetEnumUnderlyingType: DNType;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsSubclassOf(c: DNType): Boolean;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(o: DNType): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取实现类型的 GUID （全局唯一标识符）。
    /// </summary>
    property GUID: DNGuid read get_GUID;
    /// <summary>
    ///   获取一个值，用于标识此元数据中的实体。
    /// </summary>
    property MetadataToken: Int32 read get_MetadataToken;
    /// <summary>
    ///   获取包含已实现的类型的模块。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   获取实现类型的程序集。
    /// </summary>
    property Assembly: DNAssembly read get_Assembly;
    /// <summary>
    ///   获取实现类型的内部元数据表示的句柄。
    /// </summary>
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    /// <summary>
    ///   获取具有删除的路径实现类型的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取实现类型的完全限定的名称。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   获取实现类型的命名空间。
    /// </summary>
    property Namespace: string read get_Namespace;
    /// <summary>
    ///   获取程序集的完全限定的名称。
    /// </summary>
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    /// <summary>
    ///   获取当前类型的基类型。
    /// </summary>
    property BaseType: DNType read get_BaseType;
    /// <summary>
    ///   获取指示此对象是否表示构造的泛型类型的值。
    /// </summary>
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    /// <summary>
    ///   获取基础  ，它表示已实现的类型。
    /// </summary>
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property MemberType: DNMemberTypes read get_MemberType;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
  end;

  TDNTypeDelegator = class(TDNGenericImport<DNTypeDelegatorClass, DNTypeDelegator>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodBodyClass = interface(DNObjectClass)
  ['{23A7AD86-4218-491F-91D2-4F4FFA5810CC}']
  end;

  /// <summary>
  ///   提供对元数据和 MSIL 的方法的主体的访问。
  /// </summary>
  [DNTypeName('System.Reflection.MethodBody')]
  DNMethodBody = interface(DNObject)
  ['{8E2EA778-34A7-32A0-8CC2-0BAA5AA2066A}']
  { getter & setter } 

    function get_LocalSignatureMetadataToken: Int32;
    function get_LocalVariables: DNIList<DNLocalVariableInfo>;
    function get_MaxStackSize: Int32;
    function get_InitLocals: Boolean;
    function get_ExceptionHandlingClauses: DNIList<DNExceptionHandlingClause>;

  { methods } 

    /// <summary>
    ///   一个字节数组的形式返回方法体的 MSIL。
    /// </summary>
    function GetILAsByteArray: TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   描述元数据中的方法的本地变量的签名中获取元数据标记。
    /// </summary>
    property LocalSignatureMetadataToken: Int32 read get_LocalSignatureMetadataToken;
    /// <summary>
    ///   获取在方法体中声明的局部变量的列表。
    /// </summary>
    property LocalVariables: DNIList<DNLocalVariableInfo> read get_LocalVariables;
    /// <summary>
    ///   在执行该方法时，操作数堆栈上获取最大项数。
    /// </summary>
    property MaxStackSize: Int32 read get_MaxStackSize;
    /// <summary>
    ///   获取一个值，该值指示是否在方法体中的本地变量初始化为其类型的默认值。
    /// </summary>
    property InitLocals: Boolean read get_InitLocals;
    /// <summary>
    ///   获取在方法主体中包含所有异常处理的子句的列表。
    /// </summary>
    property ExceptionHandlingClauses: DNIList<DNExceptionHandlingClause> read get_ExceptionHandlingClauses;
  end;

  TDNMethodBody = class(TDNGenericImport<DNMethodBodyClass, DNMethodBody>) end;

  //-------------namespace: System.Reflection----------------
  DNMissingClass = interface(DNObjectClass)
  ['{34131A08-C6AE-4D50-AFFA-D2591BA1B7E5}']
  end;

  /// <summary>
  ///   表示缺少的 。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Reflection.Missing')]
  DNMissing = interface(DNObject)
  ['{D5FAAC26-DB25-34E7-ADBD-AD5ED51F9433}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMissing = class(TDNGenericImport<DNMissingClass, DNMissing>) end;

  //-------------namespace: System.Reflection----------------
  DNModuleClass = interface(DNObjectClass)
  ['{6E7C39CE-F69F-4959-8581-010FAF701C17}']
  end;

  /// <summary>
  ///   对模块执行反射。
  /// </summary>
  [DNTypeName('System.Reflection.Module')]
  DNModule = interface(DNObject)
  ['{128191C5-B188-3054-81B7-E4F588EACF0E}']
  { getter & setter } 

    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MDStreamVersion: Int32;
    function get_FullyQualifiedName: string;
    function get_ModuleVersionId: DNGuid;
    function get_MetadataToken: Int32;
    function get_ScopeName: string;
    function get_Name: string;
    function get_Assembly: DNAssembly;
    function get_ModuleHandle: DNModuleHandle;

  { methods } 

    /// <summary>
    ///   确定此模块和指定的对象是否相等。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回该模块的名称。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回所有自定义属性。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   获取指定类型的自定义属性。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回一个值，该值指示是否已将指定的特性类型应用于此模块。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   返回的列表  为当前模块，可以在只反射上下文中使用的对象。
    /// </summary>
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    /// <summary>
    ///   返回方法或构造函数由指定的元数据标记标识。
    /// </summary>
    function ResolveMethod(metadataToken: Int32): DNMethodBase; overload;
    /// <summary>
    ///   返回由指定的元数据标记，在由指定的泛型类型参数定义的上下文中标识的构造函数的方法。
    /// </summary>
    function ResolveMethod(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMethodBase; overload;
    /// <summary>
    ///   返回由指定的元数据标记标识的字段。
    /// </summary>
    function ResolveField(metadataToken: Int32): DNFieldInfo; overload;
    /// <summary>
    ///   返回由指定的元数据标记，在由指定的泛型类型参数定义的上下文中标识的字段。
    /// </summary>
    function ResolveField(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNFieldInfo; overload;
    /// <summary>
    ///   返回由指定的元数据标记标识的类型。
    /// </summary>
    function ResolveType(metadataToken: Int32): DNType; overload;
    /// <summary>
    ///   返回由指定的元数据标记，在由指定的泛型类型参数定义的上下文中标识的类型。
    /// </summary>
    function ResolveType(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNType; overload;
    /// <summary>
    ///   返回类型或成员由指定的元数据标记标识。
    /// </summary>
    function ResolveMember(metadataToken: Int32): DNMemberInfo; overload;
    /// <summary>
    ///   返回类型或由指定的元数据标记，在由指定的泛型类型参数定义的上下文中标识的成员。
    /// </summary>
    function ResolveMember(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMemberInfo; overload;
    /// <summary>
    ///   返回由元数据标记标识的签名 blob。
    /// </summary>
    function ResolveSignature(metadataToken: Int32): TArray<Byte>;
    /// <summary>
    ///   返回由指定的元数据标记标识的字符串。
    /// </summary>
    function ResolveString(metadataToken: Int32): string;
    procedure GetPEKind(out peKind: DNPortableExecutableKinds; out machine: DNImageFileMachine);
    /// <summary>
    ///   提供了  实现序列化的对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   返回指定的类型，通过指定的区分大小写搜索模块。
    /// </summary>
    function GetType(className: string; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   返回指定的类型，执行区分大小写的搜索。
    /// </summary>
    function GetType(className: string): DNType; overload;
    /// <summary>
    ///   返回指定的类型，指定是否要使该模块的区分大小写搜索，以及是否引发异常，如果找不到该类型。
    /// </summary>
    function GetType(className: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   返回给定筛选器和筛选条件接受的类数组。
    /// </summary>
    function FindTypes(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    /// <summary>
    ///   返回在此模块中定义的所有类型。
    /// </summary>
    function GetTypes: TArray<DNType>;
    /// <summary>
    ///   获取一个值，该值指示对象是否为资源。
    /// </summary>
    function IsResource: Boolean;
    /// <summary>
    ///   返回在模块上定义的全局字段。
    /// </summary>
    function GetFields: TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   返回在与指定绑定标志匹配的模块上定义的全局字段。
    /// </summary>
    function GetFields(bindingFlags: DNBindingFlags): TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   返回具有指定名称的方法。
    /// </summary>
    function GetField(name: string): DNFieldInfo; overload;
    /// <summary>
    ///   返回具有指定名称和绑定特性的字段。
    /// </summary>
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    /// <summary>
    ///   返回在模块中定义的全局方法。
    /// </summary>
    function GetMethods: TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   返回在与指定的绑定标志匹配的模块上定义的全局方法。
    /// </summary>
    function GetMethods(bindingFlags: DNBindingFlags): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   返回具有指定名称、绑定信息、调用约定和参数类型及修饰符的方法。
    /// </summary>
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    /// <summary>
    ///   返回具有指定名称和参数类型的方法。
    /// </summary>
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    /// <summary>
    ///   返回具有指定名称的方法。
    /// </summary>
    function GetMethod(name: string): DNMethodInfo; overload;
    /// <summary>
    ///   返回  对应于包含在此模块所属的程序集的验证码签名的证书对象。
    ///               如果该程序集还不是验证码签名，  返回。
    /// </summary>
    function GetSignerCertificate: DNX509Certificate;
    function GetType: DNType; overload;

  { propertys } 

    /// <summary>
    ///   获取包含此模块的自定义特性的集合。
    /// </summary>
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    /// <summary>
    ///   获取元数据流版本。
    /// </summary>
    property MDStreamVersion: Int32 read get_MDStreamVersion;
    /// <summary>
    ///   获取表示此模块的完全限定的名称和路径的字符串。
    /// </summary>
    property FullyQualifiedName: string read get_FullyQualifiedName;
    /// <summary>
    ///   获取可用于区分模块的两个版本的全局唯一标识符 (UUID)。
    /// </summary>
    property ModuleVersionId: DNGuid read get_ModuleVersionId;
    /// <summary>
    ///   获取标识元数据中的模块的令牌。
    /// </summary>
    property MetadataToken: Int32 read get_MetadataToken;
    /// <summary>
    ///   获取表示模块名的字符串。
    /// </summary>
    property ScopeName: string read get_ScopeName;
    /// <summary>
    ///   获取  表示模块的路径名称中删除。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取适当  的此实例的 。
    /// </summary>
    property Assembly: DNAssembly read get_Assembly;
    /// <summary>
    ///   获取模块的句柄。
    /// </summary>
    property ModuleHandle: DNModuleHandle read get_ModuleHandle;
  end;

  TDNModule = class(TDNGenericImport<DNModuleClass, DNModule>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNModuleBuilderClass = interface(DNModuleClass)
  ['{587F6A04-F517-46EE-A349-E3EBFC816D8F}']
  end;

  /// <summary>
  ///   定义并表示动态程序集中的模块。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.ModuleBuilder')]
  DNModuleBuilder = interface(DNModule)
  ['{FB2ED445-2862-3A63-9F5A-BBF6C2195DCE}']
  { getter & setter } 

    function get_FullyQualifiedName: string;
    function get_MDStreamVersion: Int32;
    function get_ModuleVersionId: DNGuid;
    function get_MetadataToken: Int32;
    function get_ScopeName: string;
    function get_Name: string;
    function get_Assembly: DNAssembly;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_ModuleHandle: DNModuleHandle;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回已应用于当前的所有自定义特性 。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回已应用于当前的所有自定义特性 , ，且派生自指定的属性类型。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   返回一个值，该值指示是否已将指定的特性类型应用于此模块。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   返回有关已应用于当前 （表示为  对象）的特性的信息。
    /// </summary>
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    /// <summary>
    ///   返回在此模块中定义的所有类。
    /// </summary>
    function GetTypes: TArray<DNType>;
    /// <summary>
    ///   获取模块中定义的命名的类型。
    /// </summary>
    function GetType(className: string): DNType; overload;
    /// <summary>
    ///   获取定义在模块中，可以选择忽略类型名称的大小写的已命名的类型。
    /// </summary>
    function GetType(className: string; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   获取定义在模块中，可以选择忽略类型名称的大小写的已命名的类型。
    ///               （可选） 如果找不到类型时引发异常。
    /// </summary>
    function GetType(className: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   返回由元数据标记标识的签名 blob。
    /// </summary>
    function ResolveSignature(metadataToken: Int32): TArray<Byte>;
    /// <summary>
    ///   返回由指定的元数据标记，在由指定的泛型类型参数定义的上下文中标识的构造函数的方法。
    /// </summary>
    function ResolveMethod(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMethodBase; overload;
    /// <summary>
    ///   返回由指定的元数据标记，在由指定的泛型类型参数定义的上下文中标识的字段。
    /// </summary>
    function ResolveField(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNFieldInfo; overload;
    /// <summary>
    ///   返回由指定的元数据标记，在由指定的泛型类型参数定义的上下文中标识的类型。
    /// </summary>
    function ResolveType(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNType; overload;
    /// <summary>
    ///   返回类型或由指定的元数据标记，在由指定的泛型类型参数定义的上下文中标识的成员。
    /// </summary>
    function ResolveMember(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMemberInfo; overload;
    /// <summary>
    ///   返回由指定的元数据标记标识的字符串。
    /// </summary>
    function ResolveString(metadataToken: Int32): string;
    procedure GetPEKind(out peKind: DNPortableExecutableKinds; out machine: DNImageFileMachine);
    /// <summary>
    ///   获取一个值，该值指示对象是否为资源。
    /// </summary>
    function IsResource: Boolean;
    /// <summary>
    ///   返回在可移植可执行 (PE) 文件的.sdata 区域中定义指定的绑定标志相匹配的所有字段。
    /// </summary>
    function GetFields(bindingFlags: DNBindingFlags): TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   返回在可移植可执行 (PE) 文件，具有指定的名称和绑定特性的.sdata 区域中定义的模块级字段。
    /// </summary>
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    /// <summary>
    ///   返回已在模块级别上为当前定义的所有方法 , ，并且匹配指定的绑定标志。
    /// </summary>
    function GetMethods(bindingFlags: DNBindingFlags): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   返回  对应于包含在此模块所属的程序集的验证码签名的证书对象。
    ///               如果该程序集还不是验证码签名，  返回。
    /// </summary>
    function GetSignerCertificate: DNX509Certificate;
    /// <summary>
    ///   构造  为具有指定名称在此模块中的私有类型。
    /// </summary>
    function DefineType(name: string): DNTypeBuilder; overload;
    /// <summary>
    ///   构造  给定类型名称和类型属性。
    /// </summary>
    function DefineType(name: string; attr: DNTypeAttributes): DNTypeBuilder; overload;
    /// <summary>
    ///   构造  给定类型名称、 其属性和定义的类型扩展的类型。
    /// </summary>
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType): DNTypeBuilder; overload;
    /// <summary>
    ///   构造  给定的类型名称、 属性、 定义的类型扩展的类型和类型的总大小。
    /// </summary>
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; typesize: Int32): DNTypeBuilder; overload;
    /// <summary>
    ///   构造  给定的类型名称、 属性、 定义的类型扩展的类型、 已定义类型的封装大小和已定义类型的总大小。
    /// </summary>
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; packingSize: DNPackingSize; typesize: Int32): DNTypeBuilder; overload;
    /// <summary>
    ///   构造  给定的类型名称、 属性、 定义的类型扩展的类型和已定义的类型实现的接口。
    /// </summary>
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; interfaces: TArray<DNType>): DNTypeBuilder; overload;
    /// <summary>
    ///   构造  给定的类型名称、 属性、 定义的类型扩展的类型和类型的装箱大小。
    /// </summary>
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; packsize: DNPackingSize): DNTypeBuilder; overload;
    /// <summary>
    ///   定义是具有名为的单个非静态字段的值类型的枚举类型  的指定类型。
    /// </summary>
    function DefineEnum(name: string; visibility: DNTypeAttributes; underlyingType: DNType): DNEnumBuilder;
    /// <summary>
    ///   定义命名托管嵌入的资源存储在此模块中。
    /// </summary>
    function DefineResource(name: string; description: string): DNIResourceWriter; overload;
    /// <summary>
    ///   定义的已命名托管嵌入的资源与给定的特性是存储在此模块。
    /// </summary>
    function DefineResource(name: string; description: string; attribute: DNResourceAttributes): DNIResourceWriter; overload;
    /// <summary>
    ///   定义表示嵌入在动态程序集的清单资源的二进制大型对象 (BLOB)。
    /// </summary>
    procedure DefineManifestResource(name: string; stream: DNStream; attribute: DNResourceAttributes);
    /// <summary>
    ///   定义给定不透明二进制大型对象 (BLOB) 的字节的非托管的嵌入的资源。
    /// </summary>
    procedure DefineUnmanagedResource(resource: TArray<Byte>); overload;
    /// <summary>
    ///   定义在给定名称的 Win32 资源文件的非托管的资源。
    /// </summary>
    procedure DefineUnmanagedResource(resourceFileName: string); overload;
    /// <summary>
    ///   定义一个具有指定的名称、 属性、 返回类型和参数类型全局方法。
    /// </summary>
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    /// <summary>
    ///   定义一个具有指定的名称、 属性、 调用约定、 返回类型和参数类型全局方法。
    /// </summary>
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    /// <summary>
    ///   定义一个具有指定名称的全局方法、 属性、 调用约定、 返回类型的返回类型、 参数类型和自定义修饰符的自定义修饰符的参数类型。
    /// </summary>
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNMethodBuilder; overload;
    /// <summary>
    ///   定义  具有指定名称的方法在其中定义该方法，该 DLL 的方法、 方法的调用约定，该方法的返回类型、 该方法的参数的类型的属性的名称和  标志。
    /// </summary>
    function DefinePInvokeMethod(name: string; dllName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    /// <summary>
    ///   定义  具有指定名称的方法在其中定义该方法，该 DLL 的方法、 方法的调用约定，该方法的返回类型、 该方法的参数的类型的属性的名称和  标志。
    /// </summary>
    function DefinePInvokeMethod(name: string; dllName: string; entryName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    /// <summary>
    ///   完成的全局函数定义和全局数据定义，此动态模块。
    /// </summary>
    procedure CreateGlobalFunctions;
    /// <summary>
    ///   可移植可执行 (PE) 文件的.sdata 节中定义未初始化的数据字段。
    /// </summary>
    function DefineInitializedData(name: string; data: TArray<Byte>; attributes: DNFieldAttributes): DNFieldBuilder;
    /// <summary>
    ///   可移植可执行 (PE) 文件的.sdata 节中定义了未初始化的数据字段。
    /// </summary>
    function DefineUninitializedData(name: string; size: Int32; attributes: DNFieldAttributes): DNFieldBuilder;
    /// <summary>
    ///   返回用于标识此模块内的指定的类型的标记。
    /// </summary>
    function GetTypeToken(&type: DNType): DNTypeToken; overload;
    /// <summary>
    ///   返回用于标识具有指定名称的类型的标记。
    /// </summary>
    function GetTypeToken(name: string): DNTypeToken; overload;
    /// <summary>
    ///   返回用于标识此模块内的指定的方法的标记。
    /// </summary>
    function GetMethodToken(method: DNMethodInfo): DNMethodToken; overload;
    function GetConstructorToken(&constructor: DNConstructorInfo; optionalParameterTypes: DNIEnumerable<DNType>): DNMethodToken; overload;
    function GetMethodToken(method: DNMethodInfo; optionalParameterTypes: DNIEnumerable<DNType>): DNMethodToken; overload;
    /// <summary>
    ///   数组类上返回的命名方法的标记。
    /// </summary>
    function GetArrayMethodToken(arrayClass: DNType; methodName: string; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodToken;
    /// <summary>
    ///   数组类上返回的已命名的方法。
    /// </summary>
    function GetArrayMethod(arrayClass: DNType; methodName: string; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodInfo;
    /// <summary>
    ///   返回用于标识此模块内的指定构造函数的标记。
    /// </summary>
    function GetConstructorToken(con: DNConstructorInfo): DNMethodToken; overload;
    /// <summary>
    ///   返回用于标识此模块内的指定的字段的标记。
    /// </summary>
    function GetFieldToken(field: DNFieldInfo): DNFieldToken;
    /// <summary>
    ///   在模块的常量池中返回给定字符串的标记。
    /// </summary>
    function GetStringConstant(str: string): DNStringToken;
    /// <summary>
    ///   定义所定义的签名的令牌指定 。
    /// </summary>
    function GetSignatureToken(sigHelper: DNSignatureHelper): DNSignatureToken; overload;
    /// <summary>
    ///   定义具有指定的字符数组和签名长度的签名令牌。
    /// </summary>
    function GetSignatureToken(sigBytes: TArray<Byte>; sigLength: Int32): DNSignatureToken; overload;
    /// <summary>
    ///   适用于此模块的自定义特性，通过使用的指定二进制大型对象 (BLOB) 表示的属性。
    /// </summary>
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    /// <summary>
    ///   适用于此模块的自定义特性，通过使用自定义特性生成器。
    /// </summary>
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    /// <summary>
    ///   返回与此动态模块相关联的符号编写器。
    /// </summary>
    function GetSymWriter: DNISymbolWriter;
    /// <summary>
    ///   定义源文档。
    /// </summary>
    function DefineDocument(url: string; language: DNGuid; languageVendor: DNGuid; documentType: DNGuid): DNISymbolDocumentWriter;
    /// <summary>
    ///   设置的用户入口点。
    /// </summary>
    procedure SetUserEntryPoint(entryPoint: DNMethodInfo);
    /// <summary>
    ///   此方法不执行任何操作。
    /// </summary>
    procedure SetSymCustomAttribute(name: string; data: TArray<Byte>);
    /// <summary>
    ///   返回一个值，该值指示此动态模块是否是临时性。
    /// </summary>
    function IsTransient: Boolean;
    function ToString: string;
    function ResolveMethod(metadataToken: Int32): DNMethodBase; overload;
    function ResolveField(metadataToken: Int32): DNFieldInfo; overload;
    function ResolveType(metadataToken: Int32): DNType; overload;
    function ResolveMember(metadataToken: Int32): DNMemberInfo; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function FindTypes(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetType: DNType; overload;

  { propertys } 

    /// <summary>
    ///   获取  表示此模块的完全限定的名称和路径。
    /// </summary>
    property FullyQualifiedName: string read get_FullyQualifiedName;
    /// <summary>
    ///   获取元数据流版本。
    /// </summary>
    property MDStreamVersion: Int32 read get_MDStreamVersion;
    /// <summary>
    ///   获取可以用来区分一个模块的两个版本的通用唯一标识符 (UUID)。
    /// </summary>
    property ModuleVersionId: DNGuid read get_ModuleVersionId;
    /// <summary>
    ///   获取标识元数据中的当前动态模块的令牌。
    /// </summary>
    property MetadataToken: Int32 read get_MetadataToken;
    /// <summary>
    ///   获取表示动态模块的名称的字符串。
    /// </summary>
    property ScopeName: string read get_ScopeName;
    /// <summary>
    ///   一个字符串，指示这是内存中的模块。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取定义的此实例的动态程序集 。
    /// </summary>
    property Assembly: DNAssembly read get_Assembly;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property ModuleHandle: DNModuleHandle read get_ModuleHandle;
  end;

  TDNModuleBuilder = class(TDNGenericImport<DNModuleBuilderClass, DNModuleBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNParameterInfoClass = interface(DNObjectClass)
  ['{A4951F4B-B3AD-4439-9157-99AA1284112F}']
  end;

  /// <summary>
  ///   发现参数的属性并提供对参数元数据的访问权限。
  /// </summary>
  [DNTypeName('System.Reflection.ParameterInfo')]
  DNParameterInfo = interface(DNObject)
  ['{E5CE8078-0CA7-3578-80DB-F20FCA8786A6}']
  { getter & setter } 

    function get_ParameterType: DNType;
    function get_Name: string;
    function get_HasDefaultValue: Boolean;
    function get_DefaultValue: DNObject;
    function get_RawDefaultValue: DNObject;
    function get_Position: Int32;
    function get_Attributes: DNParameterAttributes;
    function get_Member: DNMemberInfo;
    function get_IsIn: Boolean;
    function get_IsOut: Boolean;
    function get_IsLcid: Boolean;
    function get_IsRetval: Boolean;
    function get_IsOptional: Boolean;
    function get_MetadataToken: Int32;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;

  { methods } 

    /// <summary>
    ///   获取参数所必需的自定义修饰符。
    /// </summary>
    function GetRequiredCustomModifiers: TArray<DNType>;
    /// <summary>
    ///   获取参数可选的自定义修饰符。
    /// </summary>
    function GetOptionalCustomModifiers: TArray<DNType>;
    /// <summary>
    ///   获取对该参数定义的所有自定义属性。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   获取指定的类型或应用于此参数及其派生的类型的自定义特性。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   确定是否将指定的类型或其派生的类型的自定义特性应用于此参数。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   返回的列表  可以仅反射上下文中使用的当前参数的对象。
    /// </summary>
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    /// <summary>
    ///   返回应而不是指定的序列化的流对象反序列化的真实对象。
    /// </summary>
    function GetRealObject(context: DNStreamingContext): DNObject;
    /// <summary>
    ///   获取参数类型和表示为字符串的名称。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取  此参数。
    /// </summary>
    property ParameterType: DNType read get_ParameterType;
    /// <summary>
    ///   获取参数的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取一个值，该值指示此参数是否具有默认值。
    /// </summary>
    property HasDefaultValue: Boolean read get_HasDefaultValue;
    /// <summary>
    ///   获取一个值，该值的默认值，如果该参数有默认值。
    /// </summary>
    property DefaultValue: DNObject read get_DefaultValue;
    /// <summary>
    ///   获取一个指示默认值的值（如果参数具有默认值）。
    /// </summary>
    property RawDefaultValue: DNObject read get_RawDefaultValue;
    /// <summary>
    ///   获取参数的形参表中从零开始的位置。
    /// </summary>
    property Position: Int32 read get_Position;
    /// <summary>
    ///   获取此参数的属性。
    /// </summary>
    property Attributes: DNParameterAttributes read get_Attributes;
    /// <summary>
    ///   获取一个值，该值指示在其中实现该参数的成员。
    /// </summary>
    property Member: DNMemberInfo read get_Member;
    /// <summary>
    ///   获取一个值，该值指示这是否为输入的参数。
    /// </summary>
    property IsIn: Boolean read get_IsIn;
    /// <summary>
    ///   获取一个值，该值指示这是否为输出参数。
    /// </summary>
    property IsOut: Boolean read get_IsOut;
    /// <summary>
    ///   获取一个值，该值指示此参数为区域设置标识符 (lcid)。
    /// </summary>
    property IsLcid: Boolean read get_IsLcid;
    /// <summary>
    ///   获取一个值，该值指示这是否  参数。
    /// </summary>
    property IsRetval: Boolean read get_IsRetval;
    /// <summary>
    ///   获取一个值，该值指示该参数是否可选。
    /// </summary>
    property IsOptional: Boolean read get_IsOptional;
    /// <summary>
    ///   获取一个值，元数据中标识此参数。
    /// </summary>
    property MetadataToken: Int32 read get_MetadataToken;
    /// <summary>
    ///   获取包含此参数的自定义特性的集合。
    /// </summary>
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
  end;

  TDNParameterInfo = class(TDNGenericImport<DNParameterInfoClass, DNParameterInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNPointerClass = interface(DNObjectClass)
  ['{98DB3102-B480-4EC6-9B47-296D176563DD}']
  { static methods } 

    /// <summary>
    ///   框提供的非托管内存指针和与该指针转换为托管相关联的类型  包装器对象。
    ///               值和类型保存，以便它们可以从访问本机代码在调用过程。
    /// </summary>
    {class} function Box(var ptr: DNVoid; &type: DNType): DNObject;
    /// <summary>
    ///   返回存储的指针。
    /// </summary>
    {class} function Unbox(ptr: DNObject): DNVoid;

  end;

  /// <summary>
  ///   提供一个包装类的指针。
  /// </summary>
  [DNTypeName('System.Reflection.Pointer')]
  DNPointer = interface(DNObject)
  ['{0517463E-1139-3970-BFA9-DCC997B23E7C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNPointer = class(TDNGenericImport<DNPointerClass, DNPointer>) end;

  //-------------namespace: System.Reflection----------------
  DNReflectionContextClass = interface(DNObjectClass)
  ['{F06A80B8-ABE1-454E-9199-9FEDEED3AAC7}']
  end;

  /// <summary>
  ///   表示可以提供反射对象的上下文。
  /// </summary>
  [DNTypeName('System.Reflection.ReflectionContext')]
  DNReflectionContext = interface(DNObject)
  ['{8B4D8BB5-A975-3D20-B38A-423EEB5B5E86}']
  { methods } 

    /// <summary>
    ///   在此反射上下文中获取指定对象类型的表示形式。
    /// </summary>
    function GetTypeForObject(value: DNObject): DNTypeInfo;
    /// <summary>
    ///   获取表示形式，在此反射上下文中，从另一个反射上下文由对象表示程序集。
    /// </summary>
    function MapAssembly(assembly: DNAssembly): DNAssembly;
    /// <summary>
    ///   获取表示形式，在此反射上下文中的对象由另一个反射上下文中表示的类型。
    /// </summary>
    function MapType(&type: DNTypeInfo): DNTypeInfo;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNReflectionContext = class(TDNGenericImport<DNReflectionContextClass, DNReflectionContext>) end;

  //-------------namespace: System.Reflection----------------
  DNRuntimeReflectionExtensionsClass = interface(DNObjectClass)
  ['{D36D1A4D-CACE-492E-98EC-8FFAACE4DC86}']
  { static methods } 

    /// <summary>
    ///   检索表示指定类型上定义的所有属性的集合。
    /// </summary>
    {class} function GetRuntimeProperties(&type: DNType): DNIEnumerable<DNPropertyInfo>;
    /// <summary>
    ///   检索表示指定类型上定义的所有事件的集合。
    /// </summary>
    {class} function GetRuntimeEvents(&type: DNType): DNIEnumerable<DNEventInfo>;
    /// <summary>
    ///   检索表示指定类型上定义的所有方法的集合。
    /// </summary>
    {class} function GetRuntimeMethods(&type: DNType): DNIEnumerable<DNMethodInfo>;
    /// <summary>
    ///   检索表示指定类型上定义的所有字段的集合。
    /// </summary>
    {class} function GetRuntimeFields(&type: DNType): DNIEnumerable<DNFieldInfo>;
    /// <summary>
    ///   检索一个对象，表示指定的属性。
    /// </summary>
    {class} function GetRuntimeProperty(&type: DNType; name: string): DNPropertyInfo;
    /// <summary>
    ///   检索一个对象，表示指定的事件。
    /// </summary>
    {class} function GetRuntimeEvent(&type: DNType; name: string): DNEventInfo;
    /// <summary>
    ///   检索一个对象，表示指定的方法。
    /// </summary>
    {class} function GetRuntimeMethod(&type: DNType; name: string; parameters: TArray<DNType>): DNMethodInfo;
    /// <summary>
    ///   检索一个对象，表示指定的字段。
    /// </summary>
    {class} function GetRuntimeField(&type: DNType; name: string): DNFieldInfo;
    /// <summary>
    ///   检索表示直接或间接基类首先声明该方法的位置上的指定的方法的对象。
    /// </summary>
    {class} function GetRuntimeBaseDefinition(method: DNMethodInfo): DNMethodInfo;
    /// <summary>
    ///   返回指定的类型和指定的接口的接口映射。
    /// </summary>
    {class} function GetRuntimeInterfaceMap(typeInfo: DNTypeInfo; interfaceType: DNType): DNInterfaceMapping;
    /// <summary>
    ///   获取一个对象，表示由指定的委托所表示的方法。
    /// </summary>
    {class} function GetMethodInfo(del: DNDelegate): DNMethodInfo;

  end;

  /// <summary>
  ///   提供可在运行时检索类型相关信息的方法。
  /// </summary>
  [DNTypeName('System.Reflection.RuntimeReflectionExtensions')]
  DNRuntimeReflectionExtensions = interface(DNObject)
  ['{84914023-77E2-3037-B340-B5FCC7E07B4A}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRuntimeReflectionExtensions = class(TDNGenericImport<DNRuntimeReflectionExtensionsClass, DNRuntimeReflectionExtensions>) end;

  //-------------namespace: System.Reflection----------------
  DNStrongNameKeyPairClass = interface(DNObjectClass)
  ['{B12144F8-2788-4458-898B-546E2F470163}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，生成密钥对从 。
    /// </summary>
    {class} function init(keyPairFile: DNFileStream): DNStrongNameKeyPair; overload;
    /// <summary>
    ///   新实例初始化  类，生成密钥对从  数组。
    /// </summary>
    {class} function init(keyPairArray: TArray<Byte>): DNStrongNameKeyPair; overload;
    /// <summary>
    ///   新实例初始化  类，生成密钥对从 。
    /// </summary>
    {class} function init(keyPairContainer: string): DNStrongNameKeyPair; overload;

  end;

  /// <summary>
  ///   封装对公共或私有密钥对用于签署强名称程序集的访问。
  /// </summary>
  [DNTypeName('System.Reflection.StrongNameKeyPair')]
  DNStrongNameKeyPair = interface(DNObject)
  ['{D633F013-0563-312A-B9D6-D067A7D59231}']
  { getter & setter } 

    function get_PublicKey: TArray<Byte>;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取令牌的密钥对的公钥或公钥的公共部分。
    /// </summary>
    property PublicKey: TArray<Byte> read get_PublicKey;
  end;

  TDNStrongNameKeyPair = class(TDNGenericImport<DNStrongNameKeyPairClass, DNStrongNameKeyPair>) end;

  //-------------namespace: System.Resources----------------
  DNResourceManagerClass = interface(DNObjectClass)
  ['{93DC7ADE-857F-42E0-AC79-B80B49ECE3F8}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，该实例在给定的程序集中查找从指定根名称导出的文件中包含的资源。
    /// </summary>
    {class} function init(baseName: string; assembly: DNAssembly): DNResourceManager; overload;
    /// <summary>
    ///   初始化使用指定  的  类的新实例，该实例在给定的程序集中的指定根名称类的文件中查找资源。
    /// </summary>
    {class} function init(baseName: string; assembly: DNAssembly; usingResourceSet: DNType): DNResourceManager; overload;
    /// <summary>
    ///   它根据指定的对象中的信息在附属程序集内查找资源来初始化  类的新实例。
    /// </summary>
    {class} function init(resourceSource: DNType): DNResourceManager; overload;

  { static methods } 

    /// <summary>
    ///   返回一个  对象，它在特定的目录中而不在资源的程序集清单。
    /// </summary>
    {class} function CreateFileBasedResourceManager(baseName: string; resourceDir: string; usingResourceSet: DNType): DNResourceManager;

  end;

  /// <summary>
  ///   表示资源管理器，其可在运行时提供对于特定文化资源的便利访问
  ///            
  ///              安全说明：在此类不受信任的数据中调用方法存在安全风险。
  ///               仅在受信任的数据类中调用方法。
  ///               有关详细信息，请参见不受信任的数据的安全风险。
  /// </summary>
  [DNTypeName('System.Resources.ResourceManager')]
  DNResourceManager = interface(DNObject)
  ['{9AFB3B93-E6DA-35D6-B9FE-44815E2BFD45}']
  { getter & setter } 

    function get_BaseName: string;
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_ResourceSetType: DNType;

  { methods } 

    /// <summary>
    ///   告知资源管理对所有  对象调用方法 ，并释放所有资源。
    /// </summary>
    procedure ReleaseAllResources;
    /// <summary>
    ///   检索特定区域性的资源集合。
    /// </summary>
    function GetResourceSet(culture: DNCultureInfo; createIfNotExists: Boolean; tryParents: Boolean): DNResourceSet;
    /// <summary>
    ///   返回指定的字符串资源的值。
    /// </summary>
    function GetString(name: string): string; overload;
    /// <summary>
    ///   返回为指定区域性本地化的字符串资源的值。
    /// </summary>
    function GetString(name: string; culture: DNCultureInfo): string; overload;
    /// <summary>
    ///   返回指定的非字符串资源的值。
    /// </summary>
    function GetObject(name: string): DNObject; overload;
    /// <summary>
    ///   获取为指定区域性本地化的指定非字符串资源的值。
    /// </summary>
    function GetObject(name: string; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   从指定资源返回非托管内存流对象。
    /// </summary>
    function GetStream(name: string): DNUnmanagedMemoryStream; overload;
    /// <summary>
    ///   使用指定的区域性从指定的资源返回非托管内存流对象。
    /// </summary>
    function GetStream(name: string; culture: DNCultureInfo): DNUnmanagedMemoryStream; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  从其中搜索资源的资源文件的根名称。
    /// </summary>
    property BaseName: string read get_BaseName;
    /// <summary>
    ///   获取或设置值，该值指示资源管理器是否允许在  和  方法中进行不区分大小写的资源查找。
    /// </summary>
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    /// <summary>
    ///   获取资源管理器使用构造  对象的资源设置对象的类型。
    /// </summary>
    property ResourceSetType: DNType read get_ResourceSetType;
  end;

  TDNResourceManager = class(TDNGenericImport<DNResourceManagerClass, DNResourceManager>) end;

  //-------------namespace: System.Resources----------------
  DNResourceReaderClass = interface(DNObjectClass)
  ['{B6B5B348-09FE-482A-B514-C354726B9775}']
  { constructors } 

    /// <summary>
    ///   为指定的资源文件初始化  类的新实例。
    /// </summary>
    {class} function init(fileName: string): DNResourceReader; overload;
    /// <summary>
    ///   为指定的流初始化  类的新实例。
    /// </summary>
    {class} function init(stream: DNStream): DNResourceReader; overload;

  end;

  /// <summary>
  ///   通过读取顺序资源名称/值对枚举二进制资源 (.resources) 文件的资源。
  ///            
  ///              安全说明：在此类不受信任的数据中调用方法存在安全风险。
  ///               仅在受信任的数据类中调用方法。
  ///               有关详细信息，请参见不受信任的数据的安全风险。
  /// </summary>
  [DNTypeName('System.Resources.ResourceReader')]
  DNResourceReader = interface(DNObject)
  ['{DD78B5ED-AA52-3B2B-A1B4-6CE3CE3155EA}']
  { methods } 

    /// <summary>
    ///   释放与此  对象相关联的所有操作系统资源。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   返回此  对象的枚举器。
    /// </summary>
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure GetResourceData(resourceName: string; out resourceType: string; out resourceData: TArray<Byte>);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNResourceReader = class(TDNGenericImport<DNResourceReaderClass, DNResourceReader>) end;

  //-------------namespace: System.Resources----------------
  DNResourceSetClass = interface(DNObjectClass)
  ['{3EE1B2CB-119F-409F-81B0-6C3DB1EFFAF8}']
  { constructors } 

    /// <summary>
    ///   使用从给定文件打开并读取资源的系统默认的  来创建  类的新实例。
    /// </summary>
    {class} function init(fileName: string): DNResourceSet; overload;
    /// <summary>
    ///   使用从给定流中读取资源的系统默认的  来创建  类的新实例。
    /// </summary>
    {class} function init(stream: DNStream): DNResourceSet; overload;
    /// <summary>
    ///   使用指定的资源阅读器创建  类的新实例。
    /// </summary>
    {class} function init(reader: DNIResourceReader): DNResourceSet; overload;

  end;

  /// <summary>
  ///   存储已针对某个特定区域性进行了本地化的所有资源，忽略所有其他区域性（包括任何代用规则）。
  ///            
  ///              安全说明：在此类不受信任的数据中调用方法存在安全风险。
  ///               仅在受信任的数据类中调用方法。
  ///               有关详细信息，请参见不受信任的数据的安全风险。
  /// </summary>
  [DNTypeName('System.Resources.ResourceSet')]
  DNResourceSet = interface(DNObject)
  ['{A907F7CD-8C99-31EA-AC00-80FA4D94780A}']
  { methods } 

    /// <summary>
    ///   通过此  来关闭和释放所有资源。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   处置由  的当前实例使用的资源（内存除外）。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   返回此类  的首选资源读取器类。
    /// </summary>
    function GetDefaultReader: DNType;
    /// <summary>
    ///   返回此类  的首选资源编写器类。
    /// </summary>
    function GetDefaultWriter: DNType;
    /// <summary>
    ///   返回 ，它可以循环访问 。
    /// </summary>
    function GetEnumerator: DNIDictionaryEnumerator;
    /// <summary>
    ///   搜索具有指定名称的  资源。
    /// </summary>
    function GetString(name: string): string; overload;
    /// <summary>
    ///   如果请求的话，按照不区分大小写的方式搜索具有指定名称的  资源。
    /// </summary>
    function GetString(name: string; ignoreCase: Boolean): string; overload;
    /// <summary>
    ///   搜索具有指定名称的资源对象。
    /// </summary>
    function GetObject(name: string): DNObject; overload;
    /// <summary>
    ///   如果请求的话，按照不区分大小写的方式搜索具有指定名称的资源对象。
    /// </summary>
    function GetObject(name: string; ignoreCase: Boolean): DNObject; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNResourceSet = class(TDNGenericImport<DNResourceSetClass, DNResourceSet>) end;

  //-------------namespace: System.Resources----------------
  DNResourceWriterClass = interface(DNObjectClass)
  ['{54CDD663-4D02-46DF-98FF-0B10646F6C0A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，它将资源写入到指定文件中。
    /// </summary>
    {class} function init(fileName: string): DNResourceWriter; overload;
    /// <summary>
    ///   新实例初始化  将资源写入到提供的流的类。
    /// </summary>
    {class} function init(stream: DNStream): DNResourceWriter; overload;

  end;

  /// <summary>
  ///   将资源写入到输出文件或输出流的系统默认格式。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Resources.ResourceWriter')]
  DNResourceWriter = interface(DNObject)
  ['{9187A0D6-508C-36CC-A79F-F90B89A0E154}']
  { methods } 

    /// <summary>
    ///   将字符串资源添加到要写入的资源的列表。
    /// </summary>
    procedure AddResource(name: string; value: string); overload;
    /// <summary>
    ///   添加指定为到要写入的资源的列表对象的已命名的资源。
    /// </summary>
    procedure AddResource(name: string; value: DNObject); overload;
    /// <summary>
    ///   将添加到资源列表，要写入流的形式指定的已命名的资源。
    /// </summary>
    procedure AddResource(name: string; value: DNStream); overload;
    /// <summary>
    ///   将添加到资源列表，要写入流的形式指定的已命名的资源，并指定流是否应关闭后  调用方法。
    /// </summary>
    procedure AddResource(name: string; value: DNStream; closeAfterWrite: Boolean); overload;
    /// <summary>
    ///   将添加到资源列表，要写入字节数组的形式指定的已命名的资源。
    /// </summary>
    procedure AddResource(name: string; value: TArray<Byte>); overload;
    /// <summary>
    ///   将数据单元作为资源添加到要写入的资源的列表。
    /// </summary>
    procedure AddResourceData(name: string; typeName: string; serializedData: TArray<Byte>);
    /// <summary>
    ///   将资源保存到输出流，然后关闭它。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   允许用户在关闭资源文件或流，显式地释放资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   将所有资源都保存到输出流中系统默认格式。
    /// </summary>
    procedure Generate;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNResourceWriter = class(TDNGenericImport<DNResourceWriterClass, DNResourceWriter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvCdeclClass = interface(DNObjectClass)
  ['{8E9E94B3-E740-4E24-BBD9-53B9C84212A4}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCallConvCdecl;

  end;

  /// <summary>
  ///   指示方法应使用  调用约定。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CallConvCdecl')]
  DNCallConvCdecl = interface(DNObject)
  ['{A3A1F076-1FA7-3A26-886D-8841CB45382F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCallConvCdecl = class(TDNGenericImport<DNCallConvCdeclClass, DNCallConvCdecl>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvFastcallClass = interface(DNObjectClass)
  ['{4E1A7214-D006-46CA-90AD-6CDC25336D3D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCallConvFastcall;

  end;

  /// <summary>
  ///   在此版本的.NET Framework 不支持此调用约定。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CallConvFastcall')]
  DNCallConvFastcall = interface(DNObject)
  ['{ED0BC45C-2438-31A9-BBB6-E2A3B5916419}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCallConvFastcall = class(TDNGenericImport<DNCallConvFastcallClass, DNCallConvFastcall>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvStdcallClass = interface(DNObjectClass)
  ['{89F8B6CB-B174-4720-A5D3-CB0B4C586540}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCallConvStdcall;

  end;

  /// <summary>
  ///   指示方法应使用  调用约定。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CallConvStdcall')]
  DNCallConvStdcall = interface(DNObject)
  ['{BCB67D4D-2096-36BE-974C-A003FC95041B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCallConvStdcall = class(TDNGenericImport<DNCallConvStdcallClass, DNCallConvStdcall>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvThiscallClass = interface(DNObjectClass)
  ['{0060F892-0D17-4168-8F77-981A7DA16AEB}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCallConvThiscall;

  end;

  /// <summary>
  ///   指示方法应使用  调用约定。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CallConvThiscall')]
  DNCallConvThiscall = interface(DNObject)
  ['{46080CA7-7CB8-3A55-A72E-8E50ECA4D4FC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCallConvThiscall = class(TDNGenericImport<DNCallConvThiscallClass, DNCallConvThiscall>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerMarshalOverrideClass = interface(DNObjectClass)
  ['{D0D4CBBF-1C3E-4CB3-A87E-FDDEAF239DBF}']
  end;

  /// <summary>
  ///   指示封送处理时变量的修改后的实例，不同于其真正的类型。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.CompilerMarshalOverride')]
  DNCompilerMarshalOverride = interface(DNObject)
  ['{FDB63468-3168-3DB1-8D76-09EE5C0275EE}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCompilerMarshalOverride = class(TDNGenericImport<DNCompilerMarshalOverrideClass, DNCompilerMarshalOverride>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ContractHelperClass = interface(DNObjectClass)
  ['{10AB042F-A3BB-4B1C-930F-A6BB8F424085}']
  { static methods } 

    /// <summary>
    ///   触发默认失败行为。
    /// </summary>
    {class} procedure TriggerFailure(kind: DNContractFailureKind; displayMessage: string; userMessage: string; conditionText: string; innerException: DNException);
    /// <summary>
    ///   按二进制重写程序用来激活默认失败行为。
    /// </summary>
    {class} function RaiseContractFailedEvent(failureKind: DNContractFailureKind; userMessage: string; conditionText: string; innerException: DNException): string;

  end;

  /// <summary>
  ///   提供二进制重写程序用以处理协定失败的方法。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.ContractHelper')]
  DNCompilerServices_ContractHelper = interface(DNObject)
  ['{AB4B2A18-5A58-3D1E-8C3A-3D98955542C8}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCompilerServices_ContractHelper = class(TDNGenericImport<DNCompilerServices_ContractHelperClass, DNCompilerServices_ContractHelper>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFormattableStringFactoryClass = interface(DNObjectClass)
  ['{4D5D4157-792D-457A-BDBD-773DDCBDE637}']
  { static methods } 

    /// <summary>
    ///   从复合格式字符串及其参数创建  实例。
    /// </summary>
    {class} function Create(format: string; arguments: TArray<DNObject>): DNFormattableString;

  end;

  /// <summary>
  ///   提供一个静态方法，用于从复合格式字符串及其参数创建  对象。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.FormattableStringFactory')]
  DNFormattableStringFactory = interface(DNObject)
  ['{F15BAEAD-A3D6-3BB6-9BAA-BBA9C23DDBF3}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNFormattableStringFactory = class(TDNGenericImport<DNFormattableStringFactoryClass, DNFormattableStringFactory>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  /// <summary>
  ///   表示为异步方法生成的状态机。
  ///               此类型仅供编译器使用。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IAsyncStateMachine')]
  DNIAsyncStateMachine = interface(DNObject)
  ['{78436D2D-A751-3D5C-B4B8-D2275D0542E7}']
  { methods } 

    /// <summary>
    ///   将状态机移到下一步的状态。
    /// </summary>
    procedure MoveNext;
    /// <summary>
    ///   配置与堆分配的副本的状态机。
    /// </summary>
    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  /// <summary>
  ///   表示完成时计划延续的操作。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.INotifyCompletion')]
  DNINotifyCompletion = interface(DNObject)
  ['{D4C9B012-6CD0-35E2-9FE8-56E01550DF1E}']
  { methods } 

    /// <summary>
    ///   计划在实例完成时调用该延续操作。
    /// </summary>
    procedure OnCompleted(continuation: DNAction);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  /// <summary>
  ///   表示在完成等待操作时计划延续的 awaiter。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.ICriticalNotifyCompletion')]
  DNICriticalNotifyCompletion = interface(DNINotifyCompletion)
  ['{11441015-06E6-3E6A-8764-473239C52FE3}']
  { methods } 

    /// <summary>
    ///   计划在实例完成时调用该延续操作。
    /// </summary>
    procedure UnsafeOnCompleted(continuation: DNAction);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsBoxedClass = interface(DNObjectClass)
  ['{8736AA81-C225-4E42-B26B-93AD694DD19E}']
  end;

  /// <summary>
  ///   指示已修改的引用类型是装箱的值类型。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsBoxed')]
  DNIsBoxed = interface(DNObject)
  ['{5083DEEF-2A3B-3916-96C8-6A72F0F45ADC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsBoxed = class(TDNGenericImport<DNIsBoxedClass, DNIsBoxed>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsByValueClass = interface(DNObjectClass)
  ['{E0169364-40E3-4C0B-A42E-FC99F4A3F329}']
  end;

  /// <summary>
  ///   指示应将修改后的方法参数解释为无对象按值传递语义。
  ///               此修饰符将应用于引用类型。
  ///                此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsByValue')]
  DNIsByValue = interface(DNObject)
  ['{CDBCEA94-8491-30B5-8081-F19AC619C52B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsByValue = class(TDNGenericImport<DNIsByValueClass, DNIsByValue>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsConstClass = interface(DNObjectClass)
  ['{C79EE239-5D94-4E11-9C93-5DA4605A7C52}']
  end;

  /// <summary>
  ///   指示修改的类型具有  修饰符。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsConst')]
  DNIsConst = interface(DNObject)
  ['{11CF8D80-A585-3B59-97BD-D160D8701FAB}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsConst = class(TDNGenericImport<DNIsConstClass, DNIsConst>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsCopyConstructedClass = interface(DNObjectClass)
  ['{70B5ACAC-5EBA-4965-8DD5-FF283B1FAA0D}']
  end;

  /// <summary>
  ///   指示此类型的值的任何复制必须使用类型提供的复制构造函数。
  ///                此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsCopyConstructed')]
  DNIsCopyConstructed = interface(DNObject)
  ['{2D6B9536-E9CA-317C-B62F-8E5876351E10}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsCopyConstructed = class(TDNGenericImport<DNIsCopyConstructedClass, DNIsCopyConstructed>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsExplicitlyDereferencedClass = interface(DNObjectClass)
  ['{B21F4EA9-020C-454A-8EC0-EB13B751581C}']
  end;

  /// <summary>
  ///   表示托管的指针表示的指针参数在方法签名中。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsExplicitlyDereferenced')]
  DNIsExplicitlyDereferenced = interface(DNObject)
  ['{9945C834-97F3-3C22-991D-72BCAC302382}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsExplicitlyDereferenced = class(TDNGenericImport<DNIsExplicitlyDereferencedClass, DNIsExplicitlyDereferenced>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsImplicitlyDereferencedClass = interface(DNObjectClass)
  ['{B4E19EF6-DC20-4AB1-8777-8A426A5778CD}']
  end;

  /// <summary>
  ///   指示已修改的垃圾回收引用表示方法签名中的引用参数。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsImplicitlyDereferenced')]
  DNIsImplicitlyDereferenced = interface(DNObject)
  ['{202228BF-B267-3FCC-94C3-E4F75D2EED5C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsImplicitlyDereferenced = class(TDNGenericImport<DNIsImplicitlyDereferencedClass, DNIsImplicitlyDereferenced>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsJitIntrinsicClass = interface(DNObjectClass)
  ['{FA86BF89-3DFA-4203-B37C-01B92CAEC292}']
  end;

  /// <summary>
  ///   指示修改后的方法是在实时 (JIT) 编译器可以为其执行特殊代码生成一个内部值。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsJitIntrinsic')]
  DNIsJitIntrinsic = interface(DNObject)
  ['{F57FAC33-B169-33AA-9886-D3327D9E5271}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsJitIntrinsic = class(TDNGenericImport<DNIsJitIntrinsicClass, DNIsJitIntrinsic>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsLongClass = interface(DNObjectClass)
  ['{B52EB73F-9B9D-4B0D-8E52-8388F41B0684}']
  end;

  /// <summary>
  ///   指示修改后的整数是标准 c + +  值。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsLong')]
  DNIsLong = interface(DNObject)
  ['{9F8983FA-6811-329D-9EC4-C56D98F3478E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsLong = class(TDNGenericImport<DNIsLongClass, DNIsLong>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsPinnedClass = interface(DNObjectClass)
  ['{A9272C39-81FB-4819-B420-7F4A6B0F384A}']
  end;

  /// <summary>
  ///   指示修改后的实例被固定在内存中。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsPinned')]
  DNIsPinned = interface(DNObject)
  ['{75483265-40F1-3E71-8B51-6FCCCC06D211}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsPinned = class(TDNGenericImport<DNIsPinnedClass, DNIsPinned>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsSignUnspecifiedByteClass = interface(DNObjectClass)
  ['{FF08A1A7-0E52-4589-9A21-F006086EA599}']
  end;

  /// <summary>
  ///   指示一个修饰符是既不签名也未签名。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsSignUnspecifiedByte')]
  DNIsSignUnspecifiedByte = interface(DNObject)
  ['{0D3FC740-1E2A-37DF-9DC4-79FC5F9B1A4E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsSignUnspecifiedByte = class(TDNGenericImport<DNIsSignUnspecifiedByteClass, DNIsSignUnspecifiedByte>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsUdtReturnClass = interface(DNObjectClass)
  ['{B50CEA02-5E84-4487-A445-861F533AF506}']
  end;

  /// <summary>
  ///   指示返回类型的用户定义的类型。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsUdtReturn')]
  DNIsUdtReturn = interface(DNObject)
  ['{A81780E5-D5AA-3C30-AFA9-773C150E7F91}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsUdtReturn = class(TDNGenericImport<DNIsUdtReturnClass, DNIsUdtReturn>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsVolatileClass = interface(DNObjectClass)
  ['{1ACA6491-70EF-4825-BCA1-26FAE52C977F}']
  end;

  /// <summary>
  ///   将字段标记为易失字段。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.IsVolatile')]
  DNIsVolatile = interface(DNObject)
  ['{86527C04-536A-33C6-8C84-3D5A5B458DB3}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsVolatile = class(TDNGenericImport<DNIsVolatileClass, DNIsVolatile>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  /// <summary>
  ///   定义通用元组实现，它允许在不知道基础元组类型的情况下访问元组实例。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.ITuple')]
  DNITuple = interface(DNObject)
  ['{2AEF8AB4-8880-35C3-90A9-47409DCB82E5}']
  { getter & setter } 

    function get_Length: Int32;
    function get_Item(index: Int32): DNObject;

  { propertys } 

    /// <summary>
    ///   获取此  实例中的元素数。
    /// </summary>
    property Length: Int32 read get_Length;
    property Item[index: Int32]: DNObject read get_Item; default;
  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeFeatureClass = interface(DNObjectClass)
  ['{52B73511-4CE7-4320-B31D-0B989E72FF74}']
  { static methods } 

    /// <summary>
    ///   确定公共语言运行时是否支持指定功能。
    /// </summary>
    {class} function IsSupported(feature: string): Boolean;

  end;

  /// <summary>
  ///   一个类，其静态  方法检查公共语言运行时是否支持指定功能。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.RuntimeFeature')]
  DNRuntimeFeature = interface(DNObject)
  ['{9EE6AFB0-F9CC-3AF2-AD5A-B92ADC66D715}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRuntimeFeature = class(TDNGenericImport<DNRuntimeFeatureClass, DNRuntimeFeature>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeHelpersClass = interface(DNObjectClass)
  ['{5A4E2418-E72E-49A9-9E17-5BCF44C6E206}']
  { static getter & setter } 

    {class} function get_OffsetToStringData: Int32;

  { static methods } 

    /// <summary>
    ///   运行指定的类构造函数方法。
    /// </summary>
    {class} procedure RunClassConstructor(&type: DNRuntimeTypeHandle);
    /// <summary>
    ///   运行指定的模块构造函数方法。
    /// </summary>
    {class} procedure RunModuleConstructor(module: DNModuleHandle);
    /// <summary>
    ///   准备要包含在受约束的执行区域 (CER) 方法。
    /// </summary>
    {class} procedure PrepareMethod(method: DNRuntimeMethodHandle); overload;
    /// <summary>
    ///   准备要包含在受约束的执行区域 (CER) 具有指定实例化方法。
    /// </summary>
    {class} procedure PrepareMethod(method: DNRuntimeMethodHandle; instantiation: TArray<DNRuntimeTypeHandle>); overload;
    /// <summary>
    ///   指定为受约束的执行区域 (CER) 中的代码体。
    /// </summary>
    {class} procedure PrepareConstrainedRegions;
    /// <summary>
    ///   将代码体指定为受约束的执行区域 (CER)，而无需执行任何探测。
    /// </summary>
    {class} procedure PrepareConstrainedRegionsNoOP;
    /// <summary>
    ///   提供了一种从数据存储在模块中初始化数组快速方法。
    /// </summary>
    {class} procedure InitializeArray(&array: DNArray; fldHandle: DNRuntimeFieldHandle);
    /// <summary>
    ///   值类型进行装箱。
    /// </summary>
    {class} function GetObjectValue(obj: DNObject): DNObject;
    /// <summary>
    ///   指示指定的委托，应准备好以包含在受约束的执行区域 (CER)。
    /// </summary>
    {class} procedure PrepareDelegate(d: DNDelegate);
    /// <summary>
    ///   为应用程序能够动态准备提供一种  事件委托。
    /// </summary>
    {class} procedure PrepareContractedDelegate(d: DNDelegate);
    /// <summary>
    ///   用作特定对象的哈希函数，适用于在使用哈希代码，如哈希表的算法和数据结构中使用。
    /// </summary>
    {class} function GetHashCode(o: DNObject): Int32; overload;
    /// <summary>
    ///   确定是否指定  实例视为相等。
    /// </summary>
    {class} function Equals(o1: DNObject; o2: DNObject): Boolean; overload;
    /// <summary>
    ///   确保剩余的堆栈空间足够大，以执行平均的.NET Framework 函数。
    /// </summary>
    {class} procedure EnsureSufficientExecutionStack;
    /// <summary>
    ///   堆栈空间，以确保在后续的 （假设您的代码使用仅一个有限和中等大小的堆栈空间） 的代码块内不会发生堆栈溢出一定量的探测。
    ///               我们建议你使用受约束的执行区域 (CER) 而非此方法。
    /// </summary>
    {class} procedure ProbeForSufficientStack;
    /// <summary>
    ///   使用代码执行  时使用另一个  能够执行其他代码发生异常。
    /// </summary>
    {class} procedure ExecuteCodeWithGuaranteedCleanup(code: DNRuntimeHelpers_TryCode; backoutCode: DNRuntimeHelpers_CleanupCode; userData: DNObject);

  { static propertys } 

    /// <summary>
    ///   获取偏移量，以字节为单位，可以将给定字符串中的数据。
    /// </summary>
    {class} property OffsetToStringData: Int32 read get_OffsetToStringData;
  end;

  /// <summary>
  ///   提供一组为编译器提供支持的静态方法和属性。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers')]
  DNRuntimeHelpers = interface(DNObject)
  ['{8D360300-B535-3B0F-8C16-BFE8BB46D369}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRuntimeHelpers = class(TDNGenericImport<DNRuntimeHelpersClass, DNRuntimeHelpers>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNCriticalFinalizerObjectClass = interface(DNObjectClass)
  ['{AFA62E5F-43B8-4DDA-A362-447C397BBCD8}']
  end;

  /// <summary>
  ///   确保所有终止代码在派生类中的被都标记为关键。
  /// </summary>
  [DNTypeName('System.Runtime.ConstrainedExecution.CriticalFinalizerObject')]
  DNCriticalFinalizerObject = interface(DNObject)
  ['{314BDA5A-9292-3FC0-830D-7A4B0261FC88}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCriticalFinalizerObject = class(TDNGenericImport<DNCriticalFinalizerObjectClass, DNCriticalFinalizerObject>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCriticalHandleClass = interface(DNCriticalFinalizerObjectClass)
  ['{C252F0B6-A6A5-4FD5-9835-629C7263C3C9}']
  end;

  /// <summary>
  ///   表示句柄资源的包装类。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.CriticalHandle')]
  DNCriticalHandle = interface(DNCriticalFinalizerObject)
  ['{62172ED7-7BAD-3D27-A747-5692DB248556}']
  { getter & setter } 

    function get_IsClosed: Boolean;
    function get_IsInvalid: Boolean;

  { methods } 

    /// <summary>
    ///   标记句柄，以便释放资源。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   将句柄标记为无效。
    /// </summary>
    procedure SetHandleAsInvalid;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示句柄是否已关闭。
    /// </summary>
    property IsClosed: Boolean read get_IsClosed;
    /// <summary>
    ///   在派生类中重写时，获取一个值，该值指示句柄值是否无效。
    /// </summary>
    property IsInvalid: Boolean read get_IsInvalid;
  end;

  TDNCriticalHandle = class(TDNGenericImport<DNCriticalHandleClass, DNCriticalHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNCriticalHandleMinusOneIsInvalidClass = interface(DNCriticalHandleClass)
  ['{F02CC86F-17F4-412B-A0DE-D59909EAA8D0}']
  end;

  /// <summary>
  ///   为在其中值为-1 指示无效句柄的 Win32 关键句柄实现提供基类。
  /// </summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid')]
  DNCriticalHandleMinusOneIsInvalid = interface(DNCriticalHandle)
  ['{78C1501D-529B-3F0F-A8A1-15E3033FC85F}']
  { getter & setter } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示句柄是否无效。
    /// </summary>
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNCriticalHandleMinusOneIsInvalid = class(TDNGenericImport<DNCriticalHandleMinusOneIsInvalidClass, DNCriticalHandleMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNCriticalHandleZeroOrMinusOneIsInvalidClass = interface(DNCriticalHandleClass)
  ['{BD2AE5B0-AF40-41FA-9D00-488CEB5CF3CF}']
  end;

  /// <summary>
  ///   为在其中的值 0 或-1 指示无效句柄的 Win32 关键句柄实现提供基类。
  /// </summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid')]
  DNCriticalHandleZeroOrMinusOneIsInvalid = interface(DNCriticalHandle)
  ['{EAA6AB61-77E0-3CBD-9BE2-1E10FE9E0E33}']
  { getter & setter } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示句柄是否无效。
    /// </summary>
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNCriticalHandleZeroOrMinusOneIsInvalid = class(TDNGenericImport<DNCriticalHandleZeroOrMinusOneIsInvalidClass, DNCriticalHandleZeroOrMinusOneIsInvalid>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeHandleClass = interface(DNCriticalFinalizerObjectClass)
  ['{5FC5FCA9-2565-4BE3-BCB3-6EB7A7C4FD1F}']
  end;

  /// <summary>
  ///   表示操作系统句柄的包装类。
  ///               必须继承此类。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.SafeHandle')]
  DNSafeHandle = interface(DNCriticalFinalizerObject)
  ['{E8F130DA-92C9-3B55-9202-F5DEB7549328}']
  { getter & setter } 

    function get_IsClosed: Boolean;
    function get_IsInvalid: Boolean;

  { methods } 

    /// <summary>
    ///   返回  字段的值。
    /// </summary>
    function DangerousGetHandle: IntPtr;
    /// <summary>
    ///   标记句柄，以便释放资源。
    /// </summary>
    procedure Close;
    /// <summary>
    ///   释放  类使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   将句柄标记为不再使用。
    /// </summary>
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    /// <summary>
    ///   手动递减  实例中的引用计数器。
    /// </summary>
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示句柄是否已关闭。
    /// </summary>
    property IsClosed: Boolean read get_IsClosed;
    /// <summary>
    ///   在派生类中重写时，获取一个值，该值指示句柄值是否无效。
    /// </summary>
    property IsInvalid: Boolean read get_IsInvalid;
  end;

  TDNSafeHandle = class(TDNGenericImport<DNSafeHandleClass, DNSafeHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeAccessTokenHandleClass = interface(DNSafeHandleClass)
  ['{1CA60CAE-6557-4AEC-ABB6-9E7513D2350C}']
  { static getter & setter } 

    {class} function get_InvalidHandle: DNSafeAccessTokenHandle;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(handle: IntPtr): DNSafeAccessTokenHandle;

  { static propertys } 

    /// <summary>
    ///   通过使用  实例化  对象来返回无效句柄。
    /// </summary>
    {class} property InvalidHandle: DNSafeAccessTokenHandle read get_InvalidHandle;
  end;

  /// <summary>
  ///   提供 Windows 线程或进程访问令牌的安全句柄。
  ///               有关详细信息，请参阅Access Tokens
  /// </summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeAccessTokenHandle')]
  DNSafeAccessTokenHandle = interface(DNSafeHandle)
  ['{C517A72D-817A-3D78-B94B-6B5C755C4CFC}']
  { getter & setter } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示句柄是否无效。
    /// </summary>
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeAccessTokenHandle = class(TDNGenericImport<DNSafeAccessTokenHandleClass, DNSafeAccessTokenHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeHandleMinusOneIsInvalidClass = interface(DNSafeHandleClass)
  ['{6C32E35A-53F5-4DB2-B63F-B0AF68B77CB8}']
  end;

  /// <summary>
  ///   为 Win32 安全句柄实现中的值为-1 表示无效句柄提供基本类。
  /// </summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid')]
  DNSafeHandleMinusOneIsInvalid = interface(DNSafeHandle)
  ['{E001B83E-3EA9-3EB9-89BC-F0175596A0B9}']
  { getter & setter } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示句柄是否无效。
    /// </summary>
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeHandleMinusOneIsInvalid = class(TDNGenericImport<DNSafeHandleMinusOneIsInvalidClass, DNSafeHandleMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeHandleZeroOrMinusOneIsInvalidClass = interface(DNSafeHandleClass)
  ['{A17BF8FC-B175-4316-A1D4-ECEF51ED1A0B}']
  end;

  /// <summary>
  ///   提供在其中为 0 或-1 值表示无效句柄的 Win32 安全句柄实现基类的类。
  /// </summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid')]
  DNSafeHandleZeroOrMinusOneIsInvalid = interface(DNSafeHandle)
  ['{583D8A31-1A10-30B7-83E9-6BDD6E584980}']
  { getter & setter } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示句柄是否无效。
    /// </summary>
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeHandleZeroOrMinusOneIsInvalid = class(TDNGenericImport<DNSafeHandleZeroOrMinusOneIsInvalidClass, DNSafeHandleZeroOrMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeFileHandleClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{DFCF65F3-4143-411D-9313-EE9B9C1020D5}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(preexistingHandle: IntPtr; ownsHandle: Boolean): DNSafeFileHandle;

  end;

  /// <summary>
  ///   表示 file 句柄的包装类。
  /// </summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeFileHandle')]
  DNSafeFileHandle = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{4E327CFC-CA61-3F0B-9709-4211D1C97521}']
  { getter & setter } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeFileHandle = class(TDNGenericImport<DNSafeFileHandleClass, DNSafeFileHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeRegistryHandleClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{3A257425-5EE3-4D25-8BA6-99F395BE884E}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(preexistingHandle: IntPtr; ownsHandle: Boolean): DNSafeRegistryHandle;

  end;

  /// <summary>
  ///   表示 Windows 注册表中的安全句柄。
  /// </summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeRegistryHandle')]
  DNSafeRegistryHandle = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{B7296638-C367-364E-9D81-D4BFD781628D}']
  { getter & setter } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeRegistryHandle = class(TDNGenericImport<DNSafeRegistryHandleClass, DNSafeRegistryHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeWaitHandleClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{4007E1EB-9A70-4952-A19E-A8175B3429E5}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(existingHandle: IntPtr; ownsHandle: Boolean): DNSafeWaitHandle;

  end;

  /// <summary>
  ///   表示 wait 句柄的包装类。
  /// </summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeWaitHandle')]
  DNSafeWaitHandle = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{30C38B0C-1179-38B1-9C29-F8339C2D5B0D}']
  { getter & setter } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeWaitHandle = class(TDNGenericImport<DNSafeWaitHandleClass, DNSafeWaitHandle>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeBufferClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{2A0541EA-395A-49BD-8B23-DD304D69D573}']
  end;

  /// <summary>
  ///   提供可用于读取和写入的受控内存缓冲区。
  ///               尝试访问受控缓冲区（不足和溢出）以外的内存会引发异常。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.SafeBuffer')]
  DNSafeBuffer = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{35D435B2-DC3E-3588-B9DA-37EDBBD779D9}']
  { getter & setter } 

    function get_ByteLength: UInt64;
    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    /// <summary>
    ///   以字节为单位定义的内存区域的分配大小。
    ///               在使用之前，必须调用此方法  实例。
    /// </summary>
    procedure Initialize(numBytes: UInt64); overload;
    /// <summary>
    ///   通过使用指定的元素和元素大小数指定的内存缓冲区的分配大小。
    ///               在使用之前，必须调用此方法  实例。
    /// </summary>
    procedure Initialize(numElements: UInt32; sizeOfEachElement: UInt32); overload;
    /// <summary>
    ///   释放一个指针，它通过获得  方法。
    /// </summary>
    procedure ReleasePointer;
    procedure AcquirePointer(out pointer: PByte);
    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取用字节表示的缓冲区的大小。
    /// </summary>
    property ByteLength: UInt64 read get_ByteLength;
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeBuffer = class(TDNGenericImport<DNSafeBufferClass, DNSafeBuffer>) end;

  //-------------namespace: System.Runtime----------------
  DNMemoryFailPointClass = interface(DNCriticalFinalizerObjectClass)
  ['{742BAEDB-45CF-4B58-86B2-525CB291E5D5}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，指定成功执行所需的内存量。
    /// </summary>
    {class} function init(sizeInMegabytes: Int32): DNMemoryFailPoint;

  end;

  /// <summary>
  ///   执行一个操作之前检查是否有足够的内存资源。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.MemoryFailPoint')]
  DNMemoryFailPoint = interface(DNCriticalFinalizerObject)
  ['{D0D4EBA3-C496-33DA-A09E-AB4ED104486B}']
  { methods } 

    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMemoryFailPoint = class(TDNGenericImport<DNMemoryFailPointClass, DNMemoryFailPoint>) end;

  //-------------namespace: System.Threading----------------
  DNReaderWriterLockClass = interface(DNCriticalFinalizerObjectClass)
  ['{56CA82ED-66CE-47E6-8862-BE572B7379F8}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNReaderWriterLock;

  end;

  /// <summary>
  ///   定义支持单个写线程和多个读线程的锁。
  /// </summary>
  [DNTypeName('System.Threading.ReaderWriterLock')]
  DNReaderWriterLock = interface(DNCriticalFinalizerObject)
  ['{9173D971-B142-38A5-8488-D10A9DCF71B0}']
  { getter & setter } 

    function get_IsReaderLockHeld: Boolean;
    function get_IsWriterLockHeld: Boolean;
    function get_WriterSeqNum: Int32;

  { methods } 

    /// <summary>
    ///   使用一个  超时值获取读线程锁。
    /// </summary>
    procedure AcquireReaderLock(millisecondsTimeout: Int32); overload;
    /// <summary>
    ///   使用一个  超时值获取读线程锁。
    /// </summary>
    procedure AcquireReaderLock(timeout: DNTimeSpan); overload;
    /// <summary>
    ///   使用一个  超时值获取写线程锁。
    /// </summary>
    procedure AcquireWriterLock(millisecondsTimeout: Int32); overload;
    /// <summary>
    ///   使用一个  超时值获取写线程锁。
    /// </summary>
    procedure AcquireWriterLock(timeout: DNTimeSpan); overload;
    /// <summary>
    ///   减少锁计数。
    /// </summary>
    procedure ReleaseReaderLock;
    /// <summary>
    ///   减少写线程锁上的锁计数。
    /// </summary>
    procedure ReleaseWriterLock;
    /// <summary>
    ///   使用一个  超时值将读线程锁升级为写线程锁。
    /// </summary>
    function UpgradeToWriterLock(millisecondsTimeout: Int32): DNLockCookie; overload;
    /// <summary>
    ///   使用一个  超时值将读线程锁升级为写线程锁。
    /// </summary>
    function UpgradeToWriterLock(timeout: DNTimeSpan): DNLockCookie; overload;
    procedure DowngradeFromWriterLock(out lockCookie: DNLockCookie);
    /// <summary>
    ///   释放锁，不管线程获取锁的次数如何。
    /// </summary>
    function ReleaseLock: DNLockCookie;
    procedure RestoreLock(out lockCookie: DNLockCookie);
    /// <summary>
    ///   指示获取序列号之后是否已将写线程锁授予某个线程。
    /// </summary>
    function AnyWritersSince(seqNum: Int32): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示当前线程是否持有读线程锁。
    /// </summary>
    property IsReaderLockHeld: Boolean read get_IsReaderLockHeld;
    /// <summary>
    ///   获取一个值，该值指示当前线程是否持有写线程锁。
    /// </summary>
    property IsWriterLockHeld: Boolean read get_IsWriterLockHeld;
    /// <summary>
    ///   获取当前序列号。
    /// </summary>
    property WriterSeqNum: Int32 read get_WriterSeqNum;
  end;

  TDNReaderWriterLock = class(TDNGenericImport<DNReaderWriterLockClass, DNReaderWriterLock>) end;

  //-------------namespace: System.Threading----------------
  DNThreadClass = interface(DNCriticalFinalizerObjectClass)
  ['{1F26CD25-6033-483C-B452-8D8D1BCD25DC}']
  { static getter & setter } 

    {class} function get_CurrentThread: DNThread;
    {class} function get_CurrentContext: DNContext;
    {class} function get_CurrentPrincipal: DNIPrincipal;
    {class} procedure set_CurrentPrincipal(value: DNIPrincipal);

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(start: DNThreadStart): DNThread; overload;
    /// <summary>
    ///   初始化  类的新实例，指定线程的最大堆栈大小。
    /// </summary>
    {class} function init(start: DNThreadStart; maxStackSize: Int32): DNThread; overload;
    /// <summary>
    ///   初始化  类的新实例，指定允许对象在线程启动时传递给线程的委托。
    /// </summary>
    {class} function init(start: DNParameterizedThreadStart): DNThread; overload;
    /// <summary>
    ///   初始化  类的新实例，指定允许对象在线程启动时传递给线程的委托，并指定线程的最大堆栈大小。
    /// </summary>
    {class} function init(start: DNParameterizedThreadStart; maxStackSize: Int32): DNThread; overload;

  { static methods } 

    /// <summary>
    ///   取消当前线程所请求的 。
    /// </summary>
    {class} procedure ResetAbort;
    /// <summary>
    ///   将当前线程挂起指定的毫秒数。
    /// </summary>
    {class} procedure Sleep(millisecondsTimeout: Int32); overload;
    /// <summary>
    ///   将当前线程挂起指定的时间。
    /// </summary>
    {class} procedure Sleep(timeout: DNTimeSpan); overload;
    /// <summary>
    ///   导致线程等待由  参数定义的时间量。
    /// </summary>
    {class} procedure SpinWait(iterations: Int32);
    /// <summary>
    ///   导致调用线程执行准备好在当前处理器上运行的另一个线程。
    ///               由操作系统选择要执行的线程。
    /// </summary>
    {class} function Yield: Boolean;
    /// <summary>
    ///   在所有线程上分配未命名的数据槽。
    ///               为了获得更好的性能，请改用以  特性标记的字段。
    /// </summary>
    {class} function AllocateDataSlot: DNLocalDataStoreSlot;
    /// <summary>
    ///   在所有线程上分配已命名的数据槽。
    ///               为了获得更好的性能，请改用以  特性标记的字段。
    /// </summary>
    {class} function AllocateNamedDataSlot(name: string): DNLocalDataStoreSlot;
    /// <summary>
    ///   查找命名的数据槽。
    ///               为了获得更好的性能，请改用以  特性标记的字段。
    /// </summary>
    {class} function GetNamedDataSlot(name: string): DNLocalDataStoreSlot;
    /// <summary>
    ///   为进程中的所有线程消除名称与槽之间的关联。
    ///               为了获得更好的性能，请改用以  特性标记的字段。
    /// </summary>
    {class} procedure FreeNamedDataSlot(name: string);
    /// <summary>
    ///   在当前线程的当前域中从当前线程上指定的槽中检索值。
    ///               为了获得更好的性能，请改用以  特性标记的字段。
    /// </summary>
    {class} function GetData(slot: DNLocalDataStoreSlot): DNObject;
    /// <summary>
    ///   在当前正在运行的线程上为此线程的当前域在指定槽中设置数据。
    ///               为了提高性能，请改用用  属性标记的字段。
    /// </summary>
    {class} procedure SetData(slot: DNLocalDataStoreSlot; data: DNObject);
    /// <summary>
    ///   返回当前线程正在其中运行的当前域。
    /// </summary>
    {class} function GetDomain: DNAppDomain;
    /// <summary>
    ///   返回唯一的应用程序域标识符。
    /// </summary>
    {class} function GetDomainID: Int32;
    {class} function VolatileRead(out address: Byte): Byte; overload;
    {class} function VolatileRead(out address: Int16): Int16; overload;
    {class} function VolatileRead(out address: Int32): Int32; overload;
    {class} function VolatileRead(out address: Int64): Int64; overload;
    {class} function VolatileRead(out address: SByte): SByte; overload;
    {class} function VolatileRead(out address: UInt16): UInt16; overload;
    {class} function VolatileRead(out address: UInt32): UInt32; overload;
    {class} function VolatileRead(out address: IntPtr): IntPtr; overload;
    {class} function VolatileRead(out address: UIntPtr): UIntPtr; overload;
    {class} function VolatileRead(out address: UInt64): UInt64; overload;
    {class} function VolatileRead(out address: Single): Single; overload;
    {class} function VolatileRead(out address: Double): Double; overload;
    {class} function VolatileRead(out address: DNObject): DNObject; overload;
    {class} procedure VolatileWrite(out address: Byte; value: Byte); overload;
    {class} procedure VolatileWrite(out address: Int16; value: Int16); overload;
    {class} procedure VolatileWrite(out address: Int32; value: Int32); overload;
    {class} procedure VolatileWrite(out address: Int64; value: Int64); overload;
    {class} procedure VolatileWrite(out address: SByte; value: SByte); overload;
    {class} procedure VolatileWrite(out address: UInt16; value: UInt16); overload;
    {class} procedure VolatileWrite(out address: UInt32; value: UInt32); overload;
    {class} procedure VolatileWrite(out address: IntPtr; value: IntPtr); overload;
    {class} procedure VolatileWrite(out address: UIntPtr; value: UIntPtr); overload;
    {class} procedure VolatileWrite(out address: UInt64; value: UInt64); overload;
    {class} procedure VolatileWrite(out address: Single; value: Single); overload;
    {class} procedure VolatileWrite(out address: Double; value: Double); overload;
    {class} procedure VolatileWrite(out address: DNObject; value: DNObject); overload;
    /// <summary>
    ///   按如下方式同步内存访问：执行当前线程的处理器在对指令重新排序时，不能采用先执行  调用之后的内存存取，再执行  调用之前的内存存取的方式。
    /// </summary>
    {class} procedure MemoryBarrier;
    /// <summary>
    ///   通知宿主执行将要进入一个代码区域，在该代码区域内线程中止或未经处理异常的影响可能会危害应用程序域中的其他任务。
    /// </summary>
    {class} procedure BeginCriticalRegion;
    /// <summary>
    ///   通知主机执行将要进入一个代码区域，在该代码区域内线程中止或未经处理异常的影响限于当前任务。
    /// </summary>
    {class} procedure EndCriticalRegion;
    /// <summary>
    ///   通知宿主托管代码将要执行依赖于当前物理操作系统线程的标识的指令。
    /// </summary>
    {class} procedure BeginThreadAffinity;
    /// <summary>
    ///   通知宿主托管代码已执行完依赖于当前物理操作系统线程的标识的指令。
    /// </summary>
    {class} procedure EndThreadAffinity;

  { static propertys } 

    /// <summary>
    ///   获取当前正在运行的线程。
    /// </summary>
    {class} property CurrentThread: DNThread read get_CurrentThread;
    /// <summary>
    ///   获取线程正在其中执行的当前上下文。
    /// </summary>
    {class} property CurrentContext: DNContext read get_CurrentContext;
    /// <summary>
    ///   获取或设置线程的当前负责人（对基于角色的安全性而言）。
    /// </summary>
    {class} property CurrentPrincipal: DNIPrincipal read get_CurrentPrincipal write set_CurrentPrincipal;
  end;

  /// <summary>
  ///   创建和控制线程，设置其优先级并获取其状态。
  /// </summary>
  [DNTypeName('System.Threading.Thread')]
  DNThread = interface(DNCriticalFinalizerObject)
  ['{A5889AAD-36A6-3B3E-89F9-118CE3A77D7C}']
  { getter & setter } 

    function get_ManagedThreadId: Int32;
    function get_ExecutionContext: DNExecutionContext;
    function get_Priority: DNThreadPriority;
    procedure set_Priority(value: DNThreadPriority);
    function get_IsAlive: Boolean;
    function get_IsThreadPoolThread: Boolean;
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);
    function get_ThreadState: DNThreadState;
    function get_ApartmentState: DNApartmentState;
    procedure set_ApartmentState(value: DNApartmentState);
    function get_CurrentUICulture: DNCultureInfo;
    procedure set_CurrentUICulture(value: DNCultureInfo);
    function get_CurrentCulture: DNCultureInfo;
    procedure set_CurrentCulture(value: DNCultureInfo);
    function get_Name: string;
    procedure set_Name(value: string);

  { methods } 

    /// <summary>
    ///   返回当前线程的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   导致操作系统将当前实例的状态更改为 。
    /// </summary>
    procedure Start; overload;
    /// <summary>
    ///   导致操作系统将当前实例的状态更改为 ，并选择提供包含线程执行的方法要使用的数据的对象。
    /// </summary>
    procedure Start(parameter: DNObject); overload;
    /// <summary>
    ///   将捕获的  应用到当前线程。
    /// </summary>
    procedure SetCompressedStack(stack: DNCompressedStack);
    /// <summary>
    ///   返回  对象，此对象可用于获取当前线程的堆栈。
    /// </summary>
    function GetCompressedStack: DNCompressedStack;
    /// <summary>
    ///   引发在其上调用的线程中的  以开始处理终止线程，同时提供有关线程终止的异常信息。
    ///               调用此方法通常会终止线程。
    /// </summary>
    procedure &Abort(stateInfo: DNObject); overload;
    /// <summary>
    ///   在调用此方法的线程上引发 ，以开始终止此线程的过程。
    ///               调用此方法通常会终止线程。
    /// </summary>
    procedure &Abort; overload;
    /// <summary>
    ///   挂起线程，或者如果线程已挂起，则不起作用。
    /// </summary>
    procedure Suspend;
    /// <summary>
    ///   继续已挂起的线程。
    /// </summary>
    procedure Resume;
    /// <summary>
    ///   中断处于  线程状态的线程。
    /// </summary>
    procedure Interrupt;
    /// <summary>
    ///   在继续执行标准的 COM 和  消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止。
    /// </summary>
    procedure Join; overload;
    /// <summary>
    ///   在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止或经过了指定时间为止。
    /// </summary>
    function Join(millisecondsTimeout: Int32): Boolean; overload;
    /// <summary>
    ///   在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻止调用线程，直到由该实例表示的线程终止或经过了指定时间为止。
    /// </summary>
    function Join(timeout: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   返回表示单元状态的  值。
    /// </summary>
    function GetApartmentState: DNApartmentState;
    /// <summary>
    ///   在线程启动前设置其单元状态。
    /// </summary>
    function TrySetApartmentState(state: DNApartmentState): Boolean;
    /// <summary>
    ///   在线程启动前设置其单元状态。
    /// </summary>
    procedure SetApartmentState(state: DNApartmentState);
    /// <summary>
    ///   对于当前线程关闭运行时可调用包装 (RCW) 的自动清理。
    /// </summary>
    procedure DisableComObjectEagerCleanup;
    function Equals(obj: DNObject): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前托管线程的唯一标识符。
    /// </summary>
    property ManagedThreadId: Int32 read get_ManagedThreadId;
    /// <summary>
    ///   获取  对象，该对象包含有关当前线程的各种上下文的信息。
    /// </summary>
    property ExecutionContext: DNExecutionContext read get_ExecutionContext;
    /// <summary>
    ///   获取或设置指示线程的调度优先级的值。
    /// </summary>
    property Priority: DNThreadPriority read get_Priority write set_Priority;
    /// <summary>
    ///   获取指示当前线程的执行状态的值。
    /// </summary>
    property IsAlive: Boolean read get_IsAlive;
    /// <summary>
    ///   获取指示线程是否属于托管线程池的值。
    /// </summary>
    property IsThreadPoolThread: Boolean read get_IsThreadPoolThread;
    /// <summary>
    ///   获取或设置一个值，该值指示某个线程是否为后台线程。
    /// </summary>
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
    /// <summary>
    ///   获取一个值，该值包含当前线程的状态。
    /// </summary>
    property ThreadState: DNThreadState read get_ThreadState;
    /// <summary>
    ///   获取或设置此线程的单元状态。
    /// </summary>
    property ApartmentState: DNApartmentState read get_ApartmentState write set_ApartmentState;
    /// <summary>
    ///   获取或设置资源管理器使用的当前区域性以便在运行时查找区域性特定的资源。
    /// </summary>
    property CurrentUICulture: DNCultureInfo read get_CurrentUICulture write set_CurrentUICulture;
    /// <summary>
    ///   获取或设置当前线程的区域性。
    /// </summary>
    property CurrentCulture: DNCultureInfo read get_CurrentCulture write set_CurrentCulture;
    /// <summary>
    ///   获取或设置线程的名称。
    /// </summary>
    property Name: string read get_Name write set_Name;
  end;

  TDNThread = class(TDNGenericImport<DNThreadClass, DNThread>) end;

  //-------------namespace: System.Runtime.DesignerServices----------------
  DNWindowsRuntimeDesignerContextClass = interface(DNObjectClass)
  ['{C57A4F39-5620-4D81-B745-DBAE0C5CE610}']
  { constructors } 

    {class} function init(paths: DNIEnumerable<string>; name: string): DNWindowsRuntimeDesignerContext;

  { static methods } 

    {class} procedure InitializeSharedContext(paths: DNIEnumerable<string>);
    /// <summary>
    ///   将用于处理迭代程序集绑定请求的上下文设置为在设计过程中，将重新编译的程序集。
    /// </summary>
    {class} procedure SetIterationContext(context: DNWindowsRuntimeDesignerContext);

  end;

  /// <summary>
  ///   提供自定义程序集绑定的设计器用于创建 Windows 8.x 应用商店 应用程序。
  /// </summary>
  [DNTypeName('System.Runtime.DesignerServices.WindowsRuntimeDesignerContext')]
  DNWindowsRuntimeDesignerContext = interface(DNObject)
  ['{DB28027F-1254-3C59-9802-58582354195D}']
  { getter & setter } 

    function get_Name: string;

  { methods } 

    /// <summary>
    ///   从当前上下文中加载指定的程序集。
    /// </summary>
    function GetAssembly(assemblyName: string): DNAssembly;
    /// <summary>
    ///   从当前上下文中加载指定的类型。
    /// </summary>
    function GetType(typeName: string): DNType; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType; overload;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取设计器的绑定上下文的名称。
    /// </summary>
    property Name: string read get_Name;
  end;

  TDNWindowsRuntimeDesignerContext = class(TDNGenericImport<DNWindowsRuntimeDesignerContextClass, DNWindowsRuntimeDesignerContext>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNExceptionDispatchInfoClass = interface(DNObjectClass)
  ['{2078F03F-D0A6-4FEF-BDF0-97C9A4D7442F}']
  { static methods } 

    /// <summary>
    ///   创建  对象，表示在当前点在代码中指定的异常。
    /// </summary>
    {class} function Capture(source: DNException): DNExceptionDispatchInfo;

  end;

  /// <summary>
  ///   表示在代码中的某个特定点捕获其状态的异常。
  /// </summary>
  [DNTypeName('System.Runtime.ExceptionServices.ExceptionDispatchInfo')]
  DNExceptionDispatchInfo = interface(DNObject)
  ['{8FBEDF7E-6A74-3EE1-BEEE-F345048CC1B6}']
  { getter & setter } 

    function get_SourceException: DNException;

  { methods } 

    /// <summary>
    ///   引发了异常，表示由当前  之后还原时捕获异常，已保存的状态对象。
    /// </summary>
    procedure Throw;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取由当前实例表示的异常。
    /// </summary>
    property SourceException: DNException read get_SourceException;
  end;

  TDNExceptionDispatchInfo = class(TDNGenericImport<DNExceptionDispatchInfoClass, DNExceptionDispatchInfo>) end;

  //-------------namespace: System.Runtime----------------
  DNGCSettingsClass = interface(DNObjectClass)
  ['{D0ED8ADC-009B-4D3A-9A7C-1A665DF315A7}']
  { static getter & setter } 

    {class} function get_LatencyMode: DNGCLatencyMode;
    {class} procedure set_LatencyMode(value: DNGCLatencyMode);
    {class} function get_LargeObjectHeapCompactionMode: DNGCLargeObjectHeapCompactionMode;
    {class} procedure set_LargeObjectHeapCompactionMode(value: DNGCLargeObjectHeapCompactionMode);
    {class} function get_IsServerGC: Boolean;

  { static propertys } 

    /// <summary>
    ///   获取或设置垃圾收集的当前滞后时间模式。
    /// </summary>
    {class} property LatencyMode: DNGCLatencyMode read get_LatencyMode write set_LatencyMode;
    /// <summary>
    ///   [在 .NET Framework 4.5.1 和更高版本中受支持] 
    ///            
    ///              获取或设置指示完全阻止垃圾回收是否压缩大型对象堆 (LOH) 的值。
    /// </summary>
    {class} property LargeObjectHeapCompactionMode: DNGCLargeObjectHeapCompactionMode read get_LargeObjectHeapCompactionMode write set_LargeObjectHeapCompactionMode;
    /// <summary>
    ///   获取一个值，该值指示是否启用了服务器垃圾回收。
    /// </summary>
    {class} property IsServerGC: Boolean read get_IsServerGC;
  end;

  /// <summary>
  ///   指定当前进程的垃圾回收设置。
  /// </summary>
  [DNTypeName('System.Runtime.GCSettings')]
  DNGCSettings = interface(DNObject)
  ['{26364C56-899E-3A81-9883-9D4DAED04582}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNGCSettings = class(TDNGenericImport<DNGCSettingsClass, DNGCSettings>) end;

  //-------------namespace: System.Runtime.Hosting----------------
  DNApplicationActivatorClass = interface(DNObjectClass)
  ['{63B65817-37E2-4EBF-B5F3-D46B77D20F7E}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNApplicationActivator;

  end;

  /// <summary>
  ///   用于基于清单的程序集的激活提供的基类。
  /// </summary>
  [DNTypeName('System.Runtime.Hosting.ApplicationActivator')]
  DNApplicationActivator = interface(DNObject)
  ['{1D09B407-A97F-378A-ACCB-82CA0082F9F3}']
  { methods } 

    /// <summary>
    ///   创建应用程序要激活的实例使用指定的激活上下文。
    /// </summary>
    function CreateInstance(activationContext: DNActivationContext): DNObjectHandle; overload;
    /// <summary>
    ///   创建使用指定的激活上下文和自定义激活数据激活，应用程序的实例。
    /// </summary>
    function CreateInstance(activationContext: DNActivationContext; activationCustomData: TArray<string>): DNObjectHandle; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNApplicationActivator = class(TDNGenericImport<DNApplicationActivatorClass, DNApplicationActivator>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._Activator')]
  DN_Activator = interface(DNObject)
  ['{03973551-57A1-3900-A2B5-9083E3FF2943}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开的公共成员  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._Assembly')]
  DN_Assembly = interface(DNObject)
  ['{17156360-2F1A-384A-BC52-FDE93C215C5B}']
  { getter & setter } 

    function get_CodeBase: string;
    function get_EscapedCodeBase: string;
    function get_FullName: string;
    function get_EntryPoint: DNMethodInfo;
    function get_Location: string;
    function get_Evidence: DNEvidence;
    function get_GlobalAssemblyCache: Boolean;

  { methods } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(other: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetName: DNAssemblyName; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetName(copiedName: Boolean): DNAssemblyName; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType(name: string): DNType; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType(name: string; throwOnError: Boolean): DNType; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    function GetExportedTypes: TArray<DNType>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetTypes: TArray<DNType>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetManifestResourceStream(&type: DNType; name: string): DNStream; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetManifestResourceStream(name: string): DNStream; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetFile(name: string): DNFileStream;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetFiles: TArray<DNFileStream>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetFiles(getResourceModules: Boolean): TArray<DNFileStream>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetManifestResourceNames: TArray<string>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetManifestResourceInfo(resourceName: string): DNManifestResourceInfo;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetSatelliteAssembly(culture: DNCultureInfo): DNAssembly; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetSatelliteAssembly(culture: DNCultureInfo; version: DNVersion): DNAssembly; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function LoadModule(moduleName: string; rawModule: TArray<Byte>): DNModule; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function LoadModule(moduleName: string; rawModule: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNModule; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function CreateInstance(typeName: string): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function CreateInstance(typeName: string; ignoreCase: Boolean): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function CreateInstance(typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetLoadedModules: TArray<DNModule>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetLoadedModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetModules: TArray<DNModule>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetModule(name: string): DNModule;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetReferencedAssemblies: TArray<DNAssemblyName>;

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property CodeBase: string read get_CodeBase;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property EscapedCodeBase: string read get_EscapedCodeBase;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property EntryPoint: DNMethodInfo read get_EntryPoint;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Location: string read get_Location;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Evidence: DNEvidence read get_Evidence;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property GlobalAssemblyCache: Boolean read get_GlobalAssemblyCache;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._AssemblyBuilder')]
  DN_AssemblyBuilder = interface(DNObject)
  ['{BEBB2505-8B54-3443-AEAD-142A16DD9CC7}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._AssemblyName')]
  DN_AssemblyName = interface(DNObject)
  ['{B42B6AAC-317E-34D5-9FA9-093BB4160C50}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._Attribute')]
  DN_Attribute = interface(DNObject)
  ['{917B14D0-2D9E-38B8-92A9-381ACF52F7C0}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._ConstructorBuilder')]
  DN_ConstructorBuilder = interface(DNObject)
  ['{ED3E4384-D7E2-3FA7-8FFD-8940D330519A}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开的公共成员  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._ConstructorInfo')]
  DN_ConstructorInfo = interface(DNObject)
  ['{E9A19478-9646-3679-9B10-8411AE1FD57D}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(other: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  成员。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetParameters: TArray<DNParameterInfo>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  成员。
    /// </summary>
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Invoke_2(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Invoke_3(obj: DNObject; parameters: TArray<DNObject>): DNObject;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Invoke_4(invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Invoke_5(parameters: TArray<DNObject>): DNObject;

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Attributes: DNMethodAttributes read get_Attributes;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPublic: Boolean read get_IsPublic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPrivate: Boolean read get_IsPrivate;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamily: Boolean read get_IsFamily;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAssembly: Boolean read get_IsAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsStatic: Boolean read get_IsStatic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFinal: Boolean read get_IsFinal;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsVirtual: Boolean read get_IsVirtual;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsHideBySig: Boolean read get_IsHideBySig;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAbstract: Boolean read get_IsAbstract;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsConstructor: Boolean read get_IsConstructor;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._CustomAttributeBuilder')]
  DN_CustomAttributeBuilder = interface(DNObject)
  ['{BE9ACCE8-AAFF-3B91-81AE-8211663F5CAD}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._EnumBuilder')]
  DN_EnumBuilder = interface(DNObject)
  ['{C7BD73DE-9F85-3290-88EE-090B8BDFE2DF}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._EventBuilder')]
  DN_EventBuilder = interface(DNObject)
  ['{AADABA99-895D-3D65-9760-B1F12621FAE8}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开的公共成员  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._EventInfo')]
  DN_EventInfo = interface(DNObject)
  ['{9DE59C64-D889-35A1-B897-587D74469E5B}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Attributes: DNEventAttributes;
    function get_EventHandlerType: DNType;
    function get_IsSpecialName: Boolean;
    function get_IsMulticast: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(other: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetAddMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetRemoveMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetRaiseMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetAddMethod: DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetRemoveMethod: DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetRaiseMethod: DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure AddEventHandler(target: DNObject; handler: DNDelegate);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure RemoveEventHandler(target: DNObject; handler: DNDelegate);

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Attributes: DNEventAttributes read get_Attributes;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property EventHandlerType: DNType read get_EventHandlerType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsMulticast: Boolean read get_IsMulticast;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开的公共成员  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._Exception')]
  DN_Exception = interface(DNObject)
  ['{B36B5C63-42EF-38BC-A07E-0B34C98F164A}']
  { getter & setter } 

    function get_Message: string;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;

  { methods } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetBaseException: DNException;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Message: string read get_Message;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property StackTrace: string read get_StackTrace;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property HelpLink: string read get_HelpLink write set_HelpLink;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Source: string read get_Source write set_Source;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property InnerException: DNException read get_InnerException;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property TargetSite: DNMethodBase read get_TargetSite;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._FieldBuilder')]
  DN_FieldBuilder = interface(DNObject)
  ['{CE1A3BF5-975E-30CC-97C9-1EF70F8F3993}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开的公共成员  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._FieldInfo')]
  DN_FieldInfo = interface(DNObject)
  ['{8A7C1442-A9FB-366B-80D8-4939FFA6DBE0}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_FieldType: DNType;
    function get_FieldHandle: DNRuntimeFieldHandle;
    function get_Attributes: DNFieldAttributes;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(other: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetValue(obj: DNObject): DNObject;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetValueDirect(obj: DNTypedReference): DNObject;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; culture: DNCultureInfo); overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetValueDirect(obj: DNTypedReference; value: DNObject);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject); overload;

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property FieldType: DNType read get_FieldType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property FieldHandle: DNRuntimeFieldHandle read get_FieldHandle;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Attributes: DNFieldAttributes read get_Attributes;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPublic: Boolean read get_IsPublic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPrivate: Boolean read get_IsPrivate;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamily: Boolean read get_IsFamily;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAssembly: Boolean read get_IsAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsStatic: Boolean read get_IsStatic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsInitOnly: Boolean read get_IsInitOnly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsLiteral: Boolean read get_IsLiteral;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._ILGenerator')]
  DN_ILGenerator = interface(DNObject)
  ['{A4924B27-6E3B-37F7-9B83-A4501955E6A7}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._LocalBuilder')]
  DN_LocalBuilder = interface(DNObject)
  ['{4E6350D1-A08B-3DEC-9A3E-C465F9AEEC0C}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开的公共成员  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._MemberInfo')]
  DN_MemberInfo = interface(DNObject)
  ['{F7102FA9-CABB-3A74-A6DA-B4567EF1B079}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(other: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开的公共成员  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._MethodBase')]
  DN_MethodBase = interface(DNObject)
  ['{6240837A-707F-3181-8E98-A36AE086766B}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr); overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(other: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetParameters: TArray<DNParameterInfo>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Attributes: DNMethodAttributes read get_Attributes;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPublic: Boolean read get_IsPublic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPrivate: Boolean read get_IsPrivate;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamily: Boolean read get_IsFamily;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAssembly: Boolean read get_IsAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsStatic: Boolean read get_IsStatic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFinal: Boolean read get_IsFinal;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsVirtual: Boolean read get_IsVirtual;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsHideBySig: Boolean read get_IsHideBySig;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAbstract: Boolean read get_IsAbstract;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsConstructor: Boolean read get_IsConstructor;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._MethodBuilder')]
  DN_MethodBuilder = interface(DNObject)
  ['{007D8A14-FDF3-363E-9A0B-FEC0618260A2}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开的公共成员  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._MethodInfo')]
  DN_MethodInfo = interface(DNObject)
  ['{FFCC1B5D-ECB8-38DD-9B01-3DC8ABC2AA5F}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_ReturnType: DNType;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr); overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(other: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetParameters: TArray<DNParameterInfo>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetBaseDefinition: DNMethodInfo;

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Attributes: DNMethodAttributes read get_Attributes;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPublic: Boolean read get_IsPublic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPrivate: Boolean read get_IsPrivate;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamily: Boolean read get_IsFamily;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAssembly: Boolean read get_IsAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsStatic: Boolean read get_IsStatic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsFinal: Boolean read get_IsFinal;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsVirtual: Boolean read get_IsVirtual;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsHideBySig: Boolean read get_IsHideBySig;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAbstract: Boolean read get_IsAbstract;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsConstructor: Boolean read get_IsConstructor;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ReturnType: DNType read get_ReturnType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._MethodRental')]
  DN_MethodRental = interface(DNObject)
  ['{C2323C25-F57F-3880-8A4D-12EBEA7A5852}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._Module')]
  DN_Module = interface(DNObject)
  ['{D002E9BA-D9E3-3749-B1D3-D565A08B13E7}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._ModuleBuilder')]
  DN_ModuleBuilder = interface(DNObject)
  ['{D05FFA9A-04AF-3519-8EE1-8D93AD73430B}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._ParameterBuilder')]
  DN_ParameterBuilder = interface(DNObject)
  ['{36329EBA-F97A-3565-BC07-0ED5C6EF19FC}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._ParameterInfo')]
  DN_ParameterInfo = interface(DNObject)
  ['{993634C4-E47A-32CC-BE08-85F567DC27D6}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._PropertyBuilder')]
  DN_PropertyBuilder = interface(DNObject)
  ['{15F9A479-9397-3A63-ACBD-F51977FB0F02}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开的公共成员  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._PropertyInfo')]
  DN_PropertyInfo = interface(DNObject)
  ['{F59ED4E4-E68F-3218-BD77-061AA82824BF}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_PropertyType: DNType;
    function get_Attributes: DNPropertyAttributes;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_IsSpecialName: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(other: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetValue(obj: DNObject; index: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetValue(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject; index: TArray<DNObject>); overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo); overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetAccessors(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetGetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetSetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetIndexParameters: TArray<DNParameterInfo>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetAccessors: TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetGetMethod: DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetSetMethod: DNMethodInfo; overload;

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property PropertyType: DNType read get_PropertyType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Attributes: DNPropertyAttributes read get_Attributes;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property CanRead: Boolean read get_CanRead;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property CanWrite: Boolean read get_CanWrite;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._SignatureHelper')]
  DN_SignatureHelper = interface(DNObject)
  ['{7D13DD37-5A04-393C-BBCA-A5FEA802893D}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._Thread')]
  DN_Thread = interface(DNObject)
  ['{C281C7F1-4AA9-3517-961A-463CFED57E75}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开的公共成员  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._Type')]
  DN_Type = interface(DNObject)
  ['{BCA8B44D-AAD6-3A86-8AB7-03349F4F2DA2}']
  { getter & setter } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_GUID: DNGuid;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_UnderlyingSystemType: DNType;
    function get_TypeInitializer: DNConstructorInfo;
    function get_Attributes: DNTypeAttributes;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(other: DNObject): Boolean; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetArrayRank: Int32;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetInterfaces: TArray<DNType>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetEvents: TArray<DNEventInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法，并开始搜索嵌套在当前的类型 , ，使用指定的绑定约束。
    /// </summary>
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetDefaultMembers: TArray<DNMemberInfo>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetElementType: DNType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsSubclassOf(c: DNType): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsInstanceOfType(o: DNObject): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function IsAssignableFrom(c: DNType): Boolean;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMethod(name: string): DNMethodInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMethods: TArray<DNMethodInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetField(name: string): DNFieldInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetFields: TArray<DNFieldInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetInterface(name: string): DNType; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetEvent(name: string): DNEventInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetProperty(name: string): DNPropertyInfo; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetProperties: TArray<DNPropertyInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetNestedTypes: TArray<DNType>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetNestedType(name: string): DNType; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function GetMembers: TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  方法。
    /// </summary>
    function Equals(o: DNType): Boolean; overload;

  { propertys } 

    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property MemberType: DNMemberTypes read get_MemberType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property DeclaringType: DNType read get_DeclaringType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property ReflectedType: DNType read get_ReflectedType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property GUID: DNGuid read get_GUID;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Module: DNModule read get_Module;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Assembly: DNAssembly read get_Assembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property FullName: string read get_FullName;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Namespace: string read get_Namespace;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property BaseType: DNType read get_BaseType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property Attributes: DNTypeAttributes read get_Attributes;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsNotPublic: Boolean read get_IsNotPublic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPublic: Boolean read get_IsPublic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsClass: Boolean read get_IsClass;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsInterface: Boolean read get_IsInterface;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsValueType: Boolean read get_IsValueType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAbstract: Boolean read get_IsAbstract;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsSealed: Boolean read get_IsSealed;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsEnum: Boolean read get_IsEnum;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsSpecialName: Boolean read get_IsSpecialName;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsImport: Boolean read get_IsImport;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsSerializable: Boolean read get_IsSerializable;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsAutoClass: Boolean read get_IsAutoClass;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsArray: Boolean read get_IsArray;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsByRef: Boolean read get_IsByRef;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPointer: Boolean read get_IsPointer;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsPrimitive: Boolean read get_IsPrimitive;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsCOMObject: Boolean read get_IsCOMObject;
    /// <summary>
    ///   COM 对象提供独立于版本的访问权限属性。
    /// </summary>
    property HasElementType: Boolean read get_HasElementType;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsContextful: Boolean read get_IsContextful;
    /// <summary>
    ///   为 COM 对象提供对独立于版本的访问  属性。
    /// </summary>
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   公开  向非托管代码。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices._TypeBuilder')]
  DN_TypeBuilder = interface(DNObject)
  ['{7E5678EE-48B3-3F83-B076-C58543498A58}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    /// <summary>
    ///   检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
    /// </summary>
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNBStrWrapperClass = interface(DNObjectClass)
  ['{7A9A995F-3FA0-4107-8C65-ECBB3A3AC6B5}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类与指定  对象。
    /// </summary>
    {class} function init(value: string): DNBStrWrapper; overload;
    /// <summary>
    ///   新实例初始化  类与指定  对象。
    /// </summary>
    {class} function init(value: DNObject): DNBStrWrapper; overload;

  end;

  /// <summary>
  ///   将数据类型的封送  从托管代码流向非托管代码。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.BStrWrapper')]
  DNBStrWrapper = interface(DNObject)
  ['{E5DE21F2-12D7-3604-8251-1C5DBC64CA66}']
  { getter & setter } 

    function get_WrappedObject: string;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取已包装  对象进行封送处理类型作为 。
    /// </summary>
    property WrappedObject: string read get_WrappedObject;
  end;

  TDNBStrWrapper = class(TDNGenericImport<DNBStrWrapperClass, DNBStrWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComEventsHelperClass = interface(DNObjectClass)
  ['{CE5C3CF9-A9F9-4AD4-8013-831D0DAFFD92}']
  { static methods } 

    /// <summary>
    ///   将一个委托添加到源自 COM 对象的事件的调用列表。
    /// </summary>
    {class} procedure Combine(rcw: DNObject; iid: DNGuid; &dispid: Int32; d: DNDelegate);
    /// <summary>
    ///   从源自 COM 对象的事件的调用列表中删除委托。
    /// </summary>
    {class} function Remove(rcw: DNObject; iid: DNGuid; &dispid: Int32; d: DNDelegate): DNDelegate;

  end;

  /// <summary>
  ///   提供允许 .NET Framework 委托的方法，这些委托处理将从 COM 对象添加和删除的事件。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComEventsHelper')]
  DNComEventsHelper = interface(DNObject)
  ['{DAE18F9E-4E95-303E-A3CB-B2D69FB9825D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNComEventsHelper = class(TDNGenericImport<DNComEventsHelperClass, DNComEventsHelper>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供的托管的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IBindCtx')]
  DNIBindCtx = interface(DNObject)
  ['{0000000E-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   将传递的对象注册为其中一个名字对象操作期间已绑定，并且操作完成时，应释放的对象。
    /// </summary>
    procedure RegisterObjectBound(punk: DNObject);
    /// <summary>
    ///   从已注册需要释放的对象的集合中删除的对象。
    /// </summary>
    procedure RevokeObjectBound(punk: DNObject);
    /// <summary>
    ///   释放目前已注册的绑定上下文使用的所有对象  方法。
    /// </summary>
    procedure ReleaseBoundObjects;
    procedure SetBindOptions(out pbindopts: DNComTypes_BIND_OPTS);
    procedure GetBindOptions(out pbindopts: DNComTypes_BIND_OPTS);
    procedure GetRunningObjectTable(out pprot: DNIRunningObjectTable);
    /// <summary>
    ///   在内部维护的对象指针表中注册指定的对象指针指定名称。
    /// </summary>
    procedure RegisterObjectParam(pszKey: string; punk: DNObject);
    procedure GetObjectParam(pszKey: string; out ppunk: DNObject);
    procedure EnumObjectParam(out ppenum: DNIEnumString);
    /// <summary>
    ///   如果该注册表项当前已注册，请撤消注册当前在内部维护的上下文对象参数表中找到指定键的下面的对象。
    /// </summary>
    function RevokeObjectParam(pszKey: string): Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供的托管的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IConnectionPoint')]
  DNIConnectionPoint = interface(DNObject)
  ['{B196B286-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure GetConnectionInterface(out pIID: DNGuid);
    procedure GetConnectionPointContainer(out ppCPC: DNIConnectionPointContainer);
    procedure Advise(pUnkSink: DNObject; out pdwCookie: Int32);
    /// <summary>
    ///   终止通过以前建立的通知连接  方法。
    /// </summary>
    procedure Unadvise(dwCookie: Int32);
    procedure EnumConnections(out ppEnum: DNIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供的托管的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IConnectionPointContainer')]
  DNIConnectionPointContainer = interface(DNObject)
  ['{B196B284-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure EnumConnectionPoints(out ppEnum: DNIEnumConnectionPoints);
    procedure FindConnectionPoint(out riid: DNGuid; out ppCP: DNIConnectionPoint);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   管理的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints')]
  DNIEnumConnectionPoints = interface(DNObject)
  ['{B196B285-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    /// <summary>
    ///   检索指定的数目的枚举序列中的项。
    /// </summary>
    function Next(celt: Int32; rgelt: TArray<DNIConnectionPoint>; pceltFetched: IntPtr): Int32;
    /// <summary>
    ///   跳过指定的数目的枚举序列中的项。
    /// </summary>
    function Skip(celt: Int32): Int32;
    /// <summary>
    ///   将枚举序列重置到开头。
    /// </summary>
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumConnectionPoints);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   管理的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumConnections')]
  DNIEnumConnections = interface(DNObject)
  ['{B196B287-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    /// <summary>
    ///   检索指定的数目的枚举序列中的项。
    /// </summary>
    function Next(celt: Int32; rgelt: TArray<DNComTypes_CONNECTDATA>; pceltFetched: IntPtr): Int32;
    /// <summary>
    ///   跳过指定的数目的枚举序列中的项。
    /// </summary>
    function Skip(celt: Int32): Int32;
    /// <summary>
    ///   将枚举序列重置到开头。
    /// </summary>
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   管理的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumMoniker')]
  DNIEnumMoniker = interface(DNObject)
  ['{00000102-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   检索指定的数目的枚举序列中的项。
    /// </summary>
    function Next(celt: Int32; rgelt: TArray<DNIMoniker>; pceltFetched: IntPtr): Int32;
    /// <summary>
    ///   跳过指定的数目的枚举序列中的项。
    /// </summary>
    function Skip(celt: Int32): Int32;
    /// <summary>
    ///   将枚举序列重置到开头。
    /// </summary>
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   管理的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumString')]
  DNIEnumString = interface(DNObject)
  ['{00000101-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   检索指定的数目的枚举序列中的项。
    /// </summary>
    function Next(celt: Int32; rgelt: TArray<string>; pceltFetched: IntPtr): Int32;
    /// <summary>
    ///   跳过指定的数目的枚举序列中的项。
    /// </summary>
    function Skip(celt: Int32): Int32;
    /// <summary>
    ///   将枚举序列重置到开头。
    /// </summary>
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumString);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   管理的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumVARIANT')]
  DNIEnumVARIANT = interface(DNObject)
  ['{00020404-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   检索指定的数目的枚举序列中的项。
    /// </summary>
    function Next(celt: Int32; rgVar: TArray<DNObject>; pceltFetched: IntPtr): Int32;
    /// <summary>
    ///   跳过指定的数目的枚举序列中的项。
    /// </summary>
    function Skip(celt: Int32): Int32;
    /// <summary>
    ///   将枚举序列重置到开头。
    /// </summary>
    function Reset: Int32;
    /// <summary>
    ///   创建新的枚举器，其中包含与当前相同的枚举状态。
    /// </summary>
    function Clone: DNIEnumVARIANT;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供的托管的定义  接口，COM 功能  和 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IMoniker')]
  DNIMoniker = interface(DNObject)
  ['{0000000F-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    /// <summary>
    ///   自上次保存后，请检查对象的更改。
    /// </summary>
    function IsDirty: Int32;
    /// <summary>
    ///   初始化从以前已保存的流对象。
    /// </summary>
    procedure Load(pStm: DNIStream);
    /// <summary>
    ///   将对象保存到指定的流。
    /// </summary>
    procedure Save(pStm: DNIStream; fClearDirty: Boolean);
    procedure GetSizeMax(out pcbSize: Int64);
    procedure BindToObject(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out riidResult: DNGuid; out ppvResult: DNObject);
    procedure BindToStorage(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out riid: DNGuid; out ppvObj: DNObject);
    procedure Reduce(pbc: DNIBindCtx; dwReduceHowFar: Int32; out ppmkToLeft: DNIMoniker; out ppmkReduced: DNIMoniker);
    procedure ComposeWith(pmkRight: DNIMoniker; fOnlyIfNotGeneric: Boolean; out ppmkComposite: DNIMoniker);
    procedure Enum(fForward: Boolean; out ppenumMoniker: DNIEnumMoniker);
    /// <summary>
    ///   将当前的名字对象与指定的名字对象进行比较，并指示它们是否相同。
    /// </summary>
    function IsEqual(pmkOtherMoniker: DNIMoniker): Int32;
    procedure Hash(out pdwHash: Int32);
    /// <summary>
    ///   确定是否由当前的名字对象标识的对象当前已加载并正在运行。
    /// </summary>
    function IsRunning(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; pmkNewlyRunning: DNIMoniker): Int32;
    procedure GetTimeOfLastChange(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out pFileTime: DNComTypes_FILETIME);
    procedure Inverse(out ppmk: DNIMoniker);
    procedure CommonPrefixWith(pmkOther: DNIMoniker; out ppmkPrefix: DNIMoniker);
    procedure RelativePathTo(pmkOther: DNIMoniker; out ppmkRelPath: DNIMoniker);
    procedure GetDisplayName(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out ppszDisplayName: string);
    procedure ParseDisplayName(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; pszDisplayName: string; out pchEaten: Int32; out ppmkOut: DNIMoniker);
    function IsSystemMoniker(out pdwMksys: Int32): Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供的托管的定义  接口中的功能 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IPersistFile')]
  DNIPersistFile = interface(DNObject)
  ['{0000010B-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    /// <summary>
    ///   检查对象所做更改，因为它上次保存到其当前的文件。
    /// </summary>
    function IsDirty: Int32;
    /// <summary>
    ///   打开指定的文件，并从该文件的内容初始化某对象。
    /// </summary>
    procedure Load(pszFileName: string; dwMode: Int32);
    /// <summary>
    ///   将对象的副本保存到指定的文件。
    /// </summary>
    procedure Save(pszFileName: string; fRemember: Boolean);
    /// <summary>
    ///   通知的对象，它可以写入其文件。
    /// </summary>
    procedure SaveCompleted(pszFileName: string);
    procedure GetCurFile(out ppszFileName: string);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供的托管的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IRunningObjectTable')]
  DNIRunningObjectTable = interface(DNObject)
  ['{00000010-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   注册所提供的对象已进入运行状态。
    /// </summary>
    function &Register(grfFlags: Int32; punkObject: DNObject; pmkObjectName: DNIMoniker): Int32;
    /// <summary>
    ///   注销指定的对象从运行对象表 (ROT)。
    /// </summary>
    procedure Revoke(dwRegister: Int32);
    /// <summary>
    ///   确定指定的名字对象当前已注册中运行对象表 (ROT)。
    /// </summary>
    function IsRunning(pmkObjectName: DNIMoniker): Int32;
    function GetObject(pmkObjectName: DNIMoniker; out ppunkObject: DNObject): Int32;
    procedure NoteChangeTime(dwRegister: Int32; out pfiletime: DNComTypes_FILETIME);
    function GetTimeOfLastChange(pmkObjectName: DNIMoniker; out pfiletime: DNComTypes_FILETIME): Int32;
    procedure EnumRunning(out ppenumMoniker: DNIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供具有  功能的  接口的托管定义。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IStream')]
  DNIStream = interface(DNObject)
  ['{0000000C-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   读取指定的数目的字节从流对象读入内存起价当前搜索指针。
    /// </summary>
    procedure Read(pv: TArray<Byte>; cb: Int32; pcbRead: IntPtr);
    /// <summary>
    ///   将指定数量的字节写入流对象开始当前搜索指针。
    /// </summary>
    procedure Write(pv: TArray<Byte>; cb: Int32; pcbWritten: IntPtr);
    /// <summary>
    ///   将搜索指针更改到流的新位置相对于开头、 流的结尾或当前搜索指针。
    /// </summary>
    procedure Seek(dlibMove: Int64; dwOrigin: Int32; plibNewPosition: IntPtr);
    /// <summary>
    ///   流对象的大小更改。
    /// </summary>
    procedure SetSize(libNewSize: Int64);
    /// <summary>
    ///   副本指定的数目的字节从当前搜索指针中的流与当前搜索另一个流中的指针。
    /// </summary>
    procedure CopyTo(pstm: DNIStream; cb: Int64; pcbRead: IntPtr; pcbWritten: IntPtr);
    /// <summary>
    ///   确保在事务处理模式中打开的流对象所做任何更改都会反映在父存储中。
    /// </summary>
    procedure Commit(grfCommitFlags: Int32);
    /// <summary>
    ///   放弃自上一个对事务流做的所有更改  调用。
    /// </summary>
    procedure Revert;
    /// <summary>
    ///   将访问限制为指定的流中的字节范围。
    /// </summary>
    procedure LockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    /// <summary>
    ///   删除某个范围的字节与以往限制的访问限制  方法。
    /// </summary>
    procedure UnlockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    procedure Stat(out pstatstg: DNComTypes_STATSTG; grfStatFlag: Int32);
    procedure Clone(out ppstm: DNIStream);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供的托管的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeComp')]
  DNITypeComp = interface(DNObject)
  ['{00020403-0000-0000-C000-000000000046}']
  { methods } 

    procedure Bind(szName: string; lHashVal: Int32; wFlags: Int16; out ppTInfo: DNITypeInfo; out pDescKind: DNComTypes_DESCKIND; out pBindPtr: DNComTypes_BINDPTR);
    procedure BindType(szName: string; lHashVal: Int32; out ppTInfo: DNITypeInfo; out ppTComp: DNITypeComp);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供组件自动化的托管的定义 ITypeInfo 接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeInfo')]
  DNITypeInfo = interface(DNObject)
  ['{00020401-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetTypeAttr(out ppTypeAttr: IntPtr);
    procedure GetFuncDesc(index: Int32; out ppFuncDesc: IntPtr);
    procedure GetVarDesc(index: Int32; out ppVarDesc: IntPtr);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    procedure GetContainingTypeLib(out ppTLB: DNITypeLib; out pIndex: Int32);
    /// <summary>
    ///   版本  以前由返回结构  方法。
    /// </summary>
    procedure ReleaseTypeAttr(pTypeAttr: IntPtr);
    /// <summary>
    ///   版本  以前由返回结构  方法。
    /// </summary>
    procedure ReleaseFuncDesc(pFuncDesc: IntPtr);
    /// <summary>
    ///   版本  以前由返回结构  方法。
    /// </summary>
    procedure ReleaseVarDesc(pVarDesc: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetNames(memid: Int32; rgBstrNames: TArray<string>; cMaxNames: Int32; out pcNames: Int32);
    procedure GetRefTypeOfImplType(index: Int32; out href: Int32);
    procedure GetImplTypeFlags(index: Int32; out pImplTypeFlags: DNComTypes_IMPLTYPEFLAGS);
    /// <summary>
    ///   成员名称和成员 Id 和参数名称和参数 Id 之间的映射。
    /// </summary>
    procedure GetIDsOfNames(rgszNames: TArray<string>; cNames: Int32; pMemId: TArray<Int32>);
    procedure Invoke(pvInstance: DNObject; memid: Int32; wFlags: Int16; out pDispParams: DNComTypes_DISPPARAMS; pVarResult: IntPtr; pExcepInfo: IntPtr; out puArgErr: Int32);
    /// <summary>
    ///   检索对象的描述或规范的 DLL 中的函数的入口点。
    /// </summary>
    procedure GetDllEntry(memid: Int32; invKind: DNComTypes_INVOKEKIND; pBstrDllName: IntPtr; pBstrName: IntPtr; pwOrdinal: IntPtr);
    procedure GetRefTypeInfo(hRef: Int32; out ppTI: DNITypeInfo);
    procedure AddressOfMember(memid: Int32; invKind: DNComTypes_INVOKEKIND; out ppv: IntPtr);
    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObj: DNObject);
    procedure GetMops(memid: Int32; out pBstrMops: string);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供的托管的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeInfo2')]
  DNITypeInfo2 = interface(DNITypeInfo)
  ['{00020412-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetTypeAttr(out ppTypeAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetFuncDesc(index: Int32; out ppFuncDesc: IntPtr);
    procedure GetVarDesc(index: Int32; out ppVarDesc: IntPtr);
    procedure GetNames(memid: Int32; rgBstrNames: TArray<string>; cMaxNames: Int32; out pcNames: Int32);
    procedure GetRefTypeOfImplType(index: Int32; out href: Int32);
    procedure GetImplTypeFlags(index: Int32; out pImplTypeFlags: DNComTypes_IMPLTYPEFLAGS);
    /// <summary>
    ///   成员名称和成员 Id 和参数名称和参数 Id 之间的映射。
    /// </summary>
    procedure GetIDsOfNames(rgszNames: TArray<string>; cNames: Int32; pMemId: TArray<Int32>);
    procedure Invoke(pvInstance: DNObject; memid: Int32; wFlags: Int16; out pDispParams: DNComTypes_DISPPARAMS; pVarResult: IntPtr; pExcepInfo: IntPtr; out puArgErr: Int32);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    /// <summary>
    ///   检索对象的描述或规范的 DLL 中的函数的入口点。
    /// </summary>
    procedure GetDllEntry(memid: Int32; invKind: DNComTypes_INVOKEKIND; pBstrDllName: IntPtr; pBstrName: IntPtr; pwOrdinal: IntPtr);
    procedure GetRefTypeInfo(hRef: Int32; out ppTI: DNITypeInfo);
    procedure AddressOfMember(memid: Int32; invKind: DNComTypes_INVOKEKIND; out ppv: IntPtr);
    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObj: DNObject);
    procedure GetMops(memid: Int32; out pBstrMops: string);
    procedure GetContainingTypeLib(out ppTLB: DNITypeLib; out pIndex: Int32);
    /// <summary>
    ///   版本  以前由返回结构  方法。
    /// </summary>
    procedure ReleaseTypeAttr(pTypeAttr: IntPtr);
    /// <summary>
    ///   版本  以前由返回结构  方法。
    /// </summary>
    procedure ReleaseFuncDesc(pFuncDesc: IntPtr);
    /// <summary>
    ///   版本  以前由返回结构  方法。
    /// </summary>
    procedure ReleaseVarDesc(pVarDesc: IntPtr);
    procedure GetTypeKind(out pTypeKind: DNComTypes_TYPEKIND);
    procedure GetTypeFlags(out pTypeFlags: Int32);
    procedure GetFuncIndexOfMemId(memid: Int32; invKind: DNComTypes_INVOKEKIND; out pFuncIndex: Int32);
    procedure GetVarIndexOfMemId(memid: Int32; out pVarIndex: Int32);
    procedure GetCustData(out guid: DNGuid; out pVarVal: DNObject);
    procedure GetFuncCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetParamCustData(indexFunc: Int32; indexParam: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetVarCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetImplTypeCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetDocumentation2(memid: Int32; out pbstrHelpString: string; out pdwHelpStringContext: Int32; out pbstrHelpStringDll: string);
    /// <summary>
    ///   获取库中所有自定义数据项。
    /// </summary>
    procedure GetAllCustData(pCustData: IntPtr);
    /// <summary>
    ///   从指定的函数中获取所有自定义数据。
    /// </summary>
    procedure GetAllFuncCustData(index: Int32; pCustData: IntPtr);
    /// <summary>
    ///   获取指定的函数参数的所有自定义数据。
    /// </summary>
    procedure GetAllParamCustData(indexFunc: Int32; indexParam: Int32; pCustData: IntPtr);
    /// <summary>
    ///   获取自定义数据的变量。
    /// </summary>
    procedure GetAllVarCustData(index: Int32; pCustData: IntPtr);
    /// <summary>
    ///   获取指定实现类型的所有自定义数据。
    /// </summary>
    procedure GetAllImplTypeCustData(index: Int32; pCustData: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供的托管的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeLib')]
  DNITypeLib = interface(DNObject)
  ['{00020402-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   返回的类型库中的类型说明的数量。
    /// </summary>
    function GetTypeInfoCount: Int32;
    procedure GetTypeInfo(index: Int32; out ppTI: DNITypeInfo);
    procedure GetLibAttr(out ppTLibAttr: IntPtr);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    /// <summary>
    ///   版本  结构最初从获取  方法。
    /// </summary>
    procedure ReleaseTLibAttr(pTLibAttr: IntPtr);
    procedure GetTypeInfoType(index: Int32; out pTKind: DNComTypes_TYPEKIND);
    procedure GetTypeInfoOfGuid(out guid: DNGuid; out ppTInfo: DNITypeInfo);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    /// <summary>
    ///   指示传入的字符串包含一种类型的名称，还是在库中描述的成员。
    /// </summary>
    function IsName(szNameBuf: string; lHashVal: Int32): Boolean;
    procedure FindName(szNameBuf: string; lHashVal: Int32; ppTInfo: TArray<DNITypeInfo>; rgMemId: TArray<Int32>; out pcFound: Int16);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  /// <summary>
  ///   提供的托管的定义  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeLib2')]
  DNITypeLib2 = interface(DNITypeLib)
  ['{00020411-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetCustData(out guid: DNGuid; out pVarVal: DNObject);
    /// <summary>
    ///   返回的类型库中的类型说明的数量。
    /// </summary>
    function GetTypeInfoCount: Int32;
    procedure GetTypeInfo(index: Int32; out ppTI: DNITypeInfo);
    procedure GetTypeInfoType(index: Int32; out pTKind: DNComTypes_TYPEKIND);
    procedure GetTypeInfoOfGuid(out guid: DNGuid; out ppTInfo: DNITypeInfo);
    procedure GetLibAttr(out ppTLibAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    /// <summary>
    ///   指示传入的字符串包含一种类型的名称，还是在库中描述的成员。
    /// </summary>
    function IsName(szNameBuf: string; lHashVal: Int32): Boolean;
    procedure FindName(szNameBuf: string; lHashVal: Int32; ppTInfo: TArray<DNITypeInfo>; rgMemId: TArray<Int32>; out pcFound: Int16);
    /// <summary>
    ///   版本  结构最初从获取  方法。
    /// </summary>
    procedure ReleaseTLibAttr(pTLibAttr: IntPtr);
    procedure GetDocumentation2(index: Int32; out pbstrHelpString: string; out pdwHelpStringContext: Int32; out pbstrHelpStringDll: string);
    procedure GetLibStatistics(pcUniqueNames: IntPtr; out pcchUniqueNames: Int32);
    /// <summary>
    ///   获取库中所有自定义数据项。
    /// </summary>
    procedure GetAllCustData(pCustData: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCurrencyWrapperClass = interface(DNObjectClass)
  ['{2C8AE6B7-B901-4D18-9D1A-A7177D0E1C32}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类  包装并作为类型封送 。
    /// </summary>
    {class} function init(obj: DNDecimal): DNCurrencyWrapper; overload;
    /// <summary>
    ///   新实例初始化  类对象，其中包含  包装并作为类型封送 。
    /// </summary>
    {class} function init(obj: DNObject): DNCurrencyWrapper; overload;

  end;

  /// <summary>
  ///   包装的对象应以封送拆收器 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.CurrencyWrapper')]
  DNCurrencyWrapper = interface(DNObject)
  ['{D540A482-8FB8-3720-B52E-08C7A2C1B9DF}']
  { getter & setter } 

    function get_WrappedObject: DNDecimal;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取作为类型封送的包装的对象 。
    /// </summary>
    property WrappedObject: DNDecimal read get_WrappedObject;
  end;

  TDNCurrencyWrapper = class(TDNGenericImport<DNCurrencyWrapperClass, DNCurrencyWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDispatchWrapperClass = interface(DNObjectClass)
  ['{49531B67-8DA5-4E05-9A86-038EA143F3ED}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  正在包装的对象类。
    /// </summary>
    {class} function init(obj: DNObject): DNDispatchWrapper;

  end;

  /// <summary>
  ///   包装的对象应以封送拆收器 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.DispatchWrapper')]
  DNDispatchWrapper = interface(DNObject)
  ['{DA7109D3-BCD8-3D4C-B172-DFC2E585562A}']
  { getter & setter } 

    function get_WrappedObject: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包装的对象 。
    /// </summary>
    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNDispatchWrapper = class(TDNGenericImport<DNDispatchWrapperClass, DNDispatchWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNErrorWrapperClass = interface(DNObjectClass)
  ['{660D2234-4FA5-404D-B349-F9A0957CB92F}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类相应的 HRESULT 错误。
    /// </summary>
    {class} function init(errorCode: Int32): DNErrorWrapper; overload;
    /// <summary>
    ///   新实例初始化  类，具有一个包含错误的 HRESULT 的对象。
    /// </summary>
    {class} function init(errorCode: DNObject): DNErrorWrapper; overload;
    /// <summary>
    ///   新实例初始化  类提供的异常相对应的 HRESULT。
    /// </summary>
    {class} function init(e: DNException): DNErrorWrapper; overload;

  end;

  /// <summary>
  ///   包装的对象应以封送拆收器 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ErrorWrapper')]
  DNErrorWrapper = interface(DNObject)
  ['{D7900EBD-FF28-3AE6-B517-7E32714F578B}']
  { getter & setter } 

    function get_ErrorCode: Int32;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包装的错误代码。
    /// </summary>
    property ErrorCode: Int32 read get_ErrorCode;
  end;

  TDNErrorWrapper = class(TDNGenericImport<DNErrorWrapperClass, DNErrorWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNExtensibleClassFactoryClass = interface(DNObjectClass)
  ['{F7E4D6CF-6F50-4801-AC99-E1B7D2B7976E}']
  { static methods } 

    /// <summary>
    ///   注册  时实例的托管类型的扩展从非托管类型，需要分配聚合的非托管的对象调用。
    /// </summary>
    {class} procedure RegisterObjectCreationCallback(callback: DNObjectCreationDelegate);

  end;

  /// <summary>
  ///   可以自定义的托管对象的创建过程将从非托管对象的扩展。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ExtensibleClassFactory')]
  DNExtensibleClassFactory = interface(DNObject)
  ['{58734403-8382-3110-B729-14C7855982F9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNExtensibleClassFactory = class(TDNGenericImport<DNExtensibleClassFactoryClass, DNExtensibleClassFactory>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   为客户提供访问实际对象的方法，而不是访问自定义封送处理程序分发的适配器对象的方法。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ICustomAdapter')]
  DNICustomAdapter = interface(DNObject)
  ['{3CC86595-FEB5-3CE9-BA14-D05C8DC3321C}']
  { methods } 

    /// <summary>
    ///   提供由自定义封送处理程序包装的基础对象的访问。
    /// </summary>
    function GetUnderlyingObject: DNObject;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   使用户能够编写扩展程序的托管对象的激活代码 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ICustomFactory')]
  DNICustomFactory = interface(DNObject)
  ['{0CA9008E-EE90-356E-9F6D-B59E6006B9A4}']
  { methods } 

    /// <summary>
    ///   创建指定类型的新实例。
    /// </summary>
    function CreateInstance(serverType: DNType): DNMarshalByRefObject;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   提供用于处理方法调用的自定义包装。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ICustomMarshaler')]
  DNICustomMarshaler = interface(DNObject)
  ['{601CD486-04BF-3213-9EA9-06EBE4351D74}']
  { methods } 

    /// <summary>
    ///   将非托管的数据转换为托管数据。
    /// </summary>
    function MarshalNativeToManaged(pNativeData: IntPtr): DNObject;
    /// <summary>
    ///   将托管的数据转换为非托管数据。
    /// </summary>
    function MarshalManagedToNative(ManagedObj: DNObject): IntPtr;
    /// <summary>
    ///   当不再需要执行必要的非托管数据的清理。
    /// </summary>
    procedure CleanUpNativeData(pNativeData: IntPtr);
    /// <summary>
    ///   当不再需要执行必要的托管数据的清理。
    /// </summary>
    procedure CleanUpManagedData(ManagedObj: DNObject);
    /// <summary>
    ///   返回要封送处理的本机数据的大小。
    /// </summary>
    function GetNativeDataSize: Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   使开发人员能够提供的自定义的托管实现 IUnknown::QueryInterface(REFIID riid, void **ppvObject) 方法。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ICustomQueryInterface')]
  DNICustomQueryInterface = interface(DNObject)
  ['{8888FE72-8A4D-3E9A-845B-946F7A635805}']
  { methods } 

    function GetInterface(out iid: DNGuid; out ppv: IntPtr): DNCustomQueryInterfaceResult;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   提供了一套用于注册和注销服务可使用的程序集管理从 com。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.IRegistrationServices')]
  DNIRegistrationServices = interface(DNObject)
  ['{CCBD682C-73A5-4568-B8B0-C7007E11ABA2}']
  { methods } 

    /// <summary>
    ///   在托管的程序集，以启用从 COM 创建注册类
    /// </summary>
    function RegisterAssembly(assembly: DNAssembly; flags: DNAssemblyRegistrationFlags): Boolean;
    /// <summary>
    ///   注销托管程序集中的类。
    /// </summary>
    function UnregisterAssembly(assembly: DNAssembly): Boolean;
    /// <summary>
    ///   检索列表中将通过调用注册的程序集的类 。
    /// </summary>
    function GetRegistrableTypesInAssembly(assembly: DNAssembly): TArray<DNType>;
    /// <summary>
    ///   检索指定类型的 ProgID COM。
    /// </summary>
    function GetProgIdForType(&type: DNType): string;
    procedure RegisterTypeForComClients(&type: DNType; out g: DNGuid);
    /// <summary>
    ///   返回包含托管的类的 COM 类别的 GUID。
    /// </summary>
    function GetManagedCategoryGuid: DNGuid;
    /// <summary>
    ///   确定指定的类型是否需要注册。
    /// </summary>
    function TypeRequiresRegistration(&type: DNType): Boolean;
    /// <summary>
    ///   确定指定的类型是否为 COM 类型。
    /// </summary>
    function TypeRepresentsComType(&type: DNType): Boolean;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   提供了一套将托管程序集对 COM 类型库，反之亦然转换的服务。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ITypeLibConverter')]
  DNITypeLibConverter = interface(DNObject)
  ['{F1C3BF78-C3E4-11D3-88E7-00902754C43A}']
  { methods } 

    /// <summary>
    ///   将 COM 类型库转换到程序集。
    /// </summary>
    function ConvertTypeLibToAssembly(typeLib: DNObject; asmFileName: string; flags: DNTypeLibImporterFlags; notifySink: DNITypeLibImporterNotifySink; publicKey: TArray<Byte>; keyPair: DNStrongNameKeyPair; asmNamespace: string; asmVersion: DNVersion): DNAssemblyBuilder; overload;
    /// <summary>
    ///   将程序集转换到 COM 类型库。
    /// </summary>
    function ConvertAssemblyToTypeLib(assembly: DNAssembly; typeLibName: string; flags: DNTypeLibExporterFlags; notifySink: DNITypeLibExporterNotifySink): DNObject;
    function GetPrimaryInteropAssembly(g: DNGuid; major: Int32; minor: Int32; lcid: Int32; out asmName: string; out asmCodeBase: string): Boolean;
    /// <summary>
    ///   将 COM 类型库转换到程序集。
    /// </summary>
    function ConvertTypeLibToAssembly(typeLib: DNObject; asmFileName: string; flags: Int32; notifySink: DNITypeLibImporterNotifySink; publicKey: TArray<Byte>; keyPair: DNStrongNameKeyPair; unsafeInterfaces: Boolean): DNAssemblyBuilder; overload;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   提供了控制当导出到类型库的名称的大小写。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ITypeLibExporterNameProvider')]
  DNITypeLibExporterNameProvider = interface(DNObject)
  ['{FA1F3615-ACB9-486D-9EAC-1BEF87E36B09}']
  { methods } 

    /// <summary>
    ///   返回要控制的大小写的名称的列表。
    /// </summary>
    function GetNames: TArray<string>;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   提供要通知的状态的转换，调用方并涉及在转换过程本身中的调用方的程序集转换器的回调机制。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ITypeLibExporterNotifySink')]
  DNITypeLibExporterNotifySink = interface(DNObject)
  ['{F1C3BF77-C3E4-11D3-88E7-00902754C43A}']
  { methods } 

    /// <summary>
    ///   通知调用方的程序集转换过程中发生的事件。
    /// </summary>
    procedure ReportEvent(eventKind: DNExporterEventKind; eventCode: Int32; eventMsg: string);
    /// <summary>
    ///   要求用户来解析对另一个程序集的引用。
    /// </summary>
    function ResolveRef(assembly: DNAssembly): DNObject;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   提供要通知的状态的转换，调用方并涉及在转换过程本身中的调用方的类型库转换器的回调机制。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ITypeLibImporterNotifySink')]
  DNITypeLibImporterNotifySink = interface(DNObject)
  ['{F1C3BF76-C3E4-11D3-88E7-00902754C43A}']
  { methods } 

    /// <summary>
    ///   通知调用方的类型库转换过程中发生的事件。
    /// </summary>
    procedure ReportEvent(eventKind: DNImporterEventKind; eventCode: Int32; eventMsg: string);
    /// <summary>
    ///   要求用户来解析对另一个类型库的引用。
    /// </summary>
    function ResolveRef(typeLib: DNObject): DNAssembly;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalClass = interface(DNObjectClass)
  ['{576CF37F-E868-4DAB-8464-10CE9D41410E}']
  { static methods } 

    /// <summary>
    ///   为托管字符串的副本从非托管 ANSI 第一个空字符之前的所有字符 , ，并且每个将 ANSI 字符扩展为 Unicode。
    /// </summary>
    {class} function PtrToStringAnsi(ptr: IntPtr): string; overload;
    /// <summary>
    ///   分配托管 , ，从非托管 ANSI 字符串将指定的数目的字符复制到其中，和每个将 ANSI 字符扩展为 Unicode。
    /// </summary>
    {class} function PtrToStringAnsi(ptr: IntPtr; len: Int32): string; overload;
    /// <summary>
    ///   分配托管  并从非托管 Unicode 字符串向其复制指定的数目的字符。
    /// </summary>
    {class} function PtrToStringUni(ptr: IntPtr; len: Int32): string; overload;
    /// <summary>
    ///   分配托管  ，并将指定的数目的字符复制从非托管内存中存储到其中的字符串。
    /// </summary>
    {class} function PtrToStringAuto(ptr: IntPtr; len: Int32): string; overload;
    /// <summary>
    ///   分配托管  并从非托管 Unicode 字符串向其复制第一个空字符之前的所有字符。
    /// </summary>
    {class} function PtrToStringUni(ptr: IntPtr): string; overload;
    /// <summary>
    ///   分配托管  并复制从非托管内存中存储到其中的字符串的第一个空字符之前的所有字符。
    /// </summary>
    {class} function PtrToStringAuto(ptr: IntPtr): string; overload;
    /// <summary>
    ///   返回对象的非托管大小（以字节为单位）。
    /// </summary>
    {class} function SizeOf(structure: DNObject): Int32; overload;
    /// <summary>
    ///   返回非托管类型的大小（以字节为单位）。
    /// </summary>
    {class} function SizeOf(t: DNType): Int32; overload;
    /// <summary>
    ///   返回托管类的非托管形式的字段偏移量。
    /// </summary>
    {class} function OffsetOf(t: DNType; fieldName: string): IntPtr; overload;
    /// <summary>
    ///   将数据从一维托管 32 位带符号整数数组复制到非托管内存指针。
    /// </summary>
    {class} procedure Copy(source: TArray<Int32>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    /// <summary>
    ///   将数据从一维托管字符数组复制到非托管内存指针。
    /// </summary>
    {class} procedure Copy(source: TArray<Char>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    /// <summary>
    ///   将数据从一维托管 16 位带符号整数数组复制到非托管内存指针。
    /// </summary>
    {class} procedure Copy(source: TArray<Int16>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    /// <summary>
    ///   将数据从一维托管 64 位带符号整数数组复制到非托管内存指针。
    /// </summary>
    {class} procedure Copy(source: TArray<Int64>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    /// <summary>
    ///   将数据从一维托管单精度浮点数数组复制到非托管内存指针。
    /// </summary>
    {class} procedure Copy(source: TArray<Single>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    /// <summary>
    ///   将数据从一维托管双精度浮点数数组复制到非托管内存指针。
    /// </summary>
    {class} procedure Copy(source: TArray<Double>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    /// <summary>
    ///   将数据从一维托管 8 位无符号整数数组复制到非托管内存指针。
    /// </summary>
    {class} procedure Copy(source: TArray<Byte>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    /// <summary>
    ///   将数据从一维托管的  数组复制到非托管内存指针。
    /// </summary>
    {class} procedure Copy(source: TArray<IntPtr>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    /// <summary>
    ///   将数据从非托管内存指针复制到托管 32 位带符号整数数组。
    /// </summary>
    {class} procedure Copy(source: IntPtr; destination: TArray<Int32>; startIndex: Int32; length: Int32); overload;
    /// <summary>
    ///   将数据从非托管内存指针复制到托管字符数组。
    /// </summary>
    {class} procedure Copy(source: IntPtr; destination: TArray<Char>; startIndex: Int32; length: Int32); overload;
    /// <summary>
    ///   将数据从非托管内存指针复制到托管 16 位带符号整数数组。
    /// </summary>
    {class} procedure Copy(source: IntPtr; destination: TArray<Int16>; startIndex: Int32; length: Int32); overload;
    /// <summary>
    ///   将数据从非托管内存指针复制到托管 64 位带符号整数数组。
    /// </summary>
    {class} procedure Copy(source: IntPtr; destination: TArray<Int64>; startIndex: Int32; length: Int32); overload;
    /// <summary>
    ///   将数据从非托管内存指针复制到托管单精度浮点数数组。
    /// </summary>
    {class} procedure Copy(source: IntPtr; destination: TArray<Single>; startIndex: Int32; length: Int32); overload;
    /// <summary>
    ///   将数据从非托管内存指针复制到托管双精度浮点数数组。
    /// </summary>
    {class} procedure Copy(source: IntPtr; destination: TArray<Double>; startIndex: Int32; length: Int32); overload;
    /// <summary>
    ///   将数据从非托管内存指针复制到托管 8 位无符号整数数组。
    /// </summary>
    {class} procedure Copy(source: IntPtr; destination: TArray<Byte>; startIndex: Int32; length: Int32); overload;
    /// <summary>
    ///   将数据从非托管的内存指针复制到托管的  数组。
    /// </summary>
    {class} procedure Copy(source: IntPtr; destination: TArray<IntPtr>; startIndex: Int32; length: Int32); overload;
    /// <summary>
    ///   从非托管内存按给定的偏移量（或索引）读取单个字节。
    /// </summary>
    {class} function ReadByte(ptr: IntPtr; ofs: Int32): Byte; overload;
    /// <summary>
    ///   从非托管内存读取单个字节。
    /// </summary>
    {class} function ReadByte(ptr: IntPtr): Byte; overload;
    /// <summary>
    ///   从非托管内存按给定的偏移量读取一个 16 位带符号整数。
    /// </summary>
    {class} function ReadInt16(ptr: IntPtr; ofs: Int32): Int16; overload;
    /// <summary>
    ///   从非托管内存中读取一个 16 位带符号整数。
    /// </summary>
    {class} function ReadInt16(ptr: IntPtr): Int16; overload;
    /// <summary>
    ///   从非托管内存按给定的偏移量读取一个 32 位带符号整数。
    /// </summary>
    {class} function ReadInt32(ptr: IntPtr; ofs: Int32): Int32; overload;
    /// <summary>
    ///   从非托管内存中读取一个 32 位带符号整数。
    /// </summary>
    {class} function ReadInt32(ptr: IntPtr): Int32; overload;
    /// <summary>
    ///   从非托管内存读取处理器本机大小的整数。
    /// </summary>
    {class} function ReadIntPtr(ptr: DNObject; ofs: Int32): IntPtr; overload;
    /// <summary>
    ///   从非托管内存按给定的偏移量读取处理器本机大小的整数。
    /// </summary>
    {class} function ReadIntPtr(ptr: IntPtr; ofs: Int32): IntPtr; overload;
    /// <summary>
    ///   从非托管内存读取处理器本机大小的整数。
    /// </summary>
    {class} function ReadIntPtr(ptr: IntPtr): IntPtr; overload;
    /// <summary>
    ///   从非托管内存按给定的偏移量读取一个 64 位带符号整数。
    /// </summary>
    {class} function ReadInt64(ptr: IntPtr; ofs: Int32): Int64; overload;
    /// <summary>
    ///   从非托管内存中读取一个 64 位带符号整数。
    /// </summary>
    {class} function ReadInt64(ptr: IntPtr): Int64; overload;
    /// <summary>
    ///   按指定偏移量将单字节值写入非托管内存。
    /// </summary>
    {class} procedure WriteByte(ptr: IntPtr; ofs: Int32; val: Byte); overload;
    /// <summary>
    ///   将单个字节值写入到非托管内存。
    /// </summary>
    {class} procedure WriteByte(ptr: IntPtr; val: Byte); overload;
    /// <summary>
    ///   按指定偏移量将 16 位带符号整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt16(ptr: IntPtr; ofs: Int32; val: Int16); overload;
    /// <summary>
    ///   将 16 位整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt16(ptr: IntPtr; val: Int16); overload;
    /// <summary>
    ///   按指定偏移量将 16 位带符号整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt16(ptr: IntPtr; ofs: Int32; val: Char); overload;
    /// <summary>
    ///   按指定偏移量将 16 位带符号整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt16(ptr: DNObject; ofs: Int32; val: Char); overload;
    /// <summary>
    ///   将一个字符作为 16 位整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt16(ptr: IntPtr; val: Char); overload;
    /// <summary>
    ///   按指定偏移量将 32 位带符号整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt32(ptr: IntPtr; ofs: Int32; val: Int32); overload;
    /// <summary>
    ///   将 32 位带符号整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt32(ptr: IntPtr; val: Int32); overload;
    /// <summary>
    ///   按指定的偏移量将一个处理器本机大小的整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteIntPtr(ptr: IntPtr; ofs: Int32; val: IntPtr); overload;
    /// <summary>
    ///   将一个处理器本机大小的整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteIntPtr(ptr: DNObject; ofs: Int32; val: IntPtr); overload;
    /// <summary>
    ///   将一个处理器本机大小的整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteIntPtr(ptr: IntPtr; val: IntPtr); overload;
    /// <summary>
    ///   按指定偏移量将 64 位带符号整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt64(ptr: IntPtr; ofs: Int32; val: Int64); overload;
    /// <summary>
    ///   将 64 位带符号整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt64(ptr: IntPtr; val: Int64); overload;
    /// <summary>
    ///   返回对应的最后一个使用执行 Win32 代码引起的错误的 HRESULT 。
    /// </summary>
    {class} function GetHRForLastWin32Error: Int32;
    /// <summary>
    ///   在不调用方法的情况下执行一次性方法设置任务。
    /// </summary>
    {class} procedure Prelink(m: DNMethodInfo);
    /// <summary>
    ///   对类上的所有方法执行预链接检查。
    /// </summary>
    {class} procedure PrelinkAll(c: DNType);
    /// <summary>
    ///   计算在非托管内存中保存指定方法的参数所需要的字节数。
    /// </summary>
    {class} function NumParamBytes(m: DNMethodInfo): Int32;
    /// <summary>
    ///   将数据从非托管内存块封送到托管对象。
    /// </summary>
    {class} procedure PtrToStructure(ptr: IntPtr; structure: DNObject); overload;
    /// <summary>
    ///   将数据从非托管内存块封送到新分配的指定类型的托管对象。
    /// </summary>
    {class} function PtrToStructure(ptr: IntPtr; structureType: DNType): DNObject; overload;
    /// <summary>
    ///   返回指定模块的实例句柄 (HINSTANCE)。
    /// </summary>
    {class} function GetHINSTANCE(m: DNModule): IntPtr;
    /// <summary>
    ///   用特定的失败 HRESULT 值引发异常。
    /// </summary>
    {class} procedure ThrowExceptionForHR(errorCode: Int32); overload;
    /// <summary>
    ///   引发异常用特定的失败 HRESULT，基于指定 IErrorInfo 接口。
    /// </summary>
    {class} procedure ThrowExceptionForHR(errorCode: Int32; errorInfo: IntPtr); overload;
    /// <summary>
    ///   将指定的 HRESULT 错误代码转换为对应的  对象。
    /// </summary>
    {class} function GetExceptionForHR(errorCode: Int32): DNException; overload;
    /// <summary>
    ///   将指定的 HRESULT 错误代码转换为对应的  对象，其中包括通过此异常对象的 IErrorInfo 接口传递的其他错误信息。
    /// </summary>
    {class} function GetExceptionForHR(errorCode: Int32; errorInfo: IntPtr): DNException; overload;
    /// <summary>
    ///   将纤程 cookie 转换为相应  实例。
    /// </summary>
    {class} function GetThreadFromFiberCookie(cookie: Int32): DNThread;
    /// <summary>
    ///   通过使用指向指定字节数的指针，从进程的非托管内存中分配内存。
    /// </summary>
    {class} function AllocHGlobal(cb: IntPtr): IntPtr; overload;
    /// <summary>
    ///   通过使用指定的字节数，从进程的非托管内存中分配内存。
    /// </summary>
    {class} function AllocHGlobal(cb: Int32): IntPtr; overload;
    /// <summary>
    ///   释放以前从进程的非托管内存中分配的内存。
    /// </summary>
    {class} procedure FreeHGlobal(hglobal: IntPtr);
    /// <summary>
    ///   调整之前用  分配的内存块的大小。
    /// </summary>
    {class} function ReAllocHGlobal(pv: IntPtr; cb: IntPtr): IntPtr;
    /// <summary>
    ///   将托管的内容复制  到非托管内存中，并在复制转换为 ANSI 格式。
    /// </summary>
    {class} function StringToHGlobalAnsi(s: string): IntPtr;
    /// <summary>
    ///   将托管的内容复制  到非托管内存。
    /// </summary>
    {class} function StringToHGlobalUni(s: string): IntPtr;
    /// <summary>
    ///   将托管的内容复制  到非托管内存中，如果需要转换为 ANSI 格式。
    /// </summary>
    {class} function StringToHGlobalAuto(s: string): IntPtr;
    /// <summary>
    ///   检索类型库的名称。
    /// </summary>
    {class} function GetTypeLibName(pTLB: DNUCOMITypeLib): string; overload;
    /// <summary>
    ///   检索类型库的名称。
    /// </summary>
    {class} function GetTypeLibName(typelib: DNITypeLib): string; overload;
    /// <summary>
    ///   检索类型库的库标识符 (LIBID)。
    /// </summary>
    {class} function GetTypeLibGuid(pTLB: DNUCOMITypeLib): DNGuid; overload;
    /// <summary>
    ///   检索类型库的库标识符 (LIBID)。
    /// </summary>
    {class} function GetTypeLibGuid(typelib: DNITypeLib): DNGuid; overload;
    /// <summary>
    ///   检索类型库的 LCID。
    /// </summary>
    {class} function GetTypeLibLcid(pTLB: DNUCOMITypeLib): Int32; overload;
    /// <summary>
    ///   检索从指定程序集导出类型库时分配给该类型库的库标识符 (LIBID)。
    /// </summary>
    {class} function GetTypeLibGuidForAssembly(&asm: DNAssembly): DNGuid;
    {class} procedure GetTypeLibVersionForAssembly(inputAssembly: DNAssembly; out majorVersion: Int32; out minorVersion: Int32);
    /// <summary>
    ///   检索表示的类型的名称 ITypeInfo 对象。
    /// </summary>
    {class} function GetTypeInfoName(pTI: DNUCOMITypeInfo): string; overload;
    /// <summary>
    ///   检索表示的类型的名称 ITypeInfo 对象。
    /// </summary>
    {class} function GetTypeInfoName(typeInfo: DNITypeInfo): string; overload;
    /// <summary>
    ///   返回与指定的类标识符 (CLSID) 关联的类型。
    /// </summary>
    {class} function GetTypeFromCLSID(clsid: DNGuid): DNType;
    /// <summary>
    ///   返回 IUnknown 从托管对象的接口。
    /// </summary>
    {class} function GetIUnknownForObject(o: DNObject): IntPtr;
    /// <summary>
    ///   返回 IUnknown 接口从托管对象，如果调用方与该对象相同的上下文中。
    /// </summary>
    {class} function GetIUnknownForObjectInContext(o: DNObject): IntPtr;
    /// <summary>
    ///   返回 IDispatch 从托管对象的接口。
    /// </summary>
    {class} function GetIDispatchForObject(o: DNObject): IntPtr;
    /// <summary>
    ///   返回 IDispatch 接口从托管对象的指针，如果调用方与该对象相同的上下文中。
    /// </summary>
    {class} function GetIDispatchForObjectInContext(o: DNObject): IntPtr;
    /// <summary>
    ///   返回一个指向 IUnknown 表示指定对象上的指定的接口的接口。
    ///               默认情况下，启用自定义查询接口访问。
    /// </summary>
    {class} function GetComInterfaceForObject(o: DNObject; T: DNType): IntPtr; overload;
    /// <summary>
    ///   返回一个指向 IUnknown 表示指定对象上的指定的接口的接口。
    ///               自定义查询接口访问由指定的自定义模式控制。
    /// </summary>
    {class} function GetComInterfaceForObject(o: DNObject; T: DNType; mode: DNCustomQueryInterfaceMode): IntPtr; overload;
    /// <summary>
    ///   返回一个接口指针，该指针表示对象的指定接口（如果调用方与对象在同一上下文中）。
    /// </summary>
    {class} function GetComInterfaceForObjectInContext(o: DNObject; t: DNType): IntPtr;
    /// <summary>
    ///   从 COM 任务内存分配器分配指定大小的内存块。
    /// </summary>
    {class} function AllocCoTaskMem(cb: Int32): IntPtr;
    /// <summary>
    ///   将托管的内容复制  到从非托管 COM 任务分配器分配的内存块。
    /// </summary>
    {class} function StringToCoTaskMemUni(s: string): IntPtr;
    /// <summary>
    ///   将托管的内容复制  到从非托管 COM 任务分配器分配的内存块。
    /// </summary>
    {class} function StringToCoTaskMemAuto(s: string): IntPtr;
    /// <summary>
    ///   将托管的内容复制  到从非托管 COM 任务分配器分配的内存块。
    /// </summary>
    {class} function StringToCoTaskMemAnsi(s: string): IntPtr;
    /// <summary>
    ///   释放由非托管 COM 任务内存分配器分配的内存块。
    /// </summary>
    {class} procedure FreeCoTaskMem(ptr: IntPtr);
    /// <summary>
    ///   调整大小的以前分配的内存块 。
    /// </summary>
    {class} function ReAllocCoTaskMem(pv: IntPtr; cb: Int32): IntPtr;
    /// <summary>
    ///   递减与指定的 COM 对象关联的 运行时可调用包装 (RCW) 的引用计数。
    /// </summary>
    {class} function ReleaseComObject(o: DNObject): Int32;
    /// <summary>
    ///   释放对所有引用 运行时可调用包装 (RCW) 的引用计数设置为 0。
    /// </summary>
    {class} function FinalReleaseComObject(o: DNObject): Int32;
    /// <summary>
    ///   从指定的 COM 对象检索指定键所引用的数据。
    /// </summary>
    {class} function GetComObjectData(obj: DNObject; key: DNObject): DNObject;
    /// <summary>
    ///   设置由指定 COM 对象中的指定键引用的数据。
    /// </summary>
    {class} function SetComObjectData(obj: DNObject; key: DNObject; data: DNObject): Boolean;
    /// <summary>
    ///   在指定类型的对象中包装指定的 COM 对象。
    /// </summary>
    {class} function CreateWrapperOfType(o: DNObject; t: DNType): DNObject; overload;
    /// <summary>
    ///   释放线程缓存。
    /// </summary>
    {class} procedure ReleaseThreadCache;
    /// <summary>
    ///   释放  使用 COM SysFreeString 函数。
    /// </summary>
    {class} procedure FreeBSTR(ptr: IntPtr);
    /// <summary>
    ///   分配 BSTR ，并将复制的托管内容  到其中。
    /// </summary>
    {class} function StringToBSTR(s: string): IntPtr;
    /// <summary>
    ///   分配已托管，并将复制binary string (BSTR)非托管内存中存储到其中。
    /// </summary>
    {class} function PtrToStringBSTR(ptr: IntPtr): string;
    /// <summary>
    ///   检索为指定的虚函数表 （v 表或 VTBL） 槽  类型时向 COM 公开该类型
    /// </summary>
    {class} function GetComSlotForMethodInfo(m: DNMemberInfo): Int32;
    /// <summary>
    ///   返回指定类型的全局唯一标识符 (GUID)，或使用类型库导出程序 (Tlbexp.exe) 所用的算法生成 GUID。
    /// </summary>
    {class} function GenerateGuidForType(&type: DNType): DNGuid;
    /// <summary>
    ///   返回指定类型的编程标识符 (ProgID)。
    /// </summary>
    {class} function GenerateProgIdForType(&type: DNType): string;
    /// <summary>
    ///   获取由指定的名字对象标识的接口指针。
    /// </summary>
    {class} function BindToMoniker(monikerName: string): DNObject;
    /// <summary>
    ///   从运行对象表 (ROT) 获取指定对象的运行实例。
    /// </summary>
    {class} function GetActiveObject(progID: string): DNObject;
    /// <summary>
    ///   将非托管函数指针转换为委托。
    /// </summary>
    {class} function GetDelegateForFunctionPointer(ptr: IntPtr; t: DNType): DNDelegate; overload;
    /// <summary>
    ///   将委托转换为可从非托管代码调用的函数指针。
    /// </summary>
    {class} function GetFunctionPointerForDelegate(d: DNDelegate): IntPtr; overload;
    /// <summary>
    ///   分配非托管 binary string (BSTR) ，并将复制的托管内容  到其中的对象。
    /// </summary>
    {class} function SecureStringToBSTR(s: DNSecureString): IntPtr;
    /// <summary>
    ///   将托管的内容复制  对象到从非托管 COM 任务分配器分配的内存块。
    /// </summary>
    {class} function SecureStringToCoTaskMemAnsi(s: DNSecureString): IntPtr;
    /// <summary>
    ///   将托管  对象的内容复制到从非托管 COM 任务分配器分配的内存块。
    /// </summary>
    {class} function SecureStringToCoTaskMemUnicode(s: DNSecureString): IntPtr;
    /// <summary>
    ///   释放BSTR使用已分配的指针方法。
    /// </summary>
    {class} procedure ZeroFreeBSTR(s: IntPtr);
    /// <summary>
    ///   释放非托管的字符串指针，使用已分配  方法。
    /// </summary>
    {class} procedure ZeroFreeCoTaskMemAnsi(s: IntPtr);
    /// <summary>
    ///   释放非托管的字符串指针，使用已分配  方法。
    /// </summary>
    {class} procedure ZeroFreeCoTaskMemUnicode(s: IntPtr);
    /// <summary>
    ///   将托管的内容复制  到非托管内存中，并在复制转换为 ANSI 格式。
    /// </summary>
    {class} function SecureStringToGlobalAllocAnsi(s: DNSecureString): IntPtr;
    /// <summary>
    ///   将托管的内容复制  到非托管内存的对象。
    /// </summary>
    {class} function SecureStringToGlobalAllocUnicode(s: DNSecureString): IntPtr;
    /// <summary>
    ///   释放非托管的字符串指针，使用已分配  方法。
    /// </summary>
    {class} procedure ZeroFreeGlobalAllocAnsi(s: IntPtr);
    /// <summary>
    ///   释放非托管的字符串指针，使用已分配  方法。
    /// </summary>
    {class} procedure ZeroFreeGlobalAllocUnicode(s: IntPtr);
    /// <summary>
    ///   从非托管内存按给定的偏移量（或索引）读取单个字节。
    /// </summary>
    {class} function ReadByte(ptr: DNObject; ofs: Int32): Byte; overload;
    /// <summary>
    ///   从非托管内存按给定的偏移量读取一个 16 位带符号整数。
    /// </summary>
    {class} function ReadInt16(ptr: DNObject; ofs: Int32): Int16; overload;
    /// <summary>
    ///   从非托管内存按给定的偏移量读取一个 32 位带符号整数。
    /// </summary>
    {class} function ReadInt32(ptr: DNObject; ofs: Int32): Int32; overload;
    /// <summary>
    ///   从非托管内存按给定的偏移量读取一个 64 位带符号整数。
    /// </summary>
    {class} function ReadInt64(ptr: DNObject; ofs: Int32): Int64; overload;
    /// <summary>
    ///   按指定偏移量将单字节值写入非托管内存。
    /// </summary>
    {class} procedure WriteByte(ptr: DNObject; ofs: Int32; val: Byte); overload;
    /// <summary>
    ///   按指定偏移量将 16 位带符号整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt16(ptr: DNObject; ofs: Int32; val: Int16); overload;
    /// <summary>
    ///   按指定偏移量将 32 位带符号整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt32(ptr: DNObject; ofs: Int32; val: Int32); overload;
    /// <summary>
    ///   按指定偏移量将 64 位带符号整数值写入非托管内存。
    /// </summary>
    {class} procedure WriteInt64(ptr: DNObject; ofs: Int32; val: Int64); overload;
    /// <summary>
    ///   将指定异常转换为 HRESULT。
    /// </summary>
    {class} function GetHRForException(e: DNException): Int32;
    /// <summary>
    ///   获取指向运行时生成的函数的指针，该函数将调用从非托管代码封送到托管代码。
    /// </summary>
    {class} function GetUnmanagedThunkForManagedMethodPtr(pfnMethodToWrap: IntPtr; pbSignature: IntPtr; cbSignature: Int32): IntPtr;
    /// <summary>
    ///   获取指向运行时生成的函数的指针，该函数将调用从托管代码封送到非托管代码。
    /// </summary>
    {class} function GetManagedThunkForUnmanagedMethodPtr(pfnMethodToWrap: IntPtr; pbSignature: IntPtr; cbSignature: Int32): IntPtr;
    /// <summary>
    ///   检索类型库的 LCID。
    /// </summary>
    {class} function GetTypeLibLcid(typelib: DNITypeLib): Int32; overload;
    /// <summary>
    ///   将非托管 ITypeInfo 对象转换为托管  对象。
    /// </summary>
    {class} function GetTypeForITypeInfo(piTypeInfo: IntPtr): DNType;
    /// <summary>
    ///   从托管类型返回一个  接口。
    /// </summary>
    {class} function GetITypeInfoForType(t: DNType): IntPtr;
    /// <summary>
    ///   返回表示 COM 对象的指定类型的托管对象。
    /// </summary>
    {class} function GetTypedObjectForIUnknown(pUnk: IntPtr; t: DNType): DNObject;
    /// <summary>
    ///   聚合托管对象和指定的 COM 对象。
    /// </summary>
    {class} function CreateAggregatedObject(pOuter: IntPtr; o: DNObject): IntPtr; overload;
    /// <summary>
    ///   指示类型对 COM 客户端是否可见。
    /// </summary>
    {class} function IsTypeVisibleFromCom(t: DNType): Boolean;
    /// <summary>
    ///   递增指定接口上的引用计数。
    /// </summary>
    {class} function AddRef(pUnk: IntPtr): Int32;
    /// <summary>
    ///   将对象转换为 COM VARIANT。
    /// </summary>
    {class} procedure GetNativeVariantForObject(obj: DNObject; pDstNativeVariant: IntPtr); overload;
    /// <summary>
    ///   将 COM VARIANT 转换为对象。
    /// </summary>
    {class} function GetObjectForNativeVariant(pSrcNativeVariant: IntPtr): DNObject;
    /// <summary>
    ///   将 COM 的数组转换 VARIANTs 到对象的数组。
    /// </summary>
    {class} function GetObjectsForNativeVariants(aSrcNativeVariant: IntPtr; cVars: Int32): TArray<DNObject>;
    /// <summary>
    ///   获取虚拟功能表（v 表或 VTBL）中包含用户定义的方法的第一个槽。
    /// </summary>
    {class} function GetStartComSlot(t: DNType): Int32;
    /// <summary>
    ///   检索向 COM 公开时某个类型的虚拟功能表（v 表或 VTBL）中的最后一个槽。
    /// </summary>
    {class} function GetEndComSlot(t: DNType): Int32;
    {class} function GetMethodInfoForComSlot(t: DNType; slot: Int32; out memberType: DNComMemberType): DNMemberInfo;
    /// <summary>
    ///   更改对象的强度 COM 可调用包装 (CCW) 句柄。
    /// </summary>
    {class} procedure ChangeWrapperHandleStrength(otp: DNObject; fIsWeak: Boolean);
    /// <summary>
    ///   获取指定数组中指定索引处的元素的地址。
    /// </summary>
    {class} function UnsafeAddrOfPinnedArrayElement(arr: DNArray; index: Int32): IntPtr; overload;
    /// <summary>
    ///   通过使用平台调用的最后一个非托管函数返回的错误代码返回调用具有  标志设置。
    /// </summary>
    {class} function GetLastWin32Error: Int32;
    /// <summary>
    ///   检索与计算机无关的异常描述，以及有关异常发生时线程的状态信息。
    /// </summary>
    {class} function GetExceptionPointers: IntPtr;
    /// <summary>
    ///   检索标识所发生异常的类型的代码。
    /// </summary>
    {class} function GetExceptionCode: Int32;
    /// <summary>
    ///   将数据从托管对象封送到非托管内存块。
    /// </summary>
    {class} procedure StructureToPtr(structure: DNObject; ptr: IntPtr; fDeleteOld: Boolean); overload;
    /// <summary>
    ///   释放指定的非托管内存块所指向的所有子结构。
    /// </summary>
    {class} procedure DestroyStructure(ptr: IntPtr; structuretype: DNType); overload;
    /// <summary>
    ///   返回表示 COM 对象通过指向的指针的类型的实例及其 IUnknown 接口。
    /// </summary>
    {class} function GetObjectForIUnknown(pUnk: IntPtr): DNObject;
    /// <summary>
    ///   创建一个唯一 运行时可调用包装 (RCW) 对象给定 IUnknown 接口。
    /// </summary>
    {class} function GetUniqueObjectForIUnknown(unknown: IntPtr): DNObject;
    /// <summary>
    ///   通知运行时清理当前上下文中分配的所有运行时可调用包装器 (RCW)。
    /// </summary>
    {class} procedure CleanupUnusedObjectsInCurrentContext;
    /// <summary>
    ///   指示是否可以清除任何上下文中的运行时可调用包装器 (RCW)。
    /// </summary>
    {class} function AreComObjectsAvailableForCleanup: Boolean;
    /// <summary>
    ///   指示指定对象是否表示 COM 对象。
    /// </summary>
    {class} function IsComObject(o: DNObject): Boolean;
    {class} function QueryInterface(pUnk: IntPtr; out iid: DNGuid; out ppv: IntPtr): Int32;
    /// <summary>
    ///   递减指定接口上的引用计数。
    /// </summary>
    {class} function Release(pUnk: IntPtr): Int32;

  end;

  /// <summary>
  ///   提供了一个方法集合，这些方法用于分配非托管内存、复制非托管内存块、将托管类型转换为非托管类型，此外还提供了在与非托管代码交互时使用的其他杂项方法。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.Marshal')]
  DNMarshal = interface(DNObject)
  ['{F6B3BABB-CE60-38B7-9822-6C65F003A73C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMarshal = class(TDNGenericImport<DNMarshalClass, DNMarshal>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNRegistrationServicesClass = interface(DNObjectClass)
  ['{E92C4B8A-C708-4C8C-88A9-8760D862334B}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRegistrationServices;

  end;

  /// <summary>
  ///   提供了一套用于注册和注销服务可使用的程序集管理从 com。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.RegistrationServices')]
  DNRegistrationServices = interface(DNObject)
  ['{475E398F-8AFA-43A7-A3BE-F4EF8D6787C9}']
  { methods } 

    /// <summary>
    ///   在托管的程序集，以启用从 COM 创建注册类
    /// </summary>
    function RegisterAssembly(assembly: DNAssembly; flags: DNAssemblyRegistrationFlags): Boolean;
    /// <summary>
    ///   注销托管程序集中的类。
    /// </summary>
    function UnregisterAssembly(assembly: DNAssembly): Boolean;
    /// <summary>
    ///   检索列表中将通过调用注册的程序集的类 。
    /// </summary>
    function GetRegistrableTypesInAssembly(assembly: DNAssembly): TArray<DNType>;
    /// <summary>
    ///   检索指定类型的 ProgID COM。
    /// </summary>
    function GetProgIdForType(&type: DNType): string;
    procedure RegisterTypeForComClients(&type: DNType; out g: DNGuid); overload;
    /// <summary>
    ///   返回包含托管的类的 COM 类别的 GUID。
    /// </summary>
    function GetManagedCategoryGuid: DNGuid;
    /// <summary>
    ///   确定指定的类型是否需要注册。
    /// </summary>
    function TypeRequiresRegistration(&type: DNType): Boolean;
    /// <summary>
    ///   指示类型将标有 , ，或从使用标记的类型派生而来  并具有与父级相同的 GUID。
    /// </summary>
    function TypeRepresentsComType(&type: DNType): Boolean;
    /// <summary>
    ///   使用指定的执行上下文与 COM 的指定的类型和连接类型注册。
    /// </summary>
    function RegisterTypeForComClients(&type: DNType; classContext: DNRegistrationClassContext; flags: DNRegistrationConnectionType): Int32; overload;
    /// <summary>
    ///   删除对使用  方法注册的类型的引用。
    /// </summary>
    procedure UnregisterTypeForComClients(cookie: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRegistrationServices = class(TDNGenericImport<DNRegistrationServicesClass, DNRegistrationServices>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNRuntimeEnvironmentClass = interface(DNObjectClass)
  ['{418D6CB6-3BD2-4D28-944B-5EB731E959D0}']
  { static getter & setter } 

    {class} function get_SystemConfigurationFile: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRuntimeEnvironment;

  { static methods } 

    /// <summary>
    ///   测试是否在全局程序集缓存中加载指定的程序集。
    /// </summary>
    {class} function FromGlobalAccessCache(a: DNAssembly): Boolean;
    /// <summary>
    ///   获取当前进程中运行公共语言运行时的版本号。
    /// </summary>
    {class} function GetSystemVersion: string;
    /// <summary>
    ///   返回公共语言运行时所在的目录。
    /// </summary>
    {class} function GetRuntimeDirectory: string;
    /// <summary>
    ///   返回指定的接口上指定的类。
    /// </summary>
    {class} function GetRuntimeInterfaceAsIntPtr(clsid: DNGuid; riid: DNGuid): IntPtr;
    /// <summary>
    ///   返回表示 COM 对象通过指向的指针的类型的实例及其  接口。
    /// </summary>
    {class} function GetRuntimeInterfaceAsObject(clsid: DNGuid; riid: DNGuid): DNObject;

  { static propertys } 

    /// <summary>
    ///   获取系统配置文件的路径。
    /// </summary>
    {class} property SystemConfigurationFile: string read get_SystemConfigurationFile;
  end;

  /// <summary>
  ///   提供了一套  返回有关公共语言运行时环境的信息的方法。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.RuntimeEnvironment')]
  DNRuntimeEnvironment = interface(DNObject)
  ['{78D22140-40CF-303E-BE96-B3AC0407A34D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRuntimeEnvironment = class(TDNGenericImport<DNRuntimeEnvironmentClass, DNRuntimeEnvironment>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNRuntimeInformationClass = interface(DNObjectClass)
  ['{BFAFF25F-8419-472C-9D53-628C7E00DE11}']
  { static getter & setter } 

    {class} function get_FrameworkDescription: string;
    {class} function get_OSDescription: string;
    {class} function get_OSArchitecture: DNArchitecture;
    {class} function get_ProcessArchitecture: DNArchitecture;

  { static methods } 

    /// <summary>
    ///   指示当前应用程序是否正在指定平台上运行。
    /// </summary>
    {class} function IsOSPlatform(osPlatform: DNOSPlatform): Boolean;

  { static propertys } 

    /// <summary>
    ///   返回一个字符串，指示正在其上运行应用的 .NET 安装的名称。
    /// </summary>
    {class} property FrameworkDescription: string read get_FrameworkDescription;
    /// <summary>
    ///   获取一个字符串，指示正在其上运行应用的操作系统的名称。
    /// </summary>
    {class} property OSDescription: string read get_OSDescription;
    /// <summary>
    ///   获取正在其上运行当前应用的平台体系结构。
    /// </summary>
    {class} property OSArchitecture: DNArchitecture read get_OSArchitecture;
    /// <summary>
    ///   获取当前正在运行的应用的进程架构。
    /// </summary>
    {class} property ProcessArchitecture: DNArchitecture read get_ProcessArchitecture;
  end;

  /// <summary>
  ///   提供有关 .NET 运行时安装的信息。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.RuntimeInformation')]
  DNRuntimeInformation = interface(DNObject)
  ['{6C251E52-D18D-385D-A475-F3A45FE0BD92}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRuntimeInformation = class(TDNGenericImport<DNRuntimeInformationClass, DNRuntimeInformation>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibConverterClass = interface(DNObjectClass)
  ['{07C3E3EE-164B-4626-99B6-A9CEDB055A04}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNTypeLibConverter;

  end;

  /// <summary>
  ///   提供了一套将托管程序集对 COM 类型库，反之亦然转换的服务。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TypeLibConverter')]
  DNTypeLibConverter = interface(DNObject)
  ['{F1C3BF79-C3E4-11D3-88E7-00902754C43A}']
  { methods } 

    /// <summary>
    ///   将 COM 类型库转换到程序集。
    /// </summary>
    function ConvertTypeLibToAssembly(typeLib: DNObject; asmFileName: string; flags: Int32; notifySink: DNITypeLibImporterNotifySink; publicKey: TArray<Byte>; keyPair: DNStrongNameKeyPair; unsafeInterfaces: Boolean): DNAssemblyBuilder; overload;
    /// <summary>
    ///   将程序集转换到 COM 类型库。
    /// </summary>
    function ConvertAssemblyToTypeLib(assembly: DNAssembly; strTypeLibName: string; flags: DNTypeLibExporterFlags; notifySink: DNITypeLibExporterNotifySink): DNObject;
    /// <summary>
    ///   将 COM 类型库转换到程序集。
    /// </summary>
    function ConvertTypeLibToAssembly(typeLib: DNObject; asmFileName: string; flags: DNTypeLibImporterFlags; notifySink: DNITypeLibImporterNotifySink; publicKey: TArray<Byte>; keyPair: DNStrongNameKeyPair; asmNamespace: string; asmVersion: DNVersion): DNAssemblyBuilder; overload;
    function GetPrimaryInteropAssembly(g: DNGuid; major: Int32; minor: Int32; lcid: Int32; out asmName: string; out asmCodeBase: string): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTypeLibConverter = class(TDNGenericImport<DNTypeLibConverterClass, DNTypeLibConverter>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIBindCtx')]
  DNUCOMIBindCtx = interface(DNObject)
  ['{0000000E-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   注册为一个对象已在名字对象操作绑定和完成时，应释放它所传递的对象。
    /// </summary>
    procedure RegisterObjectBound(punk: DNObject);
    /// <summary>
    ///   从已注册需要释放的对象的集合中删除的对象。
    /// </summary>
    procedure RevokeObjectBound(punk: DNObject);
    /// <summary>
    ///   发布的绑定上下文的目前已注册的所有对象 。
    /// </summary>
    procedure ReleaseBoundObjects;
    procedure SetBindOptions(out pbindopts: DNInteropServices_BIND_OPTS);
    procedure GetBindOptions(out pbindopts: DNInteropServices_BIND_OPTS);
    procedure GetRunningObjectTable(out pprot: DNUCOMIRunningObjectTable);
    /// <summary>
    ///   注册对象的指针的内部维护表中的指定名称的给定的对象指针。
    /// </summary>
    procedure RegisterObjectParam(pszKey: string; punk: DNObject);
    procedure GetObjectParam(pszKey: string; out ppunk: DNObject);
    procedure EnumObjectParam(out ppenum: DNUCOMIEnumString);
    /// <summary>
    ///   如果任何此类项当前已注册，请撤消注册的当前上下文对象参数的内部维护表中找到此项下的对象。
    /// </summary>
    procedure RevokeObjectParam(pszKey: string);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIConnectionPoint')]
  DNUCOMIConnectionPoint = interface(DNObject)
  ['{B196B286-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure Advise(pUnkSink: DNObject; out pdwCookie: Int32);
    /// <summary>
    ///   终止通过以前建立的通知连接 。
    /// </summary>
    procedure Unadvise(dwCookie: Int32);
    procedure GetConnectionInterface(out pIID: DNGuid);
    procedure GetConnectionPointContainer(out ppCPC: DNUCOMIConnectionPointContainer);
    procedure EnumConnections(out ppEnum: DNUCOMIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIConnectionPointContainer')]
  DNUCOMIConnectionPointContainer = interface(DNObject)
  ['{B196B284-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure FindConnectionPoint(out riid: DNGuid; out ppCP: DNUCOMIConnectionPoint);
    procedure EnumConnectionPoints(out ppEnum: DNUCOMIEnumConnectionPoints);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIEnumConnectionPoints')]
  DNUCOMIEnumConnectionPoints = interface(DNObject)
  ['{B196B285-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    function Next(celt: Int32; rgelt: TArray<DNUCOMIConnectionPoint>; out pceltFetched: Int32): Int32;
    /// <summary>
    ///   跳过指定数目的枚举序列中的项。
    /// </summary>
    function Skip(celt: Int32): Int32;
    /// <summary>
    ///   将枚举序列重置到开头。
    /// </summary>
    function Reset: Int32;
    procedure Clone(out ppenum: DNUCOMIEnumConnectionPoints);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIEnumConnections')]
  DNUCOMIEnumConnections = interface(DNObject)
  ['{B196B287-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    function Next(celt: Int32; rgelt: TArray<DNInteropServices_CONNECTDATA>; out pceltFetched: Int32): Int32;
    /// <summary>
    ///   跳过指定数目的枚举序列中的项。
    /// </summary>
    function Skip(celt: Int32): Int32;
    /// <summary>
    ///   将枚举序列重置到开头。
    /// </summary>
    procedure Reset;
    procedure Clone(out ppenum: DNUCOMIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIEnumMoniker')]
  DNUCOMIEnumMoniker = interface(DNObject)
  ['{00000102-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; rgelt: TArray<DNUCOMIMoniker>; out pceltFetched: Int32): Int32;
    /// <summary>
    ///   跳过指定数目的枚举序列中的项。
    /// </summary>
    function Skip(celt: Int32): Int32;
    /// <summary>
    ///   将枚举序列重置到开头。
    /// </summary>
    function Reset: Int32;
    procedure Clone(out ppenum: DNUCOMIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIEnumString')]
  DNUCOMIEnumString = interface(DNObject)
  ['{00000101-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; rgelt: TArray<string>; out pceltFetched: Int32): Int32;
    /// <summary>
    ///   跳过指定数目的枚举序列中的项。
    /// </summary>
    function Skip(celt: Int32): Int32;
    /// <summary>
    ///   将枚举序列重置到开头。
    /// </summary>
    function Reset: Int32;
    procedure Clone(out ppenum: DNUCOMIEnumString);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIEnumVARIANT')]
  DNUCOMIEnumVARIANT = interface(DNObject)
  ['{00020404-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   检索指定的数目的枚举序列中的项。
    /// </summary>
    function Next(celt: Int32; rgvar: Int32; pceltFetched: Int32): Int32;
    /// <summary>
    ///   跳过指定数目的枚举序列中的项。
    /// </summary>
    function Skip(celt: Int32): Int32;
    /// <summary>
    ///   将枚举序列重置到开头。
    /// </summary>
    function Reset: Int32;
    /// <summary>
    ///   创建另一个包含与当前的相同枚举状态的枚举器。
    /// </summary>
    procedure Clone(ppenum: Int32);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIMoniker')]
  DNUCOMIMoniker = interface(DNObject)
  ['{0000000F-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    /// <summary>
    ///   自上次保存后，请检查对象的更改。
    /// </summary>
    function IsDirty: Int32;
    /// <summary>
    ///   初始化从以前已保存的流对象。
    /// </summary>
    procedure Load(pStm: DNUCOMIStream);
    /// <summary>
    ///   将对象保存到指定的流。
    /// </summary>
    procedure Save(pStm: DNUCOMIStream; fClearDirty: Boolean);
    procedure GetSizeMax(out pcbSize: Int64);
    procedure BindToObject(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; out riidResult: DNGuid; out ppvResult: DNObject);
    procedure BindToStorage(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; out riid: DNGuid; out ppvObj: DNObject);
    procedure Reduce(pbc: DNUCOMIBindCtx; dwReduceHowFar: Int32; out ppmkToLeft: DNUCOMIMoniker; out ppmkReduced: DNUCOMIMoniker);
    procedure ComposeWith(pmkRight: DNUCOMIMoniker; fOnlyIfNotGeneric: Boolean; out ppmkComposite: DNUCOMIMoniker);
    procedure Enum(fForward: Boolean; out ppenumMoniker: DNUCOMIEnumMoniker);
    /// <summary>
    ///   将此名字对象与指定的名字对象进行比较，并指示它们是否相同。
    /// </summary>
    procedure IsEqual(pmkOtherMoniker: DNUCOMIMoniker);
    procedure Hash(out pdwHash: Int32);
    /// <summary>
    ///   确定是否由此名字对象标识的对象当前已加载并正在运行。
    /// </summary>
    procedure IsRunning(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; pmkNewlyRunning: DNUCOMIMoniker);
    procedure GetTimeOfLastChange(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; out pFileTime: DNInteropServices_FILETIME);
    procedure Inverse(out ppmk: DNUCOMIMoniker);
    procedure CommonPrefixWith(pmkOther: DNUCOMIMoniker; out ppmkPrefix: DNUCOMIMoniker);
    procedure RelativePathTo(pmkOther: DNUCOMIMoniker; out ppmkRelPath: DNUCOMIMoniker);
    procedure GetDisplayName(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; out ppszDisplayName: string);
    procedure ParseDisplayName(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; pszDisplayName: string; out pchEaten: Int32; out ppmkOut: DNUCOMIMoniker);
    procedure IsSystemMoniker(out pdwMksys: Int32);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIPersistFile')]
  DNUCOMIPersistFile = interface(DNObject)
  ['{0000010B-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    /// <summary>
    ///   检查对象所做更改，因为它上次保存到其当前的文件。
    /// </summary>
    function IsDirty: Int32;
    /// <summary>
    ///   打开指定的文件，并从该文件的内容初始化某对象。
    /// </summary>
    procedure Load(pszFileName: string; dwMode: Int32);
    /// <summary>
    ///   将对象的副本保存到指定的文件。
    /// </summary>
    procedure Save(pszFileName: string; fRemember: Boolean);
    /// <summary>
    ///   通知的对象，它可以写入其文件。
    /// </summary>
    procedure SaveCompleted(pszFileName: string);
    procedure GetCurFile(out ppszFileName: string);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIRunningObjectTable')]
  DNUCOMIRunningObjectTable = interface(DNObject)
  ['{00000010-0000-0000-C000-000000000046}']
  { methods } 

    procedure &Register(grfFlags: Int32; punkObject: DNObject; pmkObjectName: DNUCOMIMoniker; out pdwRegister: Int32);
    /// <summary>
    ///   注销 ROT 从指定的对象。
    /// </summary>
    procedure Revoke(dwRegister: Int32);
    /// <summary>
    ///   确定是否在运行对象表中当前注册指定的名字对象。
    /// </summary>
    procedure IsRunning(pmkObjectName: DNUCOMIMoniker);
    procedure GetObject(pmkObjectName: DNUCOMIMoniker; out ppunkObject: DNObject);
    procedure NoteChangeTime(dwRegister: Int32; out pfiletime: DNInteropServices_FILETIME);
    procedure GetTimeOfLastChange(pmkObjectName: DNUCOMIMoniker; out pfiletime: DNInteropServices_FILETIME);
    procedure EnumRunning(out ppenumMoniker: DNUCOMIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMIStream')]
  DNUCOMIStream = interface(DNObject)
  ['{0000000C-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   读取指定的数目的字节从流对象读入内存起价当前搜索指针。
    /// </summary>
    procedure Read(pv: TArray<Byte>; cb: Int32; pcbRead: IntPtr);
    /// <summary>
    ///   将指定数量的字节写入以当前开始的流对象搜索指针。
    /// </summary>
    procedure Write(pv: TArray<Byte>; cb: Int32; pcbWritten: IntPtr);
    /// <summary>
    ///   将搜索指针更改到流的新位置相对于开头、 流的结尾或当前搜索指针。
    /// </summary>
    procedure Seek(dlibMove: Int64; dwOrigin: Int32; plibNewPosition: IntPtr);
    /// <summary>
    ///   流对象的大小更改。
    /// </summary>
    procedure SetSize(libNewSize: Int64);
    /// <summary>
    ///   副本指定的数目的字节从当前搜索指针中的流与当前搜索另一个流中的指针。
    /// </summary>
    procedure CopyTo(pstm: DNUCOMIStream; cb: Int64; pcbRead: IntPtr; pcbWritten: IntPtr);
    /// <summary>
    ///   确保在事务处理模式中打开对 stream 对象进行任何更改都会反映在父存储中。
    /// </summary>
    procedure Commit(grfCommitFlags: Int32);
    /// <summary>
    ///   放弃自上一个对事务流做的所有更改  调用。
    /// </summary>
    procedure Revert;
    /// <summary>
    ///   将访问限制为指定的流中的字节范围。
    /// </summary>
    procedure LockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    /// <summary>
    ///   删除某个范围的字节与以往限制的访问限制 。
    /// </summary>
    procedure UnlockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    procedure Stat(out pstatstg: DNInteropServices_STATSTG; grfStatFlag: Int32);
    procedure Clone(out ppstm: DNUCOMIStream);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMITypeComp')]
  DNUCOMITypeComp = interface(DNObject)
  ['{00020403-0000-0000-C000-000000000046}']
  { methods } 

    procedure Bind(szName: string; lHashVal: Int32; wFlags: Int16; out ppTInfo: DNUCOMITypeInfo; out pDescKind: DNInteropServices_DESCKIND; out pBindPtr: DNInteropServices_BINDPTR);
    procedure BindType(szName: string; lHashVal: Int32; out ppTInfo: DNUCOMITypeInfo; out ppTComp: DNUCOMITypeComp);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMITypeInfo')]
  DNUCOMITypeInfo = interface(DNObject)
  ['{00020401-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetTypeAttr(out ppTypeAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNUCOMITypeComp);
    procedure GetFuncDesc(index: Int32; out ppFuncDesc: IntPtr);
    procedure GetVarDesc(index: Int32; out ppVarDesc: IntPtr);
    procedure GetNames(memid: Int32; rgBstrNames: TArray<string>; cMaxNames: Int32; out pcNames: Int32);
    procedure GetRefTypeOfImplType(index: Int32; out href: Int32);
    procedure GetImplTypeFlags(index: Int32; out pImplTypeFlags: Int32);
    /// <summary>
    ///   成员名称和成员 Id 和参数名称和参数 Id 之间的映射。
    /// </summary>
    procedure GetIDsOfNames(rgszNames: TArray<string>; cNames: Int32; pMemId: TArray<Int32>);
    procedure Invoke(pvInstance: DNObject; memid: Int32; wFlags: Int16; out pDispParams: DNInteropServices_DISPPARAMS; out pVarResult: DNObject; out pExcepInfo: DNInteropServices_EXCEPINFO; out puArgErr: Int32);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    procedure GetDllEntry(memid: Int32; invKind: DNInteropServices_INVOKEKIND; out pBstrDllName: string; out pBstrName: string; out pwOrdinal: Int16);
    procedure GetRefTypeInfo(hRef: Int32; out ppTI: DNUCOMITypeInfo);
    procedure AddressOfMember(memid: Int32; invKind: DNInteropServices_INVOKEKIND; out ppv: IntPtr);
    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObj: DNObject);
    procedure GetMops(memid: Int32; out pBstrMops: string);
    procedure GetContainingTypeLib(out ppTLB: DNUCOMITypeLib; out pIndex: Int32);
    /// <summary>
    ///   版本  以前由 。
    /// </summary>
    procedure ReleaseTypeAttr(pTypeAttr: IntPtr);
    /// <summary>
    ///   版本  以前由 。
    /// </summary>
    procedure ReleaseFuncDesc(pFuncDesc: IntPtr);
    /// <summary>
    ///   版本  以前由 。
    /// </summary>
    procedure ReleaseVarDesc(pVarDesc: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UCOMITypeLib')]
  DNUCOMITypeLib = interface(DNObject)
  ['{00020402-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   返回的类型库中的类型说明的数量。
    /// </summary>
    function GetTypeInfoCount: Int32;
    procedure GetTypeInfo(index: Int32; out ppTI: DNUCOMITypeInfo);
    procedure GetTypeInfoType(index: Int32; out pTKind: DNInteropServices_TYPEKIND);
    procedure GetTypeInfoOfGuid(out guid: DNGuid; out ppTInfo: DNUCOMITypeInfo);
    procedure GetLibAttr(out ppTLibAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNUCOMITypeComp);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    /// <summary>
    ///   指示传入的字符串包含一种类型的名称，还是在库中描述的成员。
    /// </summary>
    function IsName(szNameBuf: string; lHashVal: Int32): Boolean;
    procedure FindName(szNameBuf: string; lHashVal: Int32; ppTInfo: TArray<DNUCOMITypeInfo>; rgMemId: TArray<Int32>; out pcFound: Int16);
    /// <summary>
    ///   版本  最初从获取 。
    /// </summary>
    procedure ReleaseTLibAttr(pTLibAttr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNUnknownWrapperClass = interface(DNObjectClass)
  ['{D894BEDB-A03E-40C2-8C23-41EB22C48F2D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  与要包装的对象的类。
    /// </summary>
    {class} function init(obj: DNObject): DNUnknownWrapper;

  end;

  /// <summary>
  ///   包装的对象应以封送拆收器 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.UnknownWrapper')]
  DNUnknownWrapper = interface(DNObject)
  ['{887D4D94-31D1-37F3-9938-643ED2A46155}']
  { getter & setter } 

    function get_WrappedObject: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包含此包装的对象。
    /// </summary>
    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNUnknownWrapper = class(TDNGenericImport<DNUnknownWrapperClass, DNUnknownWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNVariantWrapperClass = interface(DNObjectClass)
  ['{03AA85D6-159F-4504-A62E-41BF6789F72D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  为指定的类  参数。
    /// </summary>
    {class} function init(obj: DNObject): DNVariantWrapper;

  end;

  /// <summary>
  ///   将数据类型的封送  从托管代码流向非托管代码。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.VariantWrapper')]
  DNVariantWrapper = interface(DNObject)
  ['{6B38F062-216A-34D5-B383-BAF846E678A6}']
  { getter & setter } 

    function get_WrappedObject: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包装的对象  对象。
    /// </summary>
    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNVariantWrapper = class(TDNGenericImport<DNVariantWrapperClass, DNVariantWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  /// <summary>
  ///   启用通过激活类 Windows 运行时。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.IActivationFactory')]
  DNIActivationFactory = interface(DNObject)
  ['{00000035-0000-0000-C000-000000000046}']
  { methods } 

    /// <summary>
    ///   返回的新实例 Windows 运行时 由创建的类  接口。
    /// </summary>
    function ActivateInstance: DNObject;

  end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNWindowsRuntimeMarshalClass = interface(DNObjectClass)
  ['{FB15BA8D-506E-4697-B18D-3AD9E1850B8B}']
  { static methods } 

    /// <summary>
    ///   返回一个对象，实现用于指定的激活工厂接口 Windows 运行时 类型。
    /// </summary>
    {class} function GetActivationFactory(&type: DNType): DNIActivationFactory;
    /// <summary>
    ///   分配 Windows 运行时HSTRING 并将指定的托管字符串复制到它。
    /// </summary>
    {class} function StringToHString(s: string): IntPtr;
    /// <summary>
    ///   返回包含指定 Windows 运行时HSTRING 的副本的托管字符串。
    /// </summary>
    {class} function PtrToStringHString(ptr: IntPtr): string;
    /// <summary>
    ///   释放指定的 Windows 运行时HSTRING。
    /// </summary>
    {class} procedure FreeHString(ptr: IntPtr);

  end;

  /// <summary>
  ///   提供用于在 .NET Framework 与 Windows 运行时 之间封送数据的帮助程序方法。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal')]
  DNWindowsRuntimeMarshal = interface(DNObject)
  ['{28CD5A59-703C-302E-B718-79CDE0EC25C5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNWindowsRuntimeMarshal = class(TDNGenericImport<DNWindowsRuntimeMarshalClass, DNWindowsRuntimeMarshal>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNWindowsRuntimeMetadataClass = interface(DNObjectClass)
  ['{8CC59B16-03DA-4008-8969-BDFA742553A4}']
  { static methods } 

    {class} function ResolveNamespace(namespaceName: string; packageGraphFilePaths: DNIEnumerable<string>): DNIEnumerable<string>; overload;
    {class} function ResolveNamespace(namespaceName: string; windowsSdkFilePath: string; packageGraphFilePaths: DNIEnumerable<string>): DNIEnumerable<string>; overload;

  end;

  /// <summary>
  ///   提供一个事件来解决仅限反射的类型提供的 Windows 元数据文件的类型的请求和执行该解决方法的方法。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMetadata')]
  DNWindowsRuntimeMetadata = interface(DNObject)
  ['{B859A81F-6285-3102-9EEF-0BB18B7D6502}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNWindowsRuntimeMetadata = class(TDNGenericImport<DNWindowsRuntimeMetadataClass, DNWindowsRuntimeMetadata>) end;

  //-------------namespace: System.Runtime----------------
  DNProfileOptimizationClass = interface(DNObjectClass)
  ['{41133C37-F43F-481D-8BE8-297E739E9D82}']
  { static methods } 

    /// <summary>
    ///   启用优化分析当前的应用程序域，并设置存储优化配置文件的文件夹。
    ///               在单核计算机上，该方法将被忽略。
    /// </summary>
    {class} procedure SetProfileRoot(directoryPath: string);
    /// <summary>
    ///   开始在指定的配置文件文件中，后台线程上以前记录的方法在实时 (JIT) 编译。
    ///               开始记录当前的方法使用，更高版本将覆盖指定的配置文件的过程。
    /// </summary>
    {class} procedure StartProfile(profile: string);

  end;

  /// <summary>
  ///   提高了应用程序需要在实时 (JIT) 编译器的执行后台编译的方法有可能要执行基于以前编译过程中创建的配置文件中的应用程序域的启动性能。
  /// </summary>
  [DNTypeName('System.Runtime.ProfileOptimization')]
  DNProfileOptimization = interface(DNObject)
  ['{B086FC3D-26D3-39BC-AB6D-04EF5C7468AD}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNProfileOptimization = class(TDNGenericImport<DNProfileOptimizationClass, DNProfileOptimization>) end;

  //-------------namespace: System.Runtime.Remoting.Activation----------------
  /// <summary>
  ///   远程处理激活器类提供的基本功能。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Activation.IActivator')]
  DNIActivator = interface(DNObject)
  ['{C02BBB79-5AA8-390D-927F-717B7BFF06A1}']
  { getter & setter } 

    function get_NextActivator: DNIActivator;
    procedure set_NextActivator(value: DNIActivator);
    function get_Level: DNActivatorLevel;

  { methods } 

    /// <summary>
    ///   创建指定的对象的实例在提供 。
    /// </summary>
    function Activate(msg: DNIConstructionCallMessage): DNIConstructionReturnMessage;

  { propertys } 

    /// <summary>
    ///   获取或设置链中的下一个激活器。
    /// </summary>
    property NextActivator: DNIActivator read get_NextActivator write set_NextActivator;
    /// <summary>
    ///   获取  其中此激活器处于活动状态。
    /// </summary>
    property Level: DNActivatorLevel read get_Level;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNBaseChannelObjectWithPropertiesClass = interface(DNObjectClass)
  ['{AAC6D952-F842-4E3A-B233-E9B70B4647CE}']
  end;

  /// <summary>
  ///   提供公开其属性的词典接口的通道对象的基实现。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties')]
  DNBaseChannelObjectWithProperties = interface(DNObject)
  ['{F369A73E-78D8-3BCC-AE36-522D116E19F9}']
  { getter & setter } 

    function get_Properties: DNIDictionary;
    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示通道对象是否包含具有指定键相关联的属性。
    /// </summary>
    function &Contains(key: DNObject): Boolean;
    /// <summary>
    ///   引发 。
    /// </summary>
    procedure Add(key: DNObject; value: DNObject);
    /// <summary>
    ///   引发 。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   引发 。
    /// </summary>
    procedure Remove(key: DNObject);
    /// <summary>
    ///   返回  ，它枚举与信道对象关联的所有属性。
    /// </summary>
    function GetEnumerator: DNIDictionaryEnumerator;
    /// <summary>
    ///   引发 。
    /// </summary>
    procedure CopyTo(&array: DNArray; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  与信道对象关联的信道属性。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    /// <summary>
    ///   当在派生类中重写时获取  的与之关联的通道对象属性的键。
    /// </summary>
    property Keys: DNICollection read get_Keys;
    /// <summary>
    ///   获取  与信道对象相关联的属性的值。
    /// </summary>
    property Values: DNICollection read get_Values;
    /// <summary>
    ///   获取一个值，该值指示通道对象中属性的集合是只读的。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取一个值，该值指示是否已修复可输入通道对象的属性的数目。
    /// </summary>
    property IsFixedSize: Boolean read get_IsFixedSize;
    /// <summary>
    ///   获取与通道对象相关联的属性的数目。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取用于对访问进行同步的对象 。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
    /// <summary>
    ///   获取一个值，该值指示是否同步通道对象属性的字典。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNBaseChannelObjectWithProperties = class(TDNGenericImport<DNBaseChannelObjectWithPropertiesClass, DNBaseChannelObjectWithProperties>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNBaseChannelSinkWithPropertiesClass = interface(DNBaseChannelObjectWithPropertiesClass)
  ['{28FF4671-BA83-4C23-B3B8-F0E921525C9C}']
  end;

  /// <summary>
  ///   提供想要公开其属性的词典接口的信道接收器的基实现。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties')]
  DNBaseChannelSinkWithProperties = interface(DNBaseChannelObjectWithProperties)
  ['{0E9EB6E5-D899-3132-90C5-7376970C4FB5}']
  { getter & setter } 

    function get_Properties: DNIDictionary;
    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    function &Contains(key: DNObject): Boolean;
    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    procedure Remove(key: DNObject);
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure CopyTo(&array: DNArray; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Properties: DNIDictionary read get_Properties;
    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Count: Int32 read get_Count;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNBaseChannelSinkWithProperties = class(TDNGenericImport<DNBaseChannelSinkWithPropertiesClass, DNBaseChannelSinkWithProperties>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNBaseChannelWithPropertiesClass = interface(DNBaseChannelObjectWithPropertiesClass)
  ['{03AB9B1C-65FA-4C0D-B7AA-9F8DFD1D92CF}']
  end;

  /// <summary>
  ///   提供想要公开其属性的词典接口的通道的基实现。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.BaseChannelWithProperties')]
  DNBaseChannelWithProperties = interface(DNBaseChannelObjectWithProperties)
  ['{22282340-9E30-3591-BD1E-6571930E8582}']
  { getter & setter } 

    function get_Properties: DNIDictionary;
    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    function &Contains(key: DNObject): Boolean;
    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    procedure Remove(key: DNObject);
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure CopyTo(&array: DNArray; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  与当前的通道对象相关联的信道属性。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Count: Int32 read get_Count;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNBaseChannelWithProperties = class(TDNGenericImport<DNBaseChannelWithPropertiesClass, DNBaseChannelWithProperties>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNChannelDataStoreClass = interface(DNObjectClass)
  ['{AE45A10B-7C89-477F-935E-6EADC17CBF8D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类当前信道所映射到的 Uri。
    /// </summary>
    {class} function init(channelURIs: TArray<string>): DNChannelDataStore;

  end;

  /// <summary>
  ///   存储区的信道数据的远程处理信道。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.ChannelDataStore')]
  DNChannelDataStore = interface(DNObject)
  ['{F3E38CEA-40E4-33C1-9DF7-BD103BE2D68B}']
  { getter & setter } 

    function get_ChannelUris: TArray<string>;
    procedure set_ChannelUris(value: TArray<string>);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置通道当前信道所映射到的 Uri 数组。
    /// </summary>
    property ChannelUris: TArray<string> read get_ChannelUris write set_ChannelUris;
  end;

  TDNChannelDataStore = class(TDNGenericImport<DNChannelDataStoreClass, DNChannelDataStore>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNChannelServicesClass = interface(DNObjectClass)
  ['{33668C16-A257-42E8-AE46-ADA76B907361}']
  { static getter & setter } 

    {class} function get_RegisteredChannels: TArray<DNIChannel>;

  { static methods } 

    /// <summary>
    ///   向信道服务注册信道。
    /// </summary>
    {class} procedure RegisterChannel(chnl: DNIChannel; ensureSecurity: Boolean); overload;
    /// <summary>
    ///   向信道服务注册信道。
    ///               已过时。
    ///               请改用 。
    /// </summary>
    {class} procedure RegisterChannel(chnl: DNIChannel); overload;
    /// <summary>
    ///   返回具有指定名称的注册的信道。
    /// </summary>
    {class} function GetChannel(name: string): DNIChannel;
    /// <summary>
    ///   返回可用于访问指定的对象的所有 Url 的数组。
    /// </summary>
    {class} function GetUrlsForObject(obj: DNMarshalByRefObject): TArray<string>;
    /// <summary>
    ///   返回  的给定代理的属性。
    /// </summary>
    {class} function GetChannelSinkProperties(obj: DNObject): DNIDictionary;
    {class} function DispatchMessage(sinkStack: DNIServerChannelSinkStack; msg: DNIMessage; out replyMsg: DNIMessage): DNServerProcessing;
    /// <summary>
    ///   以同步方式将传入消息与基于 URI 的服务器端链嵌入调度消息中。
    /// </summary>
    {class} function SyncDispatchMessage(msg: DNIMessage): DNIMessage;
    /// <summary>
    ///   以异步方式调度到服务器端链基于 URI 将给定的消息中嵌入消息。
    /// </summary>
    {class} function AsyncDispatchMessage(msg: DNIMessage; replySink: DNIMessageSink): DNIMessageCtrl;
    /// <summary>
    ///   创建指定通道信道接收器链。
    /// </summary>
    {class} function CreateServerChannelSinkChain(provider: DNIServerChannelSinkProvider; channel: DNIChannelReceiver): DNIServerChannelSink;
    /// <summary>
    ///   注销已注册的信道列表从特定的信道。
    /// </summary>
    {class} procedure UnregisterChannel(chnl: DNIChannel);

  { static propertys } 

    /// <summary>
    ///   获取当前已注册的信道的列表。
    /// </summary>
    {class} property RegisteredChannels: TArray<DNIChannel> read get_RegisteredChannels;
  end;

  /// <summary>
  ///   提供可以帮助您远程处理信道注册、 分辨率和 URL 发现的静态方法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.ChannelServices')]
  DNChannelServices = interface(DNObject)
  ['{D625BA4C-7C4C-3B86-99EA-780204EDE5CD}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNChannelServices = class(TDNGenericImport<DNChannelServicesClass, DNChannelServices>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNClientChannelSinkStackClass = interface(DNObjectClass)
  ['{95FFD5BD-D6C0-4B67-A511-B9E31BAC78A0}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNClientChannelSinkStack; overload;
    /// <summary>
    ///   新实例初始化  具有指定的答复接收器类。
    /// </summary>
    {class} function init(replySink: DNIMessageSink): DNClientChannelSinkStack; overload;

  end;

  /// <summary>
  ///   持有客户端的堆栈必须异步消息响应解码过程中调用的信道接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.ClientChannelSinkStack')]
  DNClientChannelSinkStack = interface(DNObject)
  ['{DD5856E5-8151-3334-B8E9-07CB152B20A4}']
  { methods } 

    /// <summary>
    ///   将指定的接收器和到接收器堆栈与之相关联的信息。
    /// </summary>
    procedure Push(sink: DNIClientChannelSink; state: DNObject);
    /// <summary>
    ///   弹出与从接收器堆栈和包括指定的接收器的所有接收器相关联的信息。
    /// </summary>
    function Pop(sink: DNIClientChannelSink): DNObject;
    /// <summary>
    ///   请求异步处理的方法调用当前接收器堆栈中的接收器。
    /// </summary>
    procedure AsyncProcessResponse(headers: DNITransportHeaders; stream: DNStream);
    /// <summary>
    ///   将调度答复接收器上的指定的答复消息。
    /// </summary>
    procedure DispatchReplyMessage(msg: DNIMessage);
    /// <summary>
    ///   将调度答复接收器上指定的异常。
    /// </summary>
    procedure DispatchException(e: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNClientChannelSinkStack = class(TDNGenericImport<DNClientChannelSinkStackClass, DNClientChannelSinkStack>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   提供跨越远程处理边界的消息的管道。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IChannel')]
  DNIChannel = interface(DNObject)
  ['{563581E8-C86D-39E2-B2E8-6C23F7987A4B}']
  { getter & setter } 

    function get_ChannelPriority: Int32;
    function get_ChannelName: string;

  { methods } 

    function Parse(url: string; out objectURI: string): string;

  { propertys } 

    /// <summary>
    ///   获取通道的优先级。
    /// </summary>
    property ChannelPriority: Int32 read get_ChannelPriority;
    /// <summary>
    ///   获取通道的名称。
    /// </summary>
    property ChannelName: string read get_ChannelName;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   对于接收方通道提供所需的功能和属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IChannelReceiver')]
  DNIChannelReceiver = interface(DNIChannel)
  ['{48AD41DA-0872-31DA-9887-F81F213527E6}']
  { getter & setter } 

    function get_ChannelData: DNObject;

  { methods } 

    /// <summary>
    ///   返回一个数组的所有 Url 的 URI。
    /// </summary>
    function GetUrlsForUri(objectURI: string): TArray<string>;
    /// <summary>
    ///   指示当前的通道，以开始侦听请求。
    /// </summary>
    procedure StartListening(data: DNObject);
    /// <summary>
    ///   指示要停止侦听请求的当前通道。
    /// </summary>
    procedure StopListening(data: DNObject);

  { propertys } 

    /// <summary>
    ///   获取通道特定的数据。
    /// </summary>
    property ChannelData: DNObject read get_ChannelData;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   发件人通道提供所需的功能和属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IChannelSender')]
  DNIChannelSender = interface(DNIChannel)
  ['{10F1D605-E201-3145-B7AE-3AD746701986}']
  { methods } 

    function CreateMessageSink(url: string; remoteChannelData: DNObject; out objectURI: string): DNIMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   存储区的信道数据的远程处理信道。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IChannelDataStore')]
  DNIChannelDataStore = interface(DNObject)
  ['{1E250CCD-DC30-3217-A7E4-148F375A0088}']
  { getter & setter } 

    function get_ChannelUris: TArray<string>;
    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);

  { propertys } 

    /// <summary>
    ///   获取数组的通道的 Uri 在当前通道映射。
    /// </summary>
    property ChannelUris: TArray<string> read get_ChannelUris;
    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   表示实现的信道要挂接到外部侦听器服务。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IChannelReceiverHook')]
  DNIChannelReceiverHook = interface(DNObject)
  ['{3A02D3F7-3F40-3022-853D-CFDA765182FE}']
  { getter & setter } 

    function get_ChannelScheme: string;
    function get_WantsToListen: Boolean;
    function get_ChannelSinkChain: DNIServerChannelSink;

  { methods } 

    /// <summary>
    ///   添加信道挂钩将对其进行侦听的 URI。
    /// </summary>
    procedure AddHookChannelUri(channelUri: string);

  { propertys } 

    /// <summary>
    ///   获取要挂钩到的侦听器的类型。
    /// </summary>
    property ChannelScheme: string read get_ChannelScheme;
    /// <summary>
    ///   获取一个布尔值，该值指示是否  需要挂接到外部侦听器服务。
    /// </summary>
    property WantsToListen: Boolean read get_WantsToListen;
    /// <summary>
    ///   获取当前的通道使用信道接收器链。
    /// </summary>
    property ChannelSinkChain: DNIServerChannelSink read get_ChannelSinkChain;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   为信道接收器提供的基接口。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IChannelSinkBase')]
  DNIChannelSinkBase = interface(DNObject)
  ['{308DE042-ACC8-32F8-B632-7CB9799D9AA6}']
  { getter & setter } 

    function get_Properties: DNIDictionary;

  { propertys } 

    /// <summary>
    ///   获取可以通过其访问接收器的属性的字典。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   为客户端信道接收器提供所需的功能和属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IClientChannelSink')]
  DNIClientChannelSink = interface(DNIChannelSinkBase)
  ['{FF726320-6B92-3E6C-AAAC-F97063D0B142}']
  { getter & setter } 

    function get_NextChannelSink: DNIClientChannelSink;

  { methods } 

    procedure ProcessMessage(msg: DNIMessage; requestHeaders: DNITransportHeaders; requestStream: DNStream; out responseHeaders: DNITransportHeaders; out responseStream: DNStream);
    /// <summary>
    ///   请求异步处理的方法调用当前接收器。
    /// </summary>
    procedure AsyncProcessRequest(sinkStack: DNIClientChannelSinkStack; msg: DNIMessage; headers: DNITransportHeaders; stream: DNStream);
    /// <summary>
    ///   请求异步处理的响应方法调用当前接收器。
    /// </summary>
    procedure AsyncProcessResponse(sinkStack: DNIClientResponseChannelSinkStack; state: DNObject; headers: DNITransportHeaders; stream: DNStream);
    /// <summary>
    ///   返回  所提供的消息进行序列化到其上。
    /// </summary>
    function GetRequestStream(msg: DNIMessage; headers: DNITransportHeaders): DNStream;

  { propertys } 

    /// <summary>
    ///   获取下一个客户端在客户端接收器链中的信道接收器。
    /// </summary>
    property NextChannelSink: DNIClientChannelSink read get_NextChannelSink;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   提供的安全和传输接收器使用的方法。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IServerChannelSink')]
  DNIServerChannelSink = interface(DNIChannelSinkBase)
  ['{21B5F37B-BEF3-354C-8F84-0F9F0863F5C5}']
  { getter & setter } 

    function get_NextChannelSink: DNIServerChannelSink;

  { methods } 

    function ProcessMessage(sinkStack: DNIServerChannelSinkStack; requestMsg: DNIMessage; requestHeaders: DNITransportHeaders; requestStream: DNStream; out responseMsg: DNIMessage; out responseHeaders: DNITransportHeaders; out responseStream: DNStream): DNServerProcessing;
    /// <summary>
    ///   从当前接收器对从方法调用以异步方式发送的响应进行处理的请求。
    /// </summary>
    procedure AsyncProcessResponse(sinkStack: DNIServerResponseChannelSinkStack; state: DNObject; msg: DNIMessage; headers: DNITransportHeaders; stream: DNStream);
    /// <summary>
    ///   返回  提供的响应消息进行序列化到其上。
    /// </summary>
    function GetResponseStream(sinkStack: DNIServerResponseChannelSinkStack; state: DNObject; msg: DNIMessage; headers: DNITransportHeaders): DNStream;

  { propertys } 

    /// <summary>
    ///   获取下一个服务器服务器接收器链中的信道接收器。
    /// </summary>
    property NextChannelSink: DNIServerChannelSink read get_NextChannelSink;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   创建客户端消息流通过其远程处理的客户端信道的信道接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IClientChannelSinkProvider')]
  DNIClientChannelSinkProvider = interface(DNObject)
  ['{3F8742C2-AC57-3440-A283-FE5FF4C75025}']
  { getter & setter } 

    function get_Next: DNIClientChannelSinkProvider;
    procedure set_Next(value: DNIClientChannelSinkProvider);

  { methods } 

    /// <summary>
    ///   创建接收器链。
    /// </summary>
    function CreateSink(channel: DNIChannelSender; url: string; remoteChannelData: DNObject): DNIClientChannelSink;

  { propertys } 

    /// <summary>
    ///   获取或设置在信道接收器提供程序链中的下一个接收器提供程序。
    /// </summary>
    property Next: DNIClientChannelSinkProvider read get_Next write set_Next;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   将标记为客户端格式化程序接收器提供程序的客户端信道接收器提供程序。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IClientFormatterSinkProvider')]
  DNIClientFormatterSinkProvider = interface(DNIClientChannelSinkProvider)
  ['{6D94B6F3-DA91-3C2F-B876-083769667468}']
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   提供的客户端响应堆栈必须异步消息响应解码过程中调用的信道接收器堆栈功能。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack')]
  DNIClientResponseChannelSinkStack = interface(DNObject)
  ['{3AFAB213-F5A2-3241-93BA-329EA4BA8016}']
  { methods } 

    /// <summary>
    ///   请求异步处理的方法调用当前接收器堆栈中的接收器。
    /// </summary>
    procedure AsyncProcessResponse(headers: DNITransportHeaders; stream: DNStream);
    /// <summary>
    ///   将调度答复接收器上的指定的答复消息。
    /// </summary>
    procedure DispatchReplyMessage(msg: DNIMessage);
    /// <summary>
    ///   将调度答复接收器上指定的异常。
    /// </summary>
    procedure DispatchException(e: DNException);

  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   提供的客户端堆栈必须异步消息响应解码过程中调用的信道接收器的功能。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IClientChannelSinkStack')]
  DNIClientChannelSinkStack = interface(DNIClientResponseChannelSinkStack)
  ['{3A5FDE6B-DB46-34E8-BACD-16EA5A440540}']
  { methods } 

    /// <summary>
    ///   将指定的接收器和信息与它关联到接收器堆栈上推送。
    /// </summary>
    procedure Push(sink: DNIClientChannelSink; state: DNObject);
    /// <summary>
    ///   弹出信息相关联的接收器堆栈中的所有接收器达并包括指定的接收器。
    /// </summary>
    function Pop(sink: DNIClientChannelSink): DNObject;

  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   包含一个属性， , ，它获取或设置一个布尔值，该值指示当前的通道是否安全。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.ISecurableChannel')]
  DNISecurableChannel = interface(DNObject)
  ['{2C31F750-F729-3A69-8C5D-11184B3E76E7}']
  { getter & setter } 

    function get_IsSecured: Boolean;
    procedure set_IsSecured(value: Boolean);

  { propertys } 

    /// <summary>
    ///   获取或设置一个布尔值，该值指示当前的通道是否安全。
    /// </summary>
    property IsSecured: Boolean read get_IsSecured write set_IsSecured;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   创建服务器的远程处理从消息流过的服务器信道的信道接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IServerChannelSinkProvider')]
  DNIServerChannelSinkProvider = interface(DNObject)
  ['{7DD6E975-24EA-323C-A98C-0FDE96F9C4E6}']
  { getter & setter } 

    function get_Next: DNIServerChannelSinkProvider;
    procedure set_Next(value: DNIServerChannelSinkProvider);

  { methods } 

    /// <summary>
    ///   返回对当前接收器与之关联的通道的通道数据。
    /// </summary>
    procedure GetChannelData(channelData: DNIChannelDataStore);
    /// <summary>
    ///   创建接收器链。
    /// </summary>
    function CreateSink(channel: DNIChannelReceiver): DNIServerChannelSink;

  { propertys } 

    /// <summary>
    ///   获取或设置在信道接收器提供程序链中的下一个接收器提供程序。
    /// </summary>
    property Next: DNIServerChannelSinkProvider read get_Next write set_Next;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   将标记为服务器格式化程序接收器提供程序的服务器信道接收器提供程序。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IServerFormatterSinkProvider')]
  DNIServerFormatterSinkProvider = interface(DNIServerChannelSinkProvider)
  ['{042B5200-4317-3E4D-B653-7E9A08F1A5F2}']
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   提供的服务器响应通道堆栈的堆栈功能接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack')]
  DNIServerResponseChannelSinkStack = interface(DNObject)
  ['{9BE679A6-61FD-38FC-A7B2-89982D33338B}']
  { methods } 

    /// <summary>
    ///   请求异步处理的方法调用当前接收器堆栈中的接收器。
    /// </summary>
    procedure AsyncProcessResponse(msg: DNIMessage; headers: DNITransportHeaders; stream: DNStream);
    /// <summary>
    ///   返回  指定的消息进行序列化到其上。
    /// </summary>
    function GetResponseStream(msg: DNIMessage; headers: DNITransportHeaders): DNStream;

  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   提供对服务器信道堆栈的堆栈功能接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IServerChannelSinkStack')]
  DNIServerChannelSinkStack = interface(DNIServerResponseChannelSinkStack)
  ['{E694A733-768D-314D-B317-DCEAD136B11D}']
  { methods } 

    /// <summary>
    ///   将指定的接收器和信息与它关联到接收器堆栈上推送。
    /// </summary>
    procedure Push(sink: DNIServerChannelSink; state: DNObject);
    /// <summary>
    ///   弹出信息相关联的接收器堆栈中的所有接收器达并包括指定的接收器。
    /// </summary>
    function Pop(sink: DNIServerChannelSink): DNObject;
    /// <summary>
    ///   存储的消息接收器和更高版本的异步处理其关联的状态。
    /// </summary>
    procedure Store(sink: DNIServerChannelSink; state: DNObject);
    /// <summary>
    ///   存储消息接收器和与其关联的状态，并随后将调度消息以异步方式使用的接收器只是存储和任何其他存储的接收器。
    /// </summary>
    procedure StoreAndDispatch(sink: DNIServerChannelSink; state: DNObject);
    /// <summary>
    ///   提供一个回调委托，用于在异步调度消息回调。
    /// </summary>
    procedure ServerCallback(ar: DNIAsyncResult);

  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   存储在通道中使用的标头集合接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.ITransportHeaders')]
  DNITransportHeaders = interface(DNObject)
  ['{1AC82FBE-4FF0-383C-BBFD-FE40ECB3628D}']
  { getter & setter } 

    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);

  { methods } 

    /// <summary>
    ///   返回  ，它循环访问中的所有条目  对象。
    /// </summary>
    function GetEnumerator: DNIEnumerator;

  { propertys } 

    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNServerChannelSinkStackClass = interface(DNObjectClass)
  ['{A35F225D-59B7-4EEF-AB1B-8BCDBD08AF27}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNServerChannelSinkStack;

  end;

  /// <summary>
  ///   持有服务器信道接收器堆栈。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.ServerChannelSinkStack')]
  DNServerChannelSinkStack = interface(DNObject)
  ['{5C35F099-165E-3225-A3A5-564150EA17F5}']
  { methods } 

    /// <summary>
    ///   将指定的接收器和信息与它关联到接收器堆栈上推送。
    /// </summary>
    procedure Push(sink: DNIServerChannelSink; state: DNObject);
    /// <summary>
    ///   弹出信息相关联的接收器堆栈中的所有接收器达并包括指定的接收器。
    /// </summary>
    function Pop(sink: DNIServerChannelSink): DNObject;
    /// <summary>
    ///   存储的消息接收器和更高版本的异步处理其关联的状态。
    /// </summary>
    procedure Store(sink: DNIServerChannelSink; state: DNObject);
    /// <summary>
    ///   存储消息接收器和与其关联的状态，并随后将调度消息以异步方式使用的接收器只是存储和任何其他存储的接收器。
    /// </summary>
    procedure StoreAndDispatch(sink: DNIServerChannelSink; state: DNObject);
    /// <summary>
    ///   请求异步处理的方法调用当前接收器堆栈中的接收器。
    /// </summary>
    procedure AsyncProcessResponse(msg: DNIMessage; headers: DNITransportHeaders; stream: DNStream);
    /// <summary>
    ///   返回  指定的消息进行序列化到其上。
    /// </summary>
    function GetResponseStream(msg: DNIMessage; headers: DNITransportHeaders): DNStream;
    /// <summary>
    ///   提供了  委托来处理回调，以异步方式调度消息。
    /// </summary>
    procedure ServerCallback(ar: DNIAsyncResult);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNServerChannelSinkStack = class(TDNGenericImport<DNServerChannelSinkStackClass, DNServerChannelSinkStack>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNSinkProviderDataClass = interface(DNObjectClass)
  ['{CB38520B-CCBF-453D-A181-735CD10E76AA}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(name: string): DNSinkProviderData;

  end;

  /// <summary>
  ///   存储为接收器提供程序接收器提供程序的数据。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.SinkProviderData')]
  DNSinkProviderData = interface(DNObject)
  ['{B8BE8D68-5FE6-38C5-838E-67CE2FCA9D70}']
  { getter & setter } 

    function get_Name: string;
    function get_Properties: DNIDictionary;
    function get_Children: DNIList;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取接收器提供程序的名称在当前数据  对象与之关联。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取提供程序可以访问通过接收器上的属性的字典。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
    /// <summary>
    ///   获取子列表  节点。
    /// </summary>
    property Children: DNIList read get_Children;
  end;

  TDNSinkProviderData = class(TDNGenericImport<DNSinkProviderDataClass, DNSinkProviderData>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNTransportHeadersClass = interface(DNObjectClass)
  ['{46A95E80-65F6-4A1B-BBEE-7503D0505E18}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNTransportHeaders;

  end;

  /// <summary>
  ///   存储在通道中使用的标头集合接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.TransportHeaders')]
  DNTransportHeaders = interface(DNObject)
  ['{48728B3F-F7D9-36C1-B3E7-8BF2E63CE1B3}']
  { methods } 

    /// <summary>
    ///   返回存储的传输标头的枚举。
    /// </summary>
    function GetEnumerator: DNIEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTransportHeaders = class(TDNGenericImport<DNTransportHeadersClass, DNTransportHeaders>) end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  DNContextClass = interface(DNObjectClass)
  ['{B8D8BAA3-DB88-447D-AFCF-75F96DBA6AB7}']
  { static getter & setter } 

    {class} function get_DefaultContext: DNContext;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNContext;

  { static methods } 

    /// <summary>
    ///   分配未命名的数据槽。
    /// </summary>
    {class} function AllocateDataSlot: DNLocalDataStoreSlot;
    /// <summary>
    ///   分配已命名的数据槽。
    /// </summary>
    {class} function AllocateNamedDataSlot(name: string): DNLocalDataStoreSlot;
    /// <summary>
    ///   查找命名的数据槽。
    /// </summary>
    {class} function GetNamedDataSlot(name: string): DNLocalDataStoreSlot;
    /// <summary>
    ///   释放所有上下文中的命名的数据槽。
    /// </summary>
    {class} procedure FreeNamedDataSlot(name: string);
    /// <summary>
    ///   在当前上下文的指定槽中设置的数据。
    /// </summary>
    {class} procedure SetData(slot: DNLocalDataStoreSlot; data: DNObject);
    /// <summary>
    ///   从指定的槽在当前上下文中检索的值。
    /// </summary>
    {class} function GetData(slot: DNLocalDataStoreSlot): DNObject;
    /// <summary>
    ///   注册动态属性实现  与远程处理服务的接口。
    /// </summary>
    {class} function RegisterDynamicProperty(prop: DNIDynamicProperty; obj: DNContextBoundObject; ctx: DNContext): Boolean;
    /// <summary>
    ///   注销动态属性实现  接口。
    /// </summary>
    {class} function UnregisterDynamicProperty(name: string; obj: DNContextBoundObject; ctx: DNContext): Boolean;

  { static propertys } 

    /// <summary>
    ///   获取当前应用程序域的默认上下文。
    /// </summary>
    {class} property DefaultContext: DNContext read get_DefaultContext;
  end;

  /// <summary>
  ///   定义为驻留在其内部对象以及可以实施策略的环境。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.Context')]
  DNContext = interface(DNObject)
  ['{A36E4EAF-EA3F-30A6-906D-374BBF7903B1}']
  { getter & setter } 

    function get_ContextID: Int32;
    function get_ContextProperties: TArray<DNIContextProperty>;

  { methods } 

    /// <summary>
    ///   按名称设置特定的上下文属性。
    /// </summary>
    procedure SetProperty(prop: DNIContextProperty);
    /// <summary>
    ///   返回由名称指定的特定的上下文属性。
    /// </summary>
    function GetProperty(name: string): DNIContextProperty;
    /// <summary>
    ///   冻结的上下文中，因此无法添加或删除从当前上下文的上下文属性。
    /// </summary>
    procedure Freeze;
    /// <summary>
    ///   在其他上下文中执行代码。
    /// </summary>
    procedure DoCallBack(deleg: DNCrossContextDelegate);
    /// <summary>
    ///   返回  类表示形式的当前上下文。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取当前上下文的上下文 ID。
    /// </summary>
    property ContextID: Int32 read get_ContextID;
    /// <summary>
    ///   获取当前的上下文属性的数组。
    /// </summary>
    property ContextProperties: TArray<DNIContextProperty> read get_ContextProperties;
  end;

  TDNContext = class(TDNGenericImport<DNContextClass, DNContext>) end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  DNContextPropertyClass = interface(DNObjectClass)
  ['{B679BAA8-975A-4844-8534-06F388D00128}']
  end;

  /// <summary>
  ///   保存的属性名称和表示上下文属性的对象的名称/值对。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.ContextProperty')]
  DNContextProperty = interface(DNObject)
  ['{6134805F-E8FF-3FD8-931E-4D847BCA7551}']
  { getter & setter } 

    function get_Name: string;
    function get_Property: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取 T:System.Runtime.Remoting.Contexts.ContextProperty 类的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取表示上下文属性的对象。
    /// </summary>
    property &Property: DNObject read get_Property;
  end;

  TDNContextProperty = class(TDNGenericImport<DNContextPropertyClass, DNContextProperty>) end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  /// <summary>
  ///   标识上下文属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.IContextAttribute')]
  DNIContextAttribute = interface(DNObject)
  ['{4A68BAA3-27AA-314A-BDBB-6AE9BDFC0420}']
  { methods } 

    /// <summary>
    ///   返回一个布尔值，该值指示指定的上下文是否满足该上下文属性的要求。
    /// </summary>
    function IsContextOK(ctx: DNContext; msg: DNIConstructionCallMessage): Boolean;
    /// <summary>
    ///   返回给调用方在给定的消息上下文属性。
    /// </summary>
    procedure GetPropertiesForNewContext(msg: DNIConstructionCallMessage);

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  /// <summary>
  ///   收集来自该上下文属性的命名信息并确定新的上下文是否为上下文属性的确定。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.IContextProperty')]
  DNIContextProperty = interface(DNObject)
  ['{F01D896D-8D5F-3235-BE59-20E1E10DC22A}']
  { getter & setter } 

    function get_Name: string;

  { methods } 

    /// <summary>
    ///   返回一个布尔值，该值指示是否符合新的上下文的上下文属性。
    /// </summary>
    function IsNewContextOK(newCtx: DNContext): Boolean;
    /// <summary>
    ///   当上下文冻结时调用。
    /// </summary>
    procedure Freeze(newContext: DNContext);

  { propertys } 

    /// <summary>
    ///   获取在其下它将添加到上下文的属性的名称。
    /// </summary>
    property Name: string read get_Name;
  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  /// <summary>
  ///   表示实现的属性有兴趣参与激活的可能不提供消息接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.IContextPropertyActivator')]
  DNIContextPropertyActivator = interface(DNObject)
  ['{7197B56B-5FA1-31EF-B38B-62FEE737277F}']
  { methods } 

    /// <summary>
    ///   指示是否要激活中指示的对象类型  参数。
    /// </summary>
    function IsOKToActivate(msg: DNIConstructionCallMessage): Boolean;
    /// <summary>
    ///   调用前构造请求使客户端具有此接口，每个客户端上下文属性。
    /// </summary>
    procedure CollectFromClientContext(msg: DNIConstructionCallMessage);
    /// <summary>
    ///   调用构造请求从服务器返回到客户端时具有此接口，每个客户端上下文属性。
    /// </summary>
    function DeliverClientContextToServerContext(msg: DNIConstructionCallMessage): Boolean;
    /// <summary>
    ///   调用前构造响应客户端会使服务器具有此接口，每个服务器上下文属性。
    /// </summary>
    procedure CollectFromServerContext(msg: DNIConstructionReturnMessage);
    /// <summary>
    ///   调用构造请求从服务器返回到客户端时具有此接口，每个客户端上下文属性。
    /// </summary>
    function DeliverServerContextToClientContext(msg: DNIConstructionReturnMessage): Boolean;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  /// <summary>
  ///   可远程处理调用的客户端上下文边界上的侦听接收器发挥作用。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.IContributeClientContextSink')]
  DNIContributeClientContextSink = interface(DNObject)
  ['{4DB956B7-69D0-312A-AA75-44FB55FD5D4B}']
  { methods } 

    /// <summary>
    ///   获取到目前为止，组成的接收器链中的第一个接收器，然后将链接其消息接收器前面已经形成的链。
    /// </summary>
    function GetClientContextSink(nextSink: DNIMessageSink): DNIMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  /// <summary>
  ///   指示将在运行时通过注册实现属性  方法。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.IContributeDynamicSink')]
  DNIContributeDynamicSink = interface(DNObject)
  ['{A0FE9B86-0C06-32CE-85FA-2FF1B58697FB}']
  { methods } 

    /// <summary>
    ///   返回将通知调用的开始和完成事件通过消息接收器  接口。
    /// </summary>
    function GetDynamicSink: DNIDynamicMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  /// <summary>
  ///   分配的客户端上 envoy 消息接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.IContributeEnvoySink')]
  DNIContributeEnvoySink = interface(DNObject)
  ['{124777B6-0308-3569-97E5-E6FE88EAE4EB}']
  { methods } 

    /// <summary>
    ///   获取到目前为止，组成的接收器链中的第一个接收器，然后将链接其消息接收器前面已经形成的链。
    /// </summary>
    function GetEnvoySink(obj: DNMarshalByRefObject; nextSink: DNIMessageSink): DNIMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  /// <summary>
  ///   可远程处理调用的服务器端上的特定于对象的拦截接收器发挥作用。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.IContributeObjectSink')]
  DNIContributeObjectSink = interface(DNObject)
  ['{6A5D38BC-2789-3546-81A1-F10C0FB59366}']
  { methods } 

    /// <summary>
    ///   链接给定的接收器链的前面提供的服务器对象的消息的接收器。
    /// </summary>
    function GetObjectSink(obj: DNMarshalByRefObject; nextSink: DNIMessageSink): DNIMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  /// <summary>
  ///   可远程处理调用的服务器端的上下文边界上的侦听接收器发挥作用。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.IContributeServerContextSink')]
  DNIContributeServerContextSink = interface(DNObject)
  ['{0CAA23EC-F78C-39C9-8D25-B7A9CE4097A7}']
  { methods } 

    /// <summary>
    ///   获取到目前为止，组成的接收器链中的第一个接收器，然后将链接其消息接收器前面已经形成的链。
    /// </summary>
    function GetServerContextSink(nextSink: DNIMessageSink): DNIMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  /// <summary>
  ///   指示动态注册的属性将会提供实现的消息接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.IDynamicMessageSink')]
  DNIDynamicMessageSink = interface(DNObject)
  ['{C74076BB-8A2D-3C20-A542-625329E9AF04}']
  { methods } 

    /// <summary>
    ///   指示调用正在启动。
    /// </summary>
    procedure ProcessMessageStart(reqMsg: DNIMessage; bCliSide: Boolean; bAsync: Boolean);
    /// <summary>
    ///   指示调用正在返回。
    /// </summary>
    procedure ProcessMessageFinish(replyMsg: DNIMessage; bCliSide: Boolean; bAsync: Boolean);

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  /// <summary>
  ///   指示应在运行时通过注册实现属性  方法。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Contexts.IDynamicProperty')]
  DNIDynamicProperty = interface(DNObject)
  ['{00A358D4-4D58-3B9D-8FB6-FB7F6BC1713B}']
  { getter & setter } 

    function get_Name: string;

  { propertys } 

    /// <summary>
    ///   获取动态属性的名称。
    /// </summary>
    property Name: string read get_Name;
  end;

  //-------------namespace: System.Runtime.Remoting----------------
  /// <summary>
  ///   介绍自定义通道，它会执行与 。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.IChannelInfo')]
  DNIChannelInfo = interface(DNObject)
  ['{855E6566-014A-3FE8-AA70-1EAC771E3A88}']
  { getter & setter } 

    function get_ChannelData: TArray<DNObject>;
    procedure set_ChannelData(value: TArray<DNObject>);

  { propertys } 

    /// <summary>
    ///   获取和设置每个通道的通道数据。
    /// </summary>
    property ChannelData: TArray<DNObject> read get_ChannelData write set_ChannelData;
  end;

  //-------------namespace: System.Runtime.Remoting----------------
  /// <summary>
  ///   提供 envoy 的信息。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.IEnvoyInfo')]
  DNIEnvoyInfo = interface(DNObject)
  ['{2A6E91B9-A874-38E4-99C2-C5D83D78140D}']
  { getter & setter } 

    function get_EnvoySinks: DNIMessageSink;
    procedure set_EnvoySinks(value: DNIMessageSink);

  { propertys } 

    /// <summary>
    ///   获取或设置代表列表，该对象进行封送处理时由服务器上下文和对象链。
    /// </summary>
    property EnvoySinks: DNIMessageSink read get_EnvoySinks write set_EnvoySinks;
  end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNInternalRemotingServicesClass = interface(DNObjectClass)
  ['{CAF6921D-F759-493A-982F-8863D52CBB08}']
  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNInternalRemotingServices;

  { static methods } 

    /// <summary>
    ///   将发送任意数量的涉及到内部调试器的远程处理信道的消息。
    /// </summary>
    {class} procedure RemotingTrace(messages: TArray<DNObject>);
    /// <summary>
    ///   指示内部调试器要检查的条件并显示一条消息，如果条件为 。
    /// </summary>
    {class} procedure RemotingAssert(condition: Boolean; message: string);
    /// <summary>
    ///   设置每个方法调用远程服务器对象的内部标识信息从客户端到服务器。
    /// </summary>
    {class} procedure SetServerIdentity(m: DNMethodCall; srvID: DNObject);
    /// <summary>
    ///   获取指定的类成员或方法参数的相应的 SOAP 相关特性。
    /// </summary>
    {class} function GetCachedSoapAttribute(reflectionObject: DNObject): DNSoapAttribute;
    /// <summary>
    ///   将发送一条消息，涉及到非托管调试器的远程处理通道。
    /// </summary>
    {class} procedure DebugOutChnl(s: string);

  end;

  /// <summary>
  ///   通过.NET Framework 远程处理基础结构来定义使用的实用工具方法。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.InternalRemotingServices')]
  DNInternalRemotingServices = interface(DNObject)
  ['{53A3C917-BB24-3908-B58B-09ECDA99265F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalRemotingServices = class(TDNGenericImport<DNInternalRemotingServicesClass, DNInternalRemotingServices>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  /// <summary>
  ///   定义用于从间接寻址按值封送的对象的接口。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.IObjectHandle')]
  DNIObjectHandle = interface(DNObject)
  ['{C460E2B4-E199-412A-8456-84DC3E4838C3}']
  { methods } 

    /// <summary>
    ///   打开该对象。
    /// </summary>
    function Unwrap: DNObject;

  end;

  //-------------namespace: System.Runtime.Remoting----------------
  /// <summary>
  ///   提供一个对象的类型信息。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.IRemotingTypeInfo')]
  DNIRemotingTypeInfo = interface(DNObject)
  ['{C09EFFA9-1FFE-3A52-A733-6236CBC45E7B}']
  { getter & setter } 

    function get_TypeName: string;
    procedure set_TypeName(value: string);

  { methods } 

    /// <summary>
    ///   检查是否表示指定的对象类型的代理可以强制转换为所表示的类型  接口。
    /// </summary>
    function CanCastTo(fromType: DNType; o: DNObject): Boolean;

  { propertys } 

    /// <summary>
    ///   获取或设置中的服务器对象的完全限定的类型名称 。
    /// </summary>
    property TypeName: string read get_TypeName write set_TypeName;
  end;

  //-------------namespace: System.Runtime.Remoting.Lifetime----------------
  /// <summary>
  ///   定义可供远程处理生存期服务的生存期租约对象。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Lifetime.ILease')]
  DNILease = interface(DNObject)
  ['{53A561F2-CBBF-3748-BFFE-2180002DB3DF}']
  { getter & setter } 

    function get_RenewOnCallTime: DNTimeSpan;
    procedure set_RenewOnCallTime(value: DNTimeSpan);
    function get_SponsorshipTimeout: DNTimeSpan;
    procedure set_SponsorshipTimeout(value: DNTimeSpan);
    function get_InitialLeaseTime: DNTimeSpan;
    procedure set_InitialLeaseTime(value: DNTimeSpan);
    function get_CurrentLeaseTime: DNTimeSpan;
    function get_CurrentState: DNLeaseState;

  { methods } 

    /// <summary>
    ///   而不续订租约不注册主办方为该租约。
    /// </summary>
    procedure &Register(obj: DNISponsor); overload;
    /// <summary>
    ///   从赞助商列表中删除赞助商。
    /// </summary>
    procedure Unregister(obj: DNISponsor);
    /// <summary>
    ///   注册为该租约，主办方并将其续订指定 。
    /// </summary>
    procedure &Register(obj: DNISponsor; renewalTime: DNTimeSpan); overload;
    /// <summary>
    ///   将租约续订指定的时间。
    /// </summary>
    function Renew(renewalTime: DNTimeSpan): DNTimeSpan;

  { propertys } 

    /// <summary>
    ///   获取或设置对远程对象的调用续订时所依据的时间量 。
    /// </summary>
    property RenewOnCallTime: DNTimeSpan read get_RenewOnCallTime write set_RenewOnCallTime;
    /// <summary>
    ///   获取或设置等待主办方来返回租约续订时间的时间量。
    /// </summary>
    property SponsorshipTimeout: DNTimeSpan read get_SponsorshipTimeout write set_SponsorshipTimeout;
    /// <summary>
    ///   获取或设置租约的初始时间。
    /// </summary>
    property InitialLeaseTime: DNTimeSpan read get_InitialLeaseTime write set_InitialLeaseTime;
    /// <summary>
    ///   获取租约的剩余时间量。
    /// </summary>
    property CurrentLeaseTime: DNTimeSpan read get_CurrentLeaseTime;
    /// <summary>
    ///   获取当前  的租约。
    /// </summary>
    property CurrentState: DNLeaseState read get_CurrentState;
  end;

  //-------------namespace: System.Runtime.Remoting.Lifetime----------------
  /// <summary>
  ///   指示实施者想要将生存期租约主办方。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Lifetime.ISponsor')]
  DNISponsor = interface(DNObject)
  ['{675591AF-0508-3131-A7CC-287D265CA7D6}']
  { methods } 

    /// <summary>
    ///   请求发起客户端续订指定的对象的租约。
    /// </summary>
    function Renewal(lease: DNILease): DNTimeSpan;

  end;

  //-------------namespace: System.Runtime.Remoting.Lifetime----------------
  DNLifetimeServicesClass = interface(DNObjectClass)
  ['{135E8030-5835-472A-8C27-6A04AE92030D}']
  { static getter & setter } 

    {class} function get_LeaseTime: DNTimeSpan;
    {class} procedure set_LeaseTime(value: DNTimeSpan);
    {class} function get_RenewOnCallTime: DNTimeSpan;
    {class} procedure set_RenewOnCallTime(value: DNTimeSpan);
    {class} function get_SponsorshipTimeout: DNTimeSpan;
    {class} procedure set_SponsorshipTimeout(value: DNTimeSpan);
    {class} function get_LeaseManagerPollTime: DNTimeSpan;
    {class} procedure set_LeaseManagerPollTime(value: DNTimeSpan);

  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNLifetimeServices;

  { static propertys } 

    /// <summary>
    ///   获取或设置初始租约时间跨度 。
    /// </summary>
    {class} property LeaseTime: DNTimeSpan read get_LeaseTime write set_LeaseTime;
    /// <summary>
    ///   获取或设置每次传入的调用服务器对象的扩展租约的时间量。
    /// </summary>
    {class} property RenewOnCallTime: DNTimeSpan read get_RenewOnCallTime write set_RenewOnCallTime;
    /// <summary>
    ///   获取或设置租约管理器会等待主办方来返回租约续订时间的时间量。
    /// </summary>
    {class} property SponsorshipTimeout: DNTimeSpan read get_SponsorshipTimeout write set_SponsorshipTimeout;
    /// <summary>
    ///   获取或设置要清除过期的租约的租约管理器每次激活之间的时间间隔。
    /// </summary>
    {class} property LeaseManagerPollTime: DNTimeSpan read get_LeaseManagerPollTime write set_LeaseManagerPollTime;
  end;

  /// <summary>
  ///   控件的.net 远程处理生存期服务。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Lifetime.LifetimeServices')]
  DNLifetimeServices = interface(DNObject)
  ['{8FD730C1-DD1B-3694-84A1-8CE7159E266B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNLifetimeServices = class(TDNGenericImport<DNLifetimeServicesClass, DNLifetimeServices>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNAsyncResultClass = interface(DNObjectClass)
  ['{5129E9CE-3634-4032-AA52-69F56BB45D37}']
  end;

  /// <summary>
  ///   封装对委托的异步操作的结果。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.AsyncResult')]
  DNAsyncResult = interface(DNObject)
  ['{614E973A-B737-38F5-9DDF-5825AC923135}']
  { getter & setter } 

    function get_IsCompleted: Boolean;
    function get_AsyncDelegate: DNObject;
    function get_AsyncState: DNObject;
    function get_CompletedSynchronously: Boolean;
    function get_EndInvokeCalled: Boolean;
    procedure set_EndInvokeCalled(value: Boolean);
    function get_AsyncWaitHandle: DNWaitHandle;
    function get_NextSink: DNIMessageSink;

  { methods } 

    /// <summary>
    ///   集  对于当前的远程方法调用，提供了一种方法来控制异步消息调度后处理。
    /// </summary>
    procedure SetMessageCtrl(mc: DNIMessageCtrl);
    /// <summary>
    ///   实现  接口。
    /// </summary>
    function AsyncProcessMessage(msg: DNIMessage; replySink: DNIMessageSink): DNIMessageCtrl;
    /// <summary>
    ///   获取异步调用的响应消息。
    /// </summary>
    function GetReplyMessage: DNIMessage;
    /// <summary>
    ///   以同步方式处理对远程对象的方法调用返回的响应消息。
    /// </summary>
    function SyncProcessMessage(msg: DNIMessage): DNIMessage;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示服务器是否具有已完成的调用。
    /// </summary>
    property IsCompleted: Boolean read get_IsCompleted;
    /// <summary>
    ///   获取在其调用异步调用的委托对象。
    /// </summary>
    property AsyncDelegate: DNObject read get_AsyncDelegate;
    /// <summary>
    ///   获取作为的最后一个参数提供的对象  方法调用。
    /// </summary>
    property AsyncState: DNObject read get_AsyncState;
    /// <summary>
    ///   获取一个值，该值指示是否  调用同步完成。
    /// </summary>
    property CompletedSynchronously: Boolean read get_CompletedSynchronously;
    /// <summary>
    ///   获取或设置一个值，该值指示是否  已对当前调用 。
    /// </summary>
    property EndInvokeCalled: Boolean read get_EndInvokeCalled write set_EndInvokeCalled;
    /// <summary>
    ///   获取  封装 Win32 同步句柄，并允许各种同步方案的实现。
    /// </summary>
    property AsyncWaitHandle: DNWaitHandle read get_AsyncWaitHandle;
    /// <summary>
    ///   获取接收器链中的下一个消息接收器。
    /// </summary>
    property NextSink: DNIMessageSink read get_NextSink;
  end;

  TDNAsyncResult = class(TDNGenericImport<DNAsyncResultClass, DNAsyncResult>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNCallContextClass = interface(DNObjectClass)
  ['{3BA3C71D-EE13-458D-ABD7-FA0EBB341D12}']
  { static getter & setter } 

    {class} function get_HostContext: DNObject;
    {class} procedure set_HostContext(value: DNObject);

  { static methods } 

    /// <summary>
    ///   清空与指定名称的数据槽。
    /// </summary>
    {class} procedure FreeNamedDataSlot(name: string);
    /// <summary>
    ///   从逻辑调用上下文中检索具有指定名称的对象。
    /// </summary>
    {class} function LogicalGetData(name: string): DNObject;
    /// <summary>
    ///   检索具有指定名称的对象 。
    /// </summary>
    {class} function GetData(name: string): DNObject;
    /// <summary>
    ///   存储给定的对象并将其与指定名称关联。
    /// </summary>
    {class} procedure SetData(name: string; data: DNObject);
    /// <summary>
    ///   将给定的对象存储在逻辑调用上下文，并将其与指定名称关联。
    /// </summary>
    {class} procedure LogicalSetData(name: string; data: DNObject);
    /// <summary>
    ///   返回与方法调用一起发送的标头。
    /// </summary>
    {class} function GetHeaders: TArray<DNHeader>;
    /// <summary>
    ///   设置与方法调用一起发送的标头。
    /// </summary>
    {class} procedure SetHeaders(headers: TArray<DNHeader>);

  { static propertys } 

    /// <summary>
    ///   获取或设置与当前线程相关联的主机上下文。
    /// </summary>
    {class} property HostContext: DNObject read get_HostContext write set_HostContext;
  end;

  /// <summary>
  ///   提供了一组与执行代码路径执行的属性。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.CallContext')]
  DNCallContext = interface(DNObject)
  ['{9D0DF3B9-107C-3392-88C8-FE629CA21DAB}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCallContext = class(TDNGenericImport<DNCallContextClass, DNCallContext>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNHeaderClass = interface(DNObjectClass)
  ['{0DFA716A-2B69-4AB6-BDB8-FFF4F2F1CCEA}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类具有给定名称和值。
    /// </summary>
    {class} function init(_Name: string; _Value: DNObject): DNHeader; overload;
    /// <summary>
    ///   新实例初始化  类，具有给定名称、 值和其他配置信息。
    /// </summary>
    {class} function init(_Name: string; _Value: DNObject; _MustUnderstand: Boolean): DNHeader; overload;
    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(_Name: string; _Value: DNObject; _MustUnderstand: Boolean; _HeaderNamespace: string): DNHeader; overload;

  end;

  /// <summary>
  ///   定义调用的带外数据。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.Header')]
  DNHeader = interface(DNObject)
  ['{14309FAB-EACD-3C64-877E-07EB01B89C91}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNHeader = class(TDNGenericImport<DNHeaderClass, DNHeader>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  /// <summary>
  ///   将一个对象，可以将外部传播标记  中 。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.ILogicalThreadAffinative')]
  DNILogicalThreadAffinative = interface(DNObject)
  ['{4D125449-BA27-3927-8589-3E1B34B622E5}']
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  /// <summary>
  ///   包含接收器之间合作的消息发送的数据的通信。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.IMessage')]
  DNIMessage = interface(DNObject)
  ['{1A8B0DE6-B825-38C5-B744-8F93075FD6FA}']
  { getter & setter } 

    function get_Properties: DNIDictionary;

  { propertys } 

    /// <summary>
    ///   获取  ，它表示该消息的属性的集合。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  /// <summary>
  ///   定义方法消息接口。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.IMethodMessage')]
  DNIMethodMessage = interface(DNIMessage)
  ['{8E5E0B95-750E-310D-892C-8CA7231CF75B}']
  { getter & setter } 

    function get_Uri: string;
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_HasVarArgs: Boolean;
    function get_LogicalCallContext: DNLogicalCallContext;
    function get_MethodBase: DNMethodBase;

  { methods } 

    /// <summary>
    ///   获取传递给该方法的参数的名称。
    /// </summary>
    function GetArgName(index: Int32): string;
    /// <summary>
    ///   获取特定参数作为 。
    /// </summary>
    function GetArg(argNum: Int32): DNObject;

  { propertys } 

    /// <summary>
    ///   获取调用发送到的特定对象的 URI。
    /// </summary>
    property Uri: string read get_Uri;
    /// <summary>
    ///   获取调用的方法的名称。
    /// </summary>
    property MethodName: string read get_MethodName;
    /// <summary>
    ///   获取完整  调用发送到的特定对象的名称。
    /// </summary>
    property TypeName: string read get_TypeName;
    /// <summary>
    ///   获取一个对象，包含的方法签名。
    /// </summary>
    property MethodSignature: DNObject read get_MethodSignature;
    /// <summary>
    ///   获取传递给该方法的参数的数目。
    /// </summary>
    property ArgCount: Int32 read get_ArgCount;
    /// <summary>
    ///   获取传递给该方法的参数的数组。
    /// </summary>
    property Args: TArray<DNObject> read get_Args;
    /// <summary>
    ///   获取一个值，该值指示消息是否具有变量参数。
    /// </summary>
    property HasVarArgs: Boolean read get_HasVarArgs;
    /// <summary>
    ///   获取  当前方法调用。
    /// </summary>
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
    /// <summary>
    ///   获取  所调用方法。
    /// </summary>
    property MethodBase: DNMethodBase read get_MethodBase;
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  /// <summary>
  ///   定义方法调用消息接口。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.IMethodCallMessage')]
  DNIMethodCallMessage = interface(DNIMethodMessage)
  ['{B90EFAA6-25E4-33D2-ACA3-94BF74DC4AB9}']
  { getter & setter } 

    function get_InArgCount: Int32;
    function get_InArgs: TArray<DNObject>;

  { methods } 

    /// <summary>
    ///   返回未标记为的指定参数的名称  参数。
    /// </summary>
    function GetInArgName(index: Int32): string;
    /// <summary>
    ///   返回未标记为指定的参数  参数。
    /// </summary>
    function GetInArg(argNum: Int32): DNObject;

  { propertys } 

    /// <summary>
    ///   在未标记为调用中获取的参数数目  参数。
    /// </summary>
    property InArgCount: Int32 read get_InArgCount;
    /// <summary>
    ///   获取未标记为参数的数组  参数。
    /// </summary>
    property InArgs: TArray<DNObject> read get_InArgs;
  end;

  //-------------namespace: System.Runtime.Remoting.Activation----------------
  /// <summary>
  ///   表示对象的结构调用请求。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Activation.IConstructionCallMessage')]
  DNIConstructionCallMessage = interface(DNIMethodCallMessage)
  ['{FA28E3AF-7D09-31D5-BEEB-7F2626497CDE}']
  { getter & setter } 

    function get_Activator: DNIActivator;
    procedure set_Activator(value: DNIActivator);
    function get_CallSiteActivationAttributes: TArray<DNObject>;
    function get_ActivationTypeName: string;
    function get_ActivationType: DNType;
    function get_ContextProperties: DNIList;

  { propertys } 

    /// <summary>
    ///   获取或设置激活远程对象的激活器。
    /// </summary>
    property Activator: DNIActivator read get_Activator write set_Activator;
    /// <summary>
    ///   获取调用方激活特性。
    /// </summary>
    property CallSiteActivationAttributes: TArray<DNObject> read get_CallSiteActivationAttributes;
    /// <summary>
    ///   获取要激活的远程类型的完整类型名称。
    /// </summary>
    property ActivationTypeName: string read get_ActivationTypeName;
    /// <summary>
    ///   获取要激活的远程对象的类型。
    /// </summary>
    property ActivationType: DNType read get_ActivationType;
    /// <summary>
    ///   获取定义是用来创建该对象的上下文的上下文属性的列表。
    /// </summary>
    property ContextProperties: DNIList read get_ContextProperties;
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  /// <summary>
  ///   定义方法调用返回消息接口。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.IMethodReturnMessage')]
  DNIMethodReturnMessage = interface(DNIMethodMessage)
  ['{F617690A-55F4-36AF-9149-D199831F8594}']
  { getter & setter } 

    function get_OutArgCount: Int32;
    function get_OutArgs: TArray<DNObject>;
    function get_Exception: DNException;
    function get_ReturnValue: DNObject;

  { methods } 

    /// <summary>
    ///   返回标记为的指定参数的名称  或  参数。
    /// </summary>
    function GetOutArgName(index: Int32): string;
    /// <summary>
    ///   返回指定的参数标记为  或  参数。
    /// </summary>
    function GetOutArg(argNum: Int32): DNObject;

  { propertys } 

    /// <summary>
    ///   获取方法调用中的参数数目标记为  或  参数。
    /// </summary>
    property OutArgCount: Int32 read get_OutArgCount;
    /// <summary>
    ///   返回指定的参数标记为  或  参数。
    /// </summary>
    property OutArgs: TArray<DNObject> read get_OutArgs;
    /// <summary>
    ///   获取方法调用期间引发的异常。
    /// </summary>
    property Exception: DNException read get_Exception;
    /// <summary>
    ///   获取方法调用的返回值。
    /// </summary>
    property ReturnValue: DNObject read get_ReturnValue;
  end;

  //-------------namespace: System.Runtime.Remoting.Activation----------------
  /// <summary>
  ///   标识  之后尝试激活远程对象返回。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Activation.IConstructionReturnMessage')]
  DNIConstructionReturnMessage = interface(DNIMethodReturnMessage)
  ['{CA0AB564-F5E9-3A7F-A80B-EB0AEEFA44E9}']
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  /// <summary>
  ///   使您能够控制异步消息之后它们使用调度 。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.IMessageCtrl')]
  DNIMessageCtrl = interface(DNObject)
  ['{3677CBB0-784D-3C15-BBC8-75CD7DC3901E}']
  { methods } 

    /// <summary>
    ///   取消一个异步调用。
    /// </summary>
    procedure Cancel(msToCancel: Int32);

  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  /// <summary>
  ///   定义消息接收器的接口。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.IMessageSink')]
  DNIMessageSink = interface(DNObject)
  ['{941F8AAA-A353-3B1D-A019-12E44377F1CD}']
  { getter & setter } 

    function get_NextSink: DNIMessageSink;

  { methods } 

    /// <summary>
    ///   以同步方式处理给定的消息。
    /// </summary>
    function SyncProcessMessage(msg: DNIMessage): DNIMessage;
    /// <summary>
    ///   以异步方式处理给定的消息。
    /// </summary>
    function AsyncProcessMessage(msg: DNIMessage; replySink: DNIMessageSink): DNIMessageCtrl;

  { propertys } 

    /// <summary>
    ///   获取接收器链中的下一个消息接收器。
    /// </summary>
    property NextSink: DNIMessageSink read get_NextSink;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  /// <summary>
  ///   标记为将消息序列化到流的客户端格式化程序接收器的接收器。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Channels.IClientFormatterSink')]
  DNIClientFormatterSink = interface(DNIMessageSink)
  ['{46527C03-B144-3CF0-86B3-B8776148A6E9}']
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNInternalMessageWrapperClass = interface(DNObjectClass)
  ['{624DCE8D-9574-4339-A046-EC3A0722D027}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(msg: DNIMessage): DNInternalMessageWrapper;

  end;

  /// <summary>
  ///   包装在消息接收器，或者来自客户端到服务器的请求，或者用于后续的响应之间传递的远程处理数据。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.InternalMessageWrapper')]
  DNInternalMessageWrapper = interface(DNObject)
  ['{30C4CD02-66A2-3ABE-BC6C-638E6730E534}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalMessageWrapper = class(TDNGenericImport<DNInternalMessageWrapperClass, DNInternalMessageWrapper>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNMethodCallMessageWrapperClass = interface(DNInternalMessageWrapperClass)
  ['{A6ADBF04-A2C2-4367-ADA8-D6768AB47781}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类通过包装  接口。
    /// </summary>
    {class} function init(msg: DNIMethodCallMessage): DNMethodCallMessageWrapper;

  end;

  /// <summary>
  ///   实现  接口，以创建充当对远程对象的方法调用的请求消息。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.MethodCallMessageWrapper')]
  DNMethodCallMessageWrapper = interface(DNInternalMessageWrapper)
  ['{40133645-FFAF-3A9C-B408-997E049D5C11}']
  { getter & setter } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_LogicalCallContext: DNLogicalCallContext;
    function get_MethodBase: DNMethodBase;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    procedure set_Args(value: TArray<DNObject>);
    function get_HasVarArgs: Boolean;
    function get_InArgCount: Int32;
    function get_InArgs: TArray<DNObject>;
    function get_Properties: DNIDictionary;

  { methods } 

    /// <summary>
    ///   获取指定索引处的方法参数的名称。
    /// </summary>
    function GetArgName(index: Int32): string;
    /// <summary>
    ///   获取作为对象，指定索引处的方法参数。
    /// </summary>
    function GetArg(argNum: Int32): DNObject;
    /// <summary>
    ///   未标记为的指定索引处获取的方法参数  参数。
    /// </summary>
    function GetInArg(argNum: Int32): DNObject;
    /// <summary>
    ///   获取未标记为的指定索引处的方法参数的名称 出 参数。
    /// </summary>
    function GetInArgName(index: Int32): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取对其进行方法调用的远程对象的统一资源标识符 (URI)。
    /// </summary>
    property Uri: string read get_Uri write set_Uri;
    /// <summary>
    ///   获取调用的方法的名称。
    /// </summary>
    property MethodName: string read get_MethodName;
    /// <summary>
    ///   获取对其进行方法调用的远程对象的完整类型名称。
    /// </summary>
    property TypeName: string read get_TypeName;
    /// <summary>
    ///   获取一个对象，包含的方法签名。
    /// </summary>
    property MethodSignature: DNObject read get_MethodSignature;
    /// <summary>
    ///   获取  当前方法调用。
    /// </summary>
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
    /// <summary>
    ///   获取  所调用方法。
    /// </summary>
    property MethodBase: DNMethodBase read get_MethodBase;
    /// <summary>
    ///   获取传递给该方法的参数的数目。
    /// </summary>
    property ArgCount: Int32 read get_ArgCount;
    /// <summary>
    ///   获取传递给该方法的参数的数组。
    /// </summary>
    property Args: TArray<DNObject> read get_Args write set_Args;
    /// <summary>
    ///   获取一个值，该值指示该方法可以接受可变数量的参数。
    /// </summary>
    property HasVarArgs: Boolean read get_HasVarArgs;
    /// <summary>
    ///   在未标记为方法调用中获取的参数数目  参数。
    /// </summary>
    property InArgCount: Int32 read get_InArgCount;
    /// <summary>
    ///   获取未标记为方法调用中的参数的数组  参数。
    /// </summary>
    property InArgs: TArray<DNObject> read get_InArgs;
    /// <summary>
    ///   ，它表示远程处理消息的属性的集合。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
  end;

  TDNMethodCallMessageWrapper = class(TDNGenericImport<DNMethodCallMessageWrapperClass, DNMethodCallMessageWrapper>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNMethodReturnMessageWrapperClass = interface(DNInternalMessageWrapperClass)
  ['{0EECFB8B-67FA-4E6E-B9A1-227698C179EC}']
  { constructors } 

    /// <summary>
    ///   包装  创建 。
    /// </summary>
    {class} function init(msg: DNIMethodReturnMessage): DNMethodReturnMessageWrapper;

  end;

  /// <summary>
  ///   实现  接口，以创建一条消息，它就像对远程对象的方法调用的响应。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper')]
  DNMethodReturnMessageWrapper = interface(DNInternalMessageWrapper)
  ['{2EC528FB-B987-3B3B-A444-9F94C3A257C1}']
  { getter & setter } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_LogicalCallContext: DNLogicalCallContext;
    function get_MethodBase: DNMethodBase;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    procedure set_Args(value: TArray<DNObject>);
    function get_HasVarArgs: Boolean;
    function get_OutArgCount: Int32;
    function get_OutArgs: TArray<DNObject>;
    function get_Exception: DNException;
    procedure set_Exception(value: DNException);
    function get_ReturnValue: DNObject;
    procedure set_ReturnValue(value: DNObject);
    function get_Properties: DNIDictionary;

  { methods } 

    /// <summary>
    ///   获取指定索引处的方法参数的名称。
    /// </summary>
    function GetArgName(index: Int32): string;
    /// <summary>
    ///   获取作为对象，指定索引处的方法参数。
    /// </summary>
    function GetArg(argNum: Int32): DNObject;
    /// <summary>
    ///   返回指定的参数标记为  参数或  参数。
    /// </summary>
    function GetOutArg(argNum: Int32): DNObject;
    /// <summary>
    ///   返回标记为的指定参数的名称  参数或  参数。
    /// </summary>
    function GetOutArgName(index: Int32): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取对其进行方法调用的远程对象的统一资源标识符 (URI)。
    /// </summary>
    property Uri: string read get_Uri write set_Uri;
    /// <summary>
    ///   获取调用的方法的名称。
    /// </summary>
    property MethodName: string read get_MethodName;
    /// <summary>
    ///   获取对其进行方法调用的远程对象的完整类型名称。
    /// </summary>
    property TypeName: string read get_TypeName;
    /// <summary>
    ///   获取一个对象，包含的方法签名。
    /// </summary>
    property MethodSignature: DNObject read get_MethodSignature;
    /// <summary>
    ///   获取  当前方法调用。
    /// </summary>
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
    /// <summary>
    ///   获取  所调用方法。
    /// </summary>
    property MethodBase: DNMethodBase read get_MethodBase;
    /// <summary>
    ///   获取传递给该方法的参数的数目。
    /// </summary>
    property ArgCount: Int32 read get_ArgCount;
    /// <summary>
    ///   获取传递给该方法的参数的数组。
    /// </summary>
    property Args: TArray<DNObject> read get_Args write set_Args;
    /// <summary>
    ///   获取一个标志，指示该方法可以接受可变数量的参数。
    /// </summary>
    property HasVarArgs: Boolean read get_HasVarArgs;
    /// <summary>
    ///   在标记为方法调用中获取的参数数目  参数或  参数。
    /// </summary>
    property OutArgCount: Int32 read get_OutArgCount;
    /// <summary>
    ///   获取一个标记为方法调用中的参数数组  参数或  参数。
    /// </summary>
    property OutArgs: TArray<DNObject> read get_OutArgs;
    /// <summary>
    ///   获取方法调用期间引发的异常或  如果方法未引发异常。
    /// </summary>
    property Exception: DNException read get_Exception write set_Exception;
    /// <summary>
    ///   获取方法调用的返回值。
    /// </summary>
    property ReturnValue: DNObject read get_ReturnValue write set_ReturnValue;
    /// <summary>
    ///   表示的远程处理消息的属性集合的接口。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
  end;

  TDNMethodReturnMessageWrapper = class(TDNGenericImport<DNMethodReturnMessageWrapperClass, DNMethodReturnMessageWrapper>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNLogicalCallContextClass = interface(DNObjectClass)
  ['{C285185D-F62C-4DE5-BB53-352A3893493F}']
  end;

  /// <summary>
  ///   提供了一组属性，它在远程方法调用期间执行与执行代码路径。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.LogicalCallContext')]
  DNLogicalCallContext = interface(DNObject)
  ['{5DB435A0-0DB3-3F4A-BF49-191A69D451BB}']
  { getter & setter } 

    function get_HasInfo: Boolean;

  { methods } 

    /// <summary>
    ///   清空与指定名称的数据槽。
    /// </summary>
    procedure FreeNamedDataSlot(name: string);
    /// <summary>
    ///   检索与指定的名称从当前实例相关联的对象。
    /// </summary>
    function GetData(name: string): DNObject;
    /// <summary>
    ///   填充指定  所需数据来序列化当前 。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   将指定的对象存储在当前实例中，并将其与指定名称关联。
    /// </summary>
    procedure SetData(name: string; data: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示是否当前  包含的信息。
    /// </summary>
    property HasInfo: Boolean read get_HasInfo;
  end;

  TDNLogicalCallContext = class(TDNGenericImport<DNLogicalCallContextClass, DNLogicalCallContext>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNMethodCallClass = interface(DNObjectClass)
  ['{55859291-EB18-4C78-B643-F4EB2A6F98C9}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例  数组中的远程处理标头的类。
    /// </summary>
    {class} function init(h1: TArray<DNHeader>): DNMethodCall; overload;
    /// <summary>
    ///   新实例初始化  通过复制现有的消息的类。
    /// </summary>
    {class} function init(msg: DNIMessage): DNMethodCall; overload;

  end;

  /// <summary>
  ///   实现  接口，以创建充当对远程对象的方法调用的请求消息。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.MethodCall')]
  DNMethodCall = interface(DNObject)
  ['{4F592B1F-4A0C-3FC0-9914-3677F64FC5A8}']
  { getter & setter } 

    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_InArgCount: Int32;
    function get_InArgs: TArray<DNObject>;
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_MethodBase: DNMethodBase;
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_HasVarArgs: Boolean;
    function get_Properties: DNIDictionary;
    function get_LogicalCallContext: DNLogicalCallContext;

  { methods } 

    /// <summary>
    ///   从序列化设置设置方法的信息。
    /// </summary>
    procedure RootSetObjectData(info: DNSerializationInfo; ctx: DNStreamingContext);
    /// <summary>
    ///   设置从以前初始化的远程处理的方法信息消息属性。
    /// </summary>
    procedure ResolveMethod;
    /// <summary>
    ///   未实现方法。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   初始化 。
    /// </summary>
    procedure Init;
    /// <summary>
    ///   获取作为对象，指定索引处的方法参数。
    /// </summary>
    function GetArg(argNum: Int32): DNObject;
    /// <summary>
    ///   获取指定索引处的方法参数的名称。
    /// </summary>
    function GetArgName(index: Int32): string;
    /// <summary>
    ///   未标记为的指定索引处获取的方法参数  参数。
    /// </summary>
    function GetInArg(argNum: Int32): DNObject;
    /// <summary>
    ///   获取未标记为的指定索引处的方法参数的名称  参数。
    /// </summary>
    function GetInArgName(index: Int32): string;
    /// <summary>
    ///   初始化数组中的远程处理应用于方法的标头的内部序列化处理。
    /// </summary>
    function HeaderHandler(h: TArray<DNHeader>): DNObject;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取传递给方法的参数的数目。
    /// </summary>
    property ArgCount: Int32 read get_ArgCount;
    /// <summary>
    ///   获取传递给方法的参数的数组。
    /// </summary>
    property Args: TArray<DNObject> read get_Args;
    /// <summary>
    ///   在未标记为方法调用中获取的参数数目  参数。
    /// </summary>
    property InArgCount: Int32 read get_InArgCount;
    /// <summary>
    ///   获取未标记为方法调用中的参数的数组  参数。
    /// </summary>
    property InArgs: TArray<DNObject> read get_InArgs;
    /// <summary>
    ///   获取调用的方法的名称。
    /// </summary>
    property MethodName: string read get_MethodName;
    /// <summary>
    ///   获取对其进行方法调用的远程对象的完整类型名称。
    /// </summary>
    property TypeName: string read get_TypeName;
    /// <summary>
    ///   获取一个对象，包含的方法签名。
    /// </summary>
    property MethodSignature: DNObject read get_MethodSignature;
    /// <summary>
    ///   获取  所调用方法。
    /// </summary>
    property MethodBase: DNMethodBase read get_MethodBase;
    /// <summary>
    ///   获取或设置对其进行方法调用的远程对象的统一资源标识符 (URI)。
    /// </summary>
    property Uri: string read get_Uri write set_Uri;
    /// <summary>
    ///   获取一个值，该值指示该方法可以接受可变数量的参数。
    /// </summary>
    property HasVarArgs: Boolean read get_HasVarArgs;
    /// <summary>
    ///   获取  表示的远程处理消息的属性集合的接口。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
    /// <summary>
    ///   获取  当前方法调用。
    /// </summary>
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
  end;

  TDNMethodCall = class(TDNGenericImport<DNMethodCallClass, DNMethodCall>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNConstructionCallClass = interface(DNMethodCallClass)
  ['{1DBC8066-72B8-4D48-B8A5-00FFAB5E560F}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例  数组中的远程处理标头的类。
    /// </summary>
    {class} function init(headers: TArray<DNHeader>): DNConstructionCall; overload;
    /// <summary>
    ///   初始化的新实例  通过复制现有的消息的类。
    /// </summary>
    {class} function init(m: DNIMessage): DNConstructionCall; overload;

  end;

  /// <summary>
  ///   实现  接口，以创建请求消息，从而形成对远程对象的构造函数调用。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.ConstructionCall')]
  DNConstructionCall = interface(DNMethodCall)
  ['{54DAC96D-ECAF-38DB-A27B-3DDB102130C4}']
  { getter & setter } 

    function get_CallSiteActivationAttributes: TArray<DNObject>;
    function get_ActivationType: DNType;
    function get_ActivationTypeName: string;
    function get_ContextProperties: DNIList;
    function get_Properties: DNIDictionary;
    function get_Activator: DNIActivator;
    procedure set_Activator(value: DNIActivator);
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_InArgCount: Int32;
    function get_InArgs: TArray<DNObject>;
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_MethodBase: DNMethodBase;
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_HasVarArgs: Boolean;
    function get_LogicalCallContext: DNLogicalCallContext;

  { methods } 

    procedure RootSetObjectData(info: DNSerializationInfo; ctx: DNStreamingContext);
    procedure ResolveMethod;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure Init;
    function GetArg(argNum: Int32): DNObject;
    function GetArgName(index: Int32): string;
    function GetInArg(argNum: Int32): DNObject;
    function GetInArgName(index: Int32): string;
    function HeaderHandler(h: TArray<DNHeader>): DNObject;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取远程对象的调用站点激活特性。
    /// </summary>
    property CallSiteActivationAttributes: TArray<DNObject> read get_CallSiteActivationAttributes;
    /// <summary>
    ///   获取要激活的远程对象的类型。
    /// </summary>
    property ActivationType: DNType read get_ActivationType;
    /// <summary>
    ///   获取要激活的远程对象的完整类型名称。
    /// </summary>
    property ActivationTypeName: string read get_ActivationTypeName;
    /// <summary>
    ///   获取定义是用来创建远程对象的上下文的属性的列表。
    /// </summary>
    property ContextProperties: DNIList read get_ContextProperties;
    /// <summary>
    ///   获取  表示的远程处理消息的属性集合的接口。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
    /// <summary>
    ///   获取或设置激活远程对象的激活器。
    /// </summary>
    property Activator: DNIActivator read get_Activator write set_Activator;
    property ArgCount: Int32 read get_ArgCount;
    property Args: TArray<DNObject> read get_Args;
    property InArgCount: Int32 read get_InArgCount;
    property InArgs: TArray<DNObject> read get_InArgs;
    property MethodName: string read get_MethodName;
    property TypeName: string read get_TypeName;
    property MethodSignature: DNObject read get_MethodSignature;
    property MethodBase: DNMethodBase read get_MethodBase;
    property Uri: string read get_Uri write set_Uri;
    property HasVarArgs: Boolean read get_HasVarArgs;
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
  end;

  TDNConstructionCall = class(TDNGenericImport<DNConstructionCallClass, DNConstructionCall>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNMethodResponseClass = interface(DNObjectClass)
  ['{CA7C0A97-1BD5-4D17-87AB-BF70DE5209B8}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  数组中的远程处理标头和一个请求消息的类。
    /// </summary>
    {class} function init(h1: TArray<DNHeader>; mcm: DNIMethodCallMessage): DNMethodResponse;

  end;

  /// <summary>
  ///   实现  接口，以创建一条消息，充当远程对象上的方法响应。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.MethodResponse')]
  DNMethodResponse = interface(DNObject)
  ['{7E7BF3C0-B07B-3209-A424-7BC35D76EA7D}']
  { getter & setter } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_MethodBase: DNMethodBase;
    function get_HasVarArgs: Boolean;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_OutArgCount: Int32;
    function get_OutArgs: TArray<DNObject>;
    function get_Exception: DNException;
    function get_ReturnValue: DNObject;
    function get_Properties: DNIDictionary;
    function get_LogicalCallContext: DNLogicalCallContext;

  { methods } 

    /// <summary>
    ///   从序列化设置设置方法的信息。
    /// </summary>
    procedure RootSetObjectData(info: DNSerializationInfo; ctx: DNStreamingContext);
    /// <summary>
    ///   未实现方法。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   获取作为对象，指定索引处的方法参数。
    /// </summary>
    function GetArg(argNum: Int32): DNObject;
    /// <summary>
    ///   返回指定的参数标记为  参数或  参数。
    /// </summary>
    function GetOutArg(argNum: Int32): DNObject;
    /// <summary>
    ///   返回标记为的指定参数的名称  参数或  参数。
    /// </summary>
    function GetOutArgName(index: Int32): string;
    /// <summary>
    ///   初始化数组中的远程处理应用于方法的标头的内部序列化处理。
    /// </summary>
    function HeaderHandler(h: TArray<DNHeader>): DNObject;
    /// <summary>
    ///   获取指定索引处的方法参数的名称。
    /// </summary>
    function GetArgName(index: Int32): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取对其进行方法调用的远程对象的统一资源标识符 (URI)。
    /// </summary>
    property Uri: string read get_Uri write set_Uri;
    /// <summary>
    ///   获取调用的方法的名称。
    /// </summary>
    property MethodName: string read get_MethodName;
    /// <summary>
    ///   获取对其进行方法调用的远程对象的完整类型名称。
    /// </summary>
    property TypeName: string read get_TypeName;
    /// <summary>
    ///   获取一个对象，包含的方法签名。
    /// </summary>
    property MethodSignature: DNObject read get_MethodSignature;
    /// <summary>
    ///   获取  所调用方法。
    /// </summary>
    property MethodBase: DNMethodBase read get_MethodBase;
    /// <summary>
    ///   获取一个值，该值指示该方法可以接受可变数量的参数。
    /// </summary>
    property HasVarArgs: Boolean read get_HasVarArgs;
    /// <summary>
    ///   获取传递给该方法的参数的数目。
    /// </summary>
    property ArgCount: Int32 read get_ArgCount;
    /// <summary>
    ///   获取传递给该方法的参数的数组。
    /// </summary>
    property Args: TArray<DNObject> read get_Args;
    /// <summary>
    ///   获取方法调用中的参数数目标记为  或  参数。
    /// </summary>
    property OutArgCount: Int32 read get_OutArgCount;
    /// <summary>
    ///   获取一个标记为方法调用中的参数数组  或  参数。
    /// </summary>
    property OutArgs: TArray<DNObject> read get_OutArgs;
    /// <summary>
    ///   获取方法调用期间引发的异常或  如果方法未引发异常。
    /// </summary>
    property Exception: DNException read get_Exception;
    /// <summary>
    ///   获取方法调用的返回值。
    /// </summary>
    property ReturnValue: DNObject read get_ReturnValue;
    /// <summary>
    ///   获取  表示的远程处理消息的属性集合的接口。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
    /// <summary>
    ///   获取  当前方法调用。
    /// </summary>
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
  end;

  TDNMethodResponse = class(TDNGenericImport<DNMethodResponseClass, DNMethodResponse>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNConstructionResponseClass = interface(DNMethodResponseClass)
  ['{CB78F772-B422-4C88-9523-0329D57DE42E}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  数组中的远程处理标头和一个请求消息的类。
    /// </summary>
    {class} function init(h: TArray<DNHeader>; mcm: DNIMethodCallMessage): DNConstructionResponse;

  end;

  /// <summary>
  ///   实现  接口，以创建一条消息，响应的调用来实例化远程对象。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.ConstructionResponse')]
  DNConstructionResponse = interface(DNMethodResponse)
  ['{25E8547A-6B49-3F00-B963-D45FDCEF4F11}']
  { getter & setter } 

    function get_Properties: DNIDictionary;
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_MethodBase: DNMethodBase;
    function get_HasVarArgs: Boolean;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_OutArgCount: Int32;
    function get_OutArgs: TArray<DNObject>;
    function get_Exception: DNException;
    function get_ReturnValue: DNObject;
    function get_LogicalCallContext: DNLogicalCallContext;

  { methods } 

    procedure RootSetObjectData(info: DNSerializationInfo; ctx: DNStreamingContext);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetArg(argNum: Int32): DNObject;
    function GetOutArg(argNum: Int32): DNObject;
    function GetOutArgName(index: Int32): string;
    function HeaderHandler(h: TArray<DNHeader>): DNObject;
    function GetArgName(index: Int32): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  表示的远程处理消息的属性集合的接口。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
    property Uri: string read get_Uri write set_Uri;
    property MethodName: string read get_MethodName;
    property TypeName: string read get_TypeName;
    property MethodSignature: DNObject read get_MethodSignature;
    property MethodBase: DNMethodBase read get_MethodBase;
    property HasVarArgs: Boolean read get_HasVarArgs;
    property ArgCount: Int32 read get_ArgCount;
    property Args: TArray<DNObject> read get_Args;
    property OutArgCount: Int32 read get_OutArgCount;
    property OutArgs: TArray<DNObject> read get_OutArgs;
    property Exception: DNException read get_Exception;
    property ReturnValue: DNObject read get_ReturnValue;
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
  end;

  TDNConstructionResponse = class(TDNGenericImport<DNConstructionResponseClass, DNConstructionResponse>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNRemotingSurrogateSelectorClass = interface(DNObjectClass)
  ['{65315660-60E8-4BC9-B86A-95B0F0FB6101}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRemotingSurrogateSelector;

  end;

  /// <summary>
  ///   选择可用于序列化派生的对象的远程处理代理项 。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.RemotingSurrogateSelector')]
  DNRemotingSurrogateSelector = interface(DNObject)
  ['{24EEC005-3938-3C71-821D-7F68FD850B2D}']
  { getter & setter } 

    function get_Filter: DNMessageSurrogateFilter;
    procedure set_Filter(value: DNMessageSurrogateFilter);

  { methods } 

    /// <summary>
    ///   设置对象图的根处的对象。
    /// </summary>
    procedure SetRootObject(obj: DNObject);
    /// <summary>
    ///   返回对象图的根处的对象。
    /// </summary>
    function GetRootObject: DNObject;
    /// <summary>
    ///   添加指定  到代理项选择器链。
    /// </summary>
    procedure ChainSelector(selector: DNISurrogateSelector);
    function GetSurrogate(&type: DNType; context: DNStreamingContext; out ssout: DNISurrogateSelector): DNISerializationSurrogate;
    /// <summary>
    ///   返回下一个  链中的代理项选择器。
    /// </summary>
    function GetNextSelector: DNISurrogateSelector;
    /// <summary>
    ///   将当前的代理项选择器设置为使用 SOAP 格式。
    /// </summary>
    procedure UseSoapFormat;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  委托处理的当前实例 。
    /// </summary>
    property Filter: DNMessageSurrogateFilter read get_Filter write set_Filter;
  end;

  TDNRemotingSurrogateSelector = class(TDNGenericImport<DNRemotingSurrogateSelectorClass, DNRemotingSurrogateSelector>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNReturnMessageClass = interface(DNObjectClass)
  ['{83485D95-27D5-41A3-BBF9-E3124C7855EE}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类的方法调用后返回到调用方的所有信息。
    /// </summary>
    {class} function init(ret: DNObject; outArgs: TArray<DNObject>; outArgsCount: Int32; callCtx: DNLogicalCallContext; mcm: DNIMethodCallMessage): DNReturnMessage; overload;
    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(e: DNException; mcm: DNIMethodCallMessage): DNReturnMessage; overload;

  end;

  /// <summary>
  ///   包含对远程对象在方法调用响应中返回一条消息。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.ReturnMessage')]
  DNReturnMessage = interface(DNObject)
  ['{7B3BBD13-C870-3105-B123-FFCA166CDC04}']
  { getter & setter } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_MethodBase: DNMethodBase;
    function get_HasVarArgs: Boolean;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_OutArgCount: Int32;
    function get_OutArgs: TArray<DNObject>;
    function get_Exception: DNException;
    function get_ReturnValue: DNObject;
    function get_Properties: DNIDictionary;
    function get_LogicalCallContext: DNLogicalCallContext;

  { methods } 

    /// <summary>
    ///   返回指定的参数的方法调用中传递给远程方法。
    /// </summary>
    function GetArg(argNum: Int32): DNObject;
    /// <summary>
    ///   返回作为传递的对象  或  远程方法调用期间的参数。
    /// </summary>
    function GetOutArg(argNum: Int32): DNObject;
    /// <summary>
    ///   返回指定的名称  或  参数传递给远程方法。
    /// </summary>
    function GetOutArgName(index: Int32): string;
    /// <summary>
    ///   返回指定的方法参数的名称。
    /// </summary>
    function GetArgName(index: Int32): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置在其调用远程方法的远程对象的 URI。
    /// </summary>
    property Uri: string read get_Uri write set_Uri;
    /// <summary>
    ///   获取所调用的方法的名称。
    /// </summary>
    property MethodName: string read get_MethodName;
    /// <summary>
    ///   获取在其调用远程方法的类型的名称。
    /// </summary>
    property TypeName: string read get_TypeName;
    /// <summary>
    ///   获取一个数组  包含方法签名的对象。
    /// </summary>
    property MethodSignature: DNObject read get_MethodSignature;
    /// <summary>
    ///   获取  所调用方法。
    /// </summary>
    property MethodBase: DNMethodBase read get_MethodBase;
    /// <summary>
    ///   获取一个值，该值指示所调用的方法是否接受可变数量的参数。
    /// </summary>
    property HasVarArgs: Boolean read get_HasVarArgs;
    /// <summary>
    ///   获取所调用方法的参数的数目。
    /// </summary>
    property ArgCount: Int32 read get_ArgCount;
    /// <summary>
    ///   获取指定的参数传递给对远程对象调用该方法。
    /// </summary>
    property Args: TArray<DNObject> read get_Args;
    /// <summary>
    ///   获取的数  或  上调用的方法的参数。
    /// </summary>
    property OutArgCount: Int32 read get_OutArgCount;
    /// <summary>
    ///   获取指定的对象作为传递  或  为调用的方法的参数。
    /// </summary>
    property OutArgs: TArray<DNObject> read get_OutArgs;
    /// <summary>
    ///   获取远程方法调用过程中引发的异常。
    /// </summary>
    property Exception: DNException read get_Exception;
    /// <summary>
    ///   获取被调用的方法返回的对象。
    /// </summary>
    property ReturnValue: DNObject read get_ReturnValue;
    /// <summary>
    ///   获取  中当前包含的属性 。
    /// </summary>
    property Properties: DNIDictionary read get_Properties;
    /// <summary>
    ///   获取  所调用方法。
    /// </summary>
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
  end;

  TDNReturnMessage = class(TDNGenericImport<DNReturnMessageClass, DNReturnMessage>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  /// <summary>
  ///   提供对 XML 架构定义语言 (XSD) 的 SOAP 类型访问。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd')]
  DNISoapXsd = interface(DNObject)
  ['{80031D2A-AD59-3FB4-97F3-B864D71DA86B}']
  { methods } 

    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;

  end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapAnyUriClass = interface(DNObjectClass)
  ['{F373C31F-A444-4A35-9CFE-11B830E95E29}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapAnyUri; overload;
    /// <summary>
    ///   用指定的 URI 初始化  类的新实例。
    /// </summary>
    {class} function init(value: string): DNSoapAnyUri; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapAnyUri;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri')]
  DNSoapAnyUri = interface(DNObject)
  ['{CDFA7117-B2A4-3A3F-B393-BC19D44F9749}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置一个 URI。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapAnyUri = class(TDNGenericImport<DNSoapAnyUriClass, DNSoapAnyUri>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapBase64BinaryClass = interface(DNObjectClass)
  ['{12E05E35-339A-47C6-AA72-3DC5ED36D53A}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapBase64Binary; overload;
    /// <summary>
    ///   新实例初始化  64 位数字的二进制表示的类。
    /// </summary>
    {class} function init(value: TArray<Byte>): DNSoapBase64Binary; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapBase64Binary;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary')]
  DNSoapBase64Binary = interface(DNObject)
  ['{F59D514C-F200-319F-BF3F-9E4E23B2848C}']
  { getter & setter } 

    function get_Value: TArray<Byte>;
    procedure set_Value(value: TArray<Byte>);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置一个 64 位数字的二进制表示。
    /// </summary>
    property Value: TArray<Byte> read get_Value write set_Value;
  end;

  TDNSoapBase64Binary = class(TDNGenericImport<DNSoapBase64BinaryClass, DNSoapBase64Binary>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapDateClass = interface(DNObjectClass)
  ['{077D27A4-B253-41C1-A7DC-177C1E4C6324}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapDate; overload;
    /// <summary>
    ///   新实例初始化  与指定类  对象。
    /// </summary>
    {class} function init(value: DNDateTime): DNSoapDate; overload;
    /// <summary>
    ///   新实例初始化  与指定类  对象和一个整数，指示是否  是正数或负数的值。
    /// </summary>
    {class} function init(value: DNDateTime; sign: Int32): DNSoapDate; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapDate;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate')]
  DNSoapDate = interface(DNObject)
  ['{2DECBCB7-BAC0-316D-9131-43035C5CB480}']
  { getter & setter } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);
    function get_Sign: Int32;
    procedure set_Sign(value: Int32);

  { methods } 

    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置的日期和时间的当前实例。
    /// </summary>
    property Value: DNDateTime read get_Value write set_Value;
    /// <summary>
    ///   获取或设置的日期和时间的当前实例是正数或负数。
    /// </summary>
    property Sign: Int32 read get_Sign write set_Sign;
  end;

  TDNSoapDate = class(TDNGenericImport<DNSoapDateClass, DNSoapDate>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapDateTimeClass = interface(DNObjectClass)
  ['{6265909E-13E9-4EFB-A370-779B48F81EEC}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNSoapDateTime;

  { static methods } 

    /// <summary>
    ///   返回指定  对象作为 。
    /// </summary>
    {class} function ToString(value: DNDateTime): string; overload;
    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNDateTime;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   提供用于序列化和反序列化的静态方法  为一个字符串，将格式化为 XSD 。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime')]
  DNSoapDateTime = interface(DNObject)
  ['{48AD62E8-BD40-37F4-8FD7-F7A17478A8E6}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string; overload;

  end;

  TDNSoapDateTime = class(TDNGenericImport<DNSoapDateTimeClass, DNSoapDateTime>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapDayClass = interface(DNObjectClass)
  ['{6864CE6D-3907-48B2-A6A4-A2947F58B95A}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapDay; overload;
    /// <summary>
    ///   新实例初始化  与指定类  对象。
    /// </summary>
    {class} function init(value: DNDateTime): DNSoapDay; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapDay;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay')]
  DNSoapDay = interface(DNObject)
  ['{C9F0A842-3CE1-338F-A1D4-6D7BB397BDAA}']
  { getter & setter } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);

  { methods } 

    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置的日期和时间的当前实例。
    /// </summary>
    property Value: DNDateTime read get_Value write set_Value;
  end;

  TDNSoapDay = class(TDNGenericImport<DNSoapDayClass, DNSoapDay>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapDurationClass = interface(DNObjectClass)
  ['{739F7199-1B85-45F0-8F02-5440E50B0476}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNSoapDuration;

  { static methods } 

    /// <summary>
    ///   返回指定  对象作为 。
    /// </summary>
    {class} function ToString(timeSpan: DNTimeSpan): string; overload;
    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNTimeSpan;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   提供用于序列化和反序列化的静态方法  为一个字符串，将格式化为 XSD 。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration')]
  DNSoapDuration = interface(DNObject)
  ['{DE47D9CF-0107-3D66-93E9-A8ACB06B4583}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string; overload;

  end;

  TDNSoapDuration = class(TDNGenericImport<DNSoapDurationClass, DNSoapDuration>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapEntitiesClass = interface(DNObjectClass)
  ['{3F35895D-857B-4FCD-AFBE-DD226163C52F}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapEntities; overload;
    /// <summary>
    ///   新实例初始化  类与 XML  属性。
    /// </summary>
    {class} function init(value: string): DNSoapEntities; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapEntities;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities')]
  DNSoapEntities = interface(DNObject)
  ['{9A3A64F4-8BA5-3DCF-880C-8D3EE06C5538}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML  属性。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapEntities = class(TDNGenericImport<DNSoapEntitiesClass, DNSoapEntities>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapEntityClass = interface(DNObjectClass)
  ['{0BC97F00-BF75-479F-882A-08BBE583B369}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapEntity; overload;
    /// <summary>
    ///   新实例初始化  类与 XML  属性。
    /// </summary>
    {class} function init(value: string): DNSoapEntity; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapEntity;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity')]
  DNSoapEntity = interface(DNObject)
  ['{F00CA7A7-4B8D-3F2F-A5F2-CE4A4478B39C}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML  属性。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapEntity = class(TDNGenericImport<DNSoapEntityClass, DNSoapEntity>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapHexBinaryClass = interface(DNObjectClass)
  ['{39C542F2-3D15-4A94-A77E-AAFE427020B6}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapHexBinary; overload;
    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(value: TArray<Byte>): DNSoapHexBinary; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapHexBinary;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary')]
  DNSoapHexBinary = interface(DNObject)
  ['{8C1425C9-A7D3-35CD-8248-928CA52AD49B}']
  { getter & setter } 

    function get_Value: TArray<Byte>;
    procedure set_Value(value: TArray<Byte>);

  { methods } 

    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置数字的十六进制表示形式。
    /// </summary>
    property Value: TArray<Byte> read get_Value write set_Value;
  end;

  TDNSoapHexBinary = class(TDNGenericImport<DNSoapHexBinaryClass, DNSoapHexBinary>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapIdClass = interface(DNObjectClass)
  ['{DD92AE13-CFBC-49AD-BC8C-C67DA46FCC1D}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapId; overload;
    /// <summary>
    ///   新实例初始化  类与 XML  属性。
    /// </summary>
    {class} function init(value: string): DNSoapId; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapId;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId')]
  DNSoapId = interface(DNObject)
  ['{FA0B54D5-F221-3648-A20C-F67A96F4A207}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML  属性。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapId = class(TDNGenericImport<DNSoapIdClass, DNSoapId>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapIdrefClass = interface(DNObjectClass)
  ['{CECCA49C-ACD0-41B8-B52B-3A1465462D30}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapIdref; overload;
    /// <summary>
    ///   新实例初始化  类与 XML  属性。
    /// </summary>
    {class} function init(value: string): DNSoapIdref; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapIdref;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref')]
  DNSoapIdref = interface(DNObject)
  ['{433CA926-9887-3541-89CC-5D74D0259144}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML  属性。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapIdref = class(TDNGenericImport<DNSoapIdrefClass, DNSoapIdref>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapIdrefsClass = interface(DNObjectClass)
  ['{44012D6F-2891-427C-AD20-DAFA977B95E6}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapIdrefs; overload;
    /// <summary>
    ///   新实例初始化  类与 XML  属性。
    /// </summary>
    {class} function init(value: string): DNSoapIdrefs; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapIdrefs;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs')]
  DNSoapIdrefs = interface(DNObject)
  ['{2763BE6B-F8CF-39D9-A2E8-9E9815C0815E}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML  属性。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapIdrefs = class(TDNGenericImport<DNSoapIdrefsClass, DNSoapIdrefs>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapIntegerClass = interface(DNObjectClass)
  ['{1B39B4DD-800F-4AA4-8CE5-1BFD7FEE9D7B}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapInteger; overload;
    /// <summary>
    ///   新实例初始化  类  值。
    /// </summary>
    {class} function init(value: DNDecimal): DNSoapInteger; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapInteger;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger')]
  DNSoapInteger = interface(DNObject)
  ['{09A60795-31C0-3A79-9250-8D93C74FE540}']
  { getter & setter } 

    function get_Value: DNDecimal;
    procedure set_Value(value: DNDecimal);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置当前实例的数值。
    /// </summary>
    property Value: DNDecimal read get_Value write set_Value;
  end;

  TDNSoapInteger = class(TDNGenericImport<DNSoapIntegerClass, DNSoapInteger>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapLanguageClass = interface(DNObjectClass)
  ['{B5AD8A50-0BFF-4B48-9C61-61C4ECE40193}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapLanguage; overload;
    /// <summary>
    ///   新实例初始化  类使用的语言标识符值  属性。
    /// </summary>
    {class} function init(value: string): DNSoapLanguage; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapLanguage;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage')]
  DNSoapLanguage = interface(DNObject)
  ['{84F70B6C-D59E-394A-B879-FFCC30DDCAA2}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置的语言标识符  属性。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapLanguage = class(TDNGenericImport<DNSoapLanguageClass, DNSoapLanguage>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapMonthClass = interface(DNObjectClass)
  ['{1A834B6A-1838-4597-9AC8-DD85952143C9}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapMonth; overload;
    /// <summary>
    ///   新实例初始化  与指定类  对象。
    /// </summary>
    {class} function init(value: DNDateTime): DNSoapMonth; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapMonth;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth')]
  DNSoapMonth = interface(DNObject)
  ['{CAEC7D4F-0B02-3579-943F-821738EE78CC}']
  { getter & setter } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);

  { methods } 

    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置的日期和时间的当前实例。
    /// </summary>
    property Value: DNDateTime read get_Value write set_Value;
  end;

  TDNSoapMonth = class(TDNGenericImport<DNSoapMonthClass, DNSoapMonth>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapMonthDayClass = interface(DNObjectClass)
  ['{537EEDEC-431E-416B-8289-6117B96A7A0A}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapMonthDay; overload;
    /// <summary>
    ///   新实例初始化  与指定类  对象。
    /// </summary>
    {class} function init(value: DNDateTime): DNSoapMonthDay; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapMonthDay;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay')]
  DNSoapMonthDay = interface(DNObject)
  ['{463AE13F-C7E5-357E-A41C-DF8762FFF85C}']
  { getter & setter } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);

  { methods } 

    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置的日期和时间的当前实例。
    /// </summary>
    property Value: DNDateTime read get_Value write set_Value;
  end;

  TDNSoapMonthDay = class(TDNGenericImport<DNSoapMonthDayClass, DNSoapMonthDay>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNameClass = interface(DNObjectClass)
  ['{37171385-84FE-492D-BA9A-397963853EE2}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapName; overload;
    /// <summary>
    ///   新实例初始化  类与 XML  类型。
    /// </summary>
    {class} function init(value: string): DNSoapName; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapName;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName')]
  DNSoapName = interface(DNObject)
  ['{4E515531-7A71-3CDD-8078-0A01C85C8F9D}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML  类型。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapName = class(TDNGenericImport<DNSoapNameClass, DNSoapName>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNcNameClass = interface(DNObjectClass)
  ['{31A285B4-B481-4287-A41E-83DAF0DA611A}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapNcName; overload;
    /// <summary>
    ///   新实例初始化  类与 XML  类型。
    /// </summary>
    {class} function init(value: string): DNSoapNcName; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapNcName;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName')]
  DNSoapNcName = interface(DNObject)
  ['{D13B741D-051F-322F-93AA-1367A3C8AAFB}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML  类型。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapNcName = class(TDNGenericImport<DNSoapNcNameClass, DNSoapNcName>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNegativeIntegerClass = interface(DNObjectClass)
  ['{5F6AF106-8EEC-4BC8-B88C-167E787A6E98}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapNegativeInteger; overload;
    /// <summary>
    ///   新实例初始化  类  值。
    /// </summary>
    {class} function init(value: DNDecimal): DNSoapNegativeInteger; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapNegativeInteger;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger')]
  DNSoapNegativeInteger = interface(DNObject)
  ['{C41D0B30-A518-3093-A18F-364AF9E71EB7}']
  { getter & setter } 

    function get_Value: DNDecimal;
    procedure set_Value(value: DNDecimal);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置当前实例的数值。
    /// </summary>
    property Value: DNDecimal read get_Value write set_Value;
  end;

  TDNSoapNegativeInteger = class(TDNGenericImport<DNSoapNegativeIntegerClass, DNSoapNegativeInteger>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNmtokenClass = interface(DNObjectClass)
  ['{956567FB-E1DB-43EB-B314-820ABFDF9D1E}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapNmtoken; overload;
    /// <summary>
    ///   新实例初始化  类与 XML  属性。
    /// </summary>
    {class} function init(value: string): DNSoapNmtoken; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapNmtoken;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken')]
  DNSoapNmtoken = interface(DNObject)
  ['{C498F2D9-A77C-3D4B-A1A5-12CC7B99115D}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML  属性。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapNmtoken = class(TDNGenericImport<DNSoapNmtokenClass, DNSoapNmtoken>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNmtokensClass = interface(DNObjectClass)
  ['{D0720F76-1E0A-406E-977D-E8A3DF328802}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapNmtokens; overload;
    /// <summary>
    ///   新实例初始化  类与 XML  属性。
    /// </summary>
    {class} function init(value: string): DNSoapNmtokens; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapNmtokens;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  属性。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens')]
  DNSoapNmtokens = interface(DNObject)
  ['{14BE6B21-C682-3A3A-8B24-FEE75B4FF8C5}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML  属性。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapNmtokens = class(TDNGenericImport<DNSoapNmtokensClass, DNSoapNmtokens>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNonNegativeIntegerClass = interface(DNObjectClass)
  ['{8E461C2F-3E08-4DB8-BDDE-69617D517ABB}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapNonNegativeInteger; overload;
    /// <summary>
    ///   新实例初始化  类  值。
    /// </summary>
    {class} function init(value: DNDecimal): DNSoapNonNegativeInteger; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapNonNegativeInteger;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger')]
  DNSoapNonNegativeInteger = interface(DNObject)
  ['{6850404F-D7FB-32BD-8328-C94F66E8C1C7}']
  { getter & setter } 

    function get_Value: DNDecimal;
    procedure set_Value(value: DNDecimal);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置当前实例的数值。
    /// </summary>
    property Value: DNDecimal read get_Value write set_Value;
  end;

  TDNSoapNonNegativeInteger = class(TDNGenericImport<DNSoapNonNegativeIntegerClass, DNSoapNonNegativeInteger>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNonPositiveIntegerClass = interface(DNObjectClass)
  ['{A217299B-3F82-4E88-BE97-1A5C4461D013}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapNonPositiveInteger; overload;
    /// <summary>
    ///   新实例初始化  类  值。
    /// </summary>
    {class} function init(value: DNDecimal): DNSoapNonPositiveInteger; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapNonPositiveInteger;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger')]
  DNSoapNonPositiveInteger = interface(DNObject)
  ['{2BB6C5E0-C2B9-3608-8868-21CFD6DDB91E}']
  { getter & setter } 

    function get_Value: DNDecimal;
    procedure set_Value(value: DNDecimal);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置当前实例的数值。
    /// </summary>
    property Value: DNDecimal read get_Value write set_Value;
  end;

  TDNSoapNonPositiveInteger = class(TDNGenericImport<DNSoapNonPositiveIntegerClass, DNSoapNonPositiveInteger>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNormalizedStringClass = interface(DNObjectClass)
  ['{8ABA6CBC-0D6B-4C0F-9BFE-50702EB01E43}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapNormalizedString; overload;
    /// <summary>
    ///   新实例初始化  类正常化的字符串。
    /// </summary>
    {class} function init(value: string): DNSoapNormalizedString; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapNormalizedString;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString')]
  DNSoapNormalizedString = interface(DNObject)
  ['{0E71F9BD-C109-3352-BD60-14F96D56B6F3}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置正常化的字符串。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapNormalizedString = class(TDNGenericImport<DNSoapNormalizedStringClass, DNSoapNormalizedString>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNotationClass = interface(DNObjectClass)
  ['{8954ACDF-8943-4C92-8210-9B885215ED51}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapNotation; overload;
    /// <summary>
    ///   新实例初始化  类与 XML  属性。
    /// </summary>
    {class} function init(value: string): DNSoapNotation; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapNotation;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  属性类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation')]
  DNSoapNotation = interface(DNObject)
  ['{B54E38F8-17FF-3D0A-9FF3-5E662DE2055F}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML  属性。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapNotation = class(TDNGenericImport<DNSoapNotationClass, DNSoapNotation>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapPositiveIntegerClass = interface(DNObjectClass)
  ['{E6426513-D946-437E-932F-540662847817}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapPositiveInteger; overload;
    /// <summary>
    ///   新实例初始化  类  值。
    /// </summary>
    {class} function init(value: DNDecimal): DNSoapPositiveInteger; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapPositiveInteger;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger')]
  DNSoapPositiveInteger = interface(DNObject)
  ['{7B769B29-35F0-3BDC-AAE9-E99937F6CDEC}']
  { getter & setter } 

    function get_Value: DNDecimal;
    procedure set_Value(value: DNDecimal);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置当前实例的数值。
    /// </summary>
    property Value: DNDecimal read get_Value write set_Value;
  end;

  TDNSoapPositiveInteger = class(TDNGenericImport<DNSoapPositiveIntegerClass, DNSoapPositiveInteger>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapQNameClass = interface(DNObjectClass)
  ['{49EE1F88-32C6-4EC3-BA4E-78590495D6FB}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapQName; overload;
    /// <summary>
    ///   新实例初始化  类，具有限定名的本地部分。
    /// </summary>
    {class} function init(value: string): DNSoapQName; overload;
    /// <summary>
    ///   新实例初始化  类使用的命名空间别名和限定名的本地部分。
    /// </summary>
    {class} function init(key: string; name: string): DNSoapQName; overload;
    /// <summary>
    ///   新实例初始化  类的命名空间别名，限定名的本地部分以及由该别名引用的命名空间。
    /// </summary>
    {class} function init(key: string; name: string; namespaceValue: string): DNSoapQName; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapQName;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName')]
  DNSoapQName = interface(DNObject)
  ['{D8A4F3EB-E7EC-3620-831A-B052A67C9944}']
  { getter & setter } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Key: string;
    procedure set_Key(value: string);

  { methods } 

    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    /// <summary>
    ///   返回的限定的名称为 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置限定名的名称部分。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置被引用的命名空间 。
    /// </summary>
    property Namespace: string read get_Namespace write set_Namespace;
    /// <summary>
    ///   获取或设置限定名的命名空间别名。
    /// </summary>
    property Key: string read get_Key write set_Key;
  end;

  TDNSoapQName = class(TDNGenericImport<DNSoapQNameClass, DNSoapQName>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapTimeClass = interface(DNObjectClass)
  ['{40AEDBA0-03CF-48CB-B858-935A2385FF9C}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapTime; overload;
    /// <summary>
    ///   新实例初始化  与指定类  对象。
    /// </summary>
    {class} function init(value: DNDateTime): DNSoapTime; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapTime;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime')]
  DNSoapTime = interface(DNObject)
  ['{D049DC2B-82C3-3350-A1CC-BF69FEE3825E}']
  { getter & setter } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);

  { methods } 

    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置的日期和时间的当前实例。
    /// </summary>
    property Value: DNDateTime read get_Value write set_Value;
  end;

  TDNSoapTime = class(TDNGenericImport<DNSoapTimeClass, DNSoapTime>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapTokenClass = interface(DNObjectClass)
  ['{1D6D8E34-6A22-4098-A51D-3CA63849DAAD}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapToken; overload;
    /// <summary>
    ///   新实例初始化  类与 XML 。
    /// </summary>
    {class} function init(value: string): DNSoapToken; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapToken;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XML  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken')]
  DNSoapToken = interface(DNObject)
  ['{777F668E-3272-39CD-A8B5-860935A35181}']
  { getter & setter } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置 XML 。
    /// </summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSoapToken = class(TDNGenericImport<DNSoapTokenClass, DNSoapToken>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapYearClass = interface(DNObjectClass)
  ['{6450521D-1D3D-44B0-BC85-1BE5329C5803}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapYear; overload;
    /// <summary>
    ///   新实例初始化  与指定类  对象。
    /// </summary>
    {class} function init(value: DNDateTime): DNSoapYear; overload;
    /// <summary>
    ///   新实例初始化  与指定类  对象和一个整数，指示是否  是正数或负数的值。
    /// </summary>
    {class} function init(value: DNDateTime; sign: Int32): DNSoapYear; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapYear;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear')]
  DNSoapYear = interface(DNObject)
  ['{75999EBA-0679-3D43-BDC4-02E4D637F1B1}']
  { getter & setter } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);
    function get_Sign: Int32;
    procedure set_Sign(value: Int32);

  { methods } 

    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置的日期和时间的当前实例。
    /// </summary>
    property Value: DNDateTime read get_Value write set_Value;
    /// <summary>
    ///   获取或设置的日期和时间的当前实例是正数或负数。
    /// </summary>
    property Sign: Int32 read get_Sign write set_Sign;
  end;

  TDNSoapYear = class(TDNGenericImport<DNSoapYearClass, DNSoapYear>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapYearMonthClass = interface(DNObjectClass)
  ['{D3C627E9-0539-4784-A16E-693D5C7C4FAF}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapYearMonth; overload;
    /// <summary>
    ///   新实例初始化  与指定类  对象。
    /// </summary>
    {class} function init(value: DNDateTime): DNSoapYearMonth; overload;
    /// <summary>
    ///   新实例初始化  与指定类  对象和一个整数，指示是否  是正数或负数的值。
    /// </summary>
    {class} function init(value: DNDateTime; sign: Int32): DNSoapYearMonth; overload;

  { static methods } 

    /// <summary>
    ///   将指定  到  对象。
    /// </summary>
    {class} function Parse(value: string): DNSoapYearMonth;

  { static propertys } 

    /// <summary>
    ///   获取当前 SOAP 类型的 XML 架构定义语言 (XSD)。
    /// </summary>
    {class} property XsdType: string read get_XsdType;
  end;

  /// <summary>
  ///   包装 XSD  类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth')]
  DNSoapYearMonth = interface(DNObject)
  ['{A7136BDF-B141-3913-9D1C-9BC5AFF21470}']
  { getter & setter } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);
    function get_Sign: Int32;
    procedure set_Sign(value: Int32);

  { methods } 

    /// <summary>
    ///   返回当前 SOAP 类型或 XML 架构定义语言 (XSD)。
    /// </summary>
    function GetXsdType: string;
    /// <summary>
    ///   返回  作为 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置的日期和时间的当前实例。
    /// </summary>
    property Value: DNDateTime read get_Value write set_Value;
    /// <summary>
    ///   获取或设置的日期和时间的当前实例是正数或负数。
    /// </summary>
    property Sign: Int32 read get_Sign write set_Sign;
  end;

  TDNSoapYearMonth = class(TDNGenericImport<DNSoapYearMonthClass, DNSoapYearMonth>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNObjRefClass = interface(DNObjectClass)
  ['{3D434B17-A398-4A60-8A78-903028C0D15D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类来引用指定  指定 。
    /// </summary>
    {class} function init(o: DNMarshalByRefObject; requestedType: DNType): DNObjRef; overload;
    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNObjRef; overload;

  end;

  /// <summary>
  ///   存储生成代理以与远程对象通信所需的所有相关信息。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.ObjRef')]
  DNObjRef = interface(DNObject)
  ['{21F5A790-53EA-3D73-86C3-A5BA6CF65FE9}']
  { getter & setter } 

    function get_URI: string;
    procedure set_URI(value: string);
    function get_TypeInfo: DNIRemotingTypeInfo;
    procedure set_TypeInfo(value: DNIRemotingTypeInfo);
    function get_EnvoyInfo: DNIEnvoyInfo;
    procedure set_EnvoyInfo(value: DNIEnvoyInfo);
    function get_ChannelInfo: DNIChannelInfo;
    procedure set_ChannelInfo(value: DNIChannelInfo);

  { methods } 

    /// <summary>
    ///   返回对远程对象的引用  描述。
    /// </summary>
    function GetRealObject(context: DNStreamingContext): DNObject;
    /// <summary>
    ///   返回一个布尔值，该值指示是否当前  实例引用位于当前进程中的对象。
    /// </summary>
    function IsFromThisProcess: Boolean;
    /// <summary>
    ///   返回一个布尔值，该值指示是否当前  实例引用的对象位于当前 。
    /// </summary>
    function IsFromThisAppDomain: Boolean;
    /// <summary>
    ///   填充指定  所需数据来序列化当前  实例。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置特定对象实例的 URI。
    /// </summary>
    property URI: string read get_URI write set_URI;
    /// <summary>
    ///   获取或设置  对象，  描述。
    /// </summary>
    property TypeInfo: DNIRemotingTypeInfo read get_TypeInfo write set_TypeInfo;
    /// <summary>
    ///   获取或设置  的 。
    /// </summary>
    property EnvoyInfo: DNIEnvoyInfo read get_EnvoyInfo write set_EnvoyInfo;
    /// <summary>
    ///   获取或设置  的 。
    /// </summary>
    property ChannelInfo: DNIChannelInfo read get_ChannelInfo write set_ChannelInfo;
  end;

  TDNObjRef = class(TDNGenericImport<DNObjRefClass, DNObjRef>) end;

  //-------------namespace: System.Runtime.Remoting.Proxies----------------
  DNRealProxyClass = interface(DNObjectClass)
  ['{6EE1E3D2-6F5A-4DD2-AE9C-D8F9B2616AB3}']
  { static methods } 

    /// <summary>
    ///   为指定代理服务器设置的存根 （stub） 数据。
    /// </summary>
    {class} procedure SetStubData(rp: DNRealProxy; stubData: DNObject);
    /// <summary>
    ///   检索存储为指定的代理的存根 （stub） 数据。
    /// </summary>
    {class} function GetStubData(rp: DNRealProxy): DNObject;

  end;

  /// <summary>
  ///   提供用于代理服务器的基本功能。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Proxies.RealProxy')]
  DNRealProxy = interface(DNObject)
  ['{531D00A5-2CFF-30D7-8245-97E18CD4D037}']
  { methods } 

    /// <summary>
    ///   请求对当前代理实例所表示的对象的非托管引用。
    /// </summary>
    function GetCOMIUnknown(fIsMarshalled: Boolean): IntPtr;
    /// <summary>
    ///   初始化该对象的新实例  的远程对象的当前实例  表示具有指定 。
    /// </summary>
    function InitializeServerObject(ctorMsg: DNIConstructionCallMessage): DNIConstructionReturnMessage;
    /// <summary>
    ///   创建  对于指定的对象类型，并将其注册为客户端激活对象的远程处理基础结构。
    /// </summary>
    function CreateObjRef(requestedType: DNType): DNObjRef;
    /// <summary>
    ///   将透明代理的当前实例所表示的对象添加  到指定 。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   将存储的当前实例所表示的对象的非托管的代理。
    /// </summary>
    procedure SetCOMIUnknown(i: IntPtr);
    function SupportsInterface(out iid: DNGuid): IntPtr;
    /// <summary>
    ///   返回的当前实例的透明代理 。
    /// </summary>
    function GetTransparentProxy: DNObject;
    /// <summary>
    ///   返回  的对象的当前实例的  表示。
    /// </summary>
    function GetProxiedType: DNType;
    /// <summary>
    ///   当在派生类中重写时，将调用指定的方法在提供  由当前实例表示对远程对象。
    /// </summary>
    function Invoke(msg: DNIMessage): DNIMessage;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRealProxy = class(TDNGenericImport<DNRealProxyClass, DNRealProxy>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNRemotingConfigurationClass = interface(DNObjectClass)
  ['{0C79DD68-83AC-4554-9967-441AB05DA213}']
  { static getter & setter } 

    {class} function get_ApplicationName: string;
    {class} procedure set_ApplicationName(value: string);
    {class} function get_ApplicationId: string;
    {class} function get_ProcessId: string;
    {class} function get_CustomErrorsMode: DNCustomErrorsModes;
    {class} procedure set_CustomErrorsMode(value: DNCustomErrorsModes);

  { static methods } 

    /// <summary>
    ///   将对象注册  在服务端作为已知类型，使用给定的参数初始化的新实例来 。
    /// </summary>
    {class} procedure RegisterWellKnownServiceType(&type: DNType; objectUri: string; mode: DNWellKnownObjectMode); overload;
    /// <summary>
    ///   将对象注册  记录在提供  在服务端作为已知类型。
    /// </summary>
    {class} procedure RegisterWellKnownServiceType(entry: DNWellKnownServiceTypeEntry); overload;
    /// <summary>
    ///   读取配置文件并配置远程处理基础结构。
    ///               已过时。
    ///               请改用 。
    /// </summary>
    {class} procedure Configure(filename: string); overload;
    /// <summary>
    ///   读取配置文件并配置远程处理基础结构。
    /// </summary>
    {class} procedure Configure(filename: string; ensureSecurity: Boolean); overload;
    /// <summary>
    ///   指示此应用程序域中的服务器信道是向本地或远程调用方返回经过筛选的异常信息，还是返回完整的异常信息。
    /// </summary>
    {class} function CustomErrorsEnabled(isLocalRequest: Boolean): Boolean;
    /// <summary>
    ///   将在服务端上指定的对象类型注册为可根据请求从客户端激活的类型。
    /// </summary>
    {class} procedure RegisterActivatedServiceType(&type: DNType); overload;
    /// <summary>
    ///   一种对象类型记录在提供的寄存器  在服务端作为一个可以根据请求从客户端激活。
    /// </summary>
    {class} procedure RegisterActivatedServiceType(entry: DNActivatedServiceTypeEntry); overload;
    /// <summary>
    ///   将对象注册  上为的类型，可以在服务器上激活客户端，使用给定的参数初始化的新实例  类。
    /// </summary>
    {class} procedure RegisterActivatedClientType(&type: DNType; appUrl: string); overload;
    /// <summary>
    ///   将对象注册  记录在提供  为的类型，可以在服务器上激活的客户端上。
    /// </summary>
    {class} procedure RegisterActivatedClientType(entry: DNActivatedClientTypeEntry); overload;
    /// <summary>
    ///   将对象注册  作为可激活的服务器的已知类型在客户端上, 使用给定的参数初始化的新实例来  类。
    /// </summary>
    {class} procedure RegisterWellKnownClientType(&type: DNType; objectUrl: string); overload;
    /// <summary>
    ///   将对象注册  记录在提供  作为已知类型的可激活的服务器上的客户端上。
    /// </summary>
    {class} procedure RegisterWellKnownClientType(entry: DNWellKnownClientTypeEntry); overload;
    /// <summary>
    ///   检索在可以根据请求从客户端激活的服务端上注册的对象类型的数组。
    /// </summary>
    {class} function GetRegisteredActivatedServiceTypes: TArray<DNActivatedServiceTypeEntry>;
    /// <summary>
    ///   检索在服务端上注册为已知类型的对象类型的数组。
    /// </summary>
    {class} function GetRegisteredWellKnownServiceTypes: TArray<DNWellKnownServiceTypeEntry>;
    /// <summary>
    ///   检索在客户端上注册为将远程激活的类型的对象类型的数组。
    /// </summary>
    {class} function GetRegisteredActivatedClientTypes: TArray<DNActivatedClientTypeEntry>;
    /// <summary>
    ///   检索在客户端上注册为已知类型的对象类型的数组。
    /// </summary>
    {class} function GetRegisteredWellKnownClientTypes: TArray<DNWellKnownClientTypeEntry>;
    /// <summary>
    ///   检查是否指定的对象  注册为远程激活的客户端类型。
    /// </summary>
    {class} function IsRemotelyActivatedClientType(svrType: DNType): DNActivatedClientTypeEntry; overload;
    /// <summary>
    ///   检查是否为远程激活的客户端类型注册由其类型名称和程序集名称指定的对象。
    /// </summary>
    {class} function IsRemotelyActivatedClientType(typeName: string; assemblyName: string): DNActivatedClientTypeEntry; overload;
    /// <summary>
    ///   检查是否指定的对象  注册为人所熟知的客户端类型。
    /// </summary>
    {class} function IsWellKnownClientType(svrType: DNType): DNWellKnownClientTypeEntry; overload;
    /// <summary>
    ///   检查是否为人所熟知的客户端类型注册由其类型名称和程序集名称指定的对象。
    /// </summary>
    {class} function IsWellKnownClientType(typeName: string; assemblyName: string): DNWellKnownClientTypeEntry; overload;
    /// <summary>
    ///   返回一个布尔值，该值指示是否指定  允许由客户端激活。
    /// </summary>
    {class} function IsActivationAllowed(svrType: DNType): Boolean;

  { static propertys } 

    /// <summary>
    ///   获取或设置远程处理应用程序的名称。
    /// </summary>
    {class} property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    /// <summary>
    ///   获取当前正在执行的应用程序的 ID。
    /// </summary>
    {class} property ApplicationId: string read get_ApplicationId;
    /// <summary>
    ///   获取当前正在执行的进程的 ID。
    /// </summary>
    {class} property ProcessId: string read get_ProcessId;
    /// <summary>
    ///   获取或设置值，该值指示如何自定义错误处理。
    /// </summary>
    {class} property CustomErrorsMode: DNCustomErrorsModes read get_CustomErrorsMode write set_CustomErrorsMode;
  end;

  /// <summary>
  ///   提供用于配置远程处理基础结构的各种静态方法。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.RemotingConfiguration')]
  DNRemotingConfiguration = interface(DNObject)
  ['{3DB6F309-9DAB-36EC-8036-D901172C994C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRemotingConfiguration = class(TDNGenericImport<DNRemotingConfigurationClass, DNRemotingConfiguration>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNRemotingServicesClass = interface(DNObjectClass)
  ['{883B083F-D4D7-41E6-91A2-6C4A11455FBE}']
  { static methods } 

    /// <summary>
    ///   返回一个布尔值，该值指示是否由给定代理表示的对象包含在调用当前方法的对象之外的其他上下文。
    /// </summary>
    {class} function IsObjectOutOfContext(tp: DNObject): Boolean;
    /// <summary>
    ///   返回一个布尔值，该值指示是否在调用当前方法的对象的不同的应用程序域中包含由给定的透明代理指定的对象。
    /// </summary>
    {class} function IsObjectOutOfAppDomain(tp: DNObject): Boolean;
    /// <summary>
    ///   检索一条消息的会话 ID。
    /// </summary>
    {class} function GetSessionIdForMethodMessage(msg: DNIMethodMessage): string;
    /// <summary>
    ///   返回控制指定的对象的生存期策略的生存期服务对象。
    /// </summary>
    {class} function GetLifetimeService(obj: DNMarshalByRefObject): DNObject;
    /// <summary>
    ///   检索指定对象的 URI。
    /// </summary>
    {class} function GetObjectUri(obj: DNMarshalByRefObject): string;
    /// <summary>
    ///   设置后续调用的 URI  方法。
    /// </summary>
    {class} procedure SetObjectUriForMarshal(obj: DNMarshalByRefObject; uri: string);
    /// <summary>
    ///   采用 , 、 注册其远程处理基础结构，并将其转换为的一个实例  类。
    /// </summary>
    {class} function Marshal(Obj: DNMarshalByRefObject): DNObjRef; overload;
    /// <summary>
    ///   将转换给定到的实例用指定的 URI 的类。
    /// </summary>
    {class} function Marshal(Obj: DNMarshalByRefObject; URI: string): DNObjRef; overload;
    /// <summary>
    ///   采用  并将其转换到的实例  类具有指定的 URI，并提供 。
    /// </summary>
    {class} function Marshal(Obj: DNMarshalByRefObject; ObjURI: string; RequestedType: DNType): DNObjRef; overload;
    /// <summary>
    ///   将指定的封送按引用对象序列化到提供 。
    /// </summary>
    {class} procedure GetObjectData(obj: DNObject; info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   采用  和创建移出一个代理对象。
    /// </summary>
    {class} function Unmarshal(objectRef: DNObjRef): DNObject; overload;
    /// <summary>
    ///   采用  并创建代理对象外，改进为服务器上的类型。
    /// </summary>
    {class} function Unmarshal(objectRef: DNObjRef; fRefine: Boolean): DNObject; overload;
    /// <summary>
    ///   在给定的已知对象的代理创建  和 URL。
    /// </summary>
    {class} function Connect(classToProxy: DNType; url: string): DNObject; overload;
    /// <summary>
    ///   在给定的已知对象的代理创建 , ，URL 和通道特定的数据。
    /// </summary>
    {class} function Connect(classToProxy: DNType; url: string; data: DNObject): DNObject; overload;
    /// <summary>
    ///   停止再接收任何消息通过已注册的远程处理信道中的对象。
    /// </summary>
    {class} function Disconnect(obj: DNMarshalByRefObject): Boolean;
    /// <summary>
    ///   返回由指定的代理的远程对象发送消息时应使用的 envoy 接收器链。
    /// </summary>
    {class} function GetEnvoyChainForProxy(obj: DNMarshalByRefObject): DNIMessageSink;
    /// <summary>
    ///   返回  ，表示从指定的代理的远程对象。
    /// </summary>
    {class} function GetObjRefForProxy(obj: DNMarshalByRefObject): DNObjRef;
    /// <summary>
    ///   返回方法库从给定 。
    /// </summary>
    {class} function GetMethodBaseFromMethodMessage(msg: DNIMethodMessage): DNMethodBase;
    /// <summary>
    ///   返回一个布尔值，该值指示是否重载中给定的消息的方法。
    /// </summary>
    {class} function IsMethodOverloaded(msg: DNIMethodMessage): Boolean;
    /// <summary>
    ///   返回一个布尔值，该值指示给定的消息中指定客户端调用该方法是否正在等待服务器以完成才会继续执行处理的方法。
    /// </summary>
    {class} function IsOneWay(method: DNMethodBase): Boolean;
    /// <summary>
    ///   返回  ，该对象具有指定的 URI。
    /// </summary>
    {class} function GetServerTypeForUri(URI: string): DNType;
    /// <summary>
    ///   连接到指定的远程对象，并执行所提供  在其上。
    /// </summary>
    {class} function ExecuteMessage(target: DNMarshalByRefObject; reqMsg: DNIMethodCallMessage): DNIMethodReturnMessage;
    /// <summary>
    ///   记录此阶段与外部调试器的远程处理交换。
    /// </summary>
    {class} procedure LogRemotingStage(stage: Int32);
    /// <summary>
    ///   返回一个布尔值，该值指示给定的对象是透明的代理服务器或真实对象。
    /// </summary>
    {class} function IsTransparentProxy(proxy: DNObject): Boolean;
    /// <summary>
    ///   返回指定的透明代理后面的真实代理。
    /// </summary>
    {class} function GetRealProxy(proxy: DNObject): DNRealProxy;

  end;

  /// <summary>
  ///   使用和发布远程对象及代理提供若干方法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.RemotingServices')]
  DNRemotingServices = interface(DNObject)
  ['{8DF4C38A-8492-3C47-8332-D9D04FAF3C59}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRemotingServices = class(TDNGenericImport<DNRemotingServicesClass, DNRemotingServices>) end;

  //-------------namespace: System.Runtime.Remoting.Services----------------
  DNEnterpriseServicesHelperClass = interface(DNObjectClass)
  ['{E2176C1E-BD7E-4589-BB14-00091F16342F}']
  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNEnterpriseServicesHelper;

  { static methods } 

    /// <summary>
    ///   包装指定  COM 接口与 运行时可调用包装 (RCW)。
    /// </summary>
    {class} function WrapIUnknownWithComObject(punk: IntPtr): DNObject;
    /// <summary>
    ///   构造  从指定 。
    /// </summary>
    {class} function CreateConstructionReturnMessage(ctorMsg: DNIConstructionCallMessage; retObj: DNMarshalByRefObject): DNIConstructionReturnMessage;
    /// <summary>
    ///   在相同类的不同实例中切换 COM 可调用包装 (CCW)。
    /// </summary>
    {class} procedure SwitchWrappers(oldcp: DNRealProxy; newcp: DNRealProxy);

  end;

  /// <summary>
  ///   提供了所需的通信和与外部非托管类的操作的 Api 。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Services.EnterpriseServicesHelper')]
  DNEnterpriseServicesHelper = interface(DNObject)
  ['{BC5062B6-79E8-3F19-A87E-F9DAF826960C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEnterpriseServicesHelper = class(TDNGenericImport<DNEnterpriseServicesHelperClass, DNEnterpriseServicesHelper>) end;

  //-------------namespace: System.Runtime.Remoting.Services----------------
  /// <summary>
  ///   指示实现对象必须封送处理、 取消封送和断开连接的对象和代理服务器的通知通过远程处理基础结构。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Services.ITrackingHandler')]
  DNITrackingHandler = interface(DNObject)
  ['{03EC7D10-17A5-3585-9A2E-0596FCAC3870}']
  { methods } 

    /// <summary>
    ///   通知被封送对象的当前实例。
    /// </summary>
    procedure MarshaledObject(obj: DNObject; &or: DNObjRef);
    /// <summary>
    ///   通知的当前实例已取消封送对象。
    /// </summary>
    procedure UnmarshaledObject(obj: DNObject; &or: DNObjRef);
    /// <summary>
    ///   通知对象已从其代理服务器断开连接的当前实例。
    /// </summary>
    procedure DisconnectedObject(obj: DNObject);

  end;

  //-------------namespace: System.Runtime.Remoting.Services----------------
  DNTrackingServicesClass = interface(DNObjectClass)
  ['{AE4AD628-8502-4E9B-91A8-A3F569114BA4}']
  { static getter & setter } 

    {class} function get_RegisteredHandlers: TArray<DNITrackingHandler>;

  { constructors } 

    /// <summary>
    ///   创建  的实例。
    /// </summary>
    {class} function init: DNTrackingServices;

  { static methods } 

    /// <summary>
    ///   注册新的跟踪处理程序与 。
    /// </summary>
    {class} procedure RegisterTrackingHandler(handler: DNITrackingHandler);
    /// <summary>
    ///   从指定的跟踪处理程序中注销 。
    /// </summary>
    {class} procedure UnregisterTrackingHandler(handler: DNITrackingHandler);

  { static propertys } 

    /// <summary>
    ///   获取与当前已注册的跟踪处理数组  在当前 。
    /// </summary>
    {class} property RegisteredHandlers: TArray<DNITrackingHandler> read get_RegisteredHandlers;
  end;

  /// <summary>
  ///   提供了一种方法来注册、 注销和获取跟踪处理程序的列表。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Services.TrackingServices')]
  DNTrackingServices = interface(DNObject)
  ['{E822F35C-DDC2-3FB2-9768-A2AEBCED7C40}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTrackingServices = class(TDNGenericImport<DNTrackingServicesClass, DNTrackingServices>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNSoapServicesClass = interface(DNObjectClass)
  ['{30736C64-F320-494F-A473-E00AB0C7E7D2}']
  { static getter & setter } 

    {class} function get_XmlNsForClrType: string;
    {class} function get_XmlNsForClrTypeWithAssembly: string;
    {class} function get_XmlNsForClrTypeWithNs: string;
    {class} function get_XmlNsForClrTypeWithNsAndAssembly: string;

  { static methods } 

    /// <summary>
    ///   将预加载每个  位于指定  中找到的信息从  与每个类型相关联。
    /// </summary>
    {class} procedure PreLoad(assembly: DNAssembly); overload;
    {class} procedure GetInteropFieldTypeAndNameFromXmlElement(containingType: DNType; xmlElement: string; xmlNamespace: string; out &type: DNType; out name: string);
    {class} procedure GetInteropFieldTypeAndNameFromXmlAttribute(containingType: DNType; xmlAttribute: string; xmlNamespace: string; out &type: DNType; out name: string);
    {class} function GetXmlElementForInteropType(&type: DNType; out xmlElement: string; out xmlNamespace: string): Boolean;
    {class} function GetXmlTypeForInteropType(&type: DNType; out xmlType: string; out xmlTypeNamespace: string): Boolean;
    /// <summary>
    ///   在远程调用中指定的方法的过程中使用的 XML 命名空间中检索给定 。
    /// </summary>
    {class} function GetXmlNamespaceForMethodCall(mb: DNMethodBase): string;
    /// <summary>
    ///   响应中指定的方法对的远程调用的生成过程中使用的 XML 命名空间中检索给定 。
    /// </summary>
    {class} function GetXmlNamespaceForMethodResponse(mb: DNMethodBase): string;
    /// <summary>
    ///   将指定  与缓存与其 SOAPAction。
    /// </summary>
    {class} procedure RegisterSoapActionForMethodBase(mb: DNMethodBase); overload;
    /// <summary>
    ///   将相关联的提供的 SOAPAction 值与给定  在信道接收器中使用。
    /// </summary>
    {class} procedure RegisterSoapActionForMethodBase(mb: DNMethodBase; soapAction: string); overload;
    /// <summary>
    ///   返回与指定的方法在关联的 SOAPAction 值给定 。
    /// </summary>
    {class} function GetSoapActionFromMethodBase(mb: DNMethodBase): string;
    /// <summary>
    ///   返回一个布尔值，该值指示指定的命名空间是否是本机公共语言运行时。
    /// </summary>
    {class} function IsClrTypeNamespace(namespaceString: string): Boolean;
    /// <summary>
    ///   返回提供的命名空间和程序集名称的公共语言运行时类型的命名空间名称。
    /// </summary>
    {class} function CodeXmlNamespaceForClrTypeNamespace(typeNamespace: string; assemblyName: string): string;
    /// <summary>
    ///   将给定的 XML 元素名称和命名空间与应该用于反序列化的运行时类型相关联。
    /// </summary>
    {class} procedure RegisterInteropXmlElement(xmlElement: string; xmlNamespace: string; &type: DNType);
    /// <summary>
    ///   将给定的 XML 类型名称和命名空间与应该用于反序列化的运行时类型相关联。
    /// </summary>
    {class} procedure RegisterInteropXmlType(xmlType: string; xmlTypeNamespace: string; &type: DNType);
    /// <summary>
    ///   将预加载给定  基于中设置的值  类型上。
    /// </summary>
    {class} procedure PreLoad(&type: DNType); overload;
    /// <summary>
    ///   检索  应具有给定的 XML 元素名称和命名空间无法识别的对象类型的反序列化期间使用。
    /// </summary>
    {class} function GetInteropTypeFromXmlElement(xmlElement: string; xmlNamespace: string): DNType;
    /// <summary>
    ///   检索的对象  应具有给定的 XML 类型名称和命名空间无法识别的对象类型的反序列化期间使用。
    /// </summary>
    {class} function GetInteropTypeFromXmlType(xmlType: string; xmlTypeNamespace: string): DNType;
    /// <summary>
    ///   确定指定的 SOAPAction 是否可接受的给定 。
    /// </summary>
    {class} function IsSoapActionValidForMethodBase(soapAction: string; mb: DNMethodBase): Boolean;
    {class} function GetTypeAndMethodNameFromSoapAction(soapAction: string; out typeName: string; out methodName: string): Boolean;
    {class} function DecodeXmlNamespaceForClrTypeNamespace(inNamespace: string; out typeNamespace: string; out assemblyName: string): Boolean;

  { static propertys } 

    /// <summary>
    ///   获取公共语言运行时类型的 XML 命名空间前缀。
    /// </summary>
    {class} property XmlNsForClrType: string read get_XmlNsForClrType;
    /// <summary>
    ///   具有程序集的公共语言运行时类编码，但没有本机获取应用于 XML 的默认 XML 命名空间前缀的命名空间。
    /// </summary>
    {class} property XmlNsForClrTypeWithAssembly: string read get_XmlNsForClrTypeWithAssembly;
    /// <summary>
    ///   获取应用于 XML 的 XML 命名空间前缀编码是 mscorlib.dll 文件的一部分的公共语言运行时类。
    /// </summary>
    {class} property XmlNsForClrTypeWithNs: string read get_XmlNsForClrTypeWithNs;
    /// <summary>
    ///   获取应用于 XML 的默认 XML 命名空间前缀有公共语言运行时命名空间和程序集的公共语言运行时类编码。
    /// </summary>
    {class} property XmlNsForClrTypeWithNsAndAssembly: string read get_XmlNsForClrTypeWithNsAndAssembly;
  end;

  /// <summary>
  ///   有关使用和发布远程对象以 SOAP 格式提供若干方法。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.SoapServices')]
  DNSoapServices = interface(DNObject)
  ['{DA5681DA-7C21-3A2D-AFAC-69E3A4D11F4D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSoapServices = class(TDNGenericImport<DNSoapServicesClass, DNSoapServices>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNTypeEntryClass = interface(DNObjectClass)
  ['{87CA4E8C-430D-4402-A05E-D40025A59A87}']
  end;

  /// <summary>
  ///   实现用于激活远程类型的实例存储配置信息的基类。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.TypeEntry')]
  DNTypeEntry = interface(DNObject)
  ['{4E52D7D6-9FDF-3B59-B318-778E0F40F37C}']
  { getter & setter } 

    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取配置为远程激活类型的对象类型的完整类型名称。
    /// </summary>
    property TypeName: string read get_TypeName write set_TypeName;
    /// <summary>
    ///   获取配置为远程激活类型的对象类型的程序集名称。
    /// </summary>
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  TDNTypeEntry = class(TDNGenericImport<DNTypeEntryClass, DNTypeEntry>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNActivatedClientTypeEntryClass = interface(DNTypeEntryClass)
  ['{7555A49B-FD31-44C7-8071-20871DB95DBB}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  用给定的类型名称、 程序集名称和应用程序 URL。
    /// </summary>
    {class} function init(typeName: string; assemblyName: string; appUrl: string): DNActivatedClientTypeEntry; overload;
    /// <summary>
    ///   新实例初始化  类与给定  和应用程序 URL。
    /// </summary>
    {class} function init(&type: DNType; appUrl: string): DNActivatedClientTypeEntry; overload;

  end;

  /// <summary>
  ///   保留在客户端上注册为的类型，可以在服务器上激活的对象类型的值。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.ActivatedClientTypeEntry')]
  DNActivatedClientTypeEntry = interface(DNTypeEntry)
  ['{3ED0F148-E447-3EFE-8488-3C834082CC96}']
  { getter & setter } 

    function get_ApplicationUrl: string;
    function get_ObjectType: DNType;
    function get_ContextAttributes: TArray<DNIContextAttribute>;
    procedure set_ContextAttributes(value: TArray<DNIContextAttribute>);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { methods } 

    /// <summary>
    ///   返回的类型名称、 程序集名称和与客户端激活类型的应用程序 URL 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取要在其中激活类型的应用程序的 URL。
    /// </summary>
    property ApplicationUrl: string read get_ApplicationUrl;
    /// <summary>
    ///   获取  的客户端激活类型。
    /// </summary>
    property ObjectType: DNType read get_ObjectType;
    /// <summary>
    ///   获取或设置客户端激活类型的上下文特性。
    /// </summary>
    property ContextAttributes: TArray<DNIContextAttribute> read get_ContextAttributes write set_ContextAttributes;
    property TypeName: string read get_TypeName write set_TypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  TDNActivatedClientTypeEntry = class(TDNGenericImport<DNActivatedClientTypeEntryClass, DNActivatedClientTypeEntry>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNActivatedServiceTypeEntryClass = interface(DNTypeEntryClass)
  ['{0EB32922-B950-4BFA-8047-1ECBEB10FD66}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  用给定的类型名称和程序集名称。
    /// </summary>
    {class} function init(typeName: string; assemblyName: string): DNActivatedServiceTypeEntry; overload;
    /// <summary>
    ///   新实例初始化  类与给定 。
    /// </summary>
    {class} function init(&type: DNType): DNActivatedServiceTypeEntry; overload;

  end;

  /// <summary>
  ///   保留注册将在服务端作为一个可以根据请求从客户端激活的对象类型的值。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.ActivatedServiceTypeEntry')]
  DNActivatedServiceTypeEntry = interface(DNTypeEntry)
  ['{6CD360CD-D53D-3775-87EF-00D72E6645F5}']
  { getter & setter } 

    function get_ObjectType: DNType;
    function get_ContextAttributes: TArray<DNIContextAttribute>;
    procedure set_ContextAttributes(value: TArray<DNIContextAttribute>);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { methods } 

    /// <summary>
    ///   返回作为客户端激活的服务类型的类型和程序集名称 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取  的客户端激活的服务类型。
    /// </summary>
    property ObjectType: DNType read get_ObjectType;
    /// <summary>
    ///   获取或设置客户端激活的服务类型的上下文特性。
    /// </summary>
    property ContextAttributes: TArray<DNIContextAttribute> read get_ContextAttributes write set_ContextAttributes;
    property TypeName: string read get_TypeName write set_TypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  TDNActivatedServiceTypeEntry = class(TDNGenericImport<DNActivatedServiceTypeEntryClass, DNActivatedServiceTypeEntry>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNWellKnownClientTypeEntryClass = interface(DNTypeEntryClass)
  ['{C7D42779-9D57-4437-AB62-0A408C5B3D5C}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  用给定的类型、 程序集名称和 URL。
    /// </summary>
    {class} function init(typeName: string; assemblyName: string; objectUrl: string): DNWellKnownClientTypeEntry; overload;
    /// <summary>
    ///   新实例初始化  类与给定的类型和 URL。
    /// </summary>
    {class} function init(&type: DNType; objectUrl: string): DNWellKnownClientTypeEntry; overload;

  end;

  /// <summary>
  ///   包含值的对象类型在客户端上注册为 （单个调用或单一实例） 的服务器激活类型。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.WellKnownClientTypeEntry')]
  DNWellKnownClientTypeEntry = interface(DNTypeEntry)
  ['{6B3B6647-B39D-3ED4-992F-DF6C49ACE82E}']
  { getter & setter } 

    function get_ObjectUrl: string;
    function get_ObjectType: DNType;
    function get_ApplicationUrl: string;
    procedure set_ApplicationUrl(value: string);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { methods } 

    /// <summary>
    ///   返回完整的类型名称、 程序集名称和与服务器激活客户端类型的对象 URL 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取服务器激活客户端对象的 URL。
    /// </summary>
    property ObjectUrl: string read get_ObjectUrl;
    /// <summary>
    ///   获取  服务器激活客户端类型。
    /// </summary>
    property ObjectType: DNType read get_ObjectType;
    /// <summary>
    ///   获取或设置要在其中激活类型的应用程序的 URL。
    /// </summary>
    property ApplicationUrl: string read get_ApplicationUrl write set_ApplicationUrl;
    property TypeName: string read get_TypeName write set_TypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  TDNWellKnownClientTypeEntry = class(TDNGenericImport<DNWellKnownClientTypeEntryClass, DNWellKnownClientTypeEntry>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNWellKnownServiceTypeEntryClass = interface(DNTypeEntryClass)
  ['{20432F96-789A-4527-A3ED-CAB56CE71CCC}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  初始化具有给定的类型名称的程序集名称对象 URI 和 。
    /// </summary>
    {class} function init(typeName: string; assemblyName: string; objectUri: string; mode: DNWellKnownObjectMode): DNWellKnownServiceTypeEntry; overload;
    /// <summary>
    ///   新实例初始化  类与给定 , ，对象 URI 和 。
    /// </summary>
    {class} function init(&type: DNType; objectUri: string; mode: DNWellKnownObjectMode): DNWellKnownServiceTypeEntry; overload;

  end;

  /// <summary>
  ///   保存的对象类型的值在服务端上注册为 （单个调用或单一实例） 的服务器激活类型对象。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.WellKnownServiceTypeEntry')]
  DNWellKnownServiceTypeEntry = interface(DNTypeEntry)
  ['{2CE0DA26-18EF-3CF4-ABAC-BE90965F5F90}']
  { getter & setter } 

    function get_ObjectUri: string;
    function get_Mode: DNWellKnownObjectMode;
    function get_ObjectType: DNType;
    function get_ContextAttributes: TArray<DNIContextAttribute>;
    procedure set_ContextAttributes(value: TArray<DNIContextAttribute>);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { methods } 

    /// <summary>
    ///   返回的类型名称、 程序集名称和对象 URI 和  与服务器激活类型的 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取已知的服务类型的 URI。
    /// </summary>
    property ObjectUri: string read get_ObjectUri;
    /// <summary>
    ///   获取  服务器激活的服务类型。
    /// </summary>
    property Mode: DNWellKnownObjectMode read get_Mode;
    /// <summary>
    ///   获取  服务器激活的服务类型。
    /// </summary>
    property ObjectType: DNType read get_ObjectType;
    /// <summary>
    ///   获取或设置服务器激活的服务类型的上下文特性。
    /// </summary>
    property ContextAttributes: TArray<DNIContextAttribute> read get_ContextAttributes write set_ContextAttributes;
    property TypeName: string read get_TypeName write set_TypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  TDNWellKnownServiceTypeEntry = class(TDNGenericImport<DNWellKnownServiceTypeEntryClass, DNWellKnownServiceTypeEntry>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNFormatterClass = interface(DNObjectClass)
  ['{9391D1D7-FBFD-45D6-BE7E-51DBA65D5478}']
  end;

  /// <summary>
  ///   提供公共语言运行时序列化格式化程序的基本功能。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatter')]
  DNFormatter = interface(DNObject)
  ['{E6854C08-0666-3939-BDF1-E1555A2C49FA}']
  { getter & setter } 

    function get_SurrogateSelector: DNISurrogateSelector;
    procedure set_SurrogateSelector(value: DNISurrogateSelector);
    function get_Binder: DNSerializationBinder;
    procedure set_Binder(value: DNSerializationBinder);
    function get_Context: DNStreamingContext;
    procedure set_Context(value: DNStreamingContext);

  { methods } 

    /// <summary>
    ///   当在派生类中重写，反序列化流时，则在创建附加到格式化程序创建的对象关系图与最初序列化为该流关系图相同。
    /// </summary>
    function Deserialize(serializationStream: DNStream): DNObject;
    /// <summary>
    ///   当在派生类中重写序列化具有已连接到格式化程序的流指定的根的对象图。
    /// </summary>
    procedure Serialize(serializationStream: DNStream; graph: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   当在派生类中重写时获取或设置  与当前格式化程序一起使用。
    /// </summary>
    property SurrogateSelector: DNISurrogateSelector read get_SurrogateSelector write set_SurrogateSelector;
    /// <summary>
    ///   当在派生类中重写时获取或设置  与当前格式化程序一起使用。
    /// </summary>
    property Binder: DNSerializationBinder read get_Binder write set_Binder;
    /// <summary>
    ///   当在派生类中重写时获取或设置  用于当前序列化。
    /// </summary>
    property Context: DNStreamingContext read get_Context write set_Context;
  end;

  TDNFormatter = class(TDNGenericImport<DNFormatterClass, DNFormatter>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNFormatterConverterClass = interface(DNObjectClass)
  ['{65DA4956-D7F7-4A51-B5C5-B48A6C68A6A7}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNFormatterConverter;

  end;

  /// <summary>
  ///   表示的基实现  接口，使用  类和  接口。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.FormatterConverter')]
  DNFormatterConverter = interface(DNObject)
  ['{D23D2F41-1D69-3E03-A275-32AE381223AC}']
  { methods } 

    /// <summary>
    ///   将值转换为给定 。
    /// </summary>
    function Convert(value: DNObject; &type: DNType): DNObject; overload;
    /// <summary>
    ///   将值转换为给定 。
    /// </summary>
    function Convert(value: DNObject; typeCode: DNTypeCode): DNObject; overload;
    /// <summary>
    ///   将一个值转换为 。
    /// </summary>
    function ToBoolean(value: DNObject): Boolean;
    /// <summary>
    ///   将值转换为 Unicode 字符。
    /// </summary>
    function ToChar(value: DNObject): Char;
    /// <summary>
    ///   将一个值转换为 。
    /// </summary>
    function ToSByte(value: DNObject): SByte;
    /// <summary>
    ///   将值转换为 8 位无符号整数。
    /// </summary>
    function ToByte(value: DNObject): Byte;
    /// <summary>
    ///   将值转换为 16 位有符号整数。
    /// </summary>
    function ToInt16(value: DNObject): Int16;
    /// <summary>
    ///   将值转换为 16 位无符号整数。
    /// </summary>
    function ToUInt16(value: DNObject): UInt16;
    /// <summary>
    ///   将值转换为 32 位有符号整数。
    /// </summary>
    function ToInt32(value: DNObject): Int32;
    /// <summary>
    ///   将值转换为 32 位无符号整数。
    /// </summary>
    function ToUInt32(value: DNObject): UInt32;
    /// <summary>
    ///   将值转换为 64 位有符号整数。
    /// </summary>
    function ToInt64(value: DNObject): Int64;
    /// <summary>
    ///   将值转换为 64 位无符号整数。
    /// </summary>
    function ToUInt64(value: DNObject): UInt64;
    /// <summary>
    ///   将值转换为单精度浮点数。
    /// </summary>
    function ToSingle(value: DNObject): Single;
    /// <summary>
    ///   将值转换为双精度浮点数。
    /// </summary>
    function ToDouble(value: DNObject): Double;
    /// <summary>
    ///   将一个值转换为 。
    /// </summary>
    function ToDecimal(value: DNObject): DNDecimal;
    /// <summary>
    ///   将一个值转换为 。
    /// </summary>
    function ToDateTime(value: DNObject): DNDateTime;
    /// <summary>
    ///   将指定对象转换为 。
    /// </summary>
    function ToString(value: DNObject): string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string; overload;

  end;

  TDNFormatterConverter = class(TDNGenericImport<DNFormatterConverterClass, DNFormatterConverter>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters.Binary----------------
  DNBinaryFormatterClass = interface(DNObjectClass)
  ['{52849EA5-C8E1-4009-A8F1-F251A3F269A8}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNBinaryFormatter; overload;
    /// <summary>
    ///   新实例初始化  使用给定的代理项选择器和流上下文的类。
    /// </summary>
    {class} function init(selector: DNISurrogateSelector; context: DNStreamingContext): DNBinaryFormatter; overload;

  end;

  /// <summary>
  ///   以二进制格式序列化和反序列化对象或连接对象的整个图形。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.Binary.BinaryFormatter')]
  DNBinaryFormatter = interface(DNObject)
  ['{50369004-DB9A-3A75-BE7A-1D0EF017B9D3}']
  { getter & setter } 

    function get_TypeFormat: DNFormatterTypeStyle;
    procedure set_TypeFormat(value: DNFormatterTypeStyle);
    function get_AssemblyFormat: DNFormatterAssemblyStyle;
    procedure set_AssemblyFormat(value: DNFormatterAssemblyStyle);
    function get_FilterLevel: DNTypeFilterLevel;
    procedure set_FilterLevel(value: DNTypeFilterLevel);
    function get_SurrogateSelector: DNISurrogateSelector;
    procedure set_SurrogateSelector(value: DNISurrogateSelector);
    function get_Binder: DNSerializationBinder;
    procedure set_Binder(value: DNSerializationBinder);
    function get_Context: DNStreamingContext;
    procedure set_Context(value: DNStreamingContext);

  { methods } 

    /// <summary>
    ///   指定的流反序列化对象图。
    /// </summary>
    function Deserialize(serializationStream: DNStream): DNObject; overload;
    /// <summary>
    ///   指定的流反序列化对象图。
    ///               提供  处理该流中的任何标头。
    /// </summary>
    function Deserialize(serializationStream: DNStream; handler: DNHeaderHandler): DNObject; overload;
    /// <summary>
    ///   反序列化对实现远程方法调用从所提供的响应 。
    /// </summary>
    function DeserializeMethodResponse(serializationStream: DNStream; handler: DNHeaderHandler; methodCallMessage: DNIMethodCallMessage): DNObject;
    /// <summary>
    ///   指定的流反序列化对象图。
    ///               提供  处理该流中的任何标头。
    /// </summary>
    function UnsafeDeserialize(serializationStream: DNStream; handler: DNHeaderHandler): DNObject;
    /// <summary>
    ///   反序列化对实现远程方法调用从所提供的响应 。
    /// </summary>
    function UnsafeDeserializeMethodResponse(serializationStream: DNStream; handler: DNHeaderHandler; methodCallMessage: DNIMethodCallMessage): DNObject;
    /// <summary>
    ///   将对象或具有指定顶级 （根）、 对象图序列化到给定的流。
    /// </summary>
    procedure Serialize(serializationStream: DNStream; graph: DNObject); overload;
    /// <summary>
    ///   给定的流将提供的标头附加到序列化对象或具有指定顶级 （根）、 对象图。
    /// </summary>
    procedure Serialize(serializationStream: DNStream; graph: DNObject; headers: TArray<DNHeader>); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置类型说明中的序列化流中的布局的格式。
    /// </summary>
    property TypeFormat: DNFormatterTypeStyle read get_TypeFormat write set_TypeFormat;
    /// <summary>
    ///   获取或设置关于查找和加载程序集反序列化程序的行为。
    /// </summary>
    property AssemblyFormat: DNFormatterAssemblyStyle read get_AssemblyFormat write set_AssemblyFormat;
    /// <summary>
    ///   获取或设置  的自动反序列化  执行。
    /// </summary>
    property FilterLevel: DNTypeFilterLevel read get_FilterLevel write set_FilterLevel;
    /// <summary>
    ///   获取或设置  控制类型序列化和反序列化过程的替换。
    /// </summary>
    property SurrogateSelector: DNISurrogateSelector read get_SurrogateSelector write set_SurrogateSelector;
    /// <summary>
    ///   获取或设置类型的对象  控制将序列化对象传递给一种类型的绑定。
    /// </summary>
    property Binder: DNSerializationBinder read get_Binder write set_Binder;
    /// <summary>
    ///   获取或设置  此格式化程序。
    /// </summary>
    property Context: DNStreamingContext read get_Context write set_Context;
  end;

  TDNBinaryFormatter = class(TDNGenericImport<DNBinaryFormatterClass, DNBinaryFormatter>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  /// <summary>
  ///   允许访问的字段名称和支持的对象的字段类型  接口。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.IFieldInfo')]
  DNIFieldInfo = interface(DNObject)
  ['{CC18FD4D-AA2D-3AB4-9848-584BBAE4AB44}']
  { getter & setter } 

    function get_FieldNames: TArray<string>;
    procedure set_FieldNames(value: TArray<string>);
    function get_FieldTypes: TArray<DNType>;
    procedure set_FieldTypes(value: TArray<DNType>);

  { propertys } 

    /// <summary>
    ///   获取或设置序列化的对象的字段名称。
    /// </summary>
    property FieldNames: TArray<string> read get_FieldNames write set_FieldNames;
    /// <summary>
    ///   获取或设置序列化的对象的字段类型。
    /// </summary>
    property FieldTypes: TArray<DNType> read get_FieldTypes write set_FieldTypes;
  end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  DNInternalRMClass = interface(DNObjectClass)
  ['{10D1F154-645E-4B2F-AB14-147DF414B5EE}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNInternalRM;

  { static methods } 

    /// <summary>
    ///   打印 SOAP 跟踪消息。
    /// </summary>
    {class} procedure InfoSoap(messages: TArray<DNObject>);
    /// <summary>
    ///   检查是否启用 SOAP 跟踪。
    /// </summary>
    {class} function SoapCheckEnabled: Boolean;

  end;

  /// <summary>
  ///   编译.NET Framework 序列化基础结构时跟踪消息的日志。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.InternalRM')]
  DNInternalRM = interface(DNObject)
  ['{CF8F7FCF-94FE-3516-90E9-C103156DD2D5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalRM = class(TDNGenericImport<DNInternalRMClass, DNInternalRM>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  DNInternalSTClass = interface(DNObjectClass)
  ['{62E32A9F-14C1-4E85-860F-3B95616397EC}']
  { static methods } 

    /// <summary>
    ///   打印 SOAP 跟踪消息。
    /// </summary>
    {class} procedure InfoSoap(messages: TArray<DNObject>);
    /// <summary>
    ///   断言指定的消息。
    /// </summary>
    {class} procedure SoapAssert(condition: Boolean; message: string);
    /// <summary>
    ///   设置字段的值。
    /// </summary>
    {class} procedure SerializationSetValue(fi: DNFieldInfo; target: DNObject; value: DNObject);
    /// <summary>
    ///   加载指定的程序集进行调试。
    /// </summary>
    {class} function LoadAssemblyFromString(assemblyString: string): DNAssembly;
    /// <summary>
    ///   检查是否启用 SOAP 跟踪。
    /// </summary>
    {class} function SoapCheckEnabled: Boolean;
    /// <summary>
    ///   处理指定的消息的数组。
    /// </summary>
    {class} procedure Soap(messages: TArray<DNObject>);

  end;

  /// <summary>
  ///   编译.NET Framework 序列化基础结构时跟踪消息的日志。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.InternalST')]
  DNInternalST = interface(DNObject)
  ['{CBBAF6EC-251A-3480-8A3D-4D56BC7320D0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalST = class(TDNGenericImport<DNInternalSTClass, DNInternalST>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  /// <summary>
  ///   包含在 SOAP RPC （远程过程调用） 的序列化过程所需的参数的类型及其名称的对象提供的接口。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.ISoapMessage')]
  DNISoapMessage = interface(DNObject)
  ['{E699146C-7793-3455-9BEF-964C90D8F995}']
  { getter & setter } 

    function get_ParamNames: TArray<string>;
    procedure set_ParamNames(value: TArray<string>);
    function get_ParamValues: TArray<DNObject>;
    procedure set_ParamValues(value: TArray<DNObject>);
    function get_ParamTypes: TArray<DNType>;
    procedure set_ParamTypes(value: TArray<DNType>);
    function get_MethodName: string;
    procedure set_MethodName(value: string);
    function get_XmlNameSpace: string;
    procedure set_XmlNameSpace(value: string);
    function get_Headers: TArray<DNHeader>;
    procedure set_Headers(value: TArray<DNHeader>);

  { propertys } 

    /// <summary>
    ///   获取或设置方法调用的参数名称。
    /// </summary>
    property ParamNames: TArray<string> read get_ParamNames write set_ParamNames;
    /// <summary>
    ///   获取或设置一个方法调用的参数值。
    /// </summary>
    property ParamValues: TArray<DNObject> read get_ParamValues write set_ParamValues;
    /// <summary>
    ///   获取或设置一个方法调用的参数类型。
    /// </summary>
    property ParamTypes: TArray<DNType> read get_ParamTypes write set_ParamTypes;
    /// <summary>
    ///   获取或设置所调用的方法的名称。
    /// </summary>
    property MethodName: string read get_MethodName write set_MethodName;
    /// <summary>
    ///   获取或设置 SOAP RPC （远程过程调用） 的 XML 命名空间  元素。
    /// </summary>
    property XmlNameSpace: string read get_XmlNameSpace write set_XmlNameSpace;
    /// <summary>
    ///   获取或设置方法调用的带外数据。
    /// </summary>
    property Headers: TArray<DNHeader> read get_Headers write set_Headers;
  end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  DNServerFaultClass = interface(DNObjectClass)
  ['{216FA632-958B-4EFC-86EF-35837431961F}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(exceptionType: string; message: string; stackTrace: string): DNServerFault;

  end;

  /// <summary>
  ///   包含了服务器错误的信息。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.ServerFault')]
  DNServerFault = interface(DNObject)
  ['{817ACCB7-35D8-3C18-BAF2-0A5CE2157B74}']
  { getter & setter } 

    function get_ExceptionType: string;
    procedure set_ExceptionType(value: string);
    function get_ExceptionMessage: string;
    procedure set_ExceptionMessage(value: string);
    function get_StackTrace: string;
    procedure set_StackTrace(value: string);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置已由服务器引发的异常的类型。
    /// </summary>
    property ExceptionType: string read get_ExceptionType write set_ExceptionType;
    /// <summary>
    ///   获取或设置伴随在服务器上引发的异常的异常消息。
    /// </summary>
    property ExceptionMessage: string read get_ExceptionMessage write set_ExceptionMessage;
    /// <summary>
    ///   获取或设置在服务器引发了异常的线程的堆栈跟踪。
    /// </summary>
    property StackTrace: string read get_StackTrace write set_StackTrace;
  end;

  TDNServerFault = class(TDNGenericImport<DNServerFaultClass, DNServerFault>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  DNSoapFaultClass = interface(DNObjectClass)
  ['{6A0F0B4B-0652-4B43-ACC7-34A6235428E1}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapFault; overload;
    /// <summary>
    ///   新实例初始化  类，将属性设置为指定的值。
    /// </summary>
    {class} function init(faultCode: string; faultString: string; faultActor: string; serverFault: DNServerFault): DNSoapFault; overload;

  end;

  /// <summary>
  ///   携带 SOAP 消息中的错误和状态信息。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.SoapFault')]
  DNSoapFault = interface(DNObject)
  ['{A8D058C4-D923-3859-9490-D3888FC90439}']
  { getter & setter } 

    function get_FaultCode: string;
    procedure set_FaultCode(value: string);
    function get_FaultString: string;
    procedure set_FaultString(value: string);
    function get_FaultActor: string;
    procedure set_FaultActor(value: string);
    function get_Detail: DNObject;
    procedure set_Detail(value: DNObject);

  { methods } 

    /// <summary>
    ///   填充指定  与数据进行序列化  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置的错误代码 。
    /// </summary>
    property FaultCode: string read get_FaultCode write set_FaultCode;
    /// <summary>
    ///   获取或设置有关的错误消息 。
    /// </summary>
    property FaultString: string read get_FaultString write set_FaultString;
    /// <summary>
    ///   获取或设置的错误根源 。
    /// </summary>
    property FaultActor: string read get_FaultActor write set_FaultActor;
    /// <summary>
    ///   获取或设置所需的其他信息 。
    /// </summary>
    property Detail: DNObject read get_Detail write set_Detail;
  end;

  TDNSoapFault = class(TDNGenericImport<DNSoapFaultClass, DNSoapFault>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  DNSoapMessageClass = interface(DNObjectClass)
  ['{012F8D8D-4ECA-4D80-BAFE-6A6850BFAD42}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSoapMessage;

  end;

  /// <summary>
  ///   保存名称和类型的 SOAP RPC （远程过程调用） 的序列化过程中所需的参数。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.Formatters.SoapMessage')]
  DNSoapMessage = interface(DNObject)
  ['{E772BBE6-CB52-3C19-876A-D1BFA2305F4E}']
  { getter & setter } 

    function get_ParamNames: TArray<string>;
    procedure set_ParamNames(value: TArray<string>);
    function get_ParamValues: TArray<DNObject>;
    procedure set_ParamValues(value: TArray<DNObject>);
    function get_ParamTypes: TArray<DNType>;
    procedure set_ParamTypes(value: TArray<DNType>);
    function get_MethodName: string;
    procedure set_MethodName(value: string);
    function get_XmlNameSpace: string;
    procedure set_XmlNameSpace(value: string);
    function get_Headers: TArray<DNHeader>;
    procedure set_Headers(value: TArray<DNHeader>);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置所调用的方法的参数名称。
    /// </summary>
    property ParamNames: TArray<string> read get_ParamNames write set_ParamNames;
    /// <summary>
    ///   获取或设置所调用的方法的参数值。
    /// </summary>
    property ParamValues: TArray<DNObject> read get_ParamValues write set_ParamValues;
    /// <summary>
    ///   保留此属性。
    ///               使用  和/或  属性相反。
    /// </summary>
    property ParamTypes: TArray<DNType> read get_ParamTypes write set_ParamTypes;
    /// <summary>
    ///   获取或设置所调用的方法的名称。
    /// </summary>
    property MethodName: string read get_MethodName write set_MethodName;
    /// <summary>
    ///   获取或设置 XML 命名空间名称包含调用的方法的对象所在的位置。
    /// </summary>
    property XmlNameSpace: string read get_XmlNameSpace write set_XmlNameSpace;
    /// <summary>
    ///   获取或设置所调用的方法的带外数据。
    /// </summary>
    property Headers: TArray<DNHeader> read get_Headers write set_Headers;
  end;

  TDNSoapMessage = class(TDNGenericImport<DNSoapMessageClass, DNSoapMessage>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNFormatterServicesClass = interface(DNObjectClass)
  ['{AA9F4D42-5A29-458F-8147-A79680839D74}']
  { static methods } 

    /// <summary>
    ///   获取指定的类可序列化的所有成员 。
    /// </summary>
    {class} function GetSerializableMembers(&type: DNType): TArray<DNMemberInfo>; overload;
    /// <summary>
    ///   确定是否指定  可以反序列化与  属性设置为 。
    /// </summary>
    {class} procedure CheckTypeSecurity(t: DNType; securityLevel: DNTypeFilterLevel);
    /// <summary>
    ///   创建指定的对象类型的新实例。
    /// </summary>
    {class} function GetUninitializedObject(&type: DNType): DNObject;
    /// <summary>
    ///   创建指定的对象类型的新实例。
    /// </summary>
    {class} function GetSafeUninitializedObject(&type: DNType): DNObject;
    /// <summary>
    ///   填充指定的对象从对象的数据数组绘制每个字段的值。
    /// </summary>
    {class} function PopulateObjectMembers(obj: DNObject; members: TArray<DNMemberInfo>; data: TArray<DNObject>): DNObject;
    /// <summary>
    ///   从指定的对象中提取数据并将其作为一个对象数组返回。
    /// </summary>
    {class} function GetObjectData(obj: DNObject; members: TArray<DNMemberInfo>): TArray<DNObject>;
    /// <summary>
    ///   返回为指定的序列化代理项 。
    /// </summary>
    {class} function GetSurrogateForCyclicalReference(innerSurrogate: DNISerializationSurrogate): DNISerializationSurrogate;
    /// <summary>
    ///   查找  中提供的指定对象的 。
    /// </summary>
    {class} function GetTypeFromAssembly(assem: DNAssembly; name: string): DNType;
    /// <summary>
    ///   获取指定的类可序列化的所有成员  且位于提供 。
    /// </summary>
    {class} function GetSerializableMembers(&type: DNType; context: DNStreamingContext): TArray<DNMemberInfo>; overload;

  end;

  /// <summary>
  ///   提供了静态方法，以协助实现  进行序列化。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.FormatterServices')]
  DNFormatterServices = interface(DNObject)
  ['{688C32EA-1E9C-3A4B-90E0-A4D2A1D73F3F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNFormatterServices = class(TDNGenericImport<DNFormatterServicesClass, DNFormatterServices>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  /// <summary>
  ///   指示已完成反序列化整个对象图时要通知一个类。
  ///               请注意与 XmlSerializer (System.Xml.Serialization.XmlSerializer) 反序列化时，此接口不会调用。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.IDeserializationCallback')]
  DNIDeserializationCallback = interface(DNObject)
  ['{AB3F47E4-C227-3B05-BF9F-94649BEF9888}']
  { methods } 

    /// <summary>
    ///   在整个对象图形已经反序列化时运行。
    /// </summary>
    procedure OnDeserialization(sender: DNObject);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  /// <summary>
  ///   提供用于序列化对象格式化功能。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.IFormatter')]
  DNIFormatter = interface(DNObject)
  ['{93D7A8C5-D2EB-319B-A374-A65D321F2AA9}']
  { getter & setter } 

    function get_SurrogateSelector: DNISurrogateSelector;
    procedure set_SurrogateSelector(value: DNISurrogateSelector);
    function get_Binder: DNSerializationBinder;
    procedure set_Binder(value: DNSerializationBinder);
    function get_Context: DNStreamingContext;
    procedure set_Context(value: DNStreamingContext);

  { methods } 

    /// <summary>
    ///   反序列化所提供的流上的数据并将重组的对象图。
    /// </summary>
    function Deserialize(serializationStream: DNStream): DNObject;
    /// <summary>
    ///   序列化的对象或具有所提供的流到给定的根的对象图。
    /// </summary>
    procedure Serialize(serializationStream: DNStream; graph: DNObject);

  { propertys } 

    /// <summary>
    ///   获取或设置  当前格式化程序使用。
    /// </summary>
    property SurrogateSelector: DNISurrogateSelector read get_SurrogateSelector write set_SurrogateSelector;
    /// <summary>
    ///   获取或设置  反序列化过程中执行类型查找。
    /// </summary>
    property Binder: DNSerializationBinder read get_Binder write set_Binder;
    /// <summary>
    ///   获取或设置  用于序列化和反序列化。
    /// </summary>
    property Context: DNStreamingContext read get_Context write set_Context;
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  /// <summary>
  ///   所有格式化程序提供远程过程调用 (RPC) 接口。
  /// </summary>
  [DNTypeName('System.Runtime.Remoting.Messaging.IRemotingFormatter')]
  DNIRemotingFormatter = interface(DNIFormatter)
  ['{AE1850FD-3596-3727-A242-2FC31C5A0312}']
  { methods } 

    /// <summary>
    ///   开始远程过程调用 (RPC) 的反序列化过程。
    /// </summary>
    function Deserialize(serializationStream: DNStream; handler: DNHeaderHandler): DNObject;
    /// <summary>
    ///   启动远程过程调用 (RPC) 的序列化过程。
    /// </summary>
    procedure Serialize(serializationStream: DNStream; graph: DNObject; headers: TArray<DNHeader>);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  /// <summary>
  ///   实例之间提供连接  最佳提供格式化程序类适用于分析中的数据和 。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.IFormatterConverter')]
  DNIFormatterConverter = interface(DNObject)
  ['{F4F5C303-FAD3-3D0C-A4DF-BB82B5EE308F}']
  { methods } 

    /// <summary>
    ///   将值转换为给定 。
    /// </summary>
    function Convert(value: DNObject; &type: DNType): DNObject; overload;
    /// <summary>
    ///   将值转换为给定 。
    /// </summary>
    function Convert(value: DNObject; typeCode: DNTypeCode): DNObject; overload;
    /// <summary>
    ///   将一个值转换为 。
    /// </summary>
    function ToBoolean(value: DNObject): Boolean;
    /// <summary>
    ///   将值转换为 Unicode 字符。
    /// </summary>
    function ToChar(value: DNObject): Char;
    /// <summary>
    ///   将一个值转换为 。
    /// </summary>
    function ToSByte(value: DNObject): SByte;
    /// <summary>
    ///   将值转换为 8 位无符号整数。
    /// </summary>
    function ToByte(value: DNObject): Byte;
    /// <summary>
    ///   将值转换为 16 位有符号整数。
    /// </summary>
    function ToInt16(value: DNObject): Int16;
    /// <summary>
    ///   将值转换为 16 位无符号整数。
    /// </summary>
    function ToUInt16(value: DNObject): UInt16;
    /// <summary>
    ///   将值转换为 32 位有符号整数。
    /// </summary>
    function ToInt32(value: DNObject): Int32;
    /// <summary>
    ///   将值转换为 32 位无符号整数。
    /// </summary>
    function ToUInt32(value: DNObject): UInt32;
    /// <summary>
    ///   将值转换为 64 位有符号整数。
    /// </summary>
    function ToInt64(value: DNObject): Int64;
    /// <summary>
    ///   将值转换为 64 位无符号整数。
    /// </summary>
    function ToUInt64(value: DNObject): UInt64;
    /// <summary>
    ///   将值转换为单精度浮点数。
    /// </summary>
    function ToSingle(value: DNObject): Single;
    /// <summary>
    ///   将值转换为双精度浮点数。
    /// </summary>
    function ToDouble(value: DNObject): Double;
    /// <summary>
    ///   将一个值转换为 。
    /// </summary>
    function ToDecimal(value: DNObject): DNDecimal;
    /// <summary>
    ///   将一个值转换为 。
    /// </summary>
    function ToDateTime(value: DNObject): DNDateTime;
    /// <summary>
    ///   将一个值转换为 。
    /// </summary>
    function ToString(value: DNObject): string;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  /// <summary>
  ///   指示当前接口实施者是对另一个对象的引用。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.IObjectReference')]
  DNIObjectReference = interface(DNObject)
  ['{6E70ED5F-0439-38CE-83BB-860F1421F29F}']
  { methods } 

    /// <summary>
    ///   返回的实际对象，应进行反序列化，而不是指定的序列化的流的对象。
    /// </summary>
    function GetRealObject(context: DNStreamingContext): DNObject;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  /// <summary>
  ///   使安全透明的代码中的自定义异常数据的序列化。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.ISafeSerializationData')]
  DNISafeSerializationData = interface(DNObject)
  ['{6638EFCA-7315-308E-9696-D2EE876EBC8C}']
  { methods } 

    /// <summary>
    ///   在该实例进行反序列化时，调用此方法。
    /// </summary>
    procedure CompleteDeserialization(deserialized: DNObject);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  /// <summary>
  ///   允许对象以控制其自己的序列化和反序列化。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.ISerializable')]
  DNISerializable = interface(DNObject)
  ['{D0EEAA62-3D30-3EE2-B896-A2F34DDA47D8}']
  { methods } 

    /// <summary>
    ///   使用将目标对象序列化所需的数据填充 。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  /// <summary>
  ///   实现允许对一个对象执行序列化和反序列化的另一个序列化代理项选择器。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.ISerializationSurrogate')]
  DNISerializationSurrogate = interface(DNObject)
  ['{62339172-DBFA-337B-8AC8-053B241E06AB}']
  { methods } 

    /// <summary>
    ///   填充所提供  将对象序列化所需的数据。
    /// </summary>
    procedure GetObjectData(obj: DNObject; info: DNSerializationInfo; context: DNStreamingContext);
    /// <summary>
    ///   使用中的信息的对象填充 。
    /// </summary>
    function SetObjectData(obj: DNObject; info: DNSerializationInfo; context: DNStreamingContext; selector: DNISurrogateSelector): DNObject;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  /// <summary>
  ///   指示序列化代理项选择器类。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.ISurrogateSelector')]
  DNISurrogateSelector = interface(DNObject)
  ['{7C66FF18-A1A5-3E19-857B-0E7B6A9E3F38}']
  { methods } 

    /// <summary>
    ///   指定代理项的下一个 ，以检查当前实例在指定上下文中是否不具有指定类型和程序集的代理项。
    /// </summary>
    procedure ChainSelector(selector: DNISurrogateSelector);
    function GetSurrogate(&type: DNType; context: DNStreamingContext; out selector: DNISurrogateSelector): DNISerializationSurrogate;
    /// <summary>
    ///   返回链中的下一个代理项选择器。
    /// </summary>
    function GetNextSelector: DNISurrogateSelector;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNObjectIDGeneratorClass = interface(DNObjectClass)
  ['{EBA04BBA-1711-4FC3-9FBF-84096B2D0670}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNObjectIDGenerator;

  end;

  /// <summary>
  ///   为对象生成的 Id。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.ObjectIDGenerator')]
  DNObjectIDGenerator = interface(DNObject)
  ['{4F272C37-F0A8-350C-867B-2C03B2B16B80}']
  { methods } 

    function GetId(obj: DNObject; out firstTime: Boolean): Int64;
    function HasId(obj: DNObject; out firstTime: Boolean): Int64;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNObjectIDGenerator = class(TDNGenericImport<DNObjectIDGeneratorClass, DNObjectIDGenerator>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNObjectManagerClass = interface(DNObjectClass)
  ['{1222D75B-4624-4595-BFAE-2F427D53B73A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(selector: DNISurrogateSelector; context: DNStreamingContext): DNObjectManager;

  end;

  /// <summary>
  ///   将跟踪的对象，因为它们被反序列化。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.ObjectManager')]
  DNObjectManager = interface(DNObject)
  ['{C3A27C9A-5F79-3B7A-963D-39B1E5202B55}']
  { methods } 

    /// <summary>
    ///   记录对象的成员，以便在稍后执行的修正。
    /// </summary>
    procedure RecordFixup(objectToBeFixed: Int64; member: DNMemberInfo; objectRequired: Int64);
    /// <summary>
    ///   记录对象成员，以便在稍后执行的修正。
    /// </summary>
    procedure RecordDelayedFixup(objectToBeFixed: Int64; memberName: string; objectRequired: Int64);
    /// <summary>
    ///   一个数组，以待稍后执行中的指定元素的记录修正。
    /// </summary>
    procedure RecordArrayElementFixup(arrayToBeFixed: Int64; indices: TArray<Int32>; objectRequired: Int64); overload;
    /// <summary>
    ///   返回的对象替换为指定的对象 id。
    /// </summary>
    function GetObject(objectID: Int64): DNObject;
    /// <summary>
    ///   因为它反序列化对象，将其与关联的寄存器 。
    /// </summary>
    procedure RegisterObject(obj: DNObject; objectID: Int64); overload;
    /// <summary>
    ///   因为它反序列化对象，将其与关联的寄存器 , ，并记录  与它一起使用。
    /// </summary>
    procedure RegisterObject(obj: DNObject; objectID: Int64; info: DNSerializationInfo); overload;
    /// <summary>
    ///   将对象作为它的成员进行反序列化，将其与关联的寄存器 , ，并记录 。
    /// </summary>
    procedure RegisterObject(obj: DNObject; objectID: Int64; info: DNSerializationInfo; idOfContainingObj: Int64; member: DNMemberInfo); overload;
    /// <summary>
    ///   注册时进行反序列化，将对象中包含一个数组中的该成员将其与 , ，并记录 。
    /// </summary>
    procedure RegisterObject(obj: DNObject; objectID: Int64; info: DNSerializationInfo; idOfContainingObj: Int64; member: DNMemberInfo; arrayIndex: TArray<Int32>); overload;
    /// <summary>
    ///   执行所有记录的修正。
    /// </summary>
    procedure DoFixups;
    /// <summary>
    ///   数组中记录为某一元素的修正。
    /// </summary>
    procedure RecordArrayElementFixup(arrayToBeFixed: Int64; index: Int32; objectRequired: Int64); overload;
    /// <summary>
    ///   引发对实现任何已注册对象反序列化事件 。
    /// </summary>
    procedure RaiseDeserializationEvent;
    /// <summary>
    ///   调用方法标有 。
    /// </summary>
    procedure RaiseOnDeserializingEvent(obj: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNObjectManager = class(TDNGenericImport<DNObjectManagerClass, DNObjectManager>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationBinderClass = interface(DNObjectClass)
  ['{43C69AC8-7E29-4D9A-988F-69778C792905}']
  end;

  /// <summary>
  ///   允许用户控制类加载并强制要求要加载的类。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.SerializationBinder')]
  DNSerializationBinder = interface(DNObject)
  ['{25D97DB7-BDC3-3205-B86B-956B852ECE76}']
  { methods } 

    procedure BindToName(serializedType: DNType; out assemblyName: string; out typeName: string);
    /// <summary>
    ///   当在派生类中重写时，控制是否将序列化对象绑定到类型。
    /// </summary>
    function BindToType(assemblyName: string; typeName: string): DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSerializationBinder = class(TDNGenericImport<DNSerializationBinderClass, DNSerializationBinder>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationInfoClass = interface(DNObjectClass)
  ['{AFA46CAF-DDE5-43A9-A32F-93693FA9DC31}']
  { constructors } 

    /// <summary>
    ///   创建  类的新实例。
    /// </summary>
    {class} function init(&type: DNType; converter: DNIFormatterConverter): DNSerializationInfo; overload;
    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(&type: DNType; converter: DNIFormatterConverter; requireSameTokenInPartialTrust: Boolean): DNSerializationInfo; overload;

  end;

  /// <summary>
  ///   将序列化或反序列化对象所需的所有数据都存储。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.SerializationInfo')]
  DNSerializationInfo = interface(DNObject)
  ['{D69398C1-7541-33E7-B544-A803F380FFB6}']
  { getter & setter } 

    function get_FullTypeName: string;
    procedure set_FullTypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_MemberCount: Int32;
    function get_ObjectType: DNType;
    function get_IsFullTypeNameSetExplicit: Boolean;
    function get_IsAssemblyNameSetExplicit: Boolean;

  { methods } 

    /// <summary>
    ///   集  要序列化的对象。
    /// </summary>
    procedure SetType(&type: DNType);
    /// <summary>
    ///   返回  用于循环访问中的名称 / 值对  存储。
    /// </summary>
    function GetEnumerator: DNSerializationInfoEnumerator;
    /// <summary>
    ///   添加到一个值  存储，其中  与关联  并序列化为 。
    /// </summary>
    procedure AddValue(name: string; value: DNObject; &type: DNType); overload;
    /// <summary>
    ///   添加到指定的对象  存储区，其中是与指定名称相关联。
    /// </summary>
    procedure AddValue(name: string; value: DNObject); overload;
    /// <summary>
    ///   添加到一个布尔值  存储。
    /// </summary>
    procedure AddValue(name: string; value: Boolean); overload;
    /// <summary>
    ///   将添加到一个 Unicode 字符值  存储。
    /// </summary>
    procedure AddValue(name: string; value: Char); overload;
    /// <summary>
    ///   将添加到一个 8 位有符号的整数值  存储。
    /// </summary>
    procedure AddValue(name: string; value: SByte); overload;
    /// <summary>
    ///   将添加到一个 8 位无符号的整数值  存储。
    /// </summary>
    procedure AddValue(name: string; value: Byte); overload;
    /// <summary>
    ///   添加到一个 16 位有符号的整数值  存储。
    /// </summary>
    procedure AddValue(name: string; value: Int16); overload;
    /// <summary>
    ///   添加到一个 16 位无符号的整数值  存储。
    /// </summary>
    procedure AddValue(name: string; value: UInt16); overload;
    /// <summary>
    ///   添加到一个 32 位有符号的整数值  存储。
    /// </summary>
    procedure AddValue(name: string; value: Int32); overload;
    /// <summary>
    ///   添加到一个 32 位无符号的整数值  存储。
    /// </summary>
    procedure AddValue(name: string; value: UInt32); overload;
    /// <summary>
    ///   添加到一个 64 位有符号的整数值  存储。
    /// </summary>
    procedure AddValue(name: string; value: Int64); overload;
    /// <summary>
    ///   添加到一个 64 位无符号的整数值  存储。
    /// </summary>
    procedure AddValue(name: string; value: UInt64); overload;
    /// <summary>
    ///   添加到一个单精度浮点值  存储。
    /// </summary>
    procedure AddValue(name: string; value: Single); overload;
    /// <summary>
    ///   添加到一个双精度浮点值  存储。
    /// </summary>
    procedure AddValue(name: string; value: Double); overload;
    /// <summary>
    ///   添加到一个十进制值  存储。
    /// </summary>
    procedure AddValue(name: string; value: DNDecimal); overload;
    /// <summary>
    ///   添加  值到  存储。
    /// </summary>
    procedure AddValue(name: string; value: DNDateTime); overload;
    /// <summary>
    ///   检索一个值，从  存储。
    /// </summary>
    function GetValue(name: string; &type: DNType): DNObject;
    /// <summary>
    ///   检索一个布尔值，从  存储。
    /// </summary>
    function GetBoolean(name: string): Boolean;
    /// <summary>
    ///   检索从一个 Unicode 字符值  存储。
    /// </summary>
    function GetChar(name: string): Char;
    /// <summary>
    ///   检索从 8 位有符号的整数值  存储。
    /// </summary>
    function GetSByte(name: string): SByte;
    /// <summary>
    ///   检索从 8 位无符号的整数值  存储。
    /// </summary>
    function GetByte(name: string): Byte;
    /// <summary>
    ///   检索一个 16 位有符号的整数值，从  存储。
    /// </summary>
    function GetInt16(name: string): Int16;
    /// <summary>
    ///   检索一个 16 位无符号的整数值，从  存储。
    /// </summary>
    function GetUInt16(name: string): UInt16;
    /// <summary>
    ///   检索一个 32 位有符号的整数值，从  存储。
    /// </summary>
    function GetInt32(name: string): Int32;
    /// <summary>
    ///   检索一个 32 位无符号的整数值，从  存储。
    /// </summary>
    function GetUInt32(name: string): UInt32;
    /// <summary>
    ///   检索一个 64 位有符号的整数值，从  存储。
    /// </summary>
    function GetInt64(name: string): Int64;
    /// <summary>
    ///   检索一个 64 位无符号的整数值，从  存储。
    /// </summary>
    function GetUInt64(name: string): UInt64;
    /// <summary>
    ///   检索从一个单精度浮点值  存储。
    /// </summary>
    function GetSingle(name: string): Single;
    /// <summary>
    ///   检索从一个双精度浮点值  存储。
    /// </summary>
    function GetDouble(name: string): Double;
    /// <summary>
    ///   检索一个十进制值，从  存储。
    /// </summary>
    function GetDecimal(name: string): DNDecimal;
    /// <summary>
    ///   检索  值从  存储。
    /// </summary>
    function GetDateTime(name: string): DNDateTime;
    /// <summary>
    ///   检索  值从  存储。
    /// </summary>
    function GetString(name: string): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置的完整名称  要序列化。
    /// </summary>
    property FullTypeName: string read get_FullTypeName write set_FullTypeName;
    /// <summary>
    ///   获取或设置要在仅序列化期间序列化的类型的程序集名称。
    /// </summary>
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    /// <summary>
    ///   获取已添加到的成员数  存储。
    /// </summary>
    property MemberCount: Int32 read get_MemberCount;
    /// <summary>
    ///   返回要序列化对象的类型。
    /// </summary>
    property ObjectType: DNType read get_ObjectType;
    /// <summary>
    ///   获取是否已显式设置的完整类型名。
    /// </summary>
    property IsFullTypeNameSetExplicit: Boolean read get_IsFullTypeNameSetExplicit;
    /// <summary>
    ///   获取是否已显式设置的程序集名称。
    /// </summary>
    property IsAssemblyNameSetExplicit: Boolean read get_IsAssemblyNameSetExplicit;
  end;

  TDNSerializationInfo = class(TDNGenericImport<DNSerializationInfoClass, DNSerializationInfo>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationInfoEnumeratorClass = interface(DNObjectClass)
  ['{AB080447-3753-4A29-A740-15B0A0C6B76D}']
  end;

  /// <summary>
  ///   提供适用于格式化程序的机制，用于分析  中的数据。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.SerializationInfoEnumerator')]
  DNSerializationInfoEnumerator = interface(DNObject)
  ['{341BA870-B7FE-3CBC-9A72-B7894C6EC171}']
  { getter & setter } 

    function get_Current: DNSerializationEntry;
    function get_Name: string;
    function get_Value: DNObject;
    function get_ObjectType: DNType;

  { methods } 

    /// <summary>
    ///   下一项更新枚举器。
    /// </summary>
    function MoveNext: Boolean;
    /// <summary>
    ///   将枚举数重置为第一项。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前正在检查的项。
    /// </summary>
    property Current: DNSerializationEntry read get_Current;
    /// <summary>
    ///   获取当前正在检查的项的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取当前正在检查的项的值。
    /// </summary>
    property Value: DNObject read get_Value;
    /// <summary>
    ///   获取当前正在检查的项的类型。
    /// </summary>
    property ObjectType: DNType read get_ObjectType;
  end;

  TDNSerializationInfoEnumerator = class(TDNGenericImport<DNSerializationInfoEnumeratorClass, DNSerializationInfoEnumerator>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationObjectManagerClass = interface(DNObjectClass)
  ['{CC370054-A2D5-4E76-8BC6-A4F0294F0455}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(context: DNStreamingContext): DNSerializationObjectManager;

  end;

  /// <summary>
  ///   在运行时管理序列化过程。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.SerializationObjectManager')]
  DNSerializationObjectManager = interface(DNObject)
  ['{09E3FE70-EBE0-308B-9F4A-9E4D4F06AE0A}']
  { methods } 

    /// <summary>
    ///   注册将在其引发事件的对象。
    /// </summary>
    procedure RegisterObject(obj: DNObject);
    /// <summary>
    ///   如果该类型的对象具有一个;，调用 OnSerializing 回调事件并注册用于引发 OnSerialized 事件，如果该对象的类型有一个对象。
    /// </summary>
    procedure RaiseOnSerializedEvent;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSerializationObjectManager = class(TDNGenericImport<DNSerializationObjectManagerClass, DNSerializationObjectManager>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSurrogateSelectorClass = interface(DNObjectClass)
  ['{C113BAA0-3DFE-4D0B-8C6D-FBE9E61F8093}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSurrogateSelector;

  end;

  /// <summary>
  ///   可帮助您选择要委派序列化或反序列化到的进程的序列化代理项中的格式化程序。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.SurrogateSelector')]
  DNSurrogateSelector = interface(DNObject)
  ['{88C8A919-EB24-3CCA-84F7-2EA82BB3F3ED}']
  { methods } 

    /// <summary>
    ///   将代理项添加到已检查代理项的列表。
    /// </summary>
    procedure AddSurrogate(&type: DNType; context: DNStreamingContext; surrogate: DNISerializationSurrogate);
    /// <summary>
    ///   添加指定  ，可以处理特定对象类型到列表的代理项。
    /// </summary>
    procedure ChainSelector(selector: DNISurrogateSelector);
    /// <summary>
    ///   在选择器链上返回的下一步的选择器。
    /// </summary>
    function GetNextSelector: DNISurrogateSelector;
    function GetSurrogate(&type: DNType; context: DNStreamingContext; out selector: DNISurrogateSelector): DNISerializationSurrogate;
    /// <summary>
    ///   删除具有给定类型关联的代理项。
    /// </summary>
    procedure RemoveSurrogate(&type: DNType; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSurrogateSelector = class(TDNGenericImport<DNSurrogateSelectorClass, DNSurrogateSelector>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNCompatibilitySwitchClass = interface(DNObjectClass)
  ['{75DB9682-870D-43FC-A79E-0EE22A18D61D}']
  { static methods } 

    {class} function IsEnabled(compatibilitySwitchName: string): Boolean;
    {class} function GetValue(compatibilitySwitchName: string): string;

  end;

  [DNTypeName('System.Runtime.Versioning.CompatibilitySwitch')]
  DNCompatibilitySwitch = interface(DNObject)
  ['{ED081889-F6CB-3FB2-A84E-FD6E7878ED49}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCompatibilitySwitch = class(TDNGenericImport<DNCompatibilitySwitchClass, DNCompatibilitySwitch>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNVersioningHelperClass = interface(DNObjectClass)
  ['{04336150-0A46-4A49-93E2-08C244750288}']
  { static methods } 

    /// <summary>
    ///   返回基于指定的资源名称、 目标的资源消耗范围和使用的资源的类型的安全版本名称。
    /// </summary>
    {class} function MakeVersionSafeName(name: string; from: DNResourceScope; &to: DNResourceScope; &type: DNType): string; overload;
    /// <summary>
    ///   返回基于指定的资源名称和目标的资源占用源版本安全的名称。
    /// </summary>
    {class} function MakeVersionSafeName(name: string; from: DNResourceScope; &to: DNResourceScope): string; overload;

  end;

  /// <summary>
  ///   提供可帮助开发人员编写版本安全代码的方法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Versioning.VersioningHelper')]
  DNVersioningHelper = interface(DNObject)
  ['{22B4BE4B-1D84-3925-BECF-86B6B71675BA}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNVersioningHelper = class(TDNGenericImport<DNVersioningHelperClass, DNVersioningHelper>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAceEnumeratorClass = interface(DNObjectClass)
  ['{A3B36F3E-CDA5-450B-AE83-C9644BD8AFF9}']
  end;

  /// <summary>
  ///   提供遍历访问控制列表 (ACL) 中的访问控制项 (ACE) 的能力。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AceEnumerator')]
  DNAceEnumerator = interface(DNObject)
  ['{C7824897-476B-31FD-A25D-1EA1EC9F0EEB}']
  { getter & setter } 

    function get_Current: DNGenericAce;

  { methods } 

    /// <summary>
    ///   将枚举数推进到下一个元素  集合。
    /// </summary>
    function MoveNext: Boolean;
    /// <summary>
    ///   将枚举数设置为其初始位置，在第一个元素之前  集合。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前元素中  集合。
    ///               此属性获取该对象的类型友好版本。
    /// </summary>
    property Current: DNGenericAce read get_Current;
  end;

  TDNAceEnumerator = class(TDNGenericImport<DNAceEnumeratorClass, DNAceEnumerator>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAuthorizationRuleClass = interface(DNObjectClass)
  ['{858BAEB1-DC24-4D46-90C5-D77FD6F68EE2}']
  end;

  /// <summary>
  ///   确定对安全对象的访问权限。
  ///               派生类  和  为访问和审核功能提供专用化。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AuthorizationRule')]
  DNAuthorizationRule = interface(DNObject)
  ['{B08E48AE-0571-3483-AC2D-A6281F749BFA}']
  { getter & setter } 

    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取对其应用此规则的 。
    /// </summary>
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    /// <summary>
    ///   获取一个值，该值指示此规则是否为显式设置或继承自父级容器对象。
    /// </summary>
    property IsInherited: Boolean read get_IsInherited;
    /// <summary>
    ///   获取用于确定子对象如何继承此规则的标志的值。
    /// </summary>
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    /// <summary>
    ///   获取传播标志的值，该值确定如何将此规则的继承传播到子对象。
    ///               仅当  枚举的值不为  时，此属性才有意义。
    /// </summary>
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNAuthorizationRule = class(TDNGenericImport<DNAuthorizationRuleClass, DNAuthorizationRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAccessRuleClass = interface(DNAuthorizationRuleClass)
  ['{9E59226B-BBE8-4C86-8673-57D39F459F65}']
  end;

  /// <summary>
  ///   表示用户的身份、 访问掩码和访问控制类型的组合 （允许或拒绝）。
  ///               对象还包含的信息，有关如何通过子对象继承规则和如何传播此类继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AccessRule')]
  DNAccessRule = interface(DNAuthorizationRule)
  ['{82188F09-9D7F-3980-A8D0-EB2A1B4912D3}']
  { getter & setter } 

    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  值与此相关  对象。
    /// </summary>
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNAccessRule = class(TDNGenericImport<DNAccessRuleClass, DNAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCryptoKeyAccessRuleClass = interface(DNAccessRuleClass)
  ['{79ED87FB-565D-4E1E-903A-C3A8F35C6151}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用指定的值。
    /// </summary>
    {class} function init(identity: DNIdentityReference; cryptoKeyRights: DNCryptoKeyRights; &type: DNAccessControlType): DNCryptoKeyAccessRule; overload;
    /// <summary>
    ///   新实例初始化  类使用指定的值。
    /// </summary>
    {class} function init(identity: string; cryptoKeyRights: DNCryptoKeyRights; &type: DNAccessControlType): DNCryptoKeyAccessRule; overload;

  end;

  /// <summary>
  ///   表示加密密钥的访问规则。
  ///               访问规则表示用户的身份、 访问掩码和访问控制类型的组合 （允许或拒绝）。
  ///               访问规则对象还包含的信息，有关如何通过子对象继承规则以及如何传播此类继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CryptoKeyAccessRule')]
  DNCryptoKeyAccessRule = interface(DNAccessRule)
  ['{8E05C0A9-41EB-38A3-AFD1-2306676133F8}']
  { getter & setter } 

    function get_CryptoKeyRights: DNCryptoKeyRights;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此访问规则控制其访问的加密密钥操作。
    /// </summary>
    property CryptoKeyRights: DNCryptoKeyRights read get_CryptoKeyRights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNCryptoKeyAccessRule = class(TDNGenericImport<DNCryptoKeyAccessRuleClass, DNCryptoKeyAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNEventWaitHandleAccessRuleClass = interface(DNAccessRuleClass)
  ['{5BB5C4B7-DE09-4F1F-BDE6-C78FB734C9CB}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定的用户或组，此规则适用于的访问权限，以及是否允许或拒绝指定的访问权限。
    /// </summary>
    {class} function init(identity: DNIdentityReference; eventRights: DNEventWaitHandleRights; &type: DNAccessControlType): DNEventWaitHandleAccessRule; overload;
    /// <summary>
    ///   新实例初始化  类，同时指定名称的用户或组，此规则适用于的访问权限，以及是否允许或拒绝指定的访问权限。
    /// </summary>
    {class} function init(identity: string; eventRights: DNEventWaitHandleRights; &type: DNAccessControlType): DNEventWaitHandleAccessRule; overload;

  end;

  /// <summary>
  ///   表示一组允许或拒绝用户或组访问权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.EventWaitHandleAccessRule')]
  DNEventWaitHandleAccessRule = interface(DNAccessRule)
  ['{3E9C2438-8E3D-30AC-8A2B-2439DFEF2E69}']
  { getter & setter } 

    function get_EventWaitHandleRights: DNEventWaitHandleRights;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取允许或拒绝访问规则的权限。
    /// </summary>
    property EventWaitHandleRights: DNEventWaitHandleRights read get_EventWaitHandleRights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNEventWaitHandleAccessRule = class(TDNGenericImport<DNEventWaitHandleAccessRuleClass, DNEventWaitHandleAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNFileSystemAccessRuleClass = interface(DNAccessRuleClass)
  ['{373B3A89-2A7A-4113-8FF7-45151F535FD6}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用对用户帐户、 一个值，指定访问规则中，与关联的操作的类型和值，该值指定是否要允许或拒绝该操作的引用。
    /// </summary>
    {class} function init(identity: DNIdentityReference; fileSystemRights: DNFileSystemRights; &type: DNAccessControlType): DNFileSystemAccessRule; overload;
    /// <summary>
    ///   新实例初始化  类使用的用户帐户、 一个值，指定访问规则中，与关联的操作的类型和值，该值描述是允许还是拒绝该操作的名称。
    /// </summary>
    {class} function init(identity: string; fileSystemRights: DNFileSystemRights; &type: DNAccessControlType): DNFileSystemAccessRule; overload;
    /// <summary>
    ///   新实例初始化  类使用对用户帐户，则该值指定与访问规则、 用于确定如何继承权限的值、 一个值，确定如何传播权限和一个值，指定是否要允许或拒绝该操作关联的操作类型的引用。
    /// </summary>
    {class} function init(identity: DNIdentityReference; fileSystemRights: DNFileSystemRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNFileSystemAccessRule; overload;
    /// <summary>
    ///   新实例初始化  类使用的用户帐户，则该值指定与访问规则、 用于确定如何继承权限的值、 一个值，确定如何传播权限和一个值，指定是否要允许或拒绝该操作关联的操作类型的名称。
    /// </summary>
    {class} function init(identity: string; fileSystemRights: DNFileSystemRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNFileSystemAccessRule; overload;

  end;

  /// <summary>
  ///   表示定义文件或目录的访问规则的访问控制项 (ACE) 的抽象。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.FileSystemAccessRule')]
  DNFileSystemAccessRule = interface(DNAccessRule)
  ['{05C01EC9-1ADB-36EC-B9DC-1D2DDEE2ED3D}']
  { getter & setter } 

    function get_FileSystemRights: DNFileSystemRights;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  关联与当前标志  对象。
    /// </summary>
    property FileSystemRights: DNFileSystemRights read get_FileSystemRights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNFileSystemAccessRule = class(TDNGenericImport<DNFileSystemAccessRuleClass, DNFileSystemAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNMutexAccessRuleClass = interface(DNAccessRuleClass)
  ['{EE26E78D-A618-4B43-84C2-55A7A17AEA4F}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定的用户或组，此规则适用于的访问权限，以及是否允许或拒绝指定的访问权限。
    /// </summary>
    {class} function init(identity: DNIdentityReference; eventRights: DNMutexRights; &type: DNAccessControlType): DNMutexAccessRule; overload;
    /// <summary>
    ///   新实例初始化  类，同时指定名称的用户或组，此规则适用于的访问权限，以及是否允许或拒绝指定的访问权限。
    /// </summary>
    {class} function init(identity: string; eventRights: DNMutexRights; &type: DNAccessControlType): DNMutexAccessRule; overload;

  end;

  /// <summary>
  ///   表示一组允许或拒绝用户或组访问权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.MutexAccessRule')]
  DNMutexAccessRule = interface(DNAccessRule)
  ['{C1B9D602-726D-3CF8-9F6B-65B4F65A011E}']
  { getter & setter } 

    function get_MutexRights: DNMutexRights;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取允许或拒绝访问规则的权限。
    /// </summary>
    property MutexRights: DNMutexRights read get_MutexRights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNMutexAccessRule = class(TDNGenericImport<DNMutexAccessRuleClass, DNMutexAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNObjectAccessRuleClass = interface(DNAccessRuleClass)
  ['{2322AB57-F0E1-4285-BC8B-1C3D0CC0019B}']
  end;

  /// <summary>
  ///   表示用户的身份、 访问掩码和访问控制类型的组合 （允许或拒绝）。
  ///               对象还包含有关向其应用规则的对象，可以继承规则，如何由子对象继承规则以及如何传播此类继承的子对象的类型的类型的信息。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.ObjectAccessRule')]
  DNObjectAccessRule = interface(DNAccessRule)
  ['{4AF6C85B-E5D3-3B13-B2BB-13D293F5B12A}']
  { getter & setter } 

    function get_ObjectType: DNGuid;
    function get_InheritedObjectType: DNGuid;
    function get_ObjectFlags: DNObjectAceFlags;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  适用的对象类型。
    /// </summary>
    property ObjectType: DNGuid read get_ObjectType;
    /// <summary>
    ///   获取可继承  对象的子对象的类型。
    /// </summary>
    property InheritedObjectType: DNGuid read get_InheritedObjectType;
    /// <summary>
    ///   获取指定的  对象的  和  属性是否包含有效值的标志。
    /// </summary>
    property ObjectFlags: DNObjectAceFlags read get_ObjectFlags;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNObjectAccessRule = class(TDNGenericImport<DNObjectAccessRuleClass, DNObjectAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNRegistryAccessRuleClass = interface(DNAccessRuleClass)
  ['{A8D6EA50-7521-4FAF-A667-28FA57A1134E}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定的用户或组，此规则适用于的访问权限，以及是否允许或拒绝指定的访问权限。
    /// </summary>
    {class} function init(identity: DNIdentityReference; registryRights: DNRegistryRights; &type: DNAccessControlType): DNRegistryAccessRule; overload;
    /// <summary>
    ///   新实例初始化  类，同时指定名称的用户或组，此规则适用于的访问权限，以及是否允许或拒绝指定的访问权限。
    /// </summary>
    {class} function init(identity: string; registryRights: DNRegistryRights; &type: DNAccessControlType): DNRegistryAccessRule; overload;
    /// <summary>
    ///   新实例初始化  类，指定的用户或组，此规则适用于访问权限，传播标志，并指定的访问权限是否允许或拒绝。
    /// </summary>
    {class} function init(identity: DNIdentityReference; registryRights: DNRegistryRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNRegistryAccessRule; overload;
    /// <summary>
    ///   新实例初始化  类，指定的名称的用户或组，此规则适用于访问权限，传播标志，并指定的访问权限是否允许或拒绝。
    /// </summary>
    {class} function init(identity: string; registryRights: DNRegistryRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNRegistryAccessRule; overload;

  end;

  /// <summary>
  ///   表示一组允许或拒绝用户或组访问权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.RegistryAccessRule')]
  DNRegistryAccessRule = interface(DNAccessRule)
  ['{FCF00A0E-C9F1-3CA8-9B54-D83180DFC91A}']
  { getter & setter } 

    function get_RegistryRights: DNRegistryRights;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取允许或拒绝访问规则的权限。
    /// </summary>
    property RegistryRights: DNRegistryRights read get_RegistryRights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNRegistryAccessRule = class(TDNGenericImport<DNRegistryAccessRuleClass, DNRegistryAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAuditRuleClass = interface(DNAuthorizationRuleClass)
  ['{E49B332A-283E-44C4-81D4-162F04BDFFC1}']
  end;

  /// <summary>
  ///   表示用户的标识和访问掩码的组合。
  ///               对象还包含有关如何规则由子对象继承，如何传播继承，信息和有关哪些条件它进行审核。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.AuditRule')]
  DNAuditRule = interface(DNAuthorizationRule)
  ['{E19BEA92-F3C2-3AD4-ACF2-BDAFDA403355}']
  { getter & setter } 

    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此审核规则的审核标志。
    /// </summary>
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNAuditRule = class(TDNGenericImport<DNAuditRuleClass, DNAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCryptoKeyAuditRuleClass = interface(DNAuditRuleClass)
  ['{65EE38C8-82F9-41E6-8833-96E482AD5474}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用指定的值。
    /// </summary>
    {class} function init(identity: DNIdentityReference; cryptoKeyRights: DNCryptoKeyRights; flags: DNAuditFlags): DNCryptoKeyAuditRule; overload;
    /// <summary>
    ///   新实例初始化  类使用指定的值。
    /// </summary>
    {class} function init(identity: string; cryptoKeyRights: DNCryptoKeyRights; flags: DNAuditFlags): DNCryptoKeyAuditRule; overload;

  end;

  /// <summary>
  ///   表示加密密钥的审核规则。
  ///               审核规则表示用户的标识和访问掩码的组合。
  ///               审核规则还包含有关如何规则由子对象继承，如何继承传播，并为什么条件进行审核的信息。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CryptoKeyAuditRule')]
  DNCryptoKeyAuditRule = interface(DNAuditRule)
  ['{03B8E6B3-3E27-3C83-B7AC-3F1A4FCF9CE1}']
  { getter & setter } 

    function get_CryptoKeyRights: DNCryptoKeyRights;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此审核规则为其生成审核的加密密钥操作。
    /// </summary>
    property CryptoKeyRights: DNCryptoKeyRights read get_CryptoKeyRights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNCryptoKeyAuditRule = class(TDNGenericImport<DNCryptoKeyAuditRuleClass, DNCryptoKeyAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNEventWaitHandleAuditRuleClass = interface(DNAuditRuleClass)
  ['{D868D1A4-166D-4FC3-BAC1-FABE3976844F}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类中，指定要审核，审核的权限的用户或组，以及是否要审核成功或失败，或同时。
    /// </summary>
    {class} function init(identity: DNIdentityReference; eventRights: DNEventWaitHandleRights; flags: DNAuditFlags): DNEventWaitHandleAuditRule;

  end;

  /// <summary>
  ///   表示一组用户或组要审核的访问权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.EventWaitHandleAuditRule')]
  DNEventWaitHandleAuditRule = interface(DNAuditRule)
  ['{92F70A2B-BAC4-3A5B-95C5-3E172399FBFD}']
  { getter & setter } 

    function get_EventWaitHandleRights: DNEventWaitHandleRights;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取该审核规则影响的访问权限。
    /// </summary>
    property EventWaitHandleRights: DNEventWaitHandleRights read get_EventWaitHandleRights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNEventWaitHandleAuditRule = class(TDNGenericImport<DNEventWaitHandleAuditRuleClass, DNEventWaitHandleAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNFileSystemAuditRuleClass = interface(DNAuditRuleClass)
  ['{4FF9A78F-EE9D-4B8F-85CE-4568737741B4}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用对用户帐户、 一个值，指定与审核规则关联的操作类型和一个值，指定何时执行审核的引用。
    /// </summary>
    {class} function init(identity: DNIdentityReference; fileSystemRights: DNFileSystemRights; flags: DNAuditFlags): DNFileSystemAuditRule; overload;
    /// <summary>
    ///   新实例初始化  类使用的用户帐户，则该值指定与审核规则、 用于确定如何继承权限的值、 一个值，确定如何传播权限和一个值，指定何时执行审核关联的操作类型的引用名称。
    /// </summary>
    {class} function init(identity: DNIdentityReference; fileSystemRights: DNFileSystemRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNFileSystemAuditRule; overload;
    /// <summary>
    ///   新实例初始化  类使用的用户帐户名称、 一个值，指定与审核规则关联的操作类型和一个值，指定何时执行审核。
    /// </summary>
    {class} function init(identity: string; fileSystemRights: DNFileSystemRights; flags: DNAuditFlags): DNFileSystemAuditRule; overload;
    /// <summary>
    ///   新实例初始化  类使用的用户帐户、 一个值，指定与审核规则关联的操作类型、 值，该值确定如何继承权限、 一个值，确定如何传播权限和一个值，指定何时执行审核的名称。
    /// </summary>
    {class} function init(identity: string; fileSystemRights: DNFileSystemRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNFileSystemAuditRule; overload;

  end;

  /// <summary>
  ///   表示定义的审核规则文件或目录的访问控制项 (ACE) 的抽象。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.FileSystemAuditRule')]
  DNFileSystemAuditRule = interface(DNAuditRule)
  ['{6818FCDF-9617-3ECE-9982-C472E5721181}']
  { getter & setter } 

    function get_FileSystemRights: DNFileSystemRights;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  关联与当前标志  对象。
    /// </summary>
    property FileSystemRights: DNFileSystemRights read get_FileSystemRights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNFileSystemAuditRule = class(TDNGenericImport<DNFileSystemAuditRuleClass, DNFileSystemAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNMutexAuditRuleClass = interface(DNAuditRuleClass)
  ['{D187220B-3D81-4046-A903-4DD5F56D2E8D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类中，指定要审核，审核的权限的用户或组，以及是否要审核成功或失败，或同时。
    /// </summary>
    {class} function init(identity: DNIdentityReference; eventRights: DNMutexRights; flags: DNAuditFlags): DNMutexAuditRule;

  end;

  /// <summary>
  ///   表示一组用户或组要审核的访问权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.MutexAuditRule')]
  DNMutexAuditRule = interface(DNAuditRule)
  ['{3A402EF4-99F3-3E7A-8A7F-9B38A6175875}']
  { getter & setter } 

    function get_MutexRights: DNMutexRights;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取该审核规则影响的访问权限。
    /// </summary>
    property MutexRights: DNMutexRights read get_MutexRights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNMutexAuditRule = class(TDNGenericImport<DNMutexAuditRuleClass, DNMutexAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNObjectAuditRuleClass = interface(DNAuditRuleClass)
  ['{6C8C449E-7268-4BCD-BC62-316F27A8A3A8}']
  end;

  /// <summary>
  ///   表示用户的身份、 访问掩码和审核条件的组合。
  ///               对象还包含有关向其应用规则的对象，可以继承规则，如何由子对象继承规则以及如何传播此类继承的子对象的类型的类型的信息。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.ObjectAuditRule')]
  DNObjectAuditRule = interface(DNAuditRule)
  ['{377E2684-1A29-3C23-A128-F6F493A469CD}']
  { getter & setter } 

    function get_ObjectType: DNGuid;
    function get_InheritedObjectType: DNGuid;
    function get_ObjectFlags: DNObjectAceFlags;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  适用的对象类型。
    /// </summary>
    property ObjectType: DNGuid read get_ObjectType;
    /// <summary>
    ///   获取可继承  对象的子对象的类型。
    /// </summary>
    property InheritedObjectType: DNGuid read get_InheritedObjectType;
    /// <summary>
    ///   对象的  和  属性包含有效的值。
    /// </summary>
    property ObjectFlags: DNObjectAceFlags read get_ObjectFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNObjectAuditRule = class(TDNGenericImport<DNObjectAuditRuleClass, DNObjectAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNRegistryAuditRuleClass = interface(DNAuditRuleClass)
  ['{41C52067-5A2C-4C15-8382-39178FF79B66}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，同时指定用户或组，要审核、 要审核的权限、 是否考虑继承，以及是否要审核成功或失败，或同时。
    /// </summary>
    {class} function init(identity: DNIdentityReference; registryRights: DNRegistryRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNRegistryAuditRule; overload;
    /// <summary>
    ///   新实例初始化  类，同时指定的用户或组添加到审核，要审核的权限、 是否考虑继承，以及是否成功或失败，或同时审核的名称。
    /// </summary>
    {class} function init(identity: string; registryRights: DNRegistryRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNRegistryAuditRule; overload;

  end;

  /// <summary>
  ///   表示一组用户或组要审核的访问权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.RegistryAuditRule')]
  DNRegistryAuditRule = interface(DNAuditRule)
  ['{E04E4218-92C1-3D1B-8042-C09103F5A1F8}']
  { getter & setter } 

    function get_RegistryRights: DNRegistryRights;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取该审核规则影响的访问权限。
    /// </summary>
    property RegistryRights: DNRegistryRights read get_RegistryRights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNRegistryAuditRule = class(TDNGenericImport<DNRegistryAuditRuleClass, DNRegistryAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNGenericAceClass = interface(DNObjectClass)
  ['{91AC9433-6545-4FD3-ABFA-2702A68643AC}']
  { static methods } 

    /// <summary>
    ///   创建  中指定的二进制数据的对象。
    /// </summary>
    {class} function CreateFromBinaryForm(binaryForm: TArray<Byte>; offset: Int32): DNGenericAce;

  end;

  /// <summary>
  ///   表示访问控制项 (ACE)，并且是所有其他 ACE 类的基类。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.GenericAce')]
  DNGenericAce = interface(DNObject)
  ['{4B9BD9C5-85AB-3B67-9512-E708C6DE798B}']
  { getter & setter } 

    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;
    function get_BinaryLength: Int32;

  { methods } 

    /// <summary>
    ///   创建此访问控制项 (ACE) 的深层副本。
    /// </summary>
    function Copy: DNGenericAce;
    /// <summary>
    ///   确定是否指定  对象是否等于当前  对象。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   用作哈希函数  类。
    ///               方法很适合在哈希算法和数据结构，如哈希表中使用。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   将  对象的内容从指定的偏移量开始封送到指定的字节数组中。
    /// </summary>
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此访问控制项 (ACE) 的类型。
    /// </summary>
    property AceType: DNAceType read get_AceType;
    /// <summary>
    ///   获取或设置  与此相关  对象。
    /// </summary>
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    /// <summary>
    ///   获取一个布尔值，指定访问控制项 (ACE)，继承的还是显式设置。
    /// </summary>
    property IsInherited: Boolean read get_IsInherited;
    /// <summary>
    ///   获取指定此访问控制项 (ACE) 的继承属性的标志。
    /// </summary>
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    /// <summary>
    ///   获取标志，用于指定此访问控制项 (ACE) 的继承传播属性。
    /// </summary>
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    /// <summary>
    ///   获取与此访问控制项 (ACE) 相关联的审核信息。
    /// </summary>
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    /// <summary>
    ///   获取当前  对象的二进制表示形式的长度（以字节为单位）。
    ///               在使用  方法将 ACL 封送到二进制数组之前，应使用此长度。
    /// </summary>
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNGenericAce = class(TDNGenericImport<DNGenericAceClass, DNGenericAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCustomAceClass = interface(DNGenericAceClass)
  ['{5E07C2B0-AF05-4FB0-B8BD-D7DF4D3DD43A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(&type: DNAceType; flags: DNAceFlags; opaque: TArray<Byte>): DNCustomAce;

  end;

  /// <summary>
  ///   表示访问控制项 (ACE) 未定义的成员之一  枚举。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CustomAce')]
  DNCustomAce = interface(DNGenericAce)
  ['{10592DE1-A121-340B-AC31-C5C1EDC4FCF5}']
  { getter & setter } 

    function get_OpaqueLength: Int32;
    function get_BinaryLength: Int32;
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;

  { methods } 

    /// <summary>
    ///   返回与此相关的不透明数据  对象。
    /// </summary>
    function GetOpaque: TArray<Byte>;
    /// <summary>
    ///   设置与此相关的不透明回调数据  对象。
    /// </summary>
    procedure SetOpaque(opaque: TArray<Byte>);
    /// <summary>
    ///   将  对象的内容从指定的偏移量开始封送到指定的字节数组中。
    /// </summary>
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取与此相关的不透明数据的长度  对象。
    /// </summary>
    property OpaqueLength: Int32 read get_OpaqueLength;
    /// <summary>
    ///   获取当前  对象的二进制表示形式的长度（以字节为单位）。
    ///               在使用  方法将 ACL 封送到二进制数组之前，应使用此长度。
    /// </summary>
    property BinaryLength: Int32 read get_BinaryLength;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
  end;

  TDNCustomAce = class(TDNGenericImport<DNCustomAceClass, DNCustomAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNKnownAceClass = interface(DNGenericAceClass)
  ['{C677BFB0-3AE0-4B57-84A6-8F4811FE2C26}']
  end;

  /// <summary>
  ///   封装由 Microsoft Corporation 当前定义的所有访问控制项 (ACE) 类型。
  ///               所有  对象包含 32 位访问掩码和  对象。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.KnownAce')]
  DNKnownAce = interface(DNGenericAce)
  ['{3E5B42D3-CB7D-3071-9D02-7AD9D5B1EE70}']
  { getter & setter } 

    function get_AccessMask: Int32;
    procedure set_AccessMask(value: Int32);
    function get_SecurityIdentifier: DNSecurityIdentifier;
    procedure set_SecurityIdentifier(value: DNSecurityIdentifier);
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;
    function get_BinaryLength: Int32;

  { methods } 

    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置此访问掩码  对象。
    /// </summary>
    property AccessMask: Int32 read get_AccessMask write set_AccessMask;
    /// <summary>
    ///   获取或设置  对象与此相关  对象。
    /// </summary>
    property SecurityIdentifier: DNSecurityIdentifier read get_SecurityIdentifier write set_SecurityIdentifier;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNKnownAce = class(TDNGenericImport<DNKnownAceClass, DNKnownAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCompoundAceClass = interface(DNKnownAceClass)
  ['{4941E242-070D-4899-9D07-4CED98659D49}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(flags: DNAceFlags; accessMask: Int32; compoundAceType: DNCompoundAceType; sid: DNSecurityIdentifier): DNCompoundAce;

  end;

  /// <summary>
  ///   表示复合的访问控制项 (ACE)。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CompoundAce')]
  DNCompoundAce = interface(DNKnownAce)
  ['{421CB600-F3F6-32E4-B21D-EF741FB3EFDB}']
  { getter & setter } 

    function get_CompoundAceType: DNCompoundAceType;
    procedure set_CompoundAceType(value: DNCompoundAceType);
    function get_BinaryLength: Int32;
    function get_AccessMask: Int32;
    procedure set_AccessMask(value: Int32);
    function get_SecurityIdentifier: DNSecurityIdentifier;
    procedure set_SecurityIdentifier(value: DNSecurityIdentifier);
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;

  { methods } 

    /// <summary>
    ///   将  对象的内容从指定的偏移量开始封送到指定的字节数组中。
    /// </summary>
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置此  对象的类型。
    /// </summary>
    property CompoundAceType: DNCompoundAceType read get_CompoundAceType write set_CompoundAceType;
    /// <summary>
    ///   获取当前  对象的二进制表示形式的长度（以字节为单位）。
    ///               在使用  方法将 ACL 封送到二进制数组之前，应使用此长度。
    /// </summary>
    property BinaryLength: Int32 read get_BinaryLength;
    property AccessMask: Int32 read get_AccessMask write set_AccessMask;
    property SecurityIdentifier: DNSecurityIdentifier read get_SecurityIdentifier write set_SecurityIdentifier;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
  end;

  TDNCompoundAce = class(TDNGenericImport<DNCompoundAceClass, DNCompoundAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNQualifiedAceClass = interface(DNKnownAceClass)
  ['{6FD2786E-0E7F-4213-8EC1-837864D5357D}']
  end;

  /// <summary>
  ///   表示包含限定符访问控制项 (ACE)。
  ///               限定符，由表示  对象，请指定该 ACE 是允许访问，拒绝访问、 导致系统审核或导致系统警告。
  ///               类是抽象类的基类  和  类。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.QualifiedAce')]
  DNQualifiedAce = interface(DNKnownAce)
  ['{BA4BBFE9-CA85-3AED-8D38-CE71B983EC73}']
  { getter & setter } 

    function get_AceQualifier: DNAceQualifier;
    function get_IsCallback: Boolean;
    function get_OpaqueLength: Int32;
    function get_AccessMask: Int32;
    procedure set_AccessMask(value: Int32);
    function get_SecurityIdentifier: DNSecurityIdentifier;
    procedure set_SecurityIdentifier(value: DNSecurityIdentifier);
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;
    function get_BinaryLength: Int32;

  { methods } 

    /// <summary>
    ///   返回与此相关的不透明回调数据  对象。
    /// </summary>
    function GetOpaque: TArray<Byte>;
    /// <summary>
    ///   设置与此相关的不透明回调数据  对象。
    /// </summary>
    procedure SetOpaque(opaque: TArray<Byte>);
    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，指定该 ACE 是允许访问，拒绝访问、 导致系统审核或导致系统警告。
    /// </summary>
    property AceQualifier: DNAceQualifier read get_AceQualifier;
    /// <summary>
    ///   指定是否这  对象包含回调的数据。
    /// </summary>
    property IsCallback: Boolean read get_IsCallback;
    /// <summary>
    ///   获取与此相关联的不透明回调数据长度  对象。
    ///               此属性是仅对回调访问控制项 (Ace) 有效。
    /// </summary>
    property OpaqueLength: Int32 read get_OpaqueLength;
    property AccessMask: Int32 read get_AccessMask write set_AccessMask;
    property SecurityIdentifier: DNSecurityIdentifier read get_SecurityIdentifier write set_SecurityIdentifier;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNQualifiedAce = class(TDNGenericImport<DNQualifiedAceClass, DNQualifiedAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCommonAceClass = interface(DNQualifiedAceClass)
  ['{9B0677E7-5FB1-48CB-9EEB-3FC4CB99EF10}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(flags: DNAceFlags; qualifier: DNAceQualifier; accessMask: Int32; sid: DNSecurityIdentifier; isCallback: Boolean; opaque: TArray<Byte>): DNCommonAce;

  { static methods } 

    /// <summary>
    ///   获取回调访问控制项 (ACE) 的不透明数据 BLOB 的最大允许长度。
    /// </summary>
    {class} function MaxOpaqueLength(isCallback: Boolean): Int32;

  end;

  /// <summary>
  ///   表示一个访问控制项 (ACE)。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CommonAce')]
  DNCommonAce = interface(DNQualifiedAce)
  ['{156D0064-6580-3E25-86C9-AAA55315115E}']
  { getter & setter } 

    function get_BinaryLength: Int32;
    function get_AceQualifier: DNAceQualifier;
    function get_IsCallback: Boolean;
    function get_OpaqueLength: Int32;
    function get_AccessMask: Int32;
    procedure set_AccessMask(value: Int32);
    function get_SecurityIdentifier: DNSecurityIdentifier;
    procedure set_SecurityIdentifier(value: DNSecurityIdentifier);
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;

  { methods } 

    /// <summary>
    ///   将  对象的内容从指定的偏移量开始封送到指定的字节数组中。
    /// </summary>
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetOpaque: TArray<Byte>;
    procedure SetOpaque(opaque: TArray<Byte>);
    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前  对象的二进制表示形式的长度（以字节为单位）。
    ///               使用此长度  方法，然后才能将 ACL 封送到二进制数组。
    /// </summary>
    property BinaryLength: Int32 read get_BinaryLength;
    property AceQualifier: DNAceQualifier read get_AceQualifier;
    property IsCallback: Boolean read get_IsCallback;
    property OpaqueLength: Int32 read get_OpaqueLength;
    property AccessMask: Int32 read get_AccessMask write set_AccessMask;
    property SecurityIdentifier: DNSecurityIdentifier read get_SecurityIdentifier write set_SecurityIdentifier;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
  end;

  TDNCommonAce = class(TDNGenericImport<DNCommonAceClass, DNCommonAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNObjectAceClass = interface(DNQualifiedAceClass)
  ['{48F76FB5-9D6E-403F-895A-33DC6D13737A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(aceFlags: DNAceFlags; qualifier: DNAceQualifier; accessMask: Int32; sid: DNSecurityIdentifier; flags: DNObjectAceFlags; &type: DNGuid; inheritedType: DNGuid; isCallback: Boolean; opaque: TArray<Byte>): DNObjectAce;

  { static methods } 

    /// <summary>
    ///   返回回调访问控制项 (ACE) 的不透明数据 BLOB 的最大允许长度（以字节为单位）。
    /// </summary>
    {class} function MaxOpaqueLength(isCallback: Boolean): Int32;

  end;

  /// <summary>
  ///   控制对目录服务对象的访问权限。
  ///               此类表示与目录对象关联的访问控制项 (ACE)。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.ObjectAce')]
  DNObjectAce = interface(DNQualifiedAce)
  ['{C38DC0AC-44DE-3502-BDE4-B77A98A16E66}']
  { getter & setter } 

    function get_ObjectAceFlags: DNObjectAceFlags;
    procedure set_ObjectAceFlags(value: DNObjectAceFlags);
    function get_ObjectAceType: DNGuid;
    procedure set_ObjectAceType(value: DNGuid);
    function get_InheritedObjectAceType: DNGuid;
    procedure set_InheritedObjectAceType(value: DNGuid);
    function get_BinaryLength: Int32;
    function get_AceQualifier: DNAceQualifier;
    function get_IsCallback: Boolean;
    function get_OpaqueLength: Int32;
    function get_AccessMask: Int32;
    procedure set_AccessMask(value: Int32);
    function get_SecurityIdentifier: DNSecurityIdentifier;
    procedure set_SecurityIdentifier(value: DNSecurityIdentifier);
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;

  { methods } 

    /// <summary>
    ///   将  对象的内容从指定的偏移量开始封送到指定的字节数组中。
    /// </summary>
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetOpaque: TArray<Byte>;
    procedure SetOpaque(opaque: TArray<Byte>);
    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置标志，该标志指定  和  属性是否包含标识有效对象类型的值。
    /// </summary>
    property ObjectAceFlags: DNObjectAceFlags read get_ObjectAceFlags write set_ObjectAceFlags;
    /// <summary>
    ///   获取或设置与此  对象关联的对象类型的 GUID。
    /// </summary>
    property ObjectAceType: DNGuid read get_ObjectAceType write set_ObjectAceType;
    /// <summary>
    ///   获取或设置对象类型的 GUID，该对象类型能够继承此  对象所表示的访问控制项 (ACE)。
    /// </summary>
    property InheritedObjectAceType: DNGuid read get_InheritedObjectAceType write set_InheritedObjectAceType;
    /// <summary>
    ///   获取当前  对象的二进制表示形式的长度（以字节为单位）。
    ///               在使用  方法将 ACL 封送到二进制数组之前，应使用此长度。
    /// </summary>
    property BinaryLength: Int32 read get_BinaryLength;
    property AceQualifier: DNAceQualifier read get_AceQualifier;
    property IsCallback: Boolean read get_IsCallback;
    property OpaqueLength: Int32 read get_OpaqueLength;
    property AccessMask: Int32 read get_AccessMask write set_AccessMask;
    property SecurityIdentifier: DNSecurityIdentifier read get_SecurityIdentifier write set_SecurityIdentifier;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
  end;

  TDNObjectAce = class(TDNGenericImport<DNObjectAceClass, DNObjectAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNGenericAclClass = interface(DNObjectClass)
  ['{C7508C89-D9EE-48B7-A7ED-6335AF70C98D}']
  end;

  /// <summary>
  ///   表示访问控制列表 (ACL)，并且是 、、 和  类的基类。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.GenericAcl')]
  DNGenericAcl = interface(DNObject)
  ['{54050215-A62D-305B-9240-2870C61EDDF2}']
  { getter & setter } 

    function get_Revision: Byte;
    function get_BinaryLength: Int32;
    function get_Item(index: Int32): DNGenericAce;
    procedure set_Item(index: Int32; value: DNGenericAce);
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    /// <summary>
    ///   将当前  的每个  复制到指定数组。
    /// </summary>
    procedure CopyTo(&array: TArray<DNGenericAce>; index: Int32);
    /// <summary>
    ///   检索可用于在访问控制列表 (ACL) 中循环访问访问控制项 (ACE) 的对象。
    /// </summary>
    function GetEnumerator: DNAceEnumerator;
    /// <summary>
    ///   将  对象的内容从指定的偏移量开始封送到指定的字节数组中。
    /// </summary>
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  的修订级别。
    /// </summary>
    property Revision: Byte read get_Revision;
    /// <summary>
    ///   获取当前  对象的二进制表示形式的长度（以字节为单位）。
    ///               在使用  方法将 ACL 封送到二进制数组之前，应使用此长度。
    /// </summary>
    property BinaryLength: Int32 read get_BinaryLength;
    property Item[index: Int32]: DNGenericAce read get_Item write set_Item; default;
    /// <summary>
    ///   获取当前  对象中访问控制项 (ACE) 的数量。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   始终将此属性设置为 。
    ///               实现此属性只是因为它是  接口的实现所必需的属性。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    /// <summary>
    ///   此属性始终返回 。
    ///               实现此属性只是因为它是  接口的实现所必需的属性。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNGenericAcl = class(TDNGenericImport<DNGenericAclClass, DNGenericAcl>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCommonAclClass = interface(DNGenericAclClass)
  ['{3D67F685-AFA0-49E6-8D98-29CBBBF4A8FD}']
  end;

  /// <summary>
  ///   表示访问控制列表 (ACL)，并且是  和  类的基类。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CommonAcl')]
  DNCommonAcl = interface(DNGenericAcl)
  ['{9929DF6C-F2D8-311D-B96A-96E559CCD561}']
  { getter & setter } 

    function get_Revision: Byte;
    function get_Count: Int32;
    function get_BinaryLength: Int32;
    function get_IsCanonical: Boolean;
    function get_IsContainer: Boolean;
    function get_IsDS: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    /// <summary>
    ///   将  对象的内容从指定的偏移量开始封送到指定的字节数组中。
    /// </summary>
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    /// <summary>
    ///   从此  对象移除所有继承的访问控制项 (ACE)。
    /// </summary>
    procedure RemoveInheritedAces;
    /// <summary>
    ///   移除被此  对象包含并且与指定的  对象关联的所有访问控制项 (ACE)。
    /// </summary>
    procedure Purge(sid: DNSecurityIdentifier);
    procedure CopyTo(&array: TArray<DNGenericAce>; index: Int32);
    function GetEnumerator: DNAceEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  的修订级别。
    /// </summary>
    property Revision: Byte read get_Revision;
    /// <summary>
    ///   获取当前  对象中访问控制项 (ACE) 的数量。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取当前  对象的二进制表示形式的长度（以字节为单位）。
    ///               应该在使用  方法将访问控制列表封送到二进制数组中之前使用此长度。
    /// </summary>
    property BinaryLength: Int32 read get_BinaryLength;
    /// <summary>
    ///   获取一个布尔值，该值指定当前  对象中的访问控制项 (ACE) 是否处于规范顺序。
    /// </summary>
    property IsCanonical: Boolean read get_IsCanonical;
    /// <summary>
    ///   设置  对象是否为一个容器。
    /// </summary>
    property IsContainer: Boolean read get_IsContainer;
    /// <summary>
    ///   设置当前  对象是否为一个目录对象的访问控制列表 (ACL)。
    /// </summary>
    property IsDS: Boolean read get_IsDS;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNCommonAcl = class(TDNGenericImport<DNCommonAclClass, DNCommonAcl>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNDiscretionaryAclClass = interface(DNCommonAclClass)
  ['{41DC0EDB-0AA1-4EC7-9706-3C25734312E0}']
  { constructors } 

    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    {class} function init(isContainer: Boolean; isDS: Boolean; capacity: Int32): DNDiscretionaryAcl; overload;
    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    {class} function init(isContainer: Boolean; isDS: Boolean; revision: Byte; capacity: Int32): DNDiscretionaryAcl; overload;
    /// <summary>
    ///   新实例初始化  用指定的值从指定的类  对象。
    /// </summary>
    {class} function init(isContainer: Boolean; isDS: Boolean; rawAcl: DNRawAcl): DNDiscretionaryAcl; overload;

  end;

  /// <summary>
  ///   表示自由访问控制列表 (DACL)。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.DiscretionaryAcl')]
  DNDiscretionaryAcl = interface(DNCommonAcl)
  ['{73B64929-C030-33AB-B58F-3DD78A15022B}']
  { getter & setter } 

    function get_Revision: Byte;
    function get_Count: Int32;
    function get_BinaryLength: Int32;
    function get_IsCanonical: Boolean;
    function get_IsContainer: Boolean;
    function get_IsDS: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    /// <summary>
    ///   将使用指定的设置访问控制项 (ACE) 添加到当前  对象。
    /// </summary>
    procedure AddAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    /// <summary>
    ///   设置为指定的指定的访问控制  对象。
    /// </summary>
    procedure SetAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    /// <summary>
    ///   从当前中移除指定的访问控制规则  对象。
    /// </summary>
    function RemoveAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags): Boolean; overload;
    /// <summary>
    ///   指定访问控制项 (ACE)，则删除当前  对象。
    /// </summary>
    procedure RemoveAccessSpecific(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    /// <summary>
    ///   将使用指定的设置访问控制项 (ACE) 添加到当前  对象。
    /// </summary>
    procedure AddAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; rule: DNObjectAccessRule); overload;
    /// <summary>
    ///   将使用指定的设置访问控制项 (ACE) 添加到当前  对象。
    ///               使用此方法为目录对象的访问控制列表 (Acl) 中，为新的 ACE 指定的对象类型或继承的对象类型时。
    /// </summary>
    procedure AddAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    /// <summary>
    ///   设置为指定的指定的访问控制  对象。
    /// </summary>
    procedure SetAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; rule: DNObjectAccessRule); overload;
    /// <summary>
    ///   设置为指定的指定的访问控制  对象。
    /// </summary>
    procedure SetAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    /// <summary>
    ///   从当前中移除指定的访问控制规则  对象。
    /// </summary>
    function RemoveAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; rule: DNObjectAccessRule): Boolean; overload;
    /// <summary>
    ///   从当前中移除指定的访问控制规则  对象。
    ///               使用此方法为目录对象的访问控制列表 (Acl) 中，当指定的对象类型或继承的对象类型。
    /// </summary>
    function RemoveAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid): Boolean; overload;
    /// <summary>
    ///   指定访问控制项 (ACE)，则删除当前  对象。
    /// </summary>
    procedure RemoveAccessSpecific(accessType: DNAccessControlType; sid: DNSecurityIdentifier; rule: DNObjectAccessRule); overload;
    /// <summary>
    ///   指定访问控制项 (ACE)，则删除当前  对象。
    ///               使用此方法为目录对象的访问控制列表 (Acl) 在指定的对象类型或继承的对象类型的 ace 时被删除。
    /// </summary>
    procedure RemoveAccessSpecific(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    procedure RemoveInheritedAces;
    procedure Purge(sid: DNSecurityIdentifier);
    procedure CopyTo(&array: TArray<DNGenericAce>; index: Int32);
    function GetEnumerator: DNAceEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Revision: Byte read get_Revision;
    property Count: Int32 read get_Count;
    property BinaryLength: Int32 read get_BinaryLength;
    property IsCanonical: Boolean read get_IsCanonical;
    property IsContainer: Boolean read get_IsContainer;
    property IsDS: Boolean read get_IsDS;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNDiscretionaryAcl = class(TDNGenericImport<DNDiscretionaryAclClass, DNDiscretionaryAcl>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNSystemAclClass = interface(DNCommonAclClass)
  ['{9AED4937-A934-4B91-B3B0-8CD4269C1CE8}']
  { constructors } 

    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    {class} function init(isContainer: Boolean; isDS: Boolean; capacity: Int32): DNSystemAcl; overload;
    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    {class} function init(isContainer: Boolean; isDS: Boolean; revision: Byte; capacity: Int32): DNSystemAcl; overload;
    /// <summary>
    ///   新实例初始化  用指定的值从指定的类  对象。
    /// </summary>
    {class} function init(isContainer: Boolean; isDS: Boolean; rawAcl: DNRawAcl): DNSystemAcl; overload;

  end;

  /// <summary>
  ///   表示系统访问控制列表 (SACL)。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.SystemAcl')]
  DNSystemAcl = interface(DNCommonAcl)
  ['{4BBBB01D-4D69-3587-8BDF-EEBE1D91991C}']
  { getter & setter } 

    function get_Revision: Byte;
    function get_Count: Int32;
    function get_BinaryLength: Int32;
    function get_IsCanonical: Boolean;
    function get_IsContainer: Boolean;
    function get_IsDS: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    /// <summary>
    ///   将审核规则添加到当前  对象。
    /// </summary>
    procedure AddAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    /// <summary>
    ///   设置为指定指定的审核规则  对象。
    /// </summary>
    procedure SetAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    /// <summary>
    ///   从当前中移除指定的审核规则  对象。
    /// </summary>
    function RemoveAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags): Boolean; overload;
    /// <summary>
    ///   从当前中移除指定的审核规则  对象。
    /// </summary>
    procedure RemoveAuditSpecific(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    /// <summary>
    ///   将审核规则添加到当前  对象。
    /// </summary>
    procedure AddAudit(sid: DNSecurityIdentifier; rule: DNObjectAuditRule); overload;
    /// <summary>
    ///   使用指定的设置与当前添加审核规则  对象。
    ///               此方法用于目录对象的访问控制列表 (Acl) 时指定的对象类型或新的审核规则的继承的对象类型。
    /// </summary>
    procedure AddAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    /// <summary>
    ///   设置为指定指定的审核规则  对象。
    /// </summary>
    procedure SetAudit(sid: DNSecurityIdentifier; rule: DNObjectAuditRule); overload;
    /// <summary>
    ///   设置为指定指定的审核规则  对象。
    ///               使用此方法为目录对象的访问控制列表 (Acl) 中，当指定的对象类型或继承的对象类型。
    /// </summary>
    procedure SetAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    /// <summary>
    ///   从当前中移除指定的审核规则  对象。
    /// </summary>
    function RemoveAudit(sid: DNSecurityIdentifier; rule: DNObjectAuditRule): Boolean; overload;
    /// <summary>
    ///   从当前中移除指定的审核规则  对象。
    ///               使用此方法为目录对象的访问控制列表 (Acl) 中，当指定的对象类型或继承的对象类型。
    /// </summary>
    function RemoveAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid): Boolean; overload;
    /// <summary>
    ///   从当前中移除指定的审核规则  对象。
    /// </summary>
    procedure RemoveAuditSpecific(sid: DNSecurityIdentifier; rule: DNObjectAuditRule); overload;
    /// <summary>
    ///   从当前中移除指定的审核规则  对象。
    ///               使用此方法为目录对象的访问控制列表 (Acl) 中，当指定的对象类型或继承的对象类型。
    /// </summary>
    procedure RemoveAuditSpecific(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    procedure RemoveInheritedAces;
    procedure Purge(sid: DNSecurityIdentifier);
    procedure CopyTo(&array: TArray<DNGenericAce>; index: Int32);
    function GetEnumerator: DNAceEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Revision: Byte read get_Revision;
    property Count: Int32 read get_Count;
    property BinaryLength: Int32 read get_BinaryLength;
    property IsCanonical: Boolean read get_IsCanonical;
    property IsContainer: Boolean read get_IsContainer;
    property IsDS: Boolean read get_IsDS;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNSystemAcl = class(TDNGenericImport<DNSystemAclClass, DNSystemAcl>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNRawAclClass = interface(DNGenericAclClass)
  ['{3E92D37A-3C28-4B28-9ED4-EC8F1B15B707}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有指定的修订级别。
    /// </summary>
    {class} function init(revision: Byte; capacity: Int32): DNRawAcl; overload;
    /// <summary>
    ///   新实例初始化  类从指定的二进制格式。
    /// </summary>
    {class} function init(binaryForm: TArray<Byte>; offset: Int32): DNRawAcl; overload;

  end;

  /// <summary>
  ///   表示访问控制列表 (ACL)。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.RawAcl')]
  DNRawAcl = interface(DNGenericAcl)
  ['{8ACF0D5E-B5B9-3374-B448-CCE69CA901E2}']
  { getter & setter } 

    function get_Revision: Byte;
    function get_Count: Int32;
    function get_BinaryLength: Int32;
    function get_Item(index: Int32): DNGenericAce;
    procedure set_Item(index: Int32; value: DNGenericAce);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    /// <summary>
    ///   将  对象的内容从指定的偏移量开始封送到指定的字节数组中。
    /// </summary>
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    /// <summary>
    ///   指定索引处插入指定的访问控制项 (ACE)。
    /// </summary>
    procedure InsertAce(index: Int32; ace: DNGenericAce);
    /// <summary>
    ///   移除位于指定位置的访问控制项 (ACE)。
    /// </summary>
    procedure RemoveAce(index: Int32);
    procedure CopyTo(&array: TArray<DNGenericAce>; index: Int32);
    function GetEnumerator: DNAceEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  的修订级别。
    /// </summary>
    property Revision: Byte read get_Revision;
    /// <summary>
    ///   获取当前  对象中访问控制项 (ACE) 的数量。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取当前  对象的二进制表示形式的长度（以字节为单位）。
    ///               在使用  方法将 ACL 封送到二进制数组之前，应使用此长度。
    /// </summary>
    property BinaryLength: Int32 read get_BinaryLength;
    property Item[index: Int32]: DNGenericAce read get_Item write set_Item; default;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNRawAcl = class(TDNGenericImport<DNRawAclClass, DNRawAcl>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNGenericSecurityDescriptorClass = interface(DNObjectClass)
  ['{6D2C30C1-A74E-42A9-8005-8738BFF57CE7}']
  { static getter & setter } 

    {class} function get_Revision: Byte;

  { static methods } 

    /// <summary>
    ///   返回一个布尔值，该值指示与此  对象相关联的安全描述符是否可以转换为安全描述符定义语言 (SDDL) 格式。
    /// </summary>
    {class} function IsSddlConversionSupported: Boolean;

  { static propertys } 

    /// <summary>
    ///   获取  对象的修订级别。
    /// </summary>
    {class} property Revision: Byte read get_Revision;
  end;

  /// <summary>
  ///   表示一个安全描述符。
  ///               安全描述符包括所有者、 主要组、 自定义访问控制列表 (DACL) 和系统访问控制列表 (SACL)。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.GenericSecurityDescriptor')]
  DNGenericSecurityDescriptor = interface(DNObject)
  ['{D3937FA4-013D-3019-A9D0-2C2323EE4E31}']
  { getter & setter } 

    function get_ControlFlags: DNControlFlags;
    function get_Owner: DNSecurityIdentifier;
    procedure set_Owner(value: DNSecurityIdentifier);
    function get_Group: DNSecurityIdentifier;
    procedure set_Group(value: DNSecurityIdentifier);
    function get_BinaryLength: Int32;

  { methods } 

    /// <summary>
    ///   返回表示此  对象中包含的信息的字节值数组。
    /// </summary>
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    /// <summary>
    ///   返回此  对象所表示的安全描述符的指定部分的安全描述符定义语言 (SDDL) 表示形式。
    /// </summary>
    function GetSddlForm(includeSections: DNAccessControlSections): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取指定  对象的行为的值。
    /// </summary>
    property ControlFlags: DNControlFlags read get_ControlFlags;
    /// <summary>
    ///   获取或设置与此  关联的对象的所有者。
    /// </summary>
    property Owner: DNSecurityIdentifier read get_Owner write set_Owner;
    /// <summary>
    ///   获取或设置此  对象的主要组。
    /// </summary>
    property Group: DNSecurityIdentifier read get_Group write set_Group;
    /// <summary>
    ///   获取当前  对象的二进制表示形式的长度（以字节为单位）。
    ///               在使用  方法将 ACL 封送到二进制数组之前，应使用此长度。
    /// </summary>
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNGenericSecurityDescriptor = class(TDNGenericImport<DNGenericSecurityDescriptorClass, DNGenericSecurityDescriptor>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCommonSecurityDescriptorClass = interface(DNGenericSecurityDescriptorClass)
  ['{29BB7D8F-7F4A-4EAD-8608-9EB5B2B76454}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类从指定的信息。
    /// </summary>
    {class} function init(isContainer: Boolean; isDS: Boolean; flags: DNControlFlags; owner: DNSecurityIdentifier; group: DNSecurityIdentifier; systemAcl: DNSystemAcl; discretionaryAcl: DNDiscretionaryAcl): DNCommonSecurityDescriptor; overload;
    /// <summary>
    ///   新实例初始化  类从指定  对象。
    /// </summary>
    {class} function init(isContainer: Boolean; isDS: Boolean; rawSecurityDescriptor: DNRawSecurityDescriptor): DNCommonSecurityDescriptor; overload;
    /// <summary>
    ///   新实例初始化  类从指定的安全描述符定义语言 (SDDL) 字符串。
    /// </summary>
    {class} function init(isContainer: Boolean; isDS: Boolean; sddlForm: string): DNCommonSecurityDescriptor; overload;
    /// <summary>
    ///   新实例初始化  类从指定数组的字节值。
    /// </summary>
    {class} function init(isContainer: Boolean; isDS: Boolean; binaryForm: TArray<Byte>; offset: Int32): DNCommonSecurityDescriptor; overload;

  end;

  /// <summary>
  ///   表示一个安全描述符。
  ///               安全描述符包括所有者、 主要组、 自定义访问控制列表 (DACL) 和系统访问控制列表 (SACL)。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CommonSecurityDescriptor')]
  DNCommonSecurityDescriptor = interface(DNGenericSecurityDescriptor)
  ['{78600CD4-D091-37C5-A005-E840A508ABDB}']
  { getter & setter } 

    function get_IsContainer: Boolean;
    function get_IsDS: Boolean;
    function get_ControlFlags: DNControlFlags;
    function get_Owner: DNSecurityIdentifier;
    procedure set_Owner(value: DNSecurityIdentifier);
    function get_Group: DNSecurityIdentifier;
    procedure set_Group(value: DNSecurityIdentifier);
    function get_SystemAcl: DNSystemAcl;
    procedure set_SystemAcl(value: DNSystemAcl);
    function get_DiscretionaryAcl: DNDiscretionaryAcl;
    procedure set_DiscretionaryAcl(value: DNDiscretionaryAcl);
    function get_IsSystemAclCanonical: Boolean;
    function get_IsDiscretionaryAclCanonical: Boolean;
    function get_BinaryLength: Int32;

  { methods } 

    /// <summary>
    ///   系统访问控制列表 (SACL) 与此相关联的设置继承保护  对象。
    ///               受保护的 Sacl 不会从父容器继承审核规则。
    /// </summary>
    procedure SetSystemAclProtection(isProtected: Boolean; preserveInheritance: Boolean);
    /// <summary>
    ///   自由访问控制列表 (DACL) 与此相关联的设置继承保护  对象。
    ///               受保护的 Dacl 不继承父容器的访问规则。
    /// </summary>
    procedure SetDiscretionaryAclProtection(isProtected: Boolean; preserveInheritance: Boolean);
    /// <summary>
    ///   与此关联的指定的安全标识符从自由访问控制列表 (DACL) 中移除所有访问规则  对象。
    /// </summary>
    procedure PurgeAccessControl(sid: DNSecurityIdentifier);
    /// <summary>
    ///   与此关联的指定的安全标识符从系统访问控制列表 (SACL) 中移除所有审核规则  对象。
    /// </summary>
    procedure PurgeAudit(sid: DNSecurityIdentifier);
    /// <summary>
    ///   设置  属性为此  实例并设置  标志。
    /// </summary>
    procedure AddDiscretionaryAcl(revision: Byte; trusted: Int32);
    /// <summary>
    ///   设置  属性为此  实例并设置  标志。
    /// </summary>
    procedure AddSystemAcl(revision: Byte; trusted: Int32);
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetSddlForm(includeSections: DNAccessControlSections): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个布尔值，指定与此关联的对象是否  对象是一个容器对象。
    /// </summary>
    property IsContainer: Boolean read get_IsContainer;
    /// <summary>
    ///   获取一个布尔值，指定与此关联的对象是否  对象是一个目录对象。
    /// </summary>
    property IsDS: Boolean read get_IsDS;
    /// <summary>
    ///   获取指定  对象的行为的值。
    /// </summary>
    property ControlFlags: DNControlFlags read get_ControlFlags;
    /// <summary>
    ///   获取或设置与此  关联的对象的所有者。
    /// </summary>
    property Owner: DNSecurityIdentifier read get_Owner write set_Owner;
    /// <summary>
    ///   获取或设置此  对象的主要组。
    /// </summary>
    property Group: DNSecurityIdentifier read get_Group write set_Group;
    /// <summary>
    ///   获取或设置此系统访问控制列表 (SACL)  对象。
    ///               SACL 包含审核规则。
    /// </summary>
    property SystemAcl: DNSystemAcl read get_SystemAcl write set_SystemAcl;
    /// <summary>
    ///   获取或设置此自由访问控制列表 (DACL)  对象。
    ///               DACL 包含访问规则。
    /// </summary>
    property DiscretionaryAcl: DNDiscretionaryAcl read get_DiscretionaryAcl write set_DiscretionaryAcl;
    /// <summary>
    ///   获取一个布尔值，指定是否系统访问控制列表 (SACL) 相关联的与此  对象处于规范顺序。
    /// </summary>
    property IsSystemAclCanonical: Boolean read get_IsSystemAclCanonical;
    /// <summary>
    ///   获取一个布尔值，指定是否自由访问控制列表 (DACL) 相关联的与此  对象处于规范顺序。
    /// </summary>
    property IsDiscretionaryAclCanonical: Boolean read get_IsDiscretionaryAclCanonical;
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNCommonSecurityDescriptor = class(TDNGenericImport<DNCommonSecurityDescriptorClass, DNCommonSecurityDescriptor>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNRawSecurityDescriptorClass = interface(DNGenericSecurityDescriptorClass)
  ['{975AD18D-6BD6-4DDF-A1CC-E501CECAB92F}']
  { constructors } 

    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    {class} function init(flags: DNControlFlags; owner: DNSecurityIdentifier; group: DNSecurityIdentifier; systemAcl: DNRawAcl; discretionaryAcl: DNRawAcl): DNRawSecurityDescriptor; overload;
    /// <summary>
    ///   新实例初始化  类从指定的安全描述符定义语言 (SDDL) 字符串。
    /// </summary>
    {class} function init(sddlForm: string): DNRawSecurityDescriptor; overload;
    /// <summary>
    ///   新实例初始化  类从指定数组的字节值。
    /// </summary>
    {class} function init(binaryForm: TArray<Byte>; offset: Int32): DNRawSecurityDescriptor; overload;

  end;

  /// <summary>
  ///   表示一个安全描述符。
  ///               安全描述符包括所有者、 主要组、 自定义访问控制列表 (DACL) 和系统访问控制列表 (SACL)。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.RawSecurityDescriptor')]
  DNRawSecurityDescriptor = interface(DNGenericSecurityDescriptor)
  ['{C6D87293-53B6-3A48-AC5D-86502229B89A}']
  { getter & setter } 

    function get_ControlFlags: DNControlFlags;
    function get_Owner: DNSecurityIdentifier;
    procedure set_Owner(value: DNSecurityIdentifier);
    function get_Group: DNSecurityIdentifier;
    procedure set_Group(value: DNSecurityIdentifier);
    function get_SystemAcl: DNRawAcl;
    procedure set_SystemAcl(value: DNRawAcl);
    function get_DiscretionaryAcl: DNRawAcl;
    procedure set_DiscretionaryAcl(value: DNRawAcl);
    function get_ResourceManagerControl: Byte;
    procedure set_ResourceManagerControl(value: Byte);
    function get_BinaryLength: Int32;

  { methods } 

    /// <summary>
    ///   集  属性  对象传递给指定的值。
    /// </summary>
    procedure SetFlags(flags: DNControlFlags);
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetSddlForm(includeSections: DNAccessControlSections): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取指定的行为的值  对象。
    /// </summary>
    property ControlFlags: DNControlFlags read get_ControlFlags;
    /// <summary>
    ///   获取或设置与此相关联的对象的所有者  对象。
    /// </summary>
    property Owner: DNSecurityIdentifier read get_Owner write set_Owner;
    /// <summary>
    ///   获取或设置此的主要组  对象。
    /// </summary>
    property Group: DNSecurityIdentifier read get_Group write set_Group;
    /// <summary>
    ///   获取或设置此系统访问控制列表 (SACL)  对象。
    ///               SACL 包含审核规则。
    /// </summary>
    property SystemAcl: DNRawAcl read get_SystemAcl write set_SystemAcl;
    /// <summary>
    ///   获取或设置此自由访问控制列表 (DACL)  对象。
    ///               DACL 包含访问规则。
    /// </summary>
    property DiscretionaryAcl: DNRawAcl read get_DiscretionaryAcl write set_DiscretionaryAcl;
    /// <summary>
    ///   获取或设置一个字节值，表示与此相关的资源管理器控制位  对象。
    /// </summary>
    property ResourceManagerControl: Byte read get_ResourceManagerControl write set_ResourceManagerControl;
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNRawSecurityDescriptor = class(TDNGenericImport<DNRawSecurityDescriptorClass, DNRawSecurityDescriptor>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNObjectSecurityClass = interface(DNObjectClass)
  ['{9CB583F9-D64B-499A-AF22-14B4FEA2D3D1}']
  { static methods } 

    /// <summary>
    ///   返回一个布尔值，该值指示与此  对象相关联的安全描述符是否可以转换为安全描述符定义语言 (SDDL) 格式。
    /// </summary>
    {class} function IsSddlConversionSupported: Boolean;

  end;

  /// <summary>
  ///   在没有直接操作访问控制列表 (ACL) 的情况下，提供对对象的访问控制权限。
  ///               此类是  类和  类的抽象基类。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.ObjectSecurity')]
  DNObjectSecurity = interface(DNObject)
  ['{86AB64A5-C64B-3D80-832D-02E0E8703D4C}']
  { getter & setter } 

    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;
    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;

  { methods } 

    /// <summary>
    ///   获取与指定主要组关联的所有者。
    /// </summary>
    function GetOwner(targetType: DNType): DNIdentityReference;
    /// <summary>
    ///   设置与此  对象关联的安全描述符的所有者。
    /// </summary>
    procedure SetOwner(identity: DNIdentityReference);
    /// <summary>
    ///   获取与指定所有者关联的主要组。
    /// </summary>
    function GetGroup(targetType: DNType): DNIdentityReference;
    /// <summary>
    ///   设置与此  对象关联的安全描述符的主要组。
    /// </summary>
    procedure SetGroup(identity: DNIdentityReference);
    /// <summary>
    ///   删除与指定  关联的所有访问规则。
    /// </summary>
    procedure PurgeAccessRules(identity: DNIdentityReference);
    /// <summary>
    ///   删除与指定  关联的所有审核规则。
    /// </summary>
    procedure PurgeAuditRules(identity: DNIdentityReference);
    /// <summary>
    ///   设置或删除与此  对象相关联的访问规则保护。
    ///               父级对象不能通过继承来修改受保护的访问规则。
    /// </summary>
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    /// <summary>
    ///   设置或删除与此  对象相关联的审核规则保护。
    ///               不能由通过继承的父级对象修改受保护的审核规则。
    /// </summary>
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    /// <summary>
    ///   返回与此  对象关联的安全描述符的指定部分的安全描述符定义语言 (SDDL) 表示形式。
    /// </summary>
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    /// <summary>
    ///   根据指定的安全描述符定义语言 (SDDL) 字符串设置此  对象的安全描述符。
    /// </summary>
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    /// <summary>
    ///   根据指定的安全描述符定义语言 (SDDL) 字符串设置此  对象的安全描述符的指定部分。
    /// </summary>
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    /// <summary>
    ///   返回表示此  对象的安全描述符信息的字节值数组。
    /// </summary>
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    /// <summary>
    ///   根据指定的字节值数组设置此  对象的安全描述符。
    /// </summary>
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    /// <summary>
    ///   根据指定的字节值数组设置此  对象的安全描述符的指定部分。
    /// </summary>
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个布尔值，用于指定与  对象关联的自定义访问控制列表 (DACL) 是否受到保护。
    /// </summary>
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    /// <summary>
    ///   获取一个布尔值，该值指定与此  对象关联的系统访问控制列表 (SACL) 是否受保护。
    /// </summary>
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    /// <summary>
    ///   获取一个布尔值，该值指定与此  对象关联的访问规则是否处于规范顺序。
    /// </summary>
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    /// <summary>
    ///   获取一个布尔值，该值指定与此  对象关联的审核规则是否处于规范顺序。
    /// </summary>
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
    /// <summary>
    ///   获取与此  对象关联的安全对象的 。
    /// </summary>
    property AccessRightType: DNType read get_AccessRightType;
    /// <summary>
    ///   获取与此  对象的访问规则关联的对象的 。
    ///               对象必须是可以转换为  对象的对象。
    /// </summary>
    property AccessRuleType: DNType read get_AccessRuleType;
    /// <summary>
    ///   获取与此  对象的审核规则关联的  对象。
    ///               对象必须是可以转换为  对象的对象。
    /// </summary>
    property AuditRuleType: DNType read get_AuditRuleType;
  end;

  TDNObjectSecurity = class(TDNGenericImport<DNObjectSecurityClass, DNObjectSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCommonObjectSecurityClass = interface(DNObjectSecurityClass)
  ['{1A0C2C3A-F601-428F-BD0D-ADA3E708953C}']
  end;

  /// <summary>
  ///   控制访问的对象，而直接操作的访问控制列表 (Acl)。
  ///               此类是抽象类的基类  类。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CommonObjectSecurity')]
  DNCommonObjectSecurity = interface(DNObjectSecurity)
  ['{094790A0-69AF-36AD-B914-2FEE49AD2B8B}']
  { getter & setter } 

    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;
    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;

  { methods } 

    /// <summary>
    ///   获取与指定的安全标识符关联的访问规则的集合。
    /// </summary>
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    /// <summary>
    ///   获取与指定的安全标识符相关联的审核规则的集合。
    /// </summary>
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
  end;

  TDNCommonObjectSecurity = class(TDNGenericImport<DNCommonObjectSecurityClass, DNCommonObjectSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNNativeObjectSecurityClass = interface(DNCommonObjectSecurityClass)
  ['{4F56C373-00E2-48F8-AF65-9644F4D5D8D6}']
  end;

  /// <summary>
  ///   提供无需直接操作访问控制列表 (ACL) 而控制对本机对象的访问的能力。
  ///               本机对象类型由  枚举定义。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.NativeObjectSecurity')]
  DNNativeObjectSecurity = interface(DNCommonObjectSecurity)
  ['{A4F31F56-3EEF-3A46-8C86-53DA29DF55E0}']
  { getter & setter } 

    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;
    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;

  { methods } 

    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
  end;

  TDNNativeObjectSecurity = class(TDNGenericImport<DNNativeObjectSecurityClass, DNNativeObjectSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCryptoKeySecurityClass = interface(DNNativeObjectSecurityClass)
  ['{C763EE09-237F-4665-8B01-B9A10F674B62}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCryptoKeySecurity; overload;
    /// <summary>
    ///   初始化的新实例  类通过使用指定的安全描述符。
    /// </summary>
    {class} function init(securityDescriptor: DNCommonSecurityDescriptor): DNCryptoKeySecurity; overload;

  end;

  /// <summary>
  ///   能够控制对加密密钥对象而无需直接操作的访问控制列表 (ACL) 的访问。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.CryptoKeySecurity')]
  DNCryptoKeySecurity = interface(DNNativeObjectSecurity)
  ['{644CFA5D-3000-3F8A-99E6-FE10197B6C79}']
  { getter & setter } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    /// <summary>
    ///   添加指定的访问规则到自由访问控制列表 (DACL) 与此相关  对象。
    /// </summary>
    procedure AddAccessRule(rule: DNCryptoKeyAccessRule);
    /// <summary>
    ///   移除包含相同的安全标识符和限定符，因为指定的访问规则中自由访问控制列表 (DACL) 与此相关的所有访问规则  对象，然后添加指定的访问规则。
    /// </summary>
    procedure SetAccessRule(rule: DNCryptoKeyAccessRule);
    /// <summary>
    ///   移除在随机访问控制列表 (DACL) 与此相关的所有访问规则  对象，然后添加指定的访问规则。
    /// </summary>
    procedure ResetAccessRule(rule: DNCryptoKeyAccessRule);
    /// <summary>
    ///   删除具有相同的安全标识符和访问掩码指定的访问规则从自由访问控制列表 (DACL) 与此相关联的访问规则  对象。
    /// </summary>
    function RemoveAccessRule(rule: DNCryptoKeyAccessRule): Boolean;
    /// <summary>
    ///   移除所有具有相同的安全标识符指定的访问规则从自由访问控制列表 (DACL) 与此相关联的访问规则  对象。
    /// </summary>
    procedure RemoveAccessRuleAll(rule: DNCryptoKeyAccessRule);
    /// <summary>
    ///   移除与指定的访问规则从自由访问控制列表 (DACL) 与此相关完全匹配的所有访问规则  对象。
    /// </summary>
    procedure RemoveAccessRuleSpecific(rule: DNCryptoKeyAccessRule);
    /// <summary>
    ///   添加指定的审核规则到系统访问控制列表 (SACL) 与此相关  对象。
    /// </summary>
    procedure AddAuditRule(rule: DNCryptoKeyAuditRule);
    /// <summary>
    ///   移除包含相同的安全标识符和限定符，因为指定的审核规则系统访问控制列表 (SACL) 中与此相关的所有审核规则  对象，然后添加指定的审核规则。
    /// </summary>
    procedure SetAuditRule(rule: DNCryptoKeyAuditRule);
    /// <summary>
    ///   删除具有相同的安全标识符和访问掩码，如指定的审核规则从系统访问控制列表 (SACL) 与此相关的审核规则  对象。
    /// </summary>
    function RemoveAuditRule(rule: DNCryptoKeyAuditRule): Boolean;
    /// <summary>
    ///   移除所有具有相同的安全标识符指定的审核规则从系统访问控制列表 (SACL) 与此相关联的审核规则  对象。
    /// </summary>
    procedure RemoveAuditRuleAll(rule: DNCryptoKeyAuditRule);
    /// <summary>
    ///   移除与指定的审核规则从系统访问控制列表 (SACL) 与此相关完全匹配的所有审核规则  对象。
    /// </summary>
    procedure RemoveAuditRuleSpecific(rule: DNCryptoKeyAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  与此相关的可保护对象  对象。
    /// </summary>
    property AccessRightType: DNType read get_AccessRightType;
    /// <summary>
    ///   获取  与关联的对象的访问规则  对象。
    ///               对象必须是可以转换为  对象的对象。
    /// </summary>
    property AccessRuleType: DNType read get_AccessRuleType;
    /// <summary>
    ///   获取与此  对象的审核规则关联的  对象。
    ///               对象必须是可以转换为  对象的对象。
    /// </summary>
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNCryptoKeySecurity = class(TDNGenericImport<DNCryptoKeySecurityClass, DNCryptoKeySecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNEventWaitHandleSecurityClass = interface(DNNativeObjectSecurityClass)
  ['{D340609D-8691-415B-9B2C-E63246C78504}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNEventWaitHandleSecurity;

  end;

  /// <summary>
  ///   表示应用于已命名的系统等待句柄的 Windows 访问控制安全性。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.EventWaitHandleSecurity')]
  DNEventWaitHandleSecurity = interface(DNNativeObjectSecurity)
  ['{40399A3A-7066-3F43-9216-7E1E3AF80032}']
  { getter & setter } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    /// <summary>
    ///   创建具有指定的访问权限、 访问控制和标志指定的用户，新的访问控制规则。
    /// </summary>
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    /// <summary>
    ///   创建一个新的审核规则，此规则适用于要审核的访问权限以及审核规则将触发的结果将用户指定。
    /// </summary>
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    /// <summary>
    ///   搜索匹配访问控制规则可以与之合并新规则。
    ///               如果未找到，则添加新规则。
    /// </summary>
    procedure AddAccessRule(rule: DNEventWaitHandleAccessRule);
    /// <summary>
    ///   移除所有访问控制规则具有相同的用户和  （允许或拒绝） 与指定的规则，然后添加指定的规则。
    /// </summary>
    procedure SetAccessRule(rule: DNEventWaitHandleAccessRule);
    /// <summary>
    ///   移除所有访问控制规则具有相同用户作为指定的规则，而不考虑 , ，然后添加指定的规则。
    /// </summary>
    procedure ResetAccessRule(rule: DNEventWaitHandleAccessRule);
    /// <summary>
    ///   搜索与同一用户的访问控制规则和  （允许或拒绝） 与指定的访问权限的规则，并具有兼容的继承和传播标志; 如果找到此类规则，则指定的访问规则中包含的权限都将从中删除。
    /// </summary>
    function RemoveAccessRule(rule: DNEventWaitHandleAccessRule): Boolean;
    /// <summary>
    ///   搜索所有访问控制规则具有相同的用户和  （允许或拒绝） 与指定规则并且，如果找到，则删除它们。
    /// </summary>
    procedure RemoveAccessRuleAll(rule: DNEventWaitHandleAccessRule);
    /// <summary>
    ///   搜索完全匹配指定的访问控制规则的规则并且，如果找到，则删除它。
    /// </summary>
    procedure RemoveAccessRuleSpecific(rule: DNEventWaitHandleAccessRule);
    /// <summary>
    ///   审核搜索与新的规则可以合并规则。
    ///               如果未找到，则添加新规则。
    /// </summary>
    procedure AddAuditRule(rule: DNEventWaitHandleAuditRule);
    /// <summary>
    ///   移除所有审核规则具有相同的用户与指定的规则，而不考虑  值，然后再添加指定的规则。
    /// </summary>
    procedure SetAuditRule(rule: DNEventWaitHandleAuditRule);
    /// <summary>
    ///   搜索与同一用户与指定的规则，并具有兼容的继承和传播标志; 审核规则如果找到一个兼容的规则，都将从中删除指定的规则中包含的权限。
    /// </summary>
    function RemoveAuditRule(rule: DNEventWaitHandleAuditRule): Boolean;
    /// <summary>
    ///   搜索有关的所有审核与同一用户与指定的规则的规则以及是否找到，将其删除。
    /// </summary>
    procedure RemoveAuditRuleAll(rule: DNEventWaitHandleAuditRule);
    /// <summary>
    ///   搜索完全匹配指定的审核规则并且，如果找到，则删除它。
    /// </summary>
    procedure RemoveAuditRuleSpecific(rule: DNEventWaitHandleAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取枚举类型  类用于表示的访问权限。
    /// </summary>
    property AccessRightType: DNType read get_AccessRightType;
    /// <summary>
    ///   获取类型  类用于表示访问规则。
    /// </summary>
    property AccessRuleType: DNType read get_AccessRuleType;
    /// <summary>
    ///   获取类型  类用于表示审核规则。
    /// </summary>
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNEventWaitHandleSecurity = class(TDNGenericImport<DNEventWaitHandleSecurityClass, DNEventWaitHandleSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNFileSystemSecurityClass = interface(DNNativeObjectSecurityClass)
  ['{D1BEA6CE-B843-4FE0-8782-930C19D22C93}']
  end;

  /// <summary>
  ///   表示访问控制和审核文件或目录的安全性。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.FileSystemSecurity')]
  DNFileSystemSecurity = interface(DNNativeObjectSecurity)
  ['{2498CD98-E5FD-37E9-A087-7F21AC7EB306}']
  { getter & setter } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    /// <summary>
    ///   新实例初始化  类，表示指定的用户，使用指定的访问权限、 访问控制和标志的新的访问控制规则。
    /// </summary>
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    /// <summary>
    ///   新实例初始化  表示为指定的用户指定的审核规则类。
    /// </summary>
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    /// <summary>
    ///   将指定的访问控制列表 (ACL) 权限添加到当前文件或目录。
    /// </summary>
    procedure AddAccessRule(rule: DNFileSystemAccessRule);
    /// <summary>
    ///   设置对当前文件或目录的指定的访问控制列表 (ACL) 权限。
    /// </summary>
    procedure SetAccessRule(rule: DNFileSystemAccessRule);
    /// <summary>
    ///   将指定的访问控制列表 (ACL) 权限添加到当前文件或目录，并删除所有匹配的 ACL 权限。
    /// </summary>
    procedure ResetAccessRule(rule: DNFileSystemAccessRule);
    /// <summary>
    ///   移除所有匹配允许或拒绝访问控制列表 (ACL) 从当前文件或目录的权限。
    /// </summary>
    function RemoveAccessRule(rule: DNFileSystemAccessRule): Boolean;
    /// <summary>
    ///   从当前文件或目录中删除指定的用户的所有访问控制列表 (ACL) 权限。
    /// </summary>
    procedure RemoveAccessRuleAll(rule: DNFileSystemAccessRule);
    /// <summary>
    ///   移除单个匹配允许或拒绝从当前文件或目录的访问控制列表 (ACL) 权限。
    /// </summary>
    procedure RemoveAccessRuleSpecific(rule: DNFileSystemAccessRule);
    /// <summary>
    ///   将指定的审核规则添加到当前文件或目录。
    /// </summary>
    procedure AddAuditRule(rule: DNFileSystemAuditRule);
    /// <summary>
    ///   设置当前文件或目录的指定的审核规则。
    /// </summary>
    procedure SetAuditRule(rule: DNFileSystemAuditRule);
    /// <summary>
    ///   移除所有匹配允许或拒绝审核规则从当前文件或目录。
    /// </summary>
    function RemoveAuditRule(rule: DNFileSystemAuditRule): Boolean;
    /// <summary>
    ///   从当前文件或目录中删除指定的用户的所有审核规则。
    /// </summary>
    procedure RemoveAuditRuleAll(rule: DNFileSystemAuditRule);
    /// <summary>
    ///   移除单个匹配允许或拒绝审核规则从当前文件或目录。
    /// </summary>
    procedure RemoveAuditRuleSpecific(rule: DNFileSystemAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取枚举  类用于表示的访问权限。
    /// </summary>
    property AccessRightType: DNType read get_AccessRightType;
    /// <summary>
    ///   获取枚举  类用于表示访问规则。
    /// </summary>
    property AccessRuleType: DNType read get_AccessRuleType;
    /// <summary>
    ///   获取类型  类用于表示审核规则。
    /// </summary>
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNFileSystemSecurity = class(TDNGenericImport<DNFileSystemSecurityClass, DNFileSystemSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNDirectorySecurityClass = interface(DNFileSystemSecurityClass)
  ['{86B88D19-A3D9-4002-A0A8-278DF7F3E75A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDirectorySecurity; overload;
    /// <summary>
    ///   新实例初始化  类从指定的目录使用指定的值的  枚举。
    /// </summary>
    {class} function init(name: string; includeSections: DNAccessControlSections): DNDirectorySecurity; overload;

  end;

  /// <summary>
  ///   表示访问控制和审核安全目录。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.DirectorySecurity')]
  DNDirectorySecurity = interface(DNFileSystemSecurity)
  ['{9ADA9878-87D9-3BF7-BE70-86A1046C2038}']
  { getter & setter } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    procedure AddAccessRule(rule: DNFileSystemAccessRule);
    procedure SetAccessRule(rule: DNFileSystemAccessRule);
    procedure ResetAccessRule(rule: DNFileSystemAccessRule);
    function RemoveAccessRule(rule: DNFileSystemAccessRule): Boolean;
    procedure RemoveAccessRuleAll(rule: DNFileSystemAccessRule);
    procedure RemoveAccessRuleSpecific(rule: DNFileSystemAccessRule);
    procedure AddAuditRule(rule: DNFileSystemAuditRule);
    procedure SetAuditRule(rule: DNFileSystemAuditRule);
    function RemoveAuditRule(rule: DNFileSystemAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNFileSystemAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNFileSystemAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNDirectorySecurity = class(TDNGenericImport<DNDirectorySecurityClass, DNDirectorySecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNFileSecurityClass = interface(DNFileSystemSecurityClass)
  ['{D878CB82-D489-45CE-95CE-E19E04D89628}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNFileSecurity; overload;
    /// <summary>
    ///   新实例初始化  类从指定的文件使用指定的值的  枚举。
    /// </summary>
    {class} function init(fileName: string; includeSections: DNAccessControlSections): DNFileSecurity; overload;

  end;

  /// <summary>
  ///   表示访问控制和审核对文件的安全。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.FileSecurity')]
  DNFileSecurity = interface(DNFileSystemSecurity)
  ['{DFFFF83D-FC29-3C1E-B8B9-4A6E5D2B9086}']
  { getter & setter } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    procedure AddAccessRule(rule: DNFileSystemAccessRule);
    procedure SetAccessRule(rule: DNFileSystemAccessRule);
    procedure ResetAccessRule(rule: DNFileSystemAccessRule);
    function RemoveAccessRule(rule: DNFileSystemAccessRule): Boolean;
    procedure RemoveAccessRuleAll(rule: DNFileSystemAccessRule);
    procedure RemoveAccessRuleSpecific(rule: DNFileSystemAccessRule);
    procedure AddAuditRule(rule: DNFileSystemAuditRule);
    procedure SetAuditRule(rule: DNFileSystemAuditRule);
    function RemoveAuditRule(rule: DNFileSystemAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNFileSystemAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNFileSystemAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNFileSecurity = class(TDNGenericImport<DNFileSecurityClass, DNFileSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNMutexSecurityClass = interface(DNNativeObjectSecurityClass)
  ['{FA514FE6-A7D2-4DD5-9276-603F20850090}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNMutexSecurity; overload;
    /// <summary>
    ///   新实例初始化  的指定部分的访问控制安全性规则从具有指定名称的系统互斥体的类。
    /// </summary>
    {class} function init(name: string; includeSections: DNAccessControlSections): DNMutexSecurity; overload;

  end;

  /// <summary>
  ///   表示已命名的互斥体的 Windows 访问控制安全性。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.MutexSecurity')]
  DNMutexSecurity = interface(DNNativeObjectSecurity)
  ['{8D9FBB7E-1245-3FB9-81DD-969686FE2DA3}']
  { getter & setter } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    /// <summary>
    ///   搜索匹配访问控制规则可以与之合并新规则。
    ///               如果未找到，则添加新规则。
    /// </summary>
    procedure AddAccessRule(rule: DNMutexAccessRule);
    /// <summary>
    ///   创建具有指定的访问权限、 访问控制和标志指定的用户，新的访问控制规则。
    /// </summary>
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    /// <summary>
    ///   创建一个新的审核规则，此规则适用于要审核的访问权限以及审核规则将触发的结果将用户指定。
    /// </summary>
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    /// <summary>
    ///   移除所有访问控制规则具有相同的用户和  （允许或拒绝） 与指定的规则，然后添加指定的规则。
    /// </summary>
    procedure SetAccessRule(rule: DNMutexAccessRule);
    /// <summary>
    ///   移除所有访问控制规则具有相同用户作为指定的规则，而不考虑 , ，然后添加指定的规则。
    /// </summary>
    procedure ResetAccessRule(rule: DNMutexAccessRule);
    /// <summary>
    ///   搜索与同一用户的访问控制规则和  （允许或拒绝） 与指定的规则，并具有兼容的继承和传播标志; 如果找到此类规则，则指定的访问规则中包含的权限都将从中删除。
    /// </summary>
    function RemoveAccessRule(rule: DNMutexAccessRule): Boolean;
    /// <summary>
    ///   搜索所有访问控制规则具有相同的用户和  （允许或拒绝） 与指定规则并且，如果找到，则删除它们。
    /// </summary>
    procedure RemoveAccessRuleAll(rule: DNMutexAccessRule);
    /// <summary>
    ///   搜索完全匹配指定的访问控制规则的规则并且，如果找到，则删除它。
    /// </summary>
    procedure RemoveAccessRuleSpecific(rule: DNMutexAccessRule);
    /// <summary>
    ///   审核搜索与新的规则可以合并规则。
    ///               如果未找到，则添加新规则。
    /// </summary>
    procedure AddAuditRule(rule: DNMutexAuditRule);
    /// <summary>
    ///   移除所有审核规则具有相同的用户与指定的规则，而不考虑  值，然后再添加指定的规则。
    /// </summary>
    procedure SetAuditRule(rule: DNMutexAuditRule);
    /// <summary>
    ///   搜索与同一用户与指定的规则，并具有兼容的继承和传播标志; 的审核控制规则如果找到一个兼容的规则，都将从中删除指定的规则中包含的权限。
    /// </summary>
    function RemoveAuditRule(rule: DNMutexAuditRule): Boolean;
    /// <summary>
    ///   搜索有关的所有审核与同一用户与指定的规则的规则以及是否找到，将其删除。
    /// </summary>
    procedure RemoveAuditRuleAll(rule: DNMutexAuditRule);
    /// <summary>
    ///   搜索完全匹配指定的审核规则并且，如果找到，则删除它。
    /// </summary>
    procedure RemoveAuditRuleSpecific(rule: DNMutexAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取枚举  类用于表示的访问权限。
    /// </summary>
    property AccessRightType: DNType read get_AccessRightType;
    /// <summary>
    ///   获取类型  类用于表示访问规则。
    /// </summary>
    property AccessRuleType: DNType read get_AccessRuleType;
    /// <summary>
    ///   获取类型  类用于表示审核规则。
    /// </summary>
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNMutexSecurity = class(TDNGenericImport<DNMutexSecurityClass, DNMutexSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNRegistrySecurityClass = interface(DNNativeObjectSecurityClass)
  ['{8D831E69-0669-4C6C-84CA-37FA7E1472E6}']
  { constructors } 

    /// <summary>
    ///   使用默认值初始化  类的新实例。
    /// </summary>
    {class} function init: DNRegistrySecurity;

  end;

  /// <summary>
  ///   表示注册表项的 Windows 访问控制安全性。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.RegistrySecurity')]
  DNRegistrySecurity = interface(DNNativeObjectSecurity)
  ['{E7EA361F-99F1-35C6-83D2-0D3D17CE772A}']
  { getter & setter } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    /// <summary>
    ///   创建具有指定的访问权限、 访问控制和标志指定的用户，新的访问控制规则。
    /// </summary>
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    /// <summary>
    ///   创建一个新的审核规则，指定此规则适用于对审核、 继承和传播的规则的访问权限的用户和触发规则的结果。
    /// </summary>
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    /// <summary>
    ///   搜索匹配的访问的控制可以与之合并新规则。
    ///               如果未找到，则添加新规则。
    /// </summary>
    procedure AddAccessRule(rule: DNRegistryAccessRule);
    /// <summary>
    ///   移除所有访问控制规则具有相同的用户和  （允许或拒绝） 与指定的规则，然后添加指定的规则。
    /// </summary>
    procedure SetAccessRule(rule: DNRegistryAccessRule);
    /// <summary>
    ///   移除所有访问控制规则具有相同用户作为指定的规则，而不考虑 , ，然后添加指定的规则。
    /// </summary>
    procedure ResetAccessRule(rule: DNRegistryAccessRule);
    /// <summary>
    ///   搜索与同一用户的访问控制规则和  （允许或拒绝） 与指定的访问权限的规则，并具有兼容的继承和传播标志; 如果找到此类规则，则指定的访问规则中包含的权限都将从中删除。
    /// </summary>
    function RemoveAccessRule(rule: DNRegistryAccessRule): Boolean;
    /// <summary>
    ///   搜索所有访问控制规则具有相同的用户和  （允许或拒绝） 与指定规则并且，如果找到，则删除它们。
    /// </summary>
    procedure RemoveAccessRuleAll(rule: DNRegistryAccessRule);
    /// <summary>
    ///   搜索完全匹配指定的访问控制规则的规则并且，如果找到，则删除它。
    /// </summary>
    procedure RemoveAccessRuleSpecific(rule: DNRegistryAccessRule);
    /// <summary>
    ///   审核搜索与新的规则可以合并规则。
    ///               如果未找到，则添加新规则。
    /// </summary>
    procedure AddAuditRule(rule: DNRegistryAuditRule);
    /// <summary>
    ///   移除所有审核规则具有相同的用户与指定的规则，而不考虑  值，然后再添加指定的规则。
    /// </summary>
    procedure SetAuditRule(rule: DNRegistryAuditRule);
    /// <summary>
    ///   搜索与同一用户与指定的规则，并具有兼容的继承和传播标志; 的审核控制规则如果找到一个兼容的规则，都将从中删除指定的规则中包含的权限。
    /// </summary>
    function RemoveAuditRule(rule: DNRegistryAuditRule): Boolean;
    /// <summary>
    ///   搜索有关的所有审核与同一用户与指定的规则的规则以及是否找到，将其删除。
    /// </summary>
    procedure RemoveAuditRuleAll(rule: DNRegistryAuditRule);
    /// <summary>
    ///   搜索完全匹配指定的审核规则并且，如果找到，则删除它。
    /// </summary>
    procedure RemoveAuditRuleSpecific(rule: DNRegistryAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取枚举类型  类用于表示的访问权限。
    /// </summary>
    property AccessRightType: DNType read get_AccessRightType;
    /// <summary>
    ///   获取类型  类用于表示访问规则。
    /// </summary>
    property AccessRuleType: DNType read get_AccessRuleType;
    /// <summary>
    ///   获取类型  类用于表示审核规则。
    /// </summary>
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNRegistrySecurity = class(TDNGenericImport<DNRegistrySecurityClass, DNRegistrySecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNDirectoryObjectSecurityClass = interface(DNObjectSecurityClass)
  ['{9D10881F-6ECC-4BB9-9D58-C4C4E984CC47}']
  end;

  /// <summary>
  ///   提供的功能来控制对目录对象，而无需直接操作的访问控制列表 (Acl) 的访问。
  /// </summary>
  [DNTypeName('System.Security.AccessControl.DirectoryObjectSecurity')]
  DNDirectoryObjectSecurity = interface(DNObjectSecurity)
  ['{EBB62DC9-204E-32E8-B6E2-025AE4D7DA5D}']
  { getter & setter } 

    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;
    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;

  { methods } 

    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType; objectType: DNGuid; inheritedObjectType: DNGuid): DNAccessRule; overload;
    /// <summary>
    ///   用指定的值初始化  类的新实例。
    /// </summary>
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags; objectType: DNGuid; inheritedObjectType: DNGuid): DNAuditRule; overload;
    /// <summary>
    ///   获取与指定的安全标识符关联的访问规则的集合。
    /// </summary>
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    /// <summary>
    ///   获取与指定的安全标识符相关联的审核规则的集合。
    /// </summary>
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule; overload;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
  end;

  TDNDirectoryObjectSecurity = class(TDNGenericImport<DNDirectoryObjectSecurityClass, DNDirectoryObjectSecurity>) end;

  //-------------namespace: System.Security.Claims----------------
  DNClaimClass = interface(DNObjectClass)
  ['{86B45ABA-C904-4253-AABF-F2A8D89B49E9}']
  { constructors } 

    {class} function init(reader: DNBinaryReader): DNClaim; overload;
    /// <summary>
    ///   使用指定的读取器和主题初始化  类的新实例。
    /// </summary>
    {class} function init(reader: DNBinaryReader; subject: DNClaimsIdentity): DNClaim; overload;
    /// <summary>
    ///   新实例初始化  类具有指定的声明类型和值。
    /// </summary>
    {class} function init(&type: string; value: string): DNClaim; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的声明类型、 值和值类型。
    /// </summary>
    {class} function init(&type: string; value: string; valueType: string): DNClaim; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的声明类型、 值、 值类型和颁发者。
    /// </summary>
    {class} function init(&type: string; value: string; valueType: string; issuer: string): DNClaim; overload;
    /// <summary>
    ///   使用指定的声明类型、值、值类型、颁发者、原始颁发者，初始化  类的新实例。
    /// </summary>
    {class} function init(&type: string; value: string; valueType: string; issuer: string; originalIssuer: string): DNClaim; overload;
    /// <summary>
    ///   使用指定的声明类型、值、值类型、颁发者、原始颁发者和主题，初始化  类的新实例。
    /// </summary>
    {class} function init(&type: string; value: string; valueType: string; issuer: string; originalIssuer: string; subject: DNClaimsIdentity): DNClaim; overload;

  end;

  /// <summary>
  ///   表示声明。
  /// </summary>
  [DNTypeName('System.Security.Claims.Claim')]
  DNClaim = interface(DNObject)
  ['{39A7D87A-AD1E-3A11-BE8F-DE504626DD67}']
  { getter & setter } 

    function get_Issuer: string;
    function get_OriginalIssuer: string;
    function get_Properties: DNIDictionary<string, string>;
    function get_Subject: DNClaimsIdentity;
    function get_Type: string;
    function get_Value: string;
    function get_ValueType: string;

  { methods } 

    /// <summary>
    ///   返回从此对象复制的新  对象。
    ///               新的报销申请不具有使用者。
    /// </summary>
    function Clone: DNClaim; overload;
    /// <summary>
    ///   返回从此对象复制的新  对象。
    ///               新声明的主题设置为指定的 ClaimsIdentity。
    /// </summary>
    function Clone(identity: DNClaimsIdentity): DNClaim; overload;
    procedure WriteTo(writer: DNBinaryWriter);
    /// <summary>
    ///   返回此  对象的字符串表示形式。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取声明的颁发者。
    /// </summary>
    property Issuer: string read get_Issuer;
    /// <summary>
    ///   获取声明的原始颁发者。
    /// </summary>
    property OriginalIssuer: string read get_OriginalIssuer;
    /// <summary>
    ///   获取一个字典，其中包含与此声明关联的其他属性。
    /// </summary>
    property Properties: DNIDictionary<string, string> read get_Properties;
    /// <summary>
    ///   获取声明的主题。
    /// </summary>
    property Subject: DNClaimsIdentity read get_Subject;
    /// <summary>
    ///   获取声明的声明类型。
    /// </summary>
    property &Type: string read get_Type;
    /// <summary>
    ///   获取声明的值。
    /// </summary>
    property Value: string read get_Value;
    /// <summary>
    ///   获取声明的值类型。
    /// </summary>
    property ValueType: string read get_ValueType;
  end;

  TDNClaim = class(TDNGenericImport<DNClaimClass, DNClaim>) end;

  //-------------namespace: System.Security.Claims----------------
  DNClaimsIdentityClass = interface(DNObjectClass)
  ['{7C1436F6-82D1-4934-B983-A5CB8529CC18}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  用空类声明集合。
    /// </summary>
    {class} function init: DNClaimsIdentity; overload;
    /// <summary>
    ///   新实例初始化  类使用从指定的名称和身份验证类型 。
    /// </summary>
    {class} function init(identity: DNIIdentity): DNClaimsIdentity; overload;
    {class} function init(claims: DNIEnumerable<DNClaim>): DNClaimsIdentity; overload;
    /// <summary>
    ///   初始化的新实例  用空类声明集合和指定的身份验证类型。
    /// </summary>
    {class} function init(authenticationType: string): DNClaimsIdentity; overload;
    {class} function init(claims: DNIEnumerable<DNClaim>; authenticationType: string): DNClaimsIdentity; overload;
    {class} function init(identity: DNIIdentity; claims: DNIEnumerable<DNClaim>): DNClaimsIdentity; overload;
    /// <summary>
    ///   新实例初始化  类具有指定的身份验证类型、 名称声明类型和角色声明类型。
    /// </summary>
    {class} function init(authenticationType: string; nameType: string; roleType: string): DNClaimsIdentity; overload;
    {class} function init(claims: DNIEnumerable<DNClaim>; authenticationType: string; nameType: string; roleType: string): DNClaimsIdentity; overload;
    {class} function init(identity: DNIIdentity; claims: DNIEnumerable<DNClaim>; authenticationType: string; nameType: string; roleType: string): DNClaimsIdentity; overload;
    {class} function init(reader: DNBinaryReader): DNClaimsIdentity; overload;

  end;

  /// <summary>
  ///   表示基于声明的标识。
  /// </summary>
  [DNTypeName('System.Security.Claims.ClaimsIdentity')]
  DNClaimsIdentity = interface(DNObject)
  ['{21C7F1A2-37FB-3BFF-9819-F586A7702F36}']
  { getter & setter } 

    function get_AuthenticationType: string;
    function get_IsAuthenticated: Boolean;
    function get_Actor: DNClaimsIdentity;
    procedure set_Actor(value: DNClaimsIdentity);
    function get_BootstrapContext: DNObject;
    procedure set_BootstrapContext(value: DNObject);
    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Label: string;
    procedure set_Label(value: string);
    function get_Name: string;
    function get_NameClaimType: string;
    function get_RoleClaimType: string;

  { methods } 

    /// <summary>
    ///   返回一个新  从复制此声明标识。
    /// </summary>
    function Clone: DNClaimsIdentity;
    /// <summary>
    ///   将添加一个声明与此声明标识。
    /// </summary>
    procedure AddClaim(claim: DNClaim);
    procedure AddClaims(claims: DNIEnumerable<DNClaim>);
    /// <summary>
    ///   尝试删除从声明的标识声明。
    /// </summary>
    function TryRemoveClaim(claim: DNClaim): Boolean;
    /// <summary>
    ///   尝试删除从声明的标识声明。
    /// </summary>
    procedure RemoveClaim(claim: DNClaim);
    /// <summary>
    ///   检索所有具有指定的声明类型的声明。
    /// </summary>
    function FindAll(&type: string): DNIEnumerable<DNClaim>;
    /// <summary>
    ///   确定是否将此声明标识具有声明类型和值与指定的声明。
    /// </summary>
    function HasClaim(&type: string; value: string): Boolean;
    /// <summary>
    ///   使用指定的声明类型检索第一个声明。
    /// </summary>
    function FindFirst(&type: string): DNClaim;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取身份验证类型。
    /// </summary>
    property AuthenticationType: string read get_AuthenticationType;
    /// <summary>
    ///   获取一个值，该值指示是否已验证身份。
    /// </summary>
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    /// <summary>
    ///   获取或设置已授予委派权限，调用方的标识。
    /// </summary>
    property Actor: DNClaimsIdentity read get_Actor write set_Actor;
    /// <summary>
    ///   获取或设置用于创建令牌此声明标识。
    /// </summary>
    property BootstrapContext: DNObject read get_BootstrapContext write set_BootstrapContext;
    /// <summary>
    ///   获取与关联的声明此声明标识。
    /// </summary>
    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    /// <summary>
    ///   获取或设置此声明标识的标签。
    /// </summary>
    property &Label: string read get_Label write set_Label;
    /// <summary>
    ///   获取此名称声明标识。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取用于确定哪些声明提供的值的声明类型  属性的声明的身份。
    /// </summary>
    property NameClaimType: string read get_NameClaimType;
    /// <summary>
    ///   获取将被解释为在此声明中的.NET Framework 角色声明标识的声明类型。
    /// </summary>
    property RoleClaimType: string read get_RoleClaimType;
  end;

  TDNClaimsIdentity = class(TDNGenericImport<DNClaimsIdentityClass, DNClaimsIdentity>) end;

  //-------------namespace: System.Security.Principal----------------
  DNGenericIdentityClass = interface(DNClaimsIdentityClass)
  ['{97ADED3C-C0F2-4A25-BFCE-CBE381FD4EFD}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类表示具有指定名称的用户。
    /// </summary>
    {class} function init(name: string): DNGenericIdentity; overload;
    /// <summary>
    ///   新实例初始化  类表示具有指定名称和身份验证类型的用户。
    /// </summary>
    {class} function init(name: string; &type: string): DNGenericIdentity; overload;

  end;

  /// <summary>
  ///   表示泛型用户。
  /// </summary>
  [DNTypeName('System.Security.Principal.GenericIdentity')]
  DNGenericIdentity = interface(DNClaimsIdentity)
  ['{4C534A8E-3C46-3745-BDAE-5119C40F98E7}']
  { getter & setter } 

    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Name: string;
    function get_AuthenticationType: string;
    function get_IsAuthenticated: Boolean;
    function get_Actor: DNClaimsIdentity;
    procedure set_Actor(value: DNClaimsIdentity);
    function get_BootstrapContext: DNObject;
    procedure set_BootstrapContext(value: DNObject);
    function get_Label: string;
    procedure set_Label(value: string);
    function get_NameClaimType: string;
    function get_RoleClaimType: string;

  { methods } 

    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNClaimsIdentity;
    procedure AddClaim(claim: DNClaim);
    procedure AddClaims(claims: DNIEnumerable<DNClaim>);
    function TryRemoveClaim(claim: DNClaim): Boolean;
    procedure RemoveClaim(claim: DNClaim);
    function FindAll(&type: string): DNIEnumerable<DNClaim>;
    function HasClaim(&type: string; value: string): Boolean;
    function FindFirst(&type: string): DNClaim;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取由该泛型标识所表示的用户的所有声明。
    /// </summary>
    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    /// <summary>
    ///   获取用户的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取用于标识用户的身份验证的类型。
    /// </summary>
    property AuthenticationType: string read get_AuthenticationType;
    /// <summary>
    ///   获取一个值，该值指示是否已验证用户。
    /// </summary>
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property Actor: DNClaimsIdentity read get_Actor write set_Actor;
    property BootstrapContext: DNObject read get_BootstrapContext write set_BootstrapContext;
    property &Label: string read get_Label write set_Label;
    property NameClaimType: string read get_NameClaimType;
    property RoleClaimType: string read get_RoleClaimType;
  end;

  TDNGenericIdentity = class(TDNGenericImport<DNGenericIdentityClass, DNGenericIdentity>) end;

  //-------------namespace: System.Security.Principal----------------
  DNWindowsIdentityClass = interface(DNClaimsIdentityClass)
  ['{7E58799B-C6CF-4C55-BF1B-98ECD4C2F03B}']
  { constructors } 

    /// <summary>
    ///   为指定的 Windows 帐户标记表示的用户初始化  类的新实例。
    /// </summary>
    {class} function init(userToken: IntPtr): DNWindowsIdentity; overload;
    /// <summary>
    ///   为指定的 Windows 帐户标记和指定的身份验证类型表示的用户初始化  类的新实例。
    /// </summary>
    {class} function init(userToken: IntPtr; &type: string): DNWindowsIdentity; overload;
    /// <summary>
    ///   为指定的 Windows 帐户标记、指定的身份验证类型和指定的 Windows 帐户类型表示的用户初始化  类的新实例。
    /// </summary>
    {class} function init(userToken: IntPtr; &type: string; acctType: DNWindowsAccountType): DNWindowsIdentity; overload;
    /// <summary>
    ///   为指定的 Windows 帐户标记、指定的身份验证类型、指定的 Windows 帐户类型和指定的身份验证状态表示的用户初始化  类的新实例。
    /// </summary>
    {class} function init(userToken: IntPtr; &type: string; acctType: DNWindowsAccountType; isAuthenticated: Boolean): DNWindowsIdentity; overload;
    /// <summary>
    ///   初始化以指定用户主名称 (UPN) 表示的用户的  类的新实例。
    /// </summary>
    {class} function init(sUserPrincipalName: string): DNWindowsIdentity; overload;
    /// <summary>
    ///   初始化以指定用户主名称 (UPN) 和指定身份验证类型共同表示的用户的  类的新实例。
    /// </summary>
    {class} function init(sUserPrincipalName: string; &type: string): DNWindowsIdentity; overload;
    /// <summary>
    ///   初始化  流中的信息所表示的用户的  类的新实例。
    /// </summary>
    {class} function init(info: DNSerializationInfo; context: DNStreamingContext): DNWindowsIdentity; overload;

  { static methods } 

    /// <summary>
    ///   返回表示当前 Windows 用户的  对象。
    /// </summary>
    {class} function GetCurrent: DNWindowsIdentity; overload;
    /// <summary>
    ///   返回一个  对象，该对象表示线程或进程（具体取决于  参数的值）的 Windows 标识。
    /// </summary>
    {class} function GetCurrent(ifImpersonating: Boolean): DNWindowsIdentity; overload;
    /// <summary>
    ///   返回一个  对象，该对象使用指定的所需标记访问级别来表示当前 Windows 用户。
    /// </summary>
    {class} function GetCurrent(desiredAccess: DNTokenAccessLevels): DNWindowsIdentity; overload;
    /// <summary>
    ///   返回  对象，可在代码中将其用作 sentinel 值来表示匿名用户。
    ///               属性值不表示 Windows 操作系统使用的内置匿名标识。
    /// </summary>
    {class} function GetAnonymous: DNWindowsIdentity;
    /// <summary>
    ///   作为模拟 Windows 标识运行指定操作。
    ///               可以使用  并直接作为参数提供函数，而不是使用模拟方法调用并在  中运行函数。
    /// </summary>
    {class} procedure RunImpersonated(safeAccessTokenHandle: DNSafeAccessTokenHandle; action: DNAction);
    /// <summary>
    ///   模拟指定用户标记表示的用户。
    /// </summary>
    {class} function Impersonate(userToken: IntPtr): DNWindowsImpersonationContext; overload;

  end;

  /// <summary>
  ///   表示 Windows 用户。
  /// </summary>
  [DNTypeName('System.Security.Principal.WindowsIdentity')]
  DNWindowsIdentity = interface(DNClaimsIdentity)
  ['{70C7CEC2-5BB2-3770-A26E-FC180C81F4FE}']
  { getter & setter } 

    function get_AuthenticationType: string;
    function get_ImpersonationLevel: DNTokenImpersonationLevel;
    function get_IsAuthenticated: Boolean;
    function get_IsGuest: Boolean;
    function get_IsSystem: Boolean;
    function get_IsAnonymous: Boolean;
    function get_Name: string;
    function get_Owner: DNSecurityIdentifier;
    function get_User: DNSecurityIdentifier;
    function get_Groups: DNIdentityReferenceCollection;
    function get_Token: IntPtr;
    function get_AccessToken: DNSafeAccessTokenHandle;
    function get_UserClaims: DNIEnumerable<DNClaim>;
    function get_DeviceClaims: DNIEnumerable<DNClaim>;
    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Actor: DNClaimsIdentity;
    procedure set_Actor(value: DNClaimsIdentity);
    function get_BootstrapContext: DNObject;
    procedure set_BootstrapContext(value: DNObject);
    function get_Label: string;
    procedure set_Label(value: string);
    function get_NameClaimType: string;
    function get_RoleClaimType: string;

  { methods } 

    /// <summary>
    ///   模拟  对象表示的用户。
    /// </summary>
    function Impersonate: DNWindowsImpersonationContext; overload;
    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNClaimsIdentity;
    procedure AddClaim(claim: DNClaim);
    procedure AddClaims(claims: DNIEnumerable<DNClaim>);
    function TryRemoveClaim(claim: DNClaim): Boolean;
    procedure RemoveClaim(claim: DNClaim);
    function FindAll(&type: string): DNIEnumerable<DNClaim>;
    function HasClaim(&type: string; value: string): Boolean;
    function FindFirst(&type: string): DNClaim;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取用于标识用户的身份验证的类型。
    /// </summary>
    property AuthenticationType: string read get_AuthenticationType;
    /// <summary>
    ///   获取用户的模拟级别。
    /// </summary>
    property ImpersonationLevel: DNTokenImpersonationLevel read get_ImpersonationLevel;
    /// <summary>
    ///   获取一个值，该值指示 Windows 是否对用户进行了身份验证。
    /// </summary>
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    /// <summary>
    ///   获取一个值，该值指示系统是否将用户帐户标识为  帐户。
    /// </summary>
    property IsGuest: Boolean read get_IsGuest;
    /// <summary>
    ///   获取一个值，该值指示系统是否将用户帐户标识为  帐户。
    /// </summary>
    property IsSystem: Boolean read get_IsSystem;
    /// <summary>
    ///   获取一个值，该值指示系统是否将用户帐户标识为匿名帐户。
    /// </summary>
    property IsAnonymous: Boolean read get_IsAnonymous;
    /// <summary>
    ///   获取用户的 Windows 登录名。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取标记所有者的安全标识符 (SID)。
    /// </summary>
    property Owner: DNSecurityIdentifier read get_Owner;
    /// <summary>
    ///   获取用户的安全标识符 (SID)。
    /// </summary>
    property User: DNSecurityIdentifier read get_User;
    /// <summary>
    ///   获取当前 Windows 用户所属的组。
    /// </summary>
    property Groups: DNIdentityReferenceCollection read get_Groups;
    /// <summary>
    ///   获取用户的 Windows 帐户标记。
    /// </summary>
    property Token: IntPtr read get_Token;
    /// <summary>
    ///   获取此  实例的此 。
    /// </summary>
    property AccessToken: DNSafeAccessTokenHandle read get_AccessToken;
    /// <summary>
    ///   获取有  属性密钥的声明。
    /// </summary>
    property UserClaims: DNIEnumerable<DNClaim> read get_UserClaims;
    /// <summary>
    ///   获取有  属性密钥的声明。
    /// </summary>
    property DeviceClaims: DNIEnumerable<DNClaim> read get_DeviceClaims;
    /// <summary>
    ///   为用户获取此 Windows 标识表示的所有声明。
    /// </summary>
    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    property Actor: DNClaimsIdentity read get_Actor write set_Actor;
    property BootstrapContext: DNObject read get_BootstrapContext write set_BootstrapContext;
    property &Label: string read get_Label write set_Label;
    property NameClaimType: string read get_NameClaimType;
    property RoleClaimType: string read get_RoleClaimType;
  end;

  TDNWindowsIdentity = class(TDNGenericImport<DNWindowsIdentityClass, DNWindowsIdentity>) end;

  //-------------namespace: System.Security.Claims----------------
  DNClaimsPrincipalClass = interface(DNObjectClass)
  ['{726D707D-39F3-4912-AD0F-C5051087DD5F}']
  { static getter & setter } 

    {class} function get_Current: DNClaimsPrincipal;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNClaimsPrincipal; overload;
    {class} function init(identities: DNIEnumerable<DNClaimsIdentity>): DNClaimsPrincipal; overload;
    /// <summary>
    ///   从指定的标识初始化  类的新实例。
    /// </summary>
    {class} function init(identity: DNIIdentity): DNClaimsPrincipal; overload;
    /// <summary>
    ///   从指定的主体初始化  类的新实例。
    /// </summary>
    {class} function init(principal: DNIPrincipal): DNClaimsPrincipal; overload;
    {class} function init(reader: DNBinaryReader): DNClaimsPrincipal; overload;

  { static propertys } 

    /// <summary>
    ///   获取当前声明主体。
    /// </summary>
    {class} property Current: DNClaimsPrincipal read get_Current;
  end;

  /// <summary>
  ///   支持多个基于声明的标识的  实现。
  /// </summary>
  [DNTypeName('System.Security.Claims.ClaimsPrincipal')]
  DNClaimsPrincipal = interface(DNObject)
  ['{62B5EEE1-B5CD-30F1-854F-FBB7F2D8690B}']
  { getter & setter } 

    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Identities: DNIEnumerable<DNClaimsIdentity>;
    function get_Identity: DNIIdentity;

  { methods } 

    /// <summary>
    ///   将指定的声明标识添加到此声明主体。
    /// </summary>
    procedure AddIdentity(identity: DNClaimsIdentity);
    /// <summary>
    ///   返回此实例的副本。
    /// </summary>
    function Clone: DNClaimsPrincipal;
    procedure AddIdentities(identities: DNIEnumerable<DNClaimsIdentity>);
    /// <summary>
    ///   检索所有或具有指定的声明类型的声明。
    /// </summary>
    function FindAll(&type: string): DNIEnumerable<DNClaim>;
    /// <summary>
    ///   使用指定的声明类型检索第一个声明。
    /// </summary>
    function FindFirst(&type: string): DNClaim;
    /// <summary>
    ///   确定与此声明主体相关联的任何声明标识是否包含具有指定声明类型和值的声明。
    /// </summary>
    function HasClaim(&type: string; value: string): Boolean;
    /// <summary>
    ///   返回一个值，该值表示此声明主体代表的实体（用户）是否属于指定角色。
    /// </summary>
    function IsInRole(role: string): Boolean;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取包含所有声明的集合，这些声明来自于与此声明主体关联的所有声明标识符。
    /// </summary>
    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    /// <summary>
    ///   获取一个集合，该集合包含与此声明主体关联的所有声明标识。
    /// </summary>
    property Identities: DNIEnumerable<DNClaimsIdentity> read get_Identities;
    /// <summary>
    ///   获取与此声明主体相关联的主声明标识。
    /// </summary>
    property Identity: DNIIdentity read get_Identity;
  end;

  TDNClaimsPrincipal = class(TDNGenericImport<DNClaimsPrincipalClass, DNClaimsPrincipal>) end;

  //-------------namespace: System.Security.Principal----------------
  DNGenericPrincipalClass = interface(DNClaimsPrincipalClass)
  ['{DC4F5949-A33D-4959-8691-45561541C16E}']
  { constructors } 

    /// <summary>
    ///   从用户标识和一组由该标识代表的用户所属的角色名称初始化  类的新实例。
    /// </summary>
    {class} function init(identity: DNIIdentity; roles: TArray<string>): DNGenericPrincipal;

  end;

  /// <summary>
  ///   表示泛型主体。
  /// </summary>
  [DNTypeName('System.Security.Principal.GenericPrincipal')]
  DNGenericPrincipal = interface(DNClaimsPrincipal)
  ['{2EACB710-FE48-3C13-8145-E810792C58A2}']
  { getter & setter } 

    function get_Identity: DNIIdentity;
    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Identities: DNIEnumerable<DNClaimsIdentity>;

  { methods } 

    /// <summary>
    ///   确定是否当前  属于指定角色。
    /// </summary>
    function IsInRole(role: string): Boolean;
    procedure AddIdentity(identity: DNClaimsIdentity);
    function Clone: DNClaimsPrincipal;
    procedure AddIdentities(identities: DNIEnumerable<DNClaimsIdentity>);
    function FindAll(&type: string): DNIEnumerable<DNClaim>;
    function FindFirst(&type: string): DNClaim;
    function HasClaim(&type: string; value: string): Boolean;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  表示由当前的用户 。
    /// </summary>
    property Identity: DNIIdentity read get_Identity;
    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    property Identities: DNIEnumerable<DNClaimsIdentity> read get_Identities;
  end;

  TDNGenericPrincipal = class(TDNGenericImport<DNGenericPrincipalClass, DNGenericPrincipal>) end;

  //-------------namespace: System.Security.Principal----------------
  DNWindowsPrincipalClass = interface(DNClaimsPrincipalClass)
  ['{B93E5E9E-ADC0-421D-91B7-ACE465A8BD39}']
  { constructors } 

    /// <summary>
    ///   使用指定的  对象初始化  类的新实例。
    /// </summary>
    {class} function init(ntIdentity: DNWindowsIdentity): DNWindowsPrincipal;

  end;

  /// <summary>
  ///   使代码可以检查的 Windows 用户的 Windows 组成员身份。
  /// </summary>
  [DNTypeName('System.Security.Principal.WindowsPrincipal')]
  DNWindowsPrincipal = interface(DNClaimsPrincipal)
  ['{138887DB-C015-3254-B05A-D15616BF9AEE}']
  { getter & setter } 

    function get_Identity: DNIIdentity;
    function get_UserClaims: DNIEnumerable<DNClaim>;
    function get_DeviceClaims: DNIEnumerable<DNClaim>;
    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Identities: DNIEnumerable<DNClaimsIdentity>;

  { methods } 

    /// <summary>
    ///   确定当前用户是否属于具有指定名称的 Windows 用户组。
    /// </summary>
    function IsInRole(role: string): Boolean; overload;
    /// <summary>
    ///   确定当前用户是否属于使用指定的 Windows 用户组 。
    /// </summary>
    function IsInRole(role: DNWindowsBuiltInRole): Boolean; overload;
    /// <summary>
    ///   确定当前用户是否属于具有指定的相对标识符 (RID) 的 Windows 用户组。
    /// </summary>
    function IsInRole(rid: Int32): Boolean; overload;
    /// <summary>
    ///   确定当前用户是否属于具有指定的安全标识符 (SID) 的 Windows 用户组。
    /// </summary>
    function IsInRole(sid: DNSecurityIdentifier): Boolean; overload;
    procedure AddIdentity(identity: DNClaimsIdentity);
    function Clone: DNClaimsPrincipal;
    procedure AddIdentities(identities: DNIEnumerable<DNClaimsIdentity>);
    function FindAll(&type: string): DNIEnumerable<DNClaim>;
    function FindFirst(&type: string): DNClaim;
    function HasClaim(&type: string; value: string): Boolean;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前主体的标识。
    /// </summary>
    property Identity: DNIIdentity read get_Identity;
    /// <summary>
    ///   从该主体中获取所有 Windows 用户声明。
    /// </summary>
    property UserClaims: DNIEnumerable<DNClaim> read get_UserClaims;
    /// <summary>
    ///   从该主体中获取所有 Windows 设备声明。
    /// </summary>
    property DeviceClaims: DNIEnumerable<DNClaim> read get_DeviceClaims;
    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    property Identities: DNIEnumerable<DNClaimsIdentity> read get_Identities;
  end;

  TDNWindowsPrincipal = class(TDNGenericImport<DNWindowsPrincipalClass, DNWindowsPrincipal>) end;

  //-------------namespace: System.Security.Claims----------------
  DNClaimTypesClass = interface(DNObjectClass)
  ['{531630EE-0953-44E8-8FF6-7847D6D4CFBD}']
  end;

  /// <summary>
  ///   定义可以分配给使用者的已知声明类型的常数。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Claims.ClaimTypes')]
  DNClaimTypes = interface(DNObject)
  ['{DE856C82-1E58-3863-B00E-FACDEBA633A9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNClaimTypes = class(TDNGenericImport<DNClaimTypesClass, DNClaimTypes>) end;

  //-------------namespace: System.Security.Claims----------------
  DNClaimValueTypesClass = interface(DNObjectClass)
  ['{A55E6588-E1A8-4388-8A6F-9E3AA7261C05}']
  end;

  /// <summary>
  ///   根据 W3C 和 OASIS 定义的类型 URI 定义声明值类型。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Claims.ClaimValueTypes')]
  DNClaimValueTypes = interface(DNObject)
  ['{F678CBD9-8744-3FDD-8D92-D3F335C31FD3}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNClaimValueTypes = class(TDNGenericImport<DNClaimValueTypesClass, DNClaimValueTypes>) end;

  //-------------namespace: System.Security----------------
  DNCodeAccessPermissionClass = interface(DNObjectClass)
  ['{67FAC499-8367-461A-96E7-FBCB34A6D355}']
  { static methods } 

    /// <summary>
    ///   导致当前帧以前所有的  被删除且不再有效。
    /// </summary>
    {class} procedure RevertAssert;
    /// <summary>
    ///   导致当前帧以前所有的  被删除且不再有效。
    /// </summary>
    {class} procedure RevertDeny;
    /// <summary>
    ///   导致当前帧以前所有的  被删除且不再有效。
    /// </summary>
    {class} procedure RevertPermitOnly;
    /// <summary>
    ///   导致当前帧以前所有的重写被删除且不再有效。
    /// </summary>
    {class} procedure RevertAll;

  end;

  /// <summary>
  ///   定义所有代码访问权限的基础结构。
  /// </summary>
  [DNTypeName('System.Security.CodeAccessPermission')]
  DNCodeAccessPermission = interface(DNObject)
  ['{AF6550FA-7C4B-3477-86DD-235F8286EAAC}']
  { methods } 

    /// <summary>
    ///   如果未对调用堆栈中处于较高位置的所有调用方授予当前实例所指定的权限，则在运行时强制 。
    /// </summary>
    procedure Demand;
    /// <summary>
    ///   声明调用代码能够通过调用此方法的代码，访问受权限请求保护的资源，即使未对堆栈中处于较高位置的调用方授予访问该资源的权限。
    ///               使用  会引起安全问题。
    /// </summary>
    procedure Assert;
    /// <summary>
    ///   防止处于调用堆栈较高位置的调用函数使用可以调用此方法来访问当前实例指定资源的代码。
    /// </summary>
    procedure Deny;
    /// <summary>
    ///   防止处于调用堆栈较高位置的调用函数使用此代码，此代码将调用此方法来访问除当前实例指定的资源以外的所有资源。
    /// </summary>
    procedure PermitOnly;
    /// <summary>
    ///   当在派生类中重写时，则创建属于当前权限与指定权限的并集的权限。
    /// </summary>
    function Union(other: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回当前权限对象的字符串表示形式。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   确定指定的  对象是否等于当前的 。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   获取  对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   当在派生类中重写时，创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   当在派生类中替代时，用 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(elem: DNSecurityElement);
    /// <summary>
    ///   由派生类实现时，创建并返回当前权限对象的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   由派生类实现时，创建并返回属于当前权限和指定权限的交集的权限。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   由派生类实现时，确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    function GetType: DNType;

  end;

  TDNCodeAccessPermission = class(TDNGenericImport<DNCodeAccessPermissionClass, DNCodeAccessPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNEnvironmentPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{59D22593-B934-4C53-94B4-FD0575619226}']
  { constructors } 

    /// <summary>
    ///   根据指定，使用受限制或不受限制的权限初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNEnvironmentPermission; overload;
    /// <summary>
    ///   初始化对指定环境变量具有指定访问权限的  类的新实例。
    /// </summary>
    {class} function init(flag: DNEnvironmentPermissionAccess; pathList: string): DNEnvironmentPermission; overload;

  end;

  /// <summary>
  ///   控件访问系统和用户环境变量。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Security.Permissions.EnvironmentPermission')]
  DNEnvironmentPermission = interface(DNCodeAccessPermission)
  ['{801F6E40-B384-3D27-B75F-DE2DF38F1192}']
  { methods } 

    /// <summary>
    ///   将指定的环境变量的指定访问权限设置为该权限的现有状态。
    /// </summary>
    procedure SetPathList(flag: DNEnvironmentPermissionAccess; pathList: string);
    /// <summary>
    ///   将指定的环境变量的访问权限添加到现有的权限状态中。
    /// </summary>
    procedure AddPathList(flag: DNEnvironmentPermissionAccess; pathList: string);
    /// <summary>
    ///   使用指定的  获取所有环境变量。
    /// </summary>
    function GetPathList(flag: DNEnvironmentPermissionAccess): string;
    /// <summary>
    ///   返回一个值，该值指示当前权限是否不受限制。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(other: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNEnvironmentPermission = class(TDNGenericImport<DNEnvironmentPermissionClass, DNEnvironmentPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNFileDialogPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{2105DE27-D18A-48CF-A8A3-4198A4049A1D}']
  { constructors } 

    /// <summary>
    ///   根据指定，使用受限制或不受限制的权限初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNFileDialogPermission; overload;
    /// <summary>
    ///   使用指定的访问权限初始化  类的新实例。
    /// </summary>
    {class} function init(access: DNFileDialogPermissionAccess): DNFileDialogPermission; overload;

  end;

  /// <summary>
  ///   控制通过“文件”对话框访问文件或文件夹的能力。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.FileDialogPermission')]
  DNFileDialogPermission = interface(DNCodeAccessPermission)
  ['{9E1239B4-493A-3D2D-8F91-6636EC9ECA21}']
  { getter & setter } 

    function get_Access: DNFileDialogPermissionAccess;
    procedure set_Access(value: DNFileDialogPermissionAccess);

  { methods } 

    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   返回一个值，该值指示当前权限是否不受限制。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置对文件的允许访问权限。
    /// </summary>
    property Access: DNFileDialogPermissionAccess read get_Access write set_Access;
  end;

  TDNFileDialogPermission = class(TDNGenericImport<DNFileDialogPermissionClass, DNFileDialogPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNFileIOPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{60B15E55-E6C7-46AC-A030-7B55D9DCEDCC}']
  { constructors } 

    /// <summary>
    ///   根据指定，使用完全受限制或不受限制的权限初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNFileIOPermission; overload;
    /// <summary>
    ///   初始化对指定文件或目录具有指定访问权限的  类的新实例。
    /// </summary>
    {class} function init(access: DNFileIOPermissionAccess; path: string): DNFileIOPermission; overload;
    /// <summary>
    ///   初始化对指定文件和目录具有指定访问权限的  类的新实例。
    /// </summary>
    {class} function init(access: DNFileIOPermissionAccess; pathList: TArray<string>): DNFileIOPermission; overload;
    /// <summary>
    ///   使用对指定文件或目录的指定访问权限和对文件控制信息的指定访问权限初始化  类的新实例。
    /// </summary>
    {class} function init(access: DNFileIOPermissionAccess; control: DNAccessControlActions; path: string): DNFileIOPermission; overload;
    /// <summary>
    ///   使用对指定文件和目录的指定访问权限和对文件控制信息的指定访问权限初始化  类的新实例。
    /// </summary>
    {class} function init(access: DNFileIOPermissionAccess; control: DNAccessControlActions; pathList: TArray<string>): DNFileIOPermission; overload;

  end;

  /// <summary>
  ///   控制文件和文件夹的访问权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.FileIOPermission')]
  DNFileIOPermission = interface(DNCodeAccessPermission)
  ['{DC50CD5A-0CAD-3B47-BF0D-79E85F3C2FC7}']
  { getter & setter } 

    function get_AllLocalFiles: DNFileIOPermissionAccess;
    procedure set_AllLocalFiles(value: DNFileIOPermissionAccess);
    function get_AllFiles: DNFileIOPermissionAccess;
    procedure set_AllFiles(value: DNFileIOPermissionAccess);

  { methods } 

    /// <summary>
    ///   设置指定文件或目录的特定访问权限，以替换现有的权限状态。
    /// </summary>
    procedure SetPathList(access: DNFileIOPermissionAccess; path: string); overload;
    /// <summary>
    ///   设置对指定文件和目录的指定访问权限，同时用一组新路径替换指定访问权限的当前状态。
    /// </summary>
    procedure SetPathList(access: DNFileIOPermissionAccess; pathList: TArray<string>); overload;
    /// <summary>
    ///   将指定文件或目录的访问权限添加到现有的权限状态。
    /// </summary>
    procedure AddPathList(access: DNFileIOPermissionAccess; path: string); overload;
    /// <summary>
    ///   将指定文件和目录的访问权限添加到现有的权限状态中。
    /// </summary>
    procedure AddPathList(access: DNFileIOPermissionAccess; pathList: TArray<string>); overload;
    /// <summary>
    ///   使用指定的  权限获取所有文件和目录。
    /// </summary>
    function GetPathList(access: DNFileIOPermissionAccess): TArray<string>;
    /// <summary>
    ///   返回一个值，该值指示当前权限是否不受限制。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(other: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   确定指定的  对象是否等于当前的 。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   获取  对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置对所有本地文件的允许访问权限。
    /// </summary>
    property AllLocalFiles: DNFileIOPermissionAccess read get_AllLocalFiles write set_AllLocalFiles;
    /// <summary>
    ///   获取或设置对所有文件的允许访问权限。
    /// </summary>
    property AllFiles: DNFileIOPermissionAccess read get_AllFiles write set_AllFiles;
  end;

  TDNFileIOPermission = class(TDNGenericImport<DNFileIOPermissionClass, DNFileIOPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNGacIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{50F7D566-17FE-409B-997E-44131DADFF30}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类完全受限制 。
    /// </summary>
    {class} function init(state: DNPermissionState): DNGacIdentityPermission; overload;
    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNGacIdentityPermission; overload;

  end;

  /// <summary>
  ///   定义在全局程序集缓存中产生文件标识的权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.GacIdentityPermission')]
  DNGacIdentityPermission = interface(DNCodeAccessPermission)
  ['{29A6CF6F-D663-31A7-9210-1347871681FC}']
  { methods } 

    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   指示当前的权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回是当前的权限和指定的权限的并集的权限。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   从 XML 编码，创建权限。
    /// </summary>
    procedure FromXml(securityElement: DNSecurityElement);
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNGacIdentityPermission = class(TDNGenericImport<DNGacIdentityPermissionClass, DNGacIdentityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNIsolatedStoragePermissionClass = interface(DNCodeAccessPermissionClass)
  ['{5C4F86A9-0AA1-4E73-84FF-D8FEF7BEAA49}']
  end;

  /// <summary>
  ///   表示对一般独立存储功能的访问权限。
  /// </summary>
  [DNTypeName('System.Security.Permissions.IsolatedStoragePermission')]
  DNIsolatedStoragePermission = interface(DNCodeAccessPermission)
  ['{F458ABF2-2B5E-3158-B0E4-228E8CDCF759}']
  { getter & setter } 

    function get_UserQuota: Int64;
    procedure set_UserQuota(value: Int64);
    function get_UsageAllowed: DNIsolatedStorageContainment;
    procedure set_UsageAllowed(value: DNIsolatedStorageContainment);

  { methods } 

    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    /// <summary>
    ///   返回一个值，该值指示当前权限是否不受限制。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function Union(other: DNIPermission): DNIPermission;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Copy: DNIPermission;
    function Intersect(target: DNIPermission): DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置每位用户的总存储在总大小中的配额。
    /// </summary>
    property UserQuota: Int64 read get_UserQuota write set_UserQuota;
    /// <summary>
    ///   获取或设置允许的独立存储包含的类型。
    /// </summary>
    property UsageAllowed: DNIsolatedStorageContainment read get_UsageAllowed write set_UsageAllowed;
  end;

  TDNIsolatedStoragePermission = class(TDNGenericImport<DNIsolatedStoragePermissionClass, DNIsolatedStoragePermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNIsolatedStorageFilePermissionClass = interface(DNIsolatedStoragePermissionClass)
  ['{7A5F11F8-CE83-4016-B4A8-7A7070D4F689}']
  { constructors } 

    /// <summary>
    ///   根据指定，使用完全受限制或不受限制的权限初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNIsolatedStorageFilePermission;

  end;

  /// <summary>
  ///   指定私有虚拟文件系统的允许的用法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.IsolatedStorageFilePermission')]
  DNIsolatedStorageFilePermission = interface(DNIsolatedStoragePermission)
  ['{AE588447-D98E-3E39-96F7-073433DB8D35}']
  { getter & setter } 

    function get_UserQuota: Int64;
    procedure set_UserQuota(value: Int64);
    function get_UsageAllowed: DNIsolatedStorageContainment;
    procedure set_UsageAllowed(value: DNIsolatedStorageContainment);

  { methods } 

    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    procedure FromXml(esd: DNSecurityElement);
    function IsUnrestricted: Boolean;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property UserQuota: Int64 read get_UserQuota write set_UserQuota;
    property UsageAllowed: DNIsolatedStorageContainment read get_UsageAllowed write set_UsageAllowed;
  end;

  TDNIsolatedStorageFilePermission = class(TDNGenericImport<DNIsolatedStorageFilePermissionClass, DNIsolatedStorageFilePermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNKeyContainerPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{52300BD0-3F9F-4E69-9538-93E1BA113A39}']
  { constructors } 

    /// <summary>
    ///   使用受限制或不受限制的权限初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNKeyContainerPermission; overload;
    /// <summary>
    ///   使用指定的访问权限初始化  类的新实例。
    /// </summary>
    {class} function init(flags: DNKeyContainerPermissionFlags): DNKeyContainerPermission; overload;
    /// <summary>
    ///   使用指定的全局访问权限和特定密钥容器访问权限初始化  类的新实例。
    /// </summary>
    {class} function init(flags: DNKeyContainerPermissionFlags; accessList: TArray<DNKeyContainerPermissionAccessEntry>): DNKeyContainerPermission; overload;

  end;

  /// <summary>
  ///   控制访问密钥容器的权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.KeyContainerPermission')]
  DNKeyContainerPermission = interface(DNCodeAccessPermission)
  ['{2D91F34B-85EC-33E5-A32E-752D8219404D}']
  { getter & setter } 

    function get_Flags: DNKeyContainerPermissionFlags;
    function get_AccessEntries: DNKeyContainerPermissionAccessEntryCollection;

  { methods } 

    /// <summary>
    ///   确定当前权限是否不受限制。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(securityElement: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取适用于与权限相关联的所有密钥容器的密钥容器权限标志。
    /// </summary>
    property Flags: DNKeyContainerPermissionFlags read get_Flags;
    /// <summary>
    ///   获取与当前权限相关联的  对象的集合。
    /// </summary>
    property AccessEntries: DNKeyContainerPermissionAccessEntryCollection read get_AccessEntries;
  end;

  TDNKeyContainerPermission = class(TDNGenericImport<DNKeyContainerPermissionClass, DNKeyContainerPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNPublisherIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{7BC948BF-77F8-4B10-A885-7801B828B9F2}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNPublisherIdentityPermission; overload;
    /// <summary>
    ///   使用指定的验证码 X.509v3 证书初始化  类的新实例。
    /// </summary>
    {class} function init(certificate: DNX509Certificate): DNPublisherIdentityPermission; overload;

  end;

  /// <summary>
  ///   表示软件发布者的标识。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.PublisherIdentityPermission')]
  DNPublisherIdentityPermission = interface(DNCodeAccessPermission)
  ['{73CF786B-CD2C-37E4-9835-824E4A019F11}']
  { getter & setter } 

    function get_Certificate: DNX509Certificate;
    procedure set_Certificate(value: DNX509Certificate);

  { methods } 

    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置表示软件发行者的身份的 Authenticode X.509v3 证书。
    /// </summary>
    property Certificate: DNX509Certificate read get_Certificate write set_Certificate;
  end;

  TDNPublisherIdentityPermission = class(TDNGenericImport<DNPublisherIdentityPermissionClass, DNPublisherIdentityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNReflectionPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{C5D954CB-389A-44F2-9553-5E033C4BFF59}']
  { constructors } 

    /// <summary>
    ///   根据指定，使用完全受限制或不受限制的权限初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNReflectionPermission; overload;
    /// <summary>
    ///   使用指定的访问权限初始化  类的新实例。
    /// </summary>
    {class} function init(flag: DNReflectionPermissionFlag): DNReflectionPermission; overload;

  end;

  /// <summary>
  ///   通过  API，控制对非公共类型和成员的访问。
  ///               控制  API 的一些功能。
  /// </summary>
  [DNTypeName('System.Security.Permissions.ReflectionPermission')]
  DNReflectionPermission = interface(DNCodeAccessPermission)
  ['{E71CDC85-7FE7-3F51-BCDB-02459770DB87}']
  { getter & setter } 

    function get_Flags: DNReflectionPermissionFlag;
    procedure set_Flags(value: DNReflectionPermissionFlag);

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示当前权限是否不受限制。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(other: DNIPermission): DNIPermission;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置允许用于当前权限的反射类型。
    /// </summary>
    property Flags: DNReflectionPermissionFlag read get_Flags write set_Flags;
  end;

  TDNReflectionPermission = class(TDNGenericImport<DNReflectionPermissionClass, DNReflectionPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNRegistryPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{8D593A3D-30C6-49C6-84D9-65AE2A7E0C97}']
  { constructors } 

    /// <summary>
    ///   根据指定，使用完全受限制或不受限制的权限初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNRegistryPermission; overload;
    /// <summary>
    ///   通过对指定注册表变量的指定访问权限初始化  类的新实例。
    /// </summary>
    {class} function init(access: DNRegistryPermissionAccess; pathList: string): DNRegistryPermission; overload;
    /// <summary>
    ///   使用对指定注册表变量的指定访问权限和对注册表控制信息的指定访问权限，初始化  类的新实例。
    /// </summary>
    {class} function init(access: DNRegistryPermissionAccess; control: DNAccessControlActions; pathList: string): DNRegistryPermission; overload;

  end;

  /// <summary>
  ///   控制访问注册表变量的能力。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.RegistryPermission')]
  DNRegistryPermission = interface(DNCodeAccessPermission)
  ['{B35E31F2-9E50-3D43-8EAF-EC111F6B3295}']
  { methods } 

    /// <summary>
    ///   将指定的注册表变量名称的新访问权限设置为现有的权限状态。
    /// </summary>
    procedure SetPathList(access: DNRegistryPermissionAccess; pathList: string);
    /// <summary>
    ///   将指定的注册表变量的访问权限添加到现有的权限状态中。
    /// </summary>
    procedure AddPathList(access: DNRegistryPermissionAccess; pathList: string); overload;
    /// <summary>
    ///   将指定注册表变量的访问权限添加到现有的权限状态中，同时指定注册表权限访问和访问控制操作。
    /// </summary>
    procedure AddPathList(access: DNRegistryPermissionAccess; control: DNAccessControlActions; pathList: string); overload;
    /// <summary>
    ///   获取具有指定  的所有注册表变量的路径。
    /// </summary>
    function GetPathList(access: DNRegistryPermissionAccess): string;
    /// <summary>
    ///   返回一个值，该值指示当前权限是否不受限制。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(other: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNRegistryPermission = class(TDNGenericImport<DNRegistryPermissionClass, DNRegistryPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{20E756BA-56E1-41DD-A40C-7AC49514800C}']
  { constructors } 

    /// <summary>
    ///   根据指定，使用受限制或不受限制的权限初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNSecurityPermission; overload;
    /// <summary>
    ///   初始化具有指定标志初始设置状态的  类的一个新实例。
    /// </summary>
    {class} function init(flag: DNSecurityPermissionFlag): DNSecurityPermission; overload;

  end;

  /// <summary>
  ///   描述一组应用于代码的安全权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.SecurityPermission')]
  DNSecurityPermission = interface(DNCodeAccessPermission)
  ['{D5F5125A-3D46-3C57-8393-0E4EE9D8016B}']
  { getter & setter } 

    function get_Flags: DNSecurityPermissionFlag;
    procedure set_Flags(value: DNSecurityPermissionFlag);

  { methods } 

    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   返回一个值，该值指示当前权限是否不受限制。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置安全权限标志。
    /// </summary>
    property Flags: DNSecurityPermissionFlag read get_Flags write set_Flags;
  end;

  TDNSecurityPermission = class(TDNGenericImport<DNSecurityPermissionClass, DNSecurityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSiteIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{2E5000B1-5E8C-4559-848E-840AF9EBA02C}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNSiteIdentityPermission; overload;
    /// <summary>
    ///   初始化  类的新实例，以表示指定的站点标识。
    /// </summary>
    {class} function init(site: string): DNSiteIdentityPermission; overload;

  end;

  /// <summary>
  ///   为代码所源自的网站定义标识权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.SiteIdentityPermission')]
  DNSiteIdentityPermission = interface(DNCodeAccessPermission)
  ['{3BCFC458-07DC-3BA7-8404-97EB76641080}']
  { getter & setter } 

    function get_Site: string;
    procedure set_Site(value: string);

  { methods } 

    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置当前站点。
    /// </summary>
    property Site: string read get_Site write set_Site;
  end;

  TDNSiteIdentityPermission = class(TDNGenericImport<DNSiteIdentityPermissionClass, DNSiteIdentityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNStrongNameIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{C8423A29-B535-4640-953C-AA7FD061DBBA}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNStrongNameIdentityPermission; overload;
    /// <summary>
    ///   为指定的强名称标识初始化  类的新实例。
    /// </summary>
    {class} function init(blob: DNStrongNamePublicKeyBlob; name: string; version: DNVersion): DNStrongNameIdentityPermission; overload;

  end;

  /// <summary>
  ///   定义强名称的标识权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.StrongNameIdentityPermission')]
  DNStrongNameIdentityPermission = interface(DNCodeAccessPermission)
  ['{2B00B9EC-B4F4-3243-90AB-532E64FEE941}']
  { getter & setter } 

    function get_PublicKey: DNStrongNamePublicKeyBlob;
    procedure set_PublicKey(value: DNStrongNamePublicKeyBlob);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Version: DNVersion;
    procedure set_Version(value: DNVersion);

  { methods } 

    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(e: DNSecurityElement);
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置定义强名称标识命名空间的公钥 blob。
    /// </summary>
    property PublicKey: DNStrongNamePublicKeyBlob read get_PublicKey write set_PublicKey;
    /// <summary>
    ///   获取或设置强名称标识的简单名称部分。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置标识的版本号。
    /// </summary>
    property Version: DNVersion read get_Version write set_Version;
  end;

  TDNStrongNameIdentityPermission = class(TDNGenericImport<DNStrongNameIdentityPermissionClass, DNStrongNameIdentityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNUIPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{5DBEC5FD-50E7-473E-9B7B-A8DBDE03EE7B}']
  { constructors } 

    /// <summary>
    ///   根据指定，使用完全限制或不受限制的访问初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNUIPermission; overload;
    /// <summary>
    ///   使用指定的窗口和剪贴板权限初始化  类的新实例。
    /// </summary>
    {class} function init(windowFlag: DNUIPermissionWindow; clipboardFlag: DNUIPermissionClipboard): DNUIPermission; overload;
    /// <summary>
    ///   在具有使用窗口的权限，但没有对剪贴板的访问权限的情况下，初始化  类的新实例。
    /// </summary>
    {class} function init(windowFlag: DNUIPermissionWindow): DNUIPermission; overload;
    /// <summary>
    ///   初始化具有剪贴板权限且无法访问 windows 的  类的新实例。
    /// </summary>
    {class} function init(clipboardFlag: DNUIPermissionClipboard): DNUIPermission; overload;

  end;

  /// <summary>
  ///   控制与用户界面和剪贴板相关的权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.UIPermission')]
  DNUIPermission = interface(DNCodeAccessPermission)
  ['{05B46A2D-7C6B-3EFF-A09A-1490A36811C2}']
  { getter & setter } 

    function get_Window: DNUIPermissionWindow;
    procedure set_Window(value: DNUIPermissionWindow);
    function get_Clipboard: DNUIPermissionClipboard;
    procedure set_Clipboard(value: DNUIPermissionClipboard);

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示当前权限是否不受限制。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，它是该权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置由权限表示的窗口访问。
    /// </summary>
    property Window: DNUIPermissionWindow read get_Window write set_Window;
    /// <summary>
    ///   获取或设置由该权限表示的剪贴板访问权限。
    /// </summary>
    property Clipboard: DNUIPermissionClipboard read get_Clipboard write set_Clipboard;
  end;

  TDNUIPermission = class(TDNGenericImport<DNUIPermissionClass, DNUIPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNUrlIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{6D2931C9-C454-472B-8442-900FF925E70A}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNUrlIdentityPermission; overload;
    /// <summary>
    ///   初始化  类的新实例，以表示  所描述的 URL 标识。
    /// </summary>
    {class} function init(site: string): DNUrlIdentityPermission; overload;

  end;

  /// <summary>
  ///   为代码的来源 URL 定义标识权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.UrlIdentityPermission')]
  DNUrlIdentityPermission = interface(DNCodeAccessPermission)
  ['{AB7D1AB9-D192-3A95-B34C-A3996837C6A7}']
  { getter & setter } 

    function get_Url: string;
    procedure set_Url(value: string);

  { methods } 

    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置表示 Internet 代码的标识的 URL。
    /// </summary>
    property Url: string read get_Url write set_Url;
  end;

  TDNUrlIdentityPermission = class(TDNGenericImport<DNUrlIdentityPermissionClass, DNUrlIdentityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNZoneIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{C7EADE4A-3A8E-4C85-A20F-C25DBD970BDF}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNZoneIdentityPermission; overload;
    /// <summary>
    ///   初始化  类的新实例，以表示指定的区域标识。
    /// </summary>
    {class} function init(zone: DNSecurityZone): DNZoneIdentityPermission; overload;

  end;

  /// <summary>
  ///   为代码的来源区域定义标识权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.ZoneIdentityPermission')]
  DNZoneIdentityPermission = interface(DNCodeAccessPermission)
  ['{CAEB199E-CEB9-388A-B240-E29C9F55199B}']
  { getter & setter } 

    function get_SecurityZone: DNSecurityZone;
    procedure set_SecurityZone(value: DNSecurityZone);

  { methods } 

    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置由当前  表示的区域。
    /// </summary>
    property SecurityZone: DNSecurityZone read get_SecurityZone write set_SecurityZone;
  end;

  TDNZoneIdentityPermission = class(TDNGenericImport<DNZoneIdentityPermissionClass, DNZoneIdentityPermission>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsymmetricAlgorithmClass = interface(DNObjectClass)
  ['{5B4211F3-A5A7-4C89-9FD1-1C0CDD28C49D}']
  { static methods } 

    /// <summary>
    ///   创建非对称算法的指定实现的实例。
    /// </summary>
    {class} function Create(algName: string): DNAsymmetricAlgorithm; overload;
    /// <summary>
    ///   创建用于执行非对称算法的默认加密对象。
    /// </summary>
    {class} function Create: DNAsymmetricAlgorithm; overload;

  end;

  /// <summary>
  ///   表示非对称算法的所有实现都必须从中继承的抽象基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.AsymmetricAlgorithm')]
  DNAsymmetricAlgorithm = interface(DNObject)
  ['{4B135D8E-7B1B-3EA8-8D06-10E34F157E9D}']
  { getter & setter } 

    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_SignatureAlgorithm: string;
    function get_KeyExchangeAlgorithm: string;

  { methods } 

    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   释放  类使用的所有资源。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   当在派生类中重写时，从 XML 字符串重新构造  对象。
    ///               否则，将引发 。
    /// </summary>
    procedure FromXmlString(xmlString: string);
    /// <summary>
    ///   当在派生类中重写时，创建并返回当前  对象的 XML 字符串表示形式。
    ///               否则，将引发 。
    /// </summary>
    function ToXmlString(includePrivateParameters: Boolean): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置非对称算法所用密钥模块的大小（以位为单位）。
    /// </summary>
    property KeySize: Int32 read get_KeySize write set_KeySize;
    /// <summary>
    ///   获取非对称算法支持的密钥大小。
    /// </summary>
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    /// <summary>
    ///   当在派生类中实现时，请获取签名算法的名称。
    ///               否则，将始终引发 。
    /// </summary>
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    /// <summary>
    ///   当在派生类中重写时，请获取密钥交换算法的名称。
    ///               否则，将引发 。
    /// </summary>
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
  end;

  TDNAsymmetricAlgorithm = class(TDNGenericImport<DNAsymmetricAlgorithmClass, DNAsymmetricAlgorithm>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSAClass = interface(DNAsymmetricAlgorithmClass)
  ['{38CFD25A-7804-403E-A0DE-7BA0C82FDB14}']
  { static methods } 

    /// <summary>
    ///   创建用于执行非对称算法的指定加密对象。
    /// </summary>
    {class} function Create(algName: string): DNDSA; overload;
    /// <summary>
    ///   创建用于执行非对称算法的默认加密对象。
    /// </summary>
    {class} function Create: DNDSA; overload;
    {class} function Create(keySizeInBits: Int32): DNDSA; overload;
    {class} function Create(parameters: DNDSAParameters): DNDSA; overload;

  end;

  /// <summary>
  ///   表示数字签名算法（）的所有实现都必须从中继承的抽象基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.DSA')]
  DNDSA = interface(DNAsymmetricAlgorithm)
  ['{C13E7301-9B3F-3530-B60A-7F141D6DDE83}']
  { getter & setter } 

    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_SignatureAlgorithm: string;
    function get_KeyExchangeAlgorithm: string;

  { methods } 

    /// <summary>
    ///   使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。
    /// </summary>
    function SignData(data: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    /// <summary>
    ///   使用指定的哈希算法计算指定字节数组的一个部分的哈希值，并对生成的哈希值进行签名。
    /// </summary>
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    /// <summary>
    ///   使用指定的哈希算法计算指定流的哈希值，并对生成的哈希值进行签名。
    /// </summary>
    function SignData(data: DNStream; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    /// <summary>
    ///   通过使用指定的哈希算法计算指定数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
    /// </summary>
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    /// <summary>
    ///   通过使用指定的哈希算法计算字节数组一个部分中数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
    /// </summary>
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    /// <summary>
    ///   通过使用指定的哈希算法计算指定流的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
    /// </summary>
    function VerifyData(data: DNStream; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    /// <summary>
    ///   当在派生类中重写创建  为指定的数据的签名。
    /// </summary>
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>;
    /// <summary>
    ///   当在派生类中重写验证  为指定的数据的签名。
    /// </summary>
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean;
    /// <summary>
    ///   重新构造  从 XML 字符串的对象。
    /// </summary>
    procedure FromXmlString(xmlString: string);
    /// <summary>
    ///   创建并返回当前的 XML 字符串表示  对象。
    /// </summary>
    function ToXmlString(includePrivateParameters: Boolean): string;
    /// <summary>
    ///   当在派生类中重写时，导出 。
    /// </summary>
    function ExportParameters(includePrivateParameters: Boolean): DNDSAParameters;
    /// <summary>
    ///   当在派生类中重写时，导入指定的 。
    /// </summary>
    procedure ImportParameters(parameters: DNDSAParameters);
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
  end;

  TDNDSA = class(TDNGenericImport<DNDSAClass, DNDSA>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSACryptoServiceProviderClass = interface(DNDSAClass)
  ['{A26F44D3-4C3A-442F-B0E5-AF324C995982}']
  { static getter & setter } 

    {class} function get_UseMachineKeyStore: Boolean;
    {class} procedure set_UseMachineKeyStore(value: Boolean);

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDSACryptoServiceProvider; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的密钥大小。
    /// </summary>
    {class} function init(dwKeySize: Int32): DNDSACryptoServiceProvider; overload;
    /// <summary>
    ///   新实例初始化  类使用的加密服务提供程序 (CSP) 指定的参数。
    /// </summary>
    {class} function init(parameters: DNCspParameters): DNDSACryptoServiceProvider; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的密钥大小和加密服务提供程序 (CSP) 参数。
    /// </summary>
    {class} function init(dwKeySize: Int32; parameters: DNCspParameters): DNDSACryptoServiceProvider; overload;

  { static propertys } 

    /// <summary>
    ///   获取或设置一个值，该值指示是否应在计算机的密钥存储而不是用户配置文件存储中保留密钥。
    /// </summary>
    {class} property UseMachineKeyStore: Boolean read get_UseMachineKeyStore write set_UseMachineKeyStore;
  end;

  /// <summary>
  ///   定义一个包装对象来访问加密服务提供程序 (CSP) 实现的  算法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.DSACryptoServiceProvider')]
  DNDSACryptoServiceProvider = interface(DNDSA)
  ['{673DFE75-9F93-304F-ABA8-D2A86BA87D7C}']
  { getter & setter } 

    function get_PublicOnly: Boolean;
    function get_CspKeyContainerInfo: DNCspKeyContainerInfo;
    function get_KeySize: Int32;
    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_PersistKeyInCsp: Boolean;
    procedure set_PersistKeyInCsp(value: Boolean);
    function get_LegalKeySizes: TArray<DNKeySizes>;

  { methods } 

    /// <summary>
    ///   导出 。
    /// </summary>
    function ExportParameters(includePrivateParameters: Boolean): DNDSAParameters;
    /// <summary>
    ///   将导出的 blob 包含与相关联的密钥信息  对象。
    /// </summary>
    function ExportCspBlob(includePrivateParameters: Boolean): TArray<Byte>;
    /// <summary>
    ///   导入指定 。
    /// </summary>
    procedure ImportParameters(parameters: DNDSAParameters);
    /// <summary>
    ///   导入的 blob，表示 DSA 密钥信息。
    /// </summary>
    procedure ImportCspBlob(keyBlob: TArray<Byte>);
    /// <summary>
    ///   计算指定的输入流的哈希值并签名所得的哈希值。
    /// </summary>
    function SignData(inputStream: DNStream): TArray<Byte>; overload;
    /// <summary>
    ///   计算指定的字节数组的哈希值并签名所得的哈希值。
    /// </summary>
    function SignData(buffer: TArray<Byte>): TArray<Byte>; overload;
    /// <summary>
    ///   符号字节数组从指定的起始点指定的终结点。
    /// </summary>
    function SignData(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    /// <summary>
    ///   通过进行比较，对计算为指定的数据的签名验证指定的签名数据。
    /// </summary>
    function VerifyData(rgbData: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean; overload;
    /// <summary>
    ///   创建  为指定的数据的签名。
    /// </summary>
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>;
    /// <summary>
    ///   验证  为指定的数据的签名。
    /// </summary>
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean;
    /// <summary>
    ///   计算指定的哈希值的签名，方法是将其与私钥一起加密。
    /// </summary>
    function SignHash(rgbHash: TArray<Byte>; str: string): TArray<Byte>;
    /// <summary>
    ///   通过进行比较，对指定的哈希值计算的签名验证指定的签名数据。
    /// </summary>
    function VerifyHash(rgbHash: TArray<Byte>; str: string; rgbSignature: TArray<Byte>): Boolean;
    function SignData(data: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: DNStream; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: DNStream; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示是否  对象仅包含公钥。
    /// </summary>
    property PublicOnly: Boolean read get_PublicOnly;
    /// <summary>
    ///   获取描述有关加密密钥对的附加信息的  对象。
    /// </summary>
    property CspKeyContainerInfo: DNCspKeyContainerInfo read get_CspKeyContainerInfo;
    /// <summary>
    ///   获取用来以位为单位的非对称算法的密钥的大小。
    /// </summary>
    property KeySize: Int32 read get_KeySize;
    /// <summary>
    ///   获取密钥交换算法的名称。
    /// </summary>
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    /// <summary>
    ///   获取签名算法的名称。
    /// </summary>
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    /// <summary>
    ///   获取或设置一个值，该值指示是否应在加密服务提供程序 (CSP) 中保留此密钥。
    /// </summary>
    property PersistKeyInCsp: Boolean read get_PersistKeyInCsp write set_PersistKeyInCsp;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
  end;

  TDNDSACryptoServiceProvider = class(TDNGenericImport<DNDSACryptoServiceProviderClass, DNDSACryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAClass = interface(DNAsymmetricAlgorithmClass)
  ['{0B91A13B-A086-4FBE-A85D-3C7DFEB51440}']
  { static methods } 

    /// <summary>
    ///   创建  的指定实现的实例。
    /// </summary>
    {class} function Create(algName: string): DNRSA; overload;
    /// <summary>
    ///   创建  算法的默认实现的实例。
    /// </summary>
    {class} function Create: DNRSA; overload;
    {class} function Create(keySizeInBits: Int32): DNRSA; overload;
    {class} function Create(parameters: DNRSAParameters): DNRSA; overload;

  end;

  /// <summary>
  ///   表示  算法的所有实现均从中继承的基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSA')]
  DNRSA = interface(DNAsymmetricAlgorithm)
  ['{3E39CA4F-CD6F-3CFE-8659-7FDC8D1C9F0B}']
  { getter & setter } 

    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DNKeySizes>;

  { methods } 

    /// <summary>
    ///   在派生类中被重写时，使用指定的填充模式加密输入数据。
    /// </summary>
    function Encrypt(data: TArray<Byte>; padding: DNRSAEncryptionPadding): TArray<Byte>;
    /// <summary>
    ///   在派生类中被重写时，使用指定的填充模式来解密输入数据。
    /// </summary>
    function Decrypt(data: TArray<Byte>; padding: DNRSAEncryptionPadding): TArray<Byte>;
    /// <summary>
    ///   在派生类中重写时，计算指定的哈希值的签名，方法是使用指定填充将其与私钥一起加密。
    /// </summary>
    function SignHash(hash: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>;
    /// <summary>
    ///   通过使用指定的哈希算法和填充方式计算签名中的哈希值，然后将其与提供的哈希值进行比较来验证数字签名是否有效。
    /// </summary>
    function VerifyHash(hash: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean;
    /// <summary>
    ///   使用指定的哈希算法和填充模式计算指定字节的哈希值，并对生产的哈希值进行签名。
    /// </summary>
    function SignData(data: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    /// <summary>
    ///   使用指定的哈希算法和填充模式计算指定字节数组部分的哈希值并签名生成的哈希值。
    /// </summary>
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    /// <summary>
    ///   使用指定的哈希算法和填充模式计算指定流的哈希值并签名生成的哈希值。
    /// </summary>
    function SignData(data: DNStream; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    /// <summary>
    ///   通过使用指定的哈希算法和填充方式计算指定数据的哈希值，然后将其与提供的签名进行比较来验证数字签名是否有效。
    /// </summary>
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    /// <summary>
    ///   通过使用指定的哈希算法和填充模式计算字节数组某部分中数据的哈希值，并将其与所提供的签名进行比较，以此验证数字签名是否有效。
    /// </summary>
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    /// <summary>
    ///   通过使用指定的哈希算法和填充方式计算指定流的哈希值，然后将其与提供的签名进行比较来验证数字签名是否有效。
    /// </summary>
    function VerifyData(data: DNStream; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    /// <summary>
    ///   当在派生类中重写时，使用私钥解密输入数据。
    /// </summary>
    function DecryptValue(rgb: TArray<Byte>): TArray<Byte>;
    /// <summary>
    ///   当在派生类中重写时，使用公钥加密输入数据。
    /// </summary>
    function EncryptValue(rgb: TArray<Byte>): TArray<Byte>;
    /// <summary>
    ///   通过 XML 字符串中的密钥信息初始化  对象。
    /// </summary>
    procedure FromXmlString(xmlString: string);
    /// <summary>
    ///   创建并返回包含当前  对象的密钥的 XML 字符串。
    /// </summary>
    function ToXmlString(includePrivateParameters: Boolean): string;
    /// <summary>
    ///   当在派生类中重写时，导出 。
    /// </summary>
    function ExportParameters(includePrivateParameters: Boolean): DNRSAParameters;
    /// <summary>
    ///   当在派生类中重写时，导入指定的 。
    /// </summary>
    procedure ImportParameters(parameters: DNRSAParameters);
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取可用于  的此实现的密钥交换算法的名称。
    /// </summary>
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    /// <summary>
    ///   获取可用于  的此实现的签名算法的名称。
    /// </summary>
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
  end;

  TDNRSA = class(TDNGenericImport<DNRSAClass, DNRSA>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSACryptoServiceProviderClass = interface(DNRSAClass)
  ['{3C9070DF-61E2-4644-B5D8-0CE2AE951170}']
  { static getter & setter } 

    {class} function get_UseMachineKeyStore: Boolean;
    {class} procedure set_UseMachineKeyStore(value: Boolean);

  { constructors } 

    /// <summary>
    ///   使用默认密钥初始化  类的新实例。
    /// </summary>
    {class} function init: DNRSACryptoServiceProvider; overload;
    /// <summary>
    ///   使用指定的密钥大小初始化  类的新实例。
    /// </summary>
    {class} function init(dwKeySize: Int32): DNRSACryptoServiceProvider; overload;
    /// <summary>
    ///   使用指定的参数初始化  类的新实例。
    /// </summary>
    {class} function init(parameters: DNCspParameters): DNRSACryptoServiceProvider; overload;
    /// <summary>
    ///   使用指定的密钥大小和参数初始化  类的新实例。
    /// </summary>
    {class} function init(dwKeySize: Int32; parameters: DNCspParameters): DNRSACryptoServiceProvider; overload;

  { static propertys } 

    /// <summary>
    ///   获取或设置一个值，该值指示是否应在计算机的密钥存储而不是用户配置文件存储中保留密钥。
    /// </summary>
    {class} property UseMachineKeyStore: Boolean read get_UseMachineKeyStore write set_UseMachineKeyStore;
  end;

  /// <summary>
  ///   使用加密服务提供程序 (CSP) 提供的  算法的实现执行非对称加密和解密。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSACryptoServiceProvider')]
  DNRSACryptoServiceProvider = interface(DNRSA)
  ['{D9035152-6B1F-33E3-86F4-411CD21CDE0E}']
  { getter & setter } 

    function get_PublicOnly: Boolean;
    function get_CspKeyContainerInfo: DNCspKeyContainerInfo;
    function get_KeySize: Int32;
    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_PersistKeyInCsp: Boolean;
    procedure set_PersistKeyInCsp(value: Boolean);
    function get_LegalKeySizes: TArray<DNKeySizes>;

  { methods } 

    /// <summary>
    ///   导出 。
    /// </summary>
    function ExportParameters(includePrivateParameters: Boolean): DNRSAParameters;
    /// <summary>
    ///   导出包含与  对象关联的密钥信息的 blob。
    /// </summary>
    function ExportCspBlob(includePrivateParameters: Boolean): TArray<Byte>;
    /// <summary>
    ///   导入指定的 。
    /// </summary>
    procedure ImportParameters(parameters: DNRSAParameters);
    /// <summary>
    ///   导入表示 RSA 密钥信息的 blob。
    /// </summary>
    procedure ImportCspBlob(keyBlob: TArray<Byte>);
    /// <summary>
    ///   使用指定的哈希算法计算指定输入流的哈希值，并对生成的哈希值进行签名。
    /// </summary>
    function SignData(inputStream: DNStream; halg: DNObject): TArray<Byte>; overload;
    /// <summary>
    ///   使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。
    /// </summary>
    function SignData(buffer: TArray<Byte>; halg: DNObject): TArray<Byte>; overload;
    /// <summary>
    ///   使用指定的哈希算法计算指定字节数组子集的哈希值，并对生成的哈希值进行签名。
    /// </summary>
    function SignData(buffer: TArray<Byte>; offset: Int32; count: Int32; halg: DNObject): TArray<Byte>; overload;
    /// <summary>
    ///   通过使用提供的公钥计算签名中的哈希值，然后将其与提供的数据的哈希值进行比较，从而验证数字签名是否有效。
    /// </summary>
    function VerifyData(buffer: TArray<Byte>; halg: DNObject; signature: TArray<Byte>): Boolean; overload;
    /// <summary>
    ///   计算指定的哈希值的签名，方法是将其与私钥一起加密。
    /// </summary>
    function SignHash(rgbHash: TArray<Byte>; str: string): TArray<Byte>; overload;
    /// <summary>
    ///   通过使用提供的公钥计算签名中的哈希值，然后将其与提供的哈希值进行比较来验证数字签名是否有效。
    /// </summary>
    function VerifyHash(rgbHash: TArray<Byte>; str: string; rgbSignature: TArray<Byte>): Boolean; overload;
    /// <summary>
    ///   使用  算法加密数据。
    /// </summary>
    function Encrypt(rgb: TArray<Byte>; fOAEP: Boolean): TArray<Byte>; overload;
    /// <summary>
    ///   使用  算法加密数据。
    /// </summary>
    function Decrypt(rgb: TArray<Byte>; fOAEP: Boolean): TArray<Byte>; overload;
    /// <summary>
    ///   当前版本不支持此方法。
    /// </summary>
    function DecryptValue(rgb: TArray<Byte>): TArray<Byte>;
    /// <summary>
    ///   当前版本不支持此方法。
    /// </summary>
    function EncryptValue(rgb: TArray<Byte>): TArray<Byte>;
    /// <summary>
    ///   使用指定的填充，借助  算法，对数据加密。
    /// </summary>
    function Encrypt(data: TArray<Byte>; padding: DNRSAEncryptionPadding): TArray<Byte>; overload;
    /// <summary>
    ///   使用指定填充对以前通过  算法加密的数据进行解密。
    /// </summary>
    function Decrypt(data: TArray<Byte>; padding: DNRSAEncryptionPadding): TArray<Byte>; overload;
    /// <summary>
    ///   计算指定的哈希值的签名，方法是使用指定填充将其与私钥一起加密。
    /// </summary>
    function SignHash(hash: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    /// <summary>
    ///   通过使用指定的哈希算法和填充模式确定签名中的哈希值，并将其与所提供的哈希值进行比较，以此验证数字签名是否有效。
    /// </summary>
    function VerifyHash(hash: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    function SignData(data: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    function SignData(data: DNStream; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    function VerifyData(data: DNStream; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示  对象是否仅包含公钥。
    /// </summary>
    property PublicOnly: Boolean read get_PublicOnly;
    /// <summary>
    ///   获取描述有关加密密钥对的附加信息的  对象。
    /// </summary>
    property CspKeyContainerInfo: DNCspKeyContainerInfo read get_CspKeyContainerInfo;
    /// <summary>
    ///   获取当前密钥的大小。
    /// </summary>
    property KeySize: Int32 read get_KeySize;
    /// <summary>
    ///   获取可用于  的实现的密钥交换算法的名称。
    /// </summary>
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    /// <summary>
    ///   获取可用于此  的实现的签名算法的名称。
    /// </summary>
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    /// <summary>
    ///   获取或设置一个值，该值指示是否应在加密服务提供程序 (CSP) 中保留此密钥。
    /// </summary>
    property PersistKeyInCsp: Boolean read get_PersistKeyInCsp write set_PersistKeyInCsp;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
  end;

  TDNRSACryptoServiceProvider = class(TDNGenericImport<DNRSACryptoServiceProviderClass, DNRSACryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsymmetricKeyExchangeDeformatterClass = interface(DNObjectClass)
  ['{A0AC31B7-13DE-4BF8-BB9F-CE713D41AD4C}']
  end;

  /// <summary>
  ///   表示所有非对称密钥交换反格式化程序均从中派生的基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.AsymmetricKeyExchangeDeformatter')]
  DNAsymmetricKeyExchangeDeformatter = interface(DNObject)
  ['{0202CE16-1F18-3BFB-807D-760B157AB260}']
  { getter & setter } 

    function get_Parameters: string;
    procedure set_Parameters(value: string);

  { methods } 

    /// <summary>
    ///   在派生类中重写时，设置要用于解密机密信息的私钥。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   在派生类中重写时，从加密的密钥交换数据中提取机密信息。
    /// </summary>
    function DecryptKeyExchange(rgb: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   在派生类中重写时，获取或设置非对称密钥交换的参数。
    /// </summary>
    property Parameters: string read get_Parameters write set_Parameters;
  end;

  TDNAsymmetricKeyExchangeDeformatter = class(TDNGenericImport<DNAsymmetricKeyExchangeDeformatterClass, DNAsymmetricKeyExchangeDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAOAEPKeyExchangeDeformatterClass = interface(DNAsymmetricKeyExchangeDeformatterClass)
  ['{3FB545E5-2CAC-45F1-BB36-57EAD4E9CC41}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRSAOAEPKeyExchangeDeformatter; overload;
    /// <summary>
    ///   使用指定的密钥初始化  类的新实例。
    /// </summary>
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAOAEPKeyExchangeDeformatter; overload;

  end;

  /// <summary>
  ///   对最优非对称加密填充 (OAEP) 密钥交换数据进行解密。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter')]
  DNRSAOAEPKeyExchangeDeformatter = interface(DNAsymmetricKeyExchangeDeformatter)
  ['{4D187AC2-D815-3B7E-BCEA-8E0BBC702F7C}']
  { getter & setter } 

    function get_Parameters: string;
    procedure set_Parameters(value: string);

  { methods } 

    /// <summary>
    ///   设置用于解密机密信息的私钥。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   从加密的密钥交换数据中提取机密信息。
    /// </summary>
    function DecryptKeyExchange(rgbData: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置最优不对称加密填充 (OAEP) 密钥交换的参数。
    /// </summary>
    property Parameters: string read get_Parameters write set_Parameters;
  end;

  TDNRSAOAEPKeyExchangeDeformatter = class(TDNGenericImport<DNRSAOAEPKeyExchangeDeformatterClass, DNRSAOAEPKeyExchangeDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAPKCS1KeyExchangeDeformatterClass = interface(DNAsymmetricKeyExchangeDeformatterClass)
  ['{1F9696F4-0DC0-4237-814C-79069FBB9FAA}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRSAPKCS1KeyExchangeDeformatter; overload;
    /// <summary>
    ///   使用指定的密钥初始化  类的新实例。
    /// </summary>
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAPKCS1KeyExchangeDeformatter; overload;

  end;

  /// <summary>
  ///   对 PKCS #1 密钥交换数据进行解密。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter')]
  DNRSAPKCS1KeyExchangeDeformatter = interface(DNAsymmetricKeyExchangeDeformatter)
  ['{EE96F4E1-377E-315C-AEF5-874DC8C7A2AA}']
  { getter & setter } 

    function get_RNG: DNRandomNumberGenerator;
    procedure set_RNG(value: DNRandomNumberGenerator);
    function get_Parameters: string;
    procedure set_Parameters(value: string);

  { methods } 

    /// <summary>
    ///   从加密的密钥交换数据中提取机密信息。
    /// </summary>
    function DecryptKeyExchange(rgbIn: TArray<Byte>): TArray<Byte>;
    /// <summary>
    ///   设置用于解密机密信息的私钥。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置创建密钥交换时要使用的随机数生成器算法。
    /// </summary>
    property RNG: DNRandomNumberGenerator read get_RNG write set_RNG;
    /// <summary>
    ///   获取 PKCS #1 密钥交换的参数。
    /// </summary>
    property Parameters: string read get_Parameters write set_Parameters;
  end;

  TDNRSAPKCS1KeyExchangeDeformatter = class(TDNGenericImport<DNRSAPKCS1KeyExchangeDeformatterClass, DNRSAPKCS1KeyExchangeDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsymmetricKeyExchangeFormatterClass = interface(DNObjectClass)
  ['{7290F106-2C18-41FC-8A48-05D511E28006}']
  end;

  /// <summary>
  ///   表示从中派生出所有非对称密钥交换格式化程序的基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.AsymmetricKeyExchangeFormatter')]
  DNAsymmetricKeyExchangeFormatter = interface(DNObject)
  ['{CE38DC2D-EB2D-3B6A-AFAC-8537BD0B9BF7}']
  { getter & setter } 

    function get_Parameters: string;

  { methods } 

    /// <summary>
    ///   当在派生类中重写时，设置要用于加密机密信息的公钥。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   当在派生类中重写时，请从指定的输入数据创建加密的密钥交换数据。
    /// </summary>
    function CreateKeyExchange(data: TArray<Byte>): TArray<Byte>; overload;
    /// <summary>
    ///   当在派生类中重写时，请从指定的输入数据创建加密的密钥交换数据。
    /// </summary>
    function CreateKeyExchange(data: TArray<Byte>; symAlgType: DNType): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   在派生类中重写时，获取非对称密钥交换的参数。
    /// </summary>
    property Parameters: string read get_Parameters;
  end;

  TDNAsymmetricKeyExchangeFormatter = class(TDNGenericImport<DNAsymmetricKeyExchangeFormatterClass, DNAsymmetricKeyExchangeFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAOAEPKeyExchangeFormatterClass = interface(DNAsymmetricKeyExchangeFormatterClass)
  ['{201F3E54-74C4-41A3-B458-E1AD5726FAF1}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRSAOAEPKeyExchangeFormatter; overload;
    /// <summary>
    ///   使用指定的密钥初始化  类的新实例。
    /// </summary>
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAOAEPKeyExchangeFormatter; overload;

  end;

  /// <summary>
  ///   使用  创建最优非对称加密填充 (OAEP) 密钥交换数据。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSAOAEPKeyExchangeFormatter')]
  DNRSAOAEPKeyExchangeFormatter = interface(DNAsymmetricKeyExchangeFormatter)
  ['{A0E2E749-63CE-3651-8F4F-F5F996344C32}']
  { getter & setter } 

    function get_Parameter: TArray<Byte>;
    procedure set_Parameter(value: TArray<Byte>);
    function get_Parameters: string;
    function get_Rng: DNRandomNumberGenerator;
    procedure set_Rng(value: DNRandomNumberGenerator);

  { methods } 

    /// <summary>
    ///   设置要用于对密钥交换数据进行加密的公钥。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   从指定的输入数据创建加密的密钥交换数据。
    /// </summary>
    function CreateKeyExchange(rgbData: TArray<Byte>; symAlgType: DNType): TArray<Byte>; overload;
    /// <summary>
    ///   从指定的输入数据创建加密的密钥交换数据。
    /// </summary>
    function CreateKeyExchange(rgbData: TArray<Byte>): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置用于在密钥交换创建过程中创建空白的参数。
    /// </summary>
    property Parameter: TArray<Byte> read get_Parameter write set_Parameter;
    /// <summary>
    ///   获取或设置最优不对称加密填充 (OAEP) 密钥交换的参数。
    /// </summary>
    property Parameters: string read get_Parameters;
    /// <summary>
    ///   获取或设置创建密钥交换时要使用的随机数生成器算法。
    /// </summary>
    property Rng: DNRandomNumberGenerator read get_Rng write set_Rng;
  end;

  TDNRSAOAEPKeyExchangeFormatter = class(TDNGenericImport<DNRSAOAEPKeyExchangeFormatterClass, DNRSAOAEPKeyExchangeFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAPKCS1KeyExchangeFormatterClass = interface(DNAsymmetricKeyExchangeFormatterClass)
  ['{F96E5DB1-9AA9-43EE-8076-656EEDE79993}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRSAPKCS1KeyExchangeFormatter; overload;
    /// <summary>
    ///   使用指定的密钥初始化  类的新实例。
    /// </summary>
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAPKCS1KeyExchangeFormatter; overload;

  end;

  /// <summary>
  ///   使用  创建 PKCS#1 密钥交换数据。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter')]
  DNRSAPKCS1KeyExchangeFormatter = interface(DNAsymmetricKeyExchangeFormatter)
  ['{92755472-2059-3F96-8938-8AC767B5187B}']
  { getter & setter } 

    function get_Parameters: string;
    function get_Rng: DNRandomNumberGenerator;
    procedure set_Rng(value: DNRandomNumberGenerator);

  { methods } 

    /// <summary>
    ///   设置要用于对密钥交换数据进行加密的公钥。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   从指定的输入数据创建加密的密钥交换数据。
    /// </summary>
    function CreateKeyExchange(rgbData: TArray<Byte>; symAlgType: DNType): TArray<Byte>; overload;
    /// <summary>
    ///   从指定的输入数据创建加密的密钥交换数据。
    /// </summary>
    function CreateKeyExchange(rgbData: TArray<Byte>): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取 PKCS #1 密钥交换的参数。
    /// </summary>
    property Parameters: string read get_Parameters;
    /// <summary>
    ///   获取或设置创建密钥交换时要使用的随机数生成器算法。
    /// </summary>
    property Rng: DNRandomNumberGenerator read get_Rng write set_Rng;
  end;

  TDNRSAPKCS1KeyExchangeFormatter = class(TDNGenericImport<DNRSAPKCS1KeyExchangeFormatterClass, DNRSAPKCS1KeyExchangeFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsymmetricSignatureDeformatterClass = interface(DNObjectClass)
  ['{9C81B68E-220A-42C2-9DA0-1A78544CB8B6}']
  end;

  /// <summary>
  ///   表示从中派生非对称签名反格式化程序的所有实现的抽象基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.AsymmetricSignatureDeformatter')]
  DNAsymmetricSignatureDeformatter = interface(DNObject)
  ['{BEE4E9FD-DE7A-3512-93D8-0C5E006B167A}']
  { methods } 

    /// <summary>
    ///   通过指定的哈希值验证签名。
    /// </summary>
    function VerifySignature(hash: DNHashAlgorithm; rgbSignature: TArray<Byte>): Boolean; overload;
    /// <summary>
    ///   当在派生类中重写时，设置要用于验证签名的公钥。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   当在派生类中重写时，设置要用于验证签名的哈希算法。
    /// </summary>
    procedure SetHashAlgorithm(strName: string);
    /// <summary>
    ///   在派生类中重写时，验证指定数据的签名。
    /// </summary>
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNAsymmetricSignatureDeformatter = class(TDNGenericImport<DNAsymmetricSignatureDeformatterClass, DNAsymmetricSignatureDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSASignatureDeformatterClass = interface(DNAsymmetricSignatureDeformatterClass)
  ['{5AEA891D-3F88-41CA-ADFF-4AF826D41C8D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDSASignatureDeformatter; overload;
    /// <summary>
    ///   使用指定的密钥初始化  类的新实例。
    /// </summary>
    {class} function init(key: DNAsymmetricAlgorithm): DNDSASignatureDeformatter; overload;

  end;

  /// <summary>
  ///   验证数字签名算法 () PKCS #1 v1.5 签名。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.DSASignatureDeformatter')]
  DNDSASignatureDeformatter = interface(DNAsymmetricSignatureDeformatter)
  ['{1F17C39C-99D5-37E0-8E98-8F27044BD50A}']
  { methods } 

    /// <summary>
    ///   指定要用于数字签名算法的密钥 () 签名反格式化程序。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   指定数字签名算法的哈希算法 () 签名反格式化程序。
    /// </summary>
    procedure SetHashAlgorithm(strName: string);
    /// <summary>
    ///   验证数字签名算法 () 对数据签名。
    /// </summary>
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean; overload;
    function VerifySignature(hash: DNHashAlgorithm; rgbSignature: TArray<Byte>): Boolean; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNDSASignatureDeformatter = class(TDNGenericImport<DNDSASignatureDeformatterClass, DNDSASignatureDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAPKCS1SignatureDeformatterClass = interface(DNAsymmetricSignatureDeformatterClass)
  ['{7BF6B869-8CEE-4F2C-8DFB-694CF8D4DE95}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRSAPKCS1SignatureDeformatter; overload;
    /// <summary>
    ///   使用指定的密钥初始化  类的新实例。
    /// </summary>
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAPKCS1SignatureDeformatter; overload;

  end;

  /// <summary>
  ///   验证  PKCS #1 1.5 版签名。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSAPKCS1SignatureDeformatter')]
  DNRSAPKCS1SignatureDeformatter = interface(DNAsymmetricSignatureDeformatter)
  ['{6F674828-9081-3B45-BC39-791BD84CCF8F}']
  { methods } 

    /// <summary>
    ///   设置用于验证签名的公钥。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   设置用于验证签名的哈希算法。
    /// </summary>
    procedure SetHashAlgorithm(strName: string);
    /// <summary>
    ///   验证指定数据的  PKCS#1 签名。
    /// </summary>
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean; overload;
    function VerifySignature(hash: DNHashAlgorithm; rgbSignature: TArray<Byte>): Boolean; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRSAPKCS1SignatureDeformatter = class(TDNGenericImport<DNRSAPKCS1SignatureDeformatterClass, DNRSAPKCS1SignatureDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsymmetricSignatureFormatterClass = interface(DNObjectClass)
  ['{A35C3871-2D14-48F2-BA9D-0063F954A2E8}']
  end;

  /// <summary>
  ///   表示从中继承非对称算法的所有实现的基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.AsymmetricSignatureFormatter')]
  DNAsymmetricSignatureFormatter = interface(DNObject)
  ['{5B475A84-5310-3C64-B625-E2BF00476F53}']
  { methods } 

    /// <summary>
    ///   使用指定哈希值创建签名。
    /// </summary>
    function CreateSignature(hash: DNHashAlgorithm): TArray<Byte>; overload;
    /// <summary>
    ///   当在派生类中重写时，设置要用于创建签名的非对称算法。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   当在派生类中重写时，设置要用于创建签名的哈希算法。
    /// </summary>
    procedure SetHashAlgorithm(strName: string);
    /// <summary>
    ///   在派生类中重写时，获取指定数据的签名。
    /// </summary>
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNAsymmetricSignatureFormatter = class(TDNGenericImport<DNAsymmetricSignatureFormatterClass, DNAsymmetricSignatureFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSASignatureFormatterClass = interface(DNAsymmetricSignatureFormatterClass)
  ['{BE6A145B-3768-4CFC-B5D1-630D8747683D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDSASignatureFormatter; overload;
    /// <summary>
    ///   使用指定的密钥初始化  类的新实例。
    /// </summary>
    {class} function init(key: DNAsymmetricAlgorithm): DNDSASignatureFormatter; overload;

  end;

  /// <summary>
  ///   创建数字签名算法 () 签名。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.DSASignatureFormatter')]
  DNDSASignatureFormatter = interface(DNAsymmetricSignatureFormatter)
  ['{8F6D198C-E66F-3A87-AA3F-F885DD09EA13}']
  { methods } 

    /// <summary>
    ///   指定要用于数字签名算法的密钥 () 签名格式化程序。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   指定数字签名算法的哈希算法 () 签名格式化程序。
    /// </summary>
    procedure SetHashAlgorithm(strName: string);
    /// <summary>
    ///   创建数字签名算法 () 为指定的数据的 PKCS #1 签名。
    /// </summary>
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>; overload;
    function CreateSignature(hash: DNHashAlgorithm): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNDSASignatureFormatter = class(TDNGenericImport<DNDSASignatureFormatterClass, DNDSASignatureFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAPKCS1SignatureFormatterClass = interface(DNAsymmetricSignatureFormatterClass)
  ['{494E608A-147A-474E-AADC-6EFB20932179}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRSAPKCS1SignatureFormatter; overload;
    /// <summary>
    ///   使用指定的密钥初始化  类的新实例。
    /// </summary>
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAPKCS1SignatureFormatter; overload;

  end;

  /// <summary>
  ///   创建  PKCS #1 1.5 版签名。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSAPKCS1SignatureFormatter')]
  DNRSAPKCS1SignatureFormatter = interface(DNAsymmetricSignatureFormatter)
  ['{7BC115CD-1EE2-3068-894D-E3D3F7632F40}']
  { methods } 

    /// <summary>
    ///   设置要用于创建签名的私钥。
    /// </summary>
    procedure SetKey(key: DNAsymmetricAlgorithm);
    /// <summary>
    ///   设置用于创建签名的哈希算法。
    /// </summary>
    procedure SetHashAlgorithm(strName: string);
    /// <summary>
    ///   为指定数据创建  PKCS #1 签名。
    /// </summary>
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>; overload;
    function CreateSignature(hash: DNHashAlgorithm): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRSAPKCS1SignatureFormatter = class(TDNGenericImport<DNRSAPKCS1SignatureFormatterClass, DNRSAPKCS1SignatureFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptoAPITransformClass = interface(DNObjectClass)
  ['{2F14FCA5-F943-4367-A533-CDD6F53D136A}']
  end;

  /// <summary>
  ///   执行数据的加密转换。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.CryptoAPITransform')]
  DNCryptoAPITransform = interface(DNObject)
  ['{AE746923-16BB-3D31-9D08-CE50EF6F7B1A}']
  { getter & setter } 

    function get_KeyHandle: IntPtr;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   释放使用的所有资源  方法。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   重置的内部状态  ，以便它可再次执行不同的加密或解密。
    /// </summary>
    procedure Reset;
    /// <summary>
    ///   计算输入的字节数组的指定区域转换并将所得到的转换复制到输出字节数组的指定区域。
    /// </summary>
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    /// <summary>
    ///   计算指定的字节数组的指定区域的转换。
    /// </summary>
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取密钥句柄。
    /// </summary>
    property KeyHandle: IntPtr read get_KeyHandle;
    /// <summary>
    ///   获取输入块大小。
    /// </summary>
    property InputBlockSize: Int32 read get_InputBlockSize;
    /// <summary>
    ///   获取输出块大小。
    /// </summary>
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    /// <summary>
    ///   获取一个值，该值指示是否可以转换多个块。
    /// </summary>
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    /// <summary>
    ///   获取一个值，该值指示是否可重复使用当前转换。
    /// </summary>
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNCryptoAPITransform = class(TDNGenericImport<DNCryptoAPITransformClass, DNCryptoAPITransform>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptoConfigClass = interface(DNObjectClass)
  ['{26759F91-2B98-4517-83EE-A8A6ECF5DA2F}']
  { static getter & setter } 

    {class} function get_AllowOnlyFipsAlgorithms: Boolean;

  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCryptoConfig;

  { static methods } 

    /// <summary>
    ///   使用指定的参数创建指定的加密对象的新实例。
    /// </summary>
    {class} function CreateFromName(name: string; args: TArray<DNObject>): DNObject; overload;
    /// <summary>
    ///   算法映射到用于当前的应用程序域中添加一组的名称。
    /// </summary>
    {class} procedure AddAlgorithm(algorithm: DNType; names: TArray<string>);
    /// <summary>
    ///   创建指定的加密对象的新实例。
    /// </summary>
    {class} function CreateFromName(name: string): DNObject; overload;
    /// <summary>
    ///   对象标识符 (OID) 映射到用于当前的应用程序域中添加一组的名称。
    /// </summary>
    {class} procedure AddOID(oid: string; names: TArray<string>);
    /// <summary>
    ///   获取与指定的简单名称对应的算法的对象标识符 (OID)。
    /// </summary>
    {class} function MapNameToOID(name: string): string;
    /// <summary>
    ///   将编码为指定的对象标识符 (OID)。
    /// </summary>
    {class} function EncodeOID(str: string): TArray<Byte>;

  { static propertys } 

    /// <summary>
    ///   指示运行时是否应强制执行策略以创建仅联邦信息处理标准 (FIPS) 认证的算法。
    /// </summary>
    {class} property AllowOnlyFipsAlgorithms: Boolean read get_AllowOnlyFipsAlgorithms;
  end;

  /// <summary>
  ///   访问加密配置信息。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.CryptoConfig')]
  DNCryptoConfig = interface(DNObject)
  ['{9EA60ECA-3DCD-340F-8E95-67845D185999}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCryptoConfig = class(TDNGenericImport<DNCryptoConfigClass, DNCryptoConfig>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCspKeyContainerInfoClass = interface(DNObjectClass)
  ['{D2B363FB-7EA6-40A1-99FC-A1AE7FA549AC}']
  { constructors } 

    /// <summary>
    ///   使用指定参数初始化  类的新实例。
    /// </summary>
    {class} function init(parameters: DNCspParameters): DNCspKeyContainerInfo;

  end;

  /// <summary>
  ///   提供有关加密密钥对的附加信息。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.CspKeyContainerInfo')]
  DNCspKeyContainerInfo = interface(DNObject)
  ['{E5E5B585-8A68-3F26-BB61-F34EF3AD27F8}']
  { getter & setter } 

    function get_MachineKeyStore: Boolean;
    function get_ProviderName: string;
    function get_ProviderType: Int32;
    function get_KeyContainerName: string;
    function get_UniqueKeyContainerName: string;
    function get_KeyNumber: DNKeyNumber;
    function get_Exportable: Boolean;
    function get_HardwareDevice: Boolean;
    function get_Removable: Boolean;
    function get_Accessible: Boolean;
    function get_Protected: Boolean;
    function get_CryptoKeySecurity: DNCryptoKeySecurity;
    function get_RandomlyGenerated: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示某个密钥是否来自计算机密钥集。
    /// </summary>
    property MachineKeyStore: Boolean read get_MachineKeyStore;
    /// <summary>
    ///   获取密钥的提供程序名称。
    /// </summary>
    property ProviderName: string read get_ProviderName;
    /// <summary>
    ///   获取密钥的提供程序类型。
    /// </summary>
    property ProviderType: Int32 read get_ProviderType;
    /// <summary>
    ///   获取密钥容器名称。
    /// </summary>
    property KeyContainerName: string read get_KeyContainerName;
    /// <summary>
    ///   获取唯一的密钥容器名称。
    /// </summary>
    property UniqueKeyContainerName: string read get_UniqueKeyContainerName;
    /// <summary>
    ///   获取一个值，该值描述非对称密钥被创建为签名密钥还是交换密钥。
    /// </summary>
    property KeyNumber: DNKeyNumber read get_KeyNumber;
    /// <summary>
    ///   获取一个值，该值指示是否可以从一个密钥容器中导出密钥。
    /// </summary>
    property Exportable: Boolean read get_Exportable;
    /// <summary>
    ///   获取一个值，该值指示一个键是否硬件密钥。
    /// </summary>
    property HardwareDevice: Boolean read get_HardwareDevice;
    /// <summary>
    ///   获取一个值，该值指示是否可从一个密钥容器删除密钥。
    /// </summary>
    property Removable: Boolean read get_Removable;
    /// <summary>
    ///   获取一个值，该值指示是否可访问的密钥容器中的键。
    /// </summary>
    property Accessible: Boolean read get_Accessible;
    /// <summary>
    ///   获取一个值，该值指示是否受保护的密钥对。
    /// </summary>
    property &Protected: Boolean read get_Protected;
    /// <summary>
    ///   获取  对象表示的访问权限和审核规则的一个容器。
    /// </summary>
    property CryptoKeySecurity: DNCryptoKeySecurity read get_CryptoKeySecurity;
    /// <summary>
    ///   获取一个值，该值表示是否由托管加密类随机生成密钥容器。
    /// </summary>
    property RandomlyGenerated: Boolean read get_RandomlyGenerated;
  end;

  TDNCspKeyContainerInfo = class(TDNGenericImport<DNCspKeyContainerInfoClass, DNCspKeyContainerInfo>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCspParametersClass = interface(DNObjectClass)
  ['{D5062269-A0D4-42C1-B424-15CC0FD496E8}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCspParameters; overload;
    /// <summary>
    ///   使用指定的提供程序类型代码初始化  类的新实例。
    /// </summary>
    {class} function init(dwTypeIn: Int32): DNCspParameters; overload;
    /// <summary>
    ///   使用指定的提供程序类型代码和名称初始化  类的新实例。
    /// </summary>
    {class} function init(dwTypeIn: Int32; strProviderNameIn: string): DNCspParameters; overload;
    /// <summary>
    ///   使用指定的提供程序类型代码和名称以及指定的容器名称初始化  类的新实例。
    /// </summary>
    {class} function init(dwTypeIn: Int32; strProviderNameIn: string; strContainerNameIn: string): DNCspParameters; overload;
    /// <summary>
    ///   新实例初始化  类使用的提供程序类型、 提供程序名称、 容器名称、 访问信息和与智能卡密钥相关的密码。
    /// </summary>
    {class} function init(providerType: Int32; providerName: string; keyContainerName: string; cryptoKeySecurity: DNCryptoKeySecurity; keyPassword: DNSecureString): DNCspParameters; overload;
    /// <summary>
    ///   新实例初始化  类使用的提供程序类型、 提供程序名称、 容器名称、 访问信息和非托管的智能卡密码对话框的句柄。
    /// </summary>
    {class} function init(providerType: Int32; providerName: string; keyContainerName: string; cryptoKeySecurity: DNCryptoKeySecurity; parentWindowHandle: IntPtr): DNCspParameters; overload;

  end;

  /// <summary>
  ///   包含一些参数，这些参数传递到指定加密计算的加密服务提供程序 (CSP)。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.CspParameters')]
  DNCspParameters = interface(DNObject)
  ['{AF60343F-6C7B-3761-839F-0C44E3CA06DA}']
  { getter & setter } 

    function get_Flags: DNCspProviderFlags;
    procedure set_Flags(value: DNCspProviderFlags);
    function get_CryptoKeySecurity: DNCryptoKeySecurity;
    procedure set_CryptoKeySecurity(value: DNCryptoKeySecurity);
    function get_KeyPassword: DNSecureString;
    procedure set_KeyPassword(value: DNSecureString);
    function get_ParentWindowHandle: IntPtr;
    procedure set_ParentWindowHandle(value: IntPtr);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   表示修改加密服务提供程序 (CSP) 的行为的  的标志。
    /// </summary>
    property Flags: DNCspProviderFlags read get_Flags write set_Flags;
    /// <summary>
    ///   获取或设置  对象表示的访问权限和审核规则的一个容器。
    /// </summary>
    property CryptoKeySecurity: DNCryptoKeySecurity read get_CryptoKeySecurity write set_CryptoKeySecurity;
    /// <summary>
    ///   获取或设置与智能卡密钥相关的密码。
    /// </summary>
    property KeyPassword: DNSecureString read get_KeyPassword write set_KeyPassword;
    /// <summary>
    ///   获取或设置智能卡密码对话框中的非托管的父窗口句柄。
    /// </summary>
    property ParentWindowHandle: IntPtr read get_ParentWindowHandle write set_ParentWindowHandle;
  end;

  TDNCspParameters = class(TDNGenericImport<DNCspParametersClass, DNCspParameters>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDeriveBytesClass = interface(DNObjectClass)
  ['{33642A88-A113-4709-B999-49ED3506C81B}']
  end;

  /// <summary>
  ///   表示抽象基类，导出指定长度字节序列的所有类都从该基类继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.DeriveBytes')]
  DNDeriveBytes = interface(DNObject)
  ['{7D62DB2D-86E3-3ADE-90C4-215950643D10}']
  { methods } 

    /// <summary>
    ///   在派生类中重写时，释放由  类的当前实例使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   当在派生类中被重写时，返回伪随机密钥字节。
    /// </summary>
    function GetBytes(cb: Int32): TArray<Byte>;
    /// <summary>
    ///   当在派生类中被重写时，重置操作的状态。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNDeriveBytes = class(TDNGenericImport<DNDeriveBytesClass, DNDeriveBytes>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNPasswordDeriveBytesClass = interface(DNDeriveBytesClass)
  ['{F46DCBC5-881E-42EE-9A80-5A85EE7B6405}']
  { constructors } 

    /// <summary>
    ///   使用用来导出密钥的密码和密钥 salt 初始化  类的新实例。
    /// </summary>
    {class} function init(strPassword: string; rgbSalt: TArray<Byte>): DNPasswordDeriveBytes; overload;
    /// <summary>
    ///   通过指定用来派生密钥的密码和密钥 salt 初始化  类的新实例。
    /// </summary>
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>): DNPasswordDeriveBytes; overload;
    /// <summary>
    ///   使用用来导出密钥的密码、密钥 salt、哈希名和迭代数初始化  类的新实例。
    /// </summary>
    {class} function init(strPassword: string; rgbSalt: TArray<Byte>; strHashName: string; iterations: Int32): DNPasswordDeriveBytes; overload;
    /// <summary>
    ///   通过指定用来派生密钥的密码、密钥 salt、哈希名和迭代数初始化  类的新实例。
    /// </summary>
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>; hashName: string; iterations: Int32): DNPasswordDeriveBytes; overload;
    /// <summary>
    ///   使用用来导出密钥的密码、密钥 salt 和加密服务提供程序 (CSP) 参数初始化  类的新实例。
    /// </summary>
    {class} function init(strPassword: string; rgbSalt: TArray<Byte>; cspParams: DNCspParameters): DNPasswordDeriveBytes; overload;
    /// <summary>
    ///   通过指定用来派生密钥的密码、密钥 salt 和加密服务提供程序 (CSP) 初始化  类的新实例。
    /// </summary>
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>; cspParams: DNCspParameters): DNPasswordDeriveBytes; overload;
    /// <summary>
    ///   使用用来导出密钥的密码、密钥 salt、哈希名、迭代数和加密服务提供程序 (CSP) 参数初始化  类的新实例。
    /// </summary>
    {class} function init(strPassword: string; rgbSalt: TArray<Byte>; strHashName: string; iterations: Int32; cspParams: DNCspParameters): DNPasswordDeriveBytes; overload;
    /// <summary>
    ///   通过指定用来派生密钥的密码、密钥 salt、哈希名、迭代数和加密服务提供程序 (CSP) 初始化  类的新实例。
    /// </summary>
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>; hashName: string; iterations: Int32; cspParams: DNCspParameters): DNPasswordDeriveBytes; overload;

  end;

  /// <summary>
  ///   使用 PBKDF1 算法的扩展从密码派生密钥。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.PasswordDeriveBytes')]
  DNPasswordDeriveBytes = interface(DNDeriveBytes)
  ['{EED31DD9-AA11-3993-80E0-0088C1F5FEBA}']
  { getter & setter } 

    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_IterationCount: Int32;
    procedure set_IterationCount(value: Int32);
    function get_Salt: TArray<Byte>;
    procedure set_Salt(value: TArray<Byte>);

  { methods } 

    /// <summary>
    ///   返回伪随机密钥字节。
    /// </summary>
    function GetBytes(cb: Int32): TArray<Byte>;
    /// <summary>
    ///   重置操作的状态。
    /// </summary>
    procedure Reset;
    /// <summary>
    ///   从  对象导出加密密钥。
    /// </summary>
    function CryptDeriveKey(algname: string; alghashname: string; keySize: Int32; rgbIV: TArray<Byte>): TArray<Byte>;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置操作的哈希算法的名称。
    /// </summary>
    property HashName: string read get_HashName write set_HashName;
    /// <summary>
    ///   获取或设置操作的迭代数。
    /// </summary>
    property IterationCount: Int32 read get_IterationCount write set_IterationCount;
    /// <summary>
    ///   获取或设置操作的密钥 salt 值。
    /// </summary>
    property Salt: TArray<Byte> read get_Salt write set_Salt;
  end;

  TDNPasswordDeriveBytes = class(TDNGenericImport<DNPasswordDeriveBytesClass, DNPasswordDeriveBytes>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRfc2898DeriveBytesClass = interface(DNDeriveBytesClass)
  ['{7C8EC118-9E60-4B93-AA63-73CE7B047DB1}']
  { constructors } 

    /// <summary>
    ///   通过使用密码和 salt 大小派生密钥，初始化  类的新实例。
    /// </summary>
    {class} function init(password: string; saltSize: Int32): DNRfc2898DeriveBytes; overload;
    /// <summary>
    ///   通过使用密码、salt 值和迭代次数派生密钥，初始化  类的新实例。
    /// </summary>
    {class} function init(password: string; saltSize: Int32; iterations: Int32): DNRfc2898DeriveBytes; overload;
    {class} function init(password: string; saltSize: Int32; iterations: Int32; hashAlgorithm: DNHashAlgorithmName): DNRfc2898DeriveBytes; overload;
    /// <summary>
    ///   通过使用密码和 salt 值派生密钥，初始化  类的新实例。
    /// </summary>
    {class} function init(password: string; salt: TArray<Byte>): DNRfc2898DeriveBytes; overload;
    /// <summary>
    ///   通过使用密码、salt 值和迭代次数派生密钥，初始化  类的新实例。
    /// </summary>
    {class} function init(password: string; salt: TArray<Byte>; iterations: Int32): DNRfc2898DeriveBytes; overload;
    {class} function init(password: string; salt: TArray<Byte>; iterations: Int32; hashAlgorithm: DNHashAlgorithmName): DNRfc2898DeriveBytes; overload;
    /// <summary>
    ///   通过使用密码、salt 值和迭代次数派生密钥，初始化  类的新实例。
    /// </summary>
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>; iterations: Int32): DNRfc2898DeriveBytes; overload;
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>; iterations: Int32; hashAlgorithm: DNHashAlgorithmName): DNRfc2898DeriveBytes; overload;

  end;

  /// <summary>
  ///   通过使用基于  的伪随机数生成器，实现基于密码的密钥派生功能 (PBKDF2)。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.Rfc2898DeriveBytes')]
  DNRfc2898DeriveBytes = interface(DNDeriveBytes)
  ['{7107AB85-4C6D-3890-AF8A-90B2E2D82F5B}']
  { getter & setter } 

    function get_IterationCount: Int32;
    procedure set_IterationCount(value: Int32);
    function get_Salt: TArray<Byte>;
    procedure set_Salt(value: TArray<Byte>);

  { methods } 

    /// <summary>
    ///   返回此对象的伪随机密钥。
    /// </summary>
    function GetBytes(cb: Int32): TArray<Byte>;
    /// <summary>
    ///   重置操作的状态。
    /// </summary>
    procedure Reset;
    /// <summary>
    ///   从  对象导出加密密钥。
    /// </summary>
    function CryptDeriveKey(algname: string; alghashname: string; keySize: Int32; rgbIV: TArray<Byte>): TArray<Byte>;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置操作的迭代数。
    /// </summary>
    property IterationCount: Int32 read get_IterationCount write set_IterationCount;
    /// <summary>
    ///   获取或设置操作的密钥 salt 值。
    /// </summary>
    property Salt: TArray<Byte> read get_Salt write set_Salt;
  end;

  TDNRfc2898DeriveBytes = class(TDNGenericImport<DNRfc2898DeriveBytesClass, DNRfc2898DeriveBytes>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNFromBase64TransformClass = interface(DNObjectClass)
  ['{F198E007-2C20-44E5-A801-728E87C51638}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNFromBase64Transform; overload;
    /// <summary>
    ///   使用指定的转换模式初始化  类的新实例。
    /// </summary>
    {class} function init(whitespaces: DNFromBase64TransformMode): DNFromBase64Transform; overload;

  end;

  /// <summary>
  ///   从 Base 64 转换 。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.FromBase64Transform')]
  DNFromBase64Transform = interface(DNObject)
  ['{C1ABB475-F198-39D5-BF8D-330BC7189661}']
  { getter & setter } 

    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   将输入字节数组的指定区域从 Base 64 进行转换，并将结果复制到输出字节数组的指定区域。
    /// </summary>
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    /// <summary>
    ///   从 base 64 转换指定字节数组的指定区域。
    /// </summary>
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取输入块大小。
    /// </summary>
    property InputBlockSize: Int32 read get_InputBlockSize;
    /// <summary>
    ///   获取输出块大小。
    /// </summary>
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    /// <summary>
    ///   获取一个值，该值指示是否可转换多个块。
    /// </summary>
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    /// <summary>
    ///   获取一个值，该值指示是否可重复使用当前转换。
    /// </summary>
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNFromBase64Transform = class(TDNGenericImport<DNFromBase64TransformClass, DNFromBase64Transform>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHashAlgorithmClass = interface(DNObjectClass)
  ['{E31B604E-1F81-4547-AFBA-A8D82335171A}']
  { static methods } 

    /// <summary>
    ///   创建哈希算法的指定实现的实例。
    /// </summary>
    {class} function Create(hashName: string): DNHashAlgorithm; overload;
    /// <summary>
    ///   创建哈希算法的默认实现的实例。
    /// </summary>
    {class} function Create: DNHashAlgorithm; overload;

  end;

  /// <summary>
  ///   表示所有加密哈希算法实现均必须从中派生的基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.HashAlgorithm')]
  DNHashAlgorithm = interface(DNObject)
  ['{68549FC3-F82C-3387-8578-E5FB09833740}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   计算指定  对象的哈希值。
    /// </summary>
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    /// <summary>
    ///   计算指定字节数组的哈希值。
    /// </summary>
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    /// <summary>
    ///   计算指定字节数组的指定区域的哈希值。
    /// </summary>
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    /// <summary>
    ///   计算输入字节数组指定区域的哈希值，并将输入字节数组指定区域复制到输出字节数组的指定区域。
    /// </summary>
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    /// <summary>
    ///   计算指定字节数组的指定区域的哈希值。
    /// </summary>
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   释放  类使用的所有资源。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   初始化  类的实现。
    /// </summary>
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取计算所得的哈希代码的大小（以位为单位）。
    /// </summary>
    property HashSize: Int32 read get_HashSize;
    /// <summary>
    ///   获取计算所得的哈希代码的值。
    /// </summary>
    property Hash: TArray<Byte> read get_Hash;
    /// <summary>
    ///   当在派生类中重写时，获取输入块的大小。
    /// </summary>
    property InputBlockSize: Int32 read get_InputBlockSize;
    /// <summary>
    ///   当在派生类中重写时，获取输出块的大小。
    /// </summary>
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    /// <summary>
    ///   当在派生类中重写时，获取一个值，该值指示是否可以转换多个块。
    /// </summary>
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    /// <summary>
    ///   获取一个值，该值指示是否可重复使用当前转换。
    /// </summary>
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHashAlgorithm = class(TDNGenericImport<DNHashAlgorithmClass, DNHashAlgorithm>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNKeyedHashAlgorithmClass = interface(DNHashAlgorithmClass)
  ['{3FC814AE-7969-4507-85A9-AD61D46B9F4E}']
  { static methods } 

    /// <summary>
    ///   创建加密哈希算法的指定实现的实例。
    /// </summary>
    {class} function Create(algName: string): DNKeyedHashAlgorithm; overload;
    /// <summary>
    ///   创建加密哈希算法的默认实现的实例。
    /// </summary>
    {class} function Create: DNKeyedHashAlgorithm; overload;

  end;

  /// <summary>
  ///   显示所有加密哈希算法实现均必须从中派生的抽象类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.KeyedHashAlgorithm')]
  DNKeyedHashAlgorithm = interface(DNHashAlgorithm)
  ['{BF1B2D6A-E41E-3645-8257-A08D7483BD41}']
  { getter & setter } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置用于哈希算法的密钥。
    /// </summary>
    property Key: TArray<Byte> read get_Key write set_Key;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNKeyedHashAlgorithm = class(TDNGenericImport<DNKeyedHashAlgorithmClass, DNKeyedHashAlgorithm>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACClass = interface(DNKeyedHashAlgorithmClass)
  ['{C9C65F33-276A-4192-AEBF-84BD4E0473F9}']
  { static methods } 

    /// <summary>
    ///   创建基于哈希的消息验证代码 (HMAC) 指定实现的实例。
    /// </summary>
    {class} function Create(algorithmName: string): DNHMAC; overload;
    /// <summary>
    ///   创建基于哈希的消息验证代码 (HMAC) 默认实现的实例。
    /// </summary>
    {class} function Create: DNHMAC; overload;

  end;

  /// <summary>
  ///   表示基于哈希的消息验证代码 (HMAC) 的所有实现必须从中派生的抽象类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.HMAC')]
  DNHMAC = interface(DNKeyedHashAlgorithm)
  ['{C67D3B5F-8B7F-3720-B35F-3B49D058A900}']
  { getter & setter } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   初始化默认  实现的实例。
    /// </summary>
    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置用于哈希算法的密钥。
    /// </summary>
    property Key: TArray<Byte> read get_Key write set_Key;
    /// <summary>
    ///   获取或设置用于哈希计算的哈希算法的名称。
    /// </summary>
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMAC = class(TDNGenericImport<DNHMACClass, DNHMAC>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACMD5Class = interface(DNHMACClass)
  ['{CF9FF68C-6987-4137-BEDB-886A35FC2BB6}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类通过使用随机生成的密钥。
    /// </summary>
    {class} function init: DNHMACMD5; overload;
    /// <summary>
    ///   新实例初始化  类通过使用指定的键。
    /// </summary>
    {class} function init(key: TArray<Byte>): DNHMACMD5; overload;

  end;

  /// <summary>
  ///   通过使用计算基于哈希的消息身份验证代码 (HMAC)  哈希函数。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.HMACMD5')]
  DNHMACMD5 = interface(DNHMAC)
  ['{A7EDDCB5-6043-3988-921C-25E3DEE6322B}']
  { getter & setter } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACMD5 = class(TDNGenericImport<DNHMACMD5Class, DNHMACMD5>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACRIPEMD160Class = interface(DNHMACClass)
  ['{B4A9AAE4-D5DE-40F0-AD59-27C1196E7BF8}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有一个随机生成 64 字节的密钥。
    /// </summary>
    {class} function init: DNHMACRIPEMD160; overload;
    /// <summary>
    ///   使用指定的密钥数据初始化  类的新实例。
    /// </summary>
    {class} function init(key: TArray<Byte>): DNHMACRIPEMD160; overload;

  end;

  /// <summary>
  ///   通过使用计算基于哈希的消息身份验证代码 (HMAC)  哈希函数。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.HMACRIPEMD160')]
  DNHMACRIPEMD160 = interface(DNHMAC)
  ['{20051D1B-321F-3E4D-A3DA-5FBE892F7EC5}']
  { getter & setter } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACRIPEMD160 = class(TDNGenericImport<DNHMACRIPEMD160Class, DNHMACRIPEMD160>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACSHA1Class = interface(DNHMACClass)
  ['{F378E1BD-A32D-4A20-A745-C50021214C25}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类随机生成的密钥。
    /// </summary>
    {class} function init: DNHMACSHA1; overload;
    /// <summary>
    ///   使用指定的密钥数据初始化  类的新实例。
    /// </summary>
    {class} function init(key: TArray<Byte>): DNHMACSHA1; overload;
    /// <summary>
    ///   新实例初始化  类具有指定的密钥数据和值，该值指定是否使用 SHA1 算法的托管的版本。
    /// </summary>
    {class} function init(key: TArray<Byte>; useManagedSha1: Boolean): DNHMACSHA1; overload;

  end;

  /// <summary>
  ///   计算基于哈希消息身份验证代码 (HMAC) 使用  哈希函数。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.HMACSHA1')]
  DNHMACSHA1 = interface(DNHMAC)
  ['{00B01B2E-B1FE-33A6-AD40-57DE8358DC7D}']
  { getter & setter } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACSHA1 = class(TDNGenericImport<DNHMACSHA1Class, DNHMACSHA1>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACSHA256Class = interface(DNHMACClass)
  ['{DED5AFE9-3C83-4889-B3D5-424A120950DC}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例类随机生成的密钥。
    /// </summary>
    {class} function init: DNHMACSHA256; overload;
    /// <summary>
    ///   使用指定的密钥数据初始化  类的新实例。
    /// </summary>
    {class} function init(key: TArray<Byte>): DNHMACSHA256; overload;

  end;

  /// <summary>
  ///   通过使用计算基于哈希的消息身份验证代码 (HMAC)哈希函数。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.HMACSHA256')]
  DNHMACSHA256 = interface(DNHMAC)
  ['{2C314899-8F99-3041-A49D-2F6AFC0E6296}']
  { getter & setter } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACSHA256 = class(TDNGenericImport<DNHMACSHA256Class, DNHMACSHA256>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACSHA384Class = interface(DNHMACClass)
  ['{1CE01604-503B-4360-B86F-2E27C90399F1}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类通过使用随机生成的密钥。
    /// </summary>
    {class} function init: DNHMACSHA384; overload;
    /// <summary>
    ///   初始化的新实例通过使用指定的密钥数据的类。
    /// </summary>
    {class} function init(key: TArray<Byte>): DNHMACSHA384; overload;

  end;

  /// <summary>
  ///   计算基于哈希的消息身份验证代码 (HMAC) 使用哈希函数。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.HMACSHA384')]
  DNHMACSHA384 = interface(DNHMAC)
  ['{AE53ED01-CAB4-39CE-854A-8BF544EEEC35}']
  { getter & setter } 

    function get_ProduceLegacyHmacValues: Boolean;
    procedure set_ProduceLegacyHmacValues(value: Boolean);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   提供了一种解决方法有关 .NET Framework&2;.0 实现  算法，这是不一致，出现 .NET Framework 2.0 Service Pack 1 算法的实现。
    /// </summary>
    property ProduceLegacyHmacValues: Boolean read get_ProduceLegacyHmacValues write set_ProduceLegacyHmacValues;
    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACSHA384 = class(TDNGenericImport<DNHMACSHA384Class, DNHMACSHA384>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACSHA512Class = interface(DNHMACClass)
  ['{7BDEEF6D-683A-495E-A5BD-9C6BBA9159A9}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类随机生成的密钥。
    /// </summary>
    {class} function init: DNHMACSHA512; overload;
    /// <summary>
    ///   使用指定的密钥数据初始化  类的新实例。
    /// </summary>
    {class} function init(key: TArray<Byte>): DNHMACSHA512; overload;

  end;

  /// <summary>
  ///   计算基于哈希的消息身份验证代码 (HMAC) 使用哈希函数。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.HMACSHA512')]
  DNHMACSHA512 = interface(DNHMAC)
  ['{477A7D8E-8D26-3959-88F6-F6AB7E7F50CF}']
  { getter & setter } 

    function get_ProduceLegacyHmacValues: Boolean;
    procedure set_ProduceLegacyHmacValues(value: Boolean);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   提供了一种解决方法有关 .NET Framework&2;.0 实现  算法，这是不一致，出现 .NET Framework 2.0 Service Pack 1 实现。
    /// </summary>
    property ProduceLegacyHmacValues: Boolean read get_ProduceLegacyHmacValues write set_ProduceLegacyHmacValues;
    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACSHA512 = class(TDNGenericImport<DNHMACSHA512Class, DNHMACSHA512>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNMACTripleDESClass = interface(DNKeyedHashAlgorithmClass)
  ['{7553F394-0D99-4874-AC40-7842425CDBBE}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNMACTripleDES; overload;
    /// <summary>
    ///   使用指定的密钥数据初始化  类的新实例。
    /// </summary>
    {class} function init(rgbKey: TArray<Byte>): DNMACTripleDES; overload;
    /// <summary>
    ///   使用  的指定实现，用指定的密钥数据初始化  类的新实例。
    /// </summary>
    {class} function init(strTripleDES: string; rgbKey: TArray<Byte>): DNMACTripleDES; overload;

  end;

  /// <summary>
  ///   使用  计算输入数据  的消息验证代码 (MAC)。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.MACTripleDES')]
  DNMACTripleDES = interface(DNKeyedHashAlgorithm)
  ['{39B68485-6773-3C46-82E9-56D8F0B4570C}']
  { getter & setter } 

    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   初始化  的实例。
    /// </summary>
    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置哈希算法中使用的填充模式。
    /// </summary>
    property Padding: DNPaddingMode read get_Padding write set_Padding;
    property Key: TArray<Byte> read get_Key write set_Key;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNMACTripleDES = class(TDNGenericImport<DNMACTripleDESClass, DNMACTripleDES>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNMD5Class = interface(DNHashAlgorithmClass)
  ['{1B8E63B3-19EA-4BC0-903B-6C8605CCB2E0}']
  { static methods } 

    /// <summary>
    ///   创建一个实例的指定实现的  哈希算法。
    /// </summary>
    {class} function Create(algName: string): DNMD5; overload;
    /// <summary>
    ///   创建一个实例的默认实现  哈希算法。
    /// </summary>
    {class} function Create: DNMD5; overload;

  end;

  /// <summary>
  ///   表示的抽象类的所有实现从中哈希算法继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.MD5')]
  DNMD5 = interface(DNHashAlgorithm)
  ['{668515A6-213D-377A-8FE4-5A1E59A10AC9}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNMD5 = class(TDNGenericImport<DNMD5Class, DNMD5>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNMD5CryptoServiceProviderClass = interface(DNMD5Class)
  ['{9D12F7F4-E132-4BC9-AF4D-8DE1E4E65C40}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNMD5CryptoServiceProvider;

  end;

  /// <summary>
  ///   计算哈希值输入的数据使用加密服务提供程序 (CSP) 提供的实现。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.MD5CryptoServiceProvider')]
  DNMD5CryptoServiceProvider = interface(DNMD5)
  ['{D2548BF2-801A-36AF-8800-1F11FBF54361}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   初始化  的实例。
    /// </summary>
    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNMD5CryptoServiceProvider = class(TDNGenericImport<DNMD5CryptoServiceProviderClass, DNMD5CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRIPEMD160Class = interface(DNHashAlgorithmClass)
  ['{D57D92E9-11AA-408B-897E-6E1D537AEE15}']
  { static methods } 

    /// <summary>
    ///   创建一个实例的指定实现的  哈希算法。
    /// </summary>
    {class} function Create(hashName: string): DNRIPEMD160; overload;
    /// <summary>
    ///   创建一个实例的默认实现  哈希算法。
    /// </summary>
    {class} function Create: DNRIPEMD160; overload;

  end;

  /// <summary>
  ///   表示 MD160 哈希算法的所有实现从中都继承的抽象类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RIPEMD160')]
  DNRIPEMD160 = interface(DNHashAlgorithm)
  ['{7813009A-0F6F-3F40-B73A-FAE619971619}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNRIPEMD160 = class(TDNGenericImport<DNRIPEMD160Class, DNRIPEMD160>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRIPEMD160ManagedClass = interface(DNRIPEMD160Class)
  ['{1A1AF85C-CB7D-49ED-A340-11FC0A01624D}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRIPEMD160Managed;

  end;

  /// <summary>
  ///   计算使用托管的库的输入数据的哈希。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RIPEMD160Managed')]
  DNRIPEMD160Managed = interface(DNRIPEMD160)
  ['{3D367908-928F-3C13-8B93-5E1718820F6D}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   初始化的实例  类使用的托管的库。
    /// </summary>
    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNRIPEMD160Managed = class(TDNGenericImport<DNRIPEMD160ManagedClass, DNRIPEMD160Managed>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA1Class = interface(DNHashAlgorithmClass)
  ['{7BE101AF-5BF7-4B6B-A70A-B336A3FE4662}']
  { static methods } 

    /// <summary>
    ///   创建  的指定实现的实例。
    /// </summary>
    {class} function Create(hashName: string): DNSHA1; overload;
    /// <summary>
    ///   创建一个实例的默认实现 。
    /// </summary>
    {class} function Create: DNSHA1; overload;

  end;

  /// <summary>
  ///   计算  输入数据的哈希值。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SHA1')]
  DNSHA1 = interface(DNHashAlgorithm)
  ['{EB52B161-AFB3-3DEA-BFAF-C183AEB57E56}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA1 = class(TDNGenericImport<DNSHA1Class, DNSHA1>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA1CryptoServiceProviderClass = interface(DNSHA1Class)
  ['{90EEBCC6-CFFE-41B3-A95E-D5883FED1AFB}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSHA1CryptoServiceProvider;

  end;

  /// <summary>
  ///   计算  哈希值的输入数据使用加密服务提供商 (CSP) 提供的实现。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SHA1CryptoServiceProvider')]
  DNSHA1CryptoServiceProvider = interface(DNSHA1)
  ['{FC13A7D5-E2B3-37BA-B807-7FA6238284D5}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   初始化  的实例。
    /// </summary>
    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA1CryptoServiceProvider = class(TDNGenericImport<DNSHA1CryptoServiceProviderClass, DNSHA1CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA1ManagedClass = interface(DNSHA1Class)
  ['{1FBFBF6F-8930-440C-8F8B-B58B72F39B0E}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSHA1Managed;

  end;

  /// <summary>
  ///   计算  使用托管的库的输入数据的哈希值。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SHA1Managed')]
  DNSHA1Managed = interface(DNSHA1)
  ['{FDF9C30D-CCAB-3E2D-B584-9E24CE8038E3}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   初始化  的实例。
    /// </summary>
    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA1Managed = class(TDNGenericImport<DNSHA1ManagedClass, DNSHA1Managed>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA256Class = interface(DNHashAlgorithmClass)
  ['{FE5F4957-22A5-482A-893D-3363FF75AF8D}']
  { static methods } 

    /// <summary>
    ///   创建的指定实现的实例 。
    /// </summary>
    {class} function Create(hashName: string): DNSHA256; overload;
    /// <summary>
    ///   创建一个实例的默认实现 。
    /// </summary>
    {class} function Create: DNSHA256; overload;

  end;

  /// <summary>
  ///   计算  输入数据的哈希值。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SHA256')]
  DNSHA256 = interface(DNHashAlgorithm)
  ['{E29B25FC-9402-3A80-AAA5-EB07D9EF5488}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA256 = class(TDNGenericImport<DNSHA256Class, DNSHA256>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA256ManagedClass = interface(DNSHA256Class)
  ['{44998BDB-B233-4DFE-A19E-9713DA8CBADA}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用的托管的库。
    /// </summary>
    {class} function init: DNSHA256Managed;

  end;

  /// <summary>
  ///   计算  使用托管的库的输入数据的哈希值。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SHA256Managed')]
  DNSHA256Managed = interface(DNSHA256)
  ['{44181B13-AE94-3CFB-81D1-37DB59145030}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   初始化  的实例。
    /// </summary>
    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA256Managed = class(TDNGenericImport<DNSHA256ManagedClass, DNSHA256Managed>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA384Class = interface(DNHashAlgorithmClass)
  ['{92CC29D2-92BE-466D-8599-6F69DEF9B0C6}']
  { static methods } 

    /// <summary>
    ///   创建的指定实现的实例 。
    /// </summary>
    {class} function Create(hashName: string): DNSHA384; overload;
    /// <summary>
    ///   创建一个实例的默认实现 。
    /// </summary>
    {class} function Create: DNSHA384; overload;

  end;

  /// <summary>
  ///   计算  输入数据的哈希值。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SHA384')]
  DNSHA384 = interface(DNHashAlgorithm)
  ['{0C00C2E9-7BBE-359E-8261-FD9B9C882A15}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA384 = class(TDNGenericImport<DNSHA384Class, DNSHA384>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA384ManagedClass = interface(DNSHA384Class)
  ['{1951267E-97E9-4E99-B54C-379BED623F79}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSHA384Managed;

  end;

  /// <summary>
  ///   计算  使用托管的库的输入数据的哈希值。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SHA384Managed')]
  DNSHA384Managed = interface(DNSHA384)
  ['{7FD3958D-0A14-3001-8074-0D15EAD7F05C}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   初始化  的实例。
    /// </summary>
    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA384Managed = class(TDNGenericImport<DNSHA384ManagedClass, DNSHA384Managed>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA512Class = interface(DNHashAlgorithmClass)
  ['{46B63288-1A6B-4CD3-A457-4023F9D15616}']
  { static methods } 

    /// <summary>
    ///   创建的指定实现的实例 。
    /// </summary>
    {class} function Create(hashName: string): DNSHA512; overload;
    /// <summary>
    ///   创建一个实例的默认实现 。
    /// </summary>
    {class} function Create: DNSHA512; overload;

  end;

  /// <summary>
  ///   计算  输入数据的哈希值。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SHA512')]
  DNSHA512 = interface(DNHashAlgorithm)
  ['{8DE638D4-0575-3083-9CD7-41619EF9AC75}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA512 = class(TDNGenericImport<DNSHA512Class, DNSHA512>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA512ManagedClass = interface(DNSHA512Class)
  ['{9A761BD5-9AFB-4096-9226-5B3880ACDA45}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSHA512Managed;

  end;

  /// <summary>
  ///   计算  使用托管的库的输入数据的哈希算法。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SHA512Managed')]
  DNSHA512Managed = interface(DNSHA512)
  ['{A6673C32-3943-3BBB-B476-C09A0EC0BCD6}']
  { getter & setter } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   初始化的实例  类使用的托管的库。
    /// </summary>
    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA512Managed = class(TDNGenericImport<DNSHA512ManagedClass, DNSHA512Managed>) end;

  //-------------namespace: System.Security.Cryptography----------------
  /// <summary>
  ///   定义允许  类枚举密钥容器信息，并导入和导出与 Microsoft 加密 API (CAPI) 兼容的密钥 blob 的方法。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.ICspAsymmetricAlgorithm')]
  DNICspAsymmetricAlgorithm = interface(DNObject)
  ['{494A7583-190E-3693-9EC4-DE54DC6A84A2}']
  { getter & setter } 

    function get_CspKeyContainerInfo: DNCspKeyContainerInfo;

  { methods } 

    /// <summary>
    ///   导出包含与  对象关联的密钥信息的 blob。
    /// </summary>
    function ExportCspBlob(includePrivateParameters: Boolean): TArray<Byte>;
    /// <summary>
    ///   导入表示非对称密钥信息的 blob。
    /// </summary>
    procedure ImportCspBlob(rawData: TArray<Byte>);

  { propertys } 

    /// <summary>
    ///   获取描述有关加密密钥对的附加信息的  对象。
    /// </summary>
    property CspKeyContainerInfo: DNCspKeyContainerInfo read get_CspKeyContainerInfo;
  end;

  //-------------namespace: System.Security.Cryptography----------------
  DNKeySizesClass = interface(DNObjectClass)
  ['{8B57306F-7010-46D2-85C8-264D3FABF296}']
  { constructors } 

    /// <summary>
    ///   使用指定的密钥值初始化  类的新实例。
    /// </summary>
    {class} function init(minSize: Int32; maxSize: Int32; skipSize: Int32): DNKeySizes;

  end;

  /// <summary>
  ///   确定对称加密算法的一组有效密钥大小。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.KeySizes')]
  DNKeySizes = interface(DNObject)
  ['{D7A12132-100F-37AE-A277-268A2656E476}']
  { getter & setter } 

    function get_MinSize: Int32;
    function get_MaxSize: Int32;
    function get_SkipSize: Int32;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   以位为单位指定最小密钥大小。
    /// </summary>
    property MinSize: Int32 read get_MinSize;
    /// <summary>
    ///   以位为单位指定最大密钥大小。
    /// </summary>
    property MaxSize: Int32 read get_MaxSize;
    /// <summary>
    ///   指定以位为单位的有效密钥大小之间的间隔。
    /// </summary>
    property SkipSize: Int32 read get_SkipSize;
  end;

  TDNKeySizes = class(TDNGenericImport<DNKeySizesClass, DNKeySizes>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNMaskGenerationMethodClass = interface(DNObjectClass)
  ['{953A8EE1-3BF0-4F28-8387-669297C380EC}']
  end;

  /// <summary>
  ///   表示所有掩码生成器算法均必须从中派生的抽象类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.MaskGenerationMethod')]
  DNMaskGenerationMethod = interface(DNObject)
  ['{BE1E426E-676B-3524-9CED-21E306E9B827}']
  { methods } 

    /// <summary>
    ///   当在派生类中重写时，使用指定的随机种子生成将具有指定长度的掩码。
    /// </summary>
    function GenerateMask(rgbSeed: TArray<Byte>; cbReturn: Int32): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMaskGenerationMethod = class(TDNGenericImport<DNMaskGenerationMethodClass, DNMaskGenerationMethod>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNPKCS1MaskGenerationMethodClass = interface(DNMaskGenerationMethodClass)
  ['{4EDDD7E9-0203-42DD-B389-3CB26CF25524}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNPKCS1MaskGenerationMethod;

  end;

  /// <summary>
  ///   根据 PKCS #1 计算用于密钥交换算法的掩码。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.PKCS1MaskGenerationMethod')]
  DNPKCS1MaskGenerationMethod = interface(DNMaskGenerationMethod)
  ['{7AE844F0-ECA8-3F15-AE27-AFA21A2AA6F8}']
  { getter & setter } 

    function get_HashName: string;
    procedure set_HashName(value: string);

  { methods } 

    /// <summary>
    ///   用指定长度的指定随机种子生成并返回掩码。
    /// </summary>
    function GenerateMask(rgbSeed: TArray<Byte>; cbReturn: Int32): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置要用于生成掩码的哈希算法类型的名称。
    /// </summary>
    property HashName: string read get_HashName write set_HashName;
  end;

  TDNPKCS1MaskGenerationMethod = class(TDNGenericImport<DNPKCS1MaskGenerationMethodClass, DNPKCS1MaskGenerationMethod>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRandomNumberGeneratorClass = interface(DNObjectClass)
  ['{CC43BF55-AEC1-4823-8C2E-30F34E5EB939}']
  { static methods } 

    /// <summary>
    ///   在派生类中重写时，创建加密随机数生成器的指定实现的实例。
    /// </summary>
    {class} function Create(rngName: string): DNRandomNumberGenerator; overload;
    /// <summary>
    ///   在派生类中重写时，创建可用于生成随机数据的加密随机数生成器默认实现的实例。
    /// </summary>
    {class} function Create: DNRandomNumberGenerator; overload;

  end;

  /// <summary>
  ///   表示加密随机数生成器的所有实现从中派生的抽象类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RandomNumberGenerator')]
  DNRandomNumberGenerator = interface(DNObject)
  ['{3E04DC56-84CE-3893-8BEF-6C9B95F9CCF4}']
  { methods } 

    /// <summary>
    ///   在派生类中重写时，释放由  类的当前实例使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   用加密型强随机值序列填充指定的字节数组。
    /// </summary>
    procedure GetBytes(data: TArray<Byte>; offset: Int32; count: Int32); overload;
    /// <summary>
    ///   当在派生类中重写时，用加密型强随机非零值序列填充字节数组。
    /// </summary>
    procedure GetNonZeroBytes(data: TArray<Byte>);
    /// <summary>
    ///   当在派生类中重写时，用加密型强随机值序列填充字节数组。
    /// </summary>
    procedure GetBytes(data: TArray<Byte>); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRandomNumberGenerator = class(TDNGenericImport<DNRandomNumberGeneratorClass, DNRandomNumberGenerator>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRNGCryptoServiceProviderClass = interface(DNRandomNumberGeneratorClass)
  ['{EF7A465D-B638-4AA8-90F4-2AC6705550D2}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRNGCryptoServiceProvider; overload;
    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(str: string): DNRNGCryptoServiceProvider; overload;
    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(rgb: TArray<Byte>): DNRNGCryptoServiceProvider; overload;
    /// <summary>
    ///   使用指定的参数初始化  类的新实例。
    /// </summary>
    {class} function init(cspParams: DNCspParameters): DNRNGCryptoServiceProvider; overload;

  end;

  /// <summary>
  ///   使用加密服务提供程序 (CSP) 提供的实现来实现加密随机数生成器 (RNG)。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RNGCryptoServiceProvider')]
  DNRNGCryptoServiceProvider = interface(DNRandomNumberGenerator)
  ['{40031115-09D2-3851-A13F-56930BE48038}']
  { methods } 

    /// <summary>
    ///   用经过加密的强随机值序列填充字节数组。
    /// </summary>
    procedure GetBytes(data: TArray<Byte>); overload;
    /// <summary>
    ///   用经过加密的强随机非零值序列填充字节数组。
    /// </summary>
    procedure GetNonZeroBytes(data: TArray<Byte>);
    procedure Dispose;
    procedure GetBytes(data: TArray<Byte>; offset: Int32; count: Int32); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRNGCryptoServiceProvider = class(TDNGenericImport<DNRNGCryptoServiceProviderClass, DNRNGCryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRijndaelManagedTransformClass = interface(DNObjectClass)
  ['{9008FE50-B92B-4C19-A3A9-C47BEF6A0913}']
  end;

  /// <summary>
  ///   执行加密转换的数据使用 rijndael 密钥包装算法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RijndaelManagedTransform')]
  DNRijndaelManagedTransform = interface(DNObject)
  ['{FA28C8E8-6B89-3EC5-AC16-720D8E31DC97}']
  { getter & setter } 

    function get_BlockSizeValue: Int32;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   释放  类使用的所有资源。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   计算输入的字节数组的指定区域转换并将所得到的转换复制到输出字节数组的指定区域。
    /// </summary>
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    /// <summary>
    ///   计算指定的字节数组的指定区域的转换。
    /// </summary>
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    /// <summary>
    ///   重置的内部状态  以便它可再次执行不同的加密或解密。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取块大小。
    /// </summary>
    property BlockSizeValue: Int32 read get_BlockSizeValue;
    /// <summary>
    ///   获取输入块大小。
    /// </summary>
    property InputBlockSize: Int32 read get_InputBlockSize;
    /// <summary>
    ///   获取输出块大小。
    /// </summary>
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    /// <summary>
    ///   获取一个值，该值指示是否可以转换多个块。
    /// </summary>
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    /// <summary>
    ///   获取一个值，该值指示是否可重复使用当前转换。
    /// </summary>
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNRijndaelManagedTransform = class(TDNGenericImport<DNRijndaelManagedTransformClass, DNRijndaelManagedTransform>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAEncryptionPaddingClass = interface(DNObjectClass)
  ['{83849716-E862-443D-A556-0B2681D30593}']
  { static getter & setter } 

    {class} function get_Pkcs1: DNRSAEncryptionPadding;
    {class} function get_OaepSHA1: DNRSAEncryptionPadding;
    {class} function get_OaepSHA256: DNRSAEncryptionPadding;
    {class} function get_OaepSHA384: DNRSAEncryptionPadding;
    {class} function get_OaepSHA512: DNRSAEncryptionPadding;

  { static methods } 

    /// <summary>
    ///   创建一个新的  实例，它的  是具有给定哈希算法的 。
    /// </summary>
    {class} function CreateOaep(hashAlgorithm: DNHashAlgorithmName): DNRSAEncryptionPadding;

  { static propertys } 

    /// <summary>
    ///   获取一个表示 PKCS #1 加密标准的对象。
    /// </summary>
    {class} property Pkcs1: DNRSAEncryptionPadding read get_Pkcs1;
    /// <summary>
    ///   获取一个对象，该对象表示最优非对称加密填充 (OAEP) 加密标准（包含 SHA1 哈希算法）。
    /// </summary>
    {class} property OaepSHA1: DNRSAEncryptionPadding read get_OaepSHA1;
    /// <summary>
    ///   获取一个表示使用 SHA256 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。
    /// </summary>
    {class} property OaepSHA256: DNRSAEncryptionPadding read get_OaepSHA256;
    /// <summary>
    ///   获取一个表示使用 SHA-384 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。
    /// </summary>
    {class} property OaepSHA384: DNRSAEncryptionPadding read get_OaepSHA384;
    /// <summary>
    ///   获取一个表示使用 SHA512 哈希算法的最优非对称加密填充 (OAEP) 加密标准的对象。
    /// </summary>
    {class} property OaepSHA512: DNRSAEncryptionPadding read get_OaepSHA512;
  end;

  /// <summary>
  ///   指定填充模式和参数以使用与 RSA 加密或解密操作。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSAEncryptionPadding')]
  DNRSAEncryptionPadding = interface(DNObject)
  ['{B9A342C5-1CF3-39B5-A083-904D79959F0A}']
  { getter & setter } 

    function get_Mode: DNRSAEncryptionPaddingMode;
    function get_OaepHashAlgorithm: DNHashAlgorithmName;

  { methods } 

    /// <summary>
    ///   返回此  对象的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   确定当前实例是否与指定对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   确定当前实例是否与指定的  对象相等。
    /// </summary>
    function Equals(other: DNRSAEncryptionPadding): Boolean; overload;
    /// <summary>
    ///   返回当前  实例的字符串表示形式。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取此  实例所表示的填充模式。
    /// </summary>
    property Mode: DNRSAEncryptionPaddingMode read get_Mode;
    /// <summary>
    ///   获取与  填充模式结合使用的哈希算法。
    ///               如果  属性的值不是 ，则  为 。
    /// </summary>
    property OaepHashAlgorithm: DNHashAlgorithmName read get_OaepHashAlgorithm;
  end;

  TDNRSAEncryptionPadding = class(TDNGenericImport<DNRSAEncryptionPaddingClass, DNRSAEncryptionPadding>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSASignaturePaddingClass = interface(DNObjectClass)
  ['{6F9B9411-DFC7-4318-819B-BC08DAA942CA}']
  { static getter & setter } 

    {class} function get_Pkcs1: DNRSASignaturePadding;
    {class} function get_Pss: DNRSASignaturePadding;

  { static propertys } 

    /// <summary>
    ///   获取使用 PKCS #1 v1.5 填充模式的对象。
    /// </summary>
    {class} property Pkcs1: DNRSASignaturePadding read get_Pkcs1;
    /// <summary>
    ///   获取使用 PSS 填充模式的对象。
    /// </summary>
    {class} property Pss: DNRSASignaturePadding read get_Pss;
  end;

  /// <summary>
  ///   指定要用于 RSA 签名创建或验证操作填充模式和参数。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSASignaturePadding')]
  DNRSASignaturePadding = interface(DNObject)
  ['{B95E3BCB-9822-390B-82F4-21BCDF178092}']
  { getter & setter } 

    function get_Mode: DNRSASignaturePaddingMode;

  { methods } 

    /// <summary>
    ///   返回此  实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的  对象相等。
    /// </summary>
    function Equals(other: DNRSASignaturePadding): Boolean; overload;
    /// <summary>
    ///   返回当前  实例的字符串表示形式。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取此  实例的填充模式。
    /// </summary>
    property Mode: DNRSASignaturePaddingMode read get_Mode;
  end;

  TDNRSASignaturePadding = class(TDNGenericImport<DNRSASignaturePaddingClass, DNRSASignaturePadding>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSignatureDescriptionClass = interface(DNObjectClass)
  ['{5BCC5000-DF79-431A-BC0E-6EBAE314CB93}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSignatureDescription; overload;
    /// <summary>
    ///   从指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(el: DNSecurityElement): DNSignatureDescription; overload;

  end;

  /// <summary>
  ///   包含有关数字签名的属性的信息。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SignatureDescription')]
  DNSignatureDescription = interface(DNObject)
  ['{3FA7A1C5-812C-3B56-B957-CB14AF670C09}']
  { getter & setter } 

    function get_KeyAlgorithm: string;
    procedure set_KeyAlgorithm(value: string);
    function get_DigestAlgorithm: string;
    procedure set_DigestAlgorithm(value: string);
    function get_FormatterAlgorithm: string;
    procedure set_FormatterAlgorithm(value: string);
    function get_DeformatterAlgorithm: string;
    procedure set_DeformatterAlgorithm(value: string);

  { methods } 

    /// <summary>
    ///   创建  实例与指定的密钥使用  属性。
    /// </summary>
    function CreateDeformatter(key: DNAsymmetricAlgorithm): DNAsymmetricSignatureDeformatter;
    /// <summary>
    ///   创建  实例与指定的密钥使用  属性。
    /// </summary>
    function CreateFormatter(key: DNAsymmetricAlgorithm): DNAsymmetricSignatureFormatter;
    /// <summary>
    ///   创建  实例使用  属性。
    /// </summary>
    function CreateDigest: DNHashAlgorithm;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置签名说明的密钥算法。
    /// </summary>
    property KeyAlgorithm: string read get_KeyAlgorithm write set_KeyAlgorithm;
    /// <summary>
    ///   获取或设置签名说明的摘要算法。
    /// </summary>
    property DigestAlgorithm: string read get_DigestAlgorithm write set_DigestAlgorithm;
    /// <summary>
    ///   获取或设置签名说明的格式化程序算法。
    /// </summary>
    property FormatterAlgorithm: string read get_FormatterAlgorithm write set_FormatterAlgorithm;
    /// <summary>
    ///   获取或设置签名说明的反格式化程序算法。
    /// </summary>
    property DeformatterAlgorithm: string read get_DeformatterAlgorithm write set_DeformatterAlgorithm;
  end;

  TDNSignatureDescription = class(TDNGenericImport<DNSignatureDescriptionClass, DNSignatureDescription>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSymmetricAlgorithmClass = interface(DNObjectClass)
  ['{05DE3B02-0566-4D45-9D9E-9E5501B2678F}']
  { static methods } 

    /// <summary>
    ///   创建用于执行对称算法的指定加密对象。
    /// </summary>
    {class} function Create(algName: string): DNSymmetricAlgorithm; overload;
    /// <summary>
    ///   创建用于执行对称算法的默认加密对象。
    /// </summary>
    {class} function Create: DNSymmetricAlgorithm; overload;

  end;

  /// <summary>
  ///   表示所有对称算法的实现都必须从中继承的抽象基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.SymmetricAlgorithm')]
  DNSymmetricAlgorithm = interface(DNObject)
  ['{5B67EA6B-D85D-3F48-86D2-8581DB230C43}']
  { getter & setter } 

    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    /// <summary>
    ///   确定指定的密钥大小对当前算法是否有效。
    /// </summary>
    function ValidKeySize(bitLength: Int32): Boolean;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   释放  类使用的所有资源。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   用当前的  属性和初始化向量 () 创建对称加密器对象。
    /// </summary>
    function CreateEncryptor: DNICryptoTransform; overload;
    /// <summary>
    ///   用当前的  属性和初始化向量 () 创建对称解密器对象。
    /// </summary>
    function CreateDecryptor: DNICryptoTransform; overload;
    /// <summary>
    ///   当在派生类中重写时，用指定的  属性和初始化向量 () 创建对称加密器对象。
    /// </summary>
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    /// <summary>
    ///   当在派生类中重写时，用指定的  属性和初始化向量 () 创建对称解密器对象。
    /// </summary>
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    /// <summary>
    ///   当在派生类中重写时，生成用于该算法的随机密钥 ()。
    /// </summary>
    procedure GenerateKey;
    /// <summary>
    ///   当在派生类中重写时，生成用于该算法的随机初始化向量 ()。
    /// </summary>
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置加密操作的块大小（以位为单位）。
    /// </summary>
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    /// <summary>
    ///   获取或设置加密操作的反馈大小（以位为单位）。
    /// </summary>
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    /// <summary>
    ///   获取或设置对称算法的初始化向量 ()。
    /// </summary>
    property IV: TArray<Byte> read get_IV write set_IV;
    /// <summary>
    ///   获取或设置对称算法的密钥。
    /// </summary>
    property Key: TArray<Byte> read get_Key write set_Key;
    /// <summary>
    ///   获取对称算法支持的块大小（以位为单位）。
    /// </summary>
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    /// <summary>
    ///   获取对称算法支持的密钥大小（以位为单位）。
    /// </summary>
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    /// <summary>
    ///   获取或设置对称算法所用密钥的大小（以位为单位）。
    /// </summary>
    property KeySize: Int32 read get_KeySize write set_KeySize;
    /// <summary>
    ///   获取或设置对称算法的运算模式。
    /// </summary>
    property Mode: DNCipherMode read get_Mode write set_Mode;
    /// <summary>
    ///   获取或设置对称算法中使用的填充模式。
    /// </summary>
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNSymmetricAlgorithm = class(TDNGenericImport<DNSymmetricAlgorithmClass, DNSymmetricAlgorithm>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAesClass = interface(DNSymmetricAlgorithmClass)
  ['{331AC1E8-3627-492D-B6DF-0D93A0CA23D8}']
  { static methods } 

    /// <summary>
    ///   创建一个加密对象，它指定用于执行对称算法所用的 AES 的实现。
    /// </summary>
    {class} function Create(algorithmName: string): DNAes; overload;
    /// <summary>
    ///   创建用于执行对称算法的加密对象。
    /// </summary>
    {class} function Create: DNAes; overload;

  end;

  /// <summary>
  ///   表示高级加密标准 (AES) 的所有实现必须从中继承的抽象基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.Aes')]
  DNAes = interface(DNSymmetricAlgorithm)
  ['{CC1DC774-5DCD-3DB6-BFF3-C59224F807A0}']
  { getter & setter } 

    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNAes = class(TDNGenericImport<DNAesClass, DNAes>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDESClass = interface(DNSymmetricAlgorithmClass)
  ['{267A29DB-62ED-42A9-903B-1C875B24672B}']
  { static methods } 

    /// <summary>
    ///   创建要执行的指定的实现的数据加密标准的加密对象的实例 () 算法。
    /// </summary>
    {class} function Create(algName: string): DNDES; overload;
    /// <summary>
    ///   确定指定的密钥是否为弱密钥。
    /// </summary>
    {class} function IsWeakKey(rgbKey: TArray<Byte>): Boolean;
    /// <summary>
    ///   确定指定的密钥是否为半弱密钥。
    /// </summary>
    {class} function IsSemiWeakKey(rgbKey: TArray<Byte>): Boolean;
    /// <summary>
    ///   创建加密对象的实例以执行数据加密标准 () 算法。
    /// </summary>
    {class} function Create: DNDES; overload;

  end;

  /// <summary>
  ///   表示数据加密标准 (DES) 算法的基类，所有  实现都必须从此基类派生。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.DES')]
  DNDES = interface(DNSymmetricAlgorithm)
  ['{F30D404C-A350-36FA-A6FC-054C3F583420}']
  { getter & setter } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置数据加密标准 () 算法的密钥。
    /// </summary>
    property Key: TArray<Byte> read get_Key write set_Key;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNDES = class(TDNGenericImport<DNDESClass, DNDES>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDESCryptoServiceProviderClass = interface(DNDESClass)
  ['{19D78919-C17C-4F60-A2E9-B6451020CC82}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDESCryptoServiceProvider;

  end;

  /// <summary>
  ///   定义一个包装对象来访问加密服务提供程序 (CSP) 版本的数据加密标准 () 算法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.DESCryptoServiceProvider')]
  DNDESCryptoServiceProvider = interface(DNDES)
  ['{B6EB52D5-BB1C-3380-8BCA-345FF43F4B04}']
  { getter & setter } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    /// <summary>
    ///   创建对称数据加密标准 () 与指定键的加密器对象 () 和初始化向量 ()。
    /// </summary>
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    /// <summary>
    ///   创建对称数据加密标准 () 与指定键的解密器对象 () 和初始化向量 ()。
    /// </summary>
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    /// <summary>
    ///   生成的随机密钥 () 要用于该算法。
    /// </summary>
    procedure GenerateKey;
    /// <summary>
    ///   生成的随机初始化向量 () 要用于该算法。
    /// </summary>
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNDESCryptoServiceProvider = class(TDNGenericImport<DNDESCryptoServiceProviderClass, DNDESCryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRC2Class = interface(DNSymmetricAlgorithmClass)
  ['{D60144BF-8623-4D62-A889-11F5FA7932F1}']
  { static methods } 

    /// <summary>
    ///   创建加密的对象来执行的指定的实现的实例  算法。
    /// </summary>
    {class} function Create(AlgName: string): DNRC2; overload;
    /// <summary>
    ///   创建加密对象的实例以执行  算法。
    /// </summary>
    {class} function Create: DNRC2; overload;

  end;

  /// <summary>
  ///   表示  算法的所有实现均必须从中派生的基类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RC2')]
  DNRC2 = interface(DNSymmetricAlgorithm)
  ['{1C6DC255-62D6-3366-BB25-01C509085473}']
  { getter & setter } 

    function get_EffectiveKeySize: Int32;
    procedure set_EffectiveKeySize(value: Int32);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  算法所用密钥的有效大小（以位为单位）。
    /// </summary>
    property EffectiveKeySize: Int32 read get_EffectiveKeySize write set_EffectiveKeySize;
    /// <summary>
    ///   获取或设置  算法所用密钥的大小（以位为单位）。
    /// </summary>
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNRC2 = class(TDNGenericImport<DNRC2Class, DNRC2>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRC2CryptoServiceProviderClass = interface(DNRC2Class)
  ['{E3F91EE0-F986-40D7-A6A5-8C40C9987B81}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRC2CryptoServiceProvider;

  end;

  /// <summary>
  ///   定义一个包装对象来访问加密服务提供程序 (CSP) 实现的  算法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RC2CryptoServiceProvider')]
  DNRC2CryptoServiceProvider = interface(DNRC2)
  ['{62E92675-CB77-3FC9-8597-1A81A5F18013}']
  { getter & setter } 

    function get_EffectiveKeySize: Int32;
    procedure set_EffectiveKeySize(value: Int32);
    function get_UseSalt: Boolean;
    procedure set_UseSalt(value: Boolean);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    /// <summary>
    ///   创建对称  加密器对象与指定的键 () 和初始化向量 ()。
    /// </summary>
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    /// <summary>
    ///   创建对称  解密器对象与指定的键 () 和初始化向量 ()。
    /// </summary>
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    /// <summary>
    ///   生成的随机密钥 () 要用于该算法。
    /// </summary>
    procedure GenerateKey;
    /// <summary>
    ///   生成的随机初始化向量 () 要用于该算法。
    /// </summary>
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置的有效大小，以位为单位的所用密钥  算法。
    /// </summary>
    property EffectiveKeySize: Int32 read get_EffectiveKeySize write set_EffectiveKeySize;
    /// <summary>
    ///   获取或设置一个值，确定是否具有 11 字节长的零值 salt 创建密钥。
    /// </summary>
    property UseSalt: Boolean read get_UseSalt write set_UseSalt;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNRC2CryptoServiceProvider = class(TDNGenericImport<DNRC2CryptoServiceProviderClass, DNRC2CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRijndaelClass = interface(DNSymmetricAlgorithmClass)
  ['{FCDFD791-03AE-4A91-A5D0-4736C6D9F20E}']
  { static methods } 

    /// <summary>
    ///   创建一个加密对象来执行的指定的实现的  算法。
    /// </summary>
    {class} function Create(algName: string): DNRijndael; overload;
    /// <summary>
    ///   创建要执行的加密对象  算法。
    /// </summary>
    {class} function Create: DNRijndael; overload;

  end;

  /// <summary>
  ///   表示的基类的所有实现从中对称加密算法必须继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.Rijndael')]
  DNRijndael = interface(DNSymmetricAlgorithm)
  ['{48CBEB8F-DB77-3103-899C-CD24A832B5CC}']
  { getter & setter } 

    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNRijndael = class(TDNGenericImport<DNRijndaelClass, DNRijndael>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRijndaelManagedClass = interface(DNRijndaelClass)
  ['{4751B5CE-5F4A-4514-A1F9-E5437E181CAE}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNRijndaelManaged;

  end;

  /// <summary>
  ///   访问的托管的版本算法。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RijndaelManaged')]
  DNRijndaelManaged = interface(DNRijndael)
  ['{1F9F18A3-EFC0-3913-84A5-90678A4A9A80}']
  { getter & setter } 

    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    /// <summary>
    ///   创建对称  加密器对象具有指定  和初始化向量 ()。
    /// </summary>
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    /// <summary>
    ///   创建对称  解密器对象具有指定  和初始化向量 ()。
    /// </summary>
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    /// <summary>
    ///   生成的随机  要用于该算法。
    /// </summary>
    procedure GenerateKey;
    /// <summary>
    ///   生成的随机初始化向量 () 要用于该算法。
    /// </summary>
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNRijndaelManaged = class(TDNGenericImport<DNRijndaelManagedClass, DNRijndaelManaged>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNTripleDESClass = interface(DNSymmetricAlgorithmClass)
  ['{8721A9E2-0AC7-438F-9DC1-DB4C394A2B2A}']
  { static methods } 

    /// <summary>
    ///   创建加密的对象来执行的指定的实现的实例  算法。
    /// </summary>
    {class} function Create(str: string): DNTripleDES; overload;
    /// <summary>
    ///   确定指定的密钥是否为弱密钥。
    /// </summary>
    {class} function IsWeakKey(rgbKey: TArray<Byte>): Boolean;
    /// <summary>
    ///   创建加密对象的实例以执行  算法。
    /// </summary>
    {class} function Create: DNTripleDES; overload;

  end;

  /// <summary>
  ///   表示三重数据加密标准算法的基类， 的所有实现都必须从此基类派生。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.TripleDES')]
  DNTripleDES = interface(DNSymmetricAlgorithm)
  ['{3D79AE1A-A949-3601-978F-02BEA1E70A98}']
  { getter & setter } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  算法的密钥。
    /// </summary>
    property Key: TArray<Byte> read get_Key write set_Key;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNTripleDES = class(TDNGenericImport<DNTripleDESClass, DNTripleDES>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNTripleDESCryptoServiceProviderClass = interface(DNTripleDESClass)
  ['{2E152FA4-7881-4DAD-9758-0DE27631A3C0}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNTripleDESCryptoServiceProvider;

  end;

  /// <summary>
  ///   定义一个包装对象，若要访问的加密服务提供程序 (CSP) 版本  算法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.TripleDESCryptoServiceProvider')]
  DNTripleDESCryptoServiceProvider = interface(DNTripleDES)
  ['{DAA132BF-1170-3D8B-A0EF-E2F55A68A91D}']
  { getter & setter } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    /// <summary>
    ///   创建对称  加密器对象与指定的键 () 和初始化向量 ()。
    /// </summary>
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    /// <summary>
    ///   创建对称  解密器对象与指定的键 () 和初始化向量 ()。
    /// </summary>
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    /// <summary>
    ///   生成的随机  要用于该算法。
    /// </summary>
    procedure GenerateKey;
    /// <summary>
    ///   生成的随机初始化向量 () 要用于该算法。
    /// </summary>
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNTripleDESCryptoServiceProvider = class(TDNGenericImport<DNTripleDESCryptoServiceProviderClass, DNTripleDESCryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNToBase64TransformClass = interface(DNObjectClass)
  ['{1B50240D-63BD-43B2-8BC4-1A28B1B689F6}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNToBase64Transform;

  end;

  /// <summary>
  ///   将  转换为 Base 64。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.ToBase64Transform')]
  DNToBase64Transform = interface(DNObject)
  ['{5F3A0F8D-5EF9-3AD5-94E0-53AFF8BCE960}']
  { getter & setter } 

    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    /// <summary>
    ///   将输入字节数组的指定区域转换为 Base 64，并将结果复制到输出字节数组的指定区域。
    /// </summary>
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    /// <summary>
    ///   将指定字节数组的指定区域转换为 Base 64。
    /// </summary>
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取输入块大小。
    /// </summary>
    property InputBlockSize: Int32 read get_InputBlockSize;
    /// <summary>
    ///   获取输出块大小。
    /// </summary>
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    /// <summary>
    ///   获取一个值，该值指示是否可转换多个块。
    /// </summary>
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    /// <summary>
    ///   获取一个值，该值指示是否可重复使用当前转换。
    /// </summary>
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNToBase64Transform = class(TDNGenericImport<DNToBase64TransformClass, DNToBase64Transform>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509CertificateClass = interface(DNObjectClass)
  ['{D69BA33C-EE3E-40A9-8569-784F2FCED4C6}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类从表示 X.509v3 证书的字节序列的定义。
    /// </summary>
    {class} function init(data: TArray<Byte>): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类使用的字节数组和一个密码。
    /// </summary>
    {class} function init(rawData: TArray<Byte>; password: string): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类使用的字节数组和一个密码。
    /// </summary>
    {class} function init(rawData: TArray<Byte>; password: DNSecureString): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类使用的字节数组、 密码和密钥存储标记。
    /// </summary>
    {class} function init(rawData: TArray<Byte>; password: string; keyStorageFlags: DNX509KeyStorageFlags): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类使用的字节数组、 密码和密钥存储标记。
    /// </summary>
    {class} function init(rawData: TArray<Byte>; password: DNSecureString; keyStorageFlags: DNX509KeyStorageFlags): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类同名的 PKCS7 签名文件。
    /// </summary>
    {class} function init(fileName: string): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类同名的 PKCS7 签名文件和密码才能访问该证书。
    /// </summary>
    {class} function init(fileName: string; password: string): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类使用的证书文件名称和密码。
    /// </summary>
    {class} function init(fileName: string; password: DNSecureString): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类使用的名称的 PKCS7 签名文件提供密码来访问该证书和密钥存储标记。
    /// </summary>
    {class} function init(fileName: string; password: string; keyStorageFlags: DNX509KeyStorageFlags): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类使用的证书文件名称、 密码和密钥存储标记。
    /// </summary>
    {class} function init(fileName: string; password: DNSecureString; keyStorageFlags: DNX509KeyStorageFlags): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类使用指向非托管的句柄  结构。
    /// </summary>
    {class} function init(handle: IntPtr): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类使用另一个  类。
    /// </summary>
    {class} function init(cert: DNX509Certificate): DNX509Certificate; overload;
    /// <summary>
    ///   新实例初始化  类使用  对象和一个  结构。
    /// </summary>
    {class} function init(info: DNSerializationInfo; context: DNStreamingContext): DNX509Certificate; overload;

  { static methods } 

    /// <summary>
    ///   依据指定的 PKCS7 签名文件创建 X.509v3 证书。
    /// </summary>
    {class} function CreateFromCertFile(filename: string): DNX509Certificate;
    /// <summary>
    ///   依据指定的签名文件创建 X.509v3 证书。
    /// </summary>
    {class} function CreateFromSignedFile(filename: string): DNX509Certificate;

  end;

  /// <summary>
  ///   提供帮助你使用 X.509 v.3 证书的方法。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Certificate')]
  DNX509Certificate = interface(DNObject)
  ['{4C69C54F-9824-38CC-8387-A22DC67E0BAB}']
  { getter & setter } 

    function get_Handle: IntPtr;
    function get_Issuer: string;
    function get_Subject: string;

  { methods } 

    /// <summary>
    ///   返回已向其颁发证书的主体的名称。
    /// </summary>
    function GetName: string;
    /// <summary>
    ///   返回颁发此 X.509v3 证书的证书颁发机构的名称。
    /// </summary>
    function GetIssuerName: string;
    /// <summary>
    ///   将 X.509v3 证书的序列号作为字节数组返回。
    /// </summary>
    function GetSerialNumber: TArray<Byte>;
    /// <summary>
    ///   将 X.509v3 证书的序列号作为十六进制字符串返回。
    /// </summary>
    function GetSerialNumberString: string;
    /// <summary>
    ///   将 X.509v3 证书的密钥算法参数作为字节数组返回。
    /// </summary>
    function GetKeyAlgorithmParameters: TArray<Byte>;
    /// <summary>
    ///   将 X.509v3 证书的密钥算法参数作为十六进制字符串返回。
    /// </summary>
    function GetKeyAlgorithmParametersString: string;
    /// <summary>
    ///   将此 X.509v3 证书的密钥算法信息作为字符串返回。
    /// </summary>
    function GetKeyAlgorithm: string;
    /// <summary>
    ///   将 X.509v3 证书的公钥作为字节数组返回。
    /// </summary>
    function GetPublicKey: TArray<Byte>;
    /// <summary>
    ///   将 X.509v3 证书的公钥作为十六进制字符串返回。
    /// </summary>
    function GetPublicKeyString: string;
    /// <summary>
    ///   将整个 X.509v3 证书的原始数据作为字节数组返回。
    /// </summary>
    function GetRawCertData: TArray<Byte>;
    /// <summary>
    ///   将整个 X.509v3 证书的原始数据作为十六进制字符串返回。
    /// </summary>
    function GetRawCertDataString: string;
    /// <summary>
    ///   将 X.509v3 证书的哈希值作为字节数组返回。
    /// </summary>
    function GetCertHash: TArray<Byte>; overload;
    function GetCertHash(hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    /// <summary>
    ///   将 X.509v3 证书的 SHA1 哈希值作为十六进制字符串返回。
    /// </summary>
    function GetCertHashString: string; overload;
    function GetCertHashString(hashAlgorithm: DNHashAlgorithmName): string; overload;
    /// <summary>
    ///   返回此 X.509v3 证书的有效日期。
    /// </summary>
    function GetEffectiveDateString: string;
    /// <summary>
    ///   返回此 X.509v3 证书的到期日期。
    /// </summary>
    function GetExpirationDateString: string;
    /// <summary>
    ///   比较两个  对象是否相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   比较两个  对象是否相等。
    /// </summary>
    function Equals(other: DNX509Certificate): Boolean; overload;
    /// <summary>
    ///   返回整数形式的 X.509v3 证书的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回当前的字符串表示  对象。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   填充  字节数组中的数据的对象。
    /// </summary>
    procedure Import(rawData: TArray<Byte>); overload;
    /// <summary>
    ///   填充  对象使用的字节数组、 密码和标志中的数据用于确定如何导入的私钥。
    /// </summary>
    procedure Import(rawData: TArray<Byte>; password: string; keyStorageFlags: DNX509KeyStorageFlags); overload;
    /// <summary>
    ///   填充  对象使用的字节数组、 密码和密钥存储标记中的数据。
    /// </summary>
    procedure Import(rawData: TArray<Byte>; password: DNSecureString; keyStorageFlags: DNX509KeyStorageFlags); overload;
    /// <summary>
    ///   填充  证书文件中的信息。
    /// </summary>
    procedure Import(fileName: string); overload;
    /// <summary>
    ///   填充  证书文件、 一个密码中的信息和一个  值。
    /// </summary>
    procedure Import(fileName: string; password: string; keyStorageFlags: DNX509KeyStorageFlags); overload;
    /// <summary>
    ///   填充  证书文件、 一个密码和密钥存储标记中的信息。
    /// </summary>
    procedure Import(fileName: string; password: DNSecureString; keyStorageFlags: DNX509KeyStorageFlags); overload;
    /// <summary>
    ///   将导出当前  对象传递给之一所描述的格式中的字节数组  值。
    /// </summary>
    function &Export(contentType: DNX509ContentType): TArray<Byte>; overload;
    /// <summary>
    ///   将导出当前  对象传递给之一所描述的格式中的字节数组  值，并使用指定的密码。
    /// </summary>
    function &Export(contentType: DNX509ContentType; password: string): TArray<Byte>; overload;
    /// <summary>
    ///   将导出当前  对象传递给使用指定的格式和密码的字节数组。
    /// </summary>
    function &Export(contentType: DNX509ContentType; password: DNSecureString): TArray<Byte>; overload;
    /// <summary>
    ///   重置  对象。
    /// </summary>
    procedure Reset;
    /// <summary>
    ///   释放由当前  对象使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   返回当前的字符串表示  对象，以及附加信息，如果指定。
    /// </summary>
    function ToString(fVerbose: Boolean): string; overload;
    /// <summary>
    ///   返回此 X.509v3 证书的格式的名称。
    /// </summary>
    function GetFormat: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取由非托管所述的 Microsoft 加密 API 证书上下文的句柄  结构。
    /// </summary>
    property Handle: IntPtr read get_Handle;
    /// <summary>
    ///   获取颁发此 X.509v3 证书的证书颁发机构的名称。
    /// </summary>
    property Issuer: string read get_Issuer;
    /// <summary>
    ///   获取证书的主题可分辨名称。
    /// </summary>
    property Subject: string read get_Subject;
  end;

  TDNX509Certificate = class(TDNGenericImport<DNX509CertificateClass, DNX509Certificate>) end;

  //-------------namespace: System.Security----------------
  DNHostSecurityManagerClass = interface(DNObjectClass)
  ['{132981A3-6EA7-432D-A975-03F9099D625F}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNHostSecurityManager;

  end;

  /// <summary>
  ///   允许的控件和自定义应用程序域的安全行为。
  /// </summary>
  [DNTypeName('System.Security.HostSecurityManager')]
  DNHostSecurityManager = interface(DNObject)
  ['{84589833-40D7-36E2-8545-67A92B97C408}']
  { getter & setter } 

    function get_Flags: DNHostSecurityManagerOptions;
    function get_DomainPolicy: DNPolicyLevel;

  { methods } 

    /// <summary>
    ///   提供了所加载的程序集的应用程序域证据。
    /// </summary>
    function ProvideAppDomainEvidence(inputEvidence: DNEvidence): DNEvidence;
    /// <summary>
    ///   提供了所加载的程序集的程序集证据。
    /// </summary>
    function ProvideAssemblyEvidence(loadedAssembly: DNAssembly; inputEvidence: DNEvidence): DNEvidence;
    /// <summary>
    ///   确定是否应执行应用程序。
    /// </summary>
    function DetermineApplicationTrust(applicationEvidence: DNEvidence; activatorEvidence: DNEvidence; context: DNTrustManagerContext): DNApplicationTrust;
    /// <summary>
    ///   向代码授予的权限根据指定的证据确定。
    /// </summary>
    function ResolvePolicy(evidence: DNEvidence): DNPermissionSet;
    /// <summary>
    ///   如果请求，请确定主机应用程序域中，可以提供的证据类型。
    /// </summary>
    function GetHostSuppliedAppDomainEvidenceTypes: TArray<DNType>;
    /// <summary>
    ///   如果请求，请确定哪些主机可以提供程序集的证据类型。
    /// </summary>
    function GetHostSuppliedAssemblyEvidenceTypes(assembly: DNAssembly): TArray<DNType>;
    /// <summary>
    ///   请求的应用程序域的特定的证据类型。
    /// </summary>
    function GenerateAppDomainEvidence(evidenceType: DNType): DNEvidenceBase;
    /// <summary>
    ///   程序集请求特定的证据类型。
    /// </summary>
    function GenerateAssemblyEvidence(evidenceType: DNType; assembly: DNAssembly): DNEvidenceBase;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取表示主机可能有问题的安全策略组件的标志。
    /// </summary>
    property Flags: DNHostSecurityManagerOptions read get_Flags;
    /// <summary>
    ///   在派生类中重写时，获取当前应用程序域的安全策略。
    /// </summary>
    property DomainPolicy: DNPolicyLevel read get_DomainPolicy;
  end;

  TDNHostSecurityManager = class(TDNGenericImport<DNHostSecurityManagerClass, DNHostSecurityManager>) end;

  //-------------namespace: System.Security----------------
  /// <summary>
  ///   获取一个对象 。
  /// </summary>
  [DNTypeName('System.Security.IEvidenceFactory')]
  DNIEvidenceFactory = interface(DNObject)
  ['{35A8F3AC-FE28-360F-A0C0-9A4D50C4682A}']
  { getter & setter } 

    function get_Evidence: DNEvidence;

  { propertys } 

    /// <summary>
    ///   获取  ，用于验证当前对象的标识。
    /// </summary>
    property Evidence: DNEvidence read get_Evidence;
  end;

  //-------------namespace: System.Security----------------
  /// <summary>
  ///   定义与 XML 元素表示形式转换权限对象状态的方法。
  /// </summary>
  [DNTypeName('System.Security.ISecurityEncodable')]
  DNISecurityEncodable = interface(DNObject)
  ['{FD46BDE5-ACDF-3CA5-B189-F0678387077F}']
  { methods } 

    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement);

  end;

  //-------------namespace: System.Security----------------
  /// <summary>
  ///   定义由权限类型实现的方法。
  /// </summary>
  [DNTypeName('System.Security.IPermission')]
  DNIPermission = interface(DNISecurityEncodable)
  ['{A19B3FC6-D680-3DD4-A17A-F58A7D481494}']
  { methods } 

    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   引发  在运行时，如果不满足安全要求。
    /// </summary>
    procedure Demand;

  end;

  //-------------namespace: System.Security.Policy----------------
  /// <summary>
  ///   确定是否应执行应用程序，应该向其授予哪个权限集。
  /// </summary>
  [DNTypeName('System.Security.Policy.IApplicationTrustManager')]
  DNIApplicationTrustManager = interface(DNISecurityEncodable)
  ['{427E255D-AF02-3B0D-8CE3-A2BB94BA300F}']
  { methods } 

    /// <summary>
    ///   确定是否应执行应用程序，应该向其授予哪个权限集。
    /// </summary>
    function DetermineApplicationTrust(activationContext: DNActivationContext; context: DNTrustManagerContext): DNApplicationTrust;

  end;

  //-------------namespace: System.Security.Policy----------------
  /// <summary>
  ///   定义测试以确定代码程序集是否为代码组的成员。
  /// </summary>
  [DNTypeName('System.Security.Policy.IMembershipCondition')]
  DNIMembershipCondition = interface(DNISecurityEncodable)
  ['{6844EFF4-4F86-3CA1-A1EA-AAF583A6395E}']
  { methods } 

    /// <summary>
    ///   确定指定的证据是否满足成员资格条件。
    /// </summary>
    function Check(evidence: DNEvidence): Boolean;
    /// <summary>
    ///   创建成员资格条件的等效副本。
    /// </summary>
    function Copy: DNIMembershipCondition;
    /// <summary>
    ///   创建并返回的字符串表示形式的成员资格条件。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   确定指定的  是否等同于当前的 。
    /// </summary>
    function Equals(obj: DNObject): Boolean;

  end;

  //-------------namespace: System.Security----------------
  /// <summary>
  ///   支持与 XML 元素表示形式转换权限对象状态的方法。
  /// </summary>
  [DNTypeName('System.Security.ISecurityPolicyEncodable')]
  DNISecurityPolicyEncodable = interface(DNObject)
  ['{E6C21BA7-21BB-34E9-8E57-DB66D8CE4A70}']
  { methods } 

    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel);

  end;

  //-------------namespace: System.Security----------------
  /// <summary>
  ///   用于管理堆栈遍历，此堆栈遍历可确定调用堆栈中的所有调用函数是否具有访问受保护资源的所需权限。
  /// </summary>
  [DNTypeName('System.Security.IStackWalk')]
  DNIStackWalk = interface(DNObject)
  ['{60FC57B0-4A46-32A0-A5B4-B05B0DE8E781}']
  { methods } 

    /// <summary>
    ///   断言调用代码可以访问当前权限对象所标识的资源，即使尚未对堆栈中的高级调用方授予访问该资源的权限。
    /// </summary>
    procedure Assert;
    /// <summary>
    ///   在运行时确定调用堆栈中的所有调用方是否已被授予当前权限对象所指定的权限。
    /// </summary>
    procedure Demand;
    /// <summary>
    ///   将导致通过调用代码传递的当前对象的每个  失败。
    /// </summary>
    procedure Deny;
    /// <summary>
    ///   导致所有对象的每个 （除了通过调用代码的当前一个）失败，即使调用堆栈中较高级别的代码已被授予访问其他资源的权限。
    /// </summary>
    procedure PermitOnly;

  end;

  //-------------namespace: System.Security.Permissions----------------
  /// <summary>
  ///   允许的权限来公开不受限制的状态。
  /// </summary>
  [DNTypeName('System.Security.Permissions.IUnrestrictedPermission')]
  DNIUnrestrictedPermission = interface(DNObject)
  ['{0F1284E6-4399-3963-8DDD-A6A4904F66C8}']
  { methods } 

    /// <summary>
    ///   返回一个值，该值指示是否允许不受限制的访问权限所保护的资源。
    /// </summary>
    function IsUnrestricted: Boolean;

  end;

  //-------------namespace: System.Security.Permissions----------------
  DNKeyContainerPermissionAccessEntryClass = interface(DNObjectClass)
  ['{082404A0-80C6-4227-9DD6-4AE89BA1DFCC}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，使用指定的密钥容器名称和访问权限。
    /// </summary>
    {class} function init(keyContainerName: string; flags: DNKeyContainerPermissionFlags): DNKeyContainerPermissionAccessEntry; overload;
    /// <summary>
    ///   新实例初始化  类，使用指定的加密服务提供程序 (CSP) 参数和访问权限。
    /// </summary>
    {class} function init(parameters: DNCspParameters; flags: DNKeyContainerPermissionFlags): DNKeyContainerPermissionAccessEntry; overload;
    /// <summary>
    ///   新实例初始化  类具有指定的属性值。
    /// </summary>
    {class} function init(keyStore: string; providerName: string; providerType: Int32; keyContainerName: string; keySpec: Int32; flags: DNKeyContainerPermissionFlags): DNKeyContainerPermissionAccessEntry; overload;

  end;

  /// <summary>
  ///   指定为特定的密钥容器的访问权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.KeyContainerPermissionAccessEntry')]
  DNKeyContainerPermissionAccessEntry = interface(DNObject)
  ['{AB32DBC6-3D50-3098-8B72-FE98BA5CEFBA}']
  { getter & setter } 

    function get_KeyStore: string;
    procedure set_KeyStore(value: string);
    function get_ProviderName: string;
    procedure set_ProviderName(value: string);
    function get_ProviderType: Int32;
    procedure set_ProviderType(value: Int32);
    function get_KeyContainerName: string;
    procedure set_KeyContainerName(value: string);
    function get_KeySpec: Int32;
    procedure set_KeySpec(value: Int32);
    function get_Flags: DNKeyContainerPermissionFlags;
    procedure set_Flags(value: DNKeyContainerPermissionFlags);

  { methods } 

    /// <summary>
    ///   确定是否指定  对象是否等于当前实例。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取适用于哈希算法和哈希表之类的数据结构中的当前实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置密钥存储区的名称。
    /// </summary>
    property KeyStore: string read get_KeyStore write set_KeyStore;
    /// <summary>
    ///   获取或设置提供程序名称。
    /// </summary>
    property ProviderName: string read get_ProviderName write set_ProviderName;
    /// <summary>
    ///   获取或设置提供程序类型。
    /// </summary>
    property ProviderType: Int32 read get_ProviderType write set_ProviderType;
    /// <summary>
    ///   获取或设置密钥容器名称。
    /// </summary>
    property KeyContainerName: string read get_KeyContainerName write set_KeyContainerName;
    /// <summary>
    ///   获取或设置密钥规范。
    /// </summary>
    property KeySpec: Int32 read get_KeySpec write set_KeySpec;
    /// <summary>
    ///   获取或设置密钥容器的权限。
    /// </summary>
    property Flags: DNKeyContainerPermissionFlags read get_Flags write set_Flags;
  end;

  TDNKeyContainerPermissionAccessEntry = class(TDNGenericImport<DNKeyContainerPermissionAccessEntryClass, DNKeyContainerPermissionAccessEntry>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNKeyContainerPermissionAccessEntryCollectionClass = interface(DNObjectClass)
  ['{B7734B55-BC82-4E14-A655-4E016DFDD8EF}']
  end;

  /// <summary>
  ///   表示  对象集合。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.KeyContainerPermissionAccessEntryCollection')]
  DNKeyContainerPermissionAccessEntryCollection = interface(DNObject)
  ['{A9B28590-073C-392C-82F4-B47FD3D00EC3}']
  { getter & setter } 

    function get_Item(index: Int32): DNKeyContainerPermissionAccessEntry;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    /// <summary>
    ///   将  对象添加到集合中。
    /// </summary>
    function Add(accessEntry: DNKeyContainerPermissionAccessEntry): Int32;
    /// <summary>
    ///   删除所有  来自集合的对象。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   获取指定的集合中的索引  对象时，如果它存在于集合。
    /// </summary>
    function IndexOf(accessEntry: DNKeyContainerPermissionAccessEntry): Int32;
    /// <summary>
    ///   移除指定  从该集合的对象。
    /// </summary>
    procedure Remove(accessEntry: DNKeyContainerPermissionAccessEntry);
    /// <summary>
    ///   返回  可用于循环访问集合中对象的对象。
    /// </summary>
    function GetEnumerator: DNKeyContainerPermissionAccessEntryEnumerator;
    /// <summary>
    ///   将集合的元素复制到兼容的一维数组，从目标数组的指定索引处开始。
    /// </summary>
    procedure CopyTo(&array: TArray<DNKeyContainerPermissionAccessEntry>; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNKeyContainerPermissionAccessEntry read get_Item; default;
    /// <summary>
    ///   获取集合中的项数。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取一个值，该值指示集合是否已同步 （线程安全）。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    /// <summary>
    ///   获取可用于同步对集合的访问的对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNKeyContainerPermissionAccessEntryCollection = class(TDNGenericImport<DNKeyContainerPermissionAccessEntryCollectionClass, DNKeyContainerPermissionAccessEntryCollection>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNKeyContainerPermissionAccessEntryEnumeratorClass = interface(DNObjectClass)
  ['{C57993A5-2F22-4DB2-971D-1C2A288AC659}']
  end;

  /// <summary>
  ///   表示  中的  对象的枚举器。
  /// </summary>
  [DNTypeName('System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator')]
  DNKeyContainerPermissionAccessEntryEnumerator = interface(DNObject)
  ['{616E9D9E-EE8A-35E6-A0A1-8BF70D536B02}']
  { getter & setter } 

    function get_Current: DNKeyContainerPermissionAccessEntry;

  { methods } 

    /// <summary>
    ///   移动到集合中的下一个元素。
    /// </summary>
    function MoveNext: Boolean;
    /// <summary>
    ///   将枚举数重置到集合的开头。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取集合中当前项。
    /// </summary>
    property Current: DNKeyContainerPermissionAccessEntry read get_Current;
  end;

  TDNKeyContainerPermissionAccessEntryEnumerator = class(TDNGenericImport<DNKeyContainerPermissionAccessEntryEnumeratorClass, DNKeyContainerPermissionAccessEntryEnumerator>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNPrincipalPermissionClass = interface(DNObjectClass)
  ['{3C263D9C-F9D0-400F-87BB-3FC4902A55D9}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNPrincipalPermission; overload;
    /// <summary>
    ///   为指定的  和  初始化  类的新实例。
    /// </summary>
    {class} function init(name: string; role: string): DNPrincipalPermission; overload;
    /// <summary>
    ///   为指定的 、 和身份验证状态初始化  类的新实例。
    /// </summary>
    {class} function init(name: string; role: string; isAuthenticated: Boolean): DNPrincipalPermission; overload;

  end;

  /// <summary>
  ///   允许使用为声明性和命令性安全操作定义的语言构造对活动主体执行检查（请参阅 ）。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.PrincipalPermission')]
  DNPrincipalPermission = interface(DNObject)
  ['{67100ADE-60CF-33F1-8D95-F6FE1174458A}']
  { methods } 

    /// <summary>
    ///   返回一个值，该值指示当前权限是否不受限制。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   确定当前权限是否为指定权限的子集。
    /// </summary>
    function IsSubsetOf(target: DNIPermission): Boolean;
    /// <summary>
    ///   创建并返回一个权限，该权限是当前权限与指定权限的交集。
    /// </summary>
    function Intersect(target: DNIPermission): DNIPermission;
    /// <summary>
    ///   创建一个权限，该权限是当前权限与指定权限的并集。
    /// </summary>
    function Union(other: DNIPermission): DNIPermission;
    /// <summary>
    ///   确定指定的  对象是否等于当前的 。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   获取  对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建并返回当前权限的相同副本。
    /// </summary>
    function Copy: DNIPermission;
    /// <summary>
    ///   在运行时确定当前主体是否与当前权限指定的主体相匹配。
    /// </summary>
    procedure Demand;
    /// <summary>
    ///   从 XML 编码重新构造具有指定状态的权限。
    /// </summary>
    procedure FromXml(elem: DNSecurityElement);
    /// <summary>
    ///   创建并返回表示当前权限的字符串。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   创建权限及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    function GetType: DNType;

  end;

  TDNPrincipalPermission = class(TDNGenericImport<DNPrincipalPermissionClass, DNPrincipalPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNStrongNamePublicKeyBlobClass = interface(DNObjectClass)
  ['{5C32BC41-33F7-4B96-9F09-788E3CBC3E8E}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  公钥 blob 的原始字节的类。
    /// </summary>
    {class} function init(publicKey: TArray<Byte>): DNStrongNamePublicKeyBlob;

  end;

  /// <summary>
  ///   表示具有强名称公钥 （称为 blob） 的信息。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Permissions.StrongNamePublicKeyBlob')]
  DNStrongNamePublicKeyBlob = interface(DNObject)
  ['{A463394F-7BA6-3721-8AD8-842748612B4C}']
  { methods } 

    /// <summary>
    ///   获取或设置一个值，该值指示当前公钥 blob 是否等于指定的公钥 blob。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回基于公用密钥的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建并返回的字符串表示形式公钥 blob。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  end;

  TDNStrongNamePublicKeyBlob = class(TDNGenericImport<DNStrongNamePublicKeyBlobClass, DNStrongNamePublicKeyBlob>) end;

  //-------------namespace: System.Security----------------
  DNPermissionSetClass = interface(DNObjectClass)
  ['{C4080847-87EA-4D15-8066-F20E0C5DE8DE}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(state: DNPermissionState): DNPermissionSet; overload;
    /// <summary>
    ///   使用从  参数获取的初始值初始化  类的新实例。
    /// </summary>
    {class} function init(permSet: DNPermissionSet): DNPermissionSet; overload;

  { static methods } 

    /// <summary>
    ///   将已编码的  从一种 XML 编码格式转换为另一种 XML 编码格式。
    /// </summary>
    {class} function ConvertPermissionSet(inFormat: string; inData: TArray<Byte>; outFormat: string): TArray<Byte>;
    /// <summary>
    ///   导致当前帧以前所有的  被删除且不再有效。
    /// </summary>
    {class} procedure RevertAssert;

  end;

  /// <summary>
  ///   表示可以包含许多不同类型的权限的集合。
  /// </summary>
  [DNTypeName('System.Security.PermissionSet')]
  DNPermissionSet = interface(DNObject)
  ['{AFAFD122-DAC4-3FF9-9646-DC032A4A8806}']
  { getter & setter } 

    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;

  { methods } 

    /// <summary>
    ///   将此权限集的权限对象复制到  中指定的位置。
    /// </summary>
    procedure CopyTo(&array: DNArray; index: Int32);
    /// <summary>
    ///   获取一个值，该值指示  是否为空。
    /// </summary>
    function IsEmpty: Boolean;
    /// <summary>
    ///   如果指定类型存在于集中，则获取该类型的权限对象。
    /// </summary>
    function GetPermission(permClass: DNType): DNIPermission;
    /// <summary>
    ///   将权限设置为 ，替换同一类型的任何现有权限。
    /// </summary>
    function SetPermission(perm: DNIPermission): DNIPermission;
    /// <summary>
    ///   向  添加指定的权限。
    /// </summary>
    function AddPermission(perm: DNIPermission): DNIPermission;
    /// <summary>
    ///   从集中删除某一类型的权限。
    /// </summary>
    function RemovePermission(permClass: DNType): DNIPermission;
    /// <summary>
    ///   确定  是否为 。
    /// </summary>
    function IsUnrestricted: Boolean;
    /// <summary>
    ///   确定当前  是否为指定  的子集。
    /// </summary>
    function IsSubsetOf(target: DNPermissionSet): Boolean;
    /// <summary>
    ///   确定指定的  或  对象是否等于当前的 。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   获取  对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   如果未对调用堆栈中所有较高级的调用方授予当前实例所指定的权限，则在运行时强制 。
    /// </summary>
    procedure Demand;
    /// <summary>
    ///   声明调用代码能够通过调用此方法的代码，访问受权限请求保护的资源，即使未对堆栈中处于较高位置的调用方授予访问该资源的权限。
    ///               使用  会产生安全漏洞。
    /// </summary>
    procedure Assert;
    /// <summary>
    ///   导致通过与当前  中所含类型的权限具有交集的权限的调用代码的任何  失败。
    /// </summary>
    procedure Deny;
    /// <summary>
    ///   导致所有经过调用代码以请求不是当前  的子集的任何  的  失败。
    /// </summary>
    procedure PermitOnly;
    /// <summary>
    ///   创建  的副本。
    /// </summary>
    function Copy: DNPermissionSet;
    /// <summary>
    ///   返回集的权限的枚举器。
    /// </summary>
    function GetEnumerator: DNIEnumerator;
    /// <summary>
    ///   返回  的字符串表示形式。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(et: DNSecurityElement);
    /// <summary>
    ///   获取一个值，它指示  是否包含不派生自  的权限。
    /// </summary>
    function ContainsNonCodeAccessPermissions: Boolean;
    /// <summary>
    ///   创建 ，它是当前的  和指定的  的并集。
    /// </summary>
    function Union(other: DNPermissionSet): DNPermissionSet;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   创建并返回一个权限集，此权限集为当前的  和指定  的交集。
    /// </summary>
    function Intersect(other: DNPermissionSet): DNPermissionSet;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取当前集合的根对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
    /// <summary>
    ///   获取一个值，该值表示是否保证此集合是线程安全的。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    /// <summary>
    ///   获取一个值，该值指示集合是否为只读。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   获取权限集中包含的权限对象的数目。
    /// </summary>
    property Count: Int32 read get_Count;
  end;

  TDNPermissionSet = class(TDNGenericImport<DNPermissionSetClass, DNPermissionSet>) end;

  //-------------namespace: System.Security----------------
  DNNamedPermissionSetClass = interface(DNPermissionSetClass)
  ['{DA706496-91C7-414A-BB13-D4D4D5F3B1A9}']
  { constructors } 

    /// <summary>
    ///   初始化新的空实例  具有指定名称的类。
    /// </summary>
    {class} function init(name: string): DNNamedPermissionSet; overload;
    /// <summary>
    ///   新实例初始化  类具有指定名称中不受限制或完全受限状态。
    /// </summary>
    {class} function init(name: string; state: DNPermissionState): DNNamedPermissionSet; overload;
    /// <summary>
    ///   新实例初始化  与指定的名称从权限集中的类。
    /// </summary>
    {class} function init(name: string; permSet: DNPermissionSet): DNNamedPermissionSet; overload;
    /// <summary>
    ///   新实例初始化  从另一个命名的权限集的类。
    /// </summary>
    {class} function init(permSet: DNNamedPermissionSet): DNNamedPermissionSet; overload;

  end;

  /// <summary>
  ///   定义具有的名称和说明与之关联的权限集。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.NamedPermissionSet')]
  DNNamedPermissionSet = interface(DNPermissionSet)
  ['{C23E56CE-0A9A-3733-8189-46B43C9E4FB3}']
  { getter & setter } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;

  { methods } 

    /// <summary>
    ///   创建的命名的权限集的 XML 元素说明。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   从命名的权限集创建权限集副本。
    /// </summary>
    function Copy: DNPermissionSet; overload;
    /// <summary>
    ///   使用一个不同的名称，但相同的权限创建的命名的权限集的副本。
    /// </summary>
    function Copy(name: string): DNNamedPermissionSet; overload;
    /// <summary>
    ///   重新创建具有指定状态的 XML 编码命名的权限集。
    /// </summary>
    procedure FromXml(et: DNSecurityElement);
    /// <summary>
    ///   确定指定的  对象是否等于当前的 。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   获取  对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。
    /// </summary>
    function GetHashCode: Int32;
    procedure CopyTo(&array: DNArray; index: Int32);
    function IsEmpty: Boolean;
    function GetPermission(permClass: DNType): DNIPermission;
    function SetPermission(perm: DNIPermission): DNIPermission;
    function AddPermission(perm: DNIPermission): DNIPermission;
    function RemovePermission(permClass: DNType): DNIPermission;
    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNPermissionSet): Boolean;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function GetEnumerator: DNIEnumerator;
    function ToString: string;
    function ContainsNonCodeAccessPermissions: Boolean;
    function Union(other: DNPermissionSet): DNPermissionSet;
    function Intersect(other: DNPermissionSet): DNPermissionSet;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置当前的命名的权限集的名称。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置当前的命名的权限集的文本说明。
    /// </summary>
    property Description: string read get_Description write set_Description;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
  end;

  TDNNamedPermissionSet = class(TDNGenericImport<DNNamedPermissionSetClass, DNNamedPermissionSet>) end;

  //-------------namespace: System.Security----------------
  DNReadOnlyPermissionSetClass = interface(DNPermissionSetClass)
  ['{E1FB94B3-0970-406B-AE9F-EA229740887A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(permissionSetXml: DNSecurityElement): DNReadOnlyPermissionSet;

  end;

  /// <summary>
  ///   表示可以包含许多不同类型的权限的只读集合。
  /// </summary>
  [DNTypeName('System.Security.ReadOnlyPermissionSet')]
  DNReadOnlyPermissionSet = interface(DNPermissionSet)
  ['{C9167755-37FF-3ED4-9296-50F8ED2AAC76}']
  { getter & setter } 

    function get_IsReadOnly: Boolean;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;

  { methods } 

    /// <summary>
    ///   创建  的副本。
    /// </summary>
    function Copy: DNPermissionSet;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(et: DNSecurityElement);
    procedure CopyTo(&array: DNArray; index: Int32);
    function IsEmpty: Boolean;
    function GetPermission(permClass: DNType): DNIPermission;
    function SetPermission(perm: DNIPermission): DNIPermission;
    function AddPermission(perm: DNIPermission): DNIPermission;
    function RemovePermission(permClass: DNType): DNIPermission;
    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNPermissionSet): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function GetEnumerator: DNIEnumerator;
    function ToString: string;
    function ContainsNonCodeAccessPermissions: Boolean;
    function Union(other: DNPermissionSet): DNPermissionSet;
    function Intersect(other: DNPermissionSet): DNPermissionSet;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取一个值，指示集合是否为只读集合。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyPermissionSet = class(TDNGenericImport<DNReadOnlyPermissionSetClass, DNReadOnlyPermissionSet>) end;

  //-------------namespace: System.Security.Policy----------------
  DNAllMembershipConditionClass = interface(DNObjectClass)
  ['{788FFABA-1A32-4465-AB39-C9B2CAE79790}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNAllMembershipCondition;

  end;

  /// <summary>
  ///   表示匹配的所有代码的成员资格条件。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.AllMembershipCondition')]
  DNAllMembershipCondition = interface(DNObject)
  ['{06B81C12-A5DA-340D-AFF7-FA1453FBC29A}']
  { methods } 

    /// <summary>
    ///   创建安全对象具有指定其当前状态的 XML 编码 。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    /// <summary>
    ///   确定指定的证据是否满足成员资格条件。
    /// </summary>
    function Check(evidence: DNEvidence): Boolean;
    /// <summary>
    ///   创建成员资格条件的等效副本。
    /// </summary>
    function Copy: DNIMembershipCondition;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement); overload;
    /// <summary>
    ///   确定指定的成员资格条件是否都 。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前的成员资格条件的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建并返回的字符串表示形式的成员资格条件。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  end;

  TDNAllMembershipCondition = class(TDNGenericImport<DNAllMembershipConditionClass, DNAllMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationDirectoryMembershipConditionClass = interface(DNObjectClass)
  ['{E259EFE3-4718-4171-A108-5BE10EDA8859}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNApplicationDirectoryMembershipCondition;

  end;

  /// <summary>
  ///   确定是否该程序集属于一个代码组通过测试其应用程序目录。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.ApplicationDirectoryMembershipCondition')]
  DNApplicationDirectoryMembershipCondition = interface(DNObject)
  ['{3DDB2114-9285-30A6-906D-B117640CA927}']
  { methods } 

    /// <summary>
    ///   确定指定的证据是否满足成员资格条件。
    /// </summary>
    function Check(evidence: DNEvidence): Boolean;
    /// <summary>
    ///   创建成员资格条件的等效副本。
    /// </summary>
    function Copy: DNIMembershipCondition;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement); overload;
    /// <summary>
    ///   确定指定的成员资格条件是否都 。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前的成员资格条件的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建安全对象具有指定其当前状态的 XML 编码 。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    /// <summary>
    ///   创建并返回的字符串表示形式的成员资格条件。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  end;

  TDNApplicationDirectoryMembershipCondition = class(TDNGenericImport<DNApplicationDirectoryMembershipConditionClass, DNApplicationDirectoryMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationSecurityInfoClass = interface(DNObjectClass)
  ['{49932554-FF0A-4197-BE24-E4483D9B1489}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用提供的激活上下文。
    /// </summary>
    {class} function init(activationContext: DNActivationContext): DNApplicationSecurityInfo;

  end;

  /// <summary>
  ///   包含应用程序的安全证据。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.ApplicationSecurityInfo')]
  DNApplicationSecurityInfo = interface(DNObject)
  ['{80472D32-EF68-3988-BE44-BD9E336D4DF8}']
  { getter & setter } 

    function get_ApplicationId: DNApplicationId;
    procedure set_ApplicationId(value: DNApplicationId);
    function get_DeploymentId: DNApplicationId;
    procedure set_DeploymentId(value: DNApplicationId);
    function get_DefaultRequestSet: DNPermissionSet;
    procedure set_DefaultRequestSet(value: DNPermissionSet);
    function get_ApplicationEvidence: DNEvidence;
    procedure set_ApplicationEvidence(value: DNEvidence);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置应用程序标识信息。
    /// </summary>
    property ApplicationId: DNApplicationId read get_ApplicationId write set_ApplicationId;
    /// <summary>
    ///   获取或设置在应用程序中部署标识所述的顶级元素。
    /// </summary>
    property DeploymentId: DNApplicationId read get_DeploymentId write set_DeploymentId;
    /// <summary>
    ///   获取或设置默认的权限集。
    /// </summary>
    property DefaultRequestSet: DNPermissionSet read get_DefaultRequestSet write set_DefaultRequestSet;
    /// <summary>
    ///   获取或设置该应用程序的证据。
    /// </summary>
    property ApplicationEvidence: DNEvidence read get_ApplicationEvidence write set_ApplicationEvidence;
  end;

  TDNApplicationSecurityInfo = class(TDNGenericImport<DNApplicationSecurityInfoClass, DNApplicationSecurityInfo>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationSecurityManagerClass = interface(DNObjectClass)
  ['{D3F70618-EC14-4177-A0C5-602DB7BF27D6}']
  { static getter & setter } 

    {class} function get_UserApplicationTrusts: DNApplicationTrustCollection;
    {class} function get_ApplicationTrustManager: DNIApplicationTrustManager;

  { static methods } 

    /// <summary>
    ///   确定用户是否同意指定的应用程序以执行请求的权限集。
    /// </summary>
    {class} function DetermineApplicationTrust(activationContext: DNActivationContext; context: DNTrustManagerContext): Boolean;

  { static propertys } 

    /// <summary>
    ///   获取应用程序信任集合，其中包含用户的缓存的信任决策。
    /// </summary>
    {class} property UserApplicationTrusts: DNApplicationTrustCollection read get_UserApplicationTrusts;
    /// <summary>
    ///   获取当前应用程序信任关系管理器。
    /// </summary>
    {class} property ApplicationTrustManager: DNIApplicationTrustManager read get_ApplicationTrustManager;
  end;

  /// <summary>
  ///   管理清单激活的应用程序的信任决定。
  /// </summary>
  [DNTypeName('System.Security.Policy.ApplicationSecurityManager')]
  DNApplicationSecurityManager = interface(DNObject)
  ['{2FB9AC2A-8724-32D0-98FA-218C1B2B3E1D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNApplicationSecurityManager = class(TDNGenericImport<DNApplicationSecurityManagerClass, DNApplicationSecurityManager>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationTrustCollectionClass = interface(DNObjectClass)
  ['{3DE7BC8C-3857-4251-A8FD-2B45C1DFA9B3}']
  end;

  /// <summary>
  ///   表示  对象集合。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.ApplicationTrustCollection')]
  DNApplicationTrustCollection = interface(DNObject)
  ['{45CD6D50-A8B4-3783-9759-445FC3D4731C}']
  { getter & setter } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNApplicationTrust; overload;
    function get_Item(appFullName: string): DNApplicationTrust; overload;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    /// <summary>
    ///   将一个元素添加到集合中。
    /// </summary>
    function Add(trust: DNApplicationTrust): Int32;
    /// <summary>
    ///   将指定的元素复制  数组转换为集合的末尾。
    /// </summary>
    procedure AddRange(trusts: TArray<DNApplicationTrust>); overload;
    /// <summary>
    ///   将指定的元素复制  到集合的末尾。
    /// </summary>
    procedure AddRange(trusts: DNApplicationTrustCollection); overload;
    /// <summary>
    ///   获取与指定的应用程序标识匹配集合中的应用程序信任。
    /// </summary>
    function Find(applicationIdentity: DNApplicationIdentity; versionMatch: DNApplicationVersionMatch): DNApplicationTrustCollection;
    /// <summary>
    ///   删除与集合中指定的条件匹配的所有应用程序信任对象。
    /// </summary>
    procedure Remove(applicationIdentity: DNApplicationIdentity; versionMatch: DNApplicationVersionMatch); overload;
    /// <summary>
    ///   从集合中移除指定的应用程序信任。
    /// </summary>
    procedure Remove(trust: DNApplicationTrust); overload;
    /// <summary>
    ///   指定数组中移除集合中的应用程序信任对象。
    /// </summary>
    procedure RemoveRange(trusts: TArray<DNApplicationTrust>); overload;
    /// <summary>
    ///   移除指定集合从集合中的应用程序信任对象。
    /// </summary>
    procedure RemoveRange(trusts: DNApplicationTrustCollection); overload;
    /// <summary>
    ///   从集合中移除所有的应用程序信任。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   返回可用于循环访问集合的对象。
    /// </summary>
    function GetEnumerator: DNApplicationTrustEnumerator;
    /// <summary>
    ///   从目标数组的指定索引处开始，将整个集合复制到兼容的一维数组。
    /// </summary>
    procedure CopyTo(&array: TArray<DNApplicationTrust>; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取集合中包含的项数。
    /// </summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNApplicationTrust read get_Item; default;
    property Item[appFullName: string]: DNApplicationTrust read get_Item; default;
    /// <summary>
    ///   获取一个值，该值指示对集合的访问是否为同步的（线程安全）。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    /// <summary>
    ///   获取可用于同步对集合的访问的对象。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNApplicationTrustCollection = class(TDNGenericImport<DNApplicationTrustCollectionClass, DNApplicationTrustCollection>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationTrustEnumeratorClass = interface(DNObjectClass)
  ['{D5699B2C-5635-4722-ABFA-C67B605353AF}']
  end;

  /// <summary>
  ///   表示  集合中的  对象的枚举数。
  /// </summary>
  [DNTypeName('System.Security.Policy.ApplicationTrustEnumerator')]
  DNApplicationTrustEnumerator = interface(DNObject)
  ['{128BA7D4-E68F-3223-85BE-7372D0FB5423}']
  { getter & setter } 

    function get_Current: DNApplicationTrust;

  { methods } 

    /// <summary>
    ///   移动到中的下一个元素  集合。
    /// </summary>
    function MoveNext: Boolean;
    /// <summary>
    ///   将枚举数重置到开头  集合。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前  对象在  集合。
    /// </summary>
    property Current: DNApplicationTrust read get_Current;
  end;

  TDNApplicationTrustEnumerator = class(TDNGenericImport<DNApplicationTrustEnumeratorClass, DNApplicationTrustEnumerator>) end;

  //-------------namespace: System.Security.Policy----------------
  DNCodeConnectAccessClass = interface(DNObjectClass)
  ['{8495D63B-45A3-4D2F-AFD1-8583733D5DF9}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(allowScheme: string; allowPort: Int32): DNCodeConnectAccess;

  { static methods } 

    /// <summary>
    ///   返回  实例，它表示对使用原始代码的方案的指定端口访问权限。
    /// </summary>
    {class} function CreateOriginSchemeAccess(allowPort: Int32): DNCodeConnectAccess;
    /// <summary>
    ///   返回  表示到使用任何一种方案的指定端口的访问权限的实例。
    /// </summary>
    {class} function CreateAnySchemeAccess(allowPort: Int32): DNCodeConnectAccess;

  end;

  /// <summary>
  ///   指定向代码授予的网络资源访问权限。
  /// </summary>
  [DNTypeName('System.Security.Policy.CodeConnectAccess')]
  DNCodeConnectAccess = interface(DNObject)
  ['{E7473F93-ECCF-38ED-9285-E93CD2D27608}']
  { getter & setter } 

    function get_Scheme: string;
    function get_Port: Int32;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示两个  对象代表相同的方案和端口。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   用作特定类型的哈希函数。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前实例所表示的 URI 方案。
    /// </summary>
    property Scheme: string read get_Scheme;
    /// <summary>
    ///   获取当前实例所表示的端口。
    /// </summary>
    property Port: Int32 read get_Port;
  end;

  TDNCodeConnectAccess = class(TDNGenericImport<DNCodeConnectAccessClass, DNCodeConnectAccess>) end;

  //-------------namespace: System.Security.Policy----------------
  DNCodeGroupClass = interface(DNObjectClass)
  ['{724B33C3-9C56-473E-B47E-DB1ED0755D45}']
  end;

  /// <summary>
  ///   表示组必须从代码的所有实现均从中派生的抽象基类。
  /// </summary>
  [DNTypeName('System.Security.Policy.CodeGroup')]
  DNCodeGroup = interface(DNObject)
  ['{05C4D71E-FB7D-30BE-B6B4-1DF8999CEEE1}']
  { getter & setter } 

    function get_Children: DNIList;
    procedure set_Children(value: DNIList);
    function get_MembershipCondition: DNIMembershipCondition;
    procedure set_MembershipCondition(value: DNIMembershipCondition);
    function get_PolicyStatement: DNPolicyStatement;
    procedure set_PolicyStatement(value: DNPolicyStatement);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_PermissionSetName: string;
    function get_AttributeString: string;
    function get_MergeLogic: string;

  { methods } 

    /// <summary>
    ///   重新构造具有给定的状态和从 XML 编码的策略级别的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    /// <summary>
    ///   将子代码组添加到当前代码组。
    /// </summary>
    procedure AddChild(group: DNCodeGroup);
    /// <summary>
    ///   移除指定的子代码组。
    /// </summary>
    procedure RemoveChild(group: DNCodeGroup);
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   重新构造具有给定状态的 XML 编码的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement); overload;
    /// <summary>
    ///   创建安全对象，其当前状态和策略级别的代码在其中存在的 XML 编码。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   确定指定的代码组是否等效于当前的代码组。
    /// </summary>
    function Equals(o: DNObject): Boolean; overload;
    /// <summary>
    ///   确定指定的代码组是否等效于当前代码组，检查子代码组，如果指定。
    /// </summary>
    function Equals(cg: DNCodeGroup; compareChildren: Boolean): Boolean; overload;
    /// <summary>
    ///   获取当前代码组的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   当在派生类中重写，将解析为代码组策略的证据集及其子代。
    /// </summary>
    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    /// <summary>
    ///   当在派生类中重写时解析匹配的代码组。
    /// </summary>
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    /// <summary>
    ///   当在派生类中重写生成当前代码组的深层的副本。
    /// </summary>
    function Copy: DNCodeGroup;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置一个代码组的子代码组的排序的列表。
    /// </summary>
    property Children: DNIList read get_Children write set_Children;
    /// <summary>
    ///   获取或设置代码组的成员资格条件。
    /// </summary>
    property MembershipCondition: DNIMembershipCondition read get_MembershipCondition write set_MembershipCondition;
    /// <summary>
    ///   获取或设置与代码组关联的策略声明。
    /// </summary>
    property PolicyStatement: DNPolicyStatement read get_PolicyStatement write set_PolicyStatement;
    /// <summary>
    ///   获取或设置代码组的名称。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置代码组的说明。
    /// </summary>
    property Description: string read get_Description write set_Description;
    /// <summary>
    ///   获取代码组命名的权限集的名称。
    /// </summary>
    property PermissionSetName: string read get_PermissionSetName;
    /// <summary>
    ///   获取的字符串表示形式的代码组的策略声明的属性。
    /// </summary>
    property AttributeString: string read get_AttributeString;
    /// <summary>
    ///   当在派生类中重写时获取的代码组的合并逻辑。
    /// </summary>
    property MergeLogic: string read get_MergeLogic;
  end;

  TDNCodeGroup = class(TDNGenericImport<DNCodeGroupClass, DNCodeGroup>) end;

  //-------------namespace: System.Security.Policy----------------
  DNFileCodeGroupClass = interface(DNCodeGroupClass)
  ['{00526F01-18ED-4995-9676-49403B6092FD}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(membershipCondition: DNIMembershipCondition; access: DNFileIOPermissionAccess): DNFileCodeGroup;

  end;

  /// <summary>
  ///   操作文件位于要匹配的成员资格条件的代码程序集代码的程序集的授予权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.FileCodeGroup')]
  DNFileCodeGroup = interface(DNCodeGroup)
  ['{3F8D7E3A-24E7-3F7C-9DC5-4CA22EE7C782}']
  { getter & setter } 

    function get_MergeLogic: string;
    function get_PermissionSetName: string;
    function get_AttributeString: string;
    function get_Children: DNIList;
    procedure set_Children(value: DNIList);
    function get_MembershipCondition: DNIMembershipCondition;
    procedure set_MembershipCondition(value: DNIMembershipCondition);
    function get_PolicyStatement: DNPolicyStatement;
    procedure set_PolicyStatement(value: DNPolicyStatement);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);

  { methods } 

    /// <summary>
    ///   解析代码组策略的证据集及其后代。
    /// </summary>
    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    /// <summary>
    ///   解析匹配的代码组。
    /// </summary>
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    /// <summary>
    ///   生成当前代码组的深层副本。
    /// </summary>
    function Copy: DNCodeGroup;
    /// <summary>
    ///   确定指定的代码组是否等效于当前的代码组。
    /// </summary>
    function Equals(o: DNObject): Boolean; overload;
    /// <summary>
    ///   获取当前代码组的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    procedure AddChild(group: DNCodeGroup);
    procedure RemoveChild(group: DNCodeGroup);
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    function Equals(cg: DNCodeGroup; compareChildren: Boolean): Boolean; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取合并逻辑。
    /// </summary>
    property MergeLogic: string read get_MergeLogic;
    /// <summary>
    ///   获取代码组命名的权限集的名称。
    /// </summary>
    property PermissionSetName: string read get_PermissionSetName;
    /// <summary>
    ///   获取的字符串表示形式的代码组的策略声明的属性。
    /// </summary>
    property AttributeString: string read get_AttributeString;
    property Children: DNIList read get_Children write set_Children;
    property MembershipCondition: DNIMembershipCondition read get_MembershipCondition write set_MembershipCondition;
    property PolicyStatement: DNPolicyStatement read get_PolicyStatement write set_PolicyStatement;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
  end;

  TDNFileCodeGroup = class(TDNGenericImport<DNFileCodeGroupClass, DNFileCodeGroup>) end;

  //-------------namespace: System.Security.Policy----------------
  DNFirstMatchCodeGroupClass = interface(DNCodeGroupClass)
  ['{2FF50918-8108-4847-9F0B-0A0DFF606625}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(membershipCondition: DNIMembershipCondition; policy: DNPolicyStatement): DNFirstMatchCodeGroup;

  end;

  /// <summary>
  ///   允许定义的并集的代码组的策略语句的第一个匹配的子代码组的安全策略。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.FirstMatchCodeGroup')]
  DNFirstMatchCodeGroup = interface(DNCodeGroup)
  ['{28635CC7-4C39-3779-8C31-839101001F78}']
  { getter & setter } 

    function get_MergeLogic: string;
    function get_Children: DNIList;
    procedure set_Children(value: DNIList);
    function get_MembershipCondition: DNIMembershipCondition;
    procedure set_MembershipCondition(value: DNIMembershipCondition);
    function get_PolicyStatement: DNPolicyStatement;
    procedure set_PolicyStatement(value: DNPolicyStatement);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_PermissionSetName: string;
    function get_AttributeString: string;

  { methods } 

    /// <summary>
    ///   解析代码组策略的证据集及其后代。
    /// </summary>
    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    /// <summary>
    ///   解析匹配的代码组。
    /// </summary>
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    /// <summary>
    ///   生成的代码组的深层副本。
    /// </summary>
    function Copy: DNCodeGroup;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    procedure AddChild(group: DNCodeGroup);
    procedure RemoveChild(group: DNCodeGroup);
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(cg: DNCodeGroup; compareChildren: Boolean): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取合并逻辑。
    /// </summary>
    property MergeLogic: string read get_MergeLogic;
    property Children: DNIList read get_Children write set_Children;
    property MembershipCondition: DNIMembershipCondition read get_MembershipCondition write set_MembershipCondition;
    property PolicyStatement: DNPolicyStatement read get_PolicyStatement write set_PolicyStatement;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
    property PermissionSetName: string read get_PermissionSetName;
    property AttributeString: string read get_AttributeString;
  end;

  TDNFirstMatchCodeGroup = class(TDNGenericImport<DNFirstMatchCodeGroupClass, DNFirstMatchCodeGroup>) end;

  //-------------namespace: System.Security.Policy----------------
  DNNetCodeGroupClass = interface(DNCodeGroupClass)
  ['{16995376-5EF6-472F-90D5-7721AEAB9395}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(membershipCondition: DNIMembershipCondition): DNNetCodeGroup;

  end;

  /// <summary>
  ///   授予对站点从其下载该程序集的 Web 权限。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.NetCodeGroup')]
  DNNetCodeGroup = interface(DNCodeGroup)
  ['{A601B6B7-422D-3B21-A61C-A77C5512F36A}']
  { getter & setter } 

    function get_MergeLogic: string;
    function get_PermissionSetName: string;
    function get_AttributeString: string;
    function get_Children: DNIList;
    procedure set_Children(value: DNIList);
    function get_MembershipCondition: DNIMembershipCondition;
    procedure set_MembershipCondition(value: DNIMembershipCondition);
    function get_PolicyStatement: DNPolicyStatement;
    procedure set_PolicyStatement(value: DNPolicyStatement);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);

  { methods } 

    /// <summary>
    ///   删除当前的代码组的所有连接访问权限信息。
    /// </summary>
    procedure ResetConnectAccess;
    /// <summary>
    ///   将指定的连接访问权限添加到当前代码组。
    /// </summary>
    procedure AddConnectAccess(originScheme: string; connectAccess: DNCodeConnectAccess);
    /// <summary>
    ///   获取当前的代码组的连接访问信息。
    /// </summary>
    function GetConnectAccessRules: TArray<DNDictionaryEntry>;
    /// <summary>
    ///   解析代码组策略的证据集及其后代。
    /// </summary>
    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    /// <summary>
    ///   解析匹配的代码组。
    /// </summary>
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    /// <summary>
    ///   生成当前代码组的深层副本。
    /// </summary>
    function Copy: DNCodeGroup;
    /// <summary>
    ///   确定指定的代码组是否等效于当前的代码组。
    /// </summary>
    function Equals(o: DNObject): Boolean; overload;
    /// <summary>
    ///   获取当前代码组的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    procedure AddChild(group: DNCodeGroup);
    procedure RemoveChild(group: DNCodeGroup);
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    function Equals(cg: DNCodeGroup; compareChildren: Boolean): Boolean; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取要用于合并组的逻辑。
    /// </summary>
    property MergeLogic: string read get_MergeLogic;
    /// <summary>
    ///   获取名称  代码组。
    /// </summary>
    property PermissionSetName: string read get_PermissionSetName;
    /// <summary>
    ///   获取的字符串表示形式的代码组的策略声明的属性。
    /// </summary>
    property AttributeString: string read get_AttributeString;
    property Children: DNIList read get_Children write set_Children;
    property MembershipCondition: DNIMembershipCondition read get_MembershipCondition write set_MembershipCondition;
    property PolicyStatement: DNPolicyStatement read get_PolicyStatement write set_PolicyStatement;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
  end;

  TDNNetCodeGroup = class(TDNGenericImport<DNNetCodeGroupClass, DNNetCodeGroup>) end;

  //-------------namespace: System.Security.Policy----------------
  DNUnionCodeGroupClass = interface(DNCodeGroupClass)
  ['{EA958BFE-1FE9-416C-AF39-50AC2CB0E4F6}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(membershipCondition: DNIMembershipCondition; policy: DNPolicyStatement): DNUnionCodeGroup;

  end;

  /// <summary>
  ///   表示代码组的策略声明是当前代码组的策略声明和所有其匹配的子代码组的策略语句的 union。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.UnionCodeGroup')]
  DNUnionCodeGroup = interface(DNCodeGroup)
  ['{F424D0BE-F3CB-3D09-9B18-C523A739EBFE}']
  { getter & setter } 

    function get_MergeLogic: string;
    function get_Children: DNIList;
    procedure set_Children(value: DNIList);
    function get_MembershipCondition: DNIMembershipCondition;
    procedure set_MembershipCondition(value: DNIMembershipCondition);
    function get_PolicyStatement: DNPolicyStatement;
    procedure set_PolicyStatement(value: DNPolicyStatement);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_PermissionSetName: string;
    function get_AttributeString: string;

  { methods } 

    /// <summary>
    ///   解析代码组策略的证据集及其后代。
    /// </summary>
    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    /// <summary>
    ///   解析匹配的代码组。
    /// </summary>
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    /// <summary>
    ///   生成当前代码组的深层副本。
    /// </summary>
    function Copy: DNCodeGroup;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    procedure AddChild(group: DNCodeGroup);
    procedure RemoveChild(group: DNCodeGroup);
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(cg: DNCodeGroup; compareChildren: Boolean): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取合并逻辑。
    /// </summary>
    property MergeLogic: string read get_MergeLogic;
    property Children: DNIList read get_Children write set_Children;
    property MembershipCondition: DNIMembershipCondition read get_MembershipCondition write set_MembershipCondition;
    property PolicyStatement: DNPolicyStatement read get_PolicyStatement write set_PolicyStatement;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
    property PermissionSetName: string read get_PermissionSetName;
    property AttributeString: string read get_AttributeString;
  end;

  TDNUnionCodeGroup = class(TDNGenericImport<DNUnionCodeGroupClass, DNUnionCodeGroup>) end;

  //-------------namespace: System.Security.Policy----------------
  DNEvidenceClass = interface(DNObjectClass)
  ['{FB548757-0986-41C4-9709-A56A57F60B95}']
  { constructors } 

    /// <summary>
    ///   初始化新的空实例  类。
    /// </summary>
    {class} function init: DNEvidence; overload;
    /// <summary>
    ///   新实例初始化  的浅表副本中的一个现有的类。
    /// </summary>
    {class} function init(evidence: DNEvidence): DNEvidence; overload;
    /// <summary>
    ///   新实例初始化  类从多个主机和程序集的证据集。
    /// </summary>
    {class} function init(hostEvidence: TArray<DNObject>; assemblyEvidence: TArray<DNObject>): DNEvidence; overload;
    /// <summary>
    ///   新实例初始化  类从多个主机和程序集的证据集。
    /// </summary>
    {class} function init(hostEvidence: TArray<DNEvidenceBase>; assemblyEvidence: TArray<DNEvidenceBase>): DNEvidence; overload;

  end;

  /// <summary>
  ///   定义一的组输入安全策略决策的信息。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.Evidence')]
  DNEvidence = interface(DNObject)
  ['{62545937-20A9-3D0F-B04B-322E854EACB0}']
  { getter & setter } 

    function get_Locked: Boolean;
    procedure set_Locked(value: Boolean);
    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;

  { methods } 

    /// <summary>
    ///   添加指定到证据集宿主所提供的证据。
    /// </summary>
    procedure AddHost(id: DNObject);
    /// <summary>
    ///   将指定的程序集证据添加到证据集。
    /// </summary>
    procedure AddAssembly(id: DNObject);
    /// <summary>
    ///   将指定的证据集分为多个当前的证据集。
    /// </summary>
    procedure Merge(evidence: DNEvidence);
    /// <summary>
    ///   将证据对象传递给 。
    /// </summary>
    procedure CopyTo(&array: DNArray; index: Int32);
    /// <summary>
    ///   枚举由宿主提供的证据。
    /// </summary>
    function GetHostEnumerator: DNIEnumerator;
    /// <summary>
    ///   枚举该程序集提供的证据。
    /// </summary>
    function GetAssemblyEnumerator: DNIEnumerator;
    /// <summary>
    ///   枚举在组中，所有证据提供的主机和提供的程序集。
    /// </summary>
    function GetEnumerator: DNIEnumerator;
    /// <summary>
    ///   返回此证据对象的副本。
    /// </summary>
    function Clone: DNEvidence;
    /// <summary>
    ///   从证据集内移除的宿主和程序集的证据。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   从宿主和程序集枚举中删除给定类型的证据。
    /// </summary>
    procedure RemoveType(t: DNType);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置一个值，该值指示是否锁定证据。
    /// </summary>
    property Locked: Boolean read get_Locked write set_Locked;
    /// <summary>
    ///   获取证据集中的证据对象数。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取同步根。
    /// </summary>
    property SyncRoot: DNObject read get_SyncRoot;
    /// <summary>
    ///   获取一个值，该值指示是否线程安全的证据集。
    /// </summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    /// <summary>
    ///   获取一个值，该值证据集只读的。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNEvidence = class(TDNGenericImport<DNEvidenceClass, DNEvidence>) end;

  //-------------namespace: System.Security.Policy----------------
  DNEvidenceBaseClass = interface(DNObjectClass)
  ['{E6D28F1E-6801-4D8A-B4FE-E9F8A1D54DBF}']
  end;

  /// <summary>
  ///   提供要用作证据必须派生的所有对象的基类。
  /// </summary>
  [DNTypeName('System.Security.Policy.EvidenceBase')]
  DNEvidenceBase = interface(DNObject)
  ['{D85D40CE-A21A-3C41-A38F-323709B37697}']
  { methods } 

    /// <summary>
    ///   创建是当前实例的完整副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEvidenceBase = class(TDNGenericImport<DNEvidenceBaseClass, DNEvidenceBase>) end;

  //-------------namespace: System.Runtime.Hosting----------------
  DNActivationArgumentsClass = interface(DNEvidenceBaseClass)
  ['{7EF5C5D3-83AC-4B08-A586-7D28A5961E3C}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类具有指定的应用程序标识。
    /// </summary>
    {class} function init(applicationIdentity: DNApplicationIdentity): DNActivationArguments; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的应用程序标识和激活数据。
    /// </summary>
    {class} function init(applicationIdentity: DNApplicationIdentity; activationData: TArray<string>): DNActivationArguments; overload;
    /// <summary>
    ///   新实例初始化  具有指定的激活上下文类。
    /// </summary>
    {class} function init(activationData: DNActivationContext): DNActivationArguments; overload;
    /// <summary>
    ///   新实例初始化  带有指定的激活上下文和激活数据的类。
    /// </summary>
    {class} function init(activationContext: DNActivationContext; activationData: TArray<string>): DNActivationArguments; overload;

  end;

  /// <summary>
  ///   为基于清单的激活的应用程序提供数据。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Runtime.Hosting.ActivationArguments')]
  DNActivationArguments = interface(DNEvidenceBase)
  ['{D12B05F9-0654-351A-92D1-8FDAC1F243DE}']
  { getter & setter } 

    function get_ApplicationIdentity: DNApplicationIdentity;
    function get_ActivationContext: DNActivationContext;
    function get_ActivationData: TArray<string>;

  { methods } 

    /// <summary>
    ///   生成一份当前  对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取清单激活的应用程序的应用程序标识。
    /// </summary>
    property ApplicationIdentity: DNApplicationIdentity read get_ApplicationIdentity;
    /// <summary>
    ///   获取基于清单的应用程序的激活的激活上下文。
    /// </summary>
    property ActivationContext: DNActivationContext read get_ActivationContext;
    /// <summary>
    ///   从主机中获取激活数据激活。
    /// </summary>
    property ActivationData: TArray<string> read get_ActivationData;
  end;

  TDNActivationArguments = class(TDNGenericImport<DNActivationArgumentsClass, DNActivationArguments>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationDirectoryClass = interface(DNEvidenceBaseClass)
  ['{02D54D8A-9181-4932-8AD5-1B2F3CB2D2AD}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(name: string): DNApplicationDirectory;

  end;

  /// <summary>
  ///   提供作为策略计算证据的应用程序目录。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.ApplicationDirectory')]
  DNApplicationDirectory = interface(DNEvidenceBase)
  ['{720BF501-75AA-39F3-B6C2-EABE2F47CEE5}']
  { getter & setter } 

    function get_Directory: string;

  { methods } 

    /// <summary>
    ///   确定 evidence 对象的相同类型的实例是否相等。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前应用程序目录的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    /// <summary>
    ///   创建一份新 。
    /// </summary>
    function Copy: DNObject;
    /// <summary>
    ///   获取状态的字符串表示形式  evidence 对象。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取应用程序目录的路径。
    /// </summary>
    property Directory: string read get_Directory;
  end;

  TDNApplicationDirectory = class(TDNGenericImport<DNApplicationDirectoryClass, DNApplicationDirectory>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationTrustClass = interface(DNEvidenceBaseClass)
  ['{CB033945-51ED-4CD5-AEEC-DC879A33E428}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类 。
    /// </summary>
    {class} function init(applicationIdentity: DNApplicationIdentity): DNApplicationTrust; overload;
    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNApplicationTrust; overload;
    {class} function init(defaultGrantSet: DNPermissionSet; fullTrustAssemblies: DNIEnumerable<DNStrongName>): DNApplicationTrust; overload;

  end;

  /// <summary>
  ///   封装有关应用程序的安全决策。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.ApplicationTrust')]
  DNApplicationTrust = interface(DNEvidenceBase)
  ['{A5448B7A-AA07-3C56-B42B-7D881FA10934}']
  { getter & setter } 

    function get_ApplicationIdentity: DNApplicationIdentity;
    procedure set_ApplicationIdentity(value: DNApplicationIdentity);
    function get_DefaultGrantSet: DNPolicyStatement;
    procedure set_DefaultGrantSet(value: DNPolicyStatement);
    function get_FullTrustAssemblies: DNIList<DNStrongName>;
    function get_IsApplicationTrustedToRun: Boolean;
    procedure set_IsApplicationTrustedToRun(value: Boolean);
    function get_Persist: Boolean;
    procedure set_Persist(value: Boolean);
    function get_ExtraInfo: DNObject;
    procedure set_ExtraInfo(value: DNObject);

  { methods } 

    /// <summary>
    ///   创建的 XML 编码  对象和其当前状态。
    /// </summary>
    function ToXml: DNSecurityElement;
    /// <summary>
    ///   重新构造  具有给定状态的 XML 编码对象。
    /// </summary>
    procedure FromXml(element: DNSecurityElement);
    /// <summary>
    ///   创建是当前实例的完整副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置应用程序信任对象的应用程序标识。
    /// </summary>
    property ApplicationIdentity: DNApplicationIdentity read get_ApplicationIdentity write set_ApplicationIdentity;
    /// <summary>
    ///   获取或设置定义默认授予集的策略语句。
    /// </summary>
    property DefaultGrantSet: DNPolicyStatement read get_DefaultGrantSet write set_DefaultGrantSet;
    /// <summary>
    ///   获取为此应用程序信任的完全信任程序集的列表。
    /// </summary>
    property FullTrustAssemblies: DNIList<DNStrongName> read get_FullTrustAssemblies;
    /// <summary>
    ///   获取或设置一个值，该值是否具有所需的权限授予该应用程序，并且受信任，可以运行。
    /// </summary>
    property IsApplicationTrustedToRun: Boolean read get_IsApplicationTrustedToRun write set_IsApplicationTrustedToRun;
    /// <summary>
    ///   获取或设置一个值，该值指示是否保留应用程序信任信息。
    /// </summary>
    property Persist: Boolean read get_Persist write set_Persist;
    /// <summary>
    ///   获取或设置应用程序的额外的安全信息。
    /// </summary>
    property ExtraInfo: DNObject read get_ExtraInfo write set_ExtraInfo;
  end;

  TDNApplicationTrust = class(TDNGenericImport<DNApplicationTrustClass, DNApplicationTrust>) end;

  //-------------namespace: System.Security.Policy----------------
  DNGacInstalledClass = interface(DNEvidenceBaseClass)
  ['{45FA2A9F-8D00-455E-A670-CF96592221D1}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNGacInstalled;

  end;

  /// <summary>
  ///   确认代码程序集是在全局程序集缓存 (GAC) 中，作为策略计算证据。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.GacInstalled')]
  DNGacInstalled = interface(DNEvidenceBase)
  ['{EE24A2C3-3AA2-33DA-8731-A4FCC1105813}']
  { methods } 

    /// <summary>
    ///   创建新的标识权限对应于当前对象。
    /// </summary>
    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    /// <summary>
    ///   指示当前对象是否等效于指定的对象。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   返回当前对象的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    /// <summary>
    ///   创建当前对象的等效副本。
    /// </summary>
    function Copy: DNObject;
    /// <summary>
    ///   返回当前对象的字符串表示。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  end;

  TDNGacInstalled = class(TDNGenericImport<DNGacInstalledClass, DNGacInstalled>) end;

  //-------------namespace: System.Security.Policy----------------
  DNHashClass = interface(DNEvidenceBaseClass)
  ['{13239F7C-8D59-4691-9130-C6F3997B550A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init(assembly: DNAssembly): DNHash;

  { static methods } 

    /// <summary>
    ///   创建  对象，其中包含  哈希值。
    /// </summary>
    {class} function CreateSHA1(sha1: TArray<Byte>): DNHash;
    /// <summary>
    ///   创建  对象，其中包含  哈希值。
    /// </summary>
    {class} function CreateSHA256(sha256: TArray<Byte>): DNHash;
    /// <summary>
    ///   创建  对象，其中包含  哈希值。
    /// </summary>
    {class} function CreateMD5(md5: TArray<Byte>): DNHash;

  end;

  /// <summary>
  ///   提供程序集的哈希值有关的证据。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.Hash')]
  DNHash = interface(DNEvidenceBase)
  ['{260356E2-BAFA-3349-8BF7-86EEB460A2C7}']
  { getter & setter } 

    function get_SHA1: TArray<Byte>;
    function get_SHA256: TArray<Byte>;
    function get_MD5: TArray<Byte>;

  { methods } 

    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    /// <summary>
    ///   为程序集使用指定的哈希算法计算的哈希值。
    /// </summary>
    function GenerateHash(hashAlg: DNHashAlgorithm): TArray<Byte>;
    /// <summary>
    ///   返回当前的字符串表示 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   获取  参数名称和附加异常信息的对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取  为程序集哈希值。
    /// </summary>
    property SHA1: TArray<Byte> read get_SHA1;
    /// <summary>
    ///   获取  为程序集哈希值。
    /// </summary>
    property SHA256: TArray<Byte> read get_SHA256;
    /// <summary>
    ///   获取  为程序集哈希值。
    /// </summary>
    property MD5: TArray<Byte> read get_MD5;
  end;

  TDNHash = class(TDNGenericImport<DNHashClass, DNHash>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPermissionRequestEvidenceClass = interface(DNEvidenceBaseClass)
  ['{30034768-A406-4D44-9E86-4C4AAA485424}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类的代码程序集的权限请求。
    /// </summary>
    {class} function init(request: DNPermissionSet; optional: DNPermissionSet; denied: DNPermissionSet): DNPermissionRequestEvidence;

  end;

  /// <summary>
  ///   定义表示权限请求的证据。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.PermissionRequestEvidence')]
  DNPermissionRequestEvidence = interface(DNEvidenceBase)
  ['{E1C3E338-B088-3C69-9989-A0E59E96FEA8}']
  { getter & setter } 

    function get_RequestedPermissions: DNPermissionSet;
    function get_OptionalPermissions: DNPermissionSet;
    function get_DeniedPermissions: DNPermissionSet;

  { methods } 

    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    /// <summary>
    ///   创建当前的等效副本 。
    /// </summary>
    function Copy: DNPermissionRequestEvidence;
    /// <summary>
    ///   获取状态的字符串表示形式 。
    /// </summary>
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取代码运行所需的最低权限。
    /// </summary>
    property RequestedPermissions: DNPermissionSet read get_RequestedPermissions;
    /// <summary>
    ///   获取代码可以使用的如果它们得到批准，但不是必需的权限。
    /// </summary>
    property OptionalPermissions: DNPermissionSet read get_OptionalPermissions;
    /// <summary>
    ///   获取代码明确请求不要对其授予的权限。
    /// </summary>
    property DeniedPermissions: DNPermissionSet read get_DeniedPermissions;
  end;

  TDNPermissionRequestEvidence = class(TDNGenericImport<DNPermissionRequestEvidenceClass, DNPermissionRequestEvidence>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPublisherClass = interface(DNEvidenceBaseClass)
  ['{BA216844-285C-4CFA-B926-BF3173C06DFF}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  Authenticode X.509v3 证书，其中包含发行者的公钥的类。
    /// </summary>
    {class} function init(cert: DNX509Certificate): DNPublisher;

  end;

  /// <summary>
  ///   提供的验证码 X.509v3 数字签名的代码程序集作为策略评估的证据。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.Publisher')]
  DNPublisher = interface(DNEvidenceBase)
  ['{649546A7-965F-366F-A735-0FB522917B5A}']
  { getter & setter } 

    function get_Certificate: DNX509Certificate;

  { methods } 

    /// <summary>
    ///   创建对应的当前实例的标识权限  类。
    /// </summary>
    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    /// <summary>
    ///   比较当前  到指定的对象是否相等。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前的哈希代码 。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    /// <summary>
    ///   创建的等效副本 。
    /// </summary>
    function Copy: DNObject;
    /// <summary>
    ///   返回当前的字符串表示 。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取发布者验证码 X.509v3 证书。
    /// </summary>
    property Certificate: DNX509Certificate read get_Certificate;
  end;

  TDNPublisher = class(TDNGenericImport<DNPublisherClass, DNPublisher>) end;

  //-------------namespace: System.Security.Policy----------------
  DNSiteClass = interface(DNEvidenceBaseClass)
  ['{18939B2D-8B8E-463C-9F6C-BC865075CCAE}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  与网站从其中代码程序集的类。
    /// </summary>
    {class} function init(name: string): DNSite;

  { static methods } 

    /// <summary>
    ///   创建一个新  对象从指定的 URL。
    /// </summary>
    {class} function CreateFromUrl(url: string): DNSite;

  end;

  /// <summary>
  ///   提供的代码程序集所源于的作为策略计算证据的网站。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.Site')]
  DNSite = interface(DNEvidenceBase)
  ['{0F71B36D-4006-35B5-9F42-4C468514AF70}']
  { getter & setter } 

    function get_Name: string;

  { methods } 

    /// <summary>
    ///   创建对应于当前的标识权限  对象。
    /// </summary>
    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    /// <summary>
    ///   比较当前  到指定的对象是否相等。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   返回当前的网站名称的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    /// <summary>
    ///   创建的等效副本  对象。
    /// </summary>
    function Copy: DNObject;
    /// <summary>
    ///   返回当前的字符串表示  对象。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取代码程序集所源自的网站。
    /// </summary>
    property Name: string read get_Name;
  end;

  TDNSite = class(TDNGenericImport<DNSiteClass, DNSite>) end;

  //-------------namespace: System.Security.Policy----------------
  DNStrongNameClass = interface(DNEvidenceBaseClass)
  ['{3A9CA93F-ED79-48CD-AB3D-E81E271F7123}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有强名称公钥 blob、 名称和版本。
    /// </summary>
    {class} function init(blob: DNStrongNamePublicKeyBlob; name: string; version: DNVersion): DNStrongName;

  end;

  /// <summary>
  ///   提供了作为策略计算证据的代码程序集的强名称。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.StrongName')]
  DNStrongName = interface(DNEvidenceBase)
  ['{F1566AAF-63FE-3F4B-B121-DCD17999119B}']
  { getter & setter } 

    function get_PublicKey: DNStrongNamePublicKeyBlob;
    function get_Name: string;
    function get_Version: DNVersion;

  { methods } 

    /// <summary>
    ///   创建  ，对应于当前 。
    /// </summary>
    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    /// <summary>
    ///   创建当前的等效副本 。
    /// </summary>
    function Copy: DNObject;
    /// <summary>
    ///   创建当前的字符串表示 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   确定指定的强名称是否等于当前的强名称。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前的哈希代码 。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取当前  的 。
    /// </summary>
    property PublicKey: DNStrongNamePublicKeyBlob read get_PublicKey;
    /// <summary>
    ///   获取当前的简单名 。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取当前  的 。
    /// </summary>
    property Version: DNVersion read get_Version;
  end;

  TDNStrongName = class(TDNGenericImport<DNStrongNameClass, DNStrongName>) end;

  //-------------namespace: System.Security.Policy----------------
  DNUrlClass = interface(DNEvidenceBaseClass)
  ['{484AC108-5539-49E7-A5B9-6073D568F52D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类从其中代码程序集的 URL。
    /// </summary>
    {class} function init(name: string): DNUrl;

  end;

  /// <summary>
  ///   提供的代码程序集所源于的作为策略计算证据的 URL。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.Url')]
  DNUrl = interface(DNEvidenceBase)
  ['{7A2AE0C8-EF79-334E-BACF-D7BA452CAF7C}']
  { getter & setter } 

    function get_Value: string;

  { methods } 

    /// <summary>
    ///   创建对应的当前实例的标识权限  证据类。
    /// </summary>
    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    /// <summary>
    ///   比较当前  证据对象与指定对象的等效性。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前的 URL 的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    /// <summary>
    ///   创建 evidence 对象的新副本。
    /// </summary>
    function Copy: DNObject;
    /// <summary>
    ///   返回当前的字符串表示 。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取从其中代码程序集的 URL。
    /// </summary>
    property Value: string read get_Value;
  end;

  TDNUrl = class(TDNGenericImport<DNUrlClass, DNUrl>) end;

  //-------------namespace: System.Security.Policy----------------
  DNZoneClass = interface(DNEvidenceBaseClass)
  ['{DE99C5AA-0F83-48D3-B7D7-986D8892BB1F}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类的代码程序集所出自的区域。
    /// </summary>
    {class} function init(zone: DNSecurityZone): DNZone;

  { static methods } 

    /// <summary>
    ///   使用指定的 URL 创建一个新的区域。
    /// </summary>
    {class} function CreateFromUrl(url: string): DNZone;

  end;

  /// <summary>
  ///   提供代码程序集作为策略计算证据的安全区域。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.Zone')]
  DNZone = interface(DNEvidenceBase)
  ['{6FCF98FF-B4D6-37A4-9DAB-4DE11A5FE5F2}']
  { getter & setter } 

    function get_SecurityZone: DNSecurityZone;

  { methods } 

    /// <summary>
    ///   创建对应的当前实例的标识权限  证据类。
    /// </summary>
    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    /// <summary>
    ///   比较当前  证据对象与指定对象的等效性。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前区域的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建作为当前实例副本的新对象。
    /// </summary>
    function Clone: DNEvidenceBase;
    /// <summary>
    ///   创建 evidence 对象的等效副本。
    /// </summary>
    function Copy: DNObject;
    /// <summary>
    ///   返回当前的字符串表示 。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取代码程序集所出自的区域。
    /// </summary>
    property SecurityZone: DNSecurityZone read get_SecurityZone;
  end;

  TDNZone = class(TDNGenericImport<DNZoneClass, DNZone>) end;

  //-------------namespace: System.Security.Policy----------------
  DNGacMembershipConditionClass = interface(DNObjectClass)
  ['{CB027FF3-015D-41D9-A579-F69BEF543F3C}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNGacMembershipCondition;

  end;

  /// <summary>
  ///   确定是否该程序集属于一个代码组进行测试，以其全局程序集缓存成员资格。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.GacMembershipCondition')]
  DNGacMembershipCondition = interface(DNObject)
  ['{390E92C9-FA66-3357-BEF2-45A1F34186B9}']
  { methods } 

    /// <summary>
    ///   指示指定的证据是否满足成员资格条件。
    /// </summary>
    function Check(evidence: DNEvidence): Boolean;
    /// <summary>
    ///   创建成员资格条件的等效副本。
    /// </summary>
    function Copy: DNIMembershipCondition;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   使用指定的 XML 编码来重新构建一个安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement); overload;
    /// <summary>
    ///   指示当前对象是否等效于指定的对象。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前成员资格条件的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建安全对象的当前状态，使用指定的策略级别上下文的 XML 编码。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   使用指定的 XML 编码来重新构建一个安全对象，使用指定的策略级别上下文。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    /// <summary>
    ///   返回的字符串表示形式的成员资格条件。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  end;

  TDNGacMembershipCondition = class(TDNGenericImport<DNGacMembershipConditionClass, DNGacMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNHashMembershipConditionClass = interface(DNObjectClass)
  ['{8BC4D731-BB67-408F-851F-E44EA000AFD1}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  带有哈希算法和哈希值，确定成员身份的类。
    /// </summary>
    {class} function init(hashAlg: DNHashAlgorithm; value: TArray<Byte>): DNHashMembershipCondition;

  end;

  /// <summary>
  ///   确定是否该程序集属于一个代码组进行测试，以其哈希值。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.HashMembershipCondition')]
  DNHashMembershipCondition = interface(DNObject)
  ['{769EDEAD-E3B2-3C89-B9A6-948CD7288587}']
  { getter & setter } 

    function get_HashAlgorithm: DNHashAlgorithm;
    procedure set_HashAlgorithm(value: DNHashAlgorithm);
    function get_HashValue: TArray<Byte>;
    procedure set_HashValue(value: TArray<Byte>);

  { methods } 

    /// <summary>
    ///   确定指定的证据是否满足成员资格条件。
    /// </summary>
    function Check(evidence: DNEvidence): Boolean;
    /// <summary>
    ///   创建成员资格条件的等效副本。
    /// </summary>
    function Copy: DNIMembershipCondition;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement); overload;
    /// <summary>
    ///   确定是否  和  从指定的对象相等，则为  和  包含在当前 。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前的成员资格条件的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建安全对象具有指定其当前状态的 XML 编码 。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    /// <summary>
    ///   创建并返回的字符串表示形式的成员资格条件。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置要用于成员资格条件的哈希算法。
    /// </summary>
    property HashAlgorithm: DNHashAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    /// <summary>
    ///   获取或设置针对其测试成员资格条件的哈希值。
    /// </summary>
    property HashValue: TArray<Byte> read get_HashValue write set_HashValue;
  end;

  TDNHashMembershipCondition = class(TDNGenericImport<DNHashMembershipConditionClass, DNHashMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  /// <summary>
  ///   定义创建新的标识权限的方法。
  /// </summary>
  [DNTypeName('System.Security.Policy.IIdentityPermissionFactory')]
  DNIIdentityPermissionFactory = interface(DNObject)
  ['{4E95244E-C6FC-3A86-8DB7-1712454DE3B6}']
  { methods } 

    /// <summary>
    ///   创建指定的证据的新标识权限。
    /// </summary>
    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;

  end;

  //-------------namespace: System.Security.Policy----------------
  DNPolicyLevelClass = interface(DNObjectClass)
  ['{50A1C57C-A2A9-4737-8458-CEF149A104E3}']
  { static methods } 

    /// <summary>
    ///   在应用程序域策略级别上创建用于新的策略级别。
    /// </summary>
    {class} function CreateAppDomainLevel: DNPolicyLevel;

  end;

  /// <summary>
  ///   表示公共语言运行时的安全策略级别。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.PolicyLevel')]
  DNPolicyLevel = interface(DNObject)
  ['{64E304C1-D80D-3388-94EF-002F45D5AC05}']
  { getter & setter } 

    function get_Label: string;
    function get_Type: DNPolicyLevelType;
    function get_StoreLocation: string;
    function get_RootCodeGroup: DNCodeGroup;
    procedure set_RootCodeGroup(value: DNCodeGroup);
    function get_NamedPermissionSets: DNIList;
    function get_FullTrustAssemblies: DNIList;

  { methods } 

    /// <summary>
    ///   返回  具有指定名称的当前策略级别中。
    /// </summary>
    function GetNamedPermissionSet(name: string): DNNamedPermissionSet;
    /// <summary>
    ///   解析基于证据策略级别的策略，并返回结果 。
    /// </summary>
    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    /// <summary>
    ///   重新构造具有给定状态的 XML 编码的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement);
    /// <summary>
    ///   解析策略级别的策略，并返回与证据匹配的代码组树的根。
    /// </summary>
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    /// <summary>
    ///   添加  对应于指定  到列表中  用于确定程序集是否为程序集不应进行评估的组的成员的对象。
    /// </summary>
    procedure AddFullTrustAssembly(sn: DNStrongName); overload;
    /// <summary>
    ///   添加指定  到列表中  用于确定程序集是否为程序集不应进行评估的组的成员的对象。
    /// </summary>
    procedure AddFullTrustAssembly(snMC: DNStrongNameMembershipCondition); overload;
    /// <summary>
    ///   删除具有指定的程序集  从程序集列表中的策略级别用来评估策略。
    /// </summary>
    procedure RemoveFullTrustAssembly(sn: DNStrongName); overload;
    /// <summary>
    ///   删除具有指定的程序集  从程序集列表中的策略级别用来评估策略。
    /// </summary>
    procedure RemoveFullTrustAssembly(snMC: DNStrongNameMembershipCondition); overload;
    /// <summary>
    ///   添加  属于当前策略级别。
    /// </summary>
    procedure AddNamedPermissionSet(permSet: DNNamedPermissionSet);
    /// <summary>
    ///   移除指定  从当前的策略级别。
    /// </summary>
    function RemoveNamedPermissionSet(permSet: DNNamedPermissionSet): DNNamedPermissionSet; overload;
    /// <summary>
    ///   删除  与指定的名称从当前的策略级别。
    /// </summary>
    function RemoveNamedPermissionSet(name: string): DNNamedPermissionSet; overload;
    /// <summary>
    ///   将替换  用指定的当前策略级别中 。
    /// </summary>
    function ChangeNamedPermissionSet(name: string; pSet: DNPermissionSet): DNNamedPermissionSet;
    /// <summary>
    ///   将配置文件替换为此  与上一次备份 （反映在上次保存它之前的策略的状态） 并返回到上一次的状态将保存。
    /// </summary>
    procedure Recover;
    /// <summary>
    ///   返回当前的策略级别为默认状态。
    /// </summary>
    procedure Reset;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取策略级别的描述性标签。
    /// </summary>
    property &Label: string read get_Label;
    /// <summary>
    ///   获取策略级别的类型。
    /// </summary>
    property &Type: DNPolicyLevelType read get_Type;
    /// <summary>
    ///   获取策略文件的存储位置的路径。
    /// </summary>
    property StoreLocation: string read get_StoreLocation;
    /// <summary>
    ///   获取或设置策略级别的根代码组。
    /// </summary>
    property RootCodeGroup: DNCodeGroup read get_RootCodeGroup write set_RootCodeGroup;
    /// <summary>
    ///   获取为策略级别定义的命名的权限集的列表。
    /// </summary>
    property NamedPermissionSets: DNIList read get_NamedPermissionSets;
    /// <summary>
    ///   获取一份  用于确定程序集是否为程序集用于评估安全策略的组的成员的对象。
    /// </summary>
    property FullTrustAssemblies: DNIList read get_FullTrustAssemblies;
  end;

  TDNPolicyLevel = class(TDNGenericImport<DNPolicyLevelClass, DNPolicyLevel>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPolicyStatementClass = interface(DNObjectClass)
  ['{84B6878B-C99B-4629-BC6B-013D32756242}']
  { constructors } 

    /// <summary>
    ///   使用指定的  初始化  类的新实例。
    /// </summary>
    {class} function init(permSet: DNPermissionSet): DNPolicyStatement; overload;
    /// <summary>
    ///   新实例初始化  类与指定  和属性。
    /// </summary>
    {class} function init(permSet: DNPermissionSet; attributes: DNPolicyStatementAttribute): DNPolicyStatement; overload;

  end;

  /// <summary>
  ///   表示的语句  描述的权限以及适用于与一组特定的证据的代码的其他信息。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.PolicyStatement')]
  DNPolicyStatement = interface(DNObject)
  ['{ABCC3DF5-7E59-3780-A3CC-4F412008A5EA}']
  { getter & setter } 

    function get_PermissionSet: DNPermissionSet;
    procedure set_PermissionSet(value: DNPermissionSet);
    function get_Attributes: DNPolicyStatementAttribute;
    procedure set_Attributes(value: DNPolicyStatementAttribute);
    function get_AttributeString: string;

  { methods } 

    /// <summary>
    ///   创建当前策略语句的等效副本。
    /// </summary>
    function Copy: DNPolicyStatement;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   重新构造具有给定状态的 XML 编码的安全对象。
    /// </summary>
    procedure FromXml(et: DNSecurityElement); overload;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   重新构造具有给定状态的 XML 编码的安全对象。
    /// </summary>
    procedure FromXml(et: DNSecurityElement; level: DNPolicyLevel); overload;
    /// <summary>
    ///   确定指定的  对象是否等于当前的 。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   获取的哈希代码  对象，它是适合在哈希算法和数据结构，如哈希表中使用。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  策略语句。
    /// </summary>
    property PermissionSet: DNPermissionSet read get_PermissionSet write set_PermissionSet;
    /// <summary>
    ///   获取或设置策略声明的属性。
    /// </summary>
    property Attributes: DNPolicyStatementAttribute read get_Attributes write set_Attributes;
    /// <summary>
    ///   获取策略语句的属性的字符串表示形式。
    /// </summary>
    property AttributeString: string read get_AttributeString;
  end;

  TDNPolicyStatement = class(TDNGenericImport<DNPolicyStatementClass, DNPolicyStatement>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPublisherMembershipConditionClass = interface(DNObjectClass)
  ['{38AD5BD3-DD4E-45FC-A63D-5609110BA37D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  确定成员身份的验证码 X.509v3 证书的类。
    /// </summary>
    {class} function init(certificate: DNX509Certificate): DNPublisherMembershipCondition;

  end;

  /// <summary>
  ///   确定是否该程序集属于一个代码组通过测试其软件发布者验证码 X.509v3 证书。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.PublisherMembershipCondition')]
  DNPublisherMembershipCondition = interface(DNObject)
  ['{05BF00F9-44B8-39A7-AF36-7E11C9B502DD}']
  { getter & setter } 

    function get_Certificate: DNX509Certificate;
    procedure set_Certificate(value: DNX509Certificate);

  { methods } 

    /// <summary>
    ///   确定指定的证据是否满足成员资格条件。
    /// </summary>
    function Check(evidence: DNEvidence): Boolean;
    /// <summary>
    ///   创建成员资格条件的等效副本。
    /// </summary>
    function Copy: DNIMembershipCondition;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement); overload;
    /// <summary>
    ///   确定指定对象中的发布服务器证书是否等效于包含在当前的发行者证书 。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前的成员资格条件的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建并返回的字符串表示形式 。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   创建安全对象具有指定其当前状态的 XML 编码 。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置针对其测试成员资格条件的验证码 X.509v3 证书。
    /// </summary>
    property Certificate: DNX509Certificate read get_Certificate write set_Certificate;
  end;

  TDNPublisherMembershipCondition = class(TDNGenericImport<DNPublisherMembershipConditionClass, DNPublisherMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNSiteMembershipConditionClass = interface(DNObjectClass)
  ['{3B483199-7BD9-4BD1-86DB-7A62494A5A08}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  确定成员身份的站点同名的类。
    /// </summary>
    {class} function init(site: string): DNSiteMembershipCondition;

  end;

  /// <summary>
  ///   确定是否该程序集属于一个代码组进行测试，以产生的站点。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.SiteMembershipCondition')]
  DNSiteMembershipCondition = interface(DNObject)
  ['{7F5E4FD8-9575-3691-BF0C-2D30A21E4376}']
  { getter & setter } 

    function get_Site: string;
    procedure set_Site(value: string);

  { methods } 

    /// <summary>
    ///   确定指定的证据是否满足成员资格条件。
    /// </summary>
    function Check(evidence: DNEvidence): Boolean;
    /// <summary>
    ///   创建成员资格条件的等效副本。
    /// </summary>
    function Copy: DNIMembershipCondition;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement); overload;
    /// <summary>
    ///   确定是否从指定站点  对象是否等效于包含在当前站点 。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前的成员资格条件的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建安全对象具有指定其当前状态的 XML 编码 。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    /// <summary>
    ///   创建并返回的字符串表示形式的成员资格条件。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置针对其测试成员资格条件的站点。
    /// </summary>
    property Site: string read get_Site write set_Site;
  end;

  TDNSiteMembershipCondition = class(TDNGenericImport<DNSiteMembershipConditionClass, DNSiteMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNStrongNameMembershipConditionClass = interface(DNObjectClass)
  ['{55A335C1-5B47-4C15-B8A1-313ED1C1197A}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有强名称公钥密钥 blob、 名称和版本数确定成员身份。
    /// </summary>
    {class} function init(blob: DNStrongNamePublicKeyBlob; name: string; version: DNVersion): DNStrongNameMembershipCondition;

  end;

  /// <summary>
  ///   确定是否该程序集属于一个代码组进行测试，以其强名称。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.StrongNameMembershipCondition')]
  DNStrongNameMembershipCondition = interface(DNObject)
  ['{7CFFAC1C-7370-30F9-AA72-E30FE39257D9}']
  { getter & setter } 

    function get_PublicKey: DNStrongNamePublicKeyBlob;
    procedure set_PublicKey(value: DNStrongNamePublicKeyBlob);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Version: DNVersion;
    procedure set_Version(value: DNVersion);

  { methods } 

    /// <summary>
    ///   确定指定的证据是否满足成员资格条件。
    /// </summary>
    function Check(evidence: DNEvidence): Boolean;
    /// <summary>
    ///   创建当前的等效副本 。
    /// </summary>
    function Copy: DNIMembershipCondition;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement); overload;
    /// <summary>
    ///   确定是否  从指定的对象等效于  包含在当前 。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   返回当前  的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建安全对象具有指定其当前状态的 XML 编码 。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    /// <summary>
    ///   创建并返回的字符串表示形式当前 。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置  的  针对其成员资格条件的测试。
    /// </summary>
    property PublicKey: DNStrongNamePublicKeyBlob read get_PublicKey write set_PublicKey;
    /// <summary>
    ///   获取或设置的简单名称  针对其成员资格条件的测试。
    /// </summary>
    property Name: string read get_Name write set_Name;
    /// <summary>
    ///   获取或设置  的  针对其成员资格条件的测试。
    /// </summary>
    property Version: DNVersion read get_Version write set_Version;
  end;

  TDNStrongNameMembershipCondition = class(TDNGenericImport<DNStrongNameMembershipConditionClass, DNStrongNameMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNTrustManagerContextClass = interface(DNObjectClass)
  ['{364E384B-5A2B-4AB4-9927-41631B42DA9F}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNTrustManagerContext; overload;
    /// <summary>
    ///   使用指定的  对象初始化  类的新实例。
    /// </summary>
    {class} function init(uiContext: DNTrustManagerUIContext): DNTrustManagerContext; overload;

  end;

  /// <summary>
  ///   表示要考虑做出的决策中运行应用程序，以及安全设置的新的信任关系管理器的上下文  要在其中运行应用程序。
  /// </summary>
  [DNTypeName('System.Security.Policy.TrustManagerContext')]
  DNTrustManagerContext = interface(DNObject)
  ['{AFAEF10F-1BC4-351F-886A-878A265C1862}']
  { getter & setter } 

    function get_UIContext: DNTrustManagerUIContext;
    procedure set_UIContext(value: DNTrustManagerUIContext);
    function get_NoPrompt: Boolean;
    procedure set_NoPrompt(value: Boolean);
    function get_IgnorePersistedDecision: Boolean;
    procedure set_IgnorePersistedDecision(value: Boolean);
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_Persist: Boolean;
    procedure set_Persist(value: Boolean);
    function get_PreviousApplicationIdentity: DNApplicationIdentity;
    procedure set_PreviousApplicationIdentity(value: DNApplicationIdentity);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置信任关系管理器应显示用户界面的类型。
    /// </summary>
    property UIContext: DNTrustManagerUIContext read get_UIContext write set_UIContext;
    /// <summary>
    ///   获取或设置一个值，该值指示是否信任关系管理器应提示用户输入做出信任决定。
    /// </summary>
    property NoPrompt: Boolean read get_NoPrompt write set_NoPrompt;
    /// <summary>
    ///   获取或设置一个值，指示应用程序安全管理器是否应忽略任何保留的决定并调用信任关系管理器。
    /// </summary>
    property IgnorePersistedDecision: Boolean read get_IgnorePersistedDecision write set_IgnorePersistedDecision;
    /// <summary>
    ///   获取或设置一个值，该值指示是否信任关系管理器应缓存对于此应用程序，以便于将来的请求，以确定应用程序信任的状态。
    /// </summary>
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    /// <summary>
    ///   获取或设置一个值，该值指示是否应保留同意对话框中的用户的响应。
    /// </summary>
    property Persist: Boolean read get_Persist write set_Persist;
    /// <summary>
    ///   获取或设置以前的应用程序标识的标识。
    /// </summary>
    property PreviousApplicationIdentity: DNApplicationIdentity read get_PreviousApplicationIdentity write set_PreviousApplicationIdentity;
  end;

  TDNTrustManagerContext = class(TDNGenericImport<DNTrustManagerContextClass, DNTrustManagerContext>) end;

  //-------------namespace: System.Security.Policy----------------
  DNUrlMembershipConditionClass = interface(DNObjectClass)
  ['{6879E7E0-EC33-4AB8-ABC3-7C7A5596EA7E}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类确定成员身份的 URL。
    /// </summary>
    {class} function init(url: string): DNUrlMembershipCondition;

  end;

  /// <summary>
  ///   确定是否该程序集属于一个代码组进行测试，其 URL。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.UrlMembershipCondition')]
  DNUrlMembershipCondition = interface(DNObject)
  ['{93E33D56-812D-3112-BEEB-276A67D1172E}']
  { getter & setter } 

    function get_Url: string;
    procedure set_Url(value: string);

  { methods } 

    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    /// <summary>
    ///   确定指定的证据是否满足成员资格条件。
    /// </summary>
    function Check(evidence: DNEvidence): Boolean;
    /// <summary>
    ///   创建成员资格条件的等效副本。
    /// </summary>
    function Copy: DNIMembershipCondition;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement); overload;
    /// <summary>
    ///   确定指定对象的 URL 是否等效于包含在当前的 URL 。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前的成员资格条件的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建安全对象具有指定其当前状态的 XML 编码 。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   创建并返回的字符串表示形式的成员资格条件。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置针对其测试成员资格条件的 URL。
    /// </summary>
    property Url: string read get_Url write set_Url;
  end;

  TDNUrlMembershipCondition = class(TDNGenericImport<DNUrlMembershipConditionClass, DNUrlMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNZoneMembershipConditionClass = interface(DNObjectClass)
  ['{AAE7A426-6786-4AAA-986E-1DAA595371EB}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类确定成员身份的区域。
    /// </summary>
    {class} function init(zone: DNSecurityZone): DNZoneMembershipCondition;

  end;

  /// <summary>
  ///   确定是否该程序集属于一个代码组通过测试的原始区域。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Policy.ZoneMembershipCondition')]
  DNZoneMembershipCondition = interface(DNObject)
  ['{D72F9AEB-23F8-3B88-B6FD-8A143E3245A1}']
  { getter & setter } 

    function get_SecurityZone: DNSecurityZone;
    procedure set_SecurityZone(value: DNSecurityZone);

  { methods } 

    /// <summary>
    ///   确定指定的证据是否满足成员资格条件。
    /// </summary>
    function Check(evidence: DNEvidence): Boolean;
    /// <summary>
    ///   创建成员资格条件的等效副本。
    /// </summary>
    function Copy: DNIMembershipCondition;
    /// <summary>
    ///   创建安全对象及其当前状态的 XML 编码。
    /// </summary>
    function ToXml: DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement); overload;
    /// <summary>
    ///   确定指定的对象从该区域是否等效于包含在当前的区域 。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   获取当前的成员资格条件的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   创建安全对象具有指定其当前状态的 XML 编码 。
    /// </summary>
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    /// <summary>
    ///   通过 XML 编码重新构造具有指定状态的安全对象。
    /// </summary>
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    /// <summary>
    ///   创建并返回的字符串表示形式的成员资格条件。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置为其成员资格条件测试的区域。
    /// </summary>
    property SecurityZone: DNSecurityZone read get_SecurityZone write set_SecurityZone;
  end;

  TDNZoneMembershipCondition = class(TDNGenericImport<DNZoneMembershipConditionClass, DNZoneMembershipCondition>) end;

  //-------------namespace: System.Security.Principal----------------
  DNIdentityReferenceClass = interface(DNObjectClass)
  ['{496A0F33-8DD5-4E20-98FE-7919107FBFEB}']
  end;

  /// <summary>
  ///   表示一个标识，并且是类的基类  和  类。
  ///               此类不提供公共构造函数，并因此不能被继承。
  /// </summary>
  [DNTypeName('System.Security.Principal.IdentityReference')]
  DNIdentityReference = interface(DNObject)
  ['{B8B1BCCC-F738-3D73-BA14-25D6056A6523}']
  { getter & setter } 

    function get_Value: string;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示指定的类型是否为有效的转换类型  类。
    /// </summary>
    function IsValidTargetType(targetType: DNType): Boolean;
    /// <summary>
    ///   将转换由表示的帐户名称  到另一个对象 的派生类型。
    /// </summary>
    function Translate(targetType: DNType): DNIdentityReference;
    /// <summary>
    ///   返回一个值，该值指示指定的对象是否等于此实例的  类。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   用作  的哈希函数。
    ///               适用于哈希算法和哈希表之类的数据结构。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回的字符串表示形式表示的标识  对象。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取表示的标识的字符串值对象。
    /// </summary>
    property Value: string read get_Value;
  end;

  TDNIdentityReference = class(TDNGenericImport<DNIdentityReferenceClass, DNIdentityReference>) end;

  //-------------namespace: System.Security.Principal----------------
  DNNTAccountClass = interface(DNIdentityReferenceClass)
  ['{908E8492-7076-4AF7-A5BE-73527DFD79D6}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类通过使用指定的域的名称和帐户名。
    /// </summary>
    {class} function init(domainName: string; accountName: string): DNNTAccount; overload;
    /// <summary>
    ///   新实例初始化  使用指定的名称的类。
    /// </summary>
    {class} function init(name: string): DNNTAccount; overload;

  end;

  /// <summary>
  ///   表示用户或组帐户。
  /// </summary>
  [DNTypeName('System.Security.Principal.NTAccount')]
  DNNTAccount = interface(DNIdentityReference)
  ['{591EAEA3-F70C-3503-83D0-2D42F4C6C0D5}']
  { getter & setter } 

    function get_Value: string;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示指定的类型是否为有效的转换类型  类。
    /// </summary>
    function IsValidTargetType(targetType: DNType): Boolean;
    /// <summary>
    ///   将转换由表示的帐户名称  到另一个对象 的派生类型。
    /// </summary>
    function Translate(targetType: DNType): DNIdentityReference;
    /// <summary>
    ///   返回一个值，该值指示是否此  对象是否等于指定的对象。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   用作当前哈希函数  对象。
    ///               方法很适用于哈希算法和数据哈希表之类的结构。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回在帐户名称，而 域\帐户 格式表示的帐户为  对象。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   返回的大写字符串，这种表示形式  对象。
    /// </summary>
    property Value: string read get_Value;
  end;

  TDNNTAccount = class(TDNGenericImport<DNNTAccountClass, DNNTAccount>) end;

  //-------------namespace: System.Security.Principal----------------
  DNSecurityIdentifierClass = interface(DNIdentityReferenceClass)
  ['{DC394F5E-C49B-4F03-93FF-E0D5B047FE5B}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  通过使用指定的安全标识符 (SID) 安全描述符定义语言 (SDDL) 格式的类。
    /// </summary>
    {class} function init(sddlForm: string): DNSecurityIdentifier; overload;
    /// <summary>
    ///   新实例初始化  类通过使用指定的二进制表示形式的安全标识符 (SID)。
    /// </summary>
    {class} function init(binaryForm: TArray<Byte>; offset: Int32): DNSecurityIdentifier; overload;
    /// <summary>
    ///   新实例初始化  类通过使用一个整数，表示安全标识符 (SID) 的二进制格式。
    /// </summary>
    {class} function init(binaryForm: IntPtr): DNSecurityIdentifier; overload;
    /// <summary>
    ///   新实例初始化  类通过使用指定的已知安全标识符 (SID) 类型和域 SID。
    /// </summary>
    {class} function init(sidType: DNWellKnownSidType; domainSid: DNSecurityIdentifier): DNSecurityIdentifier; overload;

  end;

  /// <summary>
  ///   表示一个安全标识符 (SID) 并提供 Sid 的封送处理和比较操作。
  /// </summary>
  [DNTypeName('System.Security.Principal.SecurityIdentifier')]
  DNSecurityIdentifier = interface(DNIdentityReference)
  ['{71354EE9-4244-395D-B9AD-C413CE482097}']
  { getter & setter } 

    function get_BinaryLength: Int32;
    function get_AccountDomainSid: DNSecurityIdentifier;
    function get_Value: string;

  { methods } 

    /// <summary>
    ///   返回一个值，该值指示是否此  对象是否等于指定的对象。
    /// </summary>
    function Equals(o: DNObject): Boolean; overload;
    /// <summary>
    ///   指示是否指定  对象是否等于当前  对象。
    /// </summary>
    function Equals(sid: DNSecurityIdentifier): Boolean; overload;
    /// <summary>
    ///   用作当前哈希函数  对象。
    ///               方法很适用于哈希算法和数据哈希表之类的结构。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回一个值，该值指示指定的类型是否为有效的转换类型  类。
    /// </summary>
    function IsValidTargetType(targetType: DNType): Boolean;
    /// <summary>
    ///   返回一个值，该值指示是否安全标识符 (SID) 表示此  对象是有效的 Windows 帐户的 SID。
    /// </summary>
    function IsAccountSid: Boolean;
    /// <summary>
    ///   将转换由表示的帐户名称  到另一个对象 的派生类型。
    /// </summary>
    function Translate(targetType: DNType): DNIdentityReference;
    /// <summary>
    ///   比较当前  对象具有指定  对象。
    /// </summary>
    function CompareTo(sid: DNSecurityIdentifier): Int32;
    /// <summary>
    ///   返回一个值，该值指示是否  对象与指定的已知安全标识符 (SID) 类型相匹配。
    /// </summary>
    function IsWellKnown(&type: DNWellKnownSidType): Boolean;
    /// <summary>
    ///   将复制的二进制表示形式表示的指定的安全标识符 (SID)  到字节数组的类。
    /// </summary>
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    /// <summary>
    ///   返回一个值，该值指示是否安全标识符 (SID) 表示此  对象是从与指定的 SID 相同的域。
    /// </summary>
    function IsEqualDomainSid(sid: DNSecurityIdentifier): Boolean;
    /// <summary>
    ///   安全描述符定义语言 (SDDL) 格式表示的帐户为返回的安全标识符 (SID)、  对象。
    ///               SDDL 格式的一个示例是 S-1-5-9。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   返回的长度，以字节为单位表示的安全标识符 (SID)  对象。
    /// </summary>
    property BinaryLength: Int32 read get_BinaryLength;
    /// <summary>
    ///   返回从所表示的 SID 的帐户域安全标识符 (SID) 部分  对象 SID 是否表示 Windows 帐户的 SID。
    ///               如果 SID 不表示 Windows 帐户的 SID，则此属性返回 。
    /// </summary>
    property AccountDomainSid: DNSecurityIdentifier read get_AccountDomainSid;
    /// <summary>
    ///   返回表示此安全标识符 (SID) 的大写安全描述符定义语言 (SDDL) 字符串  对象。
    /// </summary>
    property Value: string read get_Value;
  end;

  TDNSecurityIdentifier = class(TDNGenericImport<DNSecurityIdentifierClass, DNSecurityIdentifier>) end;

  //-------------namespace: System.Security.Principal----------------
  DNIdentityReferenceCollectionClass = interface(DNObjectClass)
  ['{10F35726-5C43-440B-9B6F-BE6C3C5C6E1C}']
  { constructors } 

    /// <summary>
    ///   用集合中的零项初始化  类的新实例。
    /// </summary>
    {class} function init: DNIdentityReferenceCollection; overload;
    /// <summary>
    ///   使用指定的初始大小初始化  类的新实例。
    /// </summary>
    {class} function init(capacity: Int32): DNIdentityReferenceCollection; overload;

  end;

  /// <summary>
  ///   表示  对象的集合，并提供一种方法将  派生的对象集转换为  派生的类型。
  /// </summary>
  [DNTypeName('System.Security.Principal.IdentityReferenceCollection')]
  DNIdentityReferenceCollection = interface(DNObject)
  ['{3283EEBF-E67D-31AC-8481-A968F3A77E9A}']
  { getter & setter } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNIdentityReference;
    procedure set_Item(index: Int32; value: DNIdentityReference);

  { methods } 

    /// <summary>
    ///   从指定的索引开始，将  集合复制到一个  数组中。
    /// </summary>
    procedure CopyTo(&array: TArray<DNIdentityReference>; offset: Int32);
    /// <summary>
    ///   指示  集合是否包含指定的  对象。
    /// </summary>
    function &Contains(identity: DNIdentityReference): Boolean;
    /// <summary>
    ///   获取一个可用于循环访问  集合的枚举数。
    /// </summary>
    function GetEnumerator: DNIEnumerator<DNIdentityReference>;
    /// <summary>
    ///   将集合中的对象转换为指定类型。
    ///               调用此方法与调用第二个参数设置为  的  一样，这意味着对于转换失败的项不会引发异常。
    /// </summary>
    function Translate(targetType: DNType): DNIdentityReferenceCollection; overload;
    /// <summary>
    ///   将集合中的对象转换为指定类型，并使用指定容错机制处理或忽略与不具有转换映射的类型相关联的错误。
    /// </summary>
    function Translate(targetType: DNType; forceSuccess: Boolean): DNIdentityReferenceCollection; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  集合中项的数目。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取一个值，该值指示  集合是否是只读的。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNIdentityReference read get_Item write set_Item; default;
  end;

  TDNIdentityReferenceCollection = class(TDNGenericImport<DNIdentityReferenceCollectionClass, DNIdentityReferenceCollection>) end;

  //-------------namespace: System.Security.Principal----------------
  /// <summary>
  ///   定义标识对象的基本功能。
  /// </summary>
  [DNTypeName('System.Security.Principal.IIdentity')]
  DNIIdentity = interface(DNObject)
  ['{F4205A87-4D46-303D-B1D9-5A99F7C90D30}']
  { getter & setter } 

    function get_Name: string;
    function get_AuthenticationType: string;
    function get_IsAuthenticated: Boolean;

  { propertys } 

    /// <summary>
    ///   获取当前用户的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取使用的身份验证的类型。
    /// </summary>
    property AuthenticationType: string read get_AuthenticationType;
    /// <summary>
    ///   获取一个值，该值指示是否已验证用户。
    /// </summary>
    property IsAuthenticated: Boolean read get_IsAuthenticated;
  end;

  //-------------namespace: System.Security.Principal----------------
  /// <summary>
  ///   定义主体对象的基本功能。
  /// </summary>
  [DNTypeName('System.Security.Principal.IPrincipal')]
  DNIPrincipal = interface(DNObject)
  ['{4283CA6C-D291-3481-83C9-9554481FE888}']
  { getter & setter } 

    function get_Identity: DNIIdentity;

  { methods } 

    /// <summary>
    ///   确定当前用户是否属于指定角色。
    /// </summary>
    function IsInRole(role: string): Boolean;

  { propertys } 

    /// <summary>
    ///   获取当前主体的标识。
    /// </summary>
    property Identity: DNIIdentity read get_Identity;
  end;

  //-------------namespace: System.Security.Principal----------------
  DNWindowsImpersonationContextClass = interface(DNObjectClass)
  ['{934B600B-0D9B-4FD4-9355-37447090859E}']
  end;

  /// <summary>
  ///   表示模拟操作之前的 Windows 用户。
  /// </summary>
  [DNTypeName('System.Security.Principal.WindowsImpersonationContext')]
  DNWindowsImpersonationContext = interface(DNObject)
  ['{FC1ABB5C-D107-3145-908A-3EA107D53748}']
  { methods } 

    /// <summary>
    ///   将用户上下文恢复为该对象表示的 Windows 用户。
    /// </summary>
    procedure Undo;
    /// <summary>
    ///   释放由  使用的所有资源。
    /// </summary>
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNWindowsImpersonationContext = class(TDNGenericImport<DNWindowsImpersonationContextClass, DNWindowsImpersonationContext>) end;

  //-------------namespace: System.Security----------------
  DNSecureStringClass = interface(DNObjectClass)
  ['{FE50F912-AD08-48A7-B313-EC03E2454B2A}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNSecureString; overload;
    /// <summary>
    ///   用  对象的子数组初始化  类的新实例。
    ///            
    ///              此构造函数不符合 CLS。
    ///               符合 CLS 的替代方法是 。
    /// </summary>
    {class} function init(value: PChar; length: Int32): DNSecureString; overload;

  end;

  /// <summary>
  ///   表示应保密的文本，例如在不再需要时将其从计算机内存中删除。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Security.SecureString')]
  DNSecureString = interface(DNObject)
  ['{396C030F-BE46-3871-9815-7BB2B55DAC34}']
  { getter & setter } 

    function get_Length: Int32;

  { methods } 

    /// <summary>
    ///   删除当前安全字符串的值。
    /// </summary>
    procedure Clear;
    /// <summary>
    ///   创建当前安全字符串的副本。
    /// </summary>
    function Copy: DNSecureString;
    /// <summary>
    ///   释放由当前  对象使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   指示此安全字符串是否标记为只读。
    /// </summary>
    function IsReadOnly: Boolean;
    /// <summary>
    ///   将此安全字符串的文本值设置为只读。
    /// </summary>
    procedure MakeReadOnly;
    /// <summary>
    ///   在当前安全字符串的末尾追加一个字符。
    /// </summary>
    procedure AppendChar(c: Char);
    /// <summary>
    ///   在此安全字符串中的指定索引位置插入一个字符。
    /// </summary>
    procedure InsertAt(index: Int32; c: Char);
    /// <summary>
    ///   从此安全字符串中的指定索引位置移除字符。
    /// </summary>
    procedure RemoveAt(index: Int32);
    /// <summary>
    ///   将指定索引位置上的现有字符替换为其他字符。
    /// </summary>
    procedure SetAt(index: Int32; c: Char);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前安全字符串中的字符数。
    /// </summary>
    property Length: Int32 read get_Length;
  end;

  TDNSecureString = class(TDNGenericImport<DNSecureStringClass, DNSecureString>) end;

  //-------------namespace: System.Security----------------
  DNSecurityContextClass = interface(DNObjectClass)
  ['{BBD55D3D-5E6C-4166-A4E1-654289E3351B}']
  { static methods } 

    /// <summary>
    ///   在异步线程间取消安全上下文的流动。
    /// </summary>
    {class} function SuppressFlow: DNAsyncFlowControl;
    /// <summary>
    ///   在异步线程间取消当前安全上下文的 Windows 标识部分的流动。
    /// </summary>
    {class} function SuppressFlowWindowsIdentity: DNAsyncFlowControl;
    /// <summary>
    ///   在异步线程间恢复安全上下文的流动。
    /// </summary>
    {class} procedure RestoreFlow;
    /// <summary>
    ///   确定是否已取消安全上下文的流动。
    /// </summary>
    {class} function IsFlowSuppressed: Boolean;
    /// <summary>
    ///   确定是否已取消当前安全上下文的 Windows 标识部分的流动。
    /// </summary>
    {class} function IsWindowsIdentityFlowSuppressed: Boolean;
    /// <summary>
    ///   在当前线程上指定的安全上下文中运行指定的方法。
    /// </summary>
    {class} procedure Run(securityContext: DNSecurityContext; callback: DNContextCallback; state: DNObject);
    /// <summary>
    ///   捕获当前线程的安全上下文。
    /// </summary>
    {class} function Capture: DNSecurityContext;

  end;

  /// <summary>
  ///   封装并传播在线程间传输的执行上下文的所有安全相关数据。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.SecurityContext')]
  DNSecurityContext = interface(DNObject)
  ['{6757B80B-89A4-39F3-AA34-BCC6C7D21D64}']
  { methods } 

    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   创建当前安全上下文的副本。
    /// </summary>
    function CreateCopy: DNSecurityContext;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSecurityContext = class(TDNGenericImport<DNSecurityContextClass, DNSecurityContext>) end;

  //-------------namespace: System.Security----------------
  DNSecurityElementClass = interface(DNObjectClass)
  ['{EE303971-6BA8-4D3C-8342-1E9A0F3786AD}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  具有指定标记的类。
    /// </summary>
    {class} function init(tag: string): DNSecurityElement; overload;
    /// <summary>
    ///   新实例初始化  类具有指定的标记和文本。
    /// </summary>
    {class} function init(tag: string; text: string): DNSecurityElement; overload;

  { static methods } 

    /// <summary>
    ///   从 XML 编码的字符串创建安全元素。
    /// </summary>
    {class} function FromString(xml: string): DNSecurityElement;
    /// <summary>
    ///   确定字符串是否是有效的标记。
    /// </summary>
    {class} function IsValidTag(tag: string): Boolean;
    /// <summary>
    ///   确定字符串是否是有效 XML 元素中的文本。
    /// </summary>
    {class} function IsValidText(text: string): Boolean;
    /// <summary>
    ///   确定字符串是否是有效的特性名。
    /// </summary>
    {class} function IsValidAttributeName(name: string): Boolean;
    /// <summary>
    ///   确定字符串是否是有效的特性值。
    /// </summary>
    {class} function IsValidAttributeValue(value: string): Boolean;
    /// <summary>
    ///   替换无效的 XML 字符在字符串中使用其有效的 XML 等效项。
    /// </summary>
    {class} function Escape(str: string): string;

  end;

  /// <summary>
  ///   表示用于编码安全对象的 XML 对象模型。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.SecurityElement')]
  DNSecurityElement = interface(DNObject)
  ['{B9033CD1-C905-3059-9D29-562ECB13B0B3}']
  { getter & setter } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Attributes: DNHashtable;
    procedure set_Attributes(value: DNHashtable);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Children: DNArrayList;
    procedure set_Children(value: DNArrayList);

  { methods } 

    /// <summary>
    ///   将名称/值特性添加到一个 XML 元素。
    /// </summary>
    procedure AddAttribute(name: string; value: string);
    /// <summary>
    ///   在一个 XML 元素按名称查找属性。
    /// </summary>
    function Attribute(name: string): string;
    /// <summary>
    ///   生成的字符串表示形式的 XML 元素及其构成特性、 子元素和文本。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   将子元素添加到 XML 元素。
    /// </summary>
    procedure AddChild(child: DNSecurityElement);
    /// <summary>
    ///   比较两个 XML 元素对象相等。
    /// </summary>
    function Equal(other: DNSecurityElement): Boolean;
    /// <summary>
    ///   创建并返回当前的相同副本  对象。
    /// </summary>
    function Copy: DNSecurityElement;
    /// <summary>
    ///   查找子级的标记名称。
    /// </summary>
    function SearchForChildByTag(tag: string): DNSecurityElement;
    /// <summary>
    ///   查找子级的标记名称，并返回所包含的文本。
    /// </summary>
    function SearchForTextOfTag(tag: string): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置一个 XML 元素的标记名称。
    /// </summary>
    property Tag: string read get_Tag write set_Tag;
    /// <summary>
    ///   获取或设置一个 XML 元素的属性作为名称/值对。
    /// </summary>
    property Attributes: DNHashtable read get_Attributes write set_Attributes;
    /// <summary>
    ///   获取或设置 XML 元素中的文本。
    /// </summary>
    property Text: string read get_Text write set_Text;
    /// <summary>
    ///   获取或设置 XML 元素的子元素的数组。
    /// </summary>
    property Children: DNArrayList read get_Children write set_Children;
  end;

  TDNSecurityElement = class(TDNGenericImport<DNSecurityElementClass, DNSecurityElement>) end;

  //-------------namespace: System.Security----------------
  DNSecurityManagerClass = interface(DNObjectClass)
  ['{03DA9F43-4E66-46DA-99D1-588288B1E776}']
  { static getter & setter } 

    {class} function get_CheckExecutionRights: Boolean;
    {class} procedure set_CheckExecutionRights(value: Boolean);
    {class} function get_SecurityEnabled: Boolean;
    {class} procedure set_SecurityEnabled(value: Boolean);

  { static methods } 

    /// <summary>
    ///   确定是否向调用方授予权限。
    /// </summary>
    {class} function IsGranted(perm: DNIPermission): Boolean;
    /// <summary>
    ///   获取是安全的应用程序具有提供的证据向授予的权限集。
    /// </summary>
    {class} function GetStandardSandbox(evidence: DNEvidence): DNPermissionSet;
    {class} procedure GetZoneAndOrigin(out zone: DNArrayList; out origin: DNArrayList);
    /// <summary>
    ///   从指定的文件加载 。
    /// </summary>
    {class} function LoadPolicyLevelFromFile(path: string; &type: DNPolicyLevelType): DNPolicyLevel;
    /// <summary>
    ///   加载  根据指定的字符串。
    /// </summary>
    {class} function LoadPolicyLevelFromString(str: string; &type: DNPolicyLevelType): DNPolicyLevel;
    /// <summary>
    ///   保存用  加载的已修改的安全策略级别。
    /// </summary>
    {class} procedure SavePolicyLevel(level: DNPolicyLevel);
    {class} function ResolvePolicy(evidence: DNEvidence; reqdPset: DNPermissionSet; optPset: DNPermissionSet; denyPset: DNPermissionSet; out denied: DNPermissionSet): DNPermissionSet; overload;
    /// <summary>
    ///   根据指定的证据确定向代码授予什么权限。
    /// </summary>
    {class} function ResolvePolicy(evidence: DNEvidence): DNPermissionSet; overload;
    /// <summary>
    ///   根据指定的证据确定向代码授予什么权限。
    /// </summary>
    {class} function ResolvePolicy(evidences: TArray<DNEvidence>): DNPermissionSet; overload;
    /// <summary>
    ///   确定当前线程是否需要安全上下文捕获，是否其安全状态具有时间必须在以后重新创建。
    /// </summary>
    {class} function CurrentThreadRequiresSecurityContextCapture: Boolean;
    /// <summary>
    ///   根据指定的证据确定授予代码的权限，不包括  级别的策略。
    /// </summary>
    {class} function ResolveSystemPolicy(evidence: DNEvidence): DNPermissionSet;
    /// <summary>
    ///   获取与指定证据相匹配的代码组集合。
    /// </summary>
    {class} function ResolvePolicyGroups(evidence: DNEvidence): DNIEnumerator;
    /// <summary>
    ///   提供一个枚举器，以按等级访问安全策略层次结构，例如计算机策略和用户策略。
    /// </summary>
    {class} function PolicyHierarchy: DNIEnumerator;
    /// <summary>
    ///   保存修改的安全策略状态。
    /// </summary>
    {class} procedure SavePolicy;

  { static propertys } 

    /// <summary>
    ///   获取或设置一个值，该值的代码必须具有  才能执行。
    /// </summary>
    {class} property CheckExecutionRights: Boolean read get_CheckExecutionRights write set_CheckExecutionRights;
    /// <summary>
    ///   获取或设置一个值，该值指示是否启用安全。
    /// </summary>
    {class} property SecurityEnabled: Boolean read get_SecurityEnabled write set_SecurityEnabled;
  end;

  /// <summary>
  ///   提供与安全系统进行交互的类的主要访问点。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Security.SecurityManager')]
  DNSecurityManager = interface(DNObject)
  ['{DF4E1BB0-8CDC-3C4B-A1C9-FEE64BBEF8C5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSecurityManager = class(TDNGenericImport<DNSecurityManagerClass, DNSecurityManager>) end;

  //-------------namespace: System.Security----------------
  DNSecurityStateClass = interface(DNObjectClass)
  ['{60169419-297E-4AF4-A15D-3781689E86B2}']
  end;

  /// <summary>
  ///   提供基本类，用于请求中的某个操作的安全状态  对象。
  /// </summary>
  [DNTypeName('System.Security.SecurityState')]
  DNSecurityState = interface(DNObject)
  ['{F87DC982-F016-37DC-A8D0-B14CF779D0FF}']
  { methods } 

    /// <summary>
    ///   获取一个值，该值指示是否为此实现中的状态  类是在当前主机上可用。
    /// </summary>
    function IsStateAvailable: Boolean;
    /// <summary>
    ///   当在派生类中重写时，可确保由表示的状态  是主机上可用。
    /// </summary>
    procedure EnsureState;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSecurityState = class(TDNGenericImport<DNSecurityStateClass, DNSecurityState>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  DNIsolatedStorageSecurityStateClass = interface(DNSecurityStateClass)
  ['{32EA3B02-B070-4482-B052-5FD18B40FC2C}']
  end;

  /// <summary>
  ///   提供用于维护独立存储的配额大小设置。
  /// </summary>
  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageSecurityState')]
  DNIsolatedStorageSecurityState = interface(DNSecurityState)
  ['{D0228A81-ED0B-344D-9196-FAE17589A3DE}']
  { getter & setter } 

    function get_Options: DNIsolatedStorageSecurityOptions;
    function get_UsedSize: Int64;
    function get_Quota: Int64;
    procedure set_Quota(value: Int64);

  { methods } 

    /// <summary>
    ///   确保  所表示的状态在主机上可用。
    /// </summary>
    procedure EnsureState;
    function IsStateAvailable: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取用于管理独立的存储安全性选项。
    /// </summary>
    property Options: DNIsolatedStorageSecurityOptions read get_Options;
    /// <summary>
    ///   在独立存储中获取当前使用大小。
    /// </summary>
    property UsedSize: Int64 read get_UsedSize;
    /// <summary>
    ///   获取或设置用于独立存储的配额的当前大小。
    /// </summary>
    property Quota: Int64 read get_Quota write set_Quota;
  end;

  TDNIsolatedStorageSecurityState = class(TDNGenericImport<DNIsolatedStorageSecurityStateClass, DNIsolatedStorageSecurityState>) end;

  //-------------namespace: System----------------
  DNStringComparerClass = interface(DNObjectClass)
  ['{64276905-48B1-45F4-9A53-36FFB20F4CC0}']
  { static getter & setter } 

    {class} function get_InvariantCulture: DNStringComparer;
    {class} function get_InvariantCultureIgnoreCase: DNStringComparer;
    {class} function get_CurrentCulture: DNStringComparer;
    {class} function get_CurrentCultureIgnoreCase: DNStringComparer;
    {class} function get_Ordinal: DNStringComparer;
    {class} function get_OrdinalIgnoreCase: DNStringComparer;

  { static methods } 

    /// <summary>
    ///   创建  对象，该对象根据指定区域性的规则对字符串进行比较。
    /// </summary>
    {class} function Create(culture: DNCultureInfo; ignoreCase: Boolean): DNStringComparer;

  { static propertys } 

    /// <summary>
    ///   获取一个  对象，该对象使用固定区域性的单词比较规则执行区分大小写的字符串比较。
    /// </summary>
    {class} property InvariantCulture: DNStringComparer read get_InvariantCulture;
    /// <summary>
    ///   获取一个  对象，该对象使用固定区域性的单词比较规则执行不区分大小写的字符串比较。
    /// </summary>
    {class} property InvariantCultureIgnoreCase: DNStringComparer read get_InvariantCultureIgnoreCase;
    /// <summary>
    ///   获取一个  对象，该对象使用当前区域性的单词比较规则执行区分大小写的字符串比较。
    /// </summary>
    {class} property CurrentCulture: DNStringComparer read get_CurrentCulture;
    /// <summary>
    ///   获取一个  对象，该对象使用当前区域性的单词比较规则执行不区分大小写的字符串比较。
    /// </summary>
    {class} property CurrentCultureIgnoreCase: DNStringComparer read get_CurrentCultureIgnoreCase;
    /// <summary>
    ///   获取一个  对象，该对象执行区分大小写的序号字符串比较。
    /// </summary>
    {class} property Ordinal: DNStringComparer read get_Ordinal;
    /// <summary>
    ///   获取一个  对象，该对象执行不区分大小写的序号字符串比较。
    /// </summary>
    {class} property OrdinalIgnoreCase: DNStringComparer read get_OrdinalIgnoreCase;
  end;

  /// <summary>
  ///   表示一种字符串比较操作，该操作使用特定的大小写以及基于区域性的比较规则或序号比较规则。
  /// </summary>
  [DNTypeName('System.StringComparer')]
  DNStringComparer = interface(DNObject)
  ['{8EA98C90-180D-39AE-AA70-2AA3D5EBB7AE}']
  { methods } 

    /// <summary>
    ///   当在派生类中重写时，将比较两个对象并返回其相对排序顺序的指示。
    /// </summary>
    function Compare(x: DNObject; y: DNObject): Int32; overload;
    /// <summary>
    ///   当在派生类中重写时，指示两个对象是否相等。
    /// </summary>
    function Equals(x: DNObject; y: DNObject): Boolean; overload;
    /// <summary>
    ///   当在派生类中重写时，将获取指定对象的哈希代码。
    /// </summary>
    function GetHashCode(obj: DNObject): Int32; overload;
    /// <summary>
    ///   当在派生类中重写时，将比较两个字符串并返回其相对排序顺序的指示。
    /// </summary>
    function Compare(x: string; y: string): Int32; overload;
    /// <summary>
    ///   当在派生类中重写时，指示两个字符串是否相等。
    /// </summary>
    function Equals(x: string; y: string): Boolean; overload;
    /// <summary>
    ///   当在派生类中重写时，将获取指定字符串的哈希代码。
    /// </summary>
    function GetHashCode(obj: string): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNStringComparer = class(TDNGenericImport<DNStringComparerClass, DNStringComparer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderClass = interface(DNObjectClass)
  ['{19A3D915-92FE-4686-9983-A55999BC7B82}']
  end;

  /// <summary>
  ///   将已编码字节的序列转换为一组字符。
  /// </summary>
  [DNTypeName('System.Text.Decoder')]
  DNDecoder = interface(DNObject)
  ['{A924269D-5DF2-33AF-B72A-3250C4105EBE}']
  { getter & setter } 

    function get_Fallback: DNDecoderFallback;
    procedure set_Fallback(value: DNDecoderFallback);
    function get_FallbackBuffer: DNDecoderFallbackBuffer;

  { methods } 

    /// <summary>
    ///   当在派生类中重写，会将解码器设置回其初始状态。
    /// </summary>
    procedure Reset;
    /// <summary>
    ///   在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。
    ///               一个参数，该参数指示是否在计算后清除解码器的内部状态。
    /// </summary>
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32; flush: Boolean): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，计算对字节序列（从指定的字节指针开始）进行解码所产生的字符数。
    ///               一个参数，指示是否在计算后清除解码器的内部状态。
    /// </summary>
    function GetCharCount(bytes: PByte; count: Int32; flush: Boolean): Int32; overload;
    /// <summary>
    ///   当在派生类中重写，将解码为指定的字符数组的指定的字节数组中的字节数和内部缓冲区中的任何字节序列。
    ///               一个参数，指示是否在转换后清除解码器的内部状态。
    /// </summary>
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32; flush: Boolean): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   当在派生类中重写，将解码为指定的字符数组的指定的字节数组中的字节数和内部缓冲区中的任何字节序列。
    /// </summary>
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    /// <summary>
    ///   当在派生类中重写的字节序列解码为一组字符，并从指定的字符指针开始存储在指定的字节指针和内部缓冲区中的任何字节开始。
    ///               一个参数，指示是否在转换后清除解码器的内部状态。
    /// </summary>
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32; flush: Boolean): Int32; overload;
    procedure Convert(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32; charCount: Int32; flush: Boolean; out bytesUsed: Int32; out charsUsed: Int32; out completed: Boolean); overload;
    procedure Convert(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32; flush: Boolean; out bytesUsed: Int32; out charsUsed: Int32; out completed: Boolean); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  当前对象  对象。
    /// </summary>
    property Fallback: DNDecoderFallback read get_Fallback write set_Fallback;
    /// <summary>
    ///   获取  关联与当前对象  对象。
    /// </summary>
    property FallbackBuffer: DNDecoderFallbackBuffer read get_FallbackBuffer;
  end;

  TDNDecoder = class(TDNGenericImport<DNDecoderClass, DNDecoder>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackClass = interface(DNObjectClass)
  ['{AE6512B1-AD1B-49A3-96C4-EB99FBF6B6B6}']
  { static getter & setter } 

    {class} function get_ReplacementFallback: DNDecoderFallback;
    {class} function get_ExceptionFallback: DNDecoderFallback;

  { static propertys } 

    /// <summary>
    ///   获取输出用以替换无法解码的输入的字节序列的替代字符串的对象。
    /// </summary>
    {class} property ReplacementFallback: DNDecoderFallback read get_ReplacementFallback;
    /// <summary>
    ///   获取一个对象，不能进行解码的输入的字节序列时将引发异常。
    /// </summary>
    {class} property ExceptionFallback: DNDecoderFallback read get_ExceptionFallback;
  end;

  /// <summary>
  ///   为不能转换为输出字符的已编码输入字节序列提供称为“回退”的失败处理机制。
  /// </summary>
  [DNTypeName('System.Text.DecoderFallback')]
  DNDecoderFallback = interface(DNObject)
  ['{B0D5EBBD-EA60-391F-9EB7-CAA43BA97515}']
  { getter & setter } 

    function get_MaxCharCount: Int32;

  { methods } 

    /// <summary>
    ///   当在派生类中重写的新实例初始化  类。
    /// </summary>
    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   当在派生类中重写时获取最大字符数当前  对象可以返回。
    /// </summary>
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderFallback = class(TDNGenericImport<DNDecoderFallbackClass, DNDecoderFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderExceptionFallbackClass = interface(DNDecoderFallbackClass)
  ['{FAA7CA27-875C-4357-8D88-85B49950E0EA}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDecoderExceptionFallback;

  end;

  /// <summary>
  ///   为不能转换为输入字符的已编码输入字节序列提供失败处理机制（称为“回退”）。
  ///               回退引发异常，而不是解码输入字节序列。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Text.DecoderExceptionFallback')]
  DNDecoderExceptionFallback = interface(DNDecoderFallback)
  ['{973A7390-2608-3943-9015-D798D1217C08}']
  { getter & setter } 

    function get_MaxCharCount: Int32;

  { methods } 

    /// <summary>
    ///   如果不能将一个字节序列转换为字符，返回解码器回退缓冲区，则会引发异常。
    /// </summary>
    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    /// <summary>
    ///   指示是否当前  对象与指定的对象是否相等。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   检索此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此实例可以返回的最大字符数。
    /// </summary>
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderExceptionFallback = class(TDNGenericImport<DNDecoderExceptionFallbackClass, DNDecoderExceptionFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderReplacementFallbackClass = interface(DNDecoderFallbackClass)
  ['{F864B5BF-81AD-41AD-96D9-0B0D04B33009}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDecoderReplacementFallback; overload;
    /// <summary>
    ///   新实例初始化  类使用指定的替换字符串。
    /// </summary>
    {class} function init(replacement: string): DNDecoderReplacementFallback; overload;

  end;

  /// <summary>
  ///   为不能转换为输出字符的已编码输入字节序列提供称为“回退”的失败处理机制。
  ///               回退发出用户指定的替换字符串，而不是已解码的输入字节序列。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Text.DecoderReplacementFallback')]
  DNDecoderReplacementFallback = interface(DNDecoderFallback)
  ['{04FBCBF4-DC23-3CEC-9025-9D4093C26733}']
  { getter & setter } 

    function get_DefaultString: string;
    function get_MaxCharCount: Int32;

  { methods } 

    /// <summary>
    ///   创建  对象使用替换字符串与此初始化  对象。
    /// </summary>
    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    /// <summary>
    ///   指示指定对象的值是否等于  对象。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   检索的值的哈希代码  对象。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的值的替换字符串  对象。
    /// </summary>
    property DefaultString: string read get_DefaultString;
    /// <summary>
    ///   获取的替换字符串中的字符数  对象。
    /// </summary>
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderReplacementFallback = class(TDNGenericImport<DNDecoderReplacementFallbackClass, DNDecoderReplacementFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackBufferClass = interface(DNObjectClass)
  ['{C720BF5A-C81A-4F7D-9F38-3EF70F2DC9B5}']
  end;

  /// <summary>
  ///   提供一个缓冲区，该缓冲区允许回退处理程序在解码器无法对输入字节序列进行解码时将替换字符串返回到该解码器。
  /// </summary>
  [DNTypeName('System.Text.DecoderFallbackBuffer')]
  DNDecoderFallbackBuffer = interface(DNObject)
  ['{9A53C520-4AB6-366C-B86A-DD015C22694E}']
  { getter & setter } 

    function get_Remaining: Int32;

  { methods } 

    /// <summary>
    ///   初始化与此回退缓冲区相关的所有数据和状态信息。
    /// </summary>
    procedure Reset;
    /// <summary>
    ///   当在派生类中重写时将准备回退缓冲区来处理指定的输入的字节序列。
    /// </summary>
    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    /// <summary>
    ///   当在派生类中重写，会检索回退缓冲区中的下一个字符。
    /// </summary>
    function GetNextChar: Char;
    /// <summary>
    ///   当在派生类中重写，将导致在下次调用  方法来访问当前字符位置之前的数据缓冲区字符位置。
    /// </summary>
    function MovePrevious: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   当在派生类中重写时获取的字符数在当前  待处理的对象。
    /// </summary>
    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderFallbackBuffer = class(TDNGenericImport<DNDecoderFallbackBufferClass, DNDecoderFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderExceptionFallbackBufferClass = interface(DNDecoderFallbackBufferClass)
  ['{636005AC-FD63-4A25-B763-9AD51C2EB04E}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNDecoderExceptionFallbackBuffer;

  end;

  /// <summary>
  ///   引发  时已编码输入的字节序列无法转换为解码后的输出字符。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Text.DecoderExceptionFallbackBuffer')]
  DNDecoderExceptionFallbackBuffer = interface(DNDecoderFallbackBuffer)
  ['{8E8F1601-AE98-3DAC-B48B-EC27C95A481E}']
  { getter & setter } 

    function get_Remaining: Int32;

  { methods } 

    /// <summary>
    ///   引发  当不能解码输入的字节序列。
    ///               不使用名义返回值。
    /// </summary>
    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    /// <summary>
    ///   检索异常数据缓冲区中的下一个字符。
    /// </summary>
    function GetNextChar: Char;
    /// <summary>
    ///   对下一个调用将导致  若要访问在当前位置之前的异常数据缓冲区字符位置。
    /// </summary>
    function MovePrevious: Boolean;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取在当前的字符数  待处理的对象。
    /// </summary>
    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderExceptionFallbackBuffer = class(TDNGenericImport<DNDecoderExceptionFallbackBufferClass, DNDecoderExceptionFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderReplacementFallbackBufferClass = interface(DNDecoderFallbackBufferClass)
  ['{2EE5B6BF-EB19-4BED-AE44-AF43A901923E}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用的值  对象。
    /// </summary>
    {class} function init(fallback: DNDecoderReplacementFallback): DNDecoderReplacementFallbackBuffer;

  end;

  /// <summary>
  ///   表示当原始的输入的字节序列不能进行解码时发出一个替代输出字符串。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Text.DecoderReplacementFallbackBuffer')]
  DNDecoderReplacementFallbackBuffer = interface(DNDecoderFallbackBuffer)
  ['{4DEAA859-53A2-318E-A981-7B931FB1ACA1}']
  { getter & setter } 

    function get_Remaining: Int32;

  { methods } 

    /// <summary>
    ///   准备要使用当前的替换字符串替换回退缓冲区。
    /// </summary>
    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    /// <summary>
    ///   检索替换回退缓冲区中的下一个字符。
    /// </summary>
    function GetNextChar: Char;
    /// <summary>
    ///   对下一个调用将导致  访问之前的当前字符位置的替换回退缓冲区中的字符位置。
    /// </summary>
    function MovePrevious: Boolean;
    /// <summary>
    ///   所有内部状态信息和中的数据来初始化  对象。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取待处理的替换回退缓冲区中的字符数。
    /// </summary>
    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderReplacementFallbackBuffer = class(TDNGenericImport<DNDecoderReplacementFallbackBufferClass, DNDecoderReplacementFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderClass = interface(DNObjectClass)
  ['{F558440A-ED9E-4C86-A3B0-E1A4DB2798A4}']
  end;

  /// <summary>
  ///   将一组字符转换为一个字节序列。
  /// </summary>
  [DNTypeName('System.Text.Encoder')]
  DNEncoder = interface(DNObject)
  ['{CC9D4538-57E8-3A82-886A-5FE65A127A5A}']
  { getter & setter } 

    function get_Fallback: DNEncoderFallback;
    procedure set_Fallback(value: DNEncoderFallback);
    function get_FallbackBuffer: DNEncoderFallbackBuffer;

  { methods } 

    /// <summary>
    ///   当在派生类中重写，会将编码器设置回其初始状态。
    /// </summary>
    procedure Reset;
    /// <summary>
    ///   在派生类中重写时，计算对一组字符（从指定的字符指针处开始）进行编码所产生的字节数。
    ///               一个参数，指示是否在计算后清除编码器的内部状态。
    /// </summary>
    function GetByteCount(chars: PChar; count: Int32; flush: Boolean): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。
    ///               一个参数，指示是否在计算后清除编码器的内部状态。
    /// </summary>
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32; flush: Boolean): Int32; overload;
    /// <summary>
    ///   当在派生类中重写，将一组指定的字符数组中的字符和内部缓冲区中的所有字符编码到指定的字节数组。
    ///               一个参数，指示是否在转换后清除编码器的内部状态。
    /// </summary>
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32; flush: Boolean): Int32; overload;
    /// <summary>
    ///   当在派生类中重写，将编码为一个序列的并从指定的字节指针开始存储的字节数指定的字符指针以及内部缓冲区中的任何字符开头的字符的一组。
    ///               一个参数，指示是否在转换后清除编码器的内部状态。
    /// </summary>
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32; flush: Boolean): Int32; overload;
    procedure Convert(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; flush: Boolean; out charsUsed: Int32; out bytesUsed: Int32; out completed: Boolean); overload;
    procedure Convert(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32; flush: Boolean; out charsUsed: Int32; out bytesUsed: Int32; out completed: Boolean); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  当前对象  对象。
    /// </summary>
    property Fallback: DNEncoderFallback read get_Fallback write set_Fallback;
    /// <summary>
    ///   获取  关联与当前对象  对象。
    /// </summary>
    property FallbackBuffer: DNEncoderFallbackBuffer read get_FallbackBuffer;
  end;

  TDNEncoder = class(TDNGenericImport<DNEncoderClass, DNEncoder>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackClass = interface(DNObjectClass)
  ['{35D3A097-A4D7-4B53-952F-5A908BDCCA8D}']
  { static getter & setter } 

    {class} function get_ReplacementFallback: DNEncoderFallback;
    {class} function get_ExceptionFallback: DNEncoderFallback;

  { static propertys } 

    /// <summary>
    ///   获取输出替换无法编码的输入字符的替代字符串的对象。
    /// </summary>
    {class} property ReplacementFallback: DNEncoderFallback read get_ReplacementFallback;
    /// <summary>
    ///   获取一个对象，无法编码的输入的字符时，将引发异常。
    /// </summary>
    {class} property ExceptionFallback: DNEncoderFallback read get_ExceptionFallback;
  end;

  /// <summary>
  ///   提供不能转换为编码的输出字节序列的输入字符称为回退的失败处理机制。
  /// </summary>
  [DNTypeName('System.Text.EncoderFallback')]
  DNEncoderFallback = interface(DNObject)
  ['{AA6C2003-FEDD-384C-B8F2-F59E0F3B3855}']
  { getter & setter } 

    function get_MaxCharCount: Int32;

  { methods } 

    /// <summary>
    ///   当在派生类中重写的新实例初始化  类。
    /// </summary>
    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   当在派生类中重写时获取最大字符数当前  对象可以返回。
    /// </summary>
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderFallback = class(TDNGenericImport<DNEncoderFallbackClass, DNEncoderFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderExceptionFallbackClass = interface(DNEncoderFallbackClass)
  ['{42941914-CFCE-4011-B5AA-5BE726709F87}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEncoderExceptionFallback;

  end;

  /// <summary>
  ///   为不能转换为输出字节序列的输入字符提供一个称为“回退”的失败处理机制。
  ///               如果输入字符无法转换为输出字节序列，则回退引发异常。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Text.EncoderExceptionFallback')]
  DNEncoderExceptionFallback = interface(DNEncoderFallback)
  ['{56198675-BD59-3B10-8346-583781462CEF}']
  { getter & setter } 

    function get_MaxCharCount: Int32;

  { methods } 

    /// <summary>
    ///   返回编码器回退缓冲区，如果无法将字符序列转换为字节序列，则该缓冲区引发异常。
    /// </summary>
    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    /// <summary>
    ///   指示是否当前  对象与指定的对象是否相等。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   检索此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此实例可以返回的最大字符数。
    /// </summary>
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderExceptionFallback = class(TDNGenericImport<DNEncoderExceptionFallbackClass, DNEncoderExceptionFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderReplacementFallbackClass = interface(DNEncoderFallbackClass)
  ['{BD8BB9F7-83D7-4B22-A047-990D469F0967}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEncoderReplacementFallback; overload;
    /// <summary>
    ///   新实例初始化  类使用指定的替换字符串。
    /// </summary>
    {class} function init(replacement: string): DNEncoderReplacementFallback; overload;

  end;

  /// <summary>
  ///   为不能转换为输出字节序列的输入字符提供一个称为“回退”的失败处理机制。
  ///               此回退使用由用户指定的替换字符串来代替原始的输入字符。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Text.EncoderReplacementFallback')]
  DNEncoderReplacementFallback = interface(DNEncoderFallback)
  ['{D4692569-5A04-351D-8BA7-5F43AB458DF6}']
  { getter & setter } 

    function get_DefaultString: string;
    function get_MaxCharCount: Int32;

  { methods } 

    /// <summary>
    ///   创建  对象使用替换字符串与此初始化  对象。
    /// </summary>
    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    /// <summary>
    ///   指示指定对象的值是否等于  对象。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   检索的值的哈希代码  对象。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取的值的替换字符串  对象。
    /// </summary>
    property DefaultString: string read get_DefaultString;
    /// <summary>
    ///   获取的替换字符串中的字符数  对象。
    /// </summary>
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderReplacementFallback = class(TDNGenericImport<DNEncoderReplacementFallbackClass, DNEncoderReplacementFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackBufferClass = interface(DNObjectClass)
  ['{61A65DF5-EADC-4642-ADC9-8FF6272D85EE}']
  end;

  /// <summary>
  ///   提供一个缓冲区，该缓冲区允许回退处理程序在编码器无法对输入字符进行编码时将替换字符串返回到该编码器。
  /// </summary>
  [DNTypeName('System.Text.EncoderFallbackBuffer')]
  DNEncoderFallbackBuffer = interface(DNObject)
  ['{3453AFBC-BF44-3C7C-B4ED-C8AE89DF8BAB}']
  { getter & setter } 

    function get_Remaining: Int32;

  { methods } 

    /// <summary>
    ///   初始化与此回退缓冲区相关的所有数据和状态信息。
    /// </summary>
    procedure Reset;
    /// <summary>
    ///   当在派生类中重写时将准备回退缓冲区来处理指定的输入的字符。
    /// </summary>
    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    /// <summary>
    ///   当在派生类中重写时将准备回退缓冲区来处理指定的代理项对。
    /// </summary>
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    /// <summary>
    ///   当在派生类中重写，会检索回退缓冲区中的下一个字符。
    /// </summary>
    function GetNextChar: Char;
    /// <summary>
    ///   当在派生类中重写，将导致在下次调用  方法来访问当前字符位置之前的数据缓冲区字符位置。
    /// </summary>
    function MovePrevious: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   当在派生类中重写时获取的字符数在当前  待处理的对象。
    /// </summary>
    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderFallbackBuffer = class(TDNGenericImport<DNEncoderFallbackBufferClass, DNEncoderFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderExceptionFallbackBufferClass = interface(DNEncoderFallbackBufferClass)
  ['{6A88F4D0-C84C-485F-889F-D4B912BE7C75}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEncoderExceptionFallbackBuffer;

  end;

  /// <summary>
  ///   引发  时的输入的字符无法转换为编码的输出字节序列。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Text.EncoderExceptionFallbackBuffer')]
  DNEncoderExceptionFallbackBuffer = interface(DNEncoderFallbackBuffer)
  ['{81BD8EE8-F713-36A5-B7D5-9E92ACB4A18A}']
  { getter & setter } 

    function get_Remaining: Int32;

  { methods } 

    /// <summary>
    ///   引发异常，原因是无法输入的字符进行编码。
    ///               参数指定的字符不能转换的值和索引位置。
    /// </summary>
    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    /// <summary>
    ///   引发异常，原因是无法输入的字符进行编码。
    ///               参数指定的代理项对的值和索引位置中输入，以及未使用的标称的返回值。
    /// </summary>
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    /// <summary>
    ///   检索异常回退缓冲区中的下一个字符。
    /// </summary>
    function GetNextChar: Char;
    /// <summary>
    ///   对下一个调用将导致  方法来访问在当前位置之前的异常数据缓冲区字符位置。
    /// </summary>
    function MovePrevious: Boolean;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取在当前的字符数  待处理的对象。
    /// </summary>
    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderExceptionFallbackBuffer = class(TDNGenericImport<DNEncoderExceptionFallbackBufferClass, DNEncoderExceptionFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderReplacementFallbackBufferClass = interface(DNEncoderFallbackBufferClass)
  ['{3CF010DD-D9CD-42EF-8A6B-55E43E6CCEAE}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用的值  对象。
    /// </summary>
    {class} function init(fallback: DNEncoderReplacementFallback): DNEncoderReplacementFallbackBuffer;

  end;

  /// <summary>
  ///   表示原始的输入的字符无法进行编码时使用的替代输入的字符串。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Text.EncoderReplacementFallbackBuffer')]
  DNEncoderReplacementFallbackBuffer = interface(DNEncoderFallbackBuffer)
  ['{64EDFA29-AA4C-395B-B9EE-8281D0C00C67}']
  { getter & setter } 

    function get_Remaining: Int32;

  { methods } 

    /// <summary>
    ///   准备要使用当前的替换字符串替换回退缓冲区。
    /// </summary>
    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    /// <summary>
    ///   指示当输入代理项对不能进行编码，或者是否可以忽略该代理项对是否可以使用替换字符串。
    ///               参数指定输入中的代理项对和对的索引位置。
    /// </summary>
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    /// <summary>
    ///   检索替换回退缓冲区中的下一个字符。
    /// </summary>
    function GetNextChar: Char;
    /// <summary>
    ///   对下一个调用将导致  方法来访问之前的当前字符位置的替换回退缓冲区中的字符位置。
    /// </summary>
    function MovePrevious: Boolean;
    /// <summary>
    ///   所有内部状态信息和数据的此实例中初始化 。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取待处理的替换回退缓冲区中的字符数。
    /// </summary>
    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderReplacementFallbackBuffer = class(TDNGenericImport<DNEncoderReplacementFallbackBufferClass, DNEncoderReplacementFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncodingClass = interface(DNObjectClass)
  ['{EEE8F798-773A-4116-A3E4-B293825A8519}']
  { static getter & setter } 

    {class} function get_ASCII: DNEncoding;
    {class} function get_Default: DNEncoding;
    {class} function get_Unicode: DNEncoding;
    {class} function get_BigEndianUnicode: DNEncoding;
    {class} function get_UTF7: DNEncoding;
    {class} function get_UTF8: DNEncoding;
    {class} function get_UTF32: DNEncoding;

  { static methods } 

    /// <summary>
    ///   将整个字节数组从一种编码转换为另一种编码。
    /// </summary>
    {class} function Convert(srcEncoding: DNEncoding; dstEncoding: DNEncoding; bytes: TArray<Byte>): TArray<Byte>; overload;
    /// <summary>
    ///   注册编码提供程序。
    /// </summary>
    {class} procedure RegisterProvider(provider: DNEncodingProvider);
    /// <summary>
    ///   返回与指定代码页标识符关联的编码。
    /// </summary>
    {class} function GetEncoding(codepage: Int32): DNEncoding; overload;
    /// <summary>
    ///   返回与指定代码页标识符关联的编码。
    ///               参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。
    /// </summary>
    {class} function GetEncoding(codepage: Int32; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    /// <summary>
    ///   返回与指定代码页名称关联的编码。
    /// </summary>
    {class} function GetEncoding(name: string): DNEncoding; overload;
    /// <summary>
    ///   返回与指定代码页名称关联的编码。
    ///               参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。
    /// </summary>
    {class} function GetEncoding(name: string; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    /// <summary>
    ///   返回包含所有编码的数组。
    /// </summary>
    {class} function GetEncodings: TArray<DNEncodingInfo>;
    /// <summary>
    ///   将字节数组内某个范围的字节从一种编码转换为另一种编码。
    /// </summary>
    {class} function Convert(srcEncoding: DNEncoding; dstEncoding: DNEncoding; bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Byte>; overload;

  { static propertys } 

    /// <summary>
    ///   获取 ASCII（7 位）字符集的编码。
    /// </summary>
    {class} property ASCII: DNEncoding read get_ASCII;
    /// <summary>
    ///   获取操作系统的当前 ANSI 代码页的编码。
    /// </summary>
    {class} property &Default: DNEncoding read get_Default;
    /// <summary>
    ///   获取使用 Little-Endian 字节顺序的 UTF-16 格式的编码。
    /// </summary>
    {class} property Unicode: DNEncoding read get_Unicode;
    /// <summary>
    ///   获取使用 Big Endian 字节顺序的 UTF-16 格式的编码。
    /// </summary>
    {class} property BigEndianUnicode: DNEncoding read get_BigEndianUnicode;
    /// <summary>
    ///   获取 UTF-7 格式的编码。
    /// </summary>
    {class} property UTF7: DNEncoding read get_UTF7;
    /// <summary>
    ///   获取 UTF-8 格式的编码。
    /// </summary>
    {class} property UTF8: DNEncoding read get_UTF8;
    /// <summary>
    ///   获取使用 Little-Endian 字节顺序的 UTF-32 格式的编码。
    /// </summary>
    {class} property UTF32: DNEncoding read get_UTF32;
  end;

  /// <summary>
  ///   表示字符编码。
  ///            
  ///              若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
  /// </summary>
  [DNTypeName('System.Text.Encoding')]
  DNEncoding = interface(DNObject)
  ['{EAECC459-5CE4-35A2-A085-5AFC0451C03A}']
  { getter & setter } 

    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    /// <summary>
    ///   在派生类中重写时，返回指定所用编码的字节序列。
    /// </summary>
    function GetPreamble: TArray<Byte>;
    /// <summary>
    ///   当在派生类中重写时，创建当前  对象的一个卷影副本。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   在派生类中重写时，计算对指定字符数组中的所有字符进行编码所产生的字节数。
    /// </summary>
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，计算对指定字符串中的字符进行编码所产生的字节数。
    /// </summary>
    function GetByteCount(s: string): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，计算对一组字符（从指定的字符指针处开始）进行编码所产生的字节数。
    /// </summary>
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，将指定字符数组中的所有字符编码为一个字节序列。
    /// </summary>
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    /// <summary>
    ///   在派生类中重写时，将指定字符数组中的一组字符编码为一个字节序列。
    /// </summary>
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    /// <summary>
    ///   在派生类中重写时，将指定字符串中的所有字符编码为一个字节序列。
    /// </summary>
    function GetBytes(s: string): TArray<Byte>; overload;
    /// <summary>
    ///   在派生类中重写时，将指定字符串中的一组字符编码为指定的字节数组。
    /// </summary>
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，计算对指定字节数组中的所有字节进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，计算对字节序列（从指定的字节指针开始）进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，将指定字节数组中的所有字节解码为一组字符。
    /// </summary>
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    /// <summary>
    ///   在派生类中重写时，将指定字节数组中的一个字节序列解码为一组字符。
    /// </summary>
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    /// <summary>
    ///   在派生类中重写时，将在指定地址开始的指定字节数解码为字符串。
    /// </summary>
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    /// <summary>
    ///   使用默认范式获取一个值，该值指示当前编码是否始终被规范化。
    /// </summary>
    function IsAlwaysNormalized: Boolean; overload;
    /// <summary>
    ///   在派生类中重写时，使用指定范式获取一个值，该值指示当前编码是否始终被规范化。
    /// </summary>
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    /// <summary>
    ///   在派生类中重写时，获取一个解码器，该解码器将已编码的字节序列转换为字符序列。
    /// </summary>
    function GetDecoder: DNDecoder;
    /// <summary>
    ///   在派生类中重写时，获取一个解码器，该解码器将 Unicode 字符序列转换为已编码的字节序列。
    /// </summary>
    function GetEncoder: DNEncoder;
    /// <summary>
    ///   在派生类中重写时，将指定字节数组中的所有字节解码为一个字符串。
    /// </summary>
    function GetString(bytes: TArray<Byte>): string; overload;
    /// <summary>
    ///   在派生类中重写时，将指定字节数组中的一个字节序列解码为一个字符串。
    /// </summary>
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    /// <summary>
    ///   确定指定的  是否等同于当前实例。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   返回当前实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。
    /// </summary>
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，将指定字符数组中的一组字符编码为指定的字节数组。
    /// </summary>
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，将一组字符（从指定的字符指针开始）编码为一个字节序列，并从指定的字节指针开始存储该字节序列。
    /// </summary>
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，将指定字节数组中的字节序列解码为指定的字符数组。
    /// </summary>
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，将一个字节序列（从指定的字节指针开始）解码为一组字符，并从指定的字符指针开始存储该组字符。
    /// </summary>
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    /// <summary>
    ///   在派生类中重写时，计算对指定数目的字符进行编码所产生的最大字节数。
    /// </summary>
    function GetMaxByteCount(charCount: Int32): Int32;
    /// <summary>
    ///   在派生类中重写时，计算对指定数目的字节进行解码时所产生的最大字符数。
    /// </summary>
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   在派生类中重写时，获取可与邮件代理正文标记一起使用的当前编码的名称。
    /// </summary>
    property BodyName: string read get_BodyName;
    /// <summary>
    ///   在派生类中重写时，获取当前编码的用户可读说明。
    /// </summary>
    property EncodingName: string read get_EncodingName;
    /// <summary>
    ///   在派生类中重写时，获取可与邮件代理头标记一起使用的当前编码的名称。
    /// </summary>
    property HeaderName: string read get_HeaderName;
    /// <summary>
    ///   在派生类中重写时，获取在 Internet 编号分配管理机构 (IANA) 注册的当前编码的名称。
    /// </summary>
    property WebName: string read get_WebName;
    /// <summary>
    ///   在派生类中重写时，获取与当前编码最紧密对应的 Windows 操作系统代码页。
    /// </summary>
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    /// <summary>
    ///   在派生类中重写时，获取一个值，该值指示浏览器客户端是否可以使用当前的编码显示内容。
    /// </summary>
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    /// <summary>
    ///   在派生类中重写时，获取一个值，该值指示浏览器客户端是否可以使用当前的编码保存内容。
    /// </summary>
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    /// <summary>
    ///   在派生类中重写时，获取一个值，该值指示邮件和新闻客户端是否可以使用当前的编码显示内容。
    /// </summary>
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    /// <summary>
    ///   在派生类中重写时，获取一个值，该值指示邮件和新闻客户端是否可以使用当前的编码保存内容。
    /// </summary>
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    /// <summary>
    ///   在派生类中重写时，获取一个值，该值指示当前的编码是否使用单字节码位。
    /// </summary>
    property IsSingleByte: Boolean read get_IsSingleByte;
    /// <summary>
    ///   获取或设置当前  对象的  对象。
    /// </summary>
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    /// <summary>
    ///   获取或设置当前  对象的  对象。
    /// </summary>
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    /// <summary>
    ///   在派生类中重写时，获取一个值，该值指示当前的编码是否为只读。
    /// </summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    /// <summary>
    ///   在派生类中重写时，获取当前  的代码页标识符。
    /// </summary>
    property CodePage: Int32 read get_CodePage;
  end;

  TDNEncoding = class(TDNGenericImport<DNEncodingClass, DNEncoding>) end;

  //-------------namespace: System.Text----------------
  DNASCIIEncodingClass = interface(DNEncodingClass)
  ['{090EB92B-A5DB-49D7-B1A3-92F2EF13DFA3}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNASCIIEncoding;

  end;

  /// <summary>
  ///   表示 Unicode 字符的 ASCII 字符编码。
  /// </summary>
  [DNTypeName('System.Text.ASCIIEncoding')]
  DNASCIIEncoding = interface(DNEncoding)
  ['{9E28EF95-9C6F-3A00-B525-36A76178CC9C}']
  { getter & setter } 

    function get_IsSingleByte: Boolean;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    /// <summary>
    ///   计算对指定  中的字符进行编码时所产生的字节数。
    /// </summary>
    function GetByteCount(chars: string): Int32; overload;
    /// <summary>
    ///   计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    /// <summary>
    ///   计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    /// <summary>
    ///   计算对指定数目的字符进行编码时产生的最大字节数。
    /// </summary>
    function GetMaxByteCount(charCount: Int32): Int32;
    /// <summary>
    ///   计算对指定数目的字节进行解码时产生的最大字符数。
    /// </summary>
    function GetMaxCharCount(byteCount: Int32): Int32;
    /// <summary>
    ///   获取可以将 ASCII 编码字节序列的转换的 Unicode 字符序列的解码器。
    /// </summary>
    function GetDecoder: DNDecoder;
    /// <summary>
    ///   获取可将 Unicode 字符序列转换为 ASCII 编码字节序列的编码器。
    /// </summary>
    function GetEncoder: DNEncoder;
    /// <summary>
    ///   计算对指定字符数组中的一组字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将指定  中的一组字符编码到指定的字节数组中。
    /// </summary>
    function GetBytes(chars: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   将指定字符数组中的一组字符编码到指定的字节数组中。
    /// </summary>
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。
    /// </summary>
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    /// <summary>
    ///   计算对指定字节数组中的一个字节序列进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将指定字节数组中的一个字节序列解码为指定的字符数组。
    /// </summary>
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    /// <summary>
    ///   将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。
    /// </summary>
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    /// <summary>
    ///   将字节数组中某个范围的字节解码为一个字符串。
    /// </summary>
    function GetString(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32): string; overload;
    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示当前编码是否使用单字节码位。
    /// </summary>
    property IsSingleByte: Boolean read get_IsSingleByte;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNASCIIEncoding = class(TDNGenericImport<DNASCIIEncodingClass, DNASCIIEncoding>) end;

  //-------------namespace: System.Text----------------
  DNUnicodeEncodingClass = interface(DNEncodingClass)
  ['{4091C297-8182-41F2-BA36-947E96584BE6}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNUnicodeEncoding; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               参数指定是否使用 Big-Endian 字节顺序以及  方法是否返回 Unicode 字节顺序标记。
    /// </summary>
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean): DNUnicodeEncoding; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               参数指定是否使用 Big-Endian 字节顺序、是否提供 Unicode 字节顺序标记以及当检测到无效编码时是否引发异常。
    /// </summary>
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean; throwOnInvalidBytes: Boolean): DNUnicodeEncoding; overload;

  end;

  /// <summary>
  ///   表示 Unicode 字符的 UTF-16 编码。
  /// </summary>
  [DNTypeName('System.Text.UnicodeEncoding')]
  DNUnicodeEncoding = interface(DNEncoding)
  ['{A0F5F5DC-337B-38D7-B1A3-FB1B95666BBF}']
  { getter & setter } 

    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    /// <summary>
    ///   计算对指定字符串中的字符进行编码时所产生的字节数。
    /// </summary>
    function GetByteCount(s: string): Int32; overload;
    /// <summary>
    ///   计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    /// <summary>
    ///   计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    /// <summary>
    ///   获取可将 Unicode 字符序列转换为 UTF-16 编码的字节序列的编码器。
    /// </summary>
    function GetEncoder: DNEncoder;
    /// <summary>
    ///   获取可以将 UTF-16 编码的字节序列转换为 Unicode 字符序列的解码器。
    /// </summary>
    function GetDecoder: DNDecoder;
    /// <summary>
    ///   如果此实例的构造函数请求一个字节顺序标记，则将返回用 UTF-16 格式编码的 Unicode 字节顺序标记。
    /// </summary>
    function GetPreamble: TArray<Byte>;
    /// <summary>
    ///   计算对指定数目的字符进行编码时产生的最大字节数。
    /// </summary>
    function GetMaxByteCount(charCount: Int32): Int32;
    /// <summary>
    ///   计算对指定数目的字节进行解码时产生的最大字符数。
    /// </summary>
    function GetMaxCharCount(byteCount: Int32): Int32;
    /// <summary>
    ///   确定指定的  是否等于当前的  对象。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   返回当前实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   计算对指定字符数组中的一组字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将指定  中的一组字符编码到指定的字节数组中。
    /// </summary>
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   将指定字符数组中的一组字符编码到指定的字节数组中。
    /// </summary>
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。
    /// </summary>
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    /// <summary>
    ///   计算对指定字节数组中的一个字节序列进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将指定字节数组中的一个字节序列解码为指定的字符数组。
    /// </summary>
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    /// <summary>
    ///   将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。
    /// </summary>
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    /// <summary>
    ///   将字节数组中某个范围的字节解码为一个字符串。
    /// </summary>
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUnicodeEncoding = class(TDNGenericImport<DNUnicodeEncodingClass, DNUnicodeEncoding>) end;

  //-------------namespace: System.Text----------------
  DNUTF32EncodingClass = interface(DNEncodingClass)
  ['{7D34A82D-B237-42D8-90EC-55BDA0496A54}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNUTF32Encoding; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               参数指定是否使用 Big-Endian 字节顺序以及  方法是否返回 Unicode Unicode 字节顺序标记。
    /// </summary>
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean): DNUTF32Encoding; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               参数指定是否使用 Big-Endian 字节顺序、是否提供 Unicode 字节顺序标记以及当检测到无效编码时是否引发异常。
    /// </summary>
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean; throwOnInvalidCharacters: Boolean): DNUTF32Encoding; overload;

  end;

  /// <summary>
  ///   表示 Unicode 字符的 UTF-32 编码。
  /// </summary>
  [DNTypeName('System.Text.UTF32Encoding')]
  DNUTF32Encoding = interface(DNEncoding)
  ['{AE62C05D-0A02-30E7-9B51-E9D4DD157207}']
  { getter & setter } 

    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    /// <summary>
    ///   计算对指定  中的字符进行编码时所产生的字节数。
    /// </summary>
    function GetByteCount(s: string): Int32; overload;
    /// <summary>
    ///   计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    /// <summary>
    ///   计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    /// <summary>
    ///   获取可以将 UTF-32 编码的字节序列转换为 Unicode 字符序列的解码器。
    /// </summary>
    function GetDecoder: DNDecoder;
    /// <summary>
    ///   获取可将 Unicode 字符序列转换为 UTF-32 编码的字节序列的编码器。
    /// </summary>
    function GetEncoder: DNEncoder;
    /// <summary>
    ///   计算对指定数目的字符进行编码时产生的最大字节数。
    /// </summary>
    function GetMaxByteCount(charCount: Int32): Int32;
    /// <summary>
    ///   计算对指定数目的字节进行解码时产生的最大字符数。
    /// </summary>
    function GetMaxCharCount(byteCount: Int32): Int32;
    /// <summary>
    ///   返回采用 UTF-32 格式编码的 Unicode 字节顺序标记（如果  对象配置为提供一个这样的标记）。
    /// </summary>
    function GetPreamble: TArray<Byte>;
    /// <summary>
    ///   确定指定的  是否等于当前的  对象。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   返回当前实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   计算对指定字符数组中的一组字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将指定  中的一组字符编码到指定的字节数组中。
    /// </summary>
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   将指定字符数组中的一组字符编码到指定的字节数组中。
    /// </summary>
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。
    /// </summary>
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    /// <summary>
    ///   计算对指定字节数组中的一个字节序列进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将指定字节数组中的一个字节序列解码为指定的字符数组。
    /// </summary>
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    /// <summary>
    ///   将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。
    /// </summary>
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    /// <summary>
    ///   将字节数组中某个范围的字节解码为一个字符串。
    /// </summary>
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF32Encoding = class(TDNGenericImport<DNUTF32EncodingClass, DNUTF32Encoding>) end;

  //-------------namespace: System.Text----------------
  DNUTF7EncodingClass = interface(DNEncodingClass)
  ['{66FB135E-AED5-4620-88B8-225B75AEFB05}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNUTF7Encoding; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               参数指定是否允许可选字符。
    /// </summary>
    {class} function init(allowOptionals: Boolean): DNUTF7Encoding; overload;

  end;

  /// <summary>
  ///   表示 Unicode 字符的 UTF-7 编码。
  /// </summary>
  [DNTypeName('System.Text.UTF7Encoding')]
  DNUTF7Encoding = interface(DNEncoding)
  ['{3C9DCA8B-4410-3143-B801-559553EB6725}']
  { getter & setter } 

    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    /// <summary>
    ///   获取一个值，该值指示指定的对象是否等于当前  对象。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   返回当前哈希代码  对象。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   计算对指定  对象中的字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(s: string): Int32; overload;
    /// <summary>
    ///   计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    /// <summary>
    ///   计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    /// <summary>
    ///   获取 utf-7 编码的字节序列转换为 Unicode 字符序列的解码器。
    /// </summary>
    function GetDecoder: DNDecoder;
    /// <summary>
    ///   获取可将 Unicode 字符序列转换为 utf-7 编码字节序列的编码器。
    /// </summary>
    function GetEncoder: DNEncoder;
    /// <summary>
    ///   计算对指定数目的字符进行编码时产生的最大字节数。
    /// </summary>
    function GetMaxByteCount(charCount: Int32): Int32;
    /// <summary>
    ///   计算对指定数目的字节进行解码时产生的最大字符数。
    /// </summary>
    function GetMaxCharCount(byteCount: Int32): Int32;
    /// <summary>
    ///   计算对指定字符数组中的一组字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将指定  中的一组字符编码到指定的字节数组中。
    /// </summary>
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   将指定字符数组中的一组字符编码到指定的字节数组中。
    /// </summary>
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。
    /// </summary>
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    /// <summary>
    ///   计算对指定字节数组中的一个字节序列进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将指定字节数组中的一个字节序列解码为指定的字符数组。
    /// </summary>
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    /// <summary>
    ///   将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。
    /// </summary>
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    /// <summary>
    ///   将字节数组中某个范围的字节解码为一个字符串。
    /// </summary>
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF7Encoding = class(TDNGenericImport<DNUTF7EncodingClass, DNUTF7Encoding>) end;

  //-------------namespace: System.Text----------------
  DNUTF8EncodingClass = interface(DNEncodingClass)
  ['{2F237627-7464-4E47-A226-0053B11060A8}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNUTF8Encoding; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               参数指定是否提供一个 Unicode 字节顺序标记。
    /// </summary>
    {class} function init(encoderShouldEmitUTF8Identifier: Boolean): DNUTF8Encoding; overload;
    /// <summary>
    ///   初始化  类的新实例。
    ///               参数指定是否提供 Unicode 字节顺序标记，以及是否在检测到无效的编码时引发异常。
    /// </summary>
    {class} function init(encoderShouldEmitUTF8Identifier: Boolean; throwOnInvalidBytes: Boolean): DNUTF8Encoding; overload;

  end;

  /// <summary>
  ///   表示 Unicode 字符的 UTF-8 编码。
  /// </summary>
  [DNTypeName('System.Text.UTF8Encoding')]
  DNUTF8Encoding = interface(DNEncoding)
  ['{8C40D44A-4EDE-3760-9B61-50255056D3C7}']
  { getter & setter } 

    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    /// <summary>
    ///   计算对指定  中的字符进行编码时所产生的字节数。
    /// </summary>
    function GetByteCount(chars: string): Int32; overload;
    /// <summary>
    ///   计算对从指定的字符指针开始的一组字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    /// <summary>
    ///   计算对一个字节序列（从指定的字节指针开始）进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    /// <summary>
    ///   获取可以将 UTF-8 编码的字节序列转换为 Unicode 字符序列的解码器。
    /// </summary>
    function GetDecoder: DNDecoder;
    /// <summary>
    ///   获取可将 Unicode 字符序列转换为 UTF-8 编码的字节序列的编码器。
    /// </summary>
    function GetEncoder: DNEncoder;
    /// <summary>
    ///   计算对指定数目的字符进行编码时产生的最大字节数。
    /// </summary>
    function GetMaxByteCount(charCount: Int32): Int32;
    /// <summary>
    ///   计算对指定数目的字节进行解码时产生的最大字符数。
    /// </summary>
    function GetMaxCharCount(byteCount: Int32): Int32;
    /// <summary>
    ///   返回一个采用 UTF-8 格式编码的 Unicode 字节顺序标记（如果  编码对象配置为提供一个这样的标记）。
    /// </summary>
    function GetPreamble: TArray<Byte>;
    /// <summary>
    ///   确定指定的对象是否等于当前  对象。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   返回当前实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   计算对指定字符数组中的一组字符进行编码时产生的字节数。
    /// </summary>
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将指定  中的一组字符编码到指定的字节数组中。
    /// </summary>
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   将指定字符数组中的一组字符编码到指定的字节数组中。
    /// </summary>
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    /// <summary>
    ///   将从指定的字符指针开始的一组字符编码为一个字节序列，并从指定的字节指针开始存储该字节序列。
    /// </summary>
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    /// <summary>
    ///   计算对指定字节数组中的一个字节序列进行解码所产生的字符数。
    /// </summary>
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    /// <summary>
    ///   将指定字节数组中的一个字节序列解码为指定的字符数组。
    /// </summary>
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    /// <summary>
    ///   将从指定的字节指针开始的一个字节序列解码为一组字符，并从指定的字符指针开始存储这组字符。
    /// </summary>
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    /// <summary>
    ///   将字节数组中某个范围的字节解码为一个字符串。
    /// </summary>
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF8Encoding = class(TDNGenericImport<DNUTF8EncodingClass, DNUTF8Encoding>) end;

  //-------------namespace: System.Text----------------
  DNEncodingInfoClass = interface(DNObjectClass)
  ['{964C4320-C902-4521-9FBB-19A2880DF5B4}']
  end;

  /// <summary>
  ///   提供有关编码的基本信息。
  /// </summary>
  [DNTypeName('System.Text.EncodingInfo')]
  DNEncodingInfo = interface(DNObject)
  ['{FF5F02A3-703A-33FE-A1DD-D720DC31D163}']
  { getter & setter } 

    function get_CodePage: Int32;
    function get_Name: string;
    function get_DisplayName: string;

  { methods } 

    /// <summary>
    ///   返回  对象，它对应于当前  对象。
    /// </summary>
    function GetEncoding: DNEncoding;
    /// <summary>
    ///   获取一个值，该值指示指定的对象是否等于当前  对象。
    /// </summary>
    function Equals(value: DNObject): Boolean;
    /// <summary>
    ///   返回当前哈希代码  对象。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取编码的代码页标识符。
    /// </summary>
    property CodePage: Int32 read get_CodePage;
    /// <summary>
    ///   获取与 Internet 分配号机构 (IANA) 注册的编码的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取编码的用户可读说明。
    /// </summary>
    property DisplayName: string read get_DisplayName;
  end;

  TDNEncodingInfo = class(TDNGenericImport<DNEncodingInfoClass, DNEncodingInfo>) end;

  //-------------namespace: System.Text----------------
  DNEncodingProviderClass = interface(DNObjectClass)
  ['{004F04D2-C57F-4AC4-B44C-A5B90E3A27A1}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNEncodingProvider;

  end;

  /// <summary>
  ///   提供编码提供程序的基类，后者提供在特定平台上不可用的编码。
  /// </summary>
  [DNTypeName('System.Text.EncodingProvider')]
  DNEncodingProvider = interface(DNObject)
  ['{3D92F301-0C35-32F1-AAEB-99AAE75CD054}']
  { methods } 

    /// <summary>
    ///   返回与指定名称关联的编码。
    ///               参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。
    /// </summary>
    function GetEncoding(name: string; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    /// <summary>
    ///   返回与指定代码页标识符关联的编码。
    ///               参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。
    /// </summary>
    function GetEncoding(codepage: Int32; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    /// <summary>
    ///   返回具有指定名称的编码。
    /// </summary>
    function GetEncoding(name: string): DNEncoding; overload;
    /// <summary>
    ///   返回与指定代码页标识符关联的编码。
    /// </summary>
    function GetEncoding(codepage: Int32): DNEncoding; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEncodingProvider = class(TDNGenericImport<DNEncodingProviderClass, DNEncodingProvider>) end;

  //-------------namespace: System.Text----------------
  DNStringBuilderClass = interface(DNObjectClass)
  ['{CDE055AE-5D8C-43D5-B30E-020506945203}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNStringBuilder; overload;
    /// <summary>
    ///   使用指定的容量初始化  类的新实例。
    /// </summary>
    {class} function init(capacity: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   使用指定的字符串初始化  类的新实例。
    /// </summary>
    {class} function init(value: string): DNStringBuilder; overload;
    /// <summary>
    ///   使用指定的字符串和容量初始化  类的新实例。
    /// </summary>
    {class} function init(value: string; capacity: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   从指定的子字符串和容量初始化  类的新实例。
    /// </summary>
    {class} function init(value: string; startIndex: Int32; length: Int32; capacity: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   初始化  类的新实例，该类起始于指定容量并且可增长到指定的最大容量。
    /// </summary>
    {class} function init(capacity: Int32; maxCapacity: Int32): DNStringBuilder; overload;

  end;

  /// <summary>
  ///   表示可变字符字符串。
  ///               此类不能被继承。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.Text.StringBuilder')]
  DNStringBuilder = interface(DNObject)
  ['{E724B749-18D6-36AB-9F6D-09C36D9C6016}']
  { getter & setter } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_MaxCapacity: Int32;
    function get_Length: Int32;
    procedure set_Length(value: Int32);
    function get_Chars(index: Int32): Char;
    procedure set_Chars(index: Int32; value: Char);

  { methods } 

    /// <summary>
    ///   确保  的此实例的容量至少是指定值。
    /// </summary>
    function EnsureCapacity(capacity: Int32): Int32;
    /// <summary>
    ///   将此实例的值转换为 。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   将此实例中子字符串的值转换为 。
    /// </summary>
    function ToString(startIndex: Int32; length: Int32): string; overload;
    /// <summary>
    ///   从当前  实例中移除所有字符。
    /// </summary>
    function Clear: DNStringBuilder;
    /// <summary>
    ///   向此实例追加 Unicode 字符的字符串表示形式指定数目的副本。
    /// </summary>
    function Append(value: Char; repeatCount: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的 Unicode 字符子数组的字符串表示形式。
    /// </summary>
    function Append(value: TArray<Char>; startIndex: Int32; charCount: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定字符串的副本。
    /// </summary>
    function Append(value: string): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定子字符串的副本。
    /// </summary>
    function Append(value: string; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   将此实例的指定段中的字符复制到目标  数组的指定段中。
    /// </summary>
    procedure CopyTo(sourceIndex: Int32; destination: TArray<Char>; destinationIndex: Int32; count: Int32);
    /// <summary>
    ///   将指定字符串的一个或更多副本插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: string; count: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   将指定范围的字符从此实例中移除。
    /// </summary>
    function Remove(startIndex: Int32; length: Int32): DNStringBuilder;
    /// <summary>
    ///   向此实例追加指定的 8 位有符号整数的字符串表示形式。
    /// </summary>
    function Append(value: SByte): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的 8 位无符号整数的字符串表示形式。
    /// </summary>
    function Append(value: Byte): DNStringBuilder; overload;
    /// <summary>
    ///   将指定的  对象的字符串表示形式追加到此实例。
    /// </summary>
    function Append(value: Char): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的 16 位有符号整数的字符串表示形式。
    /// </summary>
    function Append(value: Int16): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的 32 位有符号整数的字符串表示形式。
    /// </summary>
    function Append(value: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的 64 位有符号整数的字符串表示形式。
    /// </summary>
    function Append(value: Int64): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的单精度浮点数的字符串表示形式。
    /// </summary>
    function Append(value: Single): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的双精度浮点数的字符串表示形式。
    /// </summary>
    function Append(value: Double): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的十进制数的字符串表示形式。
    /// </summary>
    function Append(value: DNDecimal): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的 16 位无符号整数的字符串表示形式。
    /// </summary>
    function Append(value: UInt16): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的 32 位无符号整数的字符串表示形式。
    /// </summary>
    function Append(value: UInt32): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的 64 位无符号整数的字符串表示形式。
    /// </summary>
    function Append(value: UInt64): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定对象的字符串表示形式。
    /// </summary>
    function Append(value: DNObject): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定数组中的 Unicode 字符的字符串表示形式。
    /// </summary>
    function Append(value: TArray<Char>): DNStringBuilder; overload;
    /// <summary>
    ///   将字符串插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: string): DNStringBuilder; overload;
    /// <summary>
    ///   将指定的 8 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: SByte): DNStringBuilder; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: Byte): DNStringBuilder; overload;
    /// <summary>
    ///   将指定的 16 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: Int16): DNStringBuilder; overload;
    /// <summary>
    ///   将指定的 Unicode 字符的字符串表示形式插入到此实例中的指定位置。
    /// </summary>
    function Insert(index: Int32; value: Char): DNStringBuilder; overload;
    /// <summary>
    ///   将指定的 Unicode 字符数组的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: TArray<Char>): DNStringBuilder; overload;
    /// <summary>
    ///   将指定的 Unicode 字符子数组的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: TArray<Char>; startIndex: Int32; charCount: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   将指定的 32 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   将 64 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: Int64): DNStringBuilder; overload;
    /// <summary>
    ///   将单精度浮点数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: Single): DNStringBuilder; overload;
    /// <summary>
    ///   将双精度浮点数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: Double): DNStringBuilder; overload;
    /// <summary>
    ///   将十进制数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: DNDecimal): DNStringBuilder; overload;
    /// <summary>
    ///   将 16 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: UInt16): DNStringBuilder; overload;
    /// <summary>
    ///   将 32 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: UInt32): DNStringBuilder; overload;
    /// <summary>
    ///   将 64 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: UInt64): DNStringBuilder; overload;
    /// <summary>
    ///   将对象的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: DNObject): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。
    ///               每个格式项都替换为一个参数的字符串表示形式。
    /// </summary>
    function AppendFormat(format: string; arg0: DNObject): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。
    ///               每个格式项都替换为这两个参数中任意一个参数的字符串表示形式。
    /// </summary>
    function AppendFormat(format: string; arg0: DNObject; arg1: DNObject): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。
    ///               每个格式项都替换为这三个参数中任意一个参数的字符串表示形式。
    /// </summary>
    function AppendFormat(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。
    ///               每个格式项都使用指定的格式提供程序替换为单个参数的字符串表示形式。
    /// </summary>
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。
    ///               每个格式项都使用指定的格式提供程序替换为两个参数中任一个的字符串表示形式。
    /// </summary>
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。
    ///               每个格式项都使用指定的格式提供程序替换为三个参数中任一个的字符串表示形式。
    /// </summary>
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): DNStringBuilder; overload;
    /// <summary>
    ///   将此实例中出现的所有指定字符串的替换为其他指定字符串。
    /// </summary>
    function Replace(oldValue: string; newValue: string): DNStringBuilder; overload;
    /// <summary>
    ///   返回一个值，该值指示此实例是否等于指定的对象。
    /// </summary>
    function Equals(sb: DNStringBuilder): Boolean; overload;
    /// <summary>
    ///   将此实例的子字符串中出现的所有指定字符串替换为其他指定字符串。
    /// </summary>
    function Replace(oldValue: string; newValue: string; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   将此实例中出现的所有指定字符替换为其他指定字符。
    /// </summary>
    function Replace(oldChar: Char; newChar: Char): DNStringBuilder; overload;
    /// <summary>
    ///   将此实例的子字符串中出现的所有指定字符替换为其他指定字符。
    /// </summary>
    function Replace(oldChar: Char; newChar: Char; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   将从指定地址开始的 Unicode 字符数组追加到此实例。
    /// </summary>
    function Append(value: PChar; valueCount: Int32): DNStringBuilder; overload;
    /// <summary>
    ///   将默认的行终止符追加到当前  对象的末尾。
    /// </summary>
    function AppendLine: DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加指定的布尔值的字符串表示形式。
    /// </summary>
    function Append(value: Boolean): DNStringBuilder; overload;
    /// <summary>
    ///   将布尔值的字符串表示形式插入到此实例中的指定字符位置。
    /// </summary>
    function Insert(index: Int32; value: Boolean): DNStringBuilder; overload;
    /// <summary>
    ///   将后面跟有默认行终止符的指定字符串的副本追加到当前  对象的末尾。
    /// </summary>
    function AppendLine(value: string): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。
    ///               每个格式项都由参数数组中相应参数的字符串表示形式替换。
    /// </summary>
    function AppendFormat(format: string; args: TArray<DNObject>): DNStringBuilder; overload;
    /// <summary>
    ///   向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。
    ///               每个格式项都使用指定的格式提供程序由参数数组中相应参数的字符串表示形式替换。
    /// </summary>
    function AppendFormat(provider: DNIFormatProvider; format: string; args: TArray<DNObject>): DNStringBuilder; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置可包含在当前实例所分配的内存中的最大字符数。
    /// </summary>
    property Capacity: Int32 read get_Capacity write set_Capacity;
    /// <summary>
    ///   获取此实例的最大容量。
    /// </summary>
    property MaxCapacity: Int32 read get_MaxCapacity;
    /// <summary>
    ///   获取或设置当前  对象的长度。
    /// </summary>
    property Length: Int32 read get_Length write set_Length;
    property Chars[index: Int32]: Char read get_Chars write set_Chars; default;
  end;

  TDNStringBuilder = class(TDNGenericImport<DNStringBuilderClass, DNStringBuilder>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenSourceClass = interface(DNObjectClass)
  ['{D68428A4-22B7-4B67-9800-E79E41B97FA5}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNCancellationTokenSource; overload;
    /// <summary>
    ///   初始化  类的新实例，在指定的时间跨度后将被取消。
    /// </summary>
    {class} function init(delay: DNTimeSpan): DNCancellationTokenSource; overload;
    /// <summary>
    ///   初始化  类的新实例，在指定的延迟（以毫秒为单位）后将被取消。
    /// </summary>
    {class} function init(millisecondsDelay: Int32): DNCancellationTokenSource; overload;

  { static methods } 

    /// <summary>
    ///   创建一个将在任何源标记处于取消状态时处于取消状态的 。
    /// </summary>
    {class} function CreateLinkedTokenSource(token1: DNCancellationToken; token2: DNCancellationToken): DNCancellationTokenSource; overload;
    /// <summary>
    ///   创建一个将在在指定的数组中任何源标记处于取消状态时处于取消状态的 。
    /// </summary>
    {class} function CreateLinkedTokenSource(tokens: TArray<DNCancellationToken>): DNCancellationTokenSource; overload;

  end;

  /// <summary>
  ///   向应该被取消的  发送信号。
  /// </summary>
  [DNTypeName('System.Threading.CancellationTokenSource')]
  DNCancellationTokenSource = interface(DNObject)
  ['{EC0CE4B8-A699-3D66-8D53-647A41E87078}']
  { getter & setter } 

    function get_IsCancellationRequested: Boolean;
    function get_Token: DNCancellationToken;

  { methods } 

    /// <summary>
    ///   传达取消请求。
    /// </summary>
    procedure Cancel; overload;
    /// <summary>
    ///   传达对取消的请求，并指定是否应处理其余回调和可取消操作。
    /// </summary>
    procedure Cancel(throwOnFirstException: Boolean); overload;
    /// <summary>
    ///   在指定的时间跨度后计划对此  的取消操作。
    /// </summary>
    procedure CancelAfter(delay: DNTimeSpan); overload;
    /// <summary>
    ///   在指定的毫秒数后计划对此  的取消操作。
    /// </summary>
    procedure CancelAfter(millisecondsDelay: Int32); overload;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取是否已请求取消此 。
    /// </summary>
    property IsCancellationRequested: Boolean read get_IsCancellationRequested;
    /// <summary>
    ///   获取与此  关联的 。
    /// </summary>
    property Token: DNCancellationToken read get_Token;
  end;

  TDNCancellationTokenSource = class(TDNGenericImport<DNCancellationTokenSourceClass, DNCancellationTokenSource>) end;

  //-------------namespace: System.Threading----------------
  DNCompressedStackClass = interface(DNObjectClass)
  ['{283D4E38-B2CA-4571-A161-E2BEA853AC29}']
  { static methods } 

    /// <summary>
    ///   捕获压缩从当前线程堆栈。
    /// </summary>
    {class} function Capture: DNCompressedStack;
    /// <summary>
    ///   当前线程上运行指定的压缩堆栈中的方法。
    /// </summary>
    {class} procedure Run(compressedStack: DNCompressedStack; callback: DNContextCallback; state: DNObject);
    /// <summary>
    ///   获取当前线程的压缩的堆栈。
    /// </summary>
    {class} function GetCompressedStack: DNCompressedStack;

  end;

  /// <summary>
  ///   用于设置和捕获当前线程上的压缩的堆栈提供的方法。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Threading.CompressedStack')]
  DNCompressedStack = interface(DNObject)
  ['{F3CE7312-70AE-37FF-98F6-CF1DCB22B9E4}']
  { methods } 

    /// <summary>
    ///   创建当前压缩堆栈的副本。
    /// </summary>
    function CreateCopy: DNCompressedStack;
    /// <summary>
    ///   用重新创建此执行上下文的实例所需的逻辑上下文信息设置  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCompressedStack = class(TDNGenericImport<DNCompressedStackClass, DNCompressedStack>) end;

  //-------------namespace: System.Threading----------------
  DNCountdownEventClass = interface(DNObjectClass)
  ['{5FD7C2B7-48B1-4B50-BF6A-CF39F15D9AE1}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例  类，具有指定的计数。
    /// </summary>
    {class} function init(initialCount: Int32): DNCountdownEvent;

  end;

  /// <summary>
  ///   表示在计数变为零时处于有信号状态的同步基元。
  /// </summary>
  [DNTypeName('System.Threading.CountdownEvent')]
  DNCountdownEvent = interface(DNObject)
  ['{88CDADAA-25F4-3500-87CB-AAD36249A952}']
  { getter & setter } 

    function get_CurrentCount: Int32;
    function get_InitialCount: Int32;
    function get_IsSet: Boolean;
    function get_WaitHandle: DNWaitHandle;

  { methods } 

    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   注册具有的信号 , ，递减值的 。
    /// </summary>
    function Signal: Boolean; overload;
    /// <summary>
    ///   注册与多个信号 , ，递减值的  指定的量。
    /// </summary>
    function Signal(signalCount: Int32): Boolean; overload;
    /// <summary>
    ///   增量 的当前计数加 1。
    /// </summary>
    procedure AddCount; overload;
    /// <summary>
    ///   尝试递增  1。
    /// </summary>
    function TryAddCount: Boolean; overload;
    /// <summary>
    ///   增量 的指定值的当前计数。
    /// </summary>
    procedure AddCount(signalCount: Int32); overload;
    /// <summary>
    ///   尝试递增  指定值。
    /// </summary>
    function TryAddCount(signalCount: Int32): Boolean; overload;
    /// <summary>
    ///   重置  的值 。
    /// </summary>
    procedure Reset; overload;
    /// <summary>
    ///   重置  属性设置为指定的值。
    /// </summary>
    procedure Reset(count: Int32); overload;
    /// <summary>
    ///   阻止当前线程，直到  设置。
    /// </summary>
    procedure Wait; overload;
    /// <summary>
    ///   阻止当前线程，直到  设置，同时观察 。
    /// </summary>
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    /// <summary>
    ///   阻止当前线程，直到  已设定，使用  测量超时。
    /// </summary>
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直到  使用的设置  测量超时，同时观察 。
    /// </summary>
    function Wait(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直到  使用 32 位有符号的整数测量超时的设置。
    /// </summary>
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直到  已设定，使用 32 位有符号的整数测量超时，同时观察 。
    /// </summary>
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取所需设置事件的剩余信号数。
    /// </summary>
    property CurrentCount: Int32 read get_CurrentCount;
    /// <summary>
    ///   获取最初所需设置事件信号的数目。
    /// </summary>
    property InitialCount: Int32 read get_InitialCount;
    /// <summary>
    ///   表示  对象的当前计数是否已归零..
    /// </summary>
    property IsSet: Boolean read get_IsSet;
    /// <summary>
    ///   获取  用来等待要设置的事件。
    /// </summary>
    property WaitHandle: DNWaitHandle read get_WaitHandle;
  end;

  TDNCountdownEvent = class(TDNGenericImport<DNCountdownEventClass, DNCountdownEvent>) end;

  //-------------namespace: System.Threading----------------
  DNExecutionContextClass = interface(DNObjectClass)
  ['{CB2B9A59-D2F0-40EF-8F13-4548FB684BDB}']
  { static methods } 

    /// <summary>
    ///   在当前线程上指定的执行上下文中运行的方法。
    /// </summary>
    {class} procedure Run(executionContext: DNExecutionContext; callback: DNContextCallback; state: DNObject);
    /// <summary>
    ///   在异步线程间取消执行上下文的流动。
    /// </summary>
    {class} function SuppressFlow: DNAsyncFlowControl;
    /// <summary>
    ///   在异步线程间恢复执行上下文的流动。
    /// </summary>
    {class} procedure RestoreFlow;
    /// <summary>
    ///   指示是否当前正在取消执行上下文的流动。
    /// </summary>
    {class} function IsFlowSuppressed: Boolean;
    /// <summary>
    ///   捕获从当前线程的执行上下文。
    /// </summary>
    {class} function Capture: DNExecutionContext;

  end;

  /// <summary>
  ///   管理当前线程的执行上下文。
  ///               无法继承此类。
  /// </summary>
  [DNTypeName('System.Threading.ExecutionContext')]
  DNExecutionContext = interface(DNObject)
  ['{61D201D5-0A0E-3A70-9F48-3268B7FEBBDF}']
  { methods } 

    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   创建当前执行上下文的副本。
    /// </summary>
    function CreateCopy: DNExecutionContext;
    /// <summary>
    ///   设置指定  重新创建当前执行上下文的实例所需的逻辑上下文信息的对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNExecutionContext = class(TDNGenericImport<DNExecutionContextClass, DNExecutionContext>) end;

  //-------------namespace: System.Threading----------------
  DNHostExecutionContextClass = interface(DNObjectClass)
  ['{5A8EEC20-8A3F-400F-82ED-2C53BDC316AF}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNHostExecutionContext; overload;
    /// <summary>
    ///   新实例初始化  类使用指定的状态。
    /// </summary>
    {class} function init(state: DNObject): DNHostExecutionContext; overload;

  end;

  /// <summary>
  ///   封装并传播在线程间的宿主执行上下文。
  /// </summary>
  [DNTypeName('System.Threading.HostExecutionContext')]
  DNHostExecutionContext = interface(DNObject)
  ['{79F49D2D-E478-3F8E-9C93-BFEAD89E37EE}']
  { methods } 

    /// <summary>
    ///   创建当前宿主执行上下文的副本。
    /// </summary>
    function CreateCopy: DNHostExecutionContext;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose; overload;
    /// <summary>
    ///   当在派生类中重写时，释放  使用的非托管资源，并且可选择释放托管资源。
    /// </summary>
    procedure Dispose(disposing: Boolean); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNHostExecutionContext = class(TDNGenericImport<DNHostExecutionContextClass, DNHostExecutionContext>) end;

  //-------------namespace: System.Threading----------------
  DNHostExecutionContextManagerClass = interface(DNObjectClass)
  ['{BFF394CB-8144-4752-8A92-3E5B426A6316}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNHostExecutionContextManager;

  end;

  /// <summary>
  ///   提供使公共语言运行时宿主可以参与流或迁移的执行上下文的功能。
  /// </summary>
  [DNTypeName('System.Threading.HostExecutionContextManager')]
  DNHostExecutionContextManager = interface(DNObject)
  ['{254BE22A-F1D5-34A7-B3D1-44F75B99CB9C}']
  { methods } 

    /// <summary>
    ///   将宿主执行上下文恢复到它以前的状态。
    /// </summary>
    procedure Revert(previousState: DNObject);
    /// <summary>
    ///   捕获当前线程中的主机执行上下文。
    /// </summary>
    function Capture: DNHostExecutionContext;
    /// <summary>
    ///   将当前宿主执行上下文设置为指定的主机执行上下文。
    /// </summary>
    function SetHostExecutionContext(hostExecutionContext: DNHostExecutionContext): DNObject;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNHostExecutionContextManager = class(TDNGenericImport<DNHostExecutionContextManagerClass, DNHostExecutionContextManager>) end;

  //-------------namespace: System.Threading----------------
  DNInterlockedClass = interface(DNObjectClass)
  ['{6E688751-CBE4-45A4-878E-DA8F83B645F0}']
  { static methods } 

    {class} function Increment(out location: Int32): Int32; overload;
    {class} function Increment(out location: Int64): Int64; overload;
    {class} function Decrement(out location: Int32): Int32; overload;
    {class} function Decrement(out location: Int64): Int64; overload;
    {class} function Add(out location1: Int32; value: Int32): Int32; overload;
    {class} function Add(out location1: Int64; value: Int64): Int64; overload;
    {class} function Read(out location: Int64): Int64;
    /// <summary>
    ///   按以下方式同步内存访问︰ 执行当前线程的处理器不能重新排序说明对的调用之前的内存存取的方式  执行之后的内存存取，再执行到 。
    /// </summary>
    {class} procedure MemoryBarrier;
    {class} function Exchange(out location1: Single; value: Single): Single; overload;
    {class} function Exchange(out location1: Double; value: Double): Double; overload;
    {class} function CompareExchange(out location1: Single; value: Single; comparand: Single): Single; overload;
    {class} function CompareExchange(out location1: Double; value: Double; comparand: Double): Double; overload;
    {class} procedure SpeculationBarrier;
    {class} function Exchange(out location1: Int32; value: Int32): Int32; overload;
    {class} function Exchange(out location1: Int64; value: Int64): Int64; overload;
    {class} function Exchange(out location1: DNObject; value: DNObject): DNObject; overload;
    {class} function Exchange(out location1: IntPtr; value: IntPtr): IntPtr; overload;
    {class} function CompareExchange(out location1: Int32; value: Int32; comparand: Int32): Int32; overload;
    {class} function CompareExchange(out location1: Int64; value: Int64; comparand: Int64): Int64; overload;
    {class} function CompareExchange(out location1: DNObject; value: DNObject; comparand: DNObject): DNObject; overload;
    {class} function CompareExchange(out location1: IntPtr; value: IntPtr; comparand: IntPtr): IntPtr; overload;

  end;

  /// <summary>
  ///   为多个线程共享的变量提供原子操作。
  /// </summary>
  [DNTypeName('System.Threading.Interlocked')]
  DNInterlocked = interface(DNObject)
  ['{6AFBF244-9AB3-37D7-B4D4-357A72B76DE1}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInterlocked = class(TDNGenericImport<DNInterlockedClass, DNInterlocked>) end;

  //-------------namespace: System.Threading----------------
  DNLazyInitializerClass = interface(DNObjectClass)
  ['{640835BC-5A71-4C58-BE98-243083D882C0}']
  end;

  /// <summary>
  ///   提供延迟初始化例程。
  /// </summary>
  [DNTypeName('System.Threading.LazyInitializer')]
  DNLazyInitializer = interface(DNObject)
  ['{35ABA057-A91C-35BF-96DF-16FFDC0D3B9E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNLazyInitializer = class(TDNGenericImport<DNLazyInitializerClass, DNLazyInitializer>) end;

  //-------------namespace: System.Threading----------------
  DNManualResetEventSlimClass = interface(DNObjectClass)
  ['{2B662EE9-43CF-4FDD-9DFB-DC42C9213EE6}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类使用的非终止初始状态。
    /// </summary>
    {class} function init: DNManualResetEventSlim; overload;
    /// <summary>
    ///   新实例初始化  使用 Boolean 值，该值指示是否将初始状态设置为终止状态的类。
    /// </summary>
    {class} function init(initialState: Boolean): DNManualResetEventSlim; overload;
    /// <summary>
    ///   新实例初始化  类具有一个布尔值，该值指示是否将初始状态设置为终止和指定的旋转计数。
    /// </summary>
    {class} function init(initialState: Boolean; spinCount: Int32): DNManualResetEventSlim; overload;

  end;

  /// <summary>
  ///   提供的简化版本的 。
  /// </summary>
  [DNTypeName('System.Threading.ManualResetEventSlim')]
  DNManualResetEventSlim = interface(DNObject)
  ['{B36A33C4-1FC3-389B-9758-DC0AB64757AB}']
  { getter & setter } 

    function get_WaitHandle: DNWaitHandle;
    function get_IsSet: Boolean;
    function get_SpinCount: Int32;

  { methods } 

    /// <summary>
    ///   将事件状态设置为有信号，从而允许一个或多个等待该事件的线程继续。
    /// </summary>
    procedure &Set;
    /// <summary>
    ///   将事件状态设置为非终止，从而导致线程受阻。
    /// </summary>
    procedure Reset;
    /// <summary>
    ///   阻止当前线程，直到当前  设置。
    /// </summary>
    procedure Wait; overload;
    /// <summary>
    ///   阻止当前线程，直到当前  收到信号，同时观察 。
    /// </summary>
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    /// <summary>
    ///   阻止当前线程，直到当前  已设定，使用  度量时间间隔。
    /// </summary>
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直到当前  已设定，使用  测量时间间隔，同时观察 。
    /// </summary>
    function Wait(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直到当前  已设定，使用 32 位有符号的整数度量时间间隔。
    /// </summary>
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直到当前  已设定，使用 32 位有符号的整数测量时间间隔，同时观察 。
    /// </summary>
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取基础  对象的 。
    /// </summary>
    property WaitHandle: DNWaitHandle read get_WaitHandle;
    /// <summary>
    ///   获取是否已设置事件。
    /// </summary>
    property IsSet: Boolean read get_IsSet;
    /// <summary>
    ///   获取在回退到基于内核的等待操作之前将发生的自旋等待数量。
    /// </summary>
    property SpinCount: Int32 read get_SpinCount;
  end;

  TDNManualResetEventSlim = class(TDNGenericImport<DNManualResetEventSlimClass, DNManualResetEventSlim>) end;

  //-------------namespace: System.Threading----------------
  DNMonitorClass = interface(DNObjectClass)
  ['{0FC46278-9399-444F-BD0A-3AE779D74149}']
  { static methods } 

    {class} procedure Enter(obj: DNObject; out lockTaken: Boolean); overload;
    /// <summary>
    ///   尝试获取指定对象的排他锁。
    /// </summary>
    {class} function TryEnter(obj: DNObject): Boolean; overload;
    {class} procedure TryEnter(obj: DNObject; out lockTaken: Boolean); overload;
    /// <summary>
    ///   在指定的毫秒数内尝试获取指定对象上的排他锁。
    /// </summary>
    {class} function TryEnter(obj: DNObject; millisecondsTimeout: Int32): Boolean; overload;
    /// <summary>
    ///   在指定的时间内尝试获取指定对象上的排他锁。
    /// </summary>
    {class} function TryEnter(obj: DNObject; timeout: DNTimeSpan): Boolean; overload;
    {class} procedure TryEnter(obj: DNObject; millisecondsTimeout: Int32; out lockTaken: Boolean); overload;
    {class} procedure TryEnter(obj: DNObject; timeout: DNTimeSpan; out lockTaken: Boolean); overload;
    /// <summary>
    ///   确定当前线程是否保留指定对象上的锁。
    /// </summary>
    {class} function IsEntered(obj: DNObject): Boolean;
    /// <summary>
    ///   释放对象上的锁并阻止当前线程，直到它重新获取该锁。
    ///               如果已用指定的超时时间间隔，则线程进入就绪队列。
    ///               此方法还指定是否在等待之前退出上下文的同步域（如果在同步上下文中）然后重新获取该同步域。
    /// </summary>
    {class} function Wait(obj: DNObject; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    /// <summary>
    ///   释放对象上的锁并阻止当前线程，直到它重新获取该锁。
    ///               如果已用指定的超时时间间隔，则线程进入就绪队列。
    ///               可以在等待之前退出同步上下文的同步域，随后重新获取该域。
    /// </summary>
    {class} function Wait(obj: DNObject; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    /// <summary>
    ///   释放对象上的锁并阻止当前线程，直到它重新获取该锁。
    ///               如果已用指定的超时时间间隔，则线程进入就绪队列。
    /// </summary>
    {class} function Wait(obj: DNObject; millisecondsTimeout: Int32): Boolean; overload;
    /// <summary>
    ///   释放对象上的锁并阻止当前线程，直到它重新获取该锁。
    ///               如果已用指定的超时时间间隔，则线程进入就绪队列。
    /// </summary>
    {class} function Wait(obj: DNObject; timeout: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   释放对象上的锁并阻止当前线程，直到它重新获取该锁。
    /// </summary>
    {class} function Wait(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   通知等待队列中的线程锁定对象状态的更改。
    /// </summary>
    {class} procedure Pulse(obj: DNObject);
    /// <summary>
    ///   通知所有的等待线程对象状态的更改。
    /// </summary>
    {class} procedure PulseAll(obj: DNObject);
    /// <summary>
    ///   在指定对象上获取排他锁。
    /// </summary>
    {class} procedure Enter(obj: DNObject); overload;
    /// <summary>
    ///   释放指定对象上的排他锁。
    /// </summary>
    {class} procedure &Exit(obj: DNObject);

  end;

  /// <summary>
  ///   提供同步访问对象的机制。
  /// </summary>
  [DNTypeName('System.Threading.Monitor')]
  DNMonitor = interface(DNObject)
  ['{9E97213A-0B49-3C05-A0BF-D203C4FC8487}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMonitor = class(TDNGenericImport<DNMonitorClass, DNMonitor>) end;

  //-------------namespace: System.Threading----------------
  DNOverlappedClass = interface(DNObjectClass)
  ['{35E5ABF1-DBC4-4D86-8DB2-007B4AC3A5CD}']
  { constructors } 

    /// <summary>
    ///   初始化新的空实例  类。
    /// </summary>
    {class} function init: DNOverlapped; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的文件位置，在 I/O 操作完成后，终止的事件，以及一个用来返回操作的结果的接口的句柄。
    /// </summary>
    {class} function init(offsetLo: Int32; offsetHi: Int32; hEvent: IntPtr; ar: DNIAsyncResult): DNOverlapped; overload;
    /// <summary>
    ///   新实例初始化  类，具有指定的文件位置，在 I/O 操作完成后，终止的事件，以及一个用其返回操作的结果接口的 32 位整数句柄。
    /// </summary>
    {class} function init(offsetLo: Int32; offsetHi: Int32; hEvent: Int32; ar: DNIAsyncResult): DNOverlapped; overload;

  { static methods } 

    /// <summary>
    ///   解包指定的非托管  结构转换为托管  对象。
    /// </summary>
    {class} function Unpack(var nativeOverlappedPtr: DNNativeOverlapped): DNOverlapped;
    /// <summary>
    ///   释放与分配的本机重叠结构相关联的非托管的内存  方法。
    /// </summary>
    {class} procedure Free(var nativeOverlappedPtr: DNNativeOverlapped);

  end;

  /// <summary>
  ///   提供 Win32 OVERLAPPED 结构的托管表现形式，包括从  实例向  结构传输信息的方式。
  /// </summary>
  [DNTypeName('System.Threading.Overlapped')]
  DNOverlapped = interface(DNObject)
  ['{7FE87A55-1321-3D9F-8FEF-CD2F5E8AB2E9}']
  { getter & setter } 

    function get_AsyncResult: DNIAsyncResult;
    procedure set_AsyncResult(value: DNIAsyncResult);
    function get_OffsetLow: Int32;
    procedure set_OffsetLow(value: Int32);
    function get_OffsetHigh: Int32;
    procedure set_OffsetHigh(value: Int32);
    function get_EventHandle: Int32;
    procedure set_EventHandle(value: Int32);
    function get_EventHandleIntPtr: IntPtr;
    procedure set_EventHandleIntPtr(value: IntPtr);

  { methods } 

    /// <summary>
    ///   当前实例打包为  结构，并指定要在异步 I/O 操作完成时调用的委托。
    /// </summary>
    function Pack(iocb: DNIOCompletionCallback): DNNativeOverlapped; overload;
    /// <summary>
    ///   当前实例打包为  结构，并指定异步 I/O 操作完成时调用的委托并且作为缓冲区的托管的对象。
    /// </summary>
    function Pack(iocb: DNIOCompletionCallback; userData: DNObject): DNNativeOverlapped; overload;
    /// <summary>
    ///   当前实例打包为  结构，它指定要在异步 I/O 操作已完成时调用的委托。
    ///               不传播到调用堆栈。
    /// </summary>
    function UnsafePack(iocb: DNIOCompletionCallback): DNNativeOverlapped; overload;
    /// <summary>
    ///   当前实例打包为  结构，并指定要在异步 I/O 操作已完成和托管对象时调用的委托作为缓冲区。
    ///               不传播到调用堆栈。
    /// </summary>
    function UnsafePack(iocb: DNIOCompletionCallback; userData: DNObject): DNNativeOverlapped; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置提供 I/O 操作的状态信息的对象。
    /// </summary>
    property AsyncResult: DNIAsyncResult read get_AsyncResult write set_AsyncResult;
    /// <summary>
    ///   获取或设置启动传输的文件位置的低序位字。
    ///               文件位置是从该文件的起始位置的字节偏移量。
    /// </summary>
    property OffsetLow: Int32 read get_OffsetLow write set_OffsetLow;
    /// <summary>
    ///   获取或设置启动传输的文件位置的高序位字。
    ///               文件位置是从该文件的起始位置的字节偏移量。
    /// </summary>
    property OffsetHigh: Int32 read get_OffsetHigh write set_OffsetHigh;
    /// <summary>
    ///   获取或设置当 I/O 操作完成时终止的同步事件的 32 位整数句柄。
    /// </summary>
    property EventHandle: Int32 read get_EventHandle write set_EventHandle;
    /// <summary>
    ///   获取或设置当 I/O 操作完成时终止该同步事件的句柄。
    /// </summary>
    property EventHandleIntPtr: IntPtr read get_EventHandleIntPtr write set_EventHandleIntPtr;
  end;

  TDNOverlapped = class(TDNGenericImport<DNOverlappedClass, DNOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNPreAllocatedOverlappedClass = interface(DNObjectClass)
  ['{8A56DD16-95D5-488A-AD89-73F660B0C370}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，并指定在每个异步 I/O 操作完成时调用的委托、可提供上下文的用户提供的对象以及充当缓冲区的托管对象。
    /// </summary>
    {class} function init(callback: DNIOCompletionCallback; state: DNObject; pinData: DNObject): DNPreAllocatedOverlapped;

  end;

  /// <summary>
  ///   表示本机重叠 I/O 操作的预分配状态。
  /// </summary>
  [DNTypeName('System.Threading.PreAllocatedOverlapped')]
  DNPreAllocatedOverlapped = interface(DNObject)
  ['{722275F6-D931-3659-9047-C3244543F193}']
  { methods } 

    /// <summary>
    ///   释放与此  实例关联的资源。
    /// </summary>
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNPreAllocatedOverlapped = class(TDNGenericImport<DNPreAllocatedOverlappedClass, DNPreAllocatedOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreSlimClass = interface(DNObjectClass)
  ['{41DE0985-2562-41D8-94ED-FDEC508B47EC}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例，以指定可同时授予的请求的初始数量。
    /// </summary>
    {class} function init(initialCount: Int32): DNSemaphoreSlim; overload;
    /// <summary>
    ///   初始化  类的新实例，同时指定可同时授予的请求的初始数量和最大数量。
    /// </summary>
    {class} function init(initialCount: Int32; maxCount: Int32): DNSemaphoreSlim; overload;

  end;

  /// <summary>
  ///   对可同时访问资源或资源池的线程数加以限制的  的轻量替代。
  /// </summary>
  [DNTypeName('System.Threading.SemaphoreSlim')]
  DNSemaphoreSlim = interface(DNObject)
  ['{6228BBB1-0E28-3C6B-BA33-D70D10B849CE}']
  { getter & setter } 

    function get_CurrentCount: Int32;
    function get_AvailableWaitHandle: DNWaitHandle;

  { methods } 

    /// <summary>
    ///   阻止当前线程，直至它可进入  为止。
    /// </summary>
    procedure Wait; overload;
    /// <summary>
    ///   阻止当前线程，直至它可进入  为止，同时观察 。
    /// </summary>
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    /// <summary>
    ///   阻止当前线程，直至它可进入  为止，同时使用  来指定超时。
    /// </summary>
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直至它可进入  为止，并使用  来指定超时，同时观察 。
    /// </summary>
    function Wait(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直至它可进入  为止，同时使用 32 位带符号整数来指定超时。
    /// </summary>
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    /// <summary>
    ///   阻止当前线程，直至它可进入  为止，并使用 32 位带符号整数来指定超时，同时观察 。
    /// </summary>
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    /// <summary>
    ///   输入  的异步等待。
    /// </summary>
    function WaitAsync: DNTask; overload;
    /// <summary>
    ///   在观察  时，输入  的异步等待。
    /// </summary>
    function WaitAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   释放  对象一次。
    /// </summary>
    function Release: Int32; overload;
    /// <summary>
    ///   释放  对象指定的次数。
    /// </summary>
    function Release(releaseCount: Int32): Int32; overload;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取可以输入  对象的剩余线程数。
    /// </summary>
    property CurrentCount: Int32 read get_CurrentCount;
    /// <summary>
    ///   返回一个可用于在信号量上等待的 。
    /// </summary>
    property AvailableWaitHandle: DNWaitHandle read get_AvailableWaitHandle;
  end;

  TDNSemaphoreSlim = class(TDNGenericImport<DNSemaphoreSlimClass, DNSemaphoreSlim>) end;

  //-------------namespace: System.Threading----------------
  DNSynchronizationContextClass = interface(DNObjectClass)
  ['{9705F930-1D9E-4964-A54D-9CB80EC11A57}']
  { static getter & setter } 

    {class} function get_Current: DNSynchronizationContext;

  { constructors } 

    /// <summary>
    ///   创建  类的新实例。
    /// </summary>
    {class} function init: DNSynchronizationContext;

  { static methods } 

    /// <summary>
    ///   设置当前同步上下文。
    /// </summary>
    {class} procedure SetSynchronizationContext(syncContext: DNSynchronizationContext);

  { static propertys } 

    /// <summary>
    ///   获取当前线程的同步上下文。
    /// </summary>
    {class} property Current: DNSynchronizationContext read get_Current;
  end;

  /// <summary>
  ///   提供在各种同步模型中传播同步上下文的基本功能。
  /// </summary>
  [DNTypeName('System.Threading.SynchronizationContext')]
  DNSynchronizationContext = interface(DNObject)
  ['{A241CA63-8C2F-3D67-AD72-646F739FC9BD}']
  { methods } 

    /// <summary>
    ///   确定是否需要等待通知。
    /// </summary>
    function IsWaitNotificationRequired: Boolean;
    /// <summary>
    ///   在派生类中重写时，将同步消息分派到同步上下文。
    /// </summary>
    procedure Send(d: DNSendOrPostCallback; state: DNObject);
    /// <summary>
    ///   在派生类中重写时，响应操作已开始的通知。
    /// </summary>
    procedure OperationStarted;
    /// <summary>
    ///   在派生类中重写时，响应操作已完成的通知。
    /// </summary>
    procedure OperationCompleted;
    /// <summary>
    ///   等待指定数组中的任一元素或所有元素接收信号。
    /// </summary>
    function Wait(waitHandles: TArray<IntPtr>; waitAll: Boolean; millisecondsTimeout: Int32): Int32;
    /// <summary>
    ///   在派生类中重写时，创建同步上下文的副本。
    /// </summary>
    function CreateCopy: DNSynchronizationContext;
    /// <summary>
    ///   在派生类中重写时，将异步消息分派到同步上下文。
    /// </summary>
    procedure Post(d: DNSendOrPostCallback; state: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSynchronizationContext = class(TDNGenericImport<DNSynchronizationContextClass, DNSynchronizationContext>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNConcurrentExclusiveSchedulerPairClass = interface(DNObjectClass)
  ['{BAC46F63-8055-4438-BA23-085B35D5BA82}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNConcurrentExclusiveSchedulerPair; overload;
    /// <summary>
    ///   新实例初始化  类中，该类指定计划程序。
    /// </summary>
    {class} function init(taskScheduler: DNTaskScheduler): DNConcurrentExclusiveSchedulerPair; overload;
    /// <summary>
    ///   新实例初始化  类中，该类具有最大并发级别的指定计划程序。
    /// </summary>
    {class} function init(taskScheduler: DNTaskScheduler; maxConcurrencyLevel: Int32): DNConcurrentExclusiveSchedulerPair; overload;
    /// <summary>
    ///   新实例初始化  类中，该类具有最大并发级别和最大次数可能会作为一个单元处理的计划任务的指定计划程序。
    /// </summary>
    {class} function init(taskScheduler: DNTaskScheduler; maxConcurrencyLevel: Int32; maxItemsPerTask: Int32): DNConcurrentExclusiveSchedulerPair; overload;

  end;

  /// <summary>
  ///   提供了其用于执行任务同时确保并发任务可能会同时运行并独占任务从不完成的操作的任务计划程序。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.ConcurrentExclusiveSchedulerPair')]
  DNConcurrentExclusiveSchedulerPair = interface(DNObject)
  ['{379F58B4-3161-37E6-843B-2AFEBF8F1317}']
  { getter & setter } 

    function get_Completion: DNTask;
    function get_ConcurrentScheduler: DNTaskScheduler;
    function get_ExclusiveScheduler: DNTaskScheduler;

  { methods } 

    /// <summary>
    ///   通知的计划程序对它不应接受任何更多的任务。
    /// </summary>
    procedure Complete;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取  计划程序已完成处理时，将完成。
    /// </summary>
    property Completion: DNTask read get_Completion;
    /// <summary>
    ///   获取  可用来为可能与其他任务同时运行在此对此对其计划任务。
    /// </summary>
    property ConcurrentScheduler: DNTaskScheduler read get_ConcurrentScheduler;
    /// <summary>
    ///   获取  可用来为在此对以独占方式方面的其他任务必须运行此对其计划任务。
    /// </summary>
    property ExclusiveScheduler: DNTaskScheduler read get_ExclusiveScheduler;
  end;

  TDNConcurrentExclusiveSchedulerPair = class(TDNGenericImport<DNConcurrentExclusiveSchedulerPairClass, DNConcurrentExclusiveSchedulerPair>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNParallelClass = interface(DNObjectClass)
  ['{7846806A-C181-4356-9FA9-B198DDBD58A2}']
  { static methods } 

    /// <summary>
    ///   尽可能并行执行提供的每个操作。
    /// </summary>
    {class} procedure Invoke(actions: TArray<DNAction>); overload;
    /// <summary>
    ///   执行所提供的每个操作，而且尽可能并行运行，除非用户取消了操作。
    /// </summary>
    {class} procedure Invoke(parallelOptions: DNParallelOptions; actions: TArray<DNAction>); overload;

  end;

  /// <summary>
  ///   提供对并行循环和区域的支持。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.Parallel')]
  DNParallel = interface(DNObject)
  ['{EA5B9720-74C5-31D0-B5B2-C8AFBD3DF160}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNParallel = class(TDNGenericImport<DNParallelClass, DNParallel>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNParallelLoopStateClass = interface(DNObjectClass)
  ['{819454CE-E875-4F3C-B050-499063947BC8}']
  end;

  /// <summary>
  ///   可使并行循环迭代与其他迭代交互。
  ///               此类的实例由  类提供给每个循环；不能在您的用户代码中创建实例。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.ParallelLoopState')]
  DNParallelLoopState = interface(DNObject)
  ['{A63295A1-B066-3EB0-9720-F7E08BA2ECC4}']
  { getter & setter } 

    function get_ShouldExitCurrentIteration: Boolean;
    function get_IsStopped: Boolean;
    function get_IsExceptional: Boolean;

  { methods } 

    /// <summary>
    ///   告知  循环应在系统方便的时候尽早停止执行。
    /// </summary>
    procedure Stop;
    /// <summary>
    ///   告知  循环应在系统方便的时候尽早停止执行当前迭代之外的迭代。
    /// </summary>
    procedure Break;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取循环的当前迭代是否应基于此迭代或其他迭代发出的请求退出。
    /// </summary>
    property ShouldExitCurrentIteration: Boolean read get_ShouldExitCurrentIteration;
    /// <summary>
    ///   获取循环的任何迭代是否已调用  方法。
    /// </summary>
    property IsStopped: Boolean read get_IsStopped;
    /// <summary>
    ///   获取循环的任何迭代是否已引发相应迭代未处理的异常。
    /// </summary>
    property IsExceptional: Boolean read get_IsExceptional;
  end;

  TDNParallelLoopState = class(TDNGenericImport<DNParallelLoopStateClass, DNParallelLoopState>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNParallelOptionsClass = interface(DNObjectClass)
  ['{C544BD10-B073-44BD-8BAC-40C7D94D3897}']
  { constructors } 

    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNParallelOptions;

  end;

  /// <summary>
  ///   存储配置的方法的操作的选项  类。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.ParallelOptions')]
  DNParallelOptions = interface(DNObject)
  ['{C8F7340F-4045-3974-8181-0BCCD7F6815E}']
  { getter & setter } 

    function get_TaskScheduler: DNTaskScheduler;
    procedure set_TaskScheduler(value: DNTaskScheduler);
    function get_MaxDegreeOfParallelism: Int32;
    procedure set_MaxDegreeOfParallelism(value: Int32);
    function get_CancellationToken: DNCancellationToken;
    procedure set_CancellationToken(value: DNCancellationToken);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取或设置  与此相关  实例。
    ///               将此属性设置为 null，则指示应使用当前计划程序。
    /// </summary>
    property TaskScheduler: DNTaskScheduler read get_TaskScheduler write set_TaskScheduler;
    /// <summary>
    ///   获取或设置由此启用并发任务最大数目  实例。
    /// </summary>
    property MaxDegreeOfParallelism: Int32 read get_MaxDegreeOfParallelism write set_MaxDegreeOfParallelism;
    /// <summary>
    ///   获取或设置  与此相关  实例。
    /// </summary>
    property CancellationToken: DNCancellationToken read get_CancellationToken write set_CancellationToken;
  end;

  TDNParallelOptions = class(TDNGenericImport<DNParallelOptionsClass, DNParallelOptions>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskClass = interface(DNObjectClass)
  ['{A4BE5F1E-E43C-42B6-9DD6-9571BABDC149}']
  { static getter & setter } 

    {class} function get_Factory: DNTaskFactory;
    {class} function get_CompletedTask: DNTask;

  { constructors } 

    /// <summary>
    ///   使用指定的操作初始化新的 。
    /// </summary>
    {class} function init(action: DNAction): DNTask; overload;
    /// <summary>
    ///   使用指定的操作和  初始化新的 。
    /// </summary>
    {class} function init(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   使用指定的操作和创建选项初始化新的 。
    /// </summary>
    {class} function init(action: DNAction; creationOptions: DNTaskCreationOptions): DNTask; overload;
    /// <summary>
    ///   使用指定的操作和创建选项初始化新的 。
    /// </summary>
    {class} function init(action: DNAction; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask; overload;

  { static methods } 

    /// <summary>
    ///   创建异步产生当前上下文的等待任务。
    /// </summary>
    {class} function Yield: DNYieldAwaitable;
    /// <summary>
    ///   等待提供的所有  对象完成执行过程。
    /// </summary>
    {class} procedure WaitAll(tasks: TArray<DNTask>); overload;
    /// <summary>
    ///   等待所有提供的可取消  对象在指定的时间间隔内完成执行。
    /// </summary>
    {class} function WaitAll(tasks: TArray<DNTask>; timeout: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   等待所有提供的  在指定的毫秒数内完成执行。
    /// </summary>
    {class} function WaitAll(tasks: TArray<DNTask>; millisecondsTimeout: Int32): Boolean; overload;
    /// <summary>
    ///   等待提供的所有  对象完成执行过程（除非取消等待）。
    /// </summary>
    {class} procedure WaitAll(tasks: TArray<DNTask>; cancellationToken: DNCancellationToken); overload;
    /// <summary>
    ///   等待提供的所有  对象在指定的毫秒数内完成执行，或等到取消等待。
    /// </summary>
    {class} function WaitAll(tasks: TArray<DNTask>; millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    /// <summary>
    ///   等待提供的任一  对象完成执行过程。
    /// </summary>
    {class} function WaitAny(tasks: TArray<DNTask>): Int32; overload;
    /// <summary>
    ///   等待任何提供的  对象在指定的时间间隔内完成执行。
    /// </summary>
    {class} function WaitAny(tasks: TArray<DNTask>; timeout: DNTimeSpan): Int32; overload;
    /// <summary>
    ///   等待提供的任何  对象完成执行过程（除非取消等待）。
    /// </summary>
    {class} function WaitAny(tasks: TArray<DNTask>; cancellationToken: DNCancellationToken): Int32; overload;
    /// <summary>
    ///   等待任何提供的  对象在指定的毫秒数内完成执行。
    /// </summary>
    {class} function WaitAny(tasks: TArray<DNTask>; millisecondsTimeout: Int32): Int32; overload;
    /// <summary>
    ///   等待提供的任何  对象在指定的毫秒数内完成执行，或等到取消标记取消。
    /// </summary>
    {class} function WaitAny(tasks: TArray<DNTask>; millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Int32; overload;
    /// <summary>
    ///   创建 ，它是以指定的异常来完成的。
    /// </summary>
    {class} function FromException(exception: DNException): DNTask;
    /// <summary>
    ///   创建 ，它因指定的取消标记进行的取消操作而完成。
    /// </summary>
    {class} function FromCanceled(cancellationToken: DNCancellationToken): DNTask;
    /// <summary>
    ///   将在线程池上运行的指定工作排队，并返回代表该工作的  对象。
    /// </summary>
    {class} function Run(action: DNAction): DNTask; overload;
    /// <summary>
    ///   将在线程池上运行的指定工作排队，并返回代表该工作的  对象。
    ///               可使用取消标记来取消工作。
    /// </summary>
    {class} function Run(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   创建一个在指定的时间间隔后完成的任务。
    /// </summary>
    {class} function Delay(delay: DNTimeSpan): DNTask; overload;
    /// <summary>
    ///   创建一个在指定的时间间隔后完成的可取消任务。
    /// </summary>
    {class} function Delay(delay: DNTimeSpan; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   创建将在时间延迟后完成的任务。
    /// </summary>
    {class} function Delay(millisecondsDelay: Int32): DNTask; overload;
    {class} function WhenAll(tasks: DNIEnumerable<DNTask>): DNTask; overload;
    /// <summary>
    ///   创建一个任务，该任务将在数组中的所有  对象都完成时完成。
    /// </summary>
    {class} function WhenAll(tasks: TArray<DNTask>): DNTask; overload;
    /// <summary>
    ///   创建将在时间延迟后完成的可取消任务。
    /// </summary>
    {class} function Delay(millisecondsDelay: Int32; cancellationToken: DNCancellationToken): DNTask; overload;

  { static propertys } 

    /// <summary>
    ///   提供对用于创建  和  的工厂方法的访问。
    /// </summary>
    {class} property Factory: DNTaskFactory read get_Factory;
    /// <summary>
    ///   获取一个已成功完成的任务。
    /// </summary>
    {class} property CompletedTask: DNTask read get_CompletedTask;
  end;

  /// <summary>
  ///   表示一个异步操作。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.Task')]
  DNTask = interface(DNObject)
  ['{8B6869C2-05E5-3922-8CA6-C3C32C0B4C17}']
  { getter & setter } 

    function get_Id: Int32;
    function get_Exception: DNAggregateException;
    function get_Status: DNTaskStatus;
    function get_IsCanceled: Boolean;
    function get_IsCompleted: Boolean;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_AsyncState: DNObject;
    function get_IsFaulted: Boolean;

  { methods } 

    /// <summary>
    ///   启动 ，并将它安排到当前的  中执行。
    /// </summary>
    procedure Start; overload;
    /// <summary>
    ///   启动 ，并将它安排到指定的  中执行。
    /// </summary>
    procedure Start(scheduler: DNTaskScheduler); overload;
    /// <summary>
    ///   对当前的  同步运行 。
    /// </summary>
    procedure RunSynchronously; overload;
    /// <summary>
    ///   对提供的  同步运行 。
    /// </summary>
    procedure RunSynchronously(scheduler: DNTaskScheduler); overload;
    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   获取用于等待此  的 awaiter。
    /// </summary>
    function GetAwaiter: DNTaskAwaiter;
    /// <summary>
    ///   配置用于等待此 的 awaiter。
    /// </summary>
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredTaskAwaitable;
    /// <summary>
    ///   等待  完成执行过程。
    /// </summary>
    procedure Wait; overload;
    /// <summary>
    ///   等待  在指定的时间间隔内完成执行。
    /// </summary>
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   等待  完成执行过程。
    ///               如果在任务完成之前取消标记已取消，等待将终止。
    /// </summary>
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    /// <summary>
    ///   等待  在指定的毫秒数内完成执行。
    /// </summary>
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    /// <summary>
    ///   等待  完成执行过程。
    ///               如果在任务完成之前超时间隔结束或取消标记已取消，等待将终止。
    /// </summary>
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此  实例的 ID。
    /// </summary>
    property Id: Int32 read get_Id;
    /// <summary>
    ///   获取导致  提前结束的 。
    ///               如果  成功完成或尚未引发任何异常，这将返回 。
    /// </summary>
    property Exception: DNAggregateException read get_Exception;
    /// <summary>
    ///   获取此任务的 。
    /// </summary>
    property Status: DNTaskStatus read get_Status;
    /// <summary>
    ///   获取此  实例是否由于被取消的原因而已完成执行。
    /// </summary>
    property IsCanceled: Boolean read get_IsCanceled;
    /// <summary>
    ///   获取此  是否已完成。
    /// </summary>
    property IsCompleted: Boolean read get_IsCompleted;
    /// <summary>
    ///   获取用于创建此任务的 。
    /// </summary>
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    /// <summary>
    ///   获取在创建  时提供的状态对象，如果未提供，则为 null。
    /// </summary>
    property AsyncState: DNObject read get_AsyncState;
    /// <summary>
    ///   获取  是否由于未经处理异常的原因而完成。
    /// </summary>
    property IsFaulted: Boolean read get_IsFaulted;
  end;

  TDNTask = class(TDNGenericImport<DNTaskClass, DNTask>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskFactoryClass = interface(DNObjectClass)
  ['{5EC4386B-55FD-4FA0-AC37-542068B21AAC}']
  { constructors } 

    /// <summary>
    ///   使用默认配置初始化  实例。
    /// </summary>
    {class} function init: DNTaskFactory; overload;
    /// <summary>
    ///   使用指定配置初始化  实例。
    /// </summary>
    {class} function init(cancellationToken: DNCancellationToken): DNTaskFactory; overload;
    /// <summary>
    ///   使用指定配置初始化  实例。
    /// </summary>
    {class} function init(scheduler: DNTaskScheduler): DNTaskFactory; overload;
    /// <summary>
    ///   使用指定配置初始化  实例。
    /// </summary>
    {class} function init(creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions): DNTaskFactory; overload;
    /// <summary>
    ///   使用指定配置初始化  实例。
    /// </summary>
    {class} function init(cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTaskFactory; overload;

  end;

  /// <summary>
  ///   提供对创建和计划  对象的支持。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.TaskFactory')]
  DNTaskFactory = interface(DNObject)
  ['{8A4322AD-2DC3-36B2-A5D4-99EAEE0BEEDE}']
  { getter & setter } 

    function get_CancellationToken: DNCancellationToken;
    function get_Scheduler: DNTaskScheduler;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_ContinuationOptions: DNTaskContinuationOptions;

  { methods } 

    /// <summary>
    ///   创建并启动 任务。
    /// </summary>
    function StartNew(action: DNAction): DNTask; overload;
    /// <summary>
    ///   创建并启动 。
    /// </summary>
    function StartNew(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    /// <summary>
    ///   创建并启动 。
    /// </summary>
    function StartNew(action: DNAction; creationOptions: DNTaskCreationOptions): DNTask; overload;
    /// <summary>
    ///   创建并启动 。
    /// </summary>
    function StartNew(action: DNAction; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取此任务工厂的默认取消标记。
    /// </summary>
    property CancellationToken: DNCancellationToken read get_CancellationToken;
    /// <summary>
    ///   获取此任务工厂的默认任务计划程序。
    /// </summary>
    property Scheduler: DNTaskScheduler read get_Scheduler;
    /// <summary>
    ///   获取此任务工厂的默认任务创建选项。
    /// </summary>
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    /// <summary>
    ///   获取此任务工厂的默认任务继续选项。
    /// </summary>
    property ContinuationOptions: DNTaskContinuationOptions read get_ContinuationOptions;
  end;

  TDNTaskFactory = class(TDNGenericImport<DNTaskFactoryClass, DNTaskFactory>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskSchedulerClass = interface(DNObjectClass)
  ['{3E4CC977-611C-42A2-9E90-03F828F6D0BD}']
  { static getter & setter } 

    {class} function get_Default: DNTaskScheduler;
    {class} function get_Current: DNTaskScheduler;

  { static methods } 

    /// <summary>
    ///   创建与当前  关联的 。
    /// </summary>
    {class} function FromCurrentSynchronizationContext: DNTaskScheduler;

  { static propertys } 

    /// <summary>
    ///   获取默认  由.NET Framework 提供的实例。
    /// </summary>
    {class} property &Default: DNTaskScheduler read get_Default;
    /// <summary>
    ///   获取  与当前正在执行的任务相关联。
    /// </summary>
    {class} property Current: DNTaskScheduler read get_Current;
  end;

  /// <summary>
  ///   表示一个处理将任务排队到线程中的低级工作的对象。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.TaskScheduler')]
  DNTaskScheduler = interface(DNObject)
  ['{97885044-A181-3FB4-82A3-10568C92DAB6}']
  { getter & setter } 

    function get_MaximumConcurrencyLevel: Int32;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   这指示最大并发级  能够支持。
    /// </summary>
    property MaximumConcurrencyLevel: Int32 read get_MaximumConcurrencyLevel;
    /// <summary>
    ///   获取此唯一 ID 。
    /// </summary>
    property Id: Int32 read get_Id;
  end;

  TDNTaskScheduler = class(TDNGenericImport<DNTaskSchedulerClass, DNTaskScheduler>) end;

  //-------------namespace: System.Threading----------------
  DNThreadPoolClass = interface(DNObjectClass)
  ['{1ED84484-764D-4CC3-A6BB-FE54DF6B6FAC}']
  { static methods } 

    /// <summary>
    ///   设置可以同时处于活动状态的线程池的请求数目。
    ///               所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。
    /// </summary>
    {class} function SetMaxThreads(workerThreads: Int32; completionPortThreads: Int32): Boolean;
    {class} procedure GetMaxThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    /// <summary>
    ///   发出新的请求时，在切换到管理线程创建和销毁的算法之前设置线程池按需创建的线程的最小数量。
    /// </summary>
    {class} function SetMinThreads(workerThreads: Int32; completionPortThreads: Int32): Boolean;
    {class} procedure GetMinThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    {class} procedure GetAvailableThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    /// <summary>
    ///   指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 。
    /// </summary>
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: UInt32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    /// <summary>
    ///   指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 。
    ///               此方法不将调用堆栈传播到辅助线程。
    /// </summary>
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: UInt32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    /// <summary>
    ///   注册一个等待  的委托，并指定一个 32 位有符号整数来表示超时值（以毫秒为单位）。
    /// </summary>
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    /// <summary>
    ///   注册一个等待  的委托，并使用一个 32 位带符号整数来表示超时时间（以毫秒为单位）。
    ///               此方法不将调用堆栈传播到辅助线程。
    /// </summary>
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    /// <summary>
    ///   注册一个等待  的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。
    /// </summary>
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int64; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    /// <summary>
    ///   注册一个等待  的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。
    ///               此方法不将调用堆栈传播到辅助线程。
    /// </summary>
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int64; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    /// <summary>
    ///   注册一个等待  的委托，并指定一个  值来表示超时时间。
    /// </summary>
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; timeout: DNTimeSpan; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    /// <summary>
    ///   注册一个等待  的委托，并指定一个  值来表示超时时间。
    ///               此方法不将调用堆栈传播到辅助线程。
    /// </summary>
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; timeout: DNTimeSpan; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    /// <summary>
    ///   将方法排入队列以便执行，并指定包含该方法所用数据的对象。
    ///               此方法在有线程池线程变得可用时执行。
    /// </summary>
    {class} function QueueUserWorkItem(callBack: DNWaitCallback; state: DNObject): Boolean; overload;
    /// <summary>
    ///   将方法排入队列以便执行。
    ///               此方法在有线程池线程变得可用时执行。
    /// </summary>
    {class} function QueueUserWorkItem(callBack: DNWaitCallback): Boolean; overload;
    /// <summary>
    ///   将指定的委托排队到线程池，但不会将调用堆栈传播到辅助线程。
    /// </summary>
    {class} function UnsafeQueueUserWorkItem(callBack: DNWaitCallback; state: DNObject): Boolean;
    /// <summary>
    ///   将重叠的 I/O 操作排队以便执行。
    /// </summary>
    {class} function UnsafeQueueNativeOverlapped(var overlapped: DNNativeOverlapped): Boolean;
    /// <summary>
    ///   将操作系统句柄绑定到 。
    /// </summary>
    {class} function BindHandle(osHandle: IntPtr): Boolean; overload;
    /// <summary>
    ///   将操作系统句柄绑定到 。
    /// </summary>
    {class} function BindHandle(osHandle: DNSafeHandle): Boolean; overload;

  end;

  /// <summary>
  ///   提供一个线程池，该线程池可用于执行任务、发送工作项、处理异步 I/O、代表其他线程等待以及处理计时器。
  /// </summary>
  [DNTypeName('System.Threading.ThreadPool')]
  DNThreadPool = interface(DNObject)
  ['{F18C1BBB-EFA1-3789-8CDF-2D89E83834E5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNThreadPool = class(TDNGenericImport<DNThreadPoolClass, DNThreadPool>) end;

  //-------------namespace: System.Threading----------------
  DNThreadPoolBoundHandleClass = interface(DNObjectClass)
  ['{73B475F5-5770-4687-A3C3-BC9A5FCE4307}']
  { static methods } 

    /// <summary>
    ///   为指定句柄返回 ，后者已绑定到系统线程池。
    /// </summary>
    {class} function BindHandle(handle: DNSafeHandle): DNThreadPoolBoundHandle;
    /// <summary>
    ///   返回用户提供的对象，该对象在通过调用  方法分配  实例时指定。
    /// </summary>
    {class} function GetNativeOverlappedState(var overlapped: DNNativeOverlapped): DNObject;

  end;

  /// <summary>
  ///   表示已绑定到系统线程池的 I/O 句柄，并使低级别组件能够接收异步 I/O 操作的通知。
  /// </summary>
  [DNTypeName('System.Threading.ThreadPoolBoundHandle')]
  DNThreadPoolBoundHandle = interface(DNObject)
  ['{EEF62825-2983-3A9C-B0F6-64FC87F40DBD}']
  { getter & setter } 

    function get_Handle: DNSafeHandle;

  { methods } 

    /// <summary>
    ///   向  结构返回一个非托管指针，指定在异步 I/O 操作完成时调用的委托、可提供上下文的用户提供的对象，以及充当缓冲区的托管对象。
    /// </summary>
    function AllocateNativeOverlapped(callback: DNIOCompletionCallback; state: DNObject; pinData: DNObject): DNNativeOverlapped; overload;
    /// <summary>
    ///   返回指向  结构的非托管指针，该结构使用与指定  对象关联的回调状态和缓冲区。
    /// </summary>
    function AllocateNativeOverlapped(preAllocated: DNPreAllocatedOverlapped): DNNativeOverlapped; overload;
    /// <summary>
    ///   释放与  方法分配的  结构关联的内存。
    /// </summary>
    procedure FreeNativeOverlapped(var overlapped: DNNativeOverlapped);
    /// <summary>
    ///   释放  实例使用的所有非托管资源。
    /// </summary>
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取绑定的操作系统句柄。
    /// </summary>
    property Handle: DNSafeHandle read get_Handle;
  end;

  TDNThreadPoolBoundHandle = class(TDNGenericImport<DNThreadPoolBoundHandleClass, DNThreadPoolBoundHandle>) end;

  //-------------namespace: System.Threading----------------
  DNTimeoutClass = interface(DNObjectClass)
  ['{AE0AC198-8F86-4417-B5C9-4B0BFEA781E7}']
  end;

  /// <summary>
  ///   包含指定无限期超时间隔的常数。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Threading.Timeout')]
  DNTimeout = interface(DNObject)
  ['{5A49B766-B474-3501-901E-5BDAC8B48A3D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTimeout = class(TDNGenericImport<DNTimeoutClass, DNTimeout>) end;

  //-------------namespace: System.Threading----------------
  DNVolatileClass = interface(DNObjectClass)
  ['{59E2665E-7759-4A04-933C-326823A00914}']
  { static methods } 

    {class} function Read(out location: Boolean): Boolean; overload;
    {class} function Read(out location: SByte): SByte; overload;
    {class} function Read(out location: Byte): Byte; overload;
    {class} function Read(out location: Int16): Int16; overload;
    {class} function Read(out location: UInt16): UInt16; overload;
    {class} function Read(out location: Int32): Int32; overload;
    {class} function Read(out location: UInt32): UInt32; overload;
    {class} function Read(out location: Int64): Int64; overload;
    {class} function Read(out location: UInt64): UInt64; overload;
    {class} function Read(out location: IntPtr): IntPtr; overload;
    {class} function Read(out location: UIntPtr): UIntPtr; overload;
    {class} function Read(out location: Single): Single; overload;
    {class} function Read(out location: Double): Double; overload;
    {class} procedure Write(out location: Boolean; value: Boolean); overload;
    {class} procedure Write(out location: SByte; value: SByte); overload;
    {class} procedure Write(out location: Byte; value: Byte); overload;
    {class} procedure Write(out location: Int16; value: Int16); overload;
    {class} procedure Write(out location: UInt16; value: UInt16); overload;
    {class} procedure Write(out location: Int32; value: Int32); overload;
    {class} procedure Write(out location: UInt32; value: UInt32); overload;
    {class} procedure Write(out location: Int64; value: Int64); overload;
    {class} procedure Write(out location: UInt64; value: UInt64); overload;
    {class} procedure Write(out location: IntPtr; value: IntPtr); overload;
    {class} procedure Write(out location: UIntPtr; value: UIntPtr); overload;
    {class} procedure Write(out location: Single; value: Single); overload;
    {class} procedure Write(out location: Double; value: Double); overload;

  end;

  /// <summary>
  ///   包含用于执行可变内存操作的方法。
  /// </summary>
  [DNTypeName('System.Threading.Volatile')]
  DNVolatile = interface(DNObject)
  ['{4DF6D5FA-51BB-39D0-81CA-6FC7EFF274B0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNVolatile = class(TDNGenericImport<DNVolatileClass, DNVolatile>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleExtensionsClass = interface(DNObjectClass)
  ['{36FCFC38-37D3-4064-9A93-F11BF6927D0E}']
  { static methods } 

    /// <summary>
    ///   获取本机操作系统等待句柄的安全句柄。
    /// </summary>
    {class} function GetSafeWaitHandle(waitHandle: DNWaitHandle): DNSafeWaitHandle;
    /// <summary>
    ///   设置本机操作系统等待句柄的安全句柄。
    /// </summary>
    {class} procedure SetSafeWaitHandle(waitHandle: DNWaitHandle; value: DNSafeWaitHandle);

  end;

  /// <summary>
  ///   提供针对 wait 句柄使用 safe 句柄的简便方法。
  /// </summary>
  [DNTypeName('System.Threading.WaitHandleExtensions')]
  DNWaitHandleExtensions = interface(DNObject)
  ['{E23D357E-F371-3D98-B8BE-433227B80BF0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNWaitHandleExtensions = class(TDNGenericImport<DNWaitHandleExtensionsClass, DNWaitHandleExtensions>) end;

  //-------------namespace: System----------------
  DNTimeZoneClass = interface(DNObjectClass)
  ['{EAEAC476-A0CE-42A5-B995-079E87BF028A}']
  { static getter & setter } 

    {class} function get_CurrentTimeZone: DNTimeZone;

  { static methods } 

    /// <summary>
    ///   返回一个值，该值指定的日期和时间是否在指定夏时制期内。
    /// </summary>
    {class} function IsDaylightSavingTime(time: DNDateTime; daylightTimes: DNDaylightTime): Boolean; overload;

  { static propertys } 

    /// <summary>
    ///   获取当前计算机的时区。
    /// </summary>
    {class} property CurrentTimeZone: DNTimeZone read get_CurrentTimeZone;
  end;

  /// <summary>
  ///   表示一个时区。
  /// </summary>
  [DNTypeName('System.TimeZone')]
  DNTimeZone = interface(DNObject)
  ['{543C0DD8-A713-3777-B01A-AEB801DAC001}']
  { getter & setter } 

    function get_StandardName: string;
    function get_DaylightName: string;

  { methods } 

    /// <summary>
    ///   将返回指向指定的时间对应的协调世界时 (UTC)。
    /// </summary>
    function ToUniversalTime(time: DNDateTime): DNDateTime;
    /// <summary>
    ///   返回指定的日期和时间值所对应的本地时间。
    /// </summary>
    function ToLocalTime(time: DNDateTime): DNDateTime;
    /// <summary>
    ///   返回一个值，该值指示指定的日期和时间是否处于夏时制期间。
    /// </summary>
    function IsDaylightSavingTime(time: DNDateTime): Boolean; overload;
    /// <summary>
    ///   返回指定的本地时间的协调世界时 (UTC) 偏移量。
    /// </summary>
    function GetUtcOffset(time: DNDateTime): DNTimeSpan;
    /// <summary>
    ///   返回特定年份的夏时制期间。
    /// </summary>
    function GetDaylightChanges(year: Int32): DNDaylightTime;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取标准时区名称。
    /// </summary>
    property StandardName: string read get_StandardName;
    /// <summary>
    ///   获取夏时制时区名称。
    /// </summary>
    property DaylightName: string read get_DaylightName;
  end;

  TDNTimeZone = class(TDNGenericImport<DNTimeZoneClass, DNTimeZone>) end;

  //-------------namespace: System----------------
  DNTimeZoneInfoClass = interface(DNObjectClass)
  ['{95EF1FA6-CC87-4826-8224-905653A197EA}']
  { static getter & setter } 

    {class} function get_Local: DNTimeZoneInfo;
    {class} function get_Utc: DNTimeZoneInfo;

  { static methods } 

    /// <summary>
    ///   清除已缓存的时区数据。
    /// </summary>
    {class} procedure ClearCachedData;
    /// <summary>
    ///   根据时区标识符将时间转换为另一时区中的时间。
    /// </summary>
    {class} function ConvertTimeBySystemTimeZoneId(dateTimeOffset: DNDateTimeOffset; destinationTimeZoneId: string): DNDateTimeOffset; overload;
    /// <summary>
    ///   根据时区标识符将时间转换为另一时区中的时间。
    /// </summary>
    {class} function ConvertTimeBySystemTimeZoneId(dateTime: DNDateTime; destinationTimeZoneId: string): DNDateTime; overload;
    /// <summary>
    ///   根据时区标识符将时间从一个时区转换到另一个时区。
    /// </summary>
    {class} function ConvertTimeBySystemTimeZoneId(dateTime: DNDateTime; sourceTimeZoneId: string; destinationTimeZoneId: string): DNDateTime; overload;
    /// <summary>
    ///   将时间转换为特定时区的时间。
    /// </summary>
    {class} function ConvertTime(dateTimeOffset: DNDateTimeOffset; destinationTimeZone: DNTimeZoneInfo): DNDateTimeOffset; overload;
    /// <summary>
    ///   将时间转换为特定时区的时间。
    /// </summary>
    {class} function ConvertTime(dateTime: DNDateTime; destinationTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    /// <summary>
    ///   将时间从一个时区转换到另一个时区。
    /// </summary>
    {class} function ConvertTime(dateTime: DNDateTime; sourceTimeZone: DNTimeZoneInfo; destinationTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    /// <summary>
    ///   将协调世界时 (UTC) 转换为指定时区中的时间。
    /// </summary>
    {class} function ConvertTimeFromUtc(dateTime: DNDateTime; destinationTimeZone: DNTimeZoneInfo): DNDateTime;
    /// <summary>
    ///   将指定的日期和时间转换为协调世界时 (UTC)。
    /// </summary>
    {class} function ConvertTimeToUtc(dateTime: DNDateTime): DNDateTime; overload;
    /// <summary>
    ///   将指定时区中的时间转换为协调世界时 (UTC)。
    /// </summary>
    {class} function ConvertTimeToUtc(dateTime: DNDateTime; sourceTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    /// <summary>
    ///   反序列化一个字符串，以重新创建原始的已序列化的  对象。
    /// </summary>
    {class} function FromSerializedString(source: string): DNTimeZoneInfo;
    /// <summary>
    ///   创建带指定标识符的自定义时区、与协调世界时 (UTC) 的偏移量、显示名称以及标准时间显示名称。
    /// </summary>
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string): DNTimeZoneInfo; overload;
    /// <summary>
    ///   创建带指定标识符的自定义时区、与协调世界时 (UTC) 的偏移量、显示名称、标准时间名称、夏时制名称和夏时制规则。
    /// </summary>
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string; daylightDisplayName: string; adjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>): DNTimeZoneInfo; overload;
    /// <summary>
    ///   创建带指定标识符的自定义时区、与协调世界时 (UTC) 的偏移量、显示名称、标准时间名称、夏令制名称、夏令制规则以及指示返回的对象是否反映夏令制信息的值。
    /// </summary>
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string; daylightDisplayName: string; adjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>; disableDaylightSavingTime: Boolean): DNTimeZoneInfo; overload;
    /// <summary>
    ///   根据其标识符从注册表中检索  对象。
    /// </summary>
    {class} function FindSystemTimeZoneById(id: string): DNTimeZoneInfo;

  { static propertys } 

    /// <summary>
    ///   获取表示本地时区的  对象。
    /// </summary>
    {class} property Local: DNTimeZoneInfo read get_Local;
    /// <summary>
    ///   获取表示协调世界时 (UTC) 区域的  对象。
    /// </summary>
    {class} property Utc: DNTimeZoneInfo read get_Utc;
  end;

  /// <summary>
  ///   表示世界上的任何时区。
  /// </summary>
  [DNTypeName('System.TimeZoneInfo')]
  DNTimeZoneInfo = interface(DNObject)
  ['{EA7C5B9E-398B-3E4D-B922-D2C395F3EFA2}']
  { getter & setter } 

    function get_Id: string;
    function get_DisplayName: string;
    function get_StandardName: string;
    function get_DaylightName: string;
    function get_BaseUtcOffset: DNTimeSpan;
    function get_SupportsDaylightSavingTime: Boolean;

  { methods } 

    /// <summary>
    ///   检索应用至当前  对象的  对象的数组。
    /// </summary>
    function GetAdjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>;
    /// <summary>
    ///   返回不明确的日期和时间可能映射到的日期和时间的相关信息。
    /// </summary>
    function GetAmbiguousTimeOffsets(dateTimeOffset: DNDateTimeOffset): TArray<DNTimeSpan>; overload;
    /// <summary>
    ///   返回不明确的日期和时间可能映射到的日期和时间的相关信息。
    /// </summary>
    function GetAmbiguousTimeOffsets(dateTime: DNDateTime): TArray<DNTimeSpan>; overload;
    /// <summary>
    ///   计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。
    /// </summary>
    function GetUtcOffset(dateTimeOffset: DNDateTimeOffset): DNTimeSpan; overload;
    /// <summary>
    ///   计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。
    /// </summary>
    function GetUtcOffset(dateTime: DNDateTime): DNTimeSpan; overload;
    /// <summary>
    ///   确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。
    /// </summary>
    function IsAmbiguousTime(dateTimeOffset: DNDateTimeOffset): Boolean; overload;
    /// <summary>
    ///   确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。
    /// </summary>
    function IsAmbiguousTime(dateTime: DNDateTime): Boolean; overload;
    /// <summary>
    ///   指示指定的日期和时间是否处于当前  对象时区的夏令制范围内。
    /// </summary>
    function IsDaylightSavingTime(dateTimeOffset: DNDateTimeOffset): Boolean; overload;
    /// <summary>
    ///   指示指定的日期和时间是否处于当前  对象时区的夏令制范围内。
    /// </summary>
    function IsDaylightSavingTime(dateTime: DNDateTime): Boolean; overload;
    /// <summary>
    ///   指示特定日期和时间是否无效。
    /// </summary>
    function IsInvalidTime(dateTime: DNDateTime): Boolean;
    /// <summary>
    ///   确定当前的  对象和另一个  对象是否相等。
    /// </summary>
    function Equals(other: DNTimeZoneInfo): Boolean; overload;
    /// <summary>
    ///   确定当前的  对象和另一个对象是否相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   用作哈希算法的哈希函数和数据结构（如哈希表）。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   指示当前对象和另一个  对象是否具有相同的调整规则。
    /// </summary>
    function HasSameRules(other: DNTimeZoneInfo): Boolean;
    /// <summary>
    ///   将当前的  对象转换为序列化字符串。
    /// </summary>
    function ToSerializedString: string;
    /// <summary>
    ///   返回当前  对象的显示名称。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取时区标识符。
    /// </summary>
    property Id: string read get_Id;
    /// <summary>
    ///   获取表示时区的一般显示名称。
    /// </summary>
    property DisplayName: string read get_DisplayName;
    /// <summary>
    ///   获取时区的标准时间的显示名称。
    /// </summary>
    property StandardName: string read get_StandardName;
    /// <summary>
    ///   获取当前时区的夏令时的显示名称。
    /// </summary>
    property DaylightName: string read get_DaylightName;
    /// <summary>
    ///   获取当前时区的标准时间与协调世界时 (UTC) 之间的时差。
    /// </summary>
    property BaseUtcOffset: DNTimeSpan read get_BaseUtcOffset;
    /// <summary>
    ///   获取一个值，该值指示时区是否具有任何夏令制规则。
    /// </summary>
    property SupportsDaylightSavingTime: Boolean read get_SupportsDaylightSavingTime;
  end;

  TDNTimeZoneInfo = class(TDNGenericImport<DNTimeZoneInfoClass, DNTimeZoneInfo>) end;

  //-------------namespace: System----------------
  DNTimeZoneInfo_AdjustmentRuleClass = interface(DNObjectClass)
  ['{210678A7-91DF-4443-8F38-897FD2754B43}']
  { static methods } 

    /// <summary>
    ///   为特定时区创建新调整规则。
    /// </summary>
    {class} function CreateAdjustmentRule(dateStart: DNDateTime; dateEnd: DNDateTime; daylightDelta: DNTimeSpan; daylightTransitionStart: DNTimeZoneInfo_TransitionTime; daylightTransitionEnd: DNTimeZoneInfo_TransitionTime): DNTimeZoneInfo_AdjustmentRule;

  end;

  /// <summary>
  ///   提供有关时区调整的信息，例如与夏令时的相互转换。
  /// </summary>
  [DNTypeName('System.TimeZoneInfo+AdjustmentRule')]
  DNTimeZoneInfo_AdjustmentRule = interface(DNObject)
  ['{176A2F1E-15CA-3553-AB42-BBCE66C3713E}']
  { getter & setter } 

    function get_DateStart: DNDateTime;
    function get_DateEnd: DNDateTime;
    function get_DaylightDelta: DNTimeSpan;
    function get_DaylightTransitionStart: DNTimeZoneInfo_TransitionTime;
    function get_DaylightTransitionEnd: DNTimeZoneInfo_TransitionTime;

  { methods } 

    /// <summary>
    ///   确定当前  对象是否等于第二个  对象。
    /// </summary>
    function Equals(other: DNTimeZoneInfo_AdjustmentRule): Boolean; overload;
    /// <summary>
    ///   用作哈希算法的哈希函数和数据结构（如哈希表）。
    /// </summary>
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取调整规则生效的日期。
    /// </summary>
    property DateStart: DNDateTime read get_DateStart;
    /// <summary>
    ///   获取调整规则失效的日期。
    /// </summary>
    property DateEnd: DNDateTime read get_DateEnd;
    /// <summary>
    ///   获取构成时区的夏令时所需的时间量。
    ///               将此时间量从协调世界时 (UTC) 添加到时区偏移量。
    /// </summary>
    property DaylightDelta: DNTimeSpan read get_DaylightDelta;
    /// <summary>
    ///   获取有关每年何时从标准时间转换为夏时制的信息。
    /// </summary>
    property DaylightTransitionStart: DNTimeZoneInfo_TransitionTime read get_DaylightTransitionStart;
    /// <summary>
    ///   获取有关每年何时从夏时制转换回标准时间的信息。
    /// </summary>
    property DaylightTransitionEnd: DNTimeZoneInfo_TransitionTime read get_DaylightTransitionEnd;
  end;

  TDNTimeZoneInfo_AdjustmentRule = class(TDNGenericImport<DNTimeZoneInfo_AdjustmentRuleClass, DNTimeZoneInfo_AdjustmentRule>) end;

  //-------------namespace: System----------------
  DNTupleClass = interface(DNObjectClass)
  ['{6808226B-E292-445F-B43A-F34A8CFEC6F3}']
  end;

  /// <summary>
  ///   提供用于创造元组对象的静态方法。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
  /// </summary>
  [DNTypeName('System.Tuple')]
  DNTuple = interface(DNObject)
  ['{B6EFDCC2-6386-375E-84AA-6732B6518B3F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTuple = class(TDNGenericImport<DNTupleClass, DNTuple>) end;

  //-------------namespace: System----------------
  DNTupleExtensionsClass = interface(DNObjectClass)
  ['{E24A2A3C-E13A-4A3A-B5F6-6575286DDE6F}']
  end;

  /// <summary>
  ///   提供元组用于与 C# 中的元组的语言支持进行互操作的扩展方法。
  /// </summary>
  [DNTypeName('System.TupleExtensions')]
  DNTupleExtensions = interface(DNObject)
  ['{A4409B28-2A1E-3FB1-95E3-320B6499E58D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTupleExtensions = class(TDNGenericImport<DNTupleExtensionsClass, DNTupleExtensions>) end;

  //-------------namespace: System----------------
  DNValueTypeClass = interface(DNObjectClass)
  ['{9F60F889-97AA-40C8-8B19-9D8C4FDAE44D}']
  end;

  /// <summary>
  ///   为值类型提供基类。
  /// </summary>
  [DNTypeName('System.ValueType')]
  DNValueType = interface(DNObject)
  ['{CE8AD32F-B6DB-31EA-9F1E-C2424E0F5EEE}']
  { methods } 

    /// <summary>
    ///   指示此实例与指定对象是否相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的完全限定类型名称。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNValueType = class(TDNGenericImport<DNValueTypeClass, DNValueType>) end;

  //-------------namespace: System----------------
  DNArgIteratorClass = interface(DNValueTypeClass)
  ['{8067B5DB-925B-4CDD-B5D4-E9D15C7CDC82}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例结构使用指定的参数列表。
    /// </summary>
    {class} function init(arglist: DNRuntimeArgumentHandle): DNArgIterator; overload;
    /// <summary>
    ///   初始化的新实例结构使用指定的参数列表和指向某个项的列表中。
    /// </summary>
    {class} function init(arglist: DNRuntimeArgumentHandle; var ptr: DNVoid): DNArgIterator; overload;

  end;

  /// <summary>
  ///   表示可变长度参数列表;也就是说，函数的参数，采用数量可变的自变量。
  /// </summary>
  [DNTypeName('System.ArgIterator')]
  DNArgIterator = interface(DNValueType)
  ['{B0E32349-8F96-3CA4-B0CA-5353911C33B9}']
  { methods } 

    /// <summary>
    ///   可变长度参数列表中返回的下一个参数。
    /// </summary>
    function GetNextArg: DNTypedReference; overload;
    /// <summary>
    ///   返回具有指定的类型的变量长度参数列表中的下一个参数。
    /// </summary>
    function GetNextArg(rth: DNRuntimeTypeHandle): DNTypedReference; overload;
    /// <summary>
    ///   最后处理的此实例所表示的可变长度参数列表。
    /// </summary>
    procedure &End;
    /// <summary>
    ///   返回下一个参数的类型。
    /// </summary>
    function GetNextArgType: DNRuntimeTypeHandle;
    /// <summary>
    ///   返回此对象的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   此方法不受支持，并且总是引发 。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    /// <summary>
    ///   返回参数列表中剩余的参数的数目。
    /// </summary>
    function GetRemainingCount: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNArgIterator = class(TDNGenericImport<DNArgIteratorClass, DNArgIterator>) end;

  //-------------namespace: System.Collections----------------
  DNDictionaryEntryClass = interface(DNValueTypeClass)
  ['{ED46C9D7-5943-4C63-AB45-43D45269358A}']
  { constructors } 

    /// <summary>
    ///   初始化的实例  具有指定的键和值类型。
    /// </summary>
    {class} function init(key: DNObject; value: DNObject): DNDictionaryEntry;

  end;

  /// <summary>
  ///   定义可设置或检索的字典键/值对。
  /// </summary>
  [DNTypeName('System.Collections.DictionaryEntry')]
  DNDictionaryEntry = interface(DNValueType)
  ['{A6CCEB32-EC73-3E9B-8852-02783C97D3FA}']
  { getter & setter } 

    function get_Key: DNObject;
    procedure set_Key(value: DNObject);
    function get_Value: DNObject;
    procedure set_Value(value: DNObject);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置键/值对中的键。
    /// </summary>
    property Key: DNObject read get_Key write set_Key;
    /// <summary>
    ///   获取或设置键/值对中的值。
    /// </summary>
    property Value: DNObject read get_Value write set_Value;
  end;

  TDNDictionaryEntry = class(TDNGenericImport<DNDictionaryEntryClass, DNDictionaryEntry>) end;

  //-------------namespace: System.Configuration.Assemblies----------------
  DNAssemblyHashClass = interface(DNValueTypeClass)
  ['{1C04989F-5CD1-43F3-86E2-AD7D7ED554B5}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  结构具有指定哈希值。
    ///               哈希算法将默认为 。
    /// </summary>
    {class} function init(value: TArray<Byte>): DNAssemblyHash; overload;
    /// <summary>
    ///   新实例初始化  结构具有指定的哈希算法和哈希值。
    /// </summary>
    {class} function init(algorithm: DNAssemblyHashAlgorithm; value: TArray<Byte>): DNAssemblyHash; overload;

  end;

  /// <summary>
  ///   表示程序集清单内容的哈希值。
  /// </summary>
  [DNTypeName('System.Configuration.Assemblies.AssemblyHash')]
  DNAssemblyHash = interface(DNValueType)
  ['{42A66664-072F-3A67-A189-7D440709A77E}']
  { getter & setter } 

    function get_Algorithm: DNAssemblyHashAlgorithm;
    procedure set_Algorithm(value: DNAssemblyHashAlgorithm);

  { methods } 

    /// <summary>
    ///   获取哈希值。
    /// </summary>
    function GetValue: TArray<Byte>;
    /// <summary>
    ///   设置的哈希值。
    /// </summary>
    procedure SetValue(value: TArray<Byte>);
    /// <summary>
    ///   克隆该对象。
    /// </summary>
    function Clone: DNObject;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置哈希算法。
    /// </summary>
    property Algorithm: DNAssemblyHashAlgorithm read get_Algorithm write set_Algorithm;
  end;

  TDNAssemblyHash = class(TDNGenericImport<DNAssemblyHashClass, DNAssemblyHash>) end;

  //-------------namespace: System----------------
  DNConsoleKeyInfoClass = interface(DNValueTypeClass)
  ['{0CEFA139-15FF-41CC-989C-7FA1E5DDFE01}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例结构使用指定的字符、 控制台键和修改键。
    /// </summary>
    {class} function init(keyChar: Char; key: DNConsoleKey; shift: Boolean; alt: Boolean; control: Boolean): DNConsoleKeyInfo;

  end;

  /// <summary>
  ///   描述已按下，包括由控制台键和 SHIFT、 ALT 和 CTRL 修改键的状态表示的字符的控制台键。
  /// </summary>
  [DNTypeName('System.ConsoleKeyInfo')]
  DNConsoleKeyInfo = interface(DNValueType)
  ['{188164B7-0CD9-3BC0-A3B0-9311B0BD16FF}']
  { getter & setter } 

    function get_KeyChar: Char;
    function get_Key: DNConsoleKey;
    function get_Modifiers: DNConsoleModifiers;

  { methods } 

    /// <summary>
    ///   获取一个值，该值指示指定的对象是否等于当前的  对象。
    /// </summary>
    function Equals(value: DNObject): Boolean; overload;
    /// <summary>
    ///   获取一个值，该值指示指定的  对象是否等于当前  对象。
    /// </summary>
    function Equals(obj: DNConsoleKeyInfo): Boolean; overload;
    /// <summary>
    ///   返回当前  对象的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取由当前的 Unicode 字符对象。
    /// </summary>
    property KeyChar: Char read get_KeyChar;
    /// <summary>
    ///   获取由当前的控制台键对象。
    /// </summary>
    property Key: DNConsoleKey read get_Key;
    /// <summary>
    ///   获取的按位组合控制台键的同时按住指定一个或多个修改键的值。
    /// </summary>
    property Modifiers: DNConsoleModifiers read get_Modifiers;
  end;

  TDNConsoleKeyInfo = class(TDNGenericImport<DNConsoleKeyInfoClass, DNConsoleKeyInfo>) end;

  //-------------namespace: System----------------
  DNDateTimeClass = interface(DNValueTypeClass)
  ['{20791765-3036-4D50-807B-8DE778CB6671}']
  { static getter & setter } 

    {class} function get_Now: DNDateTime;
    {class} function get_UtcNow: DNDateTime;
    {class} function get_Today: DNDateTime;

  { constructors } 

    /// <summary>
    ///   将  结构的新实例初始化为指定的刻度数。
    /// </summary>
    {class} function init(ticks: Int64): DNDateTime; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定的计时周期数以及协调世界时 (UTC) 或本地时间。
    /// </summary>
    {class} function init(ticks: Int64; kind: DNDateTimeKind): DNDateTime; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定的年、月和日。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32): DNDateTime; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定日历的指定年、月和日。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; calendar: DNCalendar): DNDateTime; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定的年、月、日、小时、分钟和秒。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32): DNDateTime; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定年、月、日、小时、分钟、秒和协调世界时 (UTC) 或本地时间。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; kind: DNDateTimeKind): DNDateTime; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定日历的年、月、日、小时、分钟和秒。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; calendar: DNCalendar): DNDateTime; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定的年、月、日、小时、分钟、秒和毫秒。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定年、月、日、小时、分钟、秒、毫秒和协调世界时 (UTC) 或本地时间。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; kind: DNDateTimeKind): DNDateTime; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定日历的指定年、月、日、小时、分钟、秒和毫秒。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar): DNDateTime; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定日历的指定年、月、日、小时、分钟、秒、毫秒和协调世界时 (UTC) 或本地时间。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar; kind: DNDateTimeKind): DNDateTime; overload;

  { static methods } 

    /// <summary>
    ///   对两个  的实例进行比较，并返回一个指示第一个实例是早于、等于还是晚于第二个实例的整数。
    /// </summary>
    {class} function Compare(t1: DNDateTime; t2: DNDateTime): Int32;
    /// <summary>
    ///   返回指定年和月中的天数。
    /// </summary>
    {class} function DaysInMonth(year: Int32; month: Int32): Int32;
    /// <summary>
    ///   返回一个值，该值指示的两个  实例是否具有同一个日期和时间值。
    /// </summary>
    {class} function Equals(t1: DNDateTime; t2: DNDateTime): Boolean; overload;
    /// <summary>
    ///   反序列化一个 64 位二进制值，并重新创建序列化的  初始对象。
    /// </summary>
    {class} function FromBinary(dateData: Int64): DNDateTime;
    /// <summary>
    ///   将指定的 Windows 文件时间转换为等效的本地时间。
    /// </summary>
    {class} function FromFileTime(fileTime: Int64): DNDateTime;
    /// <summary>
    ///   将指定的 Windows 文件时间转换为等效的 UTC 时间。
    /// </summary>
    {class} function FromFileTimeUtc(fileTime: Int64): DNDateTime;
    /// <summary>
    ///   返回与指定的 OLE 自动化日期等效的 。
    /// </summary>
    {class} function FromOADate(d: Double): DNDateTime;
    /// <summary>
    ///   创建新的  对象，该对象具有与指定的  相同的刻度数，但是根据指定的  值的指示，指定为本地时间或协调世界时 (UTC)，或者两者皆否。
    /// </summary>
    {class} function SpecifyKind(value: DNDateTime; kind: DNDateTimeKind): DNDateTime;
    /// <summary>
    ///   返回指定的年份是否为闰年的指示。
    /// </summary>
    {class} function IsLeapYear(year: Int32): Boolean;
    /// <summary>
    ///   将日期和时间的字符串表示形式转换为其等效的 。
    /// </summary>
    {class} function Parse(s: string): DNDateTime; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息，将日期和时间的字符串表示形式转换为其等效的 。
    /// </summary>
    {class} function Parse(s: string; provider: DNIFormatProvider): DNDateTime; overload;
    /// <summary>
    ///   使用指定的格式和区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 。
    ///               字符串表示形式的格式必须与指定的格式完全匹配。
    /// </summary>
    {class} function ParseExact(s: string; format: string; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function TryParse(s: string; out result: DNDateTime): Boolean; overload;
    /// <summary>
    ///   使用指定的区域性特定格式设置信息和格式类型，将日期和时间的字符串表示形式转换为其等效的 。
    /// </summary>
    {class} function Parse(s: string; provider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTime; overload;
    /// <summary>
    ///   使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 。
    ///               字符串表示形式的格式必须与指定的格式完全匹配，否则会引发异常。
    /// </summary>
    {class} function ParseExact(s: string; format: string; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function TryParseExact(s: string; format: string; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParseExact(s: string; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    /// <summary>
    ///   使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 。
    ///               字符串表示形式的格式必须至少与指定的格式之一完全匹配，否则会引发异常。
    /// </summary>
    {class} function ParseExact(s: string; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function TryParse(s: string; provider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;

  { static propertys } 

    /// <summary>
    ///   获取一个  对象，该对象设置为此计算机上的当前日期和时间，表示为本地时间。
    /// </summary>
    {class} property Now: DNDateTime read get_Now;
    /// <summary>
    ///   获取一个  对象，该对象设置为此计算机上的当前日期和时间，表示为协调通用时间 (UTC)。
    /// </summary>
    {class} property UtcNow: DNDateTime read get_UtcNow;
    /// <summary>
    ///   获取当前日期。
    /// </summary>
    {class} property Today: DNDateTime read get_Today;
  end;

  /// <summary>
  ///   表示时间上的一刻，通常以日期和当天的时间表示。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅Reference Source。
  /// </summary>
  [DNTypeName('System.DateTime')]
  DNDateTime = interface(DNValueType)
  ['{C48BFDF5-A271-384B-BF13-BD21D931C1BF}']
  { getter & setter } 

    function get_Date: DNDateTime;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_DayOfYear: Int32;
    function get_Hour: Int32;
    function get_Kind: DNDateTimeKind;
    function get_Millisecond: Int32;
    function get_Minute: Int32;
    function get_Month: Int32;
    function get_Second: Int32;
    function get_Ticks: Int64;
    function get_TimeOfDay: DNTimeSpan;
    function get_Year: Int32;

  { methods } 

    /// <summary>
    ///   返回一个新的 ，它将指定  的值添加到此实例的值上。
    /// </summary>
    function Add(value: DNTimeSpan): DNDateTime;
    /// <summary>
    ///   返回一个新的 ，它将指定的天数加到此实例的值上。
    /// </summary>
    function AddDays(value: Double): DNDateTime;
    /// <summary>
    ///   返回一个新的 ，它将指定的小时数加到此实例的值上。
    /// </summary>
    function AddHours(value: Double): DNDateTime;
    /// <summary>
    ///   返回一个新的 ，它将指定的毫秒数加到此实例的值上。
    /// </summary>
    function AddMilliseconds(value: Double): DNDateTime;
    /// <summary>
    ///   返回一个新的 ，它将指定的分钟数加到此实例的值上。
    /// </summary>
    function AddMinutes(value: Double): DNDateTime;
    /// <summary>
    ///   返回一个新的 ，它将指定的月数加到此实例的值上。
    /// </summary>
    function AddMonths(months: Int32): DNDateTime;
    /// <summary>
    ///   返回一个新的 ，它将指定的秒数加到此实例的值上。
    /// </summary>
    function AddSeconds(value: Double): DNDateTime;
    /// <summary>
    ///   返回一个新的 ，它将指定的刻度数加到此实例的值上。
    /// </summary>
    function AddTicks(value: Int64): DNDateTime;
    /// <summary>
    ///   返回一个新的 ，它将指定的年份数加到此实例的值上。
    /// </summary>
    function AddYears(value: Int32): DNDateTime;
    /// <summary>
    ///   将此实例的值与包含指定的  值的指定对象相比较，并返回一个整数，该整数指示此实例是早于、等于还是晚于指定的  值。
    /// </summary>
    function CompareTo(value: DNObject): Int32; overload;
    /// <summary>
    ///   将此实例的值与指定的  值相比较，并返回一个整数，该整数指示此实例是早于、等于还是晚于指定的  值。
    /// </summary>
    function CompareTo(value: DNDateTime): Int32; overload;
    /// <summary>
    ///   返回一个值，该值指示此实例是否等于指定的对象。
    /// </summary>
    function Equals(value: DNObject): Boolean; overload;
    /// <summary>
    ///   返回一个值，该值指示此实例的值是否等于指定  实例的值。
    /// </summary>
    function Equals(value: DNDateTime): Boolean; overload;
    /// <summary>
    ///   指示此  实例是否在当前时区的夏时制范围内。
    /// </summary>
    function IsDaylightSavingTime: Boolean;
    /// <summary>
    ///   将当前  对象序列化为一个 64 位二进制值，该值随后可用于重新创建  对象。
    /// </summary>
    function ToBinary: Int64;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   从此实例中减去指定的日期和时间。
    /// </summary>
    function Subtract(value: DNDateTime): DNTimeSpan; overload;
    /// <summary>
    ///   从此实例中减去指定持续时间。
    /// </summary>
    function Subtract(value: DNTimeSpan): DNDateTime; overload;
    /// <summary>
    ///   将此实例的值转换为等效的 OLE 自动化日期。
    /// </summary>
    function ToOADate: Double;
    /// <summary>
    ///   将当前  对象的值转换为 Windows 文件时间。
    /// </summary>
    function ToFileTime: Int64;
    /// <summary>
    ///   将当前  对象的值转换为 Windows 文件时间。
    /// </summary>
    function ToFileTimeUtc: Int64;
    /// <summary>
    ///   将当前  对象的值转换为本地时间。
    /// </summary>
    function ToLocalTime: DNDateTime;
    /// <summary>
    ///   使用当前的区域性格式约定将当前  对象的值转换为它的等效字符串表示形式。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   使用指定的格式和当前区域性的格式约定将当前  对象的值转换为它的等效字符串表示形式。
    /// </summary>
    function ToString(format: string): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息将当前  对象的值转换为它的等效字符串表示形式。
    /// </summary>
    function ToString(provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   使用指定的格式和区域性特定格式信息将当前  对象的值转换为它的等效字符串表示形式。
    /// </summary>
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将当前  对象的值转换为协调世界时 (UTC)。
    /// </summary>
    function ToUniversalTime: DNDateTime;
    /// <summary>
    ///   将此实例的值转换为标准日期和时间格式说明符支持的所有字符串表示形式。
    /// </summary>
    function GetDateTimeFormats: TArray<string>; overload;
    /// <summary>
    ///   将此实例的值转换为标准日期和时间格式说明符和指定的区域性特定格式信息支持的所有字符串表示形式。
    /// </summary>
    function GetDateTimeFormats(provider: DNIFormatProvider): TArray<string>; overload;
    /// <summary>
    ///   将此实例的值转换为指定的标准日期和时间格式说明符支持的所有字符串表示形式。
    /// </summary>
    function GetDateTimeFormats(format: Char): TArray<string>; overload;
    /// <summary>
    ///   将此实例的值转换为指定的标准日期和时间格式说明符和区域性特定格式信息支持的所有字符串表示形式。
    /// </summary>
    function GetDateTimeFormats(format: Char; provider: DNIFormatProvider): TArray<string>; overload;
    /// <summary>
    ///   返回值类型  的 。
    /// </summary>
    function GetTypeCode: DNTypeCode;
    /// <summary>
    ///   将当前  对象的值转换为其等效的长日期字符串表示形式。
    /// </summary>
    function ToLongDateString: string;
    /// <summary>
    ///   将当前  对象的值转换为其等效的长时间字符串表示形式。
    /// </summary>
    function ToLongTimeString: string;
    /// <summary>
    ///   将当前  对象的值转换为其等效的短时间字符串表示形式。
    /// </summary>
    function ToShortTimeString: string;
    /// <summary>
    ///   将当前  对象的值转换为其等效的短日期字符串表示形式。
    /// </summary>
    function ToShortDateString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取此实例的日期部分。
    /// </summary>
    property Date: DNDateTime read get_Date;
    /// <summary>
    ///   获取此实例所表示的日期为该月中的第几天。
    /// </summary>
    property Day: Int32 read get_Day;
    /// <summary>
    ///   获取此实例所表示的日期是星期几。
    /// </summary>
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    /// <summary>
    ///   获取此实例所表示的日期是该年中的第几天。
    /// </summary>
    property DayOfYear: Int32 read get_DayOfYear;
    /// <summary>
    ///   获取此实例所表示日期的小时部分。
    /// </summary>
    property Hour: Int32 read get_Hour;
    /// <summary>
    ///   获取一个值，该值指示由此实例表示的时间是基于本地时间、协调世界时 (UTC)，还是两者皆否。
    /// </summary>
    property Kind: DNDateTimeKind read get_Kind;
    /// <summary>
    ///   获取此实例所表示日期的毫秒部分。
    /// </summary>
    property Millisecond: Int32 read get_Millisecond;
    /// <summary>
    ///   获取此实例所表示日期的分钟部分。
    /// </summary>
    property Minute: Int32 read get_Minute;
    /// <summary>
    ///   获取此实例所表示日期的月份部分。
    /// </summary>
    property Month: Int32 read get_Month;
    /// <summary>
    ///   获取此实例所表示日期的秒部分。
    /// </summary>
    property Second: Int32 read get_Second;
    /// <summary>
    ///   获取表示此实例的日期和时间的计时周期数。
    /// </summary>
    property Ticks: Int64 read get_Ticks;
    /// <summary>
    ///   获取此实例的当天的时间。
    /// </summary>
    property TimeOfDay: DNTimeSpan read get_TimeOfDay;
    /// <summary>
    ///   获取此实例所表示日期的年份部分。
    /// </summary>
    property Year: Int32 read get_Year;
  end;

  TDNDateTime = class(TDNGenericImport<DNDateTimeClass, DNDateTime>) end;

  //-------------namespace: System----------------
  DNDateTimeOffsetClass = interface(DNValueTypeClass)
  ['{6214F94E-4FD7-41E2-B4EE-D726E2C1B6DF}']
  { static getter & setter } 

    {class} function get_Now: DNDateTimeOffset;
    {class} function get_UtcNow: DNDateTimeOffset;

  { constructors } 

    /// <summary>
    ///   使用指定的计时周期数和偏移量初始化  结构的新实例。
    /// </summary>
    {class} function init(ticks: Int64; offset: DNTimeSpan): DNDateTimeOffset; overload;
    /// <summary>
    ///   使用指定的  值初始化  结构的新实例。
    /// </summary>
    {class} function init(dateTime: DNDateTime): DNDateTimeOffset; overload;
    /// <summary>
    ///   使用指定的  值和偏移量初始化  结构的新实例。
    /// </summary>
    {class} function init(dateTime: DNDateTime; offset: DNTimeSpan): DNDateTimeOffset; overload;
    /// <summary>
    ///   使用指定的年、月、日、小时、分钟、秒和偏移量初始化  结构的新实例。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; offset: DNTimeSpan): DNDateTimeOffset; overload;
    /// <summary>
    ///   使用指定的年、月、日、小时、分钟、秒、毫秒和偏移量初始化  结构的新实例。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; offset: DNTimeSpan): DNDateTimeOffset; overload;
    /// <summary>
    ///   用指定日历的指定年、月、日、小时、分钟、秒、毫秒和偏移量初始化  结构的新实例。
    /// </summary>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar; offset: DNTimeSpan): DNDateTimeOffset; overload;

  { static methods } 

    /// <summary>
    ///   比较两个对象，并指示第一个是否早于第二个、 等于第二个或更高版本，第二个。
    /// </summary>
    {class} function Compare(first: DNDateTimeOffset; second: DNDateTimeOffset): Int32;
    /// <summary>
    ///   确定两个指定  对象表示的时间相同的点。
    /// </summary>
    {class} function Equals(first: DNDateTimeOffset; second: DNDateTimeOffset): Boolean; overload;
    /// <summary>
    ///   将指定的 Windows 文件时间转换为等效的本地时间。
    /// </summary>
    {class} function FromFileTime(fileTime: Int64): DNDateTimeOffset;
    /// <summary>
    ///   将转换为自 1970 年 1 所经历的秒数表示的 Unix 时间-01-到 01T00:00:00Z值。
    /// </summary>
    {class} function FromUnixTimeSeconds(seconds: Int64): DNDateTimeOffset;
    /// <summary>
    ///   将 Unix 时间表示为自 1970 年 1 经过的毫秒数为-01-到 01T00:00:00Z值。
    /// </summary>
    {class} function FromUnixTimeMilliseconds(milliseconds: Int64): DNDateTimeOffset;
    /// <summary>
    ///   将日期、时间和偏移量的指定字符串表示形式转换为其等效的 。
    /// </summary>
    {class} function Parse(input: string): DNDateTimeOffset; overload;
    /// <summary>
    ///   使用指定的特定于区域性的格式信息，将日期和时间的指定字符串表示形式转换为其等效的 。
    /// </summary>
    {class} function Parse(input: string; formatProvider: DNIFormatProvider): DNDateTimeOffset; overload;
    /// <summary>
    ///   使用指定的格式和区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 。
    ///               字符串表示形式的格式必须与指定的格式完全匹配。
    /// </summary>
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider): DNDateTimeOffset; overload;
    {class} function TryParse(input: string; out result: DNDateTimeOffset): Boolean; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息和格式设置样式将日期和时间的指定字符串表示形式转换为其等效的 。
    /// </summary>
    {class} function Parse(input: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    /// <summary>
    ///   使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 。
    ///               字符串表示形式的格式必须与指定的格式完全匹配。
    /// </summary>
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    /// <summary>
    ///   使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 。
    ///               字符串表示形式的格式必须与一种指定的格式完全匹配。
    /// </summary>
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function TryParse(input: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;

  { static propertys } 

    /// <summary>
    ///   获取一个  对象，该对象设置为当前计算机上的当前日期和时间，偏移量设置为本地时间与协调世界时 (UTC) 之间的偏移量。
    /// </summary>
    {class} property Now: DNDateTimeOffset read get_Now;
    /// <summary>
    ///   获取对象，其日期和时间设置为当前的协调世界时 (UTC) 日期和时间，其偏移量为。
    /// </summary>
    {class} property UtcNow: DNDateTimeOffset read get_UtcNow;
  end;

  /// <summary>
  ///   表示一个时间点，通常以相对于协调世界时 (UTC) 的日期和时间来表示。
  /// </summary>
  [DNTypeName('System.DateTimeOffset')]
  DNDateTimeOffset = interface(DNValueType)
  ['{92F5A917-07B2-36C0-AEF9-3845A093142A}']
  { getter & setter } 

    function get_DateTime: DNDateTime;
    function get_UtcDateTime: DNDateTime;
    function get_LocalDateTime: DNDateTime;
    function get_Date: DNDateTime;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_DayOfYear: Int32;
    function get_Hour: Int32;
    function get_Millisecond: Int32;
    function get_Minute: Int32;
    function get_Month: Int32;
    function get_Offset: DNTimeSpan;
    function get_Second: Int32;
    function get_Ticks: Int64;
    function get_UtcTicks: Int64;
    function get_TimeOfDay: DNTimeSpan;
    function get_Year: Int32;

  { methods } 

    /// <summary>
    ///   将当前的值转换到的日期和时间的偏移量值由指定的对象。
    /// </summary>
    function ToOffset(offset: DNTimeSpan): DNDateTimeOffset;
    /// <summary>
    ///   返回一个新的  对象，它向此实例的值添加指定的时间间隔。
    /// </summary>
    function Add(timeSpan: DNTimeSpan): DNDateTimeOffset;
    /// <summary>
    ///   返回一个新将整数和小数部分组成的天数指定的数加到此实例的值的对象。
    /// </summary>
    function AddDays(days: Double): DNDateTimeOffset;
    /// <summary>
    ///   返回一个新的  对象，它将由整数和小数部分组成的指定小时数添加到此实例的值上。
    /// </summary>
    function AddHours(hours: Double): DNDateTimeOffset;
    /// <summary>
    ///   返回一个新的  对象，它将指定的毫秒数添加到此示例的值上。
    /// </summary>
    function AddMilliseconds(milliseconds: Double): DNDateTimeOffset;
    /// <summary>
    ///   返回一个新的  对象，它将由整数和小数部分组成的指定分钟数添加到此实例的值上。
    /// </summary>
    function AddMinutes(minutes: Double): DNDateTimeOffset;
    /// <summary>
    ///   返回一个新将指定的月数加到此实例的值的对象。
    /// </summary>
    function AddMonths(months: Int32): DNDateTimeOffset;
    /// <summary>
    ///   返回一个新的  对象，它将由整数和小数部分组成的指定秒数加到此实例的值上。
    /// </summary>
    function AddSeconds(seconds: Double): DNDateTimeOffset;
    /// <summary>
    ///   返回一个新的  对象，它将指定的计时周期数加到此实例的值上。
    /// </summary>
    function AddTicks(ticks: Int64): DNDateTimeOffset;
    /// <summary>
    ///   返回一个新将指定的年数添加到此实例的值的对象。
    /// </summary>
    function AddYears(years: Int32): DNDateTimeOffset;
    /// <summary>
    ///   比较当前对象与指定对象，并指示当前对象是早于、 等于还是晚于第二个对象。
    /// </summary>
    function CompareTo(other: DNDateTimeOffset): Int32;
    /// <summary>
    ///   确定是否  对象表示与指定的对象的时间相同的点。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   确定是否当前  对象表示与指定的时间相同点  对象。
    /// </summary>
    function Equals(other: DNDateTimeOffset): Boolean; overload;
    /// <summary>
    ///   确定是否当前  对象表示同一时间，并具有相同的偏移量与指定  对象。
    /// </summary>
    function EqualsExact(other: DNDateTimeOffset): Boolean;
    /// <summary>
    ///   返回当前哈希代码  对象。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   从当前的  对象中减去表示特定日期和时间的  值。
    /// </summary>
    function Subtract(value: DNDateTimeOffset): DNTimeSpan; overload;
    /// <summary>
    ///   从当前的  对象中减去指定的时间间隔。
    /// </summary>
    function Subtract(value: DNTimeSpan): DNDateTimeOffset; overload;
    /// <summary>
    ///   将当前  对象的值转换为 Windows 文件时间。
    /// </summary>
    function ToFileTime: Int64;
    /// <summary>
    ///   返回自 1970 年 1 所经历的秒数-01-01T00:00:00Z。
    /// </summary>
    function ToUnixTimeSeconds: Int64;
    /// <summary>
    ///   返回自 1970 年 1 经过的毫秒数-01-01T00:00:00.000Z。
    /// </summary>
    function ToUnixTimeMilliseconds: Int64;
    /// <summary>
    ///   将当前对象传递给对象，表示本地时间。
    /// </summary>
    function ToLocalTime: DNDateTimeOffset;
    /// <summary>
    ///   将当前  对象的值转换为其等效的字符串表示形式。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   使用指定的格式将当前  对象的值转换为它的等效字符串表示形式。
    /// </summary>
    function ToString(format: string): string; overload;
    /// <summary>
    ///   将当前的值转换为其等效的字符串表示形式，使用指定的区域性特定格式设置信息的对象。
    /// </summary>
    function ToString(formatProvider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   使用指定的格式和区域性特定格式信息将当前  对象的值转换为它的等效字符串表示形式。
    /// </summary>
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将当前对象传递给值，该值表示协调世界时 (UTC)。
    /// </summary>
    function ToUniversalTime: DNDateTimeOffset;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取  值，该值表示当前  对象的日期和时间。
    /// </summary>
    property DateTime: DNDateTime read get_DateTime;
    /// <summary>
    ///   获取值，该值表示的协调世界时 (UTC) 日期和时间的当前对象。
    /// </summary>
    property UtcDateTime: DNDateTime read get_UtcDateTime;
    /// <summary>
    ///   获取值，该值表示的本地日期和时间的当前对象。
    /// </summary>
    property LocalDateTime: DNDateTime read get_LocalDateTime;
    /// <summary>
    ///   获取  值，该值表示当前的日期组成部分  对象。
    /// </summary>
    property Date: DNDateTime read get_Date;
    /// <summary>
    ///   获取由当前表示的月份日期  对象。
    /// </summary>
    property Day: Int32 read get_Day;
    /// <summary>
    ///   获取由当前星期几  对象。
    /// </summary>
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    /// <summary>
    ///   获取由当前年份的天  对象。
    /// </summary>
    property DayOfYear: Int32 read get_DayOfYear;
    /// <summary>
    ///   获取表示当前的时间的小时部分对象。
    /// </summary>
    property Hour: Int32 read get_Hour;
    /// <summary>
    ///   获取表示当前的时间的毫秒数部分对象。
    /// </summary>
    property Millisecond: Int32 read get_Millisecond;
    /// <summary>
    ///   获取由当前所表示的时间的分钟部分  对象。
    /// </summary>
    property Minute: Int32 read get_Minute;
    /// <summary>
    ///   获取由当前所表示日期的月份部分对象。
    /// </summary>
    property Month: Int32 read get_Month;
    /// <summary>
    ///   获取时间的偏移量从协调世界时 (UTC)。
    /// </summary>
    property Offset: DNTimeSpan read get_Offset;
    /// <summary>
    ///   获取表示当前的时钟时间的秒数部分  对象。
    /// </summary>
    property Second: Int32 read get_Second;
    /// <summary>
    ///   获取表示日期的刻度数和时间的当前时钟时间的对象。
    /// </summary>
    property Ticks: Int64 read get_Ticks;
    /// <summary>
    ///   获取表示日期的刻度数和时间的当前对象以协调世界时 (UTC)。
    /// </summary>
    property UtcTicks: Int64 read get_UtcTicks;
    /// <summary>
    ///   获取当前的一天的时间对象。
    /// </summary>
    property TimeOfDay: DNTimeSpan read get_TimeOfDay;
    /// <summary>
    ///   获取表示当前的日期的年份部分  对象。
    /// </summary>
    property Year: Int32 read get_Year;
  end;

  TDNDateTimeOffset = class(TDNGenericImport<DNDateTimeOffsetClass, DNDateTimeOffset>) end;

  //-------------namespace: System----------------
  DNDecimalClass = interface(DNValueTypeClass)
  ['{CC5356EA-692F-43B6-9895-E472BF85F248}']
  { constructors } 

    /// <summary>
    ///   将  的新实例初始化为指定的 32 位有符号整数的值。
    /// </summary>
    {class} function init(value: Int32): DNDecimal; overload;
    /// <summary>
    ///   将  的新实例初始化为指定的 32 位无符号整数的值。
    /// </summary>
    {class} function init(value: UInt32): DNDecimal; overload;
    /// <summary>
    ///   将  的新实例初始化为指定的 64 位有符号整数的值。
    /// </summary>
    {class} function init(value: Int64): DNDecimal; overload;
    /// <summary>
    ///   将  的新实例初始化为指定的 64 位无符号整数的值。
    /// </summary>
    {class} function init(value: UInt64): DNDecimal; overload;
    /// <summary>
    ///   将  的新实例初始化为指定的单精度浮点数的值。
    /// </summary>
    {class} function init(value: Single): DNDecimal; overload;
    /// <summary>
    ///   将  的新实例初始化为指定的双精度浮点数的值。
    /// </summary>
    {class} function init(value: Double): DNDecimal; overload;
    /// <summary>
    ///   将  的新实例初始化为以二进制表示的、包含在指定数组中的十进制值。
    /// </summary>
    {class} function init(bits: TArray<Int32>): DNDecimal; overload;
    /// <summary>
    ///   用指定实例构成部分的参数来初始化  的新实例。
    /// </summary>
    {class} function init(lo: Int32; mid: Int32; hi: Int32; isNegative: Boolean; scale: Byte): DNDecimal; overload;

  { static methods } 

    /// <summary>
    ///   将指定的  值转换为等效的 OLE 自动化货币值，该值包含在一个 64 位有符号整数中。
    /// </summary>
    {class} function ToOACurrency(value: DNDecimal): Int64;
    /// <summary>
    ///   将指定的 64 位有符号整数（它包含 OLE 自动化货币值）转换为等效的  值。
    /// </summary>
    {class} function FromOACurrency(cy: Int64): DNDecimal;
    /// <summary>
    ///   将两个指定的  值相加。
    /// </summary>
    {class} function Add(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    /// <summary>
    ///   返回大于或等于指定的十进制数的最小整数值。
    /// </summary>
    {class} function Ceiling(d: DNDecimal): DNDecimal;
    /// <summary>
    ///   比较两个指定的  值。
    /// </summary>
    {class} function Compare(d1: DNDecimal; d2: DNDecimal): Int32;
    /// <summary>
    ///   将两个指定的  值相除。
    /// </summary>
    {class} function Divide(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    /// <summary>
    ///   返回一个值，该值指示  的两个指定实例是否表示同一个值。
    /// </summary>
    {class} function Equals(d1: DNDecimal; d2: DNDecimal): Boolean; overload;
    /// <summary>
    ///   将指定的  数字向负无穷方向舍入为最接近的整数。
    /// </summary>
    {class} function Floor(d: DNDecimal): DNDecimal;
    /// <summary>
    ///   将数字的字符串表示形式转换为它的等效  表示形式。
    /// </summary>
    {class} function Parse(s: string): DNDecimal; overload;
    /// <summary>
    ///   将指定样式的数字的字符串表示形式转换为它的等效 。
    /// </summary>
    {class} function Parse(s: string; style: DNNumberStyles): DNDecimal; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息将数字的字符串表示形式转换为其  等效项。
    /// </summary>
    {class} function Parse(s: string; provider: DNIFormatProvider): DNDecimal; overload;
    /// <summary>
    ///   使用指定样式和区域性特定格式将数字的字符串表示形式转换为其  等效项。
    /// </summary>
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function TryParse(s: string; out result: DNDecimal): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: DNDecimal): Boolean; overload;
    /// <summary>
    ///   将  的指定实例的值转换为其等效的二进制表示形式。
    /// </summary>
    {class} function GetBits(d: DNDecimal): TArray<Int32>;
    /// <summary>
    ///   计算两个  值相除后的余数。
    /// </summary>
    {class} function Remainder(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    /// <summary>
    ///   两个指定的  值相乘。
    /// </summary>
    {class} function Multiply(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    /// <summary>
    ///   返回指定的  值乘以 -1 的结果。
    /// </summary>
    {class} function Negate(d: DNDecimal): DNDecimal;
    /// <summary>
    ///   将小数值舍入到最接近的整数。
    /// </summary>
    {class} function Round(d: DNDecimal): DNDecimal; overload;
    /// <summary>
    ///   将  值舍入到指定的小数位数。
    /// </summary>
    {class} function Round(d: DNDecimal; decimals: Int32): DNDecimal; overload;
    /// <summary>
    ///   将小数值舍入到最接近的整数。
    ///               一个参数，指定当一个值正好处于另两个数中间时如何舍入这个值。
    /// </summary>
    {class} function Round(d: DNDecimal; mode: DNMidpointRounding): DNDecimal; overload;
    /// <summary>
    ///   将小数值舍入到指定精度。
    ///               一个参数，指定当一个值正好处于另两个数中间时如何舍入这个值。
    /// </summary>
    {class} function Round(d: DNDecimal; decimals: Int32; mode: DNMidpointRounding): DNDecimal; overload;
    /// <summary>
    ///   从一个  值中减去指定的另一个值。
    /// </summary>
    {class} function Subtract(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    /// <summary>
    ///   将指定的  的值转换为等效的 8 位无符号整数。
    /// </summary>
    {class} function ToByte(value: DNDecimal): Byte;
    /// <summary>
    ///   将指定的  值转换为等效的 8 位有符号整数。
    /// </summary>
    {class} function ToSByte(value: DNDecimal): SByte;
    /// <summary>
    ///   将指定的  值转换为等效的 16 位有符号整数。
    /// </summary>
    {class} function ToInt16(value: DNDecimal): Int16;
    /// <summary>
    ///   将指定的  值转换为等效的 32 位有符号整数。
    /// </summary>
    {class} function ToInt32(d: DNDecimal): Int32;
    /// <summary>
    ///   将指定的  值转换为等效的 64 位有符号整数。
    /// </summary>
    {class} function ToInt64(d: DNDecimal): Int64;
    /// <summary>
    ///   将指定的  的值转换为等效的 16 位无符号整数。
    /// </summary>
    {class} function ToUInt16(value: DNDecimal): UInt16;
    /// <summary>
    ///   将指定的  的值转换为等效的 32 位无符号整数。
    /// </summary>
    {class} function ToUInt32(d: DNDecimal): UInt32;
    /// <summary>
    ///   将指定的  的值转换为等效的 64 位无符号整数。
    /// </summary>
    {class} function ToUInt64(d: DNDecimal): UInt64;
    /// <summary>
    ///   返回指定的  的整数位，所有小数位均被放弃。
    /// </summary>
    {class} function Truncate(d: DNDecimal): DNDecimal;
    /// <summary>
    ///   将指定的  的值转换为等效的双精度浮点数。
    /// </summary>
    {class} function ToDouble(d: DNDecimal): Double;
    /// <summary>
    ///   将指定的  的值转换为等效的单精度浮点数。
    /// </summary>
    {class} function ToSingle(d: DNDecimal): Single;

  end;

  /// <summary>
  ///   表示十进制数。
  /// </summary>
  [DNTypeName('System.Decimal')]
  DNDecimal = interface(DNValueType)
  ['{6FB370D8-4F72-3AC1-9A32-3875F336ECB5}']
  { methods } 

    /// <summary>
    ///   将此实例与指定对象进行比较并返回一个对二者的相对值的比较。
    /// </summary>
    function CompareTo(value: DNObject): Int32; overload;
    /// <summary>
    ///   将此实例与指定的  对象进行比较并返回一个对二者的相对值的比较。
    /// </summary>
    function CompareTo(value: DNDecimal): Int32; overload;
    /// <summary>
    ///   返回一个值，该值指示此实例和指定的  是否表示相同的类型和值。
    /// </summary>
    function Equals(value: DNObject): Boolean; overload;
    /// <summary>
    ///   返回一个值，该值指示此实例和指定的  对象是否表示相同的值。
    /// </summary>
    function Equals(value: DNDecimal): Boolean; overload;
    /// <summary>
    ///   将此实例的数值转换为其等效的字符串表示形式。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。
    /// </summary>
    function ToString(format: string): string; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。
    /// </summary>
    function ToString(provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。
    /// </summary>
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   返回值类型  的 。
    /// </summary>
    function GetTypeCode: DNTypeCode;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNDecimal = class(TDNGenericImport<DNDecimalClass, DNDecimal>) end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  DNSymbolTokenClass = interface(DNValueTypeClass)
  ['{CBD51F19-2436-42F8-95F6-FF998560C025}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  结构，在给定值。
    /// </summary>
    {class} function init(val: Int32): DNSymbolToken;

  end;

  /// <summary>
  ///   结构是一个标记，用于表示的符号化信息的对象表示。
  /// </summary>
  [DNTypeName('System.Diagnostics.SymbolStore.SymbolToken')]
  DNSymbolToken = interface(DNValueType)
  ['{709164DF-D0E2-3813-A07D-F9F1E99F9A4B}']
  { methods } 

    /// <summary>
    ///   获取当前标记的值。
    /// </summary>
    function GetToken: Int32;
    /// <summary>
    ///   生成当前令牌的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   确定是否  的一个实例  并且等于此实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   确定是否  是否等于此实例。
    /// </summary>
    function Equals(obj: DNSymbolToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNSymbolToken = class(TDNGenericImport<DNSymbolTokenClass, DNSymbolToken>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceOptionsClass = interface(DNValueTypeClass)
  ['{719DE0AE-F29E-432D-9FCF-62F840B0A73B}']
  end;

  /// <summary>
  ///   指定在调用  方法时重写默认事件设置（如日志级别、关键字和操作代码）。
  /// </summary>
  [DNTypeName('System.Diagnostics.Tracing.EventSourceOptions')]
  DNEventSourceOptions = interface(DNValueType)
  ['{8B698E0A-F98A-32D6-9E5C-C05FA25591BC}']
  { getter & setter } 

    function get_Level: DNEventLevel;
    procedure set_Level(value: DNEventLevel);
    function get_Opcode: DNEventOpcode;
    procedure set_Opcode(value: DNEventOpcode);
    function get_Keywords: DNEventKeywords;
    procedure set_Keywords(value: DNEventKeywords);
    function get_Tags: DNEventTags;
    procedure set_Tags(value: DNEventTags);
    function get_ActivityOptions: DNEventActivityOptions;
    procedure set_ActivityOptions(value: DNEventActivityOptions);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置应用于事件的事件级别。
    /// </summary>
    property Level: DNEventLevel read get_Level write set_Level;
    /// <summary>
    ///   获取或设置用于指定事件的操作代码。
    /// </summary>
    property Opcode: DNEventOpcode read get_Opcode write set_Opcode;
    /// <summary>
    ///   获取或设置应用于事件的关键字。
    ///               如果未设置此属性，则事件的关键字将为 。
    /// </summary>
    property Keywords: DNEventKeywords read get_Keywords write set_Keywords;
    /// <summary>
    ///   为此事件源定义的事件标记。
    /// </summary>
    property Tags: DNEventTags read get_Tags write set_Tags;
    /// <summary>
    ///   为此事件源定义的活动选项。
    /// </summary>
    property ActivityOptions: DNEventActivityOptions read get_ActivityOptions write set_ActivityOptions;
  end;

  TDNEventSourceOptions = class(TDNGenericImport<DNEventSourceOptionsClass, DNEventSourceOptions>) end;

  //-------------namespace: System----------------
  DNEnumClass = interface(DNValueTypeClass)
  ['{B09C82BA-5EFC-49DF-BDF8-3A04677D8E59}']
  { static methods } 

    /// <summary>
    ///   将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
    /// </summary>
    {class} function Parse(enumType: DNType; value: string): DNObject; overload;
    /// <summary>
    ///   将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
    ///               一个参数指定该操作是否不区分大小写。
    /// </summary>
    {class} function Parse(enumType: DNType; value: string; ignoreCase: Boolean): DNObject; overload;
    /// <summary>
    ///   返回指定枚举的基础类型。
    /// </summary>
    {class} function GetUnderlyingType(enumType: DNType): DNType;
    /// <summary>
    ///   检索指定枚举中常数值的数组。
    /// </summary>
    {class} function GetValues(enumType: DNType): DNArray;
    /// <summary>
    ///   在指定枚举中检索具有指定值的常数的名称。
    /// </summary>
    {class} function GetName(enumType: DNType; value: DNObject): string;
    /// <summary>
    ///   检索指定枚举中常数名称的数组。
    /// </summary>
    {class} function GetNames(enumType: DNType): TArray<string>;
    /// <summary>
    ///   将具有整数值的指定对象转换为枚举成员。
    /// </summary>
    {class} function ToObject(enumType: DNType; value: DNObject): DNObject; overload;
    /// <summary>
    ///   返回指定枚举中是否存在具有指定值的常数的指示。
    /// </summary>
    {class} function IsDefined(enumType: DNType; value: DNObject): Boolean;
    /// <summary>
    ///   根据指定格式将指定枚举类型的指定值转换为其等效的字符串表示形式。
    /// </summary>
    {class} function Format(enumType: DNType; value: DNObject; format: string): string;
    /// <summary>
    ///   将指定的 8 位有符号整数值转换为枚举成员。
    /// </summary>
    {class} function ToObject(enumType: DNType; value: SByte): DNObject; overload;
    /// <summary>
    ///   将指定的 16 位有符号整数转换为枚举成员。
    /// </summary>
    {class} function ToObject(enumType: DNType; value: Int16): DNObject; overload;
    /// <summary>
    ///   将指定的 32 位有符号整数转换为枚举成员。
    /// </summary>
    {class} function ToObject(enumType: DNType; value: Int32): DNObject; overload;
    /// <summary>
    ///   将指定的 8 位无符号整数转换为枚举成员。
    /// </summary>
    {class} function ToObject(enumType: DNType; value: Byte): DNObject; overload;
    /// <summary>
    ///   将指定的 16 位无符号整数值转换为枚举成员。
    /// </summary>
    {class} function ToObject(enumType: DNType; value: UInt16): DNObject; overload;
    /// <summary>
    ///   将指定的 32 位无符号整数值转换为枚举成员。
    /// </summary>
    {class} function ToObject(enumType: DNType; value: UInt32): DNObject; overload;
    /// <summary>
    ///   将指定的 64 位有符号整数转换为枚举成员。
    /// </summary>
    {class} function ToObject(enumType: DNType; value: Int64): DNObject; overload;
    /// <summary>
    ///   将指定的 64 位无符号整数值转换为枚举成员。
    /// </summary>
    {class} function ToObject(enumType: DNType; value: UInt64): DNObject; overload;

  end;

  /// <summary>
  ///   为枚举提供基类。
  /// </summary>
  [DNTypeName('System.Enum')]
  DNEnum = interface(DNValueType)
  ['{C43345B9-7FED-3FC7-8FC2-7B1B82BC109E}']
  { methods } 

    /// <summary>
    ///   返回该实例的值的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   将此实例的值转换为其等效的字符串表示形式。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   此方法重载已过时；请使用 。
    /// </summary>
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   将此实例与指定对象进行比较并返回一个对二者的相对值的指示。
    /// </summary>
    function CompareTo(target: DNObject): Int32;
    /// <summary>
    ///   此方法重载已过时；请使用 。
    /// </summary>
    function ToString(provider: DNIFormatProvider): string; overload;
    /// <summary>
    ///   确定当前实例中是否设置了一个或多个位域。
    /// </summary>
    function HasFlag(flag: DNEnum): Boolean;
    /// <summary>
    ///   返回此枚举成员的基础类型的类型代码。
    /// </summary>
    function GetTypeCode: DNTypeCode;
    /// <summary>
    ///   返回一个值，该值指示此实例是否等于指定的对象。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   使用指定格式将此实例的值转换成其等效的字符串表示。
    /// </summary>
    function ToString(format: string): string; overload;
    function GetType: DNType;

  end;

  TDNEnum = class(TDNGenericImport<DNEnumClass, DNEnum>) end;

  //-------------namespace: System----------------
  DNGuidClass = interface(DNValueTypeClass)
  ['{20623DCE-AB94-49DC-9B81-D750EC4FAB2D}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例通过使用指定的字节数组的结构。
    /// </summary>
    {class} function init(b: TArray<Byte>): DNGuid; overload;
    /// <summary>
    ///   初始化的新实例使用指定的结构无符号整数和字节。
    /// </summary>
    {class} function init(a: UInt32; b: UInt16; c: UInt16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNGuid; overload;
    /// <summary>
    ///   初始化的新实例通过使用指定的整数和字节数组的结构。
    /// </summary>
    {class} function init(a: Int32; b: Int16; c: Int16; d: TArray<Byte>): DNGuid; overload;
    /// <summary>
    ///   初始化的新实例通过使用指定的整数和字节的结构。
    /// </summary>
    {class} function init(a: Int32; b: Int16; c: Int16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNGuid; overload;
    /// <summary>
    ///   初始化的新实例通过使用指定的字符串表示的值的结构。
    /// </summary>
    {class} function init(g: string): DNGuid; overload;

  { static methods } 

    /// <summary>
    ///   将 GUID 的字符串表示转换为等效结构。
    /// </summary>
    {class} function Parse(input: string): DNGuid;
    {class} function TryParse(input: string; out result: DNGuid): Boolean;
    /// <summary>
    ///   将 GUID 的字符串表示转换为等效结构，前提是字符串是在指定的格式。
    /// </summary>
    {class} function ParseExact(input: string; format: string): DNGuid;
    {class} function TryParseExact(input: string; format: string; out result: DNGuid): Boolean;
    /// <summary>
    ///   初始化  结构的新实例。
    /// </summary>
    {class} function NewGuid: DNGuid;

  end;

  /// <summary>
  ///   表示全局唯一标识符 (GUID)。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.Guid')]
  DNGuid = interface(DNValueType)
  ['{9C5923E9-DE52-33EA-88DE-7EBC8633B9CC}']
  { methods } 

    /// <summary>
    ///   返回包含此实例的值的 16 元素字节数组。
    /// </summary>
    function ToByteArray: TArray<Byte>;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(o: DNObject): Boolean; overload;
    /// <summary>
    ///   返回一个值，该值指示此实例和指定的  对象是否表示相同的值。
    /// </summary>
    function Equals(g: DNGuid): Boolean; overload;
    /// <summary>
    ///   将此实例与指定对象进行比较并返回一个对二者的相对值的指示。
    /// </summary>
    function CompareTo(value: DNObject): Int32; overload;
    /// <summary>
    ///   将此实例与指定  对象进行比较并返回它们的相对值。
    /// </summary>
    function CompareTo(value: DNGuid): Int32; overload;
    /// <summary>
    ///   返回的字符串表示形式的值实例，根据提供的格式说明符。
    /// </summary>
    function ToString(format: string): string; overload;
    /// <summary>
    ///   返回注册表格式的此实例值的字符串表示形式。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   根据所提供的格式说明符和区域性特定的格式信息，返回  类的此实例值的字符串表示形式。
    /// </summary>
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetType: DNType;

  end;

  TDNGuid = class(TDNGenericImport<DNGuidClass, DNGuid>) end;

  //-------------namespace: System----------------
  DNModuleHandleClass = interface(DNValueTypeClass)
  ['{F0306DA3-CF21-4936-80D0-F714808558E2}']
  end;

  /// <summary>
  ///   表示模块的运行时句柄。
  /// </summary>
  [DNTypeName('System.ModuleHandle')]
  DNModuleHandle = interface(DNValueType)
  ['{8531F85A-746B-3DB5-A45F-9BAC4BD02D8B}']
  { getter & setter } 

    function get_MDStreamVersion: Int32;

  { methods } 

    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回  值，该值指示指定的对象是否  结构，以及是否等于当前 。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   返回  值，该值指示是否指定  结构是否等于当前 。
    /// </summary>
    function Equals(handle: DNModuleHandle): Boolean; overload;
    /// <summary>
    ///   返回由指定的元数据标记标识的类型的运行时类型句柄。
    /// </summary>
    function GetRuntimeTypeHandleFromMetadataToken(typeToken: Int32): DNRuntimeTypeHandle;
    /// <summary>
    ///   返回由指定的元数据标记标识的类型的运行时类型句柄。
    /// </summary>
    function ResolveTypeHandle(typeToken: Int32): DNRuntimeTypeHandle; overload;
    /// <summary>
    ///   返回由指定的元数据标记，标识指定的类型和方法，其中将该令牌是在作用域中的泛型类型参数的类型的运行时类型句柄。
    /// </summary>
    function ResolveTypeHandle(typeToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeTypeHandle; overload;
    /// <summary>
    ///   返回方法或构造函数由指定的元数据标记标识的运行时方法句柄。
    /// </summary>
    function GetRuntimeMethodHandleFromMetadataToken(methodToken: Int32): DNRuntimeMethodHandle;
    /// <summary>
    ///   返回方法或构造函数由指定的元数据标记标识的运行时方法句柄。
    /// </summary>
    function ResolveMethodHandle(methodToken: Int32): DNRuntimeMethodHandle; overload;
    /// <summary>
    ///   返回方法或构造函数由指定的元数据标记，指定的类型和方法，其中将该令牌是在作用域中的泛型类型参数标识的运行时方法句柄。
    /// </summary>
    function ResolveMethodHandle(methodToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeMethodHandle; overload;
    /// <summary>
    ///   返回由指定的元数据标记标识的字段的运行时句柄。
    /// </summary>
    function GetRuntimeFieldHandleFromMetadataToken(fieldToken: Int32): DNRuntimeFieldHandle;
    /// <summary>
    ///   返回由指定的元数据标记标识的字段的运行时句柄。
    /// </summary>
    function ResolveFieldHandle(fieldToken: Int32): DNRuntimeFieldHandle; overload;
    /// <summary>
    ///   返回由指定的元数据令牌中，指定的类型和方法，其中将该令牌是在作用域中的泛型类型参数标识的字段的运行时字段句柄。
    /// </summary>
    function ResolveFieldHandle(fieldToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeFieldHandle; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取元数据流版本。
    /// </summary>
    property MDStreamVersion: Int32 read get_MDStreamVersion;
  end;

  TDNModuleHandle = class(TDNGenericImport<DNModuleHandleClass, DNModuleHandle>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeNamedArgumentClass = interface(DNValueTypeClass)
  ['{DE555B4F-99A4-4B8C-9FD1-2EB2E6662F8D}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，该类表示指定的字段或属性的自定义属性，并指定字段或属性的值。
    /// </summary>
    {class} function init(memberInfo: DNMemberInfo; value: DNObject): DNCustomAttributeNamedArgument; overload;
    /// <summary>
    ///   新实例初始化  类，该类表示指定的字段或属性的自定义属性，并指定  对象，它描述的类型和字段或属性的值。
    /// </summary>
    {class} function init(memberInfo: DNMemberInfo; typedArgument: DNCustomAttributeTypedArgument): DNCustomAttributeNamedArgument; overload;

  end;

  /// <summary>
  ///   表示仅反射上下文中的自定义属性的命名自变量。
  /// </summary>
  [DNTypeName('System.Reflection.CustomAttributeNamedArgument')]
  DNCustomAttributeNamedArgument = interface(DNValueType)
  ['{7FC47A26-AA2E-32EA-BDE4-01A490842D87}']
  { getter & setter } 

    function get_MemberInfo: DNMemberInfo;
    function get_TypedValue: DNCustomAttributeTypedArgument;
    function get_MemberName: string;
    function get_IsField: Boolean;

  { methods } 

    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回由参数名称、等号和的字符串表示的参数值组成的字符串。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取可用于设置命名的参数的属性成员。
    /// </summary>
    property MemberInfo: DNMemberInfo read get_MemberInfo;
    /// <summary>
    ///   获取  结构，来获取类型和值的当前命名参数。
    /// </summary>
    property TypedValue: DNCustomAttributeTypedArgument read get_TypedValue;
    /// <summary>
    ///   获取可用于设置命名的参数的属性成员的名称。
    /// </summary>
    property MemberName: string read get_MemberName;
    /// <summary>
    ///   获取一个值，该值指示是否已命名的参数为域。
    /// </summary>
    property IsField: Boolean read get_IsField;
  end;

  TDNCustomAttributeNamedArgument = class(TDNGenericImport<DNCustomAttributeNamedArgumentClass, DNCustomAttributeNamedArgument>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeTypedArgumentClass = interface(DNValueTypeClass)
  ['{9E7CE562-DEBF-4E9C-9AB3-442EB0ECF2A5}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类，具有指定的类型和值。
    /// </summary>
    {class} function init(argumentType: DNType; value: DNObject): DNCustomAttributeTypedArgument; overload;
    /// <summary>
    ///   新实例初始化  类具有指定值。
    /// </summary>
    {class} function init(value: DNObject): DNCustomAttributeTypedArgument; overload;

  end;

  /// <summary>
  ///   表示仅反射上下文中自定义属性的自变量或数组自变量的元素。
  /// </summary>
  [DNTypeName('System.Reflection.CustomAttributeTypedArgument')]
  DNCustomAttributeTypedArgument = interface(DNValueType)
  ['{9DC6AC40-EDFA-3E34-9AD1-B7A0A9E3A40A}']
  { getter & setter } 

    function get_ArgumentType: DNType;
    function get_Value: DNObject;

  { methods } 

    /// <summary>
    ///   返回由参数名称、等号和字符串表示的参数值组成的字符串。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   指示此实例与指定对象是否相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取参数或数组参数元素的类型。
    /// </summary>
    property ArgumentType: DNType read get_ArgumentType;
    /// <summary>
    ///   获取参数的值针对简单参数或数组参数; 的元素获取数组参数的值的集合。
    /// </summary>
    property Value: DNObject read get_Value;
  end;

  TDNCustomAttributeTypedArgument = class(TDNGenericImport<DNCustomAttributeTypedArgumentClass, DNCustomAttributeTypedArgument>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEventTokenClass = interface(DNValueTypeClass)
  ['{0C054BD7-5433-4A80-A3FF-F3ED55088449}']
  end;

  /// <summary>
  ///   表示  返回的元数据来表示一个事件。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.EventToken')]
  DNEventToken = interface(DNValueType)
  ['{4E8B1BB8-6A6F-3B57-8AFA-0129550B07BE}']
  { getter & setter } 

    function get_Token: Int32;

  { methods } 

    /// <summary>
    ///   将生成此事件的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   检查给定的对象的实例是否是  并且等于此实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNEventToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   检索此事件的元数据标记。
    /// </summary>
    property Token: Int32 read get_Token;
  end;

  TDNEventToken = class(TDNGenericImport<DNEventTokenClass, DNEventToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNExceptionHandlerClass = interface(DNValueTypeClass)
  ['{1DBCD704-4BB0-488A-98BE-3DF3BF63B076}']
  { constructors } 

    /// <summary>
    ///   使用指定的参数初始化  类的新实例。
    /// </summary>
    {class} function init(tryOffset: Int32; tryLength: Int32; filterOffset: Int32; handlerOffset: Int32; handlerLength: Int32; kind: DNExceptionHandlingClauseOptions; exceptionTypeToken: Int32): DNExceptionHandler;

  end;

  /// <summary>
  ///   表示传递给方法（如 ）的 IL 字节数组中的异常处理程序。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.ExceptionHandler')]
  DNExceptionHandler = interface(DNValueType)
  ['{4677C456-2CFC-3ADC-B319-50F4B9DECE20}']
  { getter & setter } 

    function get_ExceptionTypeToken: Int32;
    function get_TryOffset: Int32;
    function get_TryLength: Int32;
    function get_FilterOffset: Int32;
    function get_HandlerOffset: Int32;
    function get_HandlerLength: Int32;
    function get_Kind: DNExceptionHandlingClauseOptions;

  { methods } 

    /// <summary>
    ///   作为默认哈希函数。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   指示是否此实例的  对象是否等于指定的对象。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   指示是否此实例的  对象是否等于另一个  对象。
    /// </summary>
    function Equals(other: DNExceptionHandler): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取此处理程序处理的异常类型的令牌。
    /// </summary>
    property ExceptionTypeToken: Int32 read get_ExceptionTypeToken;
    /// <summary>
    ///   获取的字节偏移量，受此异常处理程序的代码从此处开始。
    /// </summary>
    property TryOffset: Int32 read get_TryOffset;
    /// <summary>
    ///   获取长度，以字节为单位，此异常处理程序保护的代码。
    /// </summary>
    property TryLength: Int32 read get_TryLength;
    /// <summary>
    ///   获取的字节偏移量，异常处理程序的筛选器代码从此处开始。
    /// </summary>
    property FilterOffset: Int32 read get_FilterOffset;
    /// <summary>
    ///   获取异常处理程序的第一个指令的字节偏移量。
    /// </summary>
    property HandlerOffset: Int32 read get_HandlerOffset;
    /// <summary>
    ///   获取的长度，以字节为单位的异常处理程序。
    /// </summary>
    property HandlerLength: Int32 read get_HandlerLength;
    /// <summary>
    ///   获取一个值，表示此对象表示的异常处理程序的类型。
    /// </summary>
    property Kind: DNExceptionHandlingClauseOptions read get_Kind;
  end;

  TDNExceptionHandler = class(TDNGenericImport<DNExceptionHandlerClass, DNExceptionHandler>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNFieldTokenClass = interface(DNValueTypeClass)
  ['{3FDD6A6E-EC48-48C7-8E1D-9CBF0C4AC31F}']
  end;

  /// <summary>
  ///   结构是一个标记，用于表示的字段的对象表示。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.FieldToken')]
  DNFieldToken = interface(DNValueType)
  ['{24246833-61EB-329D-BDDF-0DAF3874062B}']
  { getter & setter } 

    function get_Token: Int32;

  { methods } 

    /// <summary>
    ///   将生成此字段的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   确定某个对象是否实例  并且等于此实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNFieldToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   检索此字段的元数据标记。
    /// </summary>
    property Token: Int32 read get_Token;
  end;

  TDNFieldToken = class(TDNGenericImport<DNFieldTokenClass, DNFieldToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNLabelClass = interface(DNValueTypeClass)
  ['{CBBA5AED-9245-4CA4-827C-0333229C1AAC}']
  end;

  /// <summary>
  ///   表示以及指令流中的标签。
  ///               结合使用  类。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.Label')]
  DNLabel = interface(DNValueType)
  ['{A419B664-DABD-383D-A0DB-991487D41E14}']
  { methods } 

    /// <summary>
    ///   将生成此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   检查给定的对象的实例是否是  并且等于此实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNLabel): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNLabel = class(TDNGenericImport<DNLabelClass, DNLabel>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNMethodTokenClass = interface(DNValueTypeClass)
  ['{29AD9DC9-128B-4642-A45A-87BB1DD95A5C}']
  end;

  /// <summary>
  ///   结构是表示一种方法的标记的对象表示。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.MethodToken')]
  DNMethodToken = interface(DNValueType)
  ['{0EFE423A-A87E-33D9-8BF4-2D212620EE5F}']
  { getter & setter } 

    function get_Token: Int32;

  { methods } 

    /// <summary>
    ///   返回此方法的生成的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   测试给定的对象是否等于此  对象。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNMethodToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   返回此方法的元数据标记。
    /// </summary>
    property Token: Int32 read get_Token;
  end;

  TDNMethodToken = class(TDNGenericImport<DNMethodTokenClass, DNMethodToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNOpCodeClass = interface(DNValueTypeClass)
  ['{0652DE86-B10A-49DC-9D2A-768A0D2D7ACB}']
  end;

  /// <summary>
  ///   描述中间语言 (IL) 指令。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.OpCode')]
  DNOpCode = interface(DNValueType)
  ['{A7ED05C6-FECF-3C35-BA3B-84163AC1D5E5}']
  { getter & setter } 

    function get_OperandType: DNOperandType;
    function get_FlowControl: DNFlowControl;
    function get_OpCodeType: DNOpCodeType;
    function get_StackBehaviourPop: DNStackBehaviour;
    function get_StackBehaviourPush: DNStackBehaviour;
    function get_Size: Int32;
    function get_Value: Int16;
    function get_Name: string;

  { methods } 

    /// <summary>
    ///   测试给定的对象是否等于此 。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNOpCode): Boolean; overload;
    /// <summary>
    ///   返回此生成的哈希代码 。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回此  作为 。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   中间语言 (IL) 指令的操作数类型。
    /// </summary>
    property OperandType: DNOperandType read get_OperandType;
    /// <summary>
    ///   中间语言 (IL) 指令的流控制特性。
    /// </summary>
    property FlowControl: DNFlowControl read get_FlowControl;
    /// <summary>
    ///   中间语言 (IL) 指令的类型。
    /// </summary>
    property OpCodeType: DNOpCodeType read get_OpCodeType;
    /// <summary>
    ///   中间语言 (IL) 指令弹出堆栈的方式。
    /// </summary>
    property StackBehaviourPop: DNStackBehaviour read get_StackBehaviourPop;
    /// <summary>
    ///   中间语言 (IL) 指令将操作数推到堆栈上的方式。
    /// </summary>
    property StackBehaviourPush: DNStackBehaviour read get_StackBehaviourPush;
    /// <summary>
    ///   中间语言 (IL) 指令的大小。
    /// </summary>
    property Size: Int32 read get_Size;
    /// <summary>
    ///   获取中间语言 (IL) 指令的数值。
    /// </summary>
    property Value: Int16 read get_Value;
    /// <summary>
    ///   中间语言 (IL) 指令的名称。
    /// </summary>
    property Name: string read get_Name;
  end;

  TDNOpCode = class(TDNGenericImport<DNOpCodeClass, DNOpCode>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNParameterTokenClass = interface(DNValueTypeClass)
  ['{DD080EE9-1D2A-46D1-BC78-59BC1DD67956}']
  end;

  /// <summary>
  ///   结构是不透明的表示形式的元数据来表示的参数返回的令牌。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.ParameterToken')]
  DNParameterToken = interface(DNValueType)
  ['{CFB98CA9-8121-35BE-AF40-C176C616A16B}']
  { getter & setter } 

    function get_Token: Int32;

  { methods } 

    /// <summary>
    ///   将生成此参数的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   检查给定的对象的实例是否是  并且等于此实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNParameterToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   检索此参数的元数据标记。
    /// </summary>
    property Token: Int32 read get_Token;
  end;

  TDNParameterToken = class(TDNGenericImport<DNParameterTokenClass, DNParameterToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNPropertyTokenClass = interface(DNValueTypeClass)
  ['{928BDD20-4616-46D5-A122-8C16AFE43723}']
  end;

  /// <summary>
  ///   结构是不透明表示形式  返回要表示的属性的元数据。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.PropertyToken')]
  DNPropertyToken = interface(DNValueType)
  ['{566833C7-F4A0-30EE-BD7E-44752AD570E6}']
  { getter & setter } 

    function get_Token: Int32;

  { methods } 

    /// <summary>
    ///   将生成此属性的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   检查给定的对象的实例是否是  并且等于此实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNPropertyToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   检索此属性的元数据标记。
    /// </summary>
    property Token: Int32 read get_Token;
  end;

  TDNPropertyToken = class(TDNGenericImport<DNPropertyTokenClass, DNPropertyToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNSignatureTokenClass = interface(DNValueTypeClass)
  ['{794F5BA5-F482-4F62-9BD1-B4AD819E8D75}']
  end;

  /// <summary>
  ///   表示  返回的元数据以表示签名。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.SignatureToken')]
  DNSignatureToken = interface(DNValueType)
  ['{155E1466-0E84-3F2B-B825-F6525523407C}']
  { getter & setter } 

    function get_Token: Int32;

  { methods } 

    /// <summary>
    ///   将生成此签名的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   检查给定的对象的实例是否是  并且等于此实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNSignatureToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   检索此方法的局部变量签名的元数据标记。
    /// </summary>
    property Token: Int32 read get_Token;
  end;

  TDNSignatureToken = class(TDNGenericImport<DNSignatureTokenClass, DNSignatureToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNStringTokenClass = interface(DNValueTypeClass)
  ['{E8EF1EF7-7ADD-4A3A-84AB-59EA648A31B6}']
  end;

  /// <summary>
  ///   表示一个标记，用于表示的字符串。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.StringToken')]
  DNStringToken = interface(DNValueType)
  ['{8CF0278D-D0AD-307D-BE63-A785432E3FDF}']
  { getter & setter } 

    function get_Token: Int32;

  { methods } 

    /// <summary>
    ///   返回该字符串的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   检查给定的对象的实例是否是  并且等于此实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNStringToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   检索此字符串的元数据标记。
    /// </summary>
    property Token: Int32 read get_Token;
  end;

  TDNStringToken = class(TDNGenericImport<DNStringTokenClass, DNStringToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNTypeTokenClass = interface(DNValueTypeClass)
  ['{688CC3C7-CD35-4372-9172-A9D0BC874F58}']
  end;

  /// <summary>
  ///   表示  返回的元数据来表示的类型。
  /// </summary>
  [DNTypeName('System.Reflection.Emit.TypeToken')]
  DNTypeToken = interface(DNValueType)
  ['{048FA0C2-8EBB-3BC2-A47F-01F12A32008E}']
  { getter & setter } 

    function get_Token: Int32;

  { methods } 

    /// <summary>
    ///   将生成此类型的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   检查给定的对象的实例是否是  并且等于此实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNTypeToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   检索此类的元数据标记。
    /// </summary>
    property Token: Int32 read get_Token;
  end;

  TDNTypeToken = class(TDNGenericImport<DNTypeTokenClass, DNTypeToken>) end;

  //-------------namespace: System.Reflection----------------
  DNInterfaceMappingClass = interface(DNValueTypeClass)
  ['{AFAF3BCF-22B7-4234-91A4-40144F7B75F3}']
  end;

  /// <summary>
  ///   检索接口到实现该接口的类上的实际方法的映射。
  /// </summary>
  [DNTypeName('System.Reflection.InterfaceMapping')]
  DNInterfaceMapping = interface(DNValueType)
  ['{5F7A2664-4778-3D72-A78F-D38B6B00180D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInterfaceMapping = class(TDNGenericImport<DNInterfaceMappingClass, DNInterfaceMapping>) end;

  //-------------namespace: System.Reflection----------------
  DNParameterModifierClass = interface(DNValueTypeClass)
  ['{CB04CF25-5AC0-469C-A003-9DFCD990B096}']
  { constructors } 

    /// <summary>
    ///   初始化表示指定参数数量的  结构的新实例。
    /// </summary>
    {class} function init(parameterCount: Int32): DNParameterModifier;

  end;

  /// <summary>
  ///   将修饰符附加到参数，以便绑定可与在其中修改了类型的参数签名一起使用。
  /// </summary>
  [DNTypeName('System.Reflection.ParameterModifier')]
  DNParameterModifier = interface(DNValueType)
  ['{11D31042-14C0-3B5C-87D0-A2CD40803CB5}']
  { getter & setter } 

    function get_Item(index: Int32): Boolean;
    procedure set_Item(index: Int32; value: Boolean);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Item[index: Int32]: Boolean read get_Item write set_Item; default;
  end;

  TDNParameterModifier = class(TDNGenericImport<DNParameterModifierClass, DNParameterModifier>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncTaskMethodBuilderClass = interface(DNValueTypeClass)
  ['{D405E73C-7277-423A-A605-63CFFF25B7E9}']
  { static methods } 

    /// <summary>
    ///   创建  类的实例。
    /// </summary>
    {class} function Create: DNAsyncTaskMethodBuilder;

  end;

  /// <summary>
  ///   表示返回任务的异步方法生成器。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.AsyncTaskMethodBuilder')]
  DNAsyncTaskMethodBuilder = interface(DNValueType)
  ['{0C722BE0-9E01-3DD6-8EDF-3695318F795D}']
  { getter & setter } 

    function get_Task: DNTask;

  { methods } 

    /// <summary>
    ///   将生成器与指定的状态机相关联。
    /// </summary>
    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    /// <summary>
    ///   将标记为已成功完成的任务。
    /// </summary>
    procedure SetResult;
    /// <summary>
    ///   将任务标记为失败并绑定到该任务的指定的异常。
    /// </summary>
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取此生成器的任务。
    /// </summary>
    property Task: DNTask read get_Task;
  end;

  TDNAsyncTaskMethodBuilder = class(TDNGenericImport<DNAsyncTaskMethodBuilderClass, DNAsyncTaskMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncVoidMethodBuilderClass = interface(DNValueTypeClass)
  ['{331B035C-C722-4E94-9013-D3ECDF0EBD83}']
  { static methods } 

    /// <summary>
    ///   创建  类的实例。
    /// </summary>
    {class} function Create: DNAsyncVoidMethodBuilder;

  end;

  /// <summary>
  ///   表示不返回值的异步方法生成器。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.AsyncVoidMethodBuilder')]
  DNAsyncVoidMethodBuilder = interface(DNValueType)
  ['{4A029946-A91B-3B8A-90A1-0099BC5C1006}']
  { methods } 

    /// <summary>
    ///   将生成器与指定的状态机相关联。
    /// </summary>
    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    /// <summary>
    ///   将标记为已成功完成方法生成器。
    /// </summary>
    procedure SetResult;
    /// <summary>
    ///   将异常绑定到方法生成器。
    /// </summary>
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNAsyncVoidMethodBuilder = class(TDNGenericImport<DNAsyncVoidMethodBuilderClass, DNAsyncVoidMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredTaskAwaitableClass = interface(DNValueTypeClass)
  ['{5F75B290-8387-4DB8-BC24-ED7DFABA4C5D}']
  end;

  /// <summary>
  ///   提供了在任务等待启用配置的可等待对象。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable')]
  DNConfiguredTaskAwaitable = interface(DNValueType)
  ['{472E005F-9856-321C-9A68-BB9F3AA331A7}']
  { methods } 

    /// <summary>
    ///   返回此可等待对象的 awaiter。
    /// </summary>
    function GetAwaiter: DNConfiguredTaskAwaitable_ConfiguredTaskAwaiter;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNConfiguredTaskAwaitable = class(TDNGenericImport<DNConfiguredTaskAwaitableClass, DNConfiguredTaskAwaitable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass = interface(DNValueTypeClass)
  ['{6DC7693F-6C1B-4052-85E2-A39E1135A3F0}']
  end;

  /// <summary>
  ///   提供有关可等待操作的 awaiter () 对象。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter')]
  DNConfiguredTaskAwaitable_ConfiguredTaskAwaiter = interface(DNValueType)
  ['{BFD6BA67-E59D-397A-857E-945AE2C1E8C1}']
  { getter & setter } 

    function get_IsCompleted: Boolean;

  { methods } 

    /// <summary>
    ///   将计划与此等待程序关联的任务延续操作。
    /// </summary>
    procedure OnCompleted(continuation: DNAction);
    /// <summary>
    ///   将计划与此等待程序关联的任务延续操作。
    /// </summary>
    procedure UnsafeOnCompleted(continuation: DNAction);
    /// <summary>
    ///   结束对已完成的任务的 await。
    /// </summary>
    procedure GetResult;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取一个值，指定是否已完成的任务处于等待状态。
    /// </summary>
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNConfiguredTaskAwaitable_ConfiguredTaskAwaiter = class(TDNGenericImport<DNConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass, DNConfiguredTaskAwaitable_ConfiguredTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTaskAwaiterClass = interface(DNValueTypeClass)
  ['{9F3BBFA3-921E-4156-8D51-25EF87C41251}']
  end;

  /// <summary>
  ///   提供等待异步任务完成的对象。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.TaskAwaiter')]
  DNTaskAwaiter = interface(DNValueType)
  ['{6503951D-3783-31CF-85D7-EBBA9711B424}']
  { getter & setter } 

    function get_IsCompleted: Boolean;

  { methods } 

    /// <summary>
    ///   设置时应执行的操作  对象停止等待异步任务完成。
    /// </summary>
    procedure OnCompleted(continuation: DNAction);
    /// <summary>
    ///   结束异步任务完成之前的等待。
    /// </summary>
    procedure GetResult;
    /// <summary>
    ///   计划程序与此等待异步任务的延续任务操作。
    /// </summary>
    procedure UnsafeOnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示是否已完成的异步任务。
    /// </summary>
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNTaskAwaiter = class(TDNGenericImport<DNTaskAwaiterClass, DNTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNYieldAwaitableClass = interface(DNValueTypeClass)
  ['{78EE71E3-3BD9-4176-A90D-1011003E6EFA}']
  end;

  /// <summary>
  ///   以异步方式切换到目标环境时，请等待提供的上下文。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.YieldAwaitable')]
  DNYieldAwaitable = interface(DNValueType)
  ['{522674D0-B420-305E-807A-DC43738E8E2C}']
  { methods } 

    /// <summary>
    ///   检索  类的此实例对象。
    /// </summary>
    function GetAwaiter: DNYieldAwaitable_YieldAwaiter;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNYieldAwaitable = class(TDNGenericImport<DNYieldAwaitableClass, DNYieldAwaitable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNYieldAwaitable_YieldAwaiterClass = interface(DNValueTypeClass)
  ['{0204FAD2-24E2-45E1-B85F-720C071FCF40}']
  end;

  /// <summary>
  ///   提供用于切换到目标环境的 awaiter。
  /// </summary>
  [DNTypeName('System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter')]
  DNYieldAwaitable_YieldAwaiter = interface(DNValueType)
  ['{C6EC8441-900C-30EC-927F-E9A4ECE32725}']
  { getter & setter } 

    function get_IsCompleted: Boolean;

  { methods } 

    /// <summary>
    ///   设置延续任务来调用。
    /// </summary>
    procedure OnCompleted(continuation: DNAction);
    /// <summary>
    ///   文章  返回到当前上下文。
    /// </summary>
    procedure UnsafeOnCompleted(continuation: DNAction);
    /// <summary>
    ///   结束等待操作。
    /// </summary>
    procedure GetResult;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取一个值，该值指示是否 yield 关键字不是必需。
    /// </summary>
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNYieldAwaitable_YieldAwaiter = class(TDNGenericImport<DNYieldAwaitable_YieldAwaiterClass, DNYieldAwaitable_YieldAwaiter>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNArrayWithOffsetClass = interface(DNValueTypeClass)
  ['{BAAB2196-024F-4870-81C5-E72D60D91B1A}']
  { constructors } 

    /// <summary>
    ///   初始化  结构的新实例。
    /// </summary>
    {class} function init(&array: DNObject; offset: Int32): DNArrayWithOffset;

  end;

  /// <summary>
  ///   封装指定数组内的数组和偏移量。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ArrayWithOffset')]
  DNArrayWithOffset = interface(DNValueType)
  ['{8351108F-34E3-3CC9-BF5A-C76C48060835}']
  { methods } 

    /// <summary>
    ///   返回此引用的托管的数组 。
    /// </summary>
    function GetArray: DNObject;
    /// <summary>
    ///   返回时提供的偏移量这  构造。
    /// </summary>
    function GetOffset: Int32;
    /// <summary>
    ///   返回此值类型的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   指示指定的对象是否与当前匹配  对象。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   指示是否指定  对象与当前实例相匹配。
    /// </summary>
    function Equals(obj: DNArrayWithOffset): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNArrayWithOffset = class(TDNGenericImport<DNArrayWithOffsetClass, DNArrayWithOffset>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_BIND_OPTSClass = interface(DNValueTypeClass)
  ['{54683D29-5176-48C4-BC5E-AEF005212824}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.BIND_OPTS')]
  DNInteropServices_BIND_OPTS = interface(DNValueType)
  ['{C405DB40-4A54-3FC6-B8DA-6BC332002AA1}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_BIND_OPTS = class(TDNGenericImport<DNInteropServices_BIND_OPTSClass, DNInteropServices_BIND_OPTS>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_BINDPTRClass = interface(DNValueTypeClass)
  ['{ED158025-5182-471D-816B-28156CC426AB}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.BINDPTR')]
  DNInteropServices_BINDPTR = interface(DNValueType)
  ['{0A52E03D-5F69-33D7-85F9-0271981AA380}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_BINDPTR = class(TDNGenericImport<DNInteropServices_BINDPTRClass, DNInteropServices_BINDPTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_BIND_OPTSClass = interface(DNValueTypeClass)
  ['{8303FEAE-A59A-4EA3-9503-CBE1DD8A2BA9}']
  end;

  /// <summary>
  ///   存储名字对象绑定操作中使用的参数。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.BIND_OPTS')]
  DNComTypes_BIND_OPTS = interface(DNValueType)
  ['{381E7F17-0361-399C-A5D0-6C16FBDC7030}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_BIND_OPTS = class(TDNGenericImport<DNComTypes_BIND_OPTSClass, DNComTypes_BIND_OPTS>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_BINDPTRClass = interface(DNValueTypeClass)
  ['{9F679572-8F23-479E-AE70-341380EB41EA}']
  end;

  /// <summary>
  ///   包含一个指向绑定到  结构  结构，或  接口。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.BINDPTR')]
  DNComTypes_BINDPTR = interface(DNValueType)
  ['{81E3F13E-7E40-365C-B2E2-4B93341D86A8}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_BINDPTR = class(TDNGenericImport<DNComTypes_BINDPTRClass, DNComTypes_BINDPTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_CONNECTDATAClass = interface(DNValueTypeClass)
  ['{E9068F0B-6601-4E33-B249-1746410CDF23}']
  end;

  /// <summary>
  ///   描述与给定连接点存在的连接。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.CONNECTDATA')]
  DNComTypes_CONNECTDATA = interface(DNValueType)
  ['{0CB2C84F-441C-3133-8751-5DDA51EB5DA8}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_CONNECTDATA = class(TDNGenericImport<DNComTypes_CONNECTDATAClass, DNComTypes_CONNECTDATA>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_DISPPARAMSClass = interface(DNValueTypeClass)
  ['{989833FC-92A8-463B-8E94-E6EBF19EF21C}']
  end;

  /// <summary>
  ///   包含由  传递到方法或属性的参数。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.DISPPARAMS')]
  DNComTypes_DISPPARAMS = interface(DNValueType)
  ['{CD3563A9-ACFD-3F08-8BBA-00DB5FD44BCF}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_DISPPARAMS = class(TDNGenericImport<DNComTypes_DISPPARAMSClass, DNComTypes_DISPPARAMS>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_ELEMDESCClass = interface(DNValueTypeClass)
  ['{A58AA53F-939B-47CA-B898-0E44C3199193}']
  end;

  /// <summary>
  ///   包含变量、函数或函数参数的类型说明和进程传输信息。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ELEMDESC')]
  DNComTypes_ELEMDESC = interface(DNValueType)
  ['{74106BEE-426F-3B1E-B2B2-FB2A76C84591}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_ELEMDESC = class(TDNGenericImport<DNComTypes_ELEMDESCClass, DNComTypes_ELEMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_ELEMDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{0C2A0F52-CE43-40F2-B700-220BA3DC9B96}']
  end;

  /// <summary>
  ///   包含有关元素的信息。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION')]
  DNComTypes_ELEMDESC_DESCUNION = interface(DNValueType)
  ['{01F42F89-DA1F-3DC6-A449-EA5847F4D27F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_ELEMDESC_DESCUNION = class(TDNGenericImport<DNComTypes_ELEMDESC_DESCUNIONClass, DNComTypes_ELEMDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_EXCEPINFOClass = interface(DNValueTypeClass)
  ['{4815CC03-6754-4D41-9D0E-0F9531A23523}']
  end;

  /// <summary>
  ///   描述过程中出现的异常 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.EXCEPINFO')]
  DNComTypes_EXCEPINFO = interface(DNValueType)
  ['{16971614-0313-36C1-9272-901297BE6DAE}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_EXCEPINFO = class(TDNGenericImport<DNComTypes_EXCEPINFOClass, DNComTypes_EXCEPINFO>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_FILETIMEClass = interface(DNValueTypeClass)
  ['{1511787C-B2E5-4F98-9F08-F12DA251071D}']
  end;

  /// <summary>
  ///   表示从 1601 年 1 月 1 日起 100 纳秒间隔的数量。
  ///               此结构是 64 位值。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.FILETIME')]
  DNComTypes_FILETIME = interface(DNValueType)
  ['{4224C3F0-69C7-3076-A4A0-4F3B581C0EFC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_FILETIME = class(TDNGenericImport<DNComTypes_FILETIMEClass, DNComTypes_FILETIME>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_FUNCDESCClass = interface(DNValueTypeClass)
  ['{BD70FB04-35DB-46C9-8575-94F70D5CE5D9}']
  end;

  /// <summary>
  ///   定义函数说明。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCDESC')]
  DNComTypes_FUNCDESC = interface(DNValueType)
  ['{23F7CBB6-C88B-37BE-BE71-01F49C8E5C5F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_FUNCDESC = class(TDNGenericImport<DNComTypes_FUNCDESCClass, DNComTypes_FUNCDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_IDLDESCClass = interface(DNValueTypeClass)
  ['{348A2D78-124A-4E18-8A05-4AB278524EC9}']
  end;

  /// <summary>
  ///   包含在进程间传输结构元素、参数或函数返回值所需的信息。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IDLDESC')]
  DNComTypes_IDLDESC = interface(DNValueType)
  ['{1B4D3F24-53B7-3567-B133-BC37EEDADF89}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_IDLDESC = class(TDNGenericImport<DNComTypes_IDLDESCClass, DNComTypes_IDLDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_PARAMDESCClass = interface(DNValueTypeClass)
  ['{D93C38CE-CB74-4317-8473-351CCD0BC96E}']
  end;

  /// <summary>
  ///   包含关于如何在进程间传输结构元素、参数或函数返回值的信息。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.PARAMDESC')]
  DNComTypes_PARAMDESC = interface(DNValueType)
  ['{5B668873-9A1A-3784-AD5D-389280196213}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_PARAMDESC = class(TDNGenericImport<DNComTypes_PARAMDESCClass, DNComTypes_PARAMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_STATSTGClass = interface(DNValueTypeClass)
  ['{A81B1254-46AC-49DF-BFB4-04035225B99E}']
  end;

  /// <summary>
  ///   包含关于开源存储器、流或字节数组对象的统计信息。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.STATSTG')]
  DNComTypes_STATSTG = interface(DNValueType)
  ['{01DCF150-4B5A-3327-A05D-2E7F22743CDC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_STATSTG = class(TDNGenericImport<DNComTypes_STATSTGClass, DNComTypes_STATSTG>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_TYPEATTRClass = interface(DNValueTypeClass)
  ['{19CBA6A6-089E-4294-ABB0-443CC4D7E1E0}']
  end;

  /// <summary>
  ///   包含属性的 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEATTR')]
  DNComTypes_TYPEATTR = interface(DNValueType)
  ['{FF962CD8-46B5-3665-93D6-E1EAB8BAFB33}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_TYPEATTR = class(TDNGenericImport<DNComTypes_TYPEATTRClass, DNComTypes_TYPEATTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_TYPEDESCClass = interface(DNValueTypeClass)
  ['{1D2AD55D-633B-44D6-9D5F-8C2BF1DAD45C}']
  end;

  /// <summary>
  ///   描述变量的类型、函数的返回类型或函数参数的类型。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEDESC')]
  DNComTypes_TYPEDESC = interface(DNValueType)
  ['{8E485973-B992-30A6-9D31-814E602AF4A9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_TYPEDESC = class(TDNGenericImport<DNComTypes_TYPEDESCClass, DNComTypes_TYPEDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_TYPELIBATTRClass = interface(DNValueTypeClass)
  ['{F36EBB63-802B-4B34-8908-3C65F1E89F15}']
  end;

  /// <summary>
  ///   标识特定的类型库，并为成员名称提供本地化支持。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPELIBATTR')]
  DNComTypes_TYPELIBATTR = interface(DNValueType)
  ['{F21A7681-7E4A-3FC7-ADD9-C946C3593C2B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_TYPELIBATTR = class(TDNGenericImport<DNComTypes_TYPELIBATTRClass, DNComTypes_TYPELIBATTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_VARDESCClass = interface(DNValueTypeClass)
  ['{ECB94C52-E554-4ACD-8EA4-52933B8257C9}']
  end;

  /// <summary>
  ///   描述变量、常量或数据成员。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARDESC')]
  DNComTypes_VARDESC = interface(DNValueType)
  ['{D93D82E8-5E94-3228-9716-0E870F63E63B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_VARDESC = class(TDNGenericImport<DNComTypes_VARDESCClass, DNComTypes_VARDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_VARDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{9917BBC7-EA2B-40C2-AAC5-0ACC3FA8478B}']
  end;

  /// <summary>
  ///   包含有关变量的信息。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION')]
  DNComTypes_VARDESC_DESCUNION = interface(DNValueType)
  ['{5389D117-E279-3350-8ECE-C0081D394DEA}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_VARDESC_DESCUNION = class(TDNGenericImport<DNComTypes_VARDESC_DESCUNIONClass, DNComTypes_VARDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_CONNECTDATAClass = interface(DNValueTypeClass)
  ['{CE1C195B-12AA-41D8-B064-B8C7972E9677}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.CONNECTDATA')]
  DNInteropServices_CONNECTDATA = interface(DNValueType)
  ['{BE84D601-56D4-399B-8672-05D6E23BF1C0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_CONNECTDATA = class(TDNGenericImport<DNInteropServices_CONNECTDATAClass, DNInteropServices_CONNECTDATA>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_DISPPARAMSClass = interface(DNValueTypeClass)
  ['{114B6D07-8359-4702-8ABF-D94230BD71B6}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.DISPPARAMS')]
  DNInteropServices_DISPPARAMS = interface(DNValueType)
  ['{B2D19783-7787-3595-90BA-9E7BA1195808}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_DISPPARAMS = class(TDNGenericImport<DNInteropServices_DISPPARAMSClass, DNInteropServices_DISPPARAMS>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_ELEMDESCClass = interface(DNValueTypeClass)
  ['{A9AED802-006B-4EFB-B7DE-DB8F62E59D2E}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ELEMDESC')]
  DNInteropServices_ELEMDESC = interface(DNValueType)
  ['{1DB3807C-5B42-3927-BD3F-3C82C9C88256}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_ELEMDESC = class(TDNGenericImport<DNInteropServices_ELEMDESCClass, DNInteropServices_ELEMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_ELEMDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{B621A2A4-84C6-4279-A295-C0288A7AA24C}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.ELEMDESC+DESCUNION')]
  DNInteropServices_ELEMDESC_DESCUNION = interface(DNValueType)
  ['{F376E5E7-2DDA-3F74-97C3-0695A67F3F19}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_ELEMDESC_DESCUNION = class(TDNGenericImport<DNInteropServices_ELEMDESC_DESCUNIONClass, DNInteropServices_ELEMDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_EXCEPINFOClass = interface(DNValueTypeClass)
  ['{1A92D6F4-4616-457B-927A-A5CDB84542E5}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.EXCEPINFO')]
  DNInteropServices_EXCEPINFO = interface(DNValueType)
  ['{71B0E837-5D3E-33AF-BAFE-218EBF533A2E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_EXCEPINFO = class(TDNGenericImport<DNInteropServices_EXCEPINFOClass, DNInteropServices_EXCEPINFO>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_FILETIMEClass = interface(DNValueTypeClass)
  ['{4A1B5D88-2BDA-4583-B17E-FF51D497A259}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.FILETIME')]
  DNInteropServices_FILETIME = interface(DNValueType)
  ['{1D90B2BD-2A28-3A8A-9506-B3AA2CBE5067}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_FILETIME = class(TDNGenericImport<DNInteropServices_FILETIMEClass, DNInteropServices_FILETIME>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_FUNCDESCClass = interface(DNValueTypeClass)
  ['{EF3B39B9-CF24-4037-A019-A934AD33EFCA}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.FUNCDESC')]
  DNInteropServices_FUNCDESC = interface(DNValueType)
  ['{C4E343BB-8828-3E79-A712-3F84CDC2BD90}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_FUNCDESC = class(TDNGenericImport<DNInteropServices_FUNCDESCClass, DNInteropServices_FUNCDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNGCHandleClass = interface(DNValueTypeClass)
  ['{8090F7D3-4E44-4BF1-A047-D50FCC6498B3}']
  { static methods } 

    /// <summary>
    ///   分配  句柄指定的对象。
    /// </summary>
    {class} function Alloc(value: DNObject): DNGCHandle; overload;
    /// <summary>
    ///   为指定的对象分配指定类型的句柄。
    /// </summary>
    {class} function Alloc(value: DNObject; &type: DNGCHandleType): DNGCHandle; overload;
    /// <summary>
    ///   返回一个新  根据句柄创建某个托管对象的对象。
    /// </summary>
    {class} function FromIntPtr(value: IntPtr): DNGCHandle;
    /// <summary>
    ///   返回的内部整数表示形式  对象。
    /// </summary>
    {class} function ToIntPtr(value: DNGCHandle): IntPtr;

  end;

  /// <summary>
  ///   提供用于从非托管内存访问托管对象的方法。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.GCHandle')]
  DNGCHandle = interface(DNValueType)
  ['{66E1F723-E57F-35CE-8306-3C09FB68A322}']
  { getter & setter } 

    function get_Target: DNObject;
    procedure set_Target(value: DNObject);
    function get_IsAllocated: Boolean;

  { methods } 

    /// <summary>
    ///   版本 。
    /// </summary>
    procedure Free;
    /// <summary>
    ///   检索中的某个对象的地址  处理。
    /// </summary>
    function AddrOfPinnedObject: IntPtr;
    /// <summary>
    ///   返回当前的标识符  对象。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   确定是否指定  对象是否等于当前  对象。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取或设置该句柄表示的对象。
    /// </summary>
    property Target: DNObject read get_Target write set_Target;
    /// <summary>
    ///   获取一个值，该值指示是否分配了句柄。
    /// </summary>
    property IsAllocated: Boolean read get_IsAllocated;
  end;

  TDNGCHandle = class(TDNGenericImport<DNGCHandleClass, DNGCHandle>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNHandleRefClass = interface(DNValueTypeClass)
  ['{8A75D15D-BFB6-4144-8CA0-95879BC37A95}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  类包装的对象和由非托管代码使用的资源的句柄。
    /// </summary>
    {class} function init(wrapper: DNObject; handle: IntPtr): DNHandleRef;

  { static methods } 

    /// <summary>
    ///   返回的内部整数表示形式  对象。
    /// </summary>
    {class} function ToIntPtr(value: DNHandleRef): IntPtr;

  end;

  /// <summary>
  ///   将包含句柄的托管对象包装到通过平台调用传递到非托管代码的资源中。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.HandleRef')]
  DNHandleRef = interface(DNValueType)
  ['{C71DCE2B-B87F-37A9-89ED-F1145955BCD6}']
  { getter & setter } 

    function get_Wrapper: DNObject;
    function get_Handle: IntPtr;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取持有对资源的句柄的对象。
    /// </summary>
    property Wrapper: DNObject read get_Wrapper;
    /// <summary>
    ///   获取资源的句柄。
    /// </summary>
    property Handle: IntPtr read get_Handle;
  end;

  TDNHandleRef = class(TDNGenericImport<DNHandleRefClass, DNHandleRef>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_IDLDESCClass = interface(DNValueTypeClass)
  ['{3824382B-7CCD-436F-BEC8-12C68FA134CA}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.IDLDESC')]
  DNInteropServices_IDLDESC = interface(DNValueType)
  ['{C216B21B-CDF3-30CF-943F-19D7F3958D50}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_IDLDESC = class(TDNGenericImport<DNInteropServices_IDLDESCClass, DNInteropServices_IDLDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNOSPlatformClass = interface(DNValueTypeClass)
  ['{E679F68D-87E9-4D9A-AB69-F5C373E78D79}']
  { static getter & setter } 

    {class} function get_Linux: DNOSPlatform;
    {class} function get_OSX: DNOSPlatform;
    {class} function get_Windows: DNOSPlatform;

  { static methods } 

    /// <summary>
    ///   创建一个新的  实例。
    /// </summary>
    {class} function Create(osPlatform: string): DNOSPlatform;

  { static propertys } 

    /// <summary>
    ///   获取表示 Linux 操作系统的对象。
    /// </summary>
    {class} property Linux: DNOSPlatform read get_Linux;
    /// <summary>
    ///   获取表示 OSX 操作系统的对象。
    /// </summary>
    {class} property OSX: DNOSPlatform read get_OSX;
    /// <summary>
    ///   获取表示 Windows 操作系统的对象。
    /// </summary>
    {class} property Windows: DNOSPlatform read get_Windows;
  end;

  /// <summary>
  ///   表示一种操作系统平台。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.OSPlatform')]
  DNOSPlatform = interface(DNValueType)
  ['{E1F1FDA8-2B80-3CE1-A8D5-8994E86CBECB}']
  { methods } 

    /// <summary>
    ///   确定当前实例是否等同于指定的  实例。
    /// </summary>
    function Equals(other: DNOSPlatform): Boolean; overload;
    /// <summary>
    ///   确定当前  实例是否与指定对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回此  实例的字符串表示形式。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  end;

  TDNOSPlatform = class(TDNGenericImport<DNOSPlatformClass, DNOSPlatform>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_PARAMDESCClass = interface(DNValueTypeClass)
  ['{FC9A00FE-2CC9-4E30-A49E-08D81A0EEC18}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.PARAMDESC')]
  DNInteropServices_PARAMDESC = interface(DNValueType)
  ['{96A49179-5103-3375-B37A-C0BA22862D12}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_PARAMDESC = class(TDNGenericImport<DNInteropServices_PARAMDESCClass, DNInteropServices_PARAMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_STATSTGClass = interface(DNValueTypeClass)
  ['{9EF2525F-8E68-4ED2-A40D-5A3C061055EC}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.STATSTG')]
  DNInteropServices_STATSTG = interface(DNValueType)
  ['{F7933E5D-9C90-36B0-9C7B-4225E42E92B6}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_STATSTG = class(TDNGenericImport<DNInteropServices_STATSTGClass, DNInteropServices_STATSTG>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_TYPEATTRClass = interface(DNValueTypeClass)
  ['{BBD8BD09-9878-4B2C-BBC1-E6EC13F2E098}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TYPEATTR')]
  DNInteropServices_TYPEATTR = interface(DNValueType)
  ['{471089CB-AC5A-33F7-9E0A-76CFECE9D223}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_TYPEATTR = class(TDNGenericImport<DNInteropServices_TYPEATTRClass, DNInteropServices_TYPEATTR>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_TYPEDESCClass = interface(DNValueTypeClass)
  ['{59D5C2AA-7C6C-4143-AEE8-70AAE0C6E331}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TYPEDESC')]
  DNInteropServices_TYPEDESC = interface(DNValueType)
  ['{6527CB57-D7F4-3B86-B11A-C213F8E493CA}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_TYPEDESC = class(TDNGenericImport<DNInteropServices_TYPEDESCClass, DNInteropServices_TYPEDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_TYPELIBATTRClass = interface(DNValueTypeClass)
  ['{49F12E18-7C90-45C8-A457-D0A9BD5C50C8}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.TYPELIBATTR')]
  DNInteropServices_TYPELIBATTR = interface(DNValueType)
  ['{B5C27B9A-F1C1-3AAD-B66F-6F60249C048D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_TYPELIBATTR = class(TDNGenericImport<DNInteropServices_TYPELIBATTRClass, DNInteropServices_TYPELIBATTR>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_VARDESCClass = interface(DNValueTypeClass)
  ['{930FD255-29EA-4234-B392-CC1E31510F5A}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.VARDESC')]
  DNInteropServices_VARDESC = interface(DNValueType)
  ['{B01CE747-F3BA-3778-A886-20526DE1F9A1}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_VARDESC = class(TDNGenericImport<DNInteropServices_VARDESCClass, DNInteropServices_VARDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_VARDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{88AFD8D0-A47B-469B-98ED-95D51F361CB9}']
  end;

  /// <summary>
  ///   请改用 。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.VARDESC+DESCUNION')]
  DNInteropServices_VARDESC_DESCUNION = interface(DNValueType)
  ['{2547112D-39B6-3C5A-84DE-84F04DDC2E4D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_VARDESC_DESCUNION = class(TDNGenericImport<DNInteropServices_VARDESC_DESCUNIONClass, DNInteropServices_VARDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNEventRegistrationTokenClass = interface(DNValueTypeClass)
  ['{CD6C8C40-5392-4739-9000-F4D6DF19A091}']
  end;

  /// <summary>
  ///   当一个事件处理程序添加到返回的令牌 Windows 运行时 事件。
  ///               该标记用于以后从事件中删除事件处理程序。
  /// </summary>
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken')]
  DNEventRegistrationToken = interface(DNValueType)
  ['{9DA1B309-12F7-3993-8ACA-2327DEA35380}']
  { methods } 

    /// <summary>
    ///   返回一个值，该值指示当前对象是否等于指定的对象。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNEventRegistrationToken = class(TDNGenericImport<DNEventRegistrationTokenClass, DNEventRegistrationToken>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationEntryClass = interface(DNValueTypeClass)
  ['{D73266F7-B9B7-41FD-9A7D-374EDFC4D140}']
  end;

  /// <summary>
  ///   保留的值， , ，和序列化对象的名称。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.SerializationEntry')]
  DNSerializationEntry = interface(DNValueType)
  ['{3642E7ED-5A69-3A94-98D3-A08877A0D046}']
  { getter & setter } 

    function get_Value: DNObject;
    function get_Name: string;
    function get_ObjectType: DNType;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取该对象中包含的值。
    /// </summary>
    property Value: DNObject read get_Value;
    /// <summary>
    ///   获取对象的名称。
    /// </summary>
    property Name: string read get_Name;
    /// <summary>
    ///   获取  的对象。
    /// </summary>
    property ObjectType: DNType read get_ObjectType;
  end;

  TDNSerializationEntry = class(TDNGenericImport<DNSerializationEntryClass, DNSerializationEntry>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNStreamingContextClass = interface(DNValueTypeClass)
  ['{4C95871C-8FE7-4527-BA54-2FBF0A13B205}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  与给定的上下文状态的类。
    /// </summary>
    {class} function init(state: DNStreamingContextStates): DNStreamingContext; overload;
    /// <summary>
    ///   新实例初始化  与给定的上下文状态，以及一些附加信息的类。
    /// </summary>
    {class} function init(state: DNStreamingContextStates; additional: DNObject): DNStreamingContext; overload;

  end;

  /// <summary>
  ///   说明给定序列化流的源和目标，并提供另一个调用方定义的上下文。
  /// </summary>
  [DNTypeName('System.Runtime.Serialization.StreamingContext')]
  DNStreamingContext = interface(DNValueType)
  ['{79179AA0-E14C-35EA-A666-66BE968AF69F}']
  { getter & setter } 

    function get_Context: DNObject;
    function get_State: DNStreamingContextStates;

  { methods } 

    /// <summary>
    ///   确定两个  实例都包含相同的值。
    /// </summary>
    function Equals(obj: DNObject): Boolean;
    /// <summary>
    ///   返回此对象的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取附加上下文中指定的上下文。
    /// </summary>
    property Context: DNObject read get_Context;
    /// <summary>
    ///   获取源或目标的传输数据。
    /// </summary>
    property State: DNStreamingContextStates read get_State;
  end;

  TDNStreamingContext = class(TDNGenericImport<DNStreamingContextClass, DNStreamingContext>) end;

  //-------------namespace: System----------------
  DNRuntimeArgumentHandleClass = interface(DNValueTypeClass)
  ['{7F3FDB8C-FEC0-4A74-B5E4-1E440DC0A563}']
  end;

  /// <summary>
  ///   引用的变量长度参数列表。
  /// </summary>
  [DNTypeName('System.RuntimeArgumentHandle')]
  DNRuntimeArgumentHandle = interface(DNValueType)
  ['{3613A9B6-C23B-3B54-AE02-6EC764D69E70}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNRuntimeArgumentHandle = class(TDNGenericImport<DNRuntimeArgumentHandleClass, DNRuntimeArgumentHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeFieldHandleClass = interface(DNValueTypeClass)
  ['{4346C37F-6633-4D1F-9328-6B9DA9617270}']
  end;

  /// <summary>
  ///   表示使用内部元数据标记的字段。
  /// </summary>
  [DNTypeName('System.RuntimeFieldHandle')]
  DNRuntimeFieldHandle = interface(DNValueType)
  ['{27B33BD9-E6F7-3148-911D-F67340A5353F}']
  { getter & setter } 

    function get_Value: IntPtr;

  { methods } 

    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   指示当前实例是否等于指定的对象。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(handle: DNRuntimeFieldHandle): Boolean; overload;
    /// <summary>
    ///   填充  所必需进行反序列化当前实例所表示的字段的数据。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取由当前实例所表示的字段的句柄。
    /// </summary>
    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeFieldHandle = class(TDNGenericImport<DNRuntimeFieldHandleClass, DNRuntimeFieldHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeMethodHandleClass = interface(DNValueTypeClass)
  ['{BE00AD59-5D31-48E1-A144-F9C26C066581}']
  end;

  /// <summary>
  ///   是一种方法的内部元数据表示的句柄。
  /// </summary>
  [DNTypeName('System.RuntimeMethodHandle')]
  DNRuntimeMethodHandle = interface(DNValueType)
  ['{F8FC5D7C-8215-3E65-BEFB-11E8172606FE}']
  { getter & setter } 

    function get_Value: IntPtr;

  { methods } 

    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   指示此实例是否与指定对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   指示此实例是否等于指定 。
    /// </summary>
    function Equals(handle: DNRuntimeMethodHandle): Boolean; overload;
    /// <summary>
    ///   获取指向此实例所表示的方法的指针。
    /// </summary>
    function GetFunctionPointer: IntPtr;
    /// <summary>
    ///   填充  所必需进行反序列化此实例所表示的字段的数据。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取此实例的值。
    /// </summary>
    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeMethodHandle = class(TDNGenericImport<DNRuntimeMethodHandleClass, DNRuntimeMethodHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeTypeHandleClass = interface(DNValueTypeClass)
  ['{B68F30BC-85CC-4187-89F0-11370A36244B}']
  end;

  /// <summary>
  ///   表示使用内部元数据标记的类型。
  /// </summary>
  [DNTypeName('System.RuntimeTypeHandle')]
  DNRuntimeTypeHandle = interface(DNValueType)
  ['{78C18A10-C00E-3C09-B000-411C38900C2C}']
  { getter & setter } 

    function get_Value: IntPtr;

  { methods } 

    /// <summary>
    ///   返回当前实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   该值指示指定的对象是否等于当前  结构。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   指示是否指定  结构是否等于当前  结构。
    /// </summary>
    function Equals(handle: DNRuntimeTypeHandle): Boolean; overload;
    /// <summary>
    ///   获取包含当前实例所表示的类型的模块的句柄。
    /// </summary>
    function GetModuleHandle: DNModuleHandle;
    /// <summary>
    ///   填充  所必需进行反序列化当前实例所表示的类型的数据。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取此实例所表示的类型的句柄。
    /// </summary>
    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeTypeHandle = class(TDNGenericImport<DNRuntimeTypeHandleClass, DNRuntimeTypeHandle>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSAParametersClass = interface(DNValueTypeClass)
  ['{B984B99E-F223-43BF-8BBC-3BD2CC28A3D4}']
  end;

  /// <summary>
  ///   包含的典型参数  算法。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.DSAParameters')]
  DNDSAParameters = interface(DNValueType)
  ['{0C646F46-AA27-350D-88DD-D8C920CE6C2D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNDSAParameters = class(TDNGenericImport<DNDSAParametersClass, DNDSAParameters>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHashAlgorithmNameClass = interface(DNValueTypeClass)
  ['{A815B739-16A8-45CF-8DAE-B51EDB851CA1}']
  { static getter & setter } 

    {class} function get_MD5: DNHashAlgorithmName;
    {class} function get_SHA1: DNHashAlgorithmName;
    {class} function get_SHA256: DNHashAlgorithmName;
    {class} function get_SHA384: DNHashAlgorithmName;
    {class} function get_SHA512: DNHashAlgorithmName;

  { constructors } 

    /// <summary>
    ///   初始化具有自定义名称的  结构的新实例。
    /// </summary>
    {class} function init(name: string): DNHashAlgorithmName;

  { static propertys } 

    /// <summary>
    ///   获取表示“MD5”的哈希算法名称。
    /// </summary>
    {class} property MD5: DNHashAlgorithmName read get_MD5;
    /// <summary>
    ///   获取表示“SHA1”的哈希算法名称。
    /// </summary>
    {class} property SHA1: DNHashAlgorithmName read get_SHA1;
    /// <summary>
    ///   获取表示“SHA256”的哈希算法名称。
    /// </summary>
    {class} property SHA256: DNHashAlgorithmName read get_SHA256;
    /// <summary>
    ///   获取表示“SHA384”的哈希算法名称。
    /// </summary>
    {class} property SHA384: DNHashAlgorithmName read get_SHA384;
    /// <summary>
    ///   获取表示“SHA512”的哈希算法名称。
    /// </summary>
    {class} property SHA512: DNHashAlgorithmName read get_SHA512;
  end;

  /// <summary>
  ///   指定加密哈希算法的名称。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.HashAlgorithmName')]
  DNHashAlgorithmName = interface(DNValueType)
  ['{E4924CAF-7DC5-33C0-BE11-F1940CF41D14}']
  { getter & setter } 

    function get_Name: string;

  { methods } 

    /// <summary>
    ///   返回当前  实例的字符串表示形式。
    /// </summary>
    function ToString: string;
    /// <summary>
    ///   返回一个指示当前实例是否与指定对象相等的值。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   返回一个值，该值指示两个  实例是否相等。
    /// </summary>
    function Equals(other: DNHashAlgorithmName): Boolean; overload;
    /// <summary>
    ///   返回当前实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取算法名称的基础字符串表示形式。
    /// </summary>
    property Name: string read get_Name;
  end;

  TDNHashAlgorithmName = class(TDNGenericImport<DNHashAlgorithmNameClass, DNHashAlgorithmName>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAParametersClass = interface(DNValueTypeClass)
  ['{300D994D-0C8E-44A6-8719-DCD22ABD21F3}']
  end;

  /// <summary>
  ///   表示  算法的标准参数。
  /// </summary>
  [DNTypeName('System.Security.Cryptography.RSAParameters')]
  DNRSAParameters = interface(DNValueType)
  ['{094E9135-483D-334A-AAE7-8690895AB70A}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNRSAParameters = class(TDNGenericImport<DNRSAParametersClass, DNRSAParameters>) end;

  //-------------namespace: System.Threading----------------
  DNAsyncFlowControlClass = interface(DNValueTypeClass)
  ['{83E329D1-5A26-4BB1-A7FB-6305D308C402}']
  end;

  /// <summary>
  ///   提供功能以还原执行上下文在线程之间的迁移（或流动）。
  /// </summary>
  [DNTypeName('System.Threading.AsyncFlowControl')]
  DNAsyncFlowControl = interface(DNValueType)
  ['{6AAAE08D-777C-356A-984D-08D14C40BF8A}']
  { methods } 

    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   还原执行上下文在线程之间的流动。
    /// </summary>
    procedure Undo;
    /// <summary>
    ///   获取当前的哈希代码  结构。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   确定指定的对象是否等于当前  结构。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   确定是否指定  结构是否等于当前  结构。
    /// </summary>
    function Equals(obj: DNAsyncFlowControl): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNAsyncFlowControl = class(TDNGenericImport<DNAsyncFlowControlClass, DNAsyncFlowControl>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenClass = interface(DNValueTypeClass)
  ['{AAC56A37-26EE-4DF7-9271-AC2CF16E4402}']
  { static getter & setter } 

    {class} function get_None: DNCancellationToken;

  { constructors } 

    /// <summary>
    ///   初始化 。
    /// </summary>
    {class} function init(canceled: Boolean): DNCancellationToken;

  { static propertys } 

    /// <summary>
    ///   返回一个空  值。
    /// </summary>
    {class} property None: DNCancellationToken read get_None;
  end;

  /// <summary>
  ///   传播有关应取消操作的通知。
  /// </summary>
  [DNTypeName('System.Threading.CancellationToken')]
  DNCancellationToken = interface(DNValueType)
  ['{443A091C-ADDB-3F3C-A4E5-3D223ADE21B3}']
  { getter & setter } 

    function get_IsCancellationRequested: Boolean;
    function get_CanBeCanceled: Boolean;
    function get_WaitHandle: DNWaitHandle;

  { methods } 

    /// <summary>
    ///   注册一个将在取消此  时调用的委托。
    /// </summary>
    function &Register(callback: DNAction): DNCancellationTokenRegistration; overload;
    /// <summary>
    ///   注册一个将在取消此  时调用的委托。
    /// </summary>
    function &Register(callback: DNAction; useSynchronizationContext: Boolean): DNCancellationTokenRegistration; overload;
    /// <summary>
    ///   确定当前的  实例是否等于指定的标记。
    /// </summary>
    function Equals(other: DNCancellationToken): Boolean; overload;
    /// <summary>
    ///   确定当前的  实例是否等于指定的 。
    /// </summary>
    function Equals(other: DNObject): Boolean; overload;
    /// <summary>
    ///   作为  的哈希函数。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   如果已请求取消此标记，则引发 。
    /// </summary>
    procedure ThrowIfCancellationRequested;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取是否已请求取消此标记。
    /// </summary>
    property IsCancellationRequested: Boolean read get_IsCancellationRequested;
    /// <summary>
    ///   获取此标记是否能处于已取消状态。
    /// </summary>
    property CanBeCanceled: Boolean read get_CanBeCanceled;
    /// <summary>
    ///   获取在取消标记时收到信号的 。
    /// </summary>
    property WaitHandle: DNWaitHandle read get_WaitHandle;
  end;

  TDNCancellationToken = class(TDNGenericImport<DNCancellationTokenClass, DNCancellationToken>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenRegistrationClass = interface(DNValueTypeClass)
  ['{56AD91C8-627E-4DD2-BF8F-A636EBDAF57E}']
  end;

  /// <summary>
  ///   表示已向注册的回调委托 。
  /// </summary>
  [DNTypeName('System.Threading.CancellationTokenRegistration')]
  DNCancellationTokenRegistration = interface(DNValueType)
  ['{BA50F3F1-33BE-35B7-A180-B930A4279A97}']
  { methods } 

    /// <summary>
    ///   释放  类的当前实例所使用的所有资源。
    /// </summary>
    procedure Dispose;
    /// <summary>
    ///   确定当前的  实例是否等于指定的 。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   确定当前的  实例是否等于指定的 。
    /// </summary>
    function Equals(other: DNCancellationTokenRegistration): Boolean; overload;
    /// <summary>
    ///   作为  的哈希函数。
    /// </summary>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNCancellationTokenRegistration = class(TDNGenericImport<DNCancellationTokenRegistrationClass, DNCancellationTokenRegistration>) end;

  //-------------namespace: System.Threading----------------
  DNLockCookieClass = interface(DNValueTypeClass)
  ['{26D97505-ECF6-4B31-A6E6-BD7DFD3429A8}']
  end;

  /// <summary>
  ///   定义实现单个编写器/多个读取器语义的锁。
  ///               这是值类型。
  /// </summary>
  [DNTypeName('System.Threading.LockCookie')]
  DNLockCookie = interface(DNValueType)
  ['{BA0E4CF7-A429-3FE8-ABAB-183387D05852}']
  { methods } 

    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   指示指定的对象是否为  和是否等于当前实例。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   该值指示当前实例是否等于指定 。
    /// </summary>
    function Equals(obj: DNLockCookie): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNLockCookie = class(TDNGenericImport<DNLockCookieClass, DNLockCookie>) end;

  //-------------namespace: System.Threading----------------
  DNNativeOverlappedClass = interface(DNValueTypeClass)
  ['{008531A2-1693-485A-B73F-2BCA2A4B3145}']
  end;

  /// <summary>
  ///   提供可从非托管代码查看的显式布局，与 Win32 OVERLAPPED 结构的布局相同，末尾具有其他保留字段。
  /// </summary>
  [DNTypeName('System.Threading.NativeOverlapped')]
  DNNativeOverlapped = interface(DNValueType)
  ['{A2959123-2F66-35B4-815D-37C83360809B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNNativeOverlapped = class(TDNGenericImport<DNNativeOverlappedClass, DNNativeOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNSpinLockClass = interface(DNValueTypeClass)
  ['{13550E92-BE6E-4BF8-828E-4B8A62DD97B0}']
  { constructors } 

    /// <summary>
    ///   新实例初始化  跟踪线程 Id，从而提高调试的选项的结构。
    /// </summary>
    {class} function init(enableThreadOwnerTracking: Boolean): DNSpinLock;

  end;

  /// <summary>
  ///   提供一个相互排斥锁基元，在该基元中，尝试获取锁的线程将在重复检查的循环中等待，直至该锁变为可用为止。
  /// </summary>
  [DNTypeName('System.Threading.SpinLock')]
  DNSpinLock = interface(DNValueType)
  ['{FD703E79-2BC6-3F00-8840-D79214A53AD9}']
  { getter & setter } 

    function get_IsHeld: Boolean;
    function get_IsHeldByCurrentThread: Boolean;
    function get_IsThreadOwnerTrackingEnabled: Boolean;

  { methods } 

    procedure Enter(out lockTaken: Boolean);
    procedure TryEnter(out lockTaken: Boolean); overload;
    procedure TryEnter(timeout: DNTimeSpan; out lockTaken: Boolean); overload;
    procedure TryEnter(millisecondsTimeout: Int32; out lockTaken: Boolean); overload;
    /// <summary>
    ///   释放的锁。
    /// </summary>
    procedure &Exit; overload;
    /// <summary>
    ///   释放的锁。
    /// </summary>
    procedure &Exit(useMemoryBarrier: Boolean); overload;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取是否由任何线程当前持有此锁。
    /// </summary>
    property IsHeld: Boolean read get_IsHeld;
    /// <summary>
    ///   获取指示当前线程持有锁。
    /// </summary>
    property IsHeldByCurrentThread: Boolean read get_IsHeldByCurrentThread;
    /// <summary>
    ///   获取指示线程所有权跟踪启用此实例。
    /// </summary>
    property IsThreadOwnerTrackingEnabled: Boolean read get_IsThreadOwnerTrackingEnabled;
  end;

  TDNSpinLock = class(TDNGenericImport<DNSpinLockClass, DNSpinLock>) end;

  //-------------namespace: System.Threading----------------
  DNSpinWaitClass = interface(DNValueTypeClass)
  ['{A1790505-22F8-4EBB-A573-055DDF7BBB33}']
  end;

  /// <summary>
  ///   为基于自旋的等待提供支持。
  /// </summary>
  [DNTypeName('System.Threading.SpinWait')]
  DNSpinWait = interface(DNValueType)
  ['{70121822-4C0A-386B-814A-D3B1819A95D7}']
  { getter & setter } 

    function get_Count: Int32;
    function get_NextSpinWillYield: Boolean;

  { methods } 

    /// <summary>
    ///   执行单个数值调节钮。
    /// </summary>
    procedure SpinOnce;
    /// <summary>
    ///   将数值调节钮计数器重置。
    /// </summary>
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取的次数  已对此实例调用。
    /// </summary>
    property Count: Int32 read get_Count;
    /// <summary>
    ///   获取是否确保下次调用  会产生处理器，同时触发强制的上下文切换。
    /// </summary>
    property NextSpinWillYield: Boolean read get_NextSpinWillYield;
  end;

  TDNSpinWait = class(TDNGenericImport<DNSpinWaitClass, DNSpinWait>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNParallelLoopResultClass = interface(DNValueTypeClass)
  ['{1A4CEB32-D19C-4E6A-BD5A-189884F79BAA}']
  end;

  /// <summary>
  ///   提供有关执行的完成状态  循环。
  /// </summary>
  [DNTypeName('System.Threading.Tasks.ParallelLoopResult')]
  DNParallelLoopResult = interface(DNValueType)
  ['{4DB552D1-9A29-3F8E-907D-F42A125DB565}']
  { getter & setter } 

    function get_IsCompleted: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取指示循环已完成运行，以便所有的循环迭代期间执行，并且该循环没有收到提前结束的请求。
    /// </summary>
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNParallelLoopResult = class(TDNGenericImport<DNParallelLoopResultClass, DNParallelLoopResult>) end;

  //-------------namespace: System----------------
  DNTimeSpanClass = interface(DNValueTypeClass)
  ['{C35FE6C2-A89F-4339-8C48-F38279C0E2A8}']
  { constructors } 

    /// <summary>
    ///   将  结构的新实例初始化为指定的刻度数。
    /// </summary>
    {class} function init(ticks: Int64): DNTimeSpan; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定的小时数、分钟数和秒数。
    /// </summary>
    {class} function init(hours: Int32; minutes: Int32; seconds: Int32): DNTimeSpan; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定的天数、小时数、分钟数和秒数。
    /// </summary>
    {class} function init(days: Int32; hours: Int32; minutes: Int32; seconds: Int32): DNTimeSpan; overload;
    /// <summary>
    ///   将  结构的新实例初始化为指定的天数、小时数、分钟数、秒数和毫秒数。
    /// </summary>
    {class} function init(days: Int32; hours: Int32; minutes: Int32; seconds: Int32; milliseconds: Int32): DNTimeSpan; overload;

  { static methods } 

    /// <summary>
    ///   比较两个  值，并返回一个整数，该整数指示第一个值是短于、等于还是长于第二个值。
    /// </summary>
    {class} function Compare(t1: DNTimeSpan; t2: DNTimeSpan): Int32;
    /// <summary>
    ///   返回表示指定天数的 ，其中对天数的指定精确到最接近的毫秒。
    /// </summary>
    {class} function FromDays(value: Double): DNTimeSpan;
    /// <summary>
    ///   返回一个值，该值指示  的两个指定实例是否相等。
    /// </summary>
    {class} function Equals(t1: DNTimeSpan; t2: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   返回表示指定小时数的 ，其中对小时数的指定精确到最接近的毫秒。
    /// </summary>
    {class} function FromHours(value: Double): DNTimeSpan;
    /// <summary>
    ///   返回表示指定毫秒数的 。
    /// </summary>
    {class} function FromMilliseconds(value: Double): DNTimeSpan;
    /// <summary>
    ///   返回表示指定分钟数的 ，其中对分钟数的指定精确到最接近的毫秒。
    /// </summary>
    {class} function FromMinutes(value: Double): DNTimeSpan;
    /// <summary>
    ///   返回表示指定秒数的 ，其中对秒数的指定精确到最接近的毫秒。
    /// </summary>
    {class} function FromSeconds(value: Double): DNTimeSpan;
    /// <summary>
    ///   返回表示指定时间的 ，其中对时间的指定以刻度为单位。
    /// </summary>
    {class} function FromTicks(value: Int64): DNTimeSpan;
    /// <summary>
    ///   将时间间隔的字符串表示形式转换为等效的 。
    /// </summary>
    {class} function Parse(s: string): DNTimeSpan; overload;
    /// <summary>
    ///   使用指定的区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 。
    /// </summary>
    {class} function Parse(input: string; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    /// <summary>
    ///   使用指定的格式和区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 。
    ///               字符串表示形式的格式必须与指定的格式完全匹配。
    /// </summary>
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    /// <summary>
    ///   使用指定的格式字符串数组和区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 。
    ///               字符串表示形式的格式必须与一种指定的格式完全匹配。
    /// </summary>
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function TryParse(s: string; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParse(input: string; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   使用指定的格式、区域性特定格式信息和样式，将时间间隔的字符串表示形式转换为其等效的 。
    ///               字符串表示形式的格式必须与指定的格式完全匹配。
    /// </summary>
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    /// <summary>
    ///   使用指定的格式、区域性特定格式信息和样式，将时间间隔的字符串表示形式转换为其等效的 。
    ///               字符串表示形式的格式必须与一种指定的格式完全匹配。
    /// </summary>
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;

  end;

  /// <summary>
  ///   表示一个时间间隔。
  ///            
  ///              若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  /// </summary>
  [DNTypeName('System.TimeSpan')]
  DNTimeSpan = interface(DNValueType)
  ['{94942670-4ACF-3572-92D1-0916CD777E00}']
  { getter & setter } 

    function get_Ticks: Int64;
    function get_Days: Int32;
    function get_Hours: Int32;
    function get_Milliseconds: Int32;
    function get_Minutes: Int32;
    function get_Seconds: Int32;
    function get_TotalDays: Double;
    function get_TotalHours: Double;
    function get_TotalMilliseconds: Double;
    function get_TotalMinutes: Double;
    function get_TotalSeconds: Double;

  { methods } 

    /// <summary>
    ///   返回一个新的  对象，其值为指定的  对象与此实例的值之和。
    /// </summary>
    function Add(ts: DNTimeSpan): DNTimeSpan;
    /// <summary>
    ///   将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例是短于、等于还是长于指定对象。
    /// </summary>
    function CompareTo(value: DNObject): Int32; overload;
    /// <summary>
    ///   将此实例与指定的  对象进行比较，并返回一个整数，该整数指示此实例是短于、等于还是长于  对象。
    /// </summary>
    function CompareTo(value: DNTimeSpan): Int32; overload;
    /// <summary>
    ///   返回新的  对象，其值是当前  对象的绝对值。
    /// </summary>
    function Duration: DNTimeSpan;
    /// <summary>
    ///   返回一个值，该值指示此实例是否等于指定的对象。
    /// </summary>
    function Equals(value: DNObject): Boolean; overload;
    /// <summary>
    ///   返回一个值，该值指示此实例是否与指定的  相等。
    /// </summary>
    function Equals(obj: DNTimeSpan): Boolean; overload;
    /// <summary>
    ///   返回此实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回一个新的  对象，它的值为这个实例的相反值。
    /// </summary>
    function Negate: DNTimeSpan;
    /// <summary>
    ///   返回一个新的  对象，其值为指定的  对象与此实例的值之差。
    /// </summary>
    function Subtract(ts: DNTimeSpan): DNTimeSpan;
    /// <summary>
    ///   将当前  对象的值转换为其等效的字符串表示形式。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   使用指定的格式将当前  对象的值转换为其等效的字符串表示形式。
    /// </summary>
    function ToString(format: string): string; overload;
    /// <summary>
    ///   使用指定的格式和区域性特定的格式设置信息，将当前  对象的值转换为其等效字符串表示形式。
    /// </summary>
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取表示当前  结构的值的刻度数。
    /// </summary>
    property Ticks: Int64 read get_Ticks;
    /// <summary>
    ///   获取当前  结构所表示的时间间隔的天数部分。
    /// </summary>
    property Days: Int32 read get_Days;
    /// <summary>
    ///   获取当前  结构所表示的时间间隔的小时数部分。
    /// </summary>
    property Hours: Int32 read get_Hours;
    /// <summary>
    ///   获取当前  结构所表示的时间间隔的毫秒数部分。
    /// </summary>
    property Milliseconds: Int32 read get_Milliseconds;
    /// <summary>
    ///   获取当前  结构所表示的时间间隔的分钟数部分。
    /// </summary>
    property Minutes: Int32 read get_Minutes;
    /// <summary>
    ///   获取当前  结构所表示的时间间隔的秒数部分。
    /// </summary>
    property Seconds: Int32 read get_Seconds;
    /// <summary>
    ///   获取以整天数和天的小数部分表示的当前  结构的值。
    /// </summary>
    property TotalDays: Double read get_TotalDays;
    /// <summary>
    ///   获取以整小时数和小时的小数部分表示的当前  结构的值。
    /// </summary>
    property TotalHours: Double read get_TotalHours;
    /// <summary>
    ///   获取以整毫秒数和毫秒的小数部分表示的当前  结构的值。
    /// </summary>
    property TotalMilliseconds: Double read get_TotalMilliseconds;
    /// <summary>
    ///   获取以整分钟数和分钟的小数部分表示的当前  结构的值。
    /// </summary>
    property TotalMinutes: Double read get_TotalMinutes;
    /// <summary>
    ///   获取以整秒数和秒的小数部分表示的当前  结构的值。
    /// </summary>
    property TotalSeconds: Double read get_TotalSeconds;
  end;

  TDNTimeSpan = class(TDNGenericImport<DNTimeSpanClass, DNTimeSpan>) end;

  //-------------namespace: System----------------
  DNTimeZoneInfo_TransitionTimeClass = interface(DNValueTypeClass)
  ['{3B7440E0-D01E-4459-B0EF-C762397EDB5E}']
  { static methods } 

    /// <summary>
    ///   定义一个使用固定日期规则的日期更改（即，发生在特定月份的特定日期的时间更改）。
    /// </summary>
    {class} function CreateFixedDateRule(timeOfDay: DNDateTime; month: Int32; day: Int32): DNTimeZoneInfo_TransitionTime;
    /// <summary>
    ///   定义一个使用浮动日期规则的日期更改（即，发生在特定月份的特定星期的特定星期几的时间更改）。
    /// </summary>
    {class} function CreateFloatingDateRule(timeOfDay: DNDateTime; month: Int32; week: Int32; dayOfWeek: DNDayOfWeek): DNTimeZoneInfo_TransitionTime;

  end;

  /// <summary>
  ///   提供有关特定时区中特定时间更改（例如从夏时制更改为标准时间，或者从标准时间更改为夏时制）的信息。
  /// </summary>
  [DNTypeName('System.TimeZoneInfo+TransitionTime')]
  DNTimeZoneInfo_TransitionTime = interface(DNValueType)
  ['{FD84B7A6-60CC-3B02-AA9C-DAE953B4C8DD}']
  { getter & setter } 

    function get_TimeOfDay: DNDateTime;
    function get_Month: Int32;
    function get_Week: Int32;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_IsFixedDateRule: Boolean;

  { methods } 

    /// <summary>
    ///   确定是否一个对象具有与当前  对象相同的值。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   确定当前  对象是否具有与第二个  对象相同的值。
    /// </summary>
    function Equals(other: DNTimeZoneInfo_TransitionTime): Boolean; overload;
    /// <summary>
    ///   用作哈希算法的哈希函数和数据结构（如哈希表）。
    /// </summary>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取发生时间更改的小时、分钟和秒。
    /// </summary>
    property TimeOfDay: DNDateTime read get_TimeOfDay;
    /// <summary>
    ///   获取发生时间更改的月份。
    /// </summary>
    property Month: Int32 read get_Month;
    /// <summary>
    ///   获取时间更改发生在月中的第几个星期。
    /// </summary>
    property Week: Int32 read get_Week;
    /// <summary>
    ///   获取发生时间更改的日期。
    /// </summary>
    property Day: Int32 read get_Day;
    /// <summary>
    ///   获取时间更改发生在星期几。
    /// </summary>
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    /// <summary>
    ///   获取一个值，该值指示是在固定日期和时间（如 11 月 1 日）还是在浮动日期和时间（如 10 月的最后一个星期日）发生时间更改。
    /// </summary>
    property IsFixedDateRule: Boolean read get_IsFixedDateRule;
  end;

  TDNTimeZoneInfo_TransitionTime = class(TDNGenericImport<DNTimeZoneInfo_TransitionTimeClass, DNTimeZoneInfo_TransitionTime>) end;

  //-------------namespace: System----------------
  DNTypedReferenceClass = interface(DNValueTypeClass)
  ['{ED30FFF1-A0FD-494E-83DB-D73A595205DB}']
  { static methods } 

    /// <summary>
    ///   为由指定对象和字段说明列表标识的字段生成 。
    /// </summary>
    {class} function MakeTypedReference(target: DNObject; flds: TArray<DNFieldInfo>): DNTypedReference;
    /// <summary>
    ///   将指定  转换为 。
    /// </summary>
    {class} function ToObject(value: DNTypedReference): DNObject;
    /// <summary>
    ///   返回指定  的目标类型。
    /// </summary>
    {class} function GetTargetType(value: DNTypedReference): DNType;
    /// <summary>
    ///   返回指定  的内部元数据类型句柄。
    /// </summary>
    {class} function TargetTypeToken(value: DNTypedReference): DNRuntimeTypeHandle;
    /// <summary>
    ///   将指定值转换为 。
    ///               不支持此方法。
    /// </summary>
    {class} procedure SetTypedReference(target: DNTypedReference; value: DNObject);

  end;

  /// <summary>
  ///   描述既包含指向某位置的托管指针，也包含该位置可能存储的类型的运行时表示形式的对象。
  /// </summary>
  [DNTypeName('System.TypedReference')]
  DNTypedReference = interface(DNValueType)
  ['{06AD02B5-C5A4-3EEC-B7BA-B0AF7860D36A}']
  { methods } 

    /// <summary>
    ///   返回此对象的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   检查该对象是否等于指定对象。
    /// </summary>
    function Equals(o: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNTypedReference = class(TDNGenericImport<DNTypedReferenceClass, DNTypedReference>) end;

  //-------------namespace: System----------------
  DNValueTupleClass = interface(DNValueTypeClass)
  ['{AF28CF0D-AC29-4CD0-B23A-3F3B330F736E}']
  { static methods } 

    /// <summary>
    ///   创建无组件的新值元组。
    /// </summary>
    {class} function Create: DNValueTuple;

  end;

  /// <summary>
  ///   提供用于创建值元组的静态方法。
  /// </summary>
  [DNTypeName('System.ValueTuple')]
  DNValueTuple = interface(DNValueType)
  ['{4AF8963C-B97C-35A2-BDB7-05DDD63741C7}']
  { methods } 

    /// <summary>
    ///   返回一个值，该值指示当前  实例是否与指定的对象相等。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   确定两个  实例是否相等。
    ///               此方法始终返回 。
    /// </summary>
    function Equals(other: DNValueTuple): Boolean; overload;
    /// <summary>
    ///   将当前  实例与指定的对象进行比较。
    /// </summary>
    function CompareTo(other: DNValueTuple): Int32;
    /// <summary>
    ///   返回当前  实例的哈希代码。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   返回此  实例的字符串表示形式。
    /// </summary>
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple = class(TDNGenericImport<DNValueTupleClass, DNValueTuple>) end;

  //-------------namespace: System----------------
  DNVoidClass = interface(DNValueTypeClass)
  ['{E72C07EC-0DBD-4B6D-B84C-7F71681BC418}']
  end;

  /// <summary>
  ///   指定不返回值的方法的返回值类型。
  /// </summary>
  [DNTypeName('System.Void')]
  DNVoid = interface(DNValueType)
  ['{CA5C1C2B-61F8-3FC4-B66B-17163A3066A5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNVoid = class(TDNGenericImport<DNVoidClass, DNVoid>) end;

  //-------------namespace: System----------------
  DNVersionClass = interface(DNObjectClass)
  ['{25FA796C-7844-4B3C-9A9A-2ACB79C6A5ED}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例与指定主要的类、 内部版本和修订号。
    /// </summary>
    {class} function init(major: Int32; minor: Int32; build: Int32; revision: Int32): DNVersion; overload;
    /// <summary>
    ///   新实例初始化  类使用指定的主版本号、 次版本号和生成值。
    /// </summary>
    {class} function init(major: Int32; minor: Int32; build: Int32): DNVersion; overload;
    /// <summary>
    ///   初始化的新实例类使用指定的主版本号和次值。
    /// </summary>
    {class} function init(major: Int32; minor: Int32): DNVersion; overload;
    /// <summary>
    ///   使用指定的字符串初始化  类的新实例。
    /// </summary>
    {class} function init(version: string): DNVersion; overload;
    /// <summary>
    ///   初始化  类的新实例。
    /// </summary>
    {class} function init: DNVersion; overload;

  { static methods } 

    /// <summary>
    ///   版本号的字符串表示转换为等效对象。
    /// </summary>
    {class} function Parse(input: string): DNVersion;
    {class} function TryParse(input: string; out result: DNVersion): Boolean;

  end;

  /// <summary>
  ///   表示程序集、操作系统或公共语言运行时的版本号。
  ///               此类不能被继承。
  /// </summary>
  [DNTypeName('System.Version')]
  DNVersion = interface(DNObject)
  ['{43CD41AD-3B78-3531-9031-3059E0AA64EB}']
  { getter & setter } 

    function get_Major: Int32;
    function get_Minor: Int32;
    function get_Build: Int32;
    function get_Revision: Int32;
    function get_MajorRevision: Int16;
    function get_MinorRevision: Int16;

  { methods } 

    /// <summary>
    ///   返回一个新对象，其值是当前相同对象。
    /// </summary>
    function Clone: DNObject;
    /// <summary>
    ///   比较当前与指定的对象的对象并返回对其相对值的指示。
    /// </summary>
    function CompareTo(version: DNObject): Int32; overload;
    /// <summary>
    ///   比较当前对象与指定对象并返回对其相对值的指示。
    /// </summary>
    function CompareTo(value: DNVersion): Int32; overload;
    /// <summary>
    ///   返回一个值，该值指示是否当前  对象是否等于指定的对象。
    /// </summary>
    function Equals(obj: DNObject): Boolean; overload;
    /// <summary>
    ///   返回一个值，该值指示是否当前  对象与另一个指定  对象表示相同的值。
    /// </summary>
    function Equals(obj: DNVersion): Boolean; overload;
    /// <summary>
    ///   返回当前哈希代码  对象。
    /// </summary>
    function GetHashCode: Int32;
    /// <summary>
    ///   将当前的值转换为其等效的对象表示形式。
    /// </summary>
    function ToString: string; overload;
    /// <summary>
    ///   将当前的值转换为其等效的对象表示形式。
    ///               指定的计数指示要返回的部分数。
    /// </summary>
    function ToString(fieldCount: Int32): string; overload;
    function GetType: DNType;

  { propertys } 

    /// <summary>
    ///   获取当前的版本号的主要部分的值对象。
    /// </summary>
    property Major: Int32 read get_Major;
    /// <summary>
    ///   获取当前的版本号的次要部分的值对象。
    /// </summary>
    property Minor: Int32 read get_Minor;
    /// <summary>
    ///   获取当前的版本号的生成部分的值对象。
    /// </summary>
    property Build: Int32 read get_Build;
    /// <summary>
    ///   获取当前的版本号的修订号部分的值对象。
    /// </summary>
    property Revision: Int32 read get_Revision;
    /// <summary>
    ///   获取修订号的高 16 位。
    /// </summary>
    property MajorRevision: Int16 read get_MajorRevision;
    /// <summary>
    ///   获取修订号的低 16 位。
    /// </summary>
    property MinorRevision: Int16 read get_MinorRevision;
  end;

  TDNVersion = class(TDNGenericImport<DNVersionClass, DNVersion>) end;

  //-------------namespace: System----------------
  DNWeakReferenceClass = interface(DNObjectClass)
  ['{5DB3DA07-77A2-4FA0-AAF7-13DE9BFAC658}']
  { constructors } 

    /// <summary>
    ///   初始化的新实例类，引用指定的对象。
    /// </summary>
    {class} function init(target: DNObject): DNWeakReference; overload;
    /// <summary>
    ///   通过引用指定对象并使用指定的复活跟踪，初始化  类的新实例。
    /// </summary>
    {class} function init(target: DNObject; trackResurrection: Boolean): DNWeakReference; overload;

  end;

  /// <summary>
  ///   表示弱引用，即在引用对象的同时仍然允许通过垃圾回收来回收该对象。
  /// </summary>
  [DNTypeName('System.WeakReference')]
  DNWeakReference = interface(DNObject)
  ['{D3F54E92-A0C7-3BF4-A114-F1F384CE3EFF}']
  { getter & setter } 

    function get_IsAlive: Boolean;
    function get_TrackResurrection: Boolean;
    function get_Target: DNObject;
    procedure set_Target(value: DNObject);

  { methods } 

    /// <summary>
    ///   填充  对象序列化当前所需的所有数据  对象。
    /// </summary>
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    /// <summary>
    ///   获取当前  对象引用的对象是否已被垃圾回收的指示。
    /// </summary>
    property IsAlive: Boolean read get_IsAlive;
    /// <summary>
    ///   获取当前  对象引用的对象在终止后是否会被跟踪的指示。
    /// </summary>
    property TrackResurrection: Boolean read get_TrackResurrection;
    /// <summary>
    ///   获取或设置当前  对象引用的对象（目标）。
    /// </summary>
    property Target: DNObject read get_Target write set_Target;
  end;

  TDNWeakReference = class(TDNGenericImport<DNWeakReferenceClass, DNWeakReference>) end;


implementation

end.
