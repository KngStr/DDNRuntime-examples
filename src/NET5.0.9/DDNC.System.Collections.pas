//----------------------------------------------------------------------------
//  System.Collections.dll: System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 5.0.9
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Collections
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMCOLLECTIONS}
unit DDNC.System.Collections;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type


{ declares }

  DNBitArray = interface; // type: System.Collections.BitArray, namespace: System.Collections
  DNCollectionExtensions = interface; // type: System.Collections.Generic.CollectionExtensions, namespace: System.Collections.Generic
  DNSortedDictionary_KeyValuePairComparer<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyValuePairComparer, namespace: System.Collections.Generic
  DNLinkedList<T> = interface; // type: System.Collections.Generic.LinkedList`1, namespace: System.Collections.Generic
  DNLinkedListNode<T> = interface; // type: System.Collections.Generic.LinkedListNode`1, namespace: System.Collections.Generic
  DNQueue<T> = interface; // type: System.Collections.Generic.Queue`1, namespace: System.Collections.Generic
  DNSortedDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2, namespace: System.Collections.Generic
  DNSortedDictionary_KeyCollection<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyCollection, namespace: System.Collections.Generic
  DNSortedDictionary_ValueCollection<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+ValueCollection, namespace: System.Collections.Generic
  DNSortedList<TKey, TValue> = interface; // type: System.Collections.Generic.SortedList`2, namespace: System.Collections.Generic
  DNSortedList_KeyList<TKey, TValue> = interface; // type: System.Collections.Generic.SortedList`2+KeyList, namespace: System.Collections.Generic
  DNSortedList_ValueList<TKey, TValue> = interface; // type: System.Collections.Generic.SortedList`2+ValueList, namespace: System.Collections.Generic
  DNSortedSet<T> = interface; // type: System.Collections.Generic.SortedSet`1, namespace: System.Collections.Generic
  DNTreeSet<T> = interface; // type: System.Collections.Generic.TreeSet`1, namespace: System.Collections.Generic
  DNStack<T> = interface; // type: System.Collections.Generic.Stack`1, namespace: System.Collections.Generic
  DNStructuralComparisons = interface; // type: System.Collections.StructuralComparisons, namespace: System.Collections
  DNLinkedList_Enumerator<T> = interface; // type: System.Collections.Generic.LinkedList`1+Enumerator, namespace: System.Collections.Generic
  DNQueue_Enumerator<T> = interface; // type: System.Collections.Generic.Queue`1+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator, namespace: System.Collections.Generic
  DNSortedSet_Enumerator<T> = interface; // type: System.Collections.Generic.SortedSet`1+Enumerator, namespace: System.Collections.Generic
  DNStack_Enumerator<T> = interface; // type: System.Collections.Generic.Stack`1+Enumerator, namespace: System.Collections.Generic


{ objects }

  //-------------namespace: System.Collections----------------
  DNBitArrayClass = interface(DNObjectClass)
  ['{EF6FA056-57C6-5CA7-967F-DE6FAD496C1C}']
  { constructors } 

    {class} function init(length: Int32): DNBitArray; overload;
    {class} function init(length: Int32; defaultValue: Boolean): DNBitArray; overload;
    {class} function init(bytes: TArray<Byte>): DNBitArray; overload;
    {class} function init(values: TArray<Boolean>): DNBitArray; overload;
    {class} function init(values: TArray<Int32>): DNBitArray; overload;
    {class} function init(bits: DNBitArray): DNBitArray; overload;

  end;

  [DNTypeName('System.Collections.BitArray')]
  DNBitArray = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{88360068-04AC-30F5-B857-0BE641D7D64E}']
  { getters & setters } 

    function get_Item(index: Int32): Boolean;
    procedure set_Item(index: Int32; value: Boolean);
    function get_Length: Int32;
    procedure set_Length(value: Int32);
    function get_Count: Int32;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;

  { methods } 

    function Get(index: Int32): Boolean;
    procedure &Set(index: Int32; value: Boolean);
    procedure SetAll(value: Boolean);
    function &And(value: DNBitArray): DNBitArray;
    function &Or(value: DNBitArray): DNBitArray;
    function &Xor(value: DNBitArray): DNBitArray;
    function &Not: DNBitArray;
    function RightShift(count: Int32): DNBitArray;
    function LeftShift(count: Int32): DNBitArray;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    function Clone: DDNC.System.Private.CoreLib.DNObject;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: Boolean read get_Item write set_Item; default;
    property Length: Int32 read get_Length write set_Length;
    property Count: Int32 read get_Count;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNBitArray = class(TDNGenericImport<DNBitArrayClass, DNBitArray>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNCollectionExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A3EBE387-D954-5B90-8365-84603AC42920}']
  end;

  [DNTypeName('System.Collections.Generic.CollectionExtensions')]
  DNCollectionExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{79F9C62C-4E0B-3D4C-A3A4-7C214353292B}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCollectionExtensions = class(TDNGenericImport<DNCollectionExtensionsClass, DNCollectionExtensions>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyValuePairComparerClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNComparerClass<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>)
  ['{9A044605-F893-5CDE-A9F6-B1B2E125F1F8}']
  { constructors } 

    {class} function init(keyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedDictionary_KeyValuePairComparer<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyValuePairComparer')]
  DNSortedDictionary_KeyValuePairComparer<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNComparer<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>)
  ['{F09A1F19-F63D-3727-B3A4-7D341A023B73}']
  { methods } 

    function Compare(x: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>; y: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSortedDictionary_KeyValuePairComparer<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyValuePairComparerClass<TKey, TValue>, DNSortedDictionary_KeyValuePairComparer<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedListClass<T> = interface(DNObjectClass)
  ['{A6F32EBB-3662-542D-AA2F-F16A662D6100}']
  { constructors } 

    {class} function init: DNLinkedList<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNLinkedList<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.LinkedList`1')]
  DNLinkedList<T> = interface(DDNC.System.Private.CoreLib.DNICollection<T>)
  ['{B0BAA0D6-DF73-3BC2-9F46-4AAC04A5B8B2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_First: DNLinkedListNode<T>;
    function get_Last: DNLinkedListNode<T>;

  { methods } 

    function AddAfter(node: DNLinkedListNode<T>; value: T): DNLinkedListNode<T>; overload;
    procedure AddAfter(node: DNLinkedListNode<T>; newNode: DNLinkedListNode<T>); overload;
    function AddBefore(node: DNLinkedListNode<T>; value: T): DNLinkedListNode<T>; overload;
    procedure AddBefore(node: DNLinkedListNode<T>; newNode: DNLinkedListNode<T>); overload;
    function AddFirst(value: T): DNLinkedListNode<T>; overload;
    procedure AddFirst(node: DNLinkedListNode<T>); overload;
    function AddLast(value: T): DNLinkedListNode<T>; overload;
    procedure AddLast(node: DNLinkedListNode<T>); overload;
    function &Contains(value: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function Find(value: T): DNLinkedListNode<T>;
    function FindLast(value: T): DNLinkedListNode<T>;
    function GetEnumerator: DNLinkedList_Enumerator<T>;
    procedure Remove(node: DNLinkedListNode<T>);
    procedure RemoveFirst;
    procedure RemoveLast;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure OnDeserialization(sender: DDNC.System.Private.CoreLib.DNObject);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property First: DNLinkedListNode<T> read get_First;
    property Last: DNLinkedListNode<T> read get_Last;
  end;

  TDNLinkedList<T> = class(TDNGenericImport<DNLinkedListClass<T>, DNLinkedList<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedListNodeClass<T> = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{1614D51A-13EC-5F2D-A184-ABFC03DDEB89}']
  { constructors } 

    {class} function init(value: T): DNLinkedListNode<T>;

  end;

  [DNTypeName('System.Collections.Generic.LinkedListNode`1')]
  DNLinkedListNode<T> = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{0A0B5F29-5A56-35CC-98CA-C247A43C6B60}']
  { getters & setters } 

    function get_List: DNLinkedList<T>;
    function get_Next: DNLinkedListNode<T>;
    function get_Previous: DNLinkedListNode<T>;
    function get_Value: T;
    procedure set_Value(value: T);
    function get_ValueRef: T;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property List: DNLinkedList<T> read get_List;
    property Next: DNLinkedListNode<T> read get_Next;
    property Previous: DNLinkedListNode<T> read get_Previous;
    property Value: T read get_Value write set_Value;
    property ValueRef: T read get_ValueRef;
  end;

  TDNLinkedListNode<T> = class(TDNGenericImport<DNLinkedListNodeClass<T>, DNLinkedListNode<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNQueueClass<T> = interface(DNObjectClass)
  ['{0AD8884E-A3C9-533C-A71F-F15E30BBC528}']
  { constructors } 

    {class} function init: DNQueue<T>; overload;
    {class} function init(capacity: Int32): DNQueue<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNQueue<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Queue`1')]
  DNQueue<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{C34D7EEC-1131-3DA9-91D3-E692E7B29119}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Clear;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    procedure Enqueue(item: T);
    function GetEnumerator: DNQueue_Enumerator<T>;
    function Dequeue: T;
    function TryDequeue(out result: T): Boolean;
    function Peek: T;
    function TryPeek(out result: T): Boolean;
    function &Contains(item: T): Boolean;
    function ToArray: TArray<T>;
    procedure TrimExcess;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNQueue<T> = class(TDNGenericImport<DNQueueClass<T>, DNQueue<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{A8072999-2A5F-58B4-8F76-35C340E96337}']
  { constructors } 

    {class} function init: DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>): DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>; comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedDictionary<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2')]
  DNSortedDictionary<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{CA3D7544-F8B4-3094-9B2A-231AE6DEDF91}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;
    function get_Keys: DNSortedDictionary_KeyCollection<TKey, TValue>;
    function get_Values: DNSortedDictionary_ValueCollection<TKey, TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    procedure CopyTo(&array: TArray<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>; index: Int32);
    function GetEnumerator: DNSortedDictionary_Enumerator<TKey, TValue>;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_Comparer;
    property Keys: DNSortedDictionary_KeyCollection<TKey, TValue> read get_Keys;
    property Values: DNSortedDictionary_ValueCollection<TKey, TValue> read get_Values;
  end;

  TDNSortedDictionary<TKey, TValue> = class(TDNGenericImport<DNSortedDictionaryClass<TKey, TValue>, DNSortedDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{C178B7B8-955E-51BB-B472-F48E6101BCF6}']
  { constructors } 

    {class} function init(dictionary: DNSortedDictionary<TKey, TValue>): DNSortedDictionary_KeyCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyCollection')]
  DNSortedDictionary_KeyCollection<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNICollection<TKey>)
  ['{FA6C577B-F23F-3530-9557-74F1F0A9621A}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TKey>; index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortedDictionary_KeyCollection<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyCollectionClass<TKey, TValue>, DNSortedDictionary_KeyCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_ValueCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{0E27CB2C-7398-5C4E-9E2F-79184B9336E6}']
  { constructors } 

    {class} function init(dictionary: DNSortedDictionary<TKey, TValue>): DNSortedDictionary_ValueCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+ValueCollection')]
  DNSortedDictionary_ValueCollection<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNICollection<TValue>)
  ['{C6FEC448-4CCF-3A6D-BBD0-D554E43CF576}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TValue>; index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortedDictionary_ValueCollection<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_ValueCollectionClass<TKey, TValue>, DNSortedDictionary_ValueCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedListClass<TKey, TValue> = interface(DNObjectClass)
  ['{1E379175-E7E2-5E73-9C4F-54A84F2F24E8}']
  { constructors } 

    {class} function init: DNSortedList<TKey, TValue>; overload;
    {class} function init(capacity: Int32): DNSortedList<TKey, TValue>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;
    {class} function init(capacity: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>): DNSortedList<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>; comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedList`2')]
  DNSortedList<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{4D4F991D-F565-3916-A329-E5138CF0D79A}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;
    function get_Count: Int32;
    function get_Keys: DDNC.System.Private.CoreLib.DNIList<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIList<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>;
    function IndexOfKey(key: TKey): Int32;
    function IndexOfValue(value: TValue): Int32;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    procedure RemoveAt(index: Int32);
    procedure TrimExcess;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_Comparer;
    property Count: Int32 read get_Count;
    property Keys: DDNC.System.Private.CoreLib.DNIList<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIList<TValue> read get_Values;
  end;

  TDNSortedList<TKey, TValue> = class(TDNGenericImport<DNSortedListClass<TKey, TValue>, DNSortedList<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedList_KeyListClass<TKey, TValue> = interface(DNObjectClass)
  ['{8929962C-743D-5521-9D2B-0B2851371FAC}']
  end;

  [DNTypeName('System.Collections.Generic.SortedList`2+KeyList')]
  DNSortedList_KeyList<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIList<TKey>)
  ['{AD9C1B96-BE35-38AE-8BD0-34EAEE291AEB}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(key: TKey): Boolean;
    procedure CopyTo(&array: TArray<TKey>; arrayIndex: Int32);
    procedure Insert(index: Int32; value: TKey);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TKey>;
    function IndexOf(key: TKey): Int32;
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNSortedList_KeyList<TKey, TValue> = class(TDNGenericImport<DNSortedList_KeyListClass<TKey, TValue>, DNSortedList_KeyList<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedList_ValueListClass<TKey, TValue> = interface(DNObjectClass)
  ['{70C003C9-121D-5F95-B6B9-F2397114637D}']
  end;

  [DNTypeName('System.Collections.Generic.SortedList`2+ValueList')]
  DNSortedList_ValueList<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIList<TValue>)
  ['{B14D7384-AF7D-3404-AB06-09B9256C8F53}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(value: TValue): Boolean;
    procedure CopyTo(&array: TArray<TValue>; arrayIndex: Int32);
    procedure Insert(index: Int32; value: TValue);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TValue>;
    function IndexOf(value: TValue): Int32;
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNSortedList_ValueList<TKey, TValue> = class(TDNGenericImport<DNSortedList_ValueListClass<TKey, TValue>, DNSortedList_ValueList<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedSetClass<T> = interface(DNObjectClass)
  ['{8DAE189A-4604-538E-8DD1-B190340DED94}']
  { constructors } 

    {class} function init: DNSortedSet<T>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNSortedSet<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNSortedSet<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNSortedSet<T>; overload;

  { static methods } 

    {class} function CreateSetComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<DNSortedSet<T>>; overload;
    {class} function CreateSetComparer(memberEqualityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DDNC.System.Private.CoreLib.DNIEqualityComparer<DNSortedSet<T>>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedSet`1')]
  DNSortedSet<T> = interface(DDNC.System.Private.CoreLib.DNISet<T>)
  ['{0F5D289B-1466-3130-9C2F-C55872F8C041}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<T>;
    function get_Min: T;
    function get_Max: T;

  { methods } 

    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32; count: Int32); overload;
    function GetEnumerator: DNSortedSet_Enumerator<T>;
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function RemoveWhere(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function GetViewBetween(lowerValue: T; upperValue: T): DNSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_Comparer;
    property Min: T read get_Min;
    property Max: T read get_Max;
  end;

  TDNSortedSet<T> = class(TDNGenericImport<DNSortedSetClass<T>, DNSortedSet<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNTreeSetClass<T> = interface(DNSortedSetClass<T>)
  ['{35DC5571-9D22-58AC-A30F-CBBDF6BA4A23}']
  { constructors } 

    {class} function init: DNTreeSet<T>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNTreeSet<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.TreeSet`1')]
  DNTreeSet<T> = interface(DNSortedSet<T>)
  ['{44E230D1-3429-3DC2-A5B3-FA12DEE34B2B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<T>;
    function get_Min: T;
    function get_Max: T;

  { methods } 

    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32; count: Int32); overload;
    function GetEnumerator: DNSortedSet_Enumerator<T>;
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function RemoveWhere(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function GetViewBetween(lowerValue: T; upperValue: T): DNSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_Comparer;
    property Min: T read get_Min;
    property Max: T read get_Max;
  end;

  TDNTreeSet<T> = class(TDNGenericImport<DNTreeSetClass<T>, DNTreeSet<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNStackClass<T> = interface(DNObjectClass)
  ['{612F88EC-BF4F-527F-8C21-76EC43C05468}']
  { constructors } 

    {class} function init: DNStack<T>; overload;
    {class} function init(capacity: Int32): DNStack<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNStack<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Stack`1')]
  DNStack<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{CD9F4930-CAA0-31B8-ABA4-8191980FFD2B}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function GetEnumerator: DNStack_Enumerator<T>;
    procedure TrimExcess;
    function Peek: T;
    function TryPeek(out result: T): Boolean;
    function Pop: T;
    function TryPop(out result: T): Boolean;
    procedure Push(item: T);
    function ToArray: TArray<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStack<T> = class(TDNGenericImport<DNStackClass<T>, DNStack<T>>) end;

  //-------------namespace: System.Collections----------------
  DNStructuralComparisonsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F3B205BD-B42F-5C7B-A267-7AE51955C3AA}']
  { static getter & setter } 

    {class} function get_StructuralComparer: DDNC.System.Private.CoreLib.DNIComparer;
    {class} function get_StructuralEqualityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer;

  { static propertys } 

    {class} property StructuralComparer: DDNC.System.Private.CoreLib.DNIComparer read get_StructuralComparer;
    {class} property StructuralEqualityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer read get_StructuralEqualityComparer;
  end;

  [DNTypeName('System.Collections.StructuralComparisons')]
  DNStructuralComparisons = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{AB775224-2F95-344F-8B3D-AADA980D2491}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStructuralComparisons = class(TDNGenericImport<DNStructuralComparisonsClass, DNStructuralComparisons>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedList_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F2CC2D22-4D9C-537D-A7B8-7E4EF9513343}']
  end;

  [DNTypeName('System.Collections.Generic.LinkedList`1+Enumerator')]
  DNLinkedList_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7C9A4CEB-42FD-3642-B8C1-1CEDCAEDFE82}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNLinkedList_Enumerator<T> = class(TDNGenericImport<DNLinkedList_EnumeratorClass<T>, DNLinkedList_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNQueue_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{95FA3102-6342-5BFD-BC27-E5E32CCD8130}']
  end;

  [DNTypeName('System.Collections.Generic.Queue`1+Enumerator')]
  DNQueue_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{959EF646-4589-3191-8483-A46C2D323BA3}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNQueue_Enumerator<T> = class(TDNGenericImport<DNQueue_EnumeratorClass<T>, DNQueue_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{ED87E294-AE13-57BC-965D-1EED80CA7936}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+Enumerator')]
  DNSortedDictionary_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{560AA3F8-040F-3CD5-B48E-164E7AB9E4CE}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNSortedDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_EnumeratorClass<TKey, TValue>, DNSortedDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyCollection_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{144E7339-40DD-5446-8BF7-578709673AF6}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator')]
  DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A1B68985-54B0-3E9C-B375-B7742371B122}']
  { getters & setters } 

    function get_Current: TKey;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: TKey read get_Current;
  end;

  TDNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyCollection_EnumeratorClass<TKey, TValue>, DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_ValueCollection_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9C89A5B3-16CB-5621-B30A-33C781FBAAF0}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator')]
  DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D9F47293-2839-318D-AF58-ABF5FC2EA260}']
  { getters & setters } 

    function get_Current: TValue;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: TValue read get_Current;
  end;

  TDNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_ValueCollection_EnumeratorClass<TKey, TValue>, DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{960C704C-033E-5649-8E99-F1A93D327013}']
  end;

  [DNTypeName('System.Collections.Generic.SortedSet`1+Enumerator')]
  DNSortedSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{033885EA-8866-33E4-8703-EF4D08A24BBC}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNSortedSet_Enumerator<T> = class(TDNGenericImport<DNSortedSet_EnumeratorClass<T>, DNSortedSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNStack_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4E539957-BAF1-5F79-A929-14169921A627}']
  end;

  [DNTypeName('System.Collections.Generic.Stack`1+Enumerator')]
  DNStack_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{0CF8202E-2BA5-346C-A586-D5945370D05C}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNStack_Enumerator<T> = class(TDNGenericImport<DNStack_EnumeratorClass<T>, DNStack_Enumerator<T>>) end;


implementation


initialization
  LoadAssemblyModule('System.Collections.dll', True);

finalization

end.
