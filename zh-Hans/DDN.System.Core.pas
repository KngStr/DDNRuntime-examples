//----------------------------------------------------------------------------
//  System.Core.dll: System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Core
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Core;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: System.Diagnostics.Eventing----------------
  ///<summary>
  ///  定义最后一个写入操作的可能状态。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode')]
  DNEventProvider_WriteEventErrorCode = type Integer;
  DNEventProvider_WriteEventErrorCodeHelper = record helper for DNEventProvider_WriteEventErrorCode
  public const
    ///<summary>
    ///  已成功写入。
    ///</summary>
    NoError = 0;
    ///<summary>
    ///  会话用尽了可用的缓冲区，可供写入。
    ///  在事件率期间将会发生这种，因为磁盘子系统会过载或缓冲区的数目太小。
    ///  而不是阻止更多的缓冲区可用之前，事件将被丢弃。
    ///  请考虑对于会话，请增加的数量和缓冲区的大小或减小写入的事件数或事件的大小。
    ///</summary>
    NoFreeBuffers = 1;
    ///<summary>
    ///  该事件大于会话缓冲区大小;事件将不能跨越缓冲区。
    ///</summary>
    EventTooBig = 2;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  ///<summary>
  ///  定义事件日志的默认访问权限。
  ///  这些应用程序和系统的值指示，日志访问控制列表 (ACL) 与共享的相应 Windows 日志 （应用程序或系统事件日志） 和共享相同的隔离其他日志的事件的 Windows 跟踪 (ETW) 会话。
  ///  具有自定义隔离的所有通道都使用一个专用 ETW 会话。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogIsolation')]
  DNEventLogIsolation = type Integer;
  DNEventLogIsolationHelper = record helper for DNEventLogIsolation
  public const
    ///<summary>
    ///  该日志与应用程序事件日志中共享的访问控制列表，并且具有应用程序隔离其他日志共享 ETW 会话。
    ///</summary>
    Application = 0;
    ///<summary>
    ///  该日志与系统事件日志中共享的访问控制列表，并且具有系统隔离其他日志共享 ETW 会话。
    ///</summary>
    System = 1;
    ///<summary>
    ///  事件日志是一个使用其自己的专用 ETW 会话的自定义事件日志。
    ///</summary>
    Custom = 2;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  ///<summary>
  ///  确定事件日志服务的行为处理事件日志，当日志达到其允许最大大小 （当事件日志已满时）。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogMode')]
  DNEventLogMode = type Integer;
  DNEventLogModeHelper = record helper for DNEventLogMode
  public const
    ///<summary>
    ///  新的事件会继续在日志文件已满时被存储。
    ///  每个新的传入事件替换日志中的最旧事件。
    ///</summary>
    Circular = 0;
    ///<summary>
    ///  存档日志满时，不改写事件。
    ///  在必要时，会自动存档日志。
    ///  不改写任何事件。
    ///</summary>
    AutoBackup = 1;
    ///<summary>
    ///  不改写事件。
    ///  手动而不是自动清除日志。
    ///</summary>
    Retain = 2;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  ///<summary>
  ///  定义事件日志中记录的事件的类型。
  ///  每个日志只能包含一种类型的事件。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogType')]
  DNEventLogType = type Integer;
  DNEventLogTypeHelper = record helper for DNEventLogType
  public const
    ///<summary>
    ///  这些事件是主要用于最终用户、 管理员和支持。
    ///  管理类型的日志中找到的事件指示问题以及管理员可操作的定义完善的解决方案。
    ///  管理事件的一个示例是一个应用程序无法连接到打印机时发生的事件。
    ///</summary>
    Administrative = 0;
    ///<summary>
    ///  操作类型事件日志中的事件用于分析和诊断问题或发生的事件。
    ///  它们可以用于触发工具或基于问题或发生的事件的任务。
    ///  操作事件的一个示例是一个添加或从系统中删除打印机时发生的事件。
    ///</summary>
    Operational = 1;
    ///<summary>
    ///  分析事件日志中的事件发布在大容量。
    ///  它们描述程序操作，并指示不能处理因用户干预的问题。
    ///</summary>
    Analytical = 2;
    ///<summary>
    ///  仅供开发人员使用的调试类型事件日志中的事件用于诊断问题以进行调试。
    ///</summary>
    Debug = 3;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  ///<summary>
  ///  指定一个字符串，包含事件日志或事件日志文件的文件系统路径的名称。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.PathType')]
  DNPathType = type Integer;
  DNPathTypeHelper = record helper for DNPathType
  public const
    ///<summary>
    ///  Path 参数包含事件日志的名称。
    ///</summary>
    LogName = 1;
    ///<summary>
    ///  Path 参数包含事件日志文件的文件系统路径。
    ///</summary>
    FilePath = 2;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  ///<summary>
  ///  定义的远程过程调用 (RPC) 登录到服务器期间使用的身份验证类型的值。
  ///  当您创建此登录名时发生 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />
  ///  对象，它指定到远程计算机的连接。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.SessionAuthentication')]
  DNSessionAuthentication = type Integer;
  DNSessionAuthenticationHelper = record helper for DNSessionAuthentication
  public const
    ///<summary>
    ///  在 RPC 登录期间使用的默认身份验证方法。
    ///  默认身份验证等同于协商。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  在 RPC 登录期间使用协商身份验证方法。
    ///  这样客户端应用程序选择最合适的身份验证方法 （NTLM 或 Kerberos） 这种情况。
    ///</summary>
    Negotiate = 1;
    ///<summary>
    ///  使用 Kerberos 身份验证，在 RPC 登录过程。
    ///</summary>
    Kerberos = 2;
    ///<summary>
    ///  使用 Windows NT LAN Manager (NTLM) 身份验证，在 RPC 登录过程。
    ///</summary>
    Ntlm = 3;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  ///<summary>
  ///  定义事件提供程序附加到事件的标准关键字。
  ///  有关关键字的详细信息，请参阅 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />
  ///  。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.StandardEventKeywords')]
  DNStandardEventKeywords = type Integer;
  DNStandardEventKeywordsHelper = record helper for DNStandardEventKeywords
  public const
    ///<summary>
    ///  此值指示发布事件时，执行不 on 关键字进行筛选。
    ///</summary>
    None = 0;
    ///<summary>
    ///  附加到所有响应时间事件。
    ///</summary>
    ResponseTime = 281474976710656;
    ///<summary>
    ///  附加到所有 Windows 诊断基础结构 (WDI) 上下文事件。
    ///</summary>
    WdiContext = 562949953421312;
    ///<summary>
    ///  附加到所有 Windows 诊断基础结构 (WDI) 诊断事件。
    ///</summary>
    WdiDiagnostic = 1125899906842624;
    ///<summary>
    ///  已附加到所有服务质量机制 (SQM) 事件。
    ///</summary>
    Sqm = 2251799813685248;
    ///<summary>
    ///  附加到传输事件，其中相关的活动 ID (相关 ID) 是一个计算的值，不保证是唯一的 (不是真正的 GUID)。
    ///</summary>
    CorrelationHint = 4503599627370496;
    ///<summary>
    ///  已附加到所有失败的安全审核事件。
    ///  此关键字只应在安全日志中的事件。
    ///</summary>
    AuditFailure = 4503599627370496;
    ///<summary>
    ///  已附加到所有成功的安全审核事件。
    ///  此关键字只应在安全日志中的事件。
    ///</summary>
    AuditSuccess = 9007199254740992;
    ///<summary>
    ///  附加到传输事件，其中相关的活动 ID (相关 ID) 是一个计算的值，不保证是唯一的 (不是真正的 GUID)。
    ///</summary>
    CorrelationHint2 = 18014398509481984;
    ///<summary>
    ///  附加到使用 RaiseEvent 函数引发的事件。
    ///</summary>
    EventLogClassic = 36028797018963968;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  ///<summary>
  ///  定义事件日志服务中使用的标准事件级别。
  ///  级别定义的事件严重性。
  ///  这些标准级别以外，可以定义自定义事件级别。
  ///  有关级别的详细信息，请参阅 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />
  ///  。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.StandardEventLevel')]
  DNStandardEventLevel = type Integer;
  DNStandardEventLevelHelper = record helper for DNStandardEventLevel
  public const
    ///<summary>
    ///  此值指示事件发布过程都会不在级别筛选。
    ///</summary>
    LogAlways = 0;
    ///<summary>
    ///  此级别对应于严重错误，这是一个严重的错误，导致严重故障。
    ///</summary>
    Critical = 1;
    ///<summary>
    ///  此级别相对应的表示某个问题的一般错误。
    ///</summary>
    Error = 2;
    ///<summary>
    ///  此级别对应于警告事件。
    ///  例如，获取发布，因为磁盘已接近满负荷事件是一个警告事件。
    ///</summary>
    Warning = 3;
    ///<summary>
    ///  此级别对应于信息性事件或不是错误的消息。
    ///  这些事件可帮助跟踪进度或应用程序状态。
    ///</summary>
    Informational = 4;
    ///<summary>
    ///  此级别对应于时间较长的事件或消息。
    ///</summary>
    Verbose = 5;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  ///<summary>
  ///  定义事件提供程序附加到事件的标准操作码。
  ///  操作码的详细信息，请参阅 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />
  ///  。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.StandardEventOpcode')]
  DNStandardEventOpcode = type Integer;
  DNStandardEventOpcodeHelper = record helper for DNStandardEventOpcode
  public const
    ///<summary>
    ///  具有此操作码的事件是一个信息性事件。
    ///</summary>
    Info = 0;
    ///<summary>
    ///  应用程序启动新事务或活动时，被发布具有此操作码的事件。
    ///  这可以嵌入到另一个事务或活动，如果多个事件具有开始操作码将彼此跟随而无需停止操作码的事件。
    ///</summary>
    Start = 1;
    ///<summary>
    ///  当某个活动或应用程序中的事务结束时，被发布具有此操作码的事件。
    ///  该事件对应于具有启动操作码的最后一个不成对事件。
    ///</summary>
    Stop = 2;
    ///<summary>
    ///  具有此操作码的事件是跟踪集合启动事件。
    ///</summary>
    DataCollectionStart = 3;
    ///<summary>
    ///  具有此操作码的事件是跟踪集合停止事件。
    ///</summary>
    DataCollectionStop = 4;
    ///<summary>
    ///  具有此操作码的事件是一个扩展事件。
    ///</summary>
    Extension = 5;
    ///<summary>
    ///  在应用程序中的活动回复事件后发布具有此操作码的事件。
    ///</summary>
    Reply = 6;
    ///<summary>
    ///  在应用程序中的活动从暂停状态恢复后发布的事件与此操作码。
    ///  该事件应遵循 Suspend opcode 的事件。
    ///</summary>
    Resume = 7;
    ///<summary>
    ///  当在应用程序中的活动被挂起时，被发布具有此操作码的事件。
    ///</summary>
    Suspend = 8;
    ///<summary>
    ///  应用程序中的一个活动到另一个活动传输数据或系统资源时，被发布具有此操作码的事件。
    ///</summary>
    Send = 9;
    ///<summary>
    ///  在应用程序中的一个活动收到数据时，被发布具有此操作码的事件。
    ///</summary>
    Receive = 240;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  ///<summary>
  ///  定义事件提供程序附加到事件的标准任务。
  ///  有关任务的更多信息，请参见 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />
  ///  。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.StandardEventTask')]
  DNStandardEventTask = type Integer;
  DNStandardEventTaskHelper = record helper for DNStandardEventTask
  public const
    ///<summary>
    ///  没有任何任务用于标识发布的事件的应用程序的一部分。
    ///</summary>
    None = 0;
  end;


  //-------------namespace: System.Diagnostics.PerformanceData----------------
  ///<summary>
  ///  指定计数器集允许多个实例，例如进程和物理磁盘或单个实例如内存。
  ///</summary>
  [DNTypeName('System.Diagnostics.PerformanceData.CounterSetInstanceType')]
  DNCounterSetInstanceType = type Integer;
  DNCounterSetInstanceTypeHelper = record helper for DNCounterSetInstanceType
  public const
    ///<summary>
    ///  计数器集包含单个实例计数器，例如，计数器，用于测量物理内存。
    ///</summary>
    Single = 0;
    ///<summary>
    ///  计数器集包含多个实例的计数器，例如，一个计数器测量进程的平均磁盘 I/O。
    ///</summary>
    Multiple = 2;
    ///<summary>
    ///  计数器集包含的聚合值获取一个或多个源的单个实例计数器。
    ///  例如，在这种类型的计数器集中的计数器可以获取的读取数从每个计算机和 sum 上的三个硬盘它们的值。
    ///</summary>
    GlobalAggregate = 4;
    ///<summary>
    ///  计数器集包含多个实例计数器从计数器的所有实例获取的聚合值。
    ///  例如，在这种类型的计数器集中的计数器可以获取线程执行总时间之和多线程应用程序中的所有线程及其值。
    ///</summary>
    MultipleAggregate = 6;
    ///<summary>
    ///  此类型是类似于 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate" />
    ///  只不过此计数器集类型 （该计数器的生存期过后缓存计数器值） 的使用者应用程序的生存期内存储所有计数器值。
    ///  例如，如果其中一个硬盘中全局聚合示例变得不可用，则该磁盘读取的总字节数将仍将可用和已用来计算聚合值。
    ///</summary>
    GlobalAggregateWithHistory = 11;
    ///<summary>
    ///  此类型是类似于 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" />
    ///  , 以外，而不是将聚合到一个聚合 (_Total) 实例的所有实例数据时，它将从具有相同名称的实例聚合计数器数据。
    ///  例如，如果多个提供程序负责处理包含的实例名为 IExplore， <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple" />
    ///  和 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" />
    ///  CounterSet 将显示多个 IExplore 实例 （IExplore，IExplore #1，IExplore #2，依此类推）; 但是， <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate" />
    ///  实例类型将发布只能有一个 IExplore 实例与从名为 IExplore 的所有实例聚合的计数器数据。
    ///</summary>
    InstanceAggregate = 22;
  end;


  //-------------namespace: System.Diagnostics.PerformanceData----------------
  ///<summary>
  ///  定义计数器的可能的类型。
  ///  每个计数器都被分配一个计数器类型。
  ///  计数器类型确定计算、 求平均值和显示的计数器数据的方式。
  ///</summary>
  [DNTypeName('System.Diagnostics.PerformanceData.CounterType')]
  DNCounterType = type Integer;
  DNCounterTypeHelper = record helper for DNCounterType
  public const
    ///<summary>
    ///  此计数器类型以十六进制格式显示的最近一次观测的值。
    ///  它不显示平均值。
    ///  （请参阅部署工具包中的 PERF_COUNTER_RAWCOUNT_HEX 计数器类型）。
    ///</summary>
    RawDataHex32 = 0;
    ///<summary>
    ///  此计数器类型以十六进制格式显示上次观测的值。
    ///  它等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32" />
    ///  计数器类型，只不过它使用更大的字段来容纳较大的值。
    ///  （请参阅部署工具包中的 PERF_COUNTER_LARGE_RAWCOUNT_HEX 计数器类型）。
    ///</summary>
    RawDataHex64 = 256;
    ///<summary>
    ///  此类型的计数器显示上次观测的值仅。
    ///  它不显示平均值。
    ///  （请参阅部署工具包中的 PERF_COUNTER_RAWCOUNT 计数器类型）。
    ///</summary>
    RawData32 = 65536;
    ///<summary>
    ///  此类型的计数器显示上次观测的值仅，不是平均值。
    ///  它等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawData32" />
    ///  计数器类型，只不过它使用更大的字段来容纳较大的值。
    ///  （请参阅部署工具包中的 PERF_COUNTER_LARGE_RAWCOUNT 计数器类型）。
    ///</summary>
    RawData64 = 65792;
    ///<summary>
    ///  此计数器类型显示最近的两个示例时间间隔内已测量属性发生更改。
    ///  （请参阅部署工具包中的 PERF_COUNTER_DELTA 计数器类型）。
    ///</summary>
    Delta32 = 4195328;
    ///<summary>
    ///  此计数器类型显示最近的两个示例时间间隔内已测量属性发生更改。
    ///  它等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.Delta32" />
    ///  计数器类型，只不过它使用更大的字段来容纳较大的值。
    ///  （请参阅部署工具包中的 PERF_COUNTER_LARGE_DELTA 计数器类型）。
    ///</summary>
    Delta64 = 4195584;
    ///<summary>
    ///  此计数器类型显示一秒内完成的操作的平均数目。
    ///  它测量单位的计时周期的系统性能计时器的时间。
    ///  变量 F 表示一秒内出现的计时周期数。
    ///  F 的值被考虑到公式中，以便以秒为单位显示的结果。
    ///  （请参阅部署工具包中的 PERF_SAMPLE_COUNTER 计数器类型）。
    ///</summary>
    SampleCounter = 4260864;
    ///<summary>
    ///  此计数器类型用于随着时间的推移监视队列对资源的平均长度。
    ///  它显示最后两个除以时间间隔的采样间隔期间观察到的队列长度之间的差异。
    ///  （请参阅部署工具包中的 PERF_COUNTER_QUEUELEN_TYPE 计数器类型）。
    ///</summary>
    QueueLength = 4523008;
    ///<summary>
    ///  此计数器类型随着时间的推移监视队列对资源的平均长度。
    ///  此类型的计数器显示最后两个采样间隔，除以时间间隔期间观察到的队列长度之间的差异。
    ///  此计数器类型等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.QueueLength" />
    ///  计数器类型，只不过它使用更大的字段来容纳较大的值。
    ///  （请参阅部署工具包中的 PERF_COUNTER_LARGE_QUEUELEN_TYPE 计数器类型）。
    ///</summary>
    LargeQueueLength = 4523264;
    ///<summary>
    ///  此计数器类型队列长度使用测量积以 100 纳秒时间基准。
    ///  （请参阅部署工具包中的 PERF_COUNTER_100NS_QUEUELEN_TYPE 计数器类型）。
    ///</summary>
    QueueLength100Ns = 5571840;
    ///<summary>
    ///  此计数器类型队列长度来测量积使用特定于对象的时间基准
    ///  （请参阅部署工具包中的 PERF_COUNTER_OBJ_QUEUELEN_TYPE 计数器类型）。
    ///</summary>
    QueueLengthObjectTime = 6620416;
    ///<summary>
    ///  此计数器类型显示在采样间隔的每一秒内完成的操作的平均数目。
    ///  此类型的计数器测量在计时周期的系统时钟时间。
    ///  （请参阅部署工具包中的 PERF_COUNTER_COUNTER 计数器类型）。
    ///</summary>
    RateOfCountPerSecond32 = 272696320;
    ///<summary>
    ///  此计数器类型显示在采样间隔的每一秒内完成的操作的平均数目。
    ///  此类型的计数器测量在计时周期的系统时钟时间。
    ///  此计数器类型等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32" />
    ///  类型，但是它使用更大的字段来容纳较大的值。
    ///  （请参阅部署工具包中的 PERF_COUNTER_BULK_COUNT 计数器类型）。
    ///</summary>
    RateOfCountPerSecond64 = 272696576;
    ///<summary>
    ///  此计数器类型百分比形式显示给它的一组的子集的比率。
    ///  例如，它将比较中使用的磁盘上的字节总数为磁盘上的字节数。
    ///  这种类型的计数器显示当前百分比仅，不是一段时间的平均值。
    ///  （请参阅部署工具包中的 PERF_RAW_FRACTION 计数器类型）。
    ///</summary>
    RawFraction32 = 537003008;
    ///<summary>
    ///  此计数器类型百分比形式显示给它的一组的子集的比率。
    ///  例如，它将比较中使用的磁盘上的字节总数为磁盘上的字节数。
    ///  这种类型的计数器显示当前百分比仅，不是一段时间的平均值。
    ///  它等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" />
    ///  计数器类型，只不过它使用更大的字段来容纳较大的值。
    ///</summary>
    RawFraction64 = 537003264;
    ///<summary>
    ///  此计数器类型显示组件处于活动状态，以占总的采样时间的平均时间。
    ///  （请参阅部署工具包中的 PERF_COUNTER_TIMER 计数器类型）。
    ///</summary>
    PercentageActive = 541132032;
    ///<summary>
    ///  此计数器类型显示两个计数器值组成的值︰ 正在监视的事件的运行时间的计数以及从系统性能计时器的频率。
    ///  此计数器类型不同于其他计数器计时器中，时钟计时周期值伴随计数器值，消除了由于滞后时间的函数调用任何可能的差异。
    ///  标准系统计时器不精确的准确的读数，会使用精确计数器类型。
    ///  （请参阅部署工具包中的 PERF_PRECISION_TIMER 计数器类型）。
    ///</summary>
    PrecisionSystemTimer = 541525248;
    ///<summary>
    ///  此种类型的计数器的采样间隔期间的总已用时间的百分比形式显示组件的活动时间。
    ///  它测量以 100 纳秒为单位的时间。
    ///  此种类型的计数器用于一次度量的一个组件的活动。
    ///  （请参阅部署工具包中的 PERF_100NSEC_TIMER 计数器类型）。
    ///</summary>
    PercentageActive100Ns = 542180608;
    ///<summary>
    ///  此计数器类型显示两个计数器值组成的值︰ 正在监视的事件的已用时间的计数和"时钟"时间单位相同的专用计时器。
    ///  它测量以 100 纳秒为单位的时间。
    ///  此计数器类型与其他计数器计时器在于时钟计时周期值伴随计数器值消除由于滞后时间的函数调用任何可能的差异。
    ///  标准系统计时器不精确的准确的读数，会使用精确计数器类型。
    ///  （请参阅部署工具包中的 PERF_PRECISION_100NS_TIMER 计数器类型）。
    ///</summary>
    PrecisionTimer100Ns = 542573824;
    ///<summary>
    ///  此种类型的 64 位计数器是特定于对象的单元中显示一个计时器。
    ///  （请参阅部署工具包中的 PERF_OBJ_TIME_TIMER 计数器类型）。
    ///</summary>
    ObjectSpecificTimer = 543229184;
    ///<summary>
    ///  此计数器类型显示两个计数器值组成的值︰ 正在监视的事件的已用时间的计数以及对象标头的 PerfFreq 字段中指定的频率。
    ///  此计数器类型与其他计数器计时器在于时钟计时周期值通常会显示该计数器值，从而消除了由于滞后时间的函数调用任何可能的差异。
    ///  标准系统计时器不精确的准确的读数，会使用精确计数器类型。
    ///  （请参阅部署工具包中的 PERF_PRECISION_OBJECT_TIMER 计数器类型）。
    ///</summary>
    PrecisionObjectSpecificTimer = 543622400;
    ///<summary>
    ///  此计数器类型显示最近两个采样间隔期间命中与所有操作的平均比率。
    ///  （请参阅部署工具包中的 PERF_SAMPLE_FRACTION 计数器类型）。
    ///</summary>
    SampleFraction = 549585920;
    ///<summary>
    ///  这是反向计数器类型。
    ///  反向计数器测量组件未处于活动状态的时间，并从该测量值派生的活动时间。
    ///  此类型的计数器显示采样间隔期间观察到的活动时间的平均百分比。
    ///  通过监视服务处于非活动状态的时间的百分比，然后该值从 100%中减去计算这些计数器的值。
    ///  此计数器类型等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns" />
    ///  计数器类型，只不过它测量单位的计时周期的系统性能计时器，而不是以 100 纳秒为单位的时间。
    ///  （请参阅部署工具包中的 PERF_COUNTER_TIMER_INV 计数器类型）。
    ///</summary>
    PercentageNotActive = 557909248;
    ///<summary>
    ///  此计数器类型显示在采样间隔期间观察到的活动时间的平均百分比。
    ///  这是反向的计数器。
    ///  反向计数器来监视服务处于非活动状态的时间的百分比，然后该值从 100%中减去计算。
    ///  （请参阅部署工具包中的 PERF_100NSEC_TIMER_INV 计数器类型）。
    ///</summary>
    PercentageNotActive100Ns = 558957824;
    ///<summary>
    ///  此计数器类型是多项计时器。
    ///  计时器的组件，如处理器或磁盘的多个实例中收集数据。
    ///  此种类型的计数器采样间隔期间的总时间的百分比形式显示一个或多个组件的活动时间。
    ///  因为分子记录同时操作的组件的活动时间，因此最终的百分比可以超过 100%。
    ///  此计数器类型不同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" />
    ///  在于它测量单位的计时周期的系统性能计时器，而不是以 100 纳秒为单位的时间。
    ///  （请参阅部署工具包中的 PERF_COUNTER_MULTI_TIMER 计数器类型）。
    ///</summary>
    MultiTimerPercentageActive = 574686464;
    ///<summary>
    ///  此种类型的计数器采样间隔期间的总时间的百分比形式显示一个或多个组件的活动时间。
    ///  它测量以 100 纳秒为单位的时间。
    ///  此计数器类型是多项计时器。
    ///  计时器用于监视的组件，如处理器或磁盘的多个实例。
    ///  （请参阅部署工具包中的 PERF_100NSEC_MULTI_TIMER 计数器类型）。
    ///</summary>
    MultiTimerPercentageActive100Ns = 575735040;
    ///<summary>
    ///  此种类型的计数器采样间隔期间的总时间的百分比形式显示一个或多个组件的活动时间。
    ///  此计数器类型是反向的多项计时器。
    ///  计时器监视组件，如处理器或磁盘的多个的实例。
    ///  反向计数器测量组件未处于活动状态的时间，并从该测量值派生的活动时间。
    ///  此计数器不同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />
    ///  在于它测量单位的计时周期的系统性能计时器，而不是以 100 纳秒为单位的时间。
    ///  （请参阅部署工具包中的 PERF_COUNTER_MULTI_TIMER_INV 计数器类型）。
    ///</summary>
    MultiTimerPercentageNotActive = 591463680;
    ///<summary>
    ///  此种类型的计数器采样间隔期间的总时间的百分比形式显示一个或多个组件的活动时间。
    ///  此类型测量时间以 100 纳秒为单位的计数器。
    ///  此计数器类型是反向的多项计时器。
    ///  计时器用于监视的组件，如处理器或磁盘的多个实例。
    ///  反向计数器测量组件未处于活动状态的时间，并从非活动时间的度量单位推导其活动的时间。
    ///  （请参阅部署工具包中的 PERF_100NSEC_MULTI_TIMER_INV 计数器类型）。
    ///</summary>
    MultiTimerPercentageNotActive100Ns = 592512256;
    ///<summary>
    ///  此类型的计数器测量完成进程或操作所花费的平均时间。
    ///  此种类型的计数器数量的进程或在此期间完成的操作显示在采样间隔的总已用时间的比率。
    ///  此种类型的计数器来测量以刻度为单位的系统时钟的时间。
    ///  （请参阅部署工具包中的 PERF_AVERAGE_TIMER 计数器类型）。
    ///</summary>
    AverageTimer32 = 805438464;
    ///<summary>
    ///  此计数器类型显示的组件或进程启动时计算此值时的时间之间的总时间。
    ///  （请参阅部署工具包中的 PERF_ELAPSED_TIME 计数器类型）。
    ///</summary>
    ElapsedTime = 807666944;
    ///<summary>
    ///  此计数器类型显示多少项处理，一般情况下，一次操作中。
    ///  此种类型的计数器显示完成的操作数目与处理 （例如，发送的字节数） 的项的比率。
    ///  通过将最后一个时间间隔内完成的操作的数目为最后一个时间间隔内处理的项的数目进行比较计算该比率。
    ///  （请参阅部署工具包中的 PERF_AVERAGE_BULK 计数器类型）。
    ///</summary>
    AverageCount64 = 1073874176;
    ///<summary>
    ///  此计数器将存储的执行采样中断的数量和用作样本分数中的分母。
    ///  此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction" />
    ///  计数器类型。
    ///</summary>
    SampleBase = 1073939457;
    ///<summary>
    ///  此计数器用作基础数据 （分母） 的时间或计数计算平均值的 <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64" />
    ///  和 <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32" />
    ///  计数器类型。
    ///  此计数器类型收集上次观测的值仅。
    ///  （请参阅部署工具包中的 PERF_AVERAGE_BASE 计数器类型）。
    ///</summary>
    AverageBase = 1073939458;
    ///<summary>
    ///  此计数器类型收集上次观测的值仅。
    ///  值用作分母表示常规算术分数的计数器。
    ///  此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" />
    ///  计数器类型。
    ///  （请参阅部署工具包中的 PERF_RAW_BASE 计数器类型）。
    ///</summary>
    RawBase32 = 1073939459;
    ///<summary>
    ///  此计数器类型收集上次观测的值。
    ///  它等同于 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawBase32" />
    ///  计数器类型，只不过它使用更大的字段来容纳较大的值。
    ///  此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64" />
    ///  计数器类型。
    ///  （请参阅部署工具包中的 PERF_LARGE_RAW_BASE 计数器类型）。
    ///</summary>
    RawBase64 = 1073939712;
    ///<summary>
    ///  指示项采样的数目。
    ///  它用作分母计算中以得出平均值取样各项的多个，但是具有相似性，计时时间时的项目。
    ///  此类型支持下列计数器类型︰ <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive" />
    ///  , ，<see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive" />
    ///  , ，<see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" />
    ///  , ，和 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />
    ///  。
    ///</summary>
    MultiTimerBase = 1107494144;
  end;


  //-------------namespace: System.Diagnostics----------------
  ///<summary>
  ///  指定将用于的文件结构 <see cref="T:System.Diagnostics.EventSchemaTraceListener" />
  ///  日志。
  ///</summary>
  [DNTypeName('System.Diagnostics.TraceLogRetentionOption')]
  DNTraceLogRetentionOption = type Integer;
  DNTraceLogRetentionOptionHelper = record helper for DNTraceLogRetentionOption
  public const
    ///<summary>
    ///  无限的数量的连续文件，每个所确定的最大文件大小 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
    ///  属性。
    ///  没有逻辑绑定到的数量或大小的文件，但对其进行限制的计算机的物理限制。
    ///</summary>
    UnlimitedSequentialFiles = 0;
    ///<summary>
    ///  有限数量的连续文件，每个都有最大文件大小。
    ///  当 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
    ///  达到属性值，在具有递增的整数后缀的新文件中开始进行写入。
    ///  当 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" />
    ///  达到属性值、 清除和覆盖第一个文件。
    ///  然后以循环方式以增量方式覆盖文件。
    ///</summary>
    LimitedCircularFiles = 1;
    ///<summary>
    ///  无最大文件大小限制的第一个文件。
    ///</summary>
    SingleFileUnboundedSize = 2;
    ///<summary>
    ///  有限数量的连续文件，每个都有最大文件大小。
    ///  当 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
    ///  达到属性值，在具有递增的整数后缀的新文件中开始进行写入。
    ///</summary>
    LimitedSequentialFiles = 3;
    ///<summary>
    ///  最大文件大小为所确定的一个文件 <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
    ///  属性。
    ///</summary>
    SingleFileBoundedSize = 4;
  end;


  //-------------namespace: System.IO----------------
  ///<summary>
  ///  指定基础句柄是否由子进程继承。
  ///</summary>
  [DNTypeName('System.IO.HandleInheritability')]
  DNHandleInheritability = type Integer;
  DNHandleInheritabilityHelper = record helper for DNHandleInheritability
  public const
    ///<summary>
    ///  指定句柄不是由子进程继承。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指定的句柄将由子进程继承。
    ///</summary>
    Inheritable = 1;
  end;


  //-------------namespace: System.IO.MemoryMappedFiles----------------
  ///<summary>
  ///  指定访问功能和内存映射文件或视图的限制。
  ///</summary>
  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedFileAccess')]
  DNMemoryMappedFileAccess = type Integer;
  DNMemoryMappedFileAccessHelper = record helper for DNMemoryMappedFileAccess
  public const
    ///<summary>
    ///  读取和写入到文件的访问。
    ///</summary>
    ReadWrite = 0;
    ///<summary>
    ///  该文件的只读访问。
    ///</summary>
    Read = 1;
    ///<summary>
    ///  文件的只写访问。
    ///</summary>
    Write = 2;
    ///<summary>
    ///  读取和写入访问权限具有任何写入操作的限制的文件将不会看到其他进程。
    ///</summary>
    CopyOnWrite = 3;
    ///<summary>
    ///  可以存储和运行可执行代码的文件的读取访问权限。
    ///</summary>
    ReadExecute = 4;
    ///<summary>
    ///  读取和写入访问权限的文件，可以存储并运行可执行代码。
    ///</summary>
    ReadWriteExecute = 5;
  end;


  //-------------namespace: System.IO.MemoryMappedFiles----------------
  ///<summary>
  ///  提供了内存分配的内存映射文件的选项。
  ///</summary>
  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedFileOptions')]
  DNMemoryMappedFileOptions = type Integer;
  DNMemoryMappedFileOptionsHelper = record helper for DNMemoryMappedFileOptions
  public const
    ///<summary>
    ///  应用没有内存分配选项。
    ///</summary>
    None = 0;
    ///<summary>
    ///  内存分配推迟到与创建视图 <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor" />
    ///  或 <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream" />
    ///  方法。
    ///</summary>
    DelayAllocatePages = 67108864;
  end;


  //-------------namespace: System.IO.MemoryMappedFiles----------------
  ///<summary>
  ///  指定对与磁盘上的文件都不关联的内存映射文件的访问权限。
  ///</summary>
  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedFileRights')]
  DNMemoryMappedFileRights = type Integer;
  DNMemoryMappedFileRightsHelper = record helper for DNMemoryMappedFileRights
  public const
    ///<summary>
    ///  其他进程不会看到读取和写入到具有写入操作的限制的文件的权限。
    ///</summary>
    CopyOnWrite = 1;
    ///<summary>
    ///  用于将数据添加到文件或从文件中删除数据的权限。
    ///</summary>
    Write = 2;
    ///<summary>
    ///  若要打开和复制文件作为只读权限。
    ///</summary>
    Read = 4;
    ///<summary>
    ///  权打开和复制文件，以及将数据添加到文件或从文件中删除数据的权限。
    ///</summary>
    ReadWrite = 6;
    ///<summary>
    ///  运行应用程序文件的权限。
    ///</summary>
    Execute = 8;
    ///<summary>
    ///  若要打开和复制文件夹或文件作为只读的以及运行应用程序文件的权限。
    ///  此权限包括 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read" />
    ///  右侧和 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute" />
    ///  右侧。
    ///</summary>
    ReadExecute = 12;
    ///<summary>
    ///  打开和复制文件的权限、 将数据添加到文件或从一个文件中，删除数据的权限和运行应用程序文件的权限。
    ///</summary>
    ReadWriteExecute = 14;
    ///<summary>
    ///  用于删除文件的权限。
    ///</summary>
    Delete = 65536;
    ///<summary>
    ///  从文件规则打开并复制访问和审核权限。
    ///  这不包括权限以读取数据、 文件系统属性，或扩展文件系统属性。
    ///</summary>
    ReadPermissions = 131072;
    ///<summary>
    ///  更改安全和审核规则与文件关联的权限。
    ///</summary>
    ChangePermissions = 262144;
    ///<summary>
    ///  用于更改文件的所有者的权限。
    ///</summary>
    TakeOwnership = 524288;
    ///<summary>
    ///  若要对文件进行完全控制，还可以修改访问控制和审核规则右侧。
    ///  此值表示与文件执行任何操作的权限，并且是此枚举中的所有权限的组合。
    ///</summary>
    FullControl = 983055;
    ///<summary>
    ///  获取或设置文件权限的权利。
    ///</summary>
    AccessSystemSecurity = 16777216;
  end;


  //-------------namespace: System.IO.Pipes----------------
  ///<summary>
  ///  定义要在创建访问和审核规则时使用的访问权限。
  ///</summary>
  [DNTypeName('System.IO.Pipes.PipeAccessRights')]
  DNPipeAccessRights = type Integer;
  DNPipeAccessRightsHelper = record helper for DNPipeAccessRights
  public const
    ///<summary>
    ///  指定从管道读取数据的权限。
    ///  这不包括读取文件系统属性，扩展文件系统属性或访问和审核规则的权限。
    ///</summary>
    ReadData = 1;
    ///<summary>
    ///  指定将数据写入管道的权限。
    ///  这不包括写入文件系统属性或扩展的文件系统属性的权限。
    ///</summary>
    WriteData = 2;
    ///<summary>
    ///  指定的权限来创建新的管道。
    ///  设置此权限还将设置 <see cref="F:System.IO.Pipes.PipeAccessRights.Synchronize" />
    ///  右侧。
    ///</summary>
    CreateNewInstance = 4;
    ///<summary>
    ///  指定从管道读取扩展的文件系统属性的权限。
    ///  这不包括读取数据、 文件系统属性或访问和审核规则的权限。
    ///</summary>
    ReadExtendedAttributes = 8;
    ///<summary>
    ///  指定要写入管道的扩展的文件系统属性的权限。
    ///  这不包括写入的文件属性或数据的权限。
    ///</summary>
    WriteExtendedAttributes = 16;
    ///<summary>
    ///  指定从管道读取文件系统属性的权限。
    ///  这不包括读取数据、 扩展的文件系统属性或访问和审核规则的权限。
    ///</summary>
    ReadAttributes = 128;
    ///<summary>
    ///  指定要向管道写入文件系统属性的权限。
    ///  这不包括写入数据或扩展的文件系统属性的权限。
    ///</summary>
    WriteAttributes = 256;
    ///<summary>
    ///  指定要写入管道的权限。
    ///  此权限包括 <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />
    ///  , ，<see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" />
    ///  , ，和 <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" />
    ///  权限。
    ///</summary>
    Write = 274;
    ///<summary>
    ///  指定的权限删除管道。
    ///</summary>
    Delete = 65536;
    ///<summary>
    ///  指定从管道读取访问和审核规则的权限。
    ///  这不包括权限以读取数据、 文件系统属性，或扩展文件系统属性。
    ///</summary>
    ReadPermissions = 131072;
    ///<summary>
    ///  指定从管道读取的权限。
    ///  此权限包括 <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />
    ///  , ，<see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />
    ///  , ，<see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />
    ///  , ，和 <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" />
    ///  权限。
    ///</summary>
    Read = 131209;
    ///<summary>
    ///  指定从管道读取和写入权限。
    ///  此权限包括 <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />
    ///  , ，<see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />
    ///  , ，<see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />
    ///  , ，<see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" />
    ///  , ，<see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />
    ///  , ，<see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" />
    ///  , ，和 <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" />
    ///  权限。
    ///</summary>
    ReadWrite = 131483;
    ///<summary>
    ///  指定的权限更改安全和审核与管道相关联的规则。
    ///</summary>
    ChangePermissions = 262144;
    ///<summary>
    ///  指定要更改管道的所有者的权限。
    ///  请注意，管道的所有者拥有对该资源的完全访问权限。
    ///</summary>
    TakeOwnership = 524288;
    ///<summary>
    ///  指定应用程序是否能够等待管道句柄的 I/O 操作的完成同步。
    ///</summary>
    Synchronize = 1048576;
    ///<summary>
    ///  指定对管道，进行完全控制和修改访问控制和审核规则的权限。
    ///  此值表示此枚举中的所有权限的组合。
    ///</summary>
    FullControl = 2032031;
    ///<summary>
    ///  指定要更改系统访问控制列表 (SACL) 的权限。
    ///</summary>
    AccessSystemSecurity = 16777216;
  end;


  //-------------namespace: System.IO.Pipes----------------
  ///<summary>
  ///  指定管道的方向。
  ///</summary>
  [DNTypeName('System.IO.Pipes.PipeDirection')]
  DNPipeDirection = type Integer;
  DNPipeDirectionHelper = record helper for DNPipeDirection
  public const
    ///<summary>
    ///  指定的管道方向为向内。
    ///</summary>
    In_ = 1;
    ///<summary>
    ///  指定的管道方向为向外。
    ///</summary>
    Out_ = 2;
    ///<summary>
    ///  指定的管道方向是双向的。
    ///</summary>
    InOut = 3;
  end;


  //-------------namespace: System.IO.Pipes----------------
  ///<summary>
  ///  提供用于创建选项 <see cref="T:System.IO.Pipes.PipeStream" />
  ///  对象。
  ///  此枚举有一个允许其成员值按位组合的 <see cref="T:System.FlagsAttribute" />
  ///  属性。
  ///</summary>
  [DNTypeName('System.IO.Pipes.PipeOptions')]
  DNPipeOptions = type Integer;
  DNPipeOptionsHelper = record helper for DNPipeOptions
  public const
    ///<summary>
    ///  指示没有任何其他参数。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指示管道可用于异步读取和写入。
    ///</summary>
    Asynchronous = 1073741824;
    ///<summary>
    ///  指示系统应编写通过任何中间缓存并直接转到管道。
    ///</summary>
    WriteThrough = -2147483648;
  end;


  //-------------namespace: System.IO.Pipes----------------
  ///<summary>
  ///  指定管道的传输模式。
  ///</summary>
  [DNTypeName('System.IO.Pipes.PipeTransmissionMode')]
  DNPipeTransmissionMode = type Integer;
  DNPipeTransmissionModeHelper = record helper for DNPipeTransmissionMode
  public const
    ///<summary>
    ///  指示是发送和读取的字节流的形式在管道中的数据。
    ///</summary>
    Byte = 0;
    ///<summary>
    ///  指示是发送和读取的消息流的形式在管道中的数据。
    ///</summary>
    Message = 1;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  ///<summary>
  ///  介绍表达式树节点的节点类型。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.ExpressionType')]
  DNExpressionType = type Integer;
  DNExpressionTypeHelper = record helper for DNExpressionType
  public const
    ///<summary>
    ///  加法运算，如 a + b, ，不进行溢出检查，针对数值操作数。
    ///</summary>
    Add = 0;
    ///<summary>
    ///  加法运算，如 (a + b), ，进行溢出检查，针对数值操作数。
    ///</summary>
    AddChecked = 1;
    ///<summary>
    ///  按位或逻辑 <see langword="AND" />
    ///  操作，如 (a &amp; b) 在 C# 和 (a And b) 在 Visual Basic 中。
    ///</summary>
    And_ = 2;
    ///<summary>
    ///  在条件 <see langword="AND" />
    ///  仅当第一个操作数的计算结果为才计算第二个操作数的操作 <see langword="true" />
    ///  。
    ///  它对应于 (a &amp;&amp; b) 在 C# 和 (a AndAlso b) 在 Visual Basic 中。
    ///</summary>
    AndAlso = 3;
    ///<summary>
    ///  获取一维数组的长度，如操作 array.Length。
    ///</summary>
    ArrayLength = 4;
    ///<summary>
    ///  索引操作在一维数组中，如 array[index] 在 C# 或 array(index) 在 Visual Basic 中。
    ///</summary>
    ArrayIndex = 5;
    ///<summary>
    ///  某个方法调用，如在 obj.sampleMethod() 表达式。
    ///</summary>
    Call = 6;
    ///<summary>
    ///  一个表示空合并操作，如节点 (a ?? b) 在 C# 或 If(a, b) 在 Visual Basic 中。
    ///</summary>
    Coalesce = 7;
    ///<summary>
    ///  条件运算，如 a &gt; b ? a : b 在 C# 或 If(a &gt; b, a, b) 在 Visual Basic 中。
    ///</summary>
    Conditional = 8;
    ///<summary>
    ///  常量的值。
    ///</summary>
    Constant = 9;
    ///<summary>
    ///  强制转换或转换操作中，如 (SampleType)obj C# 中或 CType(obj, SampleType) 在 Visual Basic 中。
    ///  对于数值的转换，如果转换后的值对于目标类型来说太大不引发异常。
    ///</summary>
    Convert = 10;
    ///<summary>
    ///  强制转换或转换操作中，如 (SampleType)obj C# 中或 CType(obj, SampleType) 在 Visual Basic 中。
    ///  对于数值的转换，如果转换后的值不符合目标类型是引发异常。
    ///</summary>
    ConvertChecked = 11;
    ///<summary>
    ///  除法运算，如 (a / b), ，针对数值操作数。
    ///</summary>
    Divide = 12;
    ///<summary>
    ///  一个表示相等比较，如节点 (a == b) 在 C# 或 (a = b) 在 Visual Basic 中。
    ///</summary>
    Equal = 13;
    ///<summary>
    ///  按位或逻辑 <see langword="XOR" />
    ///  操作，如 (a ^ b) 在 C# 或 (a Xor b) 在 Visual Basic 中。
    ///</summary>
    ExclusiveOr = 14;
    ///<summary>
    ///  "大于"比较，如 (a &gt; b)。
    ///</summary>
    GreaterThan = 15;
    ///<summary>
    ///  "大于或等于"比较，如 (a &gt;= b)。
    ///</summary>
    GreaterThanOrEqual = 16;
    ///<summary>
    ///  操作调用的委托或 lambda 表达式，如 sampleDelegate.Invoke()。
    ///</summary>
    Invoke = 17;
    ///<summary>
    ///  Lambda 表达式，如 a =&gt; a + a 在 C# 或 Function(a) a + a 在 Visual Basic 中。
    ///</summary>
    Lambda = 18;
    ///<summary>
    ///  按位左移运算，如 (a &lt;&lt; b)。
    ///</summary>
    LeftShift = 19;
    ///<summary>
    ///  "小于"比较，如 (a &lt; b)。
    ///</summary>
    LessThan = 20;
    ///<summary>
    ///  "小于或等于"比较，如 (a &lt;= b)。
    ///</summary>
    LessThanOrEqual = 21;
    ///<summary>
    ///  创建一个新的操作的 <see cref="T:System.Collections.IEnumerable" />
    ///  对象，并对其进行初始化从列表中的元素，如 new List&lt;SampleType&gt;(){ a, b, c } 在 C# 或 Dim sampleList = { a, b, c } 在 Visual Basic 中。
    ///</summary>
    ListInit = 22;
    ///<summary>
    ///  从一个字段或属性，如读取操作 obj.SampleProperty。
    ///</summary>
    MemberAccess = 23;
    ///<summary>
    ///  运算，创建一个新的对象并初始化一个或多个成员，如 new Point { X = 1, Y = 2 } 在 C# 或 New Point With {.X = 1, .Y = 2} 在 Visual Basic 中。
    ///</summary>
    MemberInit = 24;
    ///<summary>
    ///  算术余数运算，如 (a % b) 在 C# 或 (a Mod b) 在 Visual Basic 中。
    ///</summary>
    Modulo = 25;
    ///<summary>
    ///  乘法运算，如 (a * b), ，不进行溢出检查，针对数值操作数。
    ///</summary>
    Multiply = 26;
    ///<summary>
    ///  乘法运算，如 (a * b), ，，进行溢出检查，针对数值操作数。
    ///</summary>
    MultiplyChecked = 27;
    ///<summary>
    ///  算术求反运算，如 (-a)。
    ///  该对象 a 不应就地修改。
    ///</summary>
    Negate = 28;
    ///<summary>
    ///  一元正运算，如 (+a)。
    ///  预定义的一元正运算的结果是操作数的值，但用户定义的实现可能有不寻常的结果。
    ///</summary>
    UnaryPlus = 29;
    ///<summary>
    ///  算术求反运算，如 (-a), ，，进行溢出检查。
    ///  该对象 a 不应就地修改。
    ///</summary>
    NegateChecked = 30;
    ///<summary>
    ///  调用构造函数以创建新的对象，如操作 new SampleType()。
    ///</summary>
    New = 31;
    ///<summary>
    ///  操作，创建一个新的一维数组并对其进行初始化从列表中的元素，如 new SampleType[]{a, b, c} 在 C# 或 New SampleType(){a, b, c} 在 Visual Basic 中。
    ///</summary>
    NewArrayInit = 32;
    ///<summary>
    ///  创建一个新数组，其中每个维度的下限指定，如操作 new SampleType[dim1, dim2] 在 C# 或 New SampleType(dim1, dim2) 在 Visual Basic 中。
    ///</summary>
    NewArrayBounds = 33;
    ///<summary>
    ///  按位求补或逻辑求反运算。
    ///  在 C# 中，则等同于 (~a) 整型和 (!a) 布尔值。
    ///  在 Visual Basic 中，则等同于 (Not a)。
    ///  该对象 a 不应就地修改。
    ///</summary>
    Not_ = 34;
    ///<summary>
    ///  不相等比较，如 (a != b) 在 C# 或 (a &lt;&gt; b) 在 Visual Basic 中。
    ///</summary>
    NotEqual = 35;
    ///<summary>
    ///  按位或逻辑 <see langword="OR" />
    ///  操作，如 (a | b) 在 C# 或 (a Or b) 在 Visual Basic 中。
    ///</summary>
    Or_ = 36;
    ///<summary>
    ///  短路条件 <see langword="OR" />
    ///  操作，如 (a || b) 在 C# 或 (a OrElse b) 在 Visual Basic 中。
    ///</summary>
    OrElse = 37;
    ///<summary>
    ///  对参数或变量的表达式的上下文中定义的引用。
    ///  有关更多信息，请参见<see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  。
    ///</summary>
    Parameter = 38;
    ///<summary>
    ///  如引发数字进行幂运算的数学运算 (a ^ b) 在 Visual Basic 中。
    ///</summary>
    Power = 39;
    ///<summary>
    ///  具有类型的常量值的表达式 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///  一个 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />
    ///  节点可以包含对它所代表的表达式的上下文中定义的参数的引用。
    ///</summary>
    Quote = 40;
    ///<summary>
    ///  按位右移运算，如 (a &gt;&gt; b)。
    ///</summary>
    RightShift = 41;
    ///<summary>
    ///  减法运算，如 (a - b), ，不进行溢出检查，针对数值操作数。
    ///</summary>
    Subtract = 42;
    ///<summary>
    ///  算术减法运算，如 (a - b), ，，进行溢出检查，针对数值操作数。
    ///</summary>
    SubtractChecked = 43;
    ///<summary>
    ///  显式引用或装箱转换在其中 <see langword="null" />
    ///  如果转换失败，如提供 (obj as SampleType) 在 C# 或 TryCast(obj, SampleType) 在 Visual Basic 中。
    ///</summary>
    TypeAs = 44;
    ///<summary>
    ///  一种类型测试，如 obj is SampleType 在 C# 或 TypeOf obj is SampleType 在 Visual Basic 中。
    ///</summary>
    TypeIs = 45;
    ///<summary>
    ///  赋值运算，如 (a = b)。
    ///</summary>
    Assign = 46;
    ///<summary>
    ///  表达式的块。
    ///</summary>
    Block = 47;
    ///<summary>
    ///  调试信息。
    ///</summary>
    DebugInfo = 48;
    ///<summary>
    ///  一元递减操作，如 (a - 1) C# 和 Visual Basic 中。
    ///  该对象 a 不应就地修改。
    ///</summary>
    Decrement = 49;
    ///<summary>
    ///  动态操作。
    ///</summary>
    Dynamic_ = 50;
    ///<summary>
    ///  默认值。
    ///</summary>
    Default_ = 51;
    ///<summary>
    ///  扩展表达式。
    ///</summary>
    Extension = 52;
    ///<summary>
    ///  一个"转到"表达式，如 goto Label 在 C# 或 GoTo Label 在 Visual Basic 中。
    ///</summary>
    Goto_ = 53;
    ///<summary>
    ///  一元递增操作，如 (a + 1) C# 和 Visual Basic 中。
    ///  该对象 a 不应就地修改。
    ///</summary>
    Increment = 54;
    ///<summary>
    ///  索引操作或访问不采用参数的属性的操作。
    ///</summary>
    Index = 55;
    ///<summary>
    ///  标签。
    ///</summary>
    Label_ = 56;
    ///<summary>
    ///  运行时变量的列表。
    ///  有关详细信息，请参阅<see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />
    ///  。
    ///</summary>
    RuntimeVariables = 57;
    ///<summary>
    ///  一个循环，如 for 或 while。
    ///</summary>
    Loop = 58;
    ///<summary>
    ///  一个切换操作，如 <see langword="switch" />
    ///  在 C# 或 <see langword="Select Case" />
    ///  在 Visual Basic 中。
    ///</summary>
    Switch = 59;
    ///<summary>
    ///  引发异常，如操作 throw new Exception()。
    ///</summary>
    Throw = 60;
    ///<summary>
    ///  一个 <see langword="try-catch" />
    ///  表达式。
    ///</summary>
    Try_ = 61;
    ///<summary>
    ///  取消装箱值类型的操作，如 <see langword="unbox" />
    ///  和 <see langword="unbox.any" />
    ///  MSIL 中的说明。
    ///</summary>
    Unbox = 62;
    ///<summary>
    ///  加法复合赋值运算，如 (a += b), ，不进行溢出检查，针对数值操作数。
    ///</summary>
    AddAssign = 63;
    ///<summary>
    ///  按位或逻辑 <see langword="AND" />
    ///  复合赋值运算，如 (a &amp;= b) C# 中。
    ///</summary>
    AndAssign = 64;
    ///<summary>
    ///  除的复合赋值运算，如 (a /= b), ，针对数值操作数。
    ///</summary>
    DivideAssign = 65;
    ///<summary>
    ///  按位或逻辑 <see langword="XOR" />
    ///  复合赋值运算，如 (a ^= b) C# 中。
    ///</summary>
    ExclusiveOrAssign = 66;
    ///<summary>
    ///  按位左移复合赋值运算，如 (a &lt;&lt;= b)。
    ///</summary>
    LeftShiftAssign = 67;
    ///<summary>
    ///  算术余数复合赋值运算，如 (a %= b) C# 中。
    ///</summary>
    ModuloAssign = 68;
    ///<summary>
    ///  乘法复合赋值运算，如 (a *= b), ，不进行溢出检查，针对数值操作数。
    ///</summary>
    MultiplyAssign = 69;
    ///<summary>
    ///  按位或逻辑 <see langword="OR" />
    ///  复合赋值运算，如 (a |= b) C# 中。
    ///</summary>
    OrAssign = 70;
    ///<summary>
    ///  如引发数字进行幂运算的复合赋值运算 (a ^= b) 在 Visual Basic 中。
    ///</summary>
    PowerAssign = 71;
    ///<summary>
    ///  按位右移复合赋值运算，如 (a &gt;&gt;= b)。
    ///</summary>
    RightShiftAssign = 72;
    ///<summary>
    ///  减法复合赋值运算，如 (a -= b), ，不进行溢出检查，针对数值操作数。
    ///</summary>
    SubtractAssign = 73;
    ///<summary>
    ///  加法复合赋值运算，如 (a += b), ，进行溢出检查，针对数值操作数。
    ///</summary>
    AddAssignChecked = 74;
    ///<summary>
    ///  乘法复合赋值运算，如 (a *= b), ，，进行溢出检查，针对数值操作数。
    ///</summary>
    MultiplyAssignChecked = 75;
    ///<summary>
    ///  减法复合赋值运算，如 (a -= b), ，，进行溢出检查，针对数值操作数。
    ///</summary>
    SubtractAssignChecked = 76;
    ///<summary>
    ///  一元前缀递增，如 (++a)。
    ///  该对象 a 应就地修改。
    ///</summary>
    PreIncrementAssign = 77;
    ///<summary>
    ///  一元前缀递减，如 (--a)。
    ///  该对象 a 应就地修改。
    ///</summary>
    PreDecrementAssign = 78;
    ///<summary>
    ///  一元后缀递增，如 (a++)。
    ///  该对象 a 应就地修改。
    ///</summary>
    PostIncrementAssign = 79;
    ///<summary>
    ///  一元后缀递减，如 (a--)。
    ///  该对象 a 应就地修改。
    ///</summary>
    PostDecrementAssign = 80;
    ///<summary>
    ///  确切类型测试。
    ///</summary>
    TypeEqual = 81;
    ///<summary>
    ///  一个二进制反码运算，如 (~a) C# 中。
    ///</summary>
    OnesComplement = 82;
    ///<summary>
    ///  一个 <see langword="true" />
    ///  条件值。
    ///</summary>
    IsTrue = 83;
    ///<summary>
    ///  一个 <see langword="false" />
    ///  条件值。
    ///</summary>
    IsFalse = 84;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  ///<summary>
  ///  指定内容类型的跳转这 <see cref="T:System.Linq.Expressions.GotoExpression" />
  ///  表示。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.GotoExpressionKind')]
  DNGotoExpressionKind = type Integer;
  DNGotoExpressionKindHelper = record helper for DNGotoExpressionKind
  public const
    ///<summary>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  表示跳转到某个位置。
    ///</summary>
    Goto_ = 0;
    ///<summary>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  表示 return 语句。
    ///</summary>
    Return = 1;
    ///<summary>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  表示 break 语句。
    ///</summary>
    Break = 2;
    ///<summary>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  表示 continue 语句。
    ///</summary>
    Continue_ = 3;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  ///<summary>
  ///  描述中使用的绑定类型 <see cref="T:System.Linq.Expressions.MemberInitExpression" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.MemberBindingType')]
  DNMemberBindingType = type Integer;
  DNMemberBindingTypeHelper = record helper for DNMemberBindingType
  public const
    ///<summary>
    ///  一个绑定，它表示正在初始化表达式的值的成员。
    ///</summary>
    Assignment = 0;
    ///<summary>
    ///  一个绑定，它表示递归初始化某个成员的成员。
    ///</summary>
    MemberBinding = 1;
    ///<summary>
    ///  一个绑定，它表示正在初始化的类型成员 <see cref="T:System.Collections.IList" />
    ///  或 <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  从元素的列表。
    ///</summary>
    ListBinding = 2;
  end;


  //-------------namespace: System.Linq----------------
  ///<summary>
  ///  查询执行模式是一个提示，指定在对查询进行并行化时系统应如何处理性能权衡。
  ///</summary>
  [DNTypeName('System.Linq.ParallelExecutionMode')]
  DNParallelExecutionMode = type Integer;
  DNParallelExecutionModeHelper = record helper for DNParallelExecutionMode
  public const
    ///<summary>
    ///  此设置为默认设置。
    ///  PLINQ 将检查查询的结构和只能并行查询如果将可能会导致加速。
    ///  如果查询结构指示该加速且不太可能获得，PLINQ 将为普通 LINQ to Objects 查询执行查询。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  并行化整个查询，即使这意味着使用高开销的算法。
    ///  在您知道，并行执行的查询将导致加速，但在默认模式下的 PLINQ 将按顺序执行它的情况下使用此标志。
    ///</summary>
    ForceParallelism = 1;
  end;


  //-------------namespace: System.Linq----------------
  ///<summary>
  ///  指定首选的类型 输出合并 要在查询中使用。
  ///  换而言之，它指示 PLINQ 应如何将来自各个分区的结果合并回单个结果序列。
  ///  这只是一个提示，并且在对所有查询进行并行化时系统可能不会遵循此提示。
  ///</summary>
  [DNTypeName('System.Linq.ParallelMergeOptions')]
  DNParallelMergeOptions = type Integer;
  DNParallelMergeOptionsHelper = record helper for DNParallelMergeOptions
  public const
    ///<summary>
    ///  使用默认合并类型，即 AutoBuffered。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  使用合并而无需输出缓冲区。
    ///  计算结果元素时，就立即使该元素可供查询的使用者。
    ///</summary>
    NotBuffered = 1;
    ///<summary>
    ///  利用系统所选择的大小的输出缓冲区进行合并。
    ///  它们可供查询的使用者之前，结果将累计到输出缓冲区。
    ///</summary>
    AutoBuffered = 2;
    ///<summary>
    ///  利用其中包含完整的输出的缓冲区进行合并。
    ///  系统将累积的所有结果之前使其中的任何可供查询的使用者。
    ///</summary>
    FullyBuffered = 3;
  end;


  //-------------namespace: System.Management.Instrumentation----------------
  ///<summary>
  ///  表示读/写属性的可能提交行为。
  ///  它用作 <see cref="T:System.Management.Instrumentation.ManagementConfigurationAttribute" />
  ///  属性的参数值。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementConfigurationType')]
  DNManagementConfigurationType = type Integer;
  DNManagementConfigurationTypeHelper = record helper for DNManagementConfigurationType
  public const
    ///<summary>
    ///  仅当调用 Commit 时，设置的值才会生效。
    ///</summary>
    Apply = 0;
    ///<summary>
    ///  设置的值会立即应用。
    ///</summary>
    OnCommit = 1;
  end;


  //-------------namespace: System.Management.Instrumentation----------------
  ///<summary>
  ///  定义用于指定提供程序承载模型的值。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementHostingModel')]
  DNManagementHostingModel = type Integer;
  DNManagementHostingModelHelper = record helper for DNManagementHostingModel
  public const
    ///<summary>
    ///  将提供程序作为分离的提供程序进行激活。
    ///</summary>
    Decoupled = 0;
    ///<summary>
    ///  在 NetworkService 帐户下运行的提供程序主机进程中激活提供程序。
    ///</summary>
    NetworkService = 1;
    ///<summary>
    ///  在 LocalService 帐户下运行的提供程序主机进程中激活提供程序。
    ///</summary>
    LocalService = 2;
    ///<summary>
    ///  在 LocalSystem 帐户下运行的提供程序主机进程中激活提供程序。
    ///</summary>
    LocalSystem = 3;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  指定密钥的密钥导出策略。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngExportPolicies')]
  DNCngExportPolicies = type Integer;
  DNCngExportPoliciesHelper = record helper for DNCngExportPolicies
  public const
    ///<summary>
    ///  不建立任何导出策略。
    ///  导出密钥允许不受限制。
    ///</summary>
    None = 0;
    ///<summary>
    ///  可以多次导出私钥。
    ///</summary>
    AllowExport = 1;
    ///<summary>
    ///  私钥可导出多次以明文形式存储。
    ///</summary>
    AllowPlaintextExport = 2;
    ///<summary>
    ///  可以用于存档目的的一次导出私钥。
    ///</summary>
    AllowArchiving = 4;
    ///<summary>
    ///  可以一次以纯文本形式导出私钥。
    ///</summary>
    AllowPlaintextArchiving = 8;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  指定用于密钥创建的选项。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngKeyCreationOptions')]
  DNCngKeyCreationOptions = type Integer;
  DNCngKeyCreationOptionsHelper = record helper for DNCngKeyCreationOptions
  public const
    ///<summary>
    ///  未不使用任何密钥创建选项。
    ///</summary>
    None = 0;
    ///<summary>
    ///  创建计算机范围密钥。
    ///</summary>
    MachineKey = 32;
    ///<summary>
    ///  中的现有密钥在密钥创建过程将被覆盖。
    ///</summary>
    OverwriteExistingKey = 128;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  指定用于打开密钥句柄的选项。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngKeyHandleOpenOptions')]
  DNCngKeyHandleOpenOptions = type Integer;
  DNCngKeyHandleOpenOptionsHelper = record helper for DNCngKeyHandleOpenOptions
  public const
    ///<summary>
    ///  正在打开的密钥句柄不指定一个临时密钥。
    ///</summary>
    None = 0;
    ///<summary>
    ///  正在打开的密钥句柄指定一个临时密钥。
    ///</summary>
    EphemeralKey = 1;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  指定用于打开密钥的选项。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngKeyOpenOptions')]
  DNCngKeyOpenOptions = type Integer;
  DNCngKeyOpenOptionsHelper = record helper for DNCngKeyOpenOptions
  public const
    ///<summary>
    ///  未不指定任何键打开选项。
    ///</summary>
    None = 0;
    ///<summary>
    ///  如果 <see cref="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey" />
    ///  值未指定，则转而打开用户密钥。
    ///</summary>
    UserKey = 0;
    ///<summary>
    ///  打开计算机范围的密钥。
    ///</summary>
    MachineKey = 32;
    ///<summary>
    ///  已取消显示提示 UI。
    ///</summary>
    Silent = 64;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  指定下一代加密技术 (CNG) 密钥可能用于的加密操作。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngKeyUsages')]
  DNCngKeyUsages = type Integer;
  DNCngKeyUsagesHelper = record helper for DNCngKeyUsages
  public const
    ///<summary>
    ///  没有使用情况将值赋给该密钥。
    ///</summary>
    None = 0;
    ///<summary>
    ///  密钥可以用于加密和解密。
    ///</summary>
    Decryption = 1;
    ///<summary>
    ///  密钥可用于签名和验证。
    ///</summary>
    Signing = 2;
    ///<summary>
    ///  密钥可用于机密协议生成和密钥交换。
    ///</summary>
    KeyAgreement = 4;
    ///<summary>
    ///  密钥可用于所有目的。
    ///</summary>
    AllUsages = 16777215;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  指定下一代加密技术 (CNG) 密钥属性选项。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngPropertyOptions')]
  DNCngPropertyOptions = type Integer;
  DNCngPropertyOptionsHelper = record helper for DNCngPropertyOptions
  public const
    ///<summary>
    ///  引用的属性没有任何选项。
    ///</summary>
    None = 0;
    ///<summary>
    ///  CNG 未指定的属性。
    ///  使用此选项以避免与 CNG 属性将来的名称冲突。
    ///</summary>
    CustomProperty = 1073741824;
    ///<summary>
    ///  应保留该属性。
    ///</summary>
    Persist = -2147483648;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  在用户界面 (UI) 提示方案中指定密钥的保护级别。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngUIProtectionLevels')]
  DNCngUIProtectionLevels = type Integer;
  DNCngUIProtectionLevelsHelper = record helper for DNCngUIProtectionLevels
  public const
    ///<summary>
    ///  没有用户界面访问该密钥时，会显示提示。
    ///</summary>
    None = 0;
    ///<summary>
    ///  一个用户界面将显示第一次密钥访问在进程中的提示。
    ///</summary>
    ProtectKey = 1;
    ///<summary>
    ///  一个用户界面提示每次访问密钥。
    ///</summary>
    ForceHighProtection = 2;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  指示如何解释 <see cref="T:System.Security.Cryptography.ECCurve" />
  ///  对象中包含的数据。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECCurve+ECCurveType')]
  DNECCurve_ECCurveType = type Integer;
  DNECCurve_ECCurveTypeHelper = record helper for DNECCurve_ECCurveType
  public const
    ///<summary>
    ///  没有解释曲线数据。
    ///  假定调用方了解曲线。
    ///</summary>
    Implicit = 0;
    ///<summary>
    ///  曲线参数表示素数曲线，素数字段 P 中的公式为 y^2 = x^3 + A*x + B。
    ///</summary>
    PrimeShortWeierstrass = 1;
    ///<summary>
    ///  曲线参数表示素数曲线，素数字段 P 中的公式为 A*x^2 + y^2 = 1 + B*x^2*y^2。
    ///</summary>
    PrimeTwistedEdwards = 2;
    ///<summary>
    ///  曲线参数表示素数曲线，公式为 B*y^2 = x^3 + A*x^2 + x。
    ///</summary>
    PrimeMontgomery = 3;
    ///<summary>
    ///  曲线参数表示特征 2 曲线。
    ///</summary>
    Characteristic2 = 4;
    ///<summary>
    ///  曲线参数表示已命名曲线。
    ///</summary>
    Named = 5;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  指定密钥派生函数 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />
  ///  类将用来将机密协议转换为密钥材料。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction')]
  DNECDiffieHellmanKeyDerivationFunction = type Integer;
  DNECDiffieHellmanKeyDerivationFunctionHelper = record helper for DNECDiffieHellmanKeyDerivationFunction
  public const
    ///<summary>
    ///  哈希算法用于生成密钥材料。
    ///<see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" />
    ///  属性指定要使用的算法的名称。
    ///  如果未指定的算法名称， <see cref="T:System.Security.Cryptography.SHA256" />
    ///  用作默认算法。
    ///</summary>
    Hash = 0;
    ///<summary>
    ///  基于哈希的消息身份验证代码 (HMAC) 算法用于生成密钥材料。
    ///<see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" />
    ///  属性指定要使用的密钥。
    ///  必须设置此属性或者或 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" />
    ///  属性必须设置为 <see langword="true" />
    ///  ; 否则为 <see cref="T:System.Security.Cryptography.CryptographicException" />
    ///  您使用时，将引发 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />
    ///  。
    ///  如果设置这两个属性，则该机密协议用作 HMAC 密钥。
    ///</summary>
    Hmac = 1;
    ///<summary>
    ///  传输层安全性 (TLS) 协议用于生成密钥材料。
    ///<see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
    ///  和 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" />
    ///  属性必须设置; 否则为 <see cref="T:System.Security.Cryptography.CryptographicException" />
    ///  您使用时，将引发 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />
    ///  。
    ///</summary>
    Tls = 2;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  定义椭圆曲线密钥的 XML 序列化格式。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECKeyXmlFormat')]
  DNECKeyXmlFormat = type Integer;
  DNECKeyXmlFormatHelper = record helper for DNECKeyXmlFormat
  public const
    ///<summary>
    ///  XML 序列化格式所述 RFC 4050，"为 XML 数字签名使用椭圆曲线签名算法 (ECDSA)"。
    ///</summary>
    Rfc4050 = 0;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>
  ///  指定用于签名验证的结果代码的大多数。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.SignatureVerificationResult')]
  DNSignatureVerificationResult = type Integer;
  DNSignatureVerificationResultHelper = record helper for DNSignatureVerificationResult
  public const
    ///<summary>
    ///  证书验证结果无效。
    ///</summary>
    Valid = 0;
    ///<summary>
    ///  /Asm:assembly 中指定的程序集的标识 / 清单的 asm:assemblyIdentity 节点中 /asm:assembly 中的验证码签名的程序集的标识不匹配 / ds:signature / ds:KeyInfo / msrel:RelData / r︰ 许可证 / r︰ 授予 / 作为︰ ManifestInformation/作为︰ assemblyIdentity 节点。
    ///</summary>
    AssemblyIdentityMismatch = 1;
    ///<summary>
    ///  中不会验证强名称签名 <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" />
    ///  对象。
    ///  由于强名称签名包装验证码签名，有人可能将替换为其选择的签名验证码签名。
    ///  若要避免此情形，如果强名称不会验证因为替换强名称签名的一部分将不对其进行验证，则返回此错误代码。
    ///</summary>
    ContainingSignatureInvalid = 2;
    ///<summary>
    ///  从清单中 /asm:assembly 标识的公钥标记 / asm:AssemblyIdentity 节点与用于对清单进行签名的密钥的公钥标记不匹配。
    ///</summary>
    PublicKeyTokenMismatch = 3;
    ///<summary>
    ///  发布者名称从 /asm:assembly / asmv2:publisherIdentity 与签名证书的使用者名称不匹配，或从同一 publisherIdentity 节点的颁发者密钥哈希与签名证书的密钥哈希不匹配。
    ///</summary>
    PublisherMismatch = 4;
    ///<summary>
    ///  验证信任关系时出现系统级错误。
    ///</summary>
    SystemError = -2146869247;
    ///<summary>
    ///  消息的签名者的证书是无效或找不到。
    ///</summary>
    InvalidSignerCertificate = -2146869246;
    ///<summary>
    ///  其中一个计数器签名无效。
    ///</summary>
    InvalidCountersignature = -2146869245;
    ///<summary>
    ///  无法验证证书的签名。
    ///</summary>
    InvalidCertificateSignature = -2146869244;
    ///<summary>
    ///  时间戳签名或证书无法验证或格式不正确。
    ///</summary>
    InvalidTimestamp = -2146869243;
    ///<summary>
    ///  该对象的数字签名未验证。
    ///</summary>
    BadDigest = -2146869232;
    ///<summary>
    ///  尚未观察到证书的基本约束扩展。
    ///</summary>
    BasicConstraintsNotObserved = -2146869223;
    ///<summary>
    ///  该证书具有未知的信任提供程序。
    ///</summary>
    UnknownTrustProvider = -2146762751;
    ///<summary>
    ///  该证书具有未知的验证操作。
    ///</summary>
    UnknownVerificationAction = -2146762750;
    ///<summary>
    ///  签名格式无效。
    ///</summary>
    BadSignatureFormat = -2146762749;
    ///<summary>
    ///  显式不受信任证书。
    ///</summary>
    CertificateNotExplicitlyTrusted = -2146762748;
    ///<summary>
    ///  找不到签名。
    ///</summary>
    MissingSignature = -2146762496;
    ///<summary>
    ///  证书已过期。
    ///</summary>
    CertificateExpired = -2146762495;
    ///<summary>
    ///  即将颁发的证书过期后，已颁发的证书。
    ///</summary>
    InvalidTimePeriodNesting = -2146762494;
    ///<summary>
    ///  该证书具有无效的角色。
    ///</summary>
    InvalidCertificateRole = -2146762493;
    ///<summary>
    ///  违反了证书链中的路径长度限制。
    ///</summary>
    PathLengthConstraintViolated = -2146762492;
    ///<summary>
    ///  证书包含标记为关键的未知的扩展名。
    ///</summary>
    UnknownCriticalExtension = -2146762491;
    ///<summary>
    ///  证书不能用于签名和验证。
    ///</summary>
    CertificateUsageNotAllowed = -2146762490;
    ///<summary>
    ///  给定证书的父证书没有颁发此子证书。
    ///</summary>
    IssuerChainingError = -2146762489;
    ///<summary>
    ///  证书缺失或具有重要的字段中，如主题或颁发者名称为空值。
    ///</summary>
    CertificateMalformed = -2146762488;
    ///<summary>
    ///  不受信任的根证书。
    ///</summary>
    UntrustedRootCertificate = -2146762487;
    ///<summary>
    ///  无法生成该链。
    ///</summary>
    CouldNotBuildChain = -2146762486;
    ///<summary>
    ///  没有与该证书的一般信任失败。
    ///</summary>
    GenericTrustFailure = -2146762485;
    ///<summary>
    ///  该证书已被吊销。
    ///</summary>
    CertificateRevoked = -2146762484;
    ///<summary>
    ///  测试根证书不受信任。
    ///</summary>
    UntrustedTestRootCertificate = -2146762483;
    ///<summary>
    ///  吊销检查失败。
    ///</summary>
    RevocationCheckFailure = -2146762482;
    ///<summary>
    ///  该证书具有用法无效。
    ///</summary>
    InvalidCertificateUsage = -2146762480;
    ///<summary>
    ///  该证书已被显式标记为不受信任的用户。
    ///</summary>
    CertificateExplicitlyDistrusted = -2146762479;
    ///<summary>
    ///  证书链已正确处理，但其中一个 CA 证书不受策略提供程序。
    ///</summary>
    UntrustedCertificationAuthority = -2146762478;
    ///<summary>
    ///  该证书具有无效的策略。
    ///</summary>
    InvalidCertificatePolicy = -2146762477;
    ///<summary>
    ///  该证书具有无效的名称。
    ///  名称或者未包含在允许列表或已被明确排除。
    ///</summary>
    InvalidCertificateName = -2146762476;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  ///<summary>
  ///  用于确定分配给为清单签名的可信赖性级别。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.TrustStatus')]
  DNTrustStatus = type Integer;
  DNTrustStatusHelper = record helper for DNTrustStatus
  public const
    ///<summary>
    ///  通过明确不可信的发布服务器上创建了签名。
    ///</summary>
    Untrusted = 0;
    ///<summary>
    ///  标识未知，该签名无效。
    ///  由于没有签名未经验证，因此不能确定的标识。
    ///</summary>
    UnknownIdentity = 1;
    ///<summary>
    ///  该标识已知，并且该签名有效。
    ///  有效的 Authenticode 签名提供标识。
    ///</summary>
    KnownIdentity = 2;
    ///<summary>
    ///  签名有效，且由明确信任的发布服务器。
    ///</summary>
    Trusted = 3;
  end;


  //-------------namespace: System.Security----------------
  ///<summary>
  ///  表示清单的签名信息适用于类型。
  ///</summary>
  [DNTypeName('System.Security.ManifestKinds')]
  DNManifestKinds = type Integer;
  DNManifestKindsHelper = record helper for DNManifestKinds
  public const
    ///<summary>
    ///  该清单不属于任何特定类型。
    ///</summary>
    None = 0;
    ///<summary>
    ///  清单仅适用于部署。
    ///</summary>
    Deployment = 1;
    ///<summary>
    ///  该清单适用于应用程序。
    ///</summary>
    Application = 2;
    ///<summary>
    ///  该清单适用于部署和应用程序。
    ///  是用于验证签名的默认值。
    ///</summary>
    ApplicationAndDeployment = 3;
  end;


  //-------------namespace: System.Threading----------------
  ///<summary>
  ///  指定同一个线程是否可以多次进入一个锁定状态。
  ///</summary>
  [DNTypeName('System.Threading.LockRecursionPolicy')]
  DNLockRecursionPolicy = type Integer;
  DNLockRecursionPolicyHelper = record helper for DNLockRecursionPolicy
  public const
    ///<summary>
    ///  如果线程尝试锁定以递归方式进入，则将引发异常。
    ///  当此设置生效，一些类可能会允许特定的递归方式。
    ///</summary>
    NoRecursion = 0;
    ///<summary>
    ///  一个线程可以输入锁以递归方式。
    ///  一些类可能会限制这一功能。
    ///</summary>
    SupportsRecursion = 1;
  end;




type


{ declares }

  DNIGrouping<TKey, TElement> = interface; // type: System.Linq.IGrouping`2, namespace: System.Linq
  DNILookup<TKey, TElement> = interface; // type: System.Linq.ILookup`2, namespace: System.Linq
  DNIOrderedEnumerable<TElement> = interface; // type: System.Linq.IOrderedEnumerable`1, namespace: System.Linq
  DNIQueryable<T> = interface; // type: System.Linq.IQueryable`1, namespace: System.Linq
  DNIOrderedQueryable<T> = interface; // type: System.Linq.IOrderedQueryable`1, namespace: System.Linq
  DNIQueryable = interface; // type: System.Linq.IQueryable, namespace: System.Linq
  DNIOrderedQueryable = interface; // type: System.Linq.IOrderedQueryable, namespace: System.Linq
  DNIDynamicMetaObjectProvider = interface; // type: System.Dynamic.IDynamicMetaObjectProvider, namespace: System.Dynamic
  DNIInvokeOnGetBinder = interface; // type: System.Dynamic.IInvokeOnGetBinder, namespace: System.Dynamic
  DNIArgumentProvider = interface; // type: System.Linq.Expressions.IArgumentProvider, namespace: System.Linq.Expressions
  DNIDynamicExpression = interface; // type: System.Linq.Expressions.IDynamicExpression, namespace: System.Linq.Expressions
  DNIQueryProvider = interface; // type: System.Linq.IQueryProvider, namespace: System.Linq
  DNIRuntimeVariables = interface; // type: System.Runtime.CompilerServices.IRuntimeVariables, namespace: System.Runtime.CompilerServices
  DNIStrongBox = interface; // type: System.Runtime.CompilerServices.IStrongBox, namespace: System.Runtime.CompilerServices
  DNManagementEntityAttribute = interface; // type: System.Management.Instrumentation.ManagementEntityAttribute, namespace: System.Management.Instrumentation
  DNManagementMemberAttribute = interface; // type: System.Management.Instrumentation.ManagementMemberAttribute, namespace: System.Management.Instrumentation
  DNManagementCommitAttribute = interface; // type: System.Management.Instrumentation.ManagementCommitAttribute, namespace: System.Management.Instrumentation
  DNManagementConfigurationAttribute = interface; // type: System.Management.Instrumentation.ManagementConfigurationAttribute, namespace: System.Management.Instrumentation
  DNManagementKeyAttribute = interface; // type: System.Management.Instrumentation.ManagementKeyAttribute, namespace: System.Management.Instrumentation
  DNManagementNewInstanceAttribute = interface; // type: System.Management.Instrumentation.ManagementNewInstanceAttribute, namespace: System.Management.Instrumentation
  DNManagementBindAttribute = interface; // type: System.Management.Instrumentation.ManagementBindAttribute, namespace: System.Management.Instrumentation
  DNManagementCreateAttribute = interface; // type: System.Management.Instrumentation.ManagementCreateAttribute, namespace: System.Management.Instrumentation
  DNManagementEnumeratorAttribute = interface; // type: System.Management.Instrumentation.ManagementEnumeratorAttribute, namespace: System.Management.Instrumentation
  DNManagementProbeAttribute = interface; // type: System.Management.Instrumentation.ManagementProbeAttribute, namespace: System.Management.Instrumentation
  DNManagementRemoveAttribute = interface; // type: System.Management.Instrumentation.ManagementRemoveAttribute, namespace: System.Management.Instrumentation
  DNManagementTaskAttribute = interface; // type: System.Management.Instrumentation.ManagementTaskAttribute, namespace: System.Management.Instrumentation
  DNManagementNameAttribute = interface; // type: System.Management.Instrumentation.ManagementNameAttribute, namespace: System.Management.Instrumentation
  DNManagementReferenceAttribute = interface; // type: System.Management.Instrumentation.ManagementReferenceAttribute, namespace: System.Management.Instrumentation
  DNWmiConfigurationAttribute = interface; // type: System.Management.Instrumentation.WmiConfigurationAttribute, namespace: System.Management.Instrumentation
  DNDynamicAttribute = interface; // type: System.Runtime.CompilerServices.DynamicAttribute, namespace: System.Runtime.CompilerServices
  DNHashSet<T> = interface; // type: System.Collections.Generic.HashSet`1, namespace: System.Collections.Generic
  DNCngPropertyCollection = interface; // type: System.Security.Cryptography.CngPropertyCollection, namespace: System.Security.Cryptography
  DNManifestSignatureInformationCollection = interface; // type: System.Security.Cryptography.ManifestSignatureInformationCollection, namespace: System.Security.Cryptography
  DNEventProvider = interface; // type: System.Diagnostics.Eventing.EventProvider, namespace: System.Diagnostics.Eventing
  DNEventBookmark = interface; // type: System.Diagnostics.Eventing.Reader.EventBookmark, namespace: System.Diagnostics.Eventing.Reader
  DNEventKeyword = interface; // type: System.Diagnostics.Eventing.Reader.EventKeyword, namespace: System.Diagnostics.Eventing.Reader
  DNEventLevel = interface; // type: System.Diagnostics.Eventing.Reader.EventLevel, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogConfiguration = interface; // type: System.Diagnostics.Eventing.Reader.EventLogConfiguration, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogInformation = interface; // type: System.Diagnostics.Eventing.Reader.EventLogInformation, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogLink = interface; // type: System.Diagnostics.Eventing.Reader.EventLogLink, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogPropertySelector = interface; // type: System.Diagnostics.Eventing.Reader.EventLogPropertySelector, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogQuery = interface; // type: System.Diagnostics.Eventing.Reader.EventLogQuery, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogReader = interface; // type: System.Diagnostics.Eventing.Reader.EventLogReader, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogSession = interface; // type: System.Diagnostics.Eventing.Reader.EventLogSession, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogStatus = interface; // type: System.Diagnostics.Eventing.Reader.EventLogStatus, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogWatcher = interface; // type: System.Diagnostics.Eventing.Reader.EventLogWatcher, namespace: System.Diagnostics.Eventing.Reader
  DNEventMetadata = interface; // type: System.Diagnostics.Eventing.Reader.EventMetadata, namespace: System.Diagnostics.Eventing.Reader
  DNEventOpcode = interface; // type: System.Diagnostics.Eventing.Reader.EventOpcode, namespace: System.Diagnostics.Eventing.Reader
  DNEventProperty = interface; // type: System.Diagnostics.Eventing.Reader.EventProperty, namespace: System.Diagnostics.Eventing.Reader
  DNEventRecord = interface; // type: System.Diagnostics.Eventing.Reader.EventRecord, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogRecord = interface; // type: System.Diagnostics.Eventing.Reader.EventLogRecord, namespace: System.Diagnostics.Eventing.Reader
  DNEventTask = interface; // type: System.Diagnostics.Eventing.Reader.EventTask, namespace: System.Diagnostics.Eventing.Reader
  DNProviderMetadata = interface; // type: System.Diagnostics.Eventing.Reader.ProviderMetadata, namespace: System.Diagnostics.Eventing.Reader
  DNCounterData = interface; // type: System.Diagnostics.PerformanceData.CounterData, namespace: System.Diagnostics.PerformanceData
  DNCounterSet = interface; // type: System.Diagnostics.PerformanceData.CounterSet, namespace: System.Diagnostics.PerformanceData
  DNCounterSetInstance = interface; // type: System.Diagnostics.PerformanceData.CounterSetInstance, namespace: System.Diagnostics.PerformanceData
  DNCounterSetInstanceCounterDataSet = interface; // type: System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet, namespace: System.Diagnostics.PerformanceData
  DNUnescapedXmlDiagnosticData = interface; // type: System.Diagnostics.UnescapedXmlDiagnosticData, namespace: System.Diagnostics
  DNBindingRestrictions = interface; // type: System.Dynamic.BindingRestrictions, namespace: System.Dynamic
  DNCallInfo = interface; // type: System.Dynamic.CallInfo, namespace: System.Dynamic
  DNDynamicMetaObject = interface; // type: System.Dynamic.DynamicMetaObject, namespace: System.Dynamic
  DNDynamicObject = interface; // type: System.Dynamic.DynamicObject, namespace: System.Dynamic
  DNExpandoObject = interface; // type: System.Dynamic.ExpandoObject, namespace: System.Dynamic
  DNEventRecordWrittenEventArgs = interface; // type: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogException = interface; // type: System.Diagnostics.Eventing.Reader.EventLogException, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogInvalidDataException = interface; // type: System.Diagnostics.Eventing.Reader.EventLogInvalidDataException, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogNotFoundException = interface; // type: System.Diagnostics.Eventing.Reader.EventLogNotFoundException, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogProviderDisabledException = interface; // type: System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogReadingException = interface; // type: System.Diagnostics.Eventing.Reader.EventLogReadingException, namespace: System.Diagnostics.Eventing.Reader
  DNInstrumentationBaseException = interface; // type: System.Management.Instrumentation.InstrumentationBaseException, namespace: System.Management.Instrumentation
  DNInstrumentationException = interface; // type: System.Management.Instrumentation.InstrumentationException, namespace: System.Management.Instrumentation
  DNInstanceNotFoundException = interface; // type: System.Management.Instrumentation.InstanceNotFoundException, namespace: System.Management.Instrumentation
  DNMemoryMappedFile = interface; // type: System.IO.MemoryMappedFiles.MemoryMappedFile, namespace: System.IO.MemoryMappedFiles
  DNMemoryMappedViewAccessor = interface; // type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor, namespace: System.IO.MemoryMappedFiles
  DNEnumerable = interface; // type: System.Linq.Enumerable, namespace: System.Linq
  DNEnumerableExecutor = interface; // type: System.Linq.EnumerableExecutor, namespace: System.Linq
  DNEnumerableExecutor<T> = interface; // type: System.Linq.EnumerableExecutor`1, namespace: System.Linq
  DNEnumerableQuery = interface; // type: System.Linq.EnumerableQuery, namespace: System.Linq
  DNEnumerableQuery<T> = interface; // type: System.Linq.EnumerableQuery`1, namespace: System.Linq
  DNCatchBlock = interface; // type: System.Linq.Expressions.CatchBlock, namespace: System.Linq.Expressions
  DNElementInit = interface; // type: System.Linq.Expressions.ElementInit, namespace: System.Linq.Expressions
  DNExpression = interface; // type: System.Linq.Expressions.Expression, namespace: System.Linq.Expressions
  DNBinaryExpression = interface; // type: System.Linq.Expressions.BinaryExpression, namespace: System.Linq.Expressions
  DNBlockExpression = interface; // type: System.Linq.Expressions.BlockExpression, namespace: System.Linq.Expressions
  DNConditionalExpression = interface; // type: System.Linq.Expressions.ConditionalExpression, namespace: System.Linq.Expressions
  DNConstantExpression = interface; // type: System.Linq.Expressions.ConstantExpression, namespace: System.Linq.Expressions
  DNDebugInfoExpression = interface; // type: System.Linq.Expressions.DebugInfoExpression, namespace: System.Linq.Expressions
  DNDefaultExpression = interface; // type: System.Linq.Expressions.DefaultExpression, namespace: System.Linq.Expressions
  DNDynamicExpression = interface; // type: System.Linq.Expressions.DynamicExpression, namespace: System.Linq.Expressions
  DNGotoExpression = interface; // type: System.Linq.Expressions.GotoExpression, namespace: System.Linq.Expressions
  DNIndexExpression = interface; // type: System.Linq.Expressions.IndexExpression, namespace: System.Linq.Expressions
  DNInvocationExpression = interface; // type: System.Linq.Expressions.InvocationExpression, namespace: System.Linq.Expressions
  DNLabelExpression = interface; // type: System.Linq.Expressions.LabelExpression, namespace: System.Linq.Expressions
  DNLambdaExpression = interface; // type: System.Linq.Expressions.LambdaExpression, namespace: System.Linq.Expressions
  DNExpression<TDelegate> = interface; // type: System.Linq.Expressions.Expression`1, namespace: System.Linq.Expressions
  DNListInitExpression = interface; // type: System.Linq.Expressions.ListInitExpression, namespace: System.Linq.Expressions
  DNLoopExpression = interface; // type: System.Linq.Expressions.LoopExpression, namespace: System.Linq.Expressions
  DNMemberExpression = interface; // type: System.Linq.Expressions.MemberExpression, namespace: System.Linq.Expressions
  DNMemberInitExpression = interface; // type: System.Linq.Expressions.MemberInitExpression, namespace: System.Linq.Expressions
  DNMethodCallExpression = interface; // type: System.Linq.Expressions.MethodCallExpression, namespace: System.Linq.Expressions
  DNNewArrayExpression = interface; // type: System.Linq.Expressions.NewArrayExpression, namespace: System.Linq.Expressions
  DNNewExpression = interface; // type: System.Linq.Expressions.NewExpression, namespace: System.Linq.Expressions
  DNParameterExpression = interface; // type: System.Linq.Expressions.ParameterExpression, namespace: System.Linq.Expressions
  DNRuntimeVariablesExpression = interface; // type: System.Linq.Expressions.RuntimeVariablesExpression, namespace: System.Linq.Expressions
  DNSwitchExpression = interface; // type: System.Linq.Expressions.SwitchExpression, namespace: System.Linq.Expressions
  DNTryExpression = interface; // type: System.Linq.Expressions.TryExpression, namespace: System.Linq.Expressions
  DNTypeBinaryExpression = interface; // type: System.Linq.Expressions.TypeBinaryExpression, namespace: System.Linq.Expressions
  DNUnaryExpression = interface; // type: System.Linq.Expressions.UnaryExpression, namespace: System.Linq.Expressions
  DNExpressionVisitor = interface; // type: System.Linq.Expressions.ExpressionVisitor, namespace: System.Linq.Expressions
  DNDynamicExpressionVisitor = interface; // type: System.Linq.Expressions.DynamicExpressionVisitor, namespace: System.Linq.Expressions
  DNLabelTarget = interface; // type: System.Linq.Expressions.LabelTarget, namespace: System.Linq.Expressions
  DNMemberBinding = interface; // type: System.Linq.Expressions.MemberBinding, namespace: System.Linq.Expressions
  DNMemberAssignment = interface; // type: System.Linq.Expressions.MemberAssignment, namespace: System.Linq.Expressions
  DNMemberListBinding = interface; // type: System.Linq.Expressions.MemberListBinding, namespace: System.Linq.Expressions
  DNMemberMemberBinding = interface; // type: System.Linq.Expressions.MemberMemberBinding, namespace: System.Linq.Expressions
  DNSwitchCase = interface; // type: System.Linq.Expressions.SwitchCase, namespace: System.Linq.Expressions
  DNSymbolDocumentInfo = interface; // type: System.Linq.Expressions.SymbolDocumentInfo, namespace: System.Linq.Expressions
  DNLookup<TKey, TElement> = interface; // type: System.Linq.Lookup`2, namespace: System.Linq
  DNParallelEnumerable = interface; // type: System.Linq.ParallelEnumerable, namespace: System.Linq
  DNParallelQuery = interface; // type: System.Linq.ParallelQuery, namespace: System.Linq
  DNParallelQuery<TSource> = interface; // type: System.Linq.ParallelQuery`1, namespace: System.Linq
  DNOrderedParallelQuery<TSource> = interface; // type: System.Linq.OrderedParallelQuery`1, namespace: System.Linq
  DNQueryable = interface; // type: System.Linq.Queryable, namespace: System.Linq
  DNEventProviderTraceListener = interface; // type: System.Diagnostics.Eventing.EventProviderTraceListener, namespace: System.Diagnostics.Eventing
  DNEventSchemaTraceListener = interface; // type: System.Diagnostics.EventSchemaTraceListener, namespace: System.Diagnostics
  DNPipeStream = interface; // type: System.IO.Pipes.PipeStream, namespace: System.IO.Pipes
  DNAnonymousPipeClientStream = interface; // type: System.IO.Pipes.AnonymousPipeClientStream, namespace: System.IO.Pipes
  DNAnonymousPipeServerStream = interface; // type: System.IO.Pipes.AnonymousPipeServerStream, namespace: System.IO.Pipes
  DNNamedPipeClientStream = interface; // type: System.IO.Pipes.NamedPipeClientStream, namespace: System.IO.Pipes
  DNNamedPipeServerStream = interface; // type: System.IO.Pipes.NamedPipeServerStream, namespace: System.IO.Pipes
  DNMemoryMappedViewStream = interface; // type: System.IO.MemoryMappedFiles.MemoryMappedViewStream, namespace: System.IO.MemoryMappedFiles
  DNComAwareEventInfo = interface; // type: System.Runtime.InteropServices.ComAwareEventInfo, namespace: System.Runtime.InteropServices
  DNCallSite = interface; // type: System.Runtime.CompilerServices.CallSite, namespace: System.Runtime.CompilerServices
  DNCallSite<T> = interface; // type: System.Runtime.CompilerServices.CallSite`1, namespace: System.Runtime.CompilerServices
  DNCallSiteBinder = interface; // type: System.Runtime.CompilerServices.CallSiteBinder, namespace: System.Runtime.CompilerServices
  DNDynamicMetaObjectBinder = interface; // type: System.Dynamic.DynamicMetaObjectBinder, namespace: System.Dynamic
  DNBinaryOperationBinder = interface; // type: System.Dynamic.BinaryOperationBinder, namespace: System.Dynamic
  DNConvertBinder = interface; // type: System.Dynamic.ConvertBinder, namespace: System.Dynamic
  DNCreateInstanceBinder = interface; // type: System.Dynamic.CreateInstanceBinder, namespace: System.Dynamic
  DNDeleteIndexBinder = interface; // type: System.Dynamic.DeleteIndexBinder, namespace: System.Dynamic
  DNDeleteMemberBinder = interface; // type: System.Dynamic.DeleteMemberBinder, namespace: System.Dynamic
  DNGetIndexBinder = interface; // type: System.Dynamic.GetIndexBinder, namespace: System.Dynamic
  DNGetMemberBinder = interface; // type: System.Dynamic.GetMemberBinder, namespace: System.Dynamic
  DNInvokeBinder = interface; // type: System.Dynamic.InvokeBinder, namespace: System.Dynamic
  DNInvokeMemberBinder = interface; // type: System.Dynamic.InvokeMemberBinder, namespace: System.Dynamic
  DNSetIndexBinder = interface; // type: System.Dynamic.SetIndexBinder, namespace: System.Dynamic
  DNSetMemberBinder = interface; // type: System.Dynamic.SetMemberBinder, namespace: System.Dynamic
  DNUnaryOperationBinder = interface; // type: System.Dynamic.UnaryOperationBinder, namespace: System.Dynamic
  DNCallSiteHelpers = interface; // type: System.Runtime.CompilerServices.CallSiteHelpers, namespace: System.Runtime.CompilerServices
  DNCallSiteOps = interface; // type: System.Runtime.CompilerServices.CallSiteOps, namespace: System.Runtime.CompilerServices
  DNClosure = interface; // type: System.Runtime.CompilerServices.Closure, namespace: System.Runtime.CompilerServices
  DNDebugInfoGenerator = interface; // type: System.Runtime.CompilerServices.DebugInfoGenerator, namespace: System.Runtime.CompilerServices
  DNExecutionScope = interface; // type: System.Runtime.CompilerServices.ExecutionScope, namespace: System.Runtime.CompilerServices
  DNReadOnlyCollectionBuilder<T> = interface; // type: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1, namespace: System.Runtime.CompilerServices
  DNRuleCache<T> = interface; // type: System.Runtime.CompilerServices.RuleCache`1, namespace: System.Runtime.CompilerServices
  DNRuntimeOps = interface; // type: System.Runtime.CompilerServices.RuntimeOps, namespace: System.Runtime.CompilerServices
  DNStrongBox<T> = interface; // type: System.Runtime.CompilerServices.StrongBox`1, namespace: System.Runtime.CompilerServices
  DNSafeMemoryMappedFileHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeNCryptHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeNCryptHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeNCryptKeyHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeNCryptProviderHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeNCryptSecretHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafePipeHandle = interface; // type: Microsoft.Win32.SafeHandles.SafePipeHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeMemoryMappedViewHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle, namespace: Microsoft.Win32.SafeHandles
  DNPipeAccessRule = interface; // type: System.IO.Pipes.PipeAccessRule, namespace: System.IO.Pipes
  DNPipeAuditRule = interface; // type: System.IO.Pipes.PipeAuditRule, namespace: System.IO.Pipes
  DNPipeSecurity = interface; // type: System.IO.Pipes.PipeSecurity, namespace: System.IO.Pipes
  DNMemoryMappedFileSecurity = interface; // type: System.IO.MemoryMappedFiles.MemoryMappedFileSecurity, namespace: System.IO.MemoryMappedFiles
  DNDSACng = interface; // type: System.Security.Cryptography.DSACng, namespace: System.Security.Cryptography
  DNECDiffieHellman = interface; // type: System.Security.Cryptography.ECDiffieHellman, namespace: System.Security.Cryptography
  DNECDiffieHellmanCng = interface; // type: System.Security.Cryptography.ECDiffieHellmanCng, namespace: System.Security.Cryptography
  DNECDsa = interface; // type: System.Security.Cryptography.ECDsa, namespace: System.Security.Cryptography
  DNECDsaCng = interface; // type: System.Security.Cryptography.ECDsaCng, namespace: System.Security.Cryptography
  DNRSACng = interface; // type: System.Security.Cryptography.RSACng, namespace: System.Security.Cryptography
  DNCngAlgorithm = interface; // type: System.Security.Cryptography.CngAlgorithm, namespace: System.Security.Cryptography
  DNCngAlgorithmGroup = interface; // type: System.Security.Cryptography.CngAlgorithmGroup, namespace: System.Security.Cryptography
  DNCngKey = interface; // type: System.Security.Cryptography.CngKey, namespace: System.Security.Cryptography
  DNCngKeyBlobFormat = interface; // type: System.Security.Cryptography.CngKeyBlobFormat, namespace: System.Security.Cryptography
  DNCngKeyCreationParameters = interface; // type: System.Security.Cryptography.CngKeyCreationParameters, namespace: System.Security.Cryptography
  DNCngProvider = interface; // type: System.Security.Cryptography.CngProvider, namespace: System.Security.Cryptography
  DNCngUIPolicy = interface; // type: System.Security.Cryptography.CngUIPolicy, namespace: System.Security.Cryptography
  DNECCurve_NamedCurves = interface; // type: System.Security.Cryptography.ECCurve+NamedCurves, namespace: System.Security.Cryptography
  DNECDiffieHellmanPublicKey = interface; // type: System.Security.Cryptography.ECDiffieHellmanPublicKey, namespace: System.Security.Cryptography
  DNECDiffieHellmanCngPublicKey = interface; // type: System.Security.Cryptography.ECDiffieHellmanCngPublicKey, namespace: System.Security.Cryptography
  DNMD5Cng = interface; // type: System.Security.Cryptography.MD5Cng, namespace: System.Security.Cryptography
  DNSHA1Cng = interface; // type: System.Security.Cryptography.SHA1Cng, namespace: System.Security.Cryptography
  DNSHA256Cng = interface; // type: System.Security.Cryptography.SHA256Cng, namespace: System.Security.Cryptography
  DNSHA256CryptoServiceProvider = interface; // type: System.Security.Cryptography.SHA256CryptoServiceProvider, namespace: System.Security.Cryptography
  DNSHA384Cng = interface; // type: System.Security.Cryptography.SHA384Cng, namespace: System.Security.Cryptography
  DNSHA384CryptoServiceProvider = interface; // type: System.Security.Cryptography.SHA384CryptoServiceProvider, namespace: System.Security.Cryptography
  DNSHA512Cng = interface; // type: System.Security.Cryptography.SHA512Cng, namespace: System.Security.Cryptography
  DNSHA512CryptoServiceProvider = interface; // type: System.Security.Cryptography.SHA512CryptoServiceProvider, namespace: System.Security.Cryptography
  DNIncrementalHash = interface; // type: System.Security.Cryptography.IncrementalHash, namespace: System.Security.Cryptography
  DNManifestSignatureInformation = interface; // type: System.Security.Cryptography.ManifestSignatureInformation, namespace: System.Security.Cryptography
  DNStrongNameSignatureInformation = interface; // type: System.Security.Cryptography.StrongNameSignatureInformation, namespace: System.Security.Cryptography
  DNAesCng = interface; // type: System.Security.Cryptography.AesCng, namespace: System.Security.Cryptography
  DNAesCryptoServiceProvider = interface; // type: System.Security.Cryptography.AesCryptoServiceProvider, namespace: System.Security.Cryptography
  DNAesManaged = interface; // type: System.Security.Cryptography.AesManaged, namespace: System.Security.Cryptography
  DNTripleDESCng = interface; // type: System.Security.Cryptography.TripleDESCng, namespace: System.Security.Cryptography
  DNAuthenticodeSignatureInformation = interface; // type: System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation, namespace: System.Security.Cryptography.X509Certificates
  DNCertificateRequest = interface; // type: System.Security.Cryptography.X509Certificates.CertificateRequest, namespace: System.Security.Cryptography.X509Certificates
  DNDSACertificateExtensions = interface; // type: System.Security.Cryptography.X509Certificates.DSACertificateExtensions, namespace: System.Security.Cryptography.X509Certificates
  DNECDsaCertificateExtensions = interface; // type: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions, namespace: System.Security.Cryptography.X509Certificates
  DNRSACertificateExtensions = interface; // type: System.Security.Cryptography.X509Certificates.RSACertificateExtensions, namespace: System.Security.Cryptography.X509Certificates
  DNSubjectAlternativeNameBuilder = interface; // type: System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder, namespace: System.Security.Cryptography.X509Certificates
  DNTimestampInformation = interface; // type: System.Security.Cryptography.X509Certificates.TimestampInformation, namespace: System.Security.Cryptography.X509Certificates
  DNX509SignatureGenerator = interface; // type: System.Security.Cryptography.X509Certificates.X509SignatureGenerator, namespace: System.Security.Cryptography.X509Certificates
  DNReaderWriterLockSlim = interface; // type: System.Threading.ReaderWriterLockSlim, namespace: System.Threading
  DNTaskExtensions = interface; // type: System.Threading.Tasks.TaskExtensions, namespace: System.Threading.Tasks
  DNHashSet_Enumerator<T> = interface; // type: System.Collections.Generic.HashSet`1+Enumerator, namespace: System.Collections.Generic
  DNEventDescriptor = interface; // type: System.Diagnostics.Eventing.EventDescriptor, namespace: System.Diagnostics.Eventing
  DNCngProperty = interface; // type: System.Security.Cryptography.CngProperty, namespace: System.Security.Cryptography
  DNECCurve = interface; // type: System.Security.Cryptography.ECCurve, namespace: System.Security.Cryptography
  DNECParameters = interface; // type: System.Security.Cryptography.ECParameters, namespace: System.Security.Cryptography
  DNECPoint = interface; // type: System.Security.Cryptography.ECPoint, namespace: System.Security.Cryptography

{ delegates }

  ///<summary>
  ///  封装具有 10 个参数且不返回值的方法。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam>
  [DNTypeName('System.Action`10')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10) of object;

  ///<summary>
  ///  封装具有 11 个参数且不返回值的方法。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam>
  [DNTypeName('System.Action`11')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11) of object;

  ///<summary>
  ///  封装具有 12 个参数且不返回值的方法。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///  <param name="arg12">
  ///  此委托封装的方法的第十二个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam><typeparam name="T12">
  ///  此委托封装的方法的第十二个参数的类型。
  ///</typeparam>
  [DNTypeName('System.Action`12')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12) of object;

  ///<summary>
  ///  封装具有 13 个参数且不返回值的方法。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///  <param name="arg12">
  ///  此委托封装的方法的第十二个参数。
  ///</param>
  ///  <param name="arg13">
  ///  此委托封装的方法的第 13 个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam><typeparam name="T12">
  ///  此委托封装的方法的第十二个参数的类型。
  ///</typeparam><typeparam name="T13">
  ///  此委托封装的方法的第 13 个参数的类型。
  ///</typeparam>
  [DNTypeName('System.Action`13')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13) of object;

  ///<summary>
  ///  封装具有 14 个参数且不返回值的方法。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///  <param name="arg12">
  ///  此委托封装的方法的第十二个参数。
  ///</param>
  ///  <param name="arg13">
  ///  此委托封装的方法的第 13 个参数。
  ///</param>
  ///  <param name="arg14">
  ///  此委托封装的方法的第十四个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam><typeparam name="T12">
  ///  此委托封装的方法的第十二个参数的类型。
  ///</typeparam><typeparam name="T13">
  ///  此委托封装的方法的第 13 个参数的类型。
  ///</typeparam><typeparam name="T14">
  ///  此委托封装的方法的第十四个参数的类型。
  ///</typeparam>
  [DNTypeName('System.Action`14')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14) of object;

  ///<summary>
  ///  封装具有 15 个参数且不返回值的方法。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///  <param name="arg12">
  ///  此委托封装的方法的第十二个参数。
  ///</param>
  ///  <param name="arg13">
  ///  此委托封装的方法的第 13 个参数。
  ///</param>
  ///  <param name="arg14">
  ///  此委托封装的方法的第十四个参数。
  ///</param>
  ///  <param name="arg15">
  ///  此委托封装的方法的第十五个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam><typeparam name="T12">
  ///  此委托封装的方法的第十二个参数的类型。
  ///</typeparam><typeparam name="T13">
  ///  此委托封装的方法的第 13 个参数的类型。
  ///</typeparam><typeparam name="T14">
  ///  此委托封装的方法的第十四个参数的类型。
  ///</typeparam><typeparam name="T15">
  ///  此委托封装的方法的第十五个参数的类型。
  ///</typeparam>
  [DNTypeName('System.Action`15')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15) of object;

  ///<summary>
  ///  封装具有 16 个参数且不返回值的方法。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///  <param name="arg12">
  ///  此委托封装的方法的第十二个参数。
  ///</param>
  ///  <param name="arg13">
  ///  此委托封装的方法的第 13 个参数。
  ///</param>
  ///  <param name="arg14">
  ///  此委托封装的方法的第十四个参数。
  ///</param>
  ///  <param name="arg15">
  ///  此委托封装的方法的第十五个参数。
  ///</param>
  ///  <param name="arg16">
  ///  此委托封装的方法的第 16 个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam><typeparam name="T12">
  ///  此委托封装的方法的第十二个参数的类型。
  ///</typeparam><typeparam name="T13">
  ///  此委托封装的方法的第 13 个参数的类型。
  ///</typeparam><typeparam name="T14">
  ///  此委托封装的方法的第十四个参数的类型。
  ///</typeparam><typeparam name="T15">
  ///  此委托封装的方法的第十五个参数的类型。
  ///</typeparam><typeparam name="T16">
  ///  此委托封装的方法的第 16 个参数的类型。
  ///</typeparam>
  [DNTypeName('System.Action`16')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15; arg16: T16) of object;

  ///<summary>
  ///  封装一个方法，该方法具有九个参数且不返回值。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam>
  [DNTypeName('System.Action`9')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9) of object;

  ///<summary>
  ///  封装的方法具有九个参数且返回由指定类型的值<paramref name="TResult" />
  ///  参数。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="TResult">
  ///  此委托封装的方法的返回值类型。
  ///</typeparam><returns>
  ///  此委托封装的方法的返回值。
  ///</returns>
  [DNTypeName('System.Func`10')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9): TResult of object;

  ///<summary>
  ///  封装具有 10 个参数且返回由指定类型的值的方法<paramref name="TResult" />
  ///  参数。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="TResult">
  ///  此委托封装的方法的返回值类型。
  ///</typeparam><returns>
  ///  此委托封装的方法的返回值。
  ///</returns>
  [DNTypeName('System.Func`11')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10): TResult of object;

  ///<summary>
  ///  封装具有 11 个参数且返回由指定类型的值的方法<paramref name="TResult" />
  ///  参数。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam><typeparam name="TResult">
  ///  此委托封装的方法的返回值类型。
  ///</typeparam><returns>
  ///  此委托封装的方法的返回值。
  ///</returns>
  [DNTypeName('System.Func`12')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11): TResult of object;

  ///<summary>
  ///  封装具有 12 个参数且返回由指定类型的值的方法<paramref name="TResult" />
  ///  参数。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///  <param name="arg12">
  ///  此委托封装的方法的第十二个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam><typeparam name="T12">
  ///  此委托封装的方法的第十二个参数的类型。
  ///</typeparam><typeparam name="TResult">
  ///  此委托封装的方法的返回值类型。
  ///</typeparam><returns>
  ///  此委托封装的方法的返回值。
  ///</returns>
  [DNTypeName('System.Func`13')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12): TResult of object;

  ///<summary>
  ///  封装具有 13 个参数且返回由指定的类型的值的方法 <paramref name="TResult" />
  ///  参数。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装方法的第十一个参数。
  ///</param>
  ///  <param name="arg12">
  ///  此委托封装方法的第十二个参数。
  ///</param>
  ///  <param name="arg13">
  ///  此委托封装的方法的第十三个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第十一个参数的类型。
  ///</typeparam><typeparam name="T12">
  ///  此委托封装的方法的第十二个参数的类型。
  ///</typeparam><typeparam name="T13">
  ///  此委托封装的方法的第十三个参数的类型。
  ///</typeparam><typeparam name="TResult">
  ///  此委托封装的方法的返回值类型。
  ///</typeparam><returns>
  ///  此委托封装的方法的返回值。
  ///</returns>
  [DNTypeName('System.Func`14')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13): TResult of object;

  ///<summary>
  ///  封装具有 14 个参数且返回由指定类型的值的方法<paramref name="TResult" />
  ///  参数。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///  <param name="arg12">
  ///  此委托封装的方法的第十二个参数。
  ///</param>
  ///  <param name="arg13">
  ///  此委托封装的方法的第 13 个参数。
  ///</param>
  ///  <param name="arg14">
  ///  此委托封装的方法的第十四个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam><typeparam name="T12">
  ///  此委托封装的方法的第十二个参数的类型。
  ///</typeparam><typeparam name="T13">
  ///  此委托封装的方法的第 13 个参数的类型。
  ///</typeparam><typeparam name="T14">
  ///  此委托封装的方法的第十四个参数的类型。
  ///</typeparam><typeparam name="TResult">
  ///  此委托封装的方法的返回值类型。
  ///</typeparam><returns>
  ///  此委托封装的方法的返回值。
  ///</returns>
  [DNTypeName('System.Func`15')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14): TResult of object;

  ///<summary>
  ///  封装具有 15 个参数且返回由指定类型的值的方法<paramref name="TResult" />
  ///  参数。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///  <param name="arg12">
  ///  此委托封装的方法的第十二个参数。
  ///</param>
  ///  <param name="arg13">
  ///  此委托封装的方法的第 13 个参数。
  ///</param>
  ///  <param name="arg14">
  ///  此委托封装的方法的第十四个参数。
  ///</param>
  ///  <param name="arg15">
  ///  此委托封装的方法的第十五个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam><typeparam name="T12">
  ///  此委托封装的方法的第十二个参数的类型。
  ///</typeparam><typeparam name="T13">
  ///  此委托封装的方法的第 13 个参数的类型。
  ///</typeparam><typeparam name="T14">
  ///  此委托封装的方法的第十四个参数的类型。
  ///</typeparam><typeparam name="T15">
  ///  此委托封装的方法的第十五个参数的类型。
  ///</typeparam><typeparam name="TResult">
  ///  此委托封装的方法的返回值类型。
  ///</typeparam><returns>
  ///  此委托封装的方法的返回值。
  ///</returns>
  [DNTypeName('System.Func`16')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15): TResult of object;

  ///<summary>
  ///  封装具有 16 个参数且返回由指定类型的值的方法<paramref name="TResult" />
  ///  参数。
  ///</summary>
  ///  <param name="arg1">
  ///  此委托封装的方法的第一个参数。
  ///</param>
  ///  <param name="arg2">
  ///  此委托封装的方法的第二个参数。
  ///</param>
  ///  <param name="arg3">
  ///  此委托封装的方法的第三个参数。
  ///</param>
  ///  <param name="arg4">
  ///  此委托封装的方法的第四个参数。
  ///</param>
  ///  <param name="arg5">
  ///  此委托封装的方法的第五个参数。
  ///</param>
  ///  <param name="arg6">
  ///  此委托封装的方法的第六个参数。
  ///</param>
  ///  <param name="arg7">
  ///  此委托封装的方法的第七个参数。
  ///</param>
  ///  <param name="arg8">
  ///  此委托封装的方法的第八个参数。
  ///</param>
  ///  <param name="arg9">
  ///  此委托封装的方法的第九个参数。
  ///</param>
  ///  <param name="arg10">
  ///  此委托封装的方法的第十个参数。
  ///</param>
  ///  <param name="arg11">
  ///  此委托封装的方法的第 11 个参数。
  ///</param>
  ///  <param name="arg12">
  ///  此委托封装的方法的第十二个参数。
  ///</param>
  ///  <param name="arg13">
  ///  此委托封装的方法的第 13 个参数。
  ///</param>
  ///  <param name="arg14">
  ///  此委托封装的方法的第十四个参数。
  ///</param>
  ///  <param name="arg15">
  ///  此委托封装的方法的第十五个参数。
  ///</param>
  ///  <param name="arg16">
  ///  此委托封装的方法的第 16 个参数。
  ///</param>
  ///<typeparam name="T1">
  ///  此委托封装的方法的第一个参数的类型。
  ///</typeparam><typeparam name="T2">
  ///  此委托封装的方法的第二个参数的类型。
  ///</typeparam><typeparam name="T3">
  ///  此委托封装的方法的第三个参数的类型。
  ///</typeparam><typeparam name="T4">
  ///  此委托封装的方法的第四个参数的类型。
  ///</typeparam><typeparam name="T5">
  ///  此委托封装的方法的第五个参数的类型。
  ///</typeparam><typeparam name="T6">
  ///  此委托封装的方法的第六个参数的类型。
  ///</typeparam><typeparam name="T7">
  ///  此委托封装的方法的第七个参数的类型。
  ///</typeparam><typeparam name="T8">
  ///  此委托封装的方法的第八个参数的类型。
  ///</typeparam><typeparam name="T9">
  ///  此委托封装的方法的第九个参数的类型。
  ///</typeparam><typeparam name="T10">
  ///  此委托封装的方法的第十个参数的类型。
  ///</typeparam><typeparam name="T11">
  ///  此委托封装的方法的第 11 个参数的类型。
  ///</typeparam><typeparam name="T12">
  ///  此委托封装的方法的第十二个参数的类型。
  ///</typeparam><typeparam name="T13">
  ///  此委托封装的方法的第 13 个参数的类型。
  ///</typeparam><typeparam name="T14">
  ///  此委托封装的方法的第十四个参数的类型。
  ///</typeparam><typeparam name="T15">
  ///  此委托封装的方法的第十五个参数的类型。
  ///</typeparam><typeparam name="T16">
  ///  此委托封装的方法的第 16 个参数的类型。
  ///</typeparam><typeparam name="TResult">
  ///  此委托封装的方法的返回值类型。
  ///</typeparam><returns>
  ///  此委托封装的方法的返回值。
  ///</returns>
  [DNTypeName('System.Func`17')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15; arg16: T16): TResult of object;

  ///<summary>
  ///  表示要与客户端调用的方法。
  ///</summary>
  [DNTypeName('System.IO.Pipes.PipeStreamImpersonationWorker')]
  DNPipeStreamImpersonationWorker = procedure of object;




{ objects }

  //-------------namespace: System.Linq----------------
  ///<summary>
  ///  表示具有公共键的对象的集合。
  ///</summary>
  ///<typeparam name="TKey">
  ///  键的类型 <see cref="T:System.Linq.IGrouping`2" />
  ///  。
  ///</typeparam><typeparam name="TElement">
  ///  中的值的类型 <see cref="T:System.Linq.IGrouping`2" />
  ///  。
  ///</typeparam>
  [DNTypeName('System.Linq.IGrouping`2')]
  DNIGrouping<TKey, TElement> = interface(DDN.mscorlib.DNIEnumerable<TElement>)
  ['{9CCECD6C-7922-345E-A182-6626F99CC460}']
  { getters & setters } 

    function get_Key: TKey;

  { propertys } 

    ///<summary>
    ///  获取的键 <see cref="T:System.Linq.IGrouping`2" />
    ///  。
    ///</summary>
    ///<returns>
    ///  键 <see cref="T:System.Linq.IGrouping`2" />
    ///  。
    ///</returns>
    property Key: TKey read get_Key;
  end;

  //-------------namespace: System.Linq----------------
  ///<summary>
  ///  定义索引器、 大小属性，并将键映射到的数据结构的布尔搜索方法 <see cref="T:System.Collections.Generic.IEnumerable`1" />
  ///  值的序列。
  ///</summary>
  ///<typeparam name="TKey">
  ///  中的键的类型 <see cref="T:System.Linq.ILookup`2" />
  ///  。
  ///</typeparam><typeparam name="TElement">
  ///  中的元素的类型 <see cref="T:System.Collections.Generic.IEnumerable`1" />
  ///  序列中的值构成 <see cref="T:System.Linq.ILookup`2" />
  ///  。
  ///</typeparam>
  [DNTypeName('System.Linq.ILookup`2')]
  DNILookup<TKey, TElement> = interface(DDN.mscorlib.DNIEnumerable<DNIGrouping<TKey, TElement>>)
  ['{6B51090C-E837-3318-A840-0B5D95886587}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(key: TKey): DDN.mscorlib.DNIEnumerable<TElement>;

  { methods } 

    function &Contains(key: TKey): Boolean;

  { propertys } 

    ///<summary>
    ///  获取对集合中的键/值数 <see cref="T:System.Linq.ILookup`2" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中的键/值集合对的数目 <see cref="T:System.Linq.ILookup`2" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[key: TKey]: DDN.mscorlib.DNIEnumerable<TElement> read get_Item; default;
  end;

  //-------------namespace: System.Linq----------------
  ///<summary>
  ///  表示一个排序的序列。
  ///</summary>
  ///<typeparam name="TElement">
  ///  对序列中的元素的类型。
  ///</typeparam>
  [DNTypeName('System.Linq.IOrderedEnumerable`1')]
  DNIOrderedEnumerable<TElement> = interface(DDN.mscorlib.DNIEnumerable<TElement>)
  ['{6EEB1E7D-F438-329E-BD25-428DAB0608A7}']
  end;

  //-------------namespace: System.Linq----------------
  ///<summary>
  ///  提供针对特定数据源（其中数据类型未未知）评估查询的功能。
  ///</summary>
  ///<typeparam name="T">
  ///  数据源中数据的类型。
  ///</typeparam>
  [DNTypeName('System.Linq.IQueryable`1')]
  DNIQueryable<T> = interface(DDN.mscorlib.DNIEnumerable<T>)
  ['{E2C91F76-C000-32D6-B5A1-1BB9AA1B5660}']
  end;

  //-------------namespace: System.Linq----------------
  ///<summary>
  ///  表示排序操作的结果。
  ///</summary>
  ///<typeparam name="T">
  ///  数据源的内容类型。
  ///</typeparam>
  [DNTypeName('System.Linq.IOrderedQueryable`1')]
  DNIOrderedQueryable<T> = interface(DNIQueryable<T>)
  ['{0FD6D6C3-C6F1-39DA-B3F5-1363BAEA7D94}']
  end;

  //-------------namespace: System.Linq----------------
  ///<summary>
  ///  提供针对特定数据源（其中数据类型未指定）评估查询的功能。
  ///</summary>
  [DNTypeName('System.Linq.IQueryable')]
  DNIQueryable = interface(DDN.mscorlib.DNIEnumerable)
  ['{84F6F43C-A9A7-3658-91B4-B41B15CAEFF2}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_ElementType: DDN.mscorlib.DNType;
    function get_Provider: DNIQueryProvider;

  { propertys } 

    ///<summary>
    ///  获取与实例相关联的表达式目录树 <see cref="T:System.Linq.IQueryable" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的此实例与该键相关联 <see cref="T:System.Linq.IQueryable" />
    ///  。
    ///</returns>
    property Expression: DNExpression read get_Expression;
    ///<summary>
    ///  获取与此实例关联的表达式树时返回的元素的类型 <see cref="T:System.Linq.IQueryable" />
    ///  执行。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  ，表示执行与此对象关联的表达式树时返回的元素的类型。
    ///</returns>
    property ElementType: DDN.mscorlib.DNType read get_ElementType;
    ///<summary>
    ///  获取与此数据源相关联的查询提供程序。
    ///</summary>
    ///<returns><see cref="T:System.Linq.IQueryProvider" />
    ///  此数据源与该键相关联。
    ///</returns>
    property Provider: DNIQueryProvider read get_Provider;
  end;

  //-------------namespace: System.Linq----------------
  ///<summary>
  ///  表示排序操作的结果。
  ///</summary>
  [DNTypeName('System.Linq.IOrderedQueryable')]
  DNIOrderedQueryable = interface(DNIQueryable)
  ['{E5303F81-6FE2-37CC-893F-1BF7E067D44F}']
  end;

  //-------------namespace: System.Dynamic----------------
  ///<summary>
  ///  表示可在运行时绑定其操作的动态对象。
  ///</summary>
  [DNTypeName('System.Dynamic.IDynamicMetaObjectProvider')]
  DNIDynamicMetaObjectProvider = interface(DDN.mscorlib.DNObject)
  ['{B86A98CC-DCC0-3205-8777-7911A07DAAAF}']
  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  负责对此对象绑定操作执行。
    ///</summary>
    ///  <param name="parameter">
    ///  表达式树值的表示形式运行时。
    ///</param>
    ///<returns><see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  要绑定此对象。
    ///</returns>
    function GetMetaObject(parameter: DNExpression): DNDynamicMetaObject;

  end;

  //-------------namespace: System.Dynamic----------------
  ///<summary>
  ///  表示有关动态获取成员操作的信息，该操作指示当属性执行获取操作时，该获取成员是否应调用属性。
  ///</summary>
  [DNTypeName('System.Dynamic.IInvokeOnGetBinder')]
  DNIInvokeOnGetBinder = interface(DDN.mscorlib.DNObject)
  ['{ED40980B-63E1-325C-BC22-93E284CA8CD3}']
  { getters & setters } 

    function get_InvokeOnGet: Boolean;

  { propertys } 

    ///<summary>
    ///  获取一个值，指示是否在执行 get 操作时，该获取成员操作应调用属性。
    ///  此接口不存在时的默认值为 true。
    ///</summary>
    ///<returns>
    ///  如果在执行 get 操作中; 时，该获取成员操作应调用属性则为 true否则为 false。
    ///</returns>
    property InvokeOnGet: Boolean read get_InvokeOnGet;
  end;

  //-------------namespace: System.Linq.Expressions----------------
  ///<summary>
  ///  提供用于访问多个树节点（DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression 和 InexExpression）的参数的内部接口。
  ///  不应使用此 API。
  ///  它只会由于 DLL 重构而公开并仅用于内部性能优化。
  ///  这能够实现两次优化，从而减少了表达式树的大小。
  ///  第一次优化可以使树节点保留在 IList &lt;T&gt; 上而不是 ReadOnlyCollection 上。
  ///  IList&lt;T&gt; 将节约用在为每个节点分配 ReadOnlyCollection 方面的成本。
  ///  第二次优化能够创建专用的子类，可保留特定数量的参数（例如，Block2、Block3、Block4）。
  ///  因此，这些节点避免了分配用于存储其元素的 ReadOnlyCollection 和数组，从而为每个节点节省了 32 个字节。
  ///  表达式树节点继续公开 ReadOnlyCollections 的原始 LINQ 属性。
  ///  这些节点通过重复使用用于存储数组或元素（通常存储在数组中）的字段来执行此操作。
  ///  对于数组用例，集合将类型化为 IList&lt;T&gt;，而不是 ReadOnlyCollection&lt;T&gt;。
  ///  当节点在最初构造时它是一个数组。
  ///  当编译器访问成员时它会使用此接口。
  ///  访问数组元素可以将数组升级到 ReadOnlyCollection。
  ///  对于对象用例，我们会存储类型化为对象的字段中的第一个参数。
  ///  当最初构造该节点时，该字段将持有该表达式。
  ///  编译器通过此接口访问参数，第一个参数的访问器使用 Expression.ReturnObject 返回用于处理表达式或 ReadOnlyCollection 用例的对象。
  ///  当用户访问 ReadOnlyCollection 时，将更新对象字段以直接保留 ReadOnlyCollection。
  ///  表达式始终返回相同的 ReadOnlyCollection，这一点很重要。
  ///  否则，将中断重写树查看器。
  ///  从 LINQ v1 返回不同的 ReadOnlyCollections 形成相同的表达式节点，这是一个重大突破。
  ///  当前用户可以依赖对象标识来区分该节点是否已更改。
  ///  在重载字段中存储 ReadOnlyCollection 既可减少内存使用量，又可保持公共 API 兼容性。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.IArgumentProvider')]
  DNIArgumentProvider = interface(DDN.mscorlib.DNObject)
  ['{6D1D0B80-3581-33F4-9261-6A4D710EDB5F}']
  { getters & setters } 

    function get_ArgumentCount: Int32;

  { methods } 

    ///<summary>
    ///  索引时返回参数，当索引超出界限时引发。
    ///  不应使用此类型。
    ///  仅在程序集重构时公开，并且仅用于内部性能优化。
    ///</summary>
    ///  <param name="index">
    ///  参数的索引。
    ///</param>
    ///<returns>
    ///  索引时返回参数，当索引超出界限 <see cref="T:System.Linq.Expressions.Expression" />
    ///  时引发。
    ///</returns>
    function GetArgument(index: Int32): DNExpression;

  { propertys } 

    ///<summary>
    ///  返回表达式树节点的参数数目。
    ///  不应使用此类型。
    ///  仅在程序集重构时公开，并且仅用于内部性能优化。
    ///</summary>
    ///<returns>
    ///  作为 <see cref="T:System.Int32" />
    ///  的表达式树节点的参数数目。
    ///</returns>
    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  //-------------namespace: System.Linq.Expressions----------------
  ///<summary>
  ///  提供用于访问 DynamicExpression 树节点的参数及 CallSite 和重写功能的内部接口。
  ///  不应使用此 API。
  ///  由于 DLL 重构，它只能是公共的；并且仅用于内部性能优化。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.IDynamicExpression')]
  DNIDynamicExpression = interface(DNIArgumentProvider)
  ['{F2DF1DD2-D434-34A4-A72E-401019651DEC}']
  { getters & setters } 

    function get_DelegateType: DDN.mscorlib.DNType;

  { methods } 

    ///<summary>
    ///  重写此节点，该节点可将动态表达式的参数替换为提供的值。
    ///  args 的数目需要与当前表达式的数目匹配。
    ///  不应使用此类型。
    ///  仅在程序集重构时公开，并且仅用于内部性能优化。
    ///  此辅助方法允许重新编写要独立于特定实现类的节点，该实现类是从调用站点正在使用的 DynamicExpression 派生的。
    ///</summary>
    ///  <param name="args">
    ///  用于替换此节点的参数。
    ///</param>
    ///<returns>
    ///  重写的节点，但如果未进行任何更改，则返回相同的节点。
    ///</returns>
    function Rewrite(args: TArray<DNExpression>): DNExpression;
    ///<summary>
    ///  根据需要创建 CallSite 并返回 DynamicExpression 的多态内联缓存的 CallSite。
    ///  不应使用此类型。
    ///  仅在程序集重构时公开，并且仅用于内部性能优化。
    ///</summary>
    ///<returns>
    ///  DynamicExpression 的多态内联缓存的 CallSite。
    ///</returns>
    function CreateCallSite: DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>
    ///  获取 CallSite 使用的委托类型，该类型即为在动态表达式的多形态内联缓冲中使用的规则类型。
    ///</summary>
    ///<returns>
    ///  CallSite 使用的委托类型。
    ///</returns>
    property DelegateType: DDN.mscorlib.DNType read get_DelegateType;
  end;

  //-------------namespace: System.Linq----------------
  ///<summary>
  ///  定义用于创建和执行查询所描述的方法 <see cref="T:System.Linq.IQueryable" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Linq.IQueryProvider')]
  DNIQueryProvider = interface(DDN.mscorlib.DNObject)
  ['{B9608E43-658E-3B98-9448-8F93B7D6E50C}']
  { methods } 

    ///<summary>
    ///  构造 <see cref="T:System.Linq.IQueryable" />
    ///  可以评估所表示的指定的表达式目录树查询的对象。
    ///</summary>
    ///  <param name="expression">
    ///  一个表示的表达式树 LINQ 查询。
    ///</param>
    ///<returns><see cref="T:System.Linq.IQueryable" />
    ///  ，它可计算指定的表达式目录树所表示的查询。
    ///</returns>
    function CreateQuery(expression: DNExpression): DNIQueryable;
    ///<summary>
    ///  执行指定的表达式树所表示的查询。
    ///</summary>
    ///  <param name="expression">
    ///  一个表示的表达式树 LINQ 查询。
    ///</param>
    ///<returns>
    ///  执行指定的查询所得到的值。
    ///</returns>
    function Execute(expression: DNExpression): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  ///<summary>
  ///  表示运行时变量的值。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.IRuntimeVariables')]
  DNIRuntimeVariables = interface(DDN.mscorlib.DNObject)
  ['{D2E28B60-F4E4-3614-8D43-5DAEEDB31E8E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDN.mscorlib.DNObject;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject);

  { propertys } 

    ///<summary>
    ///  获取运行时变量的计数。
    ///</summary>
    ///<returns>
    ///  运行时变量的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  ///<summary>
  ///  定义用于访问对象引用的值的属性。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.IStrongBox')]
  DNIStrongBox = interface(DDN.mscorlib.DNObject)
  ['{53080814-DA86-3D64-AA57-5B4C3EF730E5}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { propertys } 

    ///<summary>
    ///  获取或设置一个对象引用的值。
    ///</summary>
    ///<returns>
    ///  该对象引用的值。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementEntityAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B8D086AB-9B12-523D-A352-64D38E56DAE1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.ManagementEntityAttribute" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNManagementEntityAttribute;

  end;

  ///<summary>
  ///  ManagementEntity 属性指示某个类提供通过 WMI 提供程序公开的管理信息。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementEntityAttribute')]
  DNManagementEntityAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{53823D1D-B9B6-3076-94D8-8519297E9583}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_External: Boolean;
    procedure set_External(value: Boolean);
    function get_Singleton: Boolean;
    procedure set_Singleton(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 WMI 类的名称。
    ///</summary>
    ///<returns>
    ///  一个字符串，其中包含 WMI 类的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置一个值，指定此类是否表示 WMI 类中实现的提供程序在当前程序集外部。
    ///</summary>
    ///<returns>
    ///  一个布尔值，如果该类表示外部的 WMI 类和 false 否则也是如此。
    ///</returns>
    property &External: Boolean read get_External write set_External;
    ///<summary>
    ///  指定关联的类是否表示单个 WMI 类。
    ///</summary>
    ///<returns>
    ///  一个布尔值，如果该类表示的单独的 WMI 类和 false 否则也是如此。
    ///</returns>
    property Singleton: Boolean read get_Singleton write set_Singleton;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementEntityAttribute = class(TDNGenericImport<DNManagementEntityAttributeClass, DNManagementEntityAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementMemberAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{59755F57-A148-5977-8840-004082C3337A}']
  end;

  ///<summary>
  ///  通过 WMI.NET 提供程序扩展框架使用此类。
  ///  它是可应用于成员的所有管理属性的基类。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementMemberAttribute')]
  DNManagementMemberAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{541D72AD-B73A-38E0-B512-EF13FA98B26A}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置管理属性的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，它是管理属性的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementMemberAttribute = class(TDNGenericImport<DNManagementMemberAttributeClass, DNManagementMemberAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementCommitAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{B8D91077-046F-56D9-AAAB-F02B31E58203}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.ManagementCommitAttribute" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNManagementCommitAttribute;

  end;

  ///<summary>
  ///  ManagementCommit 属性标记当有必要在一次原子操作中更新一组读写属性时调用的方法。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementCommitAttribute')]
  DNManagementCommitAttribute = interface(DNManagementMemberAttribute)
  ['{B7ABE03A-04AB-3493-9620-ADD9DABADD51}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置管理属性的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，它是管理属性的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementCommitAttribute = class(TDNGenericImport<DNManagementCommitAttributeClass, DNManagementCommitAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementConfigurationAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{47FD3ABA-8079-5593-8727-642E27719355}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.ManagementConfigurationAttribute" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNManagementConfigurationAttribute;

  end;

  ///<summary>
  ///  ManagementConfiguration 特性表示属性或字段将代表读写 WMI 属性。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementConfigurationAttribute')]
  DNManagementConfigurationAttribute = interface(DNManagementMemberAttribute)
  ['{C9B58203-A921-36F8-A54B-3CAB0F089187}']
  { getters & setters } 

    function get_Mode: DNManagementConfigurationType;
    procedure set_Mode(value: DNManagementConfigurationType);
    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置属性，用于指定是否或对它的更改，将尽可能快地应用调用 commit 方法时的模式。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Management.Instrumentation.ManagementConfigurationType" />
    ///  ，该值指示是否使用 WMI 属性 <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.Apply" />
    ///  或 <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit" />
    ///  模式。
    ///</returns>
    property Mode: DNManagementConfigurationType read get_Mode write set_Mode;
    ///<summary>
    ///  获取或设置一个值，定义用 ManagementConfiguration 特性标记该属性将返回的输出的类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  将返回值，该值表示使用 ManagementConfiguration 特性标记该属性的输出的类型。
    ///</returns>
    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    ///<summary>
    ///  获取或设置管理属性的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，它是管理属性的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementConfigurationAttribute = class(TDNGenericImport<DNManagementConfigurationAttributeClass, DNManagementConfigurationAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementKeyAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{2B6CC536-36E9-5F3D-AF2F-D59D1A1E0075}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Management.ManagementKeyAttribute" />
    ///  类。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNManagementKeyAttribute;

  end;

  ///<summary>
  ///  ManagementKey 属性标识 WMI 类的键属性。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementKeyAttribute')]
  DNManagementKeyAttribute = interface(DNManagementMemberAttribute)
  ['{5CDB732B-452E-3422-A754-D76D70448B53}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置管理属性的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，它是管理属性的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementKeyAttribute = class(TDNGenericImport<DNManagementKeyAttributeClass, DNManagementKeyAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementNewInstanceAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{90F18510-C781-5FE3-81FD-C2A07D6ACC87}']
  end;

  ///<summary>
  ///  仅具有运行时功能但没有架构表示形式的管理属性的基类。
  ///  管理属性类 ManagementBindAttribute、ManagementCreateAttribute 和 ManagementEnumeratorAttribute 均从此类派生。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementNewInstanceAttribute')]
  DNManagementNewInstanceAttribute = interface(DNManagementMemberAttribute)
  ['{8076768E-AF9A-3247-9486-36583F155826}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置管理属性的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，它是管理属性的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementNewInstanceAttribute = class(TDNGenericImport<DNManagementNewInstanceAttributeClass, DNManagementNewInstanceAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementBindAttributeClass = interface(DNManagementNewInstanceAttributeClass)
  ['{5F162B06-5FAF-5E39-9A77-5E92663FF720}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.ManagementBindAttribute" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNManagementBindAttribute;

  end;

  ///<summary>
  ///  ManagementBind 属性指示使用了一种方法来返回与特定密钥值相关联的 WMI 类的实例。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementBindAttribute')]
  DNManagementBindAttribute = interface(DNManagementNewInstanceAttribute)
  ['{BB2DBF33-A3FD-3167-AE87-9767ADBD1641}']
  { getters & setters } 

    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，定义用 ManagementEnumerator 特性标记的方法将输出的输出的类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  值，该值指示的与标记的方法的输出类型 <see cref="ManagementBind" />
    ///  将输出属性。
    ///</returns>
    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementBindAttribute = class(TDNGenericImport<DNManagementBindAttributeClass, DNManagementBindAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementCreateAttributeClass = interface(DNManagementNewInstanceAttributeClass)
  ['{D48D267A-B894-5FFB-B851-D0CCD265994F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.ManagementCreateAttribute" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNManagementCreateAttribute;

  end;

  ///<summary>
  ///  ManagementCreateAttribute 用于指示方法将创建托管实体的新实例。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementCreateAttribute')]
  DNManagementCreateAttribute = interface(DNManagementNewInstanceAttribute)
  ['{73F8A513-C17A-3F82-AD39-F54E59BDC29F}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementCreateAttribute = class(TDNGenericImport<DNManagementCreateAttributeClass, DNManagementCreateAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementEnumeratorAttributeClass = interface(DNManagementNewInstanceAttributeClass)
  ['{A347E947-EBA6-560D-9708-DF12AD0EAB06}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.ManagementEnumeratorAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNManagementEnumeratorAttribute;

  end;

  ///<summary>
  ///  ManagementEnumerator 属性标记用于返回所有 WMI 类实例的方法。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementEnumeratorAttribute')]
  DNManagementEnumeratorAttribute = interface(DNManagementNewInstanceAttribute)
  ['{35E186C4-6DF8-3C6F-8616-CBFE37BA9FE7}']
  { getters & setters } 

    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，定义用 ManagementEnumerator 特性标记的方法将输出的输出的类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  值，该值指示的与标记的方法的输出类型 <see cref="ManagementEnumerator" />
    ///  将输出属性。
    ///</returns>
    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementEnumeratorAttribute = class(TDNGenericImport<DNManagementEnumeratorAttributeClass, DNManagementEnumeratorAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementProbeAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{38F5AE86-B09D-5FB4-A943-5A3F3154CAC8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.ManagementProbeAttribute" />
    ///  类的新实例。
    ///  这是默认构造函数的类。
    ///</summary>
    {class} function init: DNManagementProbeAttribute;

  end;

  ///<summary>
  ///  ManagementProbe 属性表示属性或字段代表只读 WMI 属性。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementProbeAttribute')]
  DNManagementProbeAttribute = interface(DNManagementMemberAttribute)
  ['{E4A957F4-8DE2-3250-A26E-ECE78E4102F3}']
  { getters & setters } 

    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，定义的类型将标有 ManagementProbe 属性的属性将输出的输出。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  值，该值指示将输出与 ManagementProbe 属性标记的属性的输出的类型。
    ///</returns>
    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    ///<summary>
    ///  获取或设置管理属性的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，它是管理属性的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementProbeAttribute = class(TDNGenericImport<DNManagementProbeAttributeClass, DNManagementProbeAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementRemoveAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{72ADFF59-862B-556B-9C7B-E62D256BE900}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.ManagementRemoveAttribute" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNManagementRemoveAttribute;

  end;

  ///<summary>
  ///  ManagementRemoveAttribute 用于指示方法将清理托管实体的实例。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementRemoveAttribute')]
  DNManagementRemoveAttribute = interface(DNManagementMemberAttribute)
  ['{844E4DBB-F830-3531-AE85-3BE9B5482F16}']
  { getters & setters } 

    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，定义用 ManagementRemove 特性标记的对象将输出的输出的类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  将输出值，该值指示该对象标记为删除属性的输出的类型。
    ///</returns>
    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    ///<summary>
    ///  获取或设置管理属性的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，它是管理属性的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementRemoveAttribute = class(TDNGenericImport<DNManagementRemoveAttributeClass, DNManagementRemoveAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementTaskAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{98BB1A4E-4B7E-540D-8AAD-CFB24D799521}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.ManagementTaskAttribute" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNManagementTaskAttribute;

  end;

  ///<summary>
  ///  ManagementTask 属性指示目标方法实施 WMI 方法。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementTaskAttribute')]
  DNManagementTaskAttribute = interface(DNManagementMemberAttribute)
  ['{0BBF46BB-50BA-362E-B2CA-07299AD6636B}']
  { getters & setters } 

    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，定义的类型将标有 ManagementTask 属性的方法将输出的输出。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  值，该值指示使用 ManagementTask 属性标记的方法将输出的输出的类型。
    ///</returns>
    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    ///<summary>
    ///  获取或设置管理属性的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，它是管理属性的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementTaskAttribute = class(TDNGenericImport<DNManagementTaskAttributeClass, DNManagementTaskAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementNameAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4D97168D-71C7-59BB-B7C4-1F897DB29557}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Management.ManagementNameAttribute" />
    ///  类，该类指定的值 <see cref="P:System.Management.ManagementNameAttribute.Name" />
    ///  类的属性。
    ///</summary>
    ///  <param name="name">
    ///  对象的用户友好名称。
    ///</param>
    {class} function init(name: string): DNManagementNameAttribute;

  end;

  ///<summary>
  ///  ManagementName 属性用于替代通过 WMI 类公开的名称。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementNameAttribute')]
  DNManagementNameAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CC5D0CBD-863A-3CFD-97BF-E647B0F8A364}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个对象的用户友好名称。
    ///  该对象可以为方法参数或用 ManagementProbe、 ManagementKey 或 ManagementConfiguration 属性标记的属性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值指示对象的用户友好名称。
    ///</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementNameAttribute = class(TDNGenericImport<DNManagementNameAttributeClass, DNManagementNameAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementReferenceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F87D6FC2-FAD2-505F-BF22-D1937C134A83}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.ManagementReferenceAttribute" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNManagementReferenceAttribute;

  end;

  ///<summary>
  ///  ManagementReferenceAttribute 将类成员、属性或方法参数标记为对另一个管理对象或类的引用。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.ManagementReferenceAttribute')]
  DNManagementReferenceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{3A6AF516-8364-331F-B48A-EBD46FC4FBFE}']
  { getters & setters } 

    function get_Type: string;
    procedure set_Type(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置所引用的类型的名称。
    ///</summary>
    ///<returns>
    ///  包含引用的类型名称的字符串。
    ///</returns>
    property &Type: string read get_Type write set_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementReferenceAttribute = class(TDNGenericImport<DNManagementReferenceAttributeClass, DNManagementReferenceAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNWmiConfigurationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{68A425D3-CBA3-5AD6-9FA4-6FA9A37794A0}']
  { constructors } 

    ///<summary>
    ///  初始化的新实例 <see cref="T:System.Management.WmiConfigurationAttribute" />
    ///  指定 WMI 提供程序将用于公开类的 WMI 命名空间的类。
    ///</summary>
    ///  <param name="scope">
    ///  提供程序将用于公开类的 WMI 命名空间。
    ///  例如，"root\MyProviderNamespace"。
    ///</param>
    {class} function init(scope: string): DNWmiConfigurationAttribute;

  end;

  ///<summary>
  ///  WmiConfiguration 属性指示程序集包含通过使用 WMI.NET 提供程序扩展模型实现 WMI 提供程序的代码。
  ///  该属性接受建立所实现的 WMI 提供程序的高级配置的参数。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.WmiConfigurationAttribute')]
  DNWmiConfigurationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{80563157-8A58-3AB9-9F89-83209A273D90}']
  { getters & setters } 

    function get_SecurityRestriction: string;
    procedure set_SecurityRestriction(value: string);
    function get_NamespaceSecurity: string;
    procedure set_NamespaceSecurity(value: string);
    function get_IdentifyLevel: Boolean;
    procedure set_IdentifyLevel(value: Boolean);
    function get_HostingModel: DNManagementHostingModel;
    procedure set_HostingModel(value: DNManagementHostingModel);
    function get_HostingGroup: string;
    procedure set_HostingGroup(value: string);
    function get_Scope: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 WMI 提供程序的安全描述符。
    ///  有关详细信息，请参阅主题中的"__Win32Provider"上的 MSDN online library 中的安全描述符属性信息 http://www.msdn.com。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值包含 WMI 提供程序的安全描述符。
    ///</returns>
    property SecurityRestriction: string read get_SecurityRestriction write set_SecurityRestriction;
    ///<summary>
    ///  获取或设置指定提供程序用于公开管理对象的命名空间的安全描述符的安全描述符定义语言 (SDDL) 字符串。
    ///</summary>
    ///<returns>
    ///  SDDL 字符串，表示提供程序用于公开管理对象的命名空间上的安全描述符。
    ///</returns>
    property NamespaceSecurity: string read get_NamespaceSecurity write set_NamespaceSecurity;
    ///<summary>
    ///  获取或设置一个值，指定的 WMI 提供程序是否可以模拟其调用方。
    ///  如果值为 false，则不能模拟该提供程序，并且如果值为 true，可以模拟该提供程序。
    ///</summary>
    ///<returns>
    ///  一个布尔值，该值指示提供程序是否可以或不能模拟其调用方。
    ///  如果值为 false，则不能模拟该提供程序，并且如果值为 true，可以模拟该提供程序。
    ///</returns>
    property IdentifyLevel: Boolean read get_IdentifyLevel write set_IdentifyLevel;
    ///<summary>
    ///  获取或设置 WMI 提供程序承载模型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Management.Instrumentation.ManagementHostingModel" />
    ///  值，该值指示 WMI 提供程序的承载模型。
    ///</returns>
    property HostingModel: DNManagementHostingModel read get_HostingModel write set_HostingModel;
    ///<summary>
    ///  获取或设置 WMI 提供程序所在的组。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  指示 WMI 提供程序所在的组的值。
    ///</returns>
    property HostingGroup: string read get_HostingGroup write set_HostingGroup;
    ///<summary>
    ///  获取或设置 WMI 提供程序将公开类的 WMI 命名空间。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值指示 WMI 提供程序将公开类的命名空间。
    ///</returns>
    property Scope: string read get_Scope;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWmiConfigurationAttribute = class(TDNGenericImport<DNWmiConfigurationAttributeClass, DNWmiConfigurationAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDynamicAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1A8F6EA3-A351-5A4C-94BE-2633A5B44677}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDynamicAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="transformFlags">
    ///  指定类型的构造的前缀的遍历中其 <see cref="T:System.Object" />
    ///  出现旨在被视为动态调度类型。
    ///</param>
    {class} function init(transformFlags: TArray<Boolean>): DNDynamicAttribute; overload;

  end;

  ///<summary>
  ///  指示使用 <see cref="T:System.Object" />
  ///  成员上应被视为动态调度类型。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.DynamicAttribute')]
  DNDynamicAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F36032CB-ED1F-3C03-9481-AD3F370F33B6}']
  { getters & setters } 

    function get_TransformFlags: DDN.mscorlib.DNIList<Boolean>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定类型的构造的前缀的遍历中其 <see cref="T:System.Object" />
    ///  出现旨在被视为动态调度类型。
    ///</summary>
    ///<returns>
    ///  列表 <see cref="T:System.Object" />
    ///  应被视为动态调度类型的匹配项。
    ///</returns>
    property TransformFlags: DDN.mscorlib.DNIList<Boolean> read get_TransformFlags;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDynamicAttribute = class(TDNGenericImport<DNDynamicAttributeClass, DNDynamicAttribute>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNHashSetClass<T> = interface(DNObjectClass)
  ['{8B38CB70-C951-554A-BE2D-CE908C0A65D5}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  类的一个新实例，该实例为空并使用集类型的默认相等比较器。
    ///</summary>
    {class} function init: DNHashSet<T>; overload;
    {class} function init(capacity: Int32): DNHashSet<T>; overload;
    {class} function init(comparer: DDN.mscorlib.DNIEqualityComparer<T>): DNHashSet<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>): DNHashSet<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>; comparer: DDN.mscorlib.DNIEqualityComparer<T>): DNHashSet<T>; overload;
    {class} function init(capacity: Int32; comparer: DDN.mscorlib.DNIEqualityComparer<T>): DNHashSet<T>; overload;

  { static methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Collections.IEqualityComparer" />
    ///  对象，该对象可用于对 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  对象进行相等测试。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEqualityComparer" />
    ///  对象，可用于对 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  对象进行深入的相等测试。
    ///</returns>
    {class} function CreateSetComparer: DDN.mscorlib.DNIEqualityComparer<DNHashSet<T>>;

  end;

  ///<summary>
  ///  表示值的集。
  ///  若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
  ///</summary>
  ///<typeparam name="T">
  ///  哈希集中的元素类型。
  ///</typeparam>
  [DNTypeName('System.Collections.Generic.HashSet`1')]
  DNHashSet<T> = interface(DDN.mscorlib.DNICollection<T>)
  ['{3160CAC9-56AB-3595-8B2F-EBB706278EEF}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDN.mscorlib.DNIEqualityComparer<T>;

  { methods } 

    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    ///<summary>
    ///  返回循环访问 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  对象的枚举器。
    ///</summary>
    ///<returns><see cref="T:System.Collections.Generic.HashSet`1" />
    ///  对象的 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" />
    ///  对象。
    ///</returns>
    function GetEnumerator: DNHashSet_Enumerator<T>;
    procedure UnionWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    ///<summary>
    ///  将 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  对象的容量设置为它包含的实际元素数，向上舍入为接近的特定于实现的值。
    ///</summary>
    procedure TrimExcess;
    ///<summary>
    ///  实现 <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  接口并返回序列化 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  对象所需的数据。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象，其中包含序列化 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  对象所需的信息。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  结构，其中包含与 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  对象关联的序列化流的源和目标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>
    ///  实现 <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  接口，并在完成反序列化之后引发反序列化事件。
    ///</summary>
    ///  <param name="sender">
    ///  反序列化事件源。
    ///</param>
    ///<exception cref="T:System.Runtime.Serialization.SerializationException"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  关联与当前对象 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  对象无效。
    ///</exception>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    procedure IntersectWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDN.mscorlib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function RemoveWhere(match: DDN.mscorlib.DNPredicate<T>): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集中包含的元素数。
    ///</summary>
    ///<returns>
    ///  集中包含的元素数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取用于确定集中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  用于确定集中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
    ///  对象。
    ///</returns>
    property Comparer: DDN.mscorlib.DNIEqualityComparer<T> read get_Comparer;
  end;

  TDNHashSet<T> = class(TDNGenericImport<DNHashSetClass<T>, DNHashSet<T>>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngPropertyCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNCngProperty>)
  ['{AF936CFE-89D2-5C69-ABD9-21FFB145A2D2}']
  { constructors } 

    ///<summary>
    ///  初始化新的 <see cref="T:System.Security.Cryptography.CngPropertyCollection" />
    ///  对象。
    ///</summary>
    {class} function init: DNCngPropertyCollection;

  end;

  ///<summary>
  ///  提供下一代加密技术 (CNG) 属性的强类型集合。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngPropertyCollection')]
  DNCngPropertyCollection = interface(DDN.mscorlib.DNCollection<DNCngProperty>)
  ['{9C7A6B6C-BCCD-32D0-B423-71F1B9DFDD61}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNCngProperty>; index: Int32);
    function &Contains(item: DNCngProperty): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCngProperty>;
    function IndexOf(item: DNCngProperty): Int32;
    procedure Insert(index: Int32; item: DNCngProperty);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNCngPropertyCollection = class(TDNGenericImport<DNCngPropertyCollectionClass, DNCngPropertyCollection>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNManifestSignatureInformationCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionClass<DNManifestSignatureInformation>)
  ['{208DB70B-AC9E-5B40-B212-B0CB1E5751E8}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" />
  ///  对象的只读集合。  </summary>
  [DNTypeName('System.Security.Cryptography.ManifestSignatureInformationCollection')]
  DNManifestSignatureInformationCollection = interface(DDN.mscorlib.DNReadOnlyCollection<DNManifestSignatureInformation>)
  ['{5A2850E9-7246-3A11-A348-8462B4BB27FB}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function &Contains(value: DNManifestSignatureInformation): Boolean;
    procedure CopyTo(&array: TArray<DNManifestSignatureInformation>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNManifestSignatureInformation>;
    function IndexOf(value: DNManifestSignatureInformation): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNManifestSignatureInformationCollection = class(TDNGenericImport<DNManifestSignatureInformationCollectionClass, DNManifestSignatureInformationCollection>) end;

  //-------------namespace: System.Diagnostics.Eventing----------------
  DNEventProviderClass = interface(DNObjectClass)
  ['{52A96496-DC6F-5787-82E7-132A601C54B6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Diagnostics.Eventing.EventProvider" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="providerGuid">
    ///  唯一标识提供程序的 Guid。
    ///</param>
    ///<exception cref="T:System.InsufficientMemoryException">
    ///  没有足够的内存来完成此操作。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  中的类 <see cref="N:System.Diagnostics.Eventing" />
    ///  仅在 Windows Vista 上的命名空间工作。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="providerGuid" />
    ///  参数不能为 null。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  ETW 子系统返回的错误。
    ///</exception>
    {class} function init(providerGuid: DDN.mscorlib.DNGuid): DNEventProvider;

  { static methods } 

    ///<summary>
    ///  获取与事件写入失败相关联的最后一个错误。
    ///</summary>
    ///<returns>
    ///  使用值以确定事件写入失败的原因。
    ///</returns>
    {class} function GetLastWriteEventError: DNEventProvider_WriteEventErrorCode;
    {class} procedure SetActivityId(out id: DDN.mscorlib.DNGuid);
    ///<summary>
    ///  提供程序创建一个唯一的活动标识符。
    ///</summary>
    ///<returns>
    ///  在调用时使用的唯一 Guid <see cref="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)" />
    ///  方法设置为提供程序的活动标识符。
    ///</returns>
    {class} function CreateActivityId: DDN.mscorlib.DNGuid;

  end;

  ///<summary>
  ///  此类用于写入事件。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.EventProvider')]
  DNEventProvider = interface(DDN.mscorlib.DNIDisposable)
  ['{9934463F-339F-3087-AD9D-198169B01C5B}']
  { methods } 

    ///<summary>
    ///  释放此 <see cref="T:System.Diagnostics.Eventing.EventProvider" />
    ///  对象使用的资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  从 ETW 子系统中移除的提供程序注册并释放所有非托管的资源。
    ///</summary>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  ETW 子系统返回的错误。
    ///</exception>
    procedure Close;
    ///<summary>
    ///  确定是否任何会话启用提供程序，而不考虑用于启用的提供程序的级别和关键字值。
    ///</summary>
    ///<returns>
    ///  是 <see langword="true" />
    ///  如果该提供程序是启用对任何会话; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsEnabled: Boolean; overload;
    ///<summary>
    ///  确定任何会话是否正在从提供程序请求指定的事件。
    ///</summary>
    ///  <param name="level">
    ///  在事件中包括的详细程度。
    ///</param>
    ///  <param name="keywords">
    ///  指定事件类别的位掩码。
    ///  此掩码应为事件清单中定义的关键字掩码相同。
    ///</param>
    ///<returns>
    ///  是 <see langword="true" />
    ///  如果任何会话正在请求指定的事件; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsEnabled(level: Byte; keywords: Int64): Boolean; overload;
    ///<summary>
    ///  写入事件，作为其数据包含一个字符串，如果级别和关键字值匹配的会话请求的事件。
    ///</summary>
    ///  <param name="eventMessage">
    ///  要作为事件数据写入字符串。
    ///</param>
    ///  <param name="eventLevel">
    ///  在事件中包括的详细程度。
    ///  如果提供程序使用某个清单来定义该事件，将此值设置为同一级别的清单中定义。
    ///</param>
    ///  <param name="eventKeywords">
    ///  指定事件类别的位掩码。
    ///  如果提供程序使用某个清单来定义该事件，则将该值设置为清单中定义的关键字掩码相同。
    ///</param>
    ///<returns>
    ///  是 <see langword="true" />
    ///  事件是否写入; 否则为 <see langword="false" />
    ///  。
    ///  如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" />
    ///  方法，以确定失败的原因。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  如果 <paramref name="eventMessage" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    function WriteMessageEvent(eventMessage: string; eventLevel: Byte; eventKeywords: Int64): Boolean; overload;
    ///<summary>
    ///  写入事件，其中包含一个字符串作为其数据。
    ///</summary>
    ///  <param name="eventMessage">
    ///  要作为事件数据写入字符串。
    ///</param>
    ///<returns>
    ///  是 <see langword="true" />
    ///  事件是否写入; 否则为 <see langword="false" />
    ///  。
    ///  如果为 false，则调用 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" />
    ///  方法，以确定失败的原因。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  如果 <paramref name="eventMessage" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    function WriteMessageEvent(eventMessage: string): Boolean; overload;
    function WriteEvent(out eventDescriptor: DNEventDescriptor; eventPayload: TArray<DDN.mscorlib.DNObject>): Boolean; overload;
    function WriteEvent(out eventDescriptor: DNEventDescriptor; data: string): Boolean; overload;
    function WriteTransferEvent(out eventDescriptor: DNEventDescriptor; relatedActivityId: DDN.mscorlib.DNGuid; eventPayload: TArray<DDN.mscorlib.DNObject>): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventProvider = class(TDNGenericImport<DNEventProviderClass, DNEventProvider>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventBookmarkClass = interface(DNObjectClass)
  ['{39002AEE-596A-5072-A5C9-C5223D4DF7F5}']
  end;

  ///<summary>
  ///  表示事件流中的占位符 （书签）。
  ///  可以使用占位符来标记一个位置，并返回到事件流中此位置。
  ///  此对象的实例可以获取从 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />
  ///  对象，在这种情况下它对应于该事件记录的位置。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventBookmark')]
  DNEventBookmark = interface(DDN.mscorlib.DNISerializable)
  ['{3898E01B-7819-3A8A-9BCA-03F4E8CEADEB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventBookmark = class(TDNGenericImport<DNEventBookmarkClass, DNEventBookmark>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventKeywordClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F266642-F04C-5C87-823F-B8FE8C2DBE7F}']
  end;

  ///<summary>
  ///  表示一个事件的关键字。
  ///  关键字定义事件提供程序中使用，用于进行分组 （基于事件的用法） 其他类似事件的事件。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventKeyword')]
  DNEventKeyword = interface(DDN.mscorlib.DNObject)
  ['{371D98BB-FAB8-36C5-A58E-C0EFA52BA550}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: Int64;
    function get_DisplayName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的非本地化名称的关键字。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含此关键字的非本地化名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取与关键字关联的数字值。
    ///</summary>
    ///<returns>
    ///  返回一个 <see langword="long" />
    ///  值。
    ///</returns>
    property Value: Int64 read get_Value;
    ///<summary>
    ///  获取该关键字的本地化的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含此关键字具有本地化的名称。
    ///</returns>
    property DisplayName: string read get_DisplayName;
  end;

  TDNEventKeyword = class(TDNGenericImport<DNEventKeywordClass, DNEventKeyword>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLevelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D31EE6C8-2755-501D-809E-5126F3B108AA}']
  end;

  ///<summary>
  ///  包含事件提供程序中定义的事件级别。
  ///  级别表示事件的严重性。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLevel')]
  DNEventLevel = interface(DDN.mscorlib.DNObject)
  ['{3F7F447B-B55B-305D-A1E4-EB9A9840F592}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: Int32;
    function get_DisplayName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取事件的事件级别的非本地化名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含的非本地化名称的事件级别。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取事件的事件级别的数值。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///</returns>
    property Value: Int32 read get_Value;
    ///<summary>
    ///  获取事件的事件级别的本地化的名称。
    ///  该名称描述此级别用于何种严重性级别的事件。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件的事件级别的本地化的名称。
    ///</returns>
    property DisplayName: string read get_DisplayName;
  end;

  TDNEventLevel = class(TDNGenericImport<DNEventLevelClass, DNEventLevel>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogConfigurationClass = interface(DNObjectClass)
  ['{A940016F-8202-52A2-B940-B3F8C3CFB0C0}']
  { constructors } 

    ///<summary>
    ///  初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" />
    ///  对象指定要为其获取信息和配置设置的本地事件日志。
    ///</summary>
    ///  <param name="logName">
    ///  要获取其信息和配置设置的本地事件日志名称。
    ///</param>
    {class} function init(logName: string): DNEventLogConfiguration; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" />
    ///  对象通过指定要为其获取信息和配置设置日志的名称。
    ///  日志可能是本地计算机或基于指定的事件日志会话的远程计算机上。
    ///</summary>
    ///  <param name="logName">
    ///  要为其获取信息和配置设置的事件日志名称。
    ///</param>
    ///  <param name="session">
    ///  用于确定指定的日志所属的事件日志服务事件日志会话。
    ///  会话可以连接到本地计算机或远程计算机上的事件日志服务。
    ///</param>
    {class} function init(logName: string; session: DNEventLogSession): DNEventLogConfiguration; overload;

  end;

  ///<summary>
  ///  包含事件日志的静态信息和配置设置。
  ///  通过创建日志的事件提供程序定义了多个配置设置。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogConfiguration')]
  DNEventLogConfiguration = interface(DDN.mscorlib.DNIDisposable)
  ['{757E9EE3-FA81-37D6-A4B9-92DA6996789F}']
  { getters & setters } 

    function get_LogName: string;
    function get_LogType: DNEventLogType;
    function get_LogIsolation: DNEventLogIsolation;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsClassicLog: Boolean;
    function get_SecurityDescriptor: string;
    procedure set_SecurityDescriptor(value: string);
    function get_LogFilePath: string;
    procedure set_LogFilePath(value: string);
    function get_MaximumSizeInBytes: Int64;
    procedure set_MaximumSizeInBytes(value: Int64);
    function get_LogMode: DNEventLogMode;
    procedure set_LogMode(value: DNEventLogMode);
    function get_OwningProviderName: string;
    function get_ProviderNames: DDN.mscorlib.DNIEnumerable<string>;
    function get_ProviderLevel: DDN.mscorlib.DNNullable<Int32>;
    procedure set_ProviderLevel(value: DDN.mscorlib.DNNullable<Int32>);
    function get_ProviderKeywords: DDN.mscorlib.DNNullable<Int64>;
    procedure set_ProviderKeywords(value: DDN.mscorlib.DNNullable<Int64>);
    function get_ProviderBufferSize: DDN.mscorlib.DNNullable<Int32>;
    function get_ProviderMinimumNumberOfBuffers: DDN.mscorlib.DNNullable<Int32>;
    function get_ProviderMaximumNumberOfBuffers: DDN.mscorlib.DNNullable<Int32>;
    function get_ProviderLatency: DDN.mscorlib.DNNullable<Int32>;
    function get_ProviderControlGuid: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;

  { methods } 

    ///<summary>
    ///  将配置设置保存
    ///</summary>
    procedure SaveChanges;
    ///<summary>
    ///  释放此对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取事件日志的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件日志的名称。
    ///</returns>
    property LogName: string read get_LogName;
    ///<summary>
    ///  获取 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" />
    ///  值，该值确定事件日志的类型。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" />
    ///  值。
    ///</returns>
    property LogType: DNEventLogType read get_LogType;
    ///<summary>
    ///  获取 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" />
    ///  值，该值指定事件日志是应用程序、 系统或自定义事件日志。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" />
    ///  值。
    ///</returns>
    property LogIsolation: DNEventLogIsolation read get_LogIsolation;
    ///<summary>
    ///  获取或设置一个布尔值，确定是否启用或禁用事件日志。
    ///  已启用的日志可以在其中可以记录事件，并禁用的日志是一个不能在其中记录事件。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果日志已启用，且返回 <see langword="false" />
    ///  如果日志处于禁用状态。
    ///</returns>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  获取用于指示事件日志是否传统事件日志的标志。
    ///  传统事件日志是指有.mc 文件而不是由事件提供程序清单 （.xml 文件） 中定义其事件。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果事件日志是经典的日志，并返回 <see langword="false" />
    ///  如果事件日志不是传统的日志。
    ///</returns>
    property IsClassicLog: Boolean read get_IsClassicLog;
    ///<summary>
    ///  获取或设置事件日志的安全描述符。
    ///  安全描述符定义的用户和组的用户可以读取和写入事件日志。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件日志的安全描述符。
    ///</returns>
    property SecurityDescriptor: string read get_SecurityDescriptor write set_SecurityDescriptor;
    ///<summary>
    ///  获取或设置到存储这些事件的日志文件的位置的文件目录路径。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件日志文件的路径。
    ///</returns>
    property LogFilePath: string read get_LogFilePath write set_LogFilePath;
    ///<summary>
    ///  获取或设置以字节为单位，事件日志文件是允许的最大大小。
    ///  当文件达到此最大大小时，则视为已满。
    ///</summary>
    ///<returns>
    ///  事件日志文件可以是将返回表示最大大小，以字节为单位，一个长值。
    ///</returns>
    property MaximumSizeInBytes: Int64 read get_MaximumSizeInBytes write set_MaximumSizeInBytes;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" />
    ///  值，该值确定在事件日志变满时如何处理的事件。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" />
    ///  值。
    ///</returns>
    property LogMode: DNEventLogMode read get_LogMode write set_LogMode;
    ///<summary>
    ///  获取创建此事件日志的事件提供程序的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含的事件提供程序创建此事件日志的名称。
    ///</returns>
    property OwningProviderName: string read get_OwningProviderName;
    ///<summary>
    ///  获取可以将事件发布到此事件日志的所有事件提供程序的名称的可枚举集合。
    ///</summary>
    ///<returns>
    ///  返回包含事件提供程序名称的字符串的可枚举集合。
    ///</returns>
    property ProviderNames: DDN.mscorlib.DNIEnumerable<string> read get_ProviderNames;
    ///<summary>
    ///  获取或设置最大事件级别 （它定义的事件严重性），允许将记录在事件日志中。
    ///  事件提供程序定义此值。
    ///</summary>
    ///<returns>
    ///  返回一个整数值，可以为 null，如果最大事件级别不在事件提供程序中定义。
    ///</returns>
    property ProviderLevel: DDN.mscorlib.DNNullable<Int32> read get_ProviderLevel write set_ProviderLevel;
    ///<summary>
    ///  获取或设置事件提供程序所使用的关键字掩码。
    ///</summary>
    ///<returns>
    ///  返回一个长值，如果事件提供程序未定义任何关键字可以为 null。
    ///</returns>
    property ProviderKeywords: DDN.mscorlib.DNNullable<Int64> read get_ProviderKeywords write set_ProviderKeywords;
    ///<summary>
    ///  获取事件提供程序用于将事件发布到日志的缓冲区的大小。
    ///</summary>
    ///<returns>
    ///  返回一个整数值，可以为 null。
    ///</returns>
    property ProviderBufferSize: DDN.mscorlib.DNNullable<Int32> read get_ProviderBufferSize;
    ///<summary>
    ///  获取事件提供程序用于将事件发布到事件日志的缓冲区的最小数目。
    ///</summary>
    ///<returns>
    ///  返回一个整数值，为事件提供程序用于将事件发布到事件日志的缓冲区的最小数目。
    ///  此值可以为 null。
    ///</returns>
    property ProviderMinimumNumberOfBuffers: DDN.mscorlib.DNNullable<Int32> read get_ProviderMinimumNumberOfBuffers;
    ///<summary>
    ///  获取事件提供程序用于将事件发布到事件日志的缓冲区的最大数目。
    ///</summary>
    ///<returns>
    ///  返回一个整数值，为事件提供程序用于将事件发布到事件日志的缓冲区的最大数目。
    ///  此值可以为 null。
    ///</returns>
    property ProviderMaximumNumberOfBuffers: DDN.mscorlib.DNNullable<Int32> read get_ProviderMaximumNumberOfBuffers;
    ///<summary>
    ///  获取事件发布到日志时，事件提供程序所使用的最大延迟时间。
    ///</summary>
    ///<returns>
    ///  返回一个整数值，如果任何滞后时间由事件提供程序不指定的可以为 null。
    ///</returns>
    property ProviderLatency: DDN.mscorlib.DNNullable<Int32> read get_ProviderLatency;
    ///<summary>
    ///  如果该日志是调试日志，获取事件日志的控制全局唯一标识符 (GUID)。
    ///  如果此日志不是调试日志，此值将为 null。
    ///</summary>
    ///<returns>
    ///  返回 GUID 值或 null。
    ///</returns>
    property ProviderControlGuid: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_ProviderControlGuid;
  end;

  TDNEventLogConfiguration = class(TDNGenericImport<DNEventLogConfigurationClass, DNEventLogConfiguration>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{51596AD5-E55C-50FE-B5E0-160F79AFA2EF}']
  end;

  ///<summary>
  ///  允许您访问活动的事件日志和事件日志文件的运行时属性。
  ///  这些属性包括在日志中的事件数、 写入或访问日志，一个值，确定是否在日志已满，以及上一次日志的大小。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogInformation')]
  DNEventLogInformation = interface(DDN.mscorlib.DNObject)
  ['{C90F1181-30C8-38E5-9EC4-E3788587A4ED}']
  { getters & setters } 

    function get_CreationTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    function get_LastAccessTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    function get_LastWriteTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    function get_FileSize: DDN.mscorlib.DNNullable<Int64>;
    function get_Attributes: DDN.mscorlib.DNNullable<Int32>;
    function get_RecordCount: DDN.mscorlib.DNNullable<Int64>;
    function get_OldestRecordNumber: DDN.mscorlib.DNNullable<Int64>;
    function get_IsLogFull: DDN.mscorlib.DNNullable<Boolean>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取关联的事件日志的日志文件已创建的时间。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.DateTime" />
    ///  对象。
    ///  此值可以为 null。
    ///</returns>
    property CreationTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_CreationTime;
    ///<summary>
    ///  获取上一次关联的事件日志的日志文件被访问过。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.DateTime" />
    ///  对象。
    ///  此值可以为 null。
    ///</returns>
    property LastAccessTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_LastAccessTime;
    ///<summary>
    ///  获取为关联的事件日志的日志文件写入数据的最后一个时间。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.DateTime" />
    ///  对象。
    ///  此值可以为 null。
    ///</returns>
    property LastWriteTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_LastWriteTime;
    ///<summary>
    ///  获取该文件，以字节为单位，关联的事件日志的大小。
    ///</summary>
    ///<returns>
    ///  返回一个长值。
    ///</returns>
    property FileSize: DDN.mscorlib.DNNullable<Int64> read get_FileSize;
    ///<summary>
    ///  获取与该日志关联的日志文件的文件属性。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property Attributes: DDN.mscorlib.DNNullable<Int32> read get_Attributes;
    ///<summary>
    ///  在事件日志中获取事件记录的数。
    ///</summary>
    ///<returns>
    ///  返回一个表示的事件日志中的事件记录数的长值。
    ///  此值可以为 null。
    ///</returns>
    property RecordCount: DDN.mscorlib.DNNullable<Int64> read get_RecordCount;
    ///<summary>
    ///  在事件日志中获取最早的事件记录的数。
    ///</summary>
    ///<returns>
    ///  返回一个表示在事件日志中最早事件记录数的长值。
    ///  此值可以为 null。
    ///</returns>
    property OldestRecordNumber: DDN.mscorlib.DNNullable<Int64> read get_OldestRecordNumber;
    ///<summary>
    ///  获取一个布尔值，确定日志文件是否已达到其最大大小 （日志已满时）。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果日志已满，并且返回 <see langword="false" />
    ///  如果日志未满。
    ///</returns>
    property IsLogFull: DDN.mscorlib.DNNullable<Boolean> read get_IsLogFull;
  end;

  TDNEventLogInformation = class(TDNGenericImport<DNEventLogInformationClass, DNEventLogInformation>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogLinkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{38E4F3DA-8620-5652-9011-F1338A7C0520}']
  end;

  ///<summary>
  ///  表示事件提供程序和提供程序将事件发布到事件日志之间的链接。
  ///  此对象不能实例化。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogLink')]
  DNEventLogLink = interface(DDN.mscorlib.DNObject)
  ['{FD4CD649-8864-3E93-A0E6-284E537B1625}']
  { getters & setters } 

    function get_LogName: string;
    function get_IsImported: Boolean;
    function get_DisplayName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此对象关联的事件日志的非本地化名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含与此对象关联的事件日志的非本地化名称。
    ///</returns>
    property LogName: string read get_LogName;
    ///<summary>
    ///  获取一个布尔值，确定是否在事件日志导入，而不是在事件提供程序中定义。
    ///  导入的事件日志是在不同的提供程序中定义的。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果事件日志事件提供程序，导入，并且返回 <see langword="false" />
    ///  事件提供程序不导入事件日志。
    ///</returns>
    property IsImported: Boolean read get_IsImported;
    ///<summary>
    ///  获取事件日志的本地化的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件日志的本地化的名称。
    ///</returns>
    property DisplayName: string read get_DisplayName;
  end;

  TDNEventLogLink = class(TDNGenericImport<DNEventLogLinkClass, DNEventLogLink>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogPropertySelectorClass = interface(DNObjectClass)
  ['{BCCF9178-6F87-5F3A-95B1-A1E763CD03F0}']
  { constructors } 

    {class} function init(propertyQueries: DDN.mscorlib.DNIEnumerable<string>): DNEventLogPropertySelector;

  end;

  ///<summary>
  ///  包含表示 XPath 查询中的 XML 表示形式的事件取决于元素的字符串数组 Event Schema。
  ///  此对象中的查询用于从事件中提取值。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogPropertySelector')]
  DNEventLogPropertySelector = interface(DDN.mscorlib.DNIDisposable)
  ['{2D01384E-A1DB-3E28-A8A3-8CBF27382A39}']
  { methods } 

    ///<summary>
    ///  释放此对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventLogPropertySelector = class(TDNGenericImport<DNEventLogPropertySelectorClass, DNEventLogPropertySelector>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogQueryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD8EFA8B-A362-56CB-831C-935FF649BEFD}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" />
    ///  类通过指定查询的目标。
    ///  目标可以是活动的事件日志或日志文件。
    ///</summary>
    ///  <param name="path">
    ///  要查询或查询的事件日志文件的路径的名称。
    ///</param>
    ///  <param name="pathType">
    ///  指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。
    ///</param>
    {class} function init(path: string; pathType: DNPathType): DNEventLogQuery; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" />
    ///  类通过指定查询和事件查询的目标。
    ///  目标可以是活动的事件日志或日志文件。
    ///</summary>
    ///  <param name="path">
    ///  要查询或查询的事件日志文件的路径的名称。
    ///</param>
    ///  <param name="pathType">
    ///  指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。
    ///</param>
    ///  <param name="query">
    ///  用于检索与查询条件匹配的事件的事件查询。
    ///</param>
    {class} function init(path: string; pathType: DNPathType; query: string): DNEventLogQuery; overload;

  end;

  ///<summary>
  ///  表示事件在事件日志以及用于定义如何执行该查询的设置和在哪台计算机执行查询的查询。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogQuery')]
  DNEventLogQuery = interface(DDN.mscorlib.DNObject)
  ['{4A584020-F65A-3E95-86A7-EA767D7651EF}']
  { getters & setters } 

    function get_Session: DNEventLogSession;
    procedure set_Session(value: DNEventLogSession);
    function get_TolerateQueryErrors: Boolean;
    procedure set_TolerateQueryErrors(value: Boolean);
    function get_ReverseDirection: Boolean;
    procedure set_ReverseDirection(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置访问本地计算机或远程计算机上的事件日志服务的会话。
    ///  可以设置此对象来访问远程事件日志创建 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />
    ///  对象或 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />
    ///  对象与此 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />
    ///  对象。
    ///</returns>
    property Session: DNEventLogSession read get_Session write set_Session;
    ///<summary>
    ///  获取或设置一个布尔值，用于确定此查询将继续以检索查询发生错误时的事件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  指示查询将继续检索事件，即使查询失败，则对某些日志和 <see langword="false" />
    ///  指示此查询将不继续检索事件，如果查询失败。
    ///</returns>
    property TolerateQueryErrors: Boolean read get_TolerateQueryErrors write set_TolerateQueryErrors;
    ///<summary>
    ///  获取或设置用于确定是否在事件日志中的最新事件从到最旧的事件日志中读取事件的布尔值。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果最早的事件，并返回到读取事件日志中的最新事件从 <see langword="false" />
    ///  如果向最新事件从最旧的事件日志中读取事件。
    ///</returns>
    property ReverseDirection: Boolean read get_ReverseDirection write set_ReverseDirection;
  end;

  TDNEventLogQuery = class(TDNGenericImport<DNEventLogQueryClass, DNEventLogQuery>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogReaderClass = interface(DNObjectClass)
  ['{E4F6B822-D8B5-5C77-9DD3-290B5041CB30}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />
    ///  类通过指定要从中检索事件的活动事件日志。
    ///</summary>
    ///  <param name="path">
    ///  要从中检索事件的事件日志的名称。
    ///</param>
    {class} function init(path: string): DNEventLogReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />
    ///  类通过指定要从中检索事件的事件日志或要从中检索事件的日志文件的路径的名称。
    ///</summary>
    ///  <param name="path">
    ///  事件日志，从其检索事件或要从中检索事件的事件日志文件的路径的名称。
    ///</param>
    ///  <param name="pathType">
    ///  指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。
    ///</param>
    {class} function init(path: string; pathType: DNPathType): DNEventLogReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />
    ///  通过指定一个事件查询类。
    ///</summary>
    ///  <param name="eventQuery">
    ///  用于检索事件的事件查询。
    ///</param>
    {class} function init(eventQuery: DNEventLogQuery): DNEventLogReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />
    ///  类通过指定一个事件查询和用作开始查询数据的位置的书签。
    ///</summary>
    ///  <param name="eventQuery">
    ///  用于检索事件的事件查询。
    ///</param>
    ///  <param name="bookmark">
    ///  使用事件日志或事件的流中的起始位置为书签 （占位符）。
    ///  仅在将由查询返回在书签事件后，记录的事件。
    ///</param>
    {class} function init(eventQuery: DNEventLogQuery; bookmark: DNEventBookmark): DNEventLogReader; overload;

  end;

  ///<summary>
  ///  使您能够根据事件查询事件日志中读取事件。
  ///  此对象读取的事件将作为返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogReader')]
  DNEventLogReader = interface(DDN.mscorlib.DNIDisposable)
  ['{E6AD8EF9-89FE-3054-A2FC-C268C003E5AF}']
  { getters & setters } 

    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_LogStatus: DDN.mscorlib.DNIList<DNEventLogStatus>;

  { methods } 

    ///<summary>
    ///  读取此对象中的事件查询返回的下一个事件。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />
    ///  对象。
    ///</returns>
    function ReadEvent: DNEventRecord; overload;
    ///<summary>
    ///  读取此对象中的事件查询返回的下一个事件。
    ///</summary>
    ///  <param name="timeout">
    ///  允许读取的操作以取消该操作之前运行的最大时间。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />
    ///  对象。
    ///</returns>
    function ReadEvent(timeout: DDN.mscorlib.DNTimeSpan): DNEventRecord; overload;
    ///<summary>
    ///  释放此对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  更改要读取的下一个事件将是从哪里来通过指定书签事件的事件流中的位置。
    ///  记录将检索书签事件之前的任何事件。
    ///</summary>
    ///  <param name="bookmark">
    ///  使用事件日志或事件的流中的起始位置为书签 （占位符）。
    ///  只有发生后将由查询返回在书签事件记录的事件。
    ///</param>
    procedure Seek(bookmark: DNEventBookmark); overload;
    ///<summary>
    ///  更改位置在事件流中读取的下一个事件将是从哪里来通过指定书签事件和事件与书签的偏移的量。
    ///  在书签加上偏移量将会检索前记录任何事件。
    ///</summary>
    ///  <param name="bookmark">
    ///  使用事件日志或事件的流中的起始位置为书签 （占位符）。
    ///  只有发生后将由查询返回在书签事件记录的事件。
    ///</param>
    ///  <param name="offset">
    ///  事件，以更改该书签的位置偏移的量。
    ///</param>
    procedure Seek(bookmark: DNEventBookmark; offset: Int64); overload;
    ///<summary>
    ///  更改事件流中读取的下一个事件将是从哪里来通过指定的起始位置和距离的起始位置的偏移量中的位置。
    ///  未记录之前将检索的起始位置加上偏移量的事件。
    ///</summary>
    ///  <param name="origin">
    ///  取值范围为 <see cref="T:System.IO.SeekOrigin" />
    ///  枚举定义中的什么位置事件就可以开始查询事件的流。
    ///</param>
    ///  <param name="offset">
    ///  要添加到原点的事件的偏移的量。
    ///</param>
    procedure Seek(origin: DDN.mscorlib.DNSeekOrigin; offset: Int64); overload;
    ///<summary>
    ///  取消当前的查询操作。
    ///</summary>
    procedure CancelReading;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置检索从每个读取操作上的事件的流的事件数。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///</returns>
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    ///<summary>
    ///  获取每个事件日志或与此对象中的事件查询相关联的日志文件的状态。
    ///</summary>
    ///<returns>
    ///  返回的列表 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogStatus" />
    ///  每个包含有关与此对象中的事件查询关联的事件日志的状态信息的对象。
    ///</returns>
    property LogStatus: DDN.mscorlib.DNIList<DNEventLogStatus> read get_LogStatus;
  end;

  TDNEventLogReader = class(TDNGenericImport<DNEventLogReaderClass, DNEventLogReader>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogSessionClass = interface(DNObjectClass)
  ['{8F82BBE7-5026-5E3D-9AF6-FBD5EDF8772E}']
  { static getter & setter } 

    {class} function get_GlobalSession: DNEventLogSession;

  { constructors } 

    ///<summary>
    ///  初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />
    ///  对象，请与本地事件日志服务建立连接。
    ///</summary>
    {class} function init: DNEventLogSession; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />
    ///  对象，并建立与指定的计算机上的事件日志服务的连接。
    ///  调用该方法的用户的凭据 （用户名和密码） 的凭据用于访问远程计算机。
    ///</summary>
    ///  <param name="server">
    ///  若要连接到事件日志服务的计算机的名称。
    ///</param>
    {class} function init(server: string): DNEventLogSession; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />
    ///  对象，并建立与指定的计算机上的事件日志服务的连接。
    ///  指定的凭据 （用户名和密码） 的凭据用于访问远程计算机。
    ///</summary>
    ///  <param name="server">
    ///  若要连接到事件日志服务的计算机的名称。
    ///</param>
    ///  <param name="domain">
    ///  指定用户的域。
    ///</param>
    ///  <param name="user">
    ///  用来连接到远程计算机的用户名称。
    ///</param>
    ///  <param name="password">
    ///  用于连接到远程计算机的密码。
    ///</param>
    ///  <param name="logOnType">
    ///  要用来连接到远程计算机的连接类型。
    ///</param>
    {class} function init(server: string; domain: string; user: string; password: DDN.mscorlib.DNSecureString; logOnType: DNSessionAuthentication): DNEventLogSession; overload;

  { static propertys } 

    ///<summary>
    ///  获取连接到本地计算机上的事件日志服务的静态预定义的会话对象。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />
    ///  是连接到本地计算机上的事件日志服务的预定义的会话对象的对象。
    ///</returns>
    {class} property GlobalSession: DNEventLogSession read get_GlobalSession;
  end;

  ///<summary>
  ///  用于访问本地计算机或远程计算机上的事件日志服务，以便您可以管理和在计算机上收集有关事件日志和事件提供程序的信息。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogSession')]
  DNEventLogSession = interface(DDN.mscorlib.DNIDisposable)
  ['{3C24798A-F126-32DD-8BE7-9F13FC43C203}']
  { methods } 

    ///<summary>
    ///  释放此对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  取消此会话对象连接到的事件日志服务当前处于活动状态的任何操作 （如读取事件日志或订阅到事件日志）。
    ///</summary>
    procedure CancelCurrentOperations;
    ///<summary>
    ///  获取一个对象，包含指定的事件日志的运行时信息。
    ///</summary>
    ///  <param name="logName">
    ///  事件日志以获取其信息或要获取其相关信息的事件日志文件的路径的名称。
    ///</param>
    ///  <param name="pathType">
    ///  指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInformation" />
    ///  对象，其中包含有关指定的日志信息。
    ///</returns>
    function GetLogInformation(logName: string; pathType: DNPathType): DNEventLogInformation;
    ///<summary>
    ///  将事件导出到外部的日志文件。
    ///  事件存储事件消息中。
    ///</summary>
    ///  <param name="path">
    ///  要从中导出事件，事件日志或要从中导出事件的事件日志文件的路径的名称。
    ///</param>
    ///  <param name="pathType">
    ///  指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。
    ///</param>
    ///  <param name="query">
    ///  用于选择要导出的事件的查询。
    ///  仅限于从查询返回的事件将被导出。
    ///</param>
    ///  <param name="targetFilePath">
    ///  在其中执行此方法后将存储导出的事件日志文件 （以扩展名为.evtx） 的路径。
    ///</param>
    procedure ExportLog(path: string; pathType: DNPathType; query: string; targetFilePath: string); overload;
    ///<summary>
    ///  将事件导出到外部的日志文件。
    ///  可以设置一个标志以指示该方法将继续导出事件，即使指定的查询失败时对某些日志。
    ///  事件存储事件消息中。
    ///</summary>
    ///  <param name="path">
    ///  要从中导出事件，事件日志或要从中导出事件的事件日志文件的路径的名称。
    ///</param>
    ///  <param name="pathType">
    ///  指定是否在 path 参数中使用的字符串指定的事件日志或事件日志文件的路径名称。
    ///</param>
    ///  <param name="query">
    ///  用于选择要导出的事件的查询。
    ///  仅限于从查询返回的事件将被导出。
    ///</param>
    ///  <param name="targetFilePath">
    ///  在其中执行此方法后将存储导出的事件日志文件 （以扩展名为.evtx） 的路径。
    ///</param>
    ///  <param name="tolerateQueryErrors"><see langword="true" />
    ///  指示该方法将继续导出事件，即使指定的查询失败时对某些日志和 <see langword="false" />
    ///  指示此方法将不继续导出时指定的查询失败的事件。
    ///</param>
    procedure ExportLog(path: string; pathType: DNPathType; query: string; targetFilePath: string; tolerateQueryErrors: Boolean); overload;
    ///<summary>
    ///  将事件及其消息导出到外部日志文件。
    ///</summary>
    ///  <param name="path">
    ///  要从其中导出事件的事件日志名称，或要从其中导出事件的事件日志文件的路径。
    ///</param>
    ///  <param name="pathType">
    ///  指定路径参数中使用的字符串是否指定事件日志的名称或事件日志文件的路径。
    ///</param>
    ///  <param name="query">
    ///  用于选择要导出的事件的查询。
    ///  将仅导出从查询返回的事件。
    ///</param>
    ///  <param name="targetFilePath">
    ///  执行此方法后存储导出事件的日志文件（以 .evtx 结尾）的路径。
    ///</param>
    procedure ExportLogAndMessages(path: string; pathType: DNPathType; query: string; targetFilePath: string); overload;
    ///<summary>
    ///  将事件及其消息导出到外部日志文件。
    ///  可以设置标记来指示即使对某些日志的指定查询失败此方法仍将继续导出事件。
    ///  将使用指定语言导出事件消息。
    ///</summary>
    ///  <param name="path">
    ///  要从其中导出事件的事件日志名称，或要从其中导出事件的事件日志文件的路径。
    ///</param>
    ///  <param name="pathType">
    ///  指定路径参数中使用的字符串是否指定事件日志的名称或事件日志文件的路径。
    ///</param>
    ///  <param name="query">
    ///  用于选择要导出的事件的查询。
    ///  将仅导出从查询返回的事件。
    ///</param>
    ///  <param name="targetFilePath">
    ///  执行此方法后存储导出事件的日志文件（以 .evtx 结尾）的路径。
    ///</param>
    ///  <param name="tolerateQueryErrors"><see langword="true" />
    ///  指示即使对某些日志的指定查询失败此方法仍将继续导出事件，<see langword="false" />
    ///  指示指定查询失败时此方法将不再继续导出事件。
    ///</param>
    ///  <param name="targetCultureInfo">
    ///  指定导出的事件消息将使用哪种语言的区域性。
    ///</param>
    procedure ExportLogAndMessages(path: string; pathType: DNPathType; query: string; targetFilePath: string; tolerateQueryErrors: Boolean; targetCultureInfo: DDN.mscorlib.DNCultureInfo); overload;
    ///<summary>
    ///  清除指定的事件日志中的事件。
    ///</summary>
    ///  <param name="logName">
    ///  要清除的所有事件的事件日志的名称。
    ///</param>
    procedure ClearLog(logName: string); overload;
    ///<summary>
    ///  从指定的事件日志中清除事件并将清除的事件保存到指定的文件。
    ///</summary>
    ///  <param name="logName">
    ///  要清除的所有事件的事件日志的名称。
    ///</param>
    ///  <param name="backupPath">
    ///  指向要在其中保存已清除的事件的文件的路径。
    ///  该文件应以.evtx 结尾。
    ///</param>
    procedure ClearLog(logName: string; backupPath: string); overload;
    ///<summary>
    ///  获取与事件日志服务注册的所有事件提供程序名称的可枚举集合。
    ///  事件提供程序的应用程序将事件发布到事件日志。
    ///</summary>
    ///<returns>
    ///  返回包含事件提供程序名称的字符串的可枚举集合。
    ///</returns>
    function GetProviderNames: DDN.mscorlib.DNIEnumerable<string>;
    ///<summary>
    ///  获取与事件日志服务注册的所有事件日志名称的可枚举集合。
    ///</summary>
    ///<returns>
    ///  返回包含事件日志名称的字符串的可枚举集合。
    ///</returns>
    function GetLogNames: DDN.mscorlib.DNIEnumerable<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventLogSession = class(TDNGenericImport<DNEventLogSessionClass, DNEventLogSession>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogStatusClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4DA3F1B-6354-5E9E-8086-85752C5A9D76}']
  end;

  ///<summary>
  ///  包含状态代码或特定的事件日志的错误代码。
  ///  此状态可以用于确定是否可供操作事件日志。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogStatus')]
  DNEventLogStatus = interface(DDN.mscorlib.DNObject)
  ['{88451979-703B-3DF0-90AD-5415C3585A5D}']
  { getters & setters } 

    function get_LogName: string;
    function get_StatusCode: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取为其获取状态代码的事件日志的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含为其获取状态代码的事件日志的名称。
    ///</returns>
    property LogName: string read get_LogName;
    ///<summary>
    ///  获取事件日志的状态代码或错误代码。
    ///  此状态或错误是由事件日志上读取或订阅操作的结果。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///</returns>
    property StatusCode: Int32 read get_StatusCode;
  end;

  TDNEventLogStatus = class(TDNGenericImport<DNEventLogStatusClass, DNEventLogStatus>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogWatcherClass = interface(DNObjectClass)
  ['{3A05D279-C451-5811-996D-15F67A823DF8}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />
    ///  类通过指定的名称或到事件日志的路径。
    ///</summary>
    ///  <param name="path">
    ///  路径或事件的事件日志监视器的名称。
    ///  如果在此事件日志中记录任何事件则 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />
    ///  引发事件。
    ///</param>
    {class} function init(path: string): DNEventLogWatcher; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />
    ///  通过指定一个事件查询类。
    ///</summary>
    ///  <param name="eventQuery">
    ///  指定事件订阅的查询。
    ///  当在查询中，以表示标准相匹配，将记录一个事件则 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />
    ///  引发事件。
    ///</param>
    {class} function init(eventQuery: DNEventLogQuery): DNEventLogWatcher; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />
    ///  类通过指定一个事件查询和用作开始查询数据的位置的书签。
    ///</summary>
    ///  <param name="eventQuery">
    ///  指定事件订阅的查询。
    ///  当在查询中，以表示标准相匹配，将记录一个事件则 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />
    ///  引发事件。
    ///</param>
    ///  <param name="bookmark">
    ///  使用事件日志或事件的流中的起始位置为书签 （占位符）。
    ///  只有发生后将由查询返回在书签事件记录的事件。
    ///</param>
    {class} function init(eventQuery: DNEventLogQuery; bookmark: DNEventBookmark): DNEventLogWatcher; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />
    ///  通过指定一个事件查询、 书签用作开始位置的查询中和一个布尔值，确定是否读取事件的事件日志中已存在的类。
    ///</summary>
    ///  <param name="eventQuery">
    ///  指定事件订阅的查询。
    ///  当在查询中，以表示标准相匹配，将记录一个事件则 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />
    ///  引发事件。
    ///</param>
    ///  <param name="bookmark">
    ///  使用事件日志或事件的流中的起始位置为书签 （占位符）。
    ///  只有发生后将由查询返回在书签事件记录的事件。
    ///</param>
    ///  <param name="readExistingEvents">
    ///  一个布尔值，确定是否读取事件日志中已存在的事件。
    ///  如果此值为 <see langword="true" />
    ///  , ，然后读取现有事件，如果此值为 <see langword="false" />
    ///  , ，则不会读取现有事件。
    ///</param>
    {class} function init(eventQuery: DNEventLogQuery; bookmark: DNEventBookmark; readExistingEvents: Boolean): DNEventLogWatcher; overload;

  end;

  ///<summary>
  ///  允许您对传入事件订阅。
  ///  每次所需的事件发布到事件日志， <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />
  ///  引发事件时，并将执行用于处理此事件的方法。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogWatcher')]
  DNEventLogWatcher = interface(DDN.mscorlib.DNIDisposable)
  ['{840AAF0A-18CB-3E84-BFF9-35027204183B}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { events } 

    procedure add_EventRecordWritten(value: DDN.mscorlib.DNEventHandler<DNEventRecordWrittenEventArgs>);
    procedure remove_EventRecordWritten(value: DDN.mscorlib.DNEventHandler<DNEventRecordWrittenEventArgs>);

  { methods } 

    ///<summary>
    ///  释放此对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  确定此对象是否开始将事件传递给事件委托。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  时此对象可以将事件传递到事件委托，并返回 <see langword="false" />
    ///  时此对象已停止传递。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNEventLogWatcher = class(TDNGenericImport<DNEventLogWatcherClass, DNEventLogWatcher>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventMetadataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{21C585C0-4952-5EF3-A535-C3C7BAD37275}']
  end;

  ///<summary>
  ///  在事件提供程序中定义的事件中包含的元数据 （属性和设置）。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventMetadata')]
  DNEventMetadata = interface(DDN.mscorlib.DNObject)
  ['{CCB3CDCA-6F23-3A21-93B3-DDF1168F0BEE}']
  { getters & setters } 

    function get_Id: Int64;
    function get_Version: Byte;
    function get_LogLink: DNEventLogLink;
    function get_Level: DNEventLevel;
    function get_Opcode: DNEventOpcode;
    function get_Task: DNEventTask;
    function get_Keywords: DDN.mscorlib.DNIEnumerable<DNEventKeyword>;
    function get_Template: string;
    function get_Description: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取事件提供程序中定义的事件的标识符。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="long" />
    ///  的事件标识符的值。
    ///</returns>
    property Id: Int64 read get_Id;
    ///<summary>
    ///  获取符合条件的事件标识符的事件的版本。
    ///</summary>
    ///<returns>
    ///  返回一个字节值。
    ///</returns>
    property Version: Byte read get_Version;
    ///<summary>
    ///  获取到收到此事件时提供者发布了此事件的事件日志的链接。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" />
    ///  对象。
    ///</returns>
    property LogLink: DNEventLogLink read get_LogLink;
    ///<summary>
    ///  获取与事件提供程序中定义的事件相关联的级别。
    ///  级别定义的事件严重性。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />
    ///  对象。
    ///</returns>
    property Level: DNEventLevel read get_Level;
    ///<summary>
    ///  获取与此事件定义的事件提供程序关联的操作码。
    ///  操作码定义一个数值，它标识的活动或在引发事件时，应用程序正在执行的活动内的点。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />
    ///  对象。
    ///</returns>
    property Opcode: DNEventOpcode read get_Opcode;
    ///<summary>
    ///  获取与事件关联的任务。
    ///  任务标识应用程序或发布的事件的组件的一部分。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />
    ///  对象。
    ///</returns>
    property Task: DNEventTask read get_Task;
    ///<summary>
    ///  获取与在事件提供程序中定义的事件相关联的关键字。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />
    ///  对象的可枚举集合。
    ///</returns>
    property Keywords: DDN.mscorlib.DNIEnumerable<DNEventKeyword> read get_Keywords;
    ///<summary>
    ///  获取事件的模板字符串。
    ///  模板用于描述由提供程序在发布的事件的数据。
    ///  模板 （可选） 指定提供事件的结构的 XML。
    ///  XML 允许事件发布程序提供的事件在呈现过程中要插入的值。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含该事件的模板。
    ///</returns>
    property Template: string read get_Template;
    ///<summary>
    ///  获取与当前线程区域设置用于描述语言事件相关联的描述模板。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含与事件关联的描述模板。
    ///</returns>
    property Description: string read get_Description;
  end;

  TDNEventMetadata = class(TDNGenericImport<DNEventMetadataClass, DNEventMetadata>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventOpcodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C75009D-6A5E-5A1E-A6AA-7348DA829EB9}']
  end;

  ///<summary>
  ///  包含事件提供程序中定义的事件操作码。
  ///  一个操作码，定义一个数值，它标识的活动或在引发事件时，应用程序正在执行的活动内的点。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventOpcode')]
  DNEventOpcode = interface(DDN.mscorlib.DNObject)
  ['{2CB6009E-42C8-3ABB-BE5F-5BC2878C566F}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: Int32;
    function get_DisplayName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取事件操作码的非本地化名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件操作码的非本地化名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取事件操作码与关联的数字值。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///</returns>
    property Value: Int32 read get_Value;
    ///<summary>
    ///  获取事件操作码的本地化的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件操作码的本地化的名称。
    ///</returns>
    property DisplayName: string read get_DisplayName;
  end;

  TDNEventOpcode = class(TDNGenericImport<DNEventOpcodeClass, DNEventOpcode>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5A2AAA9A-2722-5C54-B65F-1C3A60DFAE60}']
  end;

  ///<summary>
  ///  包含发布事件时指定事件提供程序的事件属性的值。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventProperty')]
  DNEventProperty = interface(DDN.mscorlib.DNObject)
  ['{4186473A-2A29-3A1C-B8D1-AC00A4785166}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取发布事件时指定事件提供程序的事件属性的值。
    ///</summary>
    ///<returns>
    ///  返回一个对象。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNEventProperty = class(TDNGenericImport<DNEventPropertyClass, DNEventProperty>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventRecordClass = interface(DNObjectClass)
  ['{217D5B4B-BCD4-52DB-BA8E-D334EB4D7851}']
  end;

  ///<summary>
  ///  定义从收到的事件的事件实例的属性 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />
  ///  对象。
  ///  事件属性提供有关事件的信息如的名称记录了该事件的计算机和时间的事件的创建。
  ///  此类是一个抽象类。
  ///<see cref="T:System.Diagnostics.Eventing.Reader.EventLogRecord" />
  ///  类实现此类。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventRecord')]
  DNEventRecord = interface(DDN.mscorlib.DNIDisposable)
  ['{E73161FA-BE10-3479-A361-836D561BCBD3}']
  { getters & setters } 

    function get_Id: Int32;
    function get_Version: DDN.mscorlib.DNNullable<Byte>;
    function get_Level: DDN.mscorlib.DNNullable<Byte>;
    function get_Task: DDN.mscorlib.DNNullable<Int32>;
    function get_Opcode: DDN.mscorlib.DNNullable<Int16>;
    function get_Keywords: DDN.mscorlib.DNNullable<Int64>;
    function get_RecordId: DDN.mscorlib.DNNullable<Int64>;
    function get_ProviderName: string;
    function get_ProviderId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_LogName: string;
    function get_ProcessId: DDN.mscorlib.DNNullable<Int32>;
    function get_ThreadId: DDN.mscorlib.DNNullable<Int32>;
    function get_MachineName: string;
    function get_UserId: DDN.mscorlib.DNSecurityIdentifier;
    function get_TimeCreated: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    function get_ActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_RelatedActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_Qualifiers: DDN.mscorlib.DNNullable<Int32>;
    function get_LevelDisplayName: string;
    function get_OpcodeDisplayName: string;
    function get_TaskDisplayName: string;
    function get_KeywordsDisplayNames: DDN.mscorlib.DNIEnumerable<string>;
    function get_Bookmark: DNEventBookmark;
    function get_Properties: DDN.mscorlib.DNIList<DNEventProperty>;

  { methods } 

    ///<summary>
    ///  释放此对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  获取当前区域设置中的事件消息。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含当前区域设置中的事件消息。
    ///</returns>
    function FormatDescription: string; overload;
    function FormatDescription(values: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNObject>): string; overload;
    ///<summary>
    ///  获取事件的 XML 表示形式。
    ///  所有的事件属性均在事件表示 XML。
    ///  XML 符合 event schema。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含该事件的 XML 表示。
    ///</returns>
    function ToXml: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此事件的标识符。
    ///  具有此标识符值的所有事件都表示相同类型的事件。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  获取事件的版本号。
    ///</summary>
    ///<returns>
    ///  返回一个字节值。
    ///  此值可以为 null。
    ///</returns>
    property Version: DDN.mscorlib.DNNullable<Byte> read get_Version;
    ///<summary>
    ///  获取事件的级别。
    ///  级别表示事件的严重性。
    ///  对于级别的名称，获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  返回一个字节值。
    ///  此值可以为 null。
    ///</returns>
    property Level: DDN.mscorlib.DNNullable<Byte> read get_Level;
    ///<summary>
    ///  获取应用程序或发布的事件的组件的一部分的任务标识符。
    ///  任务是具有保留的前 16 个值的 16 位值。
    ///  该类型允许之间 0x0000 和 0xffef 要使用的任何值。
    ///  若要获取任务名称，请获取的值 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property Task: DDN.mscorlib.DNNullable<Int32> read get_Task;
    ///<summary>
    ///  获取事件的操作码。
    ///  操作码定义一个数值，它标识的活动或在引发事件时，应用程序正在执行的活动内的点。
    ///  对于操作码的名称，获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  返回较短的值。
    ///  此值可以为 null。
    ///</returns>
    property Opcode: DDN.mscorlib.DNNullable<Int16> read get_Opcode;
    ///<summary>
    ///  获取事件的关键字掩码。
    ///  获取的值 <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames" />
    ///  属性来获取此掩码中使用的关键字的名称。
    ///</summary>
    ///<returns>
    ///  返回一个长值。
    ///  此值可以为 null。
    ///</returns>
    property Keywords: DDN.mscorlib.DNNullable<Int64> read get_Keywords;
    ///<summary>
    ///  在日志中获取事件的事件记录标识符。
    ///</summary>
    ///<returns>
    ///  返回一个长值。
    ///  此值可以为 null。
    ///</returns>
    property RecordId: DDN.mscorlib.DNNullable<Int64> read get_RecordId;
    ///<summary>
    ///  获取发布此事件的事件提供程序的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含发布此事件的事件提供程序的名称。
    ///</returns>
    property ProviderName: string read get_ProviderName;
    ///<summary>
    ///  获取发布此事件的事件提供程序的全局唯一标识符 (GUID)。
    ///</summary>
    ///<returns>
    ///  返回一个 GUID 值。
    ///  此值可以为 null。
    ///</returns>
    property ProviderId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_ProviderId;
    ///<summary>
    ///  获取事件日志的名称将记录此事件。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含包含此事件的事件日志的名称。
    ///</returns>
    property LogName: string read get_LogName;
    ///<summary>
    ///  获取记录此事件的事件提供程序的进程标识符。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property ProcessId: DDN.mscorlib.DNNullable<Int32> read get_ProcessId;
    ///<summary>
    ///  获取事件提供程序运行中的线程的线程标识符。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property ThreadId: DDN.mscorlib.DNNullable<Int32> read get_ThreadId;
    ///<summary>
    ///  获取在其记录此事件的计算机的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含在其记录此事件的计算机的名称。
    ///</returns>
    property MachineName: string read get_MachineName;
    ///<summary>
    ///  获取其上下文用于发布事件的用户的安全描述符。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.Security.Principal.SecurityIdentifier" />
    ///  值。
    ///</returns>
    property UserId: DDN.mscorlib.DNSecurityIdentifier read get_UserId;
    ///<summary>
    ///  在获取的时间， <see cref="T:System.DateTime" />
    ///  设置格式，请创建了事件。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.DateTime" />
    ///  值。
    ///  值可以为 null。
    ///</returns>
    property TimeCreated: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_TimeCreated;
    ///<summary>
    ///  获取活动涉及到该事件的进程中的全局唯一标识符 (GUID)。
    ///  这允许使用者组相关的活动。
    ///</summary>
    ///<returns>
    ///  返回一个 GUID 值。
    ///</returns>
    property ActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_ActivityId;
    ///<summary>
    ///  在所涉及事件的进程中的相关活动获取全局唯一标识符 (GUID)。
    ///</summary>
    ///<returns>
    ///  返回一个 GUID 值。
    ///  此值可以为 null。
    ///</returns>
    property RelatedActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_RelatedActivityId;
    ///<summary>
    ///  获取用于事件标识的限定符数。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property Qualifiers: DDN.mscorlib.DNNullable<Int32> read get_Qualifiers;
    ///<summary>
    ///  获取此事件的级别的显示名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含此事件的级别的显示名称。
    ///</returns>
    property LevelDisplayName: string read get_LevelDisplayName;
    ///<summary>
    ///  获取此事件的操作码的显示名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含此事件的操作码的显示名称。
    ///</returns>
    property OpcodeDisplayName: string read get_OpcodeDisplayName;
    ///<summary>
    ///  获取事件的任务的显示名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含该事件的任务的显示名称。
    ///</returns>
    property TaskDisplayName: string read get_TaskDisplayName;
    ///<summary>
    ///  获取此事件的关键字掩码中使用的关键字的显示名称。
    ///</summary>
    ///<returns>
    ///  返回包含关键字掩码中使用此事件的关键字的显示名称的字符串的可枚举集合。
    ///</returns>
    property KeywordsDisplayNames: DDN.mscorlib.DNIEnumerable<string> read get_KeywordsDisplayNames;
    ///<summary>
    ///  获取此事件相对应的占位符 （书签）。
    ///  这可以用作事件流中的占位符。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />
    ///  对象。
    ///</returns>
    property Bookmark: DNEventBookmark read get_Bookmark;
    ///<summary>
    ///  获取事件的用户提供的属性。
    ///</summary>
    ///<returns>
    ///  返回的列表 <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" />
    ///  对象。
    ///</returns>
    property Properties: DDN.mscorlib.DNIList<DNEventProperty> read get_Properties;
  end;

  TDNEventRecord = class(TDNGenericImport<DNEventRecordClass, DNEventRecord>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogRecordClass = interface(DNEventRecordClass)
  ['{7262A67E-8E87-5ABB-BCF0-3146A49890DF}']
  end;

  ///<summary>
  ///  包含从收到的事件的事件实例的属性 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />
  ///  对象。
  ///  事件属性提供有关如名称事件记录了该事件的计算机以及创建了事件的时间的信息。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogRecord')]
  DNEventLogRecord = interface(DNEventRecord)
  ['{8BDD331B-2C91-34BF-9741-79F8947F4BFB}']
  { getters & setters } 

    function get_Id: Int32;
    function get_Version: DDN.mscorlib.DNNullable<Byte>;
    function get_Qualifiers: DDN.mscorlib.DNNullable<Int32>;
    function get_Level: DDN.mscorlib.DNNullable<Byte>;
    function get_Task: DDN.mscorlib.DNNullable<Int32>;
    function get_Opcode: DDN.mscorlib.DNNullable<Int16>;
    function get_Keywords: DDN.mscorlib.DNNullable<Int64>;
    function get_RecordId: DDN.mscorlib.DNNullable<Int64>;
    function get_ProviderName: string;
    function get_ProviderId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_LogName: string;
    function get_ProcessId: DDN.mscorlib.DNNullable<Int32>;
    function get_ThreadId: DDN.mscorlib.DNNullable<Int32>;
    function get_MachineName: string;
    function get_UserId: DDN.mscorlib.DNSecurityIdentifier;
    function get_TimeCreated: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    function get_ActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_RelatedActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_ContainerLog: string;
    function get_MatchedQueryIds: DDN.mscorlib.DNIEnumerable<Int32>;
    function get_Bookmark: DNEventBookmark;
    function get_LevelDisplayName: string;
    function get_OpcodeDisplayName: string;
    function get_TaskDisplayName: string;
    function get_KeywordsDisplayNames: DDN.mscorlib.DNIEnumerable<string>;
    function get_Properties: DDN.mscorlib.DNIList<DNEventProperty>;

  { methods } 

    ///<summary>
    ///  获取当前区域设置中的事件消息。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含当前区域设置中的事件消息。
    ///</returns>
    function FormatDescription: string; overload;
    ///<summary>
    ///  如果事件有 XML 表示形式，获取的用户提供的事件属性中，或基于 XPath 的数据的结果值的枚举。
    ///</summary>
    ///  <param name="propertySelector">
    ///  选择要返回的属性值。
    ///</param>
    ///<returns>
    ///  返回的对象的列表。
    ///</returns>
    function GetPropertyValues(propertySelector: DNEventLogPropertySelector): DDN.mscorlib.DNIList<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  获取事件的 XML 表示形式。
    ///  所有事件属性均以该事件的 XML 表示。
    ///  XML 符合 event schema。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含该事件的 XML 表示。
    ///</returns>
    function ToXml: string;
    function FormatDescription(values: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNObject>): string; overload;
    ///<summary>
    ///  释放此对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此事件的标识符。
    ///  具有此标识符值的所有事件都表示相同类型的事件。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  获取事件的版本号。
    ///</summary>
    ///<returns>
    ///  返回一个字节值。
    ///  此值可以为 null。
    ///</returns>
    property Version: DDN.mscorlib.DNNullable<Byte> read get_Version;
    ///<summary>
    ///  获取用于事件标识的限定符数。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property Qualifiers: DDN.mscorlib.DNNullable<Int32> read get_Qualifiers;
    ///<summary>
    ///  获取事件的级别。
    ///  级别表示事件的严重性。
    ///  对于级别的名称，获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  返回一个字节值。
    ///  此值可以为 null。
    ///</returns>
    property Level: DDN.mscorlib.DNNullable<Byte> read get_Level;
    ///<summary>
    ///  获取应用程序或发布的事件的组件的一部分的任务标识符。
    ///  任务是具有保留的前 16 个值的 16 位值。
    ///  该类型允许之间 0x0000 和 0xffef 要使用的任何值。
    ///  对于任务的名称，获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property Task: DDN.mscorlib.DNNullable<Int32> read get_Task;
    ///<summary>
    ///  获取事件的操作码。
    ///  操作码定义一个数值，它标识的活动或在引发事件时，应用程序正在执行的活动内的点。
    ///  对于操作码的名称，获取 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  返回较短的值。
    ///  此值可以为 null。
    ///</returns>
    property Opcode: DDN.mscorlib.DNNullable<Int16> read get_Opcode;
    ///<summary>
    ///  获取事件的关键字掩码。
    ///  获取的值 <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames" />
    ///  属性来获取此掩码中使用的关键字的名称。
    ///</summary>
    ///<returns>
    ///  返回一个长值。
    ///  此值可以为 null。
    ///</returns>
    property Keywords: DDN.mscorlib.DNNullable<Int64> read get_Keywords;
    ///<summary>
    ///  在日志中获取事件的事件记录标识符。
    ///</summary>
    ///<returns>
    ///  返回一个长值。
    ///  此值可以为 null。
    ///</returns>
    property RecordId: DDN.mscorlib.DNNullable<Int64> read get_RecordId;
    ///<summary>
    ///  获取发布此事件的事件提供程序的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含发布此事件的事件提供程序的名称。
    ///</returns>
    property ProviderName: string read get_ProviderName;
    ///<summary>
    ///  获取发布此事件的事件提供程序的全局唯一标识符 (GUID)。
    ///</summary>
    ///<returns>
    ///  返回一个 GUID 值。
    ///  此值可以为 null。
    ///</returns>
    property ProviderId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_ProviderId;
    ///<summary>
    ///  获取事件日志的名称将记录此事件。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含包含此事件的事件日志的名称。
    ///</returns>
    property LogName: string read get_LogName;
    ///<summary>
    ///  获取记录此事件的事件提供程序的进程标识符。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property ProcessId: DDN.mscorlib.DNNullable<Int32> read get_ProcessId;
    ///<summary>
    ///  获取事件提供程序运行中的线程的线程标识符。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///  此值可以为 null。
    ///</returns>
    property ThreadId: DDN.mscorlib.DNNullable<Int32> read get_ThreadId;
    ///<summary>
    ///  获取在其记录此事件的计算机的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含在其记录此事件的计算机的名称。
    ///</returns>
    property MachineName: string read get_MachineName;
    ///<summary>
    ///  获取其上下文用于发布事件的用户的安全描述符。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.Security.Principal.SecurityIdentifier" />
    ///  值。
    ///</returns>
    property UserId: DDN.mscorlib.DNSecurityIdentifier read get_UserId;
    ///<summary>
    ///  在获取的时间， <see cref="T:System.DateTime" />
    ///  设置格式，请创建了事件。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.DateTime" />
    ///  值。
    ///  值可以为 null。
    ///</returns>
    property TimeCreated: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_TimeCreated;
    ///<summary>
    ///  获取活动涉及到该事件的进程中的全局唯一标识符 (GUID)。
    ///  这允许使用者组相关的活动。
    ///</summary>
    ///<returns>
    ///  返回一个 GUID 值。
    ///</returns>
    property ActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_ActivityId;
    ///<summary>
    ///  在所涉及事件的进程中的相关活动获取全局唯一标识符 (GUID)。
    ///</summary>
    ///<returns>
    ///  返回一个 GUID 值。
    ///  此值可以为 null。
    ///</returns>
    property RelatedActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_RelatedActivityId;
    ///<summary>
    ///  获取事件日志或在其中存储事件的事件日志文件的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件日志或在其中存储事件的事件日志文件的名称。
    ///</returns>
    property ContainerLog: string read get_ContainerLog;
    ///<summary>
    ///  获取此事件与相匹配的查询标识符的列表。
    ///  此事件与查询相匹配，如果该查询将返回此事件。
    ///</summary>
    ///<returns>
    ///  返回整数值的可枚举集合。
    ///</returns>
    property MatchedQueryIds: DDN.mscorlib.DNIEnumerable<Int32> read get_MatchedQueryIds;
    ///<summary>
    ///  获取此事件相对应的占位符 （书签）。
    ///  这可以用作事件流中的占位符。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />
    ///  对象。
    ///</returns>
    property Bookmark: DNEventBookmark read get_Bookmark;
    ///<summary>
    ///  获取此事件的级别的显示名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含此事件的级别的显示名称。
    ///</returns>
    property LevelDisplayName: string read get_LevelDisplayName;
    ///<summary>
    ///  获取此事件的操作码的显示名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含此事件的操作码的显示名称。
    ///</returns>
    property OpcodeDisplayName: string read get_OpcodeDisplayName;
    ///<summary>
    ///  获取事件的任务的显示名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含该事件的任务的显示名称。
    ///</returns>
    property TaskDisplayName: string read get_TaskDisplayName;
    ///<summary>
    ///  获取此事件的关键字掩码中使用的关键字的显示名称。
    ///</summary>
    ///<returns>
    ///  返回一个可枚举的字符串集合，其中包含此事件关键字掩码中使用的关键字的显示名称。
    ///</returns>
    property KeywordsDisplayNames: DDN.mscorlib.DNIEnumerable<string> read get_KeywordsDisplayNames;
    ///<summary>
    ///  获取事件的用户提供的属性。
    ///</summary>
    ///<returns>
    ///  返回的列表 <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" />
    ///  对象。
    ///</returns>
    property Properties: DDN.mscorlib.DNIList<DNEventProperty> read get_Properties;
  end;

  TDNEventLogRecord = class(TDNGenericImport<DNEventLogRecordClass, DNEventLogRecord>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventTaskClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F21A0E3F-BE10-57E3-B092-5C4DA4A1DDE7}']
  end;

  ///<summary>
  ///  包含事件提供程序中定义的事件任务。
  ///  该任务标识应用程序或发布的事件的组件的一部分。
  ///  任务是具有保留的前 16 个值的 16 位值。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventTask')]
  DNEventTask = interface(DDN.mscorlib.DNObject)
  ['{5A496A36-9B9E-36DC-8D3E-94EA24CB7B32}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: Int32;
    function get_DisplayName: string;
    function get_EventGuid: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取事件任务的非本地化名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含的非本地化名称的事件任务。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取与任务关联的数字值。
    ///</summary>
    ///<returns>
    ///  返回一个整数值。
    ///</returns>
    property Value: Int32 read get_Value;
    ///<summary>
    ///  获取事件任务的本地化的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件任务的本地化的名称。
    ///</returns>
    property DisplayName: string read get_DisplayName;
    ///<summary>
    ///  获取与任务关联的事件全局唯一标识符 (GUID)。
    ///</summary>
    ///<returns>
    ///  返回一个 GUID 值。
    ///</returns>
    property EventGuid: DDN.mscorlib.DNGuid read get_EventGuid;
  end;

  TDNEventTask = class(TDNGenericImport<DNEventTaskClass, DNEventTask>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNProviderMetadataClass = interface(DNObjectClass)
  ['{72DC5594-2E19-5649-BC22-80DB812B851C}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" />
    ///  类通过指定要检索其信息的提供程序的名称。
    ///</summary>
    ///  <param name="providerName">
    ///  你想要检索其信息的事件提供程序的名称。
    ///</param>
    {class} function init(providerName: string): DNProviderMetadata; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" />
    ///  类通过指定要检索有关的信息、 提供程序注册的事件日志服务以及你想要返回中的信息的语言提供程序的名称。
    ///</summary>
    ///  <param name="providerName">
    ///  你想要检索其信息的事件提供程序的名称。
    ///</param>
    ///  <param name="session"><see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />
    ///  对象，指定是否要从本地计算机上的提供程序或远程计算机上的提供程序获取提供程序信息。
    ///</param>
    ///  <param name="targetCultureInfo">
    ///  指定应在返回的信息的语言的区域性。
    ///</param>
    {class} function init(providerName: string; session: DNEventLogSession; targetCultureInfo: DDN.mscorlib.DNCultureInfo): DNProviderMetadata; overload;

  end;

  ///<summary>
  ///  包含有关事件提供程序，如名称和 id 的提供程序和提供程序中定义的事件集合的静态信息。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.ProviderMetadata')]
  DNProviderMetadata = interface(DDN.mscorlib.DNIDisposable)
  ['{16D04670-7CD4-3BDB-974A-5138AB990FDB}']
  { getters & setters } 

    function get_Name: string;
    function get_Id: DDN.mscorlib.DNGuid;
    function get_MessageFilePath: string;
    function get_ResourceFilePath: string;
    function get_ParameterFilePath: string;
    function get_HelpLink: DDN.System.DNUri;
    function get_DisplayName: string;
    function get_LogLinks: DDN.mscorlib.DNIList<DNEventLogLink>;
    function get_Levels: DDN.mscorlib.DNIList<DNEventLevel>;
    function get_Opcodes: DDN.mscorlib.DNIList<DNEventOpcode>;
    function get_Keywords: DDN.mscorlib.DNIList<DNEventKeyword>;
    function get_Tasks: DDN.mscorlib.DNIList<DNEventTask>;
    function get_Events: DDN.mscorlib.DNIEnumerable<DNEventMetadata>;

  { methods } 

    ///<summary>
    ///  释放此对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取事件提供程序的唯一名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件提供程序的唯一名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取事件提供程序的全局唯一标识符 (GUID)。
    ///</summary>
    ///<returns>
    ///  返回事件提供程序的 GUID 值。
    ///</returns>
    property Id: DDN.mscorlib.DNGuid read get_Id;
    ///<summary>
    ///  获取包含具有与提供程序元数据相关联的字符串的消息表资源的文件的路径。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含提供程序路径消息文件。
    ///</returns>
    property MessageFilePath: string read get_MessageFilePath;
    ///<summary>
    ///  获取包含与提供程序关联的元数据的文件的路径。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含指向包含与提供程序关联的元数据的文件的路径。
    ///</returns>
    property ResourceFilePath: string read get_ResourceFilePath;
    ///<summary>
    ///  获取包含具有用于事件描述中的参数替换的字符串的消息表资源的文件的路径。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含文件，其中包含具有用于事件描述中的参数替换的字符串的消息表资源的路径。
    ///</returns>
    property ParameterFilePath: string read get_ParameterFilePath;
    ///<summary>
    ///  获取基窗体的帮助请求用于此事件提供程序中的事件的 URL。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.Uri" />
    ///  值。
    ///</returns>
    property HelpLink: DDN.System.DNUri read get_HelpLink;
    ///<summary>
    ///  获取事件提供程序的本地化的名称。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含事件提供程序的本地化的名称。
    ///</returns>
    property DisplayName: string read get_DisplayName;
    ///<summary>
    ///  获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" />
    ///  对象，其中每个表示链接到使用事件提供程序事件日志。
    ///</summary>
    ///<returns>
    ///  返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" />
    ///  对象。
    ///</returns>
    property LogLinks: DDN.mscorlib.DNIList<DNEventLogLink> read get_LogLinks;
    ///<summary>
    ///  获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />
    ///  在事件提供程序对象，其中每个代表是某个级别中定义。
    ///</summary>
    ///<returns>
    ///  返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />
    ///  对象。
    ///</returns>
    property Levels: DDN.mscorlib.DNIList<DNEventLevel> read get_Levels;
    ///<summary>
    ///  获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />
    ///  对象，其中每个表示一个操作码，即在事件提供程序中定义。
    ///</summary>
    ///<returns>
    ///  返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />
    ///  对象。
    ///</returns>
    property Opcodes: DDN.mscorlib.DNIList<DNEventOpcode> read get_Opcodes;
    ///<summary>
    ///  获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />
    ///  对象，其中每个表示一个事件关键字，则在事件提供程序中定义。
    ///</summary>
    ///<returns>
    ///  返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />
    ///  对象。
    ///</returns>
    property Keywords: DDN.mscorlib.DNIList<DNEventKeyword> read get_Keywords;
    ///<summary>
    ///  获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />
    ///  对象，其中每个表示的任务是在事件提供程序中定义。
    ///</summary>
    ///<returns>
    ///  返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />
    ///  对象。
    ///</returns>
    property Tasks: DDN.mscorlib.DNIList<DNEventTask> read get_Tasks;
    ///<summary>
    ///  获取的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" />
    ///  对象，其中每个表示提供程序中定义的事件。
    ///</summary>
    ///<returns>
    ///  返回的可枚举集合 <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" />
    ///  对象。
    ///</returns>
    property Events: DDN.mscorlib.DNIEnumerable<DNEventMetadata> read get_Events;
  end;

  TDNProviderMetadata = class(TDNGenericImport<DNProviderMetadataClass, DNProviderMetadata>) end;

  //-------------namespace: System.Diagnostics.PerformanceData----------------
  DNCounterDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C95220B-A686-51E9-9827-94199ECC98D3}']
  end;

  ///<summary>
  ///  包含一个计数器的原始数据。
  ///</summary>
  [DNTypeName('System.Diagnostics.PerformanceData.CounterData')]
  DNCounterData = interface(DDN.mscorlib.DNObject)
  ['{F74B9394-8089-3D3B-AB4A-AF794331F21D}']
  { getters & setters } 

    function get_Value: Int64;
    procedure set_Value(value: Int64);
    function get_RawValue: Int64;
    procedure set_RawValue(value: Int64);

  { methods } 

    ///<summary>
    ///  该计数器值将加 1。
    ///</summary>
    procedure Increment;
    ///<summary>
    ///  将计数器值减 1。
    ///</summary>
    procedure Decrement;
    ///<summary>
    ///  指定的量递增该计数器值。
    ///</summary>
    ///  <param name="value">
    ///  若要为计数器值增加的量。
    ///  增量值可以是正数或负数。
    ///</param>
    procedure IncrementBy(value: Int64);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  设置或获取计数器数据。
    ///</summary>
    ///<returns>
    ///  计数器数据。
    ///</returns>
    property Value: Int64 read get_Value write set_Value;
    ///<summary>
    ///  设置或获取原始计数器数据。
    ///</summary>
    ///<returns>
    ///  原始计数器数据。
    ///</returns>
    property RawValue: Int64 read get_RawValue write set_RawValue;
  end;

  TDNCounterData = class(TDNGenericImport<DNCounterDataClass, DNCounterData>) end;

  //-------------namespace: System.Diagnostics.PerformanceData----------------
  DNCounterSetClass = interface(DNObjectClass)
  ['{273F1485-BB67-5480-AF98-7A009FE19698}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Diagnostics.PerformanceData.CounterSet" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="providerGuid">
    ///  唯一标识的计数器数据提供程序的 Guid。
    ///  使用清单中指定的 Guid。
    ///</param>
    ///  <param name="counterSetGuid">
    ///  唯一标识的计数器集的提供程序的 Guid。
    ///  使用清单中指定的 Guid。
    ///</param>
    ///  <param name="instanceType">
    ///  例如，标识计数器集的类型是否计数器集是单个或多个实例的计数器集。
    ///</param>
    ///<exception cref="T:System.InsufficientMemoryException">
    ///  没有足够的内存空间来完成此操作。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  不支持在 Windows Vista 之前。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  其中一个参数为 NULL 或无效。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  基础 Win32 函数调用失败。
    ///</exception>
    {class} function init(providerGuid: DDN.mscorlib.DNGuid; counterSetGuid: DDN.mscorlib.DNGuid; instanceType: DNCounterSetInstanceType): DNCounterSet;

  end;

  ///<summary>
  ///  定义一组逻辑的计数器。
  ///</summary>
  [DNTypeName('System.Diagnostics.PerformanceData.CounterSet')]
  DNCounterSet = interface(DDN.mscorlib.DNIDisposable)
  ['{73B42C75-1907-366C-9259-245A4BD8A56B}']
  { methods } 

    ///<summary>
    ///  释放此对象使用的所有非托管资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将计数器添加到计数器集通过使用指定的计数器标识符和类型。
    ///</summary>
    ///  <param name="counterId">
    ///  标识的计数器。
    ///  使用相同的值，用于在清单中定义的计数器。
    ///</param>
    ///  <param name="counterType">
    ///  计数器类型标识。
    ///  计数器类型确定计算、 求平均值和显示的计数器数据的方式。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  计数器标识符已经存在集中为负，或者计数器类型为 NULL 或无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  向计数器集中创建实例的计数器集之后，无法添加计数器。
    ///</exception>
    procedure AddCounter(counterId: Int32; counterType: DNCounterType); overload;
    ///<summary>
    ///  将计数器添加到计数器集通过使用指定的计数器标识符和类型以及该计数器的显示名称。
    ///</summary>
    ///  <param name="counterId">
    ///  标识的计数器。
    ///  使用相同的值，用于在清单中定义的计数器。
    ///</param>
    ///  <param name="counterType">
    ///  计数器类型标识。
    ///  计数器类型确定计算、 求平均值和显示的计数器数据的方式。
    ///</param>
    ///  <param name="counterName">
    ///  计数器的名称。
    ///  此名称可用于索引中的计数器集实例的计数器。
    ///  （请参阅<see cref="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)" />
    ///  。）
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  计数器标识符已经存在集中为负，或者计数器类型为 NULL 或无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  向计数器集中创建实例的计数器集之后，无法添加计数器。
    ///</exception>
    procedure AddCounter(counterId: Int32; counterType: DNCounterType; counterName: string); overload;
    ///<summary>
    ///  创建计数器集的实例。
    ///</summary>
    ///  <param name="instanceName">
    ///  实例的名称。
    ///  名称必须是唯一的。
    ///</param>
    ///<returns>
    ///  计数器集，它将包含的计数器数据的实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  实例名称为 NULL。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  向计数器集中创建计数器集的实例之前，必须添加计数器。
    ///</exception>
    function CreateCounterSetInstance(instanceName: string): DNCounterSetInstance;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCounterSet = class(TDNGenericImport<DNCounterSetClass, DNCounterSet>) end;

  //-------------namespace: System.Diagnostics.PerformanceData----------------
  DNCounterSetInstanceClass = interface(DNObjectClass)
  ['{75C73B49-808F-581A-B055-54AA1798C29B}']
  end;

  ///<summary>
  ///  创建在 <see cref="T:System.Diagnostics.PerformanceData.CounterSet" />
  ///  类中定义的逻辑计数器的实例。
  ///</summary>
  [DNTypeName('System.Diagnostics.PerformanceData.CounterSetInstance')]
  DNCounterSetInstance = interface(DDN.mscorlib.DNIDisposable)
  ['{5FB5D727-F6A7-3154-89C3-39B3605A219C}']
  { getters & setters } 

    function get_Counters: DNCounterSetInstanceCounterDataSet;

  { methods } 

    ///<summary>
    ///  释放此对象使用的所有非托管资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  为计数器集实例检索计数器数据集合。
    ///</summary>
    ///<returns>
    ///  计数器集实例中包含的计数器数据集合。
    ///</returns>
    property Counters: DNCounterSetInstanceCounterDataSet read get_Counters;
  end;

  TDNCounterSetInstance = class(TDNGenericImport<DNCounterSetInstanceClass, DNCounterSetInstance>) end;

  //-------------namespace: System.Diagnostics.PerformanceData----------------
  DNCounterSetInstanceCounterDataSetClass = interface(DNObjectClass)
  ['{371D2D97-58E1-5593-8678-B99AC249AC1D}']
  end;

  ///<summary>
  ///  包含的计数器值的集合。
  ///</summary>
  [DNTypeName('System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet')]
  DNCounterSetInstanceCounterDataSet = interface(DDN.mscorlib.DNIDisposable)
  ['{8CFAD6F2-7C85-36F3-9161-DD97C2AF6AAF}']
  { getters & setters } 

    function get_Item(counterId: Int32): DNCounterData; overload;
    function get_Item(counterName: string): DNCounterData; overload;

  { methods } 

    ///<summary>
    ///  释放此对象使用的所有非托管资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[counterId: Int32]: DNCounterData read get_Item; default;
    property Item[counterName: string]: DNCounterData read get_Item; default;
  end;

  TDNCounterSetInstanceCounterDataSet = class(TDNGenericImport<DNCounterSetInstanceCounterDataSetClass, DNCounterSetInstanceCounterDataSet>) end;

  //-------------namespace: System.Diagnostics----------------
  DNUnescapedXmlDiagnosticDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BBFD733D-40D4-5289-A503-5B8366440C6A}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" />
    ///  类通过使用指定的 XML 数据字符串。
    ///</summary>
    ///  <param name="xmlPayload">
    ///  要在中记录的 XML 数据 <see langword="UserData" />
    ///  事件架构节点。
    ///</param>
    {class} function init(xmlPayload: string): DNUnescapedXmlDiagnosticData;

  end;

  ///<summary>
  ///  为用户提供的跟踪数据的日志记录提供非转义的 XML 数据。
  ///</summary>
  [DNTypeName('System.Diagnostics.UnescapedXmlDiagnosticData')]
  DNUnescapedXmlDiagnosticData = interface(DDN.mscorlib.DNObject)
  ['{0FF9AB07-001B-33D8-9352-25ED7238B895}']
  { getters & setters } 

    function get_UnescapedXml: string;
    procedure set_UnescapedXml(value: string);

  { methods } 

    ///<summary>
    ///  返回的字符串表示形式 <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  字符串表示形式 <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" />
    ///  对象。
    ///  如果对象是 <see langword="null" />
    ///  , ，此方法返回一个空字符串。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置非转义的 XML 数据字符串。
    ///</summary>
    ///<returns>
    ///  非转义的 XML 字符串。
    ///</returns>
    property UnescapedXml: string read get_UnescapedXml write set_UnescapedXml;
  end;

  TDNUnescapedXmlDiagnosticData = class(TDNGenericImport<DNUnescapedXmlDiagnosticDataClass, DNUnescapedXmlDiagnosticData>) end;

  //-------------namespace: System.Dynamic----------------
  DNBindingRestrictionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD600AAD-CFDF-54FF-8254-461FC32A3C5A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNBindingRestrictions;

  { static fields } 

    ///<summary>
    ///  表示一组空的绑定限制。
    ///  此字段为只读。
    ///</summary>
    {class} property Empty: DNBindingRestrictions read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  创建用来检查表达式中的运行时类型标识绑定限制。
    ///</summary>
    ///  <param name="expression">
    ///  要测试的表达式。
    ///</param>
    ///  <param name="type">
    ///  要测试的确切类型。
    ///</param>
    ///<returns>
    ///  新的绑定限制。
    ///</returns>
    {class} function GetTypeRestriction(expression: DNExpression; &type: DDN.mscorlib.DNType): DNBindingRestrictions;
    ///<summary>
    ///  创建检查表达式中的对象实例标识的绑定限制。
    ///</summary>
    ///  <param name="expression">
    ///  要测试的表达式。
    ///</param>
    ///  <param name="instance">
    ///  要测试的确切对象实例。
    ///</param>
    ///<returns>
    ///  新的绑定限制。
    ///</returns>
    {class} function GetInstanceRestriction(expression: DNExpression; instance: DDN.mscorlib.DNObject): DNBindingRestrictions;
    ///<summary>
    ///  创建检查表达式中的不可变的任意属性的绑定限制。
    ///</summary>
    ///  <param name="expression">
    ///  表示这些限制的表达式。
    ///</param>
    ///<returns>
    ///  新的绑定限制。
    ///</returns>
    {class} function GetExpressionRestriction(expression: DNExpression): DNBindingRestrictions;
    {class} function Combine(contributingObjects: DDN.mscorlib.DNIList<DNDynamicMetaObject>): DNBindingRestrictions;

  end;

  ///<summary>
  ///  表示一组上的绑定限制 <see cref="T:System.Dynamic.DynamicMetaObject" />
  ///  下动态绑定无效。
  ///</summary>
  [DNTypeName('System.Dynamic.BindingRestrictions')]
  DNBindingRestrictions = interface(DDN.mscorlib.DNObject)
  ['{FB6E11CE-F3B8-3BEC-AE30-9135F618C3A4}']
  { methods } 

    ///<summary>
    ///  合并绑定当前绑定限制的限制条件的集。
    ///</summary>
    ///  <param name="restrictions">
    ///  要合并的当前绑定限制的限制的组。
    ///</param>
    ///<returns>
    ///  新的绑定限制集。
    ///</returns>
    function Merge(restrictions: DNBindingRestrictions): DNBindingRestrictions;
    ///<summary>
    ///  创建 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示绑定限制。
    ///</summary>
    ///<returns>
    ///  表达式树表示限制。
    ///</returns>
    function ToExpression: DNExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBindingRestrictions = class(TDNGenericImport<DNBindingRestrictionsClass, DNBindingRestrictions>) end;

  //-------------namespace: System.Dynamic----------------
  DNCallInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80DF0ECB-4EE5-57E9-B196-D0D3DA6EBE68}']
  { constructors } 

    ///<summary>
    ///  创建一个新的 PositionalArgumentInfo。
    ///</summary>
    ///  <param name="argCount">
    ///  自变量的数量。
    ///</param>
    ///  <param name="argNames">
    ///  参数名称。
    ///</param>
    {class} function init(argCount: Int32; argNames: TArray<string>): DNCallInfo; overload;
    {class} function init(argCount: Int32; argNames: DDN.mscorlib.DNIEnumerable<string>): DNCallInfo; overload;

  end;

  ///<summary>
  ///  描述动态绑定过程中的自变量。
  ///</summary>
  [DNTypeName('System.Dynamic.CallInfo')]
  DNCallInfo = interface(DDN.mscorlib.DNObject)
  ['{9FE8E955-3B50-3853-9698-AE3CA9D0B2D9}']
  { getters & setters } 

    function get_ArgumentCount: Int32;
    function get_ArgumentNames: DDN.mscorlib.DNReadOnlyCollection<string>;

  { methods } 

    ///<summary>
    ///  用作当前哈希函数 <see cref="T:System.Dynamic.CallInfo" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="T:System.Dynamic.CallInfo" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  确定是否已指定的 CallInfo 实例被视为等同于当前。
    ///</summary>
    ///  <param name="obj">
    ///  实例 <see cref="T:System.Dynamic.CallInfo" />
    ///  要与当前实例进行比较。
    ///</param>
    ///<returns>
    ///  如果指定的实例等于当前的一个否则为 false 则 true。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  自变量的数量。
    ///</summary>
    ///<returns>
    ///  自变量的数量。
    ///</returns>
    property ArgumentCount: Int32 read get_ArgumentCount;
    ///<summary>
    ///  参数名称。
    ///</summary>
    ///<returns>
    ///  参数名称的只读集合。
    ///</returns>
    property ArgumentNames: DDN.mscorlib.DNReadOnlyCollection<string> read get_ArgumentNames;
  end;

  TDNCallInfo = class(TDNGenericImport<DNCallInfoClass, DNCallInfo>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicMetaObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F4E3A75-55E7-505A-B140-2023A687853A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="expression">
    ///  表示此表达式 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  动态绑定过程。
    ///</param>
    ///  <param name="restrictions">
    ///  绑定的限制在其下的绑定是有效的集。
    ///</param>
    {class} function init(expression: DNExpression; restrictions: DNBindingRestrictions): DNDynamicMetaObject; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="expression">
    ///  表示此表达式 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  动态绑定过程。
    ///</param>
    ///  <param name="restrictions">
    ///  绑定的限制在其下的绑定是有效的集。
    ///</param>
    ///  <param name="value">
    ///  运行时的值由 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</param>
    {class} function init(expression: DNExpression; restrictions: DNBindingRestrictions; value: DDN.mscorlib.DNObject): DNDynamicMetaObject; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EmptyMetaObjects: TArray<DNDynamicMetaObject>;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  类型的空数组。
    ///  此字段为只读。
    ///</summary>
    {class} property EmptyMetaObjects: TArray<DNDynamicMetaObject> read __fakeFieldGet_EmptyMetaObjects;

  { static methods } 

    ///<summary>
    ///  创建指定对象的元对象。
    ///</summary>
    ///  <param name="value">
    ///  要获取的元对象的对象。
    ///</param>
    ///  <param name="expression">
    ///  表示此表达式 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  动态绑定过程。
    ///</param>
    ///<returns>
    ///  如果给定的对象实现 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />
    ///  并不是从当前的 AppDomain 外部的远程对象，则返回该对象的特定元对象返回的 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />
    ///  。
    ///  否则为创建并返回一个普通新元对象不带任何限制。
    ///</returns>
    {class} function Create(value: DDN.mscorlib.DNObject; expression: DNExpression): DNDynamicMetaObject;

  end;

  ///<summary>
  ///  表示动态绑定以及参与动态绑定的对象的绑定逻辑。
  ///</summary>
  [DNTypeName('System.Dynamic.DynamicMetaObject')]
  DNDynamicMetaObject = interface(DDN.mscorlib.DNObject)
  ['{7C5EC2F6-5CA9-34BC-B4E0-C857AA5BE3D7}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_Restrictions: DNBindingRestrictions;
    function get_Value: DDN.mscorlib.DNObject;
    function get_HasValue: Boolean;
    function get_RuntimeType: DDN.mscorlib.DNType;
    function get_LimitType: DDN.mscorlib.DNType;

  { methods } 

    ///<summary>
    ///  执行动态转换操作的绑定。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.ConvertBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindConvert(binder: DNConvertBinder): DNDynamicMetaObject;
    ///<summary>
    ///  执行动态获取成员操作的绑定。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.GetMemberBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindGetMember(binder: DNGetMemberBinder): DNDynamicMetaObject;
    ///<summary>
    ///  执行动态设置成员操作的绑定。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.SetMemberBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///  <param name="value"><see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示用于设置成员操作的值。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindSetMember(binder: DNSetMemberBinder; value: DNDynamicMetaObject): DNDynamicMetaObject;
    ///<summary>
    ///  执行动态删除成员操作的绑定。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.DeleteMemberBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindDeleteMember(binder: DNDeleteMemberBinder): DNDynamicMetaObject;
    ///<summary>
    ///  执行动态获取索引操作的绑定。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.GetIndexBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///  <param name="indexes">
    ///  一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  实例获取索引操作的索引。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindGetIndex(binder: DNGetIndexBinder; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    ///<summary>
    ///  执行动态设置索引操作的绑定。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.SetIndexBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///  <param name="indexes">
    ///  一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  实例设置索引操作的索引。
    ///</param>
    ///  <param name="value"><see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示用于设置索引操作的值。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindSetIndex(binder: DNSetIndexBinder; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject): DNDynamicMetaObject;
    ///<summary>
    ///  执行动态删除索引操作的绑定。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.DeleteIndexBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///  <param name="indexes">
    ///  一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  实例删除索引操作的索引。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindDeleteIndex(binder: DNDeleteIndexBinder; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    ///<summary>
    ///  执行的动态绑定调用成员操作。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.InvokeMemberBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///  <param name="args">
    ///  一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  实例的参数调用成员操作。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindInvokeMember(binder: DNInvokeMemberBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    ///<summary>
    ///  执行动态调用绑定操作。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.InvokeBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///  <param name="args">
    ///  一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  实例的调用操作的参数。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindInvoke(binder: DNInvokeBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    ///<summary>
    ///  执行动态创建实例操作的绑定。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.CreateInstanceBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///  <param name="args">
    ///  一个数组 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  实例的参数创建实例操作。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindCreateInstance(binder: DNCreateInstanceBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    ///<summary>
    ///  执行动态一元运算的绑定。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.UnaryOperationBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindUnaryOperation(binder: DNUnaryOperationBinder): DNDynamicMetaObject;
    ///<summary>
    ///  执行动态的二元运算的绑定。
    ///</summary>
    ///  <param name="binder">
    ///  一个实例 <see cref="T:System.Dynamic.BinaryOperationBinder" />
    ///  表示动态操作的详细信息。
    ///</param>
    ///  <param name="arg">
    ///  一个实例 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示二元运算的右侧。
    ///</param>
    ///<returns>
    ///  新 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  表示结果的绑定。
    ///</returns>
    function BindBinaryOperation(binder: DNBinaryOperationBinder; arg: DNDynamicMetaObject): DNDynamicMetaObject;
    ///<summary>
    ///  返回的所有动态成员名称的枚举。
    ///</summary>
    ///<returns>
    ///  动态成员名称的列表。
    ///</returns>
    function GetDynamicMemberNames: DDN.mscorlib.DNIEnumerable<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  表示表达式 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  动态绑定过程。
    ///</summary>
    ///<returns>
    ///  表示表达式 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  动态绑定过程。
    ///</returns>
    property Expression: DNExpression read get_Expression;
    ///<summary>
    ///  绑定的限制在其下的绑定是有效的集。
    ///</summary>
    ///<returns>
    ///  一组绑定限制。
    ///</returns>
    property Restrictions: DNBindingRestrictions read get_Restrictions;
    ///<summary>
    ///  表示此的运行时值 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示此的运行时值 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  具有运行时的值。
    ///</summary>
    ///<returns>
    ///  True <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  具有的运行时值，否则为 false。
    ///</returns>
    property HasValue: Boolean read get_HasValue;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  时为空值的运行时值的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  没有与其相关联的值。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  运行时的值，则为 null。
    ///</returns>
    property RuntimeType: DDN.mscorlib.DNType read get_RuntimeType;
    ///<summary>
    ///  获取限制类型 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</summary>
    ///<returns><see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />
    ///  运行时的值是否可用，一种类型的 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" />
    ///  否则为。
    ///</returns>
    property LimitType: DDN.mscorlib.DNType read get_LimitType;
  end;

  TDNDynamicMetaObject = class(TDNGenericImport<DNDynamicMetaObjectClass, DNDynamicMetaObject>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicObjectClass = interface(DNObjectClass)
  ['{E1BBE545-B356-5E8C-83E9-4B2715F4F039}']
  end;

  ///<summary>
  ///  提供用于在运行时指定动态行为的基类。
  ///  必须继承此类；不能直接对其进行实例化。
  ///</summary>
  [DNTypeName('System.Dynamic.DynamicObject')]
  DNDynamicObject = interface(DNIDynamicMetaObjectProvider)
  ['{204F3E34-E149-3EAB-8FE7-10348AA2C02E}']
  { methods } 

    function TryGetMember(binder: DNGetMemberBinder; out result: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  提供设置成员值的操作的实现。
    ///  类派生自 <see cref="T:System.Dynamic.DynamicObject" />
    ///  类可以重写此方法以指定动态行为的操作，如设置属性的值。
    ///</summary>
    ///  <param name="binder">
    ///  提供有关调用动态操作的对象信息。
    ///  binder.Name 属性提供向其分配值的成员的名称。
    ///  例如，对于该语句 sampleObject.SampleProperty = "Test", ，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" />
    ///  类， binder.Name 返回"SampleProperty"。
    ///  binder.IgnoreCase 属性指定的成员名称是否区分大小写。
    ///</param>
    ///  <param name="value">
    ///  要设置为成员的值。
    ///  例如，对于 sampleObject.SampleProperty = "Test", ，其中 sampleObject 是派生自的类的实例 <see cref="T:System.Dynamic.DynamicObject" />
    ///  类， <paramref name="value" />
    ///  是"测试"。
    ///</param>
    ///<returns>
    ///  如果操作成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果此方法返回 <see langword="false" />
    ///  , ，语言运行时联编程序确定的行为。
    ///  （在大多数情况下，特定于语言的运行时异常引发。）
    ///</returns>
    function TrySetMember(binder: DNSetMemberBinder; value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  提供删除对象成员的操作的实现。
    ///  此方法不是在 C# 或 Visual Basic 中使用。
    ///</summary>
    ///  <param name="binder">
    ///  提供有关删除的信息。
    ///</param>
    ///<returns>
    ///  如果操作成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果此方法返回 <see langword="false" />
    ///  , ，语言运行时联编程序确定的行为。
    ///  （在大多数情况下，特定于语言的运行时异常引发。）
    ///</returns>
    function TryDeleteMember(binder: DNDeleteMemberBinder): Boolean;
    function TryInvokeMember(binder: DNInvokeMemberBinder; args: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TryConvert(binder: DNConvertBinder; out result: DDN.mscorlib.DNObject): Boolean;
    function TryCreateInstance(binder: DNCreateInstanceBinder; args: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TryInvoke(binder: DNInvokeBinder; args: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TryBinaryOperation(binder: DNBinaryOperationBinder; arg: DDN.mscorlib.DNObject; out result: DDN.mscorlib.DNObject): Boolean;
    function TryUnaryOperation(binder: DNUnaryOperationBinder; out result: DDN.mscorlib.DNObject): Boolean;
    function TryGetIndex(binder: DNGetIndexBinder; indexes: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  提供按索引设置一个值的操作的实现。
    ///  类派生自 <see cref="T:System.Dynamic.DynamicObject" />
    ///  类可以重写此方法以指定动态行为的操作，按指定的索引访问的对象。
    ///</summary>
    ///  <param name="binder">
    ///  提供有关操作的信息。
    ///</param>
    ///  <param name="indexes">
    ///  此操作中使用的索引。
    ///  例如，对于 sampleObject[3] = 10 C# 中的操作 (sampleObject(3) = 10 在 Visual Basic 中)，其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" />
    ///  类， <paramref name="indexes[0]" />
    ///  等于 3。
    ///</param>
    ///  <param name="value">
    ///  要设置为具有指定的索引的对象的值。
    ///  例如，对于 sampleObject[3] = 10 C# 中的操作 (sampleObject(3) = 10 在 Visual Basic 中)，其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" />
    ///  类， <paramref name="value" />
    ///  等于 10。
    ///</param>
    ///<returns>
    ///  如果操作成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果此方法返回 <see langword="false" />
    ///  , ，语言运行时联编程序确定的行为。
    ///  （在大多数情况下，特定于语言的运行时异常引发。
    ///</returns>
    function TrySetIndex(binder: DNSetIndexBinder; indexes: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  提供按索引删除某一对象的操作的实现。
    ///  此方法不是在 C# 或 Visual Basic 中使用。
    ///</summary>
    ///  <param name="binder">
    ///  提供有关删除的信息。
    ///</param>
    ///  <param name="indexes">
    ///  要删除的索引。
    ///</param>
    ///<returns>
    ///  如果操作成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果此方法返回 <see langword="false" />
    ///  , ，语言运行时联编程序确定的行为。
    ///  （在大多数情况下，特定于语言的运行时异常引发。）
    ///</returns>
    function TryDeleteIndex(binder: DNDeleteIndexBinder; indexes: TArray<DDN.mscorlib.DNObject>): Boolean;
    ///<summary>
    ///  提供了 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  调度到动态虚拟方法。
    ///  该对象可封装到另一个 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  以提供各项操作的自定义行为。
    ///  此方法为语言实现者支持的动态语言运行时基础结构，不宜在代码中直接使用。
    ///</summary>
    ///  <param name="parameter">
    ///  表达式，它表示 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  要调度到动态虚拟方法。
    ///</param>
    ///<returns>
    ///  对象 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  类型。
    ///</returns>
    function GetMetaObject(parameter: DNExpression): DNDynamicMetaObject;
    ///<summary>
    ///  返回的所有动态成员名称的枚举。
    ///</summary>
    ///<returns>
    ///  一个包含动态成员名称的序列。
    ///</returns>
    function GetDynamicMemberNames: DDN.mscorlib.DNIEnumerable<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDynamicObject = class(TDNGenericImport<DNDynamicObjectClass, DNDynamicObject>) end;

  //-------------namespace: System.Dynamic----------------
  DNExpandoObjectClass = interface(DNObjectClass)
  ['{060D7A36-212B-52B2-915E-05118EE1CA79}']
  { constructors } 

    ///<summary>
    ///  初始化新 <see langword="ExpandoObject" />
    ///  没有成员。
    ///</summary>
    {class} function init: DNExpandoObject;

  end;

  ///<summary>
  ///  表示可在运行时动态添加和删除其成员的对象。
  ///</summary>
  [DNTypeName('System.Dynamic.ExpandoObject')]
  DNExpandoObject = interface(DNIDynamicMetaObjectProvider)
  ['{840EBDA4-C790-33E3-9805-EA653C9DEC12}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpandoObject = class(TDNGenericImport<DNExpandoObjectClass, DNExpandoObject>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventRecordWrittenEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{AC5F40B0-12E8-5834-9338-D46A0FA79D5E}']
  end;

  ///<summary>
  ///  当 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />
  ///  引发事件时，此对象的实例传递到处理该事件的委托方法。
  ///  此对象包含已发布到事件日志或事件订阅失败时出现的异常的事件。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs')]
  DNEventRecordWrittenEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{EC061C98-D7AF-3D6D-BDEA-F7D1B8426E56}']
  { getters & setters } 

    function get_EventRecord: DNEventRecord;
    function get_EventException: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取发布到事件日志的事件记录。
    ///  此事件与事件订阅中指定的查询条件相匹配。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />
    ///  对象。
    ///</returns>
    property EventRecord: DNEventRecord read get_EventRecord;
    ///<summary>
    ///  获取事件订阅失败时出现的异常。
    ///  此异常包含订阅失败原因的说明。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Exception" />
    ///  对象。
    ///</returns>
    property EventException: DDN.mscorlib.DNException read get_EventException;
  end;

  TDNEventRecordWrittenEventArgs = class(TDNGenericImport<DNEventRecordWrittenEventArgsClass, DNEventRecordWrittenEventArgs>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{B44D9323-8D54-517A-B776-7C173E8AD041}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNEventLogException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" />
    ///  类通过指定用于描述当前异常的错误消息。
    ///</summary>
    ///  <param name="message">
    ///  描述当前异常的错误消息。
    ///</param>
    {class} function init(message: string): DNEventLogException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" />
    ///  类使用的错误消息和内部异常。
    ///</summary>
    ///  <param name="message">
    ///  描述当前异常的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常实例。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEventLogException; overload;

  end;

  ///<summary>
  ///  表示当读取事件日志相关的信息过程中发生错误时引发的所有异常的基类。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogException')]
  DNEventLogException = interface(DDN.mscorlib.DNException)
  ['{AE52C84A-5E93-3AF3-90AA-82E22C8507C1}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  设置有关异常的信息的 SerializationInfo 对象。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  包含有关所引发的异常的序列化的对象数据的对象。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象，它包含有关源或目标的上下文信息。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取描述当前异常的错误消息。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含用于描述当前异常的错误消息。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventLogException = class(TDNGenericImport<DNEventLogExceptionClass, DNEventLogException>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogInvalidDataExceptionClass = interface(DNEventLogExceptionClass)
  ['{D73102E7-8021-5A7C-8302-B94C34BC70E7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNEventLogInvalidDataException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" />
    ///  类通过指定用于描述当前异常的错误消息。
    ///</summary>
    ///  <param name="message">
    ///  描述当前异常的错误消息。
    ///</param>
    {class} function init(message: string): DNEventLogInvalidDataException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" />
    ///  类使用的错误消息和内部异常。
    ///</summary>
    ///  <param name="message">
    ///  描述当前异常的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常实例。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEventLogInvalidDataException; overload;

  end;

  ///<summary>
  ///  表示事件提供程序在事件中发布数据无效时引发的异常。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogInvalidDataException')]
  DNEventLogInvalidDataException = interface(DNEventLogException)
  ['{72072B91-C071-353B-9689-14F3F90E8224}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  设置有关异常的信息的 SerializationInfo 对象。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  包含有关所引发的异常的序列化的对象数据的对象。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象，它包含有关源或目标的上下文信息。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取描述当前异常的错误消息。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含用于描述当前异常的错误消息。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventLogInvalidDataException = class(TDNGenericImport<DNEventLogInvalidDataExceptionClass, DNEventLogInvalidDataException>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogNotFoundExceptionClass = interface(DNEventLogExceptionClass)
  ['{9BEA56B2-13FC-5FB2-89FA-595E265DF079}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNEventLogNotFoundException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" />
    ///  类通过指定用于描述当前异常的错误消息。
    ///</summary>
    ///  <param name="message">
    ///  描述当前异常的错误消息。
    ///</param>
    {class} function init(message: string): DNEventLogNotFoundException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" />
    ///  类使用的错误消息和内部异常。
    ///</summary>
    ///  <param name="message">
    ///  描述当前异常的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常实例。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEventLogNotFoundException; overload;

  end;

  ///<summary>
  ///  表示请求的事件日志 （通常由事件日志或事件日志文件的路径的名称指定） 不存在时引发的异常。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogNotFoundException')]
  DNEventLogNotFoundException = interface(DNEventLogException)
  ['{7467A27C-8DDC-3F25-AFA5-7F91CAB51CFF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  设置有关异常的信息的 SerializationInfo 对象。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  包含有关所引发的异常的序列化的对象数据的对象。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象，它包含有关源或目标的上下文信息。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取描述当前异常的错误消息。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含用于描述当前异常的错误消息。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventLogNotFoundException = class(TDNGenericImport<DNEventLogNotFoundExceptionClass, DNEventLogNotFoundException>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogProviderDisabledExceptionClass = interface(DNEventLogExceptionClass)
  ['{27E19F6B-629F-5FEE-8BCD-01E93C0357C1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNEventLogProviderDisabledException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" />
    ///  类通过指定用于描述当前异常的错误消息。
    ///</summary>
    ///  <param name="message">
    ///  描述当前异常的错误消息。
    ///</param>
    {class} function init(message: string): DNEventLogProviderDisabledException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" />
    ///  类使用的错误消息和内部异常。
    ///</summary>
    ///  <param name="message">
    ///  描述当前异常的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常实例。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEventLogProviderDisabledException; overload;

  end;

  ///<summary>
  ///  表示指定的事件提供程序名称引用已禁用的事件提供程序时，将引发的异常。
  ///  已禁用的事件提供程序不能发布事件。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException')]
  DNEventLogProviderDisabledException = interface(DNEventLogException)
  ['{FFE913DB-FB84-339C-8BFD-096F34AFFB0D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  设置有关异常的信息的 SerializationInfo 对象。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  包含有关所引发的异常的序列化的对象数据的对象。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象，它包含有关源或目标的上下文信息。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取描述当前异常的错误消息。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含用于描述当前异常的错误消息。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventLogProviderDisabledException = class(TDNGenericImport<DNEventLogProviderDisabledExceptionClass, DNEventLogProviderDisabledException>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogReadingExceptionClass = interface(DNEventLogExceptionClass)
  ['{86C40441-D2C1-55FC-B851-1E9F5682BF3E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNEventLogReadingException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" />
    ///  类通过指定用于描述当前异常的错误消息。
    ///</summary>
    ///  <param name="message">
    ///  描述当前异常的错误消息。
    ///</param>
    {class} function init(message: string): DNEventLogReadingException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" />
    ///  类使用的错误消息和内部异常。
    ///</summary>
    ///  <param name="message">
    ///  描述当前异常的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常实例。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEventLogReadingException; overload;

  end;

  ///<summary>
  ///  表示当读取、 查询或订阅事件日志中的事件时，出现错误时引发的异常。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogReadingException')]
  DNEventLogReadingException = interface(DNEventLogException)
  ['{FDCAE3B5-2174-3EA5-A6B7-4CB283AE4D6A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  设置有关异常的信息的 SerializationInfo 对象。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  包含有关所引发的异常的序列化的对象数据的对象。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象，它包含有关源或目标的上下文信息。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取描述当前异常的错误消息。
    ///</summary>
    ///<returns>
    ///  返回一个字符串，包含用于描述当前异常的错误消息。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventLogReadingException = class(TDNGenericImport<DNEventLogReadingExceptionClass, DNEventLogReadingException>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNInstrumentationBaseExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{21A5C93D-94CB-5354-BBA5-E8D722F8501F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" />
    ///  的新实例。
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNInstrumentationBaseException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" />
    ///  类使用的描述异常的消息。
    ///</summary>
    ///  <param name="message">
    ///  描述异常的消息。
    ///</param>
    {class} function init(message: string): DNInstrumentationBaseException; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" />
    ///  使用指定的字符串和异常类。
    ///</summary>
    ///  <param name="message">
    ///  描述异常的消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常实例。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInstrumentationBaseException; overload;

  end;

  ///<summary>
  ///  表示与提供程序相关的基础异常。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.InstrumentationBaseException')]
  DNInstrumentationBaseException = interface(DDN.mscorlib.DNException)
  ['{A0C56843-F520-3B7D-81C4-AAACB5877558}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInstrumentationBaseException = class(TDNGenericImport<DNInstrumentationBaseExceptionClass, DNInstrumentationBaseException>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNInstrumentationExceptionClass = interface(DNInstrumentationBaseExceptionClass)
  ['{16A0D172-5D42-541C-AB04-7F5AD1A8FDD6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Management.Instrumentation.InstrumentationException" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNInstrumentationException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Management.Instrumentation.InstrumentationException" />
    ///  类使用的描述异常的消息。
    ///</summary>
    ///  <param name="message">
    ///  描述异常的消息。
    ///</param>
    {class} function init(message: string): DNInstrumentationException; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Management.Instrumentation.InstrumentationException" />
    ///  System.Exception 引发当前异常的异常类。
    ///</summary>
    ///  <param name="innerException">
    ///  导致当前异常的异常实例。
    ///</param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNInstrumentationException; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Management.Instrumentation.InstrumentationException" />
    ///  使用指定的字符串和异常类。
    ///</summary>
    ///  <param name="message">
    ///  描述异常的消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常实例。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInstrumentationException; overload;

  end;

  ///<summary>
  ///  表示与提供程序相关的异常。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.InstrumentationException')]
  DNInstrumentationException = interface(DNInstrumentationBaseException)
  ['{DD8BCCD3-7DEF-3E01-934C-179EB6122E5D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInstrumentationException = class(TDNGenericImport<DNInstrumentationExceptionClass, DNInstrumentationException>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNInstanceNotFoundExceptionClass = interface(DNInstrumentationExceptionClass)
  ['{BF77AB9C-4021-5A69-B147-8F8E4DE4C1DF}']
  { constructors } 

    ///<summary>
    ///  初始化 InstanceNotFoundException 类的新实例。
    ///</summary>
    {class} function init: DNInstanceNotFoundException; overload;
    ///<summary>
    ///  初始化 InstanceNotFoundException 类的新实例，将其设置为消息的消息字符串。
    ///</summary>
    ///  <param name="message">
    ///  一个字符串，它包含对异常原因进行解释的错误消息。
    ///</param>
    {class} function init(message: string): DNInstanceNotFoundException; overload;
    ///<summary>
    ///  初始化具有指定的错误消息和内部异常的 InstanceNotFoundException 类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  一个字符串，它包含对异常原因进行解释的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致引发当前异常的异常。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInstanceNotFoundException; overload;

  end;

  ///<summary>
  ///  引发的异常指示提供程序未返回任何实例。
  ///  注意：WMI .NET 库现在视为处于最终状态，且没有可用于会影响这些库的非安全性相关问题的进一步开发、增强或更新。
  ///  MI API 应用于所有新的开发。
  ///</summary>
  [DNTypeName('System.Management.Instrumentation.InstanceNotFoundException')]
  DNInstanceNotFoundException = interface(DNInstrumentationException)
  ['{6EA1817C-23A9-39C4-9DBC-8E0A2F3F8B79}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInstanceNotFoundException = class(TDNGenericImport<DNInstanceNotFoundExceptionClass, DNInstanceNotFoundException>) end;

  //-------------namespace: System.IO.MemoryMappedFiles----------------
  DNMemoryMappedFileClass = interface(DNObjectClass)
  ['{1F981C0C-2294-5D16-8F25-07285133B2EC}']
  { static methods } 

    ///<summary>
    ///  在系统内存中打开一个具有指定名称的现有内存映射文件。
    ///</summary>
    ///  <param name="mapName">
    ///  要打开的内存映射文件的名称。
    ///</param>
    ///<returns>
    ///  具有指定名称的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  为指定的文件 <paramref name="mapName" />
    ///  不存在。
    ///</exception>
    {class} function OpenExisting(mapName: string): DNMemoryMappedFile; overload;
    ///<summary>
    ///  在系统内存中打开一个具有指定名称和访问权限的现有内存映射文件。
    ///</summary>
    ///  <param name="mapName">
    ///  要打开的内存映射文件的名称。
    ///</param>
    ///  <param name="desiredAccessRights">
    ///  指定要应用于内存映射文件的访问权限的枚举值之一。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="desiredAccessRights" />
    ///  不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" />
    ///  枚举值。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  为指定的文件 <paramref name="mapName" />
    ///  不存在。
    ///</exception>
    {class} function OpenExisting(mapName: string; desiredAccessRights: DNMemoryMappedFileRights): DNMemoryMappedFile; overload;
    ///<summary>
    ///  在系统内存中打开一个具有指定名称、访问权限和继承性的现有内存映射文件。
    ///</summary>
    ///  <param name="mapName">
    ///  要打开的内存映射文件的名称。
    ///</param>
    ///  <param name="desiredAccessRights">
    ///  指定要应用于内存映射文件的访问权限的枚举值之一。
    ///</param>
    ///  <param name="inheritability">
    ///  指定内存映射文件的句柄能否由子进程继承的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="desiredAccessRights" />
    ///  不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" />
    ///  枚举值。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效的 <see cref="T:System.IO.HandleInheritability" />
    ///  枚举值。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  所请求的访问是无效的内存映射文件。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  为指定的文件 <paramref name="mapName" />
    ///  不存在。
    ///</exception>
    {class} function OpenExisting(mapName: string; desiredAccessRights: DNMemoryMappedFileRights; inheritability: DNHandleInheritability): DNMemoryMappedFile; overload;
    ///<summary>
    ///  基于磁盘上的文件创建一个内存映射文件。
    ///</summary>
    ///  <param name="path">
    ///  要映射的文件的路径。
    ///</param>
    ///<returns>
    ///  内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="path" />
    ///  为空字符串，包含唯一的空白区域，或按照定义包含一个或多个无效字符， <see cref="M:System.IO.Path.GetInvalidFileNameChars" />
    ///  方法。
    ///  - 或 -
    ///  <paramref name="path" />
    ///  引用无效的设备。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  出现 I/O 错误。
    ///</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" />
    ///  超过了由操作系统定义的最大长度。
    ///  在 Windows 中，路径必须包含少于 248 个字符，并且文件的名称必须包含少于 260 个字符。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所需的权限的文件。
    ///</exception>
    {class} function CreateFromFile(path: string): DNMemoryMappedFile; overload;
    ///<summary>
    ///  基于磁盘上的文件创建一个具有指定访问模式的内存映射文件。
    ///</summary>
    ///  <param name="path">
    ///  要映射的文件的路径。
    ///</param>
    ///  <param name="mode">
    ///  访问模式;必须是 <see cref="F:System.IO.FileMode.Open" />
    ///  。
    ///</param>
    ///<returns>
    ///  具有指定访问模式的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="path" />
    ///  为空字符串，包含唯一的空白区域，或按照定义包含一个或多个无效字符， <see cref="M:System.IO.Path.GetInvalidFileNameChars" />
    ///  方法。
    ///  - 或 -
    ///  <paramref name="path" />
    ///  引用无效的设备。
    ///  - 或 -
    ///  <paramref name="mode" />
    ///  为 <see cref="F:System.IO.FileMode.Append" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException"><paramref name="mode" />
    ///  is <see cref="F:System.IO.FileMode.Create" />
    ///  , <see cref="F:System.IO.FileMode.CreateNew" />
    ///  , or <see cref="F:System.IO.FileMode.Truncate" />
    ///  .
    ///  - 或 -
    ///  <paramref name="mode" />
    ///  是 <see cref="F:System.IO.FileMode.OpenOrCreate" />
    ///  ，并且磁盘上的文件不存在。
    ///  - 或 -
    ///  出现 I/O 错误。
    ///</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" />
    ///  超过了由操作系统定义的最大长度。
    ///  在 Windows 中，路径必须包含少于 248 个字符，并且文件的名称必须包含少于 260 个字符。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所需的权限的文件。
    ///</exception>
    {class} function CreateFromFile(path: string; mode: DDN.mscorlib.DNFileMode): DNMemoryMappedFile; overload;
    ///<summary>
    ///  基于磁盘上的文件创建一个具有指定访问模式和名称的内存映射文件。
    ///</summary>
    ///  <param name="path">
    ///  要映射的文件的路径。
    ///</param>
    ///  <param name="mode">
    ///  访问模式;必须是 <see cref="F:System.IO.FileMode.Open" />
    ///  。
    ///</param>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///<returns>
    ///  具有指定名称和访问模式的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="path" />
    ///  为空字符串，包含唯一的空白区域，或按照定义包含一个或多个无效字符， <see cref="M:System.IO.Path.GetInvalidFileNameChars" />
    ///  方法。
    ///  - 或 -
    ///  <paramref name="path" />
    ///  引用无效的设备。
    ///  - 或 -
    ///  <paramref name="mapName" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  <paramref name="mode" />
    ///  为 <see cref="F:System.IO.FileMode.Append" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  或 <paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException"><paramref name="mode" />
    ///  is <see cref="F:System.IO.FileMode.Create" />
    ///  , <see cref="F:System.IO.FileMode.CreateNew" />
    ///  , or <see cref="F:System.IO.FileMode.Truncate" />
    ///  .
    ///  - 或 -
    ///  <paramref name="mode" />
    ///  是 <see cref="F:System.IO.FileMode.OpenOrCreate" />
    ///  ，并且磁盘上的文件不存在。
    ///  - 或 -
    ///  出现 I/O 错误。
    ///</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" />
    ///  超过了由操作系统定义的最大长度。
    ///  在 Windows 中，路径必须包含少于 248 个字符，并且文件的名称必须包含少于 260 个字符。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所需的权限的文件。
    ///</exception>
    {class} function CreateFromFile(path: string; mode: DDN.mscorlib.DNFileMode; mapName: string): DNMemoryMappedFile; overload;
    ///<summary>
    ///  基于磁盘上的文件创建一个具有指定访问模式、名称和容量的内存映射文件。
    ///</summary>
    ///  <param name="path">
    ///  要映射的文件的路径。
    ///</param>
    ///  <param name="mode">
    ///  访问模式;可以是任一 <see cref="T:System.IO.FileMode" />
    ///  枚举值除 <see cref="F:System.IO.FileMode.Append" />
    ///  。
    ///</param>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///  指定 0，以将容量设置为磁盘上文件的大小。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="path" />
    ///  为空字符串，包含唯一的空白区域，或按照定义包含一个或多个无效字符， <see cref="M:System.IO.Path.GetInvalidFileNameChars" />
    ///  方法。
    ///  - 或 -
    ///  <paramref name="path" />
    ///  引用无效的设备。
    ///  - 或 -
    ///  <paramref name="mapName" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  <paramref name="mode" />
    ///  为 <see cref="F:System.IO.FileMode.Append" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  或 <paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  大于逻辑地址空间的大小。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  小于文件大小 （但不是为零）。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  为零，且在磁盘上文件的大小也为零。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  出现 I/O 错误。
    ///</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" />
    ///  超过了由操作系统定义的最大长度。
    ///  在 Windows 中，路径必须包含少于 248 个字符，并且文件的名称必须包含少于 260 个字符。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所需的权限的文件。
    ///</exception>
    {class} function CreateFromFile(path: string; mode: DDN.mscorlib.DNFileMode; mapName: string; capacity: Int64): DNMemoryMappedFile; overload;
    ///<summary>
    ///  基于磁盘上的文件创建一个具有指定访问模式、名称、容量和访问类型的内存映射文件。
    ///</summary>
    ///  <param name="path">
    ///  要映射的文件的路径。
    ///</param>
    ///  <param name="mode">
    ///  访问模式;可以是任一 <see cref="T:System.IO.FileMode" />
    ///  枚举值除 <see cref="F:System.IO.FileMode.Append" />
    ///  。
    ///</param>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///  指定 0，以将容量设置为磁盘上文件的大小。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  不允许的值。
    ///  - 或 -
    ///  <paramref name="path" />
    ///  指定一个空文件。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  指定为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" />
    ///  容量大于指示的文件的大小和 <paramref name="path" />
    ///  。
    ///  - 或 -
    ///  <paramref name="mode" />
    ///  为 <see cref="F:System.IO.FileMode.Append" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  或 <paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  大于逻辑地址空间的大小。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  小于文件大小 （但不是为零）。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  为零，且在磁盘上文件的大小也为零。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  不是定义 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
    ///  值。
    ///  - 或 -
    ///  文件的大小由 <paramref name="path" />
    ///  大于 <paramref name="capacity" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  - 或 -
    ///  出现 I/O 错误。
    ///</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" />
    ///  超过了由操作系统定义的最大长度。
    ///  在 Windows 中，路径必须包含少于 248 个字符，并且文件的名称必须包含少于 260 个字符。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所需的权限的文件。
    ///</exception>
    {class} function CreateFromFile(path: string; mode: DDN.mscorlib.DNFileMode; mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess): DNMemoryMappedFile; overload;
    ///<summary>
    ///  从现有文件创建一个具有指定的访问模式、名称、继承性和容量的内存映射文件。
    ///</summary>
    ///  <param name="fileStream">
    ///  现有文件的文件流。
    ///</param>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///  指定 0，以将容量设置为的大小 <paramref name="filestream" />
    ///  。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///  此参数不能设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  。
    ///</param>
    ///  <param name="inheritability">
    ///  指定内存映射文件的句柄能否由子进程继承的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  。
    ///</param>
    ///  <param name="leaveOpen">
    ///  一个值，该值指示是否要关闭源文件流 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />
    ///  被释放。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  或空字符串。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  和文件的长度均为零。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  枚举值时，这不允许。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" />
    ///  和 <paramref name="capacity" />
    ///  大小的长度大于 <see langword="filestream" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="fileStream" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  小于文件大小。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
    ///  枚举值。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效的 <see cref="T:System.IO.HandleInheritability" />
    ///  枚举值。
    ///</exception>
    {class} function CreateFromFile(fileStream: DDN.mscorlib.DNFileStream; mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; inheritability: DNHandleInheritability; leaveOpen: Boolean): DNMemoryMappedFile; overload;
    ///<summary>
    ///  创建一个磁盘上的文件从具有指定的名称、 容量、 访问类型、 安全权限、 继承性和释放要求的内存映射文件。
    ///</summary>
    ///  <param name="fileStream"><paramref name="fileStream" />
    ///  到要映射的文件。
    ///</param>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///  指定 0，以将容量设置为磁盘上文件的大小。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///  此参数不能设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  。
    ///</param>
    ///  <param name="memoryMappedFileSecurity">
    ///  可以针对内存映射文件授予的文件访问和操作权限。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="inheritability">
    ///  指定内存映射文件的句柄能否由子进程继承的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  。
    ///</param>
    ///  <param name="leaveOpen"><see langword="true" />
    ///  若要不释放 <paramref name="fileStream" />
    ///  后 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />
    ///  关闭; <see langword="false" />
    ///  若要释放 <paramref name="fileStream" />
    ///  。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  和文件的长度均为零。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" />
    ///  或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  枚举值时，这不允许。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="fileStream" />
    ///  或 <paramref name="mapname" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  小于文件大小。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
    ///  枚举值。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效的 <see cref="T:System.IO.HandleInheritability" />
    ///  枚举值。
    ///</exception><exception cref="T:System.ObjectDisposedException"><paramref name="fileStream" />
    ///  已关闭。
    ///</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="access" />
    ///  设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  时 <paramref name="fileStream" />
    ///  的访问权限设置为 <see cref="F:System.IO.FileAccess.Read" />
    ///  或 <see cref="F:System.IO.FileAccess.Write" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException"><paramref name="mapName" />
    ///  已存在。
    ///</exception>
    {class} function CreateFromFile(fileStream: DDN.mscorlib.DNFileStream; mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; memoryMappedFileSecurity: DNMemoryMappedFileSecurity; inheritability: DNHandleInheritability; leaveOpen: Boolean): DNMemoryMappedFile; overload;
    ///<summary>
    ///  在系统内存中创建一个具有指定容量的内存映射文件。
    ///</summary>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///</param>
    ///<returns>
    ///  具有指定名称和容量的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  小于或等于零。
    ///</exception>
    {class} function CreateNew(mapName: string; capacity: Int64): DNMemoryMappedFile; overload;
    ///<summary>
    ///  在系统内存中创建一个具有指定容量和访问类型的内存映射文件。
    ///</summary>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  枚举值将 <paramref name="access" />
    ///  设置为只写。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  小于或等于零。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
    ///  枚举值。
    ///</exception>
    {class} function CreateNew(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess): DNMemoryMappedFile; overload;
    ///<summary>
    ///  创建一个具有指定名称、容量、访问类型、内存分配选项和继承性的内存映射文件。
    ///</summary>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  。
    ///</param>
    ///  <param name="options">
    ///  枚举值的按位组合，用于为内存映射文件指定内存分配选项。
    ///</param>
    ///  <param name="inheritability">
    ///  一个值，该值指定内存映射文件的句柄能否由子进程继承。
    ///  默认值为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  枚举值将 <paramref name="access" />
    ///  设置为只写。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  小于或等于零。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
    ///  枚举值。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效的 <see cref="T:System.IO.HandleInheritability" />
    ///  值。
    ///</exception>
    {class} function CreateNew(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; options: DNMemoryMappedFileOptions; inheritability: DNHandleInheritability): DNMemoryMappedFile; overload;
    ///<summary>
    ///  在系统内存中创建一个具有指定容量、访问类型、内存分配、安全权限和继承性的内存映射文件。
    ///</summary>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  。
    ///</param>
    ///  <param name="options">
    ///  枚举值的按位组合，用于为内存映射文件指定内存分配选项。
    ///</param>
    ///  <param name="memoryMappedFileSecurity">
    ///  可以针对内存映射文件授予的文件访问和操作权限。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="inheritability">
    ///  指定内存映射文件的句柄能否由子进程继承的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  枚举值将 <paramref name="access" />
    ///  设置为只写。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  小于或等于零。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
    ///  枚举值。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效的 <see cref="T:System.IO.HandleInheritability" />
    ///  枚举值。
    ///</exception>
    {class} function CreateNew(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; options: DNMemoryMappedFileOptions; memoryMappedFileSecurity: DNMemoryMappedFileSecurity; inheritability: DNHandleInheritability): DNMemoryMappedFile; overload;
    ///<summary>
    ///  在系统内存中创建或打开一个具有指定容量的内存映射文件。
    ///</summary>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///</param>
    ///<returns>
    ///  具有指定名称和大小的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  大于逻辑地址空间的大小。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  小于或等于零。
    ///</exception>
    {class} function CreateOrOpen(mapName: string; capacity: Int64): DNMemoryMappedFile; overload;
    ///<summary>
    ///  在系统内存中创建或打开一个具有指定容量和访问类型的内存映射文件。
    ///</summary>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  枚举值将 <paramref name="access" />
    ///  设置为只写。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  大于逻辑地址空间的大小。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  小于或等于零。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  不是有效 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
    ///  枚举值。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  操作系统拒绝对该文件; 指定访问权限例如，访问权限设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  , ，但该文件或目录是只读的。
    ///</exception>
    {class} function CreateOrOpen(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess): DNMemoryMappedFile; overload;
    ///<summary>
    ///  创建一个新的空内存映射文件或打开一个现有的内存映射文件（如果存在具有相同名称的内存映射文件）。
    ///  如果打开现有的文件，则将忽略容量、选项、内存自变量。
    ///</summary>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  。
    ///</param>
    ///  <param name="options">
    ///  值的按位组合，它指示要应用到文件的内存分配选项。
    ///</param>
    ///  <param name="inheritability">
    ///  一个值，该值指定内存映射文件的句柄能否由子进程继承。
    ///  默认值为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  枚举值将 <paramref name="access" />
    ///  设置为只写。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  大于逻辑地址空间的大小。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  小于或等于零。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
    ///  枚举值。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效 <see cref="T:System.IO.HandleInheritability" />
    ///  枚举值。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  操作系统拒绝对该文件; 指定访问权限例如，访问权限设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  , ，但该文件或目录是只读的。
    ///</exception>
    {class} function CreateOrOpen(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; options: DNMemoryMappedFileOptions; inheritability: DNHandleInheritability): DNMemoryMappedFile; overload;
    ///<summary>
    ///  在系统内存中创建或打开一个具有指定容量、访问类型、内存分配、安全权限和继承性的内存映射文件。
    ///</summary>
    ///  <param name="mapName">
    ///  要分配给内存映射文件的名称。
    ///</param>
    ///  <param name="capacity">
    ///  要分配给内存映射文件的最大大小（以字节为单位）。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  。
    ///</param>
    ///  <param name="options">
    ///  枚举值的按位组合，用于为内存映射文件指定内存分配选项。
    ///</param>
    ///  <param name="memoryMappedFileSecurity">
    ///  可以针对内存映射文件授予的文件访问和操作权限。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="inheritability">
    ///  指定内存映射文件的句柄能否由子进程继承的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存映射文件。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="mapName" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  通过 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  枚举值将 <paramref name="access" />
    ///  设置为只写。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="mapName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  大于逻辑地址空间的大小。
    ///  - 或 -
    ///  <paramref name="capacity" />
    ///  小于或等于零。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  不是有效的 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
    ///  枚举值。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效 <see cref="T:System.IO.HandleInheritability" />
    ///  枚举值。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  操作系统不允许指定 <paramref name="access" />
    ///  到该文件; 例如， <paramref name="access" />
    ///  设置为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  或 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  , ，但该文件或目录是只读的。
    ///</exception>
    {class} function CreateOrOpen(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; options: DNMemoryMappedFileOptions; memoryMappedFileSecurity: DNMemoryMappedFileSecurity; inheritability: DNHandleInheritability): DNMemoryMappedFile; overload;

  end;

  ///<summary>
  ///  表示内存映射文件。
  ///</summary>
  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedFile')]
  DNMemoryMappedFile = interface(DDN.mscorlib.DNIDisposable)
  ['{0942D30F-2F26-3DD6-92A2-D3EDDA4F2ED4}']
  { getters & setters } 

    function get_SafeMemoryMappedFileHandle: DNSafeMemoryMappedFileHandle;

  { methods } 

    ///<summary>
    ///  创建映射到内存映射文件视图的流。
    ///</summary>
    ///<returns>
    ///  内存流。
    ///</returns>
    ///<exception cref="T:System.UnauthorizedAccessException">
    ///  对内存映射文件的访问是未经授权。
    ///</exception>
    function CreateViewStream: DNMemoryMappedViewStream; overload;
    ///<summary>
    ///  创建一个流，它映射到内存映射文件的视图并具有指定的偏移和大小。
    ///</summary>
    ///  <param name="offset">
    ///  启动此视图的字节位置。
    ///</param>
    ///  <param name="size">
    ///  视图的大小。
    ///  指定 0 （零），以创建一个视图，其中起点是 <paramref name="offset" />
    ///  和大约在内存映射文件的结尾结束。
    ///</param>
    ///<returns>
    ///  具有指定偏移和大小的内存流。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  或 <paramref name="size" />
    ///  是负值。
    ///  - 或 -
    ///  <paramref name="size" />
    ///  大于逻辑地址空间。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  对内存映射文件的访问是未经授权。
    ///</exception><exception cref="T:System.IO.IOException"><paramref name="size" />
    ///  大于总虚拟内存。
    ///</exception>
    function CreateViewStream(offset: Int64; size: Int64): DNMemoryMappedViewStream; overload;
    ///<summary>
    ///  创建一个流，它映射到内存映射文件的视图，并具有指定的偏移、大小和访问类型。
    ///</summary>
    ///  <param name="offset">
    ///  启动此视图的字节位置。
    ///</param>
    ///  <param name="size">
    ///  视图的大小。
    ///  指定 0 （零），以创建一个视图，其中起点是 <paramref name="offset" />
    ///  和大约在内存映射文件的结尾结束。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  。
    ///</param>
    ///<returns>
    ///  具有指定特征的内存流。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  或 <paramref name="size" />
    ///  是负值。
    ///  - 或 -
    ///  <paramref name="size" />
    ///  大于逻辑地址空间。
    ///  - 或 -
    ///  <paramref name="access " />
    ///  不是有效 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />
    ///  枚举值。
    ///</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="access" />
    ///  是无效的内存映射文件。
    ///</exception><exception cref="T:System.IO.IOException"><paramref name="size" />
    ///  大于总虚拟内存。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  是无效的内存映射文件。
    ///</exception>
    function CreateViewStream(offset: Int64; size: Int64; access: DNMemoryMappedFileAccess): DNMemoryMappedViewStream; overload;
    ///<summary>
    ///  创建 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" />
    ///  ，它映射到内存映射文件的视图。
    ///</summary>
    ///<returns>
    ///  可随机访问的内存块。
    ///</returns>
    ///<exception cref="T:System.UnauthorizedAccessException">
    ///  对内存映射文件的访问是未经授权。
    ///</exception>
    function CreateViewAccessor: DNMemoryMappedViewAccessor; overload;
    ///<summary>
    ///  创建 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" />
    ///  ，它映射到视图的内存映射文件中，并具有指定的偏移量和大小。
    ///</summary>
    ///  <param name="offset">
    ///  启动此视图的字节位置。
    ///</param>
    ///  <param name="size">
    ///  视图的大小。
    ///  指定 0 （零），以创建一个视图，其中起点是 <paramref name="offset" />
    ///  和大约在内存映射文件的结尾结束。
    ///</param>
    ///<returns>
    ///  可随机访问的内存块。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  或 <paramref name="size" />
    ///  是负值。
    ///  - 或 -
    ///  <paramref name="size" />
    ///  大于逻辑地址空间。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  对内存映射文件的访问是未经授权。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  出现 I/O 错误。
    ///</exception>
    function CreateViewAccessor(offset: Int64; size: Int64): DNMemoryMappedViewAccessor; overload;
    ///<summary>
    ///  创建 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" />
    ///  ，它映射到视图的内存映射文件中，并具有指定的偏移、 大小和访问限制。
    ///</summary>
    ///  <param name="offset">
    ///  启动此视图的字节位置。
    ///</param>
    ///  <param name="size">
    ///  视图的大小。
    ///  指定 0 （零），以创建一个视图，其中起点是 <paramref name="offset" />
    ///  和大约在内存映射文件的结尾结束。
    ///</param>
    ///  <param name="access">
    ///  指定内存映射文件允许的访问类型的枚举值之一。
    ///  默认值为 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />
    ///  。
    ///</param>
    ///<returns>
    ///  可随机访问的内存块。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  或 <paramref name="size" />
    ///  是负值。
    ///  - 或 -
    ///  <paramref name="size" />
    ///  大于逻辑地址空间。
    ///</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="access" />
    ///  是无效的内存映射文件。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  出现 I/O 错误。
    ///</exception>
    function CreateViewAccessor(offset: Int64; size: Int64; access: DNMemoryMappedFileAccess): DNMemoryMappedViewAccessor; overload;
    ///<summary>
    ///  释放由 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  获取对内存映射文件资源的访问控制。
    ///</summary>
    ///<returns>
    ///  可以针对内存映射文件授予的文件访问和操作权限。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  要设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  要设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  关闭内存映射文件。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  当前平台是 Windows 98 或更早版本。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  要设置安全信息的基础调用失败。
    ///  - 或 -
    ///  内存映射文件以打开 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />
    ///  仅。
    ///</exception>
    function GetAccessControl: DNMemoryMappedFileSecurity;
    ///<summary>
    ///  设置对内存映射文件资源的访问控制。
    ///</summary>
    ///  <param name="memoryMappedFileSecurity">
    ///  可以针对内存映射文件授予的文件访问和操作权限。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="memoryMappedFileSecurity" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  要设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  要设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  要设置安全信息的基础调用失败。
    ///</exception>
    procedure SetAccessControl(memoryMappedFileSecurity: DNMemoryMappedFileSecurity);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取内存映射文件的文件句柄。
    ///</summary>
    ///<returns>
    ///  内存映射文件的句柄。
    ///</returns>
    property SafeMemoryMappedFileHandle: DNSafeMemoryMappedFileHandle read get_SafeMemoryMappedFileHandle;
  end;

  TDNMemoryMappedFile = class(TDNGenericImport<DNMemoryMappedFileClass, DNMemoryMappedFile>) end;

  //-------------namespace: System.IO.MemoryMappedFiles----------------
  DNMemoryMappedViewAccessorClass = interface(DDN.mscorlib.DNUnmanagedMemoryAccessorClass)
  ['{188FE65B-F987-5B0D-873C-F4BC557B89F1}']
  end;

  ///<summary>
  ///  表示一个内存映射文件的随机访问的视图。
  ///</summary>
  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedViewAccessor')]
  DNMemoryMappedViewAccessor = interface(DDN.mscorlib.DNUnmanagedMemoryAccessor)
  ['{FAFB1B2C-8AF6-3882-861B-A38B3302FCF1}']
  { getters & setters } 

    function get_SafeMemoryMappedViewHandle: DNSafeMemoryMappedViewHandle;
    function get_PointerOffset: Int64;
    function get_Capacity: Int64;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;

  { methods } 

    ///<summary>
    ///  清除此视图的所有缓冲区并导致所有缓冲的数据写入到基础文件。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  访问器已关闭后调用的方法。
    ///</exception>
    procedure Flush;
    procedure Dispose;
    function ReadBoolean(position: Int64): Boolean;
    function ReadByte(position: Int64): Byte;
    function ReadDecimal(position: Int64): DDN.mscorlib.DNDecimal;
    procedure Write(position: Int64; value: Boolean); overload;
    procedure Write(position: Int64; value: Byte); overload;
    procedure Write(position: Int64; value: DDN.mscorlib.DNDecimal); overload;
    function ReadChar(position: Int64): Char;
    function ReadInt16(position: Int64): Int16;
    function ReadInt32(position: Int64): Int32;
    function ReadInt64(position: Int64): Int64;
    function ReadSingle(position: Int64): Single;
    function ReadDouble(position: Int64): Double;
    function ReadSByte(position: Int64): SByte;
    function ReadUInt16(position: Int64): UInt16;
    function ReadUInt32(position: Int64): UInt32;
    function ReadUInt64(position: Int64): UInt64;
    procedure Write(position: Int64; value: Char); overload;
    procedure Write(position: Int64; value: Int16); overload;
    procedure Write(position: Int64; value: Int32); overload;
    procedure Write(position: Int64; value: Int64); overload;
    procedure Write(position: Int64; value: Single); overload;
    procedure Write(position: Int64; value: Double); overload;
    procedure Write(position: Int64; value: SByte); overload;
    procedure Write(position: Int64; value: UInt16); overload;
    procedure Write(position: Int64; value: UInt32); overload;
    procedure Write(position: Int64; value: UInt64); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取内存映射文件的视图的句柄。
    ///</summary>
    ///<returns>
    ///  文件的视图的操作系统的句柄包装器。
    ///</returns>
    property SafeMemoryMappedViewHandle: DNSafeMemoryMappedViewHandle read get_SafeMemoryMappedViewHandle;
    ///<summary>
    ///  [在 .NET Framework 4.5.1 和更高版本中受支持]
    ///  获取内存映射文件的开头的偏移此视图的起始位置的字节数。
    ///</summary>
    ///<returns>
    ///  此视图的起始位置和内存映射文件的开头之间的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  从中创建此实例的对象是 <see langword="null" />
    ///  。
    ///</exception>
    property PointerOffset: Int64 read get_PointerOffset;
    property Capacity: Int64 read get_Capacity;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
  end;

  TDNMemoryMappedViewAccessor = class(TDNGenericImport<DNMemoryMappedViewAccessorClass, DNMemoryMappedViewAccessor>) end;

  //-------------namespace: System.Linq----------------
  DNEnumerableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1D19C7D-BD35-5372-B8D8-EB0AFFF57645}']
  { static methods } 

    ///<summary>
    ///  生成指定范围内的整数序列。
    ///</summary>
    ///  <param name="start">
    ///  序列中第一个整数的值。
    ///</param>
    ///  <param name="count">
    ///  要生成的顺序整数的数目。
    ///</param>
    ///<returns>
    ///  IEnumerable&lt;Int32&gt; 在 C# 或 IEnumerable(Of Int32) 中 Visual Basic ，其中包含范围的顺序的整数。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="start" />
    ///  + <paramref name="count" />
    ///  -1 是大于 <see cref="F:System.Int32.MaxValue" />
    ///  。
    ///</exception>
    {class} function Range(start: Int32; count: Int32): DDN.mscorlib.DNIEnumerable<Int32>;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<Int32>): Int32; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<Int64>): Int64; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<Single>): Single; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<Double>): Double; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<Int32>): Int32; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<Int64>): Int64; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<Single>): Single; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<Double>): Double; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<Int32>): Int32; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<Int64>): Int64; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<Double>): Double; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<Single>): Single; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<Int32>): Double; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<Int64>): Double; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<Single>): Single; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<Double>): Double; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;

  end;

  ///<summary>
  ///  提供了一套 <see langword="static" />
  ///  (<see langword="Shared" />
  ///  在 Visual Basic 中) 用于查询实现的对象方法 <see cref="T:System.Collections.Generic.IEnumerable`1" />
  ///  。
  ///</summary>
  [DNTypeName('System.Linq.Enumerable')]
  DNEnumerable = interface(DDN.mscorlib.DNObject)
  ['{06F3D115-ED03-3D5F-B08B-8A15E18B855D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEnumerable = class(TDNGenericImport<DNEnumerableClass, DNEnumerable>) end;

  //-------------namespace: System.Linq----------------
  DNEnumerableExecutorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{48A14358-A67F-56E5-AFE4-72F88C69B969}']
  end;

  ///<summary>
  ///  表示一个表达式树，并提供在重写之后执行表达式树的功能。
  ///</summary>
  [DNTypeName('System.Linq.EnumerableExecutor')]
  DNEnumerableExecutor = interface(DDN.mscorlib.DNObject)
  ['{8F0D57B6-ED42-3D3F-A379-C471B23C4226}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEnumerableExecutor = class(TDNGenericImport<DNEnumerableExecutorClass, DNEnumerableExecutor>) end;

  //-------------namespace: System.Linq----------------
  DNEnumerableExecutorClass<T> = interface(DNEnumerableExecutorClass)
  ['{BFA54836-7473-5188-AC34-6700181F627A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Linq.EnumerableExecutor`1" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="expression">
    ///  要将与新的实例相关联的表达式树。
    ///</param>
    {class} function init(expression: DNExpression): DNEnumerableExecutor<T>;

  end;

  ///<summary>
  ///  表示一个表达式树，并提供在重写之后执行表达式树的功能。
  ///</summary>
  ///<typeparam name="T">
  ///  执行表达式树所得到的值数据类型。
  ///</typeparam>
  [DNTypeName('System.Linq.EnumerableExecutor`1')]
  DNEnumerableExecutor<T> = interface(DNEnumerableExecutor)
  ['{686CA1B2-44E5-3C28-8377-4C28F45569BF}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEnumerableExecutor<T> = class(TDNGenericImport<DNEnumerableExecutorClass<T>, DNEnumerableExecutor<T>>) end;

  //-------------namespace: System.Linq----------------
  DNEnumerableQueryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DBA98CC1-B28B-5165-B65F-1E958C24EDB7}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Collections.IEnumerable" />
  ///  作为 <see cref="T:System.Linq.EnumerableQuery" />
  ///  数据源。
  ///</summary>
  [DNTypeName('System.Linq.EnumerableQuery')]
  DNEnumerableQuery = interface(DDN.mscorlib.DNObject)
  ['{4C4C01EF-B143-3C92-8CEB-1B0674F7D0C8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEnumerableQuery = class(TDNGenericImport<DNEnumerableQueryClass, DNEnumerableQuery>) end;

  //-------------namespace: System.Linq----------------
  DNEnumerableQueryClass<T> = interface(DNEnumerableQueryClass)
  ['{93B11976-DB76-5A4B-AF17-75A36F686726}']
  { constructors } 

    {class} function init(enumerable: DDN.mscorlib.DNIEnumerable<T>): DNEnumerableQuery<T>; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Linq.EnumerableQuery`1" />
    ///  类，并将该实例关联的表达式树。
    ///</summary>
    ///  <param name="expression">
    ///  要将与新的实例相关联的表达式树。
    ///</param>
    {class} function init(expression: DNExpression): DNEnumerableQuery<T>; overload;

  end;

  ///<summary>
  ///  表示作为 <see cref="T:System.Linq.IQueryable`1" />
  ///  数据源的 <see cref="T:System.Collections.Generic.IEnumerable`1" />
  ///  集合。
  ///</summary>
  ///<typeparam name="T">
  ///  集合中数据的类型。
  ///</typeparam>
  [DNTypeName('System.Linq.EnumerableQuery`1')]
  DNEnumerableQuery<T> = interface(DNEnumerableQuery)
  ['{1E96291A-8D60-322C-B030-794757583063}']
  { methods } 

    ///<summary>
    ///  返回的文本表示形式的可枚举集合，或者，如果它为 null，则该表达式树将与此实例相关联。
    ///</summary>
    ///<returns>
    ///  文本表示形式的可枚举集合或，如果该值为 null，是此实例相关联的表达式目录树。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNEnumerableQuery<T> = class(TDNGenericImport<DNEnumerableQueryClass<T>, DNEnumerableQuery<T>>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNCatchBlockClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82F694E3-D0BB-57EF-8298-83B63E214F5B}']
  end;

  ///<summary>
  ///  表示 try 块中的 catch 语句。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.CatchBlock')]
  DNCatchBlock = interface(DDN.mscorlib.DNObject)
  ['{FC67E70C-F8B5-3A77-8CD8-A289136AEF93}']
  { getters & setters } 

    function get_Variable: DNParameterExpression;
    function get_Test: DDN.mscorlib.DNType;
    function get_Body: DNExpression;
    function get_Filter: DNExpression;

  { methods } 

    ///<summary>
    ///  返回一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
    ///  如果所有子级均相同，它将返回此表达式。
    ///</summary>
    ///  <param name="variable"><see cref="P:System.Linq.Expressions.CatchBlock.Variable" />
    ///  结果属性。
    ///</param>
    ///  <param name="filter"><see cref="P:System.Linq.Expressions.CatchBlock.Filter" />
    ///  结果属性。
    ///</param>
    ///  <param name="body"><see cref="P:System.Linq.Expressions.CatchBlock.Body" />
    ///  结果属性。
    ///</param>
    ///<returns>
    ///  如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
    ///</returns>
    function Update(variable: DNParameterExpression; filter: DNExpression; body: DNExpression): DNCatchBlock;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取对 <see cref="T:System.Exception" />
    ///  此处理程序捕获的对象。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  对象，表示对引用 <see cref="T:System.Exception" />
    ///  此处理程序捕获的对象。
    ///</returns>
    property Variable: DNParameterExpression read get_Variable;
    ///<summary>
    ///  获取的类型 <see cref="T:System.Exception" />
    ///  此处理程序捕捉。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示的一种 <see cref="T:System.Exception" />
    ///  此处理程序捕捉。
    ///</returns>
    property Test: DDN.mscorlib.DNType read get_Test;
    ///<summary>
    ///  获取在 catch 块的正文。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示 catch 正文的对象。
    ///</returns>
    property Body: DNExpression read get_Body;
    ///<summary>
    ///  获取的正文 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  筛选器。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  对象，表示正文 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  筛选器。
    ///</returns>
    property Filter: DNExpression read get_Filter;
  end;

  TDNCatchBlock = class(TDNGenericImport<DNCatchBlockClass, DNCatchBlock>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNElementInitClass = interface(DNObjectClass)
  ['{E9AE3CB1-9152-5890-A5A0-5BAC809079B4}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Collections.IEnumerable" />
  ///  集合的单个元素的初始值设定项。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.ElementInit')]
  DNElementInit = interface(DNIArgumentProvider)
  ['{45F6112D-6439-3067-BDB9-DA62367EFBC0}']
  { getters & setters } 

    function get_AddMethod: DDN.mscorlib.DNMethodInfo;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.ElementInit" />
    ///  对象的文本表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.ElementInit" />
    ///  对象的文本表示形式。
    ///</returns>
    function ToString: string;
    function Update(arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNElementInit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取用于将元素添加到 <see cref="T:System.Collections.IEnumerable" />
    ///  集合的实例方法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.MethodInfo" />
    ///  ，表示将元素添加到集合的实例方法。
    ///</returns>
    property AddMethod: DDN.mscorlib.DNMethodInfo read get_AddMethod;
    ///<summary>
    ///  获取传递到相应方法的参数的集合，该方法将元素添加到 <see cref="T:System.Collections.IEnumerable" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  ，这些对象表示将元素添加到集合的方法的参数。
    ///</returns>
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
  end;

  TDNElementInit = class(TDNGenericImport<DNElementInitClass, DNElementInit>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB5693C1-11DD-5538-880B-F4BDF42BA0B1}']
  { static methods } 

    ///<summary>
    ///  在给定左操作数和右操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="binaryType">
    ///  指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</param>
    ///  <param name="left">
    ///  一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="binaryType" />
    ///  与二进制表达式节点不对应。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  在给定左操作数、右操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="binaryType">
    ///  指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</param>
    ///  <param name="left">
    ///  一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="liftToNull">
    ///  若要将 <see langword="true" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="true" />
    ///  ；若要将 <see langword="false" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  一个指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="binaryType" />
    ///  与二进制表达式节点不对应。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  在给定左操作数、右操作数、实现方法和类型转换函数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="binaryType">
    ///  指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</param>
    ///  <param name="left">
    ///  一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="liftToNull">
    ///  若要将 <see langword="true" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="true" />
    ///  ；若要将 <see langword="false" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  一个指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  。
    ///  只有在 <paramref name="binaryType" />
    ///  为 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />
    ///  或复合赋值时，才使用此参数。
    ///</param>
    ///<returns>
    ///  通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="binaryType" />
    ///  与二进制表达式节点不对应。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有为定义的相等运算符 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function Equal(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有为定义不等运算符<paramref name="left" />
    ///  。类型和<paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function NotEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  "大于"运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function GreaterThan(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  "小于"运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function LessThan(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  "大于或等于"运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function GreaterThanOrEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  "小于或等于"运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function LessThanOrEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，它表示仅在第一个操作数的计算结果为 <see langword="AND" />
    ///  时才计算第二个操作数的条件 <see langword="true" />
    ///  运算。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  按位 <see langword="AND" />
    ///  没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///  - 或 -
    ///  <paramref name="left" />
    ///  .类型和 <paramref name="right" />
    ///  。类型不是同一个布尔值类型。
    ///</exception>
    {class} function AndAlso(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，它表示仅在第一个操作数的计算结果为 <see langword="OR" />
    ///  时才计算第二个操作数的条件 <see langword="false" />
    ///  运算。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  按位 <see langword="OR" />
    ///  没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///  - 或 -
    ///  <paramref name="left" />
    ///  .类型和 <paramref name="right" />
    ///  。类型不是同一个布尔值类型。
    ///</exception>
    {class} function OrElse(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性 <paramref name="left" />
    ///  不表示引用类型或为空值类型。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="left" />
    ///  .类型和 <paramref name="right" />
    ///  。类型是不能相互转换。
    ///</exception>
    {class} function Coalesce(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  加法运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function Add(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function AddAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function AddAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  加法运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function AddChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  减法运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function Subtract(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function SubtractAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function SubtractAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  减法运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function SubtractChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  作为 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置目标的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  作为 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置目标的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  除法运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function Divide(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function DivideAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function DivideAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示算术余数运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  取模运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function Modulo(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function ModuloAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function ModuloAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  乘法运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function Multiply(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  乘法运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function MultiplyChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  左移位运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function LeftShift(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位右移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  右移位运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function RightShift(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  运算的 <see langword="AND" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  按位 <see langword="AND" />
    ///  没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function &And(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function AndAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function AndAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  运算的 <see langword="OR" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  按位 <see langword="OR" />
    ///  没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function &Or(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function OrAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function OrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，创建一个表示按位 <see langword="XOR" />
    ///  运算的 op_ExclusiveOr。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see langword="XOR" />
    ///  没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function ExclusiveOr(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示对数进行幂运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有为定义求幂运算符 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///  - 或 -
    ///  <paramref name="left" />
    ///  .类型和/或 <paramref name="right" />
    ///  。类型不是 <see cref="T:System.Double" />
    ///  。
    ///</exception>
    {class} function Power(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，它表示对表达式求幂并将结果赋回给表达式。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function PowerAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，它表示对表达式求幂并将结果赋回给表达式。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function PowerAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Block(expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  ，其中包含给定表达式和特定结果类型，但不包含任何变量。
    ///</summary>
    ///  <param name="type">
    ///  块的结果类型。
    ///</param>
    ///  <param name="expressions">
    ///  块中的表达式。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  。
    ///</returns>
    {class} function Block(&type: DDN.mscorlib.DNType; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    ///<summary>
    ///  创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  此 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  将处理的 <see cref="T:System.Exception" />
    ///  的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  。
    ///</param>
    ///  <param name="body">
    ///  catch 语句的主体。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  。
    ///</returns>
    {class} function Catch(&type: DDN.mscorlib.DNType; body: DNExpression): DNCatchBlock; overload;
    ///<summary>
    ///  创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  ，其中具有对已捕获的 <see cref="T:System.Exception" />
    ///  对象的引用以便在处理程序主体中使用。
    ///</summary>
    ///  <param name="variable">
    ///  一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  ，它表示对此处理程序捕获的 <see cref="T:System.Exception" />
    ///  对象的引用。
    ///</param>
    ///  <param name="body">
    ///  catch 语句的主体。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  。
    ///</returns>
    {class} function Catch(variable: DNParameterExpression; body: DNExpression): DNCatchBlock; overload;
    ///<summary>
    ///  创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  ，其中具有 <see cref="T:System.Exception" />
    ///  筛选器，但没有对已捕获的 <see cref="T:System.Exception" />
    ///  对象的引用。
    ///</summary>
    ///  <param name="type">
    ///  此 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  将处理的 <see cref="T:System.Exception" />
    ///  的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  。
    ///</param>
    ///  <param name="body">
    ///  catch 语句的主体。
    ///</param>
    ///  <param name="filter"><see cref="T:System.Exception" />
    ///  筛选器的主体。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  。
    ///</returns>
    {class} function Catch(&type: DDN.mscorlib.DNType; body: DNExpression; filter: DNExpression): DNCatchBlock; overload;
    ///<summary>
    ///  创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  ，其中具有 <see cref="T:System.Exception" />
    ///  筛选器和对已捕获的 <see cref="T:System.Exception" />
    ///  对象的引用。
    ///</summary>
    ///  <param name="variable">
    ///  一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  ，它表示对此处理程序捕获的 <see cref="T:System.Exception" />
    ///  对象的引用。
    ///</param>
    ///  <param name="body">
    ///  catch 语句的主体。
    ///</param>
    ///  <param name="filter"><see cref="T:System.Exception" />
    ///  筛选器的主体。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  。
    ///</returns>
    {class} function Catch(variable: DNParameterExpression; body: DNExpression; filter: DNExpression): DNCatchBlock; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />
    ///  ，它表示带 <see langword="if" />
    ///  语句的条件块。
    ///</summary>
    ///  <param name="test">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />
    ///  。
    ///</param>
    ///  <param name="ifTrue">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />
    ///  ，并且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />
    ///  、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
    ///  属性设置为指定值。
    ///<see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />
    ///  属性设置为默认表达式，并且此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" />
    ///  的类型为 <see cref="T:System.Void" />
    ///  。
    ///</returns>
    {class} function IfThen(test: DNExpression; ifTrue: DNExpression): DNConditionalExpression;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />
    ///  ，它表示带 <see langword="if" />
    ///  和 <see langword="else" />
    ///  语句的条件块。
    ///</summary>
    ///  <param name="test">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />
    ///  。
    ///</param>
    ///  <param name="ifTrue">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
    ///  。
    ///</param>
    ///  <param name="ifFalse">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />
    ///  、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
    ///  和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />
    ///  属性设置为指定值。
    ///  此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" />
    ///  的类型为 <see cref="T:System.Void" />
    ///  。
    ///</returns>
    {class} function IfThenElse(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />
    ///  ，它把 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />
    ///  属性设置为指定值。
    ///</summary>
    ///  <param name="value">
    ///  要将 <see cref="T:System.Object" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function Constant(value: DDN.mscorlib.DNObject): DNConstantExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />
    ///  ，它把 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />
    ///  和 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为指定值。
    ///</summary>
    ///  <param name="value">
    ///  要将 <see cref="T:System.Object" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />
    ///  和 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  不是 <see langword="null" />
    ///  和 <paramref name="type" />
    ///  不能分配的动态类型从 <paramref name="value" />
    ///  。
    ///</exception>
    {class} function Constant(value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DNConstantExpression; overload;
    ///<summary>
    ///  创建一个具有指定跨度的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  。
    ///</summary>
    ///  <param name="document">
    ///  表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  。
    ///</param>
    ///  <param name="startLine">
    ///  此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  的起始行。
    ///  必须大于 0。
    ///</param>
    ///  <param name="startColumn">
    ///  此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  的起始列。
    ///  必须大于 0。
    ///</param>
    ///  <param name="endLine">
    ///  此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  的结束行。
    ///  必须大于或等于起始行。
    ///</param>
    ///  <param name="endColumn">
    ///  此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  的结束列。
    ///  如果结束行与起始行相同，则它必须大于或等于起始列。
    ///  任何情况下都必须大于 0。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  的一个实例。
    ///</returns>
    {class} function DebugInfo(document: DNSymbolDocumentInfo; startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32): DNDebugInfoExpression;
    ///<summary>
    ///  创建一个用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  。
    ///</summary>
    ///  <param name="document">
    ///  表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  的实例。
    ///</returns>
    {class} function ClearDebugInfo(document: DNSymbolDocumentInfo): DNDebugInfoExpression;
    ///<summary>
    ///  创建具有 <see cref="T:System.Void" />
    ///  类型的空表达式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为 <see cref="T:System.Void" />
    ///  。
    ///</returns>
    {class} function Empty: DNDefaultExpression;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />
    ///  ，<see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为指定类型。
    ///</summary>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为指定类型。
    ///</returns>
    {class} function &Default(&type: DDN.mscorlib.DNType): DNDefaultExpression;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="delegateType"><see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</param>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="arguments">
    ///  动态操作的自变量。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
    ///  、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  和一个参数绑定的动态操作。
    ///</summary>
    ///  <param name="delegateType"><see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</param>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
    ///  、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  和两个参数绑定的动态操作。
    ///</summary>
    ///  <param name="delegateType"><see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</param>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个自变量。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
    ///  、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  和三个参数绑定的动态操作。
    ///</summary>
    ///  <param name="delegateType"><see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</param>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///  <param name="arg2">
    ///  动态操作的第三个自变量。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
    ///  、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  和四个参数绑定的动态操作。
    ///</summary>
    ///  <param name="delegateType"><see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</param>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///  <param name="arg2">
    ///  动态操作的第三个参数。
    ///</param>
    ///  <param name="arg3">
    ///  动态操作的第四个自变量。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
    ///  、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="returnType">
    ///  动态表达式的结果类型。
    ///</param>
    ///  <param name="arguments">
    ///  动态操作的参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    ///<summary>
    ///  在给定值数组作为第二个参数的情况下，创建一个 <see cref="T:System.Linq.Expressions.ElementInit" />
    ///  。
    ///</summary>
    ///  <param name="addMethod">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />
    ///  。
    ///</param>
    ///  <param name="arguments">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ElementInit" />
    ///  ，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />
    ///  和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="addMethod" />
    ///  或 <paramref name="arguments" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  AddMethod 表示不是方法名为"Add"（不区分大小写）。
    ///  - 或 -
    ///  该方法 addMethod 表示不是实例方法。
    ///  - 或 -
    ///  参数不包含相同数量的方法参数的数量相同的元素表示该 addMethod。
    ///  - 或 -
    ///<see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  的一个或多个元素的属性 <paramref name="arguments" />
    ///  不能赋给该方法的相应参数的类型， <paramref name="addMethod" />
    ///  表示。
    ///</exception>
    {class} function ElementInit(addMethod: DDN.mscorlib.DNMethodInfo; arguments: TArray<DNExpression>): DNElementInit; overload;
    ///<summary>
    ///  创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 null 值。
    ///</returns>
    {class} function Break(target: DNLabelTarget): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///  可以指定在跳转时传递给标签的值。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  将在跳转时传递给关联标签的值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，此外还有将在跳转时传递给目标标签的 <paramref name="value" />
    ///  。
    ///</returns>
    {class} function Break(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为 <paramref name="type" />
    ///  。
    ///</returns>
    {class} function Break(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///  可以指定在跳转时传递给标签的值。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  将在跳转时传递给关联标签的值。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为 <paramref name="type" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />
    ///  。
    ///</returns>
    {class} function Break(target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 null 值。
    ///</returns>
    {class} function &Continue(target: DNLabelTarget): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示具有指定类型的 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为 <paramref name="type" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 null 值。
    ///</returns>
    {class} function &Continue(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Return，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 null 值。
    ///</returns>
    {class} function Return(target: DNLabelTarget): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示具有指定类型的 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Return，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为 <paramref name="type" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 null 值。
    ///</returns>
    {class} function Return(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///  可以指定在跳转时传递给标签的值。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  将在跳转时传递给关联标签的值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />
    ///  。
    ///</returns>
    {class} function Return(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示具有指定类型的 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///  可以指定在跳转时传递给标签的值。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  将在跳转时传递给关联标签的值。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为 <paramref name="type" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />
    ///  。
    ///</returns>
    {class} function Return(target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为指定值，此外还有一个在跳转时将传递给目标标签的 null 值。
    ///</returns>
    {class} function &Goto(target: DNLabelTarget): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为指定值，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为 <paramref name="type" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 null 值。
    ///</returns>
    {class} function &Goto(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///  可以指定在跳转时传递给标签的值。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  将在跳转时传递给关联标签的值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Goto，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />
    ///  。
    ///</returns>
    {class} function &Goto(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    ///<summary>
    ///  创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///  可以指定在跳转时传递给标签的值。
    ///</summary>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  将在跳转时传递给关联标签的值。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为 <paramref name="type" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />
    ///  。
    ///</returns>
    {class} function &Goto(target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function MakeIndex(instance: DNExpression; indexer: DDN.mscorlib.DNPropertyInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression;
    ///<summary>
    ///  创建一个用于访问数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />
    ///  。
    ///</summary>
    ///  <param name="array">
    ///  一个表示要编制索引的数组的表达式。
    ///</param>
    ///  <param name="indexes">
    ///  一个数组，其中包含用于为数组编制索引的表达式。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />
    ///  。
    ///</returns>
    {class} function ArrayAccess(&array: DNExpression; indexes: TArray<DNExpression>): DNIndexExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />
    ///  ，它表示对索引属性的访问。
    ///</summary>
    ///  <param name="instance">
    ///  属性所属的对象。
    ///  如果该属性为 static/shared，则此对象必须为 null。
    ///</param>
    ///  <param name="indexer">
    ///  表示要编制索引的属性的 <see cref="T:System.Reflection.PropertyInfo" />
    ///  。
    ///</param>
    ///  <param name="arguments">
    ///  用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />
    ///  。
    ///</returns>
    {class} function &Property(instance: DNExpression; indexer: DDN.mscorlib.DNPropertyInfo; arguments: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; indexer: DDN.mscorlib.DNPropertyInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />
    ///  ，它将委托或 lambda 表达式应用于一个参数表达式列表。
    ///</summary>
    ///  <param name="expression">
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  ，它表示要应用的委托或 lambda 表达式。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Linq.Expressions.Expression" />
    ///  对象的数组，这些对象表示要对其应用委托或 lambda 表达式的参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />
    ///  ，它对提供的参数应用指定的委托或 lambda 表达式。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="expression" />
    ///  .类型不表示一个委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />
    ///  。
    ///  - 或 -
    ///<see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性的元素的 <paramref name="arguments" />
    ///  不能分配给委托所表示的相应参数的类型 <paramref name="expression" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="arguments" />
    ///  不通过所表示的委托中包含的元素数目的参数列表作为 <paramref name="expression" />
    ///  。
    ///</exception>
    {class} function Invoke(expression: DNExpression; arguments: TArray<DNExpression>): DNInvocationExpression; overload;
    ///<summary>
    ///  创建一个<see cref="T:System.Linq.Expressions.LabelExpression" />
    ///  ，它表示不带默认值的标签。
    ///</summary>
    ///  <param name="target">
    ///  此 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将关联的 <see cref="T:System.Linq.Expressions.LabelExpression" />
    ///  。
    ///</param>
    ///<returns>
    ///  不带默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />
    ///  。
    ///</returns>
    {class} function &Label(target: DNLabelTarget): DNLabelExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  ，它表示具有 void 类型但没有名称的标签。
    ///</summary>
    ///<returns>
    ///  新的 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  。
    ///</returns>
    {class} function &Label: DNLabelTarget; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  ，它表示具有 void 类型和给定名称的标签。
    ///</summary>
    ///  <param name="name">
    ///  标签的名称。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  。
    ///</returns>
    {class} function &Label(name: string): DNLabelTarget; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  ，它表示具有给定类型的标签。
    ///</summary>
    ///  <param name="type">
    ///  跳转到标签时传递的值的类型。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  。
    ///</returns>
    {class} function &Label(&type: DDN.mscorlib.DNType): DNLabelTarget; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  ，它表示具有给定类型和名称的标签。
    ///</summary>
    ///  <param name="type">
    ///  跳转到标签时传递的值的类型。
    ///</param>
    ///  <param name="name">
    ///  标签的名称。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  。
    ///</returns>
    {class} function &Label(&type: DDN.mscorlib.DNType; name: string): DNLabelTarget; overload;
    ///<summary>
    ///  通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  。
    ///</summary>
    ///  <param name="body">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />
    ///  。
    ///</param>
    ///  <param name="parameters">
    ///  用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />
    ///  和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="body" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  一个或多个元素 <paramref name="parameters" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="parameters" />
    ///  包含超过 16 个元素。
    ///</exception>
    {class} function Lambda(body: DNExpression; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    ///<summary>
    ///  通过先构造一个委托类型来创建一个 LambdaExpression。
    ///</summary>
    ///  <param name="body">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />
    ///  。
    ///</param>
    ///  <param name="tailCall">
    ///  一个 <see cref="T:System.Boolean" />
    ///  ，指示在编译创建的表达式时是否将应用尾调用优化。
    ///</param>
    ///  <param name="parameters">
    ///  其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />
    ///  属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />
    ///  和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />
    ///  属性均设置为指定的值。
    ///</returns>
    {class} function Lambda(body: DNExpression; tailCall: Boolean; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    ///<summary>
    ///  通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  。
    ///  如果委托类型在编译时未知，则可以使用它。
    ///</summary>
    ///  <param name="delegateType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，它表示 lambda 的委托签名。
    ///</param>
    ///  <param name="body">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />
    ///  。
    ///</param>
    ///  <param name="parameters">
    ///  用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />
    ///  ，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />
    ///  和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="delegateType" />
    ///  或 <paramref name="body" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="parameters" />
    ///  中的一个或多个元素为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="delegateType" />
    ///  不表示一个委托类型。
    ///  - 或 -
    ///  <paramref name="body" />
    ///  .类型表示不能分配给表示的委托类型的返回类型的类型<paramref name="delegateType" />
    ///  。
    ///  - 或 -
    ///  <paramref name="parameters" />
    ///  不包含相同数量的元素所表示的委托类型的参数的列表作为<paramref name="delegateType" />
    ///  。
    ///  - 或 -
    ///<see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性的元素的<paramref name="parameters" />
    ///  不是可表示的委托类型的相应参数类型的类型从<paramref name="delegateType" />
    ///  。
    ///</exception>
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    ///<summary>
    ///  通过先构造一个委托类型来创建一个 LambdaExpression。
    ///</summary>
    ///  <param name="delegateType">
    ///  一个 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  ，它表示 lambda 的委托签名。
    ///</param>
    ///  <param name="body">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />
    ///  。
    ///</param>
    ///  <param name="tailCall">
    ///  一个 <see cref="T:System.Boolean" />
    ///  ，指示在编译创建的表达式时是否将应用尾调用优化。
    ///</param>
    ///  <param name="parameters">
    ///  其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />
    ///  属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />
    ///  和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />
    ///  属性均设置为指定的值。
    ///</returns>
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; tailCall: Boolean; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; name: string; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; name: string; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; name: string; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  对象，它表示具有特定类型参数的泛型 System.Func 委托类型。
    ///  最后一个类型参数指定已创建委托的返回类型。
    ///</summary>
    ///  <param name="typeArgs">
    ///  包含一到十七个 <see cref="T:System.Type" />
    ///  对象的数组，它指定 <see langword="System.Func" />
    ///  委托类型的类型参数。
    ///</param>
    ///<returns>
    ///  具有指定类型参数的 System.Func 委托的类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="typeArgs" />
    ///  包含少于一个或多个十七元素。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="typeArgs" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetFuncType(typeArgs: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNType;
    {class} function TryGetFuncType(typeArgs: TArray<DDN.mscorlib.DNType>; out funcType: DDN.mscorlib.DNType): Boolean;
    ///<summary>
    ///  创建一个 <see cref="T:System.Type" />
    ///  对象，它表示具有特定类型参数的泛型 System.Action 委托类型。
    ///</summary>
    ///  <param name="typeArgs">
    ///  包含多达十六个 <see cref="T:System.Type" />
    ///  对象的数组，它指定 <see langword="System.Action" />
    ///  委托类型的类型参数。
    ///</param>
    ///<returns>
    ///  具有指定类型参数的 System.Action 委托的类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="typeArgs" />
    ///  包含超过 16 个元素。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="typeArgs" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetActionType(typeArgs: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNType;
    {class} function TryGetActionType(typeArgs: TArray<DDN.mscorlib.DNType>; out actionType: DDN.mscorlib.DNType): Boolean;
    ///<summary>
    ///  创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />
    ///  。
    ///</summary>
    ///  <param name="newExpression">
    ///  要将 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />
    ///  。
    ///</param>
    ///  <param name="initializers">
    ///  用于填充 <see cref="T:System.Linq.Expressions.Expression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="newExpression" />
    ///  或 <paramref name="initializers" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  一个或多个元素 <paramref name="initializers" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newExpression" />
    ///  .类型未实现 <see cref="T:System.Collections.IEnumerable" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有名为"Add"（不区分大小写） 中声明的实例方法 <paramref name="newExpression" />
    ///  。类型或其基类型。
    ///  - 或 -
    ///  上的 add 方法 <paramref name="newExpression" />
    ///  。类型或其基类型不带一个参数。
    ///  - 或 -
    ///  表示的类型 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性的第一个元素 <paramref name="initializers" />
    ///  不能赋给上的 add 方法的参数类型 <paramref name="newExpression" />
    ///  。类型或其基类型。
    ///  - 或 -
    ///  上是否存在名为"Add"（不区分大小写） 的多个参数兼容方法 <paramref name="newExpression" />
    ///  。类型和/或其基类型。
    ///</exception>
    {class} function ListInit(newExpression: DNNewExpression; initializers: TArray<DNExpression>): DNListInitExpression; overload;
    ///<summary>
    ///  创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />
    ///  。
    ///</summary>
    ///  <param name="newExpression">
    ///  要将 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />
    ///  。
    ///</param>
    ///  <param name="addMethod">
    ///  一个 <see cref="T:System.Reflection.MethodInfo" />
    ///  ，表示带一个参数，用于将元素添加到集合中的实例方法。
    ///</param>
    ///  <param name="initializers">
    ///  用于填充 <see cref="T:System.Linq.Expressions.Expression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="newExpression" />
    ///  或 <paramref name="initializers" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  一个或多个元素 <paramref name="initializers" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newExpression" />
    ///  .类型未实现 <see cref="T:System.Collections.IEnumerable" />
    ///  。
    ///  - 或 -
    ///  <paramref name="addMethod" />
    ///  不是 <see langword="null" />
    ///  并不表示实例方法正好带一个参数的名为"Add"（不区分大小写）。
    ///  - 或 -
    ///  <paramref name="addMethod" />
    ///  不是 <see langword="null" />
    ///  所表示的类型和 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  的一个或多个元素的属性 <paramref name="initializers" />
    ///  不能赋给该方法的参数类型， <paramref name="addMethod" />
    ///  表示。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="addMethod" />
    ///  是 <see langword="null" />
    ///  上是否存在名为"Add"使用一个兼容的类型参数没有实例方法和 <paramref name="newExpression" />
    ///  。类型或其基类型。
    ///</exception>
    {class} function ListInit(newExpression: DNNewExpression; addMethod: DDN.mscorlib.DNMethodInfo; initializers: TArray<DNExpression>): DNListInitExpression; overload;
    ///<summary>
    ///  创建一个使用指定 <see cref="T:System.Linq.Expressions.ListInitExpression" />
    ///  对象来初始化集合的 <see cref="T:System.Linq.Expressions.ElementInit" />
    ///  。
    ///</summary>
    ///  <param name="newExpression">
    ///  要将 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />
    ///  。
    ///</param>
    ///  <param name="initializers">
    ///  用于填充 <see cref="T:System.Linq.Expressions.ElementInit" />
    ///  集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />
    ///  和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="newExpression" />
    ///  或 <paramref name="initializers" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="initializers" />
    ///  的一个或多个元素为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newExpression" />
    ///  .Type 不实现 <see cref="T:System.Collections.IEnumerable" />
    ///  。
    ///</exception>
    {class} function ListInit(newExpression: DNNewExpression; initializers: TArray<DNElementInit>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNListInitExpression; overload;
    ///<summary>
    ///  创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />
    ///  。
    ///</summary>
    ///  <param name="body">
    ///  循环体。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />
    ///  。
    ///</returns>
    {class} function Loop(body: DNExpression): DNLoopExpression; overload;
    ///<summary>
    ///  创建具有给定主体和中断目标的 <see cref="T:System.Linq.Expressions.LoopExpression" />
    ///  。
    ///</summary>
    ///  <param name="body">
    ///  循环体。
    ///</param>
    ///  <param name="break">
    ///  循环体使用的中断目标。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />
    ///  。
    ///</returns>
    {class} function Loop(body: DNExpression; break: DNLabelTarget): DNLoopExpression; overload;
    ///<summary>
    ///  使用属性访问器方法，创建一个表示成员初始化的 <see cref="T:System.Linq.Expressions.MemberAssignment" />
    ///  。
    ///</summary>
    ///  <param name="propertyAccessor">
    ///  一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.MemberAssignment" />
    ///  的 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />
    ///  ，<see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  属性设置为 <see cref="T:System.Reflection.PropertyInfo" />
    ///  （表示 <paramref name="propertyAccessor" />
    ///  中访问的属性），<see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />
    ///  属性设置为 <paramref name="expression" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor" />
    ///  或 <paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="propertyAccessor" />
    ///  不表示属性访问器方法。
    ///  - 或 -
    ///  <paramref name="propertyAccessor" />
    ///  访问的属性没有 <see langword="set" />
    ///  访问器。
    ///  - 或 -
    ///  不能将 <paramref name="expression" />
    ///  .Type 分配给 <paramref name="member" />
    ///  所表示的字段或属性的类型。
    ///</exception>
    {class} function Bind(propertyAccessor: DDN.mscorlib.DNMethodInfo; expression: DNExpression): DNMemberAssignment; overload;
    ///<summary>
    ///  创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  字段的包含对象。
    ///  对于静态字段，这可以为 null。
    ///</param>
    ///  <param name="type">
    ///  包含字段的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///  <param name="fieldName">
    ///  要访问的字段。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</returns>
    {class} function Field(expression: DNExpression; &type: DDN.mscorlib.DNType; fieldName: string): DNMemberExpression; overload;
    ///<summary>
    ///  创建一个访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  属性的包含对象。
    ///  对于静态属性，这可以为 null。
    ///</param>
    ///  <param name="type">
    ///  包含属性的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///  <param name="propertyName">
    ///  要访问的属性。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</returns>
    {class} function &Property(expression: DNExpression; &type: DDN.mscorlib.DNType; propertyName: string): DNMemberExpression; overload;
    ///<summary>
    ///  使用属性访问器方法创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  。
    ///  对于静态属性，这可以为 null。
    ///</param>
    ///  <param name="propertyAccessor">
    ///  表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />
    ///  ，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  属性设置为 <paramref name="expression" />
    ///  ，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />
    ///  属性设置为表示在 <see cref="T:System.Reflection.PropertyInfo" />
    ///  中访问的属性的 <paramref name="propertyAccessor" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  该方法的 <paramref name="propertyAccessor" />
    ///  表示不 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中) 和 <paramref name="expression" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="expression" />
    ///  .类型不能分配给所表示的方法的声明类型 <paramref name="propertyAccessor" />
    ///  。
    ///  - 或 -
    ///  该方法的 <paramref name="propertyAccessor" />
    ///  表示不是属性访问器方法。
    ///</exception>
    {class} function &Property(expression: DNExpression; propertyAccessor: DDN.mscorlib.DNMethodInfo): DNMemberExpression; overload;
    ///<summary>
    ///  创建一个表示访问字段或属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  一个表示成员所属对象的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///  对于静态成员，这可以为 null。
    ///</param>
    ///  <param name="member">
    ///  描述要访问的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="member" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="member" />
    ///  不表示字段或属性。
    ///</exception>
    {class} function MakeMemberAccess(expression: DNExpression; member: DDN.mscorlib.DNMemberInfo): DNMemberExpression;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />
    ///  。
    ///</summary>
    ///  <param name="newExpression">
    ///  要将 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />
    ///  。
    ///</param>
    ///  <param name="bindings">
    ///  用于填充 <see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  集合的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />
    ///  和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="newExpression" />
    ///  或 <paramref name="bindings" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  属性的元素的 <paramref name="bindings" />
    ///  不表示类型的成员， <paramref name="newExpression" />
    ///  。表示类型。
    ///</exception>
    {class} function MemberInit(newExpression: DNNewExpression; bindings: TArray<DNMemberBinding>): DNMemberInitExpression; overload;
    {class} function MemberInit(newExpression: DNNewExpression; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberInitExpression; overload;
    ///<summary>
    ///  创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />
    ///  。
    ///</summary>
    ///  <param name="member">
    ///  一个 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  属性设置为与其相等的字段或属性。
    ///</param>
    ///  <param name="initializers">
    ///  用于填充 <see cref="T:System.Linq.Expressions.ElementInit" />
    ///  集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />
    ///  ，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="member" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  一个或多个元素 <paramref name="initializers" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="member" />
    ///  不表示字段或属性。
    ///  - 或 -
    ///<see cref="P:System.Reflection.FieldInfo.FieldType" />
    ///  或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />
    ///  的字段或属性， <paramref name="member" />
    ///  表示不实现 <see cref="T:System.Collections.IEnumerable" />
    ///  。
    ///</exception>
    {class} function ListBind(member: DDN.mscorlib.DNMemberInfo; initializers: TArray<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(member: DDN.mscorlib.DNMemberInfo; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNMemberListBinding; overload;
    ///<summary>
    ///  基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />
    ///  对象。
    ///</summary>
    ///  <param name="propertyAccessor">
    ///  一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///  <param name="initializers">
    ///  用于填充 <see cref="T:System.Linq.Expressions.ElementInit" />
    ///  集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />
    ///  ，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />
    ///  ，<see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  属性设置为表示在 <see cref="T:System.Reflection.MemberInfo" />
    ///  中访问的属性的 <paramref name="propertyAccessor" />
    ///  ，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />
    ///  填充了 <paramref name="initializers" />
    ///  的元素。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  一个或多个元素 <paramref name="initializers" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="propertyAccessor" />
    ///  不表示属性访问器方法。
    ///  - 或 -
    ///<see cref="P:System.Reflection.PropertyInfo.PropertyType" />
    ///  表示的方法的属性 <paramref name="propertyAccessor" />
    ///  访问不实现 <see cref="T:System.Collections.IEnumerable" />
    ///  。
    ///</exception>
    {class} function ListBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; initializers: TArray<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNMemberListBinding; overload;
    ///<summary>
    ///  创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />
    ///  。
    ///</summary>
    ///  <param name="member">
    ///  要将 <see cref="T:System.Reflection.MemberInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  。
    ///</param>
    ///  <param name="bindings">
    ///  用于填充 <see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />
    ///  ，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="member" />
    ///  或 <paramref name="bindings" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="member" />
    ///  不表示字段或属性。
    ///  - 或 -
    ///<see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  属性的元素的 <paramref name="bindings" />
    ///  不表示字段或属性的类型的成员， <paramref name="member" />
    ///  表示。
    ///</exception>
    {class} function MemberBind(member: DDN.mscorlib.DNMemberInfo; bindings: TArray<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(member: DDN.mscorlib.DNMemberInfo; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding; overload;
    ///<summary>
    ///  使用属性访问器方法创建一个表示对所访问的成员的成员进行递归初始化的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />
    ///  。
    ///</summary>
    ///  <param name="propertyAccessor">
    ///  表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///  <param name="bindings">
    ///  用于填充 <see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />
    ///  ，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />
    ///  ，<see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  属性设置为表示在 <see cref="T:System.Reflection.PropertyInfo" />
    ///  中访问的属性的 <paramref name="propertyAccessor" />
    ///  ，并且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor" />
    ///  或 <paramref name="bindings" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="propertyAccessor" />
    ///  不表示属性访问器方法。
    ///  - 或 -
    ///<see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  属性的元素的 <paramref name="bindings" />
    ///  不表示的方法访问的属性类型的成员， <paramref name="propertyAccessor" />
    ///  表示。
    ///</exception>
    {class} function MemberBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; bindings: TArray<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示对使用一个参数的 <see langword="static" />
    ///  方法（在 Visual Basic 中为 <see langword="Shared" />
    ///  方法）的调用。
    ///</summary>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="arg0">
    ///  用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 null。
    ///</exception>
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示对使用两个参数的静态方法的调用。
    ///</summary>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="arg0">
    ///  用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg1">
    ///  用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 null。
    ///</exception>
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示对使用三个参数的静态方法的调用。
    ///</summary>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="arg0">
    ///  用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg1">
    ///  用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg2">
    ///  用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 null。
    ///</exception>
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示对使用四个参数的静态方法的调用。
    ///</summary>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="arg0">
    ///  用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg1">
    ///  用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg2">
    ///  用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg3">
    ///  用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 null。
    ///</exception>
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示对使用五个参数的静态方法的调用。
    ///</summary>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="arg0">
    ///  用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg1">
    ///  用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg2">
    ///  用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg3">
    ///  用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg4">
    ///  用于表示第五个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 null。
    ///</exception>
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression; arg4: DNExpression): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示调用有参数的 <see langword="static" />
    ///  （在 Visual Basic 中为 <see langword="Shared" />
    ///  ）方法。
    ///</summary>
    ///  <param name="method"><see cref="T:System.Reflection.MethodInfo" />
    ///  表示 <see langword="static" />
    ///  （在 Visual Basic 中为 <see langword="Shared" />
    ///  ）方法，以将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  属性设置为与其相等。
    ///</param>
    ///  <param name="arguments">
    ///  用于填充 <see cref="T:System.Linq.Expressions.Expression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  中的元素数 <paramref name="arguments" />
    ///  不等于所表示的方法的参数的数目 <paramref name="method" />
    ///  。
    ///  - 或 -
    ///  一个或多个元素的 <paramref name="arguments" />
    ///  不能分配给所表示的方法的相应参数 <paramref name="method" />
    ///  。
    ///</exception>
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示调用不带参数的方法。
    ///</summary>
    ///  <param name="instance">
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  ，它指定一个实例方法调用，对于 <see langword="null" />
    ///  方法（在 Visual Basic 中为 <see langword="static" />
    ///  方法）应传递 <see langword="Shared" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="instance" />
    ///  是 <see langword="null" />
    ///  和 <paramref name="method" />
    ///  表示的实例方法。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="instance" />
    ///  .类型不能分配给所表示的方法的声明类型 <paramref name="method" />
    ///  。
    ///</exception>
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  。
    ///</summary>
    ///  <param name="instance">
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  ，它指定一个实例方法调用，对于 <see langword="null" />
    ///  方法（在 Visual Basic 中为 <see langword="static" />
    ///  方法）应传递 <see langword="Shared" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="arguments">
    ///  用于填充 <see cref="T:System.Linq.Expressions.Expression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="instance" />
    ///  是 <see langword="null" />
    ///  ，且 <paramref name="method" />
    ///  表示一种实例方法。
    ///  - 或 -
    ///  <paramref name="arguments" />
    ///  不是 <see langword="null" />
    ///  ，其中一个或多个元素是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="instance" />
    ///  .Type 不可分配给由 <paramref name="method" />
    ///  表示的方法声明类型。
    ///  - 或 -
    ///  <paramref name="arguments" />
    ///  中的元素数量与 <paramref name="method" />
    ///  表示的方法的参数数量不相等。
    ///  - 或 -
    ///  无法将 <paramref name="arguments" />
    ///  的一个或多个元素分配给由 <paramref name="method" />
    ///  表示的方法的相应参数。
    ///</exception>
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示对采用两个参数的方法的调用。
    ///</summary>
    ///  <param name="instance">
    ///  指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///  （对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null）。
    ///</param>
    ///  <param name="method">
    ///  表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///  <param name="arg0">
    ///  用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg1">
    ///  用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示对使用三个参数的方法的调用。
    ///</summary>
    ///  <param name="instance">
    ///  指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///  （对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null）。
    ///</param>
    ///  <param name="method">
    ///  表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///  <param name="arg0">
    ///  用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg1">
    ///  用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="arg2">
    ///  用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示将数组索引运算符应用到多维数组中。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Linq.Expressions.Expression" />
    ///  实例的数组 - 数组索引操作的索引。
    ///</param>
    ///  <param name="indexes">
    ///  用于填充 <see cref="T:System.Linq.Expressions.Expression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  或 <paramref name="indexes" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  .类型不表示数组类型。
    ///  - 或 -
    ///  秩 <paramref name="array" />
    ///  。类型不匹配中的元素数 <paramref name="indexes" />
    ///  。
    ///  - 或 -
    ///<see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  的一个或多个元素的属性 <paramref name="indexes" />
    ///  不表示 <see cref="T:System.Int32" />
    ///  类型。
    ///</exception>
    {class} function ArrayIndex(&array: DNExpression; indexes: TArray<DNExpression>): DNMethodCallExpression; overload;
    ///<summary>
    ///  创建一个表示创建一维数组并使用元素列表初始化该数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  一个表示数组的元素类型的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///  <param name="initializers">
    ///  用于填充 <see cref="T:System.Linq.Expressions.Expression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  或 <paramref name="initializers" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="initializers" />
    ///  的元素为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性的元素的 <paramref name="initializers" />
    ///  表示不能赋给该类型的类型 <paramref name="type" />
    ///  。
    ///</exception>
    {class} function NewArrayInit(&type: DDN.mscorlib.DNType; initializers: TArray<DNExpression>): DNNewArrayExpression; overload;
    ///<summary>
    ///  创建一个表示创建具有指定秩的数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  一个表示数组的元素类型的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///  <param name="bounds">
    ///  用于填充 <see cref="T:System.Linq.Expressions.Expression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  或 <paramref name="bounds" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="bounds" />
    ///  的元素为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性的元素的 <paramref name="bounds" />
    ///  不表示整数类型。
    ///</exception>
    {class} function NewArrayBounds(&type: DDN.mscorlib.DNType; bounds: TArray<DNExpression>): DNNewArrayExpression; overload;
    ///<summary>
    ///  创建一个表示调用不带参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  。
    ///</summary>
    ///  <param name="constructor">
    ///  要将 <see cref="T:System.Reflection.ConstructorInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="constructor" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  构造函数， <paramref name="constructor" />
    ///  表示具有至少一个参数。
    ///</exception>
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo): DNNewExpression; overload;
    ///<summary>
    ///  创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  。
    ///</summary>
    ///  <param name="constructor">
    ///  要将 <see cref="T:System.Reflection.ConstructorInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />
    ///  。
    ///</param>
    ///  <param name="arguments">
    ///  用于填充 <see cref="T:System.Linq.Expressions.Expression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />
    ///  和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="constructor" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="arguments" />
    ///  的元素为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="arguments" />
    ///  的长度与 <paramref name="constructor" />
    ///  表示的构造函数的参数数目不符。
    ///  - 或 -
    ///  <paramref name="arguments" />
    ///  的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性不能赋给 <paramref name="constructor" />
    ///  表示的构造函数的相应参数类型。
    ///</exception>
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: TArray<DNExpression>): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>; members: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNMemberInfo>): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>; members: TArray<DDN.mscorlib.DNMemberInfo>): DNNewExpression; overload;
    ///<summary>
    ///  创建一个表示调用指定类型的无参数构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  一个具有不带参数的构造函数的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />
    ///  属性设置为 <see cref="T:System.Reflection.ConstructorInfo" />
    ///  ，这表示不带指定类型的参数的构造函数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该类型的 <paramref name="type" />
    ///  表示没有无参数构造函数。
    ///</exception>
    {class} function New(&type: DDN.mscorlib.DNType): DNNewExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  节点，该节点可用于标识表达式树中的参数或变量。
    ///</summary>
    ///  <param name="type">
    ///  参数或变量的类型。
    ///</param>
    ///<returns>
    ///  具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  节点。
    ///</returns>
    {class} function Parameter(&type: DDN.mscorlib.DNType): DNParameterExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  节点，该节点可用于标识表达式树中的参数或变量。
    ///</summary>
    ///  <param name="type">
    ///  参数或变量的类型。
    ///</param>
    ///<returns>
    ///  具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  节点
    ///</returns>
    {class} function Variable(&type: DDN.mscorlib.DNType): DNParameterExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  节点，该节点可用于标识表达式树中的参数或变量。
    ///</summary>
    ///  <param name="type">
    ///  参数或变量的类型。
    ///</param>
    ///  <param name="name">
    ///  仅用于调试或打印目的的参数或变量的名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  和 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Parameter(&type: DDN.mscorlib.DNType; name: string): DNParameterExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  节点，该节点可用于标识表达式树中的参数或变量。
    ///</summary>
    ///  <param name="type">
    ///  参数或变量的类型。
    ///</param>
    ///  <param name="name">
    ///  参数或变量的名称。
    ///  此名称仅用于调试或打印目的。
    ///</param>
    ///<returns>
    ///  具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  节点。
    ///</returns>
    {class} function Variable(&type: DDN.mscorlib.DNType; name: string): DNParameterExpression; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />
    ///  的实例。
    ///</summary>
    ///  <param name="variables">
    ///  用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  集合的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />
    ///  的实例，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />
    ///  属性设置为指定的值。
    ///</returns>
    {class} function RuntimeVariables(variables: TArray<DNParameterExpression>): DNRuntimeVariablesExpression; overload;
    {class} function RuntimeVariables(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNRuntimeVariablesExpression; overload;
    ///<summary>
    ///  创建在 <see cref="T:System.Linq.Expressions.SwitchCase" />
    ///  中使用的 <see cref="T:System.Linq.Expressions.SwitchExpression" />
    ///  。
    ///</summary>
    ///  <param name="body">
    ///  分支的主体。
    ///</param>
    ///  <param name="testValues">
    ///  分支的测试值。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.SwitchCase" />
    ///  。
    ///</returns>
    {class} function SwitchCase(body: DNExpression; testValues: TArray<DNExpression>): DNSwitchCase; overload;
    ///<summary>
    ///  创建一个表示不带默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" />
    ///  语句的 <see langword="switch" />
    ///  。
    ///</summary>
    ///  <param name="switchValue">
    ///  要针对每个分支测试的值。
    ///</param>
    ///  <param name="cases">
    ///  此 switch 表达式的分支集。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />
    ///  。
    ///</returns>
    {class} function Switch(switchValue: DNExpression; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    ///<summary>
    ///  创建一个表示具有默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" />
    ///  语句的 <see langword="switch" />
    ///  。
    ///</summary>
    ///  <param name="switchValue">
    ///  要针对每个分支测试的值。
    ///</param>
    ///  <param name="defaultBody"><paramref name="switchValue" />
    ///  不匹配任何分支时，该 switch 的结果。
    ///</param>
    ///  <param name="cases">
    ///  此 switch 表达式的分支集。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />
    ///  。
    ///</returns>
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    ///<summary>
    ///  创建一个表示具有默认分支的 <see cref="T:System.Linq.Expressions.SwitchExpression" />
    ///  语句的 <see langword="switch" />
    ///  。
    ///</summary>
    ///  <param name="switchValue">
    ///  要针对每个分支测试的值。
    ///</param>
    ///  <param name="defaultBody"><paramref name="switchValue" />
    ///  不匹配任何分支时，该 switch 的结果。
    ///</param>
    ///  <param name="comparison">
    ///  要使用的相等比较方法。
    ///</param>
    ///  <param name="cases">
    ///  此 switch 表达式的分支集。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />
    ///  。
    ///</returns>
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.SwitchExpression" />
    ///  ，它表示具有默认分支的 <see langword="switch" />
    ///  语句。
    ///</summary>
    ///  <param name="type">
    ///  switch 的结果类型。
    ///</param>
    ///  <param name="switchValue">
    ///  要针对每个分支测试的值。
    ///</param>
    ///  <param name="defaultBody"><paramref name="switchValue" />
    ///  不匹配任何分支时，该 switch 的结果。
    ///</param>
    ///  <param name="comparison">
    ///  要使用的相等比较方法。
    ///</param>
    ///  <param name="cases">
    ///  此 switch 表达式的分支集。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />
    ///  。
    ///</returns>
    {class} function Switch(&type: DDN.mscorlib.DNType; switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: DDN.mscorlib.DNIEnumerable<DNSwitchCase>): DNSwitchExpression; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  的实例。
    ///</summary>
    ///  <param name="fileName">
    ///  要将 <see cref="T:System.String" />
    ///  设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  ，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function SymbolDocument(fileName: string): DNSymbolDocumentInfo; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  的实例。
    ///</summary>
    ///  <param name="fileName">
    ///  要将 <see cref="T:System.String" />
    ///  设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />
    ///  。
    ///</param>
    ///  <param name="language">
    ///  要将 <see cref="T:System.Guid" />
    ///  设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  ，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />
    ///  和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function SymbolDocument(fileName: string; language: DDN.mscorlib.DNGuid): DNSymbolDocumentInfo; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  的实例。
    ///</summary>
    ///  <param name="fileName">
    ///  要将 <see cref="T:System.String" />
    ///  设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />
    ///  。
    ///</param>
    ///  <param name="language">
    ///  要将 <see cref="T:System.Guid" />
    ///  设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />
    ///  。
    ///</param>
    ///  <param name="languageVendor">
    ///  要将 <see cref="T:System.Guid" />
    ///  设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  ，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />
    ///  、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />
    ///  和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function SymbolDocument(fileName: string; language: DDN.mscorlib.DNGuid; languageVendor: DDN.mscorlib.DNGuid): DNSymbolDocumentInfo; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  的实例。
    ///</summary>
    ///  <param name="fileName">
    ///  要将 <see cref="T:System.String" />
    ///  设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />
    ///  。
    ///</param>
    ///  <param name="language">
    ///  要将 <see cref="T:System.Guid" />
    ///  设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />
    ///  。
    ///</param>
    ///  <param name="languageVendor">
    ///  要将 <see cref="T:System.Guid" />
    ///  设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />
    ///  。
    ///</param>
    ///  <param name="documentType">
    ///  要将 <see cref="T:System.Guid" />
    ///  设置为与其相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  ，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />
    ///  、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />
    ///  、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />
    ///  和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function SymbolDocument(fileName: string; language: DDN.mscorlib.DNGuid; languageVendor: DDN.mscorlib.DNGuid; documentType: DDN.mscorlib.DNGuid): DNSymbolDocumentInfo; overload;
    ///<summary>
    ///  创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />
    ///  ，该 try 块包含一个 fault 块，但不包含 catch 语句。
    ///</summary>
    ///  <param name="body">
    ///  try 块的主体。
    ///</param>
    ///  <param name="fault">
    ///  fault 块的主体。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.TryExpression" />
    ///  。
    ///</returns>
    {class} function TryFault(body: DNExpression; fault: DNExpression): DNTryExpression;
    ///<summary>
    ///  创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />
    ///  ，该 try 块包含一个 finally 块，但不包含 catch 语句。
    ///</summary>
    ///  <param name="body">
    ///  try 块的主体。
    ///</param>
    ///  <param name="finally">
    ///  finally 块的主体。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.TryExpression" />
    ///  。
    ///</returns>
    {class} function TryFinally(body: DNExpression; &finally: DNExpression): DNTryExpression;
    ///<summary>
    ///  创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />
    ///  ，该 try 块包含任意数量的 catch 语句，但不包含 fault 和 finally 块。
    ///</summary>
    ///  <param name="body">
    ///  try 块的主体。
    ///</param>
    ///  <param name="handlers">
    ///  包含零个或多个 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  表达式的数组，这些表达式表示要与 try 块关联的 catch 语句。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.TryExpression" />
    ///  。
    ///</returns>
    {class} function TryCatch(body: DNExpression; handlers: TArray<DNCatchBlock>): DNTryExpression;
    ///<summary>
    ///  创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />
    ///  ，该 try 块包含任意数量的 catch 语句和一个 finally 块。
    ///</summary>
    ///  <param name="body">
    ///  try 块的主体。
    ///</param>
    ///  <param name="finally">
    ///  finally 块的主体。
    ///</param>
    ///  <param name="handlers">
    ///  包含零个或多个 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  表达式的数组，这些表达式表示要与 try 块关联的 catch 语句。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.TryExpression" />
    ///  。
    ///</returns>
    {class} function TryCatchFinally(body: DNExpression; &finally: DNExpression; handlers: TArray<DNCatchBlock>): DNTryExpression;
    ///<summary>
    ///  在给定操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="unaryType">
    ///  指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</param>
    ///  <param name="operand">
    ///  一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  指定转换的目标类型的 <see cref="T:System.Type" />
    ///  （如果不适用，则传递 <see langword="null" />
    ///  ）。
    ///</param>
    ///<returns>
    ///  通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="operand" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="unaryType" />
    ///  不对应于一元表达式节点。
    ///</exception>
    {class} function MakeUnary(unaryType: DNExpressionType; operand: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    ///<summary>
    ///  在给定操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="unaryType">
    ///  指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</param>
    ///  <param name="operand">
    ///  一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  指定转换的目标类型的 <see cref="T:System.Type" />
    ///  （如果不适用，则传递 <see langword="null" />
    ///  ）。
    ///</param>
    ///  <param name="method">
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="operand" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="unaryType" />
    ///  不对应于一元表达式节点。
    ///</exception>
    {class} function MakeUnary(unaryType: DNExpressionType; operand: DNExpression; &type: DDN.mscorlib.DNType; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有为定义一元减运算符 <paramref name="expression" />
    ///  。类型。
    ///</exception>
    {class} function Negate(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示一元正运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  一元加运算符没有为 <paramref name="expression" />
    ///  。类型。
    ///</exception>
    {class} function UnaryPlus(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有为定义一元减运算符 <paramref name="expression" />
    ///  。类型。
    ///</exception>
    {class} function NegateChecked(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位求补运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有为定义一元 not 运算符 <paramref name="expression" />
    ///  。类型。
    ///</exception>
    {class} function &Not(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  返回表达式的计算结果是否为 false。
    ///</summary>
    ///  <param name="expression">
    ///  要计算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  的一个实例。
    ///</returns>
    {class} function IsFalse(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  返回表达式的计算结果是否为 true。
    ///</summary>
    ///  <param name="expression">
    ///  要计算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  的一个实例。
    ///</returns>
    {class} function IsTrue(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  返回表示一的补数的表达式。
    ///</summary>
    ///  <param name="expression">
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  的一个实例。
    ///</returns>
    {class} function OnesComplement(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示类型转换运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  和 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  或 <paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有转换运算符定义之间 <paramref name="expression" />
    ///  。类型和 <paramref name="type" />
    ///  。
    ///</exception>
    {class} function Convert(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示在目标类型发生溢出时引发异常的转换运算。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  和 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  或 <paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有转换运算符定义之间 <paramref name="expression" />
    ///  。类型和 <paramref name="type" />
    ///  。
    ///</exception>
    {class} function ConvertChecked(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示获取一维数组的长度的表达式。
    ///</summary>
    ///  <param name="array">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  的 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />
    ///  ，<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  属性等于 <paramref name="array" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  .类型不表示数组类型。
    ///</exception>
    {class} function ArrayLength(&array: DNExpression): DNUnaryExpression;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示重新引发异常。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示重新引发异常。
    ///</returns>
    {class} function Rethrow: DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示重新引发具有给定类型的异常。
    ///</summary>
    ///  <param name="type">
    ///  表达式的新 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示重新引发异常。
    ///</returns>
    {class} function Rethrow(&type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示引发异常。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示异常的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function Throw(value: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示按 1 递增表达式值。
    ///</summary>
    ///  <param name="expression">
    ///  要递增的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function Increment(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示按 1 递减表达式值。
    ///</summary>
    ///  <param name="expression">
    ///  要递减的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function Decrement(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它将表达式递增 1 并将结果赋回给表达式。
    ///</summary>
    ///  <param name="expression">
    ///  要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function PreIncrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它将表达式递增 1 并将结果赋回给表达式。
    ///</summary>
    ///  <param name="expression">
    ///  要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function PreIncrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它将表达式递减 1 并将结果赋回给表达式。
    ///</summary>
    ///  <param name="expression">
    ///  要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function PreDecrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它将表达式递减 1 并将结果赋回给表达式。
    ///</summary>
    ///  <param name="expression">
    ///  要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function PreDecrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示将原始表达式递增 1 之后再进行表达式赋值。
    ///</summary>
    ///  <param name="expression">
    ///  要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function PostIncrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示将原始表达式递增 1 之后再进行表达式赋值。
    ///</summary>
    ///  <param name="expression">
    ///  要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function PostIncrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示将原始表达式递减 1 之后再进行表达式赋值。
    ///</summary>
    ///  <param name="expression">
    ///  要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function PostDecrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示将原始表达式递减 1 之后再进行表达式赋值。
    ///</summary>
    ///  <param name="expression">
    ///  要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function PostDecrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function Assign(left: DNExpression; right: DNExpression): DNBinaryExpression;
    ///<summary>
    ///  创建一个表示引用相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function ReferenceEqual(left: DNExpression; right: DNExpression): DNBinaryExpression;
    ///<summary>
    ///  创建一个表示不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="liftToNull">
    ///  若要将 <see langword="true" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="true" />
    ///  ；若要将 <see langword="false" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和不相等运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function NotEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示引用不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function ReferenceNotEqual(left: DNExpression; right: DNExpression): DNBinaryExpression;
    ///<summary>
    ///  创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="liftToNull">
    ///  若要将 <see langword="true" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="true" />
    ///  ；若要将 <see langword="false" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  ，它所表示的方法返回 <see langword="void" />
    ///  ，而不是 <see langword="static" />
    ///  （Visual Basic 中为 <see langword="Shared" />
    ///  ），或者并非采用两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  ，且没有为 <paramref name="left" />
    ///  类型和 <paramref name="right" />
    ///  类型定义“小于”运算符。
    ///</exception>
    {class} function LessThan(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="liftToNull">
    ///  若要将 <see langword="true" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="true" />
    ///  ；若要将 <see langword="false" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  ，它所表示的方法返回 <see langword="void" />
    ///  ，而不是 <see langword="static" />
    ///  （Visual Basic 中为 <see langword="Shared" />
    ///  ），或者并非采用两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  ，且没有为 <paramref name="left" />
    ///  .Type 和 <paramref name="right" />
    ///  .Type 定义“大于或等于”运算符。
    ///</exception>
    {class} function GreaterThanOrEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，它表示仅在第一个操作数解析为 true 时，才计算第二个操作数的条件 <see langword="AND" />
    ///  运算。
    ///  可指定实现方法。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和按位 <see langword="AND" />
    ///  没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///  - 或 -
    ///  <paramref name="method" />
    ///  是 <see langword="null" />
    ///  和 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型不是同一个布尔值类型。
    ///</exception>
    {class} function AndAlso(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，它表示仅在第一个操作数的计算结果为 <see langword="OR" />
    ///  时才计算第二个操作数的条件 <see langword="false" />
    ///  运算。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和按位 <see langword="OR" />
    ///  没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///  - 或 -
    ///  <paramref name="method" />
    ///  是 <see langword="null" />
    ///  和 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型不是同一个布尔值类型。
    ///</exception>
    {class} function OrElse(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  在给定转换函数的情况下，创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="left" />
    ///  .类型和 <paramref name="right" />
    ///  。类型是不能相互转换。
    ///  - 或 -
    ///  <paramref name="conversion" />
    ///  不是 <see langword="null" />
    ///  和 <paramref name="conversion" />
    ///  。类型为不带一个参数的委托类型。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性 <paramref name="left" />
    ///  不表示引用类型或为空值类型。
    ///  - 或 -
    ///<see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性 <paramref name="left" />
    ///  表示不能分配给委托类型的参数类型的类型 <paramref name="conversion" />
    ///  。类型。
    ///  - 或 -
    ///<see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性 <paramref name="right" />
    ///  是否不等于委托类型的返回类型 <paramref name="conversion" />
    ///  。类型。
    ///</exception>
    {class} function Coalesce(left: DNExpression; right: DNExpression; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function AddAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///  可指定实现方法。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  ，它所表示的方法返回 <see langword="void" />
    ///  ，而不是 <see langword="static" />
    ///  （Visual Basic 中为 <see langword="Shared" />
    ///  ），或者并非采用两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  ，且没有为 <paramref name="left" />
    ///  .Type 和 <paramref name="right" />
    ///  .Type 定义加法运算符。
    ///</exception>
    {class} function AddChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  ，它所表示的方法返回 <see langword="void" />
    ///  ，而不是 <see langword="static" />
    ///  （Visual Basic 中为 <see langword="Shared" />
    ///  ），或者并非采用两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  ，且没有为 <paramref name="left" />
    ///  .Type 和 <paramref name="right" />
    ///  .Type 定义减法运算符。
    ///</exception>
    {class} function Subtract(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function SubtractAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  ，它所表示的方法返回 <see langword="void" />
    ///  ，而不是 <see langword="static" />
    ///  （Visual Basic 中为 <see langword="Shared" />
    ///  ），或者并非采用两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  ，且没有为 <paramref name="left" />
    ///  .Type 和 <paramref name="right" />
    ///  .Type 定义减法运算符。
    ///</exception>
    {class} function SubtractChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///  可指定实现方法。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  ，它所表示的方法返回 <see langword="void" />
    ///  ，而不是 <see langword="static" />
    ///  （Visual Basic 中为 <see langword="Shared" />
    ///  ），或者并非采用两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  ，且没有为 <paramref name="left" />
    ///  .Type 和 <paramref name="right" />
    ///  .Type 定义除法运算符。
    ///</exception>
    {class} function Divide(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function DivideAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示算术余数运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  ，它所表示的方法返回 <see langword="void" />
    ///  ，而不是 <see langword="static" />
    ///  （Visual Basic 中为 <see langword="Shared" />
    ///  ），或者并非采用两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  ，且没有为 <paramref name="left" />
    ///  .Type 和 <paramref name="right" />
    ///  .Type 定义取模运算符。
    ///</exception>
    {class} function Modulo(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function ModuloAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和乘法运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function Multiply(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和乘法运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function MultiplyChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和 left shift 运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function LeftShift(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位右移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和右移位运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function RightShift(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  运算的 <see langword="AND" />
    ///  。
    ///  可指定实现方法。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  ，它所表示的方法返回 <see langword="void" />
    ///  ，而不是 <see langword="static" />
    ///  （Visual Basic 中为 <see langword="Shared" />
    ///  ），或者并非采用两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  ，且没有为 <paramref name="left" />
    ///  .Type 和 <paramref name="right" />
    ///  .Type 定义按位 <see langword="AND" />
    ///  运算符。
    ///</exception>
    {class} function &And(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function AndAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  运算的 <see langword="OR" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和按位 <see langword="OR" />
    ///  没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function &Or(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function OrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，创建一个表示按位 <see langword="XOR" />
    ///  运算的 op_ExclusiveOr。
    ///  可指定实现方法。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  ，它所表示的方法返回 <see langword="void" />
    ///  ，而不是 <see langword="static" />
    ///  （Visual Basic 中为 <see langword="Shared" />
    ///  ），或者并非采用两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  ，且没有为 <paramref name="left" />
    ///  .Type 和 <paramref name="right" />
    ///  .Type 定义 <see langword="XOR" />
    ///  运算符。
    ///</exception>
    {class} function ExclusiveOr(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示对数进行幂运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  ，它所表示的方法返回 <see langword="void" />
    ///  ，而不是 <see langword="static" />
    ///  （Visual Basic 中为 <see langword="Shared" />
    ///  ），或者并非采用两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  ，且没有为 <paramref name="left" />
    ///  .Type 和 <paramref name="right" />
    ///  .Type 定义幂运算符。
    ///  - 或 -
    ///  <paramref name="method" />
    ///  是 <see langword="null" />
    ///  ，且 <paramref name="left" />
    ///  .Type 和/或 <paramref name="right" />
    ///  .Type 不是 <see cref="T:System.Double" />
    ///  。
    ///</exception>
    {class} function Power(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，它表示对表达式求幂并将结果赋回给表达式。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///  <param name="conversion">
    ///  要将 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function PowerAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，它表示将数组索引运算符应用到级别一的数组中。
    ///</summary>
    ///  <param name="array">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  或 <paramref name="index" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  .类型不表示数组类型。
    ///  - 或 -
    ///  <paramref name="array" />
    ///  .类型表示其排名不为 1 的数组类型。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  .类型不表示 <see cref="T:System.Int32" />
    ///  类型。
    ///</exception>
    {class} function ArrayIndex(&array: DNExpression; index: DNExpression): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  ，其中包含两个表达式，但不包含任何变量。
    ///</summary>
    ///  <param name="arg0">
    ///  块中的第一个表达式。
    ///</param>
    ///  <param name="arg1">
    ///  块中的第二个表达式。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  。
    ///</returns>
    {class} function Block(arg0: DNExpression; arg1: DNExpression): DNBlockExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  ，其中包含三个表达式，但不包含任何变量。
    ///</summary>
    ///  <param name="arg0">
    ///  块中的第一个表达式。
    ///</param>
    ///  <param name="arg1">
    ///  块中的第二个表达式。
    ///</param>
    ///  <param name="arg2">
    ///  块中的第三个表达式。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  。
    ///</returns>
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNBlockExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  ，其中包含四个表达式，但不包含任何变量。
    ///</summary>
    ///  <param name="arg0">
    ///  块中的第一个表达式。
    ///</param>
    ///  <param name="arg1">
    ///  块中的第二个表达式。
    ///</param>
    ///  <param name="arg2">
    ///  块中的第三个表达式。
    ///</param>
    ///  <param name="arg3">
    ///  块中的第四个表达式。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  。
    ///</returns>
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNBlockExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  ，其中包含五个表达式，但不包含任何变量。
    ///</summary>
    ///  <param name="arg0">
    ///  块中的第一个表达式。
    ///</param>
    ///  <param name="arg1">
    ///  块中的第二个表达式。
    ///</param>
    ///  <param name="arg2">
    ///  块中的第三个表达式。
    ///</param>
    ///  <param name="arg3">
    ///  块中的第四个表达式。
    ///</param>
    ///  <param name="arg4">
    ///  块中的第五个表达式。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  。
    ///</returns>
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression; arg4: DNExpression): DNBlockExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  ，其中包含给定表达式，但不包含任何变量。
    ///</summary>
    ///  <param name="expressions">
    ///  块中的表达式。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />
    ///  。
    ///</returns>
    {class} function Block(expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    ///<summary>
    ///  创建一个表示具有指定元素的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  此 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  将处理的 <see cref="T:System.Exception" />
    ///  的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  。
    ///</param>
    ///  <param name="variable">
    ///  一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  ，它表示对此处理程序捕获的 <see cref="T:System.Exception" />
    ///  对象的引用。
    ///</param>
    ///  <param name="body">
    ///  catch 语句的主体。
    ///</param>
    ///  <param name="filter"><see cref="T:System.Exception" />
    ///  筛选器的主体。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  。
    ///</returns>
    {class} function MakeCatchBlock(&type: DDN.mscorlib.DNType; variable: DNParameterExpression; body: DNExpression; filter: DNExpression): DNCatchBlock;
    ///<summary>
    ///  创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />
    ///  。
    ///</summary>
    ///  <param name="test">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />
    ///  。
    ///</param>
    ///  <param name="ifTrue">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
    ///  。
    ///</param>
    ///  <param name="ifFalse">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />
    ///  、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
    ///  和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="test" />
    ///  、<paramref name="ifTrue" />
    ///  或 <paramref name="ifFalse" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="test" />
    ///  .类型不是 <see cref="T:System.Boolean" />
    ///  。
    ///  - 或 -
    ///  <paramref name="ifTrue" />
    ///  .类型不等同于 <paramref name="ifFalse" />
    ///  。类型。
    ///</exception>
    {class} function Condition(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression; overload;
    ///<summary>
    ///  创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />
    ///  。
    ///</summary>
    ///  <param name="test">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />
    ///  。
    ///</param>
    ///  <param name="ifTrue">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
    ///  。
    ///</param>
    ///  <param name="ifFalse">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />
    ///  、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
    ///  和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function Condition(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression; &type: DDN.mscorlib.DNType): DNConditionalExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="returnType">
    ///  动态表达式的结果类型。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="returnType">
    ///  动态表达式的结果类型。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="returnType">
    ///  动态表达式的结果类型。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///  <param name="arg2">
    ///  动态操作的第三个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="returnType">
    ///  动态表达式的结果类型。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///  <param name="arg2">
    ///  动态操作的第三个参数。
    ///</param>
    ///  <param name="arg3">
    ///  动态操作的第四个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function ElementInit(addMethod: DDN.mscorlib.DNMethodInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNElementInit; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，它表示指定的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" />
    ///  的跳转。
    ///  也可以指定在跳转时传递给标签的值。
    ///</summary>
    ///  <param name="kind"><see cref="T:System.Linq.Expressions.GotoExpressionKind" />
    ///  的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="target"><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  将在跳转时传递给关联标签的值。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.GotoExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />
    ///  等于 <paramref name="kind" />
    ///  ，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  属性设置为 <paramref name="target" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为 <paramref name="type" />
    ///  ，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />
    ///  。
    ///</returns>
    {class} function MakeGoto(kind: DNGotoExpressionKind; target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression;
    {class} function ArrayAccess(&array: DNExpression; indexes: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />
    ///  ，它表示对索引属性的访问。
    ///</summary>
    ///  <param name="instance">
    ///  属性所属的对象。
    ///  如果该属性为 static/shared，则此对象必须为 null。
    ///</param>
    ///  <param name="propertyName">
    ///  索引器的名称。
    ///</param>
    ///  <param name="arguments">
    ///  用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  对象的数组。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />
    ///  。
    ///</returns>
    {class} function &Property(instance: DNExpression; propertyName: string; arguments: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function Invoke(expression: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNInvocationExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.LabelExpression" />
    ///  ，它表示具有给定默认值的标签。
    ///</summary>
    ///  <param name="target">
    ///  此 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  将关联的 <see cref="T:System.Linq.Expressions.LabelExpression" />
    ///  。
    ///</param>
    ///  <param name="defaultValue">
    ///  当通过常规控制流到达标签时，此 <see cref="T:System.Linq.Expressions.LabelExpression" />
    ///  的值。
    ///</param>
    ///<returns>
    ///  具有给定默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />
    ///  。
    ///</returns>
    {class} function &Label(target: DNLabelTarget; defaultValue: DNExpression): DNLabelExpression; overload;
    ///<summary>
    ///  获取一个 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  对象，它表示具有特定类型参数的泛型 System.Func 或 System.Action 委托类型。
    ///</summary>
    ///  <param name="typeArgs">
    ///  该委托的类型参数。
    ///</param>
    ///<returns>
    ///  委托类型。
    ///</returns>
    {class} function GetDelegateType(typeArgs: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNType;
    {class} function ListInit(newExpression: DNNewExpression; initializers: DDN.mscorlib.DNIEnumerable<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; addMethod: DDN.mscorlib.DNMethodInfo; initializers: DDN.mscorlib.DNIEnumerable<DNExpression>): DNListInitExpression; overload;
    ///<summary>
    ///  创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />
    ///  。
    ///</summary>
    ///  <param name="body">
    ///  循环体。
    ///</param>
    ///  <param name="break">
    ///  循环体使用的中断目标。
    ///</param>
    ///  <param name="continue">
    ///  循环体使用的继续目标。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />
    ///  。
    ///</returns>
    {class} function Loop(body: DNExpression; break: DNLabelTarget; &continue: DNLabelTarget): DNLoopExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.MemberAssignment" />
    ///  ，它表示字段或属性的初始化。
    ///</summary>
    ///  <param name="member">
    ///  要将 <see cref="T:System.Reflection.MemberInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  。
    ///</param>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.MemberAssignment" />
    ///  的 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />
    ///  等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />
    ///  且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />
    ///  和 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="member" />
    ///  或 <paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="member" />
    ///  不表示字段或属性。
    ///  - 或 -
    ///  表示的属性 <paramref name="member" />
    ///  没有 <see langword="set" />
    ///  取值函数。
    ///  - 或 -
    ///  <paramref name="expression" />
    ///  .类型不能分配给字段或属性的类型， <paramref name="member" />
    ///  表示。
    ///</exception>
    {class} function Bind(member: DDN.mscorlib.DNMemberInfo; expression: DNExpression): DNMemberAssignment; overload;
    ///<summary>
    ///  在给定字段名称的情况下，创建一个表示访问此字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  中包含一个名为 <paramref name="fieldName" />
    ///  的字段。
    ///  对于静态字段，这可以为 null。
    ///</param>
    ///  <param name="fieldName">
    ///  要访问的字段的名称。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  的 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />
    ///  ，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  属性设置为 <paramref name="expression" />
    ///  ，<see cref="P:System.Linq.Expressions.MemberExpression.Member" />
    ///  属性设置为 <see cref="T:System.Reflection.FieldInfo" />
    ///  （表示由 <paramref name="fieldName" />
    ///  表示的字段）。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  或 <paramref name="fieldName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  没有名为字段 <paramref name="fieldName" />
    ///  中定义 <paramref name="expression" />
    ///  。类型或其基类型。
    ///</exception>
    {class} function Field(expression: DNExpression; fieldName: string): DNMemberExpression; overload;
    ///<summary>
    ///  创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  包含一个名为 <paramref name="propertyName" />
    ///  的属性。
    ///  对于静态属性，这可以为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="propertyName">
    ///  要访问的属性的名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />
    ///  ，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  属性设置为 <paramref name="expression" />
    ///  ，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />
    ///  属性设置为由 <see cref="T:System.Reflection.PropertyInfo" />
    ///  表示的属性的 <paramref name="propertyName" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  或 <paramref name="propertyName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  没有名为属性 <paramref name="propertyName" />
    ///  中定义 <paramref name="expression" />
    ///  。类型或其基类型。
    ///</exception>
    {class} function &Property(expression: DNExpression; propertyName: string): DNMemberExpression; overload;
    ///<summary>
    ///  创建一个表示访问属性或字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  包含一个名为 <paramref name="propertyOrFieldName" />
    ///  的属性或字段。
    ///  对于静态成员，这可以为 null。
    ///</param>
    ///  <param name="propertyOrFieldName">
    ///  要访问的属性或字段的名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />
    ///  ，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  属性设置为 <paramref name="expression" />
    ///  ，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />
    ///  属性设置为表示 <see cref="T:System.Reflection.PropertyInfo" />
    ///  所表示的属性或字段的 <see cref="T:System.Reflection.FieldInfo" />
    ///  或 <paramref name="propertyOrFieldName" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  或 <paramref name="propertyOrFieldName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  没有属性或字段命名为 <paramref name="propertyOrFieldName" />
    ///  中定义 <paramref name="expression" />
    ///  。类型或其基类型。
    ///</exception>
    {class} function PropertyOrField(expression: DNExpression; propertyOrFieldName: string): DNMemberExpression;
    ///<summary>
    ///  通过调用合适的工厂方法，创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示方法调用。
    ///</summary>
    ///  <param name="instance">
    ///  将搜索 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性值，查看其是否有特定方法。
    ///</param>
    ///  <param name="methodName">
    ///  方法的名称。
    ///</param>
    ///  <param name="typeArguments">
    ///  指定泛型方法的类型参数的 <see cref="T:System.Type" />
    ///  对象的数组。
    ///  当 methodName 指定非泛型方法时，此自变量应为 null。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Linq.Expressions.Expression" />
    ///  对象的数组，表示方法的参数。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  的 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />
    ///  属性等于 <paramref name="instance" />
    ///  ，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  设置为表示指定实例方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />
    ///  设置为指定参数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  或 <paramref name="methodName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  任何方法︰ 名称为 <paramref name="methodName" />
    ///  , ，其类型参数与匹配 <paramref name="typeArguments" />
    ///  , ，且参数类型匹配 <paramref name="arguments" />
    ///  中找到 <paramref name="instance" />
    ///  。类型或其基类型。
    ///  - 或 -
    ///  多个方法︰ 名称为 <paramref name="methodName" />
    ///  , ，其类型参数与匹配 <paramref name="typeArguments" />
    ///  , ，且参数类型匹配 <paramref name="arguments" />
    ///  中找到 <paramref name="instance" />
    ///  。类型或其基类型。
    ///</exception>
    {class} function Call(instance: DNExpression; methodName: string; typeArguments: TArray<DDN.mscorlib.DNType>; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    ///<summary>
    ///  通过调用合适的工厂方法，创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  ，它表示对 <see langword="static" />
    ///  （在 Visual Basic 中为 <see langword="Shared" />
    ///  ）方法的调用。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  指定包含指定的 <see langword="static" />
    ///  （在 Visual Basic 中为 <see langword="Shared" />
    ///  ）方法的类型。
    ///</param>
    ///  <param name="methodName">
    ///  方法的名称。
    ///</param>
    ///  <param name="typeArguments">
    ///  指定泛型方法的类型参数的 <see cref="T:System.Type" />
    ///  对象的数组。
    ///  当 methodName 指定非泛型方法时，此自变量应为 null。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Linq.Expressions.Expression" />
    ///  对象的数组，表示方法的参数。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.MethodCallExpression" />
    ///  的 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />
    ///  ，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />
    ///  属性设置为表示指定的 <see cref="T:System.Reflection.MethodInfo" />
    ///  （在 Visual Basic 中为 <see langword="static" />
    ///  ）方法的 <see langword="Shared" />
    ///  ，并且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />
    ///  属性设置为指定参数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  或 <paramref name="methodName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  任何方法︰ 名称为 <paramref name="methodName" />
    ///  , ，其类型参数与匹配 <paramref name="typeArguments" />
    ///  , ，且参数类型匹配 <paramref name="arguments" />
    ///  中找到 <paramref name="type" />
    ///  或其基类型。
    ///  - 或 -
    ///  多个方法︰ 名称为 <paramref name="methodName" />
    ///  , ，其类型参数与匹配 <paramref name="typeArguments" />
    ///  , ，且参数类型匹配 <paramref name="arguments" />
    ///  中找到 <paramref name="type" />
    ///  或其基类型。
    ///</exception>
    {class} function Call(&type: DDN.mscorlib.DNType; methodName: string; typeArguments: TArray<DDN.mscorlib.DNType>; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; indexes: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function NewArrayBounds(&type: DDN.mscorlib.DNType; bounds: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewArrayExpression; overload;
    {class} function SwitchCase(body: DNExpression; testValues: DDN.mscorlib.DNIEnumerable<DNExpression>): DNSwitchCase; overload;
    {class} function Switch(&type: DDN.mscorlib.DNType; switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: DDN.mscorlib.DNIEnumerable<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function MakeTry(&type: DDN.mscorlib.DNType; body: DNExpression; &finally: DNExpression; fault: DNExpression; handlers: DDN.mscorlib.DNIEnumerable<DNCatchBlock>): DNTryExpression;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" />
    ///  并且 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />
    ///  和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  或 <paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function TypeIs(expression: DNExpression; &type: DDN.mscorlib.DNType): DNTypeBinaryExpression;
    ///<summary>
    ///  创建一个比较运行时类型标识的 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
    ///  并且 <see cref="T:System.Linq.Expressions.Expression" />
    ///  和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />
    ///  属性设置为指定值。
    ///</returns>
    {class} function TypeEqual(expression: DNExpression; &type: DDN.mscorlib.DNType): DNTypeBinaryExpression;
    ///<summary>
    ///  创建一个表示算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，或者不带且只有一个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  并没有为定义一元减运算符 <paramref name="expression" />
    ///  。类型。
    ///  - 或 -
    ///  <paramref name="expression" />
    ///  .类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />
    ///  。
    ///</exception>
    {class} function Negate(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示一元正运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，或者不带且只有一个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  为未定义的一元加运算符，则 <paramref name="expression" />
    ///  。类型。
    ///  - 或 -
    ///  <paramref name="expression" />
    ///  .类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />
    ///  。
    ///</exception>
    {class} function UnaryPlus(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示进行溢出检查的算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///  可指定实现方法。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，或者不带且只有一个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  并没有为定义一元减运算符 <paramref name="expression" />
    ///  。类型。
    ///  - 或 -
    ///  <paramref name="expression" />
    ///  .类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />
    ///  。
    ///</exception>
    {class} function NegateChecked(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  返回表达式的计算结果是否为 false。
    ///</summary>
    ///  <param name="expression">
    ///  要计算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  的一个实例。
    ///</returns>
    {class} function IsFalse(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  返回表达式的计算结果是否为 true。
    ///</summary>
    ///  <param name="expression">
    ///  要计算的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  的一个实例。
    ///</returns>
    {class} function IsTrue(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  返回表示一的补数的表达式。
    ///</summary>
    ///  <param name="expression">
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  的一个实例。
    ///</returns>
    {class} function OnesComplement(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示显式引用或装箱转换的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  （如果转换失败，则提供 <see langword="null" />
    ///  ）。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  和 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  或 <paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function TypeAs(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression;
    ///<summary>
    ///  创建一个表示显式取消装箱的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要取消装箱的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  表达式的新 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  的一个实例。
    ///</returns>
    {class} function Unbox(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示在目标类型发生溢出时引发异常且为其指定实现方法的转换运算。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  、<see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  或 <paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，或者不带且只有一个参数。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有转换运算符定义之间 <paramref name="expression" />
    ///  。类型和 <paramref name="type" />
    ///  。
    ///  - 或 -
    ///  <paramref name="expression" />
    ///  .类型不能分配给所表示的方法的参数类型 <paramref name="method" />
    ///  。
    ///  - 或 -
    ///  所表示的方法的返回类型 <paramref name="method" />
    ///  不能赋给 <paramref name="type" />
    ///  。
    ///  - 或 -
    ///  <paramref name="expression" />
    ///  .类型或 <paramref name="type" />
    ///  是可以为 null 的值类型和相应的不可为 null 的值类型不等于参数类型或返回类型，分别表示的方法的 <paramref name="method" />
    ///  。
    ///</exception><exception cref="T:System.Reflection.AmbiguousMatchException">
    ///  匹配的多个方法 <paramref name="method" />
    ///  找到说明。
    ///</exception>
    {class} function ConvertChecked(expression: DNExpression; &type: DDN.mscorlib.DNType; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示具有类型 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  的常量值的表达式的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Quote(expression: DNExpression): DNUnaryExpression;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示引发具有给定类型的异常。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  表达式的新 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示异常的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function Throw(value: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示按 1 递增表达式值。
    ///</summary>
    ///  <param name="expression">
    ///  要递增的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function Increment(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示按 1 递减表达式值。
    ///</summary>
    ///  <param name="expression">
    ///  要递减的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///</returns>
    {class} function Decrement(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///  可指定实现方法。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="liftToNull">
    ///  若要将 <see langword="true" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="true" />
    ///  ；若要将 <see langword="false" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和相等运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function Equal(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///  可指定实现方法。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="liftToNull">
    ///  若要将 <see langword="true" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="true" />
    ///  ；若要将 <see langword="false" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和"大于"运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function GreaterThan(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="liftToNull">
    ///  若要将 <see langword="true" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="true" />
    ///  ；若要将 <see langword="false" />
    ///  设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  ，则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和"小于或等于"运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function LessThanOrEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    ///<summary>
    ///  创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  。
    ///  可指定实现方法。
    ///</summary>
    ///  <param name="left">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  。
    ///</param>
    ///  <param name="right">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="left" />
    ///  或 <paramref name="right" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，否则不会正好两个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  和加法运算符没有为 <paramref name="left" />
    ///  。类型和 <paramref name="right" />
    ///  。类型。
    ///</exception>
    {class} function Add(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Lambda(body: DNExpression; name: string; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    ///<summary>
    ///  创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  。
    ///  对于 <see langword="static" />
    ///  （在 Visual Basic 中为 <see langword="Shared" />
    ///  ），<paramref name="expression" />
    ///  必须是 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="field">
    ///  要将 <see cref="T:System.Reflection.FieldInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="field" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  所表示的字段 <paramref name="field" />
    ///  不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中) 和 <paramref name="expression" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="expression" />
    ///  .类型不能分配给所表示的字段的声明类型 <paramref name="field" />
    ///  。
    ///</exception>
    {class} function Field(expression: DNExpression; field: DDN.mscorlib.DNFieldInfo): DNMemberExpression; overload;
    ///<summary>
    ///  创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  。
    ///  对于静态属性，这可以为 null。
    ///</param>
    ///  <param name="property">
    ///  要将 <see cref="T:System.Reflection.PropertyInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.MemberExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="property" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  该属性， <paramref name="property" />
    ///  表示不 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中) 和 <paramref name="expression" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="expression" />
    ///  .类型不能赋给该属性的声明类型， <paramref name="property" />
    ///  表示。
    ///</exception>
    {class} function &Property(expression: DNExpression; &property: DDN.mscorlib.DNPropertyInfo): DNMemberExpression; overload;
    {class} function NewArrayInit(&type: DDN.mscorlib.DNType; initializers: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewArrayExpression; overload;
    ///<summary>
    ///  创建一个表示按位求补运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  。
    ///  可指定实现方法。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，或者不带且只有一个参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="method" />
    ///  是 <see langword="null" />
    ///  并没有为定义一元 not 运算符 <paramref name="expression" />
    ///  。类型。
    ///  - 或 -
    ///  <paramref name="expression" />
    ///  .类型 （或其对应的非可空类型的为 null 的值类型时） 不能分配给所表示的方法的参数类型 <paramref name="method" />
    ///  。
    ///</exception>
    {class} function &Not(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，它表示为其指定实现方法的转换运算。
    ///</summary>
    ///  <param name="expression">
    ///  要将 <see cref="T:System.Linq.Expressions.Expression" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  。
    ///</param>
    ///  <param name="type">
    ///  要将 <see cref="T:System.Type" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  。
    ///</param>
    ///  <param name="method">
    ///  要将 <see cref="T:System.Reflection.MethodInfo" />
    ///  属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  、<see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />
    ///  属性设置为指定值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="expression" />
    ///  或 <paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="method" />
    ///  不是 <see langword="null" />
    ///  和它表示返回的方法 <see langword="void" />
    ///  , ，不是 <see langword="static" />
    ///  (<see langword="Shared" />
    ///  在 Visual Basic 中)，或者不带且只有一个参数。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  没有转换运算符定义之间 <paramref name="expression" />
    ///  。类型和 <paramref name="type" />
    ///  。
    ///  - 或 -
    ///  <paramref name="expression" />
    ///  .类型不能分配给所表示的方法的参数类型 <paramref name="method" />
    ///  。
    ///  - 或 -
    ///  所表示的方法的返回类型 <paramref name="method" />
    ///  不能赋给 <paramref name="type" />
    ///  。
    ///  - 或 -
    ///  <paramref name="expression" />
    ///  .类型或 <paramref name="type" />
    ///  是可以为 null 的值类型和相应的不可为 null 的值类型不等于参数类型或返回类型，分别表示的方法的 <paramref name="method" />
    ///  。
    ///</exception><exception cref="T:System.Reflection.AmbiguousMatchException">
    ///  匹配的多个方法 <paramref name="method" />
    ///  找到说明。
    ///</exception>
    {class} function Convert(expression: DNExpression; &type: DDN.mscorlib.DNType; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;

  end;

  ///<summary>
  ///  提供一种基类，表示表达式树节点的类派生自该基类。
  ///  它还包含用来创建各种节点类型的 <see langword="static" />
  ///  （在 Visual Basic 中为 <see langword="Shared" />
  ///  ）工厂方法。
  ///  这是一个 <see langword="abstract" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.Expression')]
  DNExpression = interface(DDN.mscorlib.DNObject)
  ['{57071121-58D1-3F8B-AC92-8E800D171A46}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的节点类型。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  值之一。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="T:System.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNExpression = class(TDNGenericImport<DNExpressionClass, DNExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNBinaryExpressionClass = interface(DNExpressionClass)
  ['{91789D04-E372-5290-8931-82B96CC59305}']
  end;

  ///<summary>
  ///  表示具有二进制运算符的表达式。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.BinaryExpression')]
  DNBinaryExpression = interface(DNExpression)
  ['{EF49C1CA-EFE3-3547-B40F-BB563F5D10DB}']
  { getters & setters } 

    function get_CanReduce: Boolean;
    function get_Right: DNExpression;
    function get_Left: DNExpression;
    function get_Method: DDN.mscorlib.DNMethodInfo;
    function get_Conversion: DNLambdaExpression;
    function get_IsLifted: Boolean;
    function get_IsLiftedToNull: Boolean;
    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;

  { methods } 

    ///<summary>
    ///  创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
    ///  如果所有子级均相同，它将返回此表达式。
    ///</summary>
    ///  <param name="left"><see cref="P:System.Linq.Expressions.BinaryExpression.Left" />
    ///  结果属性。
    ///</param>
    ///  <param name="conversion"><see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />
    ///  结果属性。
    ///</param>
    ///  <param name="right"><see cref="P:System.Linq.Expressions.BinaryExpression.Right" />
    ///  结果属性。
    ///</param>
    ///<returns>
    ///  如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
    ///</returns>
    function Update(left: DNExpression; conversion: DNLambdaExpression; right: DNExpression): DNBinaryExpression;
    ///<summary>
    ///  将二进制表达式节点简化为更简单的表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否可以减少表达式目录树节点。
    ///</summary>
    ///<returns>
    ///  如果表达式目录树节点可以降低，否则为 false，则为 true。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
    ///<summary>
    ///  获取二元运算的右操作数。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示二元运算的右操作数。
    ///</returns>
    property Right: DNExpression read get_Right;
    ///<summary>
    ///  获取二元运算的左的操作数。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示二元运算的左的操作数。
    ///</returns>
    property Left: DNExpression read get_Left;
    ///<summary>
    ///  获取对于二元运算的实现方法。
    ///</summary>
    ///<returns>
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</returns>
    property Method: DDN.mscorlib.DNMethodInfo read get_Method;
    ///<summary>
    ///  获取由的合并或复合赋值运算的类型转换函数。
    ///</summary>
    ///<returns>
    ///  一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  。
    ///</returns>
    property Conversion: DNLambdaExpression read get_Conversion;
    ///<summary>
    ///  获取一个值，该值指示表达式目录树节点是否表示 提升 号召操作员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点表示的提升的调用;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsLifted: Boolean read get_IsLifted;
    ///<summary>
    ///  获取一个值，该值指示表达式目录树节点是否表示 提升 对其返回类型提升为可以为 null 的类型的运算符的调用。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该运算符的返回类型提升为可以为 null 的类型;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsLiftedToNull: Boolean read get_IsLiftedToNull;
    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的节点类型。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  值之一。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="T:System.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
  end;

  TDNBinaryExpression = class(TDNGenericImport<DNBinaryExpressionClass, DNBinaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNBlockExpressionClass = interface(DNExpressionClass)
  ['{9015D880-1C72-55B8-A5DD-152145139FA6}']
  end;

  ///<summary>
  ///  表示包含一个表达式序列的块，表达式中可定义变量。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.BlockExpression')]
  DNBlockExpression = interface(DNExpression)
  ['{4ADE1326-F32D-3684-A10B-F89B1981E42B}']
  { getters & setters } 

    function get_Expressions: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_Variables: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Result: DNExpression;
    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此块中的表达式。
    ///</summary>
    ///<returns>
    ///  包含此块中的所有表达式的只读集合。
    ///</returns>
    property Expressions: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Expressions;
    ///<summary>
    ///  获取在此块中定义的变量。
    ///</summary>
    ///<returns>
    ///  包含在此块中定义的所有变量的只读集合。
    ///</returns>
    property Variables: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression> read get_Variables;
    ///<summary>
    ///  获取此块中的最后一个表达式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  对象，表示此块中的最后一个表达式。
    ///</returns>
    property Result: DNExpression read get_Result;
    ///<summary>
    ///  返回此表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNBlockExpression = class(TDNGenericImport<DNBlockExpressionClass, DNBlockExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNConditionalExpressionClass = interface(DNExpressionClass)
  ['{ECB3F797-8D2F-51B3-B15A-B7347D37F725}']
  end;

  ///<summary>
  ///  表示具有条件运算符的表达式。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.ConditionalExpression')]
  DNConditionalExpression = interface(DNExpression)
  ['{452FF498-0D0D-3058-AA87-2ED4AC9A2ECB}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_Test: DNExpression;
    function get_IfTrue: DNExpression;
    function get_IfFalse: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
    ///  如果所有子级都相同，则会返回此表达式
    ///</summary>
    ///  <param name="test"><see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />
    ///  结果属性。
    ///</param>
    ///  <param name="ifTrue"><see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />
    ///  结果属性。
    ///</param>
    ///  <param name="ifFalse"><see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />
    ///  结果属性。
    ///</param>
    ///<returns>
    ///  如果没有子级发生更改，此表达式或带有更新的子级的表达式。
    ///</returns>
    function Update(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  返回此表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  获取条件运算的测试。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示条件运算的测试。
    ///</returns>
    property Test: DNExpression read get_Test;
    ///<summary>
    ///  获取要在执行测试的计算结果的表达式 <see langword="true" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  ，它表示要执行如果测试表达式 <see langword="true" />
    ///  。
    ///</returns>
    property IfTrue: DNExpression read get_IfTrue;
    ///<summary>
    ///  获取要在执行测试的计算结果的表达式 <see langword="false" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  ，它表示要执行如果测试表达式 <see langword="false" />
    ///  。
    ///</returns>
    property IfFalse: DNExpression read get_IfFalse;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNConditionalExpression = class(TDNGenericImport<DNConditionalExpressionClass, DNConditionalExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNConstantExpressionClass = interface(DNExpressionClass)
  ['{EF3717B5-F977-57DF-82AD-5D8C07442C0C}']
  end;

  ///<summary>
  ///  表示具有常数值的表达式。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.ConstantExpression')]
  DNConstantExpression = interface(DNExpression)
  ['{C0BD600C-8151-3DE1-9A18-A2FBAFA21722}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Value: DDN.mscorlib.DNObject;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取常量表达式的值。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  表示表达式的值相等。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNConstantExpression = class(TDNGenericImport<DNConstantExpressionClass, DNConstantExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDebugInfoExpressionClass = interface(DNExpressionClass)
  ['{5712692D-C598-52D5-947B-6229D1A03888}']
  end;

  ///<summary>
  ///  发出或清除调试信息的序列点。
  ///  这使调试器能够在调试时突出显示正确的源代码。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.DebugInfoExpression')]
  DNDebugInfoExpression = interface(DNExpression)
  ['{EEE86BA5-8E06-3FD9-A26A-5A6D437DBFF2}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_StartLine: Int32;
    function get_StartColumn: Int32;
    function get_EndLine: Int32;
    function get_EndColumn: Int32;
    function get_Document: DNSymbolDocumentInfo;
    function get_IsClear: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取此的起始行 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于生成包装的表达式的代码的起始行数。
    ///</returns>
    property StartLine: Int32 read get_StartLine;
    ///<summary>
    ///  获取此的起始列 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于生成包装的表达式的代码的起始列数。
    ///</returns>
    property StartColumn: Int32 read get_StartColumn;
    ///<summary>
    ///  获取此的结束行 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于生成包装的表达式的代码的结束行号。
    ///</returns>
    property EndLine: Int32 read get_EndLine;
    ///<summary>
    ///  获取此的结束列 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于生成包装的表达式的代码的结束列数。
    ///</returns>
    property EndColumn: Int32 read get_EndColumn;
    ///<summary>
    ///  获取 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  表示源代码文件。
    ///</summary>
    ///<returns>
    ///  表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />
    ///  。
    ///</returns>
    property Document: DNSymbolDocumentInfo read get_Document;
    ///<summary>
    ///  获取的值以指示如果 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  是否用于清除序列点。
    ///</summary>
    ///<returns>
    ///  True <see cref="T:System.Linq.Expressions.DebugInfoExpression" />
    ///  是否用于清除序列点，否则为 false。
    ///</returns>
    property IsClear: Boolean read get_IsClear;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDebugInfoExpression = class(TDNGenericImport<DNDebugInfoExpressionClass, DNDebugInfoExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDefaultExpressionClass = interface(DNExpressionClass)
  ['{C3CC3D36-48FE-51BA-ACE7-92FC8FB171FB}']
  end;

  ///<summary>
  ///  表示一个类型或空表达式的默认值。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.DefaultExpression')]
  DNDefaultExpression = interface(DNExpression)
  ['{703F4557-43C0-3DCF-919E-67EBF03D4644}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDefaultExpression = class(TDNGenericImport<DNDefaultExpressionClass, DNDefaultExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDynamicExpressionClass = interface(DNExpressionClass)
  ['{2163DE95-A4EB-5C77-A332-F1BC68E8DD69}']
  { static methods } 

    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="returnType">
    ///  动态表达式的结果类型。
    ///</param>
    ///  <param name="arguments">
    ///  动态操作的参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="returnType">
    ///  动态表达式的结果类型。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="returnType">
    ///  动态表达式的结果类型。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="returnType">
    ///  动态表达式的结果类型。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///  <param name="arg2">
    ///  动态操作的第三个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="returnType">
    ///  动态表达式的结果类型。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///  <param name="arg2">
    ///  动态操作的第三个参数。
    ///</param>
    ///  <param name="arg3">
    ///  动态操作的第四个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  绑定的动态操作。
    ///</summary>
    ///  <param name="delegateType"><see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</param>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="arguments">
    ///  动态操作的参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
    ///  、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  和一个参数绑定的动态操作。
    ///</summary>
    ///  <param name="delegateType"><see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</param>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
    ///  、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  和两个参数绑定的动态操作。
    ///</summary>
    ///  <param name="delegateType"><see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</param>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
    ///  、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  和三个参数绑定的动态操作。
    ///</summary>
    ///  <param name="delegateType"><see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</param>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///  <param name="arg2">
    ///  动态操作的第三个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
    ///  、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    ///<summary>
    ///  创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  和四个参数绑定的动态操作。
    ///</summary>
    ///  <param name="delegateType"><see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</param>
    ///  <param name="binder">
    ///  动态操作的运行时联编程序。
    ///</param>
    ///  <param name="arg0">
    ///  动态操作的第一个参数。
    ///</param>
    ///  <param name="arg1">
    ///  动态操作的第二个参数。
    ///</param>
    ///  <param name="arg2">
    ///  动态操作的第三个参数。
    ///</param>
    ///  <param name="arg3">
    ///  动态操作的第四个参数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />
    ///  ，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />
    ///  等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />
    ///  ，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />
    ///  、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />
    ///  和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />
    ///  均设置为指定的值。
    ///</returns>
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;

  end;

  ///<summary>
  ///  表示一个动态操作。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.DynamicExpression')]
  DNDynamicExpression = interface(DNExpression)
  ['{7AD50124-4068-3266-B4E7-EED07F37B8F6}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Binder: DNCallSiteBinder;
    function get_DelegateType: DDN.mscorlib.DNType;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  ，它确定动态站点的运行时行为。
    ///</summary>
    ///<returns><see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  ，它确定动态站点的运行时行为。
    ///</returns>
    property Binder: DNCallSiteBinder read get_Binder;
    ///<summary>
    ///  获取 <see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，它表示 <see cref="T:System.Runtime.CompilerServices.CallSite" />
    ///  使用的委托的类型。
    ///</returns>
    property DelegateType: DDN.mscorlib.DNType read get_DelegateType;
    ///<summary>
    ///  获取动态操作的参数。
    ///</summary>
    ///<returns>
    ///  包含动态操作参数的只读集合。
    ///</returns>
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDynamicExpression = class(TDNGenericImport<DNDynamicExpressionClass, DNDynamicExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNGotoExpressionClass = interface(DNExpressionClass)
  ['{FB63F368-4E06-5FE6-B0E1-E909CFF59E51}']
  end;

  ///<summary>
  ///  表示无条件跳转。
  ///  这包括返回语句，break 和 continue 语句以及其他跳转。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.GotoExpression')]
  DNGotoExpression = interface(DNExpression)
  ['{F0DC023B-24DC-3A7F-A928-1F1A05E03124}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Value: DNExpression;
    function get_Target: DNLabelTarget;
    function get_Kind: DNGotoExpressionKind;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
    ///  如果所有子级均相同，它将返回此表达式。
    ///</summary>
    ///  <param name="target"><see cref="P:System.Linq.Expressions.GotoExpression.Target" />
    ///  结果属性。
    ///</param>
    ///  <param name="value"><see cref="P:System.Linq.Expressions.GotoExpression.Value" />
    ///  结果属性。
    ///</param>
    ///<returns>
    ///  如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
    ///</returns>
    function Update(target: DNLabelTarget; value: DNExpression): DNGotoExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.GotoExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  如果目标的类型 System.Void，值将传递到目标，则为 null。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  对象表示的值传递给目标或 null。
    ///</returns>
    property Value: DNExpression read get_Value;
    ///<summary>
    ///  在此节点可以跳转至目标标签。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  对象，表示此节点的目标标签。
    ///</returns>
    property Target: DNLabelTarget read get_Target;
    ///<summary>
    ///  "Go to"的表达式的种类。
    ///  提供信息为目的。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.GotoExpressionKind" />
    ///  对象，表示"go to"的表达式的种类。
    ///</returns>
    property Kind: DNGotoExpressionKind read get_Kind;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNGotoExpression = class(TDNGenericImport<DNGotoExpressionClass, DNGotoExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNIndexExpressionClass = interface(DNExpressionClass)
  ['{37E35E28-53CF-5BA3-81FC-0316EDAEEB11}']
  end;

  ///<summary>
  ///  表示对一个属性或数组进行索引。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.IndexExpression')]
  DNIndexExpression = interface(DNExpression)
  ['{79C65FB9-134E-37BC-9028-657D7B399EA3}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_Object: DNExpression;
    function get_Indexer: DDN.mscorlib.DNPropertyInfo;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(&object: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.IndexExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  要编制索引的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.Expression" />
    ///  ，表示要编制索引的对象。
    ///</returns>
    property &Object: DNExpression read get_Object;
    ///<summary>
    ///  如果表达式表示索引属性，则获取属性的 <see cref="T:System.Reflection.PropertyInfo" />
    ///  ，否则返回 null。
    ///</summary>
    ///<returns>
    ///  如果表达式表示索引属性，则为属性的 <see cref="T:System.Reflection.PropertyInfo" />
    ///  ，否则为 null。
    ///</returns>
    property Indexer: DDN.mscorlib.DNPropertyInfo read get_Indexer;
    ///<summary>
    ///  获取将用于为属性或数组编制索引的参数。
    ///</summary>
    ///<returns>
    ///  包含将用于为属性或数组编制索引的参数的只读集合。
    ///</returns>
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNIndexExpression = class(TDNGenericImport<DNIndexExpressionClass, DNIndexExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNInvocationExpressionClass = interface(DNExpressionClass)
  ['{6FE15B6C-70A0-5BE1-B599-8CF4669D5EFE}']
  end;

  ///<summary>
  ///  表示一个将委托或 lambda 表达式应用到一个自变量表达式列表的表达式。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.InvocationExpression')]
  DNInvocationExpression = interface(DNExpression)
  ['{0704CC69-1CAB-396D-B00D-6485524D2E5E}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Expression: DNExpression;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNInvocationExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取要应用的委托或 lambda 表达式。
    ///</summary>
    ///<returns>
    ///  表示要应用的委托的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</returns>
    property Expression: DNExpression read get_Expression;
    ///<summary>
    ///  获取应用委托或 lambda 表达式的参数。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  ，表示应用委托的参数。
    ///</returns>
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNInvocationExpression = class(TDNGenericImport<DNInvocationExpressionClass, DNInvocationExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLabelExpressionClass = interface(DNExpressionClass)
  ['{2DBE2271-8658-54FC-85A1-1A78FA90064F}']
  end;

  ///<summary>
  ///  表示一个标签，可以放置在任何 <see cref="T:System.Linq.Expressions.Expression" />
  ///  上下文。
  ///  如果它跳转到，它会提供相应的值 <see cref="T:System.Linq.Expressions.GotoExpression" />
  ///  。
  ///  否则，它接收中的值 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />
  ///  。
  ///  如果 <see cref="T:System.Type" />
  ///  等于 System.Void，则应提供任何值。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.LabelExpression')]
  DNLabelExpression = interface(DNExpression)
  ['{38BFD387-4AC0-3CAA-A98A-BC27F1F06A33}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Target: DNLabelTarget;
    function get_DefaultValue: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
    ///  如果所有子级均相同，它将返回此表达式。
    ///</summary>
    ///  <param name="target"><see cref="P:System.Linq.Expressions.LabelExpression.Target" />
    ///  结果属性。
    ///</param>
    ///  <param name="defaultValue"><see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />
    ///  结果属性
    ///</param>
    ///<returns>
    ///  如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
    ///</returns>
    function Update(target: DNLabelTarget; defaultValue: DNExpression): DNLabelExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LabelExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的节点类型。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  此标签相关联。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  此标签相关联。
    ///</returns>
    property Target: DNLabelTarget read get_Target;
    ///<summary>
    ///  值 <see cref="T:System.Linq.Expressions.LabelExpression" />
    ///  当通过常规控制流到达标签时 （例如，不跳转到）。
    ///</summary>
    ///<returns>
    ///  表示值的表达式对象 <see cref="T:System.Linq.Expressions.LabelExpression" />
    ///  。
    ///</returns>
    property DefaultValue: DNExpression read get_DefaultValue;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLabelExpression = class(TDNGenericImport<DNLabelExpressionClass, DNLabelExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLambdaExpressionClass = interface(DNExpressionClass)
  ['{C1E95244-8A29-56DE-99C1-794A0DF61F66}']
  end;

  ///<summary>
  ///  介绍 lambda 表达式。
  ///  它捕获一个类似于 .NET 方法主体的代码块。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.LambdaExpression')]
  DNLambdaExpression = interface(DNExpression)
  ['{251E60FA-00EA-3F31-A271-A36E70686597}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Name: string;
    function get_Body: DNExpression;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_TailCall: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  将生成一个委托，表示 lambda 表达式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Delegate" />
    ///  ，其中包含 lambda 表达式的已编译的版本。
    ///</returns>
    function Compile: DDN.mscorlib.DNDelegate; overload;
    ///<summary>
    ///  将生成一个委托，表示 lambda 表达式。
    ///</summary>
    ///  <param name="debugInfoGenerator">
    ///  由编译器用于将标记序列点并添加批注的本地变量的调试信息生成器。
    ///</param>
    ///<returns>
    ///  一个包含已编译的版本的 lambda 的委托。
    ///</returns>
    function Compile(debugInfoGenerator: DNDebugInfoGenerator): DDN.mscorlib.DNDelegate; overload;
    ///<summary>
    ///  生成表示 Lambda 表达式的已解释或已编译委托。
    ///</summary>
    ///  <param name="preferInterpretation">
    ///  如果可用，则为 <see langword="true" />
    ///  ，指示表达式应编译为已解释的形式；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个委托，表示 <see cref="T:System.Linq.Expressions.LambdaExpression" />
    ///  对象所描述的已编译 Lambda 表达式。
    ///</returns>
    function Compile(preferInterpretation: Boolean): DDN.mscorlib.DNDelegate; overload;
    ///<summary>
    ///  Lambda 将编译的方法定义。
    ///</summary>
    ///  <param name="method">
    ///  一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />
    ///  这将用于保存 lambda 的 IL。
    ///</param>
    procedure CompileToMethod(method: DDN.mscorlib.DNMethodBuilder); overload;
    ///<summary>
    ///  将方法定义和自定义调试信息编译 lambda。
    ///</summary>
    ///  <param name="method">
    ///  一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />
    ///  这将用于保存 lambda 的 IL。
    ///</param>
    ///  <param name="debugInfoGenerator">
    ///  由编译器用于将标记序列点并添加批注的本地变量的调试信息生成器。
    ///</param>
    procedure CompileToMethod(method: DDN.mscorlib.DNMethodBuilder; debugInfoGenerator: DNDebugInfoGenerator); overload;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取 lambda 表达式的参数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  的 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  对象，表示 lambda 表达式的参数。
    ///</returns>
    property Parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression> read get_Parameters;
    ///<summary>
    ///  获取 lambda 表达式的名称。
    ///</summary>
    ///<returns>
    ///  Lambda 表达式的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取 lambda 表达式的主体。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示 lambda 表达式的主体。
    ///</returns>
    property Body: DNExpression read get_Body;
    ///<summary>
    ///  获取 lambda 表达式的返回类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示 lambda 表达式的类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  获取一个值，指示是否将使用尾调用优化编译 lambda 表达式。
    ///</summary>
    ///<returns>
    ///  如果 lambda 表达式将编译用尾调用优化，否则为 false，则为 true。
    ///</returns>
    property TailCall: Boolean read get_TailCall;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLambdaExpression = class(TDNGenericImport<DNLambdaExpressionClass, DNLambdaExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionClass<TDelegate> = interface(DNLambdaExpressionClass)
  ['{F9EA9BFB-39AA-577E-B556-5B4369F5105F}']
  end;

  ///<summary>
  ///  将强类型化的 Lambda 表达式表示为表达式树形式的数据结构。
  ///  此类不能被继承。
  ///</summary>
  ///<typeparam name="TDelegate">
  ///  该委托的类型， <see cref="T:System.Linq.Expressions.Expression`1" />
  ///  表示。
  ///</typeparam>
  [DNTypeName('System.Linq.Expressions.Expression`1')]
  DNExpression<TDelegate> = interface(DNLambdaExpression)
  ['{8435ACBF-36AC-3C1A-AABD-0D2E1EE84D84}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Name: string;
    function get_Body: DNExpression;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_TailCall: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  编译表达式树由描述为可执行代码的 lambda 表达式，并生成一个委托，表示 lambda 表达式。
    ///</summary>
    ///<returns>
    ///  类型的委托 <paramref name="TDelegate" />
    ///  表示所描述的已编译的 lambda 表达式 <see cref="T:System.Linq.Expressions.Expression`1" />
    ///  。
    ///</returns>
    function Compile: TDelegate; overload;
    ///<summary>
    ///  将生成一个委托，表示 lambda 表达式。
    ///</summary>
    ///  <param name="debugInfoGenerator">
    ///  由编译器用于将标记序列点并添加批注的本地变量的调试信息生成器。
    ///</param>
    ///<returns>
    ///  一个包含已编译的版本的 lambda 的委托。
    ///</returns>
    function Compile(debugInfoGenerator: DNDebugInfoGenerator): TDelegate; overload;
    ///<summary>
    ///  将表达式树描述的 Lambda 表达式编译为已解释或已编译的代码，并生成表示该 Lambda 表达式的委托。
    ///</summary>
    ///  <param name="preferInterpretation">
    ///  如果可用，则为 <see langword="true" />
    ///  ，指示表达式应编译为已解释的形式；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个委托，表示 <see cref="T:System.Linq.Expressions.Expression`1" />
    ///  所描述的已编译 Lambda 表达式。
    ///</returns>
    function Compile(preferInterpretation: Boolean): TDelegate; overload;
    function Update(body: DNExpression; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNExpression<TDelegate>;
    ///<summary>
    ///  Lambda 将编译的方法定义。
    ///</summary>
    ///  <param name="method">
    ///  一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />
    ///  这将用于保存 lambda 的 IL。
    ///</param>
    procedure CompileToMethod(method: DDN.mscorlib.DNMethodBuilder); overload;
    ///<summary>
    ///  将方法定义和自定义调试信息编译 lambda。
    ///</summary>
    ///  <param name="method">
    ///  一个 <see cref="T:System.Reflection.Emit.MethodBuilder" />
    ///  这将用于保存 lambda 的 IL。
    ///</param>
    ///  <param name="debugInfoGenerator">
    ///  由编译器用于将标记序列点并添加批注的本地变量的调试信息生成器。
    ///</param>
    procedure CompileToMethod(method: DDN.mscorlib.DNMethodBuilder; debugInfoGenerator: DNDebugInfoGenerator); overload;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取 lambda 表达式的参数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  的 <see cref="T:System.Linq.Expressions.ParameterExpression" />
    ///  对象，表示 lambda 表达式的参数。
    ///</returns>
    property Parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression> read get_Parameters;
    ///<summary>
    ///  获取 lambda 表达式的名称。
    ///</summary>
    ///<returns>
    ///  Lambda 表达式的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取 lambda 表达式的主体。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示 lambda 表达式的主体。
    ///</returns>
    property Body: DNExpression read get_Body;
    ///<summary>
    ///  获取 lambda 表达式的返回类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示 lambda 表达式的类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  获取一个值，指示是否将使用尾调用优化编译 lambda 表达式。
    ///</summary>
    ///<returns>
    ///  如果 lambda 表达式将编译用尾调用优化，否则为 false，则为 true。
    ///</returns>
    property TailCall: Boolean read get_TailCall;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNExpression<TDelegate> = class(TDNGenericImport<DNExpressionClass<TDelegate>, DNExpression<TDelegate>>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNListInitExpressionClass = interface(DNExpressionClass)
  ['{BBA23C76-D195-5E65-BDF2-264DE6E09A2B}']
  end;

  ///<summary>
  ///  表示具有集合初始值设定项的构造函数调用。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.ListInitExpression')]
  DNListInitExpression = interface(DNExpression)
  ['{5D5CAF46-34F9-3338-97C5-3FE54AA65CD0}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;
    function get_NewExpression: DNNewExpression;
    function get_Initializers: DDN.mscorlib.DNReadOnlyCollection<DNElementInit>;

  { methods } 

    ///<summary>
    ///  将二进制表达式节点简化为更简单的表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    function Update(newExpression: DNNewExpression; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNListInitExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  返回此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的节点类型。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  获取一个值，该值指示是否可以减少表达式目录树节点。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
    ///<summary>
    ///  获取包含对集合类型的构造函数的调用的表达式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  ，它表示集合类型的构造函数调用。
    ///</returns>
    property NewExpression: DNNewExpression read get_NewExpression;
    ///<summary>
    ///  获取用于初始化集合的元素初始值设定项。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  的 <see cref="T:System.Linq.Expressions.ElementInit" />
    ///  表示将用来初始化集合的元素的对象。
    ///</returns>
    property Initializers: DDN.mscorlib.DNReadOnlyCollection<DNElementInit> read get_Initializers;
  end;

  TDNListInitExpression = class(TDNGenericImport<DNListInitExpressionClass, DNListInitExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLoopExpressionClass = interface(DNExpressionClass)
  ['{D480B008-237E-59A4-88F8-43FE54D6CEDE}']
  end;

  ///<summary>
  ///  表示无限循环。
  ///  可通过“中断”退出该循环。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.LoopExpression')]
  DNLoopExpression = interface(DNExpression)
  ['{84E5D5C4-651C-32E9-B4D9-6064187F72A4}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Body: DNExpression;
    function get_BreakLabel: DNLabelTarget;
    function get_ContinueLabel: DNLabelTarget;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
    ///  如果所有子级均相同，它将返回此表达式。
    ///</summary>
    ///  <param name="breakLabel"><see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" />
    ///  结果属性。
    ///</param>
    ///  <param name="continueLabel"><see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" />
    ///  结果属性。
    ///</param>
    ///  <param name="body"><see cref="P:System.Linq.Expressions.LoopExpression.Body" />
    ///  结果属性。
    ///</param>
    ///<returns>
    ///  如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
    ///</returns>
    function Update(breakLabel: DNLabelTarget; continueLabel: DNLabelTarget; body: DNExpression): DNLoopExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LoopExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取 <see cref="T:System.Linq.Expressions.Expression" />
    ///  ，它是循环的正文。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  ，它是循环的正文。
    ///</returns>
    property Body: DNExpression read get_Body;
    ///<summary>
    ///  获取 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  被用作循环体中断语句目标。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  被用作循环体中断语句目标。
    ///</returns>
    property BreakLabel: DNLabelTarget read get_BreakLabel;
    ///<summary>
    ///  获取 <see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  被用作循环体继续语句目标。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  被用作循环体继续语句目标。
    ///</returns>
    property ContinueLabel: DNLabelTarget read get_ContinueLabel;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLoopExpression = class(TDNGenericImport<DNLoopExpressionClass, DNLoopExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberExpressionClass = interface(DNExpressionClass)
  ['{6DC74673-28D7-5581-8DBC-CDA822F33036}']
  end;

  ///<summary>
  ///  表示访问字段或属性。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.MemberExpression')]
  DNMemberExpression = interface(DNExpression)
  ['{BA22043F-22FF-311E-9A9A-90D9C1E1A01B}']
  { getters & setters } 

    function get_Member: DDN.mscorlib.DNMemberInfo;
    function get_Expression: DNExpression;
    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
    ///  如果所有子级均相同，它将返回此表达式。
    ///</summary>
    ///  <param name="expression"><see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  结果属性。
    ///</param>
    ///<returns>
    ///  如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
    ///</returns>
    function Update(expression: DNExpression): DNMemberExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取字段或属性进行访问。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MemberInfo" />
    ///  表示字段或要访问属性。
    ///</returns>
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
    ///<summary>
    ///  获取包含对象的字段或属性。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示字段或属性的包含对象。
    ///</returns>
    property Expression: DNExpression read get_Expression;
    ///<summary>
    ///  返回此节点类型 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="T:System.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNMemberExpression = class(TDNGenericImport<DNMemberExpressionClass, DNMemberExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberInitExpressionClass = interface(DNExpressionClass)
  ['{002E3297-D8F2-5111-ABE8-224AE6ED1A01}']
  end;

  ///<summary>
  ///  表示调用构造函数并初始化新对象的一个或多个成员。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.MemberInitExpression')]
  DNMemberInitExpression = interface(DNExpression)
  ['{77EA09CB-545C-334F-B423-7D3B92250C76}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;
    function get_NodeType: DNExpressionType;
    function get_NewExpression: DNNewExpression;
    function get_Bindings: DDN.mscorlib.DNReadOnlyCollection<DNMemberBinding>;

  { methods } 

    ///<summary>
    ///  减少了 <see cref="T:System.Linq.Expressions.MemberInitExpression" />
    ///  为简单的表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    function Update(newExpression: DNNewExpression; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberInitExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  获取一个值，该值指示是否可以减少表达式目录树节点。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
    ///<summary>
    ///  返回表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取表示构造函数调用的表达式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Linq.Expressions.NewExpression" />
    ///  ，它表示构造函数调用。
    ///</returns>
    property NewExpression: DNNewExpression read get_NewExpression;
    ///<summary>
    ///  获取描述如何初始化新创建的对象的成员的绑定。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  的 <see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  介绍如何将成员初始化的对象。
    ///</returns>
    property Bindings: DDN.mscorlib.DNReadOnlyCollection<DNMemberBinding> read get_Bindings;
  end;

  TDNMemberInitExpression = class(TDNGenericImport<DNMemberInitExpressionClass, DNMemberInitExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMethodCallExpressionClass = interface(DNExpressionClass)
  ['{B0E34F8F-57D7-59EF-9CD6-8DEAA39D3E1A}']
  end;

  ///<summary>
  ///  表示对静态方法或实例方法的调用。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.MethodCallExpression')]
  DNMethodCallExpression = interface(DNExpression)
  ['{50FFD00B-1F28-3BC5-8B54-A6F8DEA75FF5}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_Method: DDN.mscorlib.DNMethodInfo;
    function get_Object: DNExpression;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(&object: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  获取要调用的方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示所调用的方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</returns>
    property Method: DDN.mscorlib.DNMethodInfo read get_Method;
    ///<summary>
    ///  获取表示实例方法调用的实例或静态方法调用的 null 的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示接收对象的方法的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</returns>
    property &Object: DNExpression read get_Object;
    ///<summary>
    ///  获取表示所调用方法的参数的表达式集合。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  ，表示所调用方法的参数。
    ///</returns>
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNMethodCallExpression = class(TDNGenericImport<DNMethodCallExpressionClass, DNMethodCallExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNNewArrayExpressionClass = interface(DNExpressionClass)
  ['{3223B2DB-BDFD-58ED-89CF-5A72785C09DD}']
  end;

  ///<summary>
  ///  表示创建一个新数组，并可能初始化该新数组的元素。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.NewArrayExpression')]
  DNNewArrayExpression = interface(DNExpression)
  ['{5791C72D-EF6C-3D6F-A82E-F399353297BA}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_Expressions: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewArrayExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  如果已获取数组的界限的值 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />
    ///  , ，或要初始化新的数组的元素的值的值 <see cref="P:System.Linq.Expressions.Expression.NodeType" />
    ///  属性是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  的 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示数组的界限，或者初始化值的对象。
    ///</returns>
    property Expressions: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Expressions;
    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的节点类型。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  值之一。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNNewArrayExpression = class(TDNGenericImport<DNNewArrayExpressionClass, DNNewArrayExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNNewExpressionClass = interface(DNExpressionClass)
  ['{42F1B4AA-93AD-529B-9822-0A0ECF826088}']
  end;

  ///<summary>
  ///  表示一个构造函数调用。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.NewExpression')]
  DNNewExpression = interface(DNExpression)
  ['{602E5164-1022-372F-86DC-A7F7252382F8}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Constructor: DDN.mscorlib.DNConstructorInfo;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_Members: DDN.mscorlib.DNReadOnlyCollection<DDN.mscorlib.DNMemberInfo>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.NewExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的节点类型。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取被调用的构造函数。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.ConstructorInfo" />
    ///  ，表示被调用的构造函数。
    ///</returns>
    property &Constructor: DDN.mscorlib.DNConstructorInfo read get_Constructor;
    ///<summary>
    ///  获取构造函数的参数。
    ///</summary>
    ///<returns>
    ///  一组 <see cref="T:System.Linq.Expressions.Expression" />
    ///  对象，表示构造函数的参数。
    ///</returns>
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    ///<summary>
    ///  获取可检索用构造函数参数初始化的字段值的成员。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MemberInfo" />
    ///  对象的集合，它表示可检索用构造函数参数初始化的字段值的成员。
    ///</returns>
    property Members: DDN.mscorlib.DNReadOnlyCollection<DDN.mscorlib.DNMemberInfo> read get_Members;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNNewExpression = class(TDNGenericImport<DNNewExpressionClass, DNNewExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNParameterExpressionClass = interface(DNExpressionClass)
  ['{89316903-B38F-5472-8B91-B49FC3ABA168}']
  end;

  ///<summary>
  ///  表示一个命名的参数表达式。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.ParameterExpression')]
  DNParameterExpression = interface(DNExpression)
  ['{7CA3F201-4497-3CA0-9C2A-BBA28AB7AF84}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Name: string;
    function get_IsByRef: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取参数或变量的名称。
    ///</summary>
    ///<returns>
    ///  包含参数名称的 <see cref="T:System.String" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  指示此 ParameterExpression 是作为要视作 <see langword="ByRef" />
    ///  参数。
    ///</summary>
    ///<returns>
    ///  如果此为 ParameterExpression 是 <see langword="ByRef" />
    ///  参数，否则为 false。
    ///</returns>
    property IsByRef: Boolean read get_IsByRef;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNParameterExpression = class(TDNGenericImport<DNParameterExpressionClass, DNParameterExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNRuntimeVariablesExpressionClass = interface(DNExpressionClass)
  ['{EE17A3C5-4D8E-5744-B546-BDA8839E78B7}']
  end;

  ///<summary>
  ///  一个表达式，提供变量的运行时读/写权限。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.RuntimeVariablesExpression')]
  DNRuntimeVariablesExpression = interface(DNExpression)
  ['{58A293FE-6B80-3E52-955D-611234F1FF8B}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Variables: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNRuntimeVariablesExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  变量或参数为其提供运行时访问权限。
    ///</summary>
    ///<returns>
    ///  包含运行时访问权限，将提供的参数的只读集合。
    ///</returns>
    property Variables: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression> read get_Variables;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNRuntimeVariablesExpression = class(TDNGenericImport<DNRuntimeVariablesExpressionClass, DNRuntimeVariablesExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSwitchExpressionClass = interface(DNExpressionClass)
  ['{73DBC495-6915-5348-B1D5-4D33F64D8396}']
  end;

  ///<summary>
  ///  表示通过将控制权传递给处理多个选择的控件表达式 <see cref="T:System.Linq.Expressions.SwitchCase" />
  ///  。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.SwitchExpression')]
  DNSwitchExpression = interface(DNExpression)
  ['{3D71D2B7-69F3-31EF-A771-730739C63CC3}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_SwitchValue: DNExpression;
    function get_Cases: DDN.mscorlib.DNReadOnlyCollection<DNSwitchCase>;
    function get_DefaultBody: DNExpression;
    function get_Comparison: DDN.mscorlib.DNMethodInfo;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(switchValue: DNExpression; cases: DDN.mscorlib.DNIEnumerable<DNSwitchCase>; defaultBody: DNExpression): DNSwitchExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取为该交换机的测试。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  对象，表示为该交换机测试。
    ///</returns>
    property SwitchValue: DNExpression read get_SwitchValue;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Linq.Expressions.SwitchCase" />
    ///  为该交换机的对象。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.SwitchCase" />
    ///  对象的集合。
    ///</returns>
    property Cases: DDN.mscorlib.DNReadOnlyCollection<DNSwitchCase> read get_Cases;
    ///<summary>
    ///  获取为该交换机的测试。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  对象，表示为该交换机测试。
    ///</returns>
    property DefaultBody: DNExpression read get_DefaultBody;
    ///<summary>
    ///  获取的相等比较方法，如果有的话。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MethodInfo" />
    ///  对象，表示相等比较方法。
    ///</returns>
    property Comparison: DDN.mscorlib.DNMethodInfo read get_Comparison;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNSwitchExpression = class(TDNGenericImport<DNSwitchExpressionClass, DNSwitchExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNTryExpressionClass = interface(DNExpressionClass)
  ['{1AA017DE-F994-5479-9662-FC4823BBF85A}']
  end;

  ///<summary>
  ///  表示一个 try/catch/finally/fault 块。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.TryExpression')]
  DNTryExpression = interface(DNExpression)
  ['{65F6F267-F64F-3B95-A17D-658ACBE7ED5B}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Body: DNExpression;
    function get_Handlers: DDN.mscorlib.DNReadOnlyCollection<DNCatchBlock>;
    function get_Finally: DNExpression;
    function get_Fault: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(body: DNExpression; handlers: DDN.mscorlib.DNIEnumerable<DNCatchBlock>; &finally: DNExpression; fault: DNExpression): DNTryExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.TryExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此节点类型 <see cref="T:System.Linq.Expressions.Expression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示 try 块的正文。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示 try 块的正文。
    ///</returns>
    property Body: DNExpression read get_Body;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  与 try 块关联的表达式。
    ///</summary>
    ///<returns>
    ///  集合 <see cref="T:System.Linq.Expressions.CatchBlock" />
    ///  与 try 块关联的表达式。
    ///</returns>
    property Handlers: DDN.mscorlib.DNReadOnlyCollection<DNCatchBlock> read get_Handlers;
    ///<summary>
    ///  获取 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示 finally 块。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示 finally 块。
    ///</returns>
    property &Finally: DNExpression read get_Finally;
    ///<summary>
    ///  获取 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示 fault 块。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示 fault 块。
    ///</returns>
    property Fault: DNExpression read get_Fault;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNTryExpression = class(TDNGenericImport<DNTryExpressionClass, DNTryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNTypeBinaryExpressionClass = interface(DNExpressionClass)
  ['{8174D038-D81C-5279-B0A6-515A5D091C5A}']
  end;

  ///<summary>
  ///  表示表达式和类型之间的操作。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.TypeBinaryExpression')]
  DNTypeBinaryExpression = interface(DNExpression)
  ['{F9FAAC1B-79BA-363C-A5BF-5657C5F68601}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Expression: DNExpression;
    function get_TypeOperand: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
    ///  如果所有子级均相同，它将返回此表达式。
    ///</summary>
    ///  <param name="expression"><see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />
    ///  结果属性。
    ///</param>
    ///<returns>
    ///  如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
    ///</returns>
    function Update(expression: DNExpression): DNTypeBinaryExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回表达式的节点类型。
    ///  重写此方法时，扩展节点应返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取类型测试操作的表达式操作数。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示表达式操作数的类型测试操作。
    ///</returns>
    property Expression: DNExpression read get_Expression;
    ///<summary>
    ///  获取类型测试操作的类型操作数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  ，它表示的类型操作数的类型测试操作。
    ///</returns>
    property TypeOperand: DDN.mscorlib.DNType read get_TypeOperand;
    ///<summary>
    ///  指示可将节点简化为更简单的节点。
    ///  如果返回 true，则可以调用 Reduce() 以生成简化形式。
    ///</summary>
    ///<returns>
    ///  如果可以简化节点，则为 True；否则为 false。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNTypeBinaryExpression = class(TDNGenericImport<DNTypeBinaryExpressionClass, DNTypeBinaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNUnaryExpressionClass = interface(DNExpressionClass)
  ['{0328AF99-A8C6-5FD9-B705-1CA8E4AD4D1E}']
  end;

  ///<summary>
  ///  表示具有一元运算符的表达式。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.UnaryExpression')]
  DNUnaryExpression = interface(DNExpression)
  ['{EDACA99F-7DF8-3000-9123-3B978FDD6840}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Operand: DNExpression;
    function get_Method: DDN.mscorlib.DNMethodInfo;
    function get_IsLifted: Boolean;
    function get_IsLiftedToNull: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    ///<summary>
    ///  将表达式节点简化为更简单的表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function Reduce: DNExpression;
    ///<summary>
    ///  创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
    ///  如果所有子级均相同，它将返回此表达式。
    ///</summary>
    ///  <param name="operand"><see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />
    ///  结果属性。
    ///</param>
    ///<returns>
    ///  如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
    ///</returns>
    function Update(operand: DNExpression): DNUnaryExpression;
    ///<summary>
    ///  将此节点简化为更简单的表达式。
    ///  如果 CanReduce 返回 true，则它应返回有效的表达式。
    ///  此方法可以返回本身必须简化的另一个节点。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceAndCheck: DNExpression;
    ///<summary>
    ///  将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。
    ///</summary>
    ///<returns>
    ///  已简化的表达式。
    ///</returns>
    function ReduceExtensions: DNExpression;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  表示的表达式的静态类型。
    ///</summary>
    ///<returns>
    ///  表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  返回此 <see cref="T:System.Linq.Expressions.Expression" />
    ///  的节点类型。
    ///</summary>
    ///<returns>
    ///  用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  。
    ///</returns>
    property NodeType: DNExpressionType read get_NodeType;
    ///<summary>
    ///  获取一元运算的操作数。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示一元运算的操作数。
    ///</returns>
    property Operand: DNExpression read get_Operand;
    ///<summary>
    ///  获取一元运算的实现方法。
    ///</summary>
    ///<returns>
    ///  表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</returns>
    property Method: DDN.mscorlib.DNMethodInfo read get_Method;
    ///<summary>
    ///  获取一个值，该值指示表达式目录树节点是否表示向操作员的提升的调用。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点表示的提升的调用;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsLifted: Boolean read get_IsLifted;
    ///<summary>
    ///  获取一个值，该值指示表达式目录树节点是否表示对其返回类型提升为可以为 null 的类型的运算符的提升的调用。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该运算符的返回类型提升为可以为 null 的类型;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsLiftedToNull: Boolean read get_IsLiftedToNull;
    ///<summary>
    ///  获取一个值，该值指示是否可以减少表达式目录树节点。
    ///</summary>
    ///<returns>
    ///  如果一个节点可以降低，否则为 false，则为 true。
    ///</returns>
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNUnaryExpression = class(TDNGenericImport<DNUnaryExpressionClass, DNUnaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionVisitorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A5A87F54-0024-5D85-8578-23FC429BEB96}']
  end;

  ///<summary>
  ///  表示表达式树的访问者或重写者。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.ExpressionVisitor')]
  DNExpressionVisitor = interface(DDN.mscorlib.DNObject)
  ['{C5F1042A-D382-3360-BEC4-C723A62F606B}']
  { methods } 

    function Visit(nodes: DDN.mscorlib.DNReadOnlyCollection<DNExpression>): DDN.mscorlib.DNReadOnlyCollection<DNExpression>; overload;
    ///<summary>
    ///  将调度到此类中更专用的访问方法之一的表达式。
    ///</summary>
    ///  <param name="node">
    ///  要访问的表达式。
    ///</param>
    ///<returns>
    ///  修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
    ///</returns>
    function Visit(node: DNExpression): DNExpression; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpressionVisitor = class(TDNGenericImport<DNExpressionVisitorClass, DNExpressionVisitor>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDynamicExpressionVisitorClass = interface(DNExpressionVisitorClass)
  ['{20884C4D-E4DE-5D33-A3F1-343BA050C0EF}']
  end;

  ///<summary>
  ///  表示动态表达式树的访问者或重写者。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.DynamicExpressionVisitor')]
  DNDynamicExpressionVisitor = interface(DNExpressionVisitor)
  ['{BAC48429-83CD-37B8-9921-2E962B6E6169}']
  { methods } 

    function Visit(nodes: DDN.mscorlib.DNReadOnlyCollection<DNExpression>): DDN.mscorlib.DNReadOnlyCollection<DNExpression>; overload;
    ///<summary>
    ///  将调度到此类中更专用的访问方法之一的表达式。
    ///</summary>
    ///  <param name="node">
    ///  要访问的表达式。
    ///</param>
    ///<returns>
    ///  修改后的表达式，如果它或任何子表达式已修改;否则，返回原始的表达式。
    ///</returns>
    function Visit(node: DNExpression): DNExpression; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDynamicExpressionVisitor = class(TDNGenericImport<DNDynamicExpressionVisitorClass, DNDynamicExpressionVisitor>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLabelTargetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{185F6F89-FEB4-58D0-958D-1B47C80E62A3}']
  end;

  ///<summary>
  ///  用来表示目标的 <see cref="T:System.Linq.Expressions.GotoExpression" />
  ///  。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.LabelTarget')]
  DNLabelTarget = interface(DDN.mscorlib.DNObject)
  ['{17DB098C-D299-32FE-AF65-6AE6EB0C3510}']
  { getters & setters } 

    function get_Name: string;
    function get_Type: DDN.mscorlib.DNType;

  { methods } 

    ///<summary>
    ///  返回一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取标签的名称。
    ///</summary>
    ///<returns>
    ///  标签的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  跳转到标签时传递的值的类型 (或 <see cref="T:System.Void" />
    ///  如果应该不传递任何值)。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示跳转到标签时传递的值类型或 <see cref="T:System.Void" />
    ///  如果应该不传递任何值
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
  end;

  TDNLabelTarget = class(TDNGenericImport<DNLabelTargetClass, DNLabelTarget>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6EFAAC2D-347D-58D0-BF93-4D0644A4C4F4}']
  end;

  ///<summary>
  ///  提供表示绑定的类派生自的基类，这些绑定用于对新创建对象的成员进行初始化。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.MemberBinding')]
  DNMemberBinding = interface(DDN.mscorlib.DNObject)
  ['{5F122447-E06A-345F-BBD6-1327C454854E}']
  { getters & setters } 

    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取表示绑定的类型。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.MemberBindingType" />
    ///  值之一。
    ///</returns>
    property BindingType: DNMemberBindingType read get_BindingType;
    ///<summary>
    ///  获取字段或属性进行初始化。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MemberInfo" />
    ///  表示字段或属性进行初始化。
    ///</returns>
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberBinding = class(TDNGenericImport<DNMemberBindingClass, DNMemberBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberAssignmentClass = interface(DNMemberBindingClass)
  ['{CF93536B-5AFA-598C-87D8-8698D7DF547C}']
  end;

  ///<summary>
  ///  表示对象的字段或属性的赋值操作。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.MemberAssignment')]
  DNMemberAssignment = interface(DNMemberBinding)
  ['{10882F5E-3D52-3B00-8E8B-31E352064C66}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    ///<summary>
    ///  创建一个新的表达式，它类似于此表达式，但使用所提供的子级。
    ///  如果所有子级均相同，它将返回此表达式。
    ///</summary>
    ///  <param name="expression"><see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />
    ///  结果属性。
    ///</param>
    ///<returns>
    ///  如果子级未更改，则为此表达式；否则为具有已更新子级的表达式。
    ///</returns>
    function Update(expression: DNExpression): DNMemberAssignment;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取要分配给字段或属性的表达式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  ，表示要分配给该字段或属性的值。
    ///</returns>
    property Expression: DNExpression read get_Expression;
    ///<summary>
    ///  获取表示绑定的类型。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.MemberBindingType" />
    ///  值之一。
    ///</returns>
    property BindingType: DNMemberBindingType read get_BindingType;
    ///<summary>
    ///  获取字段或属性进行初始化。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MemberInfo" />
    ///  表示字段或属性进行初始化。
    ///</returns>
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberAssignment = class(TDNGenericImport<DNMemberAssignmentClass, DNMemberAssignment>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberListBindingClass = interface(DNMemberBindingClass)
  ['{3F835938-4A72-555C-9032-2291B5EF8E60}']
  end;

  ///<summary>
  ///  表示初始化新创建对象的一个集合成员的元素。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.MemberListBinding')]
  DNMemberListBinding = interface(DNMemberBinding)
  ['{1812EE04-B6FF-3F2B-BF0F-B2DE2CAF47A8}']
  { getters & setters } 

    function get_Initializers: DDN.mscorlib.DNReadOnlyCollection<DNElementInit>;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Update(initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNMemberListBinding;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取元素初始值设定项初始化新创建的对象的集合成员。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  的 <see cref="T:System.Linq.Expressions.ElementInit" />
    ///  对象来初始化与集合成员。
    ///</returns>
    property Initializers: DDN.mscorlib.DNReadOnlyCollection<DNElementInit> read get_Initializers;
    ///<summary>
    ///  获取表示绑定的类型。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.MemberBindingType" />
    ///  值之一。
    ///</returns>
    property BindingType: DNMemberBindingType read get_BindingType;
    ///<summary>
    ///  获取字段或属性进行初始化。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MemberInfo" />
    ///  表示字段或属性进行初始化。
    ///</returns>
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberListBinding = class(TDNGenericImport<DNMemberListBindingClass, DNMemberListBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberMemberBindingClass = interface(DNMemberBindingClass)
  ['{5BFE47A0-4ED7-50BC-9161-F7D7F3CF7B51}']
  end;

  ///<summary>
  ///  表示初始化新创建对象的一个成员的成员。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.MemberMemberBinding')]
  DNMemberMemberBinding = interface(DNMemberBinding)
  ['{6792C556-7187-323F-B950-88AA750B05E9}']
  { getters & setters } 

    function get_Bindings: DDN.mscorlib.DNReadOnlyCollection<DNMemberBinding>;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Update(bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding;
    ///<summary>
    ///  返回 <see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  的的文本化表示形式。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  的文本化表示形式。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取描述如何初始化某个成员的成员的绑定。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  的 <see cref="T:System.Linq.Expressions.MemberBinding" />
    ///  描述如何初始化成员的成员的对象。
    ///</returns>
    property Bindings: DDN.mscorlib.DNReadOnlyCollection<DNMemberBinding> read get_Bindings;
    ///<summary>
    ///  获取表示绑定的类型。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.MemberBindingType" />
    ///  值之一。
    ///</returns>
    property BindingType: DNMemberBindingType read get_BindingType;
    ///<summary>
    ///  获取字段或属性进行初始化。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MemberInfo" />
    ///  表示字段或属性进行初始化。
    ///</returns>
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberMemberBinding = class(TDNGenericImport<DNMemberMemberBindingClass, DNMemberMemberBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSwitchCaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2F6A2E78-1956-5E0F-B21D-B03B28C0872C}']
  end;

  ///<summary>
  ///  表示的一种情况 <see cref="T:System.Linq.Expressions.SwitchExpression" />
  ///  。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.SwitchCase')]
  DNSwitchCase = interface(DDN.mscorlib.DNObject)
  ['{2FDBBFCB-753F-31B3-B6CA-30D8C8745E35}']
  { getters & setters } 

    function get_TestValues: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_Body: DNExpression;

  { methods } 

    ///<summary>
    ///  返回一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function ToString: string;
    function Update(testValues: DDN.mscorlib.DNIEnumerable<DNExpression>; body: DNExpression): DNSwitchCase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取这种情况下的值。
    ///  为执行选择这种情况下当 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" />
    ///  与任何这些值匹配。
    ///</summary>
    ///<returns>
    ///  此事例块的值的只读集合。
    ///</returns>
    property TestValues: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_TestValues;
    ///<summary>
    ///  获取此用例的正文。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.Expression" />
    ///  表示区分大小的块的主体对象。
    ///</returns>
    property Body: DNExpression read get_Body;
  end;

  TDNSwitchCase = class(TDNGenericImport<DNSwitchCaseClass, DNSwitchCase>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSymbolDocumentInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{57BCF7D1-74BE-577F-BC23-920583FC051E}']
  end;

  ///<summary>
  ///  存储用于发出源文件调试符号信息所必要的信息，尤其是文件名和唯一的语言标识符。
  ///</summary>
  [DNTypeName('System.Linq.Expressions.SymbolDocumentInfo')]
  DNSymbolDocumentInfo = interface(DDN.mscorlib.DNObject)
  ['{46D2036A-E6E7-39D0-BB7E-BBE171F9D132}']
  { getters & setters } 

    function get_FileName: string;
    function get_Language: DDN.mscorlib.DNGuid;
    function get_LanguageVendor: DDN.mscorlib.DNGuid;
    function get_DocumentType: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  源文件名。
    ///</summary>
    ///<returns>
    ///  表示源文件的名称的字符串。
    ///</returns>
    property FileName: string read get_FileName;
    ///<summary>
    ///  如果有的话，则返回该语言的唯一标识符。
    ///</summary>
    ///<returns>
    ///  语言的唯一标识符
    ///</returns>
    property Language: DDN.mscorlib.DNGuid read get_Language;
    ///<summary>
    ///  如果有的话，则返回的语言供应商的唯一标识符。
    ///</summary>
    ///<returns>
    ///  语言供应商的唯一标识符。
    ///</returns>
    property LanguageVendor: DDN.mscorlib.DNGuid read get_LanguageVendor;
    ///<summary>
    ///  如果有的话，则返回文档类型的唯一标识符。
    ///  默认值为一个文本文件的 GUID。
    ///</summary>
    ///<returns>
    ///  文档类型的唯一标识符。
    ///</returns>
    property DocumentType: DDN.mscorlib.DNGuid read get_DocumentType;
  end;

  TDNSymbolDocumentInfo = class(TDNGenericImport<DNSymbolDocumentInfoClass, DNSymbolDocumentInfo>) end;

  //-------------namespace: System.Linq----------------
  DNLookupClass<TKey, TElement> = interface(DNObjectClass)
  ['{9B3CD122-D1BD-5444-9134-E55394BF1FF0}']
  end;

  ///<summary>
  ///  表示键的集合，其中每个键映射到一个或多个值。
  ///</summary>
  ///<typeparam name="TKey">
  ///  中的键的类型 <see cref="T:System.Linq.Lookup`2" />
  ///  。
  ///</typeparam><typeparam name="TElement">
  ///  每个元素的类型 <see cref="T:System.Collections.Generic.IEnumerable`1" />
  ///  中的值 <see cref="T:System.Linq.Lookup`2" />
  ///  。
  ///</typeparam>
  [DNTypeName('System.Linq.Lookup`2')]
  DNLookup<TKey, TElement> = interface(DDN.mscorlib.DNIEnumerable<DNIGrouping<TKey, TElement>>)
  ['{92515A0A-5D25-32D0-BDEE-1A3C54AD88C5}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function &Contains(key: TKey): Boolean;
    ///<summary>
    ///  返回循环访问的泛型枚举器 <see cref="T:System.Linq.Lookup`2" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Linq.Lookup`2" />
    ///  的枚举数。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIGrouping<TKey, TElement>>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取对集合中的键/值数 <see cref="T:System.Linq.Lookup`2" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中的键/值集合对的数目 <see cref="T:System.Linq.Lookup`2" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNLookup<TKey, TElement> = class(TDNGenericImport<DNLookupClass<TKey, TElement>, DNLookup<TKey, TElement>>) end;

  //-------------namespace: System.Linq----------------
  DNParallelEnumerableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8DCBB390-57FB-56E7-92FC-B5316251650E}']
  { static methods } 

    ///<summary>
    ///  启用将数据源视为“已经排序”的处理方法，重写默认的将数据源视为“未经排序”的处理方法。
    ///  只可以对由 AsParallel、ParallelEnumerable.Range 和 ParallelEnumerable.Repeat 返回的非泛型序列调用 AsOrdered。
    ///</summary>
    ///  <param name="source">
    ///  输入序列。
    ///</param>
    ///<returns>
    ///  将要维护后续查询运算符中的原始排序的源序列。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="source" />
    ///  为 null 引用（在 Visual Basic 中为 Nothing）。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  时引发 <paramref name="source" />
    ///  不包含任何元素
    ///  - 或 -
    ///  如果查询的中间调用 AsOrdered。
    ///  允许它之后立即调用 <see cref="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />
    ///  , ，<see cref="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)" />
    ///  或 <see cref="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)" />
    ///  。
    ///</exception>
    {class} function AsOrdered(source: DNParallelQuery): DNParallelQuery; overload;
    ///<summary>
    ///  启用查询的并行化。
    ///</summary>
    ///  <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1" />
    ///  将转换为 <see cref="T:System.Linq.ParallelQuery" />
    ///  。
    ///</param>
    ///<returns>
    ///  作为要绑定到 ParallelEnumerable 扩展方法的 ParallelQuery 的源。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="source" />
    ///  为 null 引用（在 Visual Basic 中为 Nothing）。
    ///</exception>
    {class} function AsParallel(source: DDN.mscorlib.DNIEnumerable): DNParallelQuery; overload;
    ///<summary>
    ///  生成指定范围内的整数的并行序列。
    ///</summary>
    ///  <param name="start">
    ///  序列中第一个整数的值。
    ///</param>
    ///  <param name="count">
    ///  要生成的顺序整数的数目。
    ///</param>
    ///<returns>
    ///  C# 中的 IEnumerable&lt;Int32&gt; 或 Visual Basic 中的 IEnumerable(Of Int32)，其中包含某个范围的顺序整数。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" />
    ///  小于 0- <paramref name="start" />
    ///  + <paramref name="count" />
    ///  -1 大于 <see cref="F:System.Int32.MaxValue" />
    ///  。
    ///</exception>
    {class} function Range(start: Int32; count: Int32): DNParallelQuery<Int32>;
    {class} function Sum(source: DNParallelQuery<Int32>): Int32; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Sum(source: DNParallelQuery<Int64>): Int64; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Sum(source: DNParallelQuery<Single>): Single; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Sum(source: DNParallelQuery<Double>): Double; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Min(source: DNParallelQuery<Int32>): Int32; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Min(source: DNParallelQuery<Int64>): Int64; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Min(source: DNParallelQuery<Single>): Single; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Min(source: DNParallelQuery<Double>): Double; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Max(source: DNParallelQuery<Int32>): Int32; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Max(source: DNParallelQuery<Int64>): Int64; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Max(source: DNParallelQuery<Single>): Single; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Max(source: DNParallelQuery<Double>): Double; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Average(source: DNParallelQuery<Int32>): Double; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNParallelQuery<Int64>): Double; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNParallelQuery<Single>): Single; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Average(source: DNParallelQuery<Double>): Double; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;

  end;

  ///<summary>
  ///  提供一组用于查询实现 ParallelQuery{TSource} 的对象的方法。
  ///  此命令的并行等效 <see cref="T:System.Linq.Enumerable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Linq.ParallelEnumerable')]
  DNParallelEnumerable = interface(DDN.mscorlib.DNObject)
  ['{5A78107D-422E-3780-A055-CCB4E03850D0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNParallelEnumerable = class(TDNGenericImport<DNParallelEnumerableClass, DNParallelEnumerable>) end;

  //-------------namespace: System.Linq----------------
  DNParallelQueryClass = interface(DNObjectClass)
  ['{A0828839-51DB-5957-98EC-EC9D504C66B9}']
  end;

  ///<summary>
  ///  表示一个并行序列。
  ///</summary>
  [DNTypeName('System.Linq.ParallelQuery')]
  DNParallelQuery = interface(DDN.mscorlib.DNIEnumerable)
  ['{745887D1-9E17-3C0D-BEA2-E2A830C099D5}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNParallelQuery = class(TDNGenericImport<DNParallelQueryClass, DNParallelQuery>) end;

  //-------------namespace: System.Linq----------------
  DNParallelQueryClass<TSource> = interface(DNParallelQueryClass)
  ['{7EB052C7-DE84-575E-8ABC-0F0B6D9640FF}']
  end;

  ///<summary>
  ///  表示一个并行序列。
  ///</summary>
  ///<typeparam name="TSource">
  ///  源序列中的元素的类型。
  ///</typeparam>
  [DNTypeName('System.Linq.ParallelQuery`1')]
  DNParallelQuery<TSource> = interface(DNParallelQuery)
  ['{397C57EF-39C2-347E-BBFF-1614CD664EB4}']
  { methods } 

    ///<summary>
    ///  返回循环访问序列的枚举。
    ///</summary>
    ///<returns>
    ///  一个枚举器循环访问序列。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<TSource>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNParallelQuery<TSource> = class(TDNGenericImport<DNParallelQueryClass<TSource>, DNParallelQuery<TSource>>) end;

  //-------------namespace: System.Linq----------------
  DNOrderedParallelQueryClass<TSource> = interface(DNParallelQueryClass<TSource>)
  ['{4FD25A8E-C552-5C6F-ADAC-2C7E50CE7205}']
  end;

  ///<summary>
  ///  表示一个排序的并行序列。
  ///</summary>
  ///<typeparam name="TSource">
  ///  源集合中元素的类型。
  ///</typeparam>
  [DNTypeName('System.Linq.OrderedParallelQuery`1')]
  DNOrderedParallelQuery<TSource> = interface(DNParallelQuery<TSource>)
  ['{F20FAEEE-F8EE-33FD-912C-E445D7231FF5}']
  { methods } 

    ///<summary>
    ///  返回循环访问序列的枚举。
    ///</summary>
    ///<returns>
    ///  一个枚举器循环访问序列。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<TSource>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOrderedParallelQuery<TSource> = class(TDNGenericImport<DNOrderedParallelQueryClass<TSource>, DNOrderedParallelQuery<TSource>>) end;

  //-------------namespace: System.Linq----------------
  DNQueryableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FDBC2164-3C3A-590B-B283-30B4B8E5FDF0}']
  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.Collections.IEnumerable" />
    ///  到 <see cref="T:System.Linq.IQueryable" />
    ///  。
    ///</summary>
    ///  <param name="source">
    ///  要转换的序列。
    ///</param>
    ///<returns><see cref="T:System.Linq.IQueryable" />
    ///  ，它表示在输入的序列。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="source" />
    ///  未实现 <see cref="T:System.Collections.Generic.IEnumerable`1" />
    ///  对于某些 <paramref name="T" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="source" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function AsQueryable(source: DDN.mscorlib.DNIEnumerable): DNIQueryable; overload;
    {class} function Sum(source: DNIQueryable<Int32>): Int32; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Sum(source: DNIQueryable<Int64>): Int64; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Sum(source: DNIQueryable<Single>): Single; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Sum(source: DNIQueryable<Double>): Double; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Average(source: DNIQueryable<Int32>): Double; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNIQueryable<Int64>): Double; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNIQueryable<Single>): Single; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Average(source: DNIQueryable<Double>): Double; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;

  end;

  ///<summary>
  ///  提供了一套 <see langword="static" />
  ///  (<see langword="Shared" />
  ///  在 Visual Basic 中) 方法来查询数据结构，并实现 <see cref="T:System.Linq.IQueryable`1" />
  ///  。
  ///</summary>
  [DNTypeName('System.Linq.Queryable')]
  DNQueryable = interface(DDN.mscorlib.DNObject)
  ['{B4018634-9CCE-32E1-946C-15F6FDEFAE24}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNQueryable = class(TDNGenericImport<DNQueryableClass, DNQueryable>) end;

  //-------------namespace: System.Diagnostics.Eventing----------------
  DNEventProviderTraceListenerClass = interface(DNObjectClass)
  ['{53D8952C-3120-5496-8E38-C7E6259DDE5D}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" />
    ///  类使用指定的提供程序的标识符。
    ///</summary>
    ///  <param name="providerId">
    ///  一个唯一的字符串 <see cref="T:System.Guid" />
    ///  标识提供程序。
    ///</param>
    {class} function init(providerId: string): DNEventProviderTraceListener; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" />
    ///  类使用指定的提供程序标识符和该侦听器的名称。
    ///</summary>
    ///  <param name="providerId">
    ///  一个唯一的字符串 <see cref="T:System.Guid" />
    ///  标识提供程序。
    ///</param>
    ///  <param name="name">
    ///  该侦听器的名称。
    ///</param>
    {class} function init(providerId: string; name: string): DNEventProviderTraceListener; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" />
    ///  类使用指定的提供程序标识符，分隔符的侦听器，侦听器的名称。
    ///</summary>
    ///  <param name="providerId">
    ///  一个唯一的字符串 <see cref="T:System.Guid" />
    ///  标识提供程序。
    ///</param>
    ///  <param name="name">
    ///  该侦听器的名称。
    ///</param>
    ///  <param name="delimiter">
    ///  分隔符用于分隔事件数据。
    ///  (有关详细信息，请参阅 <see cref="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter" />
    ///  属性。)
    ///</param>
    {class} function init(providerId: string; name: string; delimiter: string): DNEventProviderTraceListener; overload;

  end;

  ///<summary>
  ///  侦听程序 <see cref="T:System.Diagnostics.TraceSource" />
  ///  ，它将事件写入到 ETW 子系统。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.EventProviderTraceListener')]
  DNEventProviderTraceListener = interface(DNObject)
  ['{B1474432-9DA0-314E-ACC5-41F0AC435DD1}']
  { getters & setters } 

    function get_Delimiter: string;
    procedure set_Delimiter(value: string);
    function get_IsThreadSafe: Boolean;
    function get_Attributes: DDN.System.DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DDN.System.DNTraceFilter;
    procedure set_Filter(value: DDN.System.DNTraceFilter);
    function get_TraceOutputOptions: DDN.System.DNTraceOptions;
    procedure set_TraceOutputOptions(value: DDN.System.DNTraceOptions);

  { methods } 

    ///<summary>
    ///  刷新输出缓冲区。
    ///</summary>
    procedure Flush;
    ///<summary>
    ///  关闭输出流，使它不再接收跟踪或调试输出。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  在派生类中被重写时，向在该派生类中所创建的侦听器写入指定消息。
    ///</summary>
    ///  <param name="message">
    ///  要写入的消息。
    ///</param>
    procedure Write(message: string); overload;
    ///<summary>
    ///  在派生类中被重写时，向在该派生类中所创建的侦听器写入消息，后跟行结束符。
    ///</summary>
    ///  <param name="message">
    ///  要写入的消息。
    ///</param>
    procedure WriteLine(message: string); overload;
    ///<summary>
    ///  向特定于侦听器的输出中写入跟踪信息、数据对象和事件信息。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  对象。
    ///</param>
    ///  <param name="source">
    ///  标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
    ///</param>
    ///  <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" />
    ///  值之一，指定引发跟踪的事件类型。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    ///  <param name="data">
    ///  要发出的跟踪数据。
    ///</param>
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  向特定于侦听器的输出中写入跟踪信息、数据对象和事件信息。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  对象。
    ///</param>
    ///  <param name="source">
    ///  标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
    ///</param>
    ///  <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" />
    ///  值之一，指定引发跟踪的事件类型。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    ///  <param name="data">
    ///  要作为数据发出的对象数组。
    ///</param>
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    ///<summary>
    ///  向特定于侦听器的输出写入跟踪和事件信息。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  对象。
    ///</param>
    ///  <param name="source">
    ///  标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
    ///</param>
    ///  <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" />
    ///  值之一，指定引发跟踪的事件类型。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32); overload;
    ///<summary>
    ///  向特定于侦听器的输出中写入跟踪信息、消息和事件信息。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  对象。
    ///</param>
    ///  <param name="source">
    ///  标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
    ///</param>
    ///  <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" />
    ///  值之一，指定引发跟踪的事件类型。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    ///  <param name="message">
    ///  要写入的消息。
    ///</param>
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; message: string); overload;
    ///<summary>
    ///  向特定于侦听器的输出中写入跟踪信息、格式化对象数组和事件信息。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  对象。
    ///</param>
    ///  <param name="source">
    ///  标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
    ///</param>
    ///  <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" />
    ///  值之一，指定引发跟踪的事件类型。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    ///  <param name="format">
    ///  一个格式字符串，其中包含零个或多个格式项，它们对应于 <paramref name="args" />
    ///  数组中的对象。
    ///</param>
    ///  <param name="args">
    ///  包含零个或多个要格式化的对象的 <see langword="object" />
    ///  数组。
    ///</param>
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    ///<summary>
    ///  实现 <see cref="T:System.Diagnostics.TraceListener" />
    ///  类时，向所创建的侦听器发出错误信息和详细错误信息。
    ///</summary>
    ///  <param name="message">
    ///  要发出的消息。
    ///</param>
    ///  <param name="detailMessage">
    ///  要发出的详细消息。
    ///</param>
    procedure Fail(message: string; detailMessage: string); overload;
    ///<summary>
    ///  向侦听器特定的输出中写入跟踪信息、消息、相关活动标识和事件信息。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  对象。
    ///</param>
    ///  <param name="source">
    ///  标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    ///  <param name="message">
    ///  要写入的消息。
    ///</param>
    ///  <param name="relatedActivityId">
    ///  标识相关活动的 <see cref="T:System.Guid" />
    ///  对象。
    ///</param>
    procedure TraceTransfer(eventCache: DDN.System.DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    procedure Dispose;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取和设置用来写入到 ETW 子系统的事件数据分隔的分隔符。
    ///</summary>
    ///<returns>
    ///  用来分隔事件数据的分隔符。
    ///  默认分隔符是逗号。
    ///</returns>
    property Delimiter: string read get_Delimiter write set_Delimiter;
    ///<summary>
    ///  获取一个值，该值指示跟踪侦听器是否是线程安全的。
    ///</summary>
    ///<returns>
    ///  如果跟踪侦听器是线程安全的，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property Attributes: DDN.System.DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DDN.System.DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DDN.System.DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNEventProviderTraceListener = class(TDNGenericImport<DNEventProviderTraceListenerClass, DNEventProviderTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventSchemaTraceListenerClass = interface(DNObjectClass)
  ['{7A22D4B6-C9CE-5342-BE56-33122D55B664}']
  { constructors } 

    ///<summary>
    ///  通过将指定文件用作调试和跟踪输出的接收方来初始化 <see cref="T:System.Diagnostics.EventSchemaTraceListener" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  日志文件的路径。
    ///</param>
    {class} function init(fileName: string): DNEventSchemaTraceListener; overload;
    ///<summary>
    ///  通过将指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  日志文件的路径。
    ///</param>
    ///  <param name="name">
    ///  侦听器名称。
    ///</param>
    {class} function init(fileName: string; name: string): DNEventSchemaTraceListener; overload;
    ///<summary>
    ///  通过将指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  日志文件的路径。
    ///</param>
    ///  <param name="name">
    ///  侦听器名称。
    ///</param>
    ///  <param name="bufferSize">
    ///  输出缓冲区的大小（以字节为单位）。
    ///</param>
    {class} function init(fileName: string; name: string; bufferSize: Int32): DNEventSchemaTraceListener; overload;
    ///<summary>
    ///  通过将具有指定日志保留策略的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  日志文件的路径。
    ///</param>
    ///  <param name="name">
    ///  侦听器名称。
    ///</param>
    ///  <param name="bufferSize">
    ///  输出缓冲区的大小（以字节为单位）。
    ///</param>
    ///  <param name="logRetentionOption"><see cref="T:System.Diagnostics.TraceLogRetentionOption" />
    ///  值之一。
    ///</param>
    {class} function init(fileName: string; name: string; bufferSize: Int32; logRetentionOption: DNTraceLogRetentionOption): DNEventSchemaTraceListener; overload;
    ///<summary>
    ///  通过将具有指定日志保留策略和最大大小的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  日志文件的路径。
    ///</param>
    ///  <param name="name">
    ///  侦听器名称。
    ///</param>
    ///  <param name="bufferSize">
    ///  输出缓冲区的大小（以字节为单位）。
    ///</param>
    ///  <param name="logRetentionOption"><see cref="T:System.Diagnostics.TraceLogRetentionOption" />
    ///  值之一。
    ///</param>
    ///  <param name="maximumFileSize">
    ///  最大文件大小（以字节为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumFileSize" />
    ///  小于 <paramref name="bufferSize" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumFileSize" />
    ///  为负数。
    ///</exception>
    {class} function init(fileName: string; name: string; bufferSize: Int32; logRetentionOption: DNTraceLogRetentionOption; maximumFileSize: Int64): DNEventSchemaTraceListener; overload;
    ///<summary>
    ///  通过将具有指定日志保留策略、最大大小和文件计数的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  日志文件的路径。
    ///</param>
    ///  <param name="name">
    ///  侦听器名称。
    ///</param>
    ///  <param name="bufferSize">
    ///  输出缓冲区的大小（以字节为单位）。
    ///</param>
    ///  <param name="logRetentionOption"><see cref="T:System.Diagnostics.TraceLogRetentionOption" />
    ///  值之一。
    ///</param>
    ///  <param name="maximumFileSize">
    ///  最大文件大小（以字节为单位）。
    ///</param>
    ///  <param name="maximumNumberOfFiles">
    ///  输出日志文件的最大数。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumFileSize" />
    ///  小于 <paramref name="bufferSize" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumFileSize" />
    ///  为负数。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumNumberOfFiles" />
    ///  小于 1，和 <paramref name="logRetentionOption" />
    ///  是 <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumNumberOfFiles" />
    ///  小于 2，和 <paramref name="logRetentionOption" />
    ///  是 <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />
    ///  。
    ///</exception>
    {class} function init(fileName: string; name: string; bufferSize: Int32; logRetentionOption: DNTraceLogRetentionOption; maximumFileSize: Int64; maximumNumberOfFiles: Int32): DNEventSchemaTraceListener; overload;

  end;

  ///<summary>
  ///  将端对端事件的跟踪或调试输出定向到 XML 编码的符合架构的日志文件。
  ///</summary>
  [DNTypeName('System.Diagnostics.EventSchemaTraceListener')]
  DNEventSchemaTraceListener = interface(DNObject)
  ['{64875632-E9C0-34F6-BAFC-DB922271A161}']
  { getters & setters } 

    function get_Writer: DDN.mscorlib.DNTextWriter;
    procedure set_Writer(value: DDN.mscorlib.DNTextWriter);
    function get_IsThreadSafe: Boolean;
    function get_BufferSize: Int32;
    function get_TraceLogRetentionOption: DNTraceLogRetentionOption;
    function get_MaximumFileSize: Int64;
    function get_MaximumNumberOfFiles: Int32;
    function get_Attributes: DDN.System.DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DDN.System.DNTraceFilter;
    procedure set_Filter(value: DDN.System.DNTraceFilter);
    function get_TraceOutputOptions: DDN.System.DNTraceOptions;
    procedure set_TraceOutputOptions(value: DDN.System.DNTraceOptions);

  { methods } 

    ///<summary>
    ///  将消息写入日志文件，且不提供任何其他上下文信息。
    ///</summary>
    ///  <param name="message">
    ///  要写入的消息。
    ///</param>
    procedure Write(message: string); overload;
    ///<summary>
    ///  关闭该侦听器的日志文件，以使其不再接收跟踪或调试输出。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  导致缓冲数据写入该侦听器的日志。
    ///</summary>
    procedure Flush;
    ///<summary>
    ///  将后跟当前行终止符的消息写入日志文件，且不提供任何其他上下文信息。
    ///</summary>
    ///  <param name="message">
    ///  要写入的消息。
    ///</param>
    procedure WriteLine(message: string); overload;
    ///<summary>
    ///  将包含基本错误消息和详细错误消息的错误信息写入日志文件。
    ///</summary>
    ///  <param name="message">
    ///  要写入的基本错误消息。
    ///</param>
    ///  <param name="detailMessage">
    ///  要追加到基本错误消息中的详细错误消息。
    ///</param>
    procedure Fail(message: string; detailMessage: string); overload;
    ///<summary>
    ///  将跟踪信息、格式化消息和事件信息写入日志文件。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  。
    ///</param>
    ///  <param name="source">
    ///  源名称。
    ///</param>
    ///  <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" />
    ///  值之一。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    ///  <param name="format">
    ///  包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" />
    ///  数组中的对象相对应。
    ///</param>
    ///  <param name="args">
    ///  一个对象数组，其中包含零个或多个要设置格式的对象。
    ///</param>
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    ///<summary>
    ///  将跟踪信息、消息和事件信息写入日志文件。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  。
    ///</param>
    ///  <param name="source">
    ///  源名称。
    ///</param>
    ///  <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" />
    ///  值之一。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    ///  <param name="message">
    ///  要写入的消息。
    ///</param>
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; message: string); overload;
    ///<summary>
    ///  将跟踪信息、单个数据对象和事件信息写入日志文件。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  。
    ///</param>
    ///  <param name="source">
    ///  源名称。
    ///</param>
    ///  <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" />
    ///  值之一。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    ///  <param name="data">
    ///  要发出的数据对象。
    ///</param>
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将跟踪信息、多个数据对象和事件信息写入日志文件。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  。
    ///</param>
    ///  <param name="source">
    ///  源名称。
    ///</param>
    ///  <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" />
    ///  值之一。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    ///  <param name="data">
    ///  要发出的数据对象的数组。
    ///</param>
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    ///<summary>
    ///  将跟踪信息（包括相关活动的标识）、消息和事件信息写入日志文件。
    ///</summary>
    ///  <param name="eventCache">
    ///  包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />
    ///  。
    ///</param>
    ///  <param name="source">
    ///  源名称。
    ///</param>
    ///  <param name="id">
    ///  事件的数值标识符。
    ///</param>
    ///  <param name="message">
    ///  要写入的跟踪消息。
    ///</param>
    ///  <param name="relatedActivityId">
    ///  标识相关活动的 <see cref="T:System.Guid" />
    ///  结构。
    ///</param>
    procedure TraceTransfer(eventCache: DDN.System.DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    procedure Dispose;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置写入日志文件的基础文本编写器。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.IO.TextWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  尝试将一个值赋给 <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" />
    ///  属性。
    ///</exception>
    property Writer: DDN.mscorlib.DNTextWriter read get_Writer write set_Writer;
    ///<summary>
    ///  获取一个值，该值指示跟踪侦听器是否是线程安全的。
    ///</summary>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    ///<summary>
    ///  获取输出缓冲区的大小。
    ///</summary>
    ///<returns>
    ///  输出缓冲区的大小（以字节为单位）。
    ///</returns>
    property BufferSize: Int32 read get_BufferSize;
    ///<summary>
    ///  获取该文件的跟踪日志保留选项。
    ///</summary>
    ///<returns><see cref="T:System.Diagnostics.TraceLogRetentionOption" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />
    ///  。
    ///</returns>
    property TraceLogRetentionOption: DNTraceLogRetentionOption read get_TraceLogRetentionOption;
    ///<summary>
    ///  获取日志文件的最大大小。
    ///</summary>
    ///<returns>
    ///  最大文件大小（以字节为单位）。
    ///</returns>
    property MaximumFileSize: Int64 read get_MaximumFileSize;
    ///<summary>
    ///  获取日志文件最大数。
    ///</summary>
    ///<returns>
    ///  日志文件最大数是由文件的 <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" />
    ///  属性的值来确定。
    ///</returns>
    property MaximumNumberOfFiles: Int32 read get_MaximumNumberOfFiles;
    property Attributes: DDN.System.DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DDN.System.DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DDN.System.DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNEventSchemaTraceListener = class(TDNGenericImport<DNEventSchemaTraceListenerClass, DNEventSchemaTraceListener>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNPipeStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{FDD1EC2E-F4DE-5EAE-B61A-2B977564ACB6}']
  end;

  ///<summary>
  ///  公开管道周围的 <see cref="T:System.IO.Stream" />
  ///  对象，该对象同时支持匿名管道和命名管道。
  ///</summary>
  [DNTypeName('System.IO.Pipes.PipeStream')]
  DNPipeStream = interface(DDN.mscorlib.DNStream)
  ['{C98F14E4-AA9B-334B-8E1D-54E79CC9D37A}']
  { getters & setters } 

    function get_IsConnected: Boolean;
    function get_IsAsync: Boolean;
    function get_IsMessageComplete: Boolean;
    function get_TransmissionMode: DNPipeTransmissionMode;
    function get_InBufferSize: Int32;
    function get_OutBufferSize: Int32;
    function get_ReadMode: DNPipeTransmissionMode;
    procedure set_ReadMode(value: DNPipeTransmissionMode);
    function get_SafePipeHandle: DNSafePipeHandle;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    ///<summary>
    ///  从流中读取字节块，并将数据写入指定的缓冲区。
    ///</summary>
    ///  <param name="buffer">
    ///  此方法返回时包含指定的字节数组，数组中 <paramref name="offset" />
    ///  和 (<paramref name="offset" />
    ///  + <paramref name="count" />
    ///  - 1) 之间的值被从当前源中读取的字节替换。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  数组中的字节偏移量，其中读取的字节将被替换。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///<returns>
    ///  读取到 <paramref name="buffer" />
    ///  的总字节数。
    ///  如果当前可用的字节数没有请求的那么多，则此数小于请求的字节数；或如果已到达流的末尾，则为零。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或尚未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生了 I/O 错误。
    ///</exception>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    ///<summary>
    ///  开始异步读操作。
    ///</summary>
    ///  <param name="buffer">
    ///  将数据读入的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的字节偏移量，从此处开始读取。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///  <param name="callback">
    ///  异步读操作完成后调用的方法。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  引用异步读取的 <see cref="T:System.IAsyncResult" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束挂起的异步读取请求。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对挂起的异步请求的引用。
    ///</param>
    ///<returns>
    ///  已读取的字节数。
    ///  返回值 0 指示已到达流的末尾（管道已关闭）。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  不源于当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
    ///  方法。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流已关闭或出现了内部错误。
    ///</exception>
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    ///<summary>
    ///  使用缓冲区中的数据将字节块写入当前流。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入管道的数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  要写入当前流的最大字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>
    ///  开始异步写操作。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入当前流的数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  最多写入的字节数。
    ///</param>
    ///  <param name="callback">
    ///  异步写操作完成后调用的方法。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  一个引用异步写操作的 <see cref="T:System.IAsyncResult" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束挂起的异步写入请求。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对挂起的异步请求的引用。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  不是源自当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
    ///  方法。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流已关闭或出现了内部错误。
    ///</exception>
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    ///<summary>
    ///  清除当前流的缓冲区，并使所有缓冲的数据都写入到基础设备。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure Flush;
    ///<summary>
    ///  将当前流的长度设为指定值。
    ///</summary>
    ///  <param name="value">
    ///  流的新长度。
    ///</param>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  将当前流的当前位置设置为指定值。
    ///</summary>
    ///  <param name="offset">
    ///  相对于 <paramref name="origin" />
    ///  的点，从此处开始查找。
    ///</param>
    ///  <param name="origin">
    ///  使用 <see cref="T:System.IO.SeekOrigin" />
    ///  类型的值，将开始位置、结束位置或当前位置指定为 <paramref name="offset" />
    ///  的参考点。
    ///</param>
    ///<returns>
    ///  流中的新位置。
    ///</returns>
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    ///<summary>
    ///  从管道读取字节。
    ///</summary>
    ///<returns>
    ///  强制转换为 <see cref="T:System.Int32" />
    ///  的字节或 -1 指示到达流的末尾（管道已关闭）。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或尚未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生了 I/O 错误。
    ///</exception>
    function ReadByte: Int32;
    ///<summary>
    ///  将字节写入当前流。
    ///</summary>
    ///  <param name="value">
    ///  要写入流中的字节。
    ///</param>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure WriteByte(value: Byte);
    ///<summary>
    ///  等待管道另一端读取所有发送的字节。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure WaitForPipeDrain;
    ///<summary>
    ///  获取一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所描述管道的访问控制列表 (ACL) 项。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所描述管道的访问控制列表 (ACL) 项。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception>
    function GetAccessControl: DNPipeSecurity;
    ///<summary>
    ///  将 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象所指定的访问控制列表 (ACL) 项应用于由当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象指定的管道。
    ///</summary>
    ///  <param name="pipeSecurity">
    ///  一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象指定要应用于当前管道的访问控制列表 (ACL) 项。
    ///</param>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pipeSecurity" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception>
    procedure SetAccessControl(pipeSecurity: DNPipeSecurity);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否已连接 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  如果已连接 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsConnected: Boolean read get_IsConnected;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象是异步打开还是同步打开。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象是异步打开的，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAsync: Boolean read get_IsAsync;
    ///<summary>
    ///  获取一个值，该值指示最近的读操作返回的消息中是否有更多数据。
    ///</summary>
    ///<returns>
    ///  如果消息中没有更多要读取的字符，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  管道不可连接。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///  - 或 -
    ///  管道的 <see cref="P:System.IO.Pipes.PipeStream.ReadMode" />
    ///  属性值不是 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
    ///  。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property IsMessageComplete: Boolean read get_IsMessageComplete;
    ///<summary>
    ///  获取当前管道支持的管道传输模式。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值之一，指示当前管道支持的传输模式。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尚未设置句柄。
    ///  - 或 -
    ///  管道正在等待在匿名客户端/服务器操作中进行连接或与命名客户端连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property TransmissionMode: DNPipeTransmissionMode read get_TransmissionMode;
    ///<summary>
    ///  获取管道的入站缓冲区的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  一个整数值，表示入站缓冲区的大小（以字节为单位）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  流不可读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道正在等待连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property InBufferSize: Int32 read get_InBufferSize;
    ///<summary>
    ///  获取管道的出站缓冲区的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  出站缓冲区的大小（以字节为单位）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  该流不可写入。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该管道正在等待连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property OutBufferSize: Int32 read get_OutBufferSize;
    ///<summary>
    ///  获取或设置 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象的读取模式。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值之一，指示如何从管道读取 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  所提供的值不是有效的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  所提供的值不是此管道流支持的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尚未设置句柄。
    ///  - 或 -
    ///  此管道正在等待与命名的客户端进行连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已中断，或命名的客户端发生了 I/O 错误。
    ///</exception>
    property ReadMode: DNPipeTransmissionMode read get_ReadMode write set_ReadMode;
    ///<summary>
    ///  获取当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所封装的本地管道末端的安全句柄。
    ///</summary>
    ///<returns>
    ///  由当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所封装的管道的一个 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property SafePipeHandle: DNSafePipeHandle read get_SafePipeHandle;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持读操作。
    ///</summary>
    ///<returns>
    ///  如果流支持读操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanRead: Boolean read get_CanRead;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持写操作。
    ///</summary>
    ///<returns>
    ///  如果流支持写操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持查找操作。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property CanSeek: Boolean read get_CanSeek;
    ///<summary>
    ///  获取流长度（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  始终引发。
    ///</exception>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取或设置当前流的当前位置。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  始终引发。
    ///</exception>
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNPipeStream = class(TDNGenericImport<DNPipeStreamClass, DNPipeStream>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNAnonymousPipeClientStreamClass = interface(DNPipeStreamClass)
  ['{C6922860-BA50-58D7-AA64-0C13887A6037}']
  { static getter & setter } 

    procedure set_ReadMode(value: DNPipeTransmissionMode);

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  类的指定的字符串表示形式的管道句柄。
    ///</summary>
    ///  <param name="pipeHandleAsString">
    ///  表示管道句柄的字符串。
    ///</param>
    ///<exception cref="T:System.IO.IOException"><paramref name="pipeHandleAsString" />
    ///  不是有效的管道句柄。
    ///</exception>
    {class} function init(pipeHandleAsString: string): DNAnonymousPipeClientStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  带有指定的管道方向和管道句柄的字符串表示的类。
    ///</summary>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///  匿名管道只能在一个方向，因此 <paramref name="direction" />
    ///  不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</param>
    ///  <param name="pipeHandleAsString">
    ///  表示管道句柄的字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="pipeHandleAsString" />
    ///  是无效的句柄。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pipeHandleAsString" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  将 <paramref name="direction" />
    ///  设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</exception>
    {class} function init(direction: DNPipeDirection; pipeHandleAsString: string): DNAnonymousPipeClientStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  类从指定句柄。
    ///</summary>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///  匿名管道只能在一个方向，因此 <paramref name="direction" />
    ///  不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</param>
    ///  <param name="safePipeHandle">
    ///  安全句柄的管道此 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  对象将封装。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="safePipeHandle " />
    ///  不是有效的句柄。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="safePipeHandle" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  将 <paramref name="direction" />
    ///  设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生 I/O 错误，如磁盘错误。
    ///  - 或 -
    ///  已关闭流。
    ///</exception>
    {class} function init(direction: DNPipeDirection; safePipeHandle: DNSafePipeHandle): DNAnonymousPipeClientStream; overload;

  { static propertys } 

    ///<summary>
    ///  设置的读取模式 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  为 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传输模式不是有效的。
    ///  对于匿名管道，仅 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />
    ///  支持。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  传输模式是 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  连接已断开或出现其他 I/O 错误。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    {class} property ReadMode: DNPipeTransmissionMode write set_ReadMode;
  end;

  ///<summary>
  ///  公开支持同步和异步读取和写入操作的匿名管道流的客户端。
  ///</summary>
  [DNTypeName('System.IO.Pipes.AnonymousPipeClientStream')]
  DNAnonymousPipeClientStream = interface(DNPipeStream)
  ['{B610753A-191A-3D16-90B4-AEFCC889BB22}']
  { getters & setters } 

    function get_TransmissionMode: DNPipeTransmissionMode;
    procedure set_ReadMode(value: DNPipeTransmissionMode);
    function get_IsConnected: Boolean;
    function get_IsAsync: Boolean;
    function get_IsMessageComplete: Boolean;
    function get_InBufferSize: Int32;
    function get_OutBufferSize: Int32;
    function get_SafePipeHandle: DNSafePipeHandle;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    ///<summary>
    ///  从流中读取字节块，并将数据写入指定的缓冲区。
    ///</summary>
    ///  <param name="buffer">
    ///  此方法返回时包含指定的字节数组，数组中 <paramref name="offset" />
    ///  和 (<paramref name="offset" />
    ///  + <paramref name="count" />
    ///  - 1) 之间的值被从当前源中读取的字节替换。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  数组中的字节偏移量，其中读取的字节将被替换。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///<returns>
    ///  读取到 <paramref name="buffer" />
    ///  的总字节数。
    ///  如果当前可用的字节数没有请求的那么多，则此数小于请求的字节数；或如果已到达流的末尾，则为零。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或尚未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生了 I/O 错误。
    ///</exception>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    ///<summary>
    ///  开始异步读操作。
    ///</summary>
    ///  <param name="buffer">
    ///  将数据读入的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的字节偏移量，从此处开始读取。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///  <param name="callback">
    ///  异步读操作完成后调用的方法。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  引用异步读取的 <see cref="T:System.IAsyncResult" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束挂起的异步读取请求。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对挂起的异步请求的引用。
    ///</param>
    ///<returns>
    ///  已读取的字节数。
    ///  返回值 0 指示已到达流的末尾（管道已关闭）。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  不源于当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
    ///  方法。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流已关闭或出现了内部错误。
    ///</exception>
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    ///<summary>
    ///  使用缓冲区中的数据将字节块写入当前流。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入管道的数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  要写入当前流的最大字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>
    ///  开始异步写操作。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入当前流的数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  最多写入的字节数。
    ///</param>
    ///  <param name="callback">
    ///  异步写操作完成后调用的方法。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  一个引用异步写操作的 <see cref="T:System.IAsyncResult" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束挂起的异步写入请求。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对挂起的异步请求的引用。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  不是源自当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
    ///  方法。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流已关闭或出现了内部错误。
    ///</exception>
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    ///<summary>
    ///  清除当前流的缓冲区，并使所有缓冲的数据都写入到基础设备。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure Flush;
    ///<summary>
    ///  将当前流的长度设为指定值。
    ///</summary>
    ///  <param name="value">
    ///  流的新长度。
    ///</param>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  将当前流的当前位置设置为指定值。
    ///</summary>
    ///  <param name="offset">
    ///  相对于 <paramref name="origin" />
    ///  的点，从此处开始查找。
    ///</param>
    ///  <param name="origin">
    ///  使用 <see cref="T:System.IO.SeekOrigin" />
    ///  类型的值，将开始位置、结束位置或当前位置指定为 <paramref name="offset" />
    ///  的参考点。
    ///</param>
    ///<returns>
    ///  流中的新位置。
    ///</returns>
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    ///<summary>
    ///  从管道读取字节。
    ///</summary>
    ///<returns>
    ///  强制转换为 <see cref="T:System.Int32" />
    ///  的字节或 -1 指示到达流的末尾（管道已关闭）。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或尚未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生了 I/O 错误。
    ///</exception>
    function ReadByte: Int32;
    ///<summary>
    ///  将字节写入当前流。
    ///</summary>
    ///  <param name="value">
    ///  要写入流中的字节。
    ///</param>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure WriteByte(value: Byte);
    ///<summary>
    ///  等待管道另一端读取所有发送的字节。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure WaitForPipeDrain;
    ///<summary>
    ///  获取一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所描述管道的访问控制列表 (ACL) 项。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所描述管道的访问控制列表 (ACL) 项。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception>
    function GetAccessControl: DNPipeSecurity;
    ///<summary>
    ///  将 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象所指定的访问控制列表 (ACL) 项应用于由当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象指定的管道。
    ///</summary>
    ///  <param name="pipeSecurity">
    ///  一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象指定要应用于当前管道的访问控制列表 (ACL) 项。
    ///</param>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pipeSecurity" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception>
    procedure SetAccessControl(pipeSecurity: DNPipeSecurity);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前管道支持的管道传输模式。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  当前管道支持。
    ///</returns>
    property TransmissionMode: DNPipeTransmissionMode read get_TransmissionMode;
    ///<summary>
    ///  设置的读取模式 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  为 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传输模式不是有效的。
    ///  对于匿名管道，仅 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />
    ///  支持。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  传输模式是 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  连接已断开或出现其他 I/O 错误。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property ReadMode: DNPipeTransmissionMode write set_ReadMode;
    ///<summary>
    ///  获取或设置一个值，该值指示是否已连接 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  如果已连接 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsConnected: Boolean read get_IsConnected;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象是异步打开还是同步打开。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象是异步打开的，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAsync: Boolean read get_IsAsync;
    ///<summary>
    ///  获取一个值，该值指示最近的读操作返回的消息中是否有更多数据。
    ///</summary>
    ///<returns>
    ///  如果消息中没有更多要读取的字符，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  管道不可连接。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///  - 或 -
    ///  管道的 <see cref="P:System.IO.Pipes.PipeStream.ReadMode" />
    ///  属性值不是 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
    ///  。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property IsMessageComplete: Boolean read get_IsMessageComplete;
    ///<summary>
    ///  获取管道的入站缓冲区的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  一个整数值，表示入站缓冲区的大小（以字节为单位）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  流不可读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道正在等待连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property InBufferSize: Int32 read get_InBufferSize;
    ///<summary>
    ///  获取管道的出站缓冲区的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  出站缓冲区的大小（以字节为单位）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  该流不可写入。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该管道正在等待连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property OutBufferSize: Int32 read get_OutBufferSize;
    ///<summary>
    ///  获取当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所封装的本地管道末端的安全句柄。
    ///</summary>
    ///<returns>
    ///  由当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所封装的管道的一个 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property SafePipeHandle: DNSafePipeHandle read get_SafePipeHandle;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持读操作。
    ///</summary>
    ///<returns>
    ///  如果流支持读操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanRead: Boolean read get_CanRead;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持写操作。
    ///</summary>
    ///<returns>
    ///  如果流支持写操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持查找操作。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property CanSeek: Boolean read get_CanSeek;
    ///<summary>
    ///  获取流长度（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  始终引发。
    ///</exception>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取或设置当前流的当前位置。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  始终引发。
    ///</exception>
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNAnonymousPipeClientStream = class(TDNGenericImport<DNAnonymousPipeClientStreamClass, DNAnonymousPipeClientStream>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNAnonymousPipeServerStreamClass = interface(DNPipeStreamClass)
  ['{8196832D-FC69-51B4-894E-41B8F91447B1}']
  { static getter & setter } 

    procedure set_ReadMode(value: DNPipeTransmissionMode);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNAnonymousPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  具有所指定的管道方向的类。
    ///</summary>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///  匿名管道只能在一个方向，因此 <paramref name="direction" />
    ///  不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  将 <paramref name="direction" />
    ///  设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</exception>
    {class} function init(direction: DNPipeDirection): DNAnonymousPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  类，具有指定的管道方向和继承模式。
    ///</summary>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///  匿名管道只能在一个方向，因此 <paramref name="direction" />
    ///  不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</param>
    ///  <param name="inheritability">
    ///  确定基础句柄能否由子进程继承的枚举值之一。
    ///  必须将其设置为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  或 <see cref="F:System.IO.HandleInheritability.Inheritable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inheritability" />
    ///  未设置为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  或 <see cref="F:System.IO.HandleInheritability.Inheritable" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  将 <paramref name="direction" />
    ///  设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</exception>
    {class} function init(direction: DNPipeDirection; inheritability: DNHandleInheritability): DNAnonymousPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  类具有指定的管道方向、 继承模式和缓冲区大小。
    ///</summary>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///  匿名管道只能在一个方向，因此 <paramref name="direction" />
    ///  不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</param>
    ///  <param name="inheritability">
    ///  确定基础句柄能否由子进程继承的枚举值之一。
    ///  必须将其设置为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  或 <see cref="F:System.IO.HandleInheritability.Inheritable" />
    ///  。
    ///</param>
    ///  <param name="bufferSize">
    ///  缓冲区的大小。
    ///  此值必须大于或等于 0。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inheritability" />
    ///  未设置为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  或 <see cref="F:System.IO.HandleInheritability.Inheritable" />
    ///  。
    ///  - 或 -
    ///  <paramref name="bufferSize" />
    ///  小于 0。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  将 <paramref name="direction" />
    ///  设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</exception>
    {class} function init(direction: DNPipeDirection; inheritability: DNHandleInheritability; bufferSize: Int32): DNAnonymousPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  类，具有指定的管道方向、 继承模式、 缓冲区大小和管道安全性。
    ///</summary>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///  匿名管道只能在一个方向，因此 <paramref name="direction" />
    ///  不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</param>
    ///  <param name="inheritability">
    ///  确定基础句柄能否由子进程继承的枚举值之一。
    ///</param>
    ///  <param name="bufferSize">
    ///  缓冲区的大小。
    ///  此值必须大于或等于 0。
    ///</param>
    ///  <param name="pipeSecurity">
    ///  一个对象，确定管道的访问控制和审核安全性。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inheritability" />
    ///  未设置为 <see cref="F:System.IO.HandleInheritability.None" />
    ///  或 <see cref="F:System.IO.HandleInheritability.Inheritable" />
    ///  。
    ///  - 或 -
    ///  <paramref name="bufferSize" />
    ///  小于 0。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  将 <paramref name="direction" />
    ///  设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</exception>
    {class} function init(direction: DNPipeDirection; inheritability: DNHandleInheritability; bufferSize: Int32; pipeSecurity: DNPipeSecurity): DNAnonymousPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  类从指定的管道句柄。
    ///</summary>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///  匿名管道只能在一个方向，因此 <paramref name="direction" />
    ///  不能设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</param>
    ///  <param name="serverSafePipeHandle">
    ///  安全句柄的管道此 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  对象将封装。
    ///</param>
    ///  <param name="clientSafePipeHandle">
    ///  安全句柄 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="serverSafePipeHandle" />
    ///  或 <paramref name="clientSafePipeHandle" />
    ///  是无效的句柄。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="serverSafePipeHandle" />
    ///  或 <paramref name="clientSafePipeHandle" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  将 <paramref name="direction" />
    ///  设置为 <see cref="F:System.IO.Pipes.PipeDirection.InOut" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生 I/O 错误，如磁盘错误。
    ///  - 或 -
    ///  已关闭流。
    ///</exception>
    {class} function init(direction: DNPipeDirection; serverSafePipeHandle: DNSafePipeHandle; clientSafePipeHandle: DNSafePipeHandle): DNAnonymousPipeServerStream; overload;

  { static propertys } 

    ///<summary>
    ///  设置的读取模式 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  对象。
    ///  对于匿名管道传输模式必须为 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  读取模式 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传输模式不是有效的。
    ///  对于匿名管道，仅 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />
    ///  支持。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  该属性设置为 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
    ///  , ，它不支持匿名管道。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  连接已断开或出现其他 I/O 错误。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    {class} property ReadMode: DNPipeTransmissionMode write set_ReadMode;
  end;

  ///<summary>
  ///  公开周围匿名管道，支持同步和异步读取和写入操作的流。
  ///</summary>
  [DNTypeName('System.IO.Pipes.AnonymousPipeServerStream')]
  DNAnonymousPipeServerStream = interface(DNPipeStream)
  ['{884A81C3-57A0-33D5-A300-0AB2F1E3C609}']
  { getters & setters } 

    function get_ClientSafePipeHandle: DNSafePipeHandle;
    function get_TransmissionMode: DNPipeTransmissionMode;
    procedure set_ReadMode(value: DNPipeTransmissionMode);
    function get_IsConnected: Boolean;
    function get_IsAsync: Boolean;
    function get_IsMessageComplete: Boolean;
    function get_InBufferSize: Int32;
    function get_OutBufferSize: Int32;
    function get_SafePipeHandle: DNSafePipeHandle;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    ///<summary>
    ///  获取已连接 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  作为字符串的对象的句柄。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示已连接 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  对象的句柄。
    ///</returns>
    function GetClientHandleAsString: string;
    ///<summary>
    ///  关闭的本地副本 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  对象的句柄。
    ///</summary>
    procedure DisposeLocalCopyOfClientHandle;
    ///<summary>
    ///  从流中读取字节块，并将数据写入指定的缓冲区。
    ///</summary>
    ///  <param name="buffer">
    ///  此方法返回时包含指定的字节数组，数组中 <paramref name="offset" />
    ///  和 (<paramref name="offset" />
    ///  + <paramref name="count" />
    ///  - 1) 之间的值被从当前源中读取的字节替换。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  数组中的字节偏移量，其中读取的字节将被替换。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///<returns>
    ///  读取到 <paramref name="buffer" />
    ///  的总字节数。
    ///  如果当前可用的字节数没有请求的那么多，则此数小于请求的字节数；或如果已到达流的末尾，则为零。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或尚未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生了 I/O 错误。
    ///</exception>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    ///<summary>
    ///  开始异步读操作。
    ///</summary>
    ///  <param name="buffer">
    ///  将数据读入的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的字节偏移量，从此处开始读取。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///  <param name="callback">
    ///  异步读操作完成后调用的方法。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  引用异步读取的 <see cref="T:System.IAsyncResult" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束挂起的异步读取请求。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对挂起的异步请求的引用。
    ///</param>
    ///<returns>
    ///  已读取的字节数。
    ///  返回值 0 指示已到达流的末尾（管道已关闭）。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  不源于当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
    ///  方法。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流已关闭或出现了内部错误。
    ///</exception>
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    ///<summary>
    ///  使用缓冲区中的数据将字节块写入当前流。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入管道的数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  要写入当前流的最大字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>
    ///  开始异步写操作。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入当前流的数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  最多写入的字节数。
    ///</param>
    ///  <param name="callback">
    ///  异步写操作完成后调用的方法。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  一个引用异步写操作的 <see cref="T:System.IAsyncResult" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束挂起的异步写入请求。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对挂起的异步请求的引用。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  不是源自当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
    ///  方法。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流已关闭或出现了内部错误。
    ///</exception>
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    ///<summary>
    ///  清除当前流的缓冲区，并使所有缓冲的数据都写入到基础设备。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure Flush;
    ///<summary>
    ///  将当前流的长度设为指定值。
    ///</summary>
    ///  <param name="value">
    ///  流的新长度。
    ///</param>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  将当前流的当前位置设置为指定值。
    ///</summary>
    ///  <param name="offset">
    ///  相对于 <paramref name="origin" />
    ///  的点，从此处开始查找。
    ///</param>
    ///  <param name="origin">
    ///  使用 <see cref="T:System.IO.SeekOrigin" />
    ///  类型的值，将开始位置、结束位置或当前位置指定为 <paramref name="offset" />
    ///  的参考点。
    ///</param>
    ///<returns>
    ///  流中的新位置。
    ///</returns>
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    ///<summary>
    ///  从管道读取字节。
    ///</summary>
    ///<returns>
    ///  强制转换为 <see cref="T:System.Int32" />
    ///  的字节或 -1 指示到达流的末尾（管道已关闭）。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或尚未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生了 I/O 错误。
    ///</exception>
    function ReadByte: Int32;
    ///<summary>
    ///  将字节写入当前流。
    ///</summary>
    ///  <param name="value">
    ///  要写入流中的字节。
    ///</param>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure WriteByte(value: Byte);
    ///<summary>
    ///  等待管道另一端读取所有发送的字节。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure WaitForPipeDrain;
    ///<summary>
    ///  获取一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所描述管道的访问控制列表 (ACL) 项。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所描述管道的访问控制列表 (ACL) 项。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception>
    function GetAccessControl: DNPipeSecurity;
    ///<summary>
    ///  将 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象所指定的访问控制列表 (ACL) 项应用于由当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象指定的管道。
    ///</summary>
    ///  <param name="pipeSecurity">
    ///  一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象指定要应用于当前管道的访问控制列表 (ACL) 项。
    ///</param>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pipeSecurity" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception>
    procedure SetAccessControl(pipeSecurity: DNPipeSecurity);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的安全句柄 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  对象当前已连接到 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  句柄 <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />
    ///  对象当前已连接到 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  对象。
    ///</returns>
    property ClientSafePipeHandle: DNSafePipeHandle read get_ClientSafePipeHandle;
    ///<summary>
    ///  获取当前管道支持的管道传输模式。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  当前管道支持。
    ///</returns>
    property TransmissionMode: DNPipeTransmissionMode read get_TransmissionMode;
    ///<summary>
    ///  设置的读取模式 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  对象。
    ///  对于匿名管道传输模式必须为 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  读取模式 <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传输模式不是有效的。
    ///  对于匿名管道，仅 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />
    ///  支持。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  该属性设置为 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
    ///  , ，它不支持匿名管道。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  连接已断开或出现其他 I/O 错误。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property ReadMode: DNPipeTransmissionMode write set_ReadMode;
    ///<summary>
    ///  获取或设置一个值，该值指示是否已连接 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  如果已连接 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsConnected: Boolean read get_IsConnected;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象是异步打开还是同步打开。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象是异步打开的，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAsync: Boolean read get_IsAsync;
    ///<summary>
    ///  获取一个值，该值指示最近的读操作返回的消息中是否有更多数据。
    ///</summary>
    ///<returns>
    ///  如果消息中没有更多要读取的字符，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  管道不可连接。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///  - 或 -
    ///  管道的 <see cref="P:System.IO.Pipes.PipeStream.ReadMode" />
    ///  属性值不是 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
    ///  。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property IsMessageComplete: Boolean read get_IsMessageComplete;
    ///<summary>
    ///  获取管道的入站缓冲区的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  一个整数值，表示入站缓冲区的大小（以字节为单位）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  流不可读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道正在等待连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property InBufferSize: Int32 read get_InBufferSize;
    ///<summary>
    ///  获取管道的出站缓冲区的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  出站缓冲区的大小（以字节为单位）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  该流不可写入。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该管道正在等待连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property OutBufferSize: Int32 read get_OutBufferSize;
    ///<summary>
    ///  获取当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所封装的本地管道末端的安全句柄。
    ///</summary>
    ///<returns>
    ///  由当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所封装的管道的一个 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property SafePipeHandle: DNSafePipeHandle read get_SafePipeHandle;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持读操作。
    ///</summary>
    ///<returns>
    ///  如果流支持读操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanRead: Boolean read get_CanRead;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持写操作。
    ///</summary>
    ///<returns>
    ///  如果流支持写操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持查找操作。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property CanSeek: Boolean read get_CanSeek;
    ///<summary>
    ///  获取流长度（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  始终引发。
    ///</exception>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取或设置当前流的当前位置。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  始终引发。
    ///</exception>
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNAnonymousPipeServerStream = class(TDNGenericImport<DNAnonymousPipeServerStreamClass, DNAnonymousPipeServerStream>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNNamedPipeClientStreamClass = interface(DNPipeStreamClass)
  ['{862A5CF9-0F09-50D7-821A-C27C071A30CB}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" />
    ///  初始化具有指定的管道名称。
    ///</summary>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  是一个长度为零的字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///</exception>
    {class} function init(pipeName: string): DNNamedPipeClientStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" />
    ///  类具有指定的管道和服务器名称。
    ///</summary>
    ///  <param name="serverName">
    ///  要连接的远程计算机的名称，或者为“.”，以指定本地计算机。
    ///</param>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  是零长度字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///</exception>
    {class} function init(serverName: string; pipeName: string): DNNamedPipeClientStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" />
    ///  带有指定的管道和服务器名称和指定的管道方向的类。
    ///</summary>
    ///  <param name="serverName">
    ///  要连接的远程计算机的名称，或者为“.”，以指定本地计算机。
    ///</param>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  是零长度字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///</exception>
    {class} function init(serverName: string; pipeName: string; direction: DNPipeDirection): DNNamedPipeClientStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" />
    ///  使用指定的管道和服务器名称，以及指定的管道方向和管道选项的类。
    ///</summary>
    ///  <param name="serverName">
    ///  要连接的远程计算机的名称，或者为“.”，以指定本地计算机。
    ///</param>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="options">
    ///  确定如何打开或创建管道的枚举值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  是零长度字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="options" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" />
    ///  值。
    ///</exception>
    {class} function init(serverName: string; pipeName: string; direction: DNPipeDirection; options: DNPipeOptions): DNNamedPipeClientStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" />
    ///  使用指定的管道和服务器名称，以及指定的管道方向、 管道选项、 和安全模拟级别的类。
    ///</summary>
    ///  <param name="serverName">
    ///  要连接的远程计算机的名称，或者为“.”，以指定本地计算机。
    ///</param>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="options">
    ///  确定如何打开或创建管道的枚举值之一。
    ///</param>
    ///  <param name="impersonationLevel">
    ///  确定安全模拟级别的枚举值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  是零长度字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="options" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="impersonationLevel" />
    ///  不是有效的 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />
    ///  值。
    ///</exception>
    {class} function init(serverName: string; pipeName: string; direction: DNPipeDirection; options: DNPipeOptions; impersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel): DNNamedPipeClientStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" />
    ///  类具有指定的管道和服务器名称、 所指定的管道方向、 管道选项、 安全模拟级别和继承模式。
    ///</summary>
    ///  <param name="serverName">
    ///  要连接的远程计算机的名称，或者为“.”，以指定本地计算机。
    ///</param>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="options">
    ///  确定如何打开或创建管道的枚举值之一。
    ///</param>
    ///  <param name="impersonationLevel">
    ///  确定安全模拟级别的枚举值之一。
    ///</param>
    ///  <param name="inheritability">
    ///  确定基础句柄是否将由子进程继承的枚举值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  是零长度字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="options" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="impersonationLevel" />
    ///  不是有效的 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效的 <see cref="T:System.IO.HandleInheritability" />
    ///  值。
    ///</exception>
    {class} function init(serverName: string; pipeName: string; direction: DNPipeDirection; options: DNPipeOptions; impersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel; inheritability: DNHandleInheritability): DNNamedPipeClientStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" />
    ///  使用指定的管道和服务器名称，指定的管道选项、 安全模拟级别以及继承模式。
    ///</summary>
    ///  <param name="serverName">
    ///  要连接的远程计算机的名称，或者为“.”，以指定本地计算机。
    ///</param>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="desiredAccessRights">
    ///  指定所需管道访问权限的枚举值之一。
    ///</param>
    ///  <param name="options">
    ///  确定如何打开或创建管道的枚举值之一。
    ///</param>
    ///  <param name="impersonationLevel">
    ///  确定安全模拟级别的枚举值之一。
    ///</param>
    ///  <param name="inheritability">
    ///  确定基础句柄是否将由子进程继承的枚举值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  或 <paramref name="serverName" />
    ///  是零长度字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="options" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="impersonationLevel" />
    ///  不是有效的 <see cref="T:System.Security.Principal.TokenImpersonationLevel" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效的 <see cref="T:System.IO.HandleInheritability" />
    ///  值。
    ///</exception>
    {class} function init(serverName: string; pipeName: string; desiredAccessRights: DNPipeAccessRights; options: DNPipeOptions; impersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel; inheritability: DNHandleInheritability): DNNamedPipeClientStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeClientStream" />
    ///  为指定的管道方向与指定的管道句柄。
    ///</summary>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="isAsync"><see langword="true" />
    ///  指示句柄已异步打开；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="isConnected"><see langword="true" />
    ///  若要指示管道已连接;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="safePipeHandle">
    ///  安全句柄的管道此 <see cref="T:System.IO.Pipes.NamedPipeClientStream" />
    ///  对象将封装。
    ///</param>
    ///<exception cref="T:System.IO.IOException"><paramref name="safePipeHandle" />
    ///  不是有效的句柄。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="safePipeHandle" />
    ///  不是有效的句柄。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="safePipeHandle" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  已关闭流。
    ///</exception>
    {class} function init(direction: DNPipeDirection; isAsync: Boolean; isConnected: Boolean; safePipeHandle: DNSafePipeHandle): DNNamedPipeClientStream; overload;

  end;

  ///<summary>
  ///  公开 <see cref="T:System.IO.Stream" />
  ///  周围命名管道，支持同步和异步读取和写入操作。
  ///</summary>
  [DNTypeName('System.IO.Pipes.NamedPipeClientStream')]
  DNNamedPipeClientStream = interface(DNPipeStream)
  ['{FD52A687-FD3A-3F99-83ED-6D2F9BF7E05E}']
  { getters & setters } 

    function get_NumberOfServerInstances: Int32;
    function get_IsConnected: Boolean;
    function get_IsAsync: Boolean;
    function get_IsMessageComplete: Boolean;
    function get_TransmissionMode: DNPipeTransmissionMode;
    function get_InBufferSize: Int32;
    function get_OutBufferSize: Int32;
    function get_ReadMode: DNPipeTransmissionMode;
    procedure set_ReadMode(value: DNPipeTransmissionMode);
    function get_SafePipeHandle: DNSafePipeHandle;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    ///<summary>
    ///  连接到具有无限超时值的等待的服务器。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  已连接客户端。
    ///</exception>
    procedure Connect; overload;
    ///<summary>
    ///  在指定的超时期间内连接到等待的服务器。
    ///</summary>
    ///  <param name="timeout">
    ///  在连接超时之前等待服务器响应的毫秒数。
    ///</param>
    ///<exception cref="T:System.TimeoutException">
    ///  无法连接到在指定服务器 <paramref name="timeout" />
    ///  段。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />
    ///  小于 0，且未设置为 <see cref="F:System.Threading.Timeout.Infinite" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已连接客户端。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  服务器连接到另一个客户端和超时期限已过。
    ///</exception>
    procedure Connect(timeout: Int32); overload;
    ///<summary>
    ///  在无限超时期间内异步连接到等待的服务器。
    ///</summary>
    ///<returns>
    ///  表示异步连接操作的任务。
    ///</returns>
    function ConnectAsync: DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  在指定的超时期间内异步连接到等待的服务器。
    ///</summary>
    ///  <param name="timeout">
    ///  在连接超时之前等待服务器响应的毫秒数。
    ///</param>
    ///<returns>
    ///  表示异步连接操作的任务。
    ///</returns>
    function ConnectAsync(timeout: Int32): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  异步连接到等待的服务器并监视取消请求。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///  默认值为 <see cref="P:System.Threading.CancellationToken.None" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步连接操作的任务。
    ///</returns>
    function ConnectAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  在指定的超时期间内异步连接到等待的服务器并监视取消请求。
    ///</summary>
    ///  <param name="timeout">
    ///  在连接超时之前等待服务器响应的毫秒数。
    ///</param>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///  默认值为 <see cref="P:System.Threading.CancellationToken.None" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步连接操作的任务。
    ///</returns>
    function ConnectAsync(timeout: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  从流中读取字节块，并将数据写入指定的缓冲区。
    ///</summary>
    ///  <param name="buffer">
    ///  此方法返回时包含指定的字节数组，数组中 <paramref name="offset" />
    ///  和 (<paramref name="offset" />
    ///  + <paramref name="count" />
    ///  - 1) 之间的值被从当前源中读取的字节替换。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  数组中的字节偏移量，其中读取的字节将被替换。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///<returns>
    ///  读取到 <paramref name="buffer" />
    ///  的总字节数。
    ///  如果当前可用的字节数没有请求的那么多，则此数小于请求的字节数；或如果已到达流的末尾，则为零。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或尚未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生了 I/O 错误。
    ///</exception>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    ///<summary>
    ///  开始异步读操作。
    ///</summary>
    ///  <param name="buffer">
    ///  将数据读入的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的字节偏移量，从此处开始读取。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///  <param name="callback">
    ///  异步读操作完成后调用的方法。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  引用异步读取的 <see cref="T:System.IAsyncResult" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束挂起的异步读取请求。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对挂起的异步请求的引用。
    ///</param>
    ///<returns>
    ///  已读取的字节数。
    ///  返回值 0 指示已到达流的末尾（管道已关闭）。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  不源于当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
    ///  方法。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流已关闭或出现了内部错误。
    ///</exception>
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    ///<summary>
    ///  使用缓冲区中的数据将字节块写入当前流。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入管道的数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  要写入当前流的最大字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>
    ///  开始异步写操作。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入当前流的数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  最多写入的字节数。
    ///</param>
    ///  <param name="callback">
    ///  异步写操作完成后调用的方法。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  一个引用异步写操作的 <see cref="T:System.IAsyncResult" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束挂起的异步写入请求。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对挂起的异步请求的引用。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  不是源自当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
    ///  方法。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流已关闭或出现了内部错误。
    ///</exception>
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    ///<summary>
    ///  清除当前流的缓冲区，并使所有缓冲的数据都写入到基础设备。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure Flush;
    ///<summary>
    ///  将当前流的长度设为指定值。
    ///</summary>
    ///  <param name="value">
    ///  流的新长度。
    ///</param>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  将当前流的当前位置设置为指定值。
    ///</summary>
    ///  <param name="offset">
    ///  相对于 <paramref name="origin" />
    ///  的点，从此处开始查找。
    ///</param>
    ///  <param name="origin">
    ///  使用 <see cref="T:System.IO.SeekOrigin" />
    ///  类型的值，将开始位置、结束位置或当前位置指定为 <paramref name="offset" />
    ///  的参考点。
    ///</param>
    ///<returns>
    ///  流中的新位置。
    ///</returns>
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    ///<summary>
    ///  从管道读取字节。
    ///</summary>
    ///<returns>
    ///  强制转换为 <see cref="T:System.Int32" />
    ///  的字节或 -1 指示到达流的末尾（管道已关闭）。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或尚未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生了 I/O 错误。
    ///</exception>
    function ReadByte: Int32;
    ///<summary>
    ///  将字节写入当前流。
    ///</summary>
    ///  <param name="value">
    ///  要写入流中的字节。
    ///</param>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure WriteByte(value: Byte);
    ///<summary>
    ///  等待管道另一端读取所有发送的字节。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure WaitForPipeDrain;
    ///<summary>
    ///  获取一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所描述管道的访问控制列表 (ACL) 项。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所描述管道的访问控制列表 (ACL) 项。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception>
    function GetAccessControl: DNPipeSecurity;
    ///<summary>
    ///  将 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象所指定的访问控制列表 (ACL) 项应用于由当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象指定的管道。
    ///</summary>
    ///  <param name="pipeSecurity">
    ///  一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象指定要应用于当前管道的访问控制列表 (ACL) 项。
    ///</param>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pipeSecurity" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception>
    procedure SetAccessControl(pipeSecurity: DNPipeSecurity);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取共享同一管道名称的服务器实例的数量。
    ///</summary>
    ///<returns>
    ///  共享同一管道名称的服务器实例的数量。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尚未设置管道句柄。
    ///  - 或 -
    ///  当前 <see cref="T:System.IO.Pipes.NamedPipeClientStream" />
    ///  对象尚未连接到 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  对象。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或发生了 I/O 错误。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  关闭基础管道句柄。
    ///</exception>
    property NumberOfServerInstances: Int32 read get_NumberOfServerInstances;
    ///<summary>
    ///  获取或设置一个值，该值指示是否已连接 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  如果已连接 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsConnected: Boolean read get_IsConnected;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象是异步打开还是同步打开。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象是异步打开的，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAsync: Boolean read get_IsAsync;
    ///<summary>
    ///  获取一个值，该值指示最近的读操作返回的消息中是否有更多数据。
    ///</summary>
    ///<returns>
    ///  如果消息中没有更多要读取的字符，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  管道不可连接。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///  - 或 -
    ///  管道的 <see cref="P:System.IO.Pipes.PipeStream.ReadMode" />
    ///  属性值不是 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
    ///  。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property IsMessageComplete: Boolean read get_IsMessageComplete;
    ///<summary>
    ///  获取当前管道支持的管道传输模式。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值之一，指示当前管道支持的传输模式。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尚未设置句柄。
    ///  - 或 -
    ///  管道正在等待在匿名客户端/服务器操作中进行连接或与命名客户端连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property TransmissionMode: DNPipeTransmissionMode read get_TransmissionMode;
    ///<summary>
    ///  获取管道的入站缓冲区的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  一个整数值，表示入站缓冲区的大小（以字节为单位）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  流不可读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道正在等待连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property InBufferSize: Int32 read get_InBufferSize;
    ///<summary>
    ///  获取管道的出站缓冲区的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  出站缓冲区的大小（以字节为单位）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  该流不可写入。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该管道正在等待连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property OutBufferSize: Int32 read get_OutBufferSize;
    ///<summary>
    ///  获取或设置 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象的读取模式。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值之一，指示如何从管道读取 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  所提供的值不是有效的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  所提供的值不是此管道流支持的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尚未设置句柄。
    ///  - 或 -
    ///  此管道正在等待与命名的客户端进行连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已中断，或命名的客户端发生了 I/O 错误。
    ///</exception>
    property ReadMode: DNPipeTransmissionMode read get_ReadMode write set_ReadMode;
    ///<summary>
    ///  获取当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所封装的本地管道末端的安全句柄。
    ///</summary>
    ///<returns>
    ///  由当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所封装的管道的一个 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property SafePipeHandle: DNSafePipeHandle read get_SafePipeHandle;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持读操作。
    ///</summary>
    ///<returns>
    ///  如果流支持读操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanRead: Boolean read get_CanRead;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持写操作。
    ///</summary>
    ///<returns>
    ///  如果流支持写操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持查找操作。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property CanSeek: Boolean read get_CanSeek;
    ///<summary>
    ///  获取流长度（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  始终引发。
    ///</exception>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取或设置当前流的当前位置。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  始终引发。
    ///</exception>
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNNamedPipeClientStream = class(TDNGenericImport<DNNamedPipeClientStreamClass, DNNamedPipeClientStream>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNNamedPipeServerStreamClass = interface(DNPipeStreamClass)
  ['{7E2F268F-F8F6-51A3-BA55-7DC9DBBD6A97}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  初始化具有指定的管道名称。
    ///</summary>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  是一个长度为零的字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="pipeName" />
    ///  包含一个冒号 (":")。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  已超出服务器实例的最大数量。
    ///</exception>
    {class} function init(pipeName: string): DNNamedPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  使用指定的管道名称和管道方向的类。
    ///</summary>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  是一个长度为零的字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="pipeName" />
    ///  包含一个冒号 (":")。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  已超出服务器实例的最大数量。
    ///</exception>
    {class} function init(pipeName: string; direction: DNPipeDirection): DNNamedPipeServerStream; overload;
    ///<summary>
    ///  使用指定的管道名称、管道方向和最大数量的服务器实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  类的一个新实例。
    ///</summary>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="maxNumberOfServerInstances">
    ///  共享同一名称的服务器实例的最大数量。
    ///  可以为此值传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  是一个长度为零的字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为“匿名”。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///  - 或 -
    ///  需要非负数。
    ///  - 或 -
    ///  <paramref name="maxNumberofServerInstances" />
    ///  小于 -1 或大于 254（-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  ）
    ///  - 或 -
    ///  需要 <see cref="F:System.IO.HandleInheritability.None" />
    ///  或 <see cref="F:System.IO.HandleInheritability.Inheritable" />
    ///  。
    ///  - 或 -
    ///  访问权限仅限于 <see cref="F:System.IO.Pipes.PipeAccessRights.ChangePermissions" />
    ///  、<see cref="F:System.IO.Pipes.PipeAccessRights.TakeOwnership" />
    ///  和 <see cref="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity" />
    ///  标志。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="pipeName" />
    ///  包含一个冒号 (":")。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  操作系统是不受支持的 Windows Millennium Edition、Windows 98 或 Windows 95。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  已超出服务器实例的最大数量。
    ///</exception>
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32): DNNamedPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  使用指定的管道名称、 管道方向、 最大数量的服务器实例和传输模式的类。
    ///</summary>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="maxNumberOfServerInstances">
    ///  共享同一名称的服务器实例的最大数量。
    ///  您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  为此值。
    ///</param>
    ///  <param name="transmissionMode">
    ///  确定管道传输模式的枚举值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  是一个长度为零的字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="maxNumberofServerInstances" />
    ///  小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  )
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="pipeName" />
    ///  包含一个冒号 (":")。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  已超出服务器实例的最大数量。
    ///</exception>
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode): DNNamedPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  类，具有指定的管道名称、 管道方向、 最大数量的服务器实例、 传输模式和管道选项。
    ///</summary>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="maxNumberOfServerInstances">
    ///  共享同一名称的服务器实例的最大数量。
    ///  您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  为此值。
    ///</param>
    ///  <param name="transmissionMode">
    ///  确定管道传输模式的枚举值之一。
    ///</param>
    ///  <param name="options">
    ///  确定如何打开或创建管道的枚举值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  是一个长度为零的字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="maxNumberofServerInstances" />
    ///  小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  )
    ///  - 或 -
    ///  <paramref name="options" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" />
    ///  值。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="pipeName" />
    ///  包含一个冒号 (":")。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  已超出服务器实例的最大数量。
    ///</exception>
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode; options: DNPipeOptions): DNNamedPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  使用指定的管道名称、 管道方向、 最大数目的服务器实例、 传输模式、 管道选项、 和建议的输入输出缓冲区大小。
    ///</summary>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="maxNumberOfServerInstances">
    ///  共享同一名称的服务器实例的最大数量。
    ///  您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  为此值。
    ///</param>
    ///  <param name="transmissionMode">
    ///  确定管道传输模式的枚举值之一。
    ///</param>
    ///  <param name="options">
    ///  确定如何打开或创建管道的枚举值之一。
    ///</param>
    ///  <param name="inBufferSize">
    ///  一个大于 0 的正值，指示输入缓冲区大小。
    ///</param>
    ///  <param name="outBufferSize">
    ///  一个大于 0 的正值，指示输出缓冲区大小。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  是一个长度为零的字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="maxNumberofServerInstances" />
    ///  小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  )
    ///  - 或 -
    ///  <paramref name="options" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="inBufferSize" />
    ///  为负数。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="pipeName" />
    ///  包含一个冒号 (":")。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  已超出服务器实例的最大数量。
    ///</exception>
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode; options: DNPipeOptions; inBufferSize: Int32; outBufferSize: Int32): DNNamedPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  类使用指定的管道名称、 管道方向、 最大数量的服务器实例、 传输模式、 管道选项、 建议的输入输出缓冲区大小和管道安全性。
    ///</summary>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="maxNumberOfServerInstances">
    ///  共享同一名称的服务器实例的最大数量。
    ///  您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  为此值。
    ///</param>
    ///  <param name="transmissionMode">
    ///  确定管道传输模式的枚举值之一。
    ///</param>
    ///  <param name="options">
    ///  确定如何打开或创建管道的枚举值之一。
    ///</param>
    ///  <param name="inBufferSize">
    ///  一个大于 0 的正值，指示输入缓冲区大小。
    ///</param>
    ///  <param name="outBufferSize">
    ///  一个大于 0 的正值，指示输出缓冲区大小。
    ///</param>
    ///  <param name="pipeSecurity">
    ///  一个对象，确定管道的访问控制和审核安全性。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  是一个长度为零的字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="maxNumberofServerInstances" />
    ///  小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  )
    ///  - 或 -
    ///  <paramref name="options" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="inBufferSize" />
    ///  为负数。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="pipeName" />
    ///  包含一个冒号 (":")。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  已超出服务器实例的最大数量。
    ///</exception>
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode; options: DNPipeOptions; inBufferSize: Int32; outBufferSize: Int32; pipeSecurity: DNPipeSecurity): DNNamedPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  类，具有指定的管道名称、 管道方向、 最大数量的服务器实例、 传输模式、 管道选项、 建议传入和传出的缓冲区大小、 管道安全性和继承模式。
    ///</summary>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="maxNumberOfServerInstances">
    ///  共享同一名称的服务器实例的最大数量。
    ///  您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  为此值。
    ///</param>
    ///  <param name="transmissionMode">
    ///  确定管道传输模式的枚举值之一。
    ///</param>
    ///  <param name="options">
    ///  确定如何打开或创建管道的枚举值之一。
    ///</param>
    ///  <param name="inBufferSize">
    ///  一个大于 0 的正值，指示输入缓冲区大小。
    ///</param>
    ///  <param name="outBufferSize">
    ///  一个大于 0 的正值，指示输出缓冲区大小。
    ///</param>
    ///  <param name="pipeSecurity">
    ///  一个对象，确定管道的访问控制和审核安全性。
    ///</param>
    ///  <param name="inheritability">
    ///  确定基础句柄能否由子进程继承的枚举值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  是一个长度为零的字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="maxNumberofServerInstances" />
    ///  小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  )
    ///  - 或 -
    ///  <paramref name="options" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="inBufferSize" />
    ///  为负数。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效的 <see cref="T:System.IO.HandleInheritability" />
    ///  值。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="pipeName" />
    ///  包含一个冒号 (":")。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  已超出服务器实例的最大数量。
    ///</exception>
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode; options: DNPipeOptions; inBufferSize: Int32; outBufferSize: Int32; pipeSecurity: DNPipeSecurity; inheritability: DNHandleInheritability): DNNamedPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  类使用指定的管道名称、 管道方向、 最大数量的服务器实例、 传输模式、 管道选项、 建议的输入输出缓冲区大小、 管道安全性、 继承模式和管道访问权限。
    ///</summary>
    ///  <param name="pipeName">
    ///  管道的名称。
    ///</param>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="maxNumberOfServerInstances">
    ///  共享同一名称的服务器实例的最大数量。
    ///  您可以将传递 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  为此值。
    ///</param>
    ///  <param name="transmissionMode">
    ///  确定管道传输模式的枚举值之一。
    ///</param>
    ///  <param name="options">
    ///  确定如何打开或创建管道的枚举值之一。
    ///</param>
    ///  <param name="inBufferSize">
    ///  输入缓冲区大小。
    ///</param>
    ///  <param name="outBufferSize">
    ///  输出缓冲区大小。
    ///</param>
    ///  <param name="pipeSecurity">
    ///  一个对象，确定管道的访问控制和审核安全性。
    ///</param>
    ///  <param name="inheritability">
    ///  确定基础句柄能否由子进程继承的枚举值之一。
    ///</param>
    ///  <param name="additionalAccessRights">
    ///  枚举值之一，指定管道的访问权限。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="pipeName" />
    ///  是一个长度为零的字符串。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />
    ///  设置为"anonymous"。
    ///  - 或 -
    ///  <paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="maxNumberofServerInstances" />
    ///  小于-1 或更高版本超过 254 个字符 (-1 指示 <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />
    ///  )
    ///  - 或 -
    ///  <paramref name="options" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeOptions" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="inBufferSize" />
    ///  为负数。
    ///  - 或 -
    ///  <paramref name="inheritability" />
    ///  不是有效的 <see cref="T:System.IO.HandleInheritability" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="additionalAccessRights" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeAccessRights" />
    ///  值。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="pipeName" />
    ///  包含一个冒号 (":")。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  操作系统是 Windows Millennium Edition、 Windows 98 或 Windows 95 中，这不受支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  已超出服务器实例的最大数量。
    ///</exception>
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode; options: DNPipeOptions; inBufferSize: Int32; outBufferSize: Int32; pipeSecurity: DNPipeSecurity; inheritability: DNHandleInheritability; additionalAccessRights: DNPipeAccessRights): DNNamedPipeServerStream; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  类从指定的管道句柄。
    ///</summary>
    ///  <param name="direction">
    ///  确定管道方向的枚举值之一。
    ///</param>
    ///  <param name="isAsync"><see langword="true" />
    ///  指示句柄已异步打开；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="isConnected"><see langword="true" />
    ///  若要指示管道已连接;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="safePipeHandle">
    ///  安全句柄的管道此 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  对象将封装。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction" />
    ///  不是有效的 <see cref="T:System.IO.Pipes.PipeDirection" />
    ///  值。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="safePipeHandle" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="safePipeHandle" />
    ///  是无效的句柄。
    ///</exception><exception cref="T:System.IO.IOException"><paramref name="safePipeHandle" />
    ///  不是有效的管道句柄。
    ///  - 或 -
    ///  已超出服务器实例的最大数量。
    ///</exception>
    {class} function init(direction: DNPipeDirection; isAsync: Boolean; isConnected: Boolean; safePipeHandle: DNSafePipeHandle): DNNamedPipeServerStream; overload;

  end;

  ///<summary>
  ///  公开 <see cref="T:System.IO.Stream" />
  ///  命名管道周围程序支持同步和异步读取和写入操作。
  ///</summary>
  [DNTypeName('System.IO.Pipes.NamedPipeServerStream')]
  DNNamedPipeServerStream = interface(DNPipeStream)
  ['{EEE4B52F-087D-3660-8637-0CD5D6568F66}']
  { getters & setters } 

    function get_IsConnected: Boolean;
    function get_IsAsync: Boolean;
    function get_IsMessageComplete: Boolean;
    function get_TransmissionMode: DNPipeTransmissionMode;
    function get_InBufferSize: Int32;
    function get_OutBufferSize: Int32;
    function get_ReadMode: DNPipeTransmissionMode;
    procedure set_ReadMode(value: DNPipeTransmissionMode);
    function get_SafePipeHandle: DNSafePipeHandle;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    ///<summary>
    ///  等待客户端连接到该 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  对象。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  已建立管道连接。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道连接已中断。
    ///</exception>
    procedure WaitForConnection;
    ///<summary>
    ///  异步等待客户端连接到该 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  对象并监视取消请求。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步等待操作的任务。
    ///</returns>
    function WaitForConnectionAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  以异步方式等待客户端连接到该 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  表示异步等待操作的任务。
    ///</returns>
    function WaitForConnectionAsync: DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  开始异步操作以等待客户端建立连接。
    ///</summary>
    ///  <param name="callback">
    ///  当客户端连接时要调用的方法 <see cref="T:System.IO.Pipes.NamedPipeServerStream" />
    ///  对象。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  一个引用该异步请求的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不以异步方式打开管道。
    ///  - 或 -
    ///  已建立管道连接。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道连接已中断。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    function BeginWaitForConnection(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束异步操作以等待客户端建立连接。
    ///</summary>
    ///  <param name="asyncResult">
    ///  挂起的异步请求。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不以异步方式打开管道。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道连接已中断。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    procedure EndWaitForConnection(asyncResult: DDN.mscorlib.DNIAsyncResult);
    ///<summary>
    ///  断开当前连接。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尚未建立任何管道连接。
    ///  - 或 -
    ///  已断开连接的管道。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    procedure Disconnect;
    ///<summary>
    ///  模拟客户端时调用委托。
    ///</summary>
    ///  <param name="impersonationWorker">
    ///  指定要调用的方法的委托。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尚未建立任何管道连接。
    ///  - 或 -
    ///  已断开连接的管道。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道连接已中断。
    ///  - 或 -
    ///  出现 I/O 错误。
    ///</exception>
    procedure RunAsClient(impersonationWorker: DNPipeStreamImpersonationWorker);
    ///<summary>
    ///  获取管道另一端的客户端用户名。
    ///</summary>
    ///<returns>
    ///  管道另一端的客户端用户名。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尚未建立任何管道连接。
    ///  - 或 -
    ///  已断开连接的管道。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道连接已中断。
    ///  - 或 -
    ///  客户端的用户名的长度超过 19 个字符。
    ///</exception>
    function GetImpersonationUserName: string;
    ///<summary>
    ///  从流中读取字节块，并将数据写入指定的缓冲区。
    ///</summary>
    ///  <param name="buffer">
    ///  此方法返回时包含指定的字节数组，数组中 <paramref name="offset" />
    ///  和 (<paramref name="offset" />
    ///  + <paramref name="count" />
    ///  - 1) 之间的值被从当前源中读取的字节替换。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  数组中的字节偏移量，其中读取的字节将被替换。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///<returns>
    ///  读取到 <paramref name="buffer" />
    ///  的总字节数。
    ///  如果当前可用的字节数没有请求的那么多，则此数小于请求的字节数；或如果已到达流的末尾，则为零。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或尚未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生了 I/O 错误。
    ///</exception>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    ///<summary>
    ///  开始异步读操作。
    ///</summary>
    ///  <param name="buffer">
    ///  将数据读入的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的字节偏移量，从此处开始读取。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///  <param name="callback">
    ///  异步读操作完成后调用的方法。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  引用异步读取的 <see cref="T:System.IAsyncResult" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束挂起的异步读取请求。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对挂起的异步请求的引用。
    ///</param>
    ///<returns>
    ///  已读取的字节数。
    ///  返回值 0 指示已到达流的末尾（管道已关闭）。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  不源于当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
    ///  方法。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流已关闭或出现了内部错误。
    ///</exception>
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    ///<summary>
    ///  使用缓冲区中的数据将字节块写入当前流。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入管道的数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  要写入当前流的最大字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>
    ///  开始异步写操作。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入当前流的数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  最多写入的字节数。
    ///</param>
    ///  <param name="callback">
    ///  异步写操作完成后调用的方法。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  一个引用异步写操作的 <see cref="T:System.IAsyncResult" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于 0。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中可用的字节数。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束挂起的异步写入请求。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对挂起的异步请求的引用。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  不是源自当前流的 <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
    ///  方法。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流已关闭或出现了内部错误。
    ///</exception>
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    ///<summary>
    ///  清除当前流的缓冲区，并使所有缓冲的数据都写入到基础设备。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure Flush;
    ///<summary>
    ///  将当前流的长度设为指定值。
    ///</summary>
    ///  <param name="value">
    ///  流的新长度。
    ///</param>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  将当前流的当前位置设置为指定值。
    ///</summary>
    ///  <param name="offset">
    ///  相对于 <paramref name="origin" />
    ///  的点，从此处开始查找。
    ///</param>
    ///  <param name="origin">
    ///  使用 <see cref="T:System.IO.SeekOrigin" />
    ///  类型的值，将开始位置、结束位置或当前位置指定为 <paramref name="offset" />
    ///  的参考点。
    ///</param>
    ///<returns>
    ///  流中的新位置。
    ///</returns>
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    ///<summary>
    ///  从管道读取字节。
    ///</summary>
    ///<returns>
    ///  强制转换为 <see cref="T:System.Int32" />
    ///  的字节或 -1 指示到达流的末尾（管道已关闭）。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持读取操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或尚未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  发生了 I/O 错误。
    ///</exception>
    function ReadByte: Int32;
    ///<summary>
    ///  将字节写入当前流。
    ///</summary>
    ///  <param name="value">
    ///  要写入流中的字节。
    ///</param>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道已断开连接，正在等待连接，或未设置句柄。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure WriteByte(value: Byte);
    ///<summary>
    ///  等待管道另一端读取所有发送的字节。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  管道不支持写入操作。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    procedure WaitForPipeDrain;
    ///<summary>
    ///  获取一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所描述管道的访问控制列表 (ACL) 项。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象封装当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所描述管道的访问控制列表 (ACL) 项。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception>
    function GetAccessControl: DNPipeSecurity;
    ///<summary>
    ///  将 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象所指定的访问控制列表 (ACL) 项应用于由当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象指定的管道。
    ///</summary>
    ///  <param name="pipeSecurity">
    ///  一个 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，该对象指定要应用于当前管道的访问控制列表 (ACL) 项。
    ///</param>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pipeSecurity" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  用于设置安全信息的基础调用失败。
    ///</exception>
    procedure SetAccessControl(pipeSecurity: DNPipeSecurity);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否已连接 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  如果已连接 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsConnected: Boolean read get_IsConnected;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象是异步打开还是同步打开。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象是异步打开的，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAsync: Boolean read get_IsAsync;
    ///<summary>
    ///  获取一个值，该值指示最近的读操作返回的消息中是否有更多数据。
    ///</summary>
    ///<returns>
    ///  如果消息中没有更多要读取的字符，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  管道不可连接。
    ///  - 或 -
    ///  尚未设置管道句柄。
    ///  - 或 -
    ///  管道的 <see cref="P:System.IO.Pipes.PipeStream.ReadMode" />
    ///  属性值不是 <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />
    ///  。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property IsMessageComplete: Boolean read get_IsMessageComplete;
    ///<summary>
    ///  获取当前管道支持的管道传输模式。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值之一，指示当前管道支持的传输模式。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尚未设置句柄。
    ///  - 或 -
    ///  管道正在等待在匿名客户端/服务器操作中进行连接或与命名客户端连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property TransmissionMode: DNPipeTransmissionMode read get_TransmissionMode;
    ///<summary>
    ///  获取管道的入站缓冲区的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  一个整数值，表示入站缓冲区的大小（以字节为单位）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  流不可读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  管道正在等待连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property InBufferSize: Int32 read get_InBufferSize;
    ///<summary>
    ///  获取管道的出站缓冲区的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  出站缓冲区的大小（以字节为单位）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  该流不可写入。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该管道正在等待连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已损坏或出现其他 I/O 错误。
    ///</exception>
    property OutBufferSize: Int32 read get_OutBufferSize;
    ///<summary>
    ///  获取或设置 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象的读取模式。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值之一，指示如何从管道读取 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  所提供的值不是有效的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  所提供的值不是此管道流支持的 <see cref="T:System.IO.Pipes.PipeTransmissionMode" />
    ///  值。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尚未设置句柄。
    ///  - 或 -
    ///  此管道正在等待与命名的客户端进行连接。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  管道已中断，或命名的客户端发生了 I/O 错误。
    ///</exception>
    property ReadMode: DNPipeTransmissionMode read get_ReadMode write set_ReadMode;
    ///<summary>
    ///  获取当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所封装的本地管道末端的安全句柄。
    ///</summary>
    ///<returns>
    ///  由当前 <see cref="T:System.IO.Pipes.PipeStream" />
    ///  对象所封装的管道的一个 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尚未设置管道句柄。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  管道已关闭。
    ///</exception>
    property SafePipeHandle: DNSafePipeHandle read get_SafePipeHandle;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持读操作。
    ///</summary>
    ///<returns>
    ///  如果流支持读操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanRead: Boolean read get_CanRead;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持写操作。
    ///</summary>
    ///<returns>
    ///  如果流支持写操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持查找操作。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property CanSeek: Boolean read get_CanSeek;
    ///<summary>
    ///  获取流长度（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  始终引发。
    ///</exception>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取或设置当前流的当前位置。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  始终引发。
    ///</exception>
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNNamedPipeServerStream = class(TDNGenericImport<DNNamedPipeServerStreamClass, DNNamedPipeServerStream>)
  public const
    ///<summary>
    ///  表示系统资源允许的服务器实例的最大数量。
    ///</summary>
   MaxAllowedServerInstances = -1;
  end;

  //-------------namespace: System.IO.MemoryMappedFiles----------------
  DNMemoryMappedViewStreamClass = interface(DDN.mscorlib.DNUnmanagedMemoryStreamClass)
  ['{CBD98D5D-5589-5DAA-BA9B-6C12C43FA3ED}']
  end;

  ///<summary>
  ///  按顺序访问流形式表示内存映射文件的视图。
  ///</summary>
  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedViewStream')]
  DNMemoryMappedViewStream = interface(DDN.mscorlib.DNUnmanagedMemoryStream)
  ['{63C140CE-8AE0-3B66-A1FF-1F58E7EC6125}']
  { getters & setters } 

    function get_SafeMemoryMappedViewHandle: DNSafeMemoryMappedViewHandle;
    function get_PointerOffset: Int64;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Capacity: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_PositionPointer: PByte;
    procedure set_PositionPointer(value: PByte);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    ///<summary>
    ///  设置当前流的长度。
    ///</summary>
    ///  <param name="value">
    ///  所需的当前流的长度（以字节表示）。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  不支持此方法。
    ///</exception>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  清除此流的所有缓冲区，使得所有缓冲的数据写入到基础文件。
    ///</summary>
    procedure Flush;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function ReadByte: Int32;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function Seek(offset: Int64; loc: DDN.mscorlib.DNSeekOrigin): Int64;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取内存映射文件的视图的句柄。
    ///</summary>
    ///<returns>
    ///  文件的视图的操作系统的句柄包装器。
    ///</returns>
    property SafeMemoryMappedViewHandle: DNSafeMemoryMappedViewHandle read get_SafeMemoryMappedViewHandle;
    ///<summary>
    ///  [在 .NET Framework 4.5.1 和更高版本中受支持]
    ///  获取内存映射文件的开头的偏移此视图的起始位置的字节数。
    ///</summary>
    ///<returns>
    ///  此视图的起始位置和内存映射文件的开头之间的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  从中创建此实例的对象是 <see langword="null" />
    ///  。
    ///</exception>
    property PointerOffset: Int64 read get_PointerOffset;
    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Capacity: Int64 read get_Capacity;
    property Position: Int64 read get_Position write set_Position;
    property PositionPointer: PByte read get_PositionPointer write set_PositionPointer;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNMemoryMappedViewStream = class(TDNGenericImport<DNMemoryMappedViewStreamClass, DNMemoryMappedViewStream>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComAwareEventInfoClass = interface(DDN.mscorlib.DNEventInfoClass)
  ['{65F48C0B-8FB0-5AF1-9FA7-0B2BBFC8B5C7}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />
    ///  类类型上使用指定的类型和事件的名称。
    ///</summary>
    ///  <param name="type">
    ///  对象的类型。
    ///</param>
    ///  <param name="eventName">
    ///  上的事件的名称 <paramref name="type" />
    ///  。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; eventName: string): DNComAwareEventInfo;

  end;

  ///<summary>
  ///  允许事件处理程序的后期绑定注册。
  ///</summary>
  [DNTypeName('System.Runtime.InteropServices.ComAwareEventInfo')]
  DNComAwareEventInfo = interface(DDN.mscorlib.DNEventInfo)
  ['{BA1F0751-BB5A-34C6-A927-CB44517C154F}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNEventAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_AddMethod: DDN.mscorlib.DNMethodInfo;
    function get_RemoveMethod: DDN.mscorlib.DNMethodInfo;
    function get_RaiseMethod: DDN.mscorlib.DNMethodInfo;
    function get_EventHandlerType: DDN.mscorlib.DNType;
    function get_IsSpecialName: Boolean;
    function get_IsMulticast: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  将事件处理程序附加到 COM 对象。
    ///</summary>
    ///  <param name="target">
    ///  应将事件委托绑定到目标对象。
    ///</param>
    ///  <param name="handler">
    ///  事件委托。
    ///</param>
    procedure AddEventHandler(target: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNDelegate);
    ///<summary>
    ///  将事件处理程序从 COM 对象分离。
    ///</summary>
    ///  <param name="target">
    ///  事件委托所绑定的目标对象。
    ///</param>
    ///  <param name="handler">
    ///  事件委托。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该事件没有公共 <see langword="remove" />
    ///  访问器。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  无法使用传入的处理程序。
    ///</exception><exception cref="T:System.Reflection.TargetException">
    ///  在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />
    ///  。
    ///  <paramref name="target" />
    ///  参数为 <see langword="null" />
    ///  ，并且此事件不是静态事件。
    ///  - 或 -
    ///  未在目标上声明 <see cref="T:System.Reflection.EventInfo" />
    ///  。
    ///</exception><exception cref="T:System.MethodAccessException">
    ///  在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />
    ///  。
    ///  调用方没有对成员的访问权限。
    ///</exception>
    procedure RemoveEventHandler(target: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNDelegate);
    ///<summary>
    ///  获取用于将事件处理程序委托添加到事件源的方法。
    ///</summary>
    ///  <param name="nonPublic"><see langword="true" />
    ///  若要返回非公共方法; 这些方法否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  用于添加事件处理程序的方法委托添加到事件源。
    ///</returns>
    ///<exception cref="T:System.MethodAccessException"><paramref name="nonPublic" />
    ///  是 <see langword="true" />
    ///  和用来添加事件处理程序委托的方法是非公共的但调用方没有权限，以反映对非公共方法。
    ///</exception>
    function GetAddMethod(nonPublic: Boolean): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  当在派生类中重写返回时引发该事件时，将调用的方法。
    ///</summary>
    ///  <param name="nonPublic"><see langword="true" />
    ///  若要返回非公共方法; 这些方法否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  引发事件时，将调用该对象。
    ///</returns>
    ///<exception cref="T:System.MethodAccessException"><paramref name="nonPublic" />
    ///  是 <see langword="true" />
    ///  和用来添加事件处理程序委托的方法是非公共的但调用方没有权限，以反映对非公共方法。
    ///</exception>
    function GetRaiseMethod(nonPublic: Boolean): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  当在派生类中重写，将检索 <see cref="T:System.Reflection.MethodInfo" />
    ///  用于移除事件的方法的对象。
    ///</summary>
    ///  <param name="nonPublic"><see langword="true" />
    ///  若要返回非公共方法; 这些方法否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  从事件源委托用于移除事件处理程序的方法。
    ///</returns>
    ///<exception cref="T:System.MethodAccessException"><paramref name="nonPublic" />
    ///  是 <see langword="true" />
    ///  和用来添加事件处理程序委托的方法是非公共的但调用方没有权限，以反映对非公共方法。
    ///</exception>
    function GetRemoveMethod(nonPublic: Boolean): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  当在派生类中重写时获取包含指定类型的应用于此成员的所有自定义特性的数组。
    ///</summary>
    ///  <param name="attributeType">
    ///  要搜索的属性类型。
    ///  可分配给此类型的属性可能会返回。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承链，以查找这些属性;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组，包含指定类型的所有自定义属性或如果未不定义任何特性不包含任何元素的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="attributeType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此成员所属加载到只反射上下文的类型。
    ///  请参见如何：将程序集加载到仅反射上下文中
    ///</exception><exception cref="T:System.TypeLoadException">
    ///  无法加载自定义特性类型。
    ///</exception>
    function GetCustomAttributes(attributeType: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  当在派生类中重写，获取一个数组，包含应用于此成员的所有自定义属性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承链，以查找这些属性;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组，包含所有自定义属性或如果未不定义任何特性不包含任何元素的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此成员所属加载到只反射上下文的类型。
    ///  请参阅 如何：将程序集加载到仅反射上下文中。
    ///</exception><exception cref="T:System.TypeLoadException">
    ///  无法加载自定义特性类型。
    ///</exception>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  指示指定的属性的一个或多个实例是否已应用于此成员。
    ///</summary>
    ///  <param name="attributeType">
    ///  要搜索的属性类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承链，以查找这些属性;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果已将指定的特性应用于此成员;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDefined(attributeType: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetOtherMethods(nonPublic: Boolean): TArray<DDN.mscorlib.DNMethodInfo>; overload;
    function GetOtherMethods: TArray<DDN.mscorlib.DNMethodInfo>; overload;
    function GetAddMethod: DDN.mscorlib.DNMethodInfo; overload;
    function GetRemoveMethod: DDN.mscorlib.DNMethodInfo; overload;
    function GetRaiseMethod: DDN.mscorlib.DNMethodInfo; overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此事件的属性。
    ///</summary>
    ///<returns>
    ///  此事件的只读特性。
    ///</returns>
    property Attributes: DDN.mscorlib.DNEventAttributes read get_Attributes;
    ///<summary>
    ///  获取声明此成员的类。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象为声明此成员的类。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  获取当前成员的名称。
    ///</summary>
    ///<returns>
    ///  此成员的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取用于初始化此实例的类对象。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  用于初始化当前对象的对象。
    ///</returns>
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property AddMethod: DDN.mscorlib.DNMethodInfo read get_AddMethod;
    property RemoveMethod: DDN.mscorlib.DNMethodInfo read get_RemoveMethod;
    property RaiseMethod: DDN.mscorlib.DNMethodInfo read get_RaiseMethod;
    property EventHandlerType: DDN.mscorlib.DNType read get_EventHandlerType;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsMulticast: Boolean read get_IsMulticast;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNComAwareEventInfo = class(TDNGenericImport<DNComAwareEventInfoClass, DNComAwareEventInfo>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF5BB585-7D2C-5820-9CED-5D7625C9CE98}']
  { static methods } 

    ///<summary>
    ///  创建一个调用站点使用给定的委托类型和联编程序。
    ///</summary>
    ///  <param name="delegateType">
    ///  调用站点的委托类型。
    ///</param>
    ///  <param name="binder">
    ///  调用站点绑定程序。
    ///</param>
    ///<returns>
    ///  新的调用站点。
    ///</returns>
    {class} function Create(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder): DNCallSite;

  end;

  ///<summary>
  ///  动态调用站点基类。
  ///  此类型用作动态站点目标的参数类型。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.CallSite')]
  DNCallSite = interface(DDN.mscorlib.DNObject)
  ['{4D1003B0-101E-3F22-8385-B9EC933241F4}']
  { getters & setters } 

    function get_Binder: DNCallSiteBinder;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  类负责绑定动态站点上的动态操作。
    ///</summary>
    ///<returns><see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  负责绑定动态操作的对象。
    ///</returns>
    property Binder: DNCallSiteBinder read get_Binder;
  end;

  TDNCallSite = class(TDNGenericImport<DNCallSiteClass, DNCallSite>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteClass<T> = interface(DNCallSiteClass)
  ['{9E2D81D5-337E-5090-BABD-C98E8AEFB481}']
  { static methods } 

    ///<summary>
    ///  创建动态调用站点，负责此调用站点上的动态操作的运行时绑定联编程序使用初始化的实例。
    ///</summary>
    ///  <param name="binder">
    ///  负责此调用站点上的动态操作的运行时绑定联编程序。
    ///</param>
    ///<returns>
    ///  动态调用站点的新实例。
    ///</returns>
    {class} function Create(binder: DNCallSiteBinder): DNCallSite<T>;

  end;

  ///<summary>
  ///  动态站点类型。
  ///</summary>
  ///<typeparam name="T">
  ///  委托类型。
  ///</typeparam>
  [DNTypeName('System.Runtime.CompilerServices.CallSite`1')]
  DNCallSite<T> = interface(DNCallSite)
  ['{075CCE7B-3A5F-3A98-9152-D4434E4DA73A}']
  { getters & setters } 

    function get_Update: T;
    function get_Binder: DNCallSiteBinder;

  { fields getter & setter } 

   function __fakeFieldGet_Target: T;
   procedure __fakeFieldSet_Target(value: T);

  { fields } 

    ///<summary>
    ///  级别 0 缓存中的专用的委托基于站点历史记录。
    ///</summary>
   property Target: T read __fakeFieldGet_Target write __fakeFieldSet_Target;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  更新委托。
    ///  当动态站点遇到缓存未命中时调用。
    ///</summary>
    ///<returns>
    ///  更新委托。
    ///</returns>
    property Update: T read get_Update;
    ///<summary>
    ///  类负责绑定动态站点上的动态操作。
    ///</summary>
    ///<returns><see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />
    ///  负责绑定动态操作的对象。
    ///</returns>
    property Binder: DNCallSiteBinder read get_Binder;
  end;

  TDNCallSite<T> = class(TDNGenericImport<DNCallSiteClass<T>, DNCallSite<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteBinderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{34462BF9-1452-57B3-8E16-F9899ACF6DAB}']
  { static getter & setter } 

    {class} function get_UpdateLabel: DNLabelTarget;

  { static propertys } 

    ///<summary>
    ///  获取可用于导致绑定要更新的标签。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.LabelTarget" />
    ///  对象表示可用于触发绑定更新的标签。
    ///</returns>
    {class} property UpdateLabel: DNLabelTarget read get_UpdateLabel;
  end;

  ///<summary>
  ///  类负责对动态调用站点的动态操作的运行时绑定。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.CallSiteBinder')]
  DNCallSiteBinder = interface(DDN.mscorlib.DNObject)
  ['{BCD9EDA4-1357-3A60-9EA1-6355DBD5BF0C}']
  { methods } 

    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCallSiteBinder = class(TDNGenericImport<DNCallSiteBinderClass, DNCallSiteBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicMetaObjectBinderClass = interface(DNCallSiteBinderClass)
  ['{A6A76F5F-9880-5131-B78B-B7867857703B}']
  end;

  ///<summary>
  ///  参与动态调用站点绑定程序 <see cref="T:System.Dynamic.DynamicMetaObject" />
  ///  绑定协议。
  ///</summary>
  [DNTypeName('System.Dynamic.DynamicMetaObjectBinder')]
  DNDynamicMetaObjectBinder = interface(DNCallSiteBinder)
  ['{6A983AD6-7E2D-3D4C-8EAA-FD2034A3E964}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;

  { methods } 

    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  当在派生类中重写，执行动态操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
  end;

  TDNDynamicMetaObjectBinder = class(TDNGenericImport<DNDynamicMetaObjectBinderClass, DNDynamicMetaObjectBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNBinaryOperationBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{BA8D570D-6856-58AC-A568-8DE00E735847}']
  end;

  ///<summary>
  ///  表示调用站点的二进制动态操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.BinaryOperationBinder')]
  DNBinaryOperationBinder = interface(DNDynamicMetaObjectBinder)
  ['{8ED92572-3BA2-3C0A-A0FA-141CB95C920D}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Operation: DNExpressionType;

  { methods } 

    ///<summary>
    ///  如果将绑定目标动态对象不能，执行的二进制动态操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态的二元运算的目标。
    ///</param>
    ///  <param name="arg">
    ///  右操作数的动态二元运算。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackBinaryOperation(target: DNDynamicMetaObject; arg: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行动态的二元运算的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  在派生类中重写时，如果将绑定目标动态对象不能执行的二进制动态操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态的二元运算的目标。
    ///</param>
    ///  <param name="arg">
    ///  右操作数的动态二元运算。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  绑定结果，如果绑定失败，则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackBinaryOperation(target: DNDynamicMetaObject; arg: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns>
    ///  操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  二元运算类型。
    ///</summary>
    ///<returns><see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  表示二元运算的类型的对象。
    ///</returns>
    property Operation: DNExpressionType read get_Operation;
  end;

  TDNBinaryOperationBinder = class(TDNGenericImport<DNBinaryOperationBinderClass, DNBinaryOperationBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNConvertBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{68C2C489-7CC0-5997-9D4C-688617763E83}']
  end;

  ///<summary>
  ///  表示调用站点的转换动态操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.ConvertBinder')]
  DNConvertBinder = interface(DNDynamicMetaObjectBinder)
  ['{973E6069-DD67-316A-B894-42302D1B1E2F}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_Explicit: Boolean;
    function get_ReturnType: DDN.mscorlib.DNType;

  { methods } 

    ///<summary>
    ///  如果无法绑定目标动态对象，请执行动态转换操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态转换操作的目标。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackConvert(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行动态转换操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态转换操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态转换操作的参数的数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  在派生类中重写时，如果目标动态对象不能将绑定执行动态转换操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态转换操作的目标。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackConvert(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  要转换为的类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示要转换的类型。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  获取一个值，指示转换应视为显式转换。
    ///</summary>
    ///<returns><see langword="True" />
    ///  如果没有显式转换，否则 <see langword="false" />
    ///  。
    ///</returns>
    property Explicit: Boolean read get_Explicit;
    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
  end;

  TDNConvertBinder = class(TDNGenericImport<DNConvertBinderClass, DNConvertBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNCreateInstanceBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{5E3B6808-F825-56EE-A339-6BC569483010}']
  end;

  ///<summary>
  ///  表示调用站点的动态创建操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.CreateInstanceBinder')]
  DNCreateInstanceBinder = interface(DNDynamicMetaObjectBinder)
  ['{18AFA6C3-B588-374F-9FF3-39F79F0B0A3B}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    ///<summary>
    ///  执行的动态绑定创建操作，如果目标动态对象不能绑定。
    ///</summary>
    ///  <param name="target">
    ///  目标的动态创建操作。
    ///</param>
    ///  <param name="args">
    ///  动态的参数创建操作。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackCreateInstance(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  当在派生类中重写，则执行的动态创建操作，如果目标动态对象不能绑定。
    ///</summary>
    ///  <param name="target">
    ///  目标的动态创建操作。
    ///</param>
    ///  <param name="args">
    ///  动态的参数创建操作。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackCreateInstance(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行的动态绑定创建操作。
    ///</summary>
    ///  <param name="target">
    ///  目标的动态创建操作。
    ///</param>
    ///  <param name="args">
    ///  动态参数的数组创建操作。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  在调用站点处获取参数的签名。
    ///</summary>
    ///<returns>
    ///  调用站点处参数的签名。
    ///</returns>
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNCreateInstanceBinder = class(TDNGenericImport<DNCreateInstanceBinderClass, DNCreateInstanceBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDeleteIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{8ACCC0E5-0014-58C6-A0E8-1E8BBB869D49}']
  end;

  ///<summary>
  ///  表示调用站点的动态删除索引操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.DeleteIndexBinder')]
  DNDeleteIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{CC51734E-887B-3AF6-AB1A-3C417974430E}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    ///<summary>
    ///  如果目标动态对象不能绑定，请执行动态删除索引操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态删除索引操作的目标。
    ///</param>
    ///  <param name="indexes">
    ///  参数的动态删除索引操作。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackDeleteIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行动态删除索引操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态删除索引操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态删除索引操作的参数的数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  在派生类中重写时，如果目标动态对象不能将绑定执行动态删除索引操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态删除索引操作的目标。
    ///</param>
    ///  <param name="indexes">
    ///  参数的动态删除索引操作。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackDeleteIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  在调用站点处获取参数的签名。
    ///</summary>
    ///<returns>
    ///  调用站点处参数的签名。
    ///</returns>
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNDeleteIndexBinder = class(TDNGenericImport<DNDeleteIndexBinderClass, DNDeleteIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDeleteMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{6B9B9B85-E9D0-53F2-95DE-5D8EF23C2785}']
  end;

  ///<summary>
  ///  表示调用站点的动态删除成员操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.DeleteMemberBinder')]
  DNDeleteMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{A079571A-181F-3F2F-A556-8CDEBC1621B2}']
  { getters & setters } 

    function get_Name: string;
    function get_IgnoreCase: Boolean;
    function get_ReturnType: DDN.mscorlib.DNType;

  { methods } 

    ///<summary>
    ///  如果目标动态对象不能绑定，请执行动态删除成员操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态删除成员操作的目标。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackDeleteMember(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行动态删除成员操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态删除成员操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态删除成员操作的参数的数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  在派生类中重写时，如果目标动态对象不能将绑定执行动态删除成员操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态删除成员操作的目标。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackDeleteMember(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要删除的成员的名称。
    ///</summary>
    ///<returns>
    ///  要删除的成员的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取一个值，指示字符串比较应忽略成员名称的大小写。
    ///</summary>
    ///<returns>
    ///  如果字符串比较应忽略大小写，否则为 false，则为 true。
    ///</returns>
    property IgnoreCase: Boolean read get_IgnoreCase;
    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
  end;

  TDNDeleteMemberBinder = class(TDNGenericImport<DNDeleteMemberBinderClass, DNDeleteMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNGetIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{53780E3C-7403-58B9-8634-8180CDE79977}']
  end;

  ///<summary>
  ///  表示调用站点的动态获取索引操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.GetIndexBinder')]
  DNGetIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{5AD435E4-178B-32C4-A0AE-F4075DE49C43}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    ///<summary>
    ///  如果目标动态对象不能绑定，请执行动态获取索引操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态获取索引操作的目标。
    ///</param>
    ///  <param name="indexes">
    ///  动态的参数获取索引操作。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackGetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行动态获取索引操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态获取索引操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态获取索引操作的参数的数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  在派生类中重写时，如果目标动态对象不能将绑定执行动态获取索引操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态获取索引操作的目标。
    ///</param>
    ///  <param name="indexes">
    ///  动态的参数获取索引操作。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackGetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  在调用站点处获取参数的签名。
    ///</summary>
    ///<returns>
    ///  调用站点处参数的签名。
    ///</returns>
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNGetIndexBinder = class(TDNGenericImport<DNGetIndexBinderClass, DNGetIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNGetMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{075F6E9F-CAA5-5CAD-BDD0-38A378E34FC2}']
  end;

  ///<summary>
  ///  表示调用站点的动态获取成员操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.GetMemberBinder')]
  DNGetMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{76C49417-49E8-301F-BDE1-7A8BCB1C27FB}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;

  { methods } 

    ///<summary>
    ///  如果目标动态对象不能绑定，请执行动态获取成员操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态获取成员操作的目标。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackGetMember(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行动态获取成员操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态获取成员操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态获取成员操作的参数的数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  在派生类中重写时，如果目标动态对象不能将绑定执行动态获取成员操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态获取成员操作的目标。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackGetMember(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  获取要获取的成员的名称。
    ///</summary>
    ///<returns>
    ///  要获取的成员的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取一个值，指示字符串比较应忽略成员名称的大小写。
    ///</summary>
    ///<returns>
    ///  如果这种情况会将其忽略，否则为 false，则为 true。
    ///</returns>
    property IgnoreCase: Boolean read get_IgnoreCase;
  end;

  TDNGetMemberBinder = class(TDNGenericImport<DNGetMemberBinderClass, DNGetMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNInvokeBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{467A2FAE-A5A2-501A-82B4-353C9E365BDA}']
  end;

  ///<summary>
  ///  表示调用站点的调用动态操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.InvokeBinder')]
  DNInvokeBinder = interface(DNDynamicMetaObjectBinder)
  ['{98DBA2B2-D1B2-3F8C-BAF5-C0DE2F86F02B}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    ///<summary>
    ///  如果无法绑定目标动态对象，则指定动态调用操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态调用操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态调用操作的参数。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  如果无法绑定目标动态对象，则指定动态调用操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态调用操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态调用操作的参数。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行动态调用绑定操作。
    ///</summary>
    ///  <param name="target">
    ///  动态调用操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态调用操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  在调用站点处获取参数的签名。
    ///</summary>
    ///<returns>
    ///  调用站点处参数的签名。
    ///</returns>
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNInvokeBinder = class(TDNGenericImport<DNInvokeBinderClass, DNInvokeBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNInvokeMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{EE6CFFB5-1859-56F8-9FD9-E290FD94B861}']
  end;

  ///<summary>
  ///  表示调用站点的调用成员动态操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.InvokeMemberBinder')]
  DNInvokeMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{48CDD99E-177D-349C-A2CA-5CCD50A9D752}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;
    function get_CallInfo: DNCallInfo;

  { methods } 

    ///<summary>
    ///  执行的动态绑定调用成员操作，如果目标动态对象不能绑定。
    ///</summary>
    ///  <param name="target">
    ///  目标动态调用成员操作。
    ///</param>
    ///  <param name="args">
    ///  成员操作调用的动态参数。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackInvokeMember(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行的动态绑定调用成员操作。
    ///</summary>
    ///  <param name="target">
    ///  目标动态调用成员操作。
    ///</param>
    ///  <param name="args">
    ///  动态参数的数组调用成员操作。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  当在派生类中重写时执行的动态绑定调用成员操作，如果目标动态对象不能绑定。
    ///</summary>
    ///  <param name="target">
    ///  目标动态调用成员操作。
    ///</param>
    ///  <param name="args">
    ///  成员操作调用的动态参数。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackInvokeMember(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    ///<summary>
    ///  当在派生类中重写时执行的动态绑定调用操作，如果目标动态对象不能绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态调用操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态调用操作的参数。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  获取要调用的成员的名称。
    ///</summary>
    ///<returns>
    ///  要调用的成员的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取一个值，指示字符串比较应忽略成员名称的大小写。
    ///</summary>
    ///<returns>
    ///  如果这种情况会将其忽略，否则为 false，则为 true。
    ///</returns>
    property IgnoreCase: Boolean read get_IgnoreCase;
    ///<summary>
    ///  在调用站点处获取参数的签名。
    ///</summary>
    ///<returns>
    ///  调用站点处参数的签名。
    ///</returns>
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNInvokeMemberBinder = class(TDNGenericImport<DNInvokeMemberBinderClass, DNInvokeMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNSetIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{4B73D843-88C7-5CD2-86D8-08B551A0851B}']
  end;

  ///<summary>
  ///  表示调用站点的动态设置索引操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.SetIndexBinder')]
  DNSetIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{B6401EEF-824B-33DA-AD20-4D7A5AD59D69}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    ///<summary>
    ///  如果目标动态对象不能绑定，请执行动态设置索引操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态设置索引操作的目标。
    ///</param>
    ///  <param name="indexes">
    ///  动态设置索引操作的参数。
    ///</param>
    ///  <param name="value">
    ///  要设置为集合的值。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackSetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行动态设置索引操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态设置索引操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态设置索引操作的参数的数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  在派生类中重写时，如果目标动态对象不能将绑定执行动态设置索引操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态设置索引操作的目标。
    ///</param>
    ///  <param name="indexes">
    ///  动态设置索引操作的参数。
    ///</param>
    ///  <param name="value">
    ///  要设置为集合的值。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackSetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  在调用站点处获取参数的签名。
    ///</summary>
    ///<returns>
    ///  调用站点处参数的签名。
    ///</returns>
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNSetIndexBinder = class(TDNGenericImport<DNSetIndexBinderClass, DNSetIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNSetMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{3F9001FC-B825-5B95-B7FE-88BA83C1F05A}']
  end;

  ///<summary>
  ///  表示调用站点的动态设置成员操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.SetMemberBinder')]
  DNSetMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{E70B4C11-B8CF-3EE6-9DB5-B4ECB078E384}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;

  { methods } 

    ///<summary>
    ///  执行动态设置成员操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态设置成员操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态设置成员操作的参数的数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  如果目标动态对象不能绑定，请执行动态设置成员操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态设置成员操作的目标。
    ///</param>
    ///  <param name="value">
    ///  要设置为成员的值。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackSetMember(target: DNDynamicMetaObject; value: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    ///<summary>
    ///  如果目标动态对象不能绑定，请执行动态设置成员操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态设置成员操作的目标。
    ///</param>
    ///  <param name="value">
    ///  要设置为成员的值。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  如果绑定失败，则为要使用的绑定结果；否则为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackSetMember(target: DNDynamicMetaObject; value: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  获取要获取的成员的名称。
    ///</summary>
    ///<returns>
    ///  要获取的成员的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取一个值，指示字符串比较应忽略成员名称的大小写。
    ///</summary>
    ///<returns>
    ///  如果这种情况会将其忽略，否则为 false，则为 true。
    ///</returns>
    property IgnoreCase: Boolean read get_IgnoreCase;
  end;

  TDNSetMemberBinder = class(TDNGenericImport<DNSetMemberBinderClass, DNSetMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNUnaryOperationBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{6E0C0F71-441A-57D2-AC27-02F09C1619B7}']
  end;

  ///<summary>
  ///  表示调用站点的一元动态操作，提供有关操作的绑定语义和详细信息。
  ///</summary>
  [DNTypeName('System.Dynamic.UnaryOperationBinder')]
  DNUnaryOperationBinder = interface(DNDynamicMetaObjectBinder)
  ['{A3E57BC0-4680-3F4F-847B-96360A2C990F}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Operation: DNExpressionType;

  { methods } 

    ///<summary>
    ///  如果将绑定目标动态对象不能，执行的一元动态操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态一元运算的目标。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackUnaryOperation(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    ///<summary>
    ///  执行动态一元运算的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  如果将绑定目标动态对象不能，执行的一元动态操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态一元运算的目标。
    ///</param>
    ///  <param name="errorSuggestion">
    ///  绑定导致绑定失败的情况下，或为 null。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function FallbackUnaryOperation(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    ///<summary>
    ///  获取一个表达式，将导致要更新的绑定。
    ///  它指示表达式的绑定将不再有效。
    ///  它通常用于动态对象的"版本"已更改。
    ///</summary>
    ///  <param name="type"><see cref="P:System.Linq.Expressions.Expression.Type" />
    ///  属性所得到的表达式; 可以是任何类型。
    ///</param>
    ///<returns>
    ///  更新表达式。
    ///</returns>
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    ///<summary>
    ///  将推迟到更高版本时计算的动态操作的所有参数的运行时值之后的时间操作的绑定。
    ///</summary>
    ///  <param name="target">
    ///  动态操作的目标。
    ///</param>
    ///  <param name="args">
    ///  动态操作的参数数组。
    ///</param>
    ///<returns>
    ///  表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />
    ///  。
    ///</returns>
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  操作的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  对象，表示操作的结果类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  一元运算类型。
    ///</summary>
    ///<returns>
    ///  对象的 <see cref="T:System.Linq.Expressions.ExpressionType" />
    ///  表示一元运算类型。
    ///</returns>
    property Operation: DNExpressionType read get_Operation;
  end;

  TDNUnaryOperationBinder = class(TDNGenericImport<DNUnaryOperationBinderClass, DNUnaryOperationBinder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteHelpersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{809B9BDC-6F43-59E7-A870-A00CE714F956}']
  { static methods } 

    ///<summary>
    ///  检查是否 <see cref="T:System.Reflection.MethodBase" />
    ///  DLR 在内部使用，不应显示的语言代码的堆栈上。
    ///</summary>
    ///  <param name="mb">
    ///  输入 <see cref="T:System.Reflection.MethodBase" />
    ///</param>
    ///<returns>
    ///  True 输入 <see cref="T:System.Reflection.MethodBase" />
    ///  DLR 在内部使用，不应显示的语言代码的堆栈上。
    ///  否则为 false。
    ///</returns>
    {class} function IsInternalFrame(mb: DDN.mscorlib.DNMethodBase): Boolean;

  end;

  ///<summary>
  ///  包含 DLR 调用站点的帮助器方法的类。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.CallSiteHelpers')]
  DNCallSiteHelpers = interface(DDN.mscorlib.DNObject)
  ['{0EEE6BAC-3911-3134-9282-363968BB9E79}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCallSiteHelpers = class(TDNGenericImport<DNCallSiteHelpersClass, DNCallSiteHelpers>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteOpsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB46A7F1-5950-5403-9FA3-C65B4EB6DAFA}']
  { static methods } 

    ///<summary>
    ///  检查动态站点是否需要更新。
    ///</summary>
    ///  <param name="site">
    ///  动态调用站点的实例。
    ///</param>
    ///<returns>
    ///  如果规则不需要更新，false 否则为 true。
    ///</returns>
    {class} function SetNotMatched(site: DNCallSite): Boolean;
    ///<summary>
    ///  检查是否已执行的规则匹配
    ///</summary>
    ///  <param name="site">
    ///  动态调用站点的实例。
    ///</param>
    ///<returns>
    ///  规则匹配，则返回 false 否则如果为 true。
    ///</returns>
    {class} function GetMatch(site: DNCallSite): Boolean;
    ///<summary>
    ///  清除上作出匹配调用站点的匹配标志。
    ///</summary>
    ///  <param name="site">
    ///  动态调用站点的实例。
    ///</param>
    {class} procedure ClearMatch(site: DNCallSite);

  end;

  ///<summary>
  ///  创建并缓存绑定规则。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.CallSiteOps')]
  DNCallSiteOps = interface(DDN.mscorlib.DNObject)
  ['{32D98445-057B-359D-8569-68C1CF2419C3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCallSiteOps = class(TDNGenericImport<DNCallSiteOpsClass, DNCallSiteOps>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNClosureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2DB44898-4CA9-52E8-9576-49AEFFD7811F}']
  { constructors } 

    ///<summary>
    ///  创建一个对象以保存状态的动态生成的方法。
    ///</summary>
    ///  <param name="constants">
    ///  由该方法使用的常量值。
    ///</param>
    ///  <param name="locals">
    ///  从父级上下文提升的局部变量。
    ///</param>
    {class} function init(constants: TArray<DDN.mscorlib.DNObject>; locals: TArray<DDN.mscorlib.DNObject>): DNClosure;

  { static fields getter & setter } 

   function __fakeFieldGet_Constants: TArray<DDN.mscorlib.DNObject>;
   function __fakeFieldGet_Locals: TArray<DDN.mscorlib.DNObject>;

  { static fields } 

    ///<summary>
    ///  表示非常用常量以及可在本地执行动态生成的方法引用的表达式。
    ///</summary>
    {class} property Constants: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Constants;
    ///<summary>
    ///  表示从父上下文提升的局部变量。
    ///</summary>
    {class} property Locals: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Locals;

  end;

  ///<summary>
  ///  表示动态生成的方法的运行时状态。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.Closure')]
  DNClosure = interface(DDN.mscorlib.DNObject)
  ['{EAD5CB0A-0A3A-31D6-86B6-F3FF288ABC75}']
  { fields getter & setter } 

   function __fakeFieldGet_Constants: TArray<DDN.mscorlib.DNObject>;
   function __fakeFieldGet_Locals: TArray<DDN.mscorlib.DNObject>;

  { fields } 

    ///<summary>
    ///  表示非常用常量以及可在本地执行动态生成的方法引用的表达式。
    ///</summary>
   property Constants: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Constants;
    ///<summary>
    ///  表示从父上下文提升的局部变量。
    ///</summary>
   property Locals: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Locals;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClosure = class(TDNGenericImport<DNClosureClass, DNClosure>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDebugInfoGeneratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A6BB4B0C-F26E-5E0F-B15B-F934EDB62583}']
  { static methods } 

    ///<summary>
    ///  创建程序数据库 (PDB) 符号生成器。
    ///</summary>
    ///<returns>
    ///  PDB 符号生成器。
    ///</returns>
    {class} function CreatePdbGenerator: DNDebugInfoGenerator;

  end;

  ///<summary>
  ///  在表达式目录树中生成调试信息的 lambda 表达式。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.DebugInfoGenerator')]
  DNDebugInfoGenerator = interface(DDN.mscorlib.DNObject)
  ['{08BB7FFD-FA62-3E00-9CAF-2FF883CC52C9}']
  { methods } 

    ///<summary>
    ///  将 Microsoft 中间语言 (MSIL) 代码中的序列点的标记。
    ///</summary>
    ///  <param name="method">
    ///  生成 lambda 表达式。
    ///</param>
    ///  <param name="ilOffset">
    ///  在标记的序列点从该处的 MSIL 代码的偏移量。
    ///</param>
    ///  <param name="sequencePoint">
    ///  调试序列点相对应的信息。
    ///</param>
    procedure MarkSequencePoint(method: DNLambdaExpression; ilOffset: Int32; sequencePoint: DNDebugInfoExpression);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDebugInfoGenerator = class(TDNGenericImport<DNDebugInfoGeneratorClass, DNDebugInfoGenerator>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNExecutionScopeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27A95380-3E27-5F99-B5D9-13FA6862172D}']
  end;

  ///<summary>
  ///  表示动态生成的方法的运行时状态。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.ExecutionScope')]
  DNExecutionScope = interface(DDN.mscorlib.DNObject)
  ['{AC27F267-2762-3BCD-9E36-E7542E948F3C}']
  { fields getter & setter } 

   function __fakeFieldGet_Parent: DNExecutionScope;
   procedure __fakeFieldSet_Parent(value: DNExecutionScope);
   function __fakeFieldGet_Globals: TArray<DDN.mscorlib.DNObject>;
   procedure __fakeFieldSet_Globals(value: TArray<DDN.mscorlib.DNObject>);
   function __fakeFieldGet_Locals: TArray<DDN.mscorlib.DNObject>;
   procedure __fakeFieldSet_Locals(value: TArray<DDN.mscorlib.DNObject>);

  { fields } 

    ///<summary>
    ///  表示调用委托的执行范围。
    ///</summary>
   property Parent: DNExecutionScope read __fakeFieldGet_Parent write __fakeFieldSet_Parent;
    ///<summary>
    ///  表示非常用常量以及可在本地执行动态生成的方法引用的表达式。
    ///</summary>
   property Globals: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Globals write __fakeFieldSet_Globals;
    ///<summary>
    ///  表示从父上下文提升的局部变量。
    ///</summary>
   property Locals: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Locals write __fakeFieldSet_Locals;

  { methods } 

    ///<summary>
    ///  创建用于存储提升的局部变量的数组。
    ///</summary>
    ///<returns>
    ///  用于存储提升的局部变量的数组。
    ///</returns>
    function CreateHoistedLocals: TArray<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  创建可用于执行动态生成的方法的委托。
    ///</summary>
    ///  <param name="indexLambda">
    ///  有关存储信息的对象的索引关联动态方法的 lambda 的表达式。
    ///</param>
    ///  <param name="locals">
    ///  一个数组，包含从父上下文提升的局部变量。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Delegate" />
    ///  ，可以执行动态生成的方法。
    ///</returns>
    function CreateDelegate(indexLambda: Int32; locals: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNDelegate;
    ///<summary>
    ///  通过将参数替换为其当前值释放外部参数引用指定的表达式的树。
    ///</summary>
    ///  <param name="expression">
    ///  要释放的外部参数引用的表达式树。
    ///</param>
    ///  <param name="locals">
    ///  一个数组，包含提升的局部变量。
    ///</param>
    ///<returns>
    ///  不包含外部参数引用表达式目录树。
    ///</returns>
    function IsolateExpression(expression: DNExpression; locals: TArray<DDN.mscorlib.DNObject>): DNExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExecutionScope = class(TDNGenericImport<DNExecutionScopeClass, DNExecutionScope>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNReadOnlyCollectionBuilderClass<T> = interface(DNObjectClass)
  ['{F68329FD-7F52-5FC6-BCCA-F8E98EF3297A}']
  { constructors } 

    ///<summary>
    ///  构造一个 ReadOnlyCollectionBuilder。
    ///</summary>
    {class} function init: DNReadOnlyCollectionBuilder<T>; overload;
    ///<summary>
    ///  构造 ReadOnlyCollectionBuilder 使用给定的初始容量。
    ///  内容为空但生成器将保留空间给定数量的元素之前是必需的任何重新分配。
    ///</summary>
    ///  <param name="capacity">
    ///  初始容量。
    ///</param>
    {class} function init(capacity: Int32): DNReadOnlyCollectionBuilder<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>): DNReadOnlyCollectionBuilder<T>; overload;

  end;

  ///<summary>
  ///  只读集合的生成器。
  ///</summary>
  ///<typeparam name="T">
  ///  集合元素的类型。
  ///</typeparam>
  [DNTypeName('System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1')]
  DNReadOnlyCollectionBuilder<T> = interface(DDN.mscorlib.DNIList<T>)
  ['{82C86E9E-0EE9-38CE-9081-0DA70555B3DE}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    ///<summary>
    ///  移除位于指定索引处的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />
    ///  项。
    ///</summary>
    ///  <param name="index">
    ///  要移除的项的从零开始的索引。
    ///</param>
    procedure RemoveAt(index: Int32);
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    ///<summary>
    ///  返回一个循环访问集合的枚举器。
    ///</summary>
    ///<returns>
    ///  一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<T>;
    ///<summary>
    ///  将整个 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />
    ///  中元素的顺序反转。
    ///</summary>
    procedure Reverse; overload;
    ///<summary>
    ///  将指定范围中元素的顺序反转。
    ///</summary>
    ///  <param name="index">
    ///  要反转的范围的从零开始的起始索引。
    ///</param>
    ///  <param name="count">
    ///  要反转的范围内的元素数。
    ///</param>
    procedure Reverse(index: Int32; count: Int32); overload;
    ///<summary>
    ///  将 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />
    ///  的元素复制到新数组中。
    ///</summary>
    ///<returns>
    ///  一个包含 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />
    ///  的元素副本的数组。
    ///</returns>
    function ToArray: TArray<T>;
    ///<summary>
    ///  创建 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  其中包含的元素的所有 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />
    ///  , ，避免如有可能将元素复制到新数组。
    ///  重置 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />
    ///  后 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  已创建。
    ///</summary>
    ///<returns><see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  的新实例。
    ///</returns>
    function ToReadOnlyCollection: DDN.mscorlib.DNReadOnlyCollection<T>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取和设置此容量 ReadOnlyCollectionBuilder。
    ///</summary>
    ///<returns>
    ///  此容量 ReadOnlyCollectionBuilder.
    ///</returns>
    property Capacity: Int32 read get_Capacity write set_Capacity;
    ///<summary>
    ///  返回中的元素数 ReadOnlyCollectionBuilder。
    ///</summary>
    ///<returns>
    ///  ReadOnlyCollectionBuilder 中的元素的数量。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyCollectionBuilder<T> = class(TDNGenericImport<DNReadOnlyCollectionBuilderClass<T>, DNReadOnlyCollectionBuilder<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuleCacheClass<T> = interface(DDN.mscorlib.DNObjectClass)
  ['{D3516F87-A7F0-54FB-8118-AF1CF5A77DE0}']
  end;

  ///<summary>
  ///  表示运行时绑定规则的缓存。
  ///</summary>
  ///<typeparam name="T">
  ///  委托类型。
  ///</typeparam>
  [DNTypeName('System.Runtime.CompilerServices.RuleCache`1')]
  DNRuleCache<T> = interface(DDN.mscorlib.DNObject)
  ['{843EC5E4-1C53-3234-8CF0-FF8BA9473544}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRuleCache<T> = class(TDNGenericImport<DNRuleCacheClass<T>, DNRuleCache<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeOpsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8783E89C-8A85-5F6B-A816-B21DB6F58B7C}']
  { static methods } 

    {class} function ExpandoTryGetValue(expando: DNExpandoObject; indexClass: DDN.mscorlib.DNObject; index: Int32; name: string; ignoreCase: Boolean; out value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Expando 对象中设置项的值。
    ///</summary>
    ///  <param name="expando">
    ///  Expando 对象中。
    ///</param>
    ///  <param name="indexClass">
    ///  Expando 对象的类。
    ///</param>
    ///  <param name="index">
    ///  成员的索引。
    ///</param>
    ///  <param name="value">
    ///  成员的值。
    ///</param>
    ///  <param name="name">
    ///  成员名。
    ///</param>
    ///  <param name="ignoreCase">
    ///  如果应该忽略大小写; 匹配名称则为 truefalse 否则为。
    ///</param>
    ///<returns>
    ///  返回组成员的索引。
    ///</returns>
    {class} function ExpandoTrySetValue(expando: DNExpandoObject; indexClass: DDN.mscorlib.DNObject; index: Int32; value: DDN.mscorlib.DNObject; name: string; ignoreCase: Boolean): DDN.mscorlib.DNObject;
    ///<summary>
    ///  检查该版本的 Expando 对象。
    ///</summary>
    ///  <param name="expando">
    ///  Expando 对象中。
    ///</param>
    ///  <param name="version">
    ///  要检查的版本。
    ///</param>
    ///<returns>
    ///  如果版本为相等; 则返回 true否则为 false。
    ///</returns>
    {class} function ExpandoCheckVersion(expando: DNExpandoObject; version: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  将 Expando 对象从一个类提升到一个新类。
    ///</summary>
    ///  <param name="expando">
    ///  Expando 对象中。
    ///</param>
    ///  <param name="oldClass">
    ///  Expando 对象的旧类。
    ///</param>
    ///  <param name="newClass">
    ///  Expando 对象的新类。
    ///</param>
    {class} procedure ExpandoPromoteClass(expando: DNExpandoObject; oldClass: DDN.mscorlib.DNObject; newClass: DDN.mscorlib.DNObject);
    ///<summary>
    ///  引号提供的表达式树。
    ///</summary>
    ///  <param name="expression">
    ///  要用引号引起来的表达式。
    ///</param>
    ///  <param name="hoistedLocals">
    ///  编译器提供的已提升本地状态。
    ///</param>
    ///  <param name="locals">
    ///  实际的已提升本地值。
    ///</param>
    ///<returns>
    ///  带引号的表达式。
    ///</returns>
    {class} function Quote(expression: DNExpression; hoistedLocals: DDN.mscorlib.DNObject; locals: TArray<DDN.mscorlib.DNObject>): DNExpression;
    ///<summary>
    ///  组合两个运行时变量列表，并返回一个新列表。
    ///</summary>
    ///  <param name="first">
    ///  第一个列表。
    ///</param>
    ///  <param name="second">
    ///  第二个列表。
    ///</param>
    ///  <param name="indexes">
    ///  索引数组，该值指示哪个列表中获取的变量。
    ///</param>
    ///<returns>
    ///  合并的运行时变量中。
    ///</returns>
    {class} function MergeRuntimeVariables(first: DNIRuntimeVariables; second: DNIRuntimeVariables; indexes: TArray<Int32>): DNIRuntimeVariables;
    ///<summary>
    ///  创建一个可以用于修改封闭式变量在运行时的接口。
    ///</summary>
    ///  <param name="data">
    ///  闭包数组中。
    ///</param>
    ///  <param name="indexes">
    ///  一个数组中找到的变量的闭包数组的索引数组。
    ///</param>
    ///<returns>
    ///  若要访问的变量一个接口。
    ///</returns>
    {class} function CreateRuntimeVariables(data: TArray<DDN.mscorlib.DNObject>; indexes: TArray<Int64>): DNIRuntimeVariables; overload;
    ///<summary>
    ///  创建一个可以用于修改封闭式变量在运行时的接口。
    ///</summary>
    ///<returns>
    ///  若要访问的变量一个接口。
    ///</returns>
    {class} function CreateRuntimeVariables: DNIRuntimeVariables; overload;
    ///<summary>
    ///  删除 expando 对象中的项的值。
    ///</summary>
    ///  <param name="expando">
    ///  Expando 对象中。
    ///</param>
    ///  <param name="indexClass">
    ///  Expando 对象的类。
    ///</param>
    ///  <param name="index">
    ///  成员的索引。
    ///</param>
    ///  <param name="name">
    ///  成员名。
    ///</param>
    ///  <param name="ignoreCase">
    ///  如果应该忽略大小写; 匹配名称则为 truefalse 否则为。
    ///</param>
    ///<returns>
    ///  如果成功移除了该项，则为 true否则为 false。
    ///</returns>
    {class} function ExpandoTryDeleteValue(expando: DNExpandoObject; indexClass: DDN.mscorlib.DNObject; index: Int32; name: string; ignoreCase: Boolean): Boolean;

  end;

  ///<summary>
  ///  包含从动态生成的方法调用的帮助器方法。
  ///</summary>
  [DNTypeName('System.Runtime.CompilerServices.RuntimeOps')]
  DNRuntimeOps = interface(DDN.mscorlib.DNObject)
  ['{382FF925-51E8-36DE-A45B-B3130C1B73F7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRuntimeOps = class(TDNGenericImport<DNRuntimeOpsClass, DNRuntimeOps>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStrongBoxClass<T> = interface(DNObjectClass)
  ['{EC821084-B4D6-5A62-8608-A362311BCCFE}']
  { constructors } 

    ///<summary>
    ///  初始化新 StrongBox 可以引用调用中接收时使用的值。
    ///</summary>
    {class} function init: DNStrongBox<T>; overload;
    {class} function init(value: T): DNStrongBox<T>; overload;

  end;

  ///<summary>
  ///  保存对值的引用。
  ///</summary>
  ///<typeparam name="T"><see cref="T:System.Runtime.CompilerServices.StrongBox`1" />
  ///  引用的值的类型。
  ///</typeparam>
  [DNTypeName('System.Runtime.CompilerServices.StrongBox`1')]
  DNStrongBox<T> = interface(DNIStrongBox)
  ['{C4521547-B39F-37D3-8E93-67687516BD6A}']
  { fields getter & setter } 

   function __fakeFieldGet_Value: T;
   procedure __fakeFieldSet_Value(value: T);

  { fields } 

    ///<summary>
    ///  表示值的 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />
    ///  引用。
    ///</summary>
   property Value: T read __fakeFieldGet_Value write __fakeFieldSet_Value;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStrongBox<T> = class(TDNGenericImport<DNStrongBoxClass<T>, DNStrongBox<T>>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeMemoryMappedFileHandleClass = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{5D11D27F-FF02-5CA2-B9B9-B80A3A3A366A}']
  end;

  ///<summary>
  ///  提供了一个表示顺序访问的内存映射文件的安全句柄。
  ///</summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle')]
  DNSafeMemoryMappedFileHandle = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{AC0FD8B9-81F8-3BBE-9F9A-6EFF76C768C8}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeMemoryMappedFileHandle = class(TDNGenericImport<DNSafeMemoryMappedFileHandleClass, DNSafeMemoryMappedFileHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeNCryptHandleClass = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{B5A81318-8F8B-557D-B009-C49AC837FBA7}']
  end;

  ///<summary>
  ///  提供了可被下一代加密技术 (CNG) 对象使用的安全句柄。
  ///</summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeNCryptHandle')]
  DNSafeNCryptHandle = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{7E6E4B23-E285-3902-BE11-1FBE52E40F86}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeNCryptHandle = class(TDNGenericImport<DNSafeNCryptHandleClass, DNSafeNCryptHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeNCryptKeyHandleClass = interface(DNSafeNCryptHandleClass)
  ['{D9135D1B-C023-5899-BAB4-19738FCE55AA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSafeNCryptKeyHandle; overload;
    {class} function init(handle: IntPtr; parentHandle: DDN.mscorlib.DNSafeHandle): DNSafeNCryptKeyHandle; overload;

  end;

  ///<summary>
  ///  提供了表示密钥 (NCRYPT_KEY_HANDLE) 的安全句柄。
  ///</summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle')]
  DNSafeNCryptKeyHandle = interface(DNSafeNCryptHandle)
  ['{60BE2FF8-FDDA-34FC-8B3E-636723C09825}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeNCryptKeyHandle = class(TDNGenericImport<DNSafeNCryptKeyHandleClass, DNSafeNCryptKeyHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeNCryptProviderHandleClass = interface(DNSafeNCryptHandleClass)
  ['{2BAC7F90-7D64-5E9E-A9C1-D4493B1028DF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSafeNCryptProviderHandle;

  end;

  ///<summary>
  ///  提供了表示密钥存储提供程序 (NCRYPT_PROV_HANDLE) 的安全句柄。
  ///</summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle')]
  DNSafeNCryptProviderHandle = interface(DNSafeNCryptHandle)
  ['{A62D2278-04C5-39AA-9306-F5BF4E6090D2}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeNCryptProviderHandle = class(TDNGenericImport<DNSafeNCryptProviderHandleClass, DNSafeNCryptProviderHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeNCryptSecretHandleClass = interface(DNSafeNCryptHandleClass)
  ['{1F56CE4B-5EE1-54D3-A383-E79414AF23AF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSafeNCryptSecretHandle;

  end;

  ///<summary>
  ///  提供了表示机密协议值 (NCRYPT_SECRET_HANDLE) 的安全句柄。
  ///</summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle')]
  DNSafeNCryptSecretHandle = interface(DNSafeNCryptHandle)
  ['{3CDC8272-242A-3C71-B6CD-A3A47BD64896}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeNCryptSecretHandle = class(TDNGenericImport<DNSafeNCryptSecretHandleClass, DNSafeNCryptSecretHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafePipeHandleClass = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{A3DD8E7B-D61E-5A14-9B9C-116F81DC4296}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="preexistingHandle"><see cref="T:System.IntPtr" />
    ///  对象，表示要使用的预先存在的句柄。
    ///</param>
    ///  <param name="ownsHandle">
    ///  若要在终止阶段可靠地释放此句柄，则为 <see langword="true" />
    ///  ；若要阻止可靠释放（不建议使用），则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(preexistingHandle: IntPtr; ownsHandle: Boolean): DNSafePipeHandle;

  end;

  ///<summary>
  ///  表示管道句柄的包装类。
  ///</summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafePipeHandle')]
  DNSafePipeHandle = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{FB017894-B72B-34E1-B885-2FFF041C6C5C}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafePipeHandle = class(TDNGenericImport<DNSafePipeHandleClass, DNSafePipeHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeMemoryMappedViewHandleClass = interface(DDN.mscorlib.DNSafeBufferClass)
  ['{B53664B2-3636-50FA-9EE7-33883F0B2EFF}']
  end;

  ///<summary>
  ///  提供安全句柄表示的随机访问非托管内存块的视图。
  ///</summary>
  [DNTypeName('Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle')]
  DNSafeMemoryMappedViewHandle = interface(DDN.mscorlib.DNSafeBuffer)
  ['{C96C10C1-0F9D-3B15-80FB-836783ACE9BF}']
  { getters & setters } 

    function get_ByteLength: UInt64;
    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure AcquirePointer(out pointer: PByte);
    procedure Initialize(numBytes: UInt64); overload;
    procedure Initialize(numElements: UInt32; sizeOfEachElement: UInt32); overload;
    procedure ReleasePointer;
    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ByteLength: UInt64 read get_ByteLength;
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeMemoryMappedViewHandle = class(TDNGenericImport<DNSafeMemoryMappedViewHandleClass, DNSafeMemoryMappedViewHandle>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNPipeAccessRuleClass = interface(DDN.mscorlib.DNAccessRuleClass)
  ['{87305EE8-5721-5AFC-9B43-5EC35AA2683A}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.PipeAccessRule" />
    ///  用指定的标识、 管道访问权限和访问控制类型。
    ///</summary>
    ///  <param name="identity">
    ///  用户帐户的名称。
    ///</param>
    ///  <param name="rights">
    ///  其中一个 <see cref="T:System.IO.Pipes.PipeAccessRights" />
    ///  值，该值指定与访问规则关联的操作类型。
    ///</param>
    ///  <param name="type">
    ///  其中一个 <see cref="T:System.Security.AccessControl.AccessControlType" />
    ///  值，该值指定是否要允许或拒绝该操作。
    ///</param>
    {class} function init(identity: string; rights: DNPipeAccessRights; &type: DDN.mscorlib.DNAccessControlType): DNPipeAccessRule; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.PipeAccessRule" />
    ///  用指定的标识、 管道访问权限和访问控制类型。
    ///</summary>
    ///  <param name="identity"><see cref="T:System.Security.Principal.IdentityReference" />
    ///  封装对用户帐户的引用的对象。
    ///</param>
    ///  <param name="rights">
    ///  其中一个 <see cref="T:System.IO.Pipes.PipeAccessRights" />
    ///  值，该值指定与访问规则关联的操作类型。
    ///</param>
    ///  <param name="type">
    ///  其中一个 <see cref="T:System.Security.AccessControl.AccessControlType" />
    ///  值，该值指定是否要允许或拒绝该操作。
    ///</param>
    {class} function init(identity: DDN.mscorlib.DNIdentityReference; rights: DNPipeAccessRights; &type: DDN.mscorlib.DNAccessControlType): DNPipeAccessRule; overload;

  end;

  ///<summary>
  ///  表示定义管道的访问规则的访问控制项 (ACE) 的抽象。
  ///</summary>
  [DNTypeName('System.IO.Pipes.PipeAccessRule')]
  DNPipeAccessRule = interface(DDN.mscorlib.DNAccessRule)
  ['{46B53ED0-F6FD-3A93-BF16-88D1DA1D528B}']
  { getters & setters } 

    function get_PipeAccessRights: DNPipeAccessRights;
    function get_AccessControlType: DDN.mscorlib.DNAccessControlType;
    function get_IdentityReference: DDN.mscorlib.DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DDN.mscorlib.DNInheritanceFlags;
    function get_PropagationFlags: DDN.mscorlib.DNPropagationFlags;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.IO.Pipes.PipeAccessRights" />
    ///  与当前关联的标志 <see cref="T:System.IO.Pipes.PipeAccessRule" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeAccessRights" />
    ///  值的按位组合。
    ///</returns>
    property PipeAccessRights: DNPipeAccessRights read get_PipeAccessRights;
    property AccessControlType: DDN.mscorlib.DNAccessControlType read get_AccessControlType;
    property IdentityReference: DDN.mscorlib.DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DDN.mscorlib.DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DDN.mscorlib.DNPropagationFlags read get_PropagationFlags;
  end;

  TDNPipeAccessRule = class(TDNGenericImport<DNPipeAccessRuleClass, DNPipeAccessRule>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNPipeAuditRuleClass = interface(DDN.mscorlib.DNAuditRuleClass)
  ['{5C1051CB-D3DF-5516-AC21-F5AA2F4A1285}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.PipeAuditRule" />
    ///  类中指定用户帐户 <see cref="T:System.Security.Principal.IdentityReference" />
    ///  对象。
    ///</summary>
    ///  <param name="identity"><see cref="T:System.Security.Principal.IdentityReference" />
    ///  封装对用户帐户的引用的对象。
    ///</param>
    ///  <param name="rights">
    ///  其中一个 <see cref="T:System.IO.Pipes.PipeAccessRights" />
    ///  值，该值指定与访问规则关联的操作类型。
    ///</param>
    ///  <param name="flags">
    ///  其中一个 <see cref="T:System.Security.AccessControl.AuditFlags" />
    ///  值，该值指定何时执行审核。
    ///</param>
    {class} function init(identity: DDN.mscorlib.DNIdentityReference; rights: DNPipeAccessRights; flags: DDN.mscorlib.DNAuditFlags): DNPipeAuditRule; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Pipes.PipeAuditRule" />
    ///  命名的用户帐户的类。
    ///</summary>
    ///  <param name="identity">
    ///  用户帐户的名称。
    ///</param>
    ///  <param name="rights">
    ///  其中一个 <see cref="T:System.IO.Pipes.PipeAccessRights" />
    ///  值，该值指定与访问规则关联的操作类型。
    ///</param>
    ///  <param name="flags">
    ///  其中一个 <see cref="T:System.Security.AccessControl.AuditFlags" />
    ///  值，该值指定何时执行审核。
    ///</param>
    {class} function init(identity: string; rights: DNPipeAccessRights; flags: DDN.mscorlib.DNAuditFlags): DNPipeAuditRule; overload;

  end;

  ///<summary>
  ///  表示定义管道的审核规则的访问控制项 (ACE) 的抽象。
  ///</summary>
  [DNTypeName('System.IO.Pipes.PipeAuditRule')]
  DNPipeAuditRule = interface(DDN.mscorlib.DNAuditRule)
  ['{20E3BC0A-2B9C-3530-BCD7-75C9D6B4C513}']
  { getters & setters } 

    function get_PipeAccessRights: DNPipeAccessRights;
    function get_AuditFlags: DDN.mscorlib.DNAuditFlags;
    function get_IdentityReference: DDN.mscorlib.DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DDN.mscorlib.DNInheritanceFlags;
    function get_PropagationFlags: DDN.mscorlib.DNPropagationFlags;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.IO.Pipes.PipeAccessRights" />
    ///  与当前关联的标志 <see cref="T:System.IO.Pipes.PipeAuditRule" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.IO.Pipes.PipeAccessRights" />
    ///  值的按位组合。
    ///</returns>
    property PipeAccessRights: DNPipeAccessRights read get_PipeAccessRights;
    property AuditFlags: DDN.mscorlib.DNAuditFlags read get_AuditFlags;
    property IdentityReference: DDN.mscorlib.DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DDN.mscorlib.DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DDN.mscorlib.DNPropagationFlags read get_PropagationFlags;
  end;

  TDNPipeAuditRule = class(TDNGenericImport<DNPipeAuditRuleClass, DNPipeAuditRule>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNPipeSecurityClass = interface(DDN.mscorlib.DNNativeObjectSecurityClass)
  ['{A254AFF3-00EA-5DB9-9E4C-602C08CA1BE4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPipeSecurity;

  end;

  ///<summary>
  ///  表示访问控制和审核安全性管道。
  ///</summary>
  [DNTypeName('System.IO.Pipes.PipeSecurity')]
  DNPipeSecurity = interface(DDN.mscorlib.DNNativeObjectSecurity)
  ['{38F17941-745F-38A1-B714-2EBCAACA1DE5}']
  { getters & setters } 

    function get_AccessRightType: DDN.mscorlib.DNType;
    function get_AccessRuleType: DDN.mscorlib.DNType;
    function get_AuditRuleType: DDN.mscorlib.DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    ///<summary>
    ///  将访问规则添加到自由访问控制列表 (DACL) 与当前 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///  <param name="rule">
    ///  要添加的访问规则。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure AddAccessRule(rule: DNPipeAccessRule);
    ///<summary>
    ///  设置访问规则中自由访问控制列表 (DACL) 与当前 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///  <param name="rule">
    ///  要设置的规则。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure SetAccessRule(rule: DNPipeAccessRule);
    ///<summary>
    ///  移除在随机访问控制列表 (DACL) 与当前相关联的所有访问规则 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象，然后添加指定的访问规则。
    ///</summary>
    ///  <param name="rule">
    ///  要添加的访问规则。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure ResetAccessRule(rule: DNPipeAccessRule);
    ///<summary>
    ///  删除从自由访问控制列表 (DACL) 与当前相关联的访问规则 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///  <param name="rule">
    ///  要删除的访问规则。
    ///</param>
    ///<returns>
    ///  如果操作成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    function RemoveAccessRule(rule: DNPipeAccessRule): Boolean;
    ///<summary>
    ///  删除指定的访问规则从自由访问控制列表 (DACL) 与当前 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///  <param name="rule">
    ///  要删除的访问规则。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure RemoveAccessRuleSpecific(rule: DNPipeAccessRule);
    ///<summary>
    ///  将审核规则添加到系统访问控制列表 (SACL) 与当前的<see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///  <param name="rule">
    ///  要添加的审核规则。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure AddAuditRule(rule: DNPipeAuditRule);
    ///<summary>
    ///  设置在与当前关联系统访问控制列表 (SACL) 的审核规则 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///  <param name="rule">
    ///  要设置的规则。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure SetAuditRule(rule: DNPipeAuditRule);
    ///<summary>
    ///  删除从系统访问控制列表 (SACL) 与当前相关联的审核规则 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///  <param name="rule">
    ///  要删除的审核规则。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果删除了审核规则;否则为 <see langword="false" />
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    function RemoveAuditRule(rule: DNPipeAuditRule): Boolean;
    ///<summary>
    ///  移除具有指定的审核规则从程序与当前系统访问控制列表 (SACL) 相同的安全标识符的所有审核规则 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///  <param name="rule">
    ///  要删除的审核规则。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure RemoveAuditRuleAll(rule: DNPipeAuditRule);
    ///<summary>
    ///  从程序与当前系统访问控制列表 (SACL) 中删除指定的审核规则 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///  <param name="rule">
    ///  要删除的审核规则。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure RemoveAuditRuleSpecific(rule: DNPipeAuditRule);
    ///<summary>
    ///  用指定的值初始化 <see cref="T:System.Security.AccessControl.AccessRule" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="identityReference">
    ///  访问规则应用于标识。
    ///  它必须是一个对象，可以强制转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" />
    ///  对象。
    ///</param>
    ///  <param name="accessMask">
    ///  此规则的访问掩码。
    ///  访问掩码是由单个集成定义其含义的匿名位，32 位集合
    ///</param>
    ///  <param name="isInherited"><see langword="true" />
    ///  如果此规则继承自父容器;否则为 false。
    ///</param>
    ///  <param name="inheritanceFlags">
    ///  其中一个 <see cref="T:System.Security.AccessControl.InheritanceFlags" />
    ///  指定访问规则的继承属性的值。
    ///</param>
    ///  <param name="propagationFlags">
    ///  其中一个 <see cref="T:System.Security.AccessControl.PropagationFlags" />
    ///  值，该值指定是否自动传播继承的访问规则。
    ///  如果将 <paramref name="inheritanceFlags" />
    ///  设置为 <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />
    ///  ，则忽略传播标志。
    ///</param>
    ///  <param name="type">
    ///  指定有效的访问控制类型。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Security.AccessControl.AccessRule" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask" />
    ///  , <paramref name="inheritanceFlags" />
    ///  , ，<paramref name="propagationFlags" />
    ///  , ，或 <paramref name="type" />
    ///  指定了无效值。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="identityReference" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="accessMask" />
    ///  为零。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="identityReference" />
    ///  既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />
    ///  也不的一种类型，如 <see cref="T:System.Security.Principal.NTAccount" />
    ///  , ，可转换为类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />
    ///  。
    ///</exception>
    function AccessRuleFactory(identityReference: DDN.mscorlib.DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DDN.mscorlib.DNInheritanceFlags; propagationFlags: DDN.mscorlib.DNPropagationFlags; &type: DDN.mscorlib.DNAccessControlType): DDN.mscorlib.DNAccessRule;
    ///<summary>
    ///  用指定的值初始化 <see cref="T:System.Security.AccessControl.AuditRule" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="identityReference">
    ///  访问规则应用于标识。
    ///  它必须是一个对象，可以强制转换为 <see cref="T:System.Security.Principal.SecurityIdentifier" />
    ///  对象。
    ///</param>
    ///  <param name="accessMask">
    ///  此规则的访问掩码。
    ///  访问掩码是由单个集成定义其含义的匿名位，32 位集合
    ///</param>
    ///  <param name="isInherited"><see langword="true" />
    ///  如果此规则继承自父容器;否则为 false...
    ///</param>
    ///  <param name="inheritanceFlags">
    ///  其中一个 <see cref="T:System.Security.AccessControl.InheritanceFlags" />
    ///  指定访问规则的继承属性的值。
    ///</param>
    ///  <param name="propagationFlags">
    ///  其中一个 <see cref="T:System.Security.AccessControl.PropagationFlags" />
    ///  值，该值指定是否自动传播继承的访问规则。
    ///  如果将 <paramref name="inheritanceFlags" />
    ///  设置为 <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />
    ///  ，则忽略传播标志。
    ///</param>
    ///  <param name="flags">
    ///  其中一个 <see cref="T:System.Security.AccessControl.AuditFlags" />
    ///  值，该值指定有效的访问控制类型。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Security.AccessControl.AuditRule" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="accessMask" />
    ///  , ，<paramref name="inheritanceFlags" />
    ///  , ，<paramref name="propagationFlags" />
    ///  , ，或 <paramref name="flags" />
    ///  属性指定了无效值。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="identityReference" />
    ///  属性为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="accessMask" />
    ///  属性为零。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="identityReference" />
    ///  属性的类型既不是 <see cref="T:System.Security.Principal.SecurityIdentifier" />
    ///  也不的一种类型，如 <see cref="T:System.Security.Principal.NTAccount" />
    ///  , ，可转换为类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />
    ///  。
    ///</exception>
    function AuditRuleFactory(identityReference: DDN.mscorlib.DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DDN.mscorlib.DNInheritanceFlags; propagationFlags: DDN.mscorlib.DNPropagationFlags; flags: DDN.mscorlib.DNAuditFlags): DDN.mscorlib.DNAuditRule;
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNAuthorizationRuleCollection;
    function GetOwner(targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNIdentityReference;
    procedure SetOwner(identity: DDN.mscorlib.DNIdentityReference);
    function GetGroup(targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNIdentityReference;
    procedure SetGroup(identity: DDN.mscorlib.DNIdentityReference);
    procedure PurgeAccessRules(identity: DDN.mscorlib.DNIdentityReference);
    procedure PurgeAuditRules(identity: DDN.mscorlib.DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DDN.mscorlib.DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DDN.mscorlib.DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DDN.mscorlib.DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DDN.mscorlib.DNAccessControlModification; rule: DDN.mscorlib.DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DDN.mscorlib.DNAccessControlModification; rule: DDN.mscorlib.DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  与当前相关联的可保护对象 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  与当前相关联的可保护对象类型 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</returns>
    property AccessRightType: DDN.mscorlib.DNType read get_AccessRightType;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  与当前的访问规则相关联的对象 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  与当前的访问规则相关联的对象的类型 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</returns>
    property AccessRuleType: DDN.mscorlib.DNType read get_AccessRuleType;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  对象与当前的审核规则关联 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  与当前的审核规则相关联的对象的类型 <see cref="T:System.IO.Pipes.PipeSecurity" />
    ///  对象。
    ///</returns>
    property AuditRuleType: DDN.mscorlib.DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNPipeSecurity = class(TDNGenericImport<DNPipeSecurityClass, DNPipeSecurity>) end;

  //-------------namespace: System.IO.MemoryMappedFiles----------------
  DNMemoryMappedFileSecurityClass = interface(DDN.mscorlib.DNObjectSecurityClass<DNMemoryMappedFileRights>)
  ['{29E663D3-1D0A-5176-B328-196BF6482561}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMemoryMappedFileSecurity;

  end;

  ///<summary>
  ///  表示可以为文件访问和操作针对内存映射文件授予的权限。
  ///</summary>
  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedFileSecurity')]
  DNMemoryMappedFileSecurity = interface(DDN.mscorlib.DNObjectSecurity<DNMemoryMappedFileRights>)
  ['{5A2856BD-CC21-3A39-AF94-05B8F9C89AC5}']
  { getters & setters } 

    function get_AccessRightType: DDN.mscorlib.DNType;
    function get_AccessRuleType: DDN.mscorlib.DNType;
    function get_AuditRuleType: DDN.mscorlib.DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DDN.mscorlib.DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DDN.mscorlib.DNInheritanceFlags; propagationFlags: DDN.mscorlib.DNPropagationFlags; &type: DDN.mscorlib.DNAccessControlType): DDN.mscorlib.DNAccessRule;
    function AuditRuleFactory(identityReference: DDN.mscorlib.DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DDN.mscorlib.DNInheritanceFlags; propagationFlags: DDN.mscorlib.DNPropagationFlags; flags: DDN.mscorlib.DNAuditFlags): DDN.mscorlib.DNAuditRule;
    procedure AddAccessRule(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>);
    procedure SetAccessRule(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>);
    procedure ResetAccessRule(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>);
    function RemoveAccessRule(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>): Boolean;
    procedure RemoveAccessRuleAll(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>);
    procedure RemoveAccessRuleSpecific(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>);
    procedure AddAuditRule(rule: DDN.mscorlib.DNAuditRule<DNMemoryMappedFileRights>);
    procedure SetAuditRule(rule: DDN.mscorlib.DNAuditRule<DNMemoryMappedFileRights>);
    function RemoveAuditRule(rule: DDN.mscorlib.DNAuditRule<DNMemoryMappedFileRights>): Boolean;
    procedure RemoveAuditRuleAll(rule: DDN.mscorlib.DNAuditRule<DNMemoryMappedFileRights>);
    procedure RemoveAuditRuleSpecific(rule: DDN.mscorlib.DNAuditRule<DNMemoryMappedFileRights>);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNAuthorizationRuleCollection;
    function GetOwner(targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNIdentityReference;
    procedure SetOwner(identity: DDN.mscorlib.DNIdentityReference);
    function GetGroup(targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNIdentityReference;
    procedure SetGroup(identity: DDN.mscorlib.DNIdentityReference);
    procedure PurgeAccessRules(identity: DDN.mscorlib.DNIdentityReference);
    procedure PurgeAuditRules(identity: DDN.mscorlib.DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DDN.mscorlib.DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DDN.mscorlib.DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DDN.mscorlib.DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DDN.mscorlib.DNAccessControlModification; rule: DDN.mscorlib.DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DDN.mscorlib.DNAccessControlModification; rule: DDN.mscorlib.DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DDN.mscorlib.DNType read get_AccessRightType;
    property AccessRuleType: DDN.mscorlib.DNType read get_AccessRuleType;
    property AuditRuleType: DDN.mscorlib.DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNMemoryMappedFileSecurity = class(TDNGenericImport<DNMemoryMappedFileSecurityClass, DNMemoryMappedFileSecurity>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSACngClass = interface(DDN.mscorlib.DNDSAClass)
  ['{C0D249F5-47DE-5C11-A8B1-AEE853A4E0CC}']
  { constructors } 

    ///<summary>
    ///  使用随机的 2,048 位密钥对初始化 <see cref="T:System.Security.Cryptography.DSACng" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDSACng; overload;
    ///<summary>
    ///  使用具有指定大小的随机生成密钥初始化 <see cref="T:System.Security.Cryptography.DSACng" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="keySize">
    ///  要生成的密钥的大小(以位为单位)。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="keySize" />
    ///  无效。
    ///</exception>
    {class} function init(keySize: Int32): DNDSACng; overload;
    ///<summary>
    ///  使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.DSACng" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="key">
    ///  要用于 DSA 操作的密钥。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="key" />
    ///  不是有效的 DSA 密钥。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(key: DNCngKey): DNDSACng; overload;

  end;

  ///<summary>
  ///  提供数字签名算法 (DSA) 的下一代加密技术 (CNG) 实现。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.DSACng')]
  DNDSACng = interface(DDN.mscorlib.DNDSA)
  ['{08B3195E-5EA7-3F6D-9BC5-E9056BF367A4}']
  { getters & setters } 

    function get_Key: DNCngKey;
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_SignatureAlgorithm: string;
    function get_KeyExchangeAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);

  { methods } 

    ///<summary>
    ///  为指定数据创建数字签名。
    ///</summary>
    ///  <param name="rgbHash">
    ///  要签名的数据。
    ///</param>
    ///<returns>
    ///  指定数据的数字签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rgbHash" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException"><paramref name="rgbHash" />
    ///  比 DSA 键的 Q 值短。
    ///</exception>
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  验证指定数字签名是否与指定数据相匹配。
    ///</summary>
    ///  <param name="rgbHash">
    ///  已签名的数据。
    ///</param>
    ///  <param name="rgbSignature">
    ///  要验证的数字签名。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="rgbSignature" />
    ///  与使用指定数据计算的签名相匹配，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rgbHash" />
    ///  参数为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rgbSignature" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException"><paramref name="rgbHash" />
    ///  比 DSA 键的 Q 值短。
    ///</exception>
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean;
    ///<summary>
    ///  导出 DSA 算法参数。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  DSA 算法参数。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  DSA 不是有效的公钥或私钥。
    ///</exception>
    function ExportParameters(includePrivateParameters: Boolean): DDN.mscorlib.DNDSAParameters;
    ///<summary>
    ///  通过创建为参数结构创建新的 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  ，来替换当前实例使用的现有密钥。
    ///</summary>
    ///  <param name="parameters">
    ///  DSA 参数。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的 DSA 参数无效。
    ///</exception>
    procedure ImportParameters(parameters: DDN.mscorlib.DNDSAParameters);
    function SignData(data: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: DDN.mscorlib.DNStream; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: DDN.mscorlib.DNStream; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取将由 <see cref="T:System.Security.Cryptography.DSACng" />
    ///  对象用于它执行的任何加密操作的密钥。
    ///</summary>
    ///<returns>
    ///  由 <see cref="T:System.Security.Cryptography.DSACng" />
    ///  对象用来执行加密操作的密钥。
    ///</returns>
    property Key: DNCngKey read get_Key;
    ///<summary>
    ///  获取 DSA 算法支持的密钥大小（以位为单位）。
    ///</summary>
    ///<returns>
    ///  一个数组，包含此算法支持的密钥大小。
    ///</returns>
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
    ///<summary>
    ///  获取签名算法的名称。
    ///</summary>
    ///<returns>
    ///  字符串“DSA”。
    ///</returns>
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    ///<summary>
    ///  获取密钥交换算法的名称。
    ///</summary>
    ///<returns>
    ///  总是为 <see langword="null" />
    ///  。
    ///</returns>
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
  end;

  TDNDSACng = class(TDNGenericImport<DNDSACngClass, DNDSACng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDiffieHellmanClass = interface(DDN.mscorlib.DNAsymmetricAlgorithmClass)
  ['{F2D343A4-DBAB-5FEF-A8FF-B9D9C0209B5F}']
  { static methods } 

    ///<summary>
    ///  创建椭圆曲线 Diffie-hellman (ECDH) 算法的默认实现的新实例。
    ///</summary>
    ///<returns>
    ///  默认实现此类的新实例。
    ///</returns>
    {class} function Create: DNECDiffieHellman; overload;
    ///<summary>
    ///  创建椭圆曲线 Diffie-hellman (ECDH) 算法的特定实现的新实例。
    ///</summary>
    ///  <param name="algorithm">
    ///  ECDH 算法的实现的名称。
    ///</param>
    ///<returns>
    ///  此类的指定实现的新实例。
    ///  如果指定的算法名称未映射到 ECDH 实现，此方法将返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="algorithm" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(algorithm: string): DNECDiffieHellman; overload;
    ///<summary>
    ///  使用通过指定曲线生成的新公钥/私钥对，创建椭圆曲线 Diffie-Hellman (ECDH) 算法的默认实现的新实例。
    ///</summary>
    ///  <param name="curve">
    ///  用于生成新公钥/私钥对的曲线。
    ///</param>
    ///<returns>
    ///  椭圆曲线 Diffie-hellman (ECDH) 算法的默认实现的新实例。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="curve" />
    ///  不进行验证。
    ///</exception>
    {class} function Create(curve: DNECCurve): DNECDiffieHellman; overload;
    ///<summary>
    ///  创建椭圆曲线 Diffie-Hellman (ECDH) 算法的默认实现的新实例，密钥由指定的 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  对象描述。
    ///</summary>
    ///  <param name="parameters">
    ///  椭圆曲线加密 (ECC) 算法的参数。
    ///</param>
    ///<returns>
    ///  椭圆曲线 Diffie-hellman (ECDH) 算法的默认实现的新实例。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="parameters" />
    ///  不进行验证。
    ///</exception>
    {class} function Create(parameters: DNECParameters): DNECDiffieHellman; overload;

  end;

  ///<summary>
  ///  提供一个抽象基类算法实现可以派生自该椭圆曲线 Diffie-hellman (ECDH)。
  ///  此类提供一组基本的所有 ECDH 实现必须都支持的操作。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECDiffieHellman')]
  DNECDiffieHellman = interface(DDN.mscorlib.DNAsymmetricAlgorithm)
  ['{306543FF-7167-31E6-9F1B-A6DC30F5E519}']
  { getters & setters } 

    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_PublicKey: DNECDiffieHellmanPublicKey;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    ///<summary>
    ///  派生可用作密钥的字节提供另一方的公钥。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///<returns>
    ///  从与另一方的公钥的密钥交换密钥材料。
    ///</returns>
    function DeriveKeyMaterial(otherPartyPublicKey: DNECDiffieHellmanPublicKey): TArray<Byte>;
    ///<summary>
    ///  若给定了另一方的公钥和哈希算法的名称，使用哈希函数派生可用作密钥的字节。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  用于派生密钥材料的哈希算法。
    ///</param>
    ///<returns>
    ///  将密钥中的密钥材料与另一方的公钥进行交换。
    ///</returns>
    function DeriveKeyFromHash(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    ///<summary>
    ///  在派生类中实现时，使用哈希函数、给定的另一方公钥、哈希算法的名称、预置值和追加值可派生用作密钥的字节。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  用于派生密钥材料的哈希算法。
    ///</param>
    ///  <param name="secretPrepend">
    ///  在进行哈希算法之前，要预置到派生密钥前面的值。
    ///</param>
    ///  <param name="secretAppend">
    ///  在进行哈希算法之前，要追加到派生密钥的值。
    ///</param>
    ///<returns>
    ///  将密钥中的密钥材料与另一方的公钥进行交换。
    ///</returns>
    ///<exception cref="T:System.NotImplementedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    function DeriveKeyFromHash(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; secretPrepend: TArray<Byte>; secretAppend: TArray<Byte>): TArray<Byte>; overload;
    ///<summary>
    ///  使用基于哈希的消息验证代码 (HMAC) 派生可用作密钥的字节。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  用于派生密钥材料的哈希算法。
    ///</param>
    ///  <param name="hmacKey">
    ///  HMAC 的密钥。
    ///</param>
    ///<returns>
    ///  将密钥中的密钥材料与另一方的公钥进行交换。
    ///</returns>
    function DeriveKeyFromHmac(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; hmacKey: TArray<Byte>): TArray<Byte>; overload;
    ///<summary>
    ///  当在派生基类中实现时，使用基于哈希的消息身份验证代码 (HMAC) 派生可用作密钥的字节。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  用于派生密钥材料的哈希算法。
    ///</param>
    ///  <param name="hmacKey">
    ///  HMAC 的密钥。
    ///</param>
    ///  <param name="secretPrepend">
    ///  在进行哈希算法之前，要预置到派生密钥前面的值。
    ///</param>
    ///  <param name="secretAppend">
    ///  在进行哈希算法之前，要追加到派生密钥的值。
    ///</param>
    ///<returns>
    ///  将密钥中的密钥材料与另一方的公钥进行交换。
    ///</returns>
    ///<exception cref="T:System.NotImplementedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    function DeriveKeyFromHmac(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; hmacKey: TArray<Byte>; secretPrepend: TArray<Byte>; secretAppend: TArray<Byte>): TArray<Byte>; overload;
    ///<summary>
    ///  在派生类中实现时，使用传输层安全性 (TLS) 伪随机功能 (PRF) 派生算法派生可用作密钥的字节。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///  <param name="prfLabel">
    ///  ASCII 编码的 PRF 标签。
    ///</param>
    ///  <param name="prfSeed">
    ///  64 字节的 PRF 种子。
    ///</param>
    ///<returns>
    ///  将密钥中的密钥材料与另一方的公钥进行交换。
    ///</returns>
    ///<exception cref="T:System.NotImplementedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    function DeriveKeyTls(otherPartyPublicKey: DNECDiffieHellmanPublicKey; prfLabel: TArray<Byte>; prfSeed: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  在派生类中替换时，从正常运行的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" />
    ///  密钥将公钥或公钥和私钥信息导出到 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  结构，使其可传递到 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />
    ///  方法。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则，若要仅包含公用参数，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示此项在曲线上的点的对象。
    ///  可将其传递到 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />
    ///  方法。
    ///</returns>
    ///<exception cref="T:System.NotImplementedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    function ExportParameters(includePrivateParameters: Boolean): DNECParameters;
    ///<summary>
    ///  在派生类中替换时，使用显式曲线形式，从正常运行的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" />
    ///  密钥将公钥或公钥和私钥信息导出到 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  结构，使其可传递到 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />
    ///  方法。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示此项在曲线上的点的对象（使用显式曲线格式）。
    ///</returns>
    ///<exception cref="T:System.NotImplementedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    function ExportExplicitParameters(includePrivateParameters: Boolean): DNECParameters;
    ///<summary>
    ///  在派生类中替代时，将 <see cref="T:System.Security.Cryptography.ECCurve" />
    ///  的指定参数作为临时密钥导入到当前 <see cref="T:System.Security.Cryptography.ECDiffieHellman" />
    ///  对象。
    ///</summary>
    ///  <param name="parameters">
    ///  要导入的曲线参数。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="parameters" />
    ///  不进行验证。
    ///</exception><exception cref="T:System.NotImplementedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    procedure ImportParameters(parameters: DNECParameters);
    ///<summary>
    ///  在派生类中替换时，为指定曲线生成新的临时公钥/私钥对。
    ///</summary>
    ///  <param name="curve">
    ///  用于生成临时公钥/私钥对的曲线。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="curve" />
    ///  不进行验证。
    ///</exception><exception cref="T:System.NotImplementedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    procedure GenerateKey(curve: DNECCurve);
    procedure Dispose;
    procedure Clear;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取密钥交换算法的名称。
    ///</summary>
    ///<returns>
    ///  密钥交换算法的名称。
    ///</returns>
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    ///<summary>
    ///  获取签名算法的名称。
    ///</summary>
    ///<returns>
    ///  总是为 <see langword="null" />
    ///  。
    ///</returns>
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    ///<summary>
    ///  获取当前的椭圆曲线 Diffie-hellman (ECDH) 实例正在使用的公钥。
    ///</summary>
    ///<returns>
    ///  正在使用这样的 ECDH 密钥对的公共部分 <see cref="T:System.Security.Cryptography.ECDiffieHellman" />
    ///  实例。
    ///</returns>
    property PublicKey: DNECDiffieHellmanPublicKey read get_PublicKey;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNECDiffieHellman = class(TDNGenericImport<DNECDiffieHellmanClass, DNECDiffieHellman>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDiffieHellmanCngClass = interface(DNECDiffieHellmanClass)
  ['{CFA2843C-02A2-55E6-A879-04C7454B4DA8}']
  { constructors } 

    ///<summary>
    ///  使用随机的密钥对初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNECDiffieHellmanCng; overload;
    ///<summary>
    ///  使用指定密钥大小，通过随机密钥对来初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="keySize">
    ///  密钥大小。
    ///  有效密钥大小是 256、384 和 521 位。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="keySize" />
    ///  指定了无效的长度。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此系统不支持下一代加密技术 (CNG) 类。
    ///</exception>
    {class} function init(keySize: Int32): DNECDiffieHellmanCng; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />
    ///  类的新实例，其公钥/私钥对通过指定曲线生成。
    ///</summary>
    ///  <param name="curve">
    ///  用于生成公钥/私钥对的曲线。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="curve" />
    ///  不进行验证。
    ///</exception>
    {class} function init(curve: DNECCurve): DNECDiffieHellmanCng; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  对象初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="key">
    ///  一个密钥，它将用作当前对象所执行的加密操作的输入。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="key" />
    ///  未指定的椭圆曲线 Diffie-hellman (ECDH) 算法组。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此系统不支持下一代加密技术 (CNG) 类。
    ///</exception>
    {class} function init(key: DNCngKey): DNECDiffieHellmanCng; overload;

  end;

  ///<summary>
  ///  提供的椭圆曲线 Diffie-hellman (ECDH) 算法的下一代加密技术 (CNG) 实现。
  ///  此类用于执行加密操作。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECDiffieHellmanCng')]
  DNECDiffieHellmanCng = interface(DNECDiffieHellman)
  ['{D407780B-8E4C-3CAE-A77D-D1A0F8CDBEFC}']
  { getters & setters } 

    function get_HashAlgorithm: DNCngAlgorithm;
    procedure set_HashAlgorithm(value: DNCngAlgorithm);
    function get_HmacKey: TArray<Byte>;
    procedure set_HmacKey(value: TArray<Byte>);
    function get_KeyDerivationFunction: DNECDiffieHellmanKeyDerivationFunction;
    procedure set_KeyDerivationFunction(value: DNECDiffieHellmanKeyDerivationFunction);
    function get_Label: TArray<Byte>;
    procedure set_Label(value: TArray<Byte>);
    function get_SecretAppend: TArray<Byte>;
    procedure set_SecretAppend(value: TArray<Byte>);
    function get_SecretPrepend: TArray<Byte>;
    procedure set_SecretPrepend(value: TArray<Byte>);
    function get_Seed: TArray<Byte>;
    procedure set_Seed(value: TArray<Byte>);
    function get_Key: DNCngKey;
    function get_PublicKey: DNECDiffieHellmanPublicKey;
    function get_UseSecretAgreementAsHmacKey: Boolean;
    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    ///<summary>
    ///  派生之间两个参与方，给出的机密协议从生成的密钥材料 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />
    ///  对象，其中包含第二个参与方的公钥。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  从另一方密钥交换公钥。
    ///</param>
    ///<returns>
    ///  一个包含密钥材料的字节数组。
    ///  从计算从当前对象的私钥和指定的公钥的机密协议生成此信息。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="otherPartyPublicKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="otherPartyPublicKey" />
    ///  不是 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />
    ///  键。
    ///</exception>
    function DeriveKeyMaterial(otherPartyPublicKey: DNECDiffieHellmanPublicKey): TArray<Byte>; overload;
    ///<summary>
    ///  使用传输层安全性 (TLS) 伪随机功能 (PRF) 派生算法派生可用作密钥的字节。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///  <param name="prfLabel">
    ///  ASCII 编码的 PRF 标签。
    ///</param>
    ///  <param name="prfSeed">
    ///  64 字节的 PRF 种子。
    ///</param>
    ///<returns>
    ///  将密钥中的密钥材料与另一方的公钥进行交换。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="otherPartyPublicKey" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="prfLabel" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="prfSeed" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="otherPartyPublicKey" />
    ///  不是 ECDH 密钥，或者大小不正确。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="prfSeed" />
    ///  的长度并不正好是 64 字节。
    ///  - 或 -
    ///  所有其他加密错误。
    ///</exception>
    function DeriveKeyTls(otherPartyPublicKey: DNECDiffieHellmanPublicKey; prfLabel: TArray<Byte>; prfSeed: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  获取生成之间两个参与方，给出的机密协议的句柄 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />
    ///  对象，其中包含第二个参与方的公钥。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  从另一方密钥交换公钥。
    ///</param>
    ///<returns>
    ///  机密协议的句柄。
    ///  从当前对象的私钥和指定的公钥计算此信息。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="otherPartyPublicKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="otherPartyPublicKey" />
    ///  不是 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />
    ///  键。
    ///</exception>
    function DeriveSecretAgreementHandle(otherPartyPublicKey: DNECDiffieHellmanPublicKey): DNSafeNCryptSecretHandle; overload;
    ///<summary>
    ///  获取生成之间两个参与方，给出的机密协议的句柄 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  对象，其中包含第二个参与方的公钥。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  一个包含从另一方密钥交换中的椭圆曲线 Diffie-hellman (ECDH) 密钥的公共部分的对象。
    ///</param>
    ///<returns>
    ///  机密协议的句柄。
    ///  从当前对象的私钥和指定的公钥计算此信息。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="otherPartyPublicKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="otherPartyPublicKey" />
    ///  不是 ECDH 密钥，或者不是正确的大小。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    function DeriveSecretAgreementHandle(otherPartyPublicKey: DNCngKey): DNSafeNCryptSecretHandle; overload;
    ///<summary>
    ///  未实现此方法。
    ///</summary>
    ///  <param name="xmlString">
    ///  基于 XML 的关键信息进行反序列化。
    ///</param>
    ///<exception cref="T:System.NotImplementedException">
    ///  此实例不重写此方法。
    ///</exception>
    procedure FromXmlString(xmlString: string); overload;
    ///<summary>
    ///  使用指定的格式反序列中的 XML 字符串的密钥信息。
    ///</summary>
    ///  <param name="xml">
    ///  基于 XML 的关键信息进行反序列化。
    ///</param>
    ///  <param name="format">
    ///  指定的 XML 字符串的格式的枚举值之一。
    ///  当前接受的唯一格式是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xml" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="xml" />
    ///  格式不正确。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format" />
    ///  指定的格式无效。
    ///  唯一接受的值是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    procedure FromXmlString(xml: string; format: DNECKeyXmlFormat); overload;
    ///<summary>
    ///  未实现此方法。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  不适用。
    ///</returns>
    ///<exception cref="T:System.NotImplementedException">
    ///  此实例不重写此方法。
    ///</exception>
    function ToXmlString(includePrivateParameters: Boolean): string; overload;
    ///<summary>
    ///  通过使用指定的格式序列化 XML 字符串的密钥信息。
    ///</summary>
    ///  <param name="format">
    ///  指定的 XML 字符串的格式的枚举值之一。
    ///  当前接受的唯一格式是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含键信息、 序列化为的 XML 字符串，根据请求的格式的字符串对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format" />
    ///  指定的格式无效。
    ///  唯一接受的值是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />
    ///  。
    ///</exception>
    function ToXmlString(format: DNECKeyXmlFormat): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象的指定参数作为密钥导入当前实例。
    ///</summary>
    ///  <param name="parameters">
    ///  要导入的曲线参数。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="parameters" />
    ///  不进行验证。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="parameters" />
    ///  引用无法导入的一条曲线。
    ///</exception><exception cref="T:System.PlatformNotSupportedException"><paramref name="parameters" />
    ///  引用此平台不支持的一条曲线。
    ///</exception>
    procedure ImportParameters(parameters: DNECParameters);
    ///<summary>
    ///  将 <see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象使用的密钥和显式曲线参数导出到 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  对象。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象使用的密钥和显式曲线参数。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  此方法无法获取曲线值。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此平台不支持显式导出。
    ///  必须使用 Windows 10 或更高版本。
    ///</exception>
    function ExportExplicitParameters(includePrivateParameters: Boolean): DNECParameters;
    ///<summary>
    ///  将 <see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象使用的密钥导出到 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  对象。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象使用的密钥和已命名曲线参数。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  此方法无法获取曲线值。
    ///</exception>
    function ExportParameters(includePrivateParameters: Boolean): DNECParameters;
    ///<summary>
    ///  派生之间两个参与方，给出的机密协议从生成的密钥材料 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  对象，其中包含第二个参与方的公钥。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  一个包含从另一方密钥交换中的椭圆曲线 Diffie-hellman (ECDH) 密钥的公共部分的对象。
    ///</param>
    ///<returns>
    ///  一个包含密钥材料的字节数组。
    ///  从计算从当前对象的私钥和指定的公钥的机密协议生成此信息。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="otherPartyPublicKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="otherPartyPublicKey" />
    ///  无效。
    ///  任一其 <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" />
    ///  属性并不指定 <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" />
    ///  或其密钥的长度与此实例的密钥大小不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此对象的 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" />
    ///  属性指定 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />
    ///  密钥派生函数，但 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" />
    ///  或 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    function DeriveKeyMaterial(otherPartyPublicKey: DNCngKey): TArray<Byte>; overload;
    ///<summary>
    ///  若给定了另一方的公钥、哈希算法的名称、预置值和追加值，使用哈希函数派生可用作密钥的字节。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  用于派生密钥材料的哈希算法。
    ///</param>
    ///  <param name="secretPrepend">
    ///  在进行哈希算法之前，要预置到派生密钥前面的值。
    ///</param>
    ///  <param name="secretAppend">
    ///  在进行哈希算法之前，要追加到派生密钥的值。
    ///</param>
    ///<returns>
    ///  将密钥中的密钥材料与另一方的公钥进行交换。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="otherPartyPublicKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="otherPartyPublicKey" />
    ///  不是 ECDH 密钥，或者大小不正确。
    ///  - 或 -
    ///  <paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    function DeriveKeyFromHash(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; secretPrepend: TArray<Byte>; secretAppend: TArray<Byte>): TArray<Byte>; overload;
    ///<summary>
    ///  使用基于哈希的消息验证代码 (HMAC) 派生可用作密钥的字节。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  用于派生密钥材料的哈希算法。
    ///</param>
    ///  <param name="hmacKey">
    ///  HMAC 的密钥。
    ///</param>
    ///  <param name="secretPrepend">
    ///  在进行哈希算法之前，要预置到派生密钥前面的值。
    ///</param>
    ///  <param name="secretAppend">
    ///  在进行哈希算法之前，要追加到派生密钥的值。
    ///</param>
    ///<returns>
    ///  将密钥中的密钥材料与另一方的公钥进行交换。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="otherPartyPublicKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="otherPartyPublicKey" />
    ///  不是 ECDH 密钥，或者大小不正确。
    ///  - 或 -
    ///  <paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    function DeriveKeyFromHmac(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; hmacKey: TArray<Byte>; secretPrepend: TArray<Byte>; secretAppend: TArray<Byte>): TArray<Byte>; overload;
    ///<summary>
    ///  为指定曲线生成新的临时公钥/私钥对。
    ///</summary>
    ///  <param name="curve">
    ///  用于生成临时公钥/私钥对的曲线。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="curve" />
    ///  不进行验证。
    ///</exception>
    procedure GenerateKey(curve: DNECCurve);
    ///<summary>
    ///  若给定了另一方的公钥和哈希算法的名称，使用哈希函数派生可用作密钥的字节。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  用于派生密钥材料的哈希算法。
    ///</param>
    ///<returns>
    ///  将密钥中的密钥材料与另一方的公钥进行交换。
    ///</returns>
    function DeriveKeyFromHash(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    ///<summary>
    ///  使用基于哈希的消息验证代码 (HMAC) 派生可用作密钥的字节。
    ///</summary>
    ///  <param name="otherPartyPublicKey">
    ///  另一方的公钥。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  用于派生密钥材料的哈希算法。
    ///</param>
    ///  <param name="hmacKey">
    ///  HMAC 的密钥。
    ///</param>
    ///<returns>
    ///  将密钥中的密钥材料与另一方的公钥进行交换。
    ///</returns>
    function DeriveKeyFromHmac(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; hmacKey: TArray<Byte>): TArray<Byte>; overload;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置生成的密钥材料时要使用的哈希算法。
    ///</summary>
    ///<returns>
    ///  一个指定哈希算法的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  值是 <see langword="null." />
    ///</exception>
    property HashAlgorithm: DNCngAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    ///<summary>
    ///  获取或设置用于派生密钥材料时的基于哈希的消息身份验证代码 (HMAC) 密钥。
    ///</summary>
    ///<returns>
    ///  用于派生密钥材料的基于哈希的消息身份验证代码 (HMAC) 密钥。
    ///</returns>
    property HmacKey: TArray<Byte> read get_HmacKey write set_HmacKey;
    ///<summary>
    ///  获取或设置的密钥派生函数 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  其中一个 <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" />
    ///  枚举值︰ <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />
    ///  , ，<see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />
    ///  , ，或 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />
    ///  。
    ///  默认值为 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  枚举值超出了范围。
    ///</exception>
    property KeyDerivationFunction: DNECDiffieHellmanKeyDerivationFunction read get_KeyDerivationFunction write set_KeyDerivationFunction;
    ///<summary>
    ///  获取或设置用于密钥派生标签值。
    ///</summary>
    ///<returns>
    ///  标签值。
    ///</returns>
    property &Label: TArray<Byte> read get_Label write set_Label;
    ///<summary>
    ///  获取或设置一个值，生成的密钥材料时将追加到机密协议。
    ///</summary>
    ///<returns>
    ///  追加到机密协议值。
    ///</returns>
    property SecretAppend: TArray<Byte> read get_SecretAppend write set_SecretAppend;
    ///<summary>
    ///  获取或设置一个值，派生密钥材料时将添加到机密协议的开头。
    ///</summary>
    ///<returns>
    ///  追加到的密钥派生期间的机密协议开头的值。
    ///</returns>
    property SecretPrepend: TArray<Byte> read get_SecretPrepend write set_SecretPrepend;
    ///<summary>
    ///  获取或设置派生密钥材料时将使用的种子值。
    ///</summary>
    ///<returns>
    ///  种子值中。
    ///</returns>
    property Seed: TArray<Byte> read get_Seed write set_Seed;
    ///<summary>
    ///  指定 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  ，它由当前对象为加密操作。
    ///</summary>
    ///<returns>
    ///  此对象用于执行加密操作的密钥对。
    ///</returns>
    property Key: DNCngKey read get_Key;
    ///<summary>
    ///  获取可由另一个的公钥 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />
    ///  对象来生成共享的机密协议。
    ///</summary>
    ///<returns>
    ///  与此实例相关联的公钥 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />
    ///  对象。
    ///</returns>
    property PublicKey: DNECDiffieHellmanPublicKey read get_PublicKey;
    ///<summary>
    ///  获取一个值，该值指示是否使用机密协议作为基于哈希的消息身份验证代码 (HMAC) 密钥来派生密钥材料。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果机密协议用作 HMAC 密钥用来派生密钥材料;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property UseSecretAgreementAsHmacKey: Boolean read get_UseSecretAgreementAsHmacKey;
    ///<summary>
    ///  获取密钥交换算法的名称。
    ///</summary>
    ///<returns>
    ///  密钥交换算法的名称。
    ///</returns>
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    ///<summary>
    ///  获取签名算法的名称。
    ///</summary>
    ///<returns>
    ///  总是为 <see langword="null" />
    ///  。
    ///</returns>
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNECDiffieHellmanCng = class(TDNGenericImport<DNECDiffieHellmanCngClass, DNECDiffieHellmanCng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDsaClass = interface(DDN.mscorlib.DNAsymmetricAlgorithmClass)
  ['{FC8AC58B-2665-593B-8365-7D26AC438EBA}']
  { static methods } 

    ///<summary>
    ///  创建默认实现的椭圆曲线数字签名算法 (ECDSA) 的新实例。
    ///</summary>
    ///<returns>
    ///  默认实现的新实例 (<see cref="T:System.Security.Cryptography.ECDsaCng" />
    ///  ) 的此类。
    ///</returns>
    {class} function Create: DNECDsa; overload;
    ///<summary>
    ///  创建指定的椭圆曲线数字签名算法 (ECDSA) 实现的新实例。
    ///</summary>
    ///  <param name="algorithm">
    ///  ECDSA 实现的名称。
    ///  以下字符串全都引用同一个实现，目前是唯一的实现中支持 .NET Framework:
    ///  -"ECDsa"
    ///  -"ECDsaCng"
    ///  -"System.Security.Cryptography.ECDsaCng"
    ///  此外可以提供自定义 ECDSA 实现的名称。
    ///</param>
    ///<returns>
    ///  指定实现此类的新实例。
    ///  如果指定的算法名称没有映射到 ECDSA 实现，此方法返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="algorithm" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(algorithm: string): DNECDsa; overload;
    ///<summary>
    ///  使用通过指定曲线新生成的密钥，创建椭圆曲线数字签名算法 (ECDSA) 的默认实现的新实例。
    ///</summary>
    ///  <param name="curve">
    ///  要用于密钥生成的曲线。
    ///</param>
    ///<returns>
    ///  此类的默认实现 (<see cref="T:System.Security.Cryptography.ECDsaCng" />
    ///  ) 的新实例。
    ///</returns>
    {class} function Create(curve: DNECCurve): DNECDsa; overload;
    ///<summary>
    ///  通过将指定参数用作密钥，创建椭圆曲线数字签名算法 (ECDSA) 的默认实现的新实例。
    ///</summary>
    ///  <param name="parameters">
    ///  表示要使用的密钥的参数。
    ///</param>
    ///<returns>
    ///  此类的默认实现 (<see cref="T:System.Security.Cryptography.ECDsaCng" />
    ///  ) 的新实例。
    ///</returns>
    {class} function Create(parameters: DNECParameters): DNECDsa; overload;

  end;

  ///<summary>
  ///  提供用于封装椭圆曲线数字签名算法 (ECDSA) 的抽象基类。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECDsa')]
  DNECDsa = interface(DDN.mscorlib.DNAsymmetricAlgorithm)
  ['{CF96A7B5-296F-3481-8E08-5784E0C09927}']
  { getters & setters } 

    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    ///<summary>
    ///  使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。
    ///</summary>
    ///  <param name="data">
    ///  要为其计算哈希的输入数据。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  指定数据的 ECDSA 签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception>
    function SignData(data: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    ///<summary>
    ///  使用指定的哈希算法计算指定字节数组的一个部分的哈希值，并对生成的哈希值进行签名。
    ///</summary>
    ///  <param name="data">
    ///  要为其计算哈希的输入数据。
    ///</param>
    ///  <param name="offset">
    ///  数组中自其开始使用数据的偏移量。
    ///</param>
    ///  <param name="count">
    ///  数组中用作数据的字节数。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  指定数据的 ECDSA 签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="offset" />
    ///  + <paramref name="count" />
    ///  – 1 会导致超出 <paramref name="data" />
    ///  上限的索引。
    ///</exception>
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    ///<summary>
    ///  使用指定的哈希算法计算指定流的哈希值，并对生成的哈希值进行签名。
    ///</summary>
    ///  <param name="data">
    ///  要为其计算哈希的输入流。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  指定数据的 ECDSA 签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception>
    function SignData(data: DDN.mscorlib.DNStream; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    ///<summary>
    ///  通过使用指定的哈希算法计算指定数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
    ///</summary>
    ///  <param name="data">
    ///  已签名的数据。
    ///</param>
    ///  <param name="signature">
    ///  要验证的签名数据。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建数据哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  如果签名有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception>
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    ///<summary>
    ///  通过使用指定的哈希算法计算字节数组一个部分中数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
    ///</summary>
    ///  <param name="data">
    ///  已签名的数据。
    ///</param>
    ///  <param name="offset">
    ///  开始计算哈希的起始索引。
    ///</param>
    ///  <param name="count">
    ///  要进行哈希处理的字节数。
    ///</param>
    ///  <param name="signature">
    ///  要验证的签名数据。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建数据哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  如果签名有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="offset" />
    ///  + <paramref name="count" />
    ///  – 1 会导致超出 <paramref name="data" />
    ///  上限的索引。
    ///</exception>
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    ///<summary>
    ///  通过使用指定的哈希算法计算指定流的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
    ///</summary>
    ///  <param name="data">
    ///  已签名的数据。
    ///</param>
    ///  <param name="signature">
    ///  要验证的签名数据。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建数据哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  如果签名有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception>
    function VerifyData(data: DDN.mscorlib.DNStream; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    ///<summary>
    ///  在派生类中替代时，导出椭圆曲线的已命名或显式参数。
    ///  如果曲线具有一个名称，<see cref="F:System.Security.Cryptography.ECParameters.Curve" />
    ///  字段包含已命名的曲线参数，否则将包含显式参数。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示此项在曲线上的点的参数。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    function ExportParameters(includePrivateParameters: Boolean): DNECParameters;
    ///<summary>
    ///  在派生类中替代时，导出椭圆曲线的显式参数。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示此项在曲线上的点的参数（使用显式曲线格式）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    function ExportExplicitParameters(includePrivateParameters: Boolean): DNECParameters;
    ///<summary>
    ///  当在派生类中重写时，导入指定的参数。
    ///</summary>
    ///  <param name="parameters">
    ///  曲线的参数。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    procedure ImportParameters(parameters: DNECParameters);
    ///<summary>
    ///  在派生类中替代时，生成指定曲线的一个新公钥/私钥对。
    ///</summary>
    ///  <param name="curve">
    ///  要使用的曲线。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    procedure GenerateKey(curve: DNECCurve);
    ///<summary>
    ///  为指定的哈希值生成数字签名。
    ///</summary>
    ///  <param name="hash">
    ///  待签名数据的哈希值。
    ///</param>
    ///<returns>
    ///  一个数字签名，其中包含用私钥加密的给定哈希值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="hash" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    function SignHash(hash: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  针对指定的哈希值验证数字签名。
    ///</summary>
    ///  <param name="hash">
    ///  数据块的哈希值。
    ///</param>
    ///  <param name="signature">
    ///  要验证的数字签名。
    ///</param>
    ///<returns>
    ///  如果哈希值等于已解密的签名，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function VerifyHash(hash: TArray<Byte>; signature: TArray<Byte>): Boolean;
    procedure Dispose;
    procedure Clear;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取密钥交换算法的名称。
    ///</summary>
    ///<returns>
    ///  总是为 <see langword="null" />
    ///  。
    ///</returns>
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    ///<summary>
    ///  获取签名算法的名称。
    ///</summary>
    ///<returns>
    ///  字符串"ECDsa"。
    ///</returns>
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNECDsa = class(TDNGenericImport<DNECDsaClass, DNECDsa>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDsaCngClass = interface(DNECDsaClass)
  ['{C6FCE214-49ED-5B99-B043-31C2A1121E43}']
  { constructors } 

    ///<summary>
    ///  使用随机的密钥对初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" />
    ///  类的新实例。
    ///</summary>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  此系统不支持下一代加密技术 (CNG) 类。
    ///</exception>
    {class} function init: DNECDsaCng; overload;
    ///<summary>
    ///  使用指定密钥大小，通过随机密钥对来初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="keySize">
    ///  密钥大小。
    ///  有效密钥大小是 256、384 和 521 位。
    ///</param>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  此系统不支持下一代加密技术 (CNG) 类。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="keySize" />
    ///  指定了无效的长度。
    ///</exception>
    {class} function init(keySize: Int32): DNECDsaCng; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" />
    ///  类的新实例，该类的公钥/私钥对通过指定曲线生成。
    ///</summary>
    ///  <param name="curve">
    ///  用于生成公钥/私钥对的曲线。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="curve" />
    ///  不进行验证。
    ///</exception>
    {class} function init(curve: DNECCurve): DNECDsaCng; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  对象初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="key">
    ///  一个密钥，它将用作当前对象所执行的加密操作的输入。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="key" />
    ///  不指定椭圆曲线数字签名算法 (ECDSA) 组。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此系统不支持下一代加密技术 (CNG) 类。
    ///</exception>
    {class} function init(key: DNCngKey): DNECDsaCng; overload;

  end;

  ///<summary>
  ///  提供椭圆曲线数字签名算法 (ECDSA) 的下一代加密技术 (CNG) 实现。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECDsaCng')]
  DNECDsaCng = interface(DNECDsa)
  ['{3954C6A3-6A49-3BC6-81C4-392984639FA3}']
  { getters & setters } 

    function get_HashAlgorithm: DNCngAlgorithm;
    procedure set_HashAlgorithm(value: DNCngAlgorithm);
    function get_Key: DNCngKey;
    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    ///<summary>
    ///  未实现此方法。
    ///</summary>
    ///  <param name="xmlString">
    ///  基于 XML 的关键信息进行反序列化。
    ///</param>
    ///<exception cref="T:System.NotImplementedException">
    ///  此实例不重写此方法。
    ///</exception>
    procedure FromXmlString(xmlString: string); overload;
    ///<summary>
    ///  使用指定的格式反序列中的 XML 字符串的密钥信息。
    ///</summary>
    ///  <param name="xml">
    ///  基于 XML 的关键信息进行反序列化。
    ///</param>
    ///  <param name="format">
    ///  指定的 XML 字符串的格式的枚举值之一。
    ///  当前接受的唯一格式是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xml" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format" />
    ///  指定的格式无效。
    ///  唯一接受的值是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    procedure FromXmlString(xml: string; format: DNECKeyXmlFormat); overload;
    ///<summary>
    ///  生成指定的数据的签名。
    ///</summary>
    ///  <param name="data">
    ///  要进行签名的消息数据。
    ///</param>
    ///<returns>
    ///  指定的数据的进行数字签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  与该实例关联的密钥信息没有私钥。
    ///</exception>
    function SignData(data: TArray<Byte>): TArray<Byte>; overload;
    ///<summary>
    ///  为指定哈希值生成签名。
    ///</summary>
    ///  <param name="hash">
    ///  待签名数据的哈希值。
    ///</param>
    ///<returns>
    ///  指定哈希值的数字签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="hash" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  与该实例关联的密钥信息没有私钥。
    ///</exception>
    function SignHash(hash: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  未实现此方法。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  不适用。
    ///</returns>
    ///<exception cref="T:System.NotImplementedException">
    ///  未实现此方法。
    ///</exception>
    function ToXmlString(includePrivateParameters: Boolean): string; overload;
    ///<summary>
    ///  通过使用指定的格式序列化 XML 字符串的密钥信息。
    ///</summary>
    ///  <param name="format">
    ///  指定的 XML 字符串的格式的枚举值之一。
    ///  当前接受的唯一格式是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含键信息、 序列化到根据请求的格式的 XML 字符串的字符串对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="format" />
    ///  指定的格式无效。
    ///  唯一接受的值是 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    function ToXmlString(format: DNECKeyXmlFormat): string; overload;
    ///<summary>
    ///  验证指定的数据的数字签名。
    ///</summary>
    ///  <param name="data">
    ///  已签名的数据。
    ///</param>
    ///  <param name="signature">
    ///  要验证的签名。
    ///</param>
    ///<returns>
    ///  如果签名有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  或 <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>): Boolean; overload;
    ///<summary>
    ///  针对指定的哈希值验证指定的数字签名。
    ///</summary>
    ///  <param name="hash">
    ///  待验证的数据的哈希值。
    ///</param>
    ///  <param name="signature">
    ///  要结合哈希值验证的数据的数字签名。
    ///</param>
    ///<returns>
    ///  如果签名有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="hash" />
    ///  或 <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function VerifyHash(hash: TArray<Byte>; signature: TArray<Byte>): Boolean;
    ///<summary>
    ///  通过创建为参数结构创建新的 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  ，来替换当前实例使用的现有密钥。
    ///</summary>
    ///  <param name="parameters">
    ///  曲线的参数。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="parameters" />
    ///  不包含有效的值。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="parameters" />
    ///  引用无法导入的一条曲线。
    ///</exception><exception cref="T:System.PlatformNotSupportedException"><paramref name="parameters" />
    ///  引用此平台不支持的一条曲线。
    ///</exception>
    procedure ImportParameters(parameters: DNECParameters);
    ///<summary>
    ///  将椭圆曲线加密 (ECC) 对象使用的密钥和显式曲线参数导出到 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  对象。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  ECC 对象使用的密钥和显式曲线参数。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  获取曲线值时发生错误。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此平台不支持显式导出。
    ///  必须使用 Windows 10 或更高版本。
    ///</exception>
    function ExportExplicitParameters(includePrivateParameters: Boolean): DNECParameters;
    ///<summary>
    ///  将椭圆曲线加密 (ECC) 对象使用的密钥导出到 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  对象。
    ///  如果密钥作为已命名曲线创建，<see cref="F:System.Security.Cryptography.ECParameters.Curve" />
    ///  字段包含已命名的曲线参数，否则将包含显式参数。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  ECC 对象使用的密钥和已命名曲线参数。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  获取曲线值时发生错误。
    ///</exception>
    function ExportParameters(includePrivateParameters: Boolean): DNECParameters;
    ///<summary>
    ///  生成指定长度的数据，从指定偏移量开始的数字签名。
    ///</summary>
    ///  <param name="data">
    ///  要进行签名的消息数据。
    ///</param>
    ///  <param name="offset">
    ///  从其开始签名字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  中后面的字符的字符串的长度 <paramref name="offset" />
    ///  中将签名。
    ///</param>
    ///<returns>
    ///  指定的数据长度的数字签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" />
    ///  或 <paramref name="offset" />
    ///  导致边界之外的数据字符串读取。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  与该实例关联的密钥信息没有私钥。
    ///</exception>
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    ///<summary>
    ///  生成指定的数据流，正在读取到流的末尾的签名。
    ///</summary>
    ///  <param name="data">
    ///  要进行签名的数据流。
    ///</param>
    ///<returns>
    ///  用于指定的数据流的数字签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  与该实例关联的密钥信息没有私钥。
    ///</exception>
    function SignData(data: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    ///<summary>
    ///  验证指定长度的数据，从指定偏移量开始的签名。
    ///</summary>
    ///  <param name="data">
    ///  已签名的数据。
    ///</param>
    ///  <param name="offset">
    ///  在已签名的数据开始处的数据的位置。
    ///</param>
    ///  <param name="count">
    ///  中后面的字符数据的长度 <paramref name="offset" />
    ///  中将签名。
    ///</param>
    ///  <param name="signature">
    ///  要验证的签名。
    ///</param>
    ///<returns>
    ///  如果签名有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  或 <paramref name="count" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="offset" />
    ///  或 <paramref name="count" />
    ///  大于传入的字节数组的长度 <paramref name="data" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  或 <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>): Boolean; overload;
    ///<summary>
    ///  验证指定的数据流，正在读取到流的末尾的数字签名。
    ///</summary>
    ///  <param name="data">
    ///  已签名的数据流。
    ///</param>
    ///  <param name="signature">
    ///  要验证的签名。
    ///</param>
    ///<returns>
    ///  如果签名有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  或 <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function VerifyData(data: DDN.mscorlib.DNStream; signature: TArray<Byte>): Boolean; overload;
    ///<summary>
    ///  生成用于 ECDsaCng 算法的密钥。
    ///</summary>
    ///  <param name="curve">
    ///  用于生成密钥的曲线。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="curve" />
    ///  不进行验证。
    ///</exception>
    procedure GenerateKey(curve: DNECCurve);
    ///<summary>
    ///  使用指定的哈希算法计算指定字节数组的哈希值，并对生成的哈希值进行签名。
    ///</summary>
    ///  <param name="data">
    ///  要为其计算哈希的输入数据。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  指定数据的 ECDSA 签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception>
    function SignData(data: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    ///<summary>
    ///  使用指定的哈希算法计算指定字节数组的一个部分的哈希值，并对生成的哈希值进行签名。
    ///</summary>
    ///  <param name="data">
    ///  要为其计算哈希的输入数据。
    ///</param>
    ///  <param name="offset">
    ///  数组中自其开始使用数据的偏移量。
    ///</param>
    ///  <param name="count">
    ///  数组中用作数据的字节数。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  指定数据的 ECDSA 签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="offset" />
    ///  + <paramref name="count" />
    ///  – 1 会导致超出 <paramref name="data" />
    ///  上限的索引。
    ///</exception>
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    ///<summary>
    ///  使用指定的哈希算法计算指定流的哈希值，并对生成的哈希值进行签名。
    ///</summary>
    ///  <param name="data">
    ///  要为其计算哈希的输入流。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  指定数据的 ECDSA 签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception>
    function SignData(data: DDN.mscorlib.DNStream; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    ///<summary>
    ///  通过使用指定的哈希算法计算指定数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
    ///</summary>
    ///  <param name="data">
    ///  已签名的数据。
    ///</param>
    ///  <param name="signature">
    ///  要验证的签名数据。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建数据哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  如果签名有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception>
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    ///<summary>
    ///  通过使用指定的哈希算法计算字节数组一个部分中数据的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
    ///</summary>
    ///  <param name="data">
    ///  已签名的数据。
    ///</param>
    ///  <param name="offset">
    ///  开始计算哈希的起始索引。
    ///</param>
    ///  <param name="count">
    ///  要进行哈希处理的字节数。
    ///</param>
    ///  <param name="signature">
    ///  要验证的签名数据。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建数据哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  如果签名有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="offset" />
    ///  + <paramref name="count" />
    ///  – 1 会导致超出 <paramref name="data" />
    ///  上限的索引。
    ///</exception>
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    ///<summary>
    ///  通过使用指定的哈希算法计算指定流的哈希值，并将其与提供的签名进行比较，验证数字签名是否有效。
    ///</summary>
    ///  <param name="data">
    ///  已签名的数据。
    ///</param>
    ///  <param name="signature">
    ///  要验证的签名数据。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  要用于创建数据哈希值的哈希算法。
    ///</param>
    ///<returns>
    ///  如果签名有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception>
    function VerifyData(data: DDN.mscorlib.DNStream; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要在签名和验证数据时使用的哈希算法。
    ///</summary>
    ///<returns>
    ///  一个指定哈希算法的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  该值为 <see langword="null" />
    ///  。
    ///</exception>
    property HashAlgorithm: DNCngAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    ///<summary>
    ///  获取或设置对数据进行签名或验证时要使用的键。
    ///</summary>
    ///<returns>
    ///  指定键的对象。
    ///</returns>
    property Key: DNCngKey read get_Key;
    ///<summary>
    ///  获取密钥交换算法的名称。
    ///</summary>
    ///<returns>
    ///  总是为 <see langword="null" />
    ///  。
    ///</returns>
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    ///<summary>
    ///  获取签名算法的名称。
    ///</summary>
    ///<returns>
    ///  字符串"ECDsa"。
    ///</returns>
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNECDsaCng = class(TDNGenericImport<DNECDsaCngClass, DNECDsaCng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSACngClass = interface(DDN.mscorlib.DNRSAClass)
  ['{AB9AFD52-E689-5F39-938E-FC9206709E4A}']
  { constructors } 

    ///<summary>
    ///  使用随机的 2,048 位密钥对初始化 <see cref="T:System.Security.Cryptography.RSACng" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRSACng; overload;
    ///<summary>
    ///  使用具有指定大小的随机生成密钥初始化 <see cref="T:System.Security.Cryptography.RSACng" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="keySize">
    ///  要生成的密钥的大小(以位为单位)。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="keySize" />
    ///  无效。
    ///</exception>
    {class} function init(keySize: Int32): DNRSACng; overload;
    ///<summary>
    ///  使用指定的密钥初始化 <see cref="T:System.Security.Cryptography.RSACng" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="key">
    ///  要用于 RSA 操作的密钥。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="key" />
    ///  不是有效的 RSA 密钥。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(key: DNCngKey): DNRSACng; overload;

  end;

  ///<summary>
  ///  提供 RSA 算法的下一代加密技术(CNG)实现。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.RSACng')]
  DNRSACng = interface(DDN.mscorlib.DNRSA)
  ['{1DCBF670-90D3-33C2-8621-80376632951B}']
  { getters & setters } 

    function get_Key: DNCngKey;
    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    ///<summary>
    ///  使用指定填充模式对输入数据解密。
    ///</summary>
    ///  <param name="data">
    ///  要解密的数据。
    ///</param>
    ///  <param name="padding">
    ///  填充模式。
    ///</param>
    ///<returns>
    ///  已解密的数据。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="padding" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="padding" />
    ///  不等于 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1" />
    ///  否则 <paramref name="padding" />
    ///  的 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" />
    ///  不等于 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />
    ///  。
    ///</exception>
    function Decrypt(data: TArray<Byte>; padding: DDN.mscorlib.DNRSAEncryptionPadding): TArray<Byte>;
    ///<summary>
    ///  使用指定的填充方式对输入数据进行加密。
    ///</summary>
    ///  <param name="data">
    ///  要加密的数据。
    ///</param>
    ///  <param name="padding">
    ///  填充模式。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Byte" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="padding" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="padding" />
    ///  不等于 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" />
    ///  或 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />
    ///  。
    ///</exception>
    function Encrypt(data: TArray<Byte>; padding: DDN.mscorlib.DNRSAEncryptionPadding): TArray<Byte>;
    ///<summary>
    ///  对使用指定哈希算法和填充模式进行了哈希处理的数据进行签名。
    ///</summary>
    ///  <param name="hash">
    ///  要签名的哈希值。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  哈希算法名称。
    ///</param>
    ///  <param name="padding">
    ///  填充模式。
    ///</param>
    ///<returns>
    ///  已签名的数据。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="hash" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="padding" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  属性的值为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="padding" />
    ///  与 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" />
    ///  或 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />
    ///  不相等。
    ///</exception>
    function SignHash(hash: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): TArray<Byte>;
    ///<summary>
    ///  验证已签名且已使用指定算法和填充模式进行哈希处理的数据。
    ///</summary>
    ///  <param name="hash">
    ///  要验证的哈希值。
    ///</param>
    ///  <param name="signature">
    ///  数据的签名。
    ///</param>
    ///  <param name="hashAlgorithm">
    ///  哈希算法名称。
    ///</param>
    ///  <param name="padding">
    ///  填充模式。
    ///</param>
    ///<returns>
    ///  如果签名对哈希值有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="hash" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="signature" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="padding" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  属性的值为 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="padding" />
    ///  不等于 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" />
    ///  或 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />
    ///  。
    ///  - 或 -
    ///  签名的格式错误。
    ///  （在 .NET Framework 4.6 中且仅在 4.6.1 中，从 .NET Framework 4.6.2 开始，如果签名格式不正确，则方法返回 <see langword="false" />
    ///  。
    ///</exception>
    function VerifyHash(hash: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): Boolean;
    ///<summary>
    ///  使用私钥对输入数据进行解密。
    ///</summary>
    ///  <param name="rgb">
    ///  要解密的密码文本。
    ///</param>
    ///<returns><paramref name="rgb" />
    ///  参数产生的纯文本形式的解密结果。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  不支持此方法调用。
    ///</exception>
    function DecryptValue(rgb: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  使用公钥对输入数据进行加密。
    ///</summary>
    ///  <param name="rgb">
    ///  要加密的纯文本。
    ///</param>
    ///<returns><paramref name="rgb" />
    ///  参数产生的密码文本形式的加密结果。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  不支持此方法调用。
    ///</exception>
    function EncryptValue(rgb: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  将 RSA 对象使用的密钥导出到 <see cref="T:System.Security.Cryptography.RSAParameters" />
    ///  对象中。
    ///</summary>
    ///  <param name="includePrivateParameters">
    ///  若要包含专用参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  RSA 对象使用的密钥。
    ///</returns>
    function ExportParameters(includePrivateParameters: Boolean): DDN.mscorlib.DNRSAParameters;
    ///<summary>
    ///  通过创建为参数结构创建新的 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  ，来替换当前实例使用的现有密钥。
    ///</summary>
    ///  <param name="parameters">
    ///  RSA 参数。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="parameters" />
    ///  既不包含指数，也不包含模数。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="parameters" />
    ///  不是有效的 RSA 密钥。
    ///  - 或 -
    ///  <paramref name="parameters" />
    ///  是一个完整的密钥对并使用默认的 KSP。
    ///</exception>
    procedure ImportParameters(parameters: DDN.mscorlib.DNRSAParameters);
    function SignData(data: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): TArray<Byte>; overload;
    function SignData(data: DDN.mscorlib.DNStream; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): Boolean; overload;
    function VerifyData(data: DDN.mscorlib.DNStream; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): Boolean; overload;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取将由 <see cref="T:System.Security.Cryptography.RSACng" />
    ///  对象用于它执行的任何加密操作的密钥。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.RSACng" />
    ///  对象使用的密钥。
    ///</returns>
    property Key: DNCngKey read get_Key;
    ///<summary>
    ///  获取可用于该 RSA 的实现的密钥交换算法的名称。
    ///</summary>
    ///<returns>
    ///  返回“RSA”。
    ///</returns>
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    ///<summary>
    ///  获取可用于该 RSA 的实现的签名算法的名称。
    ///</summary>
    ///<returns>
    ///  返回“RSA”。
    ///</returns>
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNRSACng = class(TDNGenericImport<DNRSACngClass, DNRSACng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngAlgorithmClass = interface(DDN.mscorlib.DNObjectClass)
  ['{55A0E28E-9545-56F9-A4D4-F54817ED5016}']
  { static getter & setter } 

    {class} function get_Rsa: DNCngAlgorithm;
    {class} function get_ECDiffieHellman: DNCngAlgorithm;
    {class} function get_ECDiffieHellmanP256: DNCngAlgorithm;
    {class} function get_ECDiffieHellmanP384: DNCngAlgorithm;
    {class} function get_ECDiffieHellmanP521: DNCngAlgorithm;
    {class} function get_ECDsa: DNCngAlgorithm;
    {class} function get_ECDsaP256: DNCngAlgorithm;
    {class} function get_ECDsaP384: DNCngAlgorithm;
    {class} function get_ECDsaP521: DNCngAlgorithm;
    {class} function get_MD5: DNCngAlgorithm;
    {class} function get_Sha1: DNCngAlgorithm;
    {class} function get_Sha256: DNCngAlgorithm;
    {class} function get_Sha384: DNCngAlgorithm;
    {class} function get_Sha512: DNCngAlgorithm;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="algorithm">
    ///  要初始化的算法的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="algorithm" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="algorithm" />
    ///  参数长度为 0 （零）。
    ///</exception>
    {class} function init(algorithm: string): DNCngAlgorithm;

  { static propertys } 

    ///<summary>
    ///  获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定 RSA 哈希算法。
    ///</summary>
    ///<returns>
    ///  一个指定 RSA 算法的对象。
    ///</returns>
    {class} property Rsa: DNCngAlgorithm read get_Rsa;
    ///<summary>
    ///  获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，此对象指定椭圆曲线 Diffie-Hellman (ECDH) 密钥交换算法，此算法的曲线通过密钥属性描述。
    ///</summary>
    ///<returns>
    ///  一个对象，此对象指定 ECDH 密钥交换算法，此算法的曲线通过密钥属性进行描述。
    ///</returns>
    {class} property ECDiffieHellman: DNCngAlgorithm read get_ECDiffieHellman;
    ///<summary>
    ///  获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定使用 P-256 曲线的椭圆曲线 Diffie-Hellman (ECDH) 密钥交换算法。
    ///</summary>
    ///<returns>
    ///  一个指定使用 P-256 曲线的 ECDH 算法的对象。
    ///</returns>
    {class} property ECDiffieHellmanP256: DNCngAlgorithm read get_ECDiffieHellmanP256;
    ///<summary>
    ///  获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定使用 P-384 曲线的椭圆曲线 Diffie-Hellman (ECDH) 密钥交换算法。
    ///</summary>
    ///<returns>
    ///  一个指定使用 P-384 曲线的 ECDH 算法的对象。
    ///</returns>
    {class} property ECDiffieHellmanP384: DNCngAlgorithm read get_ECDiffieHellmanP384;
    ///<summary>
    ///  获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定使用 P-521 曲线的椭圆曲线 Diffie-Hellman (ECDH) 密钥交换算法。
    ///</summary>
    ///<returns>
    ///  一个指定使用 P-521 曲线的 ECDH 算法的对象。
    ///</returns>
    {class} property ECDiffieHellmanP521: DNCngAlgorithm read get_ECDiffieHellmanP521;
    ///<summary>
    ///  获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，该对象指定椭圆曲线数字签名算法 (ECDSA)，此算法的曲线通过密钥属性描述。
    ///</summary>
    ///<returns>
    ///  一个对象，此对象指定 ECDSA 的曲线通过密钥属性进行描述。
    ///</returns>
    {class} property ECDsa: DNCngAlgorithm read get_ECDsa;
    ///<summary>
    ///  获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定使用 P-256 曲线的椭圆曲线数字签名算法 (ECDSA)。
    ///</summary>
    ///<returns>
    ///  一个指定使用 P-256 曲线的 ECDSA 算法的对象。
    ///</returns>
    {class} property ECDsaP256: DNCngAlgorithm read get_ECDsaP256;
    ///<summary>
    ///  获取一个 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定使用 P-384 曲线的椭圆曲线数字签名算法 (ECDSA)。
    ///</summary>
    ///<returns>
    ///  一个指定使用 P-384 曲线的 ECDSA 算法的对象。
    ///</returns>
    {class} property ECDsaP384: DNCngAlgorithm read get_ECDsaP384;
    ///<summary>
    ///  获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定使用 P-521 曲线的椭圆曲线数字签名算法 (ECDSA)。
    ///</summary>
    ///<returns>
    ///  一个指定使用 P-521 曲线的 ECDSA 算法的对象。
    ///</returns>
    {class} property ECDsaP521: DNCngAlgorithm read get_ECDsaP521;
    ///<summary>
    ///  获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定消息摘要 5 (MD5) 哈希算法。
    ///</summary>
    ///<returns>
    ///  一个指定 MD5 算法的对象。
    ///</returns>
    {class} property MD5: DNCngAlgorithm read get_MD5;
    ///<summary>
    ///  获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定安全哈希算法 1 (SHA-1) 算法。
    ///</summary>
    ///<returns>
    ///  一个指定 SHA-1 算法的对象。
    ///</returns>
    {class} property Sha1: DNCngAlgorithm read get_Sha1;
    ///<summary>
    ///  获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定安全哈希算法 256 (SHA-256) 算法。
    ///</summary>
    ///<returns>
    ///  一个指定 SHA-256 算法的对象。
    ///</returns>
    {class} property Sha256: DNCngAlgorithm read get_Sha256;
    ///<summary>
    ///  获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定安全哈希算法 384 (SHA-384) 算法。
    ///</summary>
    ///<returns>
    ///  一个指定 SHA-384 算法的对象。
    ///</returns>
    {class} property Sha384: DNCngAlgorithm read get_Sha384;
    ///<summary>
    ///  获取一个新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象，它指定安全哈希算法 512 (SHA-512) 算法。
    ///</summary>
    ///<returns>
    ///  一个指定 SHA-512 算法的对象。
    ///</returns>
    {class} property Sha512: DNCngAlgorithm read get_Sha512;
  end;

  ///<summary>
  ///  封装加密算法的名称。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngAlgorithm')]
  DNCngAlgorithm = interface(DDN.mscorlib.DNObject)
  ['{DDF05353-AAD4-3541-B038-B933F04064CD}']
  { getters & setters } 

    function get_Algorithm: string;

  { methods } 

    ///<summary>
    ///  将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象进行比较。
    ///</summary>
    ///  <param name="obj">
    ///  要与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象进行比较的对象。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="obj" />
    ///  参数是一个指定与当前对象相同算法的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象进行比较。
    ///</summary>
    ///  <param name="other">
    ///  要与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象进行比较的对象。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="other" />
    ///  参数指定的算法与当前对象的算法相同，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNCngAlgorithm): Boolean; overload;
    ///<summary>
    ///  为当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象中嵌入的算法名称生成一个哈希值。
    ///</summary>
    ///<returns>
    ///  嵌入的算法名称的哈希值。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象指定的算法的名称。
    ///</summary>
    ///<returns>
    ///  嵌入的算法名称。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象指定的算法名称。
    ///</summary>
    ///<returns>
    ///  嵌入的算法名称。
    ///</returns>
    property Algorithm: string read get_Algorithm;
  end;

  TDNCngAlgorithm = class(TDNGenericImport<DNCngAlgorithmClass, DNCngAlgorithm>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngAlgorithmGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2224D91B-7FF8-5BF5-83EB-D5276D871555}']
  { static getter & setter } 

    {class} function get_DiffieHellman: DNCngAlgorithmGroup;
    {class} function get_Dsa: DNCngAlgorithmGroup;
    {class} function get_ECDiffieHellman: DNCngAlgorithmGroup;
    {class} function get_ECDsa: DNCngAlgorithmGroup;
    {class} function get_Rsa: DNCngAlgorithmGroup;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="algorithmGroup">
    ///  要初始化的算法组的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="algorithmGroup" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="algorithmGroup" />
    ///  参数长度为 0 （零）。
    ///</exception>
    {class} function init(algorithmGroup: string): DNCngAlgorithmGroup;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  指定算法的 Diffie-hellman 系列的对象。
    ///</summary>
    ///<returns>
    ///  一个对象，指定算法的 Diffie-hellman 系列。
    ///</returns>
    {class} property DiffieHellman: DNCngAlgorithmGroup read get_DiffieHellman;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  指定算法的数字签名算法 (DSA) 系列的对象。
    ///</summary>
    ///<returns>
    ///  一个对象，指定算法的 DSA 系列。
    ///</returns>
    {class} property Dsa: DNCngAlgorithmGroup read get_Dsa;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  指定算法的椭圆曲线 Diffie-hellman (ECDH) 系列的对象。
    ///</summary>
    ///<returns>
    ///  一个对象，指定算法的 ECDH 系列。
    ///</returns>
    {class} property ECDiffieHellman: DNCngAlgorithmGroup read get_ECDiffieHellman;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  指定算法的椭圆曲线数字签名算法 (ECDSA) 系列的对象。
    ///</summary>
    ///<returns>
    ///  一个对象，指定算法的 ECDSA 系列。
    ///</returns>
    {class} property ECDsa: DNCngAlgorithmGroup read get_ECDsa;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  指定 Rivest Shamir Adleman (RSA) 系列的算法的对象。
    ///</summary>
    ///<returns>
    ///  一个指定 RSA 系列的算法的对象。
    ///</returns>
    {class} property Rsa: DNCngAlgorithmGroup read get_Rsa;
  end;

  ///<summary>
  ///  封装加密算法组的名称。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngAlgorithmGroup')]
  DNCngAlgorithmGroup = interface(DDN.mscorlib.DNObject)
  ['{EE2C8BB4-3D3D-35C5-BB75-7E087EEF11CD}']
  { getters & setters } 

    function get_AlgorithmGroup: string;

  { methods } 

    ///<summary>
    ///  将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  对象进行比较。
    ///</summary>
    ///  <param name="obj">
    ///  要与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  对象进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  参数是 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  ，它指定了相同的算法组作为当前对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  对象与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  对象进行比较。
    ///</summary>
    ///  <param name="other">
    ///  要与当前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  对象进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="other" />
    ///  参数指定相同的算法组作为当前对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNCngAlgorithmGroup): Boolean; overload;
    ///<summary>
    ///  生成当前中嵌入的算法组名称的哈希值 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  嵌入的算法组名称的哈希值。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取算法组的名称当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象指定。
    ///</summary>
    ///<returns>
    ///  嵌入的算法组名称。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取算法组的名称当前 <see cref="T:System.Security.Cryptography.CngAlgorithm" />
    ///  对象指定。
    ///</summary>
    ///<returns>
    ///  嵌入的算法组名称。
    ///</returns>
    property AlgorithmGroup: string read get_AlgorithmGroup;
  end;

  TDNCngAlgorithmGroup = class(TDNGenericImport<DNCngAlgorithmGroupClass, DNCngAlgorithmGroup>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngKeyClass = interface(DNObjectClass)
  ['{516FFB2F-3C27-5C6E-9E0D-1FC380F87167}']
  { static methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  可用于指定的算法的对象。
    ///</summary>
    ///  <param name="algorithm">
    ///  将与使用该密钥的算法。
    ///</param>
    ///<returns>
    ///  临时密钥。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="algorithm" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Create(algorithm: DNCngAlgorithm): DNCngKey; overload;
    ///<summary>
    ///  创建一个已命名 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  对象，它提供指定的算法。
    ///</summary>
    ///  <param name="algorithm">
    ///  该密钥将与用于该算法。
    ///</param>
    ///  <param name="keyName">
    ///  密钥名称。
    ///  如果未提供一个名称，该密钥将不会持久化。
    ///</param>
    ///<returns>
    ///  一个用于提供指定的算法持久化或临时键。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="algorithm" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Create(algorithm: DNCngAlgorithm; keyName: string): DNCngKey; overload;
    ///<summary>
    ///  创建一个已命名 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  对象，它提供指定的算法，使用所提供的密钥创建的参数。
    ///</summary>
    ///  <param name="algorithm">
    ///  将与使用该密钥的算法。
    ///</param>
    ///  <param name="keyName">
    ///  密钥名称。
    ///  如果未提供一个名称，该密钥将不会持久化。
    ///</param>
    ///  <param name="creationParameters">
    ///  指定的方法，高级的参数的对象包括 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个用于提供指定的算法持久化或临时键。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="algorithm" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Create(algorithm: DNCngAlgorithm; keyName: string; creationParameters: DNCngKeyCreationParameters): DNCngKey; overload;
    ///<summary>
    ///  检查默认的密钥存储提供程序 (KSP) 中是否存在已命名的密钥。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果默认的 KSP; 中存在已命名的密钥否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Exists(keyName: string): Boolean; overload;
    ///<summary>
    ///  检查指定的密钥存储提供程序 (KSP) 中是否存在已命名的密钥。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥名称。
    ///</param>
    ///  <param name="provider">
    ///  若要检查键 KSP。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的提供程序; 中存在已命名的密钥否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  或 <paramref name="provider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Exists(keyName: string; provider: DNCngProvider): Boolean; overload;
    ///<summary>
    ///  检查已命名的密钥是否存在指定的密钥存储提供程序 (KSP) 中根据指定的选项。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥名称。
    ///</param>
    ///  <param name="provider">
    ///  若要搜索项 KSP。
    ///</param>
    ///  <param name="options">
    ///  指定用于打开密钥的选项的枚举值的按位组合。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的提供程序; 中存在已命名的密钥否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  或 <paramref name="provider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Exists(keyName: string; provider: DNCngProvider; options: DNCngKeyOpenOptions): Boolean; overload;
    ///<summary>
    ///  通过将指定的密钥材料导入到默认的密钥存储提供程序 (KSP) 并使用指定的格式创建一个新密钥。
    ///</summary>
    ///  <param name="keyBlob">
    ///  一个包含密钥信息的数组。
    ///</param>
    ///  <param name="format">
    ///  一个对象，该对象指定 <paramref name="keyBlob" />
    ///  数组的格式。
    ///</param>
    ///<returns>
    ///  一个新的密钥。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyBlob" />
    ///  或 <paramref name="format" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Import(keyBlob: TArray<Byte>; format: DNCngKeyBlobFormat): DNCngKey; overload;
    ///<summary>
    ///  通过导入指定的密钥材料到指定的密钥存储提供程序 (KSP) 中，使用指定的格式创建一个新的密钥。
    ///</summary>
    ///  <param name="keyBlob">
    ///  一个包含密钥信息的数组。
    ///</param>
    ///  <param name="format">
    ///  一个对象，该对象指定 <paramref name="keyBlob" />
    ///  数组的格式。
    ///</param>
    ///  <param name="provider">
    ///  KSP。
    ///</param>
    ///<returns>
    ///  一个新的密钥。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyBlob" />
    ///  、<paramref name="format" />
    ///  或 <paramref name="provider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此系统上不支持下一代加密技术 (CNG)。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Import(keyBlob: TArray<Byte>; format: DNCngKeyBlobFormat; provider: DNCngProvider): DNCngKey; overload;
    ///<summary>
    ///  创建的一个实例 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  对象，表示现有的已命名的密钥。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥的名称。
    ///</param>
    ///<returns>
    ///  现有密钥。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Open(keyName: string): DNCngKey; overload;
    ///<summary>
    ///  创建的一个实例 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  对象，表示现有的已命名的密钥，使用指定的密钥存储提供程序 (KSP)。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥的名称。
    ///</param>
    ///  <param name="provider">
    ///  包含密钥 KSP。
    ///</param>
    ///<returns>
    ///  现有密钥。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  或 <paramref name="provider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Open(keyName: string; provider: DNCngProvider): DNCngKey; overload;
    ///<summary>
    ///  创建的一个实例 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  对象，表示现有的已命名的密钥，使用指定的密钥存储提供程序 (KSP) 和密钥打开选项。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥的名称。
    ///</param>
    ///  <param name="provider">
    ///  包含密钥 KSP。
    ///</param>
    ///  <param name="openOptions">
    ///  指定用于打开的密钥，如从 （计算机或用户存储） 打开该项是以及是否禁止显示用户界面提示的选项的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  现有密钥。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  或 <paramref name="provider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Open(keyName: string; provider: DNCngProvider; openOptions: DNCngKeyOpenOptions): DNCngKey; overload;
    ///<summary>
    ///  创建的一个实例 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  通过使用现有密钥的句柄的对象。
    ///</summary>
    ///  <param name="keyHandle">
    ///  为现有密钥句柄。
    ///</param>
    ///  <param name="keyHandleOpenOptions">
    ///  一个枚举值，该值指示是否 <paramref name="keyHandle" />
    ///  表示一个临时密钥或已命名的密钥。
    ///</param>
    ///<returns>
    ///  现有密钥。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyHandle" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="keyHandle" />
    ///  无效或格式不正确，或连接已经关闭。
    ///  如果键是由公共语言运行时 (CLR) 创建一个临时密钥，也会引发此异常，但 <see cref="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey" />
    ///  未指定值。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  下一代加密技术 (CNG) 不支持此系统上。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function Open(keyHandle: DNSafeNCryptKeyHandle; keyHandleOpenOptions: DNCngKeyHandleOpenOptions): DNCngKey; overload;

  end;

  ///<summary>
  ///  定义用于下一代加密技术 (CNG) 对象的密钥核心功能。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngKey')]
  DNCngKey = interface(DDN.mscorlib.DNIDisposable)
  ['{6176C309-BD82-3039-A631-F1DAFAC1CD64}']
  { getters & setters } 

    function get_AlgorithmGroup: DNCngAlgorithmGroup;
    function get_Algorithm: DNCngAlgorithm;
    function get_ExportPolicy: DNCngExportPolicies;
    function get_Handle: DNSafeNCryptKeyHandle;
    function get_IsEphemeral: Boolean;
    function get_IsMachineKey: Boolean;
    function get_KeyName: string;
    function get_KeySize: Int32;
    function get_KeyUsage: DNCngKeyUsages;
    function get_ParentWindowHandle: IntPtr;
    procedure set_ParentWindowHandle(value: IntPtr);
    function get_Provider: DNCngProvider;
    function get_ProviderHandle: DNSafeNCryptProviderHandle;
    function get_UniqueName: string;
    function get_UIPolicy: DNCngUIPolicy;

  { methods } 

    ///<summary>
    ///  删除与对象相关联的密钥。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  尝试访问已删除的密钥。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    procedure Delete;
    ///<summary>
    ///  释放 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将密钥材料导出到 BLOB 中指定的格式。
    ///</summary>
    ///  <param name="format">
    ///  一个指定的密钥 BLOB 格式的对象。
    ///</param>
    ///<returns>
    ///  一个包含指定的格式中的密钥材料的 BLOB。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="format" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///  通常情况下， <see cref="P:System.Security.Cryptography.CngKey.ExportPolicy" />
    ///  不允许要导出的密钥。
    ///</exception>
    function &Export(format: DNCngKeyBlobFormat): TArray<Byte>;
    ///<summary>
    ///  获取一个属性，有一个名称，一组的属性选项。
    ///</summary>
    ///  <param name="name">
    ///  所需的属性的名称。
    ///</param>
    ///  <param name="options">
    ///  指定的命名属性的选项的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  一个包含指定属性的原始值的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    function GetProperty(name: string; options: DNCngPropertyOptions): DNCngProperty;
    ///<summary>
    ///  检查此项上是否存在指定的属性。
    ///</summary>
    ///  <param name="name">
    ///  要检查的属性名称。
    ///</param>
    ///  <param name="options">
    ///  指定的命名属性的选项的枚举值的按位组合。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到指定的属性;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function HasProperty(name: string; options: DNCngPropertyOptions): Boolean;
    ///<summary>
    ///  在项上设置的已命名的属性。
    ///</summary>
    ///  <param name="property">
    ///  要设置的键属性。
    ///</param>
    procedure SetProperty(&property: DNCngProperty);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取密钥使用的算法组。
    ///</summary>
    ///<returns>
    ///  一个对象，指定加密算法组的名称。
    ///</returns>
    property AlgorithmGroup: DNCngAlgorithmGroup read get_AlgorithmGroup;
    ///<summary>
    ///  获取密钥使用的算法。
    ///</summary>
    ///<returns>
    ///  一个指定加密算法的名称的对象。
    ///</returns>
    property Algorithm: DNCngAlgorithm read get_Algorithm;
    ///<summary>
    ///  获取密钥使用的导出策略。
    ///</summary>
    ///<returns>
    ///  一个指定的导出策略的密钥的对象。
    ///</returns>
    property ExportPolicy: DNCngExportPolicies read get_ExportPolicy;
    ///<summary>
    ///  获取一个表示本机键 (NCRYPT_KEY_HANDLE) 的安全句柄。
    ///</summary>
    ///<returns>
    ///  安全句柄表示的键。
    ///</returns>
    property Handle: DNSafeNCryptKeyHandle read get_Handle;
    ///<summary>
    ///  获取该密钥的持久性状态。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果密钥是暂时的。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEphemeral: Boolean read get_IsEphemeral;
    ///<summary>
    ///  获取该密钥的作用域 （计算机或用户）。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果键是可用在计算机范围内; <see langword="false" />
    ///  如果键是仅为当前用户。
    ///</returns>
    property IsMachineKey: Boolean read get_IsMachineKey;
    ///<summary>
    ///  获取密钥的名称。
    ///</summary>
    ///<returns>
    ///  密钥的名称。
    ///  如果密钥是暂时的则值是 <see langword="null" />
    ///  。
    ///</returns>
    property KeyName: string read get_KeyName;
    ///<summary>
    ///  获取以位为单位的密钥大小。
    ///</summary>
    ///<returns>
    ///  密钥的大小（以位为单位）。
    ///</returns>
    property KeySize: Int32 read get_KeySize;
    ///<summary>
    ///  获取由键指定的加密操作。
    ///</summary>
    ///<returns>
    ///  指定允许的密钥用法的枚举值的按位组合。
    ///</returns>
    property KeyUsage: DNCngKeyUsages read get_KeyUsage;
    ///<summary>
    ///  获取或设置应使用的用户界面 (UI) 提示引起的访问密钥的窗口句柄 (HWND)。
    ///</summary>
    ///<returns>
    ///  该密钥父窗口句柄。
    ///</returns>
    property ParentWindowHandle: IntPtr read get_ParentWindowHandle write set_ParentWindowHandle;
    ///<summary>
    ///  获取管理密钥的密钥存储提供程序 (KSP)。
    ///</summary>
    ///<returns>
    ///  管理密钥 KSP。
    ///</returns>
    property Provider: DNCngProvider read get_Provider;
    ///<summary>
    ///  获取指向密钥存储提供程序 (KSP) 的本机句柄 (NCRYPT_PROV_HANDLE)。
    ///</summary>
    ///<returns>
    ///  KSP 句柄。
    ///</returns>
    property ProviderHandle: DNSafeNCryptProviderHandle read get_ProviderHandle;
    ///<summary>
    ///  获取该密钥的唯一名称。
    ///</summary>
    ///<returns>
    ///  该密钥替换名称。
    ///  如果密钥是暂时的则值是 <see langword="null" />
    ///  。
    ///</returns>
    property UniqueName: string read get_UniqueName;
    ///<summary>
    ///  获取控制的访问密钥的用户界面 (UI) 的参数。
    ///</summary>
    ///<returns>
    ///  一个包含用于显示 UI 的配置参数的对象。
    ///</returns>
    property UIPolicy: DNCngUIPolicy read get_UIPolicy;
  end;

  TDNCngKey = class(TDNGenericImport<DNCngKeyClass, DNCngKey>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngKeyBlobFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A2B3847C-A665-5115-9CC9-E47402D73BFD}']
  { static getter & setter } 

    {class} function get_EccPrivateBlob: DNCngKeyBlobFormat;
    {class} function get_EccPublicBlob: DNCngKeyBlobFormat;
    {class} function get_EccFullPrivateBlob: DNCngKeyBlobFormat;
    {class} function get_EccFullPublicBlob: DNCngKeyBlobFormat;
    {class} function get_GenericPrivateBlob: DNCngKeyBlobFormat;
    {class} function get_GenericPublicBlob: DNCngKeyBlobFormat;
    {class} function get_OpaqueTransportBlob: DNCngKeyBlobFormat;
    {class} function get_Pkcs8PrivateBlob: DNCngKeyBlobFormat;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  类通过使用指定的格式。
    ///</summary>
    ///  <param name="format">
    ///  要初始化的密钥 BLOB 格式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="format" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="format" />
    ///  参数长度为 0 （零）。
    ///</exception>
    {class} function init(format: string): DNCngKeyBlobFormat;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象，它指定用于椭圆曲线加密 (ECC) 密钥的私钥 BLOB。
    ///</summary>
    ///<returns>
    ///  一个指定 ECC 专用密钥 BLOB 的对象。
    ///</returns>
    {class} property EccPrivateBlob: DNCngKeyBlobFormat read get_EccPrivateBlob;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象，它指定的椭圆曲线加密 (ECC) 密钥的公钥 BLOB。
    ///</summary>
    ///<returns>
    ///  一个指定的 ECC 公钥 BLOB 的对象。
    ///</returns>
    {class} property EccPublicBlob: DNCngKeyBlobFormat read get_EccPublicBlob;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象，此对象指定包含显式曲线参数的椭圆曲线加密 (ECC) 密钥的私钥 BLOB。
    ///</summary>
    ///<returns>
    ///  描述私钥 BLOB 的对象。
    ///</returns>
    {class} property EccFullPrivateBlob: DNCngKeyBlobFormat read get_EccFullPrivateBlob;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象，此对象指定包含显式曲线参数的椭圆曲线加密 (ECC) 密钥的公钥 BLOB。
    ///</summary>
    ///<returns>
    ///  描述公钥 BLOB 的对象。
    ///</returns>
    {class} property EccFullPublicBlob: DNCngKeyBlobFormat read get_EccFullPublicBlob;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象，它指定泛型私钥 BLOB。
    ///</summary>
    ///<returns>
    ///  一个指定泛型私钥 BLOB 的对象。
    ///</returns>
    {class} property GenericPrivateBlob: DNCngKeyBlobFormat read get_GenericPrivateBlob;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象，它指定泛型公钥 BLOB。
    ///</summary>
    ///<returns>
    ///  一个指定泛型公钥 BLOB 的对象。
    ///</returns>
    {class} property GenericPublicBlob: DNCngKeyBlobFormat read get_GenericPublicBlob;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  指定一个不透明传输密钥 BLOB 的对象。
    ///</summary>
    ///<returns>
    ///  一个对象，指定一个不透明传输密钥 BLOB。
    ///</returns>
    {class} property OpaqueTransportBlob: DNCngKeyBlobFormat read get_OpaqueTransportBlob;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  指定私有密钥信息语法标准 (PKCS #8) 密钥 BLOB 的对象。
    ///</summary>
    ///<returns>
    ///  一个指定 PKCS #8 ╬ 盞  芲 BLOB 的对象。
    ///</returns>
    {class} property Pkcs8PrivateBlob: DNCngKeyBlobFormat read get_Pkcs8PrivateBlob;
  end;

  ///<summary>
  ///  指定用于 Microsoft 下一代加密技术 (CNG) 对象的密钥 BLOB 格式。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngKeyBlobFormat')]
  DNCngKeyBlobFormat = interface(DDN.mscorlib.DNObject)
  ['{BD6B75F6-063A-3DCF-A8C7-750CEB8A92FF}']
  { getters & setters } 

    function get_Format: string;

  { methods } 

    ///<summary>
    ///  将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象进行比较。
    ///</summary>
    ///  <param name="obj">
    ///  要与当前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  参数是 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象，它指定相同的密钥 BLOB 格式与当前对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象与当前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象进行比较。
    ///</summary>
    ///  <param name="other">
    ///  要与当前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="other" />
    ///  参数指定相同的密钥 BLOB 格式与当前对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNCngKeyBlobFormat): Boolean; overload;
    ///<summary>
    ///  在当前生成嵌入密钥 BLOB 格式的哈希值 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  嵌入的密钥 BLOB 格式哈希值。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取密钥 BLOB 格式的名称，当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象指定。
    ///</summary>
    ///<returns>
    ///  嵌入密钥 BLOB 格式名称。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取密钥 BLOB 格式的名称，当前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />
    ///  对象指定。
    ///</summary>
    ///<returns>
    ///  嵌入密钥 BLOB 格式名称。
    ///</returns>
    property Format: string read get_Format;
  end;

  TDNCngKeyBlobFormat = class(TDNGenericImport<DNCngKeyBlobFormatClass, DNCngKeyBlobFormat>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngKeyCreationParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5A671751-1364-53DD-9250-9D5765636197}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.CngKeyCreationParameters" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCngKeyCreationParameters;

  end;

  ///<summary>
  ///  包含密钥创建的高级属性。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngKeyCreationParameters')]
  DNCngKeyCreationParameters = interface(DDN.mscorlib.DNObject)
  ['{5F828D16-3D84-34F5-8EC8-B5BFD0D6804B}']
  { getters & setters } 

    function get_ExportPolicy: DDN.mscorlib.DNNullable<DNCngExportPolicies>;
    procedure set_ExportPolicy(value: DDN.mscorlib.DNNullable<DNCngExportPolicies>);
    function get_KeyCreationOptions: DNCngKeyCreationOptions;
    procedure set_KeyCreationOptions(value: DNCngKeyCreationOptions);
    function get_KeyUsage: DDN.mscorlib.DNNullable<DNCngKeyUsages>;
    procedure set_KeyUsage(value: DDN.mscorlib.DNNullable<DNCngKeyUsages>);
    function get_ParentWindowHandle: IntPtr;
    procedure set_ParentWindowHandle(value: IntPtr);
    function get_Parameters: DNCngPropertyCollection;
    function get_Provider: DNCngProvider;
    procedure set_Provider(value: DNCngProvider);
    function get_UIPolicy: DNCngUIPolicy;
    procedure set_UIPolicy(value: DNCngUIPolicy);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置密钥导出策略。
    ///</summary>
    ///<returns>
    ///  一个指定密钥导出策略的对象。
    ///  默认值是 <see langword="null" />
    ///  , ，该值指示密钥存储提供程序的默认导出策略已设置。
    ///</returns>
    property ExportPolicy: DDN.mscorlib.DNNullable<DNCngExportPolicies> read get_ExportPolicy write set_ExportPolicy;
    ///<summary>
    ///  获取或设置密钥创建选项。
    ///</summary>
    ///<returns>
    ///  一个对象，指定用于创建密钥的选项。
    ///  默认值是 <see langword="null" />
    ///  , ，指示已设置密钥存储提供程序的默认密钥创建选项。
    ///</returns>
    property KeyCreationOptions: DNCngKeyCreationOptions read get_KeyCreationOptions write set_KeyCreationOptions;
    ///<summary>
    ///  获取或设置应用于当前密钥的加密操作。
    ///</summary>
    ///<returns>
    ///  指定密钥用法的一个或多个枚举值的按位组合。
    ///  默认值是 <see langword="null" />
    ///  , ，该值指示已设置密钥存储提供程序的默认密钥用法。
    ///</returns>
    property KeyUsage: DDN.mscorlib.DNNullable<DNCngKeyUsages> read get_KeyUsage write set_KeyUsage;
    ///<summary>
    ///  获取或设置应用作由 Cryptography Next Generation (CNG) 类创建的对话框的父窗口的窗口句柄。
    ///</summary>
    ///<returns>
    ///  用于 CNG 对话框的父窗口的 HWND。
    ///</returns>
    property ParentWindowHandle: IntPtr read get_ParentWindowHandle write set_ParentWindowHandle;
    ///<summary>
    ///  使 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  要创建具有在最终的密钥设置的附加属性对象。
    ///</summary>
    ///<returns>
    ///  一个包含必须上设置的任何其他参数的集合对象 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  密钥的创建过程中的对象。
    ///</returns>
    property Parameters: DNCngPropertyCollection read get_Parameters;
    ///<summary>
    ///  获取或设置中的密钥存储提供程序 (KSP) 创建一个密钥。
    ///</summary>
    ///<returns>
    ///  一个指定新的密钥将在其中创建 KSP 的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="P:System.Security.Cryptography.CngKeyCreationParameters.Provider" />
    ///  属性设置为 <see langword="null" />
    ///  值。
    ///</exception>
    property Provider: DNCngProvider read get_Provider write set_Provider;
    ///<summary>
    ///  获取或设置用户界面，当创建或访问密钥时要显示有关信息。
    ///</summary>
    ///<returns>
    ///  包含有关创建或访问密钥时下, 一代加密技术 (CNG) 类所示的用户界面的详细信息的对象。
    ///  一个 <see langword="null" />
    ///  值表示已设置了密钥存储提供程序的默认用户界面策略。
    ///</returns>
    property UIPolicy: DNCngUIPolicy read get_UIPolicy write set_UIPolicy;
  end;

  TDNCngKeyCreationParameters = class(TDNGenericImport<DNCngKeyCreationParametersClass, DNCngKeyCreationParameters>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F74A1313-EC15-5EA5-BCF8-72DD9E9716E9}']
  { static getter & setter } 

    {class} function get_MicrosoftSmartCardKeyStorageProvider: DNCngProvider;
    {class} function get_MicrosoftSoftwareKeyStorageProvider: DNCngProvider;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="provider">
    ///  若要初始化的密钥存储提供程序 (KSP) 的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="provider" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="provider" />
    ///  参数长度为 0 （零）。
    ///</exception>
    {class} function init(provider: string): DNCngProvider;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  对象，它指定 Microsoft 智能卡密钥存储提供程序。
    ///</summary>
    ///<returns>
    ///  一个对象，指定 Microsoft 智能卡密钥存储提供程序。
    ///</returns>
    {class} property MicrosoftSmartCardKeyStorageProvider: DNCngProvider read get_MicrosoftSmartCardKeyStorageProvider;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  对象，它指定 Microsoft 软件密钥存储提供程序。
    ///</summary>
    ///<returns>
    ///  一个对象，指定 Microsoft 软件密钥存储提供程序。
    ///</returns>
    {class} property MicrosoftSoftwareKeyStorageProvider: DNCngProvider read get_MicrosoftSoftwareKeyStorageProvider;
  end;

  ///<summary>
  ///  封装用于下一代加密技术 (CNG) 对象的密钥存储提供程序 (KSP) 名称。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngProvider')]
  DNCngProvider = interface(DDN.mscorlib.DNObject)
  ['{077E73E7-8435-313B-87E6-18691E1E917E}']
  { getters & setters } 

    function get_Provider: string;

  { methods } 

    ///<summary>
    ///  将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  对象进行比较。
    ///</summary>
    ///  <param name="obj">
    ///  要与当前的 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  对象进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  参数是 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  ，它指定相同的密钥存储 provider(KSP) 与当前对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  对象与当前的 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  对象进行比较。
    ///</summary>
    ///  <param name="other">
    ///  要与当前的 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  对象进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="other" />
    ///  参数指定相同的密钥存储提供程序 (KSP) 与当前对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNCngProvider): Boolean; overload;
    ///<summary>
    ///  生成的名称嵌入在当前的密钥存储提供程序 (KSP) 的哈希值 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  嵌入的 KSP 名称哈希值。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取密钥存储提供程序 (KSP) 的名称当前 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  对象指定。
    ///</summary>
    ///<returns>
    ///  嵌入的 KSP 名称。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取密钥存储提供程序 (KSP) 的名称当前 <see cref="T:System.Security.Cryptography.CngProvider" />
    ///  对象指定。
    ///</summary>
    ///<returns>
    ///  嵌入的 KSP 名称。
    ///</returns>
    property Provider: string read get_Provider;
  end;

  TDNCngProvider = class(TDNGenericImport<DNCngProviderClass, DNCngProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngUIPolicyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4072695A-6A9E-5F60-8FBB-54D05BCAEEF9}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" />
    ///  类通过使用指定的保护级别。
    ///</summary>
    ///  <param name="protectionLevel">
    ///  指定保护级别的枚举值的按位组合。
    ///</param>
    {class} function init(protectionLevel: DNCngUIProtectionLevels): DNCngUIPolicy; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" />
    ///  类通过使用指定的保护级别和友好名称。
    ///</summary>
    ///  <param name="protectionLevel">
    ///  指定保护级别的枚举值的按位组合。
    ///</param>
    ///  <param name="friendlyName">
    ///  要在用户界面提示中使用的密钥友好名称。
    ///  指定要使用的默认名称的空字符串。
    ///</param>
    {class} function init(protectionLevel: DNCngUIProtectionLevels; friendlyName: string): DNCngUIPolicy; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" />
    ///  类通过使用指定的保护级别、 友好名称和说明。
    ///</summary>
    ///  <param name="protectionLevel">
    ///  指定保护级别的枚举值的按位组合。
    ///</param>
    ///  <param name="friendlyName">
    ///  要在用户界面提示中使用的密钥友好名称。
    ///  指定要使用的默认名称的空字符串。
    ///</param>
    ///  <param name="description">
    ///  密钥的全文索引说明。
    ///  指定要使用的默认说明的空字符串。
    ///</param>
    {class} function init(protectionLevel: DNCngUIProtectionLevels; friendlyName: string; description: string): DNCngUIPolicy; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" />
    ///  类通过使用指定的保护级别、 好记的名称、 描述字符串，并使用上下文。
    ///</summary>
    ///  <param name="protectionLevel">
    ///  指定保护级别的枚举值的按位组合。
    ///</param>
    ///  <param name="friendlyName">
    ///  要在用户界面提示中使用的密钥友好名称。
    ///  指定要使用的默认名称的空字符串。
    ///</param>
    ///  <param name="description">
    ///  密钥的全文索引说明。
    ///  指定要使用的默认说明的空字符串。
    ///</param>
    ///  <param name="useContext">
    ///  说明如何使用密钥。
    ///  指定要使用的默认说明的空字符串。
    ///</param>
    {class} function init(protectionLevel: DNCngUIProtectionLevels; friendlyName: string; description: string; useContext: string): DNCngUIPolicy; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" />
    ///  类通过使用指定的保护级别、 好记的名称、 描述字符串，使用上下文和标题。
    ///</summary>
    ///  <param name="protectionLevel">
    ///  指定保护级别的枚举值的按位组合。
    ///</param>
    ///  <param name="friendlyName">
    ///  要在用户界面提示中使用的密钥友好名称。
    ///  指定要使用的默认名称的空字符串。
    ///</param>
    ///  <param name="description">
    ///  密钥的全文索引说明。
    ///  指定要使用的默认说明的空字符串。
    ///</param>
    ///  <param name="useContext">
    ///  说明如何使用密钥。
    ///  指定要使用的默认说明的空字符串。
    ///</param>
    ///  <param name="creationTitle">
    ///  提供用户界面提示的对话框标题。
    ///  指定要使用的默认标题的空字符串。
    ///</param>
    {class} function init(protectionLevel: DNCngUIProtectionLevels; friendlyName: string; description: string; useContext: string; creationTitle: string): DNCngUIPolicy; overload;

  end;

  ///<summary>
  ///  封装访问受保护密钥时下一代加密技术 (CNG) 所显示用户界面 (UI) 的可选配置参数。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngUIPolicy')]
  DNCngUIPolicy = interface(DDN.mscorlib.DNObject)
  ['{D97C43F4-8E33-3595-B805-AEA64AF6BF42}']
  { getters & setters } 

    function get_CreationTitle: string;
    function get_Description: string;
    function get_FriendlyName: string;
    function get_ProtectionLevel: DNCngUIProtectionLevels;
    function get_UseContext: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取提示通过用户界面显示的标题。
    ///</summary>
    ///<returns>
    ///  访问密钥时出现的对话框中的标题。
    ///</returns>
    property CreationTitle: string read get_CreationTitle;
    ///<summary>
    ///  获取由 UI 显示的描述字符串的提示。
    ///</summary>
    ///<returns>
    ///  访问密钥时出现的对话框中说明文本。
    ///</returns>
    property Description: string read get_Description;
    ///<summary>
    ///  获取由 UI 显示的友好名称的提示。
    ///</summary>
    ///<returns>
    ///  用于描述访问密钥时出现的对话框中的密钥友好名称。
    ///</returns>
    property FriendlyName: string read get_FriendlyName;
    ///<summary>
    ///  获取密钥的用户界面保护级别。
    ///</summary>
    ///<returns>
    ///  一个对象，描述要应用于密钥的用户界面保护级别。
    ///</returns>
    property ProtectionLevel: DNCngUIProtectionLevels read get_ProtectionLevel;
    ///<summary>
    ///  获取密钥的使用方式的说明。
    ///</summary>
    ///<returns>
    ///  密钥的使用方式的说明。
    ///</returns>
    property UseContext: string read get_UseContext;
  end;

  TDNCngUIPolicy = class(TDNGenericImport<DNCngUIPolicyClass, DNCngUIPolicy>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECCurve_NamedCurvesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0EE9F263-45C9-53FE-9ECE-59878DAE772A}']
  { static getter & setter } 

    {class} function get_brainpoolP160r1: DNECCurve;
    {class} function get_brainpoolP160t1: DNECCurve;
    {class} function get_brainpoolP192r1: DNECCurve;
    {class} function get_brainpoolP192t1: DNECCurve;
    {class} function get_brainpoolP224r1: DNECCurve;
    {class} function get_brainpoolP224t1: DNECCurve;
    {class} function get_brainpoolP256r1: DNECCurve;
    {class} function get_brainpoolP256t1: DNECCurve;
    {class} function get_brainpoolP320r1: DNECCurve;
    {class} function get_brainpoolP320t1: DNECCurve;
    {class} function get_brainpoolP384r1: DNECCurve;
    {class} function get_brainpoolP384t1: DNECCurve;
    {class} function get_brainpoolP512r1: DNECCurve;
    {class} function get_brainpoolP512t1: DNECCurve;
    {class} function get_nistP256: DNECCurve;
    {class} function get_nistP384: DNECCurve;
    {class} function get_nistP521: DNECCurve;

  { static propertys } 

    ///<summary>
    ///  获取名为 brainpoolP160r1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP160r1 的曲线。
    ///</returns>
    {class} property brainpoolP160r1: DNECCurve read get_brainpoolP160r1;
    ///<summary>
    ///  获取名为 brainpoolP160t1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP160t1 的曲线。
    ///</returns>
    {class} property brainpoolP160t1: DNECCurve read get_brainpoolP160t1;
    ///<summary>
    ///  获取名为 brainpoolP192r1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP192r1 的曲线。
    ///</returns>
    {class} property brainpoolP192r1: DNECCurve read get_brainpoolP192r1;
    ///<summary>
    ///  获取名为 brainpoolP192t1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP192t1 的曲线。
    ///</returns>
    {class} property brainpoolP192t1: DNECCurve read get_brainpoolP192t1;
    ///<summary>
    ///  获取名为 brainpoolP224r1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP224r1 的曲线。
    ///</returns>
    {class} property brainpoolP224r1: DNECCurve read get_brainpoolP224r1;
    ///<summary>
    ///  获取名为 brainpoolP224t1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP224t1 的曲线。
    ///</returns>
    {class} property brainpoolP224t1: DNECCurve read get_brainpoolP224t1;
    ///<summary>
    ///  获取名为 brainpoolP256r1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP256r1 的曲线。
    ///</returns>
    {class} property brainpoolP256r1: DNECCurve read get_brainpoolP256r1;
    ///<summary>
    ///  获取名为 brainpoolP256t1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP256t1 的曲线。
    ///</returns>
    {class} property brainpoolP256t1: DNECCurve read get_brainpoolP256t1;
    ///<summary>
    ///  获取名为 brainpoolP320r1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP320r1 的曲线。
    ///</returns>
    {class} property brainpoolP320r1: DNECCurve read get_brainpoolP320r1;
    ///<summary>
    ///  获取名为 brainpoolP320t1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP320t1 的曲线。
    ///</returns>
    {class} property brainpoolP320t1: DNECCurve read get_brainpoolP320t1;
    ///<summary>
    ///  获取名为 brainpoolP384r1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP384r1 的曲线。
    ///</returns>
    {class} property brainpoolP384r1: DNECCurve read get_brainpoolP384r1;
    ///<summary>
    ///  获取名为 brainpoolP384t1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP384t1 的曲线。
    ///</returns>
    {class} property brainpoolP384t1: DNECCurve read get_brainpoolP384t1;
    ///<summary>
    ///  获取名为 brainpoolP512r1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP512r1 的曲线。
    ///</returns>
    {class} property brainpoolP512r1: DNECCurve read get_brainpoolP512r1;
    ///<summary>
    ///  获取名为 brainpoolP512t1 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 brainpoolP512t1 的曲线。
    ///</returns>
    {class} property brainpoolP512t1: DNECCurve read get_brainpoolP512t1;
    ///<summary>
    ///  获取名为 nistP256 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 nistP256 的曲线。
    ///</returns>
    {class} property nistP256: DNECCurve read get_nistP256;
    ///<summary>
    ///  获取名为 nistP384 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 nistP384 的曲线。
    ///</returns>
    {class} property nistP384: DNECCurve read get_nistP384;
    ///<summary>
    ///  获取名为 nistP521 的曲线。
    ///</summary>
    ///<returns>
    ///  名为 nistP521 的曲线。
    ///</returns>
    {class} property nistP521: DNECCurve read get_nistP521;
  end;

  ///<summary>
  ///  表示用于创建已命名曲线的工厂类。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECCurve+NamedCurves')]
  DNECCurve_NamedCurves = interface(DDN.mscorlib.DNObject)
  ['{F9245C8B-EF76-324A-84A7-AA4081C29663}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNECCurve_NamedCurves = class(TDNGenericImport<DNECCurve_NamedCurvesClass, DNECCurve_NamedCurves>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDiffieHellmanPublicKeyClass = interface(DNObjectClass)
  ['{10956E50-DDFD-5371-B9BF-E5BC9B993A16}']
  end;

  ///<summary>
  ///  提供所有 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />
  ///  实现必须从中继承的抽象基类。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECDiffieHellmanPublicKey')]
  DNECDiffieHellmanPublicKey = interface(DDN.mscorlib.DNIDisposable)
  ['{D1178442-F7D0-3691-A85E-3CA5AA9B5F02}']
  { methods } 

    ///<summary>
    ///  释放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />
    ///  公钥序列化为 XML 字符串。
    ///</summary>
    ///<returns>
    ///  一个 XML 字符串，该字符串包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。
    ///</returns>
    function ToXmlString: string;
    ///<summary>
    ///  在派生类中替代时，导出 <see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象的已命名或显式 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示此项在曲线上的点的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    function ExportParameters: DNECParameters;
    ///<summary>
    ///  在派生类中替代时，导出 <see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象的显式 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示此项在曲线上的点的对象（使用显式曲线格式）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  派生方法必须重写此方法。
    ///</exception>
    function ExportExplicitParameters: DNECParameters;
    ///<summary>
    ///  将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />
    ///  密钥 BLOB 序列化为字节数组。
    ///</summary>
    ///<returns>
    ///  一个字节数组，包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。
    ///</returns>
    function ToByteArray: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNECDiffieHellmanPublicKey = class(TDNGenericImport<DNECDiffieHellmanPublicKeyClass, DNECDiffieHellmanPublicKey>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDiffieHellmanCngPublicKeyClass = interface(DNECDiffieHellmanPublicKeyClass)
  ['{E56A16E0-4825-51AC-89B5-B6F953D135A4}']
  { static methods } 

    ///<summary>
    ///  将字节数组，其中包含公钥和 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />
    ///  根据指定格式的对象。
    ///</summary>
    ///  <param name="publicKeyBlob">
    ///  包含的椭圆曲线 Diffie-hellman (ECDH) 公钥的字节数组。
    ///</param>
    ///  <param name="format">
    ///  一个指定的密钥 BLOB 格式的对象。
    ///</param>
    ///<returns>
    ///  一个包含在字节数组中序列化的 ECDH 公钥的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="publicKeyBlob" />
    ///  或 <paramref name="format" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="publicKeyBlob" />
    ///  参数不包含 <see cref="T:System.Security.Cryptography.ECDiffieHellman" />
    ///  键。
    ///</exception>
    {class} function FromByteArray(publicKeyBlob: TArray<Byte>; format: DNCngKeyBlobFormat): DNECDiffieHellmanPublicKey;
    ///<summary>
    ///  XML 将字符串转换为 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />
    ///  对象。
    ///</summary>
    ///  <param name="xml">
    ///  一个 XML 字符串，包含一个椭圆曲线 Diffie-hellman (ECDH) 密钥。
    ///</param>
    ///<returns>
    ///  一个包含由给定的 XML 指定 ECDH 公钥的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xml" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="xml" />
    ///  参数未指定 <see cref="T:System.Security.Cryptography.ECDiffieHellman" />
    ///  键。
    ///</exception>
    {class} function FromXmlString(xml: string): DNECDiffieHellmanCngPublicKey;

  end;

  ///<summary>
  ///  指定与一起使用的椭圆曲线 Diffie-hellman (ECDH) 公钥 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECDiffieHellmanCngPublicKey')]
  DNECDiffieHellmanCngPublicKey = interface(DNECDiffieHellmanPublicKey)
  ['{8F8E78A2-9595-38C4-A08C-0B164CA33D44}']
  { getters & setters } 

    function get_BlobFormat: DNCngKeyBlobFormat;

  { methods } 

    ///<summary>
    ///  将序列化为 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />
    ///  公钥与 RFC 4050 格式的 XML 字符串。
    ///</summary>
    ///<returns>
    ///  一个包含已序列化的 XML 字符串 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />
    ///  公共密钥。
    ///</returns>
    function ToXmlString: string;
    ///<summary>
    ///  将 <see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象使用的密钥和显式曲线参数导出到 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象使用的密钥和显式曲线参数。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  此方法无法获取曲线值。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此平台不支持显式导出。
    ///  必须使用 Windows 10 或更高版本。
    ///</exception>
    function ExportExplicitParameters: DNECParameters;
    ///<summary>
    ///  将 <see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象使用的密钥导出到 <see cref="T:System.Security.Cryptography.ECParameters" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象使用的密钥和已命名曲线参数。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  此方法无法获取曲线值。
    ///</exception>
    function ExportParameters: DNECParameters;
    ///<summary>
    ///  将转换 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />
    ///  对象传递给 <see cref="T:System.Security.Cryptography.CngKey" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个对象，包含表示密钥 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />
    ///  对象。
    ///</returns>
    function Import: DNCngKey;
    ///<summary>
    ///  释放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />
    ///  密钥 BLOB 序列化为字节数组。
    ///</summary>
    ///<returns>
    ///  一个字节数组，包含已序列化的椭圆曲线 Diffie-Hellman (ECDH) 公钥。
    ///</returns>
    function ToByteArray: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取用于密钥 BLOB 格式 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  用表示密钥 BLOB 格式。
    ///</returns>
    property BlobFormat: DNCngKeyBlobFormat read get_BlobFormat;
  end;

  TDNECDiffieHellmanCngPublicKey = class(TDNGenericImport<DNECDiffieHellmanCngPublicKeyClass, DNECDiffieHellmanCngPublicKey>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNMD5CngClass = interface(DDN.mscorlib.DNMD5Class)
  ['{625F2E8A-316F-5C89-A0B2-ACE3D258D817}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.MD5Cng" />
    ///  类的新实例。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。
    ///</exception>
    {class} function init: DNMD5Cng;

  end;

  ///<summary>
  ///  提供 CNG （下一代加密技术） 实现的 MD5 (消息摘要 5) 128 位哈希算法。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.MD5Cng')]
  DNMD5Cng = interface(DDN.mscorlib.DNMD5)
  ['{9A3FD0A2-F31A-3165-B4B7-9F0641101882}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    ///<summary>
    ///  初始化或重新初始化的实例的哈希算法。
    ///</summary>
    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNMD5Cng = class(TDNGenericImport<DNMD5CngClass, DNMD5Cng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA1CngClass = interface(DDN.mscorlib.DNSHA1Class)
  ['{5ED325E5-ECC5-593D-A5F7-544451E43755}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.SHA1Cng" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSHA1Cng;

  end;

  ///<summary>
  ///  提供的下一代加密技术 (CNG) 实现的安全哈希算法 (SHA)。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.SHA1Cng')]
  DNSHA1Cng = interface(DDN.mscorlib.DNSHA1)
  ['{05ED922D-E6AD-31CA-9A49-F50FC6761A29}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    ///<summary>
    ///  初始化或重新初始化的实例的哈希算法。
    ///</summary>
    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA1Cng = class(TDNGenericImport<DNSHA1CngClass, DNSHA1Cng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA256CngClass = interface(DDN.mscorlib.DNSHA256Class)
  ['{70456A1E-F18E-5099-A2FE-2290C7FD9370}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.SHA256Cng" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSHA256Cng;

  end;

  ///<summary>
  ///  提供的下一代加密技术 (CNG) 实现的安全哈希算法 (SHA) 256 位哈希值。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.SHA256Cng')]
  DNSHA256Cng = interface(DDN.mscorlib.DNSHA256)
  ['{5CCDDA25-1166-3FD3-A267-B58AAE8404D0}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    ///<summary>
    ///  初始化或重新初始化的实例的哈希算法。
    ///</summary>
    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA256Cng = class(TDNGenericImport<DNSHA256CngClass, DNSHA256Cng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA256CryptoServiceProviderClass = interface(DDN.mscorlib.DNSHA256Class)
  ['{5BB1F8A4-A184-58A1-A52C-9FD92DE90473}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.SHA256CryptoServiceProvider" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSHA256CryptoServiceProvider;

  end;

  ///<summary>
  ///  定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.SHA256" />
  ///  算法。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.SHA256CryptoServiceProvider')]
  DNSHA256CryptoServiceProvider = interface(DDN.mscorlib.DNSHA256)
  ['{5F94830F-94ED-3788-ABAD-298E40367B5B}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    ///<summary>
    ///  初始化或重新初始化，哈希算法的实例。
    ///</summary>
    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA256CryptoServiceProvider = class(TDNGenericImport<DNSHA256CryptoServiceProviderClass, DNSHA256CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA384CngClass = interface(DDN.mscorlib.DNSHA384Class)
  ['{B54652B0-1676-59A8-A1DC-7E942EFF3E41}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.SHA384Cng" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSHA384Cng;

  end;

  ///<summary>
  ///  为 384 位哈希值提供的下一代加密技术 (CNG) 实现的安全哈希算法 (SHA)。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.SHA384Cng')]
  DNSHA384Cng = interface(DDN.mscorlib.DNSHA384)
  ['{F2297229-7509-3F26-AC4A-59ADAFB5813A}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    ///<summary>
    ///  初始化或重新初始化的实例的哈希算法。
    ///</summary>
    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA384Cng = class(TDNGenericImport<DNSHA384CngClass, DNSHA384Cng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA384CryptoServiceProviderClass = interface(DDN.mscorlib.DNSHA384Class)
  ['{0152EB3E-9B2B-5882-87B6-3BD69CFCE1B4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.SHA384CryptoServiceProvider" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSHA384CryptoServiceProvider;

  end;

  ///<summary>
  ///  定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.SHA384" />
  ///  算法。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.SHA384CryptoServiceProvider')]
  DNSHA384CryptoServiceProvider = interface(DDN.mscorlib.DNSHA384)
  ['{9D51BAC9-A860-3B50-8A60-4CB3EFCD6379}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    ///<summary>
    ///  初始化或重新初始化，哈希算法的实例。
    ///</summary>
    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA384CryptoServiceProvider = class(TDNGenericImport<DNSHA384CryptoServiceProviderClass, DNSHA384CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA512CngClass = interface(DDN.mscorlib.DNSHA512Class)
  ['{1AB1D289-4C3F-54E6-BBCD-D0B4D96FF7B3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.SHA512Cng" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSHA512Cng;

  end;

  ///<summary>
  ///  为 512 位哈希值提供的下一代加密技术 (CNG) 实现的安全哈希算法 (SHA)。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.SHA512Cng')]
  DNSHA512Cng = interface(DDN.mscorlib.DNSHA512)
  ['{1D95B8A2-A542-3E26-A347-F9AC247F10E5}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    ///<summary>
    ///  初始化或重新初始化的实例的哈希算法。
    ///</summary>
    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA512Cng = class(TDNGenericImport<DNSHA512CngClass, DNSHA512Cng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA512CryptoServiceProviderClass = interface(DDN.mscorlib.DNSHA512Class)
  ['{63A7A744-4072-56D7-BA2F-A35C7EAA8FE6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.SHA512CryptoServiceProvider" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSHA512CryptoServiceProvider;

  end;

  ///<summary>
  ///  定义一个包装对象来访问加密服务提供程序 (CSP) 实现的 <see cref="T:System.Security.Cryptography.SHA512" />
  ///  算法。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.SHA512CryptoServiceProvider')]
  DNSHA512CryptoServiceProvider = interface(DDN.mscorlib.DNSHA512)
  ['{3A882AC7-BC63-3525-B777-C89C0D9C2D05}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    ///<summary>
    ///  初始化或重新初始化，哈希算法的实例。
    ///</summary>
    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA512CryptoServiceProvider = class(TDNGenericImport<DNSHA512CryptoServiceProviderClass, DNSHA512CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNIncrementalHashClass = interface(DNObjectClass)
  ['{999C85BB-6749-5DC9-800B-E8931A92AB0C}']
  { static methods } 

    ///<summary>
    ///  为指定算法创建 <see cref="T:System.Security.Cryptography.IncrementalHash" />
    ///  。
    ///</summary>
    ///  <param name="hashAlgorithm">
    ///  要执行的哈希算法的名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Security.Cryptography.IncrementalHash" />
    ///  实例，该实例已准备好计算 <paramref name="hashAlgorithm" />
    ///  指定的哈希算法。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或空字符串。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="hashAlgorithm" />
    ///  不是已知的哈希算法。
    ///</exception>
    {class} function CreateHash(hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): DNIncrementalHash;
    ///<summary>
    ///  使用指定的哈希算法和密钥为基于哈希的消息验证代码 (HMAC) 算法创建 <see cref="T:System.Security.Cryptography.IncrementalHash" />
    ///  。
    ///</summary>
    ///  <param name="hashAlgorithm">
    ///  要在 HMAC 内执行的哈希算法的名称。
    ///</param>
    ///  <param name="key">
    ///  HMAC 的密钥。
    ///  密钥可以为任何长度，但将对长度超过指定哈希算法的输出大小的密钥进行哈希处理，以便派生大小正确的密钥。
    ///  因此，建议的密钥大小为指定哈希算法的输出大小。
    ///</param>
    ///<returns><see cref="T:System.Security.Cryptography.IncrementalHash" />
    ///  类的一个实例，该实例已准备好计算指定的哈希算法。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="hashAlgorithm" />
    ///  .<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />
    ///  为 <see langword="null" />
    ///  或空字符串。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="hashAlgorithm" />
    ///  不是已知的哈希算法。
    ///</exception>
    {class} function CreateHMAC(hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; key: TArray<Byte>): DNIncrementalHash;

  end;

  ///<summary>
  ///  支持跨多个段以增量方式计算哈希或基于哈希的消息验证代码 (HMAC) 值。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.IncrementalHash')]
  DNIncrementalHash = interface(DDN.mscorlib.DNIDisposable)
  ['{708AD401-5F47-31EE-82FE-F6AD970A408B}']
  { getters & setters } 

    function get_AlgorithmName: DDN.mscorlib.DNHashAlgorithmName;

  { methods } 

    ///<summary>
    ///  将指定数据追加到已进行哈希或 HMAC 处理的数据。
    ///</summary>
    ///  <param name="data">
    ///  要处理的数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Security.Cryptography.IncrementalHash" />
    ///  对象已被释放。
    ///</exception>
    procedure AppendData(data: TArray<Byte>); overload;
    ///<summary>
    ///  从指定偏移量开始，向已经过哈希或基于哈希的消息验证代码 (HMAC) 处理的数据追加指定数据的指定字节数。
    ///</summary>
    ///  <param name="data">
    ///  要处理的数据。
    ///</param>
    ///  <param name="offset">
    ///  字节数组中的偏移量，从该位置开始使用数据。
    ///</param>
    ///  <param name="count">
    ///  要从 <paramref name="data" />
    ///  中使用的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" />
    ///  或 <paramref name="offset" />
    ///  为负数。
    ///  - 或 -
    ///  <paramref name="count" />
    ///  大于 <paramref name="data" />
    ///  的长度。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="offset" />
    ///  与 <paramref name="count" />
    ///  的总和大于数据长度。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Security.Cryptography.IncrementalHash" />
    ///  对象已被释放。
    ///</exception>
    procedure AppendData(data: TArray<Byte>; offset: Int32; count: Int32); overload;
    ///<summary>
    ///  释放 <see cref="T:System.Security.Cryptography.IncrementalHash" />
    ///  类的当前实例使用的资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  检索哈希或基于哈希的消息验证代码 (HMAC)（用于从之前对 <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])" />
    ///  方法的调用中累积的数据），并将对象重置为初始状态。
    ///</summary>
    ///<returns>
    ///  计算所得的哈希或 HMAC。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException"><see cref="T:System.Security.Cryptography.IncrementalHash" />
    ///  对象已被释放。
    ///</exception>
    function GetHashAndReset: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取正在执行的算法的名称。
    ///</summary>
    ///<returns>
    ///  正在执行的算法的名称。
    ///</returns>
    property AlgorithmName: DDN.mscorlib.DNHashAlgorithmName read get_AlgorithmName;
  end;

  TDNIncrementalHash = class(TDNGenericImport<DNIncrementalHashClass, DNIncrementalHash>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNManifestSignatureInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C4529C08-24A7-5CCC-8766-873DD7D1A464}']
  { static methods } 

    ///<summary>
    ///  收集并验证有关签名的属于指定的激活上下文的清单信息。
    ///</summary>
    ///  <param name="application">
    ///  清单的激活上下文。
    ///  激活上下文属于某个应用程序，并包含多个清单。
    ///</param>
    ///<returns>
    ///  一个包含集合 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" />
    ///  验证每个清单的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="application" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function VerifySignature(application: DDN.mscorlib.DNActivationContext): DNManifestSignatureInformationCollection; overload;
    ///<summary>
    ///  收集并验证有关的签名信息的清单属于指定的激活上下文和清单类型。
    ///</summary>
    ///  <param name="application">
    ///  清单的激活上下文。
    ///  激活上下文属于某个应用程序，并包含多个清单。
    ///</param>
    ///  <param name="manifests">
    ///  清单的类型。
    ///  此参数指定您想要验证的激活上下文中的清单。
    ///</param>
    ///<returns>
    ///  一个包含集合 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" />
    ///  验证每个清单的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="application" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function VerifySignature(application: DDN.mscorlib.DNActivationContext; manifests: DNManifestKinds): DNManifestSignatureInformationCollection; overload;
    ///<summary>
    ///  收集并验证有关签名的清单属于指定的激活上下文和清单类型的信息并允许选择要吊销的证书。
    ///</summary>
    ///  <param name="application">
    ///  清单的应用程序上下文。
    ///  激活上下文属于某个应用程序，并包含多个清单。
    ///</param>
    ///  <param name="manifests">
    ///  清单的类型。
    ///  此参数指定您想要验证的激活上下文中的清单。
    ///</param>
    ///  <param name="revocationFlag">
    ///  用于指定哪些证书链中的检查已吊销的枚举值之一。
    ///  默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.ExcludeRoot" />
    ///  。
    ///</param>
    ///  <param name="revocationMode">
    ///  确定是否 X.509 验证应联机查找吊销列表。
    ///</param>
    ///<returns>
    ///  一个包含集合 <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" />
    ///  验证每个清单的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="application" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  为指定了值 <paramref name="revocationFlag" />
    ///  或 <paramref name="revocationMode" />
    ///  参数无效。
    ///</exception>
    {class} function VerifySignature(application: DDN.mscorlib.DNActivationContext; manifests: DNManifestKinds; revocationFlag: DDN.System.DNX509RevocationFlag; revocationMode: DDN.System.DNX509RevocationMode): DNManifestSignatureInformationCollection; overload;

  end;

  ///<summary>
  ///  提供有关清单签名信息。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ManifestSignatureInformation')]
  DNManifestSignatureInformation = interface(DDN.mscorlib.DNObject)
  ['{81920FAE-D60F-34F6-979F-E5CAED18FF90}']
  { getters & setters } 

    function get_AuthenticodeSignature: DNAuthenticodeSignatureInformation;
    function get_Manifest: DNManifestKinds;
    function get_StrongNameSignature: DNStrongNameSignatureInformation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取清单的验证码签名信息。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" />
    ///  对象，其中包含验证码签名信息清单，或 <see langword="null" />
    ///  如果没有进行签名。
    ///</returns>
    property AuthenticodeSignature: DNAuthenticodeSignatureInformation read get_AuthenticodeSignature;
    ///<summary>
    ///  获取清单的类型。
    ///</summary>
    ///<returns><see cref="T:System.Security.ManifestKinds" />
    ///  值之一。
    ///</returns>
    property Manifest: DNManifestKinds read get_Manifest;
    ///<summary>
    ///  获取清单的强名称签名的详细信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature" />
    ///  对象，其中包含该签名，或 <see langword="null" />
    ///  如果没有强名称签名。
    ///</returns>
    property StrongNameSignature: DNStrongNameSignatureInformation read get_StrongNameSignature;
  end;

  TDNManifestSignatureInformation = class(TDNGenericImport<DNManifestSignatureInformationClass, DNManifestSignatureInformation>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNStrongNameSignatureInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B2A5BBB5-8974-5B3B-B8D0-83035BC93F55}']
  end;

  ///<summary>
  ///  包含清单的强名称签名信息。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.StrongNameSignatureInformation')]
  DNStrongNameSignatureInformation = interface(DDN.mscorlib.DNObject)
  ['{248B5F24-96E6-3728-B14B-69E19A4ACD70}']
  { getters & setters } 

    function get_HashAlgorithm: string;
    function get_HResult: Int32;
    function get_IsValid: Boolean;
    function get_PublicKey: DDN.mscorlib.DNAsymmetricAlgorithm;
    function get_VerificationResult: DNSignatureVerificationResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取用于计算强名称签名的哈希算法。
    ///</summary>
    ///<returns>
    ///  用于计算强名称签名的哈希算法的名称。
    ///</returns>
    property HashAlgorithm: string read get_HashAlgorithm;
    ///<summary>
    ///  获取结果代码的 HRESULT 值。
    ///</summary>
    ///<returns>
    ///  结果代码的 HRESULT 值。
    ///</returns>
    property HResult: Int32 read get_HResult;
    ///<summary>
    ///  获取一个值，该值指示是否有效的强名称签名。
    ///</summary>
    ///<returns><see langword="true" />
    ///  强名称签名是否有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsValid: Boolean read get_IsValid;
    ///<summary>
    ///  获取用于验证签名的公钥。
    ///</summary>
    ///<returns>
    ///  用于验证签名公钥。
    ///</returns>
    property PublicKey: DDN.mscorlib.DNAsymmetricAlgorithm read get_PublicKey;
    ///<summary>
    ///  获取验证强名称签名的结果。
    ///</summary>
    ///<returns>
    ///  签名验证结果代码。
    ///</returns>
    property VerificationResult: DNSignatureVerificationResult read get_VerificationResult;
  end;

  TDNStrongNameSignatureInformation = class(TDNGenericImport<DNStrongNameSignatureInformationClass, DNStrongNameSignatureInformation>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAesCngClass = interface(DDN.mscorlib.DNAesClass)
  ['{DF5BBE4E-17B7-5B04-B6D1-F58EFADE7328}']
  { constructors } 

    ///<summary>
    ///  使用临时密钥初始化 <see cref="T:System.Security.Cryptography.AesCng" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNAesCng; overload;
    ///<summary>
    ///  使用指定密钥名称初始化 <see cref="T:System.Security.Cryptography.AesCng" />
    ///  类的新实例，该密钥名称表示现有的保留的 AES 密钥。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此系统上不支持下一代加密技术 (CNG)。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function init(keyName: string): DNAesCng; overload;
    ///<summary>
    ///  使用指定的密钥名称和密钥存储提供者 (KSP) 初始化 <see cref="T:System.Security.Cryptography.AesCng" />
    ///  类的新实例，其中指定的密钥名称表示现有的保留的 AES 密钥。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥名称。
    ///</param>
    ///  <param name="provider">
    ///  包含密钥的 KSP。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="provider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此系统上不支持下一代加密技术 (CNG)。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function init(keyName: string; provider: DNCngProvider): DNAesCng; overload;
    ///<summary>
    ///  使用指定的密钥名称、密钥存储提供者 (KSP) 和密钥打开选项初始化 <see cref="T:System.Security.Cryptography.AesCng" />
    ///  类的新实例，其中指定的密钥名称表示现有的保留的 AES 密钥。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥名称。
    ///</param>
    ///  <param name="provider">
    ///  包含密钥的 KSP。
    ///</param>
    ///  <param name="openOptions">
    ///  枚举值的一个按位组合，这些值指定打开密钥的选项，例如打开密钥的位置（计算机或用户存储）以及是否取消 UI 提示。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="provider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此系统上不支持下一代加密技术 (CNG)。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function init(keyName: string; provider: DNCngProvider; openOptions: DNCngKeyOpenOptions): DNAesCng; overload;

  end;

  ///<summary>
  ///  提供高级加密标准 (AES) 算法的下一代加密技术 (CNG) 实现。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.AesCng')]
  DNAesCng = interface(DDN.mscorlib.DNAes)
  ['{D3A8D465-069E-3116-AE2B-BFEE03FDE1D8}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_Mode: DDN.mscorlib.DNCipherMode;
    procedure set_Mode(value: DDN.mscorlib.DNCipherMode);
    function get_Padding: DDN.mscorlib.DNPaddingMode;
    procedure set_Padding(value: DDN.mscorlib.DNPaddingMode);

  { methods } 

    ///<summary>
    ///  用当前键和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />
    ///  ) 创建对称 AES 解密器对象。
    ///</summary>
    ///<returns>
    ///  对称 AES 解密器对象。
    ///</returns>
    function CreateDecryptor: DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  用指定的密钥和初始化向量 (IV) 创建对称 AES 解密器对象。
    ///</summary>
    ///  <param name="rgbKey">
    ///  用于 AES 算法的密钥。
    ///  密钥大小必须为 128、192 或 256 位。
    ///</param>
    ///  <param name="rgbIV">
    ///  用于 AES 算法的初始化向量。
    ///</param>
    ///<returns>
    ///  对称 AES 解密器对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rgbKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="rgbKey" />
    ///  的大小对于此算法无效。
    ///  - 或 -
    ///  <paramref name="rgbIV" />
    ///  的大小与此算法的块大小不匹配。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="rgbKey" />
    ///  是此算法的已知弱密钥，不能使用。
    ///  - 或 -
    ///  <paramref name="rgbIV" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  使用当前键和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />
    ///  ) 创建对称 AES 加密器对象。
    ///</summary>
    ///<returns>
    ///  对称 AES 加密器对象。
    ///</returns>
    function CreateEncryptor: DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  用指定的密钥和初始化向量 (IV) 创建对称 AES 加密器对象。
    ///</summary>
    ///  <param name="rgbKey">
    ///  用于 AES 算法的密钥。
    ///  密钥大小必须为 128、192 或 256 位。
    ///</param>
    ///  <param name="rgbIV">
    ///  用于 AES 算法的初始化向量。
    ///</param>
    ///<returns>
    ///  对称 AES 加密器对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rgbKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="rgbKey" />
    ///  的大小对于此算法无效。
    ///  - 或 -
    ///  <paramref name="rgbIV" />
    ///  的大小与此算法的块大小不匹配。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="rgbKey" />
    ///  是此算法的已知弱密钥，不能使用。
    ///  - 或 -
    ///  <paramref name="rgbIV" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  生成用于 AES 算法的随机密钥。
    ///</summary>
    procedure GenerateKey;
    ///<summary>
    ///  生成用于 AES 算法的随机初始化向量 (IV)。
    ///</summary>
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Security.Cryptography.AesCng" />
    ///  算法的密钥。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.AesCng" />
    ///  算法的密钥。
    ///</returns>
    property Key: TArray<Byte> read get_Key write set_Key;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Security.Cryptography.AesCng" />
    ///  算法所用密钥的大小（以位为单位）。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.AesCng" />
    ///  算法所用密钥的大小（以位为单位）。
    ///</returns>
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
    property Mode: DDN.mscorlib.DNCipherMode read get_Mode write set_Mode;
    property Padding: DDN.mscorlib.DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNAesCng = class(TDNGenericImport<DNAesCngClass, DNAesCng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAesCryptoServiceProviderClass = interface(DDN.mscorlib.DNAesClass)
  ['{5C8D805D-ABC5-5E06-AFA7-5F0D5DC96644}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider" />
    ///  类的新实例。
    ///</summary>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  没有当前平台支持的密钥大小。
    ///</exception>
    {class} function init: DNAesCryptoServiceProvider;

  end;

  ///<summary>
  ///  执行对称加密和解密使用高级加密标准 (AES) 算法的加密应用程序编程接口 (CAPI) 实现。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.AesCryptoServiceProvider')]
  DNAesCryptoServiceProvider = interface(DDN.mscorlib.DNAes)
  ['{D23347DE-DC31-3687-B1E3-46DD0B93ACFD}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_Mode: DDN.mscorlib.DNCipherMode;
    procedure set_Mode(value: DDN.mscorlib.DNCipherMode);
    function get_Padding: DDN.mscorlib.DNPaddingMode;
    procedure set_Padding(value: DDN.mscorlib.DNPaddingMode);

  { methods } 

    ///<summary>
    ///  生成的随机初始化向量 (IV) 要用于该算法。
    ///</summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  无法生成的初始化向量 (IV)。
    ///</exception>
    procedure GenerateIV;
    ///<summary>
    ///  创建对称 AES 解密器对象使用当前的密钥和初始化向量 (IV)。
    ///</summary>
    ///<returns>
    ///  对称 AES 解密器对象。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  当前的关键是无效或缺失。
    ///</exception>
    function CreateDecryptor: DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  创建对称 AES 加密器对象使用当前的密钥和初始化向量 (IV)。
    ///</summary>
    ///<returns>
    ///  对称的 AES 加密器对象。
    ///</returns>
    function CreateEncryptor: DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  创建对称 AES 解密器对象使用指定的密钥和初始化向量 (IV)。
    ///</summary>
    ///  <param name="key">
    ///  用于对称算法的密钥。
    ///</param>
    ///  <param name="iv">
    ///  用于对称算法的初始化向量。
    ///</param>
    ///<returns>
    ///  对称 AES 解密器对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  或 <paramref name="iv" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="key" />
    ///  无效。
    ///</exception>
    function CreateDecryptor(key: TArray<Byte>; iv: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  创建对称加密器对象使用指定的密钥和初始化向量 (IV)。
    ///</summary>
    ///  <param name="key">
    ///  用于对称算法的密钥。
    ///</param>
    ///  <param name="iv">
    ///  用于对称算法的初始化向量。
    ///</param>
    ///<returns>
    ///  对称的 AES 加密器对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  或 <paramref name="iv" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="key" />
    ///  无效。
    ///</exception>
    function CreateEncryptor(key: TArray<Byte>; iv: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  生成用于该算法的随机密钥。
    ///</summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  无法生成该密钥。
    ///</exception>
    procedure GenerateKey;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于加密和解密的对称密钥。
    ///</summary>
    ///<returns>
    ///  用于加密和解密对称密钥。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  关键字的值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  密钥大小无效。
    ///</exception>
    property Key: TArray<Byte> read get_Key write set_Key;
    ///<summary>
    ///  获取或设置大小，以位为单位的机密密钥。
    ///</summary>
    ///<returns>
    ///  密钥的大小（以位为单位）。
    ///</returns>
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
    property Mode: DDN.mscorlib.DNCipherMode read get_Mode write set_Mode;
    property Padding: DDN.mscorlib.DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNAesCryptoServiceProvider = class(TDNGenericImport<DNAesCryptoServiceProviderClass, DNAesCryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAesManagedClass = interface(DDN.mscorlib.DNAesClass)
  ['{162E044A-C39B-52B1-BB67-C1BE191E633E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.AesManaged" />
    ///  类的新实例。
    ///</summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  启用 FIPS Windows 安全策略设置。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此实现不是 Windows 平台 FIPS 验证的加密算法的一部分。
    ///</exception>
    {class} function init: DNAesManaged;

  end;

  ///<summary>
  ///  提供了高级加密标准 (AES) 对称算法的一种托管的实现。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.AesManaged')]
  DNAesManaged = interface(DDN.mscorlib.DNAes)
  ['{ADEDF0DE-9DAE-31A4-9AC1-34D1217A19E0}']
  { getters & setters } 

    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DDN.mscorlib.DNCipherMode;
    procedure set_Mode(value: DDN.mscorlib.DNCipherMode);
    function get_Padding: DDN.mscorlib.DNPaddingMode;
    procedure set_Padding(value: DDN.mscorlib.DNPaddingMode);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    ///<summary>
    ///  创建对称解密器对象使用当前的密钥和初始化向量 (IV)。
    ///</summary>
    ///<returns>
    ///  对称解密器对象。
    ///</returns>
    function CreateDecryptor: DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  创建对称解密器对象使用指定的密钥和初始化向量 (IV)。
    ///</summary>
    ///  <param name="key">
    ///  用于对称算法的密钥。
    ///</param>
    ///  <param name="iv">
    ///  用于对称算法的初始化向量。
    ///</param>
    ///<returns>
    ///  对称解密器对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  或 <paramref name="iv" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="key" />
    ///  无效。
    ///</exception>
    function CreateDecryptor(key: TArray<Byte>; iv: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  创建对称加密器对象使用当前的密钥和初始化向量 (IV)。
    ///</summary>
    ///<returns>
    ///  对称加密器对象。
    ///</returns>
    function CreateEncryptor: DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  创建对称加密器对象使用指定的密钥和初始化向量 (IV)。
    ///</summary>
    ///  <param name="key">
    ///  用于对称算法的密钥。
    ///</param>
    ///  <param name="iv">
    ///  用于对称算法的初始化向量。
    ///</param>
    ///<returns>
    ///  对称加密器对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  或 <paramref name="iv" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="key" />
    ///  无效。
    ///</exception>
    function CreateEncryptor(key: TArray<Byte>; iv: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  生成的随机初始化向量 (IV) 用于对称算法。
    ///</summary>
    procedure GenerateIV;
    ///<summary>
    ///  生成用于对称算法的随机密钥。
    ///</summary>
    procedure GenerateKey;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要用作反馈的比特数。
    ///</summary>
    ///<returns>
    ///  反馈大小，以位为单位。
    ///</returns>
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    ///<summary>
    ///  获取或设置的初始化向量 (IV) 用于对称算法。
    ///</summary>
    ///<returns>
    ///  要用于对称算法的初始化向量
    ///</returns>
    property IV: TArray<Byte> read get_IV write set_IV;
    ///<summary>
    ///  获取或设置对称算法所用的密钥。
    ///</summary>
    ///<returns>
    ///  对称算法的密钥。
    ///</returns>
    property Key: TArray<Byte> read get_Key write set_Key;
    ///<summary>
    ///  获取或设置大小，以位为单位使用对称算法的机密密钥。
    ///</summary>
    ///<returns>
    ///  大小 （以位为单位使用的对称算法的密钥）。
    ///</returns>
    property KeySize: Int32 read get_KeySize write set_KeySize;
    ///<summary>
    ///  获取或设置对称算法的运算模式。
    ///</summary>
    ///<returns>
    ///  指定要用于加密的块密码模式的枚举值之一。
    ///  默认值为 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="P:System.Security.Cryptography.AesManaged.Mode" />
    ///  设置为 <see cref="F:System.Security.Cryptography.CipherMode.CFB" />
    ///  或 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />
    ///  。
    ///</exception>
    property Mode: DDN.mscorlib.DNCipherMode read get_Mode write set_Mode;
    ///<summary>
    ///  获取或设置对称算法中使用的填充模式。
    ///</summary>
    ///<returns>
    ///  指定要应用的填充类型的枚举值之一。
    ///  默认值为 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />
    ///  。
    ///</returns>
    property Padding: DDN.mscorlib.DNPaddingMode read get_Padding write set_Padding;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNAesManaged = class(TDNGenericImport<DNAesManagedClass, DNAesManaged>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNTripleDESCngClass = interface(DDN.mscorlib.DNTripleDESClass)
  ['{A1A394AB-C5DD-5FAE-8606-4483994485C1}']
  { constructors } 

    ///<summary>
    ///  使用临时密钥初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTripleDESCng; overload;
    ///<summary>
    ///  使用指定的密钥名称初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" />
    ///  类的新实例，该密钥名称表示现有的保留的 3DES 密钥。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此系统上不支持下一代加密技术 (CNG)。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function init(keyName: string): DNTripleDESCng; overload;
    ///<summary>
    ///  使用指定的密钥名称和密钥存储提供者 (KSP) 初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" />
    ///  类的新实例，其中指定的密钥名称表示现有的保留的 3DES 密钥。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥名称。
    ///</param>
    ///  <param name="provider">
    ///  包含密钥的 KSP。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="provider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此系统上不支持下一代加密技术 (CNG)。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function init(keyName: string; provider: DNCngProvider): DNTripleDESCng; overload;
    ///<summary>
    ///  使用指定的密钥名称、密钥存储提供程序 (KSP) 和密钥打开选项初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" />
    ///  类的新实例，其中指定的密钥名称表示现有的保留的 3DES 密钥。
    ///</summary>
    ///  <param name="keyName">
    ///  密钥名称。
    ///</param>
    ///  <param name="provider">
    ///  包含密钥的 KSP。
    ///</param>
    ///  <param name="openOptions">
    ///  枚举值的一个按位组合，这些值指定打开密钥的选项，例如打开密钥的位置（计算机或用户存储）以及是否取消 UI 提示。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyName" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="provider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此系统上不支持下一代加密技术 (CNG)。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  所有其他错误。
    ///</exception>
    {class} function init(keyName: string; provider: DNCngProvider; openOptions: DNCngKeyOpenOptions): DNTripleDESCng; overload;

  end;

  ///<summary>
  ///  提供三重数据加密标准 (3DES) 算法的下一代加密技术 (CNG) 实现。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.TripleDESCng')]
  DNTripleDESCng = interface(DDN.mscorlib.DNTripleDES)
  ['{CD61B14A-5D96-3D0B-A32F-4087690125A5}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_Mode: DDN.mscorlib.DNCipherMode;
    procedure set_Mode(value: DDN.mscorlib.DNCipherMode);
    function get_Padding: DDN.mscorlib.DNPaddingMode;
    procedure set_Padding(value: DDN.mscorlib.DNPaddingMode);

  { methods } 

    ///<summary>
    ///  用当前键和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />
    ///  ) 创建对称 3DES 解密器对象。
    ///</summary>
    ///<returns>
    ///  对称 3DES 解密器对象。
    ///</returns>
    function CreateDecryptor: DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  用指定的密钥和初始化向量 (IV) 创建对称 3DES 解密器对象。
    ///</summary>
    ///  <param name="rgbKey">
    ///  用于 3DES 算法的密钥。
    ///  密钥大小必须为 192 位。
    ///</param>
    ///  <param name="rgbIV">
    ///  用于 3DES 算法的初始化向量。
    ///</param>
    ///<returns>
    ///  对称 3DES 解密器对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rgbKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="rgbKey" />
    ///  的大小对于此算法无效。
    ///  - 或 -
    ///  <paramref name="rgbIV" />
    ///  的大小与此算法的块大小不匹配。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="rgbKey" />
    ///  是此算法的已知弱密钥，不能使用。
    ///  - 或 -
    ///  <paramref name="rgbIV" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  使用当前键和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />
    ///  ) 创建对称 3DES 加密器对象。
    ///</summary>
    ///<returns>
    ///  对称 3DES 加密器对象。
    ///</returns>
    function CreateEncryptor: DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  用指定的密钥和初始化向量 (IV) 创建对称 3DES 加密器对象。
    ///</summary>
    ///  <param name="rgbKey">
    ///  用于 3DES 算法的密钥。
    ///  密钥大小必须为 192 位。
    ///</param>
    ///  <param name="rgbIV">
    ///  用于 3DES 算法的初始化向量。
    ///</param>
    ///<returns>
    ///  对称 3DES 加密器对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rgbKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="rgbKey" />
    ///  的大小对于此算法无效。
    ///  - 或 -
    ///  <paramref name="rgbIV" />
    ///  的大小与此算法的块大小不匹配。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="rgbKey" />
    ///  是此算法的已知弱密钥，不能使用。
    ///  - 或 -
    ///  <paramref name="rgbIV" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    ///<summary>
    ///  生成用于 3DES 算法的随机密钥。
    ///</summary>
    procedure GenerateKey;
    ///<summary>
    ///  生成用于 3DES 算法的随机初始化向量 (IV)。
    ///</summary>
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Security.Cryptography.TripleDESCng" />
    ///  算法的密钥。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.TripleDESCng" />
    ///  算法的密钥。
    ///</returns>
    property Key: TArray<Byte> read get_Key write set_Key;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Security.Cryptography.TripleDESCng" />
    ///  算法所用密钥的大小（以位为单位）。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.TripleDESCng" />
    ///  算法所用密钥的大小（以位为单位）。
    ///</returns>
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
    property Mode: DDN.mscorlib.DNCipherMode read get_Mode write set_Mode;
    property Padding: DDN.mscorlib.DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNTripleDESCng = class(TDNGenericImport<DNTripleDESCngClass, DNTripleDESCng>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNAuthenticodeSignatureInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{88CFAC2E-984C-5CE8-970B-4EFA1089BF82}']
  end;

  ///<summary>
  ///  清单提供有关验证码签名信息。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation')]
  DNAuthenticodeSignatureInformation = interface(DDN.mscorlib.DNObject)
  ['{5187D08D-6816-34BA-A486-6B60A83A92B5}']
  { getters & setters } 

    function get_Description: string;
    function get_DescriptionUrl: DDN.System.DNUri;
    function get_HashAlgorithm: string;
    function get_HResult: Int32;
    function get_SignatureChain: DDN.System.DNX509Chain;
    function get_SigningCertificate: DDN.System.DNX509Certificate2;
    function get_Timestamp: DNTimestampInformation;
    function get_TrustStatus: DNTrustStatus;
    function get_VerificationResult: DNSignatureVerificationResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取签名证书的说明。
    ///</summary>
    ///<returns>
    ///  签名证书的说明。
    ///</returns>
    property Description: string read get_Description;
    ///<summary>
    ///  获取签名证书的描述 URL。
    ///</summary>
    ///<returns>
    ///  签名证书的描述 URL。
    ///</returns>
    property DescriptionUrl: DDN.System.DNUri read get_DescriptionUrl;
    ///<summary>
    ///  获取用于计算签名的哈希算法。
    ///</summary>
    ///<returns>
    ///  用于计算签名的哈希算法。
    ///</returns>
    property HashAlgorithm: string read get_HashAlgorithm;
    ///<summary>
    ///  从验证签名获取 HRESULT 值。
    ///</summary>
    ///<returns>
    ///  来自验证签名的 HRESULT 值。
    ///</returns>
    property HResult: Int32 read get_HResult;
    ///<summary>
    ///  获取用于验证验证码签名的证书链。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" />
    ///  对象，其中包含的证书链。
    ///</returns>
    property SignatureChain: DDN.System.DNX509Chain read get_SignatureChain;
    ///<summary>
    ///  获取已为清单签名的证书。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  表示证书的对象。
    ///</returns>
    property SigningCertificate: DDN.System.DNX509Certificate2 read get_SigningCertificate;
    ///<summary>
    ///  获取已应用于验证码签名的时间戳。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Security.Cryptography.X509Certificates.TimestampInformation" />
    ///  对象，其中包含签名的时间戳。
    ///</returns>
    property Timestamp: DNTimestampInformation read get_Timestamp;
    ///<summary>
    ///  获取验证码签名的可信度。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.TrustStatus" />
    ///  值之一。
    ///</returns>
    property TrustStatus: DNTrustStatus read get_TrustStatus;
    ///<summary>
    ///  获取验证验证码签名的结果。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.SignatureVerificationResult" />
    ///  值之一。
    ///</returns>
    property VerificationResult: DNSignatureVerificationResult read get_VerificationResult;
  end;

  TDNAuthenticodeSignatureInformation = class(TDNGenericImport<DNAuthenticodeSignatureInformationClass, DNAuthenticodeSignatureInformation>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNCertificateRequestClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FE574F2A-35BC-52F9-BB09-7176A268A3A4}']
  { constructors } 

    {class} function init(subjectName: string; key: DNECDsa; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): DNCertificateRequest; overload;
    {class} function init(subjectName: DDN.System.DNX500DistinguishedName; key: DNECDsa; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): DNCertificateRequest; overload;
    {class} function init(subjectName: string; key: DDN.mscorlib.DNRSA; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): DNCertificateRequest; overload;
    {class} function init(subjectName: DDN.System.DNX500DistinguishedName; key: DDN.mscorlib.DNRSA; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): DNCertificateRequest; overload;
    {class} function init(subjectName: DDN.System.DNX500DistinguishedName; publicKey: DDN.System.DNPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): DNCertificateRequest; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.CertificateRequest')]
  DNCertificateRequest = interface(DDN.mscorlib.DNObject)
  ['{0754A543-BA00-3A5E-957B-8E0FFCB60062}']
  { getters & setters } 

    function get_SubjectName: DDN.System.DNX500DistinguishedName;
    function get_CertificateExtensions: DDN.mscorlib.DNCollection<DDN.System.DNX509Extension>;
    function get_PublicKey: DDN.System.DNPublicKey;
    function get_HashAlgorithm: DDN.mscorlib.DNHashAlgorithmName;

  { methods } 

    function CreateSigningRequest: TArray<Byte>; overload;
    function CreateSigningRequest(signatureGenerator: DNX509SignatureGenerator): TArray<Byte>; overload;
    function CreateSelfSigned(notBefore: DDN.mscorlib.DNDateTimeOffset; notAfter: DDN.mscorlib.DNDateTimeOffset): DDN.System.DNX509Certificate2;
    function Create(issuerCertificate: DDN.System.DNX509Certificate2; notBefore: DDN.mscorlib.DNDateTimeOffset; notAfter: DDN.mscorlib.DNDateTimeOffset; serialNumber: TArray<Byte>): DDN.System.DNX509Certificate2; overload;
    function Create(issuerName: DDN.System.DNX500DistinguishedName; generator: DNX509SignatureGenerator; notBefore: DDN.mscorlib.DNDateTimeOffset; notAfter: DDN.mscorlib.DNDateTimeOffset; serialNumber: TArray<Byte>): DDN.System.DNX509Certificate2; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SubjectName: DDN.System.DNX500DistinguishedName read get_SubjectName;
    property CertificateExtensions: DDN.mscorlib.DNCollection<DDN.System.DNX509Extension> read get_CertificateExtensions;
    property PublicKey: DDN.System.DNPublicKey read get_PublicKey;
    property HashAlgorithm: DDN.mscorlib.DNHashAlgorithmName read get_HashAlgorithm;
  end;

  TDNCertificateRequest = class(TDNGenericImport<DNCertificateRequestClass, DNCertificateRequest>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNDSACertificateExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1FAD86A5-969A-5AF8-AE88-2DF278C5CD6A}']
  { static methods } 

    ///<summary>
    ///  从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  获取 <see cref="T:System.Security.Cryptography.DSA" />
    ///  公钥。
    ///</summary>
    ///  <param name="certificate">
    ///  证书。
    ///</param>
    ///<returns>
    ///  公钥；如果证书不具有 DSA 公钥，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="certificate" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  Windows 将报告错误。
    ///  有关更多信息，请参见 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</exception>
    {class} function GetDSAPublicKey(certificate: DDN.System.DNX509Certificate2): DDN.mscorlib.DNDSA;
    ///<summary>
    ///  从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  获取 <see cref="T:System.Security.Cryptography.DSA" />
    ///  私钥。
    ///</summary>
    ///  <param name="certificate">
    ///  证书。
    ///</param>
    ///<returns>
    ///  私钥，或如果证书不具有 DSA 私钥，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="certificate" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetDSAPrivateKey(certificate: DDN.System.DNX509Certificate2): DDN.mscorlib.DNDSA;
    {class} function CopyWithPrivateKey(certificate: DDN.System.DNX509Certificate2; privateKey: DDN.mscorlib.DNDSA): DDN.System.DNX509Certificate2;

  end;

  ///<summary>
  ///  提供用于对 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
  ///  的公钥和私钥的 <see cref="T:System.Security.Cryptography.DSA" />
  ///  实现进行检索的扩展方法。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.DSACertificateExtensions')]
  DNDSACertificateExtensions = interface(DDN.mscorlib.DNObject)
  ['{E201F334-F39B-3E64-AC38-F088990231E1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDSACertificateExtensions = class(TDNGenericImport<DNDSACertificateExtensionsClass, DNDSACertificateExtensions>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNECDsaCertificateExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{62D92075-F518-5865-9DF5-B4EFE3C41B45}']
  { static methods } 

    ///<summary>
    ///  从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  证书获取 <see cref="T:System.Security.Cryptography.ECDsa" />
    ///  私钥。
    ///</summary>
    ///  <param name="certificate">
    ///  证书。
    ///</param>
    ///<returns>
    ///  私钥，或如果证书不具有 ECDsa 私钥，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="certificate" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetECDsaPrivateKey(certificate: DDN.System.DNX509Certificate2): DNECDsa;
    {class} function CopyWithPrivateKey(certificate: DDN.System.DNX509Certificate2; privateKey: DNECDsa): DDN.System.DNX509Certificate2;
    ///<summary>
    ///  从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  证书获取 <see cref="T:System.Security.Cryptography.ECDsa" />
    ///  公钥。
    ///</summary>
    ///  <param name="certificate">
    ///  证书。
    ///</param>
    ///<returns>
    ///  公钥，或如果证书不具有 ECDsa 公钥，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="certificate" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  该句柄无效。
    ///</exception>
    {class} function GetECDsaPublicKey(certificate: DDN.System.DNX509Certificate2): DNECDsa;

  end;

  ///<summary>
  ///  提供用于对 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
  ///  证书的公钥和私钥的 <see cref="T:System.Security.Cryptography.ECDsa" />
  ///  实现进行检索的扩展方法。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions')]
  DNECDsaCertificateExtensions = interface(DDN.mscorlib.DNObject)
  ['{25620048-FE22-3108-9DC6-A6756291A037}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNECDsaCertificateExtensions = class(TDNGenericImport<DNECDsaCertificateExtensionsClass, DNECDsaCertificateExtensions>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNRSACertificateExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A3328EB8-BF63-5658-8792-5E8CDF66F9E5}']
  { static methods } 

    {class} function CopyWithPrivateKey(certificate: DDN.System.DNX509Certificate2; privateKey: DDN.mscorlib.DNRSA): DDN.System.DNX509Certificate2;
    ///<summary>
    ///  从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  获取 <see cref="T:System.Security.Cryptography.RSA" />
    ///  公钥。
    ///</summary>
    ///  <param name="certificate">
    ///  证书。
    ///</param>
    ///<returns>
    ///  公钥；如果证书不具有 RSA 公钥，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="certificate" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  Windows 将报告错误。
    ///  有关更多信息，请参见 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</exception>
    {class} function GetRSAPublicKey(certificate: DDN.System.DNX509Certificate2): DDN.mscorlib.DNRSA;
    ///<summary>
    ///  从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  获取 <see cref="T:System.Security.Cryptography.RSA" />
    ///  私钥。
    ///</summary>
    ///  <param name="certificate">
    ///  证书。
    ///</param>
    ///<returns>
    ///  如果证书不具有 RSA 私钥，则为该私钥或 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="certificate" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetRSAPrivateKey(certificate: DDN.System.DNX509Certificate2): DDN.mscorlib.DNRSA;

  end;

  ///<summary>
  ///  提供用于对 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
  ///  的公钥和私钥的 <see cref="T:System.Security.Cryptography.RSA" />
  ///  实现进行检索的扩展方法。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.RSACertificateExtensions')]
  DNRSACertificateExtensions = interface(DDN.mscorlib.DNObject)
  ['{5214D10D-04E7-3685-B40A-8ED8C645213F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRSACertificateExtensions = class(TDNGenericImport<DNRSACertificateExtensionsClass, DNRSACertificateExtensions>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNSubjectAlternativeNameBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{711F18AC-7E82-5D35-80EF-D2411807C577}']
  { constructors } 

    {class} function init: DNSubjectAlternativeNameBuilder;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder')]
  DNSubjectAlternativeNameBuilder = interface(DDN.mscorlib.DNObject)
  ['{2751367F-B20B-3CD0-AEFC-636C928D1DC9}']
  { methods } 

    procedure AddEmailAddress(emailAddress: string);
    procedure AddDnsName(dnsName: string);
    procedure AddUri(uri: DDN.System.DNUri);
    procedure AddIpAddress(ipAddress: DDN.System.DNIPAddress);
    procedure AddUserPrincipalName(upn: string);
    function Build(critical: Boolean): DDN.System.DNX509Extension;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSubjectAlternativeNameBuilder = class(TDNGenericImport<DNSubjectAlternativeNameBuilderClass, DNSubjectAlternativeNameBuilder>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNTimestampInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CEA97551-CB5A-59DF-93CA-B5CBE6564192}']
  end;

  ///<summary>
  ///  提供有关已应用于验证码签名清单的时间戳的详细信息。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.TimestampInformation')]
  DNTimestampInformation = interface(DDN.mscorlib.DNObject)
  ['{7204D74E-DDA3-35CA-A5CD-A3D14EECFAB0}']
  { getters & setters } 

    function get_HashAlgorithm: string;
    function get_HResult: Int32;
    function get_IsValid: Boolean;
    function get_SignatureChain: DDN.System.DNX509Chain;
    function get_SigningCertificate: DDN.System.DNX509Certificate2;
    function get_Timestamp: DDN.mscorlib.DNDateTime;
    function get_VerificationResult: DNSignatureVerificationResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取用于计算时间戳签名的哈希算法。
    ///</summary>
    ///<returns>
    ///  用于计算时间戳签名哈希算法。
    ///</returns>
    property HashAlgorithm: string read get_HashAlgorithm;
    ///<summary>
    ///  获取引起验证签名的 HRESULT 值。
    ///</summary>
    ///<returns>
    ///  HRESULT 值而得出验证签名。
    ///</returns>
    property HResult: Int32 read get_HResult;
    ///<summary>
    ///  获取一个值，该值指示是否有效的签名的时间戳。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果时间戳有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsValid: Boolean read get_IsValid;
    ///<summary>
    ///  获取用于验证签名的时间戳的证书链。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" />
    ///  对象，表示证书链。
    ///</returns>
    property SignatureChain: DDN.System.DNX509Chain read get_SignatureChain;
    ///<summary>
    ///  获取证书签名的时间戳。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  表示证书的对象。
    ///</returns>
    property SigningCertificate: DDN.System.DNX509Certificate2 read get_SigningCertificate;
    ///<summary>
    ///  获取应用于签名的时间戳。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.DateTime" />
    ///  对象，表示的时间戳。
    ///</returns>
    property Timestamp: DDN.mscorlib.DNDateTime read get_Timestamp;
    ///<summary>
    ///  获取时间戳签名进行验证的结果。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.SignatureVerificationResult" />
    ///  值之一。
    ///</returns>
    property VerificationResult: DNSignatureVerificationResult read get_VerificationResult;
  end;

  TDNTimestampInformation = class(TDNGenericImport<DNTimestampInformationClass, DNTimestampInformation>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509SignatureGeneratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{06F9FE82-5D7F-5151-99A1-CCD54ADB420E}']
  { static methods } 

    {class} function CreateForECDsa(key: DNECDsa): DNX509SignatureGenerator;
    {class} function CreateForRSA(key: DDN.mscorlib.DNRSA; signaturePadding: DDN.mscorlib.DNRSASignaturePadding): DNX509SignatureGenerator;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509SignatureGenerator')]
  DNX509SignatureGenerator = interface(DDN.mscorlib.DNObject)
  ['{34EB2F68-483D-353A-8C40-FC51D8679264}']
  { getters & setters } 

    function get_PublicKey: DDN.System.DNPublicKey;

  { methods } 

    function GetSignatureAlgorithmIdentifier(hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>;
    function SignData(data: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PublicKey: DDN.System.DNPublicKey read get_PublicKey;
  end;

  TDNX509SignatureGenerator = class(TDNGenericImport<DNX509SignatureGeneratorClass, DNX509SignatureGenerator>) end;

  //-------------namespace: System.Threading----------------
  DNReaderWriterLockSlimClass = interface(DNObjectClass)
  ['{FB903A20-4A81-576A-B03F-F7F488BD4321}']
  { constructors } 

    ///<summary>
    ///  使用默认属性值初始化 <see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNReaderWriterLockSlim; overload;
    ///<summary>
    ///  在指定锁定递归策略的情况下初始化 <see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="recursionPolicy">
    ///  枚举值之一，用于指定锁定递归策略。
    ///</param>
    {class} function init(recursionPolicy: DNLockRecursionPolicy): DNReaderWriterLockSlim; overload;

  end;

  ///<summary>
  ///  表示用于管理资源访问的锁定状态，可实现多线程读取或进行独占式写入访问。
  ///</summary>
  [DNTypeName('System.Threading.ReaderWriterLockSlim')]
  DNReaderWriterLockSlim = interface(DDN.mscorlib.DNIDisposable)
  ['{9303E068-8DEA-3576-84AD-64120761B60F}']
  { getters & setters } 

    function get_IsReadLockHeld: Boolean;
    function get_IsUpgradeableReadLockHeld: Boolean;
    function get_IsWriteLockHeld: Boolean;
    function get_RecursionPolicy: DNLockRecursionPolicy;
    function get_CurrentReadCount: Int32;
    function get_RecursiveReadCount: Int32;
    function get_RecursiveUpgradeCount: Int32;
    function get_RecursiveWriteCount: Int32;
    function get_WaitingReadCount: Int32;
    function get_WaitingUpgradeCount: Int32;
    function get_WaitingWriteCount: Int32;

  { methods } 

    ///<summary>
    ///  尝试进入读取模式锁定状态。
    ///</summary>
    ///<exception cref="T:System.Threading.LockRecursionException">
    ///  当前线程持有读取锁时将无法获取写入锁。
    ///  - 或 -
    ///<see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
    ///  属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />
    ///  ，并且当前线程在已持有读取锁时已尝试获取读取锁。
    ///  - 或 -
    ///<see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
    ///  属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />
    ///  ，并且当前线程在已持有写入锁时已尝试获取读取锁。
    ///  - 或 -
    ///  递归数将超出该计数器的容量。
    ///  此限值很大，因此应用程序永远不会遇到此异常。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  对象已释放。
    ///</exception>
    procedure EnterReadLock;
    ///<summary>
    ///  尝试进入读取模式锁定状态，可以选择超时时间。
    ///</summary>
    ///  <param name="timeout">
    ///  等待的间隔；或为 -1 毫秒，表示无限期等待。
    ///</param>
    ///<returns>
    ///  如果调用线程已进入读取模式，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Threading.LockRecursionException"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
    ///  属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />
    ///  和当前线程已进入该锁。
    ///  - 或 -
    ///  递归数将超出该计数器的容量。
    ///  限制为应用程序应永远不会遇到它太大。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值 <paramref name="timeout" />
    ///  为负，但不等于-1 毫秒，这是唯一允许的值为负。
    ///  - 或 -
    ///  值 <paramref name="timeout" />
    ///  大于 <see cref="F:System.Int32.MaxValue" />
    ///  毫秒为单位。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  对象已释放。
    ///</exception>
    function TryEnterReadLock(timeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    ///<summary>
    ///  尝试进入读取模式锁定状态，可以选择整数超时时间。
    ///</summary>
    ///  <param name="millisecondsTimeout">
    ///  等待的毫秒数，或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />
    ///  )，表示无限期等待。
    ///</param>
    ///<returns>
    ///  如果调用线程已进入读取模式，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Threading.LockRecursionException"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
    ///  属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />
    ///  和当前线程已进入该锁。
    ///  - 或 -
    ///  递归数将超出该计数器的容量。
    ///  限制为应用程序应永远不会遇到它太大。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值 <paramref name="millisecondsTimeout" />
    ///  为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" />
    ///  (-1)，这是唯一允许的值为负。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  对象已释放。
    ///</exception>
    function TryEnterReadLock(millisecondsTimeout: Int32): Boolean; overload;
    ///<summary>
    ///  尝试进入写入模式锁定状态。
    ///</summary>
    ///<exception cref="T:System.Threading.LockRecursionException"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
    ///  属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />
    ///  并且当前线程已在任何模式下进入了该锁。
    ///  - 或 -
    ///  当前线程已进入读取的模式，因此尝试进入写入模式锁定将有死锁的可能性。
    ///  - 或 -
    ///  递归数将超出该计数器的容量。
    ///  限制为应用程序应永远不会遇到它太大。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  对象已被释放。
    ///</exception>
    procedure EnterWriteLock;
    ///<summary>
    ///  尝试进入写入模式锁定状态，可以选择超时时间。
    ///</summary>
    ///  <param name="timeout">
    ///  等待的间隔；或为 -1 毫秒，表示无限期等待。
    ///</param>
    ///<returns>
    ///  如果调用线程已进入写入模式，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Threading.LockRecursionException"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
    ///  属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />
    ///  和当前线程已进入该锁。
    ///  - 或 -
    ///  当前线程的锁最初进入读取模式，并因此尝试进入写入模式会创建导致死锁的可能性。
    ///  - 或 -
    ///  递归数将超出该计数器的容量。
    ///  限制为应用程序应永远不会遇到它太大。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值 <paramref name="timeout" />
    ///  为负，但不等于-1 毫秒，这是唯一允许的值为负。
    ///  - 或 -
    ///  值 <paramref name="timeout" />
    ///  大于 <see cref="F:System.Int32.MaxValue" />
    ///  毫秒为单位。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  对象已释放。
    ///</exception>
    function TryEnterWriteLock(timeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    ///<summary>
    ///  尝试进入写入模式锁定状态，可以选择超时时间。
    ///</summary>
    ///  <param name="millisecondsTimeout">
    ///  等待的毫秒数，或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />
    ///  )，表示无限期等待。
    ///</param>
    ///<returns>
    ///  如果调用线程已进入写入模式，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Threading.LockRecursionException"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
    ///  属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />
    ///  和当前线程已进入该锁。
    ///  - 或 -
    ///  当前线程的锁最初进入读取模式，并因此尝试进入写入模式会创建导致死锁的可能性。
    ///  - 或 -
    ///  递归数将超出该计数器的容量。
    ///  限制为应用程序应永远不会遇到它太大。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值 <paramref name="millisecondsTimeout" />
    ///  为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" />
    ///  (-1)，这是唯一允许的值为负。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  对象已释放。
    ///</exception>
    function TryEnterWriteLock(millisecondsTimeout: Int32): Boolean; overload;
    ///<summary>
    ///  尝试进入可升级模式锁定状态。
    ///</summary>
    ///<exception cref="T:System.Threading.LockRecursionException"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
    ///  属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />
    ///  并且当前线程已在任何模式下进入了该锁。
    ///  - 或 -
    ///  当前线程已进入读取的模式，因此尝试进入可升级模式将有死锁的可能性。
    ///  - 或 -
    ///  递归数将超出该计数器的容量。
    ///  限制为应用程序应永远不会遇到它太大。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  对象已被释放。
    ///</exception>
    procedure EnterUpgradeableReadLock;
    ///<summary>
    ///  尝试进入可升级模式锁定状态，可以选择超时时间。
    ///</summary>
    ///  <param name="timeout">
    ///  等待的间隔；或为 -1 毫秒，表示无限期等待。
    ///</param>
    ///<returns>
    ///  如果调用线程已进入可升级模式，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Threading.LockRecursionException"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
    ///  属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />
    ///  和当前线程已进入该锁。
    ///  - 或 -
    ///  当前线程的锁最初进入读取模式，并因此尝试进入可升级模式会创建导致死锁的可能性。
    ///  - 或 -
    ///  递归数将超出该计数器的容量。
    ///  限制为应用程序应永远不会遇到它太大。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值 <paramref name="timeout" />
    ///  为负，但不等于-1 毫秒，这是唯一允许的值为负。
    ///  - 或 -
    ///  值 <paramref name="timeout" />
    ///  大于 <see cref="F:System.Int32.MaxValue" />
    ///  毫秒为单位。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  对象已释放。
    ///</exception>
    function TryEnterUpgradeableReadLock(timeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    ///<summary>
    ///  尝试进入可升级模式锁定状态，可以选择超时时间。
    ///</summary>
    ///  <param name="millisecondsTimeout">
    ///  等待的毫秒数，或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />
    ///  )，表示无限期等待。
    ///</param>
    ///<returns>
    ///  如果调用线程已进入可升级模式，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Threading.LockRecursionException"><see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
    ///  属性是 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />
    ///  和当前线程已进入该锁。
    ///  - 或 -
    ///  当前线程的锁最初进入读取模式，并因此尝试进入可升级模式会创建导致死锁的可能性。
    ///  - 或 -
    ///  递归数将超出该计数器的容量。
    ///  限制为应用程序应永远不会遇到它太大。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值 <paramref name="millisecondsTimeout" />
    ///  为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" />
    ///  (-1)，这是唯一允许的值为负。
    ///</exception><exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  对象已释放。
    ///</exception>
    function TryEnterUpgradeableReadLock(millisecondsTimeout: Int32): Boolean; overload;
    ///<summary>
    ///  减少读取模式的递归计数，并在生成的计数为 0（零）时退出读取模式。
    ///</summary>
    ///<exception cref="T:System.Threading.SynchronizationLockException">
    ///  当前线程没有已进入读取模式的锁定。
    ///</exception>
    procedure ExitReadLock;
    ///<summary>
    ///  减少写入模式的递归计数，并在生成的计数为 0（零）时退出写入模式。
    ///</summary>
    ///<exception cref="T:System.Threading.SynchronizationLockException">
    ///  当前线程没有已进入写入模式的锁定。
    ///</exception>
    procedure ExitWriteLock;
    ///<summary>
    ///  减少可升级模式的递归计数，并在生成的计数为 0（零）时退出可升级模式。
    ///</summary>
    ///<exception cref="T:System.Threading.SynchronizationLockException">
    ///  当前线程没有已进入可升级模式的锁定。
    ///</exception>
    procedure ExitUpgradeableReadLock;
    ///<summary>
    ///  释放 <see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    ///<exception cref="T:System.Threading.SynchronizationLockException"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
    ///  大于零。
    ///  - 或 -
    ///<see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
    ///  大于零。
    ///  - 或 -
    ///<see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
    ///  大于零。
    ///</exception>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前线程是否已进入读取模式的锁定状态。
    ///</summary>
    ///<returns>
    ///  如果当前线程已进入读取模式，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadLockHeld: Boolean read get_IsReadLockHeld;
    ///<summary>
    ///  获取一个值，该值指示当前线程是否已进入可升级模式的锁定状态。
    ///</summary>
    ///<returns>
    ///  如果当前线程已进入可升级模式，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsUpgradeableReadLockHeld: Boolean read get_IsUpgradeableReadLockHeld;
    ///<summary>
    ///  获取一个值，该值指示当前线程是否已进入写入模式的锁定状态。
    ///</summary>
    ///<returns>
    ///  如果当前线程已进入写入模式，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsWriteLockHeld: Boolean read get_IsWriteLockHeld;
    ///<summary>
    ///  获取一个值，该值指示当前 <see cref="T:System.Threading.ReaderWriterLockSlim" />
    ///  对象的递归策略。
    ///</summary>
    ///<returns>
    ///  枚举值之一，用于指定锁定递归策略。
    ///</returns>
    property RecursionPolicy: DNLockRecursionPolicy read get_RecursionPolicy;
    ///<summary>
    ///  获取已进入读取模式锁定状态的独有线程的总数。
    ///</summary>
    ///<returns>
    ///  已进入读取模式锁定状态的独有线程的数量。
    ///</returns>
    property CurrentReadCount: Int32 read get_CurrentReadCount;
    ///<summary>
    ///  获取当前线程进入读取模式锁定状态的次数，用于指示递归。
    ///</summary>
    ///<returns>
    ///  如果当前线程未进入读取模式，则为 0（零）；如果线程已进入读取模式但却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入锁定模式 n - 1 次，则为 n。
    ///</returns>
    property RecursiveReadCount: Int32 read get_RecursiveReadCount;
    ///<summary>
    ///  获取当前线程进入可升级模式锁定状态的次数，用于指示递归。
    ///</summary>
    ///<returns>
    ///  如果当前线程没有进入可升级模式，则为 0；如果线程已进入可升级模式却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入可升级模式 n - 1 次，则为 n。
    ///</returns>
    property RecursiveUpgradeCount: Int32 read get_RecursiveUpgradeCount;
    ///<summary>
    ///  获取当前线程进入写入模式锁定状态的次数，用于指示递归。
    ///</summary>
    ///<returns>
    ///  如果当前线程没有进入写入模式，则为 0；如果线程已进入写入模式却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入写入模式 n - 1 次，则为 n。
    ///</returns>
    property RecursiveWriteCount: Int32 read get_RecursiveWriteCount;
    ///<summary>
    ///  获取等待进入读取模式锁定状态的线程总数。
    ///</summary>
    ///<returns>
    ///  等待进入读取模式的线程总数。
    ///</returns>
    property WaitingReadCount: Int32 read get_WaitingReadCount;
    ///<summary>
    ///  获取等待进入可升级模式锁定状态的线程总数。
    ///</summary>
    ///<returns>
    ///  等待进入可升级模式的线程总数。
    ///</returns>
    property WaitingUpgradeCount: Int32 read get_WaitingUpgradeCount;
    ///<summary>
    ///  获取等待进入写入模式锁定状态的线程总数。
    ///</summary>
    ///<returns>
    ///  等待进入写入模式的线程总数。
    ///</returns>
    property WaitingWriteCount: Int32 read get_WaitingWriteCount;
  end;

  TDNReaderWriterLockSlim = class(TDNGenericImport<DNReaderWriterLockSlimClass, DNReaderWriterLockSlim>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D4619DFC-B19C-5AAF-BE91-01BF3393D6CD}']
  { static methods } 

    {class} function Unwrap(task: DDN.mscorlib.DNTask<DDN.mscorlib.DNTask>): DDN.mscorlib.DNTask; overload;

  end;

  ///<summary>
  ///  提供了一套用于处理特定类型的静态 (在 Visual Basic 中的为 Shared) 方法的 <see cref="T:System.Threading.Tasks.Task" />
  ///  实例。
  ///</summary>
  [DNTypeName('System.Threading.Tasks.TaskExtensions')]
  DNTaskExtensions = interface(DDN.mscorlib.DNObject)
  ['{2BDA3557-5B63-39A0-B915-DEF4BA0E01DF}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTaskExtensions = class(TDNGenericImport<DNTaskExtensionsClass, DNTaskExtensions>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNHashSet_EnumeratorClass<T> = interface(DDN.mscorlib.DNValueTypeClass)
  ['{81608DA9-6A0D-5C2E-A4F5-F07B517CB3D0}']
  end;

  ///<summary>
  ///  枚举 <see cref="T:System.Collections.Generic.HashSet`1" />
  ///  对象的元素。
  ///</summary>
  [DNTypeName('System.Collections.Generic.HashSet`1+Enumerator')]
  DNHashSet_Enumerator<T> = interface(DDN.mscorlib.DNValueType)
  ['{384D3DA4-C78A-3C48-AAC0-F7FE6B14A095}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    ///<summary>
    ///  释放使用的所有资源 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" />
    ///  对象。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将枚举数推进到下一个元素 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />
    ///  ；如果枚举数传递到集合的末尾，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  创建枚举器后，已修改该集合。
    ///</exception>
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取枚举数当前位置的元素。
    ///</summary>
    ///<returns>
    ///  中的元素 <see cref="T:System.Collections.Generic.HashSet`1" />
    ///  位于该枚举数当前位置的集合。
    ///</returns>
    property Current: T read get_Current;
  end;

  TDNHashSet_Enumerator<T> = class(TDNGenericImport<DNHashSet_EnumeratorClass<T>, DNHashSet_Enumerator<T>>) end;

  //-------------namespace: System.Diagnostics.Eventing----------------
  DNEventDescriptorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{059ED608-E84E-526C-803F-6BE8FE9AEDDF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="id">
    ///  事件标识符。
    ///</param>
    ///  <param name="version">
    ///  事件的版本。
    ///  版本指示对事件定义的修订。
    ///  可以使用此成员和 ID 成员来标识唯一事件。
    ///</param>
    ///  <param name="channel">
    ///  定义事件的潜在目标。
    ///</param>
    ///  <param name="level">
    ///  指定事件中包括的详细信息级别。
    ///</param>
    ///  <param name="opcode">
    ///  写入事件时正在执行的操作。
    ///</param>
    ///  <param name="task">
    ///  标识正在写入事件的应用程序的逻辑组件。
    ///</param>
    ///  <param name="keywords">
    ///  指定事件类别的位掩码。
    ///  关键字可以包含一个或多个提供程序定义的关键字和/或标准关键字。
    ///</param>
    {class} function init(id: Int32; version: Byte; channel: Byte; level: Byte; opcode: Byte; task: Int32; keywords: Int64): DNEventDescriptor;

  end;

  ///<summary>
  ///  包含定义事件的元数据。
  ///</summary>
  [DNTypeName('System.Diagnostics.Eventing.EventDescriptor')]
  DNEventDescriptor = interface(DDN.mscorlib.DNValueType)
  ['{0A52E9D6-97AD-3E1D-9CF4-91AA9453A4BE}']
  { getters & setters } 

    function get_EventId: Int32;
    function get_Version: Byte;
    function get_Channel: Byte;
    function get_Level: Byte;
    function get_Opcode: Byte;
    function get_Task: Int32;
    function get_Keywords: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  从事件描述符检索事件标识符值。
    ///</summary>
    ///<returns>
    ///  事件标识符。
    ///</returns>
    property EventId: Int32 read get_EventId;
    ///<summary>
    ///  从事件描述符检索版本值。
    ///</summary>
    ///<returns>
    ///  事件的版本。
    ///</returns>
    property Version: Byte read get_Version;
    ///<summary>
    ///  从事件描述符检索通道值。
    ///</summary>
    ///<returns>
    ///  定义事件的潜在目标通道。
    ///</returns>
    property Channel: Byte read get_Channel;
    ///<summary>
    ///  从事件描述符检索级别的值。
    ///</summary>
    ///<returns>
    ///  在事件中包括的详细程度。
    ///</returns>
    property Level: Byte read get_Level;
    ///<summary>
    ///  从事件描述符检索操作代码值。
    ///</summary>
    ///<returns>
    ///  在事件被写入时正在执行的操作。
    ///</returns>
    property Opcode: Byte read get_Opcode;
    ///<summary>
    ///  从事件描述符检索任务值。
    ///</summary>
    ///<returns>
    ///  标识正在写入事件的应用程序的逻辑组件的任务。
    ///</returns>
    property Task: Int32 read get_Task;
    ///<summary>
    ///  从事件描述符检索关键字值。
    ///</summary>
    ///<returns>
    ///  关键字，这是一个位掩码，它指定事件类别。
    ///</returns>
    property Keywords: Int64 read get_Keywords;
  end;

  TDNEventDescriptor = class(TDNGenericImport<DNEventDescriptorClass, DNEventDescriptor>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngPropertyClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B48A998F-CE4B-5100-AC7D-50CDF2DD8E15}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  要初始化的属性名称。
    ///</param>
    ///  <param name="value">
    ///  要初始化的属性值。
    ///</param>
    ///  <param name="options">
    ///  指定如何存储该属性的枚举值的按位组合。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(name: string; value: TArray<Byte>; options: DNCngPropertyOptions): DNCngProperty;

  end;

  ///<summary>
  ///  封装下一代加密技术 (CNG) 密钥或提供程序的属性。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.CngProperty')]
  DNCngProperty = interface(DDN.mscorlib.DNValueType)
  ['{88674A81-0057-33D9-93D2-DCDCEDFF8D9D}']
  { getters & setters } 

    function get_Name: string;
    function get_Options: DNCngPropertyOptions;

  { methods } 

    ///<summary>
    ///  将指定的对象与当前的 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象进行比较。
    ///</summary>
    ///  <param name="obj">
    ///  要与当前的 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  参数是 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象，它指定相同的属性与当前对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象与当前的 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象进行比较。
    ///</summary>
    ///  <param name="other">
    ///  要与当前的 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="other" />
    ///  参数表示相同的属性与当前对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNCngProperty): Boolean; overload;
    ///<summary>
    ///  生成当前哈希值 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  当前的哈希值 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取属性值当前 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象指定。
    ///</summary>
    ///<returns>
    ///  一个数组，表示存储在属性中的值。
    ///</returns>
    function GetValue: TArray<Byte>;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取的属性名称当前 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象指定。
    ///</summary>
    ///<returns>
    ///  在当前设置的属性名称 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取属性选项当前 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象指定。
    ///</summary>
    ///<returns>
    ///  一个对象，指定在当前设置的选项 <see cref="T:System.Security.Cryptography.CngProperty" />
    ///  对象。
    ///</returns>
    property Options: DNCngPropertyOptions read get_Options;
  end;

  TDNCngProperty = class(TDNGenericImport<DNCngPropertyClass, DNCngProperty>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECCurveClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{10C66F62-8FB6-5866-A536-930689F446A0}']
  { static methods } 

    ///<summary>
    ///  使用指定的 <see cref="T:System.Security.Cryptography.Oid" />
    ///  对象创建已命名曲线。
    ///</summary>
    ///  <param name="curveOid">
    ///  要使用的对象标识符。
    ///</param>
    ///<returns>
    ///  表示已命名曲线的对象。
    ///</returns>
    {class} function CreateFromOid(curveOid: DDN.System.DNOid): DNECCurve;
    ///<summary>
    ///  使用标识符的指定友好名称创建命名的曲线。
    ///</summary>
    ///  <param name="oidFriendlyName">
    ///  标识符的友好名称。
    ///</param>
    ///<returns>
    ///  表示已命名曲线的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="oidFriendlyName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function CreateFromFriendlyName(oidFriendlyName: string): DNECCurve;
    ///<summary>
    ///  使用指定的标识符点分十进制表示形式创建已命名曲线。
    ///</summary>
    ///  <param name="oidValue">
    ///  标识符的点分数字。
    ///</param>
    ///<returns>
    ///  表示已命名曲线的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="oidValue" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function CreateFromValue(oidValue: string): DNECCurve;

  end;

  ///<summary>
  ///  表示椭圆曲线。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECCurve')]
  DNECCurve = interface(DDN.mscorlib.DNValueType)
  ['{3A216B9F-83C5-3DFB-A4ED-2795FD69F7B8}']
  { getters & setters } 

    function get_Oid: DDN.System.DNOid;
    function get_IsPrime: Boolean;
    function get_IsCharacteristic2: Boolean;
    function get_IsExplicit: Boolean;
    function get_IsNamed: Boolean;

  { fields getter & setter } 

   function __fakeFieldGet_A: TArray<Byte>;
   procedure __fakeFieldSet_A(value: TArray<Byte>);
   function __fakeFieldGet_B: TArray<Byte>;
   procedure __fakeFieldSet_B(value: TArray<Byte>);
   function __fakeFieldGet_G: DNECPoint;
   procedure __fakeFieldSet_G(value: DNECPoint);
   function __fakeFieldGet_Order: TArray<Byte>;
   procedure __fakeFieldSet_Order(value: TArray<Byte>);
   function __fakeFieldGet_Cofactor: TArray<Byte>;
   procedure __fakeFieldSet_Cofactor(value: TArray<Byte>);
   function __fakeFieldGet_Seed: TArray<Byte>;
   procedure __fakeFieldSet_Seed(value: TArray<Byte>);
   function __fakeFieldGet_CurveType: DNECCurve_ECCurveType;
   procedure __fakeFieldSet_CurveType(value: DNECCurve_ECCurveType);
   function __fakeFieldGet_Hash: DDN.mscorlib.DNNullable<DDN.mscorlib.DNHashAlgorithmName>;
   procedure __fakeFieldSet_Hash(value: DDN.mscorlib.DNNullable<DDN.mscorlib.DNHashAlgorithmName>);
   function __fakeFieldGet_Polynomial: TArray<Byte>;
   procedure __fakeFieldSet_Polynomial(value: TArray<Byte>);
   function __fakeFieldGet_Prime: TArray<Byte>;
   procedure __fakeFieldSet_Prime(value: TArray<Byte>);

  { fields } 

    ///<summary>
    ///  显式曲线的第 1 个系数。
    ///  Weierstrass、Montgomery 和 Twisted Edwards 短曲线的 A。
    ///</summary>
    ///<returns>
    ///  系数 A。
    ///</returns>
   property A: TArray<Byte> read __fakeFieldGet_A write __fakeFieldSet_A;
    ///<summary>
    ///  显式曲线的第 2 个系数。
    ///  对于 short Weierstrass 曲线，为 B；对于 Twisted Edwards 曲线，为 d。
    ///</summary>
    ///<returns>
    ///  系数 B。
    ///</returns>
   property B: TArray<Byte> read __fakeFieldGet_B write __fakeFieldSet_B;
    ///<summary>
    ///  曲线上操作的生成器或基点。
    ///</summary>
    ///<returns>
    ///  基点。
    ///</returns>
   property G: DNECPoint read __fakeFieldGet_G write __fakeFieldSet_G;
    ///<summary>
    ///  曲线的顺序。
    ///  仅适用于显式曲线。
    ///</summary>
    ///<returns>
    ///  曲线的顺序。
    ///</returns>
   property Order: TArray<Byte> read __fakeFieldGet_Order write __fakeFieldSet_Order;
    ///<summary>
    ///  曲线的余因子。
    ///</summary>
    ///<returns>
    ///  曲线的余因子。
    ///</returns>
   property Cofactor: TArray<Byte> read __fakeFieldGet_Cofactor write __fakeFieldSet_Cofactor;
    ///<summary>
    ///  ANSI X9.62 生成算法下系数生成的种子值。
    ///  仅适用于显式曲线。
    ///</summary>
    ///<returns>
    ///  种子值。
    ///</returns>
   property Seed: TArray<Byte> read __fakeFieldGet_Seed write __fakeFieldSet_Seed;
    ///<summary>
    ///  确定 <see cref="T:System.Security.Cryptography.ECCurve" />
    ///  对象的组成。
    ///</summary>
    ///<returns>
    ///  曲线类型。
    ///</returns>
   property CurveType: DNECCurve_ECCurveType read __fakeFieldGet_CurveType write __fakeFieldSet_CurveType;
    ///<summary>
    ///  哈希算法的名称，此算法用于根据 ANSI X9.62 生成算法从 <see cref="F:System.Security.Cryptography.ECCurve.Seed" />
    ///  生成曲线系数（<see cref="F:System.Security.Cryptography.ECCurve.A" />
    ///  和 <see cref="F:System.Security.Cryptography.ECCurve.B" />
    ///  ）。
    ///  仅适用于显式曲线。
    ///</summary>
    ///<returns>
    ///  用于生成曲线系数的哈希算法的名称。
    ///</returns>
   property Hash: DDN.mscorlib.DNNullable<DDN.mscorlib.DNHashAlgorithmName> read __fakeFieldGet_Hash write __fakeFieldSet_Hash;
    ///<summary>
    ///  多项式曲线。
    ///  仅适用于特征 2 曲线。
    ///</summary>
    ///<returns>
    ///  多项式曲线。
    ///</returns>
   property Polynomial: TArray<Byte> read __fakeFieldGet_Polynomial write __fakeFieldSet_Polynomial;
    ///<summary>
    ///  指定基本字段的素数。
    ///  仅适用于素数曲线。
    ///</summary>
    ///<returns>
    ///  素数 p。
    ///</returns>
   property Prime: TArray<Byte> read __fakeFieldGet_Prime write __fakeFieldSet_Prime;

  { methods } 

    ///<summary>
    ///  验证当前曲线的完整性。
    ///  如果结构无效，将引发 <see cref="T:System.Security.Cryptography.CryptographicException" />
    ///  异常。
    ///</summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  曲线参数对当前曲线类型无效。
    ///</exception>
    procedure Validate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取已命名曲线的标识符。
    ///</summary>
    ///<returns>
    ///  已命名曲线的标识符。
    ///</returns>
    property Oid: DDN.System.DNOid read get_Oid;
    ///<summary>
    ///  获取一个值，该值指示曲线类型是否指示显式素数曲线。
    ///</summary>
    ///<returns>
    ///  如果曲线是显式素数曲线，则为 <see langword="true" />
    ///  ；如果曲线是已命名素数、特征 2 或隐式曲线，则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPrime: Boolean read get_IsPrime;
    ///<summary>
    ///  获取一个值，该值指示曲线类型是否指示显式特征 2 曲线。
    ///</summary>
    ///<returns>
    ///  如果该曲线是显式特征 2 曲线，则为 <see langword="true" />
    ///  ；如果该曲线是已命名特征 2、素数或隐式曲线，则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCharacteristic2: Boolean read get_IsCharacteristic2;
    ///<summary>
    ///  获取一个值，该值指示曲线类型是否指示显式曲线（素数曲线或特征 2 曲线）。
    ///</summary>
    ///<returns>
    ///  如果曲线是显式曲线（素数曲线或特征 2 曲线），则为 <see langword="true" />
    ///  ；如果曲线是已命名或隐式曲线，则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsExplicit: Boolean read get_IsExplicit;
    ///<summary>
    ///  获取一个值，该值指示曲线类型是否指示已命名曲线。
    ///</summary>
    ///<returns>
    ///  如果曲线是已命名曲线，则为 <see langword="true" />
    ///  ，如果曲线是隐式或显式曲线（素数曲线或特征 2 曲线），则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNamed: Boolean read get_IsNamed;
  end;

  TDNECCurve = class(TDNGenericImport<DNECCurveClass, DNECCurve>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECParametersClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{09469302-BA6B-572C-8CC7-7841B116DD65}']
  end;

  ///<summary>
  ///  表示椭圆曲线加密 (ECC) 算法的标准参数。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECParameters')]
  DNECParameters = interface(DDN.mscorlib.DNValueType)
  ['{ADB113F9-AA87-3F23-9E11-BE120F21CDE6}']
  { fields getter & setter } 

   function __fakeFieldGet_Q: DNECPoint;
   procedure __fakeFieldSet_Q(value: DNECPoint);
   function __fakeFieldGet_D: TArray<Byte>;
   procedure __fakeFieldSet_D(value: TArray<Byte>);
   function __fakeFieldGet_Curve: DNECCurve;
   procedure __fakeFieldSet_Curve(value: DNECCurve);

  { fields } 

    ///<summary>
    ///  表示椭圆曲线加密 (ECC) 算法的公钥 <see langword="Q" />
    ///  。
    ///</summary>
    ///<returns>
    ///  椭圆曲线加密 (ECC) 算法的 <see langword="Q" />
    ///  参数。
    ///</returns>
   property Q: DNECPoint read __fakeFieldGet_Q write __fakeFieldSet_Q;
    ///<summary>
    ///  表示椭圆曲线加密 (ECC) 算法的私钥 <see langword="D" />
    ///  （保存为大端格式）。
    ///</summary>
    ///<returns>
    ///  椭圆曲线加密 (ECC) 算法的 <see langword="D" />
    ///  参数。
    ///</returns>
   property D: TArray<Byte> read __fakeFieldGet_D write __fakeFieldSet_D;
    ///<summary>
    ///  表示与公钥 (<see cref="F:System.Security.Cryptography.ECParameters.Q" />
    ///  ) 和可选私钥 (<see cref="F:System.Security.Cryptography.ECParameters.D" />
    ///  ) 相关联的曲线。
    ///</summary>
    ///<returns>
    ///  曲线。
    ///</returns>
   property Curve: DNECCurve read __fakeFieldGet_Curve write __fakeFieldSet_Curve;

  { methods } 

    ///<summary>
    ///  验证当前对象。
    ///</summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  密钥或曲线参数对当前曲线类型无效。
    ///</exception>
    procedure Validate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNECParameters = class(TDNGenericImport<DNECParametersClass, DNECParameters>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{CFB2BEE2-0C34-50EA-B147-CA152AC21D4E}']
  end;

  ///<summary>
  ///  表示椭圆曲线加密 (ECC) 结构的 (X,Y) 坐标对。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.ECPoint')]
  DNECPoint = interface(DDN.mscorlib.DNValueType)
  ['{4492DBA8-1144-3F3E-81E8-C202B7F91305}']
  { fields getter & setter } 

   function __fakeFieldGet_X: TArray<Byte>;
   procedure __fakeFieldSet_X(value: TArray<Byte>);
   function __fakeFieldGet_Y: TArray<Byte>;
   procedure __fakeFieldSet_Y(value: TArray<Byte>);

  { fields } 

    ///<summary>
    ///  表示 X 坐标。
    ///</summary>
    ///<returns>
    ///  x 坐标。
    ///</returns>
   property X: TArray<Byte> read __fakeFieldGet_X write __fakeFieldSet_X;
    ///<summary>
    ///  表示 Y 坐标。
    ///</summary>
    ///<returns>
    ///  Y 坐标。
    ///</returns>
   property Y: TArray<Byte> read __fakeFieldGet_Y write __fakeFieldSet_Y;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNECPoint = class(TDNGenericImport<DNECPointClass, DNECPoint>) end;


implementation


initialization
  LoadAssemblyModule('System.Core.dll', True);

finalization

end.
