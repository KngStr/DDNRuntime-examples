//-----------------------------------------------------------//
//                                                           //
//     DDN.Aspose.Common                            
//     Delphi .NET Import                                    //
//     Author: ying32                                        //
//     .NET Framework: .NET 4.0                              //
//                                                           //
//-----------------------------------------------------------//

unit DDN.Aspose.Common;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib;

type

{ enums }

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  描述与数据源连接的当前状态。
  ///</summary>
  [DNTypeName('System.Data.ConnectionState')]
  DNConnectionState = type Integer;
  DNConnectionStateHelper = record helper for DNConnectionState
  public const
    ///<summary>
    ///  连接已关闭。
    ///</summary>
    Closed = 0;
    ///<summary>
    ///  连接处于打开状态。
    ///</summary>
    Open = 1;
    ///<summary>
    ///  连接对象连接到数据源。
    ///</summary>
    Connecting = 2;
    ///<summary>
    ///  连接对象执行命令。
    ///  （此值保留供该产品的未来版本中）。
    ///</summary>
    Executing = 4;
    ///<summary>
    ///  连接对象正在检索数据。
    ///  （此值保留供该产品的未来版本中）。
    ///</summary>
    Fetching = 8;
    ///<summary>
    ///  与数据源的连接已断开。
    ///  只有在打开连接后，才发生这种。
    ///  处于此状态的连接可能关闭并重新打开。
    ///  （此值保留供该产品的未来版本中）。
    ///</summary>
    Broken = 16;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  获取状态 <see cref="T:System.Data.DataRow" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Data.DataRowState')]
  DNDataRowState = type Integer;
  DNDataRowStateHelper = record helper for DNDataRowState
  public const
    ///<summary>
    ///  行已创建，但不属于任何 <see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  处于此状态，已创建后和之前添加到一个集合，或者如果已从集合中删除它。
    ///</summary>
    Detached = 1;
    ///<summary>
    ///  以来未更改行 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  上一次调用。
    ///</summary>
    Unchanged = 2;
    ///<summary>
    ///  行已添加到 <see cref="T:System.Data.DataRowCollection" />
    ///  , ，和 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  尚未调用。
    ///</summary>
    Added = 4;
    ///<summary>
    ///  使用已删除该行 <see cref="M:System.Data.DataRow.Delete" />
    ///  方法 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    Deleted = 8;
    ///<summary>
    ///  被修改的行和 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  尚未调用。
    ///</summary>
    Modified = 16;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  介绍 <see cref="T:System.Data.DataRow" />
  ///  的版本。
  ///</summary>
  [DNTypeName('System.Data.DataRowVersion')]
  DNDataRowVersion = type Integer;
  DNDataRowVersionHelper = record helper for DNDataRowVersion
  public const
    ///<summary>
    ///  包含其原始值的行。
    ///</summary>
    Original = 256;
    ///<summary>
    ///  包含其当前值的行。
    ///</summary>
    Current = 512;
    ///<summary>
    ///  包含建议值的行。
    ///</summary>
    Proposed = 1024;
    ///<summary><see cref="T:System.Data.DataRowState" />
    ///  的默认版本。
    ///  对于 <see langword="Added" />
    ///  、<see langword="Modified" />
    ///  或 <see langword="Deleted" />
    ///  的 <see langword="DataRowState" />
    ///  值，默认的版本是 <see langword="Current" />
    ///  。
    ///  对于 <see langword="Detached" />
    ///  的 <see cref="T:System.Data.DataRowState" />
    ///  值，版本是 <see langword="Proposed" />
    ///  。
    ///</summary>
    Default_ = 1536;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  描述中的数据的版本 <see cref="T:System.Data.DataRow" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataViewRowState')]
  DNDataViewRowState = type Integer;
  DNDataViewRowStateHelper = record helper for DNDataViewRowState
  public const
    ///<summary>
    ///  无。
    ///</summary>
    None = 0;
    ///<summary>
    ///  未更改的行。
    ///</summary>
    Unchanged = 2;
    ///<summary>
    ///  新行。
    ///</summary>
    Added = 4;
    ///<summary>
    ///  已删除的行。
    ///</summary>
    Deleted = 8;
    ///<summary>
    ///  已修改的原始数据的当前版本 (请参阅 <see langword="ModifiedOriginal" />
    ///  )。
    ///</summary>
    ModifiedCurrent = 16;
    ///<summary>
    ///  当前行包括保持不变，新的、 行和已修改的行。
    ///  默认情况下， <see cref="T:System.Data.DataViewRowState" />
    ///  设置为当前行。
    ///</summary>
    CurrentRows = 22;
    ///<summary>
    ///  已修改数据的原始版本。
    ///  (尽管数据已被修改，则可以用作 <see langword="ModifiedCurrent" />
    ///  )。
    ///</summary>
    ModifiedOriginal = 32;
    ///<summary>
    ///  原始行包括不变，且已删除的行。
    ///</summary>
    OriginalRows = 42;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定连接的事务锁定行为。
  ///</summary>
  [DNTypeName('System.Data.IsolationLevel')]
  DNIsolationLevel = type Integer;
  DNIsolationLevelHelper = record helper for DNIsolationLevel
  public const
    ///<summary>
    ///  无法覆盖从更高隔离级别的事务挂起的更改。
    ///</summary>
    Chaos = 16;
    ///<summary>
    ///  脏读，则意味着发布任何共享的锁，然后利用任何排他锁将生效。
    ///</summary>
    ReadUncommitted = 256;
    ///<summary>
    ///  正在读取数据以避免脏读，但在该事务，从而导致不可重复读取或幻像数据末尾之前可以更改数据时，将保持共享的锁。
    ///</summary>
    ReadCommitted = 4096;
    ///<summary>
    ///  在查询中，阻止其他用户更新的数据使用的所有数据上放置锁。
    ///  防止非可重复读取，但幻像行仍有可能。
    ///</summary>
    RepeatableRead = 65536;
    ///<summary>
    ///  范围锁放置在 <see cref="T:System.Data.DataSet" />
    ///  , ，阻止其他用户更新或将行插入到数据集，直到事务完成。
    ///</summary>
    Serializable = 1048576;
    ///<summary>
    ///  减少阻止通过存储数据的一个应用程序可以读取另一个修改相同的数据的同时版本。
    ///  指示，从一个事务无法查看其他事务中所做的更改即便重新查询。
    ///</summary>
    Snapshot = 16777216;
    ///<summary>
    ///  正在使用比指定不同的隔离级别，但不能确定其级别。
    ///</summary>
    Unspecified = -1;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  控制如何从数据源的值将应用于现有行时使用 <see cref="Overload:System.Data.DataTable.Load" />
  ///  或 <see cref="Overload:System.Data.DataSet.Load" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Data.LoadOption')]
  DNLoadOption = type Integer;
  DNLoadOptionHelper = record helper for DNLoadOption
  public const
    ///<summary>
    ///  此行的传入值将为每个列数据的版本写入到当前值和原始值。
    ///</summary>
    OverwriteChanges = 1;
    ///<summary>
    ///  此行的传入值将写入每一列的原始值版本。
    ///  每个列中的数据的当前版本将不会更改。
    ///  这是默认设置。
    ///</summary>
    PreserveChanges = 2;
    ///<summary>
    ///  此行的传入值将写入每一列的当前版本。
    ///  每个列的数据的原始版本将不会更改。
    ///</summary>
    Upsert = 3;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定的操作时将数据添加到要执行 <see cref="T:System.Data.DataSet" />
  ///  以及所需 <see cref="T:System.Data.DataTable" />
  ///  或 <see cref="T:System.Data.DataColumn" />
  ///  缺少。
  ///</summary>
  [DNTypeName('System.Data.MissingSchemaAction')]
  DNMissingSchemaAction = type Integer;
  DNMissingSchemaActionHelper = record helper for DNMissingSchemaAction
  public const
    ///<summary>
    ///  添加必需的列以完成架构。
    ///</summary>
    Add = 1;
    ///<summary>
    ///  将忽略额外的列。
    ///</summary>
    Ignore = 2;
    ///<summary><see cref="T:System.InvalidOperationException" />
    ///  缺少指定的列映射时生成。
    ///</summary>
    Error = 3;
    ///<summary>
    ///  添加必要的列和主键信息以完成架构。
    ///  有关如何主键信息的详细信息添加到 <see cref="T:System.Data.DataTable" />
    ///  , ，请参阅 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
    ///  。才能正常运行.NET Framework 数据提供程序与用于 OLE DB <see langword="AddWithKey" />
    ///  需要本机 OLE DB 访问接口通过设置 DBPROP_UNIQUEROWS 属性来获取必要的主键信息，然后确定哪些列是通过检查在 IColumnsRowset DBCOLUMN_KEYCOLUMN 主键列。
    ///  作为替代方法，用户可以显式设置每个主键约束 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  这可确保与现有记录匹配的传入记录进行更新，而不是追加。
    ///  当使用 <see langword="AddWithKey" />
    ///  , ，SQL Server.NET Framework 数据提供程序将 FOR BROWSE 子句附加到正在执行的语句。
    ///  用户应注意的潜在负面影响，例如 SET FMTONLY ON 语句使用的干扰。
    ///  有关详细信息，请参阅 SQL Server 联机丛书。
    ///</summary>
    AddWithKey = 4;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  表示类型化的架构的序列化模式 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.SchemaSerializationMode')]
  DNSchemaSerializationMode = type Integer;
  DNSchemaSerializationModeHelper = record helper for DNSchemaSerializationMode
  public const
    ///<summary>
    ///  包括架构对于类型化的序列化 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  默认值。
    ///</summary>
    IncludeSchema = 1;
    ///<summary>
    ///  将跳过架构对于类型化的序列化 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ExcludeSchema = 2;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  确定的序列化格式 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.SerializationFormat')]
  DNSerializationFormat = type Integer;
  DNSerializationFormatHelper = record helper for DNSerializationFormat
  public const
    ///<summary>
    ///  将序列化为 XML 内容。
    ///  默认值。
    ///</summary>
    Xml = 0;
    ///<summary>
    ///  将序列化为二进制内容。
    ///  在仅 ADO.NET 2.0 中可用。
    ///</summary>
    Binary = 1;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定如何读取 XML 数据和关系架构读入 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.XmlReadMode')]
  DNXmlReadMode = type Integer;
  DNXmlReadModeHelper = record helper for DNXmlReadMode
  public const
    ///<summary>
    ///  默认。
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  读取内联架构并加载数据。
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  已经包含架构，新表可能会添加到架构，但是如果中已存在内联架构中的任何表，将引发异常 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ReadSchema = 1;
    ///<summary>
    ///  忽略任何内联架构并将数据读入现有的 <see cref="T:System.Data.DataSet" />
    ///  架构。
    ///  如果任何数据与现有架构不匹配，则会丢弃 (包括来自不同的命名空间为定义的数据 <see cref="T:System.Data.DataSet" />
    ///  )。
    ///  如果数据为 DiffGram， <see langword="IgnoreSchema" />
    ///  具有相同的功能 <see langword="DiffGram" />
    ///  。
    ///</summary>
    IgnoreSchema = 2;
    ///<summary>
    ///  忽略任何内联架构，推断的数据的架构并加载数据。
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  已包含架构，通过添加新表或向现有表添加列来扩展当前架构。
    ///  如果推断的表已经存在，但具有不同的命名空间，则引发异常，或者任何推断的列与现有列发生冲突。
    ///</summary>
    InferSchema = 3;
    ///<summary>
    ///  读取 DiffGram，将更改应用到的 DiffGram 从 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  语义是相同的 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
    ///  操作。
    ///  与 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
    ///  操作， <see cref="P:System.Data.DataRow.RowState" />
    ///  会保留值。
    ///  输入到 <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />
    ///  使用 Diffgram 应仅获取使用从输出 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
    ///  以 diffgram 形式。
    ///</summary>
    DiffGram = 4;
    ///<summary>
    ///  读取 XML 片段，例如那些通过执行针对 SQL Server 实例的 FOR XML 查询生成。
    ///  当 <see cref="T:System.Data.XmlReadMode" />
    ///  设置为 <see langword="Fragment" />
    ///  , ，默认命名空间将读取内联架构。
    ///</summary>
    Fragment = 5;
    ///<summary>
    ///  忽略任何内联架构、 推断强类型化的数据，从架构并加载数据。
    ///  如果从数据，不能推断出类型，它被解释为字符串数据。
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  已经包含一个架构已扩展当前架构，通过添加新表或通过将列添加到现有的表。
    ///  如果推断的表已经存在，但具有不同的命名空间，则引发异常，或者任何推断的列与现有列发生冲突。
    ///</summary>
    InferTypedSchema = 6;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定如何编写 XML 数据和从一个关系架构 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.XmlWriteMode')]
  DNXmlWriteMode = type Integer;
  DNXmlWriteModeHelper = record helper for DNXmlWriteMode
  public const
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataSet" />
    ///  以与关系结构作为内联 XSD 架构的 XML 数据形式。
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  只有架构不包含数据，编写仅内联架构。
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  未没有当前的架构，则不写入任何内容。
    ///</summary>
    WriteSchema = 0;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataSet" />
    ///  作为 XML 数据，而无需 XSD 架构。
    ///  如果没有数据加载到 <see cref="T:System.Data.DataSet" />
    ///  , ，则写入任何内容。
    ///</summary>
    IgnoreSchema = 1;
    ///<summary>
    ///  以 DiffGram 形式编写整个 <see cref="T:System.Data.DataSet" />
    ///  ，包括原始值和当前值。
    ///  若要生成一个 DiffGram，它包含只会更改值，请调用 <see cref="M:System.Data.DataSet.GetChanges" />
    ///  , ，然后调用 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
    ///  对返回 DiffGram 形式 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    DiffGram = 2;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  确定如何与目标颜色，以生成最终颜色的组合中复制像素操作的源颜色。
  ///</summary>
  [DNTypeName('System.Drawing.CopyPixelOperation')]
  DNCopyPixelOperation = type Integer;
  DNCopyPixelOperationHelper = record helper for DNCopyPixelOperation
  public const
    ///<summary>
    ///  通过使用与物理调色板中索引 0 处关联的颜色填充目标区域。
    ///  （此颜色为黑色，默认的物理调色板。
    ///</summary>
    Blackness = 66;
    ///<summary>
    ///  源和目标颜色组合使用布尔 <see langword="OR" />
    ///  然后逆转运算符和生成的颜色。
    ///</summary>
    NotSourceErase = 1114278;
    ///<summary>
    ///  反转的源区域复制到目标。
    ///</summary>
    NotSourceCopy = 3342344;
    ///<summary>
    ///  目标区域的颜色反转结合使用布尔值的源区域的颜色 <see langword="AND" />
    ///  运算符。
    ///</summary>
    SourceErase = 4457256;
    ///<summary>
    ///  目标区域已逆转。
    ///</summary>
    DestinationInvert = 5570569;
    ///<summary>
    ///  与相结合，目标设备上下文中当前选定的画笔的颜色的颜色的目标使用布尔 <see langword="XOR" />
    ///  运算符。
    ///</summary>
    PatInvert = 5898313;
    ///<summary>
    ///  源和目标区域的颜色组合使用布尔 <see langword="XOR" />
    ///  运算符。
    ///</summary>
    SourceInvert = 6684742;
    ///<summary>
    ///  源和目标区域的颜色组合使用布尔 <see langword="AND" />
    ///  运算符。
    ///</summary>
    SourceAnd = 8913094;
    ///<summary>
    ///  与目标区域的颜色合并反转的源区域的颜色，应使用布尔 <see langword="OR" />
    ///  运算符。
    ///</summary>
    MergePaint = 12255782;
    ///<summary>
    ///  源区域的颜色的目标设备上下文中使用布尔所选定画笔颜色与合并 <see langword="AND" />
    ///  运算符。
    ///</summary>
    MergeCopy = 12583114;
    ///<summary>
    ///  源区域是直接复制到目标区域。
    ///</summary>
    SourceCopy = 13369376;
    ///<summary>
    ///  源和目标区域的颜色组合使用布尔 <see langword="OR" />
    ///  运算符。
    ///</summary>
    SourcePaint = 15597702;
    ///<summary>
    ///  目标设备上下文中当前选定的画笔复制到目标位图。
    ///</summary>
    PatCopy = 15728673;
    ///<summary>
    ///  与使用布尔将反转的源区域的颜色相结合，目标设备上下文中当前选定的画笔的颜色 <see langword="OR" />
    ///  运算符。
    ///  此操作的结果结合使用布尔值的目标区域的颜色 <see langword="OR" />
    ///  运算符。
    ///</summary>
    PatPaint = 16452105;
    ///<summary>
    ///  通过使用与物理调色板中的索引 1 相关联的颜色填充目标区域。
    ///  （此颜色为默认的物理调色板的白色。
    ///</summary>
    Whiteness = 16711778;
    ///<summary>
    ///  包括彼此层叠于您的窗口顶部的 windows 在生成的图像。
    ///  默认情况下，映像将包含您的窗口。
    ///  请注意，这通常不能用于打印设备上下文。
    ///</summary>
    CaptureBlt = 1073741824;
    ///<summary>
    ///  未镜像该位图。
    ///</summary>
    NoMirrorBitmap = -2147483648;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定如何不同的剪辑区域可以组合。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.CombineMode')]
  DNCombineMode = type Integer;
  DNCombineModeHelper = record helper for DNCombineMode
  public const
    ///<summary>
    ///  另一种将替换为一个剪辑区域。
    ///</summary>
    Replace = 0;
    ///<summary>
    ///  通过采用它们的交集组合两个剪辑区域。
    ///</summary>
    Intersect = 1;
    ///<summary>
    ///  通过采用这两者的 union 组合两个剪辑区域。
    ///</summary>
    Union = 2;
    ///<summary>
    ///  两个剪辑区域是组合采取相应的区域括起，一项或在其他区域中，但不是能同时。
    ///</summary>
    Xor_ = 3;
    ///<summary>
    ///  指定正在从现有的区域中删除的新区域的结果替换为现有区域。
    ///  换言之，从现有区域中排除的新区域。
    ///</summary>
    Exclude = 4;
    ///<summary>
    ///  指定正在从新的区域中删除现有区域的结果替换为现有区域。
    ///  换言之，从新区域中排除现有的区域。
    ///</summary>
    Complement = 5;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定源颜色与背景色进行组合的方式。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.CompositingMode')]
  DNCompositingMode = type Integer;
  DNCompositingModeHelper = record helper for DNCompositingMode
  public const
    ///<summary>
    ///  指定的一种颜色呈现时，它与混合的背景色。
    ///  Blend 取决于所呈现的颜色的 alpha 分量。
    ///</summary>
    SourceOver = 0;
    ///<summary>
    ///  指定一种颜色呈现时，它将覆盖背景色。
    ///</summary>
    SourceCopy = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定要在复合期间使用的质量级别。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.CompositingQuality')]
  DNCompositingQuality = type Integer;
  DNCompositingQualityHelper = record helper for DNCompositingQuality
  public const
    ///<summary>
    ///  默认的质量。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  高速度、 低质量。
    ///</summary>
    HighSpeed = 1;
    ///<summary>
    ///  高质量、 低速度复合。
    ///</summary>
    HighQuality = 2;
    ///<summary>
    ///  使用灰度校正。
    ///</summary>
    GammaCorrected = 3;
    ///<summary>
    ///  假定线性值。
    ///</summary>
    AssumeLinear = 4;
    ///<summary>
    ///  无效的质量。
    ///</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定要评估坐标时使用的系统。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.CoordinateSpace')]
  DNCoordinateSpace = type Integer;
  DNCoordinateSpaceHelper = record helper for DNCoordinateSpace
  public const
    ///<summary>
    ///  指定坐标世界坐标上下文中。
    ///  在建模环境之类的非物理环境中使用世界坐标。
    ///</summary>
    World = 0;
    ///<summary>
    ///  指定坐标在页坐标上下文中。
    ///  通过定义其单元 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性，并且必须是元素之一 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举。
    ///</summary>
    Page = 1;
    ///<summary>
    ///  指定设备坐标上下文中的坐标。
    ///  在计算机屏幕设备上坐标通常以像素为单位测量。
    ///</summary>
    Device = 2;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定如何填充封闭路径的内部。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.FillMode')]
  DNFillMode = type Integer;
  DNFillModeHelper = record helper for DNFillMode
  public const
    ///<summary>
    ///  指定备用填充模式。
    ///</summary>
    Alternate = 0;
    ///<summary>
    ///  指定环绕的填充模式。
    ///</summary>
    Winding = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定是否 （刷新），立即终止图形堆栈中的命令或尽可能快地执行。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.FlushIntention')]
  DNFlushIntention = type Integer;
  DNFlushIntentionHelper = record helper for DNFlushIntention
  public const
    ///<summary>
    ///  指定的所有图形操作堆栈立即刷新。
    ///</summary>
    Flush = 0;
    ///<summary>
    ///  指定在堆栈上的所有图形操作都执行越早越好。
    ///  这会同步图形状态。
    ///</summary>
    Sync = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary><see cref="T:System.Drawing.Drawing2D.InterpolationMode" />
  ///  枚举指定的图像是缩放或旋转时使用的算法。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.InterpolationMode')]
  DNInterpolationMode = type Integer;
  DNInterpolationModeHelper = record helper for DNInterpolationMode
  public const
    ///<summary>
    ///  指定默认模式。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指定低质量内插。
    ///</summary>
    Low = 1;
    ///<summary>
    ///  指定高质量内插。
    ///</summary>
    High = 2;
    ///<summary>
    ///  指定双线性内插。
    ///  进行任何预筛选。
    ///  此模式不适用于图像收缩为其原始大小的 50%以下。
    ///</summary>
    Bilinear = 3;
    ///<summary>
    ///  指定两次立方插值。
    ///  进行任何预筛选。
    ///  此模式不适用于图像收缩为其原始大小的 25%以下。
    ///</summary>
    Bicubic = 4;
    ///<summary>
    ///  指定最近邻域内插。
    ///</summary>
    NearestNeighbor = 5;
    ///<summary>
    ///  指定高质量、 双线性内插。
    ///  执行预筛选功能以确保高质量的收缩。
    ///</summary>
    HighQualityBilinear = 6;
    ///<summary>
    ///  指定高质量、 两次立方插值。
    ///  执行预筛选功能以确保高质量的收缩。
    ///  此模式可产生最高的质量转换图像。
    ///</summary>
    HighQualityBicubic = 7;
    ///<summary>
    ///  等效于 <see cref="F:System.Drawing.Drawing2D.QualityMode.Invalid" />
    ///  元素 <see cref="T:System.Drawing.Drawing2D.QualityMode" />
    ///  枚举。
    ///</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定矩阵的转换操作的顺序。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.MatrixOrder')]
  DNMatrixOrder = type Integer;
  DNMatrixOrderHelper = record helper for DNMatrixOrder
  public const
    ///<summary>
    ///  在旧操作前将应用新的操作。
    ///</summary>
    Prepend = 0;
    ///<summary>
    ///  在旧操作后将应用新的操作。
    ///</summary>
    Append = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定在呈现过程中如何偏移像素为单位。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.PixelOffsetMode')]
  DNPixelOffsetMode = type Integer;
  DNPixelOffsetModeHelper = record helper for DNPixelOffsetMode
  public const
    ///<summary>
    ///  指定的默认模式。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指定高速度、 低质量呈现。
    ///</summary>
    HighSpeed = 1;
    ///<summary>
    ///  指定高质量、 低速度呈现。
    ///</summary>
    HighQuality = 2;
    ///<summary>
    ///  指定没有像素偏移量。
    ///</summary>
    None = 3;
    ///<summary>
    ///  指定像素偏移-.5 个单元，表示水平和垂直两个高速抗锯齿的。
    ///</summary>
    Half = 4;
    ///<summary>
    ///  指定无效的模式。
    ///</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定是否将平滑 （抗锯齿） 应用于直线、 曲线和已填充区域边缘。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.SmoothingMode')]
  DNSmoothingMode = type Integer;
  DNSmoothingModeHelper = record helper for DNSmoothingMode
  public const
    ///<summary>
    ///  指定未抗锯齿。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指定未抗锯齿。
    ///</summary>
    HighSpeed = 1;
    ///<summary>
    ///  指定消除锯齿的呈现。
    ///</summary>
    HighQuality = 2;
    ///<summary>
    ///  指定未抗锯齿。
    ///</summary>
    None = 3;
    ///<summary>
    ///  指定消除锯齿的呈现。
    ///</summary>
    AntiAlias = 4;
    ///<summary>
    ///  指定无效的模式。
    ///</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定的类型中应用的 warp 变换 <see cref="Overload:System.Drawing.Drawing2D.GraphicsPath.Warp" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.WarpMode')]
  DNWarpMode = type Integer;
  DNWarpModeHelper = record helper for DNWarpMode
  public const
    ///<summary>
    ///  指定透视的扭曲。
    ///</summary>
    Perspective = 0;
    ///<summary>
    ///  指定一种双线性变形。
    ///</summary>
    Bilinear = 1;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定应用于文本的样式信息。
  ///</summary>
  [DNTypeName('System.Drawing.FontStyle')]
  DNFontStyle = type Integer;
  DNFontStyleHelper = record helper for DNFontStyle
  public const
    ///<summary>
    ///  普通文本。
    ///</summary>
    Regular = 0;
    ///<summary>
    ///  显示为粗体文本。
    ///</summary>
    Bold = 1;
    ///<summary>
    ///  斜体文本。
    ///</summary>
    Italic = 2;
    ///<summary>
    ///  带下划线的文本。
    ///</summary>
    Underline = 4;
    ///<summary>
    ///  有一条线穿过中部的文本。
    ///</summary>
    Strikeout = 8;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定给定的数据的度量值的单位。
  ///</summary>
  [DNTypeName('System.Drawing.GraphicsUnit')]
  DNGraphicsUnit = type Integer;
  DNGraphicsUnitHelper = record helper for DNGraphicsUnit
  public const
    ///<summary>
    ///  世界坐标系单位指定为度量单位。
    ///</summary>
    World = 0;
    ///<summary>
    ///  指定显示设备的度量的单位。
    ///  通常为视频显示器和打印机的 1/100 英寸像素。
    ///</summary>
    Display = 1;
    ///<summary>
    ///  指定设备像素为度量单位。
    ///</summary>
    Pixel = 2;
    ///<summary>
    ///  作为度量单位指定打印机的点 （1/72 英寸）。
    ///</summary>
    Point = 3;
    ///<summary>
    ///  指定的度量单位为英寸。
    ///</summary>
    Inch = 4;
    ///<summary>
    ///  文档单位 （1/300 英寸） 指定为度量单位。
    ///</summary>
    Document = 5;
    ///<summary>
    ///  指定的度量单位为毫米。
    ///</summary>
    Millimeter = 6;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定放置在增强型图元文件 (EMF) 文件的记录的性质。
  ///  此枚举由几个构造函数中 <see cref="T:System.Drawing.Imaging.Metafile" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.EmfType')]
  DNEmfType = type Integer;
  DNEmfTypeHelper = record helper for DNEmfType
  public const
    ///<summary>
    ///  指定将 EMF 记录，这可以通过 GDI 或 GDI + 显示图元文件中的所有记录。
    ///</summary>
    EmfOnly = 3;
    ///<summary>
    ///  指定将 EMF + 记录，这可以通过 GDI +，但不是能通过 GDI 显示图元文件中的所有记录。
    ///</summary>
    EmfPlusOnly = 4;
    ///<summary>
    ///  指定所有 EMF + 记录在图元文件中的替换的 EMF 记录相关联。
    ///  类型的图元文件 <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" />
    ///  通过 GDI 或 GDI + 可以显示。
    ///</summary>
    EmfPlusDual = 5;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  用于指定的数据类型 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
  ///  用于 <see cref="Overload:System.Drawing.Image.Save" />
  ///  或 <see cref="Overload:System.Drawing.Image.SaveAdd" />
  ///  图像的方法。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.EncoderParameterValueType')]
  DNEncoderParameterValueType = type Integer;
  DNEncoderParameterValueTypeHelper = record helper for DNEncoderParameterValueType
  public const
    ///<summary>
    ///  指定数组中的每个值是一个 8 位无符号的整数。
    ///</summary>
    ValueTypeByte = 1;
    ///<summary>
    ///  指定的值的数组是以 null 结尾的 ASCII 字符字符串。
    ///  请注意， <see langword="NumberOfValues" />
    ///  数据成员的 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象指示包括 NULL 终止符的字符字符串的长度。
    ///</summary>
    ValueTypeAscii = 2;
    ///<summary>
    ///  指定数组中的每个值是 16 位无符号整数。
    ///</summary>
    ValueTypeShort = 3;
    ///<summary>
    ///  指定数组中的每个值是 32 位无符号的整数。
    ///</summary>
    ValueTypeLong = 4;
    ///<summary>
    ///  指定数组中的每个值是一对 32 位无符号整数。
    ///  每个对都表示一小部分、 第一个整数是分子和第二个整数是分母。
    ///</summary>
    ValueTypeRational = 5;
    ///<summary>
    ///  指定数组中的每个值是一对 32 位无符号整数。
    ///  每一对表示数字的范围。
    ///</summary>
    ValueTypeLongRange = 6;
    ///<summary>
    ///  指定的值的数组是不没有定义任何数据类型的字节数组。
    ///</summary>
    ValueTypeUndefined = 7;
    ///<summary>
    ///  指定数组中的每个值是一套四个，32 位无符号整数。
    ///  前两个整数表示一个分数，而两个整数表示秒的小数部分。
    ///  这两个分数表示有理数一个范围。
    ///  第一个分数是在范围内，最小的有理数，秒的小数部分是在范围内的最大 rational 编号。
    ///</summary>
    ValueTypeRationalRange = 8;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定传递给标志参数的标志 <see cref="Overload:System.Drawing.Bitmap.LockBits" />
  ///  方法。
  ///<see cref="Overload:System.Drawing.Bitmap.LockBits" />
  ///  方法锁定图像的一部分，以便您可以读取或写入像素的数据。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ImageLockMode')]
  DNImageLockMode = type Integer;
  DNImageLockModeHelper = record helper for DNImageLockMode
  public const
    ///<summary>
    ///  指定图像的一部分被锁定以进行读取。
    ///</summary>
    ReadOnly = 1;
    ///<summary>
    ///  指定图像的一部分被锁定以进行写入。
    ///</summary>
    WriteOnly_ = 2;
    ///<summary>
    ///  指定用于读取或写入锁定的图像的一部分。
    ///</summary>
    ReadWrite = 3;
    ///<summary>
    ///  指定用户分配用于读取或写入像素数据的缓冲区。
    ///  如果设置此标志， <paramref name="flags" />
    ///  参数 <see cref="Overload:System.Drawing.Bitmap.LockBits" />
    ///  方法为提供每年作为输入参数 （可能为输出参数）。
    ///  如果清除此标志，则 <paramref name="flags" />
    ///  参数仅充当输出参数。
    ///</summary>
    UserInputBuffer = 4;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定图像中的每个像素的颜色数据格式。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.PixelFormat')]
  DNPixelFormat = type Integer;
  DNPixelFormatHelper = record helper for DNPixelFormat
  public const
    ///<summary>
    ///  指定没有像素格式。
    ///</summary>
    DontCare = 0;
    ///<summary>
    ///  像素格式未定义。
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  此枚举的最大值。
    ///</summary>
    Max = 15;
    ///<summary>
    ///  像素数据包含颜色索引值，这意味着这些值是在系统颜色表中，而不是各个颜色值的颜色的索引。
    ///</summary>
    Indexed = 65536;
    ///<summary>
    ///  像素数据包含 GDI 颜色。
    ///</summary>
    Gdi = 131072;
    ///<summary>
    ///  指定的格式是 16 位 / 像素;5 位用于红色、 绿色和蓝色组件。
    ///  不使用剩余的 1 位。
    ///</summary>
    Format16bppRgb555 = 135173;
    ///<summary>
    ///  指定的格式是 16 位 / 像素;5 位用于红色组件、 6 位用于绿色组件和 5 位用于蓝色分量。
    ///</summary>
    Format16bppRgb565 = 135174;
    ///<summary>
    ///  指定的格式是 24 位 / 像素;8 位用于红色、 绿色和蓝色组件。
    ///</summary>
    Format24bppRgb = 137224;
    ///<summary>
    ///  指定的格式是 32 位 / 像素;8 位用于红色、 绿色和蓝色组件。
    ///  不使用剩余的 8 位。
    ///</summary>
    Format32bppRgb = 139273;
    ///<summary>
    ///  指定的像素格式是每像素 1 位，它使用索引的颜色。
    ///  因此，颜色表中它有两种颜色。
    ///</summary>
    Format1bppIndexed = 196865;
    ///<summary>
    ///  指定的格式是 4 位 / 像素，编制索引。
    ///</summary>
    Format4bppIndexed = 197634;
    ///<summary>
    ///  指定的格式是 8 位 / 像素，编制索引。
    ///  因此，颜色表中它有 256 种颜色。
    ///</summary>
    Format8bppIndexed = 198659;
    ///<summary>
    ///  像素数据包含不自左乘的 alpha 值。
    ///</summary>
    Alpha = 262144;
    ///<summary>
    ///  像素格式是 16 位 / 像素。
    ///  颜色信息指定 32768 所属 5 位的红色、 5 位的颜色为绿色、 5 位为蓝色，和 1 的位是 alpha。
    ///</summary>
    Format16bppArgb1555 = 397319;
    ///<summary>
    ///  像素格式包含预乘 alpha 值。
    ///</summary>
    PAlpha = 524288;
    ///<summary>
    ///  指定的格式是 32 位 / 像素;8 位用于 alpha、 红色、 绿色和蓝色组件。
    ///  红色、 绿色和蓝色组件是根据 alpha 分量自左乘。
    ///</summary>
    Format32bppPArgb = 925707;
    ///<summary>
    ///  保留。
    ///</summary>
    Extended = 1048576;
    ///<summary>
    ///  像素格式是 16 位 / 像素。
    ///  颜色信息指定 65536 灰度梯度。
    ///</summary>
    Format16bppGrayScale = 1052676;
    ///<summary>
    ///  指定的格式是 48 位 / 像素;为红色、 绿色和蓝色组件使用 16 位。
    ///</summary>
    Format48bppRgb = 1060876;
    ///<summary>
    ///  指定的格式是每个像素; 64 位alpha、 红色、 绿色和蓝色组件使用 16 位。
    ///  红色、 绿色和蓝色组件进行自左乘的 alpha 分量根据。
    ///</summary>
    Format64bppPArgb = 1851406;
    ///<summary>
    ///  32 位 / 像素默认像素格式。
    ///  此格式指定 24 位颜色深度和一个 8 位 alpha 通道。
    ///</summary>
    Canonical = 2097152;
    ///<summary>
    ///  指定的格式是 32 位 / 像素;8 位用于 alpha、 红色、 绿色和蓝色组件。
    ///</summary>
    Format32bppArgb = 2498570;
    ///<summary>
    ///  指定的格式是每个像素; 64 位alpha、 红色、 绿色和蓝色组件使用 16 位。
    ///</summary>
    Format64bppArgb = 3424269;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定的已知的系统颜色。
  ///</summary>
  [DNTypeName('System.Drawing.KnownColor')]
  DNKnownColor = type Integer;
  DNKnownColorHelper = record helper for DNKnownColor
  public const
    ///<summary>
    ///  系统定义的活动窗口边框的颜色。
    ///</summary>
    ActiveBorder = 1;
    ///<summary>
    ///  系统定义的活动窗口标题栏背景的颜色。
    ///</summary>
    ActiveCaption = 2;
    ///<summary>
    ///  系统定义的活动窗口标题栏中文本的颜色。
    ///</summary>
    ActiveCaptionText = 3;
    ///<summary>
    ///  系统定义应用程序工作区的颜色。
    ///  应用程序工作区是不被文档占据的多个文档视图中的区域。
    ///</summary>
    AppWorkspace = 4;
    ///<summary>
    ///  三维元素的系统定义的表面颜色。
    ///</summary>
    Control = 5;
    ///<summary>
    ///  三维元素系统定义的阴影颜色。
    ///  阴影颜色适用于面向远离的光源的三维元素的部分。
    ///</summary>
    ControlDark = 6;
    ///<summary>
    ///  系统定义的颜色，是一个三维元素的暗阴影颜色。
    ///  暗阴影颜色应用于所最深的颜色的三维元素的部分中。
    ///</summary>
    ControlDarkDark = 7;
    ///<summary>
    ///  系统定义的颜色，是一个三维元素的亮色。
    ///  亮色适用于面向的光源的三维元素的部分。
    ///</summary>
    ControlLight = 8;
    ///<summary>
    ///  三维元素的系统定义的突出显示颜色。
    ///  突出显示颜色应用于所最亮色的三维元素的部分中。
    ///</summary>
    ControlLightLight = 9;
    ///<summary>
    ///  系统定义的三维元素中文本的颜色。
    ///</summary>
    ControlText = 10;
    ///<summary>
    ///  系统定义用作桌面颜色。
    ///</summary>
    Desktop = 11;
    ///<summary>
    ///  系统定义的浅灰色文本颜色。
    ///  列表中处于禁用状态的项将显示为浅灰色文本。
    ///</summary>
    GrayText = 12;
    ///<summary>
    ///  系统定义的选定项的背景颜色。
    ///  这包括所选的菜单项，以及所选的文本。
    ///</summary>
    Highlight = 13;
    ///<summary>
    ///  系统定义的选定项的文本颜色。
    ///</summary>
    HighlightText = 14;
    ///<summary>
    ///  用于指定热跟踪项的系统定义颜色。
    ///  右键单击热跟踪项执行项。
    ///</summary>
    HotTrack = 15;
    ///<summary>
    ///  系统定义非活动窗口边框的颜色。
    ///</summary>
    InactiveBorder = 16;
    ///<summary>
    ///  系统定义的非活动窗口标题栏背景的颜色。
    ///</summary>
    InactiveCaption = 17;
    ///<summary>
    ///  系统定义非活动窗口标题栏中文本的颜色。
    ///</summary>
    InactiveCaptionText = 18;
    ///<summary>
    ///  系统定义的工具提示的背景颜色。
    ///</summary>
    Info = 19;
    ///<summary>
    ///  系统定义的工具提示的文本颜色。
    ///</summary>
    InfoText = 20;
    ///<summary>
    ///  系统定义一个表示菜单背景的颜色。
    ///</summary>
    Menu = 21;
    ///<summary>
    ///  系统定义的一个表示菜单文本颜色。
    ///</summary>
    MenuText = 22;
    ///<summary>
    ///  系统定义的滚动条的背景颜色。
    ///</summary>
    ScrollBar = 23;
    ///<summary>
    ///  系统定义的一个窗口的工作区中的背景颜色。
    ///</summary>
    Window = 24;
    ///<summary>
    ///  系统定义窗口框架的颜色。
    ///</summary>
    WindowFrame = 25;
    ///<summary>
    ///  系统定义的一个窗口的工作区中文本的颜色。
    ///</summary>
    WindowText = 26;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Transparent = 27;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    AliceBlue = 28;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    AntiqueWhite = 29;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Aqua = 30;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Aquamarine = 31;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Azure = 32;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Beige = 33;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Bisque = 34;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Black = 35;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    BlanchedAlmond = 36;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Blue = 37;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    BlueViolet = 38;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Brown = 39;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    BurlyWood = 40;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    CadetBlue = 41;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Chartreuse = 42;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Chocolate = 43;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Coral = 44;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    CornflowerBlue = 45;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Cornsilk = 46;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Crimson = 47;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Cyan = 48;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkBlue = 49;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkCyan = 50;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkGoldenrod = 51;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkGray = 52;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkGreen = 53;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkKhaki = 54;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkMagenta = 55;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkOliveGreen = 56;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkOrange = 57;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkOrchid = 58;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkRed = 59;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkSalmon = 60;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkSeaGreen = 61;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkSlateBlue = 62;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkSlateGray = 63;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkTurquoise = 64;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkViolet = 65;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DeepPink = 66;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DeepSkyBlue = 67;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DimGray = 68;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DodgerBlue = 69;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Firebrick = 70;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    FloralWhite = 71;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    ForestGreen = 72;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Fuchsia = 73;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Gainsboro = 74;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    GhostWhite = 75;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Gold = 76;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Goldenrod = 77;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Gray = 78;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Green = 79;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    GreenYellow = 80;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Honeydew = 81;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    HotPink = 82;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    IndianRed = 83;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Indigo = 84;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Ivory = 85;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Khaki = 86;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Lavender = 87;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LavenderBlush = 88;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LawnGreen = 89;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LemonChiffon = 90;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightBlue = 91;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightCoral = 92;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightCyan = 93;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightGoldenrodYellow = 94;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightGray = 95;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightGreen = 96;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightPink = 97;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightSalmon = 98;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightSeaGreen = 99;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightSkyBlue = 100;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightSlateGray = 101;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightSteelBlue = 102;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightYellow = 103;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Lime = 104;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LimeGreen = 105;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Linen = 106;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Magenta = 107;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Maroon = 108;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumAquamarine = 109;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumBlue = 110;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumOrchid = 111;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumPurple = 112;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumSeaGreen = 113;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumSlateBlue = 114;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumSpringGreen = 115;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumTurquoise = 116;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumVioletRed = 117;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MidnightBlue = 118;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MintCream = 119;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MistyRose = 120;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Moccasin = 121;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    NavajoWhite = 122;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Navy = 123;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    OldLace = 124;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Olive = 125;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    OliveDrab = 126;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Orange = 127;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    OrangeRed = 128;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Orchid = 129;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PaleGoldenrod = 130;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PaleGreen = 131;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PaleTurquoise = 132;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PaleVioletRed = 133;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PapayaWhip = 134;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PeachPuff = 135;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Peru = 136;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Pink = 137;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Plum = 138;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PowderBlue = 139;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Purple = 140;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Red = 141;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    RosyBrown = 142;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    RoyalBlue = 143;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SaddleBrown = 144;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Salmon = 145;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SandyBrown = 146;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SeaGreen = 147;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SeaShell = 148;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Sienna = 149;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Silver = 150;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SkyBlue = 151;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SlateBlue = 152;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SlateGray = 153;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Snow = 154;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SpringGreen = 155;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SteelBlue = 156;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Tan = 157;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Teal = 158;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Thistle = 159;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Tomato = 160;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Turquoise = 161;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Violet = 162;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Wheat = 163;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    White = 164;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    WhiteSmoke = 165;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Yellow = 166;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    YellowGreen = 167;
    ///<summary>
    ///  三维元素的系统定义的表面颜色。
    ///</summary>
    ButtonFace = 168;
    ///<summary>
    ///  系统定义的颜色，是一个三维元素的突出显示颜色。
    ///  此颜色将应用于面向的光源的三维元素的部分。
    ///</summary>
    ButtonHighlight = 169;
    ///<summary>
    ///  系统定义的颜色，是一个三维元素的阴影颜色。
    ///  此颜色将应用于面向远离的光源的三维元素的部分。
    ///</summary>
    ButtonShadow = 170;
    ///<summary>
    ///  系统定义中的活动窗口标题栏的颜色渐变的最小颜色的颜色。
    ///</summary>
    GradientActiveCaption = 171;
    ///<summary>
    ///  系统定义中的非活动窗口标题栏的颜色渐变的最小颜色的颜色。
    ///</summary>
    GradientInactiveCaption = 172;
    ///<summary>
    ///  系统定义的菜单栏背景的颜色。
    ///</summary>
    MenuBar = 173;
    ///<summary>
    ///  用来在像平面菜单显示的菜单时突出显示菜单项的系统定义颜色。
    ///</summary>
    MenuHighlight = 174;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定打印机的双工设置。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.Duplex')]
  DNDuplex = type Integer;
  DNDuplexHelper = record helper for DNDuplex
  public const
    ///<summary>
    ///  单面打印。
    ///</summary>
    Simplex = 1;
    ///<summary>
    ///  双面垂直打印。
    ///</summary>
    Vertical = 2;
    ///<summary>
    ///  双面水平打印。
    ///</summary>
    Horizontal = 3;
    ///<summary>
    ///  打印机的默认双面打印设置。
    ///</summary>
    Default_ = -1;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定标准纸张大小。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PaperKind')]
  DNPaperKind = type Integer;
  DNPaperKindHelper = record helper for DNPaperKind
  public const
    ///<summary>
    ///  纸张大小由用户定义。
    ///</summary>
    Custom = 0;
    ///<summary>
    ///  Letter 纸（8.5 英寸 × 11 英寸）。
    ///</summary>
    Letter = 1;
    ///<summary>
    ///  Letter small 纸（8.5 英寸 × 11 英寸）。
    ///</summary>
    LetterSmall = 2;
    ///<summary>
    ///  Tabloid 纸（11 英寸 × 17 英寸）。
    ///</summary>
    Tabloid = 3;
    ///<summary>
    ///  Ledger 纸（17 英寸 × 11 英寸）。
    ///</summary>
    Ledger = 4;
    ///<summary>
    ///  Legal 纸（8.5 英寸 × 14 英寸）。
    ///</summary>
    Legal = 5;
    ///<summary>
    ///  Statement 纸（5.5 英寸 × 8.5 英寸)。
    ///</summary>
    Statement = 6;
    ///<summary>
    ///  Executive 纸（7.25 英寸 × 10.5 英寸）。
    ///</summary>
    Executive = 7;
    ///<summary>
    ///  A3 纸（297 mm × 420 mm）。
    ///</summary>
    A3 = 8;
    ///<summary>
    ///  A4 纸（210 mm × 297 mm）。
    ///</summary>
    A4 = 9;
    ///<summary>
    ///  A4 small 纸（210 mm × 297 mm）。
    ///</summary>
    A4Small = 10;
    ///<summary>
    ///  A5 纸（148 mm × 210 mm）。
    ///</summary>
    A5 = 11;
    ///<summary>
    ///  B4 纸（250 mm × 353 mm）。
    ///</summary>
    B4 = 12;
    ///<summary>
    ///  B5 纸（176 mm × 250 mm）。
    ///</summary>
    B5 = 13;
    ///<summary>
    ///  对开纸（8.5 英寸 × 13 英寸）。
    ///</summary>
    Folio = 14;
    ///<summary>
    ///  四开纸（215 mm × 275 mm）。
    ///</summary>
    Quarto = 15;
    ///<summary>
    ///  Standard 纸（10 英寸 × 14 英寸）。
    ///</summary>
    Standard10x14 = 16;
    ///<summary>
    ///  Standard 纸（11 英寸 × 17 英寸）。
    ///</summary>
    Standard11x17 = 17;
    ///<summary>
    ///  Note 纸（8.5 英寸 × 11 英寸）。
    ///</summary>
    Note = 18;
    ///<summary>
    ///  #9 信封（3.875 英寸 × 8.875 英寸）。
    ///</summary>
    Number9Envelope = 19;
    ///<summary>
    ///  #10 信封（4.125 英寸 × 9.5 英寸）。
    ///</summary>
    Number10Envelope = 20;
    ///<summary>
    ///  #11 信封（4.5 英寸 × 10.375 英寸）。
    ///</summary>
    Number11Envelope = 21;
    ///<summary>
    ///  #12 信封（4.75 英寸 × 11 英寸）。
    ///</summary>
    Number12Envelope = 22;
    ///<summary>
    ///  #14 信封（5 英寸 × 11.5 英寸）。
    ///</summary>
    Number14Envelope = 23;
    ///<summary>
    ///  C 纸（17 英寸 × 22 英寸）。
    ///</summary>
    CSheet = 24;
    ///<summary>
    ///  D 纸（22 英寸 × 34 英寸）。
    ///</summary>
    DSheet = 25;
    ///<summary>
    ///  E 纸（34 英寸 × 44 英寸）。
    ///</summary>
    ESheet = 26;
    ///<summary>
    ///  DL 信封（110 mm × 220 mm）。
    ///</summary>
    DLEnvelope = 27;
    ///<summary>
    ///  C5 信封（162 mm × 229 mm）。
    ///</summary>
    C5Envelope = 28;
    ///<summary>
    ///  C3 信封（324 mm × 458 mm）。
    ///</summary>
    C3Envelope = 29;
    ///<summary>
    ///  C4 信封（229 mm × 324 mm）。
    ///</summary>
    C4Envelope = 30;
    ///<summary>
    ///  C6 信封（114 mm × 162 mm）。
    ///</summary>
    C6Envelope = 31;
    ///<summary>
    ///  C65 信封（114 mm × 229 mm）。
    ///</summary>
    C65Envelope = 32;
    ///<summary>
    ///  B4 信封（250 mm × 353 mm）。
    ///</summary>
    B4Envelope = 33;
    ///<summary>
    ///  B5 信封（176 mm × 250 mm）。
    ///</summary>
    B5Envelope = 34;
    ///<summary>
    ///  B6 信封（176 mm × 125 mm）。
    ///</summary>
    B6Envelope = 35;
    ///<summary>
    ///  意大利信封（110 mm × 230 mm）。
    ///</summary>
    ItalyEnvelope = 36;
    ///<summary>
    ///  君主式信封（3.875 英寸 × 7.5 英寸）。
    ///</summary>
    MonarchEnvelope = 37;
    ///<summary>
    ///  6 3/4 信封（3.625 英寸 × 6.5 英寸）。
    ///</summary>
    PersonalEnvelope = 38;
    ///<summary>
    ///  美国标准复写纸（14.875 英寸 × 11 英寸）。
    ///</summary>
    USStandardFanfold = 39;
    ///<summary>
    ///  德国标准复写纸（8.5 英寸 × 12 英寸）。
    ///</summary>
    GermanStandardFanfold = 40;
    ///<summary>
    ///  德国法律文书用复写纸（8.5 英寸 × 13 英寸）。
    ///</summary>
    GermanLegalFanfold = 41;
    ///<summary>
    ///  ISO B4（250 mm × 353 mm）。
    ///</summary>
    IsoB4 = 42;
    ///<summary>
    ///  Japanese postcard（100 mm × 148 mm）。
    ///</summary>
    JapanesePostcard = 43;
    ///<summary>
    ///  Standard 纸（9 英寸 × 11 英寸）。
    ///</summary>
    Standard9x11 = 44;
    ///<summary>
    ///  Standard 纸（10 英寸 × 11 英寸）。
    ///</summary>
    Standard10x11 = 45;
    ///<summary>
    ///  Standard 纸（15 英寸 × 11 英寸）。
    ///</summary>
    Standard15x11 = 46;
    ///<summary>
    ///  邀请信封（220 mm × 220 mm）。
    ///</summary>
    InviteEnvelope = 47;
    ///<summary>
    ///  Letter extra 纸（9.275 英寸 × 12 英寸）。
    ///  此值特定于 PostScript 驱动程序，且仅由 Linotronic 打印机使用，以便节省纸张。
    ///</summary>
    LetterExtra = 50;
    ///<summary>
    ///  Letter extra 纸（9.275 英寸 × 15 英寸）。
    ///  此值特定于 PostScript 驱动程序，且仅由 Linotronic 打印机使用，以便节省纸张。
    ///</summary>
    LegalExtra = 51;
    ///<summary>
    ///  Tabloid extra 纸（11.69 英寸 × 18 英寸）。
    ///  此值特定于 PostScript 驱动程序，且仅由 Linotronic 打印机使用，以便节省纸张。
    ///</summary>
    TabloidExtra = 52;
    ///<summary>
    ///  A4 extra 纸（236 mm × 322 mm）。
    ///  此值特定于 PostScript 驱动程序，且仅由 Linotronic 打印机使用以帮助节省纸张。
    ///</summary>
    A4Extra = 53;
    ///<summary>
    ///  Letter transverse 纸（8.275 英寸 × 11 英寸）。
    ///</summary>
    LetterTransverse = 54;
    ///<summary>
    ///  A4 transverse 纸（210 mm × 297mm）。
    ///</summary>
    A4Transverse = 55;
    ///<summary>
    ///  Letter extra transverse 纸（9.275 英寸 × 12 英寸）。
    ///</summary>
    LetterExtraTransverse = 56;
    ///<summary>
    ///  SuperA/SuperA/A4 纸（227 mm × 356 mm）。
    ///</summary>
    APlus = 57;
    ///<summary>
    ///  SuperB/SuperB/A3 纸（305 mm × 487 mm）。
    ///</summary>
    BPlus = 58;
    ///<summary>
    ///  Letter plus 纸（8.5 英寸 × 12.69 英寸）。
    ///</summary>
    LetterPlus = 59;
    ///<summary>
    ///  A4 plus 纸（210 mm × 330 mm）。
    ///</summary>
    A4Plus = 60;
    ///<summary>
    ///  A5 transverse 纸（148 mm × 210 mm）。
    ///</summary>
    A5Transverse = 61;
    ///<summary>
    ///  JIS B5 transverse 纸（182 mm × 257 mm）。
    ///</summary>
    B5Transverse = 62;
    ///<summary>
    ///  A3 extra 纸（322 mm × 445 mm）。
    ///</summary>
    A3Extra = 63;
    ///<summary>
    ///  A5 extra 纸（174 mm × 235 mm）。
    ///</summary>
    A5Extra = 64;
    ///<summary>
    ///  ISO B5 extra 纸（201 mm × 276 mm）。
    ///</summary>
    B5Extra = 65;
    ///<summary>
    ///  A2 纸（420 mm × 594 mm）。
    ///</summary>
    A2 = 66;
    ///<summary>
    ///  A3 transverse 纸（297 mm × 420 mm）。
    ///</summary>
    A3Transverse = 67;
    ///<summary>
    ///  A3 extra transverse 纸（322 mm × 445 mm）。
    ///</summary>
    A3ExtraTransverse = 68;
    ///<summary>
    ///  Japanese double postcard（200 mm × 148 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseDoublePostcard = 69;
    ///<summary>
    ///  A6 纸（105 mm × 148 mm)。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    A6 = 70;
    ///<summary>
    ///  Japanese Kaku #2 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeKakuNumber2 = 71;
    ///<summary>
    ///  Japanese Kaku #3 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeKakuNumber3 = 72;
    ///<summary>
    ///  Japanese Chou #3 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeChouNumber3 = 73;
    ///<summary>
    ///  Japanese Chou #4 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeChouNumber4 = 74;
    ///<summary>
    ///  Letter rotated 纸（11 英寸 × 8.5 英寸)。
    ///</summary>
    LetterRotated = 75;
    ///<summary>
    ///  A3 rotated 纸（420 mm × 297 mm）。
    ///</summary>
    A3Rotated = 76;
    ///<summary>
    ///  A4 rotated 纸（297 mm × 210 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    A4Rotated = 77;
    ///<summary>
    ///  A5 rotated 纸（210 mm × 148 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    A5Rotated = 78;
    ///<summary>
    ///  JIS B4 rotated 纸（364 mm × 257 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    B4JisRotated = 79;
    ///<summary>
    ///  JIS B5 rotated 纸（257 mm × 182 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    B5JisRotated = 80;
    ///<summary>
    ///  Japanese rotated postcard（148 mm × 100 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapanesePostcardRotated = 81;
    ///<summary>
    ///  Japanese rotated double postcard（148 mm × 200 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseDoublePostcardRotated = 82;
    ///<summary>
    ///  A6 rotated 纸（148 mm × 105 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    A6Rotated = 83;
    ///<summary>
    ///  Japanese rotated Kaku #2 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeKakuNumber2Rotated = 84;
    ///<summary>
    ///  Japanese rotated Kaku #3 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeKakuNumber3Rotated = 85;
    ///<summary>
    ///  Japanese rotated Chou #3 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeChouNumber3Rotated = 86;
    ///<summary>
    ///  Japanese rotated Chou #4 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeChouNumber4Rotated = 87;
    ///<summary>
    ///  JIS B6 纸（128 mm × 182 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    B6Jis = 88;
    ///<summary>
    ///  JIS B6 纸（182 mm × 128 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    B6JisRotated = 89;
    ///<summary>
    ///  Standard 纸（12 英寸 × 11 英寸）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Standard12x11 = 90;
    ///<summary>
    ///  Japanese You #4 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeYouNumber4 = 91;
    ///<summary>
    ///  Japanese You #4 rotated 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeYouNumber4Rotated = 92;
    ///<summary>
    ///  16K 纸（146 mm × 215 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc16K = 93;
    ///<summary>
    ///  32K 纸（97 mm × 151 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc32K = 94;
    ///<summary>
    ///  32K big 纸（97 mm × 151 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc32KBig = 95;
    ///<summary>
    ///  #1 信封（102 mm × 165 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber1 = 96;
    ///<summary>
    ///  #2 信封（102 mm × 176 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber2 = 97;
    ///<summary>
    ///  #3 信封（125 mm × 176 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber3 = 98;
    ///<summary>
    ///  #4 信封（110 mm × 208 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber4 = 99;
    ///<summary>
    ///  #5 信封（110 mm × 220 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber5 = 100;
    ///<summary>
    ///  #6 信封（120 mm × 230 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber6 = 101;
    ///<summary>
    ///  #7 信封（160 mm × 230 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber7 = 102;
    ///<summary>
    ///  #8 信封（120 mm × 309 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber8 = 103;
    ///<summary>
    ///  #9 信封（229 mm × 324 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber9 = 104;
    ///<summary>
    ///  #10 信封（324 mm × 458 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber10 = 105;
    ///<summary>
    ///  16K rotated 纸（146 mm × 215 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc16KRotated = 106;
    ///<summary>
    ///  32K rotated 纸（97 mm × 151 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc32KRotated = 107;
    ///<summary>
    ///  32K big rotated 纸（97 mm × 151 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc32KBigRotated = 108;
    ///<summary>
    ///  #1 rotated 信封（165 mm × 102 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber1Rotated = 109;
    ///<summary>
    ///  #2 rotated 信封（176 mm × 102 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber2Rotated = 110;
    ///<summary>
    ///  #3 rotated 信封（176 mm × 125 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber3Rotated = 111;
    ///<summary>
    ///  #4 rotated 信封（208 mm × 110 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber4Rotated = 112;
    ///<summary>
    ///  Envelope #5 rotated 信封（220 mm × 110 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber5Rotated = 113;
    ///<summary>
    ///  #6 rotated 信封（230 mm × 120 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber6Rotated = 114;
    ///<summary>
    ///  #7 rotated 信封（230 mm × 160 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber7Rotated = 115;
    ///<summary>
    ///  #8 rotated 信封（309 mm × 120 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber8Rotated = 116;
    ///<summary>
    ///  #9 rotated 信封（324 mm × 229 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber9Rotated = 117;
    ///<summary>
    ///  #10 rotated 信封（458 mm × 324 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber10Rotated = 118;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  Standard 纸源。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PaperSourceKind')]
  DNPaperSourceKind = type Integer;
  DNPaperSourceKindHelper = record helper for DNPaperSourceKind
  public const
    ///<summary>
    ///  上层纸盒打印机 （或默认中，如果打印机只有一个 bin）。
    ///</summary>
    Upper = 1;
    ///<summary>
    ///  打印机下层纸盒。
    ///</summary>
    Lower = 2;
    ///<summary>
    ///  打印机中间纸盒。
    ///</summary>
    Middle = 3;
    ///<summary>
    ///  以手动方式送入纸。
    ///</summary>
    Manual = 4;
    ///<summary>
    ///  信封。
    ///</summary>
    Envelope = 5;
    ///<summary>
    ///  以手动方式送入信封。
    ///</summary>
    ManualFeed = 6;
    ///<summary>
    ///  自动送入的纸张。
    ///</summary>
    AutomaticFeed = 7;
    ///<summary>
    ///  送纸器。
    ///</summary>
    TractorFeed = 8;
    ///<summary>
    ///  小型格式纸。
    ///</summary>
    SmallFormat = 9;
    ///<summary>
    ///  大格式纸。
    ///</summary>
    LargeFormat = 10;
    ///<summary>
    ///  打印机的大容量 bin。
    ///</summary>
    LargeCapacity = 11;
    ///<summary>
    ///  送纸器。
    ///</summary>
    Cassette = 14;
    ///<summary>
    ///  打印机的默认输入的 bin。
    ///</summary>
    FormSource = 15;
    ///<summary>
    ///  特定于打印机的纸张来源。
    ///</summary>
    Custom = 257;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定正在进行的打印操作的类型。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintAction')]
  DNPrintAction = type Integer;
  DNPrintActionHelper = record helper for DNPrintAction
  public const
    ///<summary>
    ///  打印操作打印到文件。
    ///</summary>
    PrintToFile = 0;
    ///<summary>
    ///  打印操作为打印预览。
    ///</summary>
    PrintToPreview = 1;
    ///<summary>
    ///  打印操作打印到打印机。
    ///</summary>
    PrintToPrinter = 2;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定要打印的文档的一部分。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintRange')]
  DNPrintRange = type Integer;
  DNPrintRangeHelper = record helper for DNPrintRange
  public const
    ///<summary>
    ///  打印所有页面。
    ///</summary>
    AllPages = 0;
    ///<summary>
    ///  打印选定的页。
    ///</summary>
    Selection = 1;
    ///<summary>
    ///  之间的页 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  和 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  打印。
    ///</summary>
    SomePages = 2;
    ///<summary>
    ///  打印当前显示的页面
    ///</summary>
    CurrentPage = 4194304;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定多少图像的旋转和翻转图像所用于的轴。
  ///</summary>
  [DNTypeName('System.Drawing.RotateFlipType')]
  DNRotateFlipType = type Integer;
  DNRotateFlipTypeHelper = record helper for DNRotateFlipType
  public const
    ///<summary>
    ///  指定后接水平和垂直的 180 度顺时针旋转翻转。
    ///</summary>
    Rotate180FlipXY = 0;
    ///<summary>
    ///  指定没有顺时针旋转和翻转。
    ///</summary>
    RotateNoneFlipNone = 0;
    ///<summary>
    ///  指定不进行翻转顺时针旋转 90 度。
    ///</summary>
    Rotate90FlipNone = 1;
    ///<summary>
    ///  指定后接水平和垂直的 270 度顺时针旋转翻转。
    ///</summary>
    Rotate270FlipXY = 1;
    ///<summary>
    ///  指定不进行翻转 180 度的顺时针旋转。
    ///</summary>
    Rotate180FlipNone = 2;
    ///<summary>
    ///  指定没有顺时针旋转后接水平和垂直翻转。
    ///</summary>
    RotateNoneFlipXY = 2;
    ///<summary>
    ///  指定不进行翻转顺时针旋转 270 度。
    ///</summary>
    Rotate270FlipNone = 3;
    ///<summary>
    ///  指定旋转 90 度顺时针旋转后接水平和垂直翻转。
    ///</summary>
    Rotate90FlipXY = 3;
    ///<summary>
    ///  指定没有跟水平翻转的顺时针旋转。
    ///</summary>
    RotateNoneFlipX = 4;
    ///<summary>
    ///  指定垂直翻转后跟 180 度顺时针旋转。
    ///</summary>
    Rotate180FlipY = 4;
    ///<summary>
    ///  指定后接水平翻转的 90 度的顺时针旋转。
    ///</summary>
    Rotate90FlipX = 5;
    ///<summary>
    ///  指定垂直翻转后跟的 270 度顺时针旋转。
    ///</summary>
    Rotate270FlipY = 5;
    ///<summary>
    ///  指定后接水平翻转的 180 度顺时针旋转。
    ///</summary>
    Rotate180FlipX = 6;
    ///<summary>
    ///  指定垂直翻转后跟没有顺时针旋转。
    ///</summary>
    RotateNoneFlipY = 6;
    ///<summary>
    ///  指定后接水平翻转的 270 度顺时针旋转。
    ///</summary>
    Rotate270FlipX = 7;
    ///<summary>
    ///  指定垂直翻转后跟 90 度顺时针旋转。
    ///</summary>
    Rotate90FlipY = 7;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定相对于其布局矩形的文本字符串的对齐方式。
  ///</summary>
  [DNTypeName('System.Drawing.StringAlignment')]
  DNStringAlignment = type Integer;
  DNStringAlignmentHelper = record helper for DNStringAlignment
  public const
    ///<summary>
    ///  指定文本对齐靠近布局。
    ///  在从左到右布局中，保留近的位置。
    ///  在从右到左布局中，近的位置是右。
    ///</summary>
    Near_ = 0;
    ///<summary>
    ///  指定文本在布局矩形的中心对齐。
    ///</summary>
    Center = 1;
    ///<summary>
    ///  指定文本对齐与相差甚远的布局矩形的来源位置。
    ///  在从左到右布局中，远的位置是右。
    ///  在从右到左布局中，保留远的位置。
    ///</summary>
    Far_ = 2;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary><see cref="T:System.Drawing.StringDigitSubstitute" />
  ///  枚举指定如何替代根据用户的区域设置或语言字符串中的数字。
  ///</summary>
  [DNTypeName('System.Drawing.StringDigitSubstitute')]
  DNStringDigitSubstitute = type Integer;
  DNStringDigitSubstituteHelper = record helper for DNStringDigitSubstitute
  public const
    ///<summary>
    ///  指定用户定义的替代方案。
    ///</summary>
    User = 0;
    ///<summary>
    ///  指定要禁用替换项。
    ///</summary>
    None = 1;
    ///<summary>
    ///  指定与用户的区域设置的正式国家/地区语言对应的替换数字。
    ///</summary>
    National = 2;
    ///<summary>
    ///  指定与用户的本机脚本相对应的替换数字或语言中，这可能是不同于用户的区域设置的官方国家/地区的语言。
    ///</summary>
    Traditional = 3;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定文本字符串的显示和布局的信息。
  ///</summary>
  [DNTypeName('System.Drawing.StringFormatFlags')]
  DNStringFormatFlags = type Integer;
  DNStringFormatFlagsHelper = record helper for DNStringFormatFlags
  public const
    ///<summary>
    ///  从右到左显示文本。
    ///</summary>
    DirectionRightToLeft = 1;
    ///<summary>
    ///  垂直对齐文本。
    ///</summary>
    DirectionVertical = 2;
    ///<summary>
    ///  允许的字符部分延伸字符串的布局矩形。
    ///  默认情况下，将重新定位字符以避免任何延伸。
    ///</summary>
    FitBlackBox = 4;
    ///<summary>
    ///  控制字符，如从左到右标记并具有代表性的标志符号输出所示。
    ///</summary>
    DisplayFormatControl = 32;
    ///<summary>
    ///  回退到不支持请求的字体中的字符的可选字体处于禁用状态。
    ///  使用缺少符号，通常是一个空的方块的字体显示缺失的任何字符。
    ///</summary>
    NoFontFallback = 1024;
    ///<summary>
    ///  包括每个行的结尾处的尾随空格。
    ///  默认情况下返回的边界矩形 <see cref="Overload:System.Drawing.Graphics.MeasureString" />
    ///  方法不包括每个行的结尾处的空格。
    ///  设置此标志，以包括该空间的度量单位。
    ///</summary>
    MeasureTrailingSpaces = 2048;
    ///<summary>
    ///  文本换行时禁用格式设置的矩形范围内。
    ///  当传递的是点而不是一个矩形，或指定的矩形具有行长度为零，则暗指此标志。
    ///</summary>
    NoWrap = 4096;
    ///<summary>
    ///  只有整个行的布局的格式设置的矩形中。
    ///  默认情况下布局会继续，直到的末尾的文本，或直到没有更多的行由于剪辑，具体取决于第一个可见。
    ///  请注意，默认设置允许最后一行以部分而不是行高度的整数倍的格式设置矩形变暗。
    ///  若要确保显示整行，则指定此值，并小心地将其提供格式化矩形的高度至少为一个行的高度。
    ///</summary>
    LineLimit = 8192;
    ///<summary>
    ///  允许的标志符号和解包换行文本格式设置矩形外伸出部分显示。
    ///  默认情况下将剪切到达边框外的所有文本和字形部分。
    ///</summary>
    NoClip = 16384;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定如何修整字符串不完全适合布局形状中的字符。
  ///</summary>
  [DNTypeName('System.Drawing.StringTrimming')]
  DNStringTrimming = type Integer;
  DNStringTrimmingHelper = record helper for DNStringTrimming
  public const
    ///<summary>
    ///  指定不进行任何修整。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指定将文本修整到最接近的字符。
    ///</summary>
    Character = 1;
    ///<summary>
    ///  指定文本则剪裁为最接近的单词。
    ///</summary>
    Word = 2;
    ///<summary>
    ///  指定将文本修整到最接近的字符，并且在被修整的行的末尾插入一个省略号。
    ///</summary>
    EllipsisCharacter = 3;
    ///<summary>
    ///  指定文本则剪裁为最接近的单词，并在被修整的行的末尾插入一个省略号。
    ///</summary>
    EllipsisWord = 4;
    ///<summary>
    ///  从修整行中删除中心并将其替换为省略号。
    ///  该算法会保留尽可能多的最后一个斜杠分隔的段的可能的行。
    ///</summary>
    EllipsisPath = 5;
  end;


  //-------------namespace: System.Drawing.Text----------------
  ///<summary>
  ///  指定显示的热键前缀与文本相关的类型。
  ///</summary>
  [DNTypeName('System.Drawing.Text.HotkeyPrefix')]
  DNHotkeyPrefix = type Integer;
  DNHotkeyPrefixHelper = record helper for DNHotkeyPrefix
  public const
    ///<summary>
    ///  任何热键的前缀。
    ///</summary>
    None = 0;
    ///<summary>
    ///  显示热键前缀。
    ///</summary>
    Show = 1;
    ///<summary>
    ///  不显示热键前缀。
    ///</summary>
    Hide = 2;
  end;


  //-------------namespace: System.Drawing.Text----------------
  ///<summary>
  ///  指定文本呈现质量。
  ///</summary>
  [DNTypeName('System.Drawing.Text.TextRenderingHint')]
  DNTextRenderingHint = type Integer;
  DNTextRenderingHintHelper = record helper for DNTextRenderingHint
  public const
    ///<summary>
    ///  每个字符使用位图来绘制其标志符号，使用系统默认呈现提示。
    ///  将使用在用户已经选择任何字体平滑显示的设置的系统绘制文本。
    ///</summary>
    SystemDefault = 0;
    ///<summary>
    ///  每个字符使用位图来绘制其标志符号。
    ///  提示用于改善在主干和弯曲字符外观。
    ///</summary>
    SingleBitPerPixelGridFit = 1;
    ///<summary>
    ///  每个字符使用位图来绘制其标志符号。
    ///  不使用提示。
    ///</summary>
    SingleBitPerPixel = 2;
    ///<summary>
    ///  在有提示使用抗锯齿标志符号位图来绘制字符的每个字符。
    ///  得更好的质量由于抗锯齿功能，但在较高的性能开销。
    ///</summary>
    AntiAliasGridFit = 3;
    ///<summary>
    ///  不提示的情况下使用抗锯齿标志符号位图来绘制每个字符。
    ///  由于抗锯齿质量就越好。
    ///  因为关闭了提示，词干宽度之间的差异可能非常明显。
    ///</summary>
    AntiAlias = 4;
    ///<summary>
    ///  每个字符使用位图来绘制其标志符号 ClearType 有提示。
    ///  最高的质量设置。
    ///  用来利用 ClearType 字体功能。
    ///</summary>
    ClearTypeGridFit = 5;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  ///<summary>
  ///  指定 X509 证书包含的名称类型。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509NameType')]
  DNX509NameType = type Integer;
  DNX509NameTypeHelper = record helper for DNX509NameType
  public const
    ///<summary>
    ///  简单名称的使用者或颁发者的 X509 证书。
    ///</summary>
    SimpleName = 0;
    ///<summary>
    ///  电子邮件地址的使用者或颁发者相关联的 X509 证书。
    ///</summary>
    EmailName = 1;
    ///<summary>
    ///  UPN 名称的使用者或颁发者的 X509 证书。
    ///</summary>
    UpnName = 2;
    ///<summary>
    ///  与颁发者的 X509 或的使用者备用名称关联的 DNS 名称的证书。
    ///</summary>
    DnsName = 3;
    ///<summary>
    ///  与 X.509 证书的颁发者或使用者备用名称关联的 DNS 名称。
    ///  此值等效于 <see cref="F:System.Security.Cryptography.X509Certificates.X509NameType.DnsName" />
    ///  值。
    ///</summary>
    DnsFromAlternativeName = 4;
    ///<summary>
    ///  URL 地址关联的使用者备用名称或颁发者的 X509 证书。
    ///</summary>
    UrlName = 5;
  end;


  //-------------namespace: System.Text.RegularExpressions----------------
  ///<summary>
  ///  提供用于设置正则表达式选项的枚举值。
  ///</summary>
  [DNTypeName('System.Text.RegularExpressions.RegexOptions')]
  DNRegexOptions = type Integer;
  DNRegexOptionsHelper = record helper for DNRegexOptions
  public const
    ///<summary>
    ///  指定不设置任何选项。
    ///  有关正则表达式引擎的默认行为的详细信息，请参阅中的"默认选项"部分 正则表达式选项 主题。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指定不区分大小写的匹配。
    ///  有关详细信息，请参阅中的"不区分大小写匹配"一节 正则表达式选项 主题。
    ///</summary>
    IgnoreCase = 1;
    ///<summary>
    ///  多行模式。
    ///  更改 ^ 和 $ 的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。
    ///  有关详细信息，请参阅中的"多行模式"部分 正则表达式选项 主题。
    ///</summary>
    Multiline = 2;
    ///<summary>
    ///  指定唯一有效的捕获是显式命名或编号的 (?&lt;name&gt;…) 形式的组。
    ///  这使未命名的圆括号可以充当非捕获组，并且不会使表达式的语法 (?:...) 显得笨拙。
    ///  有关详细信息，请参阅中的"仅显式捕获"一节 正则表达式选项 主题。
    ///</summary>
    ExplicitCapture = 4;
    ///<summary>
    ///  指定将正则表达式编译为程序集。
    ///  这会产生更快的执行速度，但会增加启动时间。
    ///  此值不应分配给 <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
    ///  属性时调用 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />
    ///  方法。
    ///  有关详细信息，请参阅中的"已编译的正则表达式"一节 正则表达式选项 主题。
    ///</summary>
    Compiled = 8;
    ///<summary>
    ///  指定单行模式。
    ///  更改点 （.） 的含义
    ///  使其匹配 （而不是除 \n 之外的所有字符） 的每个字符。
    ///  有关详细信息，请参阅中的"单行模式"部分 正则表达式选项 主题。
    ///</summary>
    Singleline = 16;
    ///<summary>
    ///  消除模式中的非转义空白并启用由 # 标记的注释。
    ///  但是，此值不会影响或消除中的空白区域、 数值或标记的开头个人的令牌。
    ///  有关详细信息，请参阅的"忽略空白"部分 正则表达式选项 主题。
    ///</summary>
    IgnorePatternWhitespace = 32;
    ///<summary>
    ///  指定搜索从右向左而不是从左向右进行。
    ///  有关详细信息，请参阅中的"从右到左模式"部分 正则表达式选项 主题。
    ///</summary>
    RightToLeft = 64;
    ///<summary>
    ///  为表达式启用符合 ECMAScript 的行为。
    ///  可以使用此值仅在结合 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />
    ///  , ，<see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" />
    ///  , ，和 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />
    ///  值。
    ///  该值与其他任何值一起使用均将导致异常。
    ///  有关详细信息 <see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript" />
    ///  选项，请参阅中的"ECMAScript 匹配行为"一节 正则表达式选项 主题。
    ///</summary>
    ECMAScript = 256;
    ///<summary>
    ///  指定忽略语言中的区域性差异。
    ///  有关详细信息，请参阅中的"比较使用固定区域性"一节 正则表达式选项 主题。
    ///</summary>
    CultureInvariant = 512;
  end;


  //-------------namespace: System----------------
  ///<summary>
  ///  指定 <see cref="T:System.Uri" />
  ///  的各个部分。
  ///</summary>
  [DNTypeName('System.UriComponents')]
  DNUriComponents = type Integer;
  DNUriComponentsHelper = record helper for DNUriComponents
  public const
    ///<summary><see cref="P:System.Uri.Scheme" />
    ///  数据。
    ///</summary>
    Scheme = 1;
    ///<summary><see cref="P:System.Uri.UserInfo" />
    ///  数据。
    ///</summary>
    UserInfo = 2;
    ///<summary><see cref="P:System.Uri.Host" />
    ///  数据。
    ///</summary>
    Host = 4;
    ///<summary><see cref="P:System.Uri.Port" />
    ///  数据。
    ///</summary>
    Port = 8;
    ///<summary><see cref="P:System.Uri.Scheme" />
    ///  、<see cref="P:System.Uri.Host" />
    ///  和 <see cref="P:System.Uri.Port" />
    ///  数据。
    ///</summary>
    SchemeAndServer = 13;
    ///<summary><see cref="P:System.Uri.LocalPath" />
    ///  数据。
    ///</summary>
    Path = 16;
    ///<summary><see cref="P:System.Uri.Query" />
    ///  数据。
    ///</summary>
    Query = 32;
    ///<summary><see cref="P:System.Uri.LocalPath" />
    ///  和 <see cref="P:System.Uri.Query" />
    ///  数据。
    ///  另请参阅：<see cref="P:System.Uri.PathAndQuery" />
    ///  。
    ///</summary>
    PathAndQuery = 48;
    ///<summary><see cref="P:System.Uri.Scheme" />
    ///  、<see cref="P:System.Uri.Host" />
    ///  、<see cref="P:System.Uri.Port" />
    ///  、<see cref="P:System.Uri.LocalPath" />
    ///  和 <see cref="P:System.Uri.Query" />
    ///  数据。
    ///</summary>
    HttpRequestUrl = 61;
    ///<summary><see cref="P:System.Uri.Fragment" />
    ///  数据。
    ///</summary>
    Fragment = 64;
    ///<summary><see cref="P:System.Uri.Scheme" />
    ///  、<see cref="P:System.Uri.UserInfo" />
    ///  、<see cref="P:System.Uri.Host" />
    ///  、<see cref="P:System.Uri.Port" />
    ///  、<see cref="P:System.Uri.LocalPath" />
    ///  、<see cref="P:System.Uri.Query" />
    ///  和 <see cref="P:System.Uri.Fragment" />
    ///  数据。
    ///</summary>
    AbsoluteUri = 127;
    ///<summary><see cref="P:System.Uri.Port" />
    ///  数据。
    ///  如果 <see cref="T:System.Uri" />
    ///  中没有任何端口数据且已将默认端口分配给了 <see cref="P:System.Uri.Scheme" />
    ///  ，则会返回默认端口。
    ///  如果没有任何默认端口，则返回 -1。
    ///</summary>
    StrongPort = 128;
    ///<summary><see cref="P:System.Uri.Host" />
    ///  和 <see cref="P:System.Uri.Port" />
    ///  数据。
    ///  如果在 Uri 中没有任何端口数据且已将默认端口分配给了 <see cref="P:System.Uri.Scheme" />
    ///  ，则会返回默认端口。
    ///  如果没有任何默认端口，则返回 -1。
    ///</summary>
    HostAndPort = 132;
    ///<summary><see cref="P:System.Uri.UserInfo" />
    ///  、<see cref="P:System.Uri.Host" />
    ///  和 <see cref="P:System.Uri.Port" />
    ///  数据。
    ///  如果 <see cref="T:System.Uri" />
    ///  中没有任何端口数据且已将默认端口分配给了 <see cref="P:System.Uri.Scheme" />
    ///  ，则会返回默认端口。
    ///  如果没有任何默认端口，则返回 -1。
    ///</summary>
    StrongAuthority = 134;
    ///<summary><see cref="P:System.Uri.Host" />
    ///  的正常化表格。
    ///</summary>
    NormalizedHost = 256;
    ///<summary>
    ///  指定应包括的分隔符。
    ///</summary>
    KeepDelimiter = 1073741824;
    ///<summary>
    ///  Uri 序列化程序需要的完整的 <see cref="T:System.Uri" />
    ///  上下文。
    ///  该上下文包括 IPv6 作用域。
    ///</summary>
    SerializationInfoString = -2147483648;
  end;


  //-------------namespace: System----------------
  ///<summary>
  ///  控制 URI 信息的转义方式。
  ///</summary>
  [DNTypeName('System.UriFormat')]
  DNUriFormat = type Integer;
  DNUriFormatHelper = record helper for DNUriFormat
  public const
    ///<summary>
    ///  根据 RFC 2396 中的规则执行转义。
    ///</summary>
    UriEscaped = 1;
    ///<summary>
    ///  未执行任何转义。
    ///</summary>
    Unescaped = 2;
    ///<summary>
    ///  仍然在请求 URI 组件中具有保留的含义的字符进行转义。
    ///  所有其他未转义。
    ///  请参阅“备注”。
    ///</summary>
    SafeUnescaped = 3;
  end;


  //-------------namespace: System----------------
  ///<summary>
  ///  定义主机名称类型<see cref="M:System.Uri.CheckHostName(System.String)" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.UriHostNameType')]
  DNUriHostNameType = type Integer;
  DNUriHostNameTypeHelper = record helper for DNUriHostNameType
  public const
    ///<summary>
    ///  未提供主机名的类型。
    ///</summary>
    Unknown = 0;
    ///<summary>
    ///  主机已设置，但无法确定类型。
    ///</summary>
    Basic = 1;
    ///<summary>
    ///  主机名是域名系统 (DNS) 样式主机名。
    ///</summary>
    Dns = 2;
    ///<summary>
    ///  主机名是 Internet 协议 (IP) 版本 4 的主机地址。
    ///</summary>
    IPv4 = 3;
    ///<summary>
    ///  主机名是 Internet 协议 (IP) 版本 6 主机地址。
    ///</summary>
    IPv6 = 4;
  end;


  //-------------namespace: System----------------
  ///<summary>
  ///  定义类型的<see cref="T:System.Uri" />
  ///  s 针对<see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" />
  ///  和几个<see cref="Overload:System.Uri.#ctor" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.UriKind')]
  DNUriKind = type Integer;
  DNUriKindHelper = record helper for DNUriKind
  public const
    ///<summary>
    ///  类别的 Uri 是不确定的。
    ///</summary>
    RelativeOrAbsolute = 0;
    ///<summary>
    ///  Uri 是一个绝对 Uri。
    ///</summary>
    Absolute_ = 1;
    ///<summary>
    ///  Uri 是相对的 Uri。
    ///</summary>
    Relative = 2;
  end;


  //-------------namespace: System----------------
  ///<summary>
  ///  定义的 URI 的组成部分<see cref="M:System.Uri.GetLeftPart(System.UriPartial)" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.UriPartial')]
  DNUriPartial = type Integer;
  DNUriPartialHelper = record helper for DNUriPartial
  public const
    ///<summary>
    ///  URI 方案段。
    ///</summary>
    Scheme = 0;
    ///<summary>
    ///  URI 方案和授权段。
    ///</summary>
    Authority = 1;
    ///<summary>
    ///  URI 方案、 颁发机构和路径段。
    ///</summary>
    Path = 2;
    ///<summary>
    ///  方案、 机构、 路径和查询段的 uri。
    ///</summary>
    Query = 3;
  end;


  //-------------namespace: System.Web.UI----------------
  ///<summary>
  ///  指定 ASP.NET 如何生成 <see cref="P:System.Web.UI.Control.ClientID" />
  ///  的控件，可在客户端脚本访问。
  ///</summary>
  [DNTypeName('System.Web.UI.ClientIDMode')]
  DNClientIDMode = type Integer;
  DNClientIDModeHelper = record helper for DNClientIDMode
  public const
    ///<summary>
    ///  控件将继承 <see cref="T:System.Web.UI.ClientIDMode" />
    ///  设置其 <see cref="P:System.Web.UI.Control.NamingContainer" />
    ///  控件。
    ///</summary>
    Inherit = 0;
    ///<summary><see cref="P:System.Web.UI.Control.ClientID" />
    ///  值通过串联生成 <see cref="P:System.Web.UI.Control.ID" />
    ///  值的每个父命名容器，其中包含 <see cref="P:System.Web.UI.Control.ID" />
    ///  该控件的值。
    ///  在数据绑定方案中呈现的控件的多个实例，递增的值控件的前面插入 <see cref="P:System.Web.UI.Control.ID" />
    ///  值。
    ///  每个段是以下划线字符 (_) 分隔。
    ///  此算法是仅提供了前面的 ASP.NET 版本比 ASP.NET 4 中的一种。
    ///</summary>
    AutoID = 1;
    ///<summary>
    ///  此算法用于在数据绑定控件的控件。
    ///<see cref="P:System.Web.UI.Control.ClientID" />
    ///  值通过串联生成 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  值与父命名容器 <see cref="P:System.Web.UI.Control.ID" />
    ///  该控件的值。
    ///  如果控件是生成多个行的数据绑定控件，在中指定的数据字段的值 <see cref="P:System.Web.UI.WebControls.IDataBoundListControl.ClientIDRowSuffix" />
    ///  属性添加到的末尾。
    ///  有关 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控制，可以指定字段的多个数据。
    ///  如果 <see cref="P:System.Web.UI.WebControls.IDataBoundListControl.ClientIDRowSuffix" />
    ///  属性为空白，序列号将被添加到末尾而不是数据字段值。
    ///  每个段是以下划线字符 (_) 分隔。
    ///</summary>
    Predictable = 2;
    ///<summary><see cref="P:System.Web.UI.Control.ClientID" />
    ///  值设置为的值 <see cref="P:System.Web.UI.Control.ID" />
    ///  属性。
    ///  如果控件处于命名容器，该控件用作命名容器的任何控件，它包含的层次结构的顶层。
    ///</summary>
    Static_ = 3;
  end;


  //-------------namespace: System.Web.UI----------------
  ///<summary>
  ///  指定控件的请求验证的类型。
  ///</summary>
  [DNTypeName('System.Web.UI.ValidateRequestMode')]
  DNValidateRequestMode = type Integer;
  DNValidateRequestModeHelper = record helper for DNValidateRequestMode
  public const
    ///<summary>
    ///  请求验证使用相同的行为作为其父控件。
    ///</summary>
    Inherit = 0;
    ///<summary>
    ///  禁用请求验证。
    ///</summary>
    Disabled = 1;
    ///<summary>
    ///  启用请求验证。
    ///</summary>
    Enabled = 2;
  end;


  //-------------namespace: System.Web.UI----------------
  ///<summary>
  ///  指定是否将为控件启用视图状态。
  ///</summary>
  [DNTypeName('System.Web.UI.ViewStateMode')]
  DNViewStateMode = type Integer;
  DNViewStateModeHelper = record helper for DNViewStateMode
  public const
    ///<summary>
    ///  继承的值 <see cref="T:System.Web.UI.ViewStateMode" />
    ///  从父 <see cref="T:System.Web.UI.Control" />
    ///  。
    ///</summary>
    Inherit = 0;
    ///<summary>
    ///  启用此控件的视图状态，即使父控件禁用了视图状态。
    ///</summary>
    Enabled = 1;
    ///<summary>
    ///  禁用此控件的视图状态，即使父控件具有启用视图状态。
    ///</summary>
    Disabled = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  ///<summary>
  ///  指定控件的边框样式。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.BorderStyle')]
  DNBorderStyle = type Integer;
  DNBorderStyleHelper = record helper for DNBorderStyle
  public const
    ///<summary>
    ///  未设置边框样式。
    ///</summary>
    NotSet = 0;
    ///<summary>
    ///  无边框。
    ///</summary>
    None = 1;
    ///<summary>
    ///  虚线边框。
    ///</summary>
    Dotted = 2;
    ///<summary>
    ///  虚线边框。
    ///</summary>
    Dashed = 3;
    ///<summary>
    ///  实线边框。
    ///</summary>
    Solid = 4;
    ///<summary>
    ///  双实线边框。
    ///</summary>
    Double = 5;
    ///<summary>
    ///  用于凹陷边框外观的凹痕的边框。
    ///</summary>
    Groove = 6;
    ///<summary>
    ///  用于凸起的边框外观的隆起的边框。
    ///</summary>
    Ridge = 7;
    ///<summary>
    ///  用于凹陷控件外观的内嵌边框。
    ///</summary>
    Inset = 8;
    ///<summary>
    ///  用于凸起的控件外观的一开始就边框。
    ///</summary>
    Outset = 9;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  ///<summary>
  ///  指定显示的表结构中的项的控件的网格线样式。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridLines')]
  DNGridLines = type Integer;
  DNGridLinesHelper = record helper for DNGridLines
  public const
    ///<summary>
    ///  呈现没有网格线。
    ///</summary>
    None = 0;
    ///<summary>
    ///  呈现只能水平网格线。
    ///</summary>
    Horizontal = 1;
    ///<summary>
    ///  呈现仅垂直网格线。
    ///</summary>
    Vertical = 2;
    ///<summary>
    ///  呈现水平和垂直网格线。
    ///</summary>
    Both = 3;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  ///<summary>
  ///  指定对容器内项的水平对齐方式。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.HorizontalAlign')]
  DNHorizontalAlign = type Integer;
  DNHorizontalAlignHelper = record helper for DNHorizontalAlign
  public const
    ///<summary>
    ///  未设置的水平对齐方式。
    ///</summary>
    NotSet = 0;
    ///<summary>
    ///  左对齐容器的内容。
    ///</summary>
    Left = 1;
    ///<summary>
    ///  操作中心提供容器的内容。
    ///</summary>
    Center = 2;
    ///<summary>
    ///  右对齐容器的内容。
    ///</summary>
    Right = 3;
    ///<summary>
    ///  容器的内容均匀分布在并且具有左右边缘的边距对齐。
    ///</summary>
    Justify = 4;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  ///<summary>
  ///  指定在其中的项列表进行排序的方向。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.SortDirection')]
  DNSortDirection = type Integer;
  DNSortDirectionHelper = record helper for DNSortDirection
  public const
    ///<summary>
    ///  从小到大排序。
    ///  例如，从 A 到 Z。
    ///</summary>
    Ascending = 0;
    ///<summary>
    ///  从大到小排序。
    ///  例如，从 Z 到 a。
    ///</summary>
    Descending = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  ///<summary>
  ///  指定要将呈现为 HTML 标题元素的文本的水平或垂直位置。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.TableCaptionAlign')]
  DNTableCaptionAlign = type Integer;
  DNTableCaptionAlignHelper = record helper for DNTableCaptionAlign
  public const
    ///<summary>
    ///  未设置的标题对齐方式。
    ///  浏览器呈现该标题确定标题的对齐位置。
    ///</summary>
    NotSet = 0;
    ///<summary>
    ///  Caption 元素与表的顶部对齐。
    ///</summary>
    Top = 1;
    ///<summary>
    ///  Caption 元素与表的底部对齐。
    ///</summary>
    Bottom = 2;
    ///<summary>
    ///  Caption 元素与表的左侧对齐。
    ///</summary>
    Left = 3;
    ///<summary>
    ///  Caption 元素与表的右侧对齐。
    ///</summary>
    Right = 4;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定的输入或输出检查的量 <see cref="T:System.Xml.XmlReader" />
  ///  和 <see cref="T:System.Xml.XmlWriter" />
  ///  对象执行。
  ///</summary>
  [DNTypeName('System.Xml.ConformanceLevel')]
  DNConformanceLevel = type Integer;
  DNConformanceLevelHelper = record helper for DNConformanceLevel
  public const
    ///<summary><see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.Xml.XmlWriter" />
    ///  对象会自动检测是否文档级别或片段级别检查应执行，并执行相应的检查。
    ///  如果正在包装另一个 <see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，外层对象不进行任何附加一致性检查。
    ///  一致性检查只针对基础对象。
    ///  请参阅 <see cref="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
    ///  和 <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
    ///  有关如何确定符合性级别的详细信息的属性。
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  XML 数据是 well-formed XML fragment, ，如按 W3C 定义。
    ///</summary>
    Fragment = 1;
    ///<summary>
    ///  XML 数据符合格式正确的规则 XML 1.0 document, ，如按 W3C 定义。
    ///</summary>
    Document = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定用于处理 DTD 的选项。
  ///<see cref="T:System.Xml.DtdProcessing" />
  ///  枚举由 <see cref="T:System.Xml.XmlReaderSettings" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.DtdProcessing')]
  DNDtdProcessing = type Integer;
  DNDtdProcessingHelper = record helper for DNDtdProcessing
  public const
    ///<summary>
    ///  指定当遇到 DTD， <see cref="T:System.Xml.XmlException" />
    ///  会引发一条消息，表明 Dtd 被禁止。
    ///  这是默认行为。
    ///</summary>
    Prohibit = 0;
    ///<summary>
    ///  将导致 DOCTYPE 元素被忽略。
    ///  不进行 DTD 处理时发生。
    ///</summary>
    Ignore = 1;
    ///<summary>
    ///  用于分析 Dtd。
    ///</summary>
    Parse = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  指定使用的架构验证选项 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
  ///  和 <see cref="T:System.Xml.XmlReader" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaValidationFlags')]
  DNXmlSchemaValidationFlags = type Integer;
  DNXmlSchemaValidationFlagsHelper = record helper for DNXmlSchemaValidationFlags
  public const
    ///<summary>
    ///  不能处理标识约束、 内联架构、 架构位置提示或报告架构验证警告。
    ///</summary>
    None = 0;
    ///<summary>
    ///  在验证期间遇到进程内联架构。
    ///</summary>
    ProcessInlineSchema = 1;
    ///<summary>
    ///  处理架构位置提示 (xsi:schemaLocation, ，xsi:noNamespaceSchemaLocation) 在验证期间遇到。
    ///</summary>
    ProcessSchemaLocation = 2;
    ///<summary>
    ///  报告在验证期间遇到的架构验证警告。
    ///</summary>
    ReportValidationWarnings = 4;
    ///<summary>
    ///  处理标识约束 (xs:ID, ，xs:IDREF, ，xs:key, ，xs:keyref, ，xs:unique) 在验证期间遇到。
    ///</summary>
    ProcessIdentityConstraints = 8;
    ///<summary>
    ///  允许将 xml: * 属性即使它们未定义的架构中。
    ///  属性将基于其数据类型验证。
    ///</summary>
    AllowXmlAttributes = 16;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定要执行的验证的类型。
  ///</summary>
  [DNTypeName('System.Xml.ValidationType')]
  DNValidationType = type Integer;
  DNValidationTypeHelper = record helper for DNValidationType
  public const
    ///<summary>
    ///  未执行任何验证。
    ///  此设置创建符合 XML 1.0 的非验证分析程序。
    ///</summary>
    None = 0;
    ///<summary>
    ///  验证是否找到 DTD 或架构信息。
    ///</summary>
    Auto = 1;
    ///<summary>
    ///  根据 DTD 进行验证。
    ///</summary>
    DTD = 2;
    ///<summary>
    ///  根据 XML 数据简化 (XDR) 架构（包括内联 XDR 架构）进行验证。
    ///  XDR 架构都使用可以识别<see langword="x-schema" />
    ///  命名空间前缀或<see cref="P:System.Xml.XmlValidatingReader.Schemas" />
    ///  属性。
    ///</summary>
    XDR = 3;
    ///<summary>
    ///  根据 XML 架构定义语言 (XSD) 架构（包括内联 XML 架构）进行验证。
    ///  XML 架构的命名空间 Uri 与关联通过使用<see langword="schemaLocation" />
    ///  特性或提供<see langword="Schemas" />
    ///  属性。
    ///</summary>
    Schema = 4;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  定义命名空间范围。
  ///</summary>
  [DNTypeName('System.Xml.XmlNamespaceScope')]
  DNXmlNamespaceScope = type Integer;
  DNXmlNamespaceScopeHelper = record helper for DNXmlNamespaceScope
  public const
    ///<summary>
    ///  在当前节点的范围内定义的所有命名空间。
    ///  这包括总是隐式声明的 xmlns: xml 命名空间。
    ///  未定义的顺序返回的命名空间。
    ///</summary>
    All = 0;
    ///<summary>
    ///  在当前节点，包括总是隐式声明 xmlns: xml 命名空间范围内定义的所有命名空间。
    ///  未定义的顺序返回的命名空间。
    ///</summary>
    ExcludeXml = 1;
    ///<summary>
    ///  在当前节点本地定义的所有命名空间。
    ///</summary>
    Local = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  描述某节点相对于第二个节点的文档顺序。
  ///</summary>
  [DNTypeName('System.Xml.XmlNodeOrder')]
  DNXmlNodeOrder = type Integer;
  DNXmlNodeOrderHelper = record helper for DNXmlNodeOrder
  public const
    ///<summary>
    ///  此导航器的当前节点是提供导航器在当前节点之前。
    ///</summary>
    Before = 0;
    ///<summary>
    ///  此导航器的当前节点是提供导航器的当前节点之后。
    ///</summary>
    After = 1;
    ///<summary>
    ///  两种导航器位于同一个节点上。
    ///</summary>
    Same = 2;
    ///<summary>
    ///  按文档顺序，相对于彼此，无法确定节点位置。
    ///  如果两个节点驻留在不同的树中，也可能发生。
    ///</summary>
    Unknown = 3;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定节点的类型。
  ///</summary>
  [DNTypeName('System.Xml.XmlNodeType')]
  DNXmlNodeType = type Integer;
  DNXmlNodeTypeHelper = record helper for DNXmlNodeType
  public const
    ///<summary>
    ///  这由返回 <see cref="T:System.Xml.XmlReader" />
    ///  如果 <see langword="Read" />
    ///  不调用方法。
    ///</summary>
    None = 0;
    ///<summary>
    ///  元素 (例如， &lt;item&gt; )。
    ///</summary>
    Element = 1;
    ///<summary>
    ///  属性 (例如， id='123' )。
    ///</summary>
    Attribute = 2;
    ///<summary>
    ///  节点的文本内容。
    ///</summary>
    Text = 3;
    ///<summary>
    ///  CDATA 节 (例如， &lt;![CDATA[my escaped text]]&gt; )。
    ///</summary>
    CDATA = 4;
    ///<summary>
    ///  对实体的引用 (例如， &amp;num; )。
    ///</summary>
    EntityReference = 5;
    ///<summary>
    ///  实体声明 (例如， &lt;!ENTITY...&gt; )。
    ///</summary>
    Entity = 6;
    ///<summary>
    ///  处理指令 (例如， &lt;?pi test?&gt; )。
    ///</summary>
    ProcessingInstruction = 7;
    ///<summary>
    ///  注释 (例如， &lt;!-- my comment --&gt; )。
    ///</summary>
    Comment = 8;
    ///<summary>
    ///  文档提供的对象，作为文档树的根访问整个 XML 文档。
    ///</summary>
    Document = 9;
    ///<summary>
    ///  文档类型声明中，由以下标记 (例如， &lt;!DOCTYPE...&gt; )。
    ///</summary>
    DocumentType = 10;
    ///<summary>
    ///  将文档片段。
    ///</summary>
    DocumentFragment = 11;
    ///<summary>
    ///  在文档类型声明中的表示法 (例如， &lt;!NOTATION...&gt; )。
    ///</summary>
    Notation = 12;
    ///<summary>
    ///  标记之间的空白区域。
    ///</summary>
    Whitespace = 13;
    ///<summary>
    ///  在混合内容模型或内的空格中标记之间空白区域 xml:space="preserve" 作用域。
    ///</summary>
    SignificantWhitespace = 14;
    ///<summary>
    ///  结束元素标记 (例如， &lt;/item&gt; )。
    ///</summary>
    EndElement = 15;
    ///<summary>
    ///  返回当 <see langword="XmlReader" />
    ///  到达实体替换为调用的结果末尾 <see cref="M:System.Xml.XmlReader.ResolveEntity" />
    ///  。
    ///</summary>
    EndEntity = 16;
    ///<summary>
    ///  XML 声明 (例如， &lt;?xml version='1.0'?&gt; )。
    ///</summary>
    XmlDeclaration = 17;
  end;


  //-------------namespace: System.Xml.XPath----------------
  ///<summary>
  ///  定义命名空间范围。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathNamespaceScope')]
  DNXPathNamespaceScope = type Integer;
  DNXPathNamespaceScopeHelper = record helper for DNXPathNamespaceScope
  public const
    ///<summary>
    ///  返回当前节点的作用域中定义的所有命名空间。
    ///  这包括 xmlns:xml 总是隐式声明的命名空间。
    ///  未定义的顺序返回的命名空间。
    ///</summary>
    All = 0;
    ///<summary>
    ///  返回在当前节点范围内定义的所有命名空间不包括 xmlns:xml 命名空间。
    ///  xmlns:xml 总是隐式声明命名空间。
    ///  未定义的顺序返回的命名空间。
    ///</summary>
    ExcludeXml = 1;
    ///<summary>
    ///  返回在当前节点本地定义的所有命名空间。
    ///</summary>
    Local = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  ///<summary>
  ///  定义可从返回的 XPath 节点类型 <see cref="T:System.Xml.XPath.XPathNavigator" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathNodeType')]
  DNXPathNodeType = type Integer;
  DNXPathNodeTypeHelper = record helper for DNXPathNodeType
  public const
    ///<summary>
    ///  XML 文档或节点树的根节点。
    ///</summary>
    Root = 0;
    ///<summary>
    ///  一个元素，如 &lt;element&gt;。
    ///</summary>
    Element = 1;
    ///<summary>
    ///  一个属性，如 id='123'。
    ///</summary>
    Attribute = 2;
    ///<summary>
    ///  命名空间，如 xmlns="namespace"。
    ///</summary>
    Namespace = 3;
    ///<summary>
    ///  节点的文本内容。
    ///  等效于文档对象模型 (DOM) 的文本和 CDATA 节点类型。
    ///  包含至少一个字符。
    ///</summary>
    Text = 4;
    ///<summary>
    ///  具有空白字符的节点和 xml:space 设置为 preserve。
    ///</summary>
    SignificantWhitespace = 5;
    ///<summary>
    ///  与空白字符和任何有意义的空白节点。
    ///  空白字符 #x20, ，#x9, ，#xD, ，或 #xA。
    ///</summary>
    Whitespace = 6;
    ///<summary>
    ///  一个处理指令，如 &lt;?pi test?&gt;。
    ///  这不包括 XML 声明，看不到 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  类。
    ///</summary>
    ProcessingInstruction = 7;
    ///<summary>
    ///  一个注释，如 &lt;!-- my comment --&gt;
    ///</summary>
    Comment = 8;
    ///<summary>
    ///  任一 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  节点类型。
    ///</summary>
    All = 9;
  end;




type


{ declares }

  DNPropertyCollection = interface; // type: System.Data.PropertyCollection, namespace: System.Data
  DNComponentCollection = interface; // type: System.ComponentModel.ComponentCollection, namespace: System.ComponentModel
  DNNameValueCollection = interface; // type: System.Collections.Specialized.NameValueCollection, namespace: System.Collections.Specialized
  DNHttpCookieCollection = interface; // type: System.Web.HttpCookieCollection, namespace: System.Web
  DNDataColumn = interface; // type: System.Data.DataColumn, namespace: System.Data
  DNDataSet = interface; // type: System.Data.DataSet, namespace: System.Data
  DNDataTable = interface; // type: System.Data.DataTable, namespace: System.Data
  DNDataView = interface; // type: System.Data.DataView, namespace: System.Data
  DNDataViewManager = interface; // type: System.Data.DataViewManager, namespace: System.Data
  DNDataRelation = interface; // type: System.Data.DataRelation, namespace: System.Data
  DNDataRow = interface; // type: System.Data.DataRow, namespace: System.Data
  DNDataRowView = interface; // type: System.Data.DataRowView, namespace: System.Data
  DNConstraintCollection = interface; // type: System.Data.ConstraintCollection, namespace: System.Data
  DNDataColumnCollection = interface; // type: System.Data.DataColumnCollection, namespace: System.Data
  DNDataRelationCollection = interface; // type: System.Data.DataRelationCollection, namespace: System.Data
  DNDataRowCollection = interface; // type: System.Data.DataRowCollection, namespace: System.Data
  DNDataTableCollection = interface; // type: System.Data.DataTableCollection, namespace: System.Data
  DNSqlColumnEncryptionKeyStoreProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider, namespace: System.Data.SqlClient
  DNSqlCredential = interface; // type: System.Data.SqlClient.SqlCredential, namespace: System.Data.SqlClient
  DNSqlBytes = interface; // type: System.Data.SqlTypes.SqlBytes, namespace: System.Data.SqlTypes
  DNSqlChars = interface; // type: System.Data.SqlTypes.SqlChars, namespace: System.Data.SqlTypes
  DNSqlXml = interface; // type: System.Data.SqlTypes.SqlXml, namespace: System.Data.SqlTypes
  DNPathData = interface; // type: System.Drawing.Drawing2D.PathData, namespace: System.Drawing.Drawing2D
  DNBitmapData = interface; // type: System.Drawing.Imaging.BitmapData, namespace: System.Drawing.Imaging
  DNColorPalette = interface; // type: System.Drawing.Imaging.ColorPalette, namespace: System.Drawing.Imaging
  DNEncoder = interface; // type: System.Drawing.Imaging.Encoder, namespace: System.Drawing.Imaging
  DNEncoderParameter = interface; // type: System.Drawing.Imaging.EncoderParameter, namespace: System.Drawing.Imaging
  DNEncoderParameters = interface; // type: System.Drawing.Imaging.EncoderParameters, namespace: System.Drawing.Imaging
  DNFrameDimension = interface; // type: System.Drawing.Imaging.FrameDimension, namespace: System.Drawing.Imaging
  DNImageAttributes = interface; // type: System.Drawing.Imaging.ImageAttributes, namespace: System.Drawing.Imaging
  DNImageCodecInfo = interface; // type: System.Drawing.Imaging.ImageCodecInfo, namespace: System.Drawing.Imaging
  DNImageFormat = interface; // type: System.Drawing.Imaging.ImageFormat, namespace: System.Drawing.Imaging
  DNPropertyItem = interface; // type: System.Drawing.Imaging.PropertyItem, namespace: System.Drawing.Imaging
  DNMargins = interface; // type: System.Drawing.Printing.Margins, namespace: System.Drawing.Printing
  DNPageSettings = interface; // type: System.Drawing.Printing.PageSettings, namespace: System.Drawing.Printing
  DNPaperSize = interface; // type: System.Drawing.Printing.PaperSize, namespace: System.Drawing.Printing
  DNPaperSource = interface; // type: System.Drawing.Printing.PaperSource, namespace: System.Drawing.Printing
  DNPrintController = interface; // type: System.Drawing.Printing.PrintController, namespace: System.Drawing.Printing
  DNPrinterResolution = interface; // type: System.Drawing.Printing.PrinterResolution, namespace: System.Drawing.Printing
  DNPrinterSettings = interface; // type: System.Drawing.Printing.PrinterSettings, namespace: System.Drawing.Printing
  DNPrinterSettings_PaperSizeCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PaperSizeCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_PaperSourceCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PaperSourceCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_PrinterResolutionCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_StringCollection = interface; // type: System.Drawing.Printing.PrinterSettings+StringCollection, namespace: System.Drawing.Printing
  DNITransaction = interface; // type: System.EnterpriseServices.ITransaction, namespace: System.EnterpriseServices
  DNPrintEventArgs = interface; // type: System.Drawing.Printing.PrintEventArgs, namespace: System.Drawing.Printing
  DNQueryPageSettingsEventArgs = interface; // type: System.Drawing.Printing.QueryPageSettingsEventArgs, namespace: System.Drawing.Printing
  DNGridViewCancelEditEventArgs = interface; // type: System.Web.UI.WebControls.GridViewCancelEditEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewDeleteEventArgs = interface; // type: System.Web.UI.WebControls.GridViewDeleteEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewEditEventArgs = interface; // type: System.Web.UI.WebControls.GridViewEditEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewPageEventArgs = interface; // type: System.Web.UI.WebControls.GridViewPageEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewSelectEventArgs = interface; // type: System.Web.UI.WebControls.GridViewSelectEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewSortEventArgs = interface; // type: System.Web.UI.WebControls.GridViewSortEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewUpdateEventArgs = interface; // type: System.Web.UI.WebControls.GridViewUpdateEventArgs, namespace: System.Web.UI.WebControls
  DNListChangedEventArgs = interface; // type: System.ComponentModel.ListChangedEventArgs, namespace: System.ComponentModel
  DNDataColumnChangeEventArgs = interface; // type: System.Data.DataColumnChangeEventArgs, namespace: System.Data
  DNDataRowChangeEventArgs = interface; // type: System.Data.DataRowChangeEventArgs, namespace: System.Data
  DNDataTableClearEventArgs = interface; // type: System.Data.DataTableClearEventArgs, namespace: System.Data
  DNDataTableNewRowEventArgs = interface; // type: System.Data.DataTableNewRowEventArgs, namespace: System.Data
  DNMergeFailedEventArgs = interface; // type: System.Data.MergeFailedEventArgs, namespace: System.Data
  DNOleDbInfoMessageEventArgs = interface; // type: System.Data.OleDb.OleDbInfoMessageEventArgs, namespace: System.Data.OleDb
  DNSqlInfoMessageEventArgs = interface; // type: System.Data.SqlClient.SqlInfoMessageEventArgs, namespace: System.Data.SqlClient
  DNStateChangeEventArgs = interface; // type: System.Data.StateChangeEventArgs, namespace: System.Data
  DNPrintPageEventArgs = interface; // type: System.Drawing.Printing.PrintPageEventArgs, namespace: System.Drawing.Printing
  DNCallingDataMethodsEventArgs = interface; // type: System.Web.UI.WebControls.CallingDataMethodsEventArgs, namespace: System.Web.UI.WebControls
  DNDataGridCommandEventArgs = interface; // type: System.Web.UI.WebControls.DataGridCommandEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewCommandEventArgs = interface; // type: System.Web.UI.WebControls.GridViewCommandEventArgs, namespace: System.Web.UI.WebControls
  DNCreatingModelDataSourceEventArgs = interface; // type: System.Web.UI.WebControls.CreatingModelDataSourceEventArgs, namespace: System.Web.UI.WebControls
  DNDataGridItemEventArgs = interface; // type: System.Web.UI.WebControls.DataGridItemEventArgs, namespace: System.Web.UI.WebControls
  DNDataGridPageChangedEventArgs = interface; // type: System.Web.UI.WebControls.DataGridPageChangedEventArgs, namespace: System.Web.UI.WebControls
  DNDataGridSortCommandEventArgs = interface; // type: System.Web.UI.WebControls.DataGridSortCommandEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewDeletedEventArgs = interface; // type: System.Web.UI.WebControls.GridViewDeletedEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewRowEventArgs = interface; // type: System.Web.UI.WebControls.GridViewRowEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewUpdatedEventArgs = interface; // type: System.Web.UI.WebControls.GridViewUpdatedEventArgs, namespace: System.Web.UI.WebControls
  DNValidationEventArgs = interface; // type: System.Xml.Schema.ValidationEventArgs, namespace: System.Xml.Schema
  DNXmlNodeChangedEventArgs = interface; // type: System.Xml.XmlNodeChangedEventArgs, namespace: System.Xml
  DNIComponent = interface; // type: System.ComponentModel.IComponent, namespace: System.ComponentModel
  DNIContainer = interface; // type: System.ComponentModel.IContainer, namespace: System.ComponentModel
  DNIDataReader = interface; // type: System.Data.IDataReader, namespace: System.Data
  DNISite = interface; // type: System.ComponentModel.ISite, namespace: System.ComponentModel
  DNDbCommand = interface; // type: System.Data.Common.DbCommand, namespace: System.Data.Common
  DNOleDbCommand = interface; // type: System.Data.OleDb.OleDbCommand, namespace: System.Data.OleDb
  DNSqlCommand = interface; // type: System.Data.SqlClient.SqlCommand, namespace: System.Data.SqlClient
  DNOleDbConnection = interface; // type: System.Data.OleDb.OleDbConnection, namespace: System.Data.OleDb
  DNSqlConnection = interface; // type: System.Data.SqlClient.SqlConnection, namespace: System.Data.SqlClient
  DNPrintDocument = interface; // type: System.Drawing.Printing.PrintDocument, namespace: System.Drawing.Printing
  DNStyle = interface; // type: System.Web.UI.WebControls.Style, namespace: System.Web.UI.WebControls
  DNTableItemStyle = interface; // type: System.Web.UI.WebControls.TableItemStyle, namespace: System.Web.UI.WebControls
  DNDataGridPagerStyle = interface; // type: System.Web.UI.WebControls.DataGridPagerStyle, namespace: System.Web.UI.WebControls
  DNDbDataReader = interface; // type: System.Data.Common.DbDataReader, namespace: System.Data.Common
  DNDataTableReader = interface; // type: System.Data.DataTableReader, namespace: System.Data
  DNOleDbDataReader = interface; // type: System.Data.OleDb.OleDbDataReader, namespace: System.Data.OleDb
  DNSqlDataReader = interface; // type: System.Data.SqlClient.SqlDataReader, namespace: System.Data.SqlClient
  DNDbTransaction = interface; // type: System.Data.Common.DbTransaction, namespace: System.Data.Common
  DNOleDbTransaction = interface; // type: System.Data.OleDb.OleDbTransaction, namespace: System.Data.OleDb
  DNSqlTransaction = interface; // type: System.Data.SqlClient.SqlTransaction, namespace: System.Data.SqlClient
  DNBrush = interface; // type: System.Drawing.Brush, namespace: System.Drawing
  DNGraphicsContainer = interface; // type: System.Drawing.Drawing2D.GraphicsContainer, namespace: System.Drawing.Drawing2D
  DNGraphicsPath = interface; // type: System.Drawing.Drawing2D.GraphicsPath, namespace: System.Drawing.Drawing2D
  DNGraphicsState = interface; // type: System.Drawing.Drawing2D.GraphicsState, namespace: System.Drawing.Drawing2D
  DNMatrix = interface; // type: System.Drawing.Drawing2D.Matrix, namespace: System.Drawing.Drawing2D
  DNFont = interface; // type: System.Drawing.Font, namespace: System.Drawing
  DNFontFamily = interface; // type: System.Drawing.FontFamily, namespace: System.Drawing
  DNGraphics = interface; // type: System.Drawing.Graphics, namespace: System.Drawing
  DNIcon = interface; // type: System.Drawing.Icon, namespace: System.Drawing
  DNImage = interface; // type: System.Drawing.Image, namespace: System.Drawing
  DNBitmap = interface; // type: System.Drawing.Bitmap, namespace: System.Drawing
  DNMetafile = interface; // type: System.Drawing.Imaging.Metafile, namespace: System.Drawing.Imaging
  DNPen = interface; // type: System.Drawing.Pen, namespace: System.Drawing
  DNRegion = interface; // type: System.Drawing.Region, namespace: System.Drawing
  DNStringFormat = interface; // type: System.Drawing.StringFormat, namespace: System.Drawing
  DNHtmlTextWriter = interface; // type: System.Web.UI.HtmlTextWriter, namespace: System.Web.UI
  DNICredentials = interface; // type: System.Net.ICredentials, namespace: System.Net
  DNNetworkCredential = interface; // type: System.Net.NetworkCredential, namespace: System.Net
  DNX500DistinguishedName = interface; // type: System.Security.Cryptography.X509Certificates.X500DistinguishedName, namespace: System.Security.Cryptography.X509Certificates
  DNOid = interface; // type: System.Security.Cryptography.Oid, namespace: System.Security.Cryptography
  DNPublicKey = interface; // type: System.Security.Cryptography.X509Certificates.PublicKey, namespace: System.Security.Cryptography.X509Certificates
  DNX509Certificate2 = interface; // type: System.Security.Cryptography.X509Certificates.X509Certificate2, namespace: System.Security.Cryptography.X509Certificates
  DNX509ExtensionCollection = interface; // type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection, namespace: System.Security.Cryptography.X509Certificates
  DNMatch = interface; // type: System.Text.RegularExpressions.Match, namespace: System.Text.RegularExpressions
  DNCaptureCollection = interface; // type: System.Text.RegularExpressions.CaptureCollection, namespace: System.Text.RegularExpressions
  DNGroupCollection = interface; // type: System.Text.RegularExpressions.GroupCollection, namespace: System.Text.RegularExpressions
  DNMatchCollection = interface; // type: System.Text.RegularExpressions.MatchCollection, namespace: System.Text.RegularExpressions
  DNRegex = interface; // type: System.Text.RegularExpressions.Regex, namespace: System.Text.RegularExpressions
  DNRegexCompilationInfo = interface; // type: System.Text.RegularExpressions.RegexCompilationInfo, namespace: System.Text.RegularExpressions
  DNTransaction = interface; // type: System.Transactions.Transaction, namespace: System.Transactions
  DNUri = interface; // type: System.Uri, namespace: System
  DNSqlBinary = interface; // type: System.Data.SqlTypes.SqlBinary, namespace: System.Data.SqlTypes
  DNSqlBoolean = interface; // type: System.Data.SqlTypes.SqlBoolean, namespace: System.Data.SqlTypes
  DNSqlByte = interface; // type: System.Data.SqlTypes.SqlByte, namespace: System.Data.SqlTypes
  DNSqlDateTime = interface; // type: System.Data.SqlTypes.SqlDateTime, namespace: System.Data.SqlTypes
  DNSqlDecimal = interface; // type: System.Data.SqlTypes.SqlDecimal, namespace: System.Data.SqlTypes
  DNSqlDouble = interface; // type: System.Data.SqlTypes.SqlDouble, namespace: System.Data.SqlTypes
  DNSqlGuid = interface; // type: System.Data.SqlTypes.SqlGuid, namespace: System.Data.SqlTypes
  DNSqlInt16 = interface; // type: System.Data.SqlTypes.SqlInt16, namespace: System.Data.SqlTypes
  DNSqlInt32 = interface; // type: System.Data.SqlTypes.SqlInt32, namespace: System.Data.SqlTypes
  DNSqlInt64 = interface; // type: System.Data.SqlTypes.SqlInt64, namespace: System.Data.SqlTypes
  DNSqlMoney = interface; // type: System.Data.SqlTypes.SqlMoney, namespace: System.Data.SqlTypes
  DNSqlSingle = interface; // type: System.Data.SqlTypes.SqlSingle, namespace: System.Data.SqlTypes
  DNSqlString = interface; // type: System.Data.SqlTypes.SqlString, namespace: System.Data.SqlTypes
  DNCharacterRange = interface; // type: System.Drawing.CharacterRange, namespace: System.Drawing
  DNColor = interface; // type: System.Drawing.Color, namespace: System.Drawing
  DNPoint = interface; // type: System.Drawing.Point, namespace: System.Drawing
  DNPointF = interface; // type: System.Drawing.PointF, namespace: System.Drawing
  DNRectangle = interface; // type: System.Drawing.Rectangle, namespace: System.Drawing
  DNRectangleF = interface; // type: System.Drawing.RectangleF, namespace: System.Drawing
  DNSize = interface; // type: System.Drawing.Size, namespace: System.Drawing
  DNSizeF = interface; // type: System.Drawing.SizeF, namespace: System.Drawing
  DNUnit = interface; // type: System.Web.UI.WebControls.Unit, namespace: System.Web.UI.WebControls
  DNCacheDependency = interface; // type: System.Web.Caching.CacheDependency, namespace: System.Web.Caching
  DNHttpCachePolicy = interface; // type: System.Web.HttpCachePolicy, namespace: System.Web
  DNHttpContext = interface; // type: System.Web.HttpContext, namespace: System.Web
  DNHttpCookie = interface; // type: System.Web.HttpCookie, namespace: System.Web
  DNHttpResponse = interface; // type: System.Web.HttpResponse, namespace: System.Web
  DNISubscriptionToken = interface; // type: System.Web.ISubscriptionToken, namespace: System.Web
  DNRouteValueDictionary = interface; // type: System.Web.Routing.RouteValueDictionary, namespace: System.Web.Routing
  DNAttributeCollection = interface; // type: System.Web.UI.AttributeCollection, namespace: System.Web.UI
  DNControl = interface; // type: System.Web.UI.Control, namespace: System.Web.UI
  DNTemplateControl = interface; // type: System.Web.UI.TemplateControl, namespace: System.Web.UI
  DNPage = interface; // type: System.Web.UI.Page, namespace: System.Web.UI
  DNWebControl = interface; // type: System.Web.UI.WebControls.WebControl, namespace: System.Web.UI.WebControls
  DNGridView = interface; // type: System.Web.UI.WebControls.GridView, namespace: System.Web.UI.WebControls
  DNDataGrid = interface; // type: System.Web.UI.WebControls.DataGrid, namespace: System.Web.UI.WebControls
  DNDataGridItem = interface; // type: System.Web.UI.WebControls.DataGridItem, namespace: System.Web.UI.WebControls
  DNGridViewRow = interface; // type: System.Web.UI.WebControls.GridViewRow, namespace: System.Web.UI.WebControls
  DNControlCollection = interface; // type: System.Web.UI.ControlCollection, namespace: System.Web.UI
  DNCssStyleCollection = interface; // type: System.Web.UI.CssStyleCollection, namespace: System.Web.UI
  DNIAutoFieldGenerator = interface; // type: System.Web.UI.IAutoFieldGenerator, namespace: System.Web.UI
  DNIDataSource = interface; // type: System.Web.UI.IDataSource, namespace: System.Web.UI
  DNITemplate = interface; // type: System.Web.UI.ITemplate, namespace: System.Web.UI
  DNDataControlFieldCollection = interface; // type: System.Web.UI.WebControls.DataControlFieldCollection, namespace: System.Web.UI.WebControls
  DNDataGridColumnCollection = interface; // type: System.Web.UI.WebControls.DataGridColumnCollection, namespace: System.Web.UI.WebControls
  DNDataGridItemCollection = interface; // type: System.Web.UI.WebControls.DataGridItemCollection, namespace: System.Web.UI.WebControls
  DNDataKey = interface; // type: System.Web.UI.WebControls.DataKey, namespace: System.Web.UI.WebControls
  DNDataKeyArray = interface; // type: System.Web.UI.WebControls.DataKeyArray, namespace: System.Web.UI.WebControls
  DNDataKeyCollection = interface; // type: System.Web.UI.WebControls.DataKeyCollection, namespace: System.Web.UI.WebControls
  DNFontInfo = interface; // type: System.Web.UI.WebControls.FontInfo, namespace: System.Web.UI.WebControls
  DNGridViewRowCollection = interface; // type: System.Web.UI.WebControls.GridViewRowCollection, namespace: System.Web.UI.WebControls
  DNPagerSettings = interface; // type: System.Web.UI.WebControls.PagerSettings, namespace: System.Web.UI.WebControls
  DNIXmlNamespaceResolver = interface; // type: System.Xml.IXmlNamespaceResolver, namespace: System.Xml
  DNIXmlSchemaInfo = interface; // type: System.Xml.Schema.IXmlSchemaInfo, namespace: System.Xml.Schema
  DNXmlSchemaType = interface; // type: System.Xml.Schema.XmlSchemaType, namespace: System.Xml.Schema
  DNXmlSchemaComplexType = interface; // type: System.Xml.Schema.XmlSchemaComplexType, namespace: System.Xml.Schema
  DNXmlSchemaSet = interface; // type: System.Xml.Schema.XmlSchemaSet, namespace: System.Xml.Schema
  DNXmlImplementation = interface; // type: System.Xml.XmlImplementation, namespace: System.Xml
  DNXmlAttributeCollection = interface; // type: System.Xml.XmlAttributeCollection, namespace: System.Xml
  DNXmlNamespaceManager = interface; // type: System.Xml.XmlNamespaceManager, namespace: System.Xml
  DNXmlNameTable = interface; // type: System.Xml.XmlNameTable, namespace: System.Xml
  DNXmlNode = interface; // type: System.Xml.XmlNode, namespace: System.Xml
  DNXmlAttribute = interface; // type: System.Xml.XmlAttribute, namespace: System.Xml
  DNXmlDocument = interface; // type: System.Xml.XmlDocument, namespace: System.Xml
  DNXmlDocumentFragment = interface; // type: System.Xml.XmlDocumentFragment, namespace: System.Xml
  DNXmlCDataSection = interface; // type: System.Xml.XmlCDataSection, namespace: System.Xml
  DNXmlComment = interface; // type: System.Xml.XmlComment, namespace: System.Xml
  DNXmlSignificantWhitespace = interface; // type: System.Xml.XmlSignificantWhitespace, namespace: System.Xml
  DNXmlText = interface; // type: System.Xml.XmlText, namespace: System.Xml
  DNXmlWhitespace = interface; // type: System.Xml.XmlWhitespace, namespace: System.Xml
  DNXmlDeclaration = interface; // type: System.Xml.XmlDeclaration, namespace: System.Xml
  DNXmlDocumentType = interface; // type: System.Xml.XmlDocumentType, namespace: System.Xml
  DNXmlElement = interface; // type: System.Xml.XmlElement, namespace: System.Xml
  DNXmlEntityReference = interface; // type: System.Xml.XmlEntityReference, namespace: System.Xml
  DNXmlProcessingInstruction = interface; // type: System.Xml.XmlProcessingInstruction, namespace: System.Xml
  DNXmlNodeList = interface; // type: System.Xml.XmlNodeList, namespace: System.Xml
  DNXmlReader = interface; // type: System.Xml.XmlReader, namespace: System.Xml
  DNXmlReaderSettings = interface; // type: System.Xml.XmlReaderSettings, namespace: System.Xml
  DNXmlResolver = interface; // type: System.Xml.XmlResolver, namespace: System.Xml
  DNXmlWriter = interface; // type: System.Xml.XmlWriter, namespace: System.Xml
  DNXPathExpression = interface; // type: System.Xml.XPath.XPathExpression, namespace: System.Xml.XPath
  DNXPathNavigator = interface; // type: System.Xml.XPath.XPathNavigator, namespace: System.Xml.XPath
  DNXPathNodeIterator = interface; // type: System.Xml.XPath.XPathNodeIterator, namespace: System.Xml.XPath

{ delegates }

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.ComponentModel.IBindingList.ListChanged" />
  ///  事件 <see cref="T:System.ComponentModel.IBindingList" />
  ///  类。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.ComponentModel.ListChangedEventHandler')]
  DNListChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNListChangedEventArgs) of object;

  ///<summary>
  ///  表示用来处理 <see cref="E:System.Data.DataTable.ColumnChanging" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.DataColumnChangeEventHandler')]
  DNDataColumnChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataColumnChangeEventArgs) of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Data.DataTable.RowChanging" />
  ///  , ，<see cref="E:System.Data.DataTable.RowChanged" />
  ///  , ，<see cref="E:System.Data.DataTable.RowDeleting" />
  ///  , ，和 <see cref="E:System.Data.DataTable.RowDeleted" />
  ///  事件 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.DataRowChangeEventHandler')]
  DNDataRowChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataRowChangeEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="M:System.Data.DataTable.Clear" />
  ///  方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.DataTableClearEventHandler')]
  DNDataTableClearEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataTableClearEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="M:System.Data.DataTable.NewRow" />
  ///  方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.DataTableNewRowEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.DataTableNewRowEventHandler')]
  DNDataTableNewRowEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataTableNewRowEventArgs) of object;

  ///<summary>
  ///  表示用来处理 <see cref="E:System.Data.DataSet.MergeFailed" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  事件的数据。
  ///</param>
  [DNTypeName('System.Data.MergeFailedEventHandler')]
  DNMergeFailedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMergeFailedEventArgs) of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" />
  ///  事件 <see cref="T:System.Data.OleDb.OleDbConnection" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.OleDb.OleDbInfoMessageEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Data.OleDb.OleDbInfoMessageEventHandler')]
  DNOleDbInfoMessageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOleDbInfoMessageEventArgs) of object;

  ///<summary>
  ///  表示将用来处理 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
  ///  的 <see cref="T:System.Data.SqlClient.SqlConnection" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.SqlClient.SqlInfoMessageEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Data.SqlClient.SqlInfoMessageEventHandler')]
  DNSqlInfoMessageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlInfoMessageEventArgs) of object;

  ///<summary>
  ///  表示用来处理 <see cref="E:System.Data.Common.DbConnection.StateChange" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.StateChangeEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.StateChangeEventHandler')]
  DNStateChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStateChangeEventArgs) of object;

  ///<summary>
  ///  提供回调方法，以决定何时 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  方法应过早地取消执行，并停止绘制图像。
  ///</summary>
  ///  <param name="callbackdata">
  ///  指定的回调方法的数据的内部指针。
  ///  此参数不传递由所有 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  重载。
  ///  您可以通过检查的值测试它是否存在 <see cref="F:System.IntPtr.Zero" />
  ///  。
  ///</param>
  ///<returns>
  ///  此方法返回 <see langword="true" />
  ///  它决定，如果 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  方法应提前停止执行。
  ///  否则，返回 <see langword="false" />
  ///  以指示 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  方法应继续执行。
  ///</returns>
  [DNTypeName('System.Drawing.Graphics+DrawImageAbort')]
  DNGraphics_DrawImageAbort = function(callbackdata: IntPtr): Boolean of object;

  ///<summary>
  ///  提供回调方法，以确定何时 <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)" />
  ///  方法应过早地取消执行。
  ///</summary>
  ///<returns>
  ///  此方法返回 <see langword="true" />
  ///  它决定，如果 <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)" />
  ///  方法应提前停止执行; 否则，它将返回 <see langword="false" />
  ///  。
  ///</returns>
  [DNTypeName('System.Drawing.Image+GetThumbnailImageAbort')]
  DNImage_GetThumbnailImageAbort = function: Boolean of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Drawing.Printing.PrintDocument.BeginPrint" />
  ///  或 <see cref="E:System.Drawing.Printing.PrintDocument.EndPrint" />
  ///  事件 <see cref="T:System.Drawing.Printing.PrintDocument" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Drawing.Printing.PrintEventHandler')]
  DNPrintEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPrintEventArgs) of object;

  ///<summary>
  ///  表示将用来处理 <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" />
  ///  的 <see cref="T:System.Drawing.Printing.PrintDocument" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Drawing.Printing.PrintPageEventHandler')]
  DNPrintPageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPrintPageEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Drawing.Printing.PrintDocument.QueryPageSettings" />
  ///  事件 <see cref="T:System.Drawing.Printing.PrintDocument" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Drawing.Printing.QueryPageSettingsEventHandler')]
  DNQueryPageSettingsEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNQueryPageSettingsEventArgs) of object;

  ///<summary>
  ///  表示 <see cref="E:System.Web.UI.WebControls.ModelDataSource.CallingDataMethods" />
  ///  事件的处理方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  事件数据。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.CallingDataMethodsEventHandler')]
  DNCallingDataMethodsEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCallingDataMethodsEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.DataBoundControl.CreatingModelDataSource" />
  ///  和 <see cref="E:System.Web.UI.WebControls.Repeater.CreatingModelDataSource" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.CreatingModelDataSourceEventHandler')]
  DNCreatingModelDataSourceEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCreatingModelDataSourceEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.DataGrid.CancelCommand" />
  ///  , ，<see cref="E:System.Web.UI.WebControls.DataGrid.DeleteCommand" />
  ///  , ，<see cref="E:System.Web.UI.WebControls.DataGrid.EditCommand" />
  ///  , ，<see cref="E:System.Web.UI.WebControls.DataGrid.ItemCommand" />
  ///  , ，和 <see cref="E:System.Web.UI.WebControls.DataGrid.UpdateCommand" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件。
  ///</summary>
  ///  <param name="source">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.DataGridCommandEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.DataGridCommandEventHandler')]
  DNDataGridCommandEventHandler = procedure(source: DDN.mscorlib.DNObject; e: DNDataGridCommandEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.DataGrid.ItemCreated" />
  ///  和 <see cref="E:System.Web.UI.WebControls.DataGrid.ItemDataBound" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.DataGridItemEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.DataGridItemEventHandler')]
  DNDataGridItemEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataGridItemEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.DataGrid.PageIndexChanged" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件。
  ///</summary>
  ///  <param name="source">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.DataGridPageChangedEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.DataGridPageChangedEventHandler')]
  DNDataGridPageChangedEventHandler = procedure(source: DDN.mscorlib.DNObject; e: DNDataGridPageChangedEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.DataGrid.SortCommand" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件。
  ///</summary>
  ///  <param name="source">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.DataGridSortCommandEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.DataGridSortCommandEventHandler')]
  DNDataGridSortCommandEventHandler = procedure(source: DDN.mscorlib.DNObject; e: DNDataGridSortCommandEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.RowCancelingEdit" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.GridViewCancelEditEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewCancelEditEventHandler')]
  DNGridViewCancelEditEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewCancelEditEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.RowCommand" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.GridViewCommandEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewCommandEventHandler')]
  DNGridViewCommandEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewCommandEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.RowDeleted" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  一个 <see cref="T:System.Web.UI.WebControls.GridViewDeletedEventArgs" />
  ///  包含事件数据。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewDeletedEventHandler')]
  DNGridViewDeletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewDeletedEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.RowDeleting" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.GridViewDeleteEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewDeleteEventHandler')]
  DNGridViewDeleteEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewDeleteEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.RowEditing" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.GridViewEditEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewEditEventHandler')]
  DNGridViewEditEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewEditEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.PageIndexChanging" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.GridViewPageEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewPageEventHandler')]
  DNGridViewPageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewPageEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.RowCreated" />
  ///  和 <see cref="E:System.Web.UI.WebControls.GridView.RowDataBound" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewRowEventHandler')]
  DNGridViewRowEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewRowEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.SelectedIndexChanging" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.GridViewSelectEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewSelectEventHandler')]
  DNGridViewSelectEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewSelectEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.Sorting" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.GridViewSortEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewSortEventHandler')]
  DNGridViewSortEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewSortEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.RowUpdated" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.GridViewUpdatedEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewUpdatedEventHandler')]
  DNGridViewUpdatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewUpdatedEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Web.UI.WebControls.GridView.RowUpdating" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.GridViewUpdateEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Web.UI.WebControls.GridViewUpdateEventHandler')]
  DNGridViewUpdateEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewUpdateEventArgs) of object;

  ///<summary>
  ///  表示将处理 XML 架构验证事件的回调方法和 <see cref="T:System.Xml.Schema.ValidationEventArgs" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///  注意    然后再使用它在代码中确定发件人的类型。
  ///  您不能假定发件人为特定类型的实例。
  ///  发件人也不保证不会是 null。
  ///  总是使用失败处理逻辑要求您强制转换。
  ///</param>
  ///  <param name="e">
  ///  事件数据。
  ///</param>
  [DNTypeName('System.Xml.Schema.ValidationEventHandler')]
  DNValidationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNValidationEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Xml.XmlDocument.NodeChanged" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeChanging" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeInserted" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeInserting" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeRemoved" />
  ///  和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" />
  ///  事件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Xml.XmlNodeChangedEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Xml.XmlNodeChangedEventHandler')]
  DNXmlNodeChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXmlNodeChangedEventArgs) of object;




{ objects }

  //-------------namespace: System.Data----------------
  DNPropertyCollectionClass = interface(DDN.mscorlib.DNHashtableClass)
  ['{C85F27D1-0548-568C-B2DE-C2FA42369C7F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.PropertyCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPropertyCollection;

  end;

  ///<summary>
  ///  表示可添加到的属性的集合 <see cref="T:System.Data.DataColumn" />
  ///  , ，<see cref="T:System.Data.DataSet" />
  ///  , ，或 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.PropertyCollection')]
  DNPropertyCollection = interface(DDN.mscorlib.DNHashtable)
  ['{AFC091BB-C65A-3D7B-B411-9FE3C18EFA6A}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Data.PropertyCollection" />
    ///  对象的浅表副本。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Object" />
    ///  , 的浅表副本 <see cref="T:System.Data.PropertyCollection" />
    ///  对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    procedure Add(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    procedure Clear;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsValue(value: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure Remove(key: DDN.mscorlib.DNObject);
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNPropertyCollection = class(TDNGenericImport<DNPropertyCollectionClass, DNPropertyCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{B7818FF0-6370-5A57-989D-24CCCEEE0165}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.ComponentCollection" />
    ///  类使用的组件指定的数组。
    ///</summary>
    ///  <param name="components">
    ///  一个数组 <see cref="T:System.ComponentModel.IComponent" />
    ///  对象来初始化具有的集合。
    ///</param>
    {class} function init(components: TArray<DNIComponent>): DNComponentCollection;

  end;

  ///<summary>
  ///  为 <see cref="T:System.ComponentModel.IComponent" />
  ///  对象的集合提供只读容器。
  ///</summary>
  [DNTypeName('System.ComponentModel.ComponentCollection')]
  DNComponentCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{9653003F-5A61-33CB-86E6-1BA38CED5DF8}']
  { getters & setters } 

    function get_Item(name: string): DNIComponent; overload;
    function get_Item(index: Int32): DNIComponent; overload;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  将整个集合复制到一个数组中开始写入指定的数组索引处。
    ///</summary>
    ///  <param name="array"><see cref="T:System.ComponentModel.IComponent" />
    ///  要向集合中复制的对象数组。
    ///</param>
    ///  <param name="index">
    ///  索引 <paramref name="array" />
    ///  哪些将复制到何时开始执行。
    ///</param>
    procedure CopyTo(&array: TArray<DNIComponent>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNIComponent read get_Item; default;
    property Item[index: Int32]: DNIComponent read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNComponentCollection = class(TDNGenericImport<DNComponentCollectionClass, DNComponentCollection>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNNameValueCollectionClass = interface(DNObjectClass)
  ['{8A48AC0E-4E01-5F5E-AB8C-561846E46221}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  类的新实例，该实例为空且具有默认初始容量，并使用不区分大小写的默认哈希代码提供程序和不区分大小写的默认比较器。
    ///</summary>
    {class} function init: DNNameValueCollection; overload;
    ///<summary>
    ///  将项从指定的 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  复制到一个新的 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  ，这个新集合的初始容量与复制的项数相等，并使用与源集合相同的哈希代码提供程序和比较器。
    ///</summary>
    ///  <param name="col">
    ///  要复制到新 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  实例的 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="col" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(col: DNNameValueCollection): DNNameValueCollection; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  类的新实例，该实例为空且具有默认初始容量，并使用指定的哈希代码提供程序和指定的比较器。
    ///</summary>
    ///  <param name="hashProvider"><see cref="T:System.Collections.IHashCodeProvider" />
    ///  将为 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中的所有键提供哈希代码。
    ///</param>
    ///  <param name="comparer"><see cref="T:System.Collections.IComparer" />
    ///  ，用于确定两个键是否相等。
    ///</param>
    {class} function init(hashProvider: DDN.mscorlib.DNIHashCodeProvider; comparer: DDN.mscorlib.DNIComparer): DNNameValueCollection; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  类的新实例，该实例为空且具有指定的初始容量，并使用不区分大小写的默认哈希代码提供程序和不区分大小写的默认比较器。
    ///</summary>
    ///  <param name="capacity"><see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  可包含的初始项数。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  小于零。
    ///</exception>
    {class} function init(capacity: Int32): DNNameValueCollection; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  类的新实例，该实例为空、具有默认的初始容量并使用指定的 <see cref="T:System.Collections.IEqualityComparer" />
    ///  对象。
    ///</summary>
    ///  <param name="equalityComparer"><see cref="T:System.Collections.IEqualityComparer" />
    ///  对象，用于确定两个键是否相等，并为集合中的键生成哈希代码。
    ///</param>
    {class} function init(equalityComparer: DDN.mscorlib.DNIEqualityComparer): DNNameValueCollection; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  类的新实例，该实例为空、具有指定的初始容量并使用指定的 <see cref="T:System.Collections.IEqualityComparer" />
    ///  对象。
    ///</summary>
    ///  <param name="capacity"><see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  对象可包含的初始项数。
    ///</param>
    ///  <param name="equalityComparer"><see cref="T:System.Collections.IEqualityComparer" />
    ///  对象，用于确定两个键是否相等，并为集合中的键生成哈希代码。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  小于零。
    ///</exception>
    {class} function init(capacity: Int32; equalityComparer: DDN.mscorlib.DNIEqualityComparer): DNNameValueCollection; overload;
    ///<summary>
    ///  将项从指定的 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  复制到一个新的 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  ，这个新集合使用指定的初始容量或与具有与复制的项数相等的初始容量（两者中较大的一个），并使用不区分大小写的默认哈希代码提供程序和不区分大小写的默认比较器。
    ///</summary>
    ///  <param name="capacity"><see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  可包含的初始项数。
    ///</param>
    ///  <param name="col">
    ///  要复制到新 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  实例的 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  小于零。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="col" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(capacity: Int32; col: DNNameValueCollection): DNNameValueCollection; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  类的新实例，该实例为空且具有指定的初始容量，并使用指定的哈希代码提供程序和指定的比较器。
    ///</summary>
    ///  <param name="capacity"><see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  可包含的初始项数。
    ///</param>
    ///  <param name="hashProvider"><see cref="T:System.Collections.IHashCodeProvider" />
    ///  将为 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中的所有键提供哈希代码。
    ///</param>
    ///  <param name="comparer"><see cref="T:System.Collections.IComparer" />
    ///  ，用于确定两个键是否相等。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />
    ///  小于零。
    ///</exception>
    {class} function init(capacity: Int32; hashProvider: DDN.mscorlib.DNIHashCodeProvider; comparer: DDN.mscorlib.DNIComparer): DNNameValueCollection; overload;

  end;

  ///<summary>
  ///  表示可通过键或索引访问的关联 <see cref="T:System.String" />
  ///  键和 <see cref="T:System.String" />
  ///  值的集合。
  ///</summary>
  [DNTypeName('System.Collections.Specialized.NameValueCollection')]
  DNNameValueCollection = interface(DNObject)
  ['{AA01B7E8-9A70-3252-B321-4D5D85FDEF2C}']
  { getters & setters } 

    function get_Item(name: string): string; overload;
    procedure set_Item(name: string; value: string);
    function get_Item(index: Int32): string; overload;
    function get_AllKeys: TArray<string>;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  将指定 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中的项复制到当前 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  。
    ///</summary>
    ///  <param name="c">
    ///  要复制到当前 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中的 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  该集合是只读的。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="c" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Add(c: DNNameValueCollection); overload;
    ///<summary>
    ///  使缓存数组无效，并将所有项从 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中移除。
    ///</summary>
    ///<exception cref="T:System.NotSupportedException">
    ///  该集合是只读的。
    ///</exception>
    procedure Clear;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  是否包含非 <see langword="null" />
    ///  的键。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  包含非 <see langword="null" />
    ///  的键，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasKeys: Boolean;
    ///<summary>
    ///  将具有指定名称和值的项添加到 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  要添加的项的 <see cref="T:System.String" />
    ///  键。
    ///  键可以是 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  要添加的项的 <see cref="T:System.String" />
    ///  值。
    ///  该值可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  该集合是只读的。
    ///</exception>
    procedure Add(name: string; value: string); overload;
    ///<summary>
    ///  获取与 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中的指定键关联的值，这些值已合并为一个以逗号分隔的列表。
    ///</summary>
    ///  <param name="name">
    ///  项的 <see cref="T:System.String" />
    ///  键，该项包含要获取的值。
    ///  键可以是 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果找到，则为一个 <see cref="T:System.String" />
    ///  ，包含与 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中的指定键关联的值的列表（此列表以逗号分隔）；否则为 <see langword="null" />
    ///  。
    ///</returns>
    function Get(name: string): string; overload;
    ///<summary>
    ///  获取与 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中的指定键关联的值。
    ///</summary>
    ///  <param name="name">
    ///  项的 <see cref="T:System.String" />
    ///  键，该项包含要获取的值。
    ///  键可以是 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果找到，则为一个 <see cref="T:System.String" />
    ///  数组，包含与 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中的指定键关联的值；否则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetValues(name: string): TArray<string>; overload;
    ///<summary>
    ///  设置 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中某个项的值。
    ///</summary>
    ///  <param name="name">
    ///  要向其添加新值的项的 <see cref="T:System.String" />
    ///  键。
    ///  键可以是 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  ，表示要添加到指定项的新值。
    ///  该值可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  该集合是只读的。
    ///</exception>
    procedure &Set(name: string; value: string);
    ///<summary>
    ///  移除 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
    ///  实例中具有指定键的项。
    ///</summary>
    ///  <param name="name">
    ///  要移除的项的 <see cref="T:System.String" />
    ///  键。
    ///  键可以是 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  该集合是只读的。
    ///</exception>
    procedure Remove(name: string);
    ///<summary>
    ///  获取 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中指定索引处的值，这些值已合并为一个以逗号分隔的列表。
    ///</summary>
    ///  <param name="index">
    ///  项的从零开始的索引，该项包含要从集合中获取的值。
    ///</param>
    ///<returns>
    ///  如果找到，则为一个 <see cref="T:System.String" />
    ///  ，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中指定索引处的值的列表（此列表以逗号分隔）；否则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  超出了集合的有效索引范围。
    ///</exception>
    function Get(index: Int32): string; overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中指定索引处的值。
    ///</summary>
    ///  <param name="index">
    ///  项的从零开始的索引，该项包含要从集合中获取的值。
    ///</param>
    ///<returns>
    ///  如果找到，则为一个 <see cref="T:System.String" />
    ///  数组，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中指定索引处的值；否则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  超出了集合的有效索引范围。
    ///</exception>
    function GetValues(index: Int32): TArray<string>; overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  的指定索引处的键。
    ///</summary>
    ///  <param name="index">
    ///  要从集合中获取的从零开始的键索引。
    ///</param>
    ///<returns>
    ///  如果找到，则为一个 <see cref="T:System.String" />
    ///  ，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中指定索引处的键；否则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  超出了集合的有效索引范围。
    ///</exception>
    function GetKey(index: Int32): string;
    ///<summary>
    ///  从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  复制到兼容的一维 <see cref="T:System.Array" />
    ///  。
    ///</summary>
    ///  <param name="dest">
    ///  一维 <see cref="T:System.Array" />
    ///  ，它是从 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  复制的元素的目标。
    ///<see cref="T:System.Array" />
    ///  必须具有从零开始的索引。
    ///</param>
    ///  <param name="index"><paramref name="dest" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dest" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  小于零。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="dest" />
    ///  是多维的。
    ///  - 或 -
    ///  源中的元素数目 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  大于从的可用空间 <paramref name="index" />
    ///  目标从头到尾 <paramref name="dest" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  源类型 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  无法自动转换为目标类型 <paramref name="dest" />
    ///  。
    ///</exception>
    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  返回循环访问 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
    ///  的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
    ///  实例的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  实现 <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  接口，并返回序列化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
    ///  实例所需的数据。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象，该对象包含序列化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
    ///  实例所需的信息。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象，该对象包含与 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
    ///  实例关联的序列化流的源和目标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>
    ///  实现 <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  接口，并在完成反序列化之后引发反序列化事件。
    ///</summary>
    ///  <param name="sender">
    ///  反序列化事件源。
    ///</param>
    ///<exception cref="T:System.Runtime.Serialization.SerializationException"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  关联与当前对象 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
    ///  实例无效。
    ///</exception>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: string read get_Item write set_Item; default;
    property Item[index: Int32]: string read get_Item; default;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中的所有键。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  数组，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  中的所有键。
    ///</returns>
    property AllKeys: TArray<string> read get_AllKeys;
    ///<summary>
    ///  获取包含在 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
    ///  实例中的键/值对的数目。
    ///</summary>
    ///<returns>
    ///  包含在 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
    ///  实例中的键/值对的数目。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNNameValueCollection = class(TDNGenericImport<DNNameValueCollectionClass, DNNameValueCollection>) end;

  //-------------namespace: System.Web----------------
  DNHttpCookieCollectionClass = interface(DNObjectClass)
  ['{34065803-D8DD-565B-AB5E-830C3D2059C0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.HttpCookieCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpCookieCollection;

  end;

  ///<summary>
  ///  提供用于操作 HTTP cookie 的类型安全方式。
  ///</summary>
  [DNTypeName('System.Web.HttpCookieCollection')]
  DNHttpCookieCollection = interface(DNObject)
  ['{145D8AE7-A57C-3F1A-BEAE-BD1E560B6E4C}']
  { getters & setters } 

    function get_Item(name: string): DNHttpCookie; overload;
    function get_Item(index: Int32): DNHttpCookie; overload;
    function get_AllKeys: TArray<string>;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  将指定的 cookie 添加到 cookie 集合。
    ///</summary>
    ///  <param name="cookie">
    ///  要添加到集合中的 <see cref="T:System.Web.HttpCookie" />
    ///  。
    ///</param>
    procedure Add(cookie: DNHttpCookie);
    ///<summary>
    ///  更新 cookie 集合中的现有 cookie 的值。
    ///</summary>
    ///  <param name="cookie"><see cref="T:System.Web.HttpCookie" />
    ///  要更新对象。
    ///</param>
    procedure &Set(cookie: DNHttpCookie);
    ///<summary>
    ///  从集合中移除具有指定名称的 cookie。
    ///</summary>
    ///  <param name="name">
    ///  要从集合中移除的 cookie 的名称。
    ///</param>
    procedure Remove(name: string);
    ///<summary>
    ///  清除 cookie 集合中的所有 cookie。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  从 cookie 集合中返回具有指定名称的 cookie。
    ///</summary>
    ///  <param name="name">
    ///  要从集合中检索的 cookie 的名称。
    ///</param>
    ///<returns>
    ///  由 <see cref="T:System.Web.HttpCookie" />
    ///  指定的 <paramref name="name" />
    ///  。
    ///</returns>
    function Get(name: string): DNHttpCookie; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Web.HttpCookie" />
    ///  与从 cookie 集合的指定索引的项。
    ///</summary>
    ///  <param name="index">
    ///  要从集合中返回的 cookie 的索引。
    ///</param>
    ///<returns>
    ///  由 <see cref="T:System.Web.HttpCookie" />
    ///  指定的 <paramref name="index" />
    ///  。
    ///</returns>
    function Get(index: Int32): DNHttpCookie; overload;
    ///<summary>
    ///  返回数字的指定索引处的 cookie 的键 （名称）。
    ///</summary>
    ///  <param name="index">
    ///  要从集合中检索的键的索引。
    ///</param>
    ///<returns>
    ///  指定的 cookie 的名称 <paramref name="index" />
    ///  。
    ///</returns>
    function GetKey(index: Int32): string;
    ///<summary>
    ///  将复制到 cookie 集合中的成员 <see cref="T:System.Array" />
    ///  数组的指定索引处开始。
    ///</summary>
    ///  <param name="dest">
    ///  目标 <see cref="T:System.Array" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  从此处开始复制的目标数组的索引。
    ///</param>
    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNHttpCookie read get_Item; default;
    property Item[index: Int32]: DNHttpCookie read get_Item; default;
    ///<summary>
    ///  获取一个字符串数组，包含中的所有键 （cookie 名称） cookie 集合。
    ///</summary>
    ///<returns>
    ///  Cookie 名称的数组。
    ///</returns>
    property AllKeys: TArray<string> read get_AllKeys;
    property Count: Int32 read get_Count;
  end;

  TDNHttpCookieCollection = class(TDNGenericImport<DNHttpCookieCollectionClass, DNHttpCookieCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnClass = interface(DNObjectClass)
  ['{AA653357-C952-55EF-A2AB-F65D2563C1D9}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataColumn" />
    ///  类作为字符串类型。
    ///</summary>
    {class} function init: DNDataColumn; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataColumn" />
    ///  类作为类型为字符串，使用指定的列名称。
    ///</summary>
    ///  <param name="columnName">
    ///  一个表示要创建的列的名称的字符串。
    ///  如果设置为 <see langword="null" />
    ///  或空字符串 ("")，添加到列集合时，将指定一个默认名称。
    ///</param>
    {class} function init(columnName: string): DNDataColumn; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataColumn" />
    ///  类使用指定的列名称和数据类型。
    ///</summary>
    ///  <param name="columnName">
    ///  一个表示要创建的列的名称的字符串。
    ///  如果设置为 <see langword="null" />
    ///  或空字符串 ("")，添加到列集合时，将指定一个默认名称。
    ///</param>
    ///  <param name="dataType">
    ///  支持 <see cref="P:System.Data.DataColumn.DataType" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  否 <paramref name="dataType" />
    ///  指定。
    ///</exception>
    {class} function init(columnName: string; dataType: DDN.mscorlib.DNType): DNDataColumn; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataColumn" />
    ///  类使用指定的名称、 数据类型和表达式。
    ///</summary>
    ///  <param name="columnName">
    ///  一个表示要创建的列的名称的字符串。
    ///  如果设置为 <see langword="null" />
    ///  或空字符串 ("")，添加到列集合时，将指定一个默认名称。
    ///</param>
    ///  <param name="dataType">
    ///  支持 <see cref="P:System.Data.DataColumn.DataType" />
    ///  。
    ///</param>
    ///  <param name="expr">
    ///  用来创建此列的表达式。
    ///  有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" />
    ///  属性。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  否 <paramref name="dataType" />
    ///  指定。
    ///</exception>
    {class} function init(columnName: string; dataType: DDN.mscorlib.DNType; expr: string): DNDataColumn; overload;

  end;

  ///<summary>
  ///  表示架构中的列 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataColumn')]
  DNDataColumn = interface(DNObject)
  ['{7AE16284-BC54-3D58-B276-B5B4D6D65157}']
  { getters & setters } 

    function get_AllowDBNull: Boolean;
    procedure set_AllowDBNull(value: Boolean);
    function get_AutoIncrement: Boolean;
    procedure set_AutoIncrement(value: Boolean);
    function get_AutoIncrementSeed: Int64;
    procedure set_AutoIncrementSeed(value: Int64);
    function get_AutoIncrementStep: Int64;
    procedure set_AutoIncrementStep(value: Int64);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_ColumnName: string;
    procedure set_ColumnName(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_DataType: DDN.mscorlib.DNType;
    procedure set_DataType(value: DDN.mscorlib.DNType);
    function get_DefaultValue: DDN.mscorlib.DNObject;
    procedure set_DefaultValue(value: DDN.mscorlib.DNObject);
    function get_Expression: string;
    procedure set_Expression(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Ordinal: Int32;
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Table: DNDataTable;
    function get_Unique: Boolean;
    procedure set_Unique(value: Boolean);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  更改序号或位置 <see cref="T:System.Data.DataColumn" />
    ///  到指定的序号或位置。
    ///</summary>
    ///  <param name="ordinal">
    ///  指定的序号。
    ///</param>
    procedure SetOrdinal(ordinal: Int32);
    ///<summary>
    ///  获取 <see cref="P:System.Data.DataColumn.Expression" />
    ///  列，如果存在。
    ///</summary>
    ///<returns><see cref="P:System.Data.DataColumn.Expression" />
    ///  值，此属性是否设置; 否则为 <see cref="P:System.Data.DataColumn.ColumnName" />
    ///  属性。
    ///</returns>
    function ToString: string;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否允许空值在本专栏中属于表的行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许 null 值的值;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property AllowDBNull: Boolean read get_AllowDBNull write set_AllowDBNull;
    ///<summary>
    ///  获取或设置一个值，指示该列是否自动递增的新行添加到表中列的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果列的值递增自动保存功能。，否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  列是计算所得的列。
    ///</exception>
    property AutoIncrement: Boolean read get_AutoIncrement write set_AutoIncrement;
    ///<summary>
    ///  获取或设置包含的列的起始值及其 <see cref="P:System.Data.DataColumn.AutoIncrement" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///  默认值为 0。
    ///</summary>
    ///<returns>
    ///  起始值为 <see cref="P:System.Data.DataColumn.AutoIncrement" />
    ///  特征。
    ///</returns>
    property AutoIncrementSeed: Int64 read get_AutoIncrementSeed write set_AutoIncrementSeed;
    ///<summary>
    ///  获取或设置某一列使用的增量其 <see cref="P:System.Data.DataColumn.AutoIncrement" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</summary>
    ///<returns>
    ///  列的值自动递增的编号。
    ///  默认值为 1。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值为零。
    ///</exception>
    property AutoIncrementStep: Int64 read get_AutoIncrementStep write set_AutoIncrementStep;
    ///<summary>
    ///  获取或设置列标题。
    ///</summary>
    ///<returns>
    ///  列的标题。
    ///  如果未设置，则返回 <see cref="P:System.Data.DataColumn.ColumnName" />
    ///  值。
    ///</returns>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  获取或设置中的列的名称 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  列的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性设置为 <see langword="null" />
    ///  或为空字符串和列属于一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有相同名称的列。
    ///  名称比较不区分大小写。
    ///</exception>
    property ColumnName: string read get_ColumnName write set_ColumnName;
    ///<summary>
    ///  获取或设置 XML 前缀的命名空间别名 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XML 前缀 <see cref="T:System.Data.DataTable" />
    ///  命名空间。
    ///</returns>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取或设置列中存储的数据类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  对象，表示列的数据类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  已在列存储的数据。
    ///</exception>
    property DataType: DDN.mscorlib.DNType read get_DataType write set_DataType;
    ///<summary>
    ///  获取或设置列的默认值，则在创建新行。
    ///</summary>
    ///<returns>
    ///  适合于列的值 <see cref="P:System.Data.DataColumn.DataType" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  当添加行时，默认值不是列的数据类型的实例。
    ///</exception>
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue write set_DefaultValue;
    ///<summary>
    ///  获取或设置用来筛选行、 计算列中的值或创建聚合列的表达式。
    ///</summary>
    ///<returns>
    ///  一个表达式来计算列的值或创建聚合列。
    ///  一个表达式，表达式的返回类型由 <see cref="P:System.Data.DataColumn.DataType" />
    ///  的列。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Data.DataColumn.AutoIncrement" />
    ///  或 <see cref="P:System.Data.DataColumn.Unique" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</exception><exception cref="T:System.FormatException">
    ///  当使用 CONVERT 函数时，表达式的计算结果为一个字符串，但该字符串不包含可以转换为类型参数中的表示形式。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  当使用 CONVERT 函数时，所请求的转换不可能。
    ///  请参阅下列部分获取有关可能的强制转换详细信息中的转换函数。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  当您使用 SUBSTRING 函数时，start 参数超出了范围。
    ///  - 或 -
    ///  当您使用 SUBSTRING 函数时，长度参数超出了范围。
    ///</exception><exception cref="T:System.Exception">
    ///  当您使用 LEN 函数或 TRIM 函数时，该表达式计算结果不为字符串。
    ///  这包括表达式的计算结果为 <see cref="T:System.Char" />
    ///  。
    ///</exception>
    property Expression: string read get_Expression write set_Expression;
    ///<summary>
    ///  获取与相关联的自定义用户信息的集合 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  的自定义信息。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    ///<summary>
    ///  获取或设置文本列的最大长度。
    ///</summary>
    ///<returns>
    ///  以字符为单位的列的最大长度。
    ///  如果该列具有没有最大长度，值为-1 （默认值）。
    ///</returns>
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    ///<summary>
    ///  获取或设置的命名空间 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名空间 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  命名空间已有数据。
    ///</exception>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取 （从零开始） 中的列的位置 <see cref="T:System.Data.DataColumnCollection" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  列的位置。
    ///  如果列不是某个集合的成员，则获取-1。
    ///</returns>
    property Ordinal: Int32 read get_Ordinal;
    ///<summary>
    ///  获取或设置一个值，指示行已添加到表时，就立即列是否允许的更改。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果列只读的;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性设置为 <see langword="false" />
    ///  计算所得的列。
    ///</exception>
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataTable" />
    ///  列属于对。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  ， <see cref="T:System.Data.DataColumn" />
    ///  属于。
    ///</returns>
    property Table: DNDataTable read get_Table;
    ///<summary>
    ///  获取或设置一个值，该值指示是否必须唯一列的每个行中的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果值必须是唯一的。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  列是计算的列。
    ///</exception>
    property Unique: Boolean read get_Unique write set_Unique;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataColumn = class(TDNGenericImport<DNDataColumnClass, DNDataColumn>) end;

  //-------------namespace: System.Data----------------
  DNDataSetClass = interface(DNObjectClass)
  ['{5BB739BB-F730-568F-B238-22587AD46860}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataSet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDataSet; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataSet" />
    ///  具有给定名称的类。
    ///</summary>
    ///  <param name="dataSetName"><see cref="T:System.Data.DataSet" />
    ///  的名称。
    ///</param>
    {class} function init(dataSetName: string): DNDataSet; overload;

  { static methods } 

    ///<summary>
    ///  获得一份 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  为数据集。
    ///</summary>
    ///  <param name="schemaSet">
    ///  指定的架构集中。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  的副本。
    ///</returns>
    {class} function GetDataSetSchema(schemaSet: DNXmlSchemaSet): DNXmlSchemaComplexType;

  end;

  ///<summary>
  ///  表示数据在内存中的缓存。
  ///</summary>
  [DNTypeName('System.Data.DataSet')]
  DNDataSet = interface(DNObject)
  ['{6E3DF7A0-377F-3A21-BB7C-C4C37F17758D}']
  { getters & setters } 

    function get_RemotingFormat: DNSerializationFormat;
    procedure set_RemotingFormat(value: DNSerializationFormat);
    function get_SchemaSerializationMode: DNSchemaSerializationMode;
    procedure set_SchemaSerializationMode(value: DNSchemaSerializationMode);
    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_DefaultViewManager: DNDataViewManager;
    function get_EnforceConstraints: Boolean;
    procedure set_EnforceConstraints(value: Boolean);
    function get_DataSetName: string;
    procedure set_DataSetName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_HasErrors: Boolean;
    function get_IsInitialized: Boolean;
    function get_Locale: DDN.mscorlib.DNCultureInfo;
    procedure set_Locale(value: DDN.mscorlib.DNCultureInfo);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Relations: DNDataRelationCollection;
    function get_Tables: DNDataTableCollection;
    function get_Container: DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_MergeFailed(value: DNMergeFailedEventHandler);
    procedure remove_MergeFailed(value: DNMergeFailedEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  使用序列化所需的数据填充序列化信息对象 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="info">
    ///  一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  ，它保存与 <see cref="T:System.Data.DataSet" />
    ///  关联的序列化数据。
    ///</param>
    ///  <param name="context">
    ///  一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  ，它包含与 <see cref="T:System.Data.DataSet" />
    ///  关联的序列化流的源和目标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>
    ///  对此所做的所有更改都提交 <see cref="T:System.Data.DataSet" />
    ///  加载以来或自上次以来 <see cref="M:System.Data.DataSet.AcceptChanges" />
    ///  调用。
    ///</summary>
    procedure AcceptChanges;
    ///<summary>
    ///  开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  初始化发生在运行时。
    ///</summary>
    procedure BeginInit;
    ///<summary>
    ///  结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" />
    ///  的初始化。
    ///  初始化发生在运行时。
    ///</summary>
    procedure EndInit;
    ///<summary>
    ///  清除 <see cref="T:System.Data.DataSet" />
    ///  的所有表中删除所有行的任何数据。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  将复制的结构 <see cref="T:System.Data.DataSet" />
    ///  , ，包括所有 <see cref="T:System.Data.DataTable" />
    ///  架构、 关系和约束。
    ///  不复制任何数据。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataSet" />
    ///  具有相同的架构与当前 <see cref="T:System.Data.DataSet" />
    ///  , ，但是不包含任何数据。
    ///</returns>
    function Clone: DNDataSet;
    ///<summary>
    ///  将结构和数据复制此 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataSet" />
    ///  具有相同的结构 （表架构、 关系和约束） 和数据格式设置为这 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  如果已创建这些类的子类，该副本也将属于相同的子类。
    ///</returns>
    function Copy: DNDataSet;
    ///<summary>
    ///  获得一份 <see cref="T:System.Data.DataSet" />
    ///  包含自加载后，或自从对它所做的所有更改 <see cref="M:System.Data.DataSet.AcceptChanges" />
    ///  上一次调用。
    ///</summary>
    ///<returns>
    ///  一份从此更改 <see cref="T:System.Data.DataSet" />
    ///  ，可能会有合并回使用在其上及更高版本所执行的操作 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
    ///  。
    ///  如果找到任何更改的行，该方法返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetChanges: DNDataSet; overload;
    ///<summary>
    ///  获得一份 <see cref="T:System.Data.DataSet" />
    ///  包含自上次加载或自从对其进行的所有更改 <see cref="M:System.Data.DataSet.AcceptChanges" />
    ///  被调用，通过筛选出 <see cref="T:System.Data.DataRowState" />
    ///  。
    ///</summary>
    ///  <param name="rowStates"><see cref="T:System.Data.DataRowState" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  筛选的副本 <see cref="T:System.Data.DataSet" />
    ///  ，可能会有合并回使用它，并随后所执行的操作 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
    ///  。
    ///  如果所需的任何行 <see cref="T:System.Data.DataRowState" />
    ///  找到，则此方法返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetChanges(rowStates: DNDataRowState): DNDataSet; overload;
    ///<summary>
    ///  返回的 XML 表示形式中存储的数据 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个字符串，它表示形式中存储的数据 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    function GetXml: string;
    ///<summary>
    ///  返回的 XML 表示形式中存储的数据的 XML 架构 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  字符串，它 XML 架构的 XML 表示形式中存储的数据 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    function GetXmlSchema: string;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" />
    ///  已经更改，包括新的、 已删除，或已修改的行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  已更改; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasChanges: Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" />
    ///  已经更改，包括新的、 已删除，或已修改的行，通过筛选 <see cref="T:System.Data.DataRowState" />
    ///  。
    ///</summary>
    ///  <param name="rowStates"><see cref="T:System.Data.DataRowState" />
    ///  值之一。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  已更改; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasChanges(rowStates: DNDataRowState): Boolean; overload;
    ///<summary>
    ///  将 XML 架构应用从指定 <see cref="T:System.Xml.XmlReader" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="XMLReader" />
    ///  从中读取该架构。
    ///</param>
    ///  <param name="nsArray">
    ///  要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
    ///</param>
    procedure InferXmlSchema(reader: DNXmlReader; nsArray: TArray<string>); overload;
    ///<summary>
    ///  将 XML 架构应用从指定 <see cref="T:System.IO.Stream" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see langword="Stream" />
    ///  从中读取该架构。
    ///</param>
    ///  <param name="nsArray">
    ///  要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
    ///</param>
    procedure InferXmlSchema(stream: DDN.mscorlib.DNStream; nsArray: TArray<string>); overload;
    ///<summary>
    ///  将 XML 架构应用从指定 <see cref="T:System.IO.TextReader" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="TextReader" />
    ///  从中读取该架构。
    ///</param>
    ///  <param name="nsArray">
    ///  要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
    ///</param>
    procedure InferXmlSchema(reader: DDN.mscorlib.DNTextReader; nsArray: TArray<string>); overload;
    ///<summary>
    ///  将 XML 架构应用从指定文件 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  从中读取该架构 （包括路径） 的文件的名称。
    ///</param>
    ///  <param name="nsArray">
    ///  要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />
    ///  。
    ///</exception>
    procedure InferXmlSchema(fileName: string; nsArray: TArray<string>); overload;
    ///<summary>
    ///  从指定读取的 XML 架构 <see cref="T:System.Xml.XmlReader" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  从中进行读取。
    ///</param>
    procedure ReadXmlSchema(reader: DNXmlReader); overload;
    ///<summary>
    ///  从指定读取的 XML 架构 <see cref="T:System.IO.Stream" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  从中进行读取。
    ///</param>
    procedure ReadXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  从指定读取的 XML 架构 <see cref="T:System.IO.TextReader" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.IO.TextReader" />
    ///  从中进行读取。
    ///</param>
    procedure ReadXmlSchema(reader: DDN.mscorlib.DNTextReader); overload;
    ///<summary>
    ///  从到指定的文件中读取 XML 架构 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  该文件的文件名 （包括路径） 从中进行读取。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />
    ///  。
    ///</exception>
    procedure ReadXmlSchema(fileName: string); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Data.DataSet" />
    ///  作为一个 XML 架构写入指定的结构 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  用来写入到的文件对象。
    ///</param>
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Data.DataSet" />
    ///  作为一个 XML 架构写入文件的结构。
    ///</summary>
    ///  <param name="fileName">
    ///  该文件的文件名 （包括路径） 向其写入。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />
    ///  。
    ///</exception>
    procedure WriteXmlSchema(fileName: string); overload;
    ///<summary>
    ///  将 <see cref="T:System.Data.DataSet" />
    ///  结构作为 XML 架构写入指定的 <see cref="T:System.IO.TextWriter" />
    ///  对象。
    ///</summary>
    ///  <param name="writer">
    ///  要进行写入的 <see cref="T:System.IO.TextWriter" />
    ///  对象。
    ///</param>
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Data.DataSet" />
    ///  结构作为 XML 架构写入 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</summary>
    ///  <param name="writer">
    ///  要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    procedure WriteXmlSchema(writer: DNXmlWriter); overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  从中进行读取。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DNXmlReader): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个对象，派生自 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(stream: DDN.mscorlib.DNStream): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="TextReader" />
    ///  从中进行读取的架构和数据。
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DDN.mscorlib.DNTextReader): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定的文件。
    ///</summary>
    ///  <param name="fileName">
    ///  从中进行读取文件名 （包括路径）。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />
    ///  。
    ///</exception>
    function ReadXml(fileName: string): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.Xml.XmlReader" />
    ///  和 <see cref="T:System.Data.XmlReadMode" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  从中进行读取。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlReadMode" />
    ///  值之一。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DNXmlReader; mode: DNXmlReadMode): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.Stream" />
    ///  和 <see cref="T:System.Data.XmlReadMode" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  从中进行读取。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlReadMode" />
    ///  值之一。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(stream: DDN.mscorlib.DNStream; mode: DNXmlReadMode): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.TextReader" />
    ///  和 <see cref="T:System.Data.XmlReadMode" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.IO.TextReader" />
    ///  从中进行读取。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlReadMode" />
    ///  值之一。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DDN.mscorlib.DNTextReader; mode: DNXmlReadMode): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定的文件和 <see cref="T:System.Data.XmlReadMode" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  从中进行读取文件名 （包括路径）。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlReadMode" />
    ///  值之一。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />
    ///  。
    ///</exception>
    function ReadXml(fileName: string; mode: DNXmlReadMode): DNXmlReadMode; overload;
    ///<summary>
    ///  当前数据写入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  用来写入到的文件对象。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  当前数据写入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  要写入的对象。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  当前数据写入 <see cref="T:System.Data.DataSet" />
    ///  到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用其进行写。
    ///</param>
    procedure WriteXml(writer: DNXmlWriter); overload;
    ///<summary>
    ///  当前数据写入 <see cref="T:System.Data.DataSet" />
    ///  写入指定的文件。
    ///</summary>
    ///  <param name="fileName">
    ///  该文件的文件名 （包括路径） 向其写入。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />
    ///  。
    ///</exception>
    procedure WriteXml(fileName: string); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.Stream" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  用来写入到的文件对象。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.TextWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  一个 <see cref="T:System.IO.TextWriter" />
    ///  用来写入的文档对象。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.Xml.XmlWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用其进行写。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(writer: DNXmlWriter; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" />
    ///  写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  该文件的文件名 （包括路径） 向其写入。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />
    ///  。
    ///</exception>
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataSet" />
    ///  到当前及其架构 <see langword="DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet"><see langword="DataSet" />
    ///  将合并其数据和架构。
    ///</param>
    ///<exception cref="T:System.Data.ConstraintException">
    ///  不能启用一个或多个约束。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="dataSet" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Merge(dataSet: DNDataSet); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataSet" />
    ///  到当前及其架构 <see langword="DataSet" />
    ///  , 、 保留或放弃这中的任何更改 <see langword="DataSet" />
    ///  根据给定的参数。
    ///</summary>
    ///  <param name="dataSet"><see langword="DataSet" />
    ///  将合并其数据和架构。
    ///</param>
    ///  <param name="preserveChanges"><see langword="true" />
    ///  若要保留在当前更改 <see langword="DataSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure Merge(dataSet: DNDataSet; preserveChanges: Boolean); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataSet" />
    ///  且其架构与当前 <see langword="DataSet" />
    ///  , 、 保留或放弃更改在当前 <see langword="DataSet" />
    ///  并处理根据给定的参数不兼容的架构。
    ///</summary>
    ///  <param name="dataSet"><see langword="DataSet" />
    ///  将合并其数据和架构。
    ///</param>
    ///  <param name="preserveChanges"><see langword="true" />
    ///  若要保留在当前更改 <see langword="DataSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="missingSchemaAction"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dataSet" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Merge(dataSet: DNDataSet; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataTable" />
    ///  到当前及其架构 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="table"><see cref="T:System.Data.DataTable" />
    ///  将合并其数据和架构。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="table" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Merge(table: DNDataTable); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataTable" />
    ///  到当前及其架构 <see langword="DataSet" />
    ///  , 、 保留或放弃更改 <see langword="DataSet" />
    ///  并处理根据给定的参数不兼容的架构。
    ///</summary>
    ///  <param name="table"><see langword="DataTable" />
    ///  将合并其数据和架构。
    ///</param>
    ///  <param name="preserveChanges"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    ///  <param name="missingSchemaAction"><see langword="true" />
    ///  若要保留中的更改 <see langword="DataSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dataSet" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Merge(table: DNDataTable; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    ///<summary>
    ///  数组合并 <see cref="T:System.Data.DataRow" />
    ///  对象发送到当前 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="rows">
    ///  数组 <see langword="DataRow" />
    ///  对象合并到 <see langword="DataSet" />
    ///  。
    ///</param>
    procedure Merge(rows: TArray<DNDataRow>); overload;
    ///<summary>
    ///  数组合并 <see cref="T:System.Data.DataRow" />
    ///  对象发送到当前 <see cref="T:System.Data.DataSet" />
    ///  , 、 保留或放弃更改 <see langword="DataSet" />
    ///  并处理根据给定的参数不兼容的架构。
    ///</summary>
    ///  <param name="rows">
    ///  数组 <see cref="T:System.Data.DataRow" />
    ///  对象合并到 <see langword="DataSet" />
    ///  。
    ///</param>
    ///  <param name="preserveChanges"><see langword="true" />
    ///  若要保留中的更改 <see langword="DataSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="missingSchemaAction"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    procedure Merge(rows: TArray<DNDataRow>; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    ///<summary>
    ///  回滚对所做的所有更改 <see cref="T:System.Data.DataSet" />
    ///  创建以来，它，或自从上次 <see cref="M:System.Data.DataSet.AcceptChanges" />
    ///  调用。
    ///</summary>
    procedure RejectChanges;
    ///<summary>
    ///  清除所有表并删除所有关系、 外部约束和表从 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  子类应重写 <see cref="M:System.Data.DataSet.Reset" />
    ///  还原 <see cref="T:System.Data.DataSet" />
    ///  到其原始状态。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  填充 <see cref="T:System.Data.DataSet" />
    ///  使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />
    ///  , ，使用数组 <see cref="T:System.Data.DataTable" />
    ///  实例，以提供架构和命名空间的信息。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Data.IDataReader" />
    ///  ，它提供一个或多个结果集。
    ///</param>
    ///  <param name="loadOption">
    ///  取值范围为 <see cref="T:System.Data.LoadOption" />
    ///  枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" />
    ///  实例内 <see cref="T:System.Data.DataSet" />
    ///  组合在一起共享相同的主键的传入行。
    ///</param>
    ///  <param name="tables">
    ///  一个数组 <see cref="T:System.Data.DataTable" />
    ///  情况下的，从其 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />
    ///  方法检索名称和命名空间的信息。
    ///  每个表必须是属于 <see cref="T:System.Data.DataTableCollection" />
    ///  包含由此 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; tables: TArray<DNDataTable>); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Data.DataSet" />
    ///  使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />
    ///  , ，使用一个字符串数组提供中的表名称，从而 <see langword="DataSet" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Data.IDataReader" />
    ///  ，它提供一个或多个结果集。
    ///</param>
    ///  <param name="loadOption">
    ///  取值范围为 <see cref="T:System.Data.LoadOption" />
    ///  枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" />
    ///  实例内 <see langword="DataSet" />
    ///  组合在一起共享相同的主键的传入行。
    ///</param>
    ///  <param name="tables">
    ///  一个字符串，从该数组 <see langword="Load" />
    ///  方法检索表名称信息。
    ///</param>
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; tables: TArray<string>); overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataTableReader" />
    ///  带有每个设置的一个结果 <see cref="T:System.Data.DataTable" />
    ///  , ，请在表中出现在相同序列 <see cref="P:System.Data.DataSet.Tables" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTableReader" />
    ///  包含一个或多个结果集，对应于 <see cref="T:System.Data.DataTable" />
    ///  源中包含的实例 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    function CreateDataReader: DNDataTableReader; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataTableReader" />
    ///  带有每个设置的一个结果 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="dataTables">
    ///  要在中返回 DataTables 提供结果的顺序的数组集 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTableReader" />
    ///  包含一个或多个结果集，对应于 <see cref="T:System.Data.DataTable" />
    ///  源中包含的实例 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  返回的结果集是按指定顺序 <paramref name="dataTables" />
    ///  参数。
    ///</returns>
    function CreateDataReader(dataTables: TArray<DNDataTable>): DNDataTableReader; overload;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.SerializationFormat" />
    ///  为 <see cref="T:System.Data.DataSet" />
    ///  远程处理期间使用。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SerializationFormat" />
    ///  对象。
    ///</returns>
    property RemotingFormat: DNSerializationFormat read get_RemotingFormat write set_RemotingFormat;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.SchemaSerializationMode" />
    ///  为 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  获取或设置 <see cref="T:System.Data.SchemaSerializationMode" />
    ///  为 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property SchemaSerializationMode: DNSchemaSerializationMode read get_SchemaSerializationMode write set_SchemaSerializationMode;
    ///<summary>
    ///  获取或设置一个值，该值指示是否中的字符串比较 <see cref="T:System.Data.DataTable" />
    ///  对象是区分大小写。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果字符串比较是区分大小写。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    ///<summary>
    ///  获取中包含的数据的自定义视图 <see cref="T:System.Data.DataSet" />
    ///  以允许筛选、 搜索和导航使用自定义 <see cref="T:System.Data.DataViewManager" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataViewManager" />
    ///  对象。
    ///</returns>
    property DefaultViewManager: DNDataViewManager read get_DefaultViewManager;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在尝试任何更新操作时遵循约束规则。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果强制执行规则;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.ConstraintException">
    ///  一个或多个约束不能强制实施。
    ///</exception>
    property EnforceConstraints: Boolean read get_EnforceConstraints write set_EnforceConstraints;
    ///<summary>
    ///  获取或设置的当前名称 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataSet" />
    ///  的名称。
    ///</returns>
    property DataSetName: string read get_DataSetName write set_DataSetName;
    ///<summary>
    ///  获取或设置的命名空间 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名空间 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  命名空间已有数据。
    ///</exception>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置 XML 前缀的命名空间别名 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XML 前缀 <see cref="T:System.Data.DataSet" />
    ///  命名空间。
    ///</returns>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取与相关联的自定义的用户信息的集合 <see langword="DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  与自定义用户的所有信息。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    ///<summary>
    ///  获取一个值，该值指示在任何中是否有错误 <see cref="T:System.Data.DataTable" />
    ///  对象在此 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果任何表中包含错误，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasErrors: Boolean read get_HasErrors;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" />
    ///  初始化。
    ///</summary>
    ///<returns><see langword="true" />
    ///  指示组件已完成初始化，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInitialized: Boolean read get_IsInitialized;
    ///<summary>
    ///  获取或设置用来比较字符串表中的区域设置信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  ，其中包含有关用户的计算机区域设置的数据。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Locale: DDN.mscorlib.DNCultureInfo read get_Locale write set_Locale;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataSet" />
    ///  的 <see cref="T:System.ComponentModel.ISite" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.ComponentModel.ISite" />
    ///  的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property Site: DNISite read get_Site write set_Site;
    ///<summary>
    ///  获取关系链接表，并允许导航从父表到子表的集合。
    ///</summary>
    ///<returns>
    ///  一个包含 <see cref="T:System.Data.DataRelationCollection" />
    ///  对象集合的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" />
    ///  存在的对象。
    ///</returns>
    property Relations: DNDataRelationCollection read get_Relations;
    ///<summary>
    ///  获取集合中包含的表 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTableCollection" />
    ///  包含由此 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.DataTable" />
    ///  存在的对象。
    ///</returns>
    property Tables: DNDataTableCollection read get_Tables;
    property Container: DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataSet = class(TDNGenericImport<DNDataSetClass, DNDataSet>) end;

  //-------------namespace: System.Data----------------
  DNDataTableClass = interface(DNObjectClass)
  ['{00EA467F-E9AF-5824-8F4E-345226A80AD5}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataTable" />
    ///  不带任何参数的类。
    ///</summary>
    {class} function init: DNDataTable; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataTable" />
    ///  初始化具有指定的表名称。
    ///</summary>
    ///  <param name="tableName">
    ///  要为表提供的名称。
    ///  如果 <paramref name="tableName" />
    ///  是 <see langword="null" />
    ///  也不为空字符串，默认名称是在添加到 <see cref="T:System.Data.DataTableCollection" />
    ///  。
    ///</param>
    {class} function init(tableName: string): DNDataTable; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataTable" />
    ///  类使用指定的表名和命名空间。
    ///</summary>
    ///  <param name="tableName">
    ///  要为表提供的名称。
    ///  如果 <paramref name="tableName" />
    ///  是 <see langword="null" />
    ///  也不为空字符串，默认名称是在添加到 <see cref="T:System.Data.DataTableCollection" />
    ///  。
    ///</param>
    ///  <param name="tableNamespace">
    ///  XML 表示形式中存储的数据的命名空间 <see langword="DataTable" />
    ///  。
    ///</param>
    {class} function init(tableName: string; tableNamespace: string): DNDataTable; overload;

  { static methods } 

    ///<summary>
    ///  此方法返回 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  实例，包含 Web 服务描述语言 (WSDL) 描述 <see cref="T:System.Data.DataTable" />
    ///  为 Web 服务。
    ///</summary>
    ///  <param name="schemaSet">
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  实例。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  实例。
    ///</returns>
    {class} function GetDataTableSchema(schemaSet: DNXmlSchemaSet): DNXmlSchemaComplexType;

  end;

  ///<summary>
  ///  表示内存中数据的一个表。
  ///</summary>
  [DNTypeName('System.Data.DataTable')]
  DNDataTable = interface(DNObject)
  ['{56839C77-582D-3A29-AEB5-7011A8335593}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_IsInitialized: Boolean;
    function get_RemotingFormat: DNSerializationFormat;
    procedure set_RemotingFormat(value: DNSerializationFormat);
    function get_ChildRelations: DNDataRelationCollection;
    function get_Columns: DNDataColumnCollection;
    function get_Constraints: DNConstraintCollection;
    function get_DataSet: DNDataSet;
    function get_DefaultView: DNDataView;
    function get_DisplayExpression: string;
    procedure set_DisplayExpression(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_HasErrors: Boolean;
    function get_Locale: DDN.mscorlib.DNCultureInfo;
    procedure set_Locale(value: DDN.mscorlib.DNCultureInfo);
    function get_MinimumCapacity: Int32;
    procedure set_MinimumCapacity(value: Int32);
    function get_ParentRelations: DNDataRelationCollection;
    function get_PrimaryKey: TArray<DNDataColumn>;
    procedure set_PrimaryKey(value: TArray<DNDataColumn>);
    function get_Rows: DNDataRowCollection;
    function get_TableName: string;
    procedure set_TableName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ColumnChanging(value: DNDataColumnChangeEventHandler);
    procedure remove_ColumnChanging(value: DNDataColumnChangeEventHandler);
    procedure add_ColumnChanged(value: DNDataColumnChangeEventHandler);
    procedure remove_ColumnChanged(value: DNDataColumnChangeEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_RowChanged(value: DNDataRowChangeEventHandler);
    procedure remove_RowChanged(value: DNDataRowChangeEventHandler);
    procedure add_RowChanging(value: DNDataRowChangeEventHandler);
    procedure remove_RowChanging(value: DNDataRowChangeEventHandler);
    procedure add_RowDeleting(value: DNDataRowChangeEventHandler);
    procedure remove_RowDeleting(value: DNDataRowChangeEventHandler);
    procedure add_RowDeleted(value: DNDataRowChangeEventHandler);
    procedure remove_RowDeleted(value: DNDataRowChangeEventHandler);
    procedure add_TableClearing(value: DNDataTableClearEventHandler);
    procedure remove_TableClearing(value: DNDataTableClearEventHandler);
    procedure add_TableCleared(value: DNDataTableClearEventHandler);
    procedure remove_TableCleared(value: DNDataTableClearEventHandler);
    procedure add_TableNewRow(value: DNDataTableNewRowEventHandler);
    procedure remove_TableNewRow(value: DNDataTableNewRowEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  使用序列化所需的数据填充序列化信息对象 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="info">
    ///  一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象，其中包含与关联的序列化的数据 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="context">
    ///  一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象，其中包含的源和目标与相关联的序列化流 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>
    ///  开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  初始化发生在运行时。
    ///</summary>
    procedure BeginInit;
    ///<summary>
    ///  结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" />
    ///  的初始化。
    ///  初始化发生在运行时。
    ///</summary>
    procedure EndInit;
    ///<summary>
    ///  提交自上次对此表所做的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" />
    ///  调用。
    ///</summary>
    procedure AcceptChanges;
    ///<summary>
    ///  克隆的结构 <see cref="T:System.Data.DataTable" />
    ///  , ，包括所有 <see cref="T:System.Data.DataTable" />
    ///  架构和约束。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  具有相同的架构与当前 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function Clone: DNDataTable;
    ///<summary>
    ///  将结构和数据复制此 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  具有相同的结构 （表架构和约束） 和数据格式设置为这 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  如果派生的类，该副本也将属于相同的派生类。
    ///<see cref="M:System.Data.DataTable.Copy" />
    ///  创建一个新 <see cref="T:System.Data.DataTable" />
    ///  具有相同的结构和数据作为原始 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  若要复制到新结构 <see cref="T:System.Data.DataTable" />
    ///  , ，但不是数据，使用 <see cref="M:System.Data.DataTable.Clone" />
    ///  。
    ///</returns>
    function Copy: DNDataTable;
    ///<summary>
    ///  清除 <see cref="T:System.Data.DataTable" />
    ///  的所有数据。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  计算传递的筛选条件的当前行上给定的表达式。
    ///</summary>
    ///  <param name="expression">
    ///  要计算的表达式。
    ///</param>
    ///  <param name="filter">
    ///  筛选器来限制在表达式中计算的行。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  , ，设置为计算的结果。
    ///  如果表达式的计算结果为 null，则返回值将 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</returns>
    function Compute(expression: string; filter: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获得一份 <see cref="T:System.Data.DataTable" />
    ///  包含自加载后对其进行的所有更改或 <see cref="M:System.Data.DataTable.AcceptChanges" />
    ///  上一次调用。
    ///</summary>
    ///<returns>
    ///  一份从此更改 <see cref="T:System.Data.DataTable" />
    ///  , ，或 <see langword="null" />
    ///  如果找不到任何更改。
    ///</returns>
    function GetChanges: DNDataTable; overload;
    ///<summary>
    ///  获得一份 <see cref="T:System.Data.DataTable" />
    ///  包含自上次加载或自从对其进行的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" />
    ///  被调用，通过筛选出 <see cref="T:System.Data.DataRowState" />
    ///  。
    ///</summary>
    ///  <param name="rowStates"><see cref="T:System.Data.DataRowState" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  筛选的副本 <see cref="T:System.Data.DataTable" />
    ///  ，可能会有合并回它，及更高版本所执行的操作 <see cref="T:System.Data.DataTable" />
    ///  使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
    ///  。
    ///  如果所需的任何行 <see cref="T:System.Data.DataRowState" />
    ///  找到，则此方法返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetChanges(rowStates: DNDataRowState): DNDataTable; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Data.DataRow" />
    ///  包含错误的对象。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  具有错误的对象。
    ///</returns>
    function GetErrors: TArray<DNDataRow>;
    ///<summary>
    ///  副本 <see cref="T:System.Data.DataRow" />
    ///  到 <see cref="T:System.Data.DataTable" />
    ///  , ，保留任何属性的设置，以及原始值和当前值。
    ///</summary>
    ///  <param name="row"><see cref="T:System.Data.DataRow" />
    ///  要导入。
    ///</param>
    procedure ImportRow(row: DNDataRow);
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.DataRow" />
    ///  具有与表相同的架构。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  相同的架构与 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function NewRow: DNDataRow;
    ///<summary>
    ///  回滚对表自加载后或从上次所做的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" />
    ///  调用。
    ///</summary>
    procedure RejectChanges;
    ///<summary>
    ///  重置 <see cref="T:System.Data.DataTable" />
    ///  到其原始状态。
    ///  重置中删除所有数据、 索引、 关系和表的列。
    ///  如果数据集包含一个数据表，该表表重置之后仍可将数据集的一部分。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  获取所有的数组 <see cref="T:System.Data.DataRow" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</returns>
    function Select: TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取所有的数组 <see cref="T:System.Data.DataRow" />
    ///  与筛选条件匹配的对象。
    ///</summary>
    ///  <param name="filterExpression">
    ///  要用于筛选的行的条件。
    ///  有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</returns>
    function Select(filterExpression: string): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取所有的数组 <see cref="T:System.Data.DataRow" />
    ///  相匹配的筛选条件，在指定的排序顺序中的对象。
    ///</summary>
    ///  <param name="filterExpression">
    ///  要用于筛选的行的条件。
    ///  有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。
    ///</param>
    ///  <param name="sort">
    ///  一个字符串，指定的列和排序方向。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  匹配筛选器表达式的对象。
    ///</returns>
    function Select(filterExpression: string; sort: string): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取所有的数组 <see cref="T:System.Data.DataRow" />
    ///  排序顺序的筛选器匹配指定的状态相匹配的对象。
    ///</summary>
    ///  <param name="filterExpression">
    ///  要用于筛选的行的条件。
    ///  有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。
    ///</param>
    ///  <param name="sort">
    ///  一个字符串，指定的列和排序方向。
    ///</param>
    ///  <param name="recordStates"><see cref="T:System.Data.DataViewRowState" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</returns>
    function Select(filterExpression: string; sort: string; recordStates: DNDataViewRowState): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取 <see cref="P:System.Data.DataTable.TableName" />
    ///  和 <see cref="P:System.Data.DataTable.DisplayExpression" />
    ///  , ，如果有另一个用作的串联字符串。
    ///</summary>
    ///<returns>
    ///  组成的字符串 <see cref="P:System.Data.DataTable.TableName" />
    ///  和 <see cref="P:System.Data.DataTable.DisplayExpression" />
    ///  值。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  加载数据时关闭通知、 索引维护和约束。
    ///</summary>
    procedure BeginLoadData;
    ///<summary>
    ///  在加载数据后打开通知、 索引维护和约束。
    ///</summary>
    procedure EndLoadData;
    ///<summary>
    ///  查找并更新特定行。
    ///  如果未不找到任何匹配的行，使用给定的值创建一个新行。
    ///</summary>
    ///  <param name="values">
    ///  用于创建新行的值的数组。
    ///</param>
    ///  <param name="fAcceptChanges"><see langword="true" />
    ///  若要接受更改，则否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该数组将大于表中的列数。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  值不匹配其各自的列类型。
    ///</exception><exception cref="T:System.Data.ConstraintException">
    ///  添加行使约束无效。
    ///</exception><exception cref="T:System.Data.NoNullAllowedException">
    ///  正在尝试放入列中的 null 其中 <see cref="P:System.Data.DataColumn.AllowDBNull" />
    ///  为 false。
    ///</exception>
    function LoadDataRow(values: TArray<DDN.mscorlib.DNObject>; fAcceptChanges: Boolean): DNDataRow; overload;
    ///<summary>
    ///  查找并更新特定行。
    ///  如果未不找到任何匹配的行，使用给定的值创建一个新行。
    ///</summary>
    ///  <param name="values">
    ///  用于创建新行的值的数组。
    ///</param>
    ///  <param name="loadOption">
    ///  用于确定如何将数组值应用于现有行中的相应值。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</returns>
    function LoadDataRow(values: TArray<DDN.mscorlib.DNObject>; loadOption: DNLoadOption): DNDataRow; overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataTable" />
    ///  与当前 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="table"><see cref="T:System.Data.DataTable" />
    ///  要与当前合并 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    procedure Merge(table: DNDataTable); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataTable" />
    ///  与当前 <see langword="DataTable" />
    ///  , ，，该值指示是否保留在当前更改 <see langword="DataTable" />
    ///  。
    ///</summary>
    ///  <param name="table"><see langword="DataTable" />
    ///  要与当前合并 <see langword="DataTable" />
    ///  。
    ///</param>
    ///  <param name="preserveChanges"><see langword="true" />
    ///  , 保留在当前更改 <see langword="DataTable" />
    ///  ; 否则为 <see langword="false" />
    ///  。<see langword="" />
    ///</param>
    procedure Merge(table: DNDataTable; preserveChanges: Boolean); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataTable" />
    ///  与当前 <see langword="DataTable" />
    ///  , ，，该值指示是否保留更改，以及如何处理缺失的架构，在当前 <see langword="DataTable" />
    ///  。
    ///</summary>
    ///  <param name="table"><see cref="T:System.Data.DataTable" />
    ///  要与当前合并 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="preserveChanges"><see langword="true" />
    ///  , 保留在当前更改 <see cref="T:System.Data.DataTable" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="missingSchemaAction"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    procedure Merge(table: DNDataTable; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Data.DataTable" />
    ///  使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />
    ///  。
    ///  如果 <see cref="T:System.Data.DataTable" />
    ///  已经包含行，从数据源传入的数据将与现有行合并。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Data.IDataReader" />
    ///  提供结果集。
    ///</param>
    procedure Load(reader: DNIDataReader); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Data.DataTable" />
    ///  使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />
    ///  。
    ///  如果 <see langword="DataTable" />
    ///  已经包含行，与现有行的值根据合并来自数据源的传入数据 <paramref name="loadOption" />
    ///  参数。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Data.IDataReader" />
    ///  ，它提供一个或多个结果集。
    ///</param>
    ///  <param name="loadOption">
    ///  取值范围为 <see cref="T:System.Data.LoadOption" />
    ///  枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" />
    ///  与共享相同的主键的传入行组合在一起。
    ///</param>
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption); overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataTableReader" />
    ///  对应于在此数据 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTableReader" />
    ///  包含一个结果集，对应于源 <see cref="T:System.Data.DataTable" />
    ///  实例。
    ///</returns>
    function CreateDataReader: DNDataTableReader;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的 XML <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  数据将写入的流。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的 XML <see cref="T:System.IO.Stream" />
    ///  。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  数据将写入的流。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  通过指定的 <see cref="T:System.IO.TextWriter" />
    ///  ，按 XML 形式编写 <see cref="T:System.Data.DataTable" />
    ///  的当前内容。
    ///</summary>
    ///  <param name="writer">
    ///  用于写入内容的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  通过指定的 <see cref="T:System.IO.TextWriter" />
    ///  ，按 XML 形式编写 <see cref="T:System.Data.DataTable" />
    ///  的当前内容。
    ///  若要保存的数据的表及其所有子代，设置<paramref name="writeHierarchy" />
    ///  参数<see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  用于写入内容的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果<see langword="true" />
    ///  ，写入当前表及其所有子代的内容。
    ///  如果<see langword="false" />
    ///  （默认值），将当前表的数据写入。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的 XML <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用来写入的内容。
    ///</param>
    procedure WriteXml(writer: DNXmlWriter); overload;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的 XML <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用来写入的内容。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(writer: DNXmlWriter; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的文件的 XML。
    ///</summary>
    ///  <param name="fileName">
    ///  要向其写入的 XML 数据文件。
    ///</param>
    procedure WriteXml(fileName: string); overload;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的文件的 XML。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  要向其写入的 XML 数据文件。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(fileName: string; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  数据将写入的流。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  数据将写入的流。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.IO.TextWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  用于写入的文档。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.IO.TextWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  用于写入的文档。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.Xml.XmlWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用于写入的文档。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(writer: DNXmlWriter; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.Xml.XmlWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用于写入的文档。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(writer: DNXmlWriter; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  数据将写入的文件的名称。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  数据将写入的文件的名称。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个 XML 架构写入指定的流。
    ///</summary>
    ///  <param name="stream">
    ///  XML 架构将写入的流。
    ///</param>
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个 XML 架构写入指定的流。
    ///  若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  XML 架构将写入的流。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的架构。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的架构。
    ///</param>
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个使用指定的 XML 架构 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  用其进行写。
    ///</param>
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个使用指定的 XML 架构 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///  若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  用其进行写。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的架构。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的架构。
    ///</param>
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个使用指定的 XML 架构 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  要使用的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    procedure WriteXmlSchema(writer: DNXmlWriter); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个使用指定的 XML 架构 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用于写入的文档。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的架构。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的架构。
    ///</param>
    procedure WriteXmlSchema(writer: DNXmlWriter; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个 XML 架构写入指定的文件。
    ///</summary>
    ///  <param name="fileName">
    ///  要使用的文件的名称。
    ///</param>
    procedure WriteXmlSchema(fileName: string); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个 XML 架构写入指定的文件。
    ///  若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  要使用的文件的名称。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的架构。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的架构。
    ///</param>
    procedure WriteXmlSchema(fileName: string; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  从派生的对象。 <see cref="T:System.IO.Stream" />
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(stream: DDN.mscorlib.DNStream): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.IO.TextReader" />
    ///  将用于读取数据。
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DDN.mscorlib.DNTextReader): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />
    ///  从指定的文件。
    ///</summary>
    ///  <param name="fileName">
    ///  从中读取数据文件的名称。
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(fileName: string): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  将用于读取数据。
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DNXmlReader): DNXmlReadMode; overload;
    ///<summary>
    ///  读取 XML 架构到 <see cref="T:System.Data.DataTable" />
    ///  使用指定的流。
    ///</summary>
    ///  <param name="stream">
    ///  用来读取该架构的流。
    ///</param>
    procedure ReadXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  读取 XML 架构到 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.IO.TextReader" />
    ///  用于读取架构信息。
    ///</param>
    procedure ReadXmlSchema(reader: DDN.mscorlib.DNTextReader); overload;
    ///<summary>
    ///  读取 XML 架构到 <see cref="T:System.Data.DataTable" />
    ///  从指定的文件。
    ///</summary>
    ///  <param name="fileName">
    ///  从中进行读取架构信息文件的名称。
    ///</param>
    procedure ReadXmlSchema(fileName: string); overload;
    ///<summary>
    ///  读取 XML 架构到 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  用于读取架构信息。
    ///</param>
    procedure ReadXmlSchema(reader: DNXmlReader); overload;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示在表中的字符串比较是否区分大小写。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该比较是区分大小写。否则为 <see langword="false" />
    ///  。
    ///  默认值设置为 parent <see cref="T:System.Data.DataSet" />
    ///  对象的 <see cref="P:System.Data.DataSet.CaseSensitive" />
    ///  属性，或 <see langword="false" />
    ///  如果 <see cref="T:System.Data.DataTable" />
    ///  独立于创建 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" />
    ///  初始化。
    ///</summary>
    ///<returns><see langword="true" />
    ///  指示组件已完成初始化，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInitialized: Boolean read get_IsInitialized;
    ///<summary>
    ///  获取或设置序列化格式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SerializationFormat" />
    ///  枚举指定 <see langword="Binary" />
    ///  或 <see langword="Xml" />
    ///  序列化。
    ///</returns>
    property RemotingFormat: DNSerializationFormat read get_RemotingFormat write set_RemotingFormat;
    ///<summary>
    ///  获取此子关系的集合 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRelationCollection" />
    ///  ，包含表的子关系。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" />
    ///  存在的对象。
    ///</returns>
    property ChildRelations: DNDataRelationCollection read get_ChildRelations;
    ///<summary>
    ///  获取属于此表的列的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataColumnCollection" />
    ///  包含集合的 <see cref="T:System.Data.DataColumn" />
    ///  表的对象。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.DataColumn" />
    ///  存在的对象。
    ///</returns>
    property Columns: DNDataColumnCollection read get_Columns;
    ///<summary>
    ///  获取此表是由约束的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.ConstraintCollection" />
    ///  包含集合的 <see cref="T:System.Data.Constraint" />
    ///  表的对象。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.Constraint" />
    ///  存在的对象。
    ///</returns>
    property Constraints: DNConstraintCollection read get_Constraints;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataSet" />
    ///  此表所属。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataSet" />
    ///  此表所属。
    ///</returns>
    property DataSet: DNDataSet read get_DataSet;
    ///<summary>
    ///  获取可能包括已筛选的视图或光标位置的表的自定义的视图。
    ///</summary>
    ///<returns>
    ///  与 <see cref="T:System.Data.DataView" />
    ///  关联的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    property DefaultView: DNDataView read get_DefaultView;
    ///<summary>
    ///  获取或设置返回用来表示此表在用户界面中的值的表达式。
    ///<see langword="DisplayExpression" />
    ///  属性，允许您在用户界面中显示此表的名称。
    ///</summary>
    ///<returns>
    ///  显示字符串。
    ///</returns>
    property DisplayExpression: string read get_DisplayExpression write set_DisplayExpression;
    ///<summary>
    ///  获取自定义的用户信息的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  ，包含自定义用户信息。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    ///<summary>
    ///  获取一个值，该值指示是否有任何任一的表中的行中的错误 <see cref="T:System.Data.DataSet" />
    ///  表属于。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果存在错误;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasErrors: Boolean read get_HasErrors;
    ///<summary>
    ///  获取或设置用来比较字符串表中的区域设置信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  ，其中包含有关用户的计算机区域设置的数据。
    ///  默认值是 <see cref="T:System.Data.DataSet" />
    ///  对象的 <see cref="T:System.Globalization.CultureInfo" />
    ///  (返回 <see cref="P:System.Data.DataSet.Locale" />
    ///  属性) 向其 <see cref="T:System.Data.DataTable" />
    ///  所属; 如果表不属于 <see cref="T:System.Data.DataSet" />
    ///  , ，默认值是当前系统 <see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///</returns>
    property Locale: DDN.mscorlib.DNCultureInfo read get_Locale write set_Locale;
    ///<summary>
    ///  获取或设置此表的初始起始大小。
    ///</summary>
    ///<returns>
    ///  在此表的行中初始起始大小。
    ///  默认值为 50。
    ///</returns>
    property MinimumCapacity: Int32 read get_MinimumCapacity write set_MinimumCapacity;
    ///<summary>
    ///  获取为此父关系的集合 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRelationCollection" />
    ///  ，包含表的父关系。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" />
    ///  存在的对象。
    ///</returns>
    property ParentRelations: DNDataRelationCollection read get_ParentRelations;
    ///<summary>
    ///  获取或设置列的数组该函数为数据表为主键。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataColumn" />
    ///  对象数组。
    ///</returns>
    ///<exception cref="T:System.Data.DataException">
    ///  该密钥是外键。
    ///</exception>
    property PrimaryKey: TArray<DNDataColumn> read get_PrimaryKey write set_PrimaryKey;
    ///<summary>
    ///  获取属于此表的行的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRowCollection" />
    ///  ，其中包含 <see cref="T:System.Data.DataRow" />
    ///  对象; 否则为空值如果没有 <see cref="T:System.Data.DataRow" />
    ///  存在的对象。
    ///</returns>
    property Rows: DNDataRowCollection read get_Rows;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataTable" />
    ///  的名称。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see langword="null" />
    ///  或空字符串 ("") 中传递和此表所属的集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  此表所属的集合已具有相同名称的表。
    ///  （比较是区分大小写。）
    ///</exception>
    property TableName: string read get_TableName write set_TableName;
    ///<summary>
    ///  获取或设置的 XML 表示形式中存储的数据的命名空间 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名空间 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置的 XML 表示形式中存储的数据的命名空间 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  前缀 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataTable" />
    ///  的 <see cref="T:System.ComponentModel.ISite" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.ComponentModel.ISite" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataTable = class(TDNGenericImport<DNDataTableClass, DNDataTable>) end;

  //-------------namespace: System.Data----------------
  DNDataViewClass = interface(DNObjectClass)
  ['{6293E4A1-BAC8-5136-ACE2-021771D79AE2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataView" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDataView; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Data.DataView" />
    ///  初始化 <see cref="T:System.Data.DataTable" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="table">
    ///  要添加到 <see cref="T:System.Data.DataView" />
    ///  中的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    {class} function init(table: DNDataTable): DNDataView; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Data.DataTable" />
    ///  、<see cref="P:System.Data.DataView.RowFilter" />
    ///  、<see cref="P:System.Data.DataView.Sort" />
    ///  和 <see cref="T:System.Data.DataViewRowState" />
    ///  初始化 <see cref="T:System.Data.DataView" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="table">
    ///  要添加到 <see cref="T:System.Data.DataView" />
    ///  中的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="RowFilter">
    ///  要应用于 <see cref="T:System.Data.DataView" />
    ///  的 <see cref="P:System.Data.DataView.RowFilter" />
    ///  。
    ///</param>
    ///  <param name="Sort">
    ///  要应用于 <see cref="T:System.Data.DataView" />
    ///  的 <see cref="P:System.Data.DataView.Sort" />
    ///  。
    ///</param>
    ///  <param name="RowState">
    ///  要应用于 <see cref="T:System.Data.DataView" />
    ///  的 <see cref="T:System.Data.DataViewRowState" />
    ///  。
    ///</param>
    {class} function init(table: DNDataTable; RowFilter: string; Sort: string; RowState: DNDataViewRowState): DNDataView; overload;

  end;

  ///<summary>
  ///  代表 <see cref="T:System.Data.DataTable" />
  ///  的可绑定数据的自定义视图，它用于排序、筛选、搜索、编辑和导航。
  ///<see cref="T:System.Data.DataView" />
  ///  不存储数据，而改为表示对应的 <see cref="T:System.Data.DataTable" />
  ///  的连接视图。
  ///  更改 <see cref="T:System.Data.DataView" />
  ///  的数据将影响 <see cref="T:System.Data.DataTable" />
  ///  。
  ///  更改 <see cref="T:System.Data.DataTable" />
  ///  的数据将影响与之关联的所有 <see cref="T:System.Data.DataView" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataView')]
  DNDataView = interface(DNObject)
  ['{954DCFBB-B6BF-3BAA-B683-D6ECDB9E8FD8}']
  { getters & setters } 

    function get_AllowDelete: Boolean;
    procedure set_AllowDelete(value: Boolean);
    function get_ApplyDefaultSort: Boolean;
    procedure set_ApplyDefaultSort(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowNew: Boolean;
    procedure set_AllowNew(value: Boolean);
    function get_Count: Int32;
    function get_DataViewManager: DNDataViewManager;
    function get_IsInitialized: Boolean;
    function get_RowFilter: string;
    procedure set_RowFilter(value: string);
    function get_RowStateFilter: DNDataViewRowState;
    procedure set_RowStateFilter(value: DNDataViewRowState);
    function get_Sort: string;
    procedure set_Sort(value: string);
    function get_Table: DNDataTable;
    procedure set_Table(value: DNDataTable);
    function get_Item(recordIndex: Int32): DNDataRowView;
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ListChanged(value: DNListChangedEventHandler);
    procedure remove_ListChanged(value: DNListChangedEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" />
    ///  。
    ///  此初始化在运行时发生。
    ///</summary>
    procedure BeginInit;
    ///<summary>
    ///  结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" />
    ///  的初始化。
    ///  此初始化在运行时发生。
    ///</summary>
    procedure EndInit;
    ///<summary>
    ///  删除指定索引处的行。
    ///</summary>
    ///  <param name="index">
    ///  要删除行的索引。
    ///</param>
    procedure Delete(index: Int32);
    ///<summary>
    ///  根据指定的排序键值在 <see cref="T:System.Data.DataView" />
    ///  中查找行。
    ///</summary>
    ///  <param name="key">
    ///  要搜索的对象。
    ///</param>
    ///<returns>
    ///  包含指定排序关键字值的 <see cref="T:System.Data.DataView" />
    ///  中的行的索引；否则为 -1（如果不存在排序关键字值）。
    ///</returns>
    function Find(key: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  根据指定的排序键值在 <see cref="T:System.Data.DataView" />
    ///  中查找行。
    ///</summary>
    ///  <param name="key">
    ///  类型为 <see cref="T:System.Object" />
    ///  的值的数组。
    ///</param>
    ///<returns><see cref="T:System.Data.DataView" />
    ///  中与指定的排序键值匹配的第一个行的位置索引；如果没有匹配的排序键值，则为 -1。
    ///</returns>
    function Find(key: TArray<DDN.mscorlib.DNObject>): Int32; overload;
    ///<summary>
    ///  返回其列与指定的排序键值匹配的 <see cref="T:System.Data.DataRowView" />
    ///  对象数组。
    ///</summary>
    ///  <param name="key">
    ///  要搜索的列值数组，其类型为 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="DataRowView" />
    ///  对象数组，其列与指定的排序键值匹配；或者，如果任何行都不包含指定的排序键值，则为空的 <see langword="DataRowView" />
    ///  数组。
    ///</returns>
    function FindRows(key: TArray<DDN.mscorlib.DNObject>): TArray<DNDataRowView>; overload;
    ///<summary>
    ///  基于现有的 <see cref="T:System.Data.DataView" />
    ///  中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="distinct">
    ///  如果为 <see langword="true" />
    ///  ，则返回的 <see cref="T:System.Data.DataTable" />
    ///  包含具有与其所有列不同的值的行。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="columnNames">
    ///  一个字符串数组，其中的一个列名称列表将包括在返回的 <see cref="T:System.Data.DataTable" />
    ///  中。
    ///<see cref="T:System.Data.DataTable" />
    ///  包含指定的列，这些列按其在该数组中显示的顺序排列。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  实例，其中包含请求的行和列。
    ///</returns>
    function ToTable(distinct: Boolean; columnNames: TArray<string>): DNDataTable; overload;
    ///<summary>
    ///  确定指定的 <see cref="T:System.Data.DataView" />
    ///  实例是否可视为相等的实例。
    ///</summary>
    ///  <param name="view">
    ///  要比较的 <see cref="T:System.Data.DataView" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果这两个 <see cref="T:System.Data.DataView" />
    ///  实例相等，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(view: DNDataView): Boolean; overload;
    ///<summary>
    ///  在 <see cref="T:System.Data.DataView" />
    ///  中添加新行。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataRowView" />
    ///  对象。
    ///</returns>
    function AddNew: DNDataRowView;
    ///<summary>
    ///  将项复制到数组中。
    ///  仅适用于 Web 窗体界面。
    ///</summary>
    ///  <param name="array">
    ///  要复制到的数组。
    ///</param>
    ///  <param name="index">
    ///  从其开始的索引。
    ///</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  返回其列与指定的排序键值匹配的 <see cref="T:System.Data.DataRowView" />
    ///  对象数组。
    ///</summary>
    ///  <param name="key">
    ///  要搜索的列值，为 <see cref="T:System.Object" />
    ///  类型。
    ///</param>
    ///<returns><see langword="DataRowView" />
    ///  对象数组，其列与指定的排序键值匹配；或者，如果任何行都不包含指定的排序键值，则为空的 <see langword="DataRowView" />
    ///  数组。
    ///</returns>
    function FindRows(key: DDN.mscorlib.DNObject): TArray<DNDataRowView>; overload;
    ///<summary>
    ///  获取此 <see cref="T:System.Data.DataView" />
    ///  的枚举器。
    ///</summary>
    ///<returns>
    ///  用于浏览列表的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  基于现有的 <see cref="T:System.Data.DataView" />
    ///  中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  实例，其中包含请求的行和列。
    ///</returns>
    function ToTable: DNDataTable; overload;
    ///<summary>
    ///  基于现有的 <see cref="T:System.Data.DataView" />
    ///  中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="tableName">
    ///  返回的 <see cref="T:System.Data.DataTable" />
    ///  的名称。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  实例，其中包含请求的行和列。
    ///</returns>
    function ToTable(tableName: string): DNDataTable; overload;
    ///<summary>
    ///  基于现有的 <see cref="T:System.Data.DataView" />
    ///  中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="tableName">
    ///  返回的 <see cref="T:System.Data.DataTable" />
    ///  的名称。
    ///</param>
    ///  <param name="distinct">
    ///  如果为 <see langword="true" />
    ///  ，则返回的 <see cref="T:System.Data.DataTable" />
    ///  包含具有与其所有列不同的值的行。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="columnNames">
    ///  一个字符串数组，其中的一个列名称列表将包括在返回的 <see cref="T:System.Data.DataTable" />
    ///  中。
    ///<see langword="DataTable" />
    ///  包含指定的列，这些列按其在该数组中显示的顺序排列。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  实例，其中包含请求的行和列。
    ///</returns>
    function ToTable(tableName: string; distinct: Boolean; columnNames: TArray<string>): DNDataTable; overload;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  设置或获取一个值，该值指示是否允许删除。
    ///</summary>
    ///<returns>
    ///  如果允许删除，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowDelete: Boolean read get_AllowDelete write set_AllowDelete;
    ///<summary>
    ///  获取或设置一个值，该值指示是否使用默认排序。
    ///  默认排序是通过 <see cref="P:System.Data.DataTable.PrimaryKey" />
    ///  指定的所有主键进行排序（升序）。
    ///</summary>
    ///<returns>
    ///  如果使用默认排序，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ApplyDefaultSort: Boolean read get_ApplyDefaultSort write set_ApplyDefaultSort;
    ///<summary>
    ///  获取或设置一个值，该值指示是否允许编辑。
    ///</summary>
    ///<returns>
    ///  如果允许编辑，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    ///<summary>
    ///  获取或设置一个值，该值指示是否可以通过使用 <see cref="M:System.Data.DataView.AddNew" />
    ///  方法添加新行。
    ///</summary>
    ///<returns>
    ///  如果可以添加新行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowNew: Boolean read get_AllowNew write set_AllowNew;
    ///<summary>
    ///  在应用 <see cref="P:System.Data.DataView.RowFilter" />
    ///  和 <see cref="P:System.Data.DataView.RowStateFilter" />
    ///  之后，获取 <see cref="T:System.Data.DataView" />
    ///  中的记录数。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataView" />
    ///  中的记录数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取与此视图关联的 <see cref="T:System.Data.DataViewManager" />
    ///  。
    ///</summary>
    ///<returns>
    ///  创建了此视图的 <see langword="DataViewManager" />
    ///  。
    ///  如果这是 <see cref="T:System.Data.DataTable" />
    ///  的默认 <see cref="T:System.Data.DataView" />
    ///  ，那么 <see langword="DataViewManager" />
    ///  属性将返回 <see langword="DataSet" />
    ///  的默认 <see langword="DataViewManager" />
    ///  。
    ///  否则，如果在没有 <see langword="DataViewManager" />
    ///  的情况下创建了 <see langword="DataView" />
    ///  ，那么此属性为 <see langword="null" />
    ///  。
    ///</returns>
    property DataViewManager: DNDataViewManager read get_DataViewManager;
    ///<summary>
    ///  获取一个值，该值指示组件是否已初始化。
    ///</summary>
    ///<returns>
    ///  如果为 <see langword="true" />
    ///  ，说明组件已完成初始化；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInitialized: Boolean read get_IsInitialized;
    ///<summary>
    ///  获取或设置用于筛选在 <see cref="T:System.Data.DataView" />
    ///  中查看哪些行的表达式。
    ///</summary>
    ///<returns>
    ///  用于指定行的筛选方式的字符串。
    ///  有关详细信息，请参阅“备注”部分。
    ///</returns>
    property RowFilter: string read get_RowFilter write set_RowFilter;
    ///<summary>
    ///  获取或设置用于 <see cref="T:System.Data.DataView" />
    ///  中的行状态筛选器。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataViewRowState" />
    ///  值之一。
    ///</returns>
    property RowStateFilter: DNDataViewRowState read get_RowStateFilter write set_RowStateFilter;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataView" />
    ///  的一个或多个排序列和排序顺序。
    ///</summary>
    ///<returns>
    ///  一个字符串，该字符串包含后跟“ASC”（升序）或"DESC"（降序）的列名。
    ///  默认情况下，列按升序排序。
    ///  可以用逗号分隔多个列。
    ///</returns>
    property Sort: string read get_Sort write set_Sort;
    ///<summary>
    ///  获取或设置源 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  为此视图提供数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    property Table: DNDataTable read get_Table write set_Table;
    property Item[recordIndex: Int32]: DNDataRowView read get_Item; default;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataView = class(TDNGenericImport<DNDataViewClass, DNDataView>) end;

  //-------------namespace: System.Data----------------
  DNDataViewManagerClass = interface(DNObjectClass)
  ['{FEFEA83B-9600-5D1E-8BF2-8A841409B4EF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataViewManager" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDataViewManager; overload;
    ///<summary>
    ///  为指定的 <see cref="T:System.Data.DataSet" />
    ///  初始化 <see cref="T:System.Data.DataViewManager" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataSet">
    ///  要使用的 <see cref="T:System.Data.DataSet" />
    ///  的名称。
    ///</param>
    {class} function init(dataSet: DNDataSet): DNDataViewManager; overload;

  end;

  ///<summary>
  ///  在 <see cref="T:System.Data.DataSet" />
  ///  中包含每个 <see cref="T:System.Data.DataTable" />
  ///  的默认 <see cref="T:System.Data.DataViewSettingCollection" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataViewManager')]
  DNDataViewManager = interface(DNObject)
  ['{720CC903-7243-397C-854C-1F8900F3F337}']
  { getters & setters } 

    function get_DataSet: DNDataSet;
    procedure set_DataSet(value: DNDataSet);
    function get_DataViewSettingCollectionString: string;
    procedure set_DataViewSettingCollectionString(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ListChanged(value: DNListChangedEventHandler);
    procedure remove_ListChanged(value: DNListChangedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  为指定的 <see cref="T:System.Data.DataTable" />
    ///  创建 <see cref="T:System.Data.DataView" />
    ///  。
    ///</summary>
    ///  <param name="table">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  用于 <see cref="T:System.Data.DataView" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataView" />
    ///  对象。
    ///</returns>
    function CreateDataView(table: DNDataTable): DNDataView;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataSet" />
    ///  用于 <see cref="T:System.Data.DataViewManager" />
    ///  。
    ///</summary>
    ///<returns>
    ///  要使用的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property DataSet: DNDataSet read get_DataSet write set_DataSet;
    ///<summary>
    ///  获取或设置一个值，用于代码持久性。
    ///</summary>
    ///<returns>
    ///  一个值，用于代码持久性。
    ///</returns>
    property DataViewSettingCollectionString: string read get_DataViewSettingCollectionString write set_DataViewSettingCollectionString;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataViewManager = class(TDNGenericImport<DNDataViewManagerClass, DNDataViewManager>) end;

  //-------------namespace: System.Data----------------
  DNDataRelationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C2B58DB-0CF6-54E5-A228-9139B6D1F527}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataRelation" />
    ///  类使用指定 <see cref="T:System.Data.DataRelation" />
    ///  名称、 父级和子级 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="relationName"><see cref="T:System.Data.DataRelation" />
    ///  的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentColumn">
    ///  父 <see cref="T:System.Data.DataColumn" />
    ///  关系中。
    ///</param>
    ///  <param name="childColumn">
    ///  子 <see cref="T:System.Data.DataColumn" />
    ///  关系中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个 <see cref="T:System.Data.DataColumn" />
    ///  对象包含 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型
    ///  - 或 -
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(relationName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataRelation" />
    ///  类使用指定的名称、 父级和子级 <see cref="T:System.Data.DataColumn" />
    ///  对象和一个值，该值指示是否创建约束。
    ///</summary>
    ///  <param name="relationName">
    ///  该关系的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentColumn">
    ///  父 <see cref="T:System.Data.DataColumn" />
    ///  关系中。
    ///</param>
    ///  <param name="childColumn">
    ///  子 <see cref="T:System.Data.DataColumn" />
    ///  关系中。
    ///</param>
    ///  <param name="createConstraints">
    ///  一个值，该值指示是否要创建约束。
    ///<see langword="true" />
    ///  , 如果创建约束。
    ///  否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个 <see cref="T:System.Data.DataColumn" />
    ///  对象包含 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型
    ///  - 或 -
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(relationName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn; createConstraints: Boolean): DNDataRelation; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataRelation" />
    ///  类使用指定 <see cref="T:System.Data.DataRelation" />
    ///  父级和子级的名称和匹配数组 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="relationName">
    ///  该关系的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentColumns">
    ///  数组的父 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="childColumns">
    ///  子数组 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个 <see cref="T:System.Data.DataColumn" />
    ///  对象包含 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException"><see cref="T:System.Data.DataColumn" />
    ///  对象具有不同的数据类型
    ///  - 或 -
    ///  不由同一个表中的不同列组成的一个或两个数组。
    ///  - 或 -
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(relationName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataRelation" />
    ///  类使用指定的名称、 父级和子级的匹配数组 <see cref="T:System.Data.DataColumn" />
    ///  对象和值，该值指示是否创建约束。
    ///</summary>
    ///  <param name="relationName">
    ///  该关系的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentColumns">
    ///  数组的父 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="childColumns">
    ///  子数组 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="createConstraints">
    ///  一个值，该值指示是否创建约束。
    ///<see langword="true" />
    ///  , 如果创建约束。
    ///  否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个 <see cref="T:System.Data.DataColumn" />
    ///  对象是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型
    ///  - 或 -
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(relationName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>; createConstraints: Boolean): DNDataRelation; overload;
    ///<summary>
    ///  此构造函数用于在 Visual Studio 环境中的设计时支持。
    ///</summary>
    ///  <param name="relationName">
    ///  该关系的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentTableName">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  ，它是一种关系的父表。
    ///</param>
    ///  <param name="childTableName">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  ，它是一种关系的子表。
    ///</param>
    ///  <param name="parentColumnNames">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象的父代中的名称 <see cref="T:System.Data.DataTable" />
    ///  的关系。
    ///</param>
    ///  <param name="childColumnNames">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象名称的子级 <see cref="T:System.Data.DataTable" />
    ///  的关系。
    ///</param>
    ///  <param name="nested">
    ///  一个值，该值指示是否嵌套关系。
    ///</param>
    {class} function init(relationName: string; parentTableName: string; childTableName: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; nested: Boolean): DNDataRelation; overload;
    ///<summary>
    ///  此构造函数用于在 Visual Studio 环境中的设计时支持。
    ///</summary>
    ///  <param name="relationName"><see cref="T:System.Data.DataRelation" />
    ///  的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentTableName">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  ，它是一种关系的父表。
    ///</param>
    ///  <param name="parentTableNamespace">
    ///  父表命名空间的名称。
    ///</param>
    ///  <param name="childTableName">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  ，它是一种关系的子表。
    ///</param>
    ///  <param name="childTableNamespace">
    ///  子表命名空间的名称。
    ///</param>
    ///  <param name="parentColumnNames">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象的父代中的名称 <see cref="T:System.Data.DataTable" />
    ///  的关系。
    ///</param>
    ///  <param name="childColumnNames">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象名称的子级 <see cref="T:System.Data.DataTable" />
    ///  的关系。
    ///</param>
    ///  <param name="nested">
    ///  一个值，该值指示是否嵌套关系。
    ///</param>
    {class} function init(relationName: string; parentTableName: string; parentTableNamespace: string; childTableName: string; childTableNamespace: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; nested: Boolean): DNDataRelation; overload;

  end;

  ///<summary>
  ///  表示两个区域之间的父/子关系 <see cref="T:System.Data.DataTable" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Data.DataRelation')]
  DNDataRelation = interface(DDN.mscorlib.DNObject)
  ['{28A715A9-0E4D-3E5F-85A2-D3FB10F07D1D}']
  { getters & setters } 

    function get_ChildColumns: TArray<DNDataColumn>;
    function get_ChildTable: DNDataTable;
    function get_DataSet: DNDataSet;
    function get_ParentColumns: TArray<DNDataColumn>;
    function get_ParentTable: DNDataTable;
    function get_RelationName: string;
    procedure set_RelationName(value: string);
    function get_Nested: Boolean;
    procedure set_Nested(value: Boolean);
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    ///<summary>
    ///  获取 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  , ，如果存在。
    ///</summary>
    ///<returns><see cref="P:System.Data.DataRelation.RelationName" />
    ///  属性的值。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取子 <see cref="T:System.Data.DataColumn" />
    ///  这一关系中的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataColumn" />
    ///  对象数组。
    ///</returns>
    property ChildColumns: TArray<DNDataColumn> read get_ChildColumns;
    ///<summary>
    ///  获取此关系的子表。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，它是一种关系的子表。
    ///</returns>
    property ChildTable: DNDataTable read get_ChildTable;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataSet" />
    ///  到 <see cref="T:System.Data.DataRelation" />
    ///  所属。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  到 <see cref="T:System.Data.DataRelation" />
    ///  所属。
    ///</returns>
    property DataSet: DNDataSet read get_DataSet;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象的父列 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象的父列 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</returns>
    property ParentColumns: TArray<DNDataColumn> read get_ParentColumns;
    ///<summary>
    ///  获取父 <see cref="T:System.Data.DataTable" />
    ///  此 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，它是此关系的父表。
    ///</returns>
    property ParentTable: DNDataTable read get_ParentTable;
    ///<summary>
    ///  获取或设置用于检索名称 <see cref="T:System.Data.DataRelation" />
    ///  从 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  名称 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see langword="null" />
    ///  或空字符串 ("") 传递到 <see cref="T:System.Data.DataColumn" />
    ///  即 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</exception><exception cref="T:System.Data.DuplicateNameException"><see cref="T:System.Data.DataRelation" />
    ///  属于集合已包含 <see cref="T:System.Data.DataRelation" />
    ///  具有相同的名称。
    ///</exception>
    property RelationName: string read get_RelationName write set_RelationName;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Data.DataRelation" />
    ///  对象是否嵌套。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果 <see cref="T:System.Data.DataRelation" />
    ///  对象是否嵌套; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Nested: Boolean read get_Nested write set_Nested;
    ///<summary>
    ///  获取存储自定义的属性的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  ，它包含自定义的属性。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNDataRelation = class(TDNGenericImport<DNDataRelationClass, DNDataRelation>) end;

  //-------------namespace: System.Data----------------
  DNDataRowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB7D244F-523B-57B6-89A4-E31CABF91FF2}']
  end;

  ///<summary>
  ///  表示行中的数据 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataRow')]
  DNDataRow = interface(DDN.mscorlib.DNObject)
  ['{208AC0D0-8D94-3FE0-8090-4813634573A2}']
  { getters & setters } 

    function get_RowError: string;
    procedure set_RowError(value: string);
    function get_RowState: DNDataRowState;
    function get_Table: DNDataTable;
    function get_Item(columnIndex: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(columnIndex: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(columnName: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(columnName: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(column: DNDataColumn): DDN.mscorlib.DNObject; overload;
    procedure set_Item(column: DNDataColumn; value: DDN.mscorlib.DNObject); overload;
    function get_Item(columnIndex: Int32; version: DNDataRowVersion): DDN.mscorlib.DNObject; overload;
    function get_Item(columnName: string; version: DNDataRowVersion): DDN.mscorlib.DNObject; overload;
    function get_Item(column: DNDataColumn; version: DNDataRowVersion): DDN.mscorlib.DNObject; overload;
    function get_ItemArray: TArray<DDN.mscorlib.DNObject>;
    procedure set_ItemArray(value: TArray<DDN.mscorlib.DNObject>);
    function get_HasErrors: Boolean;

  { methods } 

    ///<summary>
    ///  在开始编辑操作 <see cref="T:System.Data.DataRow" />
    ///  对象。
    ///</summary>
    ///<exception cref="T:System.Data.InRowChangingEventException">
    ///  该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" />
    ///  事件。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  该方法是在已删除的行时调用。
    ///</exception>
    procedure BeginEdit;
    ///<summary>
    ///  取消当前编辑的行上。
    ///</summary>
    ///<exception cref="T:System.Data.InRowChangingEventException">
    ///  该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" />
    ///  事件。
    ///</exception>
    procedure CancelEdit;
    ///<summary>
    ///  删除 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.Data.DeletedRowInaccessibleException"><see cref="T:System.Data.DataRow" />
    ///  被删除。
    ///</exception>
    procedure Delete;
    ///<summary>
    ///  结束对行进行编辑。
    ///</summary>
    ///<exception cref="T:System.Data.InRowChangingEventException">
    ///  该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" />
    ///  事件。
    ///</exception><exception cref="T:System.Data.ConstraintException">
    ///  编辑破坏了约束。
    ///</exception><exception cref="T:System.Data.ReadOnlyException">
    ///  行所属的表和编辑尝试更改只读列的值。
    ///</exception><exception cref="T:System.Data.NoNullAllowedException">
    ///  编辑尝试将 null 值放入某一列其中 <see cref="P:System.Data.DataColumn.AllowDBNull" />
    ///  为 false。
    ///</exception>
    procedure EndEdit;
    ///<summary>
    ///  设置由索引指定的列的错误说明。
    ///</summary>
    ///  <param name="columnIndex">
    ///  列的从零开始的索引。
    ///</param>
    ///  <param name="error">
    ///  错误说明。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="columnIndex" />
    ///  参数不在范围内
    ///</exception>
    procedure SetColumnError(columnIndex: Int32; error: string); overload;
    ///<summary>
    ///  设置由名称指定的列的错误说明。
    ///</summary>
    ///  <param name="columnName">
    ///  列的名称。
    ///</param>
    ///  <param name="error">
    ///  错误说明。
    ///</param>
    procedure SetColumnError(columnName: string; error: string); overload;
    ///<summary>
    ///  获取指定索引的列的错误说明。
    ///</summary>
    ///  <param name="columnIndex">
    ///  列的从零开始的索引。
    ///</param>
    ///<returns>
    ///  错误说明的文本。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="columnIndex" />
    ///  参数不在范围。
    ///</exception>
    function GetColumnError(columnIndex: Int32): string; overload;
    ///<summary>
    ///  获取按名称指定的列中的错误说明。
    ///</summary>
    ///  <param name="columnName">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  错误说明的文本。
    ///</returns>
    function GetColumnError(columnName: string): string; overload;
    ///<summary>
    ///  获取指定的错误说明 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</summary>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///<returns>
    ///  错误说明的文本。
    ///</returns>
    function GetColumnError(column: DNDataColumn): string; overload;
    ///<summary>
    ///  清除的行的错误。
    ///  这包括 <see cref="P:System.Data.DataRow.RowError" />
    ///  并且错误设置有 <see cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" />
    ///  。
    ///</summary>
    procedure ClearErrors;
    ///<summary>
    ///  获取子项的行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  使用。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    function GetChildRows(relationName: string): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取子项的行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  使用。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  指定要获取的数据的版本值。
    ///  可能值为 <see langword="Default" />
    ///  、<see langword="Original" />
    ///  、<see langword="Current" />
    ///  和 <see langword="Proposed" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</exception>
    function GetChildRows(relationName: string; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取子项的这行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  该关系是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有此版本的数据。
    ///</exception>
    function GetChildRows(relation: DNDataRelation): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取子项的行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  指定要获取的数据的版本值。
    ///  可能值为 <see langword="Default" />
    ///  、<see langword="Original" />
    ///  、<see langword="Current" />
    ///  和 <see langword="Proposed" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</exception>
    function GetChildRows(relation: DNDataRelation; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取的父行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///<returns>
    ///  父 <see cref="T:System.Data.DataRow" />
    ///  当前行的行。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.Data.DataException">
    ///  子行有多个父级。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    function GetParentRow(relationName: string): DNDataRow; overload;
    ///<summary>
    ///  获取的父行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///  <param name="version"><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  父 <see cref="T:System.Data.DataRow" />
    ///  当前行的行。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.DataException">
    ///  子行有多个父级。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</exception>
    function GetParentRow(relationName: string; version: DNDataRowVersion): DNDataRow; overload;
    ///<summary>
    ///  获取的父行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///<returns>
    ///  父 <see cref="T:System.Data.DataRow" />
    ///  当前行的行。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  不属于 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  该行是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.DataException">
    ///  子行有多个父级。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  该行不属于的子表的 <see cref="T:System.Data.DataRelation" />
    ///  对象。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    function GetParentRow(relation: DNDataRelation): DNDataRow; overload;
    ///<summary>
    ///  获取的父行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  指定要获取的数据的版本值。
    ///</param>
    ///<returns>
    ///  父 <see cref="T:System.Data.DataRow" />
    ///  当前行的行。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  该行是 <see langword="null" />
    ///  。
    ///  <paramref name="relation" />
    ///  不属于此表的父关系。
    ///</exception><exception cref="T:System.Data.DataException">
    ///  子行有多个父级。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  关系的子表不是行所属的表。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有此版本的数据。
    ///</exception>
    function GetParentRow(relation: DNDataRelation; version: DNDataRowVersion): DNDataRow; overload;
    ///<summary>
    ///  获取父行的 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    function GetParentRows(relationName: string): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取父行的 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  指定要获取的数据的版本值。
    ///  可能值为 <see langword="Default" />
    ///  、<see langword="Original" />
    ///  、<see langword="Current" />
    ///  和 <see langword="Proposed" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</exception>
    function GetParentRows(relationName: string; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取父行的 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.DataRelation" />
    ///  不属于此行 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  该行是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  关系的子表不是行所属的表。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</exception>
    function GetParentRows(relation: DNDataRelation): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取父行的 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  指定要获取的数据的版本值。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.DataRelation" />
    ///  不属于此行 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  该行是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  关系的子表不是行所属的表。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</exception>
    function GetParentRows(relation: DNDataRelation; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取一个值，该值指示是否存在指定的版本。
    ///</summary>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  值，该值指定行的行版本。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果存在版本;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasVersion(version: DNDataRowVersion): Boolean;
    ///<summary>
    ///  获取一个值，该值指示是否指定索引处的列包含 null 值。
    ///</summary>
    ///  <param name="columnIndex">
    ///  列的从零开始的索引。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该列包含 null 值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsNull(columnIndex: Int32): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示指定的列是否包含 null 值。
    ///</summary>
    ///  <param name="columnName">
    ///  列的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该列包含 null 值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsNull(columnName: string): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示是否指定 <see cref="T:System.Data.DataColumn" />
    ///  包含一个 null 值。
    ///</summary>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该列包含 null 值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsNull(column: DNDataColumn): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示是否指定 <see cref="T:System.Data.DataColumn" />
    ///  和 <see cref="T:System.Data.DataRowVersion" />
    ///  包含一个 null 值。
    ///</summary>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  值，该值指定行的行版本。
    ///  可能值为 <see langword="Default" />
    ///  、<see langword="Original" />
    ///  、<see langword="Current" />
    ///  和 <see langword="Proposed" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该列包含 null 值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsNull(column: DNDataColumn; version: DNDataRowVersion): Boolean; overload;
    ///<summary>
    ///  设置的父行 <see cref="T:System.Data.DataRow" />
    ///  用新指定 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    ///  <param name="parentRow">
    ///  新的父级 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    procedure SetParentRow(parentRow: DNDataRow); overload;
    ///<summary>
    ///  设置的父行 <see cref="T:System.Data.DataRow" />
    ///  用新指定 <see cref="T:System.Data.DataRow" />
    ///  和 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="parentRow">
    ///  新的父级 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    ///  <param name="relation">
    ///  该关系 <see cref="T:System.Data.DataRelation" />
    ///  使用。
    ///</param>
    ///<exception cref="T:System.Data.RowNotInTableException">
    ///  这些行之一不属于表
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这些行之一是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该关系不属于 <see cref="T:System.Data.DataRelationCollection" />
    ///  的 <see cref="T:System.Data.DataSet" />
    ///  对象。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  该关系的子级 <see cref="T:System.Data.DataTable" />
    ///  不是该行所属的表。
    ///</exception>
    procedure SetParentRow(parentRow: DNDataRow; relation: DNDataRelation); overload;
    ///<summary>
    ///  更改 <see cref="P:System.Data.DataRow.Rowstate" />
    ///  的 <see cref="T:System.Data.DataRow" />
    ///  到 <see langword="Added" />
    ///  。
    ///</summary>
    procedure SetAdded;
    ///<summary>
    ///  更改 <see cref="P:System.Data.DataRow.Rowstate" />
    ///  的 <see cref="T:System.Data.DataRow" />
    ///  到 <see langword="Modified" />
    ///  。
    ///</summary>
    procedure SetModified;
    ///<summary>
    ///  提交自上次对该行进行的所有更改 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  调用。
    ///</summary>
    ///<exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    procedure AcceptChanges;
    ///<summary>
    ///  设置为指定的列的错误说明 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</summary>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  若要设置的错误说明。
    ///</param>
    ///  <param name="error">
    ///  错误说明。
    ///</param>
    procedure SetColumnError(column: DNDataColumn; error: string); overload;
    ///<summary>
    ///  获取具有错误的列的数组。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  包含错误的对象。
    ///</returns>
    function GetColumnsInError: TArray<DNDataColumn>;
    ///<summary>
    ///  拒绝以来对该行进行的所有更改 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  上一次调用。
    ///</summary>
    ///<exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    procedure RejectChanges;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置某一行的自定义错误说明。
    ///</summary>
    ///<returns>
    ///  描述错误的文本。
    ///</returns>
    property RowError: string read get_RowError write set_RowError;
    ///<summary>
    ///  获取有关及其与关系行的当前状态 <see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRowState" />
    ///  值之一。
    ///</returns>
    property RowState: DNDataRowState read get_RowState;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataTable" />
    ///  为其该行有一个架构。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  此行所属。
    ///</returns>
    property Table: DNDataTable read get_Table;
    property Item[columnIndex: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[columnName: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[column: DNDataColumn]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[columnIndex: Int32; version: DNDataRowVersion]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[columnName: string; version: DNDataRowVersion]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[column: DNDataColumn; version: DNDataRowVersion]: DDN.mscorlib.DNObject read get_Item; default;
    ///<summary>
    ///  获取或设置通过数组此行的所有值。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  类型的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该数组将大于表中的列数。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  数组中的值不匹配其 <see cref="P:System.Data.DataColumn.DataType" />
    ///  在其各个供应商 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</exception><exception cref="T:System.Data.ConstraintException">
    ///  编辑破坏了约束。
    ///</exception><exception cref="T:System.Data.ReadOnlyException">
    ///  编辑尝试更改只读列的值。
    ///</exception><exception cref="T:System.Data.NoNullAllowedException">
    ///  编辑尝试放入列中的 null 值其中 <see cref="P:System.Data.DataColumn.AllowDBNull" />
    ///  的 <see cref="T:System.Data.DataColumn" />
    ///  对象是 <see langword="false" />
    ///  。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  行已被删除。
    ///</exception>
    property ItemArray: TArray<DDN.mscorlib.DNObject> read get_ItemArray write set_ItemArray;
    ///<summary>
    ///  获取一个值，该值指示行是否存在错误。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果行中包含错误。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasErrors: Boolean read get_HasErrors;
  end;

  TDNDataRow = class(TDNGenericImport<DNDataRowClass, DNDataRow>) end;

  //-------------namespace: System.Data----------------
  DNDataRowViewClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C17EB2C8-B8C1-526F-939F-9872BCC64767}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Data.DataRow" />
  ///  的自定义视图。
  ///</summary>
  [DNTypeName('System.Data.DataRowView')]
  DNDataRowView = interface(DDN.mscorlib.DNObject)
  ['{91862A40-DC23-3C7F-B0D8-1BFD26EC98E4}']
  { getters & setters } 

    function get_DataView: DNDataView;
    function get_Item(ndx: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(ndx: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(&property: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(&property: string; value: DDN.mscorlib.DNObject); overload;
    function get_RowVersion: DNDataRowVersion;
    function get_Row: DNDataRow;
    function get_IsNew: Boolean;
    function get_IsEdit: Boolean;

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示是否当前 <see cref="T:System.Data.DataRowView" />
    ///  等同于指定的对象。
    ///</summary>
    ///  <param name="other"><see cref="T:System.Object" />
    ///  进行比较。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="object" />
    ///  是 <see cref="T:System.Data.DataRowView" />
    ///  ，并返回与当前位于同一行 <see cref="T:System.Data.DataRowView" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回的哈希代码 <see cref="T:System.Data.DataRow" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  32 位有符号的整数哈希代码 1，它表示布尔 <see langword="true" />
    ///  如果此实例的值不为零; 否则整数零，它表示一个布尔值 <see langword="false" />
    ///  。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  具有指定 <see cref="T:System.Data.DataRelation" />
    ///  和父...
    ///</summary>
    ///  <param name="relation"><see cref="T:System.Data.DataRelation" />
    ///  对象。
    ///</param>
    ///  <param name="followParent">
    ///  父对象。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function CreateChildView(relation: DNDataRelation; followParent: Boolean): DNDataView; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  与指定的子 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relation"><see cref="T:System.Data.DataRelation" />
    ///  对象。
    ///</param>
    ///<returns><see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function CreateChildView(relation: DNDataRelation): DNDataView; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  具有指定 <see cref="T:System.Data.DataRelation" />
    ///  的名称和父级。
    ///</summary>
    ///  <param name="relationName">
    ///  一个字符串，包含 <see cref="T:System.Data.DataRelation" />
    ///  名称。
    ///</param>
    ///  <param name="followParent">
    ///  父级
    ///</param>
    ///<returns><see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function CreateChildView(relationName: string; followParent: Boolean): DNDataView; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  与指定的子 <see cref="T:System.Data.DataRelation" />
    ///  名称。
    ///</summary>
    ///  <param name="relationName">
    ///  一个字符串，包含 <see cref="T:System.Data.DataRelation" />
    ///  名称。
    ///</param>
    ///<returns><see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function CreateChildView(relationName: string): DNDataView; overload;
    ///<summary>
    ///  开始编辑过程。
    ///</summary>
    procedure BeginEdit;
    ///<summary>
    ///  取消编辑过程。
    ///</summary>
    procedure CancelEdit;
    ///<summary>
    ///  将更改提交给基础 <see cref="T:System.Data.DataRow" />
    ///  并结束编辑会话与开始 <see cref="M:System.Data.DataRowView.BeginEdit" />
    ///  。
    ///  使用 <see cref="M:System.Data.DataRowView.CancelEdit" />
    ///  放弃所做的更改 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    procedure EndEdit;
    ///<summary>
    ///  删除行。
    ///</summary>
    procedure Delete;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.DataView" />
    ///  此行所属。
    ///</summary>
    ///<returns><see langword="DataView" />
    ///  此行所属。
    ///</returns>
    property DataView: DNDataView read get_DataView;
    property Item[ndx: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[&property: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取的当前版本说明 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///  可能的值有 <see cref="P:System.Data.DataRowView.RowVersion" />
    ///  属性 <see langword="Default" />
    ///  , ，<see langword="Original" />
    ///  , ，<see langword="Current" />
    ///  , ，和 <see langword="Proposed" />
    ///  。
    ///</returns>
    property RowVersion: DNDataRowVersion read get_RowVersion;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  正在查看。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  正被查看 <see cref="T:System.Data.DataRowView" />
    ///  。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  指示是否 <see cref="T:System.Data.DataRowView" />
    ///  的新增功能。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该行被新;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNew: Boolean read get_IsNew;
    ///<summary>
    ///  指示行是否处于编辑模式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果在行处于，编辑模式，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEdit: Boolean read get_IsEdit;
  end;

  TDNDataRowView = class(TDNGenericImport<DNDataRowViewClass, DNDataRowView>) end;

  //-------------namespace: System.Data----------------
  DNConstraintCollectionClass = interface(DNObjectClass)
  ['{62C546D3-8AA5-5A4E-BC36-7AAF56476D74}']
  end;

  ///<summary>
  ///  表示的约束集合 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.ConstraintCollection')]
  DNConstraintCollection = interface(DNObject)
  ['{75461A0D-19F9-3D4E-885C-A066AD8C7DA9}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  指示是否 <see cref="T:System.Data.Constraint" />
    ///  集合中存在由名称指定的对象。
    ///</summary>
    ///  <param name="name"><see cref="P:System.Data.Constraint.ConstraintName" />
    ///  的约束。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含指定的约束;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  获取的索引 <see cref="T:System.Data.Constraint" />
    ///  由名称指定。
    ///</summary>
    ///  <param name="constraintName"><see cref="T:System.Data.Constraint" />
    ///  的名称。
    ///</param>
    ///<returns>
    ///  索引 <see cref="T:System.Data.Constraint" />
    ///  知识库是否处于集合; 否则为-1。
    ///</returns>
    function IndexOf(constraintName: string): Int32;
    ///<summary>
    ///  删除 <see cref="T:System.Data.Constraint" />
    ///  集合中的指定索引处的对象。
    ///</summary>
    ///  <param name="index">
    ///  索引 <see cref="T:System.Data.Constraint" />
    ///  中删除。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  集合不具有在此索引的约束。
    ///</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  删除 <see cref="T:System.Data.Constraint" />
    ///  指定的名称从集合对象。
    ///</summary>
    ///  <param name="name">
    ///  要移除的 <see cref="T:System.Data.Constraint" />
    ///  的名称。
    ///</param>
    procedure Remove(name: string);
    ///<summary>
    ///  清除集合中的任何 <see cref="T:System.Data.Constraint" />
    ///  对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  索引。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的元素总数。
    ///</summary>
    ///<returns>
    ///  集合中的元素的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNConstraintCollection = class(TDNGenericImport<DNConstraintCollectionClass, DNConstraintCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnCollectionClass = interface(DNObjectClass)
  ['{A00A9A17-EE05-5836-99D0-2CE1D70A785F}']
  end;

  ///<summary>
  ///  表示一套 <see cref="T:System.Data.DataColumn" />
  ///  对象 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataColumnCollection')]
  DNDataColumnCollection = interface(DNObject)
  ['{68727487-487C-383F-A83C-DEE9FDDC59EB}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataColumn; overload;
    function get_Item(name: string): DNDataColumn; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  创建并添加了指定 <see cref="T:System.Data.DataColumn" />
    ///  对象传递给 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///  <param name="column">
    ///  要添加的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="column" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该列已经属于此集合中，或另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的列。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidExpressionException">
    ///  该表达式无效。
    ///  请参阅 <see cref="P:System.Data.DataColumn.Expression" />
    ///  有关如何创建表达式的详细信息的属性。
    ///</exception>
    procedure Add(column: DNDataColumn); overload;
    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Data.DataColumn" />
    ///  数组转换为集合的末尾。
    ///</summary>
    ///  <param name="columns">
    ///  数组 <see cref="T:System.Data.DataColumn" />
    ///  要添加到集合的对象。
    ///</param>
    procedure AddRange(columns: TArray<DNDataColumn>);
    ///<summary>
    ///  创建并添加了 <see cref="T:System.Data.DataColumn" />
    ///  对象，它具有指定的名称、 类型和表达式与 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///  <param name="columnName">
    ///  要在创建列时使用的名称。
    ///</param>
    ///  <param name="type"><see cref="P:System.Data.DataColumn.DataType" />
    ///  的新列。
    ///</param>
    ///  <param name="expression">
    ///  要分配给该表达式 <see cref="P:System.Data.DataColumn.Expression" />
    ///  属性。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的列。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidExpressionException">
    ///  该表达式无效。
    ///  请参阅 <see cref="P:System.Data.DataColumn.Expression" />
    ///  有关如何创建表达式的详细信息的属性。
    ///</exception>
    function Add(columnName: string; &type: DDN.mscorlib.DNType; expression: string): DNDataColumn; overload;
    ///<summary>
    ///  创建并添加了 <see cref="T:System.Data.DataColumn" />
    ///  对象，它具有指定名称和类型转换为 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///  <param name="columnName"><see cref="P:System.Data.DataColumn.ColumnName" />
    ///  要创建列时使用。
    ///</param>
    ///  <param name="type"><see cref="P:System.Data.DataColumn.DataType" />
    ///  的新列。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的列。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidExpressionException">
    ///  该表达式无效。
    ///  请参阅 <see cref="P:System.Data.DataColumn.Expression" />
    ///  有关如何创建表达式的详细信息的属性。
    ///</exception>
    function Add(columnName: string; &type: DDN.mscorlib.DNType): DNDataColumn; overload;
    ///<summary>
    ///  创建并添加了 <see cref="T:System.Data.DataColumn" />
    ///  对象，它具有指定的名称与 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///  <param name="columnName">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的列。
    ///  （比较不区分大小写。）
    ///</exception>
    function Add(columnName: string): DNDataColumn; overload;
    ///<summary>
    ///  创建并添加了 <see cref="T:System.Data.DataColumn" />
    ///  对象传递给 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</returns>
    function Add: DNDataColumn; overload;
    ///<summary>
    ///  检查是否可以从集合中移除特定列。
    ///</summary>
    ///  <param name="column">
    ///  一个 <see cref="T:System.Data.DataColumn" />
    ///  集合中。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果可以删除了该列。
    ///<see langword="false" />
    ///  如果，
    ///  <paramref name="column" />
    ///  参数为 <see langword="null" />
    ///  。
    ///  列不属于此集合。
    ///  列是关系的一部分。
    ///  另一个列的表达式取决于此列。
    ///</returns>
    function CanRemove(column: DNDataColumn): Boolean;
    ///<summary>
    ///  检查集合是否包含具有指定名称的列。
    ///</summary>
    ///  <param name="name"><see cref="P:System.Data.DataColumn.ColumnName" />
    ///  要查找的列。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果某一列存在具有此名称;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  将整个集合复制到现有的数组，该数组中指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  集合复制到的对象。
    ///</param>
    ///  <param name="index">
    ///  从其开始的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataColumn>; index: Int32); overload;
    ///<summary>
    ///  获取由名称指定的列的索引。
    ///</summary>
    ///  <param name="column">
    ///  要返回的列的名称。
    ///</param>
    ///<returns>
    ///  指定的列的索引 <paramref name="column" />
    ///  是否找到; 否则为-1。
    ///</returns>
    function IndexOf(column: DNDataColumn): Int32; overload;
    ///<summary>
    ///  获取与特定的名称 （名称不区分大小写） 的列的索引。
    ///</summary>
    ///  <param name="columnName">
    ///  要查找的列的名称。
    ///</param>
    ///<returns>
    ///  具有指定的名称，则为-1 如果列不存在集合中的列的从零开始的索引。
    ///</returns>
    function IndexOf(columnName: string): Int32; overload;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="column">
    ///  要移除的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="column" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  列不属于此集合。
    ///  - 或 -
    ///  列是关系的一部分。
    ///  - 或 -
    ///  另一个列的表达式取决于此列。
    ///</exception>
    procedure Remove(column: DNDataColumn); overload;
    ///<summary>
    ///  从集合中移除指定索引处的列。
    ///</summary>
    ///  <param name="index">
    ///  若要删除的列的索引。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合不具有指定索引处的列。
    ///</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  删除 <see cref="T:System.Data.DataColumn" />
    ///  具有指定的名称从集合对象。
    ///</summary>
    ///  <param name="name">
    ///  要删除的列的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合没有具有指定名称的列。
    ///</exception>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  清除集合中的任何列。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  索引。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataColumn read get_Item; default;
    property Item[name: string]: DNDataColumn read get_Item; default;
    ///<summary>
    ///  获取集合中的元素总数。
    ///</summary>
    ///<returns>
    ///  集合中的元素的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataColumnCollection = class(TDNGenericImport<DNDataColumnCollectionClass, DNDataColumnCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataRelationCollectionClass = interface(DNObjectClass)
  ['{D7BD456A-CD28-5D2F-8BC1-CE6573B5B4F1}']
  end;

  ///<summary>
  ///  表示集合的 <see cref="T:System.Data.DataRelation" />
  ///  对象的 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataRelationCollection')]
  DNDataRelationCollection = interface(DNObject)
  ['{6AA9CAE2-68C2-3EFB-8947-06F2A62BE714}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataRelation; overload;
    function get_Item(name: string): DNDataRelation; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Data.DataRelation" />
    ///  数组转换为集合的末尾。
    ///</summary>
    ///  <param name="relations">
    ///  数组 <see cref="T:System.Data.DataRelation" />
    ///  要添加到集合的对象。
    ///</param>
    procedure AddRange(relations: TArray<DNDataRelation>);
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  具有指定的名称和数组的父和子列，并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see langword="DataRelation" />
    ///  来创建。
    ///</param>
    ///  <param name="parentColumns">
    ///  数组的父 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="childColumns">
    ///  子数组 <see langword="DataColumn" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  创建的 <see langword="DataRelation" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  关系名称是一个 null 值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  关系已经属于此集合中，或属于另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有相同名称的关系。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  创建以来，该关系已进入无效状态。
    ///</exception>
    function Add(name: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  与指定的名称、 父级和子级列和值，该值指定是否创建一个约束的数组并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see langword="DataRelation" />
    ///  来创建。
    ///</param>
    ///  <param name="parentColumns">
    ///  数组的父 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="childColumns">
    ///  子数组 <see langword="DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="createConstraints"><see langword="true" />
    ///  若要创建约束;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  创建的关系。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  关系名称是一个 null 值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  关系已经属于此集合中，或属于另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有相同名称的关系。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  创建以来，该关系已进入无效状态。
    ///</exception>
    function Add(name: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>; createConstraints: Boolean): DNDataRelation; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  使用指定的父和子列，并将其添加到集合。
    ///</summary>
    ///  <param name="parentColumns">
    ///  关系的父列。
    ///</param>
    ///  <param name="childColumns">
    ///  关系的子列。
    ///</param>
    ///<returns>
    ///  创建的关系。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  参数为 null 值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  关系已经属于此集合中，或属于另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有相同名称的关系。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  创建以来，该关系已进入无效状态。
    ///</exception>
    function Add(parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  具有指定的名称和父级和子级的列，并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  该关系的名称。
    ///</param>
    ///  <param name="parentColumn">
    ///  关系的父列。
    ///</param>
    ///  <param name="childColumn">
    ///  关系的子列。
    ///</param>
    ///<returns>
    ///  创建的关系。
    ///</returns>
    function Add(name: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  具有指定名称、 父级和子列，具有可选约束的值根据 <paramref name="createConstraints" />
    ///  参数，并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  该关系的名称。
    ///</param>
    ///  <param name="parentColumn">
    ///  关系的父列。
    ///</param>
    ///  <param name="childColumn">
    ///  关系的子列。
    ///</param>
    ///  <param name="createConstraints"><see langword="true" />
    ///  若要创建的约束;否则为 <see langword="false" />
    ///  。
    ///  (默认值是 <see langword="true" />
    ///  )。
    ///</param>
    ///<returns>
    ///  创建的关系。
    ///</returns>
    function Add(name: string; parentColumn: DNDataColumn; childColumn: DNDataColumn; createConstraints: Boolean): DNDataRelation; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  与指定的父和子列中，并将其添加到集合。
    ///</summary>
    ///  <param name="parentColumn">
    ///  关系的父列。
    ///</param>
    ///  <param name="childColumn">
    ///  关系的子列。
    ///</param>
    ///<returns>
    ///  创建的关系。
    ///</returns>
    function Add(parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    ///<summary>
    ///  验证是否 <see cref="T:System.Data.DataRelation" />
    ///  集合中存在与特定的名称 （不区分大小写）。
    ///</summary>
    ///  <param name="name">
    ///  若要查找的关系的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  , 如果存在具有指定名称的关系;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  将集合复制 <see cref="T:System.Data.DataRelation" />
    ///  对象指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Data.DataRelation" />
    ///  要将集合复制到的对象。
    ///</param>
    ///  <param name="index">
    ///  从其开始的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataRelation>; index: Int32); overload;
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Data.DataRelation" />
    ///  对象。
    ///</summary>
    ///  <param name="relation">
    ///  要搜索的关系。
    ///</param>
    ///<returns>
    ///  从 0 开始的索引，该关系，则为-1 如果集合中找不到该关系。
    ///</returns>
    function IndexOf(relation: DNDataRelation): Int32; overload;
    ///<summary>
    ///  获取的索引 <see cref="T:System.Data.DataRelation" />
    ///  由名称指定。
    ///</summary>
    ///  <param name="relationName">
    ///  若要查找的关系的名称。
    ///</param>
    ///<returns>
    ///  具有指定的名称，则为-1 如果集合中不存在该关系的关系的从零开始的索引。
    ///</returns>
    function IndexOf(relationName: string): Int32; overload;
    ///<summary>
    ///  验证是否指定 <see cref="T:System.Data.DataRelation" />
    ///  可以从集合中移除。
    ///</summary>
    ///  <param name="relation">
    ///  要对其执行检查的关系。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.DataRelation" />
    ///  可删除; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanRemove(relation: DNDataRelation): Boolean;
    ///<summary>
    ///  从集合中移除指定索引处的关系。
    ///</summary>
    ///  <param name="index">
    ///  要删除的关系的索引。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合中指定索引处没有关系。
    ///</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  从集合中移除具有指定名称的关系。
    ///</summary>
    ///  <param name="name">
    ///  要删除的关系的名称。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  集合没有具有指定名称的关系。
    ///</exception>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.DataRelation" />
    ///  中添加一个 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要添加到集合中的 <see langword="DataRelation" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  参数为 null 值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  关系已经属于此集合中，或属于另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的关系。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  创建以来，该关系已进入无效状态。
    ///</exception>
    procedure Add(relation: DNDataRelation); overload;
    ///<summary>
    ///  清除集合的所有关系。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  从集合中移除指定的关系。
    ///</summary>
    ///  <param name="relation">
    ///  要删除的关系。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  该关系是一个 null 值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该关系不属于该集合。
    ///</exception>
    procedure Remove(relation: DNDataRelation); overload;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  索引。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataRelation read get_Item; default;
    property Item[name: string]: DNDataRelation read get_Item; default;
    ///<summary>
    ///  获取集合中的元素总数。
    ///</summary>
    ///<returns>
    ///  集合中的元素的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataRelationCollection = class(TDNGenericImport<DNDataRelationCollectionClass, DNDataRelationCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataRowCollectionClass = interface(DNObjectClass)
  ['{5E6C1162-90E6-59F3-BAA0-3D0B3939C9A9}']
  end;

  ///<summary>
  ///  表示的行的集合 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataRowCollection')]
  DNDataRowCollection = interface(DNObject)
  ['{E3A1DFAE-10DE-3667-8ADD-B69986EBF849}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNDataRow;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Data.DataRow" />
    ///  到 <see cref="T:System.Data.DataRowCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="row">
    ///  要添加的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  该行是 null。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  行属于另一个表，或已属于此表。
    ///</exception><exception cref="T:System.Data.ConstraintException">
    ///  添加使约束无效。
    ///</exception><exception cref="T:System.Data.NoNullAllowedException">
    ///  添加尝试将空值放入 <see cref="T:System.Data.DataColumn" />
    ///  其中 <see cref="P:System.Data.DataColumn.AllowDBNull" />
    ///  为 false。
    ///</exception>
    procedure Add(row: DNDataRow); overload;
    ///<summary>
    ///  将新行插入到集合中的指定位置处。
    ///</summary>
    ///  <param name="row">
    ///  要添加的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    ///  <param name="pos">
    ///  要添加集合中的 （从零开始） 位置 <see langword="DataRow" />
    ///  。
    ///</param>
    procedure InsertAt(row: DNDataRow; pos: Int32);
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Data.DataRow" />
    ///  对象。
    ///</summary>
    ///  <param name="row">
    ///  要搜索的 <see langword="DataRow" />
    ///  。
    ///</param>
    ///<returns>
    ///  该行，则为-1 如果集合中找不到行的从零开始的索引。
    ///</returns>
    function IndexOf(row: DNDataRow): Int32;
    ///<summary>
    ///  创建使用指定的值的行，并将其添加到 <see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///</summary>
    ///  <param name="values">
    ///  用于创建新行的值的数组。
    ///</param>
    ///<returns>
    ///  无。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该数组将大于表中的列数。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  一个值与其各自的列类型不匹配。
    ///</exception><exception cref="T:System.Data.ConstraintException">
    ///  添加行使约束无效。
    ///</exception><exception cref="T:System.Data.NoNullAllowedException">
    ///  尝试放入列中的 null 其中 <see cref="P:System.Data.DataColumn.AllowDBNull" />
    ///  为 false。
    ///</exception>
    function Add(values: TArray<DDN.mscorlib.DNObject>): DNDataRow; overload;
    ///<summary>
    ///  获取指定的主键值的行。
    ///</summary>
    ///  <param name="key">
    ///  主键值 <see cref="T:System.Data.DataRow" />
    ///  来查找。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  ，其中包含指定的主键值; 否则为空值中不存在的主键值如果 <see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.MissingPrimaryKeyException">
    ///  表没有主键。
    ///</exception>
    function Find(key: DDN.mscorlib.DNObject): DNDataRow; overload;
    ///<summary>
    ///  获取包含指定的主键值的行。
    ///</summary>
    ///  <param name="keys">
    ///  若要查找的主键值的数组。
    ///  数组的类型是<see langword="Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  A<see cref="T:System.Data.DataRow" />
    ///  指定包含主键值的对象; 否则为空值中不存在的主键值如果<see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  没有行对应于该索引值。
    ///</exception><exception cref="T:System.Data.MissingPrimaryKeyException">
    ///  表没有主键。
    ///</exception>
    function Find(keys: TArray<DDN.mscorlib.DNObject>): DNDataRow; overload;
    ///<summary>
    ///  清除集合中的所有行。
    ///</summary>
    ///<exception cref="T:System.Data.InvalidConstraintException">
    ///  一个 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  上强制 <see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///</exception>
    procedure Clear;
    ///<summary>
    ///  获取一个值，该值指示集合中的任意行的主键是否包含指定的值。
    ///</summary>
    ///  <param name="key">
    ///  若要测试的主键的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含 <see cref="T:System.Data.DataRow" />
    ///  用指定的主键值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.MissingPrimaryKeyException">
    ///  表没有主键。
    ///</exception>
    function &Contains(key: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示集合中的任意行的主键列是否包含指定对象数组中的值。
    ///</summary>
    ///  <param name="keys">
    ///  要测试的主键值的数组。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.DataRowCollection" />
    ///  包含 <see cref="T:System.Data.DataRow" />
    ///  具有指定键的值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.MissingPrimaryKeyException">
    ///  表没有主键。
    ///</exception>
    function &Contains(keys: TArray<DDN.mscorlib.DNObject>): Boolean; overload;
    ///<summary>
    ///  将所有复制 <see cref="T:System.Data.DataRow" />
    ///  到给定的目标数组索引处开始的给定数组集合中的对象。
    ///</summary>
    ///  <param name="ar">
    ///  一维数组，它是从 <see langword="DataRowCollection" />
    ///  中复制的元素的目标。
    ///  该数组的索引必须从零开始。
    ///</param>
    ///  <param name="index">
    ///  数组中开始复制的位置的索引（从零开始）。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  将所有复制 <see cref="T:System.Data.DataRow" />
    ///  到给定的目标数组索引处开始的给定数组集合中的对象。
    ///</summary>
    ///  <param name="array">
    ///  一维数组，它是从 <see langword="DataRowCollection" />
    ///  中复制的元素的目标。
    ///  该数组的索引必须从零开始。
    ///</param>
    ///  <param name="index">
    ///  数组中开始复制的位置的索引（从零开始）。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataRow>; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  为此集合。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  为此集合。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    ///  <param name="row">
    ///  要移除的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    procedure Remove(row: DNDataRow);
    ///<summary>
    ///  从集合中移除指定索引处的行。
    ///</summary>
    ///  <param name="index">
    ///  若要删除的行的索引。
    ///</param>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的总数 <see cref="T:System.Data.DataRow" />
    ///  此集合中的对象。
    ///</summary>
    ///<returns>
    ///  总次数 <see cref="T:System.Data.DataRow" />
    ///  此集合中的对象。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDataRow read get_Item; default;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataRowCollection = class(TDNGenericImport<DNDataRowCollectionClass, DNDataRowCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataTableCollectionClass = interface(DNObjectClass)
  ['{C362542A-D4FE-581A-9E75-42982C793A0F}']
  end;

  ///<summary>
  ///  表示表的集合 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataTableCollection')]
  DNDataTableCollection = interface(DNObject)
  ['{1FB590A0-3C5C-3492-B1BB-B1BBBF38D68A}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataTable; overload;
    function get_Item(name: string): DNDataTable; overload;
    function get_Item(name: string; tableNamespace: string): DNDataTable; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  验证是否指定 <see cref="T:System.Data.DataTable" />
    ///  可以从集合中移除对象。
    ///</summary>
    ///  <param name="table"><see langword="DataTable" />
    ///  集合中要对其执行检查。
    ///</param>
    ///<returns><see langword="true" />
    ///  是否可以删除表;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanRemove(table: DNDataTable): Boolean;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" />
    ///  集合中存在具有指定名称的对象。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  来查找。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的表存在，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: string): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" />
    ///  对象集合中存在具有指定名称和表命名空间。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  来查找。
    ///</param>
    ///  <param name="tableNamespace">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  命名空间中进行查找。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的表存在，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: string; tableNamespace: string): Boolean; overload;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.DataTableCollection" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 、 指定的目标数组索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.DataTableCollection" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataTable>; index: Int32); overload;
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    ///  <param name="table">
    ///  要搜索的 <see langword="DataTable" />
    ///  。
    ///</param>
    ///<returns>
    ///  表或-1，如果在集合中找不到表的从零开始的索引。
    ///</returns>
    function IndexOf(table: DNDataTable): Int32; overload;
    ///<summary>
    ///  获取集合中的索引 <see cref="T:System.Data.DataTable" />
    ///  具有指定名称的对象。
    ///</summary>
    ///  <param name="tableName">
    ///  名称 <see langword="DataTable" />
    ///  要查找对象。
    ///</param>
    ///<returns>
    ///  从零开始的索引 <see langword="DataTable" />
    ///  与指定的名称，则为-1 如果集合中不存在表。
    ///  将返回-1 时两个或多个表具有相同名称但不同的命名空间。
    ///  如果存在任何多义性，将表名称传递给恰好一个表进行匹配时，不会成功调用。
    ///</returns>
    function IndexOf(tableName: string): Int32; overload;
    ///<summary>
    ///  获取指定的集合中的索引 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    ///  <param name="tableName">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  要查找对象。
    ///</param>
    ///  <param name="tableNamespace">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  命名空间中进行查找。
    ///</param>
    ///<returns>
    ///  从零开始的索引 <see cref="T:System.Data.DataTable" />
    ///  与指定的名称，则为-1 如果集合中不存在表。
    ///</returns>
    function IndexOf(tableName: string; tableNamespace: string): Int32; overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.DataTable" />
    ///  具有指定的名称从集合对象。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  要移除对象。
    ///</param>
    ///  <param name="tableNamespace">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  命名空间中进行查找。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合没有具有指定名称的表。
    ///</exception>
    procedure Remove(name: string; tableNamespace: string); overload;
    ///<summary>
    ///  将指定的 <see langword="DataTable" />
    ///  添加到集合。
    ///</summary>
    ///  <param name="table">
    ///  要添加的 <see langword="DataTable" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  为此表是指定的值 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  表已属于该集合，或属于另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中的表具有相同的名称。
    ///  比较不区分大小写。
    ///</exception>
    procedure Add(table: DNDataTable); overload;
    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Data.DataTable" />
    ///  数组转换为集合的末尾。
    ///</summary>
    ///  <param name="tables">
    ///  数组 <see cref="T:System.Data.DataTable" />
    ///  要添加到集合的对象。
    ///</param>
    procedure AddRange(tables: TArray<DNDataTable>);
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataTable" />
    ///  对象使用指定的名称，并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  指定所创建的名称 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DuplicateNameException">
    ///  集合中的表具有相同的名称。
    ///  （比较不区分大小写。）
    ///</exception>
    function Add(name: string): DNDataTable; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataTable" />
    ///  对象使用指定的名称，并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  指定所创建的名称 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="tableNamespace">
    ///  要使所创建的命名空间 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DuplicateNameException">
    ///  集合中的表具有相同的名称。
    ///  （比较不区分大小写。）
    ///</exception>
    function Add(name: string; tableNamespace: string): DNDataTable; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.DataTable" />
    ///  对象使用的默认名称，并将其添加到集合。
    ///</summary>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function Add: DNDataTable; overload;
    ///<summary>
    ///  清除集合中的所有 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    ///  <param name="table">
    ///  要移除的 <see langword="DataTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  为此表是指定的值 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  表不属于此集合。
    ///  - 或 -
    ///  表是一种关系的一部分。
    ///</exception>
    procedure Remove(table: DNDataTable); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.DataTable" />
    ///  集合中的指定索引处的对象。
    ///</summary>
    ///  <param name="index">
    ///  索引 <see langword="DataTable" />
    ///  中删除。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合中指定索引处没有表。
    ///</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  删除 <see cref="T:System.Data.DataTable" />
    ///  具有指定的名称从集合对象。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  要移除对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合没有具有指定名称的表。
    ///</exception>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  索引。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataTable read get_Item; default;
    property Item[name: string]: DNDataTable read get_Item; default;
    property Item[name: string; tableNamespace: string]: DNDataTable read get_Item; default;
    ///<summary>
    ///  获取集合中的元素总数。
    ///</summary>
    ///<returns>
    ///  集合中的元素的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataTableCollection = class(TDNGenericImport<DNDataTableCollectionClass, DNDataTableCollection>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionKeyStoreProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E90EA962-BDCF-52EA-BAEA-39C4F47CD0C8}']
  end;

  ///<summary>
  ///  所有密钥存储提供程序的基类。
  ///  自定义提供程序必须从此类中派生而来并重写其成员函数，然后使用 SqlConnection.RegisterColumnEncryptionKeyStoreProviders() 对其进行注册。
  ///  有关详细信息，请参阅 Always Encrypted。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider')]
  DNSqlColumnEncryptionKeyStoreProvider = interface(DDN.mscorlib.DNObject)
  ['{646E24F4-8540-3AA6-A2E0-60458F6E96EF}']
  { methods } 

    function SignColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean): TArray<Byte>;
    function VerifyColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean; signature: TArray<Byte>): Boolean;
    ///<summary>
    ///  对列加密密钥的指定加密值进行解密。
    ///  加密值预期应使用具有指定密钥路径的列主密钥和使用指定的算法进行加密。
    ///</summary>
    ///  <param name="masterKeyPath">
    ///  主密钥路径。
    ///</param>
    ///  <param name="encryptionAlgorithm">
    ///  加密算法。
    ///</param>
    ///  <param name="encryptedColumnEncryptionKey">
    ///  加密的列加密密钥。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Byte" />
    ///  。
    ///  已解密的列加密密钥。
    ///</returns>
    function DecryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; encryptedColumnEncryptionKey: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  使用具有指定密钥路径的列主密钥和使用指定的算法对列加密密钥进行加密。
    ///</summary>
    ///  <param name="masterKeyPath">
    ///  主密钥路径。
    ///</param>
    ///  <param name="encryptionAlgorithm">
    ///  加密算法。
    ///</param>
    ///  <param name="columnEncryptionKey">
    ///  加密的列加密密钥。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Byte" />
    ///  。
    ///  加密的列加密密钥。
    ///</returns>
    function EncryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; columnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionKeyStoreProvider = class(TDNGenericImport<DNSqlColumnEncryptionKeyStoreProviderClass, DNSqlColumnEncryptionKeyStoreProvider>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlCredentialClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E65E795-8FC1-5812-8149-412DEBA4EF7B}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  类型的对象。
    ///</summary>
    ///  <param name="userId">
    ///  用户 id。
    ///</param>
    ///  <param name="password">
    ///  密码，则为 <see cref="T:System.Security.SecureString" />
    ///  值标记为只读的。
    ///  传递读/写 <see cref="T:System.Security.SecureString" />
    ///  参数将引发 <see cref="T:System.ArgumentException" />
    ///  。
    ///</param>
    {class} function init(userId: string; password: DDN.mscorlib.DNSecureString): DNSqlCredential;

  end;

  ///<summary><see cref="T:System.Data.SqlClient.SqlCredential" />
  ///  提供了更安全的方式来指定登录名尝试使用密码 SQL Server 身份验证。
  ///<see cref="T:System.Data.SqlClient.SqlCredential" />
  ///  用户 id 和密码，将用来组成 SQL Server 身份验证。
  ///  中的密码 <see cref="T:System.Data.SqlClient.SqlCredential" />
  ///  对象属于类型 <see cref="T:System.Security.SecureString" />
  ///  。
  ///<see cref="T:System.Data.SqlClient.SqlCredential" />
  ///  不能被继承。
  ///  Windows 身份验证 (<see langword="Integrated Security = true" />
  ///  ) 保持最安全的方式来登录到 SQL Server 数据库。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlCredential')]
  DNSqlCredential = interface(DDN.mscorlib.DNObject)
  ['{8D53DB41-BFD1-3E10-9414-DF8D7A1CB2CE}']
  { getters & setters } 

    function get_UserId: string;
    function get_Password: DDN.mscorlib.DNSecureString;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  返回的用户 ID 组件 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回的用户 ID 组件 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象...
    ///</returns>
    property UserId: string read get_UserId;
    ///<summary>
    ///  返回的密码部分 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回的密码部分 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</returns>
    property Password: DDN.mscorlib.DNSecureString read get_Password;
  end;

  TDNSqlCredential = class(TDNGenericImport<DNSqlCredentialClass, DNSqlCredential>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBytesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3AD176CF-E8C3-5490-9208-7DB1326D4517}']
  { static getter & setter } 

    {class} function get_Null: DNSqlBytes;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlBytes; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  类根据指定的字节数组。
    ///</summary>
    ///  <param name="buffer">
    ///  无符号字节的数组。
    ///</param>
    {class} function init(buffer: TArray<Byte>): DNSqlBytes; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  类根据指定 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  值。
    ///</param>
    {class} function init(value: DNSqlBinary): DNSqlBytes; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  类根据指定 <see cref="T:System.IO.Stream" />
    ///  值。
    ///</summary>
    ///  <param name="s"><see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    {class} function init(s: DDN.mscorlib.DNStream): DNSqlBytes; overload;

  { static propertys } 

    ///<summary>
    ///  返回的 null 实例 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回一个实例，在这种方式， <see cref="P:System.Data.SqlTypes.SqlBytes.IsNull" />
    ///  返回 <see langword="true" />
    ///  。
    ///</returns>
    {class} property Null: DNSqlBytes read get_Null;
  end;

  ///<summary>
  ///  表示可变的引用类型包装 <see cref="P:System.Data.SqlTypes.SqlBytes.Buffer" />
  ///  或 <see cref="P:System.Data.SqlTypes.SqlBytes.Stream" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlBytes')]
  DNSqlBytes = interface(DDN.mscorlib.DNObject)
  ['{DFEA266A-B66D-341F-8DE1-ACAB8A9C6564}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Buffer: TArray<Byte>;
    function get_Length: Int64;
    function get_MaxLength: Int64;
    function get_Value: TArray<Byte>;
    function get_Item(offset: Int64): Byte;
    procedure set_Item(offset: Int64; value: Byte);
    function get_Stream: DDN.mscorlib.DNStream;
    procedure set_Stream(value: DDN.mscorlib.DNStream);

  { methods } 

    ///<summary>
    ///  完成这一设置 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例为 null。
    ///</summary>
    procedure SetNull;
    ///<summary>
    ///  设置此长度 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Int64" />
    ///  长时间值表示长度。
    ///</param>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  将字节复制从此 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  到缓冲区中传递的实例，并返回复制的字节数。
    ///</summary>
    ///  <param name="offset"><see cref="T:System.Int64" />
    ///  长值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</param>
    ///  <param name="buffer">
    ///  要将复制到的字节数组缓冲区。
    ///</param>
    ///  <param name="offsetInBuffer"><see cref="T:System.Int32" />
    ///  整数偏移量开始复制到的缓冲区。
    ///</param>
    ///  <param name="count"><see cref="T:System.Int32" />
    ///  表示的字节数要复制的整数。
    ///</param>
    ///<returns><see cref="T:System.Int64" />
    ///  表示的数的长整型值复制字节。
    ///</returns>
    function Read(offset: Int64; buffer: TArray<Byte>; offsetInBuffer: Int32; count: Int32): Int64;
    ///<summary>
    ///  将从传入的缓冲区的字节复制到此 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</summary>
    ///  <param name="offset"><see cref="T:System.Int64" />
    ///  长值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</param>
    ///  <param name="buffer">
    ///  要将复制到的字节数组缓冲区。
    ///</param>
    ///  <param name="offsetInBuffer"><see cref="T:System.Int32" />
    ///  整数偏移量开始复制到的缓冲区。
    ///</param>
    ///  <param name="count"><see cref="T:System.Int32" />
    ///  表示的字节数要复制的整数。
    ///</param>
    procedure Write(offset: Int64; buffer: TArray<Byte>; offsetInBuffer: Int32; count: Int32);
    ///<summary>
    ///  构造并返回 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  从此 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  从此实例。
    ///</returns>
    function ToSqlBinary: DNSqlBinary;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  为 null， <see langword="false" />
    ///  否则为。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  返回对内部缓冲区的引用。
    ///</summary>
    ///<returns>
    ///  返回对内部缓冲区的引用。
    ///  有关 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  在非托管指针之上创建的实例，它将返回内部缓冲区的托管的副本。
    ///</returns>
    property Buffer: TArray<Byte> read get_Buffer;
    ///<summary>
    ///  获取包含中的值的长度<see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Int64" />
    ///  值，该值表示中包含的值的长度<see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///  如果没有缓冲区，对该实例可用，或者如果值为 null，则返回-1。
    ///  返回<see cref="P:System.IO.Stream.Length" />
    ///  流包装的实例。
    ///</returns>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取此的内部缓冲区的值的最大长度 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</summary>
    ///<returns>
    ///  Long 值表示的值的内部缓冲区的最大长度。
    ///  则返回-1 流包装 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</returns>
    property MaxLength: Int64 read get_MaxLength;
    ///<summary>
    ///  返回此保留的值的托管的副本 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此值 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  作为字节数组。
    ///</returns>
    property Value: TArray<Byte> read get_Value;
    property Item[offset: Int64]: Byte read get_Item write set_Item; default;
    ///<summary>
    ///  获取或设置此数据 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  以流的形式。
    ///</summary>
    ///<returns>
    ///  包含 SqlBytes 数据的流。
    ///</returns>
    property Stream: DDN.mscorlib.DNStream read get_Stream write set_Stream;
  end;

  TDNSqlBytes = class(TDNGenericImport<DNSqlBytesClass, DNSqlBytes>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlCharsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{402C3B2D-44A0-5FCC-92E5-902F2DEDD826}']
  { static getter & setter } 

    {class} function get_Null: DNSqlChars;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlChars; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  类根据指定的字符数组。
    ///</summary>
    ///  <param name="buffer"><see cref="T:System.Char" />
    ///  数组。
    ///</param>
    {class} function init(buffer: TArray<Char>): DNSqlChars; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  类根据指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  值。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    {class} function init(value: DNSqlString): DNSqlChars; overload;

  { static propertys } 

    ///<summary>
    ///  返回的 null 实例 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回一个实例，在这种方式， <see cref="P:System.Data.SqlTypes.SqlChars.IsNull" />
    ///  返回 <see langword="true" />
    ///  。
    ///  有关详细信息，请参阅处理 Null 值。
    ///</returns>
    {class} property Null: DNSqlChars read get_Null;
  end;

  ///<summary><see cref="T:System.Data.SqlTypes.SqlChars" />
  ///  是可变的引用类型包装 <see cref="T:System.Char" />
  ///  数组或 <see cref="T:System.Data.SqlTypes.SqlString" />
  ///  实例。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlChars')]
  DNSqlChars = interface(DDN.mscorlib.DNObject)
  ['{445D8429-C2BC-30B2-94DF-D51131301951}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Buffer: TArray<Char>;
    function get_Length: Int64;
    function get_MaxLength: Int64;
    function get_Value: TArray<Char>;
    function get_Item(offset: Int64): Char;
    procedure set_Item(offset: Int64; value: Char);

  { methods } 

    ///<summary>
    ///  完成这一设置 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例为 null。
    ///</summary>
    procedure SetNull;
    ///<summary>
    ///  设置此长度 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Int64" />
    ///<see langword="long" />
    ///  表示长度值。
    ///</param>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  将字符复制从此 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  到缓冲区中传递的实例，并返回复制的字符数。
    ///</summary>
    ///  <param name="offset"><see cref="T:System.Int64" />
    ///<see langword="long" />
    ///  值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</param>
    ///  <param name="buffer">
    ///  若要将复制到指定字符数组缓冲区。
    ///</param>
    ///  <param name="offsetInBuffer"><see cref="T:System.Int32" />
    ///  整数偏移量开始复制到的缓冲区。
    ///</param>
    ///  <param name="count"><see cref="T:System.Int32" />
    ///  整数值，表示要复制的字符数。
    ///</param>
    ///<returns><see cref="T:System.Int64" />
    ///<see langword="long" />
    ///  表示版本号的值复制字节。
    ///</returns>
    function Read(offset: Int64; buffer: TArray<Char>; offsetInBuffer: Int32; count: Int32): Int64;
    ///<summary>
    ///  将从传入的缓冲区的字符复制到此 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</summary>
    ///  <param name="offset">
    ///  一个 <see langword="long" />
    ///  值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</param>
    ///  <param name="buffer">
    ///  若要将复制到指定字符数组缓冲区。
    ///</param>
    ///  <param name="offsetInBuffer"><see cref="T:System.Int32" />
    ///  整数偏移量开始复制到的缓冲区。
    ///</param>
    ///  <param name="count"><see cref="T:System.Int32" />
    ///  表示的字符数要复制的整数。
    ///</param>
    procedure Write(offset: Int64; buffer: TArray<Char>; offsetInBuffer: Int32; count: Int32);
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例传递给它的等效项 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  表示形式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  此类型表示形式。
    ///</returns>
    function ToSqlString: DNSqlString;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  返回对内部缓冲区的引用。
    ///</summary>
    ///<returns>
    ///  返回对内部缓冲区的引用。
    ///  有关 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  在非托管指针之上创建的实例，它将返回内部缓冲区的托管的副本。
    ///</returns>
    property Buffer: TArray<Char> read get_Buffer;
    ///<summary>
    ///  获取中包含的值的长度 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Int64" />
    ///  值，该值指示以字符为单位中包含的值的长度 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///  如果没有缓冲区可用的实例，或者如果值为 null，则返回-1。
    ///  返回 <see cref="P:System.IO.Stream.Length" />
    ///  流包装的实例。
    ///</returns>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取内部缓冲区可以容纳的值的双字节字符中的最大长度。
    ///</summary>
    ///<returns><see cref="T:System.Int64" />
    ///  值，该值表示双字节字符的值的内部缓冲区的最大长度。
    ///  则返回-1 流包装 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</returns>
    property MaxLength: Int64 read get_MaxLength;
    ///<summary>
    ///  返回此保留的值的托管的副本 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此值 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  作为一个字符数组。
    ///</returns>
    property Value: TArray<Char> read get_Value;
    property Item[offset: Int64]: Char read get_Item write set_Item; default;
  end;

  TDNSqlChars = class(TDNGenericImport<DNSqlCharsClass, DNSqlChars>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlXmlClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2DA5915F-CEFB-54C3-8860-97DD634A514F}']
  { static getter & setter } 

    {class} function get_Null: DNSqlXml;

  { constructors } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例。
    ///</summary>
    {class} function init: DNSqlXml; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例，并将其与所提供的内容关联 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Xml.XmlReader" />
    ///  的派生类实例要用作新值 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例。
    ///</param>
    {class} function init(value: DNXmlReader): DNSqlXml; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例，以提供从提供的 XML 值 <see cref="T:System.IO.Stream" />
    ///  -派生实例。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  -派生实例 (如 <see cref="T:System.IO.FileStream" />
    ///  ) 要从其中加载 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例的 Xml 内容。
    ///</param>
    {class} function init(value: DDN.mscorlib.DNStream): DNSqlXml; overload;

  { static propertys } 

    ///<summary>
    ///  表示的 null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  类型。
    ///</summary>
    ///<returns>
    ///  Null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  类型。
    ///</returns>
    {class} property Null: DNSqlXml read get_Null;
  end;

  ///<summary>
  ///  表示 XML 数据存储在数据库中或从服务器检索。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlXml')]
  DNSqlXml = interface(DDN.mscorlib.DNObject)
  ['{D2B9B85D-34A6-3D8E-B78F-88919F51DF17}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: string;

  { methods } 

    ///<summary>
    ///  获取此内容的 xml 值 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  作为 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///  -派生的实例，它包含的 XML 内容。
    ///  可能会有所不同的实际类型 (例如，返回值可能是 <see cref="T:System.Xml.XmlTextReader" />
    ///  ) 具体取决于如何呈现的信息是在内部，在服务器上。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  尝试访问此属性上的 null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  。
    ///</exception>
    function CreateReader: DNXmlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  该值指示此实例是否表示 null <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="Value" />
    ///  为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取此内容的字符串表示形式 XML <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  字符串表示形式的 XML 内容中。
    ///</returns>
    property Value: string read get_Value;
  end;

  TDNSqlXml = class(TDNGenericImport<DNSqlXmlClass, DNSqlXml>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNPathDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7B48935A-E731-53B0-8E8A-566DDE8D810C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Drawing2D.PathData" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPathData;

  end;

  ///<summary>
  ///  包含组成的图形数据 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.PathData')]
  DNPathData = interface(DDN.mscorlib.DNObject)
  ['{556E6DFC-86A0-333E-B6CC-B80DBDF05065}']
  { getters & setters } 

    function get_Points: TArray<DNPointF>;
    procedure set_Points(value: TArray<DNPointF>);
    function get_Types: TArray<Byte>;
    procedure set_Types(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示要通过其构成路径的点。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  表示要通过其构成路径的点的对象。
    ///</returns>
    property Points: TArray<DNPointF> read get_Points write set_Points;
    ///<summary>
    ///  获取或设置路径中的相应点的类型。
    ///</summary>
    ///<returns>
    ///  路径中指定相应的点的类型的字节数组。
    ///</returns>
    property Types: TArray<Byte> read get_Types write set_Types;
  end;

  TDNPathData = class(TDNGenericImport<DNPathDataClass, DNPathData>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNBitmapDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EE65B648-C66F-50C6-BAF2-C9A54865BD12}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNBitmapData;

  end;

  ///<summary>
  ///  指定位图图像的属性。
  ///<see cref="T:System.Drawing.Imaging.BitmapData" />
  ///  类由 <see cref="Overload:System.Drawing.Bitmap.LockBits" />
  ///  和 <see cref="M:System.Drawing.Bitmap.UnlockBits(System.Drawing.Imaging.BitmapData)" />
  ///  方法 <see cref="T:System.Drawing.Bitmap" />
  ///  类。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.BitmapData')]
  DNBitmapData = interface(DDN.mscorlib.DNObject)
  ['{3E7E92A8-C78F-3FB2-A197-5AF12F6DBA38}']
  { getters & setters } 

    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Stride: Int32;
    procedure set_Stride(value: Int32);
    function get_PixelFormat: DNPixelFormat;
    procedure set_PixelFormat(value: DNPixelFormat);
    function get_Scan0: IntPtr;
    procedure set_Scan0(value: IntPtr);
    function get_Reserved: Int32;
    procedure set_Reserved(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的像素宽度 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///  这也可以看作是一个扫描行中的像素数。
    ///</summary>
    ///<returns>
    ///  像素宽度 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  获取或设置的像素高度 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///  也有时称为扫描行数。
    ///</summary>
    ///<returns>
    ///  像素高度 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</returns>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  获取或设置 stride （也称为扫描宽度） 的宽度 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  跨距宽度，以字节为单位的 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</returns>
    property Stride: Int32 read get_Stride write set_Stride;
    ///<summary>
    ///  获取或设置的格式中的像素信息 <see cref="T:System.Drawing.Bitmap" />
    ///  返回此对象 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  关联指定格式的像素信息 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat write set_PixelFormat;
    ///<summary>
    ///  获取或设置在位图中的第一个像素数据的地址。
    ///  这也可以看作是位图中的第一个扫描行。
    ///</summary>
    ///<returns>
    ///  在位图中的第一个像素数据的地址。
    ///</returns>
    property Scan0: IntPtr read get_Scan0 write set_Scan0;
    ///<summary>
    ///  保留。
    ///  请勿使用。
    ///</summary>
    ///<returns>
    ///  保留。
    ///  请勿使用。
    ///</returns>
    property Reserved: Int32 read get_Reserved write set_Reserved;
  end;

  TDNBitmapData = class(TDNGenericImport<DNBitmapDataClass, DNBitmapData>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNColorPaletteClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D5700A5-F93A-528A-AAEA-8A5C32FB3939}']
  end;

  ///<summary>
  ///  定义一个数组构成的调色板的颜色。
  ///  颜色是 32 位 ARGB 颜色。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ColorPalette')]
  DNColorPalette = interface(DDN.mscorlib.DNObject)
  ['{0CF09C28-25D5-32B7-A65A-CB9710DCD5DB}']
  { getters & setters } 

    function get_Flags: Int32;
    function get_Entries: TArray<DNColor>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，指定如何解释在数组中的颜色的颜色信息。
    ///</summary>
    ///<returns>
    ///  下面的标志值是有效的︰
    ///  0x00000001
    ///  数组中的颜色值包含 alpha 信息。
    ///  0x00000002
    ///  数组中的颜色是灰度值。
    ///  0x00000004
    ///  数组中的颜色是半色调值。
    ///</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  数组 <see cref="T:System.Drawing.Color" />
    ///  结构组成此 <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  。
    ///</returns>
    property Entries: TArray<DNColor> read get_Entries;
  end;

  TDNColorPalette = class(TDNGenericImport<DNColorPaletteClass, DNColorPalette>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{24E9A650-C428-5F5F-88CD-C510A480FCBA}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  类从指定的全局唯一标识符 (GUID)。
    ///  GUID 指定图像编码器参数类别。
    ///</summary>
    ///  <param name="guid">
    ///  全局唯一标识符，用于标识图像编码器参数类别。
    ///</param>
    {class} function init(guid: DDN.mscorlib.DNGuid): DNEncoder;

  { static fields getter & setter } 

   function __fakeFieldGet_Compression: DNEncoder;
   function __fakeFieldGet_ColorDepth: DNEncoder;
   function __fakeFieldGet_ScanMethod: DNEncoder;
   function __fakeFieldGet_Version: DNEncoder;
   function __fakeFieldGet_RenderMethod: DNEncoder;
   function __fakeFieldGet_Quality: DNEncoder;
   function __fakeFieldGet_Transformation: DNEncoder;
   function __fakeFieldGet_LuminanceTable: DNEncoder;
   function __fakeFieldGet_ChrominanceTable: DNEncoder;
   function __fakeFieldGet_SaveFlag: DNEncoder;

  { static fields } 

    ///<summary><see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用压缩参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property Compression: DNEncoder read __fakeFieldGet_Compression;
    ///<summary><see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用颜色深度参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property ColorDepth: DNEncoder read __fakeFieldGet_ColorDepth;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用扫描方法参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property ScanMethod: DNEncoder read __fakeFieldGet_ScanMethod;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  使用版本参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property Version: DNEncoder read __fakeFieldGet_Version;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  使用 render 方法参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property RenderMethod: DNEncoder read __fakeFieldGet_RenderMethod;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用质量参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property Quality: DNEncoder read __fakeFieldGet_Quality;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用转换参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property Transformation: DNEncoder read __fakeFieldGet_Transformation;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  使用亮度表参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property LuminanceTable: DNEncoder read __fakeFieldGet_LuminanceTable;
    ///<summary><see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用色度表参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property ChrominanceTable: DNEncoder read __fakeFieldGet_ChrominanceTable;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  使用保存的全局唯一标识符初始化的对象标志参数类别。
    ///</summary>
    {class} property SaveFlag: DNEncoder read __fakeFieldGet_SaveFlag;

  end;

  ///<summary><see cref="T:System.Drawing.Imaging.Encoder" />
  ///  对象所封装标识图像编码器参数的类别的全局唯一标识符 (GUID)。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.Encoder')]
  DNEncoder = interface(DDN.mscorlib.DNObject)
  ['{673667DC-F729-31F3-8A8C-824C297FFEBB}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取标识图像编码器的全局唯一标识符 (GUID) 参数类别。
    ///</summary>
    ///<returns>
    ///  标识图像编码器参数类别的 GUID。
    ///</returns>
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNEncoder = class(TDNGenericImport<DNEncoderClass, DNEncoder>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderParameterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{47EFB640-614B-569F-A64B-546A1D6032F7}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 8 位无符号的整数。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  一个 8 位无符号的整数，指定存储中的值 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; value: Byte): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 8 位值。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  或 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定的值存储在一个字节 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    ///  <param name="undefined">
    ///  如果 <see langword="true" />
    ///  , 、 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  ; 否则为 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  。
    ///</param>
    {class} function init(encoder: DNEncoder; value: Byte; undefined: Boolean): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 16 位整数。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeShort" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  一个指定中存储的值的 16 位整数 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  必须为非负数。
    ///</param>
    {class} function init(encoder: DNEncoder; value: Int16): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 64 位整数。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLong" />
    ///  （32 位），并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定的值存储在一个 64 位整数 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  必须为非负数。
    ///  此参数转换为 32 位整数，然后将存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; value: Int64): DNEncoderParameter; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和 32 位整数对初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类的新实例。
    ///  整数对表示一个分数，第一个整数为分子，第二个整数为分母。
    ///  将 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRational" />
    ///  ，并将 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="numerator">
    ///  一个表示分数分子的 32 位整数。
    ///  必须为非负数。
    ///</param>
    ///  <param name="denominator">
    ///  一个表示分数分母的 32 位整数。
    ///  必须为非负数。
    ///</param>
    {class} function init(encoder: DNEncoder; numerator: Int32; denominator: Int32): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一对 64 位整数。
    ///  对整数表示整数、 要在范围内，最少数量的第一个整数和第二个要在范围内的最大数的整数的范围。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLongRange" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="rangebegin">
    ///  一个 64 位整数，表示将范围中最少数量的整数。
    ///  必须为非负数。
    ///  此参数转换为 32 位整数，然后将存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    ///  <param name="rangeend">
    ///  一个 64 位整数表示整数范围中的最大数。
    ///  必须为非负数。
    ///  此参数转换为 32 位整数，然后将存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; rangebegin: Int64; rangeend: Int64): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和四个，32 位整数。
    ///  这四个整数表示秒的小数部分的一个范围。
    ///  前两个整数表示在范围内，最小的分数，其余两个整数表示该范围中最大的分数。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRationalRange" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="numerator1">
    ///  一个 32 位整数，表示该范围中最小的分数的分子。
    ///  必须为非负数。
    ///</param>
    ///  <param name="demoninator1">
    ///  一个 32 位整数，表示该范围中最小的分数的分母。
    ///  必须为非负数。
    ///</param>
    ///  <param name="numerator2">
    ///  一个 32 位整数，表示该范围中最小的分数的分母。
    ///  必须为非负数。
    ///</param>
    ///  <param name="demoninator2">
    ///  一个 32 位整数，表示该范围中最大的分数的分子。
    ///  必须为非负数。
    ///</param>
    {class} function init(encoder: DNEncoder; numerator1: Int32; demoninator1: Int32; numerator2: Int32; demoninator2: Int32): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个字符的字符串。
    ///  此字符串将转换为以 null 结尾的 ASCII 字符串，然后将存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeAscii" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为包括 NULL 终止符的 ASCII 字符串的长度。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  一个 <see cref="T:System.String" />
    ///  ，指定的值存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; value: string): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 8 位无符号整数的数组。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为数组中元素的数目。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定存储中的值的 8 位无符号整数数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; value: TArray<Byte>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个字节数组。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  或 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为数组中元素的数目。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定存储中的值的字节数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    ///  <param name="undefined">
    ///  如果 <see langword="true" />
    ///  , 、 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  ; 否则为 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  。
    ///</param>
    {class} function init(encoder: DNEncoder; value: TArray<Byte>; undefined: Boolean): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 16 位整数数组。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeShort" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为数组中元素的数目。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定存储中的值的 16 位整数数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  必须为非负整数数组中。
    ///</param>
    {class} function init(encoder: DNEncoder; value: TArray<Int16>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和 64 位整数的数组。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLong" />
    ///  （32-位），并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为数组中元素的数目。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定存储中的值的 64 位整数数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  必须为非负整数数组中。
    ///  64 位整数转换为 32 位整数，然后将它们存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; value: TArray<Int64>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和两个 32 位整数数组。
    ///  这两个数组表示秒的小数部分的数组。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRational" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性中的元素数 <paramref name="numerator" />
    ///  数组，它必须是元素的数目相同中 <paramref name="denominator" />
    ///  数组。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="numerator">
    ///  指定的秒的小数部分分子的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///</param>
    ///  <param name="denominator">
    ///  指定的秒的小数部分分母的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///  给定索引的分母配合分子相同的索引。
    ///</param>
    {class} function init(encoder: DNEncoder; numerator: TArray<Int32>; denominator: TArray<Int32>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和两个 64 位整数数组。
    ///  这两个数组表示一组整数范围。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLongRange" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性中的元素数 <paramref name="rangebegin" />
    ///  数组，它必须是元素的数目相同中 <paramref name="rangeend" />
    ///  数组。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="rangebegin">
    ///  指定整数范围中的最小值的 64 位整数数组。
    ///  必须为非负整数数组中。
    ///  64 位整数转换为 32 位整数，然后将它们存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    ///  <param name="rangeend">
    ///  指定整数范围中的最大值的 64 位整数数组。
    ///  必须为非负整数数组中。
    ///  64 位整数转换为 32 位整数，然后将它们存储在 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  对象。
    ///  给定索引的最大值与相同的索引的最小值配对。
    ///</param>
    {class} function init(encoder: DNEncoder; rangebegin: TArray<Int64>; rangeend: TArray<Int64>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和四个 32 位整数数组。
    ///  这四个数组表示一个数组有理范围。
    ///  合理的范围是从最小小数部分值的最大的小数部分值通过所有分数的集合。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRationalRange" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性中的元素数 <paramref name="numerator1" />
    ///  数组，它必须是与其他三个数组中的元素数相同。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="numerator1">
    ///  指定该范围中的最小值的分子的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///</param>
    ///  <param name="denominator1">
    ///  指定该范围中的最小值的分母的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///</param>
    ///  <param name="numerator2">
    ///  指定该范围中的最大值的分子的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///</param>
    ///  <param name="denominator2">
    ///  指定该范围中的最大值的分母的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///</param>
    {class} function init(encoder: DNEncoder; numerator1: TArray<Int32>; denominator1: TArray<Int32>; numerator2: TArray<Int32>; denominator2: TArray<Int32>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和指定多个值，值，以及指向中存储的值的指针的数据类型的三个整数 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="NumberOfValues">
    ///  一个整数，指定存储中的值的数目 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///<see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为此值。
    ///</param>
    ///  <param name="Type">
    ///  成员 <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  指定中存储的值的数据类型的枚举 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///<see cref="T:System.Type" />
    ///  和 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为此值。
    ///</param>
    ///  <param name="Value">
    ///  指向由指定类型的值的数组的指针 <paramref name="Type" />
    ///  参数。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  类型不是有效 <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  。
    ///</exception>
    {class} function init(encoder: DNEncoder; NumberOfValues: Int32; &Type: Int32; Value: Int32): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象、 值的数量、 数据类型的值，以及指向中存储的值的指针 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="numberValues">
    ///  一个整数，指定存储中的值的数目 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///<see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为此值。
    ///</param>
    ///  <param name="type">
    ///  成员 <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  指定中存储的值的数据类型的枚举 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///<see cref="T:System.Type" />
    ///  和 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为此值。
    ///</param>
    ///  <param name="value">
    ///  指向由指定类型的值的数组的指针 <paramref name="Type" />
    ///  参数。
    ///</param>
    {class} function init(encoder: DNEncoder; numberValues: Int32; &type: DNEncoderParameterValueType; value: IntPtr): DNEncoderParameter; overload;

  end;

  ///<summary>
  ///  用于将一个值或一个值，数组传递给图像编码器。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.EncoderParameter')]
  DNEncoderParameter = interface(DDN.mscorlib.DNObject)
  ['{81498B35-5C97-31F7-B6AA-9737D41547EB}']
  { getters & setters } 

    function get_Encoder: DNEncoder;
    procedure set_Encoder(value: DNEncoder);
    function get_Type: DNEncoderParameterValueType;
    function get_ValueType: DNEncoderParameterValueType;
    function get_NumberOfValues: Int32;

  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象与此相关 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///<see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象所封装的全局唯一标识符 (GUID) 指定的类别 (例如 <see cref="F:System.Drawing.Imaging.Encoder.Quality" />
    ///  , ，<see cref="F:System.Drawing.Imaging.Encoder.ColorDepth" />
    ///  , ，或 <see cref="F:System.Drawing.Imaging.Encoder.Compression" />
    ///  ) 存储在此参数的 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，它封装指定的类别存储在此参数的 GUID <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</returns>
    property Encoder: DNEncoder read get_Encoder write set_Encoder;
    ///<summary>
    ///  获取在此存储的值的数据类型 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  成员 <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  枚举，指示在此存储的值的数据类型 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</returns>
    property &Type: DNEncoderParameterValueType read get_Type;
    ///<summary>
    ///  获取在此存储的值的数据类型 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  成员 <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  枚举，指示在此存储的值的数据类型 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</returns>
    property ValueType: DNEncoderParameterValueType read get_ValueType;
    ///<summary>
    ///  获取的值存储在此数组中元素的数目 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个整数，指示的值存储在此数组中的元素数 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</returns>
    property NumberOfValues: Int32 read get_NumberOfValues;
  end;

  TDNEncoderParameter = class(TDNGenericImport<DNEncoderParameterClass, DNEncoderParameter>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB2EF01F-00D9-5693-B2FA-09F4A916F9E6}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  类可以包含指定的数量的 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///  <param name="count">
    ///  一个整数，指定的数 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  对象可以包含。
    ///</param>
    {class} function init(count: Int32): DNEncoderParameters; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  类可以包含一个 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    {class} function init: DNEncoderParameters; overload;

  end;

  ///<summary>
  ///  封装的数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.EncoderParameters')]
  DNEncoderParameters = interface(DDN.mscorlib.DNObject)
  ['{809106FA-A250-36F7-BEB3-4B323D20606C}']
  { getters & setters } 

    function get_Param: TArray<DNEncoderParameter>;
    procedure set_Param(value: TArray<DNEncoderParameter>);

  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</returns>
    property Param: TArray<DNEncoderParameter> read get_Param write set_Param;
  end;

  TDNEncoderParameters = class(TDNGenericImport<DNEncoderParametersClass, DNEncoderParameters>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNFrameDimensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9C5EB92-BC52-5E9B-9698-1CFAFBCDCA03}']
  { static getter & setter } 

    {class} function get_Time: DNFrameDimension;
    {class} function get_Resolution: DNFrameDimension;
    {class} function get_Page: DNFrameDimension;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  类使用指定 <see langword="Guid" />
    ///  结构。
    ///</summary>
    ///  <param name="guid">
    ///  一个 <see langword="Guid" />
    ///  结构，它包含此 GUID <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</param>
    {class} function init(guid: DDN.mscorlib.DNGuid): DNFrameDimension;

  { static propertys } 

    ///<summary>
    ///  获取时间维度。
    ///</summary>
    ///<returns>
    ///  时间维度中。
    ///</returns>
    {class} property Time: DNFrameDimension read get_Time;
    ///<summary>
    ///  获取解析维度。
    ///</summary>
    ///<returns>
    ///  分辨率维度。
    ///</returns>
    {class} property Resolution: DNFrameDimension read get_Resolution;
    ///<summary>
    ///  获取页维度。
    ///</summary>
    ///<returns>
    ///  页面维度。
    ///</returns>
    {class} property Page: DNFrameDimension read get_Page;
  end;

  ///<summary>
  ///  提供了获取图像的框架维度的属性。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.FrameDimension')]
  DNFrameDimension = interface(DDN.mscorlib.DNObject)
  ['{46DCD9AD-47E5-3ACD-95F1-1D9D21950994}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示指定的对象是否为 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  等效于此 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</summary>
    ///  <param name="o">
    ///  要测试的对象。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <paramref name="o" />
    ///  是 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  等效于此 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="int" />
    ///  该键的哈希代码值 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象转换为可读的字符串。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取表示此全局唯一标识符 (GUID) <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="Guid" />
    ///  结构，其中包含一个 GUID，表示此 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</returns>
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNFrameDimension = class(TDNGenericImport<DNFrameDimensionClass, DNFrameDimension>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageAttributesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{64FD85C9-5B18-5481-8629-5F2381840509}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNImageAttributes;

  end;

  ///<summary>
  ///  包含有关在呈现时如何操作位图和图元文件颜色的信息。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ImageAttributes')]
  DNImageAttributes = interface(DDN.mscorlib.DNObject)
  ['{F8730A05-D36D-3ED8-97B3-A0C36EC3A959}']
  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此类创建的 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象，作为一个对象来转换。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  为默认类别清除颜色调整矩阵。
    ///</summary>
    procedure ClearColorMatrix;
    ///<summary>
    ///  为默认类别设置阈值（透明范围）。
    ///</summary>
    ///  <param name="threshold">
    ///  指定阈值的实数。
    ///</param>
    procedure SetThreshold(threshold: Single);
    ///<summary>
    ///  为默认类别清除阈值。
    ///</summary>
    procedure ClearThreshold;
    ///<summary>
    ///  为默认类别设置伽玛值。
    ///</summary>
    ///  <param name="gamma">
    ///  灰度校正值。
    ///</param>
    procedure SetGamma(gamma: Single);
    ///<summary>
    ///  为默认类别禁用灰度校正。
    ///</summary>
    procedure ClearGamma;
    ///<summary>
    ///  为默认类别关闭颜色调整。
    ///  可以调用 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" />
    ///  方法恢复在调用 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" />
    ///  方法前已存在的颜色调整设置。
    ///</summary>
    procedure SetNoOp;
    ///<summary>
    ///  清除默认类别的 <see langword="NoOp" />
    ///  设置。
    ///</summary>
    procedure ClearNoOp;
    ///<summary>
    ///  为默认类别设置颜色键。
    ///</summary>
    ///  <param name="colorLow">
    ///  低颜色键值。
    ///</param>
    ///  <param name="colorHigh">
    ///  高颜色键值。
    ///</param>
    procedure SetColorKey(colorLow: DNColor; colorHigh: DNColor);
    ///<summary>
    ///  为默认类别清除颜色键（透明范围）。
    ///</summary>
    procedure ClearColorKey;
    ///<summary>
    ///  为默认类别清除 CMYK（青色-洋红色-黄色-黑色）输出通道设置。
    ///</summary>
    procedure ClearOutputChannel;
    ///<summary>
    ///  为默认类别设置输出通道颜色配置文件。
    ///</summary>
    ///  <param name="colorProfileFilename">
    ///  颜色配置文件的路径名。
    ///  如果颜色配置文件位于 %SystemRoot%\System32\Spool\Drivers\Color 目录中，则该参数可以是该文件的文件名。
    ///  否则，该参数必须是完全限定的路径名。
    ///</param>
    procedure SetOutputChannelColorProfile(colorProfileFilename: string);
    ///<summary>
    ///  为默认类别清除输出通道颜色配置文件设置。
    ///</summary>
    procedure ClearOutputChannelColorProfile;
    ///<summary>
    ///  为默认类别清除颜色重新映射表。
    ///</summary>
    procedure ClearRemapTable;
    ///<summary>
    ///  清除该 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象的画笔颜色重新映射表。
    ///</summary>
    procedure ClearBrushRemapTable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageAttributes = class(TDNGenericImport<DNImageAttributesClass, DNImageAttributes>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageCodecInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C8865BE7-D8A2-5329-820A-E3B1F73D98DD}']
  { static methods } 

    ///<summary>
    ///  返回的数组 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  对象，其中包含有关内置在 GDI + 的图像解码器的信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  对象数组。
    ///  每个 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  数组中的对象包含有关某一个内置图像解码器的信息。
    ///</returns>
    {class} function GetImageDecoders: TArray<DNImageCodecInfo>;
    ///<summary>
    ///  返回的数组 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  对象，其中包含有关内置在 GDI + 的图像编码器的信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  对象数组。
    ///  每个 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  数组中的对象包含有关某一个内置图像编码器的信息。
    ///</returns>
    {class} function GetImageEncoders: TArray<DNImageCodecInfo>;

  end;

  ///<summary><see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
  ///  类提供必要的存储成员和方法来检索有关已安装的图像编码器和解码器 （称为编解码器） 的所有相关信息。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ImageCodecInfo')]
  DNImageCodecInfo = interface(DDN.mscorlib.DNObject)
  ['{537B3612-FB61-3670-ADA4-71FFA9B084A4}']
  { getters & setters } 

    function get_Clsid: DDN.mscorlib.DNGuid;
    procedure set_Clsid(value: DDN.mscorlib.DNGuid);
    function get_FormatID: DDN.mscorlib.DNGuid;
    procedure set_FormatID(value: DDN.mscorlib.DNGuid);
    function get_CodecName: string;
    procedure set_CodecName(value: string);
    function get_DllName: string;
    procedure set_DllName(value: string);
    function get_FormatDescription: string;
    procedure set_FormatDescription(value: string);
    function get_FilenameExtension: string;
    procedure set_FilenameExtension(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Version: Int32;
    procedure set_Version(value: Int32);
    function get_SignaturePatterns: TArray<TArray<Byte>>;
    procedure set_SignaturePatterns(value: TArray<TArray<Byte>>);
    function get_SignatureMasks: TArray<TArray<Byte>>;
    procedure set_SignatureMasks(value: TArray<TArray<Byte>>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Guid" />
    ///  结构，其中包含标识特定的编码解码器的 GUID。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Guid" />
    ///  结构，其中包含标识特定的编码解码器的 GUID。
    ///</returns>
    property Clsid: DDN.mscorlib.DNGuid read get_Clsid write set_Clsid;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Guid" />
    ///  结构，其中包含标识的编解码器格式的 GUID。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Guid" />
    ///  结构，其中包含标识的编解码器格式的 GUID。
    ///</returns>
    property FormatID: DDN.mscorlib.DNGuid read get_FormatID write set_FormatID;
    ///<summary>
    ///  获取或设置一个字符串，包含的编解码器的名称。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含的编解码器的名称。
    ///</returns>
    property CodecName: string read get_CodecName write set_CodecName;
    ///<summary>
    ///  获取或设置字符串，其中包含存放编解码器的 DLL 的路径名称。
    ///  如果编解码器不是在 DLL 中，该指针是 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个字符串，其中包含存放编解码器的 DLL 的路径名称。
    ///</returns>
    property DllName: string read get_DllName write set_DllName;
    ///<summary>
    ///  获取或设置一个字符串，描述编解码器的文件格式。
    ///</summary>
    ///<returns>
    ///  一个字符串，描述编解码器的文件格式。
    ///</returns>
    property FormatDescription: string read get_FormatDescription write set_FormatDescription;
    ///<summary>
    ///  获取或设置包含编码解码器中使用的文件扩展名的字符串。
    ///  扩展之间用分号分隔。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含的文件扩展名用于编解码器。
    ///</returns>
    property FilenameExtension: string read get_FilenameExtension write set_FilenameExtension;
    ///<summary>
    ///  获取或设置一个字符串，包含的编解码器的多用途 Internet 邮件扩展 (MIME) 类型。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含的编解码器的多用途 Internet 邮件扩展 (MIME) 类型。
    ///</returns>
    property MimeType: string read get_MimeType write set_MimeType;
    ///<summary>
    ///  获取或设置编解码器的版本号。
    ///</summary>
    ///<returns>
    ///  编解码器的版本号。
    ///</returns>
    property Version: Int32 read get_Version write set_Version;
    ///<summary>
    ///  获取或设置两个字节表示的签名的编解码器的二维数组。
    ///</summary>
    ///<returns>
    ///  两个字节表示的签名的编解码器的二维数组。
    ///</returns>
    property SignaturePatterns: TArray<TArray<Byte>> read get_SignaturePatterns write set_SignaturePatterns;
    ///<summary>
    ///  获取或设置两个二维可以用作筛选器的字节数组。
    ///</summary>
    ///<returns>
    ///  两个二维可以用作筛选器的字节数组。
    ///</returns>
    property SignatureMasks: TArray<TArray<Byte>> read get_SignatureMasks write set_SignatureMasks;
  end;

  TDNImageCodecInfo = class(TDNGenericImport<DNImageCodecInfoClass, DNImageCodecInfo>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{25FC6ED2-3943-578C-9A01-211CB8B0A6F6}']
  { static getter & setter } 

    {class} function get_MemoryBmp: DNImageFormat;
    {class} function get_Bmp: DNImageFormat;
    {class} function get_Emf: DNImageFormat;
    {class} function get_Wmf: DNImageFormat;
    {class} function get_Gif: DNImageFormat;
    {class} function get_Jpeg: DNImageFormat;
    {class} function get_Png: DNImageFormat;
    {class} function get_Tiff: DNImageFormat;
    {class} function get_Exif: DNImageFormat;
    {class} function get_Icon: DNImageFormat;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  使用指定的类 <see cref="T:System.Guid" />
    ///  结构。
    ///</summary>
    ///  <param name="guid"><see cref="T:System.Guid" />
    ///  结构，它指定特定图像格式。
    ///</param>
    {class} function init(guid: DDN.mscorlib.DNGuid): DNImageFormat;

  { static propertys } 

    ///<summary>
    ///  获取在内存中的位图的格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示在内存中的位图的格式。
    ///</returns>
    {class} property MemoryBmp: DNImageFormat read get_MemoryBmp;
    ///<summary>
    ///  获取位图 (BMP) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示位图图像格式。
    ///</returns>
    {class} property Bmp: DNImageFormat read get_Bmp;
    ///<summary>
    ///  获取增强型图元文件 (EMF) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示增强型图元文件图像格式。
    ///</returns>
    {class} property Emf: DNImageFormat read get_Emf;
    ///<summary>
    ///  获取 Windows 图元文件 (WMF) 映像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 Windows 图元文件图像格式。
    ///</returns>
    {class} property Wmf: DNImageFormat read get_Wmf;
    ///<summary>
    ///  获取图形交换格式 (GIF) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 GIF 图像格式。
    ///</returns>
    {class} property Gif: DNImageFormat read get_Gif;
    ///<summary>
    ///  获取联合图像专家组 (JPEG) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 JPEG 图像格式。
    ///</returns>
    {class} property Jpeg: DNImageFormat read get_Jpeg;
    ///<summary>
    ///  获取 W3C 可移植网络图形 (PNG) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 PNG 图像格式。
    ///</returns>
    {class} property Png: DNImageFormat read get_Png;
    ///<summary>
    ///  获取标记图像文件格式 (TIFF) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 TIFF 图像格式。
    ///</returns>
    {class} property Tiff: DNImageFormat read get_Tiff;
    ///<summary>
    ///  获取可交换图像文件 (Exif) 格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 Exif 格式。
    ///</returns>
    {class} property Exif: DNImageFormat read get_Exif;
    ///<summary>
    ///  获取 Windows 图标图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 Windows 图标图像格式。
    ///</returns>
    {class} property Icon: DNImageFormat read get_Icon;
  end;

  ///<summary>
  ///  指定图像文件格式。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ImageFormat')]
  DNImageFormat = interface(DDN.mscorlib.DNObject)
  ['{EBB52948-9B23-3FA2-A8D3-F339D076BDA1}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示指定的对象是否为 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它等效于此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象。
    ///</summary>
    ///  <param name="o">
    ///  要测试的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="o" />
    ///  是 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它等效于此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回一个表示此对象的哈希代码值。
    ///</summary>
    ///<returns>
    ///  表示此对象哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象转换为可读的字符串。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Guid" />
    ///  结构，它表示此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Guid" />
    ///  结构，它表示此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象。
    ///</returns>
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNImageFormat = class(TDNGenericImport<DNImageFormatClass, DNImageFormat>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNPropertyItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{47C1C0A9-9953-5D4C-A0AD-BD082331D0C9}']
  end;

  ///<summary>
  ///  封装要将图像文件中包含的元数据属性。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.PropertyItem')]
  DNPropertyItem = interface(DDN.mscorlib.DNObject)
  ['{8167BE6A-869C-366B-9369-37CA48FFC88C}']
  { getters & setters } 

    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_Len: Int32;
    procedure set_Len(value: Int32);
    function get_Type: Int16;
    procedure set_Type(value: Int16);
    function get_Value: TArray<Byte>;
    procedure set_Value(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的属性 ID。
    ///</summary>
    ///<returns>
    ///  一个整数，表示该属性的 ID。
    ///</returns>
    property Id: Int32 read get_Id write set_Id;
    ///<summary>
    ///  获取或设置的长度 （以字节为单位） <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个整数，表示的长度 （以字节为单位） <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  字节数组。
    ///</returns>
    property Len: Int32 read get_Len write set_Len;
    ///<summary>
    ///  获取或设置一个整数，定义中包含的数据类型 <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个整数，定义中包含的数据类型 <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  。
    ///</returns>
    property &Type: Int16 read get_Type write set_Type;
    ///<summary>
    ///  获取或设置属性项的值。
    ///</summary>
    ///<returns>
    ///  一个表示属性项的值的字节数组。
    ///</returns>
    property Value: TArray<Byte> read get_Value write set_Value;
  end;

  TDNPropertyItem = class(TDNGenericImport<DNPropertyItemClass, DNPropertyItem>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNMarginsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9C3CF37A-1B86-5A2C-AD1B-1833E79D2D04}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Printing.Margins" />
    ///  类 1 英寸宽的边距。
    ///</summary>
    {class} function init: DNMargins; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Printing.Margins" />
    ///  类具有指定左、 右、 顶部、 边距和下边距。
    ///</summary>
    ///  <param name="left">
    ///  左边的距，以百分之一英寸为单位。
    ///</param>
    ///  <param name="right">
    ///  右边距，以百分之一英寸为单位。
    ///</param>
    ///  <param name="top">
    ///  上边距，以百分之一英寸为单位。
    ///</param>
    ///  <param name="bottom">
    ///  下边距，以百分之一英寸。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="left" />
    ///  参数值小于 0。
    ///  - 或 -
    ///  <paramref name="right" />
    ///  参数值小于 0。
    ///  - 或 -
    ///  <paramref name="top" />
    ///  参数值小于 0。
    ///  - 或 -
    ///  <paramref name="bottom" />
    ///  参数值小于 0。
    ///</exception>
    {class} function init(left: Int32; right: Int32; top: Int32; bottom: Int32): DNMargins; overload;

  end;

  ///<summary>
  ///  指定打印页的边距的尺寸。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.Margins')]
  DNMargins = interface(DDN.mscorlib.DNObject)
  ['{E3900763-C225-303C-9673-70085B3ACEEB}']
  { getters & setters } 

    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);

  { methods } 

    ///<summary>
    ///  检索此对象，逐个成员的副本。
    ///</summary>
    ///<returns>
    ///  此对象的副本。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  比较此 <see cref="T:System.Drawing.Printing.Margins" />
    ///  到指定 <see cref="T:System.Object" />
    ///  以确定它们是否具有相同的尺寸。
    ///</summary>
    ///  <param name="obj">
    ///  要进行比较，向其中对象 <see cref="T:System.Drawing.Printing.Margins" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的对象是 <see cref="T:System.Drawing.Printing.Margins" />
    ///  并具有相同 <see cref="P:System.Drawing.Printing.Margins.Top" />
    ///  , ，<see cref="P:System.Drawing.Printing.Margins.Bottom" />
    ///  , ，<see cref="P:System.Drawing.Printing.Margins.Right" />
    ///  和 <see cref="P:System.Drawing.Printing.Margins.Left" />
    ///  值，则为此 <see cref="T:System.Drawing.Printing.Margins" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  计算并检索基于左、 右、 上边框和下边距宽度的哈希代码。
    ///</summary>
    ///<returns>
    ///  基于左、 右、 上边框和下边距的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.Printing.Margins" />
    ///  为字符串。
    ///</summary>
    ///<returns><see cref="T:System.String" />
    ///  的 <see cref="T:System.Drawing.Printing.Margins" />
    ///  表示形式。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置左边的距的宽度，以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  左边的距的宽度，以百分之一英寸。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.Margins.Left" />
    ///  属性设置为小于 0 的值。
    ///</exception>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  获取或设置右边距的宽度，以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  右边距的宽度，以百分之一英寸。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.Margins.Right" />
    ///  属性设置为小于 0 的值。
    ///</exception>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  获取或设置上边距宽度，以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  上边距宽度，以百分之一英寸。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.Margins.Top" />
    ///  属性设置为小于 0 的值。
    ///</exception>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  获取或设置下边距，以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  下边距，以百分之一英寸。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.Margins.Bottom" />
    ///  属性设置为小于 0 的值。
    ///</exception>
    property Bottom: Int32 read get_Bottom write set_Bottom;
  end;

  TDNMargins = class(TDNGenericImport<DNMarginsClass, DNMargins>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPageSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1A742101-AB39-5A46-8351-A82BA2415C14}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  类使用默认打印机。
    ///</summary>
    {class} function init: DNPageSettings; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  类使用指定的打印机。
    ///</summary>
    ///  <param name="printerSettings"><see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  ，描述要使用的打印机。
    ///</param>
    {class} function init(printerSettings: DNPrinterSettings): DNPageSettings; overload;

  end;

  ///<summary>
  ///  指定将应用于单个打印页面的设置。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PageSettings')]
  DNPageSettings = interface(DDN.mscorlib.DNObject)
  ['{AD0BA20F-317B-3261-86E9-488F717D1BA7}']
  { getters & setters } 

    function get_Bounds: DNRectangle;
    function get_Color: Boolean;
    procedure set_Color(value: Boolean);
    function get_HardMarginX: Single;
    function get_HardMarginY: Single;
    function get_Landscape: Boolean;
    procedure set_Landscape(value: Boolean);
    function get_Margins: DNMargins;
    procedure set_Margins(value: DNMargins);
    function get_PaperSize: DNPaperSize;
    procedure set_PaperSize(value: DNPaperSize);
    function get_PaperSource: DNPaperSource;
    procedure set_PaperSource(value: DNPaperSource);
    function get_PrintableArea: DNRectangleF;
    function get_PrinterResolution: DNPrinterResolution;
    procedure set_PrinterResolution(value: DNPrinterResolution);
    function get_PrinterSettings: DNPrinterSettings;
    procedure set_PrinterSettings(value: DNPrinterSettings);

  { methods } 

    ///<summary>
    ///  会创建一份 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该对象的一个副本。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  将复制中的相关信息 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  到指定 <see langword="DEVMODE " />
    ///  结构。
    ///</summary>
    ///  <param name="hdevmode">
    ///  对 Win32 句柄 <see langword="DEVMODE" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在或未安装的默认打印机。
    ///</exception>
    procedure CopyToHdevmode(hdevmode: IntPtr);
    ///<summary>
    ///  将复制到的相关信息 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  从指定 <see langword="DEVMODE" />
    ///  结构。
    ///</summary>
    ///  <param name="hdevmode">
    ///  对 Win32 句柄 <see langword="DEVMODE" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  打印机句柄无效。
    ///</exception><exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在或未安装的默认打印机。
    ///</exception>
    procedure SetHdevmode(hdevmode: IntPtr);
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  为字符串形式。
    ///</summary>
    ///<returns>
    ///  显示的各种属性设置一个字符串 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取页上，考虑到由指定的页面方向的大小 <see cref="P:System.Drawing.Printing.PageSettings.Landscape" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示长度和宽度，以百分之一英寸的页。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    property Bounds: DNRectangle read get_Bounds;
    ///<summary>
    ///  获取或设置一个值，该值指示是否应以彩色打印页面。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应颜色; 在打印的页，否则为 <see langword="false" />
    ///  。
    ///  默认值取决于打印机。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    property Color: Boolean read get_Color write set_Color;
    ///<summary>
    ///  获取以百分之一英寸，硬距左侧的页上的 x 坐标。
    ///</summary>
    ///<returns>
    ///  X 坐标，以百分之一英寸，左侧的硬页边距。
    ///</returns>
    property HardMarginX: Single read get_HardMarginX;
    ///<summary>
    ///  获取 y 坐标，以百分之一英寸，页顶部的硬边距。
    ///</summary>
    ///<returns>
    ///  Y 坐标，以百分之一英寸，页顶部的硬边距。
    ///</returns>
    property HardMarginY: Single read get_HardMarginY;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在横向或纵向方向打印的页。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果以横向方向; 应打印的页，否则为 <see langword="false" />
    ///  。
    ///  默认值取决于打印机。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    property Landscape: Boolean read get_Landscape write set_Landscape;
    ///<summary>
    ///  获取或设置此页的边距。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.Margins" />
    ///  表示中百分之一英寸的页的边距。
    ///  默认值为各边的 1 英寸边距。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    property Margins: DNMargins read get_Margins write set_Margins;
    ///<summary>
    ///  获取或设置页上的纸张大小。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  表示在纸张的大小。
    ///  默认值为打印机的默认纸张大小。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在或未安装的默认打印机。
    ///</exception>
    property PaperSize: DNPaperSize read get_PaperSize write set_PaperSize;
    ///<summary>
    ///  获取或设置页的纸张来源;例如，打印机的上层送纸器。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  ，它指定纸张来源。
    ///  默认值为打印机的默认纸张来源。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在或未安装的默认打印机。
    ///</exception>
    property PaperSource: DNPaperSource read get_PaperSource write set_PaperSource;
    ///<summary>
    ///  获取打印机页上的可打印区域的边界。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示长度和宽度，以百分之一英寸，区域的打印机是否能够在打印。
    ///</returns>
    property PrintableArea: DNRectangleF read get_PrintableArea;
    ///<summary>
    ///  获取或设置页上的打印机分辨率。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  ，它指定页上的打印机分辨率。
    ///  默认值为打印机的默认解析。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在或未安装的默认打印机。
    ///</exception>
    property PrinterResolution: DNPrinterResolution read get_PrinterResolution write set_PrinterResolution;
    ///<summary>
    ///  获取或设置与页关联的打印机设置。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  ，表示与页关联的打印机设置。
    ///</returns>
    property PrinterSettings: DNPrinterSettings read get_PrinterSettings write set_PrinterSettings;
  end;

  TDNPageSettings = class(TDNGenericImport<DNPageSettingsClass, DNPageSettings>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPaperSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8EDA3B12-D5E3-5F25-B87F-D32097D3FB96}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPaperSize; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  在纸张的名称。
    ///</param>
    ///  <param name="width">
    ///  中百分之一英寸的纸张的宽度。
    ///</param>
    ///  <param name="height">
    ///  中百分之一英寸的纸张的高度。
    ///</param>
    {class} function init(name: string; width: Int32; height: Int32): DNPaperSize; overload;

  end;

  ///<summary>
  ///  指定一张纸的大小。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PaperSize')]
  DNPaperSize = interface(DDN.mscorlib.DNObject)
  ['{19C1F738-FF0A-34D5-8CA1-0FE5B08906EB}']
  { getters & setters } 

    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Kind: DNPaperKind;
    function get_PaperName: string;
    procedure set_PaperName(value: string);
    function get_RawKind: Int32;
    procedure set_RawKind(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);

  { methods } 

    ///<summary>
    ///  提供以下信息 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  以字符串形式。
    ///</summary>
    ///<returns>
    ///  一个字符串。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置在纸张的高度以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  中百分之一英寸的纸张的高度。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  属性未设置为 <see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  。
    ///</exception>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  获取纸张的类型。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PaperKind" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  属性未设置为 <see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  。
    ///</exception>
    property Kind: DNPaperKind read get_Kind;
    ///<summary>
    ///  获取或设置的纸张类型的名称。
    ///</summary>
    ///<returns>
    ///  纸张类型的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  属性未设置为 <see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  。
    ///</exception>
    property PaperName: string read get_PaperName write set_PaperName;
    ///<summary>
    ///  获取或设置一个整数，表示之一 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  值或自定义值。
    ///</summary>
    ///<returns>
    ///  一个整数，表示之一 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  值或自定义的值。
    ///</returns>
    property RawKind: Int32 read get_RawKind write set_RawKind;
    ///<summary>
    ///  获取或设置在纸张的宽度以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  中百分之一英寸纸张的宽度。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  属性未设置为<see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  。
    ///</exception>
    property Width: Int32 read get_Width write set_Width;
  end;

  TDNPaperSize = class(TDNGenericImport<DNPaperSizeClass, DNPaperSize>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPaperSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E071617-CB4D-5AA8-97E5-B16FCDD4823E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPaperSource;

  end;

  ///<summary>
  ///  指定从中给打印机送纸的送纸器。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PaperSource')]
  DNPaperSource = interface(DDN.mscorlib.DNObject)
  ['{42181C14-259D-307A-8D1A-B2B952F93DC7}']
  { getters & setters } 

    function get_Kind: DNPaperSourceKind;
    function get_RawKind: Int32;
    procedure set_RawKind(value: Int32);
    function get_SourceName: string;
    procedure set_SourceName(value: string);

  { methods } 

    ///<summary>
    ///  提供以下信息 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  以字符串形式。
    ///</summary>
    ///<returns>
    ///  一个字符串。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取纸张来源。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PaperSourceKind" />
    ///  值之一。
    ///</returns>
    property Kind: DNPaperSourceKind read get_Kind;
    ///<summary>
    ///  获取或设置表示之一的整数 <see cref="T:System.Drawing.Printing.PaperSourceKind" />
    ///  值或自定义值。
    ///</summary>
    ///<returns>
    ///  整数值，表示之一 <see cref="T:System.Drawing.Printing.PaperSourceKind" />
    ///  值或自定义值。
    ///</returns>
    property RawKind: Int32 read get_RawKind write set_RawKind;
    ///<summary>
    ///  获取或设置纸张来源的名称。
    ///</summary>
    ///<returns>
    ///  纸张来源的名称。
    ///</returns>
    property SourceName: string read get_SourceName write set_SourceName;
  end;

  TDNPaperSource = class(TDNGenericImport<DNPaperSourceClass, DNPaperSource>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintControllerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AF429C9D-CD57-5F4C-96F8-DEE2A5F0DFFD}']
  end;

  ///<summary>
  ///  控制如何打印文档时，从 Windows 窗体应用程序打印时。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintController')]
  DNPrintController = interface(DDN.mscorlib.DNObject)
  ['{1FF59139-A803-31C5-B176-6D24D5A3BF55}']
  { getters & setters } 

    function get_IsPreview: Boolean;

  { methods } 

    ///<summary>
    ///  当在派生类中重写，开始控制序列，该序列确定何时以及如何打印文档。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  它表示当前正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  。
    ///</param>
    procedure OnStartPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    ///<summary>
    ///  当在派生类中重写，开始控制序列，该序列确定何时以及如何打印文档的页。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  它表示当前正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  表示中的一页 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  。
    ///</returns>
    function OnStartPage(document: DNPrintDocument; e: DNPrintPageEventArgs): DNGraphics;
    ///<summary>
    ///  当在派生类中重写，完成控制序列，该序列确定何时以及如何打印文档的页。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  它表示当前正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  。
    ///</param>
    procedure OnEndPage(document: DNPrintDocument; e: DNPrintPageEventArgs);
    ///<summary>
    ///  当在派生类中重写，完成控制序列，该序列确定何时以及如何打印文档。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  它表示当前正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  。
    ///</param>
    procedure OnEndPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Drawing.Printing.PrintController" />
    ///  用于打印预览。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPreview: Boolean read get_IsPreview;
  end;

  TDNPrintController = class(TDNGenericImport<DNPrintControllerClass, DNPrintController>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterResolutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BE7C6948-F399-5E8D-ABFF-7A901642495B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPrinterResolution;

  end;

  ///<summary>
  ///  表示打印机支持的分辨率。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterResolution')]
  DNPrinterResolution = interface(DDN.mscorlib.DNObject)
  ['{75B45367-ECCC-30F8-86CD-7748B9CC6B7F}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    ///<summary>
    ///  此成员重写 <see cref="M:System.Object.ToString" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含有关 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  的信息。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取以每英寸点数打印机水平分辨率。
    ///</summary>
    ///<returns>
    ///  水平打印机分辨率，以每英寸点数，如果 <see cref="P:System.Drawing.Printing.PrinterResolution.Kind" />
    ///  设置为 <see cref="F:System.Drawing.Printing.PrinterResolutionKind.Custom" />
    ///  ; 否则为 <see langword="dmPrintQuality" />
    ///  值。
    ///</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  获取垂直打印机分辨率以每英寸点数。
    ///</summary>
    ///<returns>
    ///  垂直打印机分辨率，以每英寸点数为单位。
    ///</returns>
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNPrinterResolution = class(TDNGenericImport<DNPrinterResolutionClass, DNPrinterResolution>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7676BB00-8FB4-5924-B413-C4DEDEA38DE2}']
  { static getter & setter } 

    {class} function get_InstalledPrinters: DNPrinterSettings_StringCollection;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPrinterSettings;

  { static propertys } 

    ///<summary>
    ///  获取在计算机上安装的所有打印机的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  表示计算机上安装的所有打印机的名称。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  无法枚举可用的打印机。
    ///</exception>
    {class} property InstalledPrinters: DNPrinterSettings_StringCollection read get_InstalledPrinters;
  end;

  ///<summary>
  ///  指定有关文档的打印方式，包括打印，从 Windows 窗体应用程序打印时的打印机信息。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings')]
  DNPrinterSettings = interface(DDN.mscorlib.DNObject)
  ['{5C0D0EE8-9D2A-3308-A024-607A2B3101D6}']
  { getters & setters } 

    function get_CanDuplex: Boolean;
    function get_Copies: Int16;
    procedure set_Copies(value: Int16);
    function get_Collate: Boolean;
    procedure set_Collate(value: Boolean);
    function get_DefaultPageSettings: DNPageSettings;
    function get_Duplex: DNDuplex;
    procedure set_Duplex(value: DNDuplex);
    function get_FromPage: Int32;
    procedure set_FromPage(value: Int32);
    function get_IsDefaultPrinter: Boolean;
    function get_IsPlotter: Boolean;
    function get_IsValid: Boolean;
    function get_LandscapeAngle: Int32;
    function get_MaximumCopies: Int32;
    function get_MaximumPage: Int32;
    procedure set_MaximumPage(value: Int32);
    function get_MinimumPage: Int32;
    procedure set_MinimumPage(value: Int32);
    function get_PrintFileName: string;
    procedure set_PrintFileName(value: string);
    function get_PaperSizes: DNPrinterSettings_PaperSizeCollection;
    function get_PaperSources: DNPrinterSettings_PaperSourceCollection;
    function get_PrintRange: DNPrintRange;
    procedure set_PrintRange(value: DNPrintRange);
    function get_PrintToFile: Boolean;
    procedure set_PrintToFile(value: Boolean);
    function get_PrinterName: string;
    procedure set_PrinterName(value: string);
    function get_PrinterResolutions: DNPrinterSettings_PrinterResolutionCollection;
    function get_SupportsColor: Boolean;
    function get_ToPage: Int32;
    procedure set_ToPage(value: Int32);

  { methods } 

    ///<summary>
    ///  返回一个值，该值的打印机是否支持打印指定的图像格式。
    ///</summary>
    ///  <param name="imageFormat"><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  打印。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果打印机支持打印指定的图像格式;，否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDirectPrintingSupported(imageFormat: DNImageFormat): Boolean; overload;
    ///<summary>
    ///  会创建一份 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该对象的一个副本。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回 <see cref="T:System.Drawing.Graphics" />
    ///  ，包含创建时很有帮助的打印机信息 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  包含来自打印机的信息。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    function CreateMeasurementGraphics: DNGraphics; overload;
    ///<summary>
    ///  返回<see cref="T:System.Drawing.Graphics" />
    ///  包含打印机信息，可以选择指定边距处原点。
    ///</summary>
    ///  <param name="honorOriginAtMargins"><see langword="true" />
    ///  若要指示边距; 处的原点否则为<see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  A <see cref="T:System.Drawing.Graphics" />
    ///  ，包含从的打印机信息<see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</returns>
    function CreateMeasurementGraphics(honorOriginAtMargins: Boolean): DNGraphics; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Drawing.Graphics" />
    ///  ，包含具有指定关联的打印机信息 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</summary>
    ///  <param name="pageSettings"><see cref="T:System.Drawing.Printing.PageSettings" />
    ///  要检索的 graphics 对象。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  包含打印机信息 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</returns>
    function CreateMeasurementGraphics(pageSettings: DNPageSettings): DNGraphics; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Graphics" />
    ///  与指定的页设置相关联，并选择性地指定边距处原点。
    ///</summary>
    ///  <param name="pageSettings"><see cref="T:System.Drawing.Printing.PageSettings" />
    ///  检索 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</param>
    ///  <param name="honorOriginAtMargins"><see langword="true" />
    ///  若要指定边距; 处原点否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  包含打印机信息 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</returns>
    function CreateMeasurementGraphics(pageSettings: DNPageSettings; honorOriginAtMargins: Boolean): DNGraphics; overload;
    ///<summary>
    ///  创建到一个句柄 <see langword="DEVMODE" />
    ///  结构，它对应于打印机设置。
    ///</summary>
    ///<returns>
    ///  句柄 <see langword="DEVMODE" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  无法检索打印机的初始化信息。
    ///</exception>
    function GetHdevmode: IntPtr; overload;
    ///<summary>
    ///  创建到一个句柄 <see langword="DEVMODE" />
    ///  结构，它对应于打印机和通过指定的页设置 <paramref name="pageSettings" />
    ///  参数。
    ///</summary>
    ///  <param name="pageSettings"><see cref="T:System.Drawing.Printing.PageSettings" />
    ///  对象 <see langword="DEVMODE" />
    ///  结构的句柄对应。
    ///</param>
    ///<returns>
    ///  句柄 <see langword="DEVMODE" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  无法检索打印机的初始化信息。
    ///</exception>
    function GetHdevmode(pageSettings: DNPageSettings): IntPtr; overload;
    ///<summary>
    ///  创建到一个句柄 <see langword="DEVNAMES" />
    ///  结构，它对应于打印机设置。
    ///</summary>
    ///<returns>
    ///  句柄 <see langword="DEVNAMES" />
    ///  结构。
    ///</returns>
    function GetHdevnames: IntPtr;
    ///<summary>
    ///  获取一个值，该值的打印机是否支持打印指定的图像文件。
    ///</summary>
    ///  <param name="image">
    ///  要打印的图像。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果打印机支持打印指定的图像;，否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDirectPrintingSupported(image: DNImage): Boolean; overload;
    ///<summary>
    ///  将给定句柄出来放入相关的信息复制 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  。
    ///</summary>
    ///  <param name="hdevmode">
    ///  对 Win32 句柄 <see langword="DEVMODE" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  打印机句柄无效。
    ///</exception>
    procedure SetHdevmode(hdevmode: IntPtr);
    ///<summary>
    ///  将给定句柄出来放入相关的信息复制 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  。
    ///</summary>
    ///  <param name="hdevnames">
    ///  对 Win32 句柄 <see langword="DEVNAMES" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  打印机句柄无效。
    ///</exception>
    procedure SetHdevnames(hdevnames: IntPtr);
    ///<summary>
    ///  提供以下信息 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  以字符串形式。
    ///</summary>
    ///<returns>
    ///  一个字符串。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否打印机支持双面打印。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果打印机支持双面打印;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanDuplex: Boolean read get_CanDuplex;
    ///<summary>
    ///  获取或设置要打印的文档的副本数。
    ///</summary>
    ///<returns>
    ///  要打印的份数。
    ///  默认值为 1。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.Copies" />
    ///  属性也不可小于零。
    ///</exception>
    property Copies: Int16 read get_Copies write set_Copies;
    ///<summary>
    ///  获取或设置一个值，该值指示是否逐份打印的文档。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果逐份打印的文档否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Collate: Boolean read get_Collate write set_Collate;
    ///<summary>
    ///  获取默认值为此打印机的页设置。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ，表示此打印机的默认页设置。
    ///</returns>
    property DefaultPageSettings: DNPageSettings read get_DefaultPageSettings;
    ///<summary>
    ///  获取或设置双面打印的打印机设置。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.Duplex" />
    ///  值之一。
    ///  默认值取决于打印机。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.Duplex" />
    ///  属性不属于某个 <see cref="T:System.Drawing.Printing.Duplex" />
    ///  值。
    ///</exception>
    property Duplex: DNDuplex read get_Duplex write set_Duplex;
    ///<summary>
    ///  获取或设置要打印的第一页的页码。
    ///</summary>
    ///<returns>
    ///  若要打印的第一页的页码。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  属性的值小于零。
    ///</exception>
    property FromPage: Int32 read get_FromPage write set_FromPage;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性指定默认打印机，除用户显式设置 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  指定默认打印机; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDefaultPrinter: Boolean read get_IsDefaultPrinter;
    ///<summary>
    ///  获取一个值，该值指示该打印机是否绘图。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果打印机绘图仪; <see langword="false" />
    ///  如果打印机光栅。
    ///</returns>
    property IsPlotter: Boolean read get_IsPlotter;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性指定有效的打印机。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性指定有效的打印机; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsValid: Boolean read get_IsValid;
    ///<summary>
    ///  获取纵向方向旋转以生成横向方向的角度，以度为单位。
    ///</summary>
    ///<returns>
    ///  角度 （以度为单位，纵向方向旋转以生成横向方向）。
    ///</returns>
    property LandscapeAngle: Int32 read get_LandscapeAngle;
    ///<summary>
    ///  获取最大的打印机使用户能够一次打印的份数。
    ///</summary>
    ///<returns>
    ///  最大打印机使用户能够一次打印的份数。
    ///</returns>
    property MaximumCopies: Int32 read get_MaximumCopies;
    ///<summary>
    ///  获取或设置最大 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  或 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  可选择在 <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  。
    ///</summary>
    ///<returns>
    ///  最大值 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  或 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  可选择在 <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.MaximumPage" />
    ///  属性也不可小于零。
    ///</exception>
    property MaximumPage: Int32 read get_MaximumPage write set_MaximumPage;
    ///<summary>
    ///  获取或设置所需的最低 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  或 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  可选择在 <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  。
    ///</summary>
    ///<returns>
    ///  所需的最低 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  或 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  可选择在 <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.MinimumPage" />
    ///  属性也不可小于零。
    ///</exception>
    property MinimumPage: Int32 read get_MinimumPage write set_MinimumPage;
    ///<summary>
    ///  获取或设置时打印到文件的文件名。
    ///</summary>
    ///<returns>
    ///  打印到文件时文件名称。
    ///</returns>
    property PrintFileName: string read get_PrintFileName write set_PrintFileName;
    ///<summary>
    ///  获取支持的这台打印机的纸张大小。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  ，表示支持的这台打印机的纸张大小。
    ///</returns>
    property PaperSizes: DNPrinterSettings_PaperSizeCollection read get_PaperSizes;
    ///<summary>
    ///  获取可用打印机的纸张来源纸盒。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  ，它表示位于这台打印机的纸张来源纸盒。
    ///</returns>
    property PaperSources: DNPrinterSettings_PaperSourceCollection read get_PaperSources;
    ///<summary>
    ///  获取或设置用户已指定要打印的页码。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PrintRange" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.PrintRange" />
    ///  属性不属于某个 <see cref="T:System.Drawing.Printing.PrintRange" />
    ///  值。
    ///</exception>
    property PrintRange: DNPrintRange read get_PrintRange write set_PrintRange;
    ///<summary>
    ///  获取或设置一个值，该值指示是否打印输出发送到一个文件而不是一个端口。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果打印输出发送到一个文件;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property PrintToFile: Boolean read get_PrintToFile write set_PrintToFile;
    ///<summary>
    ///  获取或设置要使用的打印机的名称。
    ///</summary>
    ///<returns>
    ///  要使用的打印机的名称。
    ///</returns>
    property PrinterName: string read get_PrinterName write set_PrinterName;
    ///<summary>
    ///  获取所有支持的这台打印机的解决方法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  ，表示支持的这台打印机的解决方法。
    ///</returns>
    property PrinterResolutions: DNPrinterSettings_PrinterResolutionCollection read get_PrinterResolutions;
    ///<summary>
    ///  获取一个值，该值指示是否此打印机支持彩色打印。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此打印机支持彩色打印否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SupportsColor: Boolean read get_SupportsColor;
    ///<summary>
    ///  获取或设置要打印的最后一页的数目。
    ///</summary>
    ///<returns>
    ///  若要打印的最后一页的数。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  属性也不可小于零。
    ///</exception>
    property ToPage: Int32 read get_ToPage write set_ToPage;
  end;

  TDNPrinterSettings = class(TDNGenericImport<DNPrinterSettingsClass, DNPrinterSettings>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PaperSizeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D314BDB6-5CFF-5342-9670-44AAC3799605}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Drawing.Printing.PaperSize" />
    ///  类型的数组。
    ///</param>
    {class} function init(&array: TArray<DNPaperSize>): DNPrinterSettings_PaperSizeCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.Drawing.Printing.PaperSize" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+PaperSizeCollection')]
  DNPrinterSettings_PaperSizeCollection = interface(DDN.mscorlib.DNObject)
  ['{F2DC6D91-B2ED-36E4-B5A2-706A808045D2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPaperSize;

  { methods } 

    ///<summary>
    ///  返回一个可循环访问集合的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  将当前的内容复制 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  到指定的数组，指定索引处开始。
    ///</summary>
    ///  <param name="paperSizes">
    ///  从零开始的数组，用于接收从复制的项 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  从此处开始复制的项索引。
    ///</param>
    procedure CopyTo(paperSizes: TArray<DNPaperSize>; index: Int32);
    ///<summary>
    ///  添加 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  到集合的末尾。
    ///</summary>
    ///  <param name="paperSize">
    ///  要添加到集合中的 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  。
    ///</param>
    ///<returns>
    ///  新添加的项的从零开始索引。
    ///</returns>
    function Add(paperSize: DNPaperSize): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的不同的纸张大小的数目。
    ///</summary>
    ///<returns>
    ///  集合中的不同的纸张大小的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPaperSize read get_Item; default;
  end;

  TDNPrinterSettings_PaperSizeCollection = class(TDNGenericImport<DNPrinterSettings_PaperSizeCollectionClass, DNPrinterSettings_PaperSizeCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PaperSourceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5100E56B-B5DC-5249-B8D7-B0F2B861D340}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Drawing.Printing.PaperSource" />
    ///  类型的数组。
    ///</param>
    {class} function init(&array: TArray<DNPaperSource>): DNPrinterSettings_PaperSourceCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.Drawing.Printing.PaperSource" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+PaperSourceCollection')]
  DNPrinterSettings_PaperSourceCollection = interface(DDN.mscorlib.DNObject)
  ['{0CB10CF3-79E3-3D88-93A5-DD986AFAF5BA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPaperSource;

  { methods } 

    ///<summary>
    ///  返回一个可循环访问集合的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  将当前的内容复制 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  到指定的数组，指定索引处开始。
    ///</summary>
    ///  <param name="paperSources">
    ///  从零开始的数组，用于接收从复制的项 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  从此处开始复制的项索引。
    ///</param>
    procedure CopyTo(paperSources: TArray<DNPaperSource>; index: Int32);
    ///<summary>
    ///  添加指定 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  到末尾 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  。
    ///</summary>
    ///  <param name="paperSource">
    ///  要添加到集合中的 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  已添加。
    ///</returns>
    function Add(paperSource: DNPaperSource): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的不同的纸张来源的数目。
    ///</summary>
    ///<returns>
    ///  集合中的不同的纸张来源的数。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPaperSource read get_Item; default;
  end;

  TDNPrinterSettings_PaperSourceCollection = class(TDNGenericImport<DNPrinterSettings_PaperSourceCollectionClass, DNPrinterSettings_PaperSourceCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PrinterResolutionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{668BC649-4DAA-5E00-AB27-8A362631F6B7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  类型的数组。
    ///</param>
    {class} function init(&array: TArray<DNPrinterResolution>): DNPrinterSettings_PrinterResolutionCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.Drawing.Printing.PrinterResolution" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection')]
  DNPrinterSettings_PrinterResolutionCollection = interface(DDN.mscorlib.DNObject)
  ['{185EA4C4-A9C2-35B6-9219-E54A78482F11}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPrinterResolution;

  { methods } 

    ///<summary>
    ///  返回一个可循环访问集合的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  将当前的内容复制 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  到指定的数组，指定索引处开始。
    ///</summary>
    ///  <param name="printerResolutions">
    ///  从零开始的数组，用于接收从复制的项 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  从此处开始复制的项索引。
    ///</param>
    procedure CopyTo(printerResolutions: TArray<DNPrinterResolution>; index: Int32);
    ///<summary>
    ///  添加 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  到集合的末尾。
    ///</summary>
    ///  <param name="printerResolution">
    ///  要添加到集合中的 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  。
    ///</param>
    ///<returns>
    ///  新添加的项的从零开始索引。
    ///</returns>
    function Add(printerResolution: DNPrinterResolution): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中可用的打印机分辨率的数目。
    ///</summary>
    ///<returns>
    ///  集合中的可用打印机分辨率的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPrinterResolution read get_Item; default;
  end;

  TDNPrinterSettings_PrinterResolutionCollection = class(TDNGenericImport<DNPrinterSettings_PrinterResolutionCollectionClass, DNPrinterSettings_PrinterResolutionCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_StringCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{77A66E73-7EC6-5C1E-B999-E119E23B82DD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="array"><see cref="T:System.String" />
    ///  类型的数组。
    ///</param>
    {class} function init(&array: TArray<string>): DNPrinterSettings_StringCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.String" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+StringCollection')]
  DNPrinterSettings_StringCollection = interface(DDN.mscorlib.DNObject)
  ['{797C1ACD-B7D5-3449-A800-F41050E30EEC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): string;

  { methods } 

    ///<summary>
    ///  返回一个可循环访问集合的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  将当前的内容复制 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  到指定的数组，指定索引处开始
    ///</summary>
    ///  <param name="strings">
    ///  从零开始的数组，用于接收从复制的项 <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  从此处开始复制的项索引。
    ///</param>
    procedure CopyTo(strings: TArray<string>; index: Int32);
    ///<summary>
    ///  将一个字符串添加到集合的末尾。
    ///</summary>
    ///  <param name="value">
    ///  要添加到集合的字符串。
    ///</param>
    ///<returns>
    ///  新添加的项的从零开始索引。
    ///</returns>
    function Add(value: string): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的字符串的数量。
    ///</summary>
    ///<returns>
    ///  集合中的字符串的数量。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: string read get_Item; default;
  end;

  TDNPrinterSettings_StringCollection = class(TDNGenericImport<DNPrinterSettings_StringCollectionClass, DNPrinterSettings_StringCollection>) end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  对应到分布式事务处理协调器 (DTC) <see langword="ITransaction" />
  ///  接口，并在支持的对象通过获取 <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" />
  ///  。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ITransaction')]
  DNITransaction = interface(DDN.mscorlib.DNObject)
  ['{0FB15084-AF41-11CE-BD2B-204C4F4F5020}']
  { methods } 

    ///<summary>
    ///  提交事务。
    ///</summary>
    ///  <param name="fRetaining">
    ///  必须是 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="grfTC">
    ///  从 OLE DB 枚举的值 <see langword="XACTTC" />
    ///  。
    ///</param>
    ///  <param name="grfRM">
    ///  必须为零。
    ///</param>
    procedure Commit(fRetaining: Int32; grfTC: Int32; grfRM: Int32);

  end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintEventArgsClass = interface(DNObjectClass)
  ['{DD88D947-6F22-569B-9601-6073DB817CC1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPrintEventArgs;

  end;

  ///<summary>
  ///  提供有关 <see cref="E:System.Drawing.Printing.PrintDocument.BeginPrint" />
  ///  和 <see cref="E:System.Drawing.Printing.PrintDocument.EndPrint" />
  ///  事件的数据。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintEventArgs')]
  DNPrintEventArgs = interface(DNObject)
  ['{740149A2-C310-3A38-90EC-D84638581A00}']
  { getters & setters } 

    function get_PrintAction: DNPrintAction;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  在所有情况下均返回 <see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  。
    ///</returns>
    property PrintAction: DNPrintAction read get_PrintAction;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNPrintEventArgs = class(TDNGenericImport<DNPrintEventArgsClass, DNPrintEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNQueryPageSettingsEventArgsClass = interface(DNPrintEventArgsClass)
  ['{40D2D17D-329D-5469-85F9-313B929E506A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="pageSettings">
    ///  要打印页的页设置。
    ///</param>
    {class} function init(pageSettings: DNPageSettings): DNQueryPageSettingsEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Drawing.Printing.PrintDocument.QueryPageSettings" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.QueryPageSettingsEventArgs')]
  DNQueryPageSettingsEventArgs = interface(DNPrintEventArgs)
  ['{89C40DE8-7377-3FD3-B574-143C6A9E7BB0}']
  { getters & setters } 

    function get_PageSettings: DNPageSettings;
    procedure set_PageSettings(value: DNPageSettings);
    function get_PrintAction: DNPrintAction;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要打印页的页设置。
    ///</summary>
    ///<returns>
    ///  要打印页的页设置。
    ///</returns>
    property PageSettings: DNPageSettings read get_PageSettings write set_PageSettings;
    ///<summary>
    ///  在所有情况下均返回 <see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  。
    ///</returns>
    property PrintAction: DNPrintAction read get_PrintAction;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNQueryPageSettingsEventArgs = class(TDNGenericImport<DNQueryPageSettingsEventArgsClass, DNQueryPageSettingsEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewCancelEditEventArgsClass = interface(DNObjectClass)
  ['{E4DA49D6-E6B1-5F47-951E-BD6BBD3788B6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridViewCancelEditEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="rowIndex">
    ///  引发事件的取消按钮所在行的索引。
    ///</param>
    {class} function init(rowIndex: Int32): DNGridViewCancelEditEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.GridView.RowCancelingEdit" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewCancelEditEventArgs')]
  DNGridViewCancelEditEventArgs = interface(DNObject)
  ['{E2E65673-4A70-33E1-ADCB-4FF3FE71D202}']
  { getters & setters } 

    function get_RowIndex: Int32;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取引发事件的取消按钮所在行的索引。
    ///</summary>
    ///<returns>
    ///  引发事件的取消按钮所在行的从零开始索引。
    ///</returns>
    property RowIndex: Int32 read get_RowIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewCancelEditEventArgs = class(TDNGenericImport<DNGridViewCancelEditEventArgsClass, DNGridViewCancelEditEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewDeleteEventArgsClass = interface(DNObjectClass)
  ['{2FAB2069-874B-5D0D-ABF6-F0B4EFAD0598}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridViewDeleteEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="rowIndex">
    ///  包含引发事件删除按钮的行的索引。
    ///</param>
    {class} function init(rowIndex: Int32): DNGridViewDeleteEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.GridView.RowDeleting" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewDeleteEventArgs')]
  DNGridViewDeleteEventArgs = interface(DNObject)
  ['{A64B7B15-A236-37C5-8715-3CF1C44A27D1}']
  { getters & setters } 

    function get_RowIndex: Int32;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要删除的行的索引。
    ///</summary>
    ///<returns>
    ///  要删除的行的从零开始的索引。
    ///</returns>
    property RowIndex: Int32 read get_RowIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewDeleteEventArgs = class(TDNGenericImport<DNGridViewDeleteEventArgsClass, DNGridViewDeleteEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewEditEventArgsClass = interface(DNObjectClass)
  ['{67C8E7F2-93E9-58F3-B677-D4ACF3C10D49}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridViewEditEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="newEditIndex">
    ///  若要编辑的行的索引。
    ///</param>
    {class} function init(newEditIndex: Int32): DNGridViewEditEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.GridView.RowEditing" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewEditEventArgs')]
  DNGridViewEditEventArgs = interface(DNObject)
  ['{69EAFC4C-110F-3C00-ABCA-44A7511C2983}']
  { getters & setters } 

    function get_NewEditIndex: Int32;
    procedure set_NewEditIndex(value: Int32);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置正在编辑的行的索引。
    ///</summary>
    ///<returns>
    ///  正在编辑的行的索引。
    ///</returns>
    property NewEditIndex: Int32 read get_NewEditIndex write set_NewEditIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewEditEventArgs = class(TDNGenericImport<DNGridViewEditEventArgsClass, DNGridViewEditEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewPageEventArgsClass = interface(DNObjectClass)
  ['{4C387910-3401-5E63-9100-DD9A66D0FC60}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridViewPageEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="newPageIndex">
    ///  要显示的新页的索引。
    ///</param>
    {class} function init(newPageIndex: Int32): DNGridViewPageEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.GridView.PageIndexChanging" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewPageEventArgs')]
  DNGridViewPageEventArgs = interface(DNObject)
  ['{C698F022-3231-3C83-B2A4-01B629A49289}']
  { getters & setters } 

    function get_NewPageIndex: Int32;
    procedure set_NewPageIndex(value: Int32);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要在中显示的新页的索引 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  要在中显示的新页的索引 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.GridViewPageEventArgs.NewPageIndex" />
    ///  属性也不可小于零。
    ///</exception>
    property NewPageIndex: Int32 read get_NewPageIndex write set_NewPageIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewPageEventArgs = class(TDNGenericImport<DNGridViewPageEventArgsClass, DNGridViewPageEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewSelectEventArgsClass = interface(DNObjectClass)
  ['{F6744302-EDE2-5F7E-A2DE-77A6839F5C39}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridViewSelectEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="newSelectedIndex">
    ///  要选择中的新行的索引 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</param>
    {class} function init(newSelectedIndex: Int32): DNGridViewSelectEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.GridView.SelectedIndexChanging" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewSelectEventArgs')]
  DNGridViewSelectEventArgs = interface(DNObject)
  ['{8394D2D8-F04F-31D4-99B7-886A0CB9C903}']
  { getters & setters } 

    function get_NewSelectedIndex: Int32;
    procedure set_NewSelectedIndex(value: Int32);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要在中选择的新行的索引 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  要选择中的新行的索引 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property NewSelectedIndex: Int32 read get_NewSelectedIndex write set_NewSelectedIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewSelectEventArgs = class(TDNGenericImport<DNGridViewSelectEventArgsClass, DNGridViewSelectEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewSortEventArgsClass = interface(DNObjectClass)
  ['{98B7C7BB-A246-521E-80F9-9F39B60737AF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridViewSortEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="sortExpression">
    ///  用来在控件中的项进行排序的排序表达式。
    ///</param>
    ///  <param name="sortDirection">
    ///  一个 <see cref="T:System.Web.UI.WebControls.SortDirection" />
    ///  ，该值指示在控件中的项进行排序的方向。
    ///</param>
    {class} function init(sortExpression: string; sortDirection: DNSortDirection): DNGridViewSortEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.GridView.Sorting" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewSortEventArgs')]
  DNGridViewSortEventArgs = interface(DNObject)
  ['{3B2376B6-B654-30AC-937F-C1289D1B6FBC}']
  { getters & setters } 

    function get_SortDirection: DNSortDirection;
    procedure set_SortDirection(value: DNSortDirection);
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于排序的方向 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.SortDirection" />
    ///  值之一。
    ///</returns>
    property SortDirection: DNSortDirection read get_SortDirection write set_SortDirection;
    ///<summary>
    ///  获取或设置用于进行中的项进行排序的表达式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  在对项进行排序所用的表达式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewSortEventArgs = class(TDNGenericImport<DNGridViewSortEventArgsClass, DNGridViewSortEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewUpdateEventArgsClass = interface(DNObjectClass)
  ['{BB14C2D7-C057-5E2F-BD73-FA4F5D5ADCEA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridViewUpdateEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="rowIndex">
    ///  正在更新的行的索引。
    ///</param>
    {class} function init(rowIndex: Int32): DNGridViewUpdateEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.GridView.RowUpdating" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewUpdateEventArgs')]
  DNGridViewUpdateEventArgs = interface(DNObject)
  ['{BDEF807C-4C8B-3E03-A2BE-D2FE1103724C}']
  { getters & setters } 

    function get_RowIndex: Int32;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取正在更新的行的索引。
    ///</summary>
    ///<returns>
    ///  正在更新的行的索引。
    ///</returns>
    property RowIndex: Int32 read get_RowIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewUpdateEventArgs = class(TDNGenericImport<DNGridViewUpdateEventArgsClass, DNGridViewUpdateEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNListChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{2CB56579-6023-53C8-9532-2ED3C07398A1}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.ComponentModel.IBindingList.ListChanged" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.ComponentModel.ListChangedEventArgs')]
  DNListChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C7AAB3F1-E25D-36A2-B1BC-9082B8E2E07B}']
  { getters & setters } 

    function get_NewIndex: Int32;
    function get_OldIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取受此更改影响的项的索引。
    ///</summary>
    ///<returns>
    ///  此更改受影响的索引。
    ///</returns>
    property NewIndex: Int32 read get_NewIndex;
    ///<summary>
    ///  获取已被移动的项的旧索引。
    ///</summary>
    ///<returns>
    ///  旧的已移动的项的索引。
    ///</returns>
    property OldIndex: Int32 read get_OldIndex;
  end;

  TDNListChangedEventArgs = class(TDNGenericImport<DNListChangedEventArgsClass, DNListChangedEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E093AF51-E23D-5B0E-BFF1-DEA4554E8CCC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataColumnChangeEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="row"><see cref="T:System.Data.DataRow" />
    ///  的不断变化的值的列。
    ///</param>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  带有可变值。
    ///</param>
    ///  <param name="value">
    ///  新值。
    ///</param>
    {class} function init(row: DNDataRow; column: DNDataColumn; value: DDN.mscorlib.DNObject): DNDataColumnChangeEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.DataTable.ColumnChanging" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.DataColumnChangeEventArgs')]
  DNDataColumnChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F3D0A1DA-D027-3E0A-95CB-4CD3B25F3E9D}']
  { getters & setters } 

    function get_Column: DNDataColumn;
    function get_Row: DNDataRow;
    function get_ProposedValue: DDN.mscorlib.DNObject;
    procedure set_ProposedValue(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.DataColumn" />
    ///  带有可变值。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataColumn" />
    ///  带有可变值。
    ///</returns>
    property Column: DNDataColumn read get_Column;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  具有可变值的列。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  具有可变值的列。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取或设置列建议的新值。
    ///</summary>
    ///<returns>
    ///  建议的值，类型的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    property ProposedValue: DDN.mscorlib.DNObject read get_ProposedValue write set_ProposedValue;
  end;

  TDNDataColumnChangeEventArgs = class(TDNGenericImport<DNDataColumnChangeEventArgsClass, DNDataColumnChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataRowChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{EACF8D2A-F76A-5DCD-ADE6-3BD171C9C6F7}']
  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Data.DataTable.RowChanged" />
  ///  , ，<see cref="E:System.Data.DataTable.RowChanging" />
  ///  , ，<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />
  ///  , ，和 <see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Data.DataRowChangeEventArgs')]
  DNDataRowChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BE27FF81-9AE9-3583-99C1-9D8F15D8832F}']
  { getters & setters } 

    function get_Row: DNDataRow;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取在其发生操作的行。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  后发生了操作。
    ///</returns>
    property Row: DNDataRow read get_Row;
  end;

  TDNDataRowChangeEventArgs = class(TDNGenericImport<DNDataRowChangeEventArgsClass, DNDataRowChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataTableClearEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{3FAA835A-6B33-5E6E-9249-759E8E8179BA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataTableClearEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  正在清除其行。
    ///</param>
    {class} function init(dataTable: DNDataTable): DNDataTableClearEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="M:System.Data.DataTable.Clear" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Data.DataTableClearEventArgs')]
  DNDataTableClearEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1C828E83-1DA2-3ED3-A238-E68B1B66E5CF}']
  { getters & setters } 

    function get_Table: DNDataTable;
    function get_TableName: string;
    function get_TableNamespace: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取正在清除其行的表。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  正在清除其行。
    ///</returns>
    property Table: DNDataTable read get_Table;
    ///<summary>
    ///  获取正在清除其行的表名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，该值指示表名。
    ///</returns>
    property TableName: string read get_TableName;
    ///<summary>
    ///  获取正在清除其行的表的命名空间。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，该值指示命名空间名称。
    ///</returns>
    property TableNamespace: string read get_TableNamespace;
  end;

  TDNDataTableClearEventArgs = class(TDNGenericImport<DNDataTableClearEventArgsClass, DNDataTableClearEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataTableNewRowEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{DD55550D-4643-5E2A-BFA7-33BDA30D720F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataTableNewRowEventArgs" />
    ///  的新实例。
    ///</summary>
    ///  <param name="dataRow"><see cref="T:System.Data.DataRow" />
    ///  正在添加。
    ///</param>
    {class} function init(dataRow: DNDataRow): DNDataTableNewRowEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="M:System.Data.DataTable.NewRow" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Data.DataTableNewRowEventArgs')]
  DNDataTableNewRowEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{8DA50CAC-EA82-38BE-8041-D721195CBBAB}']
  { getters & setters } 

    function get_Row: DNDataRow;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要添加的行。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  正被添加。
    ///</returns>
    property Row: DNDataRow read get_Row;
  end;

  TDNDataTableNewRowEventArgs = class(TDNGenericImport<DNDataTableNewRowEventArgsClass, DNDataTableNewRowEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNMergeFailedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{609582C1-8731-5867-89A8-F23BF6C3B576}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.MergeFailedEventArgs" />
    ///  类 <see cref="T:System.Data.DataTable" />
    ///  和合并冲突的说明。
    ///</summary>
    ///  <param name="table"><see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</param>
    ///  <param name="conflict">
    ///  合并冲突的说明。
    ///</param>
    {class} function init(table: DNDataTable; conflict: string): DNMergeFailedEventArgs;

  end;

  ///<summary>
  ///  当目标和源时发生 <see langword="DataRow" />
  ///  具有相同的主键值，和 <see cref="P:System.Data.DataSet.EnforceConstraints" />
  ///  属性设置为 true。
  ///</summary>
  [DNTypeName('System.Data.MergeFailedEventArgs')]
  DNMergeFailedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{08B4397F-E667-341F-8B61-6303224951F2}']
  { getters & setters } 

    function get_Table: DNDataTable;
    function get_Conflict: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  返回 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</returns>
    property Table: DNDataTable read get_Table;
    ///<summary>
    ///  返回合并冲突的说明。
    ///</summary>
    ///<returns>
    ///  合并冲突的说明。
    ///</returns>
    property Conflict: string read get_Conflict;
  end;

  TDNMergeFailedEventArgs = class(TDNGenericImport<DNMergeFailedEventArgsClass, DNMergeFailedEventArgs>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbInfoMessageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{7BA4AD22-7E73-5E3E-9A5D-0FEC17EACC17}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" />
  ///  事件提供数据。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbInfoMessageEventArgs')]
  DNOleDbInfoMessageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F7FCAC61-B247-3EA0-A99E-9761E4FB85F5}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Source: string;

  { methods } 

    ///<summary>
    ///  检索的字符串表示形式 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" />
    ///  事件。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" />
    ///  事件。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 HRESULT 遵循 ANSI SQL 标准的数据库。
    ///</summary>
    ///<returns>
    ///  HRESULT，它确定的错误的来源，如果该错误可以由多个位置颁发。
    ///</returns>
    property ErrorCode: Int32 read get_ErrorCode;
    ///<summary>
    ///  获取从数据源发送的错误的完整文本。
    ///</summary>
    ///<returns>
    ///  完整的错误文本。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取生成错误的对象的名称。
    ///</summary>
    ///<returns>
    ///  生成错误的对象的名称。
    ///</returns>
    property Source: string read get_Source;
  end;

  TDNOleDbInfoMessageEventArgs = class(TDNGenericImport<DNOleDbInfoMessageEventArgsClass, DNOleDbInfoMessageEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlInfoMessageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{481F2F6B-6013-5B28-B3AF-FBDF5112B463}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlInfoMessageEventArgs')]
  DNSqlInfoMessageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BD38BC5F-E6CA-35CF-9BCE-087D6285E1A5}']
  { getters & setters } 

    function get_Message: string;
    function get_Source: string;

  { methods } 

    ///<summary>
    ///  检索的字符串表示形式 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
    ///  事件。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
    ///  事件。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取从数据库发送的错误的完整文本。
    ///</summary>
    ///<returns>
    ///  完整的错误文本。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取生成错误的对象的名称。
    ///</summary>
    ///<returns>
    ///  生成错误的对象的名称。
    ///</returns>
    property Source: string read get_Source;
  end;

  TDNSqlInfoMessageEventArgs = class(TDNGenericImport<DNSqlInfoMessageEventArgsClass, DNSqlInfoMessageEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNStateChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{62F1B9D0-E4D8-5961-A5C4-37DC95CA1F4F}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.StateChangeEventArgs" />
    ///  类，在给定的原始状态和该对象的当前状态。
    ///</summary>
    ///  <param name="originalState"><see cref="T:System.Data.ConnectionState" />
    ///  值之一。
    ///</param>
    ///  <param name="currentState"><see cref="T:System.Data.ConnectionState" />
    ///  值之一。
    ///</param>
    {class} function init(originalState: DNConnectionState; currentState: DNConnectionState): DNStateChangeEventArgs;

  end;

  ///<summary>
  ///  提供 .NET Framework 数据提供程序的状态更改事件数据。
  ///</summary>
  [DNTypeName('System.Data.StateChangeEventArgs')]
  DNStateChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1579DF95-26A0-392F-9B07-AFA8F2EC8639}']
  { getters & setters } 

    function get_CurrentState: DNConnectionState;
    function get_OriginalState: DNConnectionState;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取连接的新状态。
    ///  连接对象将事件激发时已处于新建状态。
    ///</summary>
    ///<returns><see cref="T:System.Data.ConnectionState" />
    ///  值之一。
    ///</returns>
    property CurrentState: DNConnectionState read get_CurrentState;
    ///<summary>
    ///  获取连接的原始状态。
    ///</summary>
    ///<returns><see cref="T:System.Data.ConnectionState" />
    ///  值之一。
    ///</returns>
    property OriginalState: DNConnectionState read get_OriginalState;
  end;

  TDNStateChangeEventArgs = class(TDNGenericImport<DNStateChangeEventArgsClass, DNStateChangeEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintPageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FAEE24EA-1B7E-5DA1-AE8A-791352369941}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  用于绘制该项。
    ///</param>
    ///  <param name="marginBounds">
    ///  边距之间的区域。
    ///</param>
    ///  <param name="pageBounds">
    ///  在纸张的整个区域。
    ///</param>
    ///  <param name="pageSettings"><see cref="T:System.Drawing.Printing.PageSettings" />
    ///  页。
    ///</param>
    {class} function init(graphics: DNGraphics; marginBounds: DNRectangle; pageBounds: DNRectangle; pageSettings: DNPageSettings): DNPrintPageEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintPageEventArgs')]
  DNPrintPageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2A5D8F32-812E-3C94-9263-51BCC040C47C}']
  { getters & setters } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_Graphics: DNGraphics;
    function get_HasMorePages: Boolean;
    procedure set_HasMorePages(value: Boolean);
    function get_MarginBounds: DNRectangle;
    function get_PageBounds: DNRectangle;
    function get_PageSettings: DNPageSettings;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否应取消打印作业。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应取消打印作业;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Cancel: Boolean read get_Cancel write set_Cancel;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Graphics" />
    ///  用来绘制页。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Graphics" />
    ///  用来绘制页。
    ///</returns>
    property Graphics: DNGraphics read get_Graphics;
    ///<summary>
    ///  获取或设置一个值，该值指示是否应打印附加页。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应打印附加页;，否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property HasMorePages: Boolean read get_HasMorePages write set_HasMorePages;
    ///<summary>
    ///  获取表示边距内页面的部分的矩形区域。
    ///</summary>
    ///<returns>
    ///  矩形区域，以百分之一英寸，它表示边距以内页面的部分。
    ///</returns>
    property MarginBounds: DNRectangle read get_MarginBounds;
    ///<summary>
    ///  获取表示页上的总区域的矩形区域。
    ///</summary>
    ///<returns>
    ///  表示页上的总区域的矩形区域。
    ///</returns>
    property PageBounds: DNRectangle read get_PageBounds;
    ///<summary>
    ///  获取当前页的页设置。
    ///</summary>
    ///<returns>
    ///  当前页的页设置。
    ///</returns>
    property PageSettings: DNPageSettings read get_PageSettings;
  end;

  TDNPrintPageEventArgs = class(TDNGenericImport<DNPrintPageEventArgsClass, DNPrintPageEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCallingDataMethodsEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{993E3B14-1155-55C7-A744-E9AB19082FEC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.CallingDataMethodsEventArgs" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCallingDataMethodsEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.ModelDataSource.CallingDataMethods" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.CallingDataMethodsEventArgs')]
  DNCallingDataMethodsEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{41D72835-1430-3D41-8544-19783E5959B1}']
  { getters & setters } 

    function get_DataMethodsType: DDN.mscorlib.DNType;
    procedure set_DataMethodsType(value: DDN.mscorlib.DNType);
    function get_DataMethodsObject: DDN.mscorlib.DNObject;
    procedure set_DataMethodsObject(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  包含要在数据方法都是静态方法时调用的数据方法的类型。
    ///</summary>
    ///<returns>
    ///  包含用于调用时，静态数据方法的类型或 <see langword="null" />
    ///  如果数据的方法不是静态方法。
    ///</returns>
    property DataMethodsType: DDN.mscorlib.DNType read get_DataMethodsType write set_DataMethodsType;
    ///<summary>
    ///  一个对象，其中包含用于在数据方法不是一种类型的静态方法时调用数据方法。
    ///</summary>
    ///<returns>
    ///  包含数据的方法调用，该实例或 <see langword="null" />
    ///  如果数据的方法是静态方法。
    ///</returns>
    property DataMethodsObject: DDN.mscorlib.DNObject read get_DataMethodsObject write set_DataMethodsObject;
  end;

  TDNCallingDataMethodsEventArgs = class(TDNGenericImport<DNCallingDataMethodsEventArgsClass, DNCallingDataMethodsEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridCommandEventArgsClass = interface(DNObjectClass)
  ['{19504B28-1D85-5B57-AD4C-73007CF01B33}']
  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Web.UI.WebControls.DataGrid.CancelCommand" />
  ///  , ，<see cref="E:System.Web.UI.WebControls.DataGrid.DeleteCommand" />
  ///  , ，<see cref="E:System.Web.UI.WebControls.DataGrid.EditCommand" />
  ///  , ，<see cref="E:System.Web.UI.WebControls.DataGrid.ItemCommand" />
  ///  , ，和 <see cref="E:System.Web.UI.WebControls.DataGrid.UpdateCommand" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataGridCommandEventArgs')]
  DNDataGridCommandEventArgs = interface(DNObject)
  ['{B3427FE2-4857-3CE0-B104-F9D3D10E5CCE}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_Item: DNDataGridItem;
    function get_CommandName: string;
    function get_CommandArgument: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取命令的源。
    ///</summary>
    ///<returns>
    ///  该命令的源。
    ///</returns>
    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    ///<summary>
    ///  获取包含命令源中的项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  表示中的选定的项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</returns>
    property Item: DNDataGridItem read get_Item;
    ///<summary>
    ///  获取命令的名称。
    ///</summary>
    ///<returns>
    ///  要执行的命令的名称。
    ///</returns>
    property CommandName: string read get_CommandName;
    ///<summary>
    ///  获取命令的参数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  ，其中包含该命令的参数。
    ///</returns>
    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
  end;

  TDNDataGridCommandEventArgs = class(TDNGenericImport<DNDataGridCommandEventArgsClass, DNDataGridCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewCommandEventArgsClass = interface(DNObjectClass)
  ['{DAB0153B-C716-56D6-815C-83BEAAD84B0D}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.GridView.RowCommand" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewCommandEventArgs')]
  DNGridViewCommandEventArgs = interface(DNObject)
  ['{367AFB90-5ACA-34F0-8819-C8E46A0CD0D8}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_CommandName: string;
    function get_CommandArgument: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取命令的源。
    ///</summary>
    ///<returns>
    ///  一个实例 <see cref="T:System.Object" />
    ///  类，表示该命令的源。
    ///</returns>
    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    ///<summary>
    ///  获取或设置一个值，该值指示控件是否已经处理了事件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果数据绑定事件代码已跳过或已完成;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
    ///<summary>
    ///  获取命令的名称。
    ///</summary>
    ///<returns>
    ///  要执行的命令的名称。
    ///</returns>
    property CommandName: string read get_CommandName;
    ///<summary>
    ///  获取命令的参数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  ，其中包含该命令的参数。
    ///</returns>
    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
  end;

  TDNGridViewCommandEventArgs = class(TDNGenericImport<DNGridViewCommandEventArgsClass, DNGridViewCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCreatingModelDataSourceEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{324DF66A-539C-5072-984B-E0F31AF4BE3A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.CreatingModelDataSourceEventArgs" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCreatingModelDataSourceEventArgs;

  end;

  ///<summary>
  ///  提供有关 <see cref="E:System.Web.UI.WebControls.DataBoundControl.CreatingModelDataSource" />
  ///  和 <see cref="E:System.Web.UI.WebControls.Repeater.CreatingModelDataSource" />
  ///  事件的数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.CreatingModelDataSourceEventArgs')]
  DNCreatingModelDataSourceEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{54956774-7099-3538-A7EB-8B14752B3235}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCreatingModelDataSourceEventArgs = class(TDNGenericImport<DNCreatingModelDataSourceEventArgsClass, DNCreatingModelDataSourceEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridItemEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F46EA941-6E1D-52E4-A0AB-BD28B9E2A345}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.DataGridItemEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="item">
    ///  一个 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  表示中的项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  。
    ///</param>
    {class} function init(item: DNDataGridItem): DNDataGridItemEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Web.UI.WebControls.DataGrid.ItemCreated" />
  ///  和 <see cref="E:System.Web.UI.WebControls.DataGrid.ItemDataBound" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataGridItemEventArgs')]
  DNDataGridItemEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2288471D-D122-349D-87C6-518604AFC9B8}']
  { getters & setters } 

    function get_Item: DNDataGridItem;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取所引用的项目中 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控制时引发该事件。
    ///</summary>
    ///<returns>
    ///  中的引用的项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控制时引发该事件。
    ///</returns>
    property Item: DNDataGridItem read get_Item;
  end;

  TDNDataGridItemEventArgs = class(TDNGenericImport<DNDataGridItemEventArgsClass, DNDataGridItemEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridPageChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E9AC49A0-787C-5566-AF1E-F8CC8B82B343}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.DataGridPageChangedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="commandSource">
    ///  该命令的源。
    ///</param>
    ///  <param name="newPageIndex">
    ///  页上选择元素的从用户选择页上的索引 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</param>
    {class} function init(commandSource: DDN.mscorlib.DNObject; newPageIndex: Int32): DNDataGridPageChangedEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Web.UI.WebControls.DataGrid.PageIndexChanged" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataGridPageChangedEventArgs')]
  DNDataGridPageChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{D26CF7C6-FDDD-32D9-AA79-8425EA146289}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_NewPageIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取命令的源。
    ///</summary>
    ///<returns>
    ///  该命令的源。
    ///</returns>
    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    ///<summary>
    ///  获取页上选择元素中用户选定的页上的索引 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  页上选择元素中用户选定的页上的索引 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</returns>
    property NewPageIndex: Int32 read get_NewPageIndex;
  end;

  TDNDataGridPageChangedEventArgs = class(TDNGenericImport<DNDataGridPageChangedEventArgsClass, DNDataGridPageChangedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridSortCommandEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4BAD3DD9-CC0D-511C-B21D-8B6421CB3C94}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.DataGridSortCommandEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="commandSource">
    ///  该命令的源。
    ///</param>
    ///  <param name="dce">
    ///  包含事件数据的 <see cref="T:System.Web.UI.WebControls.DataGridCommandEventArgs" />
    ///  。
    ///</param>
    {class} function init(commandSource: DDN.mscorlib.DNObject; dce: DNDataGridCommandEventArgs): DNDataGridSortCommandEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Web.UI.WebControls.DataGrid.SortCommand" />
  ///  事件 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataGridSortCommandEventArgs')]
  DNDataGridSortCommandEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{E9AEAF1E-38C6-3D0F-952B-9C637C41F7D7}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_SortExpression: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取命令的源。
    ///</summary>
    ///<returns>
    ///  该命令的源。
    ///</returns>
    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    ///<summary>
    ///  获取用于排序的表达式 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  用于排序的表达式 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</returns>
    property SortExpression: string read get_SortExpression;
  end;

  TDNDataGridSortCommandEventArgs = class(TDNGenericImport<DNDataGridSortCommandEventArgsClass, DNDataGridSortCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewDeletedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4AA15383-B124-5C6D-8E1C-6F008CE0CED4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridViewDeletedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="affectedRows">
    ///  删除操作所影响的行数。
    ///</param>
    ///  <param name="e"><see cref="T:System.Exception" />
    ///  ，表示执行删除操作时引发的异常。
    ///  如果不引发任何异常，则使用 <see langword="null" />
    ///  为此参数。
    ///</param>
    {class} function init(affectedRows: Int32; e: DDN.mscorlib.DNException): DNGridViewDeletedEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.GridView.RowDeleted" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewDeletedEventArgs')]
  DNGridViewDeletedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{905B8261-5576-3F1E-8B47-66D0383764B2}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取受删除操作影响的行数。
    ///</summary>
    ///<returns>
    ///  删除操作所影响的行数。
    ///</returns>
    property AffectedRows: Int32 read get_AffectedRows;
    ///<summary>
    ///  获取异常 （如果有） 删除操作过程中引发。
    ///</summary>
    ///<returns><see cref="T:System.Exception" />
    ///  ，表示删除操作过程中引发的异常。
    ///</returns>
    property Exception: DDN.mscorlib.DNException read get_Exception;
    ///<summary>
    ///  获取或设置一个值，该值指示是否执行删除操作期间引发的异常在事件处理程序中处理。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果处理了该异常在事件处理程序;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
  end;

  TDNGridViewDeletedEventArgs = class(TDNGenericImport<DNGridViewDeletedEventArgsClass, DNGridViewDeletedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewRowEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{EA8AF41E-4D3D-5A21-A17E-16BF79EAECFE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridViewRowEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="row">
    ///  一个 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  对象，表示正在创建行或数据绑定。
    ///</param>
    {class} function init(row: DNGridViewRow): DNGridViewRowEventArgs;

  end;

  ///<summary>
  ///  提供有关 <see cref="E:System.Web.UI.WebControls.GridView.RowCreated" />
  ///  和 <see cref="E:System.Web.UI.WebControls.GridView.RowDataBound" />
  ///  事件的数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewRowEventArgs')]
  DNGridViewRowEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{12B33821-6405-3809-B39A-75DC0CDEFF62}']
  { getters & setters } 

    function get_Row: DNGridViewRow;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取正在创建行或数据绑定。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  对象，表示正在创建行或数据绑定。
    ///</returns>
    property Row: DNGridViewRow read get_Row;
  end;

  TDNGridViewRowEventArgs = class(TDNGenericImport<DNGridViewRowEventArgsClass, DNGridViewRowEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewUpdatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E5E6EEE2-BAC0-5B74-BD1E-B4DCFCCD29D4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridViewUpdatedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="affectedRows">
    ///  受更新操作影响的行数。
    ///</param>
    ///  <param name="e">
    ///  执行更新操作时引发异常。
    ///  如果未不引发任何异常，则使用 <see langword="null" />
    ///  为此参数。
    ///</param>
    {class} function init(affectedRows: Int32; e: DDN.mscorlib.DNException): DNGridViewUpdatedEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Web.UI.WebControls.GridView.RowUpdated" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewUpdatedEventArgs')]
  DNGridViewUpdatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{39104AF9-EDB1-3EBA-99E7-2B69B6ECD2FA}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);
    function get_KeepInEditMode: Boolean;
    procedure set_KeepInEditMode(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取受更新操作影响的行数。
    ///</summary>
    ///<returns>
    ///  受更新操作影响的行数。
    ///</returns>
    property AffectedRows: Int32 read get_AffectedRows;
    ///<summary>
    ///  获取异常 （如果有） 更新操作过程中引发。
    ///</summary>
    ///<returns>
    ///  更新操作过程中引发异常。
    ///  如果未引发异常，此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    property Exception: DDN.mscorlib.DNException read get_Exception;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在更新操作期间引发的异常在事件处理程序中处理。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果处理了该异常在事件处理程序;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件应在更新操作后保持处于编辑模式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该控件将继续处于，编辑模式，更新操作; 之后否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property KeepInEditMode: Boolean read get_KeepInEditMode write set_KeepInEditMode;
  end;

  TDNGridViewUpdatedEventArgs = class(TDNGenericImport<DNGridViewUpdatedEventArgsClass, DNGridViewUpdatedEventArgs>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNValidationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FD89FE6F-3039-5078-BA46-B00CE55AACA1}']
  end;

  ///<summary>
  ///  返回与相关的详细的信息 <see langword="ValidationEventHandler" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.Schema.ValidationEventArgs')]
  DNValidationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{49138DCC-3D4B-3D96-AF44-350EF4295AB3}']
  { getters & setters } 

    function get_Message: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取对应于验证事件的文本说明。
    ///</summary>
    ///<returns>
    ///  文本说明。
    ///</returns>
    property Message: string read get_Message;
  end;

  TDNValidationEventArgs = class(TDNGenericImport<DNValidationEventArgsClass, DNValidationEventArgs>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A5830A41-9A45-5E8D-BC73-144AE5DF513F}']
  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Xml.XmlDocument.NodeChanged" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeChanging" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeInserted" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeInserting" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeRemoved" />
  ///  和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Xml.XmlNodeChangedEventArgs')]
  DNXmlNodeChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{6F33740C-B2E1-3A44-A063-8F78C5C6CD1B}']
  { getters & setters } 

    function get_Node: DNXmlNode;
    function get_OldParent: DNXmlNode;
    function get_NewParent: DNXmlNode;
    function get_OldValue: string;
    function get_NewValue: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlNode" />
    ///  要添加、 移除或更改。
    ///</summary>
    ///<returns><see langword="XmlNode" />
    ///  正被添加、 删除或已更改; 此属性绝不会返回 <see langword="null" />
    ///  。
    ///</returns>
    property Node: DNXmlNode read get_Node;
    ///<summary>
    ///  获取的值 <see cref="P:System.Xml.XmlNode.ParentNode" />
    ///  操作开始前。
    ///</summary>
    ///<returns>
    ///  值 <see langword="ParentNode" />
    ///  操作开始前。
    ///  此属性返回 <see langword="null" />
    ///  如果节点没有父级。
    ///  对于属性节点此属性返回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />
    ///  。
    ///</returns>
    property OldParent: DNXmlNode read get_OldParent;
    ///<summary>
    ///  获取的值 <see cref="P:System.Xml.XmlNode.ParentNode" />
    ///  操作完成后。
    ///</summary>
    ///<returns>
    ///  值 <see langword="ParentNode" />
    ///  操作完成后。
    ///  此属性返回 <see langword="null" />
    ///  如果已移除的节点。
    ///  对于属性节点此属性返回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />
    ///  。
    ///</returns>
    property NewParent: DNXmlNode read get_NewParent;
    ///<summary>
    ///  获取节点的原始值。
    ///</summary>
    ///<returns>
    ///  节点的原始值。
    ///  此属性返回 <see langword="null" />
    ///  节点是否既不属性，也不是文本节点，或插入节点。
    ///  如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanging" />
    ///  事件， <see langword="OldValue" />
    ///  返回成功更改是否将被替换的节点的当前值。
    ///  如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanged" />
    ///  事件， <see langword="OldValue" />
    ///  返回之前更改节点的值。
    ///</returns>
    property OldValue: string read get_OldValue;
    ///<summary>
    ///  获取节点的新值。
    ///</summary>
    ///<returns>
    ///  节点的新值。
    ///  此属性返回 <see langword="null" />
    ///  节点是否既不属性，也不是文本节点，或已移除的节点。
    ///  如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanging" />
    ///  事件， <see langword="NewValue" />
    ///  返回节点的值，如果更改成功。
    ///  如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanged" />
    ///  事件， <see langword="NewValue" />
    ///  返回节点的当前值。
    ///</returns>
    property NewValue: string read get_NewValue;
  end;

  TDNXmlNodeChangedEventArgs = class(TDNGenericImport<DNXmlNodeChangedEventArgsClass, DNXmlNodeChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  提供全部组件所需的功能。
  ///</summary>
  [DNTypeName('System.ComponentModel.IComponent')]
  DNIComponent = interface(DDN.mscorlib.DNIDisposable)
  ['{B86E59F2-F1E2-389D-B5F1-C55307C8106E}']
  { getters & setters } 

    function get_Site: DNISite;
    procedure set_Site(value: DNISite);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { propertys } 

    ///<summary>
    ///  获取或设置与 <see cref="T:System.ComponentModel.ISite" />
    ///  关联的 <see cref="T:System.ComponentModel.IComponent" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.ISite" />
    ///  与组件; 关联的对象或 <see langword="null" />
    ///  , ，如果组件不具有一个站点。
    ///</returns>
    property Site: DNISite read get_Site write set_Site;
  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  提供容器的功能。
  ///  容器是在逻辑上包含零个或多个组件的对象。
  ///</summary>
  [DNTypeName('System.ComponentModel.IContainer')]
  DNIContainer = interface(DDN.mscorlib.DNIDisposable)
  ['{61D9C50C-4AAD-3539-AF82-4F36C19D77C8}']
  { getters & setters } 

    function get_Components: DNComponentCollection;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.ComponentModel.IComponent" />
    ///  到 <see cref="T:System.ComponentModel.IContainer" />
    ///  列表的末尾。
    ///</summary>
    ///  <param name="component">
    ///  要添加的 <see cref="T:System.ComponentModel.IComponent" />
    ///  。
    ///</param>
    procedure Add(component: DNIComponent); overload;
    ///<summary>
    ///  添加指定 <see cref="T:System.ComponentModel.IComponent" />
    ///  到 <see cref="T:System.ComponentModel.IContainer" />
    ///  末尾的列表中，并将一个名称分配给该组件。
    ///</summary>
    ///  <param name="component">
    ///  要添加的 <see cref="T:System.ComponentModel.IComponent" />
    ///  。
    ///</param>
    ///  <param name="name">
    ///  要将分配给该组件的唯一的、 不区分大小写名称。
    ///  - 或 -
    ///<see langword="null" />
    ///  保留未命名的组件。
    ///</param>
    procedure Add(component: DNIComponent; name: string); overload;
    ///<summary>
    ///  中删除来自组件 <see cref="T:System.ComponentModel.IContainer" />
    ///  。
    ///</summary>
    ///  <param name="component">
    ///  要移除的 <see cref="T:System.ComponentModel.IComponent" />
    ///  。
    ///</param>
    procedure Remove(component: DNIComponent);

  { propertys } 

    ///<summary>
    ///  获取所有组件中 <see cref="T:System.ComponentModel.IContainer" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一套 <see cref="T:System.ComponentModel.IComponent" />
    ///  代表中的所有组件的对象， <see cref="T:System.ComponentModel.IContainer" />
    ///  。
    ///</returns>
    property Components: DNComponentCollection read get_Components;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  提供一种读取结果集（通过对数据源执行命令获取）的一个或多个只进流的方法，并由访问关系数据库的.NET Framework 数据提供程序实现。
  ///</summary>
  [DNTypeName('System.Data.IDataReader')]
  DNIDataReader = interface(DDN.mscorlib.DNIDisposable)
  ['{EEF6063A-B303-370C-A350-20E70194F0B0}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;

  { methods } 

    ///<summary>
    ///  关闭 <see cref="T:System.Data.IDataReader" />
    ///  对象。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  让 <see cref="T:System.Data.IDataReader" />
    ///  前进到下一条记录。
    ///</summary>
    ///<returns>
    ///  如果存在更多行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.IDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.IDataReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  在读取一批 SQL 语句的结果时，使数据读取器前进到下一个结果。
    ///</summary>
    ///<returns>
    ///  如果存在更多行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function NextResult: Boolean;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前行的嵌套深度。
    ///</summary>
    ///<returns>
    ///  嵌套的级别。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取一个值，该值指示数据读取器是否已关闭。
    ///</summary>
    ///<returns>
    ///  如果数据读取器已关闭，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  已更改、插入或删除的行数；如果没有受影响的行或语句失败，则为 0；对于 SELECT 语句为 -1。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  提供站点所需的功能。
  ///</summary>
  [DNTypeName('System.ComponentModel.ISite')]
  DNISite = interface(DDN.mscorlib.DNIServiceProvider)
  ['{C4E1006A-9D98-3E96-A07E-921725135C28}']
  { getters & setters } 

    function get_Component: DNIComponent;
    function get_Container: DNIContainer;
    function get_DesignMode: Boolean;
    function get_Name: string;
    procedure set_Name(value: string);

  { propertys } 

    ///<summary>
    ///  获取与关联的组件 <see cref="T:System.ComponentModel.ISite" />
    ///  时由类实现。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.IComponent" />
    ///  与关联实例 <see cref="T:System.ComponentModel.ISite" />
    ///  。
    ///</returns>
    property Component: DNIComponent read get_Component;
    ///<summary>
    ///  获取 <see cref="T:System.ComponentModel.IContainer" />
    ///  与关联 <see cref="T:System.ComponentModel.ISite" />
    ///  时由类实现。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.IContainer" />
    ///  与关联实例 <see cref="T:System.ComponentModel.ISite" />
    ///  。
    ///</returns>
    property Container: DNIContainer read get_Container;
    ///<summary>
    ///  确定组件是否在设计模式下时由类实现。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该组件是在设计模式下;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property DesignMode: Boolean read get_DesignMode;
    ///<summary>
    ///  获取或设置与关联的组件的名称 <see cref="T:System.ComponentModel.ISite" />
    ///  时由类实现。
    ///</summary>
    ///<returns>
    ///  与关联的组件的名称 <see cref="T:System.ComponentModel.ISite" />
    ///  ; 或 <see langword="null" />
    ///  , ，如果没有名称分配给该组件。
    ///</returns>
    property Name: string read get_Name write set_Name;
  end;

  //-------------namespace: System.Data.Common----------------
  DNDbCommandClass = interface(DNObjectClass)
  ['{E455D831-9C37-5B53-9804-FD467C53D206}']
  end;

  ///<summary>
  ///  表示要对数据源执行的 SQL 语句或存储过程。
  ///  提供表示命令的数据库特定类的基类。
  ///<see cref="Overload:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />
  ///</summary>
  [DNTypeName('System.Data.Common.DbCommand')]
  DNDbCommand = interface(DNObject)
  ['{00E5A1B0-8B83-3CF0-B5EC-EE6EDC19D2D2}']
  { getters & setters } 

    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Transaction: DNDbTransaction;
    procedure set_Transaction(value: DNDbTransaction);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  尝试取消执行 <see cref="T:System.Data.Common.DbCommand" />
    ///  。
    ///</summary>
    procedure Cancel;
    ///<summary>
    ///  执行 SQL 语句对连接对象。
    ///</summary>
    ///<returns>
    ///  受影响的行数。
    ///</returns>
    function ExecuteNonQuery: Int32;
    ///<summary>
    ///  执行 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  , ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</returns>
    function ExecuteReader: DNDbDataReader;
    ///<summary>
    ///  执行查询并返回第一行的第一列中由查询返回的结果集。
    ///  忽略所有其他列和行。
    ///</summary>
    ///<returns>
    ///  在结果中的第一行的第一列设置。
    ///</returns>
    function ExecuteScalar: DDN.mscorlib.DNObject;
    ///<summary>
    ///  在数据源上创建命令的已准备好 （或已编译） 版本。
    ///</summary>
    procedure Prepare;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置要对数据源运行的文本命令。
    ///</summary>
    ///<returns>
    ///  要执行的文本命令。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property CommandText: string read get_CommandText write set_CommandText;
    ///<summary>
    ///  获取或设置在终止尝试执行命令并生成错误之前的等待时间。
    ///</summary>
    ///<returns>
    ///  等待命令执行所需的时间（以秒为单位）。
    ///</returns>
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    ///<summary>
    ///  获取或设置一个值，该值指示命令对象是否应在一个自定义的界面控件中可见。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果命令对象应会显示在控件;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Common.DbTransaction" />
    ///  中此 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象执行。
    ///</summary>
    ///<returns>
    ///  在其中事务 <see langword="Command" />
    ///  对象的.NET Framework 数据提供程序执行。
    ///  默认值为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</returns>
    property Transaction: DNDbTransaction read get_Transaction write set_Transaction;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNDbCommand = class(TDNGenericImport<DNDbCommandClass, DNDbCommand>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbCommandClass = interface(DNDbCommandClass)
  ['{3A2CB0B2-4101-5FB1-87AD-B7F8BD8CBEC5}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOleDbCommand; overload;
    ///<summary>
    ///  使用查询的文本初始化 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    {class} function init(cmdText: string): DNOleDbCommand; overload;
    ///<summary>
    ///  使用查询的文本和 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection">
    ///  表示到数据源的连接的 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</param>
    {class} function init(cmdText: string; connection: DNOleDbConnection): DNOleDbCommand; overload;
    ///<summary>
    ///  使用查询文本、<see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  以及 <see cref="P:System.Data.OleDb.OleDbCommand.Transaction" />
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection">
    ///  表示到数据源的连接的 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</param>
    ///  <param name="transaction"><see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  在其中执行的事务。
    ///</param>
    {class} function init(cmdText: string; connection: DNOleDbConnection; transaction: DNOleDbTransaction): DNOleDbCommand; overload;

  end;

  ///<summary>
  ///  表示要对数据源执行的 SQL 语句或存储过程。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbCommand')]
  DNOleDbCommand = interface(DNDbCommand)
  ['{8297BC84-C7C9-3FF2-82F8-076658B9225A}']
  { getters & setters } 

    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_Connection: DNOleDbConnection;
    procedure set_Connection(value: DNOleDbConnection);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Transaction: DNOleDbTransaction;
    procedure set_Transaction(value: DNOleDbTransaction);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  重置 <see cref="P:System.Data.OleDb.OleDbCommand.CommandTimeout" />
    ///  属性设置为默认值。
    ///</summary>
    procedure ResetCommandTimeout;
    ///<summary>
    ///  尝试取消执行 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  。
    ///</summary>
    procedure Cancel;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象，它是当前实例的副本。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象，它是此实例的副本。
    ///</returns>
    function Clone: DNOleDbCommand;
    ///<summary>
    ///  将发送 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" />
    ///  到 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  并生成 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。
    ///</exception>
    function ExecuteReader: DNOleDbDataReader;
    ///<summary>
    ///  执行 SQL 语句针对 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  ，并返回受影响的行数。
    ///</summary>
    ///<returns>
    ///  受影响的行数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该连接不存在。
    ///  - 或 -
    ///  连接未打开。
    ///  - 或 -
    ///  无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。
    ///</exception>
    function ExecuteNonQuery: Int32;
    ///<summary>
    ///  执行查询，并返回由查询返回的结果集中的第一行的第一列。
    ///  其他列或行将被忽略。
    ///</summary>
    ///<returns>
    ///  在结果中的第一行的第一列设置，或为 null 引用的结果集是否为空。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。
    ///</exception>
    function ExecuteScalar: DDN.mscorlib.DNObject;
    ///<summary>
    ///  在数据源上创建命令的已准备好 （或已编译） 版本。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  未设置。
    ///  - 或 -
    ///<see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  未打开。
    ///</exception>
    procedure Prepare;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 SQL 语句或存储的过程以在数据源中执行。
    ///</summary>
    ///<returns>
    ///  SQL 语句或执行存储的过程。
    ///  默认值为一个空字符串。
    ///</returns>
    property CommandText: string read get_CommandText write set_CommandText;
    ///<summary>
    ///  获取或设置在终止尝试执行命令并生成错误之前的等待时间。
    ///</summary>
    ///<returns>
    ///  时间 （以秒为单位） 以等待要执行的命令。
    ///  默认值为 30 秒。
    ///</returns>
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  的此实例使用的 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  到数据源的连接。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  属性在事务执行过程中发生了更改。
    ///</exception>
    property Connection: DNOleDbConnection read get_Connection write set_Connection;
    ///<summary>
    ///  获取或设置一个值，该值指示命令对象是否应在自定义 Windows 窗体设计器控件中可见。
    ///</summary>
    ///<returns>
    ///  一个指示命令对象在控件中是否应该可见的值。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    ///<summary>
    ///  获取或设置要在其中执行 <see cref="T:System.Data.OleDb.OleDbTransaction" />
    ///  的 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.OleDb.OleDbTransaction" />
    ///  。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Transaction: DNOleDbTransaction read get_Transaction write set_Transaction;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNOleDbCommand = class(TDNGenericImport<DNOleDbCommandClass, DNOleDbCommand>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlCommandClass = interface(DNDbCommandClass)
  ['{CC985FF6-C9B0-52BF-902E-E57FAEBF1EAC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlCommand; overload;
    ///<summary>
    ///  使用查询的文本初始化 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    {class} function init(cmdText: string): DNSqlCommand; overload;
    ///<summary>
    ///  使用查询的文本和 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection">
    ///  表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///</param>
    {class} function init(cmdText: string; connection: DNSqlConnection): DNSqlCommand; overload;
    ///<summary>
    ///  使用查询文本、<see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  以及 <see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection">
    ///  表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///</param>
    ///  <param name="transaction">
    ///  其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  的 <see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  。
    ///</param>
    {class} function init(cmdText: string; connection: DNSqlConnection; transaction: DNSqlTransaction): DNSqlCommand; overload;

  end;

  ///<summary>
  ///  表示要对 SQL Server 数据库执行的一个 Transact-SQL 语句或存储过程。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlCommand')]
  DNSqlCommand = interface(DNDbCommand)
  ['{227D56B1-F0A1-3A78-BCE9-3C145295413D}']
  { getters & setters } 

    function get_Connection: DNSqlConnection;
    procedure set_Connection(value: DNSqlConnection);
    function get_NotificationAutoEnlist: Boolean;
    procedure set_NotificationAutoEnlist(value: Boolean);
    function get_Transaction: DNSqlTransaction;
    procedure set_Transaction(value: DNSqlTransaction);
    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
    ///  属性重置为其默认值。
    ///</summary>
    procedure ResetCommandTimeout;
    ///<summary>
    ///  在 SQL Server 的实例上创建命令的一个准备版本。
    ///</summary>
    procedure Prepare;
    ///<summary>
    ///  尝试取消 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  的执行。
    ///</summary>
    procedure Cancel;
    ///<summary>
    ///  执行查询，并返回由查询返回的结果集中的第一行的第一列。
    ///  其他列或行将被忽略。
    ///</summary>
    ///<returns>
    ///  为结果集中的第一行的第一列，或者，如果结果集为空，则为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///  返回的最大字符数为 2033 个字符。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  对锁定的行执行命令时出现异常。
    ///  当使用 Microsoft .NET Framework 1.0 版时不生成此异常。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteScalar: DDN.mscorlib.DNObject;
    ///<summary>
    ///  对连接执行 Transact-SQL 语句并返回受影响的行数。
    ///</summary>
    ///<returns>
    ///  受影响的行数。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  对锁定的行执行命令时出现异常。
    ///  当使用 Microsoft .NET Framework 1.0 版时不生成此异常。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteNonQuery: Int32;
    ///<summary>
    ///  启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行。
    ///</summary>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用可返回受影响的行数的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
    ///  时，也需要该值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteNonQuery: DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  在给定回调过程和状态信息的情况下，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行。
    ///</summary>
    ///  <param name="callback">
    ///  命令执行完成时调用的 <see cref="T:System.AsyncCallback" />
    ///  委托。
    ///  传递 <see langword="null" />
    ///  （在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）以指示不需要回调。
    ///</param>
    ///  <param name="stateObject">
    ///  传递到回调过程的用户定义的状态对象。
    ///  使用 <see cref="P:System.IAsyncResult.AsyncState" />
    ///  属性从回调过程内检索此对象。
    ///</param>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用可返回受影响的行数的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
    ///  时，也需要该值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteNonQuery(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  完成 Transact-SQL 语句的异步执行。
    ///</summary>
    ///  <param name="asyncResult">
    ///  通过调用 <see cref="T:System.IAsyncResult" />
    ///  返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
    ///  。
    ///</param>
    ///<returns>
    ///  受影响的行数（与 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />
    ///  相同的行为）。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  参数为 null（在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
    ///  ，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
    ///  以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />
    ///  调用的执行。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException"><see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
    ///  中指定的时间已过，并且使用 <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
    ///  指定的异步操作不完整。
    ///  在某些情况下，<see cref="T:System.IAsyncResult" />
    ///  可能不正确地设置为 <see langword="IsCompleted" />
    ///  。
    ///  如果发生这种情况并且调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
    ///  ，则 EndExecuteNonQuery 可能引发 SqlException 错误（如果 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
    ///  中指定的时间已过，并且使用 <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
    ///  指定的异步操作不完整）。
    ///  若要更正这种情况，应增加 CommandTimeout 的值或减少正由异步操作完成的工作。
    ///</exception>
    function EndExecuteNonQuery(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    ///<summary>
    ///  将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并生成一个 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  对锁定的行执行命令时出现异常。
    ///  当使用 Microsoft .NET Framework 1.0 版时不生成此异常。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteXmlReader: DNXmlReader;
    ///<summary>
    ///  启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" />
    ///  对象返回。
    ///</summary>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用会返回单个 XML 值的 <see langword="EndExecuteXmlReader" />
    ///  时，也需要该值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteXmlReader: DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  通过使用回调过程，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" />
    ///  对象返回。
    ///</summary>
    ///  <param name="callback">
    ///  命令执行完成时调用的 <see cref="T:System.AsyncCallback" />
    ///  委托。
    ///  传递 <see langword="null" />
    ///  （在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）以指示不需要回调。
    ///</param>
    ///  <param name="stateObject">
    ///  传递到回调过程的用户定义的状态对象。
    ///  使用 <see cref="P:System.IAsyncResult.AsyncState" />
    ///  属性从回调过程内检索此对象。
    ///</param>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
    ///  时，也需要该值，用于将命令的结果作为 XML 返回。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteXmlReader(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  完成 Transact-SQL 语句的异步执行，从而将请求的数据以 XML 形式返回。
    ///</summary>
    ///  <param name="asyncResult">
    ///  通过调用 <see cref="T:System.IAsyncResult" />
    ///  返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  可用于获取生成的 XML 数据的 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  参数为 null（在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
    ///  ，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
    ///  以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
    ///  调用的执行。
    ///</exception>
    function EndExecuteXmlReader(asyncResult: DDN.mscorlib.DNIAsyncResult): DNXmlReader;
    ///<summary>
    ///  启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。
    ///</summary>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；在调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
    ///  时，也需要该值。该调用会返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  实例。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteReader: DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  在给定回调过程和状态信息的情况下，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。
    ///</summary>
    ///  <param name="callback">
    ///  命令执行完成时调用的 <see cref="T:System.AsyncCallback" />
    ///  委托。
    ///  传递 <see langword="null" />
    ///  （在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）以指示不需要回调。
    ///</param>
    ///  <param name="stateObject">
    ///  传递到回调过程的用户定义的状态对象。
    ///  使用 <see cref="P:System.IAsyncResult.AsyncState" />
    ///  属性从回调过程内检索此对象。
    ///</param>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用会返回可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  实例的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
    ///  时，也需要该值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteReader(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  对锁定的行执行命令时出现异常。
    ///  当使用 Microsoft .NET Framework 1.0 版时不生成此异常。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  连接的当前状态已关闭。
    ///<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />
    ///  需要打开 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteReader: DNSqlDataReader;
    ///<summary>
    ///  完成 Transact-SQL 语句的异步执行，从而返回请求的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</summary>
    ///  <param name="asyncResult">
    ///  通过调用 <see cref="T:System.IAsyncResult" />
    ///  返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  可用于检索请求行的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  参数为 null（在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
    ///  ，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
    ///  以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />
    ///  调用的执行。
    ///</exception>
    function EndExecuteReader(asyncResult: DDN.mscorlib.DNIAsyncResult): DNSqlDataReader;
    ///<summary>
    ///  创建属于当前实例的副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  属于此实例副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象。
    ///</returns>
    function Clone: DNSqlCommand;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  的此实例使用的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  到数据源的连接。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  命令在事务中登记时 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  属性被更改。
    ///</exception>
    property Connection: DNSqlConnection read get_Connection write set_Connection;
    ///<summary>
    ///  获取或设置一个值，该值指示应用程序是否应自动接收来自通用 <see cref="T:System.Data.SqlClient.SqlDependency" />
    ///  对象的查询通知。
    ///</summary>
    ///<returns>
    ///  如果应用程序应自动接收查询通知，则为 true；否则为 false。
    ///  默认值为 true。
    ///</returns>
    property NotificationAutoEnlist: Boolean read get_NotificationAutoEnlist write set_NotificationAutoEnlist;
    ///<summary>
    ///  获取或设置要在其中执行 <see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  的 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Transaction: DNSqlTransaction read get_Transaction write set_Transaction;
    ///<summary>
    ///  获取或设置要在数据源中执行的 Transact-SQL 语句、表名或存储过程。
    ///</summary>
    ///<returns>
    ///  要执行的 Transact-SQL 语句或存储过程。
    ///  默认值为一个空字符串。
    ///</returns>
    property CommandText: string read get_CommandText write set_CommandText;
    ///<summary>
    ///  获取或设置在终止尝试执行命令并生成错误之前的等待时间。
    ///</summary>
    ///<returns>
    ///  等待命令执行所需的时间（以秒为单位）。
    ///  默认值为 30 秒。
    ///</returns>
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    ///<summary>
    ///  获取或设置一个值，该值指示命令对象是否应在 Windows 窗体设计器控件中可见。
    ///</summary>
    ///<returns>
    ///  一个指示命令对象是否应在控件中可见的值。
    ///  默认值为 true。
    ///</returns>
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNSqlCommand = class(TDNGenericImport<DNSqlCommandClass, DNSqlCommand>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbConnectionClass = interface(DNObjectClass)
  ['{047A5A0F-EEC5-51A7-99FD-069EDB7AB0A5}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  类，具有指定的连接字符串。
    ///</summary>
    ///  <param name="connectionString">
    ///  用于打开数据库的连接。
    ///</param>
    {class} function init(connectionString: string): DNOleDbConnection; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOleDbConnection; overload;

  { static methods } 

    ///<summary>
    ///  指示 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  对象池可以释放最后一个基础连接时释放。
    ///</summary>
    {class} procedure ReleaseObjectPool;

  end;

  ///<summary>
  ///  表示与数据源的开放连接。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbConnection')]
  DNOleDbConnection = interface(DNObject)
  ['{FF833BE1-7559-39E3-8101-632D1EFCE029}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_DataSource: string;
    function get_Provider: string;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_InfoMessage(value: DNOleDbInfoMessageEventHandler);
    procedure remove_InfoMessage(value: DNOleDbInfoMessageEventHandler);
    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  关闭与数据源的连接。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema: DNDataTable; overload;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  使用架构名称指定的字符串。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。 </param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema(collectionName: string): DNDataTable; overload;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  架构名称和指定的字符串数组的限制值使用指定的字符串。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。
    ///</param>
    ///  <param name="restrictionValues">
    ///  指定一组请求的架构的限制值。
    ///</param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    ///<summary>
    ///  更新 <see cref="P:System.Data.OleDb.OleDbConnection.State" />
    ///  属性 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  对象。
    ///</summary>
    procedure ResetState;
    ///<summary>
    ///  开始数据库事务与当前 <see cref="T:System.Data.IsolationLevel" />
    ///  值。
    ///</summary>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction: DNOleDbTransaction; overload;
    ///<summary>
    ///  以指定的隔离级别启动数据库事务。
    ///</summary>
    ///  <param name="isolationLevel">
    ///  事务应在其下运行的隔离级别。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction(isolationLevel: DNIsolationLevel): DNOleDbTransaction; overload;
    ///<summary>
    ///  更改已打开的 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  的当前数据库。
    ///</summary>
    ///  <param name="value">
    ///  数据库名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  数据库名称无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  连接未打开。
    ///</exception><exception cref="T:System.Data.OleDb.OleDbException">
    ///  不能更改数据库。
    ///</exception>
    procedure ChangeDatabase(value: string);
    ///<summary>
    ///  创建并返回 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  与关联对象 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象。
    ///</returns>
    function CreateCommand: DNOleDbCommand;
    ///<summary>
    ///  在指定的事务中登记为分布式事务。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  的引用。
    ///</param>
    procedure EnlistDistributedTransaction(transaction: DNITransaction);
    ///<summary>
    ///  由一个 GUID，并在应用指定的限制之后，请从数据源返回架构信息。
    ///</summary>
    ///  <param name="schema">
    ///  其中一个 <see cref="T:System.Data.OleDb.OleDbSchemaGuid" />
    ///  值，该值指定要返回的架构表。
    ///</param>
    ///  <param name="restrictions"><see cref="T:System.Object" />
    ///  限制值的数组。
    ///  这些适用的限制列的顺序。
    ///  也就是说，适用于第一个限制列的第一个限制值，第二个限制值应用到的第二个限制列中，依次类推。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  包含请求的架构信息。
    ///</returns>
    ///<exception cref="T:System.Data.OleDb.OleDbException">
    ///  指定的限制集是无效的。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  已关闭。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  OLE DB 访问接口不支持指定的架构行集。
    ///  - 或 -
    ///  <paramref name="schema" />
    ///  参数包含的值 <see cref="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals" />
    ///  和 <paramref name="restrictions" />
    ///  参数包含一个或多个限制。
    ///</exception>
    function GetOleDbSchemaTable(schema: DDN.mscorlib.DNGuid; restrictions: TArray<DDN.mscorlib.DNObject>): DNDataTable;
    ///<summary>
    ///  使用指定的属性设置打开数据库连接 <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接已打开。
    ///</exception><exception cref="T:System.Data.OleDb.OleDbException">
    ///  打开连接时出现的连接级别错误。
    ///</exception>
    procedure Open;
    ///<summary>
    ///  在指定的事务中登记为分布式事务。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.Transactions.Transaction" />
    ///  的引用。
    ///</param>
    procedure EnlistTransaction(transaction: DNTransaction);
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  , ，用于打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />
    ///  。
    ///  此方法调用虚方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function OpenAsync: DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  （可选） 可以接受取消标记。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  调用并返回已完成的任务。
    ///  如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。
    ///  打开由引发的异常将通过返回的任务异常属性进行通信。
    ///  不调用其他方法和属性的 <see langword="DbConnection" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function OpenAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置用于打数据库的字符串。
    ///</summary>
    ///<returns>
    ///  OLE DB 提供程序连接字符串中包含数据源名称和建立初始连接所需的其他参数。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  提供了无效的连接字符串参数或尚未提供所需的连接字符串参数。
    ///</exception>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。
    ///</summary>
    ///<returns>
    ///  以秒为单位时要等待连接打开的时间。
    ///  默认值为 15 秒。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值小于 0。
    ///</exception>
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    ///<summary>
    ///  获取当前数据库的名称或打开连接后要使用的数据库的名称。
    ///</summary>
    ///<returns>
    ///  当前数据库的名称或打开连接后要使用的数据库的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property Database: string read get_Database;
    ///<summary>
    ///  获取服务器名称或数据源的文件名。
    ///</summary>
    ///<returns>
    ///  服务器名称或数据源的文件名。
    ///  默认值为一个空字符串。
    ///</returns>
    property DataSource: string read get_DataSource;
    ///<summary>
    ///  获取在指定的 OLE DB 提供程序的名称"提供程序 ="连接字符串的子句。
    ///</summary>
    ///<returns>
    ///  在指定的提供程序的名称"提供程序 ="连接字符串的子句。
    ///  默认值为一个空字符串。
    ///</returns>
    property Provider: string read get_Provider;
    ///<summary>
    ///  获取一个字符串，包含客户端连接到服务器的版本。
    ///</summary>
    ///<returns>
    ///  已连接的服务器的版本。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接已关闭。
    ///</exception>
    property ServerVersion: string read get_ServerVersion;
    ///<summary>
    ///  获取连接的当前状态。
    ///</summary>
    ///<returns><see cref="T:System.Data.ConnectionState" />
    ///  值的按位组合。
    ///  默认值已关闭。
    ///</returns>
    property State: DNConnectionState read get_State;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNOleDbConnection = class(TDNGenericImport<DNOleDbConnectionClass, DNOleDbConnection>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlConnectionClass = interface(DNObjectClass)
  ['{C469825F-AD4F-5E6A-A8BD-F229AF9A0051}']
  { static getter & setter } 

    {class} function get_ColumnEncryptionTrustedMasterKeyPaths: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNIList<string>>;
    {class} function get_ColumnEncryptionQueryMetadataCacheEnabled: Boolean;
    {class} procedure set_ColumnEncryptionQueryMetadataCacheEnabled(value: Boolean);
    {class} function get_ColumnEncryptionKeyCacheTtl: DDN.mscorlib.DNTimeSpan;
    {class} procedure set_ColumnEncryptionKeyCacheTtl(value: DDN.mscorlib.DNTimeSpan);

  { constructors } 

    ///<summary>
    ///  如果给定包含连接字符串的字符串，则初始化 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="connectionString">
    ///  用于打开 SQL Server 数据库的连接。
    ///</param>
    {class} function init(connectionString: string): DNSqlConnection; overload;
    ///<summary>
    ///  在给定连接字符串的情况下，初始化 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  类的新实例，该连接字符串不使用 <see langword="Integrated Security = true" />
    ///  和包含用户 ID 和密码的 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</summary>
    ///  <param name="connectionString">
    ///  不使用 <see langword="ContextConnection = true" />
    ///  或以下任何连接字符串关键字的连接字符串：<see langword="Integrated Security = true" />
    ///  、<see langword="UserId" />
    ///  或 <see langword="Password" />
    ///  。
    ///</param>
    ///  <param name="credential">
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///  如果 <paramref name="credential" />
    ///  为 null，则 <see cref="M:System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)" />
    ///  在功能上等效于 <see cref="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)" />
    ///  。
    ///</param>
    {class} function init(connectionString: string; credential: DNSqlCredential): DNSqlConnection; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlConnection; overload;

  { static methods } 

    ///<summary>
    ///  清空连接池。
    ///</summary>
    {class} procedure ClearAllPools;
    {class} procedure RegisterColumnEncryptionKeyStoreProviders(customProviders: DDN.mscorlib.DNIDictionary<string, DNSqlColumnEncryptionKeyStoreProvider>);
    ///<summary>
    ///  清空与指定连接关联的连接池。
    ///</summary>
    ///  <param name="connection">
    ///  要从池中清除的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///</param>
    {class} procedure ClearPool(connection: DNSqlConnection);
    ///<summary>
    ///  将连接字符串中指示的用户的 SQL Server 密码更改为提供的新密码。
    ///</summary>
    ///  <param name="connectionString">
    ///  包含连接至所需服务器的足够信息的连接字符串。
    ///  连接字符串必须包含用户 ID 和当前密码。
    ///</param>
    ///  <param name="newPassword">
    ///  要设置的新密码。
    ///  此密码必须符合服务器上设置的任何密码安全策略，包括最小长度、特定字符要求等等。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  连接字符串包括将使用集成安全性的选项。
    ///  Or
    ///  <paramref name="newPassword" />
    ///  超过了 128 个字符。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="connectionString" />
    ///  或 <paramref name="newPassword" />
    ///  参数为 null。
    ///</exception>
    {class} procedure ChangePassword(connectionString: string; newPassword: string); overload;
    ///<summary>
    ///  更改 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象中指示的用户的 SQL Server 密码。
    ///</summary>
    ///  <param name="connectionString">
    ///  包含连接至服务器的足够信息的连接字符串。
    ///  连接字符串不应使用以下任何一个连接字符串关键字：<see langword="Integrated Security = true" />
    ///  、<see langword="UserId" />
    ///  或 <see langword="Password" />
    ///  ；或 <see langword="ContextConnection = true" />
    ///  。
    ///</param>
    ///  <param name="credential">
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</param>
    ///  <param name="newSecurePassword">
    ///  新密码。
    ///  <paramref name="newSecurePassword" />
    ///  必须为只读。
    ///  该密码也必须符合服务器上设置的任何密码安全策略（例如：最小长度、特定字符要求）。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  连接字符串包含的任意组合 <see langword="UserId" />
    ///  , ，<see langword="Password" />
    ///  , ，或 <see langword="Integrated Security=true" />
    ///  。
    ///  连接字符串包含 <see langword="Context Connection=true" />
    ///  。
    ///  <paramref name="newSecurePassword" />
    ///  大于 128 个字符。
    ///  <paramref name="newSecurePassword" />
    ///  不是只读。
    ///  <paramref name="newSecurePassword" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  其中一个参数（<paramref name="connectionString" />
    ///  、<paramref name="credential" />
    ///  或 <paramref name="newSecurePassword" />
    ///  ）为 null。
    ///</exception>
    {class} procedure ChangePassword(connectionString: string; credential: DNSqlCredential; newSecurePassword: DDN.mscorlib.DNSecureString); overload;

  { static propertys } 

    ///<summary>
    ///  允许你设置数据库服务器的受信任密钥路径列表。
    ///  如果在处理应用程序查询时驱动程序接收到不位于列表中的密钥路径，则查询会失败。
    ///  此属性针对安全攻击提供附加保护，这些安全攻击涉及提供伪造密钥路径的受威胁的 SQL Server，可能导致密钥存储凭据泄露。
    ///</summary>
    ///<returns>
    ///  适用于列加密的受信任主密钥路径的列表。
    ///</returns>
    {class} property ColumnEncryptionTrustedMasterKeyPaths: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNIList<string>> read get_ColumnEncryptionTrustedMasterKeyPaths;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用查询元数据缓存 (true) 或不针对运行参数化查询的 (false) Always Encrypted启用了数据库。
    ///  默认值为 true。
    ///</summary>
    ///<returns>
    ///  如果启用查询元数据缓存，则返回 True；否则返回 False。
    ///  默认为 True。
    ///</returns>
    {class} property ColumnEncryptionQueryMetadataCacheEnabled: Boolean read get_ColumnEncryptionQueryMetadataCacheEnabled write set_ColumnEncryptionQueryMetadataCacheEnabled;
    ///<summary>
    ///  获取或设置的生存时间的列加密密钥条目的列加密密钥缓存中为Always Encrypted功能。
    ///  默认值为 2 小时。
    ///  0 表示无缓存。
    ///</summary>
    ///<returns>
    ///  时间间隔。
    ///</returns>
    {class} property ColumnEncryptionKeyCacheTtl: DDN.mscorlib.DNTimeSpan read get_ColumnEncryptionKeyCacheTtl write set_ColumnEncryptionKeyCacheTtl;
  end;

  ///<summary>
  ///  表示到 SQL Server 数据库的打开连接。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlConnection')]
  DNSqlConnection = interface(DNObject)
  ['{F8C85934-FC42-3A0A-AB23-EBA6D5B37B8A}']
  { getters & setters } 

    function get_StatisticsEnabled: Boolean;
    procedure set_StatisticsEnabled(value: Boolean);
    function get_AccessToken: string;
    procedure set_AccessToken(value: string);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_DataSource: string;
    function get_PacketSize: Int32;
    function get_ClientConnectionId: DDN.mscorlib.DNGuid;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_WorkstationId: string;
    function get_Credential: DNSqlCredential;
    procedure set_Credential(value: DNSqlCredential);
    function get_FireInfoMessageEventOnUserErrors: Boolean;
    procedure set_FireInfoMessageEventOnUserErrors(value: Boolean);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_InfoMessage(value: DNSqlInfoMessageEventHandler);
    procedure remove_InfoMessage(value: DNSqlInfoMessageEventHandler);
    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关方案的详细信息，请参阅 SQL Server Schema Collections。
    ///</summary>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema: DNDataTable; overload;
    ///<summary>
    ///  通过使用架构名称的指定字符串，返回此 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  的数据源的架构信息。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。
    ///</param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  将 <paramref name="collectionName" />
    ///  指定为 null。
    ///</exception>
    function GetSchema(collectionName: string): DNDataTable; overload;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  架构名称和指定的字符串数组的限制值使用指定的字符串。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。
    ///</param>
    ///  <param name="restrictionValues">
    ///  请求的架构的一组限制值。
    ///</param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  将 <paramref name="collectionName" />
    ///  指定为 null。
    ///</exception>
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    ///<summary>
    ///  开始数据库事务。
    ///</summary>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  使用多个活动结果集 (MARS) 时，不允许并行事务。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction: DNSqlTransaction; overload;
    ///<summary>
    ///  以指定的隔离级别启动数据库事务。
    ///</summary>
    ///  <param name="iso">
    ///  事务应在其下运行的隔离级别。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  使用多个活动结果集 (MARS) 时，不允许并行事务。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction(iso: DNIsolationLevel): DNSqlTransaction; overload;
    ///<summary>
    ///  以指定的事务名称启动数据库事务。
    ///</summary>
    ///  <param name="transactionName">
    ///  事务名称。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  使用多个活动结果集 (MARS) 时，不允许并行事务。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction(transactionName: string): DNSqlTransaction; overload;
    ///<summary>
    ///  以指定的隔离级别和事务名称启动数据库事务。
    ///</summary>
    ///  <param name="iso">
    ///  事务应在其下运行的隔离级别。
    ///</param>
    ///  <param name="transactionName">
    ///  事务名称。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  使用多个活动结果集 (MARS) 时，不允许并行事务。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction(iso: DNIsolationLevel; transactionName: string): DNSqlTransaction; overload;
    ///<summary>
    ///  更改已打开的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  的当前数据库。
    ///</summary>
    ///  <param name="database">
    ///  要代替当前数据库加以使用的数据库的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  数据库名称无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  连接未打开。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  不能更改数据库。
    ///</exception>
    procedure ChangeDatabase(database: string);
    ///<summary>
    ///  关闭与数据库之间的连接。
    ///  此方法是关闭任何打开连接的首选方法。
    ///</summary>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  打开连接时出现的连接级别的错误。
    ///</exception>
    procedure Close;
    ///<summary>
    ///  创建并返回与 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  关联的 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象。
    ///</returns>
    function CreateCommand: DNSqlCommand;
    ///<summary>
    ///  在指定的事务中登记为分布式事务。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  的引用。
    ///</param>
    procedure EnlistDistributedTransaction(transaction: DNITransaction);
    ///<summary>
    ///  使用由 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
    ///  指定的属性设置打开一个数据库连接。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  如果不指定数据源或服务器，则无法打开连接。
    ///  或
    ///  连接已打开。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  打开连接时出现的连接级别错误。
    ///  如果 <see cref="P:System.Data.SqlClient.SqlException.Number" />
    ///  属性包含值 18487 或 18488，这表明指定的密码已过期或必须重置。
    ///  有关更多信息，请参阅 <see cref="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" />
    ///  方法。
    ///  App.config 文件中的 <see langword="&lt;system.data.localdb&gt;" />
    ///  标记具有无效或未知元素。
    ///</exception><exception cref="T:System.Configuration.ConfigurationErrorsException"><see langword="&lt;localdbinstances&gt;" />
    ///  部分中有两个具有相同名称的条目。
    ///</exception>
    procedure Open;
    ///<summary><see cref="M:System.Data.SqlClient.SqlConnection.Open" />
    ///  的异步版本，打开 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
    ///  指定的属性设置的数据库连接。
    ///  取消标记可用于请求在连接超时超过前放弃操作。
    ///  异常将通过返回的任务传播。
    ///  如果在未成功连接的情况下连接超时时间已过，则返回的任务将被标记为“附带异常出错”。
    ///  实现返回一个不带有用于共用和非共用连接的锁定调用线程的“任务”。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />
    ///  。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///  在经过连接超时时间之前从连接池中的连接不可用。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  打开连接时出现的任何由 SQL Server 返回的错误。
    ///</exception>
    function OpenAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  如果启用了统计信息收集，所有值都将重置为零。
    ///</summary>
    procedure ResetStatistics;
    ///<summary>
    ///  调用此方法时，将返回统计信息的名称值对集合。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Collections.DictionaryEntry" />
    ///  项的 <see cref="T:System.Collections.IDictionary" />
    ///  类型的引用。
    ///</returns>
    function RetrieveStatistics: DDN.mscorlib.DNIDictionary;
    ///<summary>
    ///  在指定的事务中登记为分布式事务。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.Transactions.Transaction" />
    ///  的引用。
    ///</param>
    procedure EnlistTransaction(transaction: DNTransaction);
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  , ，用于打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />
    ///  。
    ///  此方法调用虚方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function OpenAsync: DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  如果设置为 <see langword="true" />
    ///  ，则对当前连接启用统计信息收集。
    ///</summary>
    ///<returns>
    ///  如果启用了统计信息收集，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  默认为 <see langword="false" />
    ///  。
    ///</returns>
    property StatisticsEnabled: Boolean read get_StatisticsEnabled write set_StatisticsEnabled;
    ///<summary>
    ///  获取或设置用于连接的访问令牌。
    ///</summary>
    ///<returns>
    ///  用于连接的访问令牌。
    ///</returns>
    property AccessToken: string read get_AccessToken write set_AccessToken;
    ///<summary>
    ///  获取或设置用于打开 SQL Server 数据库的字符串。
    ///</summary>
    ///<returns>
    ///  连接字符串，其中包含源数据库名称和建立初始连接所需的其他参数。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  提供了一个无效的连接字符串参数，或者未提供所需的连接字符串参数。
    ///</exception>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。
    ///</summary>
    ///<returns>
    ///  等待连接打开所需的时间（以秒为单位）。
    ///  默认值为 15 秒。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值小于 0。
    ///</exception>
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    ///<summary>
    ///  获取当前数据库的名称或打开连接后要使用的数据库的名称。
    ///</summary>
    ///<returns>
    ///  当前数据库的名称或打开连接后要使用的数据库的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property Database: string read get_Database;
    ///<summary>
    ///  获取要连接的 SQL Server 的实例的名称。
    ///</summary>
    ///<returns>
    ///  要连接的 SQL Server 的实例的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property DataSource: string read get_DataSource;
    ///<summary>
    ///  获取用于与 SQL Server 的实例进行通信的网络数据包的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  网络数据包的大小（以字节为单位）。
    ///  默认值为 8000。
    ///</returns>
    property PacketSize: Int32 read get_PacketSize;
    ///<summary>
    ///  最近连接尝试连接的 ID，无论该尝试是成功还是失败。
    ///</summary>
    ///<returns>
    ///  最近连接尝试的连接 ID。
    ///</returns>
    property ClientConnectionId: DDN.mscorlib.DNGuid read get_ClientConnectionId;
    ///<summary>
    ///  获取一个字符串，该字符串包含客户端所连接到的 SQL Server 的实例的版本。
    ///</summary>
    ///<returns>
    ///  SQL Server 的实例的版本。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接已关闭。
    ///  当返回的任务未完成，且在调用 <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />
    ///  后未打开连接时，调用了 <see cref="P:System.Data.SqlClient.SqlConnection.ServerVersion" />
    ///  。
    ///</exception>
    property ServerVersion: string read get_ServerVersion;
    ///<summary>
    ///  最近在连接上执行网络操作时表示 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  的状态。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.ConnectionState" />
    ///  枚举。
    ///</returns>
    property State: DNConnectionState read get_State;
    ///<summary>
    ///  获取一个标识数据库客户端的字符串。
    ///</summary>
    ///<returns>
    ///  一个标识数据库客户端的字符串。
    ///  如果未指定，则为客户端计算机的名称。
    ///  如果两个都没有指定，则值为空字符串。
    ///</returns>
    property WorkstationId: string read get_WorkstationId;
    ///<summary>
    ///  获取或设置此连接的 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  此连接的 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</returns>
    property Credential: DNSqlCredential read get_Credential write set_Credential;
    ///<summary>
    ///  获取或设置 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  如果已设置了 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />
    ///  属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property FireInfoMessageEventOnUserErrors: Boolean read get_FireInfoMessageEventOnUserErrors write set_FireInfoMessageEventOnUserErrors;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNSqlConnection = class(TDNGenericImport<DNSqlConnectionClass, DNSqlConnection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintDocumentClass = interface(DNObjectClass)
  ['{34BD3BB6-F9F1-504E-B7D3-3DB900132744}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPrintDocument;

  end;

  ///<summary>
  ///  从 Windows 窗体应用程序打印时，定义一种可重用的可发送到打印机上的对象。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintDocument')]
  DNPrintDocument = interface(DNObject)
  ['{9501869F-5E2A-35B6-8588-737438CB7BC8}']
  { getters & setters } 

    function get_DefaultPageSettings: DNPageSettings;
    procedure set_DefaultPageSettings(value: DNPageSettings);
    function get_DocumentName: string;
    procedure set_DocumentName(value: string);
    function get_OriginAtMargins: Boolean;
    procedure set_OriginAtMargins(value: Boolean);
    function get_PrintController: DNPrintController;
    procedure set_PrintController(value: DNPrintController);
    function get_PrinterSettings: DNPrinterSettings;
    procedure set_PrinterSettings(value: DNPrinterSettings);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_BeginPrint(value: DNPrintEventHandler);
    procedure remove_BeginPrint(value: DNPrintEventHandler);
    procedure add_EndPrint(value: DNPrintEventHandler);
    procedure remove_EndPrint(value: DNPrintEventHandler);
    procedure add_PrintPage(value: DNPrintPageEventHandler);
    procedure remove_PrintPage(value: DNPrintPageEventHandler);
    procedure add_QueryPageSettings(value: DNQueryPageSettingsEventHandler);
    procedure remove_QueryPageSettings(value: DNQueryPageSettingsEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  开始文档的打印进程。
    ///</summary>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    procedure Print;
    ///<summary>
    ///  以字符串形式提供有关打印文档的信息。
    ///</summary>
    ///<returns>
    ///  一个字符串。
    ///</returns>
    function ToString: string;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置用作要打印的所有页的默认设置的页设置。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ，它指定文档的默认页设置。
    ///</returns>
    property DefaultPageSettings: DNPageSettings read get_DefaultPageSettings write set_DefaultPageSettings;
    ///<summary>
    ///  获取或设置打印文档时要显示的文档名称（例如，在打印状态对话框或打印机队列中）。
    ///</summary>
    ///<returns>
    ///  打印文档时要显示的文档名。
    ///  默认为“文档”。
    ///</returns>
    property DocumentName: string read get_DocumentName write set_DocumentName;
    ///<summary>
    ///  获取或设置一个值，该值指示与页关联的图形对象的位置是位于用户指定边距内，还是位于该页可打印区域的左上角。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果图形原点起始于页边距; <see langword="false" />
    ///  如果图形原点位于可打印的页面的左上角。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property OriginAtMargins: Boolean read get_OriginAtMargins write set_OriginAtMargins;
    ///<summary>
    ///  获取或设置指导打印进程的打印控制器。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PrintController" />
    ///  指导打印进程。
    ///  默认值为的新实例 <see cref="T:System.Windows.Forms.PrintControllerWithStatusDialog" />
    ///  类。
    ///</returns>
    property PrintController: DNPrintController read get_PrintController write set_PrintController;
    ///<summary>
    ///  获取或设置对文档进行打印的打印机。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  ，它指定在何处以及如何打印文档。
    ///  默认值是 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  其属性值设为其默认值。
    ///</returns>
    property PrinterSettings: DNPrinterSettings read get_PrinterSettings write set_PrinterSettings;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNPrintDocument = class(TDNGenericImport<DNPrintDocumentClass, DNPrintDocument>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNStyleClass = interface(DNObjectClass)
  ['{3035B09F-AEFD-5417-9B5F-52528CBCC72E}']
  { constructors } 

    ///<summary>
    ///  使用默认值初始化 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNStyle; overload;

  end;

  ///<summary>
  ///  表示 Web 服务器控件的样式。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.Style')]
  DNStyle = interface(DNObject)
  ['{AC328E16-158B-349C-AD12-47B8B99E68E7}']
  { getters & setters } 

    function get_BackColor: DNColor;
    procedure set_BackColor(value: DNColor);
    function get_BorderColor: DNColor;
    procedure set_BorderColor(value: DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DNColor;
    procedure set_ForeColor(value: DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  将需要呈现的 HTML 特性和样式添加到指定 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  。
    ///  此方法主要由控件开发人员使用。
    ///</summary>
    ///  <param name="writer">
    ///  表示在客户端上呈现 HTML 内容的输出流的 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  。
    ///</param>
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    ///<summary>
    ///  将需要呈现的 HTML 特性和样式添加到指定 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  和 Web 服务器控件。
    ///  此方法主要由控件开发人员使用。
    ///</summary>
    ///  <param name="writer">
    ///  表示在客户端上呈现 HTML 内容的输出流的 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  。
    ///</param>
    ///  <param name="owner">
    ///  一个 <see cref="T:System.Web.UI.WebControls.WebControl" />
    ///  或 <see cref="T:System.Web.UI.WebControls.WebControl" />
    ///  派生的对象，表示 Web 服务器控件与 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  。
    ///</param>
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    ///<summary>
    ///  指定的样式属性复制 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  实例 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  从中调用此方法的类。
    ///</summary>
    ///  <param name="s">
    ///  一个 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  ，表示要复制的样式。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Style.RegisteredCssClass" />
    ///  已设置。
    ///</exception>
    procedure CopyFrom(s: DNStyle);
    ///<summary>
    ///  将指定的样式属性进行合并 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  与实例 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  从中调用此方法的类。
    ///</summary>
    ///  <param name="s">
    ///  一个 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  ，表示要合并的样式。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Style.RegisteredCssClass" />
    ///  已设置。
    ///</exception>
    procedure MergeWith(s: DNStyle);
    ///<summary>
    ///  从状态袋中删除任何已定义的样式元素。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  标记 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  ，以便将在视图中记录其状态的状态。
    ///</summary>
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 Web 服务器控件的背景色。
    ///</summary>
    ///<returns>
    ///  表示控件背景色的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  默认值为 <see cref="F:System.Drawing.Color.Empty" />
    ///  ，指示未设置此属性。
    ///</returns>
    property BackColor: DNColor read get_BackColor write set_BackColor;
    ///<summary>
    ///  获取或设置 Web 服务器控件的边框颜色。
    ///</summary>
    ///<returns>
    ///  表示控件的边框颜色的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  默认值为 <see cref="F:System.Drawing.Color.Empty" />
    ///  ，指示未设置此属性。
    ///</returns>
    property BorderColor: DNColor read get_BorderColor write set_BorderColor;
    ///<summary>
    ///  获取或设置 Web 服务器控件的边框宽度。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  表示 Web 服务器控件的边框宽度。
    ///  默认值是 <see cref="F:System.Web.UI.WebControls.Unit.Empty" />
    ///  , ，指示未设置此属性。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的边框的宽度是负值。
    ///</exception>
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    ///<summary>
    ///  获取或设置 Web 服务器控件的边框样式。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.BorderStyle" />
    ///  枚举值之一。
    ///  默认值为 <see langword="NotSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  所选的值不是之一 <see cref="T:System.Web.UI.WebControls.BorderStyle" />
    ///  枚举值。
    ///</exception>
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    ///<summary>
    ///  获取或设置由客户端上的 Web 服务器控件呈现的级联样式表 (CSS) 类。
    ///</summary>
    ///<returns>
    ///  由 Web 服务器控件在客户端上呈现 CSS 类。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property CssClass: string read get_CssClass write set_CssClass;
    ///<summary>
    ///  获取与 Web 服务器控件相关联的字体属性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  表示 Web 服务器控件的字体属性。
    ///</returns>
    property Font: DNFontInfo read get_Font;
    ///<summary>
    ///  获取或设置 Web 服务器控件的前景颜色 （通常是文本的颜色）。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，表示控件的前景色。
    ///  默认值为 <see cref="F:System.Drawing.Color.Empty" />
    ///  。
    ///</returns>
    property ForeColor: DNColor read get_ForeColor write set_ForeColor;
    ///<summary>
    ///  获取或设置 Web 服务器控件的高度。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  表示 Web 服务器控件的高度。
    ///  默认值为 <see cref="F:System.Web.UI.WebControls.Unit.Empty" />
    ///  ，指示未设置此属性。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.Unit.Value" />
    ///  属性 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  为负。
    ///</exception>
    property Height: DNUnit read get_Height write set_Height;
    ///<summary>
    ///  受保护的属性。
    ///  获取一个值，该值指示是否已在状态袋中定义的所有样式元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果状态袋中没有已定义的; 没有样式元素否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取与该控件注册的级联样式表 (CSS) 类。
    ///</summary>
    ///<returns>
    ///  CSS 类名与当前实例注册时页。
    ///</returns>
    property RegisteredCssClass: string read get_RegisteredCssClass;
    ///<summary>
    ///  获取或设置 Web 服务器控件的宽度。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  表示 Web 服务器控件的宽度。
    ///  默认值为 <see cref="F:System.Web.UI.WebControls.Unit.Empty" />
    ///  ，指示未设置此属性。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.Unit.Value" />
    ///  属性 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  为负。
    ///</exception>
    property Width: DNUnit read get_Width write set_Width;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNStyle = class(TDNGenericImport<DNStyleClass, DNStyle>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableItemStyleClass = interface(DNStyleClass)
  ['{3761FE78-9499-5F9F-BCEF-B01A0D54EA6C}']
  { constructors } 

    ///<summary>
    ///  创建的新实例 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  类使用默认值。
    ///</summary>
    {class} function init: DNTableItemStyle; overload;

  end;

  ///<summary>
  ///  标识作为 <see cref="T:System.Web.UI.WebControls.TableRow" />
  ///  或 <see cref="T:System.Web.UI.WebControls.TableCell" />
  ///  呈现的控件元素的样式属性。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.TableItemStyle')]
  DNTableItemStyle = interface(DNStyle)
  ['{1397164B-2F61-37A6-9AD7-7E262606B27D}']
  { getters & setters } 

    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_BackColor: DNColor;
    procedure set_BackColor(value: DNColor);
    function get_BorderColor: DNColor;
    procedure set_BorderColor(value: DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DNColor;
    procedure set_ForeColor(value: DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  将水平对齐、 垂直对齐方式和换行有关的信息添加到要呈现的特性列表。
    ///</summary>
    ///  <param name="writer">
    ///  在客户端上呈现 HTML 内容的输出流。
    ///</param>
    ///  <param name="owner">
    ///  样式涉及的控件。
    ///</param>
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    ///<summary>
    ///  将指定的样式属性进行合并 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  实例 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  从中调用此方法的类。
    ///</summary>
    ///  <param name="s">
    ///  一个 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  ，表示要合并的样式。
    ///</param>
    procedure MergeWith(s: DNStyle);
    ///<summary>
    ///  指定的非空样式属性复制 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  实例 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  从中调用此方法的类。
    ///</summary>
    ///  <param name="s">
    ///  一个 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  ，表示要复制的样式。
    ///</param>
    procedure CopyFrom(s: DNStyle);
    ///<summary>
    ///  从样式中删除任何已定义的样式元素。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  将需要呈现的 HTML 特性和样式添加到指定 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  。
    ///  此方法主要由控件开发人员使用。
    ///</summary>
    ///  <param name="writer">
    ///  表示在客户端上呈现 HTML 内容的输出流的 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  。
    ///</param>
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    ///<summary>
    ///  标记 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  ，以便将在视图中记录其状态的状态。
    ///</summary>
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置在单元格中的内容的水平对齐方式。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.HorizontalAlign" />
    ///  枚举值之一。
    ///  默认值为 <see langword="NotSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的水平对齐方式不属于某个 <see cref="T:System.Web.UI.WebControls.HorizontalAlign" />
    ///  枚举值。
    ///</exception>
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    ///<summary>
    ///  获取或设置一个值，该值指示单元格内容换行的单元格中。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该单元格的内容换行的单元格;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Wrap: Boolean read get_Wrap write set_Wrap;
    ///<summary>
    ///  获取或设置 Web 服务器控件的背景色。
    ///</summary>
    ///<returns>
    ///  表示控件背景色的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  默认值为 <see cref="F:System.Drawing.Color.Empty" />
    ///  ，指示未设置此属性。
    ///</returns>
    property BackColor: DNColor read get_BackColor write set_BackColor;
    ///<summary>
    ///  获取或设置 Web 服务器控件的边框颜色。
    ///</summary>
    ///<returns>
    ///  表示控件的边框颜色的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  默认值为 <see cref="F:System.Drawing.Color.Empty" />
    ///  ，指示未设置此属性。
    ///</returns>
    property BorderColor: DNColor read get_BorderColor write set_BorderColor;
    ///<summary>
    ///  获取或设置 Web 服务器控件的边框宽度。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  表示 Web 服务器控件的边框宽度。
    ///  默认值是 <see cref="F:System.Web.UI.WebControls.Unit.Empty" />
    ///  , ，指示未设置此属性。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的边框的宽度是负值。
    ///</exception>
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    ///<summary>
    ///  获取或设置 Web 服务器控件的边框样式。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.BorderStyle" />
    ///  枚举值之一。
    ///  默认值为 <see langword="NotSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  所选的值不是之一 <see cref="T:System.Web.UI.WebControls.BorderStyle" />
    ///  枚举值。
    ///</exception>
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    ///<summary>
    ///  获取或设置由客户端上的 Web 服务器控件呈现的级联样式表 (CSS) 类。
    ///</summary>
    ///<returns>
    ///  由 Web 服务器控件在客户端上呈现 CSS 类。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property CssClass: string read get_CssClass write set_CssClass;
    ///<summary>
    ///  获取与 Web 服务器控件相关联的字体属性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  表示 Web 服务器控件的字体属性。
    ///</returns>
    property Font: DNFontInfo read get_Font;
    ///<summary>
    ///  获取或设置 Web 服务器控件的前景颜色 （通常是文本的颜色）。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，表示控件的前景色。
    ///  默认值为 <see cref="F:System.Drawing.Color.Empty" />
    ///  。
    ///</returns>
    property ForeColor: DNColor read get_ForeColor write set_ForeColor;
    ///<summary>
    ///  获取或设置 Web 服务器控件的高度。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  表示 Web 服务器控件的高度。
    ///  默认值为 <see cref="F:System.Web.UI.WebControls.Unit.Empty" />
    ///  ，指示未设置此属性。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.Unit.Value" />
    ///  属性 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  为负。
    ///</exception>
    property Height: DNUnit read get_Height write set_Height;
    ///<summary>
    ///  受保护的属性。
    ///  获取一个值，该值指示是否已在状态袋中定义的所有样式元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果状态袋中没有已定义的; 没有样式元素否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取与该控件注册的级联样式表 (CSS) 类。
    ///</summary>
    ///<returns>
    ///  CSS 类名与当前实例注册时页。
    ///</returns>
    property RegisteredCssClass: string read get_RegisteredCssClass;
    ///<summary>
    ///  获取或设置 Web 服务器控件的宽度。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  表示 Web 服务器控件的宽度。
    ///  默认值为 <see cref="F:System.Web.UI.WebControls.Unit.Empty" />
    ///  ，指示未设置此属性。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.Unit.Value" />
    ///  属性 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  为负。
    ///</exception>
    property Width: DNUnit read get_Width write set_Width;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNTableItemStyle = class(TDNGenericImport<DNTableItemStyleClass, DNTableItemStyle>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridPagerStyleClass = interface(DNTableItemStyleClass)
  ['{80E960F3-FEE6-5731-B769-FB653F48E191}']
  end;

  ///<summary>
  ///  为 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件的页导航提供样式。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataGridPagerStyle')]
  DNDataGridPagerStyle = interface(DNTableItemStyle)
  ['{42620019-2022-3823-BE8F-3C37B7CF82A0}']
  { getters & setters } 

    function get_NextPageText: string;
    procedure set_NextPageText(value: string);
    function get_PageButtonCount: Int32;
    procedure set_PageButtonCount(value: Int32);
    function get_PrevPageText: string;
    procedure set_PrevPageText(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_BackColor: DNColor;
    procedure set_BackColor(value: DNColor);
    function get_BorderColor: DNColor;
    procedure set_BorderColor(value: DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DNColor;
    procedure set_ForeColor(value: DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  将复制指定的样式 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  的对象置于此实例的 <see cref="T:System.Web.UI.WebControls.DataGridPagerStyle" />
    ///  类。
    ///</summary>
    ///  <param name="s">
    ///  要复制其内容的 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  。
    ///</param>
    procedure CopyFrom(s: DNStyle);
    ///<summary>
    ///  合并指定的样式 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  对象与此实例的 <see cref="T:System.Web.UI.WebControls.DataGridPagerStyle" />
    ///  类。
    ///</summary>
    ///  <param name="s"><see cref="T:System.Web.UI.WebControls.Style" />
    ///  要与合并。
    ///</param>
    procedure MergeWith(s: DNStyle);
    ///<summary>
    ///  还原 <see cref="T:System.Web.UI.WebControls.DataGridPagerStyle" />
    ///  对象为其默认值。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  将水平对齐、 垂直对齐方式和换行有关的信息添加到要呈现的特性列表。
    ///</summary>
    ///  <param name="writer">
    ///  在客户端上呈现 HTML 内容的输出流。
    ///</param>
    ///  <param name="owner">
    ///  样式涉及的控件。
    ///</param>
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置为下一页按钮显示的文本。
    ///</summary>
    ///<returns>
    ///  要显示的下一页按钮的文本。
    ///  默认值是 <see langword="&quot;&amp;gt;&quot;" />
    ///  , ，它呈现为大于号 (&gt;)。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的值是小于 <see langword="1" />
    ///  。
    ///</exception>
    property NextPageText: string read get_NextPageText write set_NextPageText;
    ///<summary>
    ///  获取或设置要同时显示的页导航元素中的数字按钮数 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  要同时显示的页导航元素中的数字按钮数 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///  默认值为 <see langword="10" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  所选的值是小于 <see langword="1" />
    ///  。
    ///</exception>
    property PageButtonCount: Int32 read get_PageButtonCount write set_PageButtonCount;
    ///<summary>
    ///  获取或设置为上一页按钮显示的文本。
    ///</summary>
    ///<returns>
    ///  要为上一页按钮显示的文本。
    ///  默认值是 <see langword="&quot;&amp;lt;&quot;" />
    ///  , ，它呈现为小于号 (&lt;)。
    ///</returns>
    property PrevPageText: string read get_PrevPageText write set_PrevPageText;
    ///<summary>
    ///  获取或设置一个值，该值指示页导航中是否显示 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要显示页导航;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Visible: Boolean read get_Visible write set_Visible;
    ///<summary>
    ///  获取或设置在单元格中的内容的水平对齐方式。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.HorizontalAlign" />
    ///  枚举值之一。
    ///  默认值为 <see langword="NotSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的水平对齐方式不属于某个 <see cref="T:System.Web.UI.WebControls.HorizontalAlign" />
    ///  枚举值。
    ///</exception>
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    ///<summary>
    ///  获取或设置一个值，该值指示单元格内容换行的单元格中。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该单元格的内容换行的单元格;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property BackColor: DNColor read get_BackColor write set_BackColor;
    property BorderColor: DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNDataGridPagerStyle = class(TDNGenericImport<DNDataGridPagerStyleClass, DNDataGridPagerStyle>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataReaderClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{AC311513-5303-52B1-90BC-EC46F7579F8F}']
  end;

  ///<summary>
  ///  从数据源中读取行的只进流。
  ///</summary>
  [DNTypeName('System.Data.Common.DbDataReader')]
  DNDbDataReader = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{BD84DD06-A2C7-33E9-BD16-288FD41CCD30}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_VisibleFieldCount: Int32;
    function get_Item(ordinal: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    ///<summary>
    ///  关闭 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbDataReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  返回指定列的提供程序特定的字段类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  描述指定列的数据类型的 <see cref="T:System.Type" />
    ///  对象。
    ///</returns>
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  以 <see cref="T:System.Object" />
    ///  实例的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  在当前行的集合中获取提供程序特定的所有属性列。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  char
    ///  nchar
    ///  ntext
    ///  nvarchar
    ///  文本
    ///  varchar
    ///</exception>
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    ///<summary>
    ///  获取指定列的数据类型的名称。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个字符串，表示数据类型的名称。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDataTypeName(ordinal: Int32): string;
    ///<summary>
    ///  返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEnumerator" />
    ///  ，可用于循环访问数据读取器中的行。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取指定列的数据类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的数据类型。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  在给定从零开始的列序号时获取该列的名称。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的名称。
    ///</returns>
    function GetName(ordinal: Int32): string;
    ///<summary>
    ///  在给定列名时获取相应的列序号。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的列序号。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  指定的名称不是有效的列名。
    ///</exception>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  以布尔值的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetBoolean(ordinal: Int32): Boolean;
    ///<summary>
    ///  以字节的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetByte(ordinal: Int32): Byte;
    ///<summary>
    ///  从指定的列中，由指示位置处开始读取的字节流 <paramref name="dataOffset" />
    ///  , ，到缓冲区中，从所指示的位置开始 <paramref name="bufferOffset" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataOffset">
    ///  行中作为读取操作起始位置的索引。
    ///</param>
    ///  <param name="buffer">
    ///  要将数据复制到的缓冲区。
    ///</param>
    ///  <param name="bufferOffset">
    ///  要将数据复制到的位置的缓冲区索引。
    ///</param>
    ///  <param name="length">
    ///  要读取的最大字符数。
    ///</param>
    ///<returns>
    ///  读取的实际字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetBytes(ordinal: Int32; dataOffset: Int64; buffer: TArray<Byte>; bufferOffset: Int32; length: Int32): Int64;
    ///<summary>
    ///  以单个字符的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetChar(ordinal: Int32): Char;
    ///<summary>
    ///  从指定的列所指示的位置开始的字符流读入 <paramref name="dataOffset" />
    ///  , ，到缓冲区中，从所指示的位置开始 <paramref name="bufferOffset" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataOffset">
    ///  行中作为读取操作起始位置的索引。
    ///</param>
    ///  <param name="buffer">
    ///  要将数据复制到的缓冲区。
    ///</param>
    ///  <param name="bufferOffset">
    ///  要将数据复制到的位置的缓冲区索引。
    ///</param>
    ///  <param name="length">
    ///  要读取的最大字符数。
    ///</param>
    ///<returns>
    ///  读取的实际字符数。
    ///</returns>
    function GetChars(ordinal: Int32; dataOffset: Int64; buffer: TArray<Char>; bufferOffset: Int32; length: Int32): Int64;
    ///<summary>
    ///  返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象请求的列序号。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</returns>
    function GetData(ordinal: Int32): DNDbDataReader;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  以 <see cref="T:System.Decimal" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  以双精度浮点数字的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDouble(ordinal: Int32): Double;
    ///<summary>
    ///  以单精度浮点数字的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetFloat(ordinal: Int32): Single;
    ///<summary>
    ///  以全局唯一标识符 (GUID) 的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  16 位有符号整数形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt16(ordinal: Int32): Int16;
    ///<summary>
    ///  作为 32 位有符号整数获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt32(ordinal: Int32): Int32;
    ///<summary>
    ///  以 64 位有符号整数的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt64(ordinal: Int32): Int64;
    ///<summary>
    ///  以 <see cref="T:System.String" />
    ///  实例的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetString(ordinal: Int32): string;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  binary
    ///  图像
    ///  varbinary
    ///  udt
    ///</exception>
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    ///<summary>
    ///  以 <see cref="T:System.Object" />
    ///  实例的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  使用来填充数组的对象的当前行的列的值。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取一个值，该值指示列中是否包含不存在或丢失的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列等效于 <see cref="T:System.DBNull" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDBNull(ordinal: Int32): Boolean;
    ///<summary>
    ///  在读取一批语句的结果时，使读取器前进到下一个结果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有多个结果集;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function NextResult: Boolean;
    ///<summary>
    ///  使读取器前进到结果集中的下一条记录。
    ///</summary>
    ///<returns>
    ///  如果存在更多行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前行的嵌套深度。
    ///</summary>
    ///<returns>
    ///  当前行的嵌套深度。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取当前行中的列数。
    ///</summary>
    ///<returns>
    ///  当前行中的列数。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  没有当前连接到 SQL Server 的实例。
    ///</exception>
    property FieldCount: Int32 read get_FieldCount;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Data.Common.DbDataReader" />
    ///  是否包含一个或多个行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Common.DbDataReader" />
    ///  包含一个或多个行; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasRows: Boolean read get_HasRows;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Common.DbDataReader" />
    ///  是否已关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Common.DbDataReader" />
    ///  已关闭，否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  已关闭。
    ///</exception>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  更改、插入或删除的行数。
    ///  在为 SELECT 语句; 的-1如果受不影响任何行，则为 0 或语句失败。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DbDataReader" />
    ///  中未隐藏的字段的数目。
    ///</summary>
    ///<returns>
    ///  未隐藏的字段的数目。
    ///</returns>
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
    property Item[ordinal: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNDbDataReader = class(TDNGenericImport<DNDbDataReaderClass, DNDbDataReader>) end;

  //-------------namespace: System.Data----------------
  DNDataTableReaderClass = interface(DNDbDataReaderClass)
  ['{DE013FFE-18A1-549D-BBFE-B7A35A1EC675}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataTableReader" />
    ///  通过使用所提供的数据类 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  从中新 <see cref="T:System.Data.DataTableReader" />
    ///  获取其结果集。
    ///</param>
    {class} function init(dataTable: DNDataTable): DNDataTableReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataTableReader" />
    ///  类使用所提供的数组 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    ///  <param name="dataTables">
    ///  数组 <see cref="T:System.Data.DataTable" />
    ///  提供针对新的结果的对象 <see cref="T:System.Data.DataTableReader" />
    ///  对象。
    ///</param>
    {class} function init(dataTables: TArray<DNDataTable>): DNDataTableReader; overload;

  end;

  ///<summary><see cref="T:System.Data.DataTableReader" />
  ///  以一个或多个只读、只进结果集的形式获取一个或多个 <see cref="T:System.Data.DataTable" />
  ///  对象的内容。
  ///</summary>
  [DNTypeName('System.Data.DataTableReader')]
  DNDataTableReader = interface(DNDbDataReader)
  ['{B042F350-345A-3F37-B532-D557D91D5FCA}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_HasRows: Boolean;
    function get_Item(ordinal: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    function get_FieldCount: Int32;
    function get_VisibleFieldCount: Int32;

  { methods } 

    ///<summary>
    ///  关闭当前 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.DataTableReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  前移 <see cref="T:System.Data.DataTableReader" />
    ///  到下一个结果集，如果有的话。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果没有其他结果集;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试在已关闭中导航 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function NextResult: Boolean;
    ///<summary>
    ///  前移 <see cref="T:System.Data.DataTableReader" />
    ///  到下一个记录。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果没有另一行读取;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function Read: Boolean;
    ///<summary>
    ///  获取指定列的类型提供程序特定格式。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  在提供程序特定格式中获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索其值的列的从零开始的数字。
    ///</param>
    ///<returns>
    ///  提供程序特定格式中的指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///</exception>
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  提供的数组填充中的所有列的提供程序特定的类型信息 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</summary>
    ///  <param name="values">
    ///  若要使用中的列的类型信息来填充的对象的数组 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  列的值复制到数组中的数。
    ///</returns>
    ///<exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取表示指定列的数据类型的字符串。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示列的数据类型的字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetDataTypeName(ordinal: Int32): string;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetName(ordinal: Int32): string;
    ///<summary>
    ///  获取列序号，给定的列的名称。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的列序号。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的名称不是有效的列名。
    ///</exception>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  返回可用于循环访问项集合的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  对象，表示项集合。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含 <see langword="Boolean" />
    ///  。
    ///</exception>
    function GetBoolean(ordinal: Int32): Boolean;
    ///<summary>
    ///  以字节的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含一个字节。
    ///</exception>
    function GetByte(ordinal: Int32): Byte;
    ///<summary>
    ///  读取指定的列偏移量开始到缓冲区作为数组从指定的缓冲区偏移量开始的字节的流。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中自其开始读取的操作的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字节流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  若要开始放置数据的缓冲区中的索引。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的最大长度。
    ///</param>
    ///<returns>
    ///  读取的实际字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含一个字节数组。
    ///</exception>
    function GetBytes(ordinal: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  字符的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的字段不包含一个字符。
    ///</exception>
    function GetChar(ordinal: Int32): Char;
    ///<summary>
    ///  字符数组的形式返回指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中自其开始读取的操作的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字符流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  若要开始放置数据的缓冲区中的索引。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的最大长度。
    ///</param>
    ///<returns>
    ///  读取的实际字符数。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含的字符数组。
    ///</exception>
    function GetChars(ordinal: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含日期时间值。
    ///</exception>
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Decimal" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含 <see langword="Decimal" />
    ///  值。
    ///</exception>
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  双精度浮点数字的形式获取列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含双精度浮点数。
    ///</exception>
    function GetDouble(ordinal: Int32): Double;
    ///<summary>
    ///  以单精度浮点数字的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含单精度浮点数。
    ///</exception>
    function GetFloat(ordinal: Int32): Single;
    ///<summary>
    ///  以全局唯一标识符 (GUID) 的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含一个 GUID。
    ///</exception>
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  16 位有符号整数形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含 16 位有符号的整数。
    ///</exception>
    function GetInt16(ordinal: Int32): Int16;
    ///<summary>
    ///  作为 32 位有符号整数获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含 32 位有符号的整数值。
    ///</exception>
    function GetInt32(ordinal: Int32): Int32;
    ///<summary>
    ///  以 64 位有符号整数的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含 64 位有符号的整数值。
    ///</exception>
    function GetInt64(ordinal: Int32): Int64;
    ///<summary>
    ///  获取指定列的值作为字符串。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含一个字符串。
    ///</exception>
    function GetString(ordinal: Int32): string;
    ///<summary>
    ///  以其本机格式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///  此方法返回 <see langword="DBNull" />
    ///  为 null 的列。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问中为已关闭的列 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  使用来填充数组的对象的当前行的列的值。
    ///</summary>
    ///  <param name="values">
    ///  一个数组 <see cref="T:System.Object" />
    ///  向其复制的列的值从 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  列的值复制到数组中的数。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取一个值，该值指示列是否包含不存在或缺少的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see cref="T:System.DBNull" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function IsDBNull(ordinal: Int32): Boolean;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbDataReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  char
    ///  nchar
    ///  ntext
    ///  nvarchar
    ///  文本
    ///  varchar
    ///</exception>
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    ///<summary>
    ///  返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象请求的列序号。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</returns>
    function GetData(ordinal: Int32): DNDbDataReader;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  binary
    ///  图像
    ///  varbinary
    ///  udt
    ///</exception>
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当前行的嵌套深度 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前行; 嵌套的深度始终为零。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataTableReader" />
    ///  已关闭。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Data.DataTableReader" />
    ///  关闭; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取插入、 发生更改时，或通过执行 SQL 语句删除的行数。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTableReader" />
    ///  不支持此属性，并且始终返回 0。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataTableReader" />
    ///  包含一个或多个行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.DataTableReader" />
    ///  包含一个或多个行; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试检索有关已关闭的信息 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    property HasRows: Boolean read get_HasRows;
    property Item[ordinal: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    ///<summary>
    ///  返回当前行中的列数。
    ///</summary>
    ///<returns>
    ///  如果未放在有效的结果集中，0;否则为中当前行的列数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试检索中为已关闭的字段计数 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    property FieldCount: Int32 read get_FieldCount;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DbDataReader" />
    ///  中未隐藏的字段的数目。
    ///</summary>
    ///<returns>
    ///  未隐藏的字段的数目。
    ///</returns>
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
  end;

  TDNDataTableReader = class(TDNGenericImport<DNDataTableReaderClass, DNDataTableReader>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbDataReaderClass = interface(DNDbDataReaderClass)
  ['{5998AC6D-88DE-5E03-8321-2B9F08D92B18}']
  end;

  ///<summary>
  ///  提供了一种从数据源中读取数据行的只进流。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbDataReader')]
  DNOleDbDataReader = interface(DNDbDataReader)
  ['{EC6F90AC-BAD9-3D17-9115-66514B377436}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    function get_VisibleFieldCount: Int32;

  { methods } 

    ///<summary>
    ///  以布尔值的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetBoolean(ordinal: Int32): Boolean;
    ///<summary>
    ///  以字节的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  以字节的形式指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetByte(ordinal: Int32): Byte;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  以 <see cref="T:System.Decimal" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  获取指定列的值作为双精度浮点数。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDouble(ordinal: Int32): Double;
    ///<summary>
    ///  返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEnumerator" />
    ///  ，可用于循环访问数据读取器中的行。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取指定列的值作为单精度浮点数。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetFloat(ordinal: Int32): Single;
    ///<summary>
    ///  以全局唯一标识符 (GUID) 的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  16 位有符号整数形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt16(ordinal: Int32): Int16;
    ///<summary>
    ///  作为 32 位有符号整数获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt32(ordinal: Int32): Int32;
    ///<summary>
    ///  以 64 位有符号整数的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt64(ordinal: Int32): Int64;
    ///<summary>
    ///  获取指定列的值作为字符串。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetString(ordinal: Int32): string;
    ///<summary>
    ///  获取以其本机格式表示的指定序号处的列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  要返回的值。
    ///</returns>
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取一个值，该值指示列中是否包含不存在或丢失的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see cref="T:System.DBNull" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDBNull(ordinal: Int32): Boolean;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  关闭 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  对象。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  流读入的字节从指定的列偏移量到缓冲区作为数组从给定的缓冲区偏移量处开始。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中自其开始读取的操作的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字节流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  中的索引位置 <paramref name="buffer" />
    ///  写入操作旨在启动。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的最大长度。
    ///</param>
    ///<returns>
    ///  读取的实际字节数。
    ///</returns>
    function GetBytes(ordinal: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  读取字符流从指定的列偏移量到缓冲区作为数组从给定的缓冲区偏移量处开始。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  从其开始读取的操作的行中的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要将数据复制到的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  中的索引位置 <paramref name="buffer" />
    ///  写入操作旨在启动。
    ///</param>
    ///  <param name="length">
    ///  要读取的字符数。
    ///</param>
    ///<returns>
    ///  读取的实际字符数。
    ///</returns>
    function GetChars(ordinal: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  字符的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetChar(ordinal: Int32): Char;
    ///<summary>
    ///  返回 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  对象请求的列序号。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  对象。
    ///</returns>
    function GetData(ordinal: Int32): DNOleDbDataReader;
    ///<summary>
    ///  获取源数据类型的名称。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  后端数据类型的名称。
    ///  有关详细信息，请参阅 SQL Server data types 或 Access data types。
    ///</returns>
    function GetDataTypeName(index: Int32): string;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</returns>
    function GetFieldType(index: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  获取指定列的名称。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的名称。
    ///</returns>
    function GetName(index: Int32): string;
    ///<summary>
    ///  获取列序号，给定的列的名称。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的列序号。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  指定的名称不是有效的列名。
    ///</exception>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  以 <see cref="T:System.TimeSpan" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetTimeSpan(ordinal: Int32): DDN.mscorlib.DNTimeSpan;
    ///<summary>
    ///  使用来填充数组的对象的当前行的列的值。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  在读取批处理 SQL 语句的结果时，将数据读取器推进到下一个结果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有多个结果集;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function NextResult: Boolean;
    ///<summary>
    ///  前移 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  到下一个记录。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有多个行;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbDataReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回指定列的提供程序特定的字段类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  描述指定列的数据类型的 <see cref="T:System.Type" />
    ///  对象。
    ///</returns>
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  以 <see cref="T:System.Object" />
    ///  实例的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  在当前行的集合中获取提供程序特定的所有属性列。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  char
    ///  nchar
    ///  ntext
    ///  nvarchar
    ///  文本
    ///  varchar
    ///</exception>
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  binary
    ///  图像
    ///  varbinary
    ///  udt
    ///</exception>
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前行的嵌套深度。
    ///</summary>
    ///<returns>
    ///  当前行的嵌套深度。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取当前行中的列数。
    ///</summary>
    ///<returns>
    ///  如果未放在有效记录集中，0;否则为当前记录中的列数。
    ///  默认值为 -1。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  没有当前连接到数据源。
    ///</exception>
    property FieldCount: Int32 read get_FieldCount;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  包含一个或多个行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  包含一个或多个行; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasRows: Boolean read get_HasRows;
    ///<summary>
    ///  指示是否关闭数据读取器。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  关闭; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    ///<summary>
    ///  获取 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  中未隐藏的字段的数目。
    ///</summary>
    ///<returns>
    ///  未隐藏的字段的数目。
    ///</returns>
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
  end;

  TDNOleDbDataReader = class(TDNGenericImport<DNOleDbDataReaderClass, DNOleDbDataReader>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlDataReaderClass = interface(DNDbDataReaderClass)
  ['{119ACEE0-904D-5216-A436-ED710B01A3C8}']
  end;

  ///<summary>
  ///  提供一种从 SQL Server 数据库中读取只进的行流的方式。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlDataReader')]
  DNSqlDataReader = interface(DNDbDataReader)
  ['{071B1B29-B2A1-31D8-B9E6-8C926B02709A}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_VisibleFieldCount: Int32;
    function get_Item(i: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    ///<summary>
    ///  获取表示指定列的数据类型的字符串。
    ///</summary>
    ///  <param name="i">
    ///  要查找的列从零开始的序号位置。
    ///</param>
    ///<returns>
    ///  表示指定列的数据类型的字符串。
    ///</returns>
    function GetDataTypeName(i: Int32): string;
    ///<summary>
    ///  返回 <see cref="T:System.Collections.IEnumerator" />
    ///  ，它循环访问 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///  如果客户端上，如果一个用户定义类型 (UDT) 从数据库中，返回上不存在类型 GetFieldType ，则返回 null。
    ///</returns>
    function GetFieldType(i: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  获取指定列的名称。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的名称。
    ///</returns>
    function GetName(i: Int32): string;
    ///<summary>
    ///  获取 <see langword="Object" />
    ///  ，它表示的基础提供程序特定的字段类型。
    ///</summary>
    ///  <param name="i"><see cref="T:System.Int32" />
    ///  表示列序号。
    ///</param>
    ///<returns>
    ///  获取 <see cref="T:System.Object" />
    ///  ，它表示的基础提供程序特定的字段类型。
    ///</returns>
    function GetProviderSpecificFieldType(i: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  获取列序号，给定的列的名称。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的列序号。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  指定的名称不是有效的列名。
    ///</exception>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  获取 <see langword="Object" />
    ///  ，它表示基础提供程序特定值。
    ///</summary>
    ///  <param name="i"><see cref="T:System.Int32" />
    ///  表示列序号。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  ，它表示基础提供程序特定值。
    ///</returns>
    function GetProviderSpecificValue(i: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取基础提供程序特定值的表示形式的对象的数组。
    ///</summary>
    ///  <param name="values">
    ///  一个数组 <see cref="T:System.Object" />
    ///  向其复制的列的值。
    ///</param>
    ///<returns>
    ///  基础提供程序特定值的表示形式的对象的数组。
    ///</returns>
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  作为 SQL Server 类型，指定列中返回的数据值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlDbType" />
    ///  。
    ///</returns>
    function GetSqlValue(i: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  以其本机格式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.DBNull" />
    ///  用于 null 数据库列。
    ///</returns>
    function GetValue(i: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  关闭 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  对象。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  以布尔值的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetBoolean(i: Int32): Boolean;
    ///<summary>
    ///  检索数据的类型为作为 XML <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  指定列的值。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是 xml。
    ///</exception>
    function GetXmlReader(i: Int32): DNXmlReader;
    ///<summary>
    ///  检索二进制、 图像、 varbinary、 UDT 和 variant 数据类型为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个流对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  binary
    ///  图像
    ///  varbinary
    ///  udt
    ///</exception>
    function GetStream(i: Int32): DDN.mscorlib.DNStream;
    ///<summary>
    ///  以字节的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  以字节的形式指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetByte(i: Int32): Byte;
    ///<summary>
    ///  从指定的列偏移量将字节流读入数组以给定的缓冲区偏移量开始的缓冲区。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中自其开始读取的操作的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字节流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  中的索引位置 <paramref name="buffer" />
    ///  写入操作旨在启动。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的最大长度。
    ///</param>
    ///<returns>
    ///  读取的实际字节数。
    ///</returns>
    function GetBytes(i: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  检索 Char、 NChar、 NText、 NVarChar、 text、 varChar、 和 Variant 数据类型为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  要检索的列。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  char
    ///  nchar
    ///  ntext
    ///  nvarchar
    ///  文本
    ///  varchar
    ///</exception>
    function GetTextReader(i: Int32): DDN.mscorlib.DNTextReader;
    ///<summary>
    ///  以单个字符的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetChar(i: Int32): Char;
    ///<summary>
    ///  读取字符流从指定的列偏移量到缓冲区作为数组从给定的缓冲区偏移量处开始。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中自其开始读取的操作的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字节流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  中的索引位置 <paramref name="buffer" />
    ///  写入操作旨在启动。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的最大长度。
    ///</param>
    ///<returns>
    ///  读取的实际字符数。
    ///</returns>
    function GetChars(i: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDateTime(i: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  以 <see cref="T:System.Decimal" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDecimal(i: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  以双精度浮点数字的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDouble(i: Int32): Double;
    ///<summary>
    ///  以单精度浮点数字的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetFloat(i: Int32): Single;
    ///<summary>
    ///  以全局唯一标识符 (GUID) 的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetGuid(i: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  16 位有符号整数形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt16(i: Int32): Int16;
    ///<summary>
    ///  作为 32 位有符号整数获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt32(i: Int32): Int32;
    ///<summary>
    ///  以 64 位有符号整数的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt64(i: Int32): Int64;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    function GetSqlBoolean(i: Int32): DNSqlBoolean;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</returns>
    function GetSqlBinary(i: Int32): DNSqlBinary;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值  <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    function GetSqlByte(i: Int32): DNSqlByte;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</returns>
    function GetSqlBytes(i: Int32): DNSqlBytes;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值  <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</returns>
    function GetSqlChars(i: Int32): DNSqlChars;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值  <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  。
    ///</returns>
    function GetSqlDateTime(i: Int32): DNSqlDateTime;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function GetSqlDecimal(i: Int32): DNSqlDecimal;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值  <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</returns>
    function GetSqlGuid(i: Int32): DNSqlGuid;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值  <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    function GetSqlDouble(i: Int32): DNSqlDouble;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</returns>
    function GetSqlInt16(i: Int32): DNSqlInt16;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function GetSqlInt32(i: Int32): DNSqlInt32;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function GetSqlInt64(i: Int32): DNSqlInt64;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function GetSqlMoney(i: Int32): DNSqlMoney;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function GetSqlSingle(i: Int32): DNSqlSingle;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function GetSqlString(i: Int32): DNSqlString;
    ///<summary>
    ///  获取指定列的值作为一个 XML 值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  值，该值包含相应字段中存储的 XML。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问中为已关闭的列 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  检索到的数据与不兼容 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  类型。
    ///</exception>
    function GetSqlXml(i: Int32): DNSqlXml;
    ///<summary>
    ///  填充数组 <see cref="T:System.Object" />
    ///  ，其中包含的记录中的所有列的值表示为 SQL Server 类型。
    ///</summary>
    ///  <param name="values">
    ///  一个数组 <see cref="T:System.Object" />
    ///  要将值复制到其中。
    ///  与 SQL Server 类型表示的列的值。
    ///</param>
    ///<returns>
    ///  一个整数，指示复制的列数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="values" />
    ///  为 null。
    ///</exception>
    function GetSqlValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取指定列的值作为字符串。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetString(i: Int32): string;
    ///<summary>
    ///  检索指定列的值 <see cref="T:System.TimeSpan" />
    ///  对象。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetTimeSpan(i: Int32): DDN.mscorlib.DNTimeSpan;
    ///<summary>
    ///  检索指定列的值 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDateTimeOffset(i: Int32): DDN.mscorlib.DNDateTimeOffset;
    ///<summary>
    ///  使用来填充数组的对象的当前行的列的值。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取一个值，该值指示列是否包含不存在或缺少的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see cref="T:System.DBNull" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDBNull(i: Int32): Boolean;
    ///<summary>
    ///  读取批处理 TRANSACT-SQL 语句的结果时，将数据读取器推进到下一个结果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有多个结果集;否则为<see langword="false" />
    ///  。
    ///</returns>
    function NextResult: Boolean;
    ///<summary>
    ///  让 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  前进到下一条记录。
    ///</summary>
    ///<returns>
    ///  如果存在更多行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///</exception>
    function Read: Boolean;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbDataReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象请求的列序号。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</returns>
    function GetData(ordinal: Int32): DNDbDataReader;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前行的嵌套深度。
    ///</summary>
    ///<returns>
    ///  当前行的嵌套深度。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取当前行中的列数。
    ///</summary>
    ///<returns>
    ///  如果未放在有效记录集中，0;否则为中当前行的列数。
    ///  默认值为 -1。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  没有当前连接到 SQL Server 的实例。
    ///</exception>
    property FieldCount: Int32 read get_FieldCount;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  包含一个或多个行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  包含一个或多个行; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasRows: Boolean read get_HasRows;
    ///<summary>
    ///  检索一个布尔值，该值指示是否指定 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  实例已关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果指定 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  实例已关闭，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取已更改、 插入或删除通过执行 TRANSACT-SQL 语句的行数。
    ///</summary>
    ///<returns>
    ///  更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    ///<summary>
    ///  获取 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  中未隐藏的字段的数目。
    ///</summary>
    ///<returns>
    ///  未隐藏的字段的数目。
    ///</returns>
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
    property Item[i: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNSqlDataReader = class(TDNGenericImport<DNSqlDataReaderClass, DNSqlDataReader>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbTransactionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4FCB2B8F-4FAA-5D96-81E6-8ABFB11C4CD6}']
  end;

  ///<summary>
  ///  事务的基类。
  ///</summary>
  [DNTypeName('System.Data.Common.DbTransaction')]
  DNDbTransaction = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{D36E8E8B-BE81-3B90-A003-1A472606FDA4}']
  { getters & setters } 

    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbTransaction" />
    ///  使用的非托管资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  提交数据库事务。
    ///</summary>
    procedure Commit;
    ///<summary>
    ///  从挂起状态回滚事务。
    ///</summary>
    procedure Rollback;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定 <see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///</summary>
    ///<returns><see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNDbTransaction = class(TDNGenericImport<DNDbTransactionClass, DNDbTransaction>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbTransactionClass = interface(DNDbTransactionClass)
  ['{C7A2649D-1ED1-5730-AC0F-5E744C071EFD}']
  end;

  ///<summary>
  ///  表示要在数据源进行的 SQL 事务。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbTransaction')]
  DNOleDbTransaction = interface(DNDbTransaction)
  ['{F538329B-0483-3A25-B7C8-92EDBBCF3717}']
  { getters & setters } 

    function get_Connection: DNOleDbConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    ///<summary>
    ///  启动嵌套的数据库事务，并指定要用于新事务的隔离级别。
    ///</summary>
    ///  <param name="isolevel">
    ///  要用于该事务的隔离级别。
    ///</param>
    ///<returns>
    ///  嵌套的数据库事务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不支持嵌套的事务。
    ///</exception>
    function &Begin(isolevel: DNIsolationLevel): DNOleDbTransaction; overload;
    ///<summary>
    ///  启动嵌套的数据库事务。
    ///</summary>
    ///<returns>
    ///  嵌套的数据库事务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不支持嵌套的事务。
    ///</exception>
    function &Begin: DNOleDbTransaction; overload;
    ///<summary>
    ///  提交数据库事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Commit;
    ///<summary>
    ///  从挂起状态回滚事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Rollback;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbTransaction" />
    ///  使用的非托管资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  与该事务关联的对象或 <see langword="null" />
    ///  如果该事务将不再有效。
    ///</summary>
    ///<returns><see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  与事务关联的对象。
    ///</returns>
    property Connection: DNOleDbConnection read get_Connection;
    ///<summary>
    ///  指定 <see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///</summary>
    ///<returns><see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///  默认值为 <see langword="ReadCommitted" />
    ///  。
    ///</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNOleDbTransaction = class(TDNGenericImport<DNOleDbTransactionClass, DNOleDbTransaction>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlTransactionClass = interface(DNDbTransactionClass)
  ['{A10EAAC5-D3CB-5942-A02A-969BD9445160}']
  end;

  ///<summary>
  ///  表示将在 SQL Server 数据库中进行的 Transact-SQL 事务。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlTransaction')]
  DNSqlTransaction = interface(DNDbTransaction)
  ['{824F20F8-D6D0-33E5-9A93-A12B97209D56}']
  { getters & setters } 

    function get_Connection: DNSqlConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    ///<summary>
    ///  提交数据库事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Commit;
    ///<summary>
    ///  从挂起状态回滚事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Rollback; overload;
    ///<summary>
    ///  从挂起状态回滚事务，并指定在事务或保存点名称。
    ///</summary>
    ///  <param name="transactionName">
    ///  事务回滚或要回滚到保存点的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定没有事务名称。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Rollback(transactionName: string); overload;
    ///<summary>
    ///  可以用来回滚事务的一部分，并且指定的保存点名称的事务中创建一个保存点。
    ///</summary>
    ///  <param name="savePointName">
    ///  保存点的名称。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Save(savePointName: string);
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbTransaction" />
    ///  使用的非托管资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  与该事务关联的对象或 <see langword="null" />
    ///  如果该事务将不再有效。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  与事务关联的对象。
    ///</returns>
    property Connection: DNSqlConnection read get_Connection;
    ///<summary>
    ///  指定 <see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///</summary>
    ///<returns><see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///  默认值为 <see langword="ReadCommitted" />
    ///  。
    ///</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNSqlTransaction = class(TDNGenericImport<DNSqlTransactionClass, DNSqlTransaction>) end;

  //-------------namespace: System.Drawing----------------
  DNBrushClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{629CBCB4-595B-51D5-8891-446B38F904D4}']
  end;

  ///<summary>
  ///  定义用来填充的如矩形、 椭圆、 饼、 多边形和路径的图形形状的内部对象。
  ///</summary>
  [DNTypeName('System.Drawing.Brush')]
  DNBrush = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{60C4596A-1199-3E69-B581-7E1C9CDE9B1A}']
  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Brush" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  当在派生类中重写时创建的一个精确副本 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此方法创建的新 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrush = class(TDNGenericImport<DNBrushClass, DNBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsContainerClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{98368B9B-4EED-5BC8-971A-17292A7F5E67}']
  end;

  ///<summary>
  ///  表示图形容器的内部数据。
  ///  保存的状态时使用此类 <see cref="T:System.Drawing.Graphics" />
  ///  对象使用 <see cref="M:System.Drawing.Graphics.BeginContainer" />
  ///  和 <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
  ///  方法。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsContainer')]
  DNGraphicsContainer = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{59F0647C-2277-3516-9AF1-9B27E963FAC5}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGraphicsContainer = class(TDNGenericImport<DNGraphicsContainerClass, DNGraphicsContainer>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsPathClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{14B290CE-ECCD-59E2-A69C-E477F26C5DA5}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  类 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.FillMode" />
    ///  值 <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" />
    ///  。
    ///</summary>
    {class} function init: DNGraphicsPath; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  类与指定 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举。
    ///</summary>
    ///  <param name="fillMode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举，它确定了此内部 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  进行填充。
    ///</param>
    {class} function init(fillMode: DNFillMode): DNGraphicsPath; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  用指定的数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  和 <see cref="T:System.Drawing.PointF" />
    ///  数组。
    ///</summary>
    ///  <param name="pts">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义构成这点的坐标的结构 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="types">
    ///  一个数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  枚举元素，指定的类型中每个相应点 <paramref name="pts" />
    ///  数组。
    ///</param>
    {class} function init(pts: TArray<DNPointF>; types: TArray<Byte>): DNGraphicsPath; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  用指定的数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  和 <see cref="T:System.Drawing.PointF" />
    ///  数组以及指定 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举元素。
    ///</summary>
    ///  <param name="pts">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义构成这点的坐标的结构 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="types">
    ///  一个数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  枚举元素，指定的类型中每个相应点 <paramref name="pts" />
    ///  数组。
    ///</param>
    ///  <param name="fillMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举，用于指定如何在此形状的内部 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  进行填充。
    ///</param>
    {class} function init(pts: TArray<DNPointF>; types: TArray<Byte>; fillMode: DNFillMode): DNGraphicsPath; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  类与指定 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  和 <see cref="T:System.Drawing.Point" />
    ///  数组。
    ///</summary>
    ///  <param name="pts">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  定义构成这点的坐标的结构 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="types">
    ///  一个数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  枚举元素，指定的类型中每个相应点 <paramref name="pts" />
    ///  数组。
    ///</param>
    {class} function init(pts: TArray<DNPoint>; types: TArray<Byte>): DNGraphicsPath; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  类与指定 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  和 <see cref="T:System.Drawing.Point" />
    ///  数组以及指定 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举元素。
    ///</summary>
    ///  <param name="pts">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  定义构成这点的坐标的结构 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="types">
    ///  一个数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  枚举元素，指定的类型中每个相应点 <paramref name="pts" />
    ///  数组。
    ///</param>
    ///  <param name="fillMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举，用于指定如何在此形状的内部 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  进行填充。
    ///</param>
    {class} function init(pts: TArray<DNPoint>; types: TArray<Byte>; fillMode: DNFillMode): DNGraphicsPath; overload;

  end;

  ///<summary>
  ///  表示一系列连接的直线和曲线。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsPath')]
  DNGraphicsPath = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{5C410D7F-42A1-329D-83AE-05AA8D2623B4}']
  { getters & setters } 

    function get_FillMode: DNFillMode;
    procedure set_FillMode(value: DNFillMode);
    function get_PathData: DNPathData;
    function get_PointCount: Int32;
    function get_PathTypes: TArray<Byte>;
    function get_PathPoints: TArray<DNPointF>;

  { methods } 

    ///<summary>
    ///  为此路径添加一个矩形。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  ，它表示要添加的矩形。
    ///</param>
    procedure AddRectangle(rect: DNRectangle); overload;
    ///<summary>
    ///  创建此路径的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  清空 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  和 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />
    ///  数组和设置 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  到 <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" />
    ///  。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  开始一个新图形而不关闭当前图形。
    ///  所有后续的点添加到的路径添加到此新的图形。
    ///</summary>
    procedure StartFigure;
    ///<summary>
    ///  关闭当前图形并开始新的图形。
    ///  如果当前图包含一系列连接的直线和曲线，该方法通过从终结点的一条线连接到的起始点关闭循环。
    ///</summary>
    procedure CloseFigure;
    ///<summary>
    ///  关闭所有打开的数字，在此路径，并开始一个新图形。
    ///  通过将行从其终结点连接到其起始点，则关闭每个打开的图形。
    ///</summary>
    procedure CloseAllFigures;
    ///<summary>
    ///  对此设置标记 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    procedure SetMarkers;
    ///<summary>
    ///  清除此路径中的所有标记。
    ///</summary>
    procedure ClearMarkers;
    ///<summary>
    ///  中的点的顺序反转 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  此数组 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    procedure Reverse;
    ///<summary>
    ///  获取最后一个点以 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  此数组 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示在此的最后一个点 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</returns>
    function GetLastPoint: DNPointF;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示要测试的点。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPointF): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  中指定的可见剪辑区域 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pt">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示要测试的点。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  指定的点是否包含在此; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(pt: DNPointF; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，表示要测试的点。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPoint): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  , ，使用指定 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pt">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，表示要测试的点。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(pt: DNPoint; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(x: Single; y: Single; pen: DNPen): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</summary>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，它指定要测试的位置。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(point: DNPointF; pen: DNPen): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  并使用指定 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制具有指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(x: Single; y: Single; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  并使用指定 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="pt">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，它指定要测试的位置。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制具有指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(pt: DNPointF; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(x: Int32; y: Int32; pen: DNPen): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</summary>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，它指定要测试的位置。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(point: DNPoint; pen: DNPen): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  并使用指定 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制具有指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(x: Int32; y: Int32; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  并使用指定 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="pt">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，它指定要测试的位置。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制具有指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(pt: DNPoint; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  将一条线段追加到此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pt1">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  表示行的起始点。
    ///</param>
    ///  <param name="pt2">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示行的终结点。
    ///</param>
    procedure AddLine(pt1: DNPointF; pt2: DNPointF); overload;
    ///<summary>
    ///  将一条线段追加到此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="x1">
    ///  直线起始点 x 坐标。
    ///</param>
    ///  <param name="y1">
    ///  直线起始点的 y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  直线终点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  直线终点的 y 坐标。
    ///</param>
    procedure AddLine(x1: Single; y1: Single; x2: Single; y2: Single); overload;
    ///<summary>
    ///  将一系列连接的直线段追加到末尾 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示要定义要添加的直线线段的点。
    ///</param>
    procedure AddLines(points: TArray<DNPointF>); overload;
    ///<summary>
    ///  将一条线段追加到此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pt1">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  表示行的起始点。
    ///</param>
    ///  <param name="pt2">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，表示行的终结点。
    ///</param>
    procedure AddLine(pt1: DNPoint; pt2: DNPoint); overload;
    ///<summary>
    ///  向当前图形中追加一条线段。
    ///</summary>
    ///  <param name="x1">
    ///  直线起始点 x 坐标。
    ///</param>
    ///  <param name="y1">
    ///  直线起始点的 y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  直线终点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  直线终点的 y 坐标。
    ///</param>
    procedure AddLine(x1: Int32; y1: Int32; x2: Int32; y2: Int32); overload;
    ///<summary>
    ///  将一系列连接的直线段追加到末尾 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示要定义要添加的直线线段的点。
    ///</param>
    procedure AddLines(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  将椭圆弧追加到当前图。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示从中提取弧线的椭圆的矩形边界。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量弧线的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  和弧线的结束。
    ///</param>
    procedure AddArc(rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将椭圆弧追加到当前图。
    ///</summary>
    ///  <param name="x">
    ///  定义从中提取弧线的椭圆的矩形区域的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义从中提取弧线的椭圆的矩形区域的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义从中提取弧线的椭圆的矩形区域的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义从中提取弧线的椭圆的矩形区域的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量弧线的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  和弧线的结束。
    ///</param>
    procedure AddArc(x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将椭圆弧追加到当前图。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示从中提取弧线的椭圆的矩形边界。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量弧线的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  和弧线的结束。
    ///</param>
    procedure AddArc(rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将椭圆弧追加到当前图。
    ///</summary>
    ///  <param name="x">
    ///  定义从中提取弧线的椭圆的矩形区域的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义从中提取弧线的椭圆的矩形区域的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义从中提取弧线的椭圆的矩形区域的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义从中提取弧线的椭圆的矩形区域的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量弧线的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  和弧线的结束。
    ///</param>
    procedure AddArc(x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将三次方贝塞尔曲线添加到当前图。
    ///</summary>
    ///  <param name="pt1">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  它表示曲线的起始点。
    ///</param>
    ///  <param name="pt2">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  它表示曲线的第一个控制点。
    ///</param>
    ///  <param name="pt3">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  它表示曲线的第二个控制点。
    ///</param>
    ///  <param name="pt4">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，它表示曲线的终结点。
    ///</param>
    procedure AddBezier(pt1: DNPointF; pt2: DNPointF; pt3: DNPointF; pt4: DNPointF); overload;
    ///<summary>
    ///  将三次方贝塞尔曲线添加到当前图。
    ///</summary>
    ///  <param name="x1">
    ///  曲线起始点的 X 坐标。
    ///</param>
    ///  <param name="y1">
    ///  曲线起始点的 Y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  曲线的第一个控制点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  曲线的第一个控制点的 y 坐标。
    ///</param>
    ///  <param name="x3">
    ///  曲线的第二个控制点的 x 坐标。
    ///</param>
    ///  <param name="y3">
    ///  曲线的第二个控制点的 y 坐标。
    ///</param>
    ///  <param name="x4">
    ///  曲线的终结点的 x 坐标。
    ///</param>
    ///  <param name="y4">
    ///  曲线的终结点的 y 坐标。
    ///</param>
    procedure AddBezier(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; x4: Single; y4: Single); overload;
    ///<summary>
    ///  将连接三次方贝塞尔曲线的序列添加到当前图。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddBeziers(points: TArray<DNPointF>); overload;
    ///<summary>
    ///  将三次方贝塞尔曲线添加到当前图。
    ///</summary>
    ///  <param name="pt1">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  它表示曲线的起始点。
    ///</param>
    ///  <param name="pt2">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  它表示曲线的第一个控制点。
    ///</param>
    ///  <param name="pt3">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  它表示曲线的第二个控制点。
    ///</param>
    ///  <param name="pt4">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，它表示曲线的终结点。
    ///</param>
    procedure AddBezier(pt1: DNPoint; pt2: DNPoint; pt3: DNPoint; pt4: DNPoint); overload;
    ///<summary>
    ///  将三次方贝塞尔曲线添加到当前图。
    ///</summary>
    ///  <param name="x1">
    ///  曲线起始点的 X 坐标。
    ///</param>
    ///  <param name="y1">
    ///  曲线起始点的 Y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  曲线的第一个控制点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  曲线的第一个控制点的 y 坐标。
    ///</param>
    ///  <param name="x3">
    ///  曲线的第二个控制点的 x 坐标。
    ///</param>
    ///  <param name="y3">
    ///  曲线的第二个控制点的 y 坐标。
    ///</param>
    ///  <param name="x4">
    ///  曲线的终结点的 x 坐标。
    ///</param>
    ///  <param name="y4">
    ///  曲线的终结点的 y 坐标。
    ///</param>
    procedure AddBezier(x1: Int32; y1: Int32; x2: Int32; y2: Int32; x3: Int32; y3: Int32; x4: Int32; y4: Int32); overload;
    ///<summary>
    ///  将连接三次方贝塞尔曲线的序列添加到当前图。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddBeziers(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddCurve(points: TArray<DNPointF>); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="tension">
    ///  一个值，指定该曲线控制点间弯曲的量。
    ///  大于 1 的值将产生不可预知的结果。
    ///</param>
    procedure AddCurve(points: TArray<DNPointF>; tension: Single); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="offset">
    ///  中的元素的索引 <paramref name="points" />
    ///  用作在曲线中的第一个点的数组。
    ///</param>
    ///  <param name="numberOfSegments">
    ///  用于绘制曲线的段的数目。
    ///  可以将一个段看作一条连接两个点。
    ///</param>
    ///  <param name="tension">
    ///  一个值，指定该曲线控制点间弯曲的量。
    ///  大于 1 的值将产生不可预知的结果。
    ///</param>
    procedure AddCurve(points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddCurve(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="tension">
    ///  一个值，指定该曲线控制点间弯曲的量。
    ///  大于 1 的值将产生不可预知的结果。
    ///</param>
    procedure AddCurve(points: TArray<DNPoint>; tension: Single); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="offset">
    ///  中的元素的索引 <paramref name="points" />
    ///  用作在曲线中的第一个点的数组。
    ///</param>
    ///  <param name="numberOfSegments">
    ///  一个值，指定该曲线控制点间弯曲的量。
    ///  大于 1 的值将产生不可预知的结果。
    ///</param>
    ///  <param name="tension">
    ///  一个值，指定该曲线控制点间弯曲的量。
    ///  大于 1 的值将产生不可预知的结果。
    ///</param>
    procedure AddCurve(points: TArray<DNPoint>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>
    ///  将闭合的曲线添加到此路径。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddClosedCurve(points: TArray<DNPointF>); overload;
    ///<summary>
    ///  将闭合的曲线添加到此路径。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="tension">
    ///  介于 0 和 1 指定曲线弯曲 0 表示最小弯曲 （清晰角），1 表示平滑曲线的点之间的量之间的值。
    ///</param>
    procedure AddClosedCurve(points: TArray<DNPointF>; tension: Single); overload;
    ///<summary>
    ///  将闭合的曲线添加到此路径。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddClosedCurve(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  将闭合的曲线添加到此路径。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="tension">
    ///  介于 0 和 1 指定曲线弯曲 0 表示最小弯曲 （清晰角），1 表示平滑曲线的点之间的量之间的值。
    ///</param>
    procedure AddClosedCurve(points: TArray<DNPoint>; tension: Single); overload;
    ///<summary>
    ///  为此路径添加一个矩形。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  ，它表示要添加的矩形。
    ///</param>
    procedure AddRectangle(rect: DNRectangleF); overload;
    ///<summary>
    ///  将一系列矩形添加到此路径。
    ///</summary>
    ///  <param name="rects">
    ///  一个数组 <see cref="T:System.Drawing.RectangleF" />
    ///  这些结构表示要添加的矩形。
    ///</param>
    procedure AddRectangles(rects: TArray<DNRectangleF>); overload;
    ///<summary>
    ///  将一系列矩形添加到此路径。
    ///</summary>
    ///  <param name="rects">
    ///  一个数组 <see cref="T:System.Drawing.Rectangle" />
    ///  这些结构表示要添加的矩形。
    ///</param>
    procedure AddRectangles(rects: TArray<DNRectangle>); overload;
    ///<summary>
    ///  向当前路径中添加一个椭圆。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  ，它表示定义椭圆的边框。
    ///</param>
    procedure AddEllipse(rect: DNRectangleF); overload;
    ///<summary>
    ///  向当前路径中添加一个椭圆。
    ///</summary>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    procedure AddEllipse(x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  向当前路径中添加一个椭圆。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  ，它表示定义椭圆的边框。
    ///</param>
    procedure AddEllipse(rect: DNRectangle); overload;
    ///<summary>
    ///  向当前路径中添加一个椭圆。
    ///</summary>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角的 Y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    procedure AddEllipse(x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  将饼图形状的轮廓添加到此路径。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  ，它表示定义从中绘制饼图的椭圆的边框。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量扇形区的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  和扇形区，以从顺时针旋转度为单位的结束 <paramref name="startAngle" />
    ///  。
    ///</param>
    procedure AddPie(rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将饼图形状的轮廓添加到此路径。
    ///</summary>
    ///  <param name="x">
    ///  定义从中绘制饼图的椭圆的边框的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义从中绘制饼图的椭圆的边框的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义从中绘制饼图的椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义从中绘制饼图的椭圆的边框的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量扇形区的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  饼图部分，以从顺时针旋转度为单位的末尾 <paramref name="startAngle" />
    ///  。
    ///</param>
    procedure AddPie(x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将饼图形状的轮廓添加到此路径。
    ///</summary>
    ///  <param name="x">
    ///  定义从中绘制饼图的椭圆的边框的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义从中绘制饼图的椭圆的边框的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义从中绘制饼图的椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义从中绘制饼图的椭圆的边框的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量扇形区的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  饼图部分，以从顺时针旋转度为单位的末尾 <paramref name="startAngle" />
    ///  。
    ///</param>
    procedure AddPie(x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将多边形添加到此路径。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义要添加的多边形的结构。
    ///</param>
    procedure AddPolygon(points: TArray<DNPointF>); overload;
    ///<summary>
    ///  将多边形添加到此路径。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  定义要添加的多边形的结构。
    ///</param>
    procedure AddPolygon(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  指定将追加 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  到此路径。
    ///</summary>
    ///  <param name="addingPath">
    ///  要添加的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="connect">
    ///  一个布尔值，指定第一张图中添加的路径是否为此路径中的最后一个图形的一部分。
    ///  值为 <see langword="true" />
    ///  指定 （如果可能） 添加的路径中的第一个图形是此路径中的最后一个图形的一部分。
    ///  值为 <see langword="false" />
    ///  指定添加的路径中的第一个图形是独立于此路径中的最后一个图形。
    ///</param>
    procedure AddPath(addingPath: DNGraphicsPath; connect: Boolean);
    ///<summary>
    ///  将文本字符串添加到此路径。
    ///</summary>
    ///  <param name="s">
    ///  要添加的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="family">
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  ，它表示与绘制测试的字体名称。
    ///</param>
    ///  <param name="style">
    ///  一个 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举，它表示文本 （粗体、 斜体，等等） 的样式信息。
    ///  这必须转换为整数 （请参阅本节后面的示例代码）。
    ///</param>
    ///  <param name="emSize">
    ///  限定字符的 em 方形框的高度。
    ///</param>
    ///  <param name="origin">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示文本的开始位置的点。
    ///</param>
    ///  <param name="format">
    ///  一个 <see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定文本格式设置信息，如行距和对齐方式。
    ///</param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; origin: DNPointF; format: DNStringFormat); overload;
    ///<summary>
    ///  将文本字符串添加到此路径。
    ///</summary>
    ///  <param name="s">
    ///  要添加的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="family">
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  ，它表示与绘制测试的字体名称。
    ///</param>
    ///  <param name="style">
    ///  一个 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举，它表示文本 （粗体、 斜体，等等） 的样式信息。
    ///  这必须转换为整数 （请参阅本节后面的示例代码）。
    ///</param>
    ///  <param name="emSize">
    ///  限定字符的 em 方形框的高度。
    ///</param>
    ///  <param name="origin">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，表示文本的开始位置的点。
    ///</param>
    ///  <param name="format">
    ///  一个 <see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定文本格式设置信息，如行距和对齐方式。
    ///</param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; origin: DNPoint; format: DNStringFormat); overload;
    ///<summary>
    ///  将文本字符串添加到此路径。
    ///</summary>
    ///  <param name="s">
    ///  要添加的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="family">
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  ，它表示与绘制测试的字体名称。
    ///</param>
    ///  <param name="style">
    ///  一个 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举，它表示文本 （粗体、 斜体，等等） 的样式信息。
    ///  这必须转换为整数 （请参阅本节后面的示例代码）。
    ///</param>
    ///  <param name="emSize">
    ///  限定字符的 em 方形框的高度。
    ///</param>
    ///  <param name="layoutRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定文本的矩形。
    ///</param>
    ///  <param name="format">
    ///  一个 <see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定文本格式设置信息，如行距和对齐方式。
    ///</param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; layoutRect: DNRectangleF; format: DNStringFormat); overload;
    ///<summary>
    ///  将文本字符串添加到此路径。
    ///</summary>
    ///  <param name="s">
    ///  要添加的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="family">
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  ，它表示与绘制测试的字体名称。
    ///</param>
    ///  <param name="style">
    ///  一个 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举，它表示文本 （粗体、 斜体，等等） 的样式信息。
    ///  这必须转换为整数 （请参阅本节后面的示例代码）。
    ///</param>
    ///  <param name="emSize">
    ///  限定字符的 em 方形框的高度。
    ///</param>
    ///  <param name="layoutRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定文本的矩形。
    ///</param>
    ///  <param name="format">
    ///  一个 <see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定文本格式设置信息，如行距和对齐方式。
    ///</param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; layoutRect: DNRectangle; format: DNStringFormat); overload;
    ///<summary>
    ///  一个转换矩阵应用到此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它表示要应用的转换。
    ///</param>
    procedure Transform(matrix: DNMatrix);
    ///<summary>
    ///  返回限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</returns>
    function GetBounds: DNRectangleF; overload;
    ///<summary>
    ///  返回限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  时转换该路径指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定要应用于此路径，在计算的边框之前的转换。
    ///  此路径不永久转换;仅在计算的边框的过程使用转换。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</returns>
    function GetBounds(matrix: DNMatrix): DNRectangleF; overload;
    ///<summary>
    ///  返回限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  时转换的当前路径由指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  和与指定位置绘制 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定要应用于此路径，在计算的边框之前的转换。
    ///  此路径不永久转换;仅在计算的边框的过程使用转换。
    ///</param>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  用来绘制 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</returns>
    function GetBounds(matrix: DNMatrix; pen: DNPen): DNRectangleF; overload;
    ///<summary>
    ///  将此路径中的每个曲线转换为一系列连接的直线线段。
    ///</summary>
    procedure Flatten; overload;
    ///<summary>
    ///  应用指定的转换，然后将转换在此每条曲线 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  到一系列连接的直线线段。
    ///</summary>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  进行变换这 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  平面化前。
    ///</param>
    procedure Flatten(matrix: DNMatrix); overload;
    ///<summary>
    ///  将转换在此每条曲线 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  到一系列连接的直线线段。
    ///</summary>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  进行变换这 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  平面化前。
    ///</param>
    ///  <param name="flatness">
    ///  指定该曲线与其平展的近似值之间的最大允许的错误。
    ///  默认值为 0.25 的值。
    ///  减少平滑度值将增加的近似中的直线线段数量。
    ///</param>
    procedure Flatten(matrix: DNMatrix; flatness: Single); overload;
    ///<summary>
    ///  向路径添加附加的轮廓。
    ///</summary>
    ///  <param name="pen">
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它指定之间的路径的原始轮廓和此方法创建的新轮廓的宽度。
    ///</param>
    procedure Widen(pen: DNPen); overload;
    ///<summary>
    ///  添加到附加轮廓 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pen">
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它指定之间的路径的原始轮廓和此方法创建的新轮廓的宽度。
    ///</param>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定一个转换，以便在扩大转换之前应用到该路径。
    ///</param>
    procedure Widen(pen: DNPen; matrix: DNMatrix); overload;
    ///<summary>
    ///  替换此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ，用包含用指定的钢笔绘制此路径时，将填入的区域曲线。
    ///</summary>
    ///  <param name="pen">
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它指定之间的路径的原始轮廓和此方法创建的新轮廓的宽度。
    ///</param>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定一个转换，以便在扩大转换之前应用到该路径。
    ///</param>
    ///  <param name="flatness">
    ///  该值指定曲线展平。
    ///</param>
    procedure Widen(pen: DNPen; matrix: DNMatrix; flatness: Single); overload;
    ///<summary>
    ///  应用 warp 转换，由一个矩形和一个平行四边形，到此定义 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="destPoints">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义一个平行四边形的定义的矩形的结构 <paramref name="srcRect" />
    ///  转换。
    ///  该数组可以包含三个或四个元素。
    ///  如果数组包含三个元素，平行四边形的右下角所隐含的前三个点。
    ///</param>
    ///  <param name="srcRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示传递给定义的平行四边形的矩形的转换 <paramref name="destPoints" />
    ///  。
    ///</param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF); overload;
    ///<summary>
    ///  应用 warp 转换，由一个矩形和一个平行四边形，到此定义 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="destPoints">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义一个平行四边形的定义的矩形的结构 <paramref name="srcRect" />
    ///  转换。
    ///  该数组可以包含三个或四个元素。
    ///  如果数组包含三个元素，平行四边形的右下角所隐含的前三个点。
    ///</param>
    ///  <param name="srcRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示传递给定义的平行四边形的矩形的转换 <paramref name="destPoints" />
    ///  。
    ///</param>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定要应用于路径的几何变换。
    ///</param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix); overload;
    ///<summary>
    ///  适用定义一个矩形和一个平行四边形，至此 warp 变换 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="destPoints">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义一个平行四边形，向其定义的矩形的结构 <paramref name="srcRect" />
    ///  转换。
    ///  该数组可以包含三个或四个元素。
    ///  如果数组包含三个元素，平行四边形的右下角所隐含的前三个点。
    ///</param>
    ///  <param name="srcRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示传递给定义的平行四边形的矩形的转换 <paramref name="destPoints" />
    ///  。
    ///</param>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定要应用于路径的几何变换。
    ///</param>
    ///  <param name="warpMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WarpMode" />
    ///  枚举，用于指定此 warp 操作使用角度来看或双线性模式。
    ///</param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix; warpMode: DNWarpMode); overload;
    ///<summary>
    ///  应用 warp 转换，由一个矩形和一个平行四边形，到此定义 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="destPoints">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义一个平行四边形的定义的矩形的结构 <paramref name="srcRect" />
    ///  转换。
    ///  该数组可以包含三个或四个元素。
    ///  如果数组包含三个元素，平行四边形的右下角所隐含的前三个点。
    ///</param>
    ///  <param name="srcRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示传递给定义的平行四边形的矩形的转换 <paramref name="destPoints" />
    ///  。
    ///</param>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定要应用于路径的几何变换。
    ///</param>
    ///  <param name="warpMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WarpMode" />
    ///  枚举，用于指定此 warp 操作使用角度来看或双线性模式。
    ///</param>
    ///  <param name="flatness">
    ///  是一个介于 0 或 1，用于指定如何展平的生成路径。
    ///  有关详细信息，请参阅 <see cref="M:System.Drawing.Drawing2D.GraphicsPath.Flatten" />
    ///  方法。
    ///</param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix; warpMode: DNWarpMode; flatness: Single); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举，它确定如何在此形状的内部 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  进行填充。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举，用于指定如何在此形状的内部 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  进行填充。
    ///</returns>
    property FillMode: DNFillMode read get_FillMode write set_FillMode;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Drawing2D.PathData" />
    ///  封装的点数组 (<paramref name="points" />
    ///  ) 和类型 (<paramref name="types" />
    ///  ) 此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.PathData" />
    ///  封装的点数组和为此类型 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</returns>
    property PathData: DNPathData read get_PathData;
    ///<summary>
    ///  获取中的元素数 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  或 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />
    ///  数组。
    ///</summary>
    ///<returns>
    ///  一个整数，指定中的元素数 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  或 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />
    ///  数组。
    ///</returns>
    property PointCount: Int32 read get_PointCount;
    ///<summary>
    ///  获取类型中的相应点 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  数组。
    ///</summary>
    ///<returns>
    ///  在路径中指定相应的点的类型的字节数组。
    ///</returns>
    property PathTypes: TArray<Byte> read get_PathTypes;
    ///<summary>
    ///  获取路径中的点。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  表示路径的对象。
    ///</returns>
    property PathPoints: TArray<DNPointF> read get_PathPoints;
  end;

  TDNGraphicsPath = class(TDNGenericImport<DNGraphicsPathClass, DNGraphicsPath>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsStateClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{E333BB85-84A5-5579-B326-3FCA6BB060EC}']
  end;

  ///<summary>
  ///  表示状态的 <see cref="T:System.Drawing.Graphics" />
  ///  对象。
  ///  此对象将返回通过调用 <see cref="M:System.Drawing.Graphics.Save" />
  ///  方法。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsState')]
  DNGraphicsState = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8A98BC4E-E202-3891-AF68-E1F545AC82CE}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGraphicsState = class(TDNGenericImport<DNGraphicsStateClass, DNGraphicsState>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNMatrixClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{F48E5EE0-BFA5-5ED3-A983-09F1FEE84FB5}']
  { constructors } 

    ///<summary>
    ///  将 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  类的一个新实例初始化为单位矩阵。
    ///</summary>
    {class} function init: DNMatrix; overload;
    ///<summary>
    ///  使用指定的元素初始化 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="m11">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第一行和第一列中的值。
    ///</param>
    ///  <param name="m12">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第一行和第二列中的值。
    ///</param>
    ///  <param name="m21">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第二行和第一列中的值。
    ///</param>
    ///  <param name="m22">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第二行和第二列中的值。
    ///</param>
    ///  <param name="dx">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第三行和第一列中的值。
    ///</param>
    ///  <param name="dy">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第三行和第二列中的值。
    ///</param>
    {class} function init(m11: Single; m12: Single; m21: Single; m22: Single; dx: Single; dy: Single): DNMatrix; overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  类的一个新实例初始化为指定矩形和点数组定义的几何变换。
    ///</summary>
    ///  <param name="rect">
    ///  表示将变换的矩形的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</param>
    ///  <param name="plgpts">
    ///  一个由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构构成的数组，该数组表示矩形的左上角、右上角和左下角将变换为的平行四边形的三个点。
    ///  平行四边形的右下角的位置可从前三个角的位置导出。
    ///</param>
    {class} function init(rect: DNRectangleF; plgpts: TArray<DNPointF>): DNMatrix; overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  类的一个新实例初始化为指定矩形和点数组定义的几何变换。
    ///</summary>
    ///  <param name="rect">
    ///  表示将变换的矩形的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    ///  <param name="plgpts">
    ///  一个由三个 <see cref="T:System.Drawing.Point" />
    ///  结构构成的数组，该数组表示矩形的左上角、右上角和左下角将变换为的平行四边形的三个点。
    ///  平行四边形的右下角的位置可从前三个角的位置导出。
    ///</param>
    {class} function init(rect: DNRectangle; plgpts: TArray<DNPoint>): DNMatrix; overload;

  end;

  ///<summary>
  ///  封装表示几何变换的 3x3 仿射矩阵。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.Matrix')]
  DNMatrix = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8DE19850-6042-39C0-AA35-BE31D935886B}']
  { getters & setters } 

    function get_Elements: TArray<Single>;
    function get_OffsetX: Single;
    function get_OffsetY: Single;
    function get_IsInvertible: Boolean;
    function get_IsIdentity: Boolean;

  { methods } 

    ///<summary>
    ///  重置此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  得到单位矩阵的元素。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  对指定的点数组应用此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  所表示的几何变换。
    ///</summary>
    ///  <param name="pts">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  结构的数组，它表示要变换的点。
    ///</param>
    procedure TransformPoints(pts: TArray<DNPointF>); overload;
    ///<summary>
    ///  对指定的点数组应用此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  所表示的几何变换。
    ///</summary>
    ///  <param name="pts">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构的数组，它表示要变换的点。
    ///</param>
    procedure TransformPoints(pts: TArray<DNPoint>); overload;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  测试指定的对象是否是 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  以及是否与此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  相同。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的对象。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="obj" />
    ///  是等同于此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，则该方法返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回哈希代码。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</returns>
    function Clone: DNMatrix;
    ///<summary>
    ///  通过预先计算指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，将此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  与 <paramref name="matrix" />
    ///  参数中指定的矩阵相乘。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  将与之相乘。
    ///</param>
    procedure Multiply(matrix: DNMatrix); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  与 <paramref name="matrix" />
    ///  参数中指定的矩阵相乘，而且采用 <paramref name="order" />
    ///  参数中指定的顺序。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  将与之相乘。
    ///</param>
    ///  <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，表示乘法的顺序。
    ///</param>
    procedure Multiply(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>
    ///  通过预先计算转换向量，将指定的转换向量（<paramref name="offsetX" />
    ///  和 <paramref name="offsetY" />
    ///  ）应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="offsetX">
    ///  x 值，通过它转换此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    ///  <param name="offsetY">
    ///  y 值，通过它转换此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    procedure Translate(offsetX: Single; offsetY: Single); overload;
    ///<summary>
    ///  按指定的顺序，将指定的转换向量应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="offsetX">
    ///  x 值，通过它转换此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    ///  <param name="offsetY">
    ///  y 值，通过它转换此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，指定将转换应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  所采用的顺序（追加或预先计算）。
    ///</param>
    procedure Translate(offsetX: Single; offsetY: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  通过预先计算比例向量，将指定的比例向量应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="scaleX">
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  在 X 轴方向缩放的值。
    ///</param>
    ///  <param name="scaleY">
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  在 Y 轴方向缩放的值。
    ///</param>
    procedure Scale(scaleX: Single; scaleY: Single); overload;
    ///<summary>
    ///  使用指定的顺序，将指定的比例向量（<paramref name="scaleX" />
    ///  和 <paramref name="scaleY" />
    ///  ）应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="scaleX">
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  在 X 轴方向缩放的值。
    ///</param>
    ///  <param name="scaleY">
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  在 Y 轴方向缩放的值。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，指定应用比例向量到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的顺序（追加或预先计算）。
    ///</param>
    procedure Scale(scaleX: Single; scaleY: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  预先计算此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，沿原点并按指定角度顺时针旋转。
    ///</summary>
    ///  <param name="angle">
    ///  旋转的角度（单位：度）。
    ///</param>
    procedure Rotate(angle: Single); overload;
    ///<summary>
    ///  按照 <paramref name="angle" />
    ///  参数中指定的顺时针旋转量，对此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  沿原点（X 和 Y 坐标为零处）旋转。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度（范围）（单位：度）。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，它指定旋转此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  时所采用的顺序（追加或预先计算）。
    ///</param>
    procedure Rotate(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  沿 <paramref name="point" />
    ///  参数中指定的点并通过预先计算该旋转，来顺时针旋转此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度（范围）（单位：度）。
    ///</param>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示旋转中心。
    ///</param>
    procedure RotateAt(angle: Single; point: DNPointF); overload;
    ///<summary>
    ///  按指定的顺序，沿指定点顺时针旋转该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="angle">
    ///  旋转的角度（单位：度）。
    ///</param>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示旋转中心。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，它指定旋转的顺序（追加或预先计算）。
    ///</param>
    procedure RotateAt(angle: Single; point: DNPointF; order: DNMatrixOrder); overload;
    ///<summary>
    ///  通过预先计算切变变换，将指定的切变向量应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="shearX">
    ///  水平切变因子。
    ///</param>
    ///  <param name="shearY">
    ///  垂直切变因子。
    ///</param>
    procedure Shear(shearX: Single; shearY: Single); overload;
    ///<summary>
    ///  按指定的顺序，将指定的切变向量应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="shearX">
    ///  水平切变因子。
    ///</param>
    ///  <param name="shearY">
    ///  垂直切变因子。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，指定应用切变所采用的顺序（追加或预先计算）。
    ///</param>
    procedure Shear(shearX: Single; shearY: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  如果此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  是可逆转的，则进行逆转。
    ///</summary>
    procedure Invert;
    ///<summary>
    ///  将数组中的每个矢量与矩阵相乘。
    ///  该矩阵的转换元素（第三行）被忽略。
    ///</summary>
    ///  <param name="pts">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构的数组，它表示要变换的点。
    ///</param>
    procedure TransformVectors(pts: TArray<DNPointF>); overload;
    ///<summary>
    ///  将数组中的每个矢量与矩阵相乘。
    ///  该矩阵的转换元素（第三行）被忽略。
    ///</summary>
    ///  <param name="pts">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构的数组，它表示要变换的点。
    ///</param>
    procedure VectorTransformPoints(pts: TArray<DNPoint>);
    ///<summary>
    ///  只将该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的缩放和旋转成分应用到指定的点数组。
    ///</summary>
    ///  <param name="pts">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构的数组，它表示要变换的点。
    ///</param>
    procedure TransformVectors(pts: TArray<DNPoint>); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个浮点值数组，它表示该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的元素。
    ///</summary>
    ///<returns>
    ///  一个浮点值数组，它表示该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的元素。
    ///</returns>
    property Elements: TArray<Single> read get_Elements;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的 x 转换值（dx 值，或第三行、第一列中的元素）。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的 x 转换值。
    ///</returns>
    property OffsetX: Single read get_OffsetX;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的 y 转换值（dy 值，或第三行、第二列中的元素）。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的 y 转换值。
    ///</returns>
    property OffsetY: Single read get_OffsetY;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  是否可逆转。
    ///</summary>
    ///<returns>
    ///  如果该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  是可逆转的，则该属性为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInvertible: Boolean read get_IsInvertible;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  是否是单位矩阵。
    ///</summary>
    ///<returns>
    ///  如果该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  是标识，则该属性为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsIdentity: Boolean read get_IsIdentity;
  end;

  TDNMatrix = class(TDNGenericImport<DNMatrixClass, DNMatrix>) end;

  //-------------namespace: System.Drawing----------------
  DNFontClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{F89AC109-B6DF-5073-9E9F-EBB7614B5634}']
  { constructors } 

    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.Font" />
    ///  ，它使用指定的现有 <see cref="T:System.Drawing.Font" />
    ///  和 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举。
    ///</summary>
    ///  <param name="prototype">
    ///  从中创建新 <see cref="T:System.Drawing.Font" />
    ///  的现有 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</param>
    ///  <param name="newStyle">
    ///  应用于新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///  可以用 <see langword="OR" />
    ///  运算符将 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举的多个值组合起来。
    ///</param>
    {class} function init(prototype: DNFont; newStyle: DNFontStyle): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式和单位初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式、单位和字符集初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///  <param name="gdiCharSet">
    ///  一个 <see cref="T:System.Byte" />
    ///  ，它指定
    ///  用于新字体的 GDI 字符集。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式、单位和字符集初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///  <param name="gdiCharSet">
    ///  一个 <see cref="T:System.Byte" />
    ///  ，它指定
    ///  用于此字体的 GDI 字符集。
    ///</param>
    ///  <param name="gdiVerticalFont">
    ///  一个布尔值，该值指示新字体是否从 GDI 垂直字体派生。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  为 <see langword="null " />
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte; gdiVerticalFont: Boolean): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式、单位和字符集初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///  <param name="gdiCharSet">
    ///  一个 <see cref="T:System.Byte" />
    ///  ，它指定用于此字体的 GDI 字符集。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式、单位和字符集初始化新 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///  <param name="gdiCharSet">
    ///  一个 <see cref="T:System.Byte" />
    ///  ，它指定用于此字体的 GDI 字符集。
    ///</param>
    ///  <param name="gdiVerticalFont">
    ///  一个布尔值，该值指示新 <see cref="T:System.Drawing.Font" />
    ///  是否从 GDI 垂直字体派生。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte; gdiVerticalFont: Boolean): DNFont; overload;
    ///<summary>
    ///  使用指定的大小和样式初始化新 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（以磅为单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle): DNFont; overload;
    ///<summary>
    ///  使用指定的大小和单位初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///  将此样式设置为 <see cref="F:System.Drawing.FontStyle.Regular" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>
    ///  使用指定的大小初始化新 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（以磅为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式和单位初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无限大或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>
    ///  使用指定的大小和样式初始化新 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（以磅为单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle): DNFont; overload;
    ///<summary>
    ///  使用指定的大小和单位初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///  样式设置为 <see cref="F:System.Drawing.FontStyle.Regular" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>
    ///  使用指定的大小初始化新 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（以磅为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无限大或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single): DNFont; overload;

  { static methods } 

    ///<summary>
    ///  从指定的 Windows 句柄创建一个 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="hfont">
    ///  GDI 字体的 Windows 句柄。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="hfont" />
    ///  指向一个对象，它不 TrueType 字体。
    ///</exception>
    {class} function FromHfont(hfont: IntPtr): DNFont;
    ///<summary>
    ///  从指定的 GDI 逻辑字体 (LOGFONT) 结构创建一个 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="lf">
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示从中创建 <see cref="T:System.Drawing.Font" />
    ///  的 GDI <see langword="LOGFONT" />
    ///  结构。
    ///</param>
    ///  <param name="hdc">
    ///  包含有关 <paramref name="lf" />
    ///  结构的其他信息的设备上下文的句柄。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  不，该字体为 TrueType 字体。
    ///</exception>
    {class} function FromLogFont(lf: DDN.mscorlib.DNObject; hdc: IntPtr): DNFont; overload;
    ///<summary>
    ///  从指定的 GDI 逻辑字体 (LOGFONT) 结构创建一个 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="lf">
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示从中创建 <see cref="T:System.Drawing.Font" />
    ///  的 GDI <see langword="LOGFONT" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    {class} function FromLogFont(lf: DDN.mscorlib.DNObject): DNFont; overload;
    ///<summary>
    ///  从设备上下文的指定 Windows 句柄创建 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="hdc">
    ///  设备上下文的句柄。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的设备上下文的字体不 TrueType 字体。
    ///</exception>
    {class} function FromHdc(hdc: IntPtr): DNFont;

  end;

  ///<summary>
  ///  定义特定的文本格式，包括字体、字号和样式特性。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Font')]
  DNFont = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{091B628B-3473-38BF-9A98-4F9DB4FB61F8}']
  { getters & setters } 

    function get_FontFamily: DNFontFamily;
    function get_Bold: Boolean;
    function get_GdiCharSet: Byte;
    function get_GdiVerticalFont: Boolean;
    function get_Italic: Boolean;
    function get_Name: string;
    function get_OriginalFontName: string;
    function get_Strikeout: Boolean;
    function get_Underline: Boolean;
    function get_Style: DNFontStyle;
    function get_Size: Single;
    function get_SizeInPoints: Single;
    function get_Unit: DNGraphicsUnit;
    function get_Height: Int32;
    function get_IsSystemFont: Boolean;
    function get_SystemFontName: string;

  { methods } 

    ///<summary>
    ///  从此 <see cref="T:System.Drawing.Font" />
    ///  创建一个 GDI 逻辑字体 (LOGFONT) 结构。
    ///</summary>
    ///  <param name="logFont">
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示此方法创建的 <see langword="LOGFONT" />
    ///  结构。
    ///</param>
    procedure ToLogFont(logFont: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  从此 <see cref="T:System.Drawing.Font" />
    ///  创建一个 GDI 逻辑字体 (LOGFONT) 结构。
    ///</summary>
    ///  <param name="logFont">
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示此方法创建的 <see langword="LOGFONT" />
    ///  结构。
    ///</param>
    ///  <param name="graphics">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它提供 <see langword="LOGFONT" />
    ///  结构的其他信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure ToLogFont(logFont: DDN.mscorlib.DNObject; graphics: DNGraphics); overload;
    ///<summary>
    ///  返回此 <see cref="T:System.Drawing.Font" />
    ///  的句柄。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的 Windows 句柄。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  该操作不成功。
    ///</exception>
    function ToHfont: IntPtr;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Font" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此方法创建的、强制转换为 <see cref="T:System.Object" />
    ///  的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Font" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  指示指定对象是否为 <see cref="T:System.Drawing.Font" />
    ///  ，以及是否具有与此 <see cref="T:System.Drawing.Font" />
    ///  相同的 <see cref="P:System.Drawing.Font.FontFamily" />
    ///  、<see cref="P:System.Drawing.Font.GdiVerticalFont" />
    ///  、<see cref="P:System.Drawing.Font.GdiCharSet" />
    ///  、<see cref="P:System.Drawing.Font.Style" />
    ///  、<see cref="P:System.Drawing.Font.Size" />
    ///  和 <see cref="P:System.Drawing.Font.Unit" />
    ///  属性值。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的对象。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="obj" />
    ///  参数为 <see cref="T:System.Drawing.Font" />
    ///  并且具有与此 <see cref="T:System.Drawing.Font" />
    ///  相同的 <see cref="P:System.Drawing.Font.FontFamily" />
    ///  、<see cref="P:System.Drawing.Font.GdiVerticalFont" />
    ///  、<see cref="P:System.Drawing.Font.GdiCharSet" />
    ///  、<see cref="P:System.Drawing.Font.Style" />
    ///  、<see cref="P:System.Drawing.Font.Size" />
    ///  和 <see cref="P:System.Drawing.Font.Unit" />
    ///  属性值，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回此 <see cref="T:System.Drawing.Font" />
    ///  可读的字符串表示形式。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.Font" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  采用指定的 <see cref="T:System.Drawing.Graphics" />
    ///  的当前单位，返回此字体的行距。
    ///</summary>
    ///  <param name="graphics">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  对象，它存储显示设备的垂直分辨率（每英寸点数）、页面单位和页面比例设置。
    ///</param>
    ///<returns>
    ///  此字体的行距（以像素为单位）。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetHeight(graphics: DNGraphics): Single; overload;
    ///<summary>
    ///  返回此字体的行距（以像素为单位）。
    ///</summary>
    ///<returns>
    ///  此字体的行距（以像素为单位）。
    ///</returns>
    function GetHeight: Single; overload;
    ///<summary>
    ///  当用指定的垂直分辨率绘制到设备时，返回此 <see cref="T:System.Drawing.Font" />
    ///  的高度（以像素为单位）。
    ///</summary>
    ///  <param name="dpi">
    ///  用于计算字体高度的垂直分辨率，以每英寸的点数为单位。
    ///</param>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的高度（以像素为单位）。
    ///</returns>
    function GetHeight(dpi: Single): Single; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Drawing.FontFamily" />
    ///  关联的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Drawing.FontFamily" />
    ///  关联的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    property FontFamily: DNFontFamily read get_FontFamily;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Font" />
    ///  是否为粗体。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Font" />
    ///  为粗体，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Bold: Boolean read get_Bold;
    ///<summary>
    ///  获取一个字节值，该值指定此 <see cref="T:System.Drawing.Font" />
    ///  使用的 GDI 字符集。
    ///</summary>
    ///<returns>
    ///  一个字节值，该值指定此 GDI 使用的 <see cref="T:System.Drawing.Font" />
    ///  字符集。
    ///  默认值为 1。
    ///</returns>
    property GdiCharSet: Byte read get_GdiCharSet;
    ///<summary>
    ///  获取一个布尔值，该值指示此 <see cref="T:System.Drawing.Font" />
    ///  是否从 GDI 垂直字体派生。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Font" />
    ///  是从 GDI 垂直字体派生的，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property GdiVerticalFont: Boolean read get_GdiVerticalFont;
    ///<summary>
    ///  获取一个值，该值指示此字体是否已应用斜体样式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  表明此字体已应用斜体样式；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Italic: Boolean read get_Italic;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的字体名称。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的字体名称的字符串表示形式。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取最初指定的字体的名称。
    ///</summary>
    ///<returns>
    ///  表示最初指定的字体的名称的字符串。
    ///</returns>
    property OriginalFontName: string read get_OriginalFontName;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Font" />
    ///  是否指定贯穿字体的横线。
    ///</summary>
    ///<returns>
    ///  如果有一条横线贯穿此 <see cref="T:System.Drawing.Font" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Strikeout: Boolean read get_Strikeout;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Font" />
    ///  是否有下划线。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Font" />
    ///  有下划线，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Underline: Boolean read get_Underline;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的样式信息。
    ///</summary>
    ///<returns>
    ///  包含此 <see cref="T:System.Drawing.Font" />
    ///  的样式信息的 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举。
    ///</returns>
    property Style: DNFontStyle read get_Style;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的全身大小，单位采用 <see cref="P:System.Drawing.Font.Unit" />
    ///  属性指定的单位。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的全身大小。
    ///</returns>
    property Size: Single read get_Size;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的全身大小（以点为单位）。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的全身大小（以点为单位）。
    ///</returns>
    property SizeInPoints: Single read get_SizeInPoints;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的度量单位。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  ，它表示此 <see cref="T:System.Drawing.Font" />
    ///  的度量单位。
    ///</returns>
    property &Unit: DNGraphicsUnit read get_Unit;
    ///<summary>
    ///  获取此字体的行距。
    ///</summary>
    ///<returns>
    ///  此字体的行距（以像素为单位）。
    ///</returns>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  获取一个值，该值表示此字体是否是 <see cref="T:System.Drawing.SystemFonts" />
    ///  的一个成员。
    ///</summary>
    ///<returns>
    ///  如果此字体是 <see cref="T:System.Drawing.SystemFonts" />
    ///  的一个成员，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSystemFont: Boolean read get_IsSystemFont;
    ///<summary>
    ///  如果 <see cref="P:System.Drawing.Font.IsSystemFont" />
    ///  属性返回 <see langword="true" />
    ///  ，则获取系统字体的名称。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="P:System.Drawing.Font.IsSystemFont" />
    ///  返回 <see langword="true" />
    ///  ，则为系统字体的名称；否则为一个空字符串 ("")。
    ///</returns>
    property SystemFontName: string read get_SystemFontName;
  end;

  TDNFont = class(TDNGenericImport<DNFontClass, DNFont>) end;

  //-------------namespace: System.Drawing----------------
  DNFontFamilyClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{8ACB9960-8FA2-5EB0-98A5-806C8FF6BA78}']
  { static getter & setter } 

    {class} function get_Families: TArray<DNFontFamily>;
    {class} function get_GenericSansSerif: DNFontFamily;
    {class} function get_GenericSerif: DNFontFamily;
    {class} function get_GenericMonospace: DNFontFamily;

  { constructors } 

    ///<summary>
    ///  用指定的名称初始化新 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  新 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  为空字符串 ("")。
    ///  - 或 -
    ///  <paramref name="name" />
    ///  指定运行该应用程序的计算机未安装的字体。
    ///  - 或 -
    ///  <paramref name="name" />
    ///  指定不是 TrueType 字体的字体。
    ///</exception>
    {class} function init(name: string): DNFontFamily; overload;

  { static methods } 

    ///<summary>
    ///  返回一个数组，该数组包含指定的图形上下文可用的所有 <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</summary>
    ///  <param name="graphics">
    ///  从其返回 <see cref="T:System.Drawing.FontFamily" />
    ///  对象的 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  指定的 <see cref="T:System.Drawing.Graphics" />
    ///  对象可用的 <see cref="T:System.Drawing.FontFamily" />
    ///  对象的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics " />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetFamilies(graphics: DNGraphics): TArray<DNFontFamily>;

  { static propertys } 

    ///<summary>
    ///  返回一个数组，该数组包含与当前图形上下文相关的所有 <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  与当前图形上下文相关的 <see cref="T:System.Drawing.FontFamily" />
    ///  对象的数组。
    ///</returns>
    {class} property Families: TArray<DNFontFamily> read get_Families;
    ///<summary>
    ///  获取一般 sans serif <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  表示一般 sans serif 字体的 <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</returns>
    {class} property GenericSansSerif: DNFontFamily read get_GenericSansSerif;
    ///<summary>
    ///  获取一般 serif <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示一般 serif 字体的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</returns>
    {class} property GenericSerif: DNFontFamily read get_GenericSerif;
    ///<summary>
    ///  获取一般 monospace <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示一般 monospace 字体的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</returns>
    {class} property GenericMonospace: DNFontFamily read get_GenericMonospace;
  end;

  ///<summary>
  ///  定义有着相似的基本设计但在形式上有某些差异的一组字样。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.FontFamily')]
  DNFontFamily = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{FE31F082-2955-34AC-8BA8-9BC7BF319D78}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    ///<summary>
    ///  指示指定的 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举是否可用。
    ///</summary>
    ///  <param name="style">
    ///  要测试的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果指定的 <see cref="T:System.Drawing.FontStyle" />
    ///  可用，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsStyleAvailable(style: DNFontStyle): Boolean;
    ///<summary>
    ///  获取指定样式的 em 方形的高度，采用字体设计单位。
    ///</summary>
    ///  <param name="style">
    ///  为其获取全身高度的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///<returns>
    ///  em 方形的高度。
    ///</returns>
    function GetEmHeight(style: DNFontStyle): Int32;
    ///<summary>
    ///  返回指定样式的 <see cref="T:System.Drawing.FontFamily" />
    ///  的行距，采用设计单位。
    ///  行距是两个连续文本行的基线之间的垂直距离。
    ///</summary>
    ///  <param name="style">
    ///  要应用的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///<returns>
    ///  两行相邻文本之间的距离。
    ///</returns>
    function GetLineSpacing(style: DNFontStyle): Int32;
    ///<summary>
    ///  指示指定的对象是否为 <see cref="T:System.Drawing.FontFamily" />
    ///  以及是否与此 <see cref="T:System.Drawing.FontFamily" />
    ///  相等。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的对象。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="obj" />
    ///  为 <see cref="T:System.Drawing.FontFamily" />
    ///  且与此 <see cref="T:System.Drawing.FontFamily" />
    ///  相等，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.FontFamily" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.FontFamily" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.FontFamily" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.FontFamily" />
    ///  转换为可读的字符串表示形式。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  用指定的语言返回此 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</summary>
    ///  <param name="language">
    ///  返回此名称所用的语言。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，它用指定的语言表示此 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</returns>
    function GetName(language: Int32): string;
    ///<summary>
    ///  返回指定样式的 <see cref="T:System.Drawing.FontFamily" />
    ///  的单元格上升，采用设计单位。
    ///</summary>
    ///  <param name="style"><see cref="T:System.Drawing.FontStyle" />
    ///  ，它包含字体的样式信息。
    ///</param>
    ///<returns>
    ///  使用了指定的 <see cref="T:System.Drawing.FontStyle" />
    ///  的此 <see cref="T:System.Drawing.FontFamily" />
    ///  的单元格上升。
    ///</returns>
    function GetCellAscent(style: DNFontStyle): Int32;
    ///<summary>
    ///  返回指定样式的 <see cref="T:System.Drawing.FontFamily" />
    ///  的单元格下降，采用设计单位。
    ///</summary>
    ///  <param name="style"><see cref="T:System.Drawing.FontStyle" />
    ///  ，它包含字体的样式信息。
    ///</param>
    ///<returns>
    ///  使用了指定的 <see cref="T:System.Drawing.FontStyle" />
    ///  的此 <see cref="T:System.Drawing.FontFamily" />
    ///  的单元格下降度量。
    ///</returns>
    function GetCellDescent(style: DNFontStyle): Int32;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，表示此 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</returns>
    property Name: string read get_Name;
  end;

  TDNFontFamily = class(TDNGenericImport<DNFontFamilyClass, DNFontFamily>) end;

  //-------------namespace: System.Drawing----------------
  DNGraphicsClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{8B64F2D6-2CA6-5EB8-AAD8-B244F4CE7A55}']
  { static methods } 

    ///<summary>
    ///  从设备上下文的指定句柄创建新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="hdc">
    ///  设备上下文的句柄。
    ///</param>
    ///<returns>
    ///  此方法为指定的设备上下文返回新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    {class} function FromHdc(hdc: IntPtr): DNGraphics; overload;
    ///<summary>
    ///  返回指定设备上下文的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="hdc">
    ///  设备上下文的句柄。
    ///</param>
    ///<returns>
    ///  指定设备上下文的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    {class} function FromHdcInternal(hdc: IntPtr): DNGraphics;
    ///<summary>
    ///  创建指定 Windows 句柄的新 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="hwnd">
    ///  窗口的句柄。
    ///</param>
    ///<returns>
    ///  指定窗口句柄的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    {class} function FromHwndInternal(hwnd: IntPtr): DNGraphics;
    ///<summary>
    ///  从指定的 <see cref="T:System.Drawing.Image" />
    ///  创建新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  从中创建新 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法为指定的 <see cref="T:System.Drawing.Image" />
    ///  返回一个新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Exception"><paramref name="image" />
    ///  具有索引的像素格式或其格式未定义。
    ///</exception>
    {class} function FromImage(image: DNImage): DNGraphics;
    ///<summary>
    ///  获取当前 Windows 的半色调调色板的句柄。
    ///</summary>
    ///<returns>
    ///  指定调色板的句柄的内部指针。
    ///</returns>
    {class} function GetHalftonePalette: IntPtr;
    ///<summary>
    ///  从设备上下文的指定句柄和设备的句柄创建新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="hdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="hdevice">
    ///  设备的句柄。
    ///</param>
    ///<returns>
    ///  此方法为指定的设备上下文和设备返回新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    {class} function FromHdc(hdc: IntPtr; hdevice: IntPtr): DNGraphics; overload;
    ///<summary>
    ///  从窗口的指定句柄创建新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="hwnd">
    ///  窗口的句柄。
    ///</param>
    ///<returns>
    ///  此方法为指定的窗口句柄返回新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    {class} function FromHwnd(hwnd: IntPtr): DNGraphics;

  end;

  ///<summary>
  ///  封装一个 GDI+ 绘图图面。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Graphics')]
  DNGraphics = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{3EAFE9D3-C1B1-3755-AB28-DA7CAFBF37FC}']
  { getters & setters } 

    function get_CompositingMode: DNCompositingMode;
    procedure set_CompositingMode(value: DNCompositingMode);
    function get_RenderingOrigin: DNPoint;
    procedure set_RenderingOrigin(value: DNPoint);
    function get_CompositingQuality: DNCompositingQuality;
    procedure set_CompositingQuality(value: DNCompositingQuality);
    function get_TextRenderingHint: DNTextRenderingHint;
    procedure set_TextRenderingHint(value: DNTextRenderingHint);
    function get_TextContrast: Int32;
    procedure set_TextContrast(value: Int32);
    function get_SmoothingMode: DNSmoothingMode;
    procedure set_SmoothingMode(value: DNSmoothingMode);
    function get_PixelOffsetMode: DNPixelOffsetMode;
    procedure set_PixelOffsetMode(value: DNPixelOffsetMode);
    function get_InterpolationMode: DNInterpolationMode;
    procedure set_InterpolationMode(value: DNInterpolationMode);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_PageUnit: DNGraphicsUnit;
    procedure set_PageUnit(value: DNGraphicsUnit);
    function get_PageScale: Single;
    procedure set_PageScale(value: Single);
    function get_DpiX: Single;
    function get_DpiY: Single;
    function get_Clip: DNRegion;
    procedure set_Clip(value: DNRegion);
    function get_ClipBounds: DNRectangleF;
    function get_IsClipEmpty: Boolean;
    function get_VisibleClipBounds: DNRectangleF;
    function get_IsVisibleClipEmpty: Boolean;

  { methods } 

    ///<summary>
    ///  释放通过以前对此 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  方法的调用获得的设备上下文句柄。
    ///</summary>
    ///  <param name="hdc">
    ///  通过以前对此 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  方法的调用获得的设备上下文句柄。
    ///</param>
    procedure ReleaseHdc(hdc: IntPtr); overload;
    ///<summary>
    ///  释放设备上下文的句柄。
    ///</summary>
    ///  <param name="hdc">
    ///  设备上下文的句柄。
    ///</param>
    procedure ReleaseHdcInternal(hdc: IntPtr);
    ///<summary>
    ///  通过使此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵左乘指定的平移来更改坐标系统的原点。
    ///</summary>
    ///  <param name="dx">
    ///  平移的 x 坐标。
    ///</param>
    ///  <param name="dy">
    ///  平移的 y 坐标。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>
    ///  通过以指定顺序将指定平移应用于此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵来更改坐标系统的原点。
    ///</summary>
    ///  <param name="dx">
    ///  平移的 x 坐标。
    ///</param>
    ///  <param name="dy">
    ///  平移的 y 坐标。
    ///</param>
    ///  <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举的成员，它指定是将平移添加到变换矩阵前还是追加到变换矩阵后。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  获取与指定的 <see cref="T:System.Drawing.Color" />
    ///  结构最接近的颜色。
    ///</summary>
    ///  <param name="color"><see cref="T:System.Drawing.Color" />
    ///  结构，为其查找匹配项。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示与 <paramref name="color" />
    ///  参数指定的颜色最接近的颜色。
    ///</returns>
    function GetNearestColor(color: DNColor): DNColor;
    ///<summary>
    ///  绘制一条连接由坐标对指定的两个点的线条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线条的颜色、宽度和样式。
    ///</param>
    ///  <param name="x1">
    ///  第一个点的 x 坐标。
    ///</param>
    ///  <param name="y1">
    ///  第一个点的 y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  第二个点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  第二个点的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLine(pen: DNPen; x1: Int32; y1: Int32; x2: Int32; y2: Int32); overload;
    ///<summary>
    ///  绘制由 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的矩形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定矩形的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect">
    ///  表示要绘制的矩形的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawRectangle(pen: DNPen; rect: DNRectangle); overload;
    ///<summary>
    ///  绘制由坐标对、宽度和高度指定的矩形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定矩形的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  要绘制的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要绘制的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要绘制的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要绘制的矩形的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawRectangle(pen: DNPen; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  绘制由坐标对、宽度和高度指定的矩形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定矩形的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  要绘制的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要绘制的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要绘制的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要绘制的矩形的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawRectangle(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  绘制边界 <see cref="T:System.Drawing.RectangleF" />
    ///  定义的椭圆。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它定义椭圆的边界。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawEllipse(pen: DNPen; rect: DNRectangleF); overload;
    ///<summary>
    ///  清除整个绘图面并以指定背景色填充。
    ///</summary>
    ///  <param name="color"><see cref="T:System.Drawing.Color" />
    ///  结构，它表示绘图面的背景色。
    ///</param>
    procedure Clear(color: DNColor);
    ///<summary>
    ///  填充由一对坐标、一个宽度和一个高度指定的矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  要填充的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要填充的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要填充的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要填充的矩形的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillRectangle(brush: DNBrush; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示要填充的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillRectangle(brush: DNBrush; rect: DNRectangle); overload;
    ///<summary>
    ///  填充由一对坐标、一个宽度和一个高度指定的矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  要填充的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要填充的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要填充的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要填充的矩形的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillRectangle(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  填充由 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的一系列矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rects"><see cref="T:System.Drawing.Rectangle" />
    ///  结构数组，这些结构表示要填充的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rects" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="rects" />
    ///  是一个长度为零的数组。
    ///</exception>
    procedure FillRectangles(brush: DNBrush; rects: TArray<DNRectangle>); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.Point" />
    ///  结构指定的点数组所定义的多边形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构表示要填充的多边形的顶点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  填充边框所定义的椭圆的内部，该边框由一对坐标、一个宽度和一个高度指定。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角的 Y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillEllipse(brush: DNBrush; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.Region" />
    ///  的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  ，它表示要填充的区域。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillRegion(brush: DNBrush; region: DNRegion);
    ///<summary>
    ///  在指定位置并且用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="x">
    ///  所绘制文本的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制文本的左上角的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; x: Single; y: Single); overload;
    ///<summary>
    ///  在指定矩形并且用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="layoutRectangle"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制文本的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; layoutRectangle: DNRectangleF); overload;
    ///<summary>
    ///  使用指定 <see cref="T:System.Drawing.StringFormat" />
    ///  的格式化特性，用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象在指定的矩形中绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="layoutRectangle"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制文本的位置。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定应用于所绘制文本的格式化特性（如行距和对齐方式）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; layoutRectangle: DNRectangleF; format: DNStringFormat); overload;
    ///<summary>
    ///  测量用指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制并用指定的 <see cref="T:System.Drawing.StringFormat" />
    ///  格式化的指定字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  定义字符串的文本格式。
    ///</param>
    ///  <param name="layoutArea"><see cref="T:System.Drawing.SizeF" />
    ///  结构，它指定文本的最大布局区域。
    ///</param>
    ///  <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它表示字符串的格式化信息（如行距）。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示在 <paramref name="text" />
    ///  参数中指定的、用 <paramref name="font" />
    ///  参数和 <paramref name="stringFormat" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF; stringFormat: DNStringFormat): DNSizeF; overload;
    ///<summary>
    ///  测量用指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制的指定字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示 <paramref name="text" />
    ///  参数指定的、使用 <paramref name="font" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont): DNSizeF; overload;
    ///<summary>
    ///  测量用指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制并用指定的 <see cref="T:System.Drawing.StringFormat" />
    ///  格式化的指定字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="width">
    ///  字符串的最大宽度。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它表示字符串的格式化信息（如行距）。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示在 <paramref name="text" />
    ///  参数中指定的、用 <paramref name="font" />
    ///  参数和 <paramref name="stringFormat" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont; width: Int32; format: DNStringFormat): DNSizeF; overload;
    ///<summary>
    ///  在由坐标对指定的位置，使用图像的原始物理大小绘制指定的图像。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Int32; y: Int32); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; rect: DNRectangle); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  所绘制图像的宽度。
    ///</param>
    ///  <param name="height">
    ///  所绘制图像的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
    ///  方法的执行。
    ///</param>
    ///  <param name="callbackData">
    ///  一个值，它为 <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托指定在检查是否停止执行 <see langword="DrawImage" />
    ///  方法时要使用的附加数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: IntPtr); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的矩形。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示新的剪辑区域。
    ///</param>
    procedure SetClip(rect: DNRectangle); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为当前剪辑区域与指定 <see cref="T:System.Drawing.Region" />
    ///  的组合结果。
    ///</summary>
    ///  <param name="region">
    ///  要组合的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///  <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  枚举的成员，它指定要使用的组合操作。
    ///</param>
    procedure SetClip(region: DNRegion; combineMode: DNCombineMode); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域，以排除 <see cref="T:System.Drawing.Region" />
    ///  所指定的区域。
    ///</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  ，它指定要从剪辑区域排除的区域。
    ///</param>
    procedure ExcludeClip(region: DNRegion); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域沿水平方向和垂直方向平移指定的量。
    ///</summary>
    ///  <param name="dx">
    ///  平移的 x 坐标。
    ///</param>
    ///  <param name="dy">
    ///  平移的 y 坐标。
    ///</param>
    procedure TranslateClip(dx: Int32; dy: Int32); overload;
    ///<summary>
    ///  获取累积的图形上下文。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  ，表示累积的图形上下文。
    ///</returns>
    function GetContextInfo: DDN.mscorlib.DNObject;
    ///<summary>
    ///  指示 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的矩形是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="rect">
    ///  要测试其可见性的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="rect" />
    ///  参数指定的矩形包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangle): Boolean; overload;
    ///<summary>
    ///  保存此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前状态，并用 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  标识保存的状态。
    ///</summary>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  ，该对象表示此 <see cref="T:System.Drawing.Graphics" />
    ///  的保存状态。
    ///</returns>
    function Save: DNGraphicsState;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的状态还原到 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  表示的状态。
    ///</summary>
    ///  <param name="gstate"><see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  ，它表示要将此 <see cref="T:System.Drawing.Graphics" />
    ///  还原到的状态。
    ///</param>
    procedure Restore(gstate: DNGraphicsState);
    ///<summary>
    ///  保存具有此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前状态的图形容器，然后打开并使用新的图形容器。
    ///</summary>
    ///<returns>
    ///  此方法返回一个 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  ，该对象表示该方法调用运行时此 <see cref="T:System.Drawing.Graphics" />
    ///  的状态。
    ///</returns>
    function BeginContainer: DNGraphicsContainer; overload;
    ///<summary>
    ///  关闭当前图形容器，并将此 <see cref="T:System.Drawing.Graphics" />
    ///  的状态还原到通过调用 <see cref="M:System.Drawing.Graphics.BeginContainer" />
    ///  方法保存的状态。
    ///</summary>
    ///  <param name="container"><see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  ，它表示此方法还原的容器。
    ///</param>
    procedure EndContainer(container: DNGraphicsContainer);
    ///<summary>
    ///  获取与此 <see cref="T:System.Drawing.Graphics" />
    ///  关联的设备上下文的句柄。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Drawing.Graphics" />
    ///  关联的设备上下文的句柄。
    ///</returns>
    function GetHdc: IntPtr;
    ///<summary>
    ///  释放通过以前对此 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  方法的调用获得的设备上下文句柄。
    ///</summary>
    procedure ReleaseHdc; overload;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Graphics" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  强制执行所有挂起的图形操作并立即返回而不等待操作完成。
    ///</summary>
    procedure Flush; overload;
    ///<summary>
    ///  用此方法强制执行所有挂起的图形操作，按照指定，等待或者不等待，在操作完成之前返回。
    ///</summary>
    ///  <param name="intention"><see cref="T:System.Drawing.Drawing2D.FlushIntention" />
    ///  枚举的成员，它指定该方法是立即返回还是等待所有现有的操作都完成。
    ///</param>
    procedure Flush(intention: DNFlushIntention); overload;
    ///<summary>
    ///  执行颜色数据（对应于由像素组成的矩形）从屏幕到 <see cref="T:System.Drawing.Graphics" />
    ///  的绘图图面的位块传输。
    ///</summary>
    ///  <param name="upperLeftSource">
    ///  位于源矩形左上角的点。
    ///</param>
    ///  <param name="upperLeftDestination">
    ///  位于目标矩形左上角的点。
    ///</param>
    ///  <param name="blockRegionSize">
    ///  要传输的区域大小。
    ///</param>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  操作失败。
    ///</exception>
    procedure CopyFromScreen(upperLeftSource: DNPoint; upperLeftDestination: DNPoint; blockRegionSize: DNSize); overload;
    ///<summary>
    ///  执行颜色数据（对应于由像素组成的矩形）从屏幕到 <see cref="T:System.Drawing.Graphics" />
    ///  的绘图图面的位块传输。
    ///</summary>
    ///  <param name="sourceX">
    ///  位于源矩形左上角的点的 x 坐标。
    ///</param>
    ///  <param name="sourceY">
    ///  位于源矩形左上角的点的 y 坐标。
    ///</param>
    ///  <param name="destinationX">
    ///  位于目标矩形左上角的点的 x 坐标。
    ///</param>
    ///  <param name="destinationY">
    ///  位于目标矩形左上角的点的 y 坐标。
    ///</param>
    ///  <param name="blockRegionSize">
    ///  要传输的区域大小。
    ///</param>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  操作失败。
    ///</exception>
    procedure CopyFromScreen(sourceX: Int32; sourceY: Int32; destinationX: Int32; destinationY: Int32; blockRegionSize: DNSize); overload;
    ///<summary>
    ///  执行颜色数据（对应于由像素组成的矩形）从屏幕到 <see cref="T:System.Drawing.Graphics" />
    ///  的绘图图面的位块传输。
    ///</summary>
    ///  <param name="upperLeftSource">
    ///  位于源矩形左上角的点。
    ///</param>
    ///  <param name="upperLeftDestination">
    ///  位于目标矩形左上角的点。
    ///</param>
    ///  <param name="blockRegionSize">
    ///  要传输的区域大小。
    ///</param>
    ///  <param name="copyPixelOperation"><see cref="T:System.Drawing.CopyPixelOperation" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" />
    ///  不是成员的 <see cref="T:System.Drawing.CopyPixelOperation" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  操作失败。
    ///</exception>
    procedure CopyFromScreen(upperLeftSource: DNPoint; upperLeftDestination: DNPoint; blockRegionSize: DNSize; copyPixelOperation: DNCopyPixelOperation); overload;
    ///<summary>
    ///  执行颜色数据（对应于由像素组成的矩形）从屏幕到 <see cref="T:System.Drawing.Graphics" />
    ///  的绘图图面的位块传输。
    ///</summary>
    ///  <param name="sourceX">
    ///  位于源矩形左上角的点的 x 坐标。
    ///</param>
    ///  <param name="sourceY">
    ///  位于源矩形左上角的点的 y 坐标
    ///</param>
    ///  <param name="destinationX">
    ///  位于目标矩形左上角的点的 x 坐标。
    ///</param>
    ///  <param name="destinationY">
    ///  位于目标矩形左上角的点的 y 坐标。
    ///</param>
    ///  <param name="blockRegionSize">
    ///  要传输的区域大小。
    ///</param>
    ///  <param name="copyPixelOperation"><see cref="T:System.Drawing.CopyPixelOperation" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" />
    ///  不是成员的 <see cref="T:System.Drawing.CopyPixelOperation" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  操作失败。
    ///</exception>
    procedure CopyFromScreen(sourceX: Int32; sourceY: Int32; destinationX: Int32; destinationY: Int32; blockRegionSize: DNSize; copyPixelOperation: DNCopyPixelOperation); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的世界变换矩阵重置为单位矩阵。
    ///</summary>
    procedure ResetTransform;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的世界变换乘以指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="matrix">
    ///  乘以世界变换的 4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>
    ///  以指定顺序将此 <see cref="T:System.Drawing.Graphics" />
    ///  的世界变换乘以指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="matrix">
    ///  乘以世界变换的 4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    ///  <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举的成员，它确定乘法的顺序。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将指定的缩放操作应用于此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵，方法是将该对象的变换矩阵左乘该缩放矩阵。
    ///</summary>
    ///  <param name="sx">
    ///  x 方向的缩放比例。
    ///</param>
    ///  <param name="sy">
    ///  y 方向的缩放比例。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>
    ///  以指定顺序将指定的缩放操作应用到此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵。
    ///</summary>
    ///  <param name="sx">
    ///  x 方向的缩放比例。
    ///</param>
    ///  <param name="sy">
    ///  y 方向的缩放比例。
    ///</param>
    ///  <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举的成员，它指定是将缩放操作添加到变换矩阵前还是追加到变换矩阵后。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将指定旋转应用于此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度（以度为单位）。
    ///</param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>
    ///  以指定顺序将指定旋转应用到此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度（以度为单位）。
    ///</param>
    ///  <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举的成员，它指定是将旋转追加到矩阵变换之后还是添加到矩阵变换之前。
    ///</param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  使用此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前世界变换和页变换，将点数组从一个坐标空间转换到另一个坐标空间。
    ///</summary>
    ///  <param name="destSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  枚举成员，它指定目标坐标空间。
    ///</param>
    ///  <param name="srcSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  枚举成员，它指定源坐标空间。
    ///</param>
    ///  <param name="pts"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构表示要变换的点。
    ///</param>
    procedure TransformPoints(destSpace: DNCoordinateSpace; srcSpace: DNCoordinateSpace; pts: TArray<DNPointF>); overload;
    ///<summary>
    ///  使用此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前世界变换和页变换，将点数组从一个坐标空间转换到另一个坐标空间。
    ///</summary>
    ///  <param name="destSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  枚举成员，它指定目标坐标空间。
    ///</param>
    ///  <param name="srcSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  枚举成员，它指定源坐标空间。
    ///</param>
    ///  <param name="pts"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构表示要变换的点。
    ///</param>
    procedure TransformPoints(destSpace: DNCoordinateSpace; srcSpace: DNCoordinateSpace; pts: TArray<DNPoint>); overload;
    ///<summary>
    ///  绘制一条连接由坐标对指定的两个点的线条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线条的颜色、宽度和样式。
    ///</param>
    ///  <param name="x1">
    ///  第一个点的 x 坐标。
    ///</param>
    ///  <param name="y1">
    ///  第一个点的 y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  第二个点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  第二个点的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLine(pen: DNPen; x1: Single; y1: Single; x2: Single; y2: Single); overload;
    ///<summary>
    ///  绘制一条连接两个 <see cref="T:System.Drawing.PointF" />
    ///  结构的线。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线条的颜色、宽度和样式。
    ///</param>
    ///  <param name="pt1"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示要连接的第一个点。
    ///</param>
    ///  <param name="pt2"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示要连接的第二个点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLine(pen: DNPen; pt1: DNPointF; pt2: DNPointF); overload;
    ///<summary>
    ///  绘制一系列连接一组 <see cref="T:System.Drawing.PointF" />
    ///  结构的线段。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线段的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构表示要连接的点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLines(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  绘制一条连接两个 <see cref="T:System.Drawing.Point" />
    ///  结构的线。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线条的颜色、宽度和样式。
    ///</param>
    ///  <param name="pt1"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示要连接的第一个点。
    ///</param>
    ///  <param name="pt2"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示要连接的第二个点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLine(pen: DNPen; pt1: DNPoint; pt2: DNPoint); overload;
    ///<summary>
    ///  绘制一系列连接一组 <see cref="T:System.Drawing.Point" />
    ///  结构的线段。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线段的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构表示要连接的点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLines(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  绘制一段弧线，它表示由一对坐标、宽度和高度指定的椭圆部分。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定弧线的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的矩形的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到弧线的起始点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到弧线的结束点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawArc(pen: DNPen; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制一段弧线，它表示 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的椭圆的一部分。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定弧线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它定义椭圆的边界。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到弧线的起始点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到弧线的结束点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///</exception>
    procedure DrawArc(pen: DNPen; rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制一段弧线，它表示由一对坐标、宽度和高度指定的椭圆部分。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定弧线的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的矩形的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到弧线的起始点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到弧线的结束点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rects" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="rects" />
    ///  是长度为零的数组。
    ///</exception>
    procedure DrawArc(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    ///<summary>
    ///  绘制一段弧线，它表示 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的椭圆的一部分。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定弧线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它定义椭圆的边界。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到弧线的起始点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到弧线的结束点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawArc(pen: DNPen; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制由四个表示点的有序坐标对定义的贝塞尔样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="x1">
    ///  曲线起始点的 X 坐标。
    ///</param>
    ///  <param name="y1">
    ///  曲线起始点的 Y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  曲线的第一个控制点的 X 坐标。
    ///</param>
    ///  <param name="y2">
    ///  曲线的第一个控制点的 Y 坐标。
    ///</param>
    ///  <param name="x3">
    ///  曲线的第二个控制点的 X 坐标。
    ///</param>
    ///  <param name="y3">
    ///  曲线的第二个控制点的 Y 坐标。
    ///</param>
    ///  <param name="x4">
    ///  曲线的结束点的 X 坐标。
    ///</param>
    ///  <param name="y4">
    ///  曲线的结束点的 Y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawBezier(pen: DNPen; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; x4: Single; y4: Single); overload;
    ///<summary>
    ///  绘制由 4 个 <see cref="T:System.Drawing.PointF" />
    ///  结构定义的贝塞尔样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="pt1"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示曲线的起始点。
    ///</param>
    ///  <param name="pt2"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示曲线的第一个控制点。
    ///</param>
    ///  <param name="pt3"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示曲线的第二个控制点。
    ///</param>
    ///  <param name="pt4"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示曲线的结束点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawBezier(pen: DNPen; pt1: DNPointF; pt2: DNPointF; pt3: DNPointF; pt4: DNPointF); overload;
    ///<summary>
    ///  用 <see cref="T:System.Drawing.PointF" />
    ///  结构数组绘制一系列贝塞尔样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构的数组，这些结构表示确定曲线的点。
    ///  此数组中的点数应为 3 的倍数加 1，如 4、7 或 10。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawBeziers(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  绘制由 4 个 <see cref="T:System.Drawing.Point" />
    ///  结构定义的贝塞尔样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  结构，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="pt1"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示曲线的起始点。
    ///</param>
    ///  <param name="pt2"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示曲线的第一个控制点。
    ///</param>
    ///  <param name="pt3"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示曲线的第二个控制点。
    ///</param>
    ///  <param name="pt4"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示曲线的结束点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawBezier(pen: DNPen; pt1: DNPoint; pt2: DNPoint; pt3: DNPoint; pt4: DNPoint); overload;
    ///<summary>
    ///  用 <see cref="T:System.Drawing.Point" />
    ///  结构数组绘制一系列贝塞尔样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构的数组，这些结构表示确定曲线的点。
    ///  此数组中的点数应为 3 的倍数加 1，如 4、7 或 10。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawBeziers(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  绘制一系列由 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的矩形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定矩形轮廓线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rects"><see cref="T:System.Drawing.RectangleF" />
    ///  结构数组，这些结构表示要绘制的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rects" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="rects" />
    ///  是长度为零的数组。
    ///</exception>
    procedure DrawRectangles(pen: DNPen; rects: TArray<DNRectangleF>); overload;
    ///<summary>
    ///  绘制一系列由 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的矩形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定矩形轮廓线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rects"><see cref="T:System.Drawing.Rectangle" />
    ///  结构数组，这些结构表示要绘制的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rects" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="rects" />
    ///  是长度为零的数组。
    ///</exception>
    procedure DrawRectangles(pen: DNPen; rects: TArray<DNRectangle>); overload;
    ///<summary>
    ///  绘制一个由边框（该边框由一对坐标、高度和宽度指定）定义的椭圆。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角的 Y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawEllipse(pen: DNPen; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  绘制边界 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的椭圆。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它定义椭圆的边界。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawEllipse(pen: DNPen; rect: DNRectangle); overload;
    ///<summary>
    ///  绘制一个由边框定义的椭圆，该边框由矩形的左上角坐标、高度和宽度指定。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角的 Y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawEllipse(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  绘制由一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构和两条射线所指定的椭圆定义的扇形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定扇形的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示定义该扇形所属的椭圆的边框。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到扇形的第一条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到扇形的第二条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPie(pen: DNPen; rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制一个扇形，该形状由一个坐标对、宽度、高度以及两条射线所指定的椭圆定义。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定扇形的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  边框的左上角的 x 坐标，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="y">
    ///  边框的左上角的 y 坐标，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="width">
    ///  边框的宽度，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="height">
    ///  边框的高度，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到扇形的第一条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到扇形的第二条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPie(pen: DNPen; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制由一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构和两条射线所指定的椭圆定义的扇形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定扇形的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示定义该扇形所属的椭圆的边框。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到扇形的第一条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到扇形的第二条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPie(pen: DNPen; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制一个扇形，该形状由一个坐标对、宽度、高度以及两条射线所指定的椭圆定义。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定扇形的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  边框的左上角的 x 坐标，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="y">
    ///  边框的左上角的 y 坐标，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="width">
    ///  边框的宽度，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="height">
    ///  边框的高度，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到扇形的第一条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到扇形的第二条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPie(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    ///<summary>
    ///  绘制由一组 <see cref="T:System.Drawing.PointF" />
    ///  结构定义的多边形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定多边形的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构表示多边形的顶点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPolygon(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  绘制由一组 <see cref="T:System.Drawing.Point" />
    ///  结构定义的多边形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定多边形的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构表示多边形的顶点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPolygon(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  绘制 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定路径的颜色、宽度和样式。
    ///</param>
    ///  <param name="path">
    ///  要绘制的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPath(pen: DNPen; path: DNGraphicsPath);
    ///<summary>
    ///  绘制经过一组指定的 <see cref="T:System.Drawing.PointF" />
    ///  结构的基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  使用指定的张力绘制经过一组指定的 <see cref="T:System.Drawing.PointF" />
    ///  结构的基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构的数组，这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; tension: Single); overload;
    ///<summary>
    ///  绘制经过一组指定的 <see cref="T:System.Drawing.PointF" />
    ///  结构的基数样条。
    ///  从相对于数组开始位置的偏移量开始绘制。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="offset">
    ///  从 <paramref name="points" />
    ///  参数数组中的第一个元素到曲线中起始点的偏移量。
    ///</param>
    ///  <param name="numberOfSegments">
    ///  起始点之后要包含在曲线中的段数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32); overload;
    ///<summary>
    ///  使用指定的张力绘制经过一组指定的 <see cref="T:System.Drawing.PointF" />
    ///  结构的基数样条。
    ///  从相对于数组开始位置的偏移量开始绘制。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="offset">
    ///  从 <paramref name="points" />
    ///  参数数组中的第一个元素到曲线中起始点的偏移量。
    ///</param>
    ///  <param name="numberOfSegments">
    ///  起始点之后要包含在曲线中的段数。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>
    ///  绘制经过一组指定的 <see cref="T:System.Drawing.Point" />
    ///  结构的基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和高度。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  使用指定的张力绘制经过一组指定的 <see cref="T:System.Drawing.Point" />
    ///  结构的基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>; tension: Single); overload;
    ///<summary>
    ///  使用指定的张力绘制经过一组指定的 <see cref="T:System.Drawing.Point" />
    ///  结构的基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="offset">
    ///  从 <paramref name="points" />
    ///  参数数组中的第一个元素到曲线中起始点的偏移量。
    ///</param>
    ///  <param name="numberOfSegments">
    ///  起始点之后要包含在曲线中的段数。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>
    ///  绘制由 <see cref="T:System.Drawing.PointF" />
    ///  结构的数组定义的闭合基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和高度。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  使用指定的张力绘制由 <see cref="T:System.Drawing.PointF" />
    ///  结构数组定义的闭合基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和高度。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///  需要此参数但被忽略。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPointF>; tension: Single; fillmode: DNFillMode); overload;
    ///<summary>
    ///  绘制由 <see cref="T:System.Drawing.Point" />
    ///  结构的数组定义的闭合基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和高度。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  使用指定的张力绘制由 <see cref="T:System.Drawing.Point" />
    ///  结构数组定义的闭合基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和高度。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///  需要此参数但被忽略。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPoint>; tension: Single; fillmode: DNFillMode); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示要填充的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillRectangle(brush: DNBrush; rect: DNRectangleF); overload;
    ///<summary>
    ///  填充由 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的一系列矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rects"><see cref="T:System.Drawing.RectangleF" />
    ///  结构数组，这些结构表示要填充的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rects" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="Rects" />
    ///  是一个长度为零的数组。
    ///</exception>
    procedure FillRectangles(brush: DNBrush; rects: TArray<DNRectangleF>); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.PointF" />
    ///  结构指定的点数组所定义的多边形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构表示要填充的多边形的顶点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  使用指定的填充模式填充 <see cref="T:System.Drawing.PointF" />
    ///  结构指定的点数组所定义的多边形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构表示要填充的多边形的顶点。
    ///</param>
    ///  <param name="fillMode">
    ///  确定填充样式的 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPointF>; fillMode: DNFillMode); overload;
    ///<summary>
    ///  使用指定的填充模式填充 <see cref="T:System.Drawing.Point" />
    ///  结构指定的点数组所定义的多边形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构表示要填充的多边形的顶点。
    ///</param>
    ///  <param name="fillMode">
    ///  确定填充样式的 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPoint>; fillMode: DNFillMode); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的边框所定义的椭圆的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示定义椭圆的边框。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillEllipse(brush: DNBrush; rect: DNRectangleF); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的边框所定义的椭圆的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示定义椭圆的边框。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillEllipse(brush: DNBrush; rect: DNRectangle); overload;
    ///<summary>
    ///  填充边框所定义的椭圆的内部，该边框由一对坐标、一个宽度和一个高度指定。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角的 Y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillEllipse(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  填充椭圆所定义的扇形区的内部，该椭圆由 <see cref="T:System.Drawing.RectangleF" />
    ///  结构和两条射线指定。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示定义该扇形区所属的椭圆的边框。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴沿顺时针方向旋转到扇形区第一个边所测得的角度（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数沿顺时针方向旋转到扇形区第二个边所测得的角度（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPie(brush: DNBrush; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  填充由一对坐标、一个宽度、一个高度以及两条射线指定的椭圆所定义的扇形区的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  边框左上角的 x 坐标，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="y">
    ///  边框左上角的 y 坐标，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="width">
    ///  边框的宽度，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="height">
    ///  边框的高度，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴沿顺时针方向旋转到扇形区第一个边所测得的角度（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数沿顺时针方向旋转到扇形区第二个边所测得的角度（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPie(brush: DNBrush; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  填充由一对坐标、一个宽度、一个高度以及两条射线指定的椭圆所定义的扇形区的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  边框左上角的 x 坐标，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="y">
    ///  边框左上角的 y 坐标，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="width">
    ///  边框的宽度，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="height">
    ///  边框的高度，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴沿顺时针方向旋转到扇形区第一个边所测得的角度（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数沿顺时针方向旋转到扇形区第二个边所测得的角度（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPie(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ，它表示要填充的路径。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPath(brush: DNBrush; path: DNGraphicsPath);
    ///<summary>
    ///  填充由 <see cref="T:System.Drawing.PointF" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  使用指定的填充模式填充 <see cref="T:System.Drawing.PointF" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>; fillmode: DNFillMode); overload;
    ///<summary>
    ///  使用指定的填充模式和张力填充 <see cref="T:System.Drawing.PointF" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>; fillmode: DNFillMode; tension: Single); overload;
    ///<summary>
    ///  填充由 <see cref="T:System.Drawing.Point" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  使用指定的填充模式填充 <see cref="T:System.Drawing.Point" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>; fillmode: DNFillMode); overload;
    ///<summary>
    ///  使用指定的填充模式和张力填充 <see cref="T:System.Drawing.Point" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>; fillmode: DNFillMode; tension: Single); overload;
    ///<summary>
    ///  在指定位置并且用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制文本的左上角。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; point: DNPointF); overload;
    ///<summary>
    ///  使用指定 <see cref="T:System.Drawing.StringFormat" />
    ///  的格式化特性，用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象在指定的位置绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="x">
    ///  所绘制文本的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制文本的左上角的 y 坐标。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定应用于所绘制文本的格式化特性（如行距和对齐方式）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; x: Single; y: Single; format: DNStringFormat); overload;
    ///<summary>
    ///  使用指定 <see cref="T:System.Drawing.StringFormat" />
    ///  的格式化特性，用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象在指定的位置绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制文本的左上角。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定应用于所绘制文本的格式化特性（如行距和对齐方式）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; point: DNPointF; format: DNStringFormat); overload;
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF; stringFormat: DNStringFormat; out charactersFitted: Int32; out linesFilled: Int32): DNSizeF; overload;
    ///<summary>
    ///  测量用指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制并用指定的 <see cref="T:System.Drawing.StringFormat" />
    ///  格式化的指定字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  定义字符串的文本格式。
    ///</param>
    ///  <param name="origin"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示字符串的左上角。
    ///</param>
    ///  <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它表示字符串的格式化信息（如行距）。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示 <paramref name="text" />
    ///  参数指定的、使用 <paramref name="font" />
    ///  参数和 <paramref name="stringFormat" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont; origin: DNPointF; stringFormat: DNStringFormat): DNSizeF; overload;
    ///<summary>
    ///  当在指定的布局区域内以指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制时，测量指定的字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  定义字符串的文本格式。
    ///</param>
    ///  <param name="layoutArea"><see cref="T:System.Drawing.SizeF" />
    ///  结构，它指定文本的最大布局区域。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示 <paramref name="text" />
    ///  参数指定的、使用 <paramref name="font" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF): DNSizeF; overload;
    ///<summary>
    ///  测量用指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制的指定字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的格式。
    ///</param>
    ///  <param name="width">
    ///  字符串的最大宽度（以像素为单位）。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示在 <paramref name="text" />
    ///  参数中指定的、使用 <paramref name="font" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont; width: Int32): DNSizeF; overload;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Region" />
    ///  对象的数组，其中每个对象将字符位置的范围限定在指定字符串内。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="layoutRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定字符串的布局矩形。
    ///</param>
    ///  <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它表示字符串的格式化信息（如行距）。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.Region" />
    ///  对象的数组，其中每个对象将字符位置的范围限定在指定字符串内。
    ///</returns>
    function MeasureCharacterRanges(text: string; font: DNFont; layoutRect: DNRectangleF; stringFormat: DNStringFormat): TArray<DNRegion>;
    ///<summary>
    ///  在指定坐标处绘制由指定的 <see cref="T:System.Drawing.Icon" />
    ///  表示的图像。
    ///</summary>
    ///  <param name="icon">
    ///  要绘制的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="icon" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawIcon(icon: DNIcon; x: Int32; y: Int32); overload;
    ///<summary>
    ///  在 <see cref="T:System.Drawing.Icon" />
    ///  结构指定的区域内绘制指定的 <see cref="T:System.Drawing.Rectangle" />
    ///  表示的图像。
    ///</summary>
    ///  <param name="icon">
    ///  要绘制的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</param>
    ///  <param name="targetRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定显示面上结果图像的位置和大小。
    ///  将 <paramref name="icon" />
    ///  参数中包含的图像缩放为此矩形区域的尺寸。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="icon" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawIcon(icon: DNIcon; targetRect: DNRectangle); overload;
    ///<summary>
    ///  绘制指定的 <see cref="T:System.Drawing.Icon" />
    ///  表示的图像，而不缩放该图像。
    ///</summary>
    ///  <param name="icon">
    ///  要绘制的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</param>
    ///  <param name="targetRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  不缩放图像以适合此矩形的大小，但保留其原始大小。
    ///  如果该图像比该矩形大，将它剪裁到适合它的大小。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="icon" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawIconUnstretched(icon: DNIcon; targetRect: DNRectangle);
    ///<summary>
    ///  在指定的位置使用原始物理大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制图像的左上角。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; point: DNPointF); overload;
    ///<summary>
    ///  在指定的位置使用原始物理大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Single; y: Single); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; rect: DNRectangleF); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  所绘制图像的宽度。
    ///</param>
    ///  <param name="height">
    ///  所绘制图像的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  在指定的位置使用原始物理大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示所绘制图像的左上角的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; point: DNPoint); overload;
    ///<summary>
    ///  在指定的位置使用图像的原始物理大小绘制指定的图像。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  结构，它指定所绘制图像的左上角。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImageUnscaled(image: DNImage; point: DNPoint); overload;
    ///<summary>
    ///  在由坐标对指定的位置，使用图像的原始物理大小绘制指定的图像。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImageUnscaled(image: DNImage; x: Int32; y: Int32); overload;
    ///<summary>
    ///  在指定的位置使用图像的原始物理大小绘制指定的图像。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  ，它指定了所绘制图像的左上角。
    ///  该矩形的 X 和 Y 属性指定左上角。
    ///  宽度和高度属性被忽略。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImageUnscaled(image: DNImage; rect: DNRectangle); overload;
    ///<summary>
    ///  在指定的位置使用图像的原始物理大小绘制指定的图像。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  未使用。
    ///</param>
    ///  <param name="height">
    ///  未使用。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImageUnscaled(image: DNImage; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  在不进行缩放的情况下绘制指定的图像，并在需要时剪辑该图像以适合指定的矩形。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="rect">
    ///  要在其中绘制图像的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImageUnscaledAndClipped(image: DNImage; rect: DNRectangle);
    ///<summary>
    ///  在指定位置并且按指定形状和大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>); overload;
    ///<summary>
    ///  在指定位置并且按指定形状和大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>); overload;
    ///<summary>
    ///  在指定的位置绘制图像的一部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <see cref="T:System.Drawing.Image" />
    ///  中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Single; y: Single; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定的位置绘制图像的一部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Int32; y: Int32; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangleF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  方法的执行。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  方法的执行。
    ///</param>
    ///  <param name="callbackData">
    ///  一个值，它为 <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托指定在检查是否停止执行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  方法时要使用的附加数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: Int32); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  方法的执行。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  方法的执行。
    ///</param>
    ///  <param name="callbackData">
    ///  一个值，它为 <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托指定在检查是否停止执行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  方法时要使用的附加数据。
    ///</param>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: Int32); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  方法的执行。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
    ///  方法的执行。
    ///</param>
    ///  <param name="callbackData">
    ///  一个值，它为 <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托指定在检查是否停止执行 <see langword="DrawImage" />
    ///  方法时要使用的附加数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: IntPtr); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  方法的执行。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为指定 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see langword="Clip" />
    ///  属性。
    ///</summary>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  ，从该对象中获取新剪辑区域。
    ///</param>
    procedure SetClip(g: DNGraphics); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为当前剪辑区域和指定的 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see cref="P:System.Drawing.Graphics.Clip" />
    ///  属性指定的组合操作的结果。
    ///</summary>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  ，它指定要组合的剪辑区域。
    ///</param>
    ///  <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  枚举的成员，它指定要使用的组合操作。
    ///</param>
    procedure SetClip(g: DNGraphics; combineMode: DNCombineMode); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为当前剪辑区域与 <see cref="T:System.Drawing.Rectangle" />
    ///  结构所指定矩形的组合结果。
    ///</summary>
    ///  <param name="rect">
    ///  要组合的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    ///  <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  枚举的成员，它指定要使用的组合操作。
    ///</param>
    procedure SetClip(rect: DNRectangle; combineMode: DNCombineMode); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的矩形。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示新的剪辑区域。
    ///</param>
    procedure SetClip(rect: DNRectangleF); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为当前剪辑区域与 <see cref="T:System.Drawing.RectangleF" />
    ///  结构所指定矩形的组合结果。
    ///</summary>
    ///  <param name="rect">
    ///  要组合的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</param>
    ///  <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  枚举的成员，它指定要使用的组合操作。
    ///</param>
    procedure SetClip(rect: DNRectangleF; combineMode: DNCombineMode); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为指定的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ，它表示新的剪辑区域。
    ///</param>
    procedure SetClip(path: DNGraphicsPath); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为当前剪辑区域与指定 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  的组合结果。
    ///</summary>
    ///  <param name="path">
    ///  要组合的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  枚举的成员，它指定要使用的组合操作。
    ///</param>
    procedure SetClip(path: DNGraphicsPath; combineMode: DNCombineMode); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域更新为当前剪辑区域与指定 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的交集。
    ///</summary>
    ///  <param name="rect">
    ///  与当前剪辑区域相交的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    procedure IntersectClip(rect: DNRectangle); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域更新为当前剪辑区域与指定 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的交集。
    ///</summary>
    ///  <param name="rect">
    ///  与当前剪辑区域相交的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</param>
    procedure IntersectClip(rect: DNRectangleF); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  对象的剪辑区域更新为当前剪辑区域与指定 <see cref="T:System.Drawing.Region" />
    ///  的交集。
    ///</summary>
    ///  <param name="region">
    ///  要与当前区域交叉的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure IntersectClip(region: DNRegion); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域，以排除 <see cref="T:System.Drawing.Rectangle" />
    ///  结构所指定的区域。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定要从剪辑区域排除的矩形。
    ///</param>
    procedure ExcludeClip(rect: DNRectangle); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域重置为无限区域。
    ///</summary>
    procedure ResetClip;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域沿水平方向和垂直方向平移指定的量。
    ///</summary>
    ///  <param name="dx">
    ///  平移的 x 坐标。
    ///</param>
    ///  <param name="dy">
    ///  平移的 y 坐标。
    ///</param>
    procedure TranslateClip(dx: Single; dy: Single); overload;
    ///<summary>
    ///  指示由一对坐标指定的点是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="x">
    ///  要测试其可见性的点的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试其可见性的点的 y 坐标。
    ///</param>
    ///<returns>
    ///  如果由 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  参数定义的点包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32): Boolean; overload;
    ///<summary>
    ///  指示指定的 <see cref="T:System.Drawing.Point" />
    ///  结构是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="point">
    ///  要测试其可见性的 <see cref="T:System.Drawing.Point" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="point" />
    ///  参数指定的点包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPoint): Boolean; overload;
    ///<summary>
    ///  指示由一对坐标指定的点是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="x">
    ///  要测试其可见性的点的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试其可见性的点的 y 坐标。
    ///</param>
    ///<returns>
    ///  如果由 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  参数定义的点包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single): Boolean; overload;
    ///<summary>
    ///  指示指定的 <see cref="T:System.Drawing.PointF" />
    ///  结构是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="point">
    ///  要测试其可见性的 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="point" />
    ///  参数指定的点包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPointF): Boolean; overload;
    ///<summary>
    ///  指示由一对坐标、一个宽度和一个高度指定的矩形是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="x">
    ///  要测试其可见性的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试其可见性的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试其可见性的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试其可见性的矩形的高度。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="x" />
    ///  、<paramref name="y" />
    ///  、<paramref name="width" />
    ///  和 <paramref name="height" />
    ///  参数定义的矩形包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32): Boolean; overload;
    ///<summary>
    ///  指示由一对坐标、一个宽度和一个高度指定的矩形是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="x">
    ///  要测试其可见性的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试其可见性的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试其可见性的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试其可见性的矩形的高度。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="x" />
    ///  、<paramref name="y" />
    ///  、<paramref name="width" />
    ///  和 <paramref name="height" />
    ///  参数定义的矩形包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single; width: Single; height: Single): Boolean; overload;
    ///<summary>
    ///  指示 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的矩形是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="rect">
    ///  要测试其可见性的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="rect" />
    ///  参数指定的矩形包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangleF): Boolean; overload;
    ///<summary>
    ///  保存具有此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前状态的图形容器，然后打开并使用具有指定缩放变形的新图形容器。
    ///</summary>
    ///  <param name="dstrect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它与 <paramref name="srcrect" />
    ///  参数一起为新的图形容器指定缩放变换。
    ///</param>
    ///  <param name="srcrect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它与 <paramref name="dstrect" />
    ///  参数一起为新的图形容器指定缩放变换。
    ///</param>
    ///  <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定容器的度量单位。
    ///</param>
    ///<returns>
    ///  此方法返回一个 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  ，该对象表示该方法调用运行时此 <see cref="T:System.Drawing.Graphics" />
    ///  的状态。
    ///</returns>
    function BeginContainer(dstrect: DNRectangleF; srcrect: DNRectangleF; &unit: DNGraphicsUnit): DNGraphicsContainer; overload;
    ///<summary>
    ///  保存具有此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前状态的图形容器，然后打开并使用具有指定缩放变形的新图形容器。
    ///</summary>
    ///  <param name="dstrect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它与 <paramref name="srcrect" />
    ///  参数一起为容器指定缩放变换。
    ///</param>
    ///  <param name="srcrect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它与 <paramref name="dstrect" />
    ///  参数一起为容器指定缩放变换。
    ///</param>
    ///  <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定容器的度量单位。
    ///</param>
    ///<returns>
    ///  此方法返回一个 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  ，该对象表示该方法调用运行时此 <see cref="T:System.Drawing.Graphics" />
    ///  的状态。
    ///</returns>
    function BeginContainer(dstrect: DNRectangle; srcrect: DNRectangle; &unit: DNGraphicsUnit): DNGraphicsContainer; overload;
    ///<summary>
    ///  向当前 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  添加注释。
    ///</summary>
    ///  <param name="data">
    ///  包含注释的字节的数组。
    ///</param>
    procedure AddMetafileComment(data: TArray<Byte>);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指定如何将合成图像绘制到此 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此属性指定 <see cref="T:System.Drawing.Drawing2D.CompositingMode" />
    ///  枚举的成员。
    ///  默认值为 <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />
    ///  。
    ///</returns>
    property CompositingMode: DNCompositingMode read get_CompositingMode write set_CompositingMode;
    ///<summary>
    ///  为抵色处理和阴影画笔获取或设置此 <see cref="T:System.Drawing.Graphics" />
    ///  的呈现原点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构，它表示 8 位/像素和 16 位/像素抖色处理的抖色原点，还用于设置阴影画笔的原点。
    ///</returns>
    property RenderingOrigin: DNPoint read get_RenderingOrigin write set_RenderingOrigin;
    ///<summary>
    ///  获取或设置绘制到此 <see cref="T:System.Drawing.Graphics" />
    ///  的合成图像的呈现质量。
    ///</summary>
    ///<returns>
    ///  此属性指定 <see cref="T:System.Drawing.Drawing2D.CompositingQuality" />
    ///  枚举的成员。
    ///  默认值为 <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />
    ///  。
    ///</returns>
    property CompositingQuality: DNCompositingQuality read get_CompositingQuality write set_CompositingQuality;
    ///<summary>
    ///  获取或设置与此 <see cref="T:System.Drawing.Graphics" />
    ///  关联的文本的呈现模式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Text.TextRenderingHint" />
    ///  值之一。
    ///</returns>
    property TextRenderingHint: DNTextRenderingHint read get_TextRenderingHint write set_TextRenderingHint;
    ///<summary>
    ///  获取或设置呈现文本的灰度校正值。
    ///</summary>
    ///<returns>
    ///  用于呈现抗锯齿和 ClearType 文本的伽玛校正值。
    ///</returns>
    property TextContrast: Int32 read get_TextContrast write set_TextContrast;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Graphics" />
    ///  的呈现质量。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.SmoothingMode" />
    ///  值之一。
    ///</returns>
    property SmoothingMode: DNSmoothingMode read get_SmoothingMode write set_SmoothingMode;
    ///<summary>
    ///  获取或设置一个值，该值指定在呈现此 <see cref="T:System.Drawing.Graphics" />
    ///  的过程中像素如何偏移。
    ///</summary>
    ///<returns>
    ///  此属性指定 <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" />
    ///  枚举的成员。
    ///</returns>
    property PixelOffsetMode: DNPixelOffsetMode read get_PixelOffsetMode write set_PixelOffsetMode;
    ///<summary>
    ///  获取或设置与此 <see cref="T:System.Drawing.Graphics" />
    ///  关联的插补模式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.InterpolationMode" />
    ///  值之一。
    ///</returns>
    property InterpolationMode: DNInterpolationMode read get_InterpolationMode write set_InterpolationMode;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Graphics" />
    ///  的几何世界变换的副本。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  副本，表示此 <see cref="T:System.Drawing.Graphics" />
    ///  的几何世界变换。
    ///</returns>
    property Transform: DNMatrix read get_Transform write set_Transform;
    ///<summary>
    ///  获取或设置用于此 <see cref="T:System.Drawing.Graphics" />
    ///  中的页坐标的度量单位。
    ///</summary>
    ///<returns>
    ///  除 <see cref="F:System.Drawing.GraphicsUnit.World" />
    ///  以外的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  设置为 <see cref="F:System.Drawing.GraphicsUnit.World" />
    ///  , ，这不是物理单元。
    ///</exception>
    property PageUnit: DNGraphicsUnit read get_PageUnit write set_PageUnit;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Graphics" />
    ///  的世界单位和页单位之间的比例。
    ///</summary>
    ///<returns>
    ///  此属性指定此 <see cref="T:System.Drawing.Graphics" />
    ///  的世界单位和页单位之间的比例值。
    ///</returns>
    property PageScale: Single read get_PageScale write set_PageScale;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Graphics" />
    ///  的水平分辨率。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Graphics" />
    ///  支持的水平分辨率的值（以每英寸点数为单位）。
    ///</returns>
    property DpiX: Single read get_DpiX;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Graphics" />
    ///  的垂直分辨率。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Graphics" />
    ///  支持的垂直分辨率的值（以每英寸点数为单位）。
    ///</returns>
    property DpiY: Single read get_DpiY;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Region" />
    ///  ，它限定此 <see cref="T:System.Drawing.Graphics" />
    ///  的绘图区域。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Region" />
    ///  ，它限定此 <see cref="T:System.Drawing.Graphics" />
    ///  当前可用的绘图区域。
    ///</returns>
    property Clip: DNRegion read get_Clip write set_Clip;
    ///<summary>
    ///  获取一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，该结构限定此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域的边框。
    ///</returns>
    property ClipBounds: DNRectangleF read get_ClipBounds;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域是否为空。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域为空，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClipEmpty: Boolean read get_IsClipEmpty;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域的边框。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域的边框。
    ///</returns>
    property VisibleClipBounds: DNRectangleF read get_VisibleClipBounds;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域是否为空。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域的可见部分为空，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsVisibleClipEmpty: Boolean read get_IsVisibleClipEmpty;
  end;

  TDNGraphics = class(TDNGenericImport<DNGraphicsClass, DNGraphics>) end;

  //-------------namespace: System.Drawing----------------
  DNIconClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{3D203B12-B3FE-5D34-A578-F82BA634BF10}']
  { constructors } 

    ///<summary>
    ///  从指定的文件名初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  要从其中加载 <see cref="T:System.Drawing.Icon" />
    ///  的文件。
    ///</param>
    {class} function init(fileName: string): DNIcon; overload;
    ///<summary>
    ///  从指定的文件初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的指定大小的新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  包含图标数据的文件的名称和路径。
    ///</param>
    ///  <param name="size">
    ///  所需的图标大小。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="string" />
    ///  是 <see langword="null" />
    ///  也不包含图像数据。
    ///</exception>
    {class} function init(fileName: string; size: DNSize): DNIcon; overload;
    ///<summary>
    ///  使用指定文件中的指定宽度和高度初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的一个新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  包含 <see cref="T:System.Drawing.Icon" />
    ///  数据的文件的名称和路径。
    ///</param>
    ///  <param name="width">
    ///  需要的 <see cref="T:System.Drawing.Icon" />
    ///  宽度。
    ///</param>
    ///  <param name="height">
    ///  需要的 <see cref="T:System.Drawing.Icon" />
    ///  高度。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="string" />
    ///  是 <see langword="null" />
    ///  也不包含图像数据。
    ///</exception>
    {class} function init(fileName: string; width: Int32; height: Int32): DNIcon; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例，并尝试查找与所请求的大小匹配的图标版本。
    ///</summary>
    ///  <param name="original">
    ///  要从其中加载新调整大小的图标的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</param>
    ///  <param name="size">
    ///  用于指定新 <see cref="T:System.Drawing.Icon" />
    ///  的高度和宽度的 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="original" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(original: DNIcon; size: DNSize): DNIcon; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例，并尝试查找与所请求的大小匹配的图标版本。
    ///</summary>
    ///  <param name="original">
    ///  要从其中加载不同大小的图标。
    ///</param>
    ///  <param name="width">
    ///  新图标的宽度。
    ///</param>
    ///  <param name="height">
    ///  新图标的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="original" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(original: DNIcon; width: Int32; height: Int32): DNIcon; overload;
    ///<summary>
    ///  从指定程序集中的资源初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  ，它指定在其中查找资源的程序集。
    ///</param>
    ///  <param name="resource">
    ///  要加载的资源的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的一个图标 <paramref name="resource" />
    ///  不能在包含指定程序集中找到 <paramref name="type" />
    ///  。
    ///</exception>
    {class} function init(&type: DDN.mscorlib.DNType; resource: string): DNIcon; overload;
    ///<summary>
    ///  从指定的数据流初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  从其中加载 <see cref="T:System.Drawing.Icon" />
    ///  的数据流。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNIcon; overload;
    ///<summary>
    ///  从指定的流初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的指定大小的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  包含图标数据的流。
    ///</param>
    ///  <param name="size">
    ///  所需的图标大小。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  是 <see langword="null" />
    ///  也不包含图像数据。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; size: DNSize): DNIcon; overload;
    ///<summary>
    ///  从指定的数据流用指定的宽度和高度初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  从其中加载图标的数据流。
    ///</param>
    ///  <param name="width">
    ///  图标的宽度（以像素为单位）。
    ///</param>
    ///  <param name="height">
    ///  图标的高度（以像素为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; width: Int32; height: Int32): DNIcon; overload;

  { static methods } 

    ///<summary>
    ///  返回指定文件中包含的图像的图标表示形式。
    ///</summary>
    ///  <param name="filePath">
    ///  包含图像的文件的路径。
    ///</param>
    ///<returns>
    ///  指定文件中包含的图像的 <see cref="T:System.Drawing.Icon" />
    ///  表示形式。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="filePath" />
    ///  并不表示有效的文件。
    ///  - 或 -
    ///  <paramref name="filePath" />
    ///  指明通用命名约定 (UNC) 路径。
    ///</exception>
    {class} function ExtractAssociatedIcon(filePath: string): DNIcon;
    ///<summary>
    ///  从图标的指定 Windows 句柄 (<see langword="HICON" />
    ///  ) 创建 GDI+ <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</summary>
    ///  <param name="handle">
    ///  图标的 Windows 句柄。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</returns>
    {class} function FromHandle(handle: IntPtr): DNIcon;

  end;

  ///<summary>
  ///  表示 Windows 图标，它是用于表示对象的小位图图像。
  ///  尽管图标的大小由系统决定，但仍可将其视为透明的位图。
  ///</summary>
  [DNTypeName('System.Drawing.Icon')]
  DNIcon = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{F874226E-D299-3CEF-A532-1EA4153B91FC}']
  { getters & setters } 

    function get_Handle: IntPtr;
    function get_Height: Int32;
    function get_Size: DNSize;
    function get_Width: Int32;

  { methods } 

    ///<summary>
    ///  克隆 <see cref="T:System.Drawing.Icon" />
    ///  ，创建重复图像。
    ///</summary>
    ///<returns>
    ///  可强制转换为 <see cref="T:System.Drawing.Icon" />
    ///  的对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Icon" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Icon" />
    ///  保存到指定的输出 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="outputStream">
    ///  要保存到的 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    procedure Save(outputStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Icon" />
    ///  转换为 GDI+ <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Bitmap" />
    ///  ，它表示已转换的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</returns>
    function ToBitmap: DNBitmap;
    ///<summary>
    ///  获取用于描述 <see cref="T:System.Drawing.Icon" />
    ///  的可读字符串。
    ///</summary>
    ///<returns>
    ///  描述 <see cref="T:System.Drawing.Icon" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Icon" />
    ///  的 Windows 句柄。
    ///  这并非该句柄的副本；请不要释放它。
    ///</summary>
    ///<returns>
    ///  该图标的 Windows 句柄。
    ///</returns>
    property Handle: IntPtr read get_Handle;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Icon" />
    ///  的高度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Icon" />
    ///  的高度。
    ///</returns>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Icon" />
    ///  的大小。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  结构，它指定此 <see cref="T:System.Drawing.Icon" />
    ///  的宽度和高度。
    ///</returns>
    property Size: DNSize read get_Size;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Icon" />
    ///  的宽度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Icon" />
    ///  的宽度。
    ///</returns>
    property Width: Int32 read get_Width;
  end;

  TDNIcon = class(TDNGenericImport<DNIconClass, DNIcon>) end;

  //-------------namespace: System.Drawing----------------
  DNImageClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{79A48C86-C565-56AC-8B0C-7D93CF731D7E}']
  { static methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Image" />
    ///  从指定的文件。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含用来创建文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.OutOfMemoryException">
    ///  该文件没有有效的图像格式。
    ///  - 或 -
    ///  GDI+ 不支持该文件的像素格式。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  指定的文件不存在。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="filename" />
    ///  是 <see cref="T:System.Uri" />
    ///  。
    ///</exception>
    {class} function FromFile(filename: string): DNImage; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Image" />
    ///  从指定的文件使用嵌入的颜色管理信息在该文件中。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含用来创建文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="useEmbeddedColorManagement">
    ///  设置为 <see langword="true" />
    ///  使用颜色管理信息嵌入到图像文件中; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.OutOfMemoryException">
    ///  该文件没有有效的图像格式。
    ///  - 或 -
    ///  GDI+ 不支持该文件的像素格式。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  指定的文件不存在。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="filename" />
    ///  是 <see cref="T:System.Uri" />
    ///  。
    ///</exception>
    {class} function FromFile(filename: string; useEmbeddedColorManagement: Boolean): DNImage; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Image" />
    ///  从指定的数据流。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  流不是有效的图像格式
    ///  - 或 -
    ///  <paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function FromStream(stream: DDN.mscorlib.DNStream): DNImage; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Image" />
    ///  从指定的数据流 （可选） 使用嵌入的颜色管理信息该流中。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="useEmbeddedColorManagement"><see langword="true" />
    ///  若要使用数据流; 中嵌入的颜色管理信息否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  流不是有效的图像格式
    ///  - 或 -
    ///  <paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function FromStream(stream: DDN.mscorlib.DNStream; useEmbeddedColorManagement: Boolean): DNImage; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Bitmap" />
    ///  从 GDI 位图的句柄。
    ///</summary>
    ///  <param name="hbitmap">
    ///  GDI 从中创建位图句柄 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    {class} function FromHbitmap(hbitmap: IntPtr): DNBitmap; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Bitmap" />
    ///  从 GDI 位图和 GDI 调色板的句柄的句柄。
    ///</summary>
    ///  <param name="hbitmap">
    ///  GDI 从中创建位图句柄 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="hpalette">
    ///  句柄 GDI 用于如果中指定的位图定义位图颜色的调色板 <paramref name="hBitmap" />
    ///  参数不是与设备无关位图 (DIB)。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    {class} function FromHbitmap(hbitmap: IntPtr; hpalette: IntPtr): DNBitmap; overload;
    ///<summary>
    ///  返回指定像素格式的颜色深度（每个像素的位数）。
    ///</summary>
    ///  <param name="pixfmt"><see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  成员，用于指定要查找其大小的格式。
    ///</param>
    ///<returns>
    ///  指定的像素格式的颜色深度。
    ///</returns>
    {class} function GetPixelFormatSize(pixfmt: DNPixelFormat): Int32;
    ///<summary>
    ///  返回一个值，该值指示的像素格式是否为此 <see cref="T:System.Drawing.Image" />
    ///  包含 alpha 信息。
    ///</summary>
    ///  <param name="pixfmt">
    ///  要测试的 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="pixfmt" />
    ///  包含 alpha 信息; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsAlphaPixelFormat(pixfmt: DNPixelFormat): Boolean;
    ///<summary>
    ///  返回一个值，该值指示该像素格式是否为每个像素 64 位。
    ///</summary>
    ///  <param name="pixfmt"><see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  枚举值，用于测试。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="pixfmt" />
    ///  扩展; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsExtendedPixelFormat(pixfmt: DNPixelFormat): Boolean;
    ///<summary>
    ///  返回一个值，该值指示该像素格式是否为每个像素 32 位。
    ///</summary>
    ///  <param name="pixfmt">
    ///  要测试的 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="pixfmt" />
    ///  规范; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsCanonicalPixelFormat(pixfmt: DNPixelFormat): Boolean;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Image" />
    ///  从指定的数据流 （可选） 使用嵌入的颜色管理信息并验证图像数据。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="useEmbeddedColorManagement"><see langword="true" />
    ///  若要使用数据流; 中嵌入的颜色管理信息否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="validateImageData"><see langword="true" />
    ///  若要验证图像数据;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  流不是有效的图像格式。
    ///</exception>
    {class} function FromStream(stream: DDN.mscorlib.DNStream; useEmbeddedColorManagement: Boolean; validateImageData: Boolean): DNImage; overload;

  end;

  ///<summary>
  ///  一个抽象基类，提供了用于功能 <see cref="T:System.Drawing.Bitmap" />
  ///  和 <see cref="T:System.Drawing.Imaging.Metafile" />
  ///  继承的类。
  ///</summary>
  [DNTypeName('System.Drawing.Image')]
  DNImage = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{451DBF16-B46B-3B4F-993C-EFD8B01553A0}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Image" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Image" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回有关指定的图像编码器所支持的参数的信息。
    ///</summary>
    ///  <param name="encoder">
    ///  用于指定图像编码器的 GUID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，其中包含的数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  每个 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  包含有关指定的图像编码器所支持的参数之一的信息。
    ///</returns>
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件或流。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  为 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件中指定的格式。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="format" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; format: DNImageFormat); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件，使用指定的编码器和图像编码器参数。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  要用于此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="encoder" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将此图像以指定的格式保存到指定的流中。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  指定保存的图像的格式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  或 <paramref name="format" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  包含错误的图像格式保存图像
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    ///<summary>
    ///  使用指定的编码器和图像编码器参数，将该图像保存到指定的流。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，它指定图像编码器使用的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///  使用此方法将多帧图像中的选定帧保存到另一个多帧图像。
    ///</summary>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  ，包含要添加的帧。
    ///</param>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    ///<summary>
    ///  返回此缩略图 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="thumbWidth">
    ///  以像素为单位，请求的缩略图的宽度。
    ///</param>
    ///  <param name="thumbHeight">
    ///  以像素为单位，请求的缩略图的高度。
    ///</param>
    ///  <param name="callback">
    ///  一个 <see cref="T:System.Drawing.Image.GetThumbnailImageAbort" />
    ///  委托。
    ///  注意   必须创建一个委托，并将传递对作为委托的引用 <paramref name="callback" />
    ///  不使用参数，但该委托。
    ///</param>
    ///  <param name="callbackData">
    ///  必须是 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  表示缩略图。
    ///</returns>
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    ///<summary>
    ///  返回指定维度的帧数。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///<returns>
    ///  指定维度中的帧数。
    ///</returns>
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    ///<summary>
    ///  选择由维度和索引指定的帧。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///  <param name="frameIndex">
    ///  活动帧的索引。
    ///</param>
    ///<returns>
    ///  始终返回 0。
    ///</returns>
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    ///<summary>
    ///  旋转、 翻转，或将旋转和翻转 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="rotateFlipType">
    ///  一个 <see cref="T:System.Drawing.RotateFlipType" />
    ///  成员，用于指定的旋转和翻转将应用于映像的类型。
    ///</param>
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    ///<summary>
    ///  获取指定的属性项从此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要获取属性项的 ID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  此方法获取。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    ///<summary>
    ///  从这中移除指定的属性项 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要移除的属性项的 ID。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  映像不包含请求的属性项。
    ///  - 或 -
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure RemovePropertyItem(propid: Int32);
    ///<summary>
    ///  在此 <see cref="T:System.Drawing.Image" />
    ///  中存储一个属性项（元数据片）。
    ///</summary>
    ///  <param name="propitem">
    ///  要存储的 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置提供有关图像的附加数据的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  ，它提供有关图像的附加数据。
    ///</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    ///<summary>
    ///  获取此图像的宽度和高度。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Drawing.SizeF" />
    ///  结构，它表示的宽度和高度这<see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    ///<summary>
    ///  获取此图像的宽度和高度（以像素为单位）。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  结构，它表示的宽度和高度，以像素为单位，此映像。
    ///</returns>
    property Size: DNSize read get_Size;
    ///<summary>
    ///  获取的宽度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  宽度，以像素为单位，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  获取的高度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  的高度（以像素为单位）。
    ///</returns>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  获取以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property HorizontalResolution: Single read get_HorizontalResolution;
    ///<summary>
    ///  获取以每英寸的像素为单位的垂直分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  垂直分辨率，以像素 / 英寸，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property VerticalResolution: Single read get_VerticalResolution;
    ///<summary>
    ///  获取特性的像素数据的这标志 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示的按位组合的整数 <see cref="T:System.Drawing.Imaging.ImageFlags" />
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>
    ///  获取此文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  表示的文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property RawFormat: DNImageFormat read get_RawFormat;
    ///<summary>
    ///  获取此像素格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  ，它会表示像素格式此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    ///<summary>
    ///  获取或设置用于此目的的颜色调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  ，它表示用于此目的的调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Palette: DNColorPalette read get_Palette write set_Palette;
    ///<summary>
    ///  获取表示在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  指定在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  从最重要到最不重要。
    ///</returns>
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    ///<summary>
    ///  获取存储于此的属性项的 Id <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  由属性 ID 组成的一个数组，此图像中存储的每个属性项各有一个 ID。
    ///</returns>
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    ///<summary>
    ///  获取的所有属性项 （元数据片） 存储在此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  对象，每个属性项存储在映像中的一个对象。
    ///</returns>
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNImage = class(TDNGenericImport<DNImageClass, DNImage>) end;

  //-------------namespace: System.Drawing----------------
  DNBitmapClass = interface(DNImageClass)
  ['{94ACAB77-01F8-5022-B397-D27F8602028F}']
  { constructors } 

    ///<summary>
    ///  从指定的文件初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="filename">
    ///  位图文件的名称和路径中。
    ///</param>
    ///<exception cref="T:System.IO.FileNotFoundException">
    ///  找不到指定的文件。
    ///</exception>
    {class} function init(filename: string): DNBitmap; overload;
    ///<summary>
    ///  从指定的文件初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="filename">
    ///  位图文件的名称。
    ///</param>
    ///  <param name="useIcm"><see langword="true" />
    ///  要用于此颜色校正 <see cref="T:System.Drawing.Bitmap" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(filename: string; useIcm: Boolean): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类从指定的资源。
    ///</summary>
    ///  <param name="type">
    ///  用于提取资源的类。
    ///</param>
    ///  <param name="resource">
    ///  资源的名称。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; resource: string): DNBitmap; overload;
    ///<summary>
    ///  从指定的数据流初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  用于加载图像的数据流。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  不包含图像数据，或者是 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="stream" />
    ///  包含单个维度大于 65535 像素的 PNG 图像文件。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNBitmap; overload;
    ///<summary>
    ///  从指定的数据流初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  用于加载图像的数据流。
    ///</param>
    ///  <param name="useIcm"><see langword="true" />
    ///  要用于此颜色校正 <see cref="T:System.Drawing.Bitmap" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  不包含图像数据，或者是 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="stream" />
    ///  包含单个维度大于 65535 像素的 PNG 图像文件。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; useIcm: Boolean): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  用指定的大小、 像素格式和像素数据的类。
    ///</summary>
    ///  <param name="width">
    ///  宽度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  高度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="stride">
    ///  指定两次一次扫描行的开头之间的字节偏移量的整数。
    ///  这通常 （但不是一定） 是像素格式 (例如，16 位 / 像素的 2) 中的字节数乘以位图的宽度。
    ///  传递给此参数的值必须是四的倍数...
    ///</param>
    ///  <param name="format">
    ///  新的像素格式 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///  这必须指定一个值，开头 <paramref name="Format" />
    ///  。
    ///</param>
    ///  <param name="scan0">
    ///  指向包含像素数据的字节数组的指针。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  未指定值，其名称不以开头 格式。
    ///  例如，指定 <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" />
    ///  将导致 <see cref="T:System.ArgumentException" />
    ///  , ，但 <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" />
    ///  将不会。
    ///</exception>
    {class} function init(width: Int32; height: Int32; stride: Int32; format: DNPixelFormat; scan0: IntPtr): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类，具有指定的大小和格式。
    ///</summary>
    ///  <param name="width">
    ///  宽度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  高度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  新的像素格式 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///  这必须指定一个值，开头 <paramref name="Format" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  未指定值，其名称不以开头 格式。
    ///  例如，指定 <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" />
    ///  将导致 <see cref="T:System.ArgumentException" />
    ///  , ，但 <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" />
    ///  将不会。
    ///</exception>
    {class} function init(width: Int32; height: Int32; format: DNPixelFormat): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类具有指定大小。
    ///</summary>
    ///  <param name="width">
    ///  宽度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  高度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    {class} function init(width: Int32; height: Int32): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类具有指定大小，并使用指定的解决方法 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</summary>
    ///  <param name="width">
    ///  宽度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  高度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  对象，它指定为新的分辨率 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(width: Int32; height: Int32; g: DNGraphics): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类从指定的现有图像。
    ///</summary>
    ///  <param name="original">
    ///  从中创建新 <see cref="T:System.Drawing.Bitmap" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    {class} function init(original: DNImage): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类从指定的现有图像，缩放到指定的大小。
    ///</summary>
    ///  <param name="original">
    ///  从中创建新 <see cref="T:System.Drawing.Bitmap" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="width">
    ///  宽度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  高度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    {class} function init(original: DNImage; width: Int32; height: Int32): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类从指定的现有图像，缩放到指定的大小。
    ///</summary>
    ///  <param name="original">
    ///  从中创建新 <see cref="T:System.Drawing.Bitmap" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="newSize"><see cref="T:System.Drawing.Size" />
    ///  结构，它表示大小的新 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    {class} function init(original: DNImage; newSize: DNSize): DNBitmap; overload;

  { static methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Bitmap" />
    ///  从图标的 Windows 句柄。
    ///</summary>
    ///  <param name="hicon">
    ///  指向一个图标的句柄。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    {class} function FromHicon(hicon: IntPtr): DNBitmap;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Bitmap" />
    ///  从指定的 Windows 资源。
    ///</summary>
    ///  <param name="hinstance">
    ///  包含资源的可执行文件的实例句柄。
    ///</param>
    ///  <param name="bitmapName">
    ///  一个字符串，包含资源位图的名称。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    {class} function FromResource(hinstance: IntPtr; bitmapName: string): DNBitmap;

  end;

  ///<summary>
  ///  封装 GDI+ 包含图形图像和其属性的像素数据的位图。
  ///  一个 <see cref="T:System.Drawing.Bitmap" />
  ///  是用来处理图像像素数据所定义的对象。
  ///</summary>
  [DNTypeName('System.Drawing.Bitmap')]
  DNBitmap = interface(DNImage)
  ['{6549E875-8857-35A3-94A2-C3D574DDEB1D}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    ///<summary>
    ///  创建 GDI 从此位图对象 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///<returns>
    ///  句柄 GDI 此方法创建的位图对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  高度或位图的宽度是否大于 <see cref="F:System.Int16.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function GetHbitmap: IntPtr; overload;
    ///<summary>
    ///  创建 GDI 从此位图对象 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///  <param name="background">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它指定背景色。
    ///  如果是完全不透明的位图，则忽略此参数。
    ///</param>
    ///<returns>
    ///  句柄 GDI 此方法创建的位图对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  高度或位图的宽度是否大于 <see cref="F:System.Int16.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function GetHbitmap(background: DNColor): IntPtr; overload;
    ///<summary>
    ///  返回一个图标的句柄。
    ///</summary>
    ///<returns>
    ///  同一个图像作为带图标的 Windows 句柄 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function GetHicon: IntPtr;
    ///<summary>
    ///  创建此分区的副本 <see cref="T:System.Drawing.Bitmap" />
    ///  由定义 <see cref="T:System.Drawing.Rectangle" />
    ///  结构并使用指定 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  枚举。
    ///</summary>
    ///  <param name="rect">
    ///  定义此部分 <see cref="T:System.Drawing.Bitmap" />
    ///  复制。
    ///  坐标是相对于此 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  新的像素格式 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///  这必须指定一个值，开头 <paramref name="Format" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的新 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.OutOfMemoryException"><paramref name="rect" />
    ///  位于源位图边界之外。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  高度或宽度 <paramref name="rect" />
    ///  为 0。
    ///  - 或 -
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  未指定值，其名称不以开头 格式。
    ///  例如，指定 <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" />
    ///  将导致 <see cref="T:System.ArgumentException" />
    ///  , ，但 <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" />
    ///  将不会。
    ///</exception>
    function Clone(rect: DNRectangle; format: DNPixelFormat): DNBitmap; overload;
    ///<summary>
    ///  创建此分区的副本 <see cref="T:System.Drawing.Bitmap" />
    ///  定义与指定 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  枚举。
    ///</summary>
    ///  <param name="rect">
    ///  定义此部分 <see cref="T:System.Drawing.Bitmap" />
    ///  复制。
    ///</param>
    ///  <param name="format">
    ///  指定 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  枚举为目标 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.OutOfMemoryException"><paramref name="rect" />
    ///  位于源位图边界之外。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  高度或宽度 <paramref name="rect" />
    ///  为 0。
    ///</exception>
    function Clone(rect: DNRectangleF; format: DNPixelFormat): DNBitmap; overload;
    ///<summary>
    ///  让 <see cref="T:System.Drawing.Bitmap" />
    ///  的默认透明颜色为透明。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Drawing.Bitmap" />
    ///  的图像格式为图标格式。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    procedure MakeTransparent; overload;
    ///<summary>
    ///  使指定的颜色透明此 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///  <param name="transparentColor"><see cref="T:System.Drawing.Color" />
    ///  结构，它表示要将设置为透明的颜色。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  图像格式的 <see cref="T:System.Drawing.Bitmap" />
    ///  是一种图标格式。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    procedure MakeTransparent(transparentColor: DNColor); overload;
    ///<summary>
    ///  锁定 <see cref="T:System.Drawing.Bitmap" />
    ///  到系统内存。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定的部分 <see cref="T:System.Drawing.Bitmap" />
    ///  为锁。
    ///</param>
    ///  <param name="flags"><see cref="T:System.Drawing.Imaging.ImageLockMode" />
    ///  枚举，用于为指定的访问级别 （读/写） <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  枚举，用于指定的数据格式 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  ，包含有关该锁定操作信息。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  不是特定的每像素位值。
    ///  - 或 -
    ///  不正确 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  传入的位图。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function LockBits(rect: DNRectangle; flags: DNImageLockMode; format: DNPixelFormat): DNBitmapData; overload;
    ///<summary>
    ///  锁定 <see cref="T:System.Drawing.Bitmap" />
    ///  到系统内存
    ///</summary>
    ///  <param name="rect">
    ///  矩形结构，它指定的部分 <see cref="T:System.Drawing.Bitmap" />
    ///  为锁。
    ///</param>
    ///  <param name="flags">
    ///  其中一个 <see cref="T:System.Drawing.Imaging.ImageLockMode" />
    ///  为指定的访问级别 （读/写） 的值 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  其中一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  值，该值指定的数据格式 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="bitmapData">
    ///  一个 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  ，包含有关该锁定操作信息。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  ，包含有关该锁定操作信息。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  值不是特定的每像素位值。
    ///  - 或 -
    ///  不正确 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  传入的位图。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function LockBits(rect: DNRectangle; flags: DNImageLockMode; format: DNPixelFormat; bitmapData: DNBitmapData): DNBitmapData; overload;
    ///<summary>
    ///  解锁此 <see cref="T:System.Drawing.Bitmap" />
    ///  于系统内存。
    ///</summary>
    ///  <param name="bitmapdata">
    ///  一个 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  ，它指定该锁定操作有关的信息。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    procedure UnlockBits(bitmapdata: DNBitmapData);
    ///<summary>
    ///  在此获取指定的像素的颜色 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要检索的像素 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要检索的像素 y 坐标。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示指定的像素的颜色。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x" />
    ///  小于 0，或大于或等于 <see cref="P:System.Drawing.Image.Width" />
    ///  。
    ///  - 或 -
    ///  <paramref name="y" />
    ///  小于 0，或大于或等于 <see cref="P:System.Drawing.Image.Height" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function GetPixel(x: Int32; y: Int32): DNColor;
    ///<summary>
    ///  在此 <see cref="T:System.Drawing.Bitmap" />
    ///  中设置指定像素的颜色。
    ///</summary>
    ///  <param name="x">
    ///  要设置的像素的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要设置的像素的 y 坐标。
    ///</param>
    ///  <param name="color">
    ///  代表分配到指定像素的颜色的 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    procedure SetPixel(x: Int32; y: Int32; color: DNColor);
    ///<summary>
    ///  此设置的分辨率 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///  <param name="xDpi">
    ///  水平分辨率，以每英寸点数为单位的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="yDpi">
    ///  垂直分辨率，以每英寸点数为单位的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    procedure SetResolution(xDpi: Single; yDpi: Single);
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Image" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Image" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回有关指定的图像编码器所支持的参数的信息。
    ///</summary>
    ///  <param name="encoder">
    ///  用于指定图像编码器的 GUID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，其中包含的数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  每个 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  包含有关指定的图像编码器所支持的参数之一的信息。
    ///</returns>
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件或流。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  为 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件中指定的格式。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="format" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; format: DNImageFormat); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件，使用指定的编码器和图像编码器参数。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  要用于此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="encoder" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将此图像以指定的格式保存到指定的流中。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  指定保存的图像的格式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  或 <paramref name="format" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  包含错误的图像格式保存图像
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    ///<summary>
    ///  使用指定的编码器和图像编码器参数，将该图像保存到指定的流。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，它指定图像编码器使用的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///  使用此方法将多帧图像中的选定帧保存到另一个多帧图像。
    ///</summary>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  ，包含要添加的帧。
    ///</param>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    ///<summary>
    ///  返回此缩略图 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="thumbWidth">
    ///  以像素为单位，请求的缩略图的宽度。
    ///</param>
    ///  <param name="thumbHeight">
    ///  以像素为单位，请求的缩略图的高度。
    ///</param>
    ///  <param name="callback">
    ///  一个 <see cref="T:System.Drawing.Image.GetThumbnailImageAbort" />
    ///  委托。
    ///  注意   必须创建一个委托，并将传递对作为委托的引用 <paramref name="callback" />
    ///  不使用参数，但该委托。
    ///</param>
    ///  <param name="callbackData">
    ///  必须是 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  表示缩略图。
    ///</returns>
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    ///<summary>
    ///  返回指定维度的帧数。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///<returns>
    ///  指定维度中的帧数。
    ///</returns>
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    ///<summary>
    ///  选择由维度和索引指定的帧。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///  <param name="frameIndex">
    ///  活动帧的索引。
    ///</param>
    ///<returns>
    ///  始终返回 0。
    ///</returns>
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    ///<summary>
    ///  旋转、 翻转，或将旋转和翻转 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="rotateFlipType">
    ///  一个 <see cref="T:System.Drawing.RotateFlipType" />
    ///  成员，用于指定的旋转和翻转将应用于映像的类型。
    ///</param>
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    ///<summary>
    ///  获取指定的属性项从此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要获取属性项的 ID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  此方法获取。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    ///<summary>
    ///  从这中移除指定的属性项 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要移除的属性项的 ID。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  映像不包含请求的属性项。
    ///  - 或 -
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure RemovePropertyItem(propid: Int32);
    ///<summary>
    ///  在此 <see cref="T:System.Drawing.Image" />
    ///  中存储一个属性项（元数据片）。
    ///</summary>
    ///  <param name="propitem">
    ///  要存储的 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置提供有关图像的附加数据的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  ，它提供有关图像的附加数据。
    ///</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    ///<summary>
    ///  获取此图像的宽度和高度。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Drawing.SizeF" />
    ///  结构，它表示的宽度和高度这<see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    ///<summary>
    ///  获取此图像的宽度和高度（以像素为单位）。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  结构，它表示的宽度和高度，以像素为单位，此映像。
    ///</returns>
    property Size: DNSize read get_Size;
    ///<summary>
    ///  获取的宽度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  宽度，以像素为单位，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  获取的高度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  的高度（以像素为单位）。
    ///</returns>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  获取以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property HorizontalResolution: Single read get_HorizontalResolution;
    ///<summary>
    ///  获取以每英寸的像素为单位的垂直分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  垂直分辨率，以像素 / 英寸，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property VerticalResolution: Single read get_VerticalResolution;
    ///<summary>
    ///  获取特性的像素数据的这标志 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示的按位组合的整数 <see cref="T:System.Drawing.Imaging.ImageFlags" />
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>
    ///  获取此文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  表示的文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property RawFormat: DNImageFormat read get_RawFormat;
    ///<summary>
    ///  获取此像素格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  ，它会表示像素格式此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    ///<summary>
    ///  获取或设置用于此目的的颜色调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  ，它表示用于此目的的调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Palette: DNColorPalette read get_Palette write set_Palette;
    ///<summary>
    ///  获取表示在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  指定在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  从最重要到最不重要。
    ///</returns>
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    ///<summary>
    ///  获取存储于此的属性项的 Id <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  由属性 ID 组成的一个数组，此图像中存储的每个属性项各有一个 ID。
    ///</returns>
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    ///<summary>
    ///  获取的所有属性项 （元数据片） 存储在此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  对象，每个属性项存储在映像中的一个对象。
    ///</returns>
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNBitmap = class(TDNGenericImport<DNBitmapClass, DNBitmap>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNMetafileClass = interface(DNImageClass)
  ['{42D491F2-DEA3-52BA-AE62-751A64D411AB}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定句柄。
    ///</summary>
    ///  <param name="henhmetafile">
    ///  增强型图元文件句柄。
    ///</param>
    ///  <param name="deleteEmf"><see langword="true" />
    ///  若要删除的增强型图元文件处理时 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  已删除; 否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(henhmetafile: IntPtr; deleteEmf: Boolean): DNMetafile; overload;
    ///<summary>
    ///  从指定的文件名初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="filename">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示从中创建新文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(filename: string): DNMetafile; overload;
    ///<summary>
    ///  从指定的数据流初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  从中创建新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  的 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定句柄的设备上下文的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="emfType"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; emfType: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定句柄的设备上下文的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  可以提供一个字符串来命名该文件。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="emfType"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; emfType: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的设备上下文中，受限于指定的矩形。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的设备上下文中，受限于指定的矩形。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  初始化具有指定的文件名称。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  具有指定的文件名，设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; &type: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  具有指定的文件名，设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  描述性字符串可以被添加，进去。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  具有指定的文件名，设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  具有指定的文件名，设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    ///<summary>
    ///  从指定的数据流初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定的数据流、 设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; &type: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定的数据流、 设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  此外，一个字符串，包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  可以添加。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定的数据流、 设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定的数据流、 设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;

  end;

  ///<summary>
  ///  定义图形的图元文件。
  ///  图元文件包含描述一系列可以记录 （构造） 的图形操作的记录和播放 （显示）。
  ///  此类不是可继承的。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.Metafile')]
  DNMetafile = interface(DNImage)
  ['{0039BEED-721E-35E8-A37D-1DBBB36A5A0D}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    ///<summary>
    ///  将 Windows 句柄返回到增强 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此增强的 Windows 句柄 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    function GetHenhmetafile: IntPtr;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Image" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Image" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回有关指定的图像编码器所支持的参数的信息。
    ///</summary>
    ///  <param name="encoder">
    ///  用于指定图像编码器的 GUID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，其中包含的数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  每个 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  包含有关指定的图像编码器所支持的参数之一的信息。
    ///</returns>
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件或流。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  为 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件中指定的格式。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="format" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; format: DNImageFormat); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件，使用指定的编码器和图像编码器参数。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  要用于此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="encoder" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将此图像以指定的格式保存到指定的流中。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  指定保存的图像的格式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  或 <paramref name="format" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  包含错误的图像格式保存图像
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    ///<summary>
    ///  使用指定的编码器和图像编码器参数，将该图像保存到指定的流。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，它指定图像编码器使用的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///  使用此方法将多帧图像中的选定帧保存到另一个多帧图像。
    ///</summary>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  ，包含要添加的帧。
    ///</param>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    ///<summary>
    ///  返回此缩略图 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="thumbWidth">
    ///  以像素为单位，请求的缩略图的宽度。
    ///</param>
    ///  <param name="thumbHeight">
    ///  以像素为单位，请求的缩略图的高度。
    ///</param>
    ///  <param name="callback">
    ///  一个 <see cref="T:System.Drawing.Image.GetThumbnailImageAbort" />
    ///  委托。
    ///  注意   必须创建一个委托，并将传递对作为委托的引用 <paramref name="callback" />
    ///  不使用参数，但该委托。
    ///</param>
    ///  <param name="callbackData">
    ///  必须是 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  表示缩略图。
    ///</returns>
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    ///<summary>
    ///  返回指定维度的帧数。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///<returns>
    ///  指定维度中的帧数。
    ///</returns>
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    ///<summary>
    ///  选择由维度和索引指定的帧。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///  <param name="frameIndex">
    ///  活动帧的索引。
    ///</param>
    ///<returns>
    ///  始终返回 0。
    ///</returns>
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    ///<summary>
    ///  旋转、 翻转，或将旋转和翻转 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="rotateFlipType">
    ///  一个 <see cref="T:System.Drawing.RotateFlipType" />
    ///  成员，用于指定的旋转和翻转将应用于映像的类型。
    ///</param>
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    ///<summary>
    ///  获取指定的属性项从此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要获取属性项的 ID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  此方法获取。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    ///<summary>
    ///  从这中移除指定的属性项 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要移除的属性项的 ID。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  映像不包含请求的属性项。
    ///  - 或 -
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure RemovePropertyItem(propid: Int32);
    ///<summary>
    ///  在此 <see cref="T:System.Drawing.Image" />
    ///  中存储一个属性项（元数据片）。
    ///</summary>
    ///  <param name="propitem">
    ///  要存储的 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置提供有关图像的附加数据的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  ，它提供有关图像的附加数据。
    ///</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    ///<summary>
    ///  获取此图像的宽度和高度。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Drawing.SizeF" />
    ///  结构，它表示的宽度和高度这<see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    ///<summary>
    ///  获取此图像的宽度和高度（以像素为单位）。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  结构，它表示的宽度和高度，以像素为单位，此映像。
    ///</returns>
    property Size: DNSize read get_Size;
    ///<summary>
    ///  获取的宽度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  宽度，以像素为单位，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  获取的高度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  的高度（以像素为单位）。
    ///</returns>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  获取以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property HorizontalResolution: Single read get_HorizontalResolution;
    ///<summary>
    ///  获取以每英寸的像素为单位的垂直分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  垂直分辨率，以像素 / 英寸，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property VerticalResolution: Single read get_VerticalResolution;
    ///<summary>
    ///  获取特性的像素数据的这标志 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示的按位组合的整数 <see cref="T:System.Drawing.Imaging.ImageFlags" />
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>
    ///  获取此文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  表示的文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property RawFormat: DNImageFormat read get_RawFormat;
    ///<summary>
    ///  获取此像素格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  ，它会表示像素格式此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    ///<summary>
    ///  获取或设置用于此目的的颜色调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  ，它表示用于此目的的调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Palette: DNColorPalette read get_Palette write set_Palette;
    ///<summary>
    ///  获取表示在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  指定在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  从最重要到最不重要。
    ///</returns>
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    ///<summary>
    ///  获取存储于此的属性项的 Id <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  由属性 ID 组成的一个数组，此图像中存储的每个属性项各有一个 ID。
    ///</returns>
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    ///<summary>
    ///  获取的所有属性项 （元数据片） 存储在此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  对象，每个属性项存储在映像中的一个对象。
    ///</returns>
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNMetafile = class(TDNGenericImport<DNMetafileClass, DNMetafile>) end;

  //-------------namespace: System.Drawing----------------
  DNPenClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{C1364DE7-F49E-5C06-941C-C2AD2E6AB4B2}']
  { constructors } 

    ///<summary>
    ///  用指定颜色初始化 <see cref="T:System.Drawing.Pen" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="color"><see cref="T:System.Drawing.Color" />
    ///  结构，指示此 <see cref="T:System.Drawing.Pen" />
    ///  的颜色。
    ///</param>
    {class} function init(color: DNColor): DNPen; overload;
    ///<summary>
    ///  用指定的 <see cref="T:System.Drawing.Pen" />
    ///  和 <see cref="T:System.Drawing.Color" />
    ///  属性初始化 <see cref="P:System.Drawing.Pen.Width" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="color"><see cref="T:System.Drawing.Color" />
    ///  结构，指示此 <see cref="T:System.Drawing.Pen" />
    ///  的颜色。
    ///</param>
    ///  <param name="width">
    ///  指示此 <see cref="T:System.Drawing.Pen" />
    ///  的宽度的值。
    ///</param>
    {class} function init(color: DNColor; width: Single): DNPen; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Drawing.Pen" />
    ///  初始化 <see cref="T:System.Drawing.Brush" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="brush">
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  ，确定该 <see cref="T:System.Drawing.Pen" />
    ///  的填充属性。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(brush: DNBrush): DNPen; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Drawing.Pen" />
    ///  和 <see cref="T:System.Drawing.Brush" />
    ///  初始化 <see cref="P:System.Drawing.Pen.Width" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="brush">
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  ，决定此 <see cref="T:System.Drawing.Pen" />
    ///  的特征。
    ///</param>
    ///  <param name="width">
    ///  新 <see cref="T:System.Drawing.Pen" />
    ///  的宽度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(brush: DNBrush; width: Single): DNPen; overload;

  end;

  ///<summary>
  ///  定义用于绘制直线和曲线的对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Pen')]
  DNPen = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{CDC550AB-7CA0-3E7F-AB2B-7A88B65D0ECD}']
  { getters & setters } 

    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_MiterLimit: Single;
    procedure set_MiterLimit(value: Single);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Brush: DNBrush;
    procedure set_Brush(value: DNBrush);
    function get_DashOffset: Single;
    procedure set_DashOffset(value: Single);
    function get_DashPattern: TArray<Single>;
    procedure set_DashPattern(value: TArray<Single>);
    function get_CompoundArray: TArray<Single>;
    procedure set_CompoundArray(value: TArray<Single>);

  { methods } 

    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Pen" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns>
    ///  一个可以强制转换为 <see cref="T:System.Drawing.Pen" />
    ///  的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Pen" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Pen" />
    ///  的几何变换矩阵重置为单位矩阵。
    ///</summary>
    procedure ResetTransform;
    ///<summary>
    ///  用指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  乘以此 <see cref="T:System.Drawing.Pen" />
    ///  的变换矩阵。
    ///</summary>
    ///  <param name="matrix">
    ///  用来乘变换矩阵的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>
    ///  按照指定的顺序，用指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  乘以此 <see cref="T:System.Drawing.Pen" />
    ///  的变换矩阵。
    ///</summary>
    ///  <param name="matrix">
    ///  用来乘变换矩阵的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    ///  <param name="order">
    ///  执行乘法运算的顺序。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将局部几何转换平移指定尺寸。
    ///  此方法将平移添加到变换前。
    ///</summary>
    ///  <param name="dx">
    ///  X 方向的转换值。
    ///</param>
    ///  <param name="dy">
    ///  Y 方向的转换值。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>
    ///  按指定的顺序将局部几何转换平移指定的尺寸。
    ///</summary>
    ///  <param name="dx">
    ///  X 方向的转换值。
    ///</param>
    ///  <param name="dy">
    ///  Y 方向的转换值。
    ///</param>
    ///  <param name="order">
    ///  应用转换的顺序（在前面添加或在后面追加）。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  按指定因子缩放局部几何转换。
    ///  此方法将缩放矩阵添加到转换前。
    ///</summary>
    ///  <param name="sx">
    ///  沿 x 轴方向缩放转换的因子。
    ///</param>
    ///  <param name="sy">
    ///  沿 y 轴方向缩放转换的因子。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>
    ///  将局部几何转换以指定顺序缩放指定因子。
    ///</summary>
    ///  <param name="sx">
    ///  沿 x 轴方向缩放转换的因子。
    ///</param>
    ///  <param name="sy">
    ///  沿 y 轴方向缩放转换的因子。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，指定是在后面追加缩放矩阵还是在前面添加缩放矩阵。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将局部几何转换旋转指定角度。
    ///  此方法将旋转添加到变换前。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度。
    ///</param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>
    ///  以指定顺序将局部几何转换旋转指定角度。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，它指定是在后面追加旋转矩阵还是在前面添加旋转矩阵。
    ///</param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Pen" />
    ///  的宽度，以用于绘图的 <see cref="T:System.Drawing.Graphics" />
    ///  对象为单位。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Pen" />
    ///  的宽度。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.Width" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  获取或设置斜接角上联接宽度的限制。
    ///</summary>
    ///<returns>
    ///  斜接角上联接宽度的限制。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.MiterLimit" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property MiterLimit: Single read get_MiterLimit write set_MiterLimit;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Pen" />
    ///  的几何变换的副本。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  副本，表示此 <see cref="T:System.Drawing.Pen" />
    ///  的几何变换。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.Transform" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property Transform: DNMatrix read get_Transform write set_Transform;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Pen" />
    ///  的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，表示此 <see cref="T:System.Drawing.Pen" />
    ///  的颜色。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.Color" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Brush" />
    ///  ，用于确定此 <see cref="T:System.Drawing.Pen" />
    ///  的特性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  ，用于确定此 <see cref="T:System.Drawing.Pen" />
    ///  的特性。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.Brush" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property Brush: DNBrush read get_Brush write set_Brush;
    ///<summary>
    ///  获取或设置直线的起点到短划线图案起始处的距离。
    ///</summary>
    ///<returns>
    ///  直线的起点到短划线图案起始处的距离。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.DashOffset" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property DashOffset: Single read get_DashOffset write set_DashOffset;
    ///<summary>
    ///  获取或设置自定义的短划线和空白区域的数组。
    ///</summary>
    ///<returns>
    ///  实数数组，指定虚线中交替出现的短划线和空白区域的长度。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.DashPattern" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property DashPattern: TArray<Single> read get_DashPattern write set_DashPattern;
    ///<summary>
    ///  获取或设置用于指定复合钢笔的值数组。
    ///  复合钢笔绘制由平行直线和空白区域组成的复合直线。
    ///</summary>
    ///<returns>
    ///  用于指定复合数组的实数组。
    ///  该数组中的元素必须按升序排列，不能小于 0，也不能大于 1。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.CompoundArray" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property CompoundArray: TArray<Single> read get_CompoundArray write set_CompoundArray;
  end;

  TDNPen = class(TDNGenericImport<DNPenClass, DNPen>) end;

  //-------------namespace: System.Drawing----------------
  DNRegionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4B5420B2-257B-550F-892E-A967F1CA8C5D}']
  { constructors } 

    ///<summary>
    ///  初始化新的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    {class} function init: DNRegion; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.Region" />
    ///  从指定 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它定义新的内部 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    {class} function init(rect: DNRectangleF): DNRegion; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.Region" />
    ///  从指定 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它定义新的内部 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    {class} function init(rect: DNRectangle): DNRegion; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  初始化新的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="path">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ，它定义新的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(path: DNGraphicsPath): DNRegion; overload;

  { static methods } 

    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.Region" />
    ///  从指定的现有的句柄 GDI 区域。
    ///</summary>
    ///  <param name="hrgn">
    ///  一个现有的句柄 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</returns>
    {class} function FromHrgn(hrgn: IntPtr): DNRegion;

  end;

  ///<summary>
  ///  描述组成矩形和路径的图形形状的内部。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Region')]
  DNRegion = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{ECA0B9D1-F8EA-3069-9AF8-DD9A08876F74}']
  { methods } 

    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Region" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</returns>
    function Clone: DNRegion;
    ///<summary>
    ///  初始化此 <see cref="T:System.Drawing.Region" />
    ///  无限内部的对象。
    ///</summary>
    procedure MakeInfinite;
    ///<summary>
    ///  初始化此 <see cref="T:System.Drawing.Region" />
    ///  为一个空内部。
    ///</summary>
    procedure MakeEmpty;
    ///<summary>
    ///  通过指定的 <see cref="T:System.Drawing.Region" />
    ///  ，将此 <see cref="T:System.Drawing.Region" />
    ///  更新为其自身的交集。
    ///</summary>
    ///  <param name="region">
    ///  要与此 <see cref="T:System.Drawing.Region" />
    ///  相交的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Intersect(region: DNRegion); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  为自身与指定联合 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构与此联合 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Union(rect: DNRectangle); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  包含只有不相交具有指定其内部的部分 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构排除这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Exclude(rect: DNRectangle); overload;
    ///<summary>
    ///  这将返回 Windows 句柄 <see cref="T:System.Drawing.Region" />
    ///  中指定的图形上下文。
    ///</summary>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  此 <see cref="T:System.Drawing.Region" />
    ///  绘制。
    ///</param>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Region" />
    ///  的 Windows 句柄。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetHrgn(g: DNGraphics): IntPtr;
    ///<summary>
    ///  测试是否这 <see cref="T:System.Drawing.Region" />
    ///  有无限内部指定的绘图图面上。
    ///</summary>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示绘图图面。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此内部 <see cref="T:System.Drawing.Region" />
    ///  时与关联的转换是无限期 <paramref name="g" />
    ///  应用; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function IsInfinite(g: DNGraphics): Boolean;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Region" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  至其自身的与指定的交点 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  相交与此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Intersect(rect: DNRectangleF); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Region" />
    ///  更新为其自身与指定的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的交集。
    ///</summary>
    ///  <param name="rect">
    ///  要与此 <see cref="T:System.Drawing.Region" />
    ///  相交的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    procedure Intersect(rect: DNRectangle); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  至其自身的与指定的交点 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  要与此相交 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Intersect(path: DNGraphicsPath); overload;
    ///<summary>
    ///  释放该 <see cref="T:System.Drawing.Region" />
    ///  的句柄。
    ///</summary>
    ///  <param name="regionHandle"><see cref="T:System.Drawing.Region" />
    ///  的句柄。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="regionHandle" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure ReleaseHrgn(regionHandle: IntPtr);
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  为自身与指定联合 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构与此联合 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Union(rect: DNRectangleF); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  为自身与指定联合 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  与此联合 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Union(path: DNGraphicsPath); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  为自身与指定联合 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  与此联合 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Union(region: DNRegion); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  到的并集的交集本身具有指定减去 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构 <see cref="M:System.Drawing.Region.Xor(System.Drawing.Drawing2D.GraphicsPath)" />
    ///  与此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure &Xor(rect: DNRectangleF); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  到的并集的交集本身具有指定减去 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构 <see cref="Overload:System.Drawing.Region.Xor" />
    ///  与此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure &Xor(rect: DNRectangle); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  到的并集的交集本身具有指定减去 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  到 <see cref="Overload:System.Drawing.Region.Xor" />
    ///  与此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure &Xor(path: DNGraphicsPath); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  到的并集的交集本身具有指定减去 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  到 <see cref="Overload:System.Drawing.Region.Xor" />
    ///  与此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure &Xor(region: DNRegion); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  包含只有不相交具有指定其内部的部分 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构排除这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Exclude(rect: DNRectangleF); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  包含只有不相交具有指定其内部的部分 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  排除这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Exclude(path: DNGraphicsPath); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  包含只有不相交具有指定其内部的部分 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  排除这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Exclude(region: DNRegion); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  要包含的指定部分 <see cref="T:System.Drawing.RectangleF" />
    ///  与此不相交的结构 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构来补充这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Complement(rect: DNRectangleF); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  要包含的指定部分 <see cref="T:System.Drawing.Rectangle" />
    ///  与此不相交的结构 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构来补充这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Complement(rect: DNRectangle); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  以包含与此 <see cref="T:System.Drawing.Region" />
    ///  不相交的指定的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  的那部分。
    ///</summary>
    ///  <param name="path">
    ///  要对此 <see cref="T:System.Drawing.Region" />
    ///  进行补充的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Complement(path: DNGraphicsPath); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  以包含与此 <see cref="T:System.Drawing.Region" />
    ///  不相交的指定的 <see cref="T:System.Drawing.Region" />
    ///  的那部分。
    ///</summary>
    ///  <param name="region">
    ///  要对此 <see cref="T:System.Drawing.Region" />
    ///  对象进行补充的 <see cref="T:System.Drawing.Region" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Complement(region: DNRegion); overload;
    ///<summary>
    ///  这些坐标偏移 <see cref="T:System.Drawing.Region" />
    ///  指定的量。
    ///</summary>
    ///  <param name="dx">
    ///  此偏移量 <see cref="T:System.Drawing.Region" />
    ///  水平。
    ///</param>
    ///  <param name="dy">
    ///  此偏移量 <see cref="T:System.Drawing.Region" />
    ///  垂直方向。
    ///</param>
    procedure Translate(dx: Single; dy: Single); overload;
    ///<summary>
    ///  这些坐标偏移 <see cref="T:System.Drawing.Region" />
    ///  指定的量。
    ///</summary>
    ///  <param name="dx">
    ///  此偏移量 <see cref="T:System.Drawing.Region" />
    ///  水平。
    ///</param>
    ///  <param name="dy">
    ///  此偏移量 <see cref="T:System.Drawing.Region" />
    ///  垂直方向。
    ///</param>
    procedure Translate(dx: Int32; dy: Int32); overload;
    ///<summary>
    ///  这一转变源自 <see cref="T:System.Drawing.Region" />
    ///  由指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  进行变换这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="matrix" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Transform(matrix: DNMatrix);
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示限定此矩形 <see cref="T:System.Drawing.Region" />
    ///  的绘图图面上 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</summary>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  此 <see cref="T:System.Drawing.Region" />
    ///  绘制。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示此边界的矩形 <see cref="T:System.Drawing.Region" />
    ///  绘图图面上指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetBounds(g: DNGraphics): DNRectangleF;
    ///<summary>
    ///  测试是否这 <see cref="T:System.Drawing.Region" />
    ///  有空的内部指定的绘图图面上。
    ///</summary>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示绘图图面。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此内部 <see cref="T:System.Drawing.Region" />
    ///  与转换相关联时，是空 <paramref name="g" />
    ///  应用; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function IsEmpty(g: DNGraphics): Boolean;
    ///<summary>
    ///  测试是否指定 <see cref="T:System.Drawing.Region" />
    ///  是否与此 <see cref="T:System.Drawing.Region" />
    ///  绘图图面上指定。
    ///</summary>
    ///  <param name="region">
    ///  要测试的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示绘图图面。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果与转换关联时，均不同于内部与此区域的内部与区域 <paramref name="g" />
    ///  参数是应用; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  或 <paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Equals(region: DNRegion; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single): Boolean; overload;
    ///<summary>
    ///  测试是否指定 <see cref="T:System.Drawing.PointF" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  要测试其结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  当 <paramref name="point" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPointF): Boolean; overload;
    ///<summary>
    ///  测试是否指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定 <see cref="T:System.Drawing.PointF" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  要测试其结构。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当 <paramref name="point" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPointF; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的矩形的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的矩形的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试的矩形的高度。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single; width: Single; height: Single): Boolean; overload;
    ///<summary>
    ///  测试是否有任何指定的部分 <see cref="T:System.Drawing.RectangleF" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  要测试其结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  时的任何部分 <paramref name="rect" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangleF): Boolean; overload;
    ///<summary>
    ///  测试是否指定任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的矩形的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的矩形的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试的矩形的高度。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single; width: Single; height: Single; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否有任何指定的部分 <see cref="T:System.Drawing.RectangleF" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  要测试其结构。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当 <paramref name="rect" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangleF; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  对象时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定 <see cref="T:System.Drawing.Point" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  要测试其结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  当 <paramref name="point" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPoint): Boolean; overload;
    ///<summary>
    ///  测试是否指定 <see cref="T:System.Drawing.Point" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  要测试其结构。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当 <paramref name="point" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPoint; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的矩形的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的矩形的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试的矩形的高度。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32): Boolean; overload;
    ///<summary>
    ///  测试是否有任何指定的部分 <see cref="T:System.Drawing.Rectangle" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  要测试其结构。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  时的任何部分 <paramref name="rect" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangle): Boolean; overload;
    ///<summary>
    ///  测试是否指定任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的矩形的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的矩形的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试的矩形的高度。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否有任何指定的部分 <see cref="T:System.Drawing.Rectangle" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  要测试其结构。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  时的任何部分 <paramref name="rect" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangle; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  返回的数组 <see cref="T:System.Drawing.RectangleF" />
    ///  近似的结构 <see cref="T:System.Drawing.Region" />
    ///  应用指定的矩阵变换之后。
    ///</summary>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，表示要应用于区域的几何变换。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.RectangleF" />
    ///  近似的结构 <see cref="T:System.Drawing.Region" />
    ///  应用指定的矩阵变换之后。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="matrix" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetRegionScans(matrix: DNMatrix): TArray<DNRectangleF>;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegion = class(TDNGenericImport<DNRegionClass, DNRegion>) end;

  //-------------namespace: System.Drawing----------------
  DNStringFormatClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{56C8F5D2-5C03-54B7-9939-1F548CEBD429}']
  { static getter & setter } 

    {class} function get_GenericDefault: DNStringFormat;
    {class} function get_GenericTypographic: DNStringFormat;

  { constructors } 

    ///<summary>
    ///  初始化新的 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    {class} function init: DNStringFormat; overload;
    ///<summary>
    ///  用指定的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举初始化新 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    ///  <param name="options">
    ///  新 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举。
    ///</param>
    {class} function init(options: DNStringFormatFlags): DNStringFormat; overload;
    ///<summary>
    ///  用指定的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举和语言初始化新的 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    ///  <param name="options">
    ///  新 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举。
    ///</param>
    ///  <param name="language">
    ///  一个指示文本语言的值。
    ///</param>
    {class} function init(options: DNStringFormatFlags; language: Int32): DNStringFormat; overload;
    ///<summary>
    ///  从指定的现有 <see cref="T:System.Drawing.StringFormat" />
    ///  对象初始化新 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  对象，从该对象初始化新 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="format" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(format: DNStringFormat): DNStringFormat; overload;

  { static propertys } 

    ///<summary>
    ///  获取泛型默认 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  泛型默认 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</returns>
    {class} property GenericDefault: DNStringFormat read get_GenericDefault;
    ///<summary>
    ///  获取泛型版式 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  泛型版式 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</returns>
    {class} property GenericTypographic: DNStringFormat read get_GenericTypographic;
  end;

  ///<summary>
  ///  封装文本布局信息（如对齐方式、方向和制表位）、显示操作（如省略号插入和区域数字替换）和 OpenType 功能。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.StringFormat')]
  DNStringFormat = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{977C6406-2374-3D2B-ADE1-F9C93DB908CA}']
  { getters & setters } 

    function get_FormatFlags: DNStringFormatFlags;
    procedure set_FormatFlags(value: DNStringFormatFlags);
    function get_Alignment: DNStringAlignment;
    procedure set_Alignment(value: DNStringAlignment);
    function get_LineAlignment: DNStringAlignment;
    procedure set_LineAlignment(value: DNStringAlignment);
    function get_HotkeyPrefix: DNHotkeyPrefix;
    procedure set_HotkeyPrefix(value: DNHotkeyPrefix);
    function get_Trimming: DNStringTrimming;
    procedure set_Trimming(value: DNStringTrimming);
    function get_DigitSubstitutionMethod: DNStringDigitSubstitute;
    function get_DigitSubstitutionLanguage: Int32;

  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  指定 <see cref="T:System.Drawing.CharacterRange" />
    ///  结构的数组，这些结构表示通过调用 <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
    ///  方法来测定的字符的范围。
    ///</summary>
    ///  <param name="ranges"><see cref="T:System.Drawing.CharacterRange" />
    ///  结构的数组，这些结构指定由调用 <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
    ///  方法来测定的字符范围。
    ///</param>
    ///<exception cref="T:System.OverflowException">
    ///  已设置超过 32 个字符范围。
    ///</exception>
    procedure SetMeasurableCharacterRanges(ranges: TArray<DNCharacterRange>);
    ///<summary>
    ///  为此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象设置制表位。
    ///</summary>
    ///  <param name="firstTabOffset">
    ///  文本行开头和第一个制表位之间的空格数。
    ///</param>
    ///  <param name="tabStops">
    ///  制表位之间的距离的数组，这些距离的单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</param>
    procedure SetTabStops(firstTabOffset: Single; tabStops: TArray<Single>);
    function GetTabStops(out firstTabOffset: Single): TArray<Single>;
    ///<summary>
    ///  指定将本地数字替换为西方数字时所使用的语言和方法。
    ///</summary>
    ///  <param name="language">
    ///  一个区域语言支持 (NLS) 语言标识符，它标识在将本地数字替换为西方数字时所使用的语言。
    ///  可将 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象的 <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  属性作为 NLS 语言标识符传递。
    ///  例如，假定通过将字符串“ar-EG”传递给 <see cref="T:System.Globalization.CultureInfo" />
    ///  构造函数来创建 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象。
    ///  如果将该 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象的 <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  属性连同 <see cref="F:System.Drawing.StringDigitSubstitute.Traditional" />
    ///  一起传递给 <see cref="M:System.Drawing.StringFormat.SetDigitSubstitution(System.Int32,System.Drawing.StringDigitSubstitute)" />
    ///  ，则在显示时阿拉伯 - 印度文数字将会替换西方数字。
    ///</param>
    ///  <param name="substitute"><see cref="T:System.Drawing.StringDigitSubstitute" />
    ///  枚举的一个元素，它指定如何显示数字位。
    ///</param>
    procedure SetDigitSubstitution(language: Int32; substitute: DNStringDigitSubstitute);
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象转换为可读的字符串。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的字符串表示形式。
    ///</returns>
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置包含格式化信息的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举。
    ///</summary>
    ///<returns>
    ///  包含格式化信息的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举。
    ///</returns>
    property FormatFlags: DNStringFormatFlags read get_FormatFlags write set_FormatFlags;
    ///<summary>
    ///  获取或设置字符串的水平对齐方式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.StringAlignment" />
    ///  枚举，它指定字符串的水平对齐方式。
    ///</returns>
    property Alignment: DNStringAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  获取或设置字符串的垂直对齐方式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.StringAlignment" />
    ///  枚举，它表示行的垂直对齐方式。
    ///</returns>
    property LineAlignment: DNStringAlignment read get_LineAlignment write set_LineAlignment;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的 <see cref="T:System.Drawing.Text.HotkeyPrefix" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的 <see cref="T:System.Drawing.Text.HotkeyPrefix" />
    ///  对象，默认值为 <see cref="F:System.Drawing.Text.HotkeyPrefix.None" />
    ///  。
    ///</returns>
    property HotkeyPrefix: DNHotkeyPrefix read get_HotkeyPrefix write set_HotkeyPrefix;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的 <see cref="T:System.Drawing.StringTrimming" />
    ///  枚举。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.StringTrimming" />
    ///  枚举，它指示当用此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象绘制的文本超出布局矩形的边缘时被剪裁的方式。
    ///</returns>
    property Trimming: DNStringTrimming read get_Trimming write set_Trimming;
    ///<summary>
    ///  获取要用于数字替换的方法。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.StringDigitSubstitute" />
    ///  枚举值，它指定如何替换字符串中因当前字体不支持而无法显示的字符。
    ///</returns>
    property DigitSubstitutionMethod: DNStringDigitSubstitute read get_DigitSubstitutionMethod;
    ///<summary>
    ///  获取将本地数字替换西方数字时所使用的语言。
    ///</summary>
    ///<returns>
    ///  一个区域语言支持 (NLS) 语言标识符，它标识在将本地数字替换为西方数字时所使用的语言。
    ///  可将 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象的 <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  属性作为 NLS 语言标识符传递。
    ///  例如，假定通过将字符串“ar-EG”传递给 <see cref="T:System.Globalization.CultureInfo" />
    ///  构造函数来创建 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象。
    ///  如果将该 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象的 <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  属性连同 <see cref="F:System.Drawing.StringDigitSubstitute.Traditional" />
    ///  一起传递给 <see cref="M:System.Drawing.StringFormat.SetDigitSubstitution(System.Int32,System.Drawing.StringDigitSubstitute)" />
    ///  方法，则在显示时阿拉伯 - 印度文数字将会替换西方数字。
    ///</returns>
    property DigitSubstitutionLanguage: Int32 read get_DigitSubstitutionLanguage;
  end;

  TDNStringFormat = class(TDNGenericImport<DNStringFormatClass, DNStringFormat>) end;

  //-------------namespace: System.Web.UI----------------
  DNHtmlTextWriterClass = interface(DDN.mscorlib.DNTextWriterClass)
  ['{BBBBE4D8-A1D4-5A24-959E-FC7064CD28E2}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  类，该类使用默认选项卡上字符串。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  呈现标记内容的实例。
    ///</param>
    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNHtmlTextWriter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  类，具有指定的选项卡字符串字符。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  呈现标记内容。
    ///</param>
    ///  <param name="tabString">
    ///  要用来呈现行缩进的字符串。
    ///</param>
    {class} function init(writer: DDN.mscorlib.DNTextWriter; tabString: string): DNHtmlTextWriter; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_TagLeftChar: Char;
   function __fakeFieldGet_TagRightChar: Char;
   function __fakeFieldGet_SelfClosingChars: string;
   function __fakeFieldGet_SelfClosingTagEnd: string;
   function __fakeFieldGet_EndTagLeftChars: string;
   function __fakeFieldGet_DoubleQuoteChar: Char;
   function __fakeFieldGet_SingleQuoteChar: Char;
   function __fakeFieldGet_SpaceChar: Char;
   function __fakeFieldGet_EqualsChar: Char;
   function __fakeFieldGet_SlashChar: Char;
   function __fakeFieldGet_EqualsDoubleQuoteString: string;
   function __fakeFieldGet_SemicolonChar: Char;
   function __fakeFieldGet_StyleEqualsChar: Char;
   function __fakeFieldGet_DefaultTabString: string;

  { static fields } 

    ///<summary>
    ///  表示标记左尖括号 (&lt;)。
    ///</summary>
    {class} property TagLeftChar: Char read __fakeFieldGet_TagLeftChar;
    ///<summary>
    ///  表示标记在右尖括号 (&gt;)。
    ///</summary>
    {class} property TagRightChar: Char read __fakeFieldGet_TagRightChar;
    ///<summary>
    ///  表示一个空格和标记自结束斜杠标记 （/）。
    ///</summary>
    {class} property SelfClosingChars: string read __fakeFieldGet_SelfClosingChars;
    ///<summary>
    ///  表示在结束标记和右尖括号正斜杠 (/ &gt;) 自结束标记元素。
    ///</summary>
    {class} property SelfClosingTagEnd: string read __fakeFieldGet_SelfClosingTagEnd;
    ///<summary>
    ///  表示左的角括号和斜杠标记 (&lt; /) 的标记元素的结束标记。
    ///</summary>
    {class} property EndTagLeftChars: string read __fakeFieldGet_EndTagLeftChars;
    ///<summary>
    ///  表示的引号 （"） 字符。
    ///</summary>
    {class} property DoubleQuoteChar: Char read __fakeFieldGet_DoubleQuoteChar;
    ///<summary>
    ///  表示单引号 （'）。
    ///</summary>
    {class} property SingleQuoteChar: Char read __fakeFieldGet_SingleQuoteChar;
    ///<summary>
    ///  表示空格 （） 字符。
    ///</summary>
    {class} property SpaceChar: Char read __fakeFieldGet_SpaceChar;
    ///<summary>
    ///  表示在等号 (<see langword="=" />
    ///  )。
    ///</summary>
    {class} property EqualsChar: Char read __fakeFieldGet_EqualsChar;
    ///<summary>
    ///  表示斜杠标记 （/）。
    ///</summary>
    {class} property SlashChar: Char read __fakeFieldGet_SlashChar;
    ///<summary>
    ///  表示一个等号 （=） 和双引号 （"） 在字符串中组合在一起 (=")。
    ///</summary>
    {class} property EqualsDoubleQuoteString: string read __fakeFieldGet_EqualsDoubleQuoteString;
    ///<summary>
    ///  表示分号 （;）。
    ///</summary>
    {class} property SemicolonChar: Char read __fakeFieldGet_SemicolonChar;
    ///<summary>
    ///  表示样式等号 (<see langword=":" />
    ///  ) 字符用于设置样式属性等于的值。
    ///</summary>
    {class} property StyleEqualsChar: Char read __fakeFieldGet_StyleEqualsChar;
    ///<summary>
    ///  表示一个制表符。
    ///</summary>
    {class} property DefaultTabString: string read __fakeFieldGet_DefaultTabString;

  end;

  ///<summary>
  ///  ASP.NET 服务器控件输出流中写入标记字符和文本。
  ///  此类提供 ASP.NET 服务器控件使用呈现标记为客户端时的格式设置功能。
  ///</summary>
  [DNTypeName('System.Web.UI.HtmlTextWriter')]
  DNHtmlTextWriter = interface(DDN.mscorlib.DNTextWriter)
  ['{78E056A6-0518-3FC9-84E9-DD8A409BEEAA}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_InnerWriter: DDN.mscorlib.DNTextWriter;
    procedure set_InnerWriter(value: DDN.mscorlib.DNTextWriter);
    function get_FormatProvider: DDN.mscorlib.DNIFormatProvider;

  { methods } 

    ///<summary>
    ///  检查以确保可以呈现的开始标记中一个特性 <see langword="&lt;form&gt;" />
    ///  标记元素。
    ///</summary>
    ///  <param name="attribute">
    ///  一个字符串，包含要检查的属性的名称。
    ///</param>
    ///<returns>
    ///  总是为 <see langword="true" />
    ///  。
    ///</returns>
    function IsValidFormAttribute(attribute: string): Boolean;
    ///<summary>
    ///  通知 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象或派生类中，该控件是要呈现的对象。
    ///</summary>
    procedure BeginRender;
    ///<summary>
    ///  关闭 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象并释放与之关联的所有系统资源。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  通知 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象或派生类中，控件已完成呈现的对象。
    ///  可以使用此方法以关闭任何打开的标记元素 <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
    ///  方法。
    ///</summary>
    procedure EndRender;
    ///<summary>
    ///  写入的开始标记 <see langword="&lt;span&gt;" />
    ///  元素，其中包含实现的布局和字符格式的指定样式的特性。
    ///</summary>
    ///  <param name="style">
    ///  一个 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  ，指定布局和格式设置将应用于标记块的开始。
    ///</param>
    procedure EnterStyle(style: DNStyle);
    ///<summary>
    ///  写入的结束标记 <see langword="&lt;span&gt;" />
    ///  元素以结束指定的布局和字符格式。
    ///</summary>
    ///  <param name="style">
    ///  一个 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  ，它指定的布局和格式设置，以关闭。
    ///</param>
    procedure ExitStyle(style: DNStyle);
    ///<summary>
    ///  清除所有缓冲区当前 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象并使所有缓冲数据写入到输出流。
    ///</summary>
    procedure Flush;
    ///<summary>
    ///  将指定的字符串写入输出流，以及任何挂起的制表符间距。
    ///</summary>
    ///  <param name="s">
    ///  要写入到输出流的字符串。
    ///</param>
    procedure Write(s: string); overload;
    ///<summary>
    ///  一个布尔值的文本表示写入输出流，以及任何挂起的制表符间距。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Boolean" />
    ///  要写入到输出流。
    ///</param>
    procedure Write(value: Boolean); overload;
    ///<summary>
    ///  将 Unicode 字符的文本表示写入输出流，以及任何挂起的制表符间距。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的 Unicode 字符。
    ///</param>
    procedure Write(value: Char); overload;
    ///<summary>
    ///  写入输出流，以及任何挂起的制表符间距的文本表示形式的 Unicode 字符数组。
    ///</summary>
    ///  <param name="buffer">
    ///  要写入到输出流的 Unicode 字符数组。
    ///</param>
    procedure Write(buffer: TArray<Char>); overload;
    ///<summary>
    ///  文本表示形式的 Unicode 字符子数组写入输出流，以及任何挂起的制表符间距。
    ///</summary>
    ///  <param name="buffer">
    ///  从要将文本写入到输出流的字符数组。
    ///</param>
    ///  <param name="index">
    ///  数组中开始写入的索引位置。
    ///</param>
    ///  <param name="count">
    ///  要写入到输出流的字符数。
    ///</param>
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    ///<summary>
    ///  写入输出流，以及任何挂起的制表符间距的文本表示形式的双精度浮点数。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的双精度浮点数。
    ///</param>
    procedure Write(value: Double); overload;
    ///<summary>
    ///  将一个单精度浮点数的文本表示写入输出流，以及任何挂起的制表符间距。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的单精度浮点数。
    ///</param>
    procedure Write(value: Single); overload;
    ///<summary>
    ///  将 32 位带符号整数的文本表示写入输出流，以及任何挂起的选项卡上间距。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的 32 字节有符号的整数。
    ///</param>
    procedure Write(value: Int32); overload;
    ///<summary>
    ///  64 位带符号整数的文本表示写入输出流，以及任何挂起的选项卡上间距。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的 64 个字节有符号的整数。
    ///</param>
    procedure Write(value: Int64); overload;
    ///<summary>
    ///  一个对象的文本表示写入输出流，以及任何挂起的制表符间距。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的对象。
    ///</param>
    procedure Write(value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将选项卡上字符串和一个格式化的字符串写入到输出流中，使用相同的语义 <see cref="M:System.String.Format(System.String,System.Object)" />
    ///  方法，以及任何挂起的选项卡上间距。
    ///</summary>
    ///  <param name="format">
    ///  一个字符串，包含零个或多个格式项。
    ///</param>
    ///  <param name="arg0">
    ///  要设置其格式的对象。
    ///</param>
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将格式化的字符串，其中包含的文本表示形式写入输出流，以及任何挂起的制表符间距的两个对象。
    ///  此方法使用相同的语义 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />
    ///  方法。
    ///</summary>
    ///  <param name="format">
    ///  一个字符串，包含零个或多个格式项。
    ///</param>
    ///  <param name="arg0">
    ///  要设置其格式的对象。
    ///</param>
    ///  <param name="arg1">
    ///  要设置其格式的对象。
    ///</param>
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将格式化的字符串，其中包含的文本表示形式写入输出流，以及任何挂起的制表符间距对象数组。
    ///  此方法使用相同的语义 <see cref="M:System.String.Format(System.String,System.Object[])" />
    ///  方法。
    ///</summary>
    ///  <param name="format">
    ///  一个字符串，包含零个或多个格式项。
    ///</param>
    ///  <param name="arg">
    ///  要设置格式的对象数组。
    ///</param>
    procedure Write(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    ///<summary>
    ///  将任何挂起的制表符间距和跟行结束符字符串，写入输出流的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要写入到输出流的字符串。
    ///</param>
    procedure WriteLine(s: string); overload;
    ///<summary>
    ///  输出流中写入行结束符字符串。
    ///</summary>
    procedure WriteLine; overload;
    ///<summary>
    ///  将任何挂起的选项卡上间距和一个布尔值后, 跟行结束符字符串，写入输出流的文本表示写入。
    ///</summary>
    ///  <param name="value">
    ///  一个布尔值，要写入到输出流。
    ///</param>
    procedure WriteLine(value: Boolean); overload;
    ///<summary>
    ///  将任何挂起的制表符间距和 Unicode 字符后, 跟行结束符字符串，写入输出流。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的字符。
    ///</param>
    procedure WriteLine(value: Char); overload;
    ///<summary>
    ///  将所有挂起的制表符间距和 Unicode 字符后, 跟行结束符字符串，写入输出流的数组。
    ///</summary>
    ///  <param name="buffer">
    ///  要写入到输出流的字符数组。
    ///</param>
    procedure WriteLine(buffer: TArray<Char>); overload;
    ///<summary>
    ///  将任何挂起的选项卡上间距和 Unicode 字符后, 跟行结束符字符串，写入输出流的子数组写入。
    ///</summary>
    ///  <param name="buffer">
    ///  从要将文本写入到输出流的字符数组。
    ///</param>
    ///  <param name="index">
    ///  字符数组中开始写入的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入到输出流的数组中的字符数。
    ///</param>
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    ///<summary>
    ///  将任何挂起的选项卡上间距和双精度浮点数后, 跟行结束符字符串，写入输出流的文本表示写入。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的双精度浮点数。
    ///</param>
    procedure WriteLine(value: Double); overload;
    ///<summary>
    ///  将任何挂起的选项卡上间距和单精度浮点数后, 跟行结束符字符串，写入输出流的文本表示写入。
    ///</summary>
    ///  <param name="value">
    ///  单精度浮点数要写入到输出流。
    ///</param>
    procedure WriteLine(value: Single); overload;
    ///<summary>
    ///  将任何挂起的选项卡上间距和 32 位带符号整数后, 跟行结束符字符串，写入输出流的文本表示写入。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的 32 字节有符号的整数。
    ///</param>
    procedure WriteLine(value: Int32); overload;
    ///<summary>
    ///  将任何挂起的选项卡上间距和 64 位带符号整数后, 跟行结束符字符串，写入输出流的文本表示写入。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的 64 个字节有符号的整数。
    ///</param>
    procedure WriteLine(value: Int64); overload;
    ///<summary>
    ///  将任何挂起的选项卡上间距和对象后, 跟行结束符字符串，写入输出流的文本表示形式写入。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的对象。
    ///</param>
    procedure WriteLine(value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将所有挂起的制表符间距和一个包含对象后, 跟行结束符字符串，写入输出流的文本表示格式化的字符串。
    ///</summary>
    ///  <param name="format">
    ///  包含零个或多个格式项的字符串。
    ///</param>
    ///  <param name="arg0">
    ///  要设置其格式的对象。
    ///</param>
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将所有挂起的制表符间距和一个包含两个对象后, 跟行结束符字符串，写入输出流的文本表示形式的格式化的字符串。
    ///</summary>
    ///  <param name="format">
    ///  包含零个或多个格式项的字符串。
    ///</param>
    ///  <param name="arg0">
    ///  要设置其格式的对象。
    ///</param>
    ///  <param name="arg1">
    ///  要设置其格式的对象。
    ///</param>
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将所有挂起的制表符间距和包含一个对象数组后, 跟行结束符字符串，写入输出流的文本表示的格式化的字符串。
    ///</summary>
    ///  <param name="format">
    ///  包含零个或多个格式项的字符串。
    ///</param>
    ///  <param name="arg">
    ///  要设置格式的对象数组。
    ///</param>
    procedure WriteLine(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    ///<summary>
    ///  将任何挂起的选项卡上间距和跟行结束符字符串，写入输出流的 4 字节无符号整数的文本表示写入。
    ///</summary>
    ///  <param name="value">
    ///  要写入到输出流的 4 字节无符号的整数。
    ///</param>
    procedure WriteLine(value: UInt32); overload;
    ///<summary>
    ///  将指定的标记特性和值添加到该元素的开始标记， <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象创建的后续调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
    ///  方法。
    ///</summary>
    ///  <param name="name">
    ///  包含要添加的属性的名称的字符串。
    ///</param>
    ///  <param name="value">
    ///  包含要分配给属性的值的字符串。
    ///</param>
    procedure AddAttribute(name: string; value: string); overload;
    ///<summary>
    ///  将指定的标记特性和值添加到该元素的开始标记， <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象创建的后续调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
    ///  具有可选的编码方法。
    ///</summary>
    ///  <param name="name">
    ///  包含要添加的属性的名称的字符串。
    ///</param>
    ///  <param name="value">
    ///  包含要分配给属性的值的字符串。
    ///</param>
    ///  <param name="fEndode"><see langword="true" />
    ///  要编码的属性和它的值;否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure AddAttribute(name: string; value: string; fEndode: Boolean); overload;
    ///<summary>
    ///  将指定的标记样式特性和特性值添加到打开标记标记创建的后续调用 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
    ///  方法。
    ///</summary>
    ///  <param name="name">
    ///  一个字符串，包含要添加的样式属性。
    ///</param>
    ///  <param name="value">
    ///  一个字符串，包含要分配给属性的值。
    ///</param>
    procedure AddStyleAttribute(name: string; value: string);
    ///<summary>
    ///  将指定标记元素的开始标记写入输出流。
    ///</summary>
    ///  <param name="tagName">
    ///  一个字符串，包含要为其呈现开始标记的标记元素的名称。
    ///</param>
    procedure RenderBeginTag(tagName: string);
    ///<summary>
    ///  将标记元素的结束标记写入输出流。
    ///</summary>
    procedure RenderEndTag;
    ///<summary>
    ///  将指定的标记特性和值写入到输出流。
    ///</summary>
    ///  <param name="name">
    ///  要写入到输出流的属性。
    ///</param>
    ///  <param name="value">
    ///  要分配给特性的值。
    ///</param>
    procedure WriteAttribute(name: string; value: string); overload;
    ///<summary>
    ///  输出流中写入任何制表符间距和指定的标记元素的开始标记。
    ///</summary>
    ///  <param name="tagName">
    ///  要写入的开始标记的标记元素。
    ///</param>
    procedure WriteBeginTag(tagName: string);
    ///<summary>
    ///  输出流中写入任何制表符间距和指定的标记元素的开始标记。
    ///</summary>
    ///  <param name="tagName">
    ///  要写入到输出流的元素。
    ///</param>
    procedure WriteFullBeginTag(tagName: string);
    ///<summary>
    ///  写入任何制表符间距和指定的标记元素的结束标记。
    ///</summary>
    ///  <param name="tagName">
    ///  要写入的结束标记的元素。
    ///</param>
    procedure WriteEndTag(tagName: string);
    ///<summary>
    ///  将指定的样式属性写入输出流。
    ///</summary>
    ///  <param name="name">
    ///  要写入到输出流的样式属性。
    ///</param>
    ///  <param name="value">
    ///  分配给的样式属性的值。
    ///</param>
    procedure WriteStyleAttribute(name: string; value: string); overload;
    ///<summary>
    ///  将指定的样式属性和值写入输出流中，而编码值，如果指定。
    ///</summary>
    ///  <param name="name">
    ///  要写入到输出流的样式属性。
    ///</param>
    ///  <param name="value">
    ///  分配给的样式属性的值。
    ///</param>
    ///  <param name="fEncode"><see langword="true" />
    ///  要编码的样式属性和其已分配的值;否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure WriteStyleAttribute(name: string; value: string; fEncode: Boolean); overload;
    ///<summary>
    ///  对指定的 URL 进行编码，然后将它写入到输出流。
    ///  URL 可以包括参数。
    ///</summary>
    ///  <param name="url">
    ///  要进行编码并写入到输出流的 URL 字符串。
    ///</param>
    procedure WriteEncodedUrl(url: string);
    ///<summary>
    ///  将编码为请求的设备，指定的 URL 参数，然后将其写入输出流。
    ///</summary>
    ///  <param name="urlText">
    ///  URL 参数字符串进行编码，并写入到输出流。
    ///</param>
    procedure WriteEncodedUrlParameter(urlText: string);
    ///<summary>
    ///  将后跟行结束符字符串，写入输出流的字符串。
    ///  此方法将忽略任何指定的选项卡间距。
    ///</summary>
    ///  <param name="s">
    ///  要写入到输出流的字符串。
    ///</param>
    procedure WriteLineNoTabs(s: string);
    ///<summary>
    ///  将指定标记特性和值写入输出流，并且（如果指定）写入经过编码的值。
    ///</summary>
    ///  <param name="name">
    ///  要写入输出流的标记特性。
    ///</param>
    ///  <param name="value">
    ///  要分配给特性的值。
    ///</param>
    ///  <param name="fEncode">
    ///  若要对特性及其分配值进行编码，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure WriteAttribute(name: string; value: string; fEncode: Boolean); overload;
    ///<summary>
    ///  写入<see langword="&lt;br /&gt;" />
    ///  标记元素写入输出流。
    ///</summary>
    procedure WriteBreak;
    ///<summary>
    ///  对请求设备的指定文本进行编码，然后将其写入到输出流。
    ///</summary>
    ///  <param name="text">
    ///  要进行编码并写入到输出流的文本字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="text" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure WriteEncodedText(text: string);
    procedure Dispose;
    procedure Write(value: UInt32); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: DDN.mscorlib.DNDecimal); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNDecimal); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    function WriteAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync: DDN.mscorlib.DNTask;
    function WriteAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的编码 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象用于向网页写入内容。
    ///</summary>
    ///<returns><see cref="T:System.Text.Encoding" />
    ///  标记用来写入到页。
    ///</returns>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    ///<summary>
    ///  获取或设置使用的行结束符字符串 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  使用由当前的行结束符字符串 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  。
    ///</returns>
    property NewLine: string read get_NewLine write set_NewLine;
    ///<summary>
    ///  获取或设置缩进每一行标记的开头的制表位位置数。
    ///</summary>
    ///<returns>
    ///  缩进每一行的制表位位置数。
    ///</returns>
    property Indent: Int32 read get_Indent write set_Indent;
    ///<summary>
    ///  获取或设置的文本编写器写入的标记元素内部内容。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.IO.TextWriter" />
    ///  ，它将写入内部标记内容。
    ///</returns>
    property InnerWriter: DDN.mscorlib.DNTextWriter read get_InnerWriter write set_InnerWriter;
    property FormatProvider: DDN.mscorlib.DNIFormatProvider read get_FormatProvider;
  end;

  TDNHtmlTextWriter = class(TDNGenericImport<DNHtmlTextWriterClass, DNHtmlTextWriter>)
  public const
    ///<summary>
    ///  表示标记左尖括号 (&lt;)。
    ///</summary>
   TagLeftChar = #60;
    ///<summary>
    ///  表示标记在右尖括号 (&gt;)。
    ///</summary>
   TagRightChar = #62;
    ///<summary>
    ///  表示一个空格和标记自结束斜杠标记 （/）。
    ///</summary>
   SelfClosingChars = ' /';
    ///<summary>
    ///  表示在结束标记和右尖括号正斜杠 (/ &gt;) 自结束标记元素。
    ///</summary>
   SelfClosingTagEnd = ' />';
    ///<summary>
    ///  表示左的角括号和斜杠标记 (&lt; /) 的标记元素的结束标记。
    ///</summary>
   EndTagLeftChars = '</';
    ///<summary>
    ///  表示的引号 （"） 字符。
    ///</summary>
   DoubleQuoteChar = #34;
    ///<summary>
    ///  表示单引号 （'）。
    ///</summary>
   SingleQuoteChar = #39;
    ///<summary>
    ///  表示空格 （） 字符。
    ///</summary>
   SpaceChar = #32;
    ///<summary>
    ///  表示在等号 (<see langword="=" />
    ///  )。
    ///</summary>
   EqualsChar = #61;
    ///<summary>
    ///  表示斜杠标记 （/）。
    ///</summary>
   SlashChar = #47;
    ///<summary>
    ///  表示一个等号 （=） 和双引号 （"） 在字符串中组合在一起 (=")。
    ///</summary>
   EqualsDoubleQuoteString = '="';
    ///<summary>
    ///  表示分号 （;）。
    ///</summary>
   SemicolonChar = #59;
    ///<summary>
    ///  表示样式等号 (<see langword=":" />
    ///  ) 字符用于设置样式属性等于的值。
    ///</summary>
   StyleEqualsChar = #58;
    ///<summary>
    ///  表示一个制表符。
    ///</summary>
   DefaultTabString = '	';
  end;

  //-------------namespace: System.Net----------------
  ///<summary>
  ///  提供用于检索 Web 客户端身份验证的凭据的基本身份验证接口。
  ///</summary>
  [DNTypeName('System.Net.ICredentials')]
  DNICredentials = interface(DDN.mscorlib.DNObject)
  ['{AA928FDF-0CBF-3845-8ECB-08339B2DC61D}']
  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Net.NetworkCredential" />
    ///  与指定的 URI、 和身份验证类型相关联的对象。
    ///</summary>
    ///  <param name="uri"><see cref="T:System.Uri" />
    ///  客户端提供了有关身份验证。
    ///</param>
    ///  <param name="authType">
    ///  身份验证，如中所定义的类型 <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" />
    ///  属性。
    ///</param>
    ///<returns><see cref="T:System.Net.NetworkCredential" />
    ///  与指定的 URI 和身份验证类型相关联; 如果没有凭据，则有 <see langword="null" />
    ///  。
    ///</returns>
    function GetCredential(uri: DNUri; authType: string): DNNetworkCredential;

  end;

  //-------------namespace: System.Net----------------
  DNNetworkCredentialClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D309109D-58F6-59FE-8F05-EE7DD87BBE6A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.NetworkCredential" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNetworkCredential; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Net.NetworkCredential" />
    ///  类，具有指定的用户名和密码。
    ///</summary>
    ///  <param name="userName">
    ///  与凭据关联的用户名。
    ///</param>
    ///  <param name="password">
    ///  与凭据关联的用户名密码。
    ///</param>
    {class} function init(userName: string; password: string): DNNetworkCredential; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Net.NetworkCredential" />
    ///  类，具有指定的用户名和密码。
    ///</summary>
    ///  <param name="userName">
    ///  与凭据关联的用户名。
    ///</param>
    ///  <param name="password">
    ///  与凭据关联的用户名密码。
    ///</param>
    ///<exception cref="T:System.NotSupportedException"><see cref="T:System.Security.SecureString" />
    ///  此平台上不支持类。
    ///</exception>
    {class} function init(userName: string; password: DDN.mscorlib.DNSecureString): DNNetworkCredential; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Net.NetworkCredential" />
    ///  类，具有指定的用户名、 密码和域。
    ///</summary>
    ///  <param name="userName">
    ///  与凭据关联的用户名。
    ///</param>
    ///  <param name="password">
    ///  与凭据关联的用户名密码。
    ///</param>
    ///  <param name="domain">
    ///  这些凭据与关联的域。
    ///</param>
    {class} function init(userName: string; password: string; domain: string): DNNetworkCredential; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Net.NetworkCredential" />
    ///  类，具有指定的用户名、 密码和域。
    ///</summary>
    ///  <param name="userName">
    ///  与凭据关联的用户名。
    ///</param>
    ///  <param name="password">
    ///  与凭据关联的用户名密码。
    ///</param>
    ///  <param name="domain">
    ///  这些凭据与关联的域。
    ///</param>
    ///<exception cref="T:System.NotSupportedException"><see cref="T:System.Security.SecureString" />
    ///  此平台上不支持类。
    ///</exception>
    {class} function init(userName: string; password: DDN.mscorlib.DNSecureString; domain: string): DNNetworkCredential; overload;

  end;

  ///<summary>
  ///  为基于密码的身份验证方案（如基本、摘要式、NTLM 和 Kerberos 身份验证）提供凭据。
  ///</summary>
  [DNTypeName('System.Net.NetworkCredential')]
  DNNetworkCredential = interface(DDN.mscorlib.DNObject)
  ['{860A775E-72AE-3B0A-B4B3-3B299B650D80}']
  { getters & setters } 

    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_SecurePassword: DDN.mscorlib.DNSecureString;
    procedure set_SecurePassword(value: DDN.mscorlib.DNSecureString);
    function get_Domain: string;
    procedure set_Domain(value: string);

  { methods } 

    ///<summary>
    ///  返回的实例 <see cref="T:System.Net.NetworkCredential" />
    ///  指定的统一资源标识符 (URI) 和身份验证类型的类。
    ///</summary>
    ///  <param name="uri">
    ///  客户端提供的身份验证的 URI。
    ///</param>
    ///  <param name="authType">
    ///  身份验证请求，如中所定义的类型 <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" />
    ///  属性。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Net.NetworkCredential" />
    ///  对象。
    ///</returns>
    function GetCredential(uri: DNUri; authType: string): DNNetworkCredential; overload;
    ///<summary>
    ///  返回的实例 <see cref="T:System.Net.NetworkCredential" />
    ///  类指定的主机、 端口和身份验证类型。
    ///</summary>
    ///  <param name="host">
    ///  对客户端进行身份验证的主机。
    ///</param>
    ///  <param name="port">
    ///  上的端口 <paramref name="host" />
    ///  客户端与之通信。
    ///</param>
    ///  <param name="authenticationType">
    ///  身份验证请求，如中所定义的类型 <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" />
    ///  属性。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Net.NetworkCredential" />
    ///  为指定的主机、 端口和身份验证协议或 <see langword="null" />
    ///  是否有任何凭据可用于指定的主机、 端口和身份验证协议。
    ///</returns>
    function GetCredential(host: string; port: Int32; authenticationType: string): DNNetworkCredential; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置与凭据关联的用户名。
    ///</summary>
    ///<returns>
    ///  与凭据关联的用户名。
    ///</returns>
    property UserName: string read get_UserName write set_UserName;
    ///<summary>
    ///  获取或设置与凭据关联的用户名的密码。
    ///</summary>
    ///<returns>
    ///  与凭据关联的密码。
    ///  如果此 <see cref="T:System.Net.NetworkCredential" />
    ///  与已初始化实例 <paramref name="password" />
    ///  参数设置为 <see langword="null" />
    ///  , ，则 <see cref="P:System.Net.NetworkCredential.Password" />
    ///  属性将返回一个空字符串。
    ///</returns>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  获取或设置该密码作为 <see cref="T:System.Security.SecureString" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  与凭据关联的用户名密码。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><see cref="T:System.Security.SecureString" />
    ///  此平台上不支持类。
    ///</exception>
    property SecurePassword: DDN.mscorlib.DNSecureString read get_SecurePassword write set_SecurePassword;
    ///<summary>
    ///  获取或设置验证凭据的域或计算机名称。
    ///</summary>
    ///<returns>
    ///  与凭据关联的域的名称。
    ///</returns>
    property Domain: string read get_Domain write set_Domain;
  end;

  TDNNetworkCredential = class(TDNGenericImport<DNNetworkCredentialClass, DNNetworkCredential>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX500DistinguishedNameClass = interface(DNObjectClass)
  ['{6296CDAD-6038-561E-A108-F2593A667CF4}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" />
    ///  类使用指定的字节数组中的信息。
    ///</summary>
    ///  <param name="encodedDistinguishedName">
    ///  字节数组，其中包含可分辨的名称信息。
    ///</param>
    {class} function init(encodedDistinguishedName: TArray<Byte>): DNX500DistinguishedName; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" />
    ///  对象初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="distinguishedName">
    ///  一个 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" />
    ///  对象。
    ///</param>
    {class} function init(distinguishedName: DNX500DistinguishedName): DNX500DistinguishedName; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" />
    ///  类使用的指定字符串中的信息。
    ///</summary>
    ///  <param name="distinguishedName">
    ///  表示可分辨的名称的字符串。
    ///</param>
    {class} function init(distinguishedName: string): DNX500DistinguishedName; overload;

  end;

  ///<summary>
  ///  表示 X509 证书的可分辨名称。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.X500DistinguishedName')]
  DNX500DistinguishedName = interface(DNObject)
  ['{1DE530D9-F5EE-3160-AF35-0D439B03D544}']
  { getters & setters } 

    function get_Name: string;
    function get_Oid: DNOid;
    procedure set_Oid(value: DNOid);
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    ///<summary>
    ///  返回的格式化的版本的 X500 可分辨名称为打印或输出到文本窗口或到控制台。
    ///</summary>
    ///  <param name="multiLine"><see langword="true" />
    ///  如果返回的字符串应包含回车;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个带格式的字符串，表示 X500 可分辨名称。
    ///</returns>
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  从 X500 中获取的以逗号分隔的可分辨的名称的证书。
    ///</summary>
    ///<returns>
    ///  以逗号分隔的可分辨的名称 X509 证书。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Security.Cryptography.Oid" />
    ///  值 <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Security.Cryptography.Oid" />
    ///  对象。
    ///</returns>
    property Oid: DNOid read get_Oid write set_Oid;
    ///<summary>
    ///  获取或设置一个字节数组中表示的抽象语法标记一个 ASN.1 编码数据。
    ///</summary>
    ///<returns>
    ///  一个表示的抽象语法标记一个 ASN.1 编码数据的字节数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  该值为 <see langword="null" />
    ///  。
    ///</exception>
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNX500DistinguishedName = class(TDNGenericImport<DNX500DistinguishedNameClass, DNX500DistinguishedName>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNOidClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EBCFA3FB-50C2-5442-B3BC-9B99835071E1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.Oid" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOid; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.Oid" />
    ///  类使用的字符串值 <see cref="T:System.Security.Cryptography.Oid" />
    ///  对象。
    ///</summary>
    ///  <param name="oid">
    ///  对象标识符。
    ///</param>
    {class} function init(oid: string): DNOid; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.Oid" />
    ///  类使用指定的值和友好名称。
    ///</summary>
    ///  <param name="value">
    ///  标识符以点分隔的数字。
    ///</param>
    ///  <param name="friendlyName">
    ///  标识符的友好名称。
    ///</param>
    {class} function init(value: string; friendlyName: string): DNOid; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Security.Cryptography.Oid" />
    ///  对象初始化 <see cref="T:System.Security.Cryptography.Oid" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="oid">
    ///  要用于创建新的对象标识符的对象标识符信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="oid " />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(oid: DNOid): DNOid; overload;

  end;

  ///<summary>
  ///  表示加密对象标识符。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.Oid')]
  DNOid = interface(DDN.mscorlib.DNObject)
  ['{81EAF203-F3FC-38F7-BE2A-362C688F00D4}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_FriendlyName: string;
    procedure set_FriendlyName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置标识符以点分隔的数字。
    ///</summary>
    ///<returns>
    ///  标识符以点分隔的数字。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置标识符的友好名称。
    ///</summary>
    ///<returns>
    ///  标识符的友好名称。
    ///</returns>
    property FriendlyName: string read get_FriendlyName write set_FriendlyName;
  end;

  TDNOid = class(TDNGenericImport<DNOidClass, DNOid>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNPublicKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BA39CD61-0AC7-50B0-AD9C-774340294948}']
  end;

  ///<summary>
  ///  表示证书的公钥信息。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.PublicKey')]
  DNPublicKey = interface(DDN.mscorlib.DNObject)
  ['{2A7A636D-9899-3125-B718-112336E792CE}']
  { getters & setters } 

    function get_Key: DDN.mscorlib.DNAsymmetricAlgorithm;
    function get_Oid: DNOid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" />
    ///  或 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" />
    ///  对象，表示公共密钥。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />
    ///  对象，表示公共密钥。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  不支持的密钥算法。
    ///</exception>
    property Key: DDN.mscorlib.DNAsymmetricAlgorithm read get_Key;
    ///<summary>
    ///  获取的公钥的对象标识符 (OID) 对象。
    ///</summary>
    ///<returns>
    ///  一个对象标识符 (OID) 的公共密钥对象。
    ///</returns>
    property Oid: DNOid read get_Oid;
  end;

  TDNPublicKey = class(TDNGenericImport<DNPublicKeyClass, DNPublicKey>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509Certificate2Class = interface(DDN.mscorlib.DNX509CertificateClass)
  ['{086CAB9B-490C-572B-86F5-43B7B4CAC04E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用字节数组中的信息。
    ///</summary>
    ///  <param name="rawData">
    ///  一个包含 X.509 证书数据的字节数组。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(rawData: TArray<Byte>): DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用的字节数组和一个密码。
    ///</summary>
    ///  <param name="rawData">
    ///  一个包含 X.509 证书数据的字节数组。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(rawData: TArray<Byte>; password: string): DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用的字节数组和一个密码。
    ///</summary>
    ///  <param name="rawData">
    ///  包含 X.509 证书数据的字节数组。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(rawData: TArray<Byte>; password: DDN.mscorlib.DNSecureString): DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用的字节数组、 密码和密钥存储标记。
    ///</summary>
    ///  <param name="rawData">
    ///  一个包含 X.509 证书数据的字节数组。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///  <param name="keyStorageFlags">
    ///  一个枚举值的按位组合，这些值控制在何处以及如何导入证书。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(rawData: TArray<Byte>; password: string; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags): DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用的字节数组、 密码和密钥存储标记。
    ///</summary>
    ///  <param name="rawData">
    ///  包含 X.509 证书数据的字节数组。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///  <param name="keyStorageFlags">
    ///  一个枚举值的按位组合，这些值控制在何处以及如何导入证书。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(rawData: TArray<Byte>; password: DDN.mscorlib.DNSecureString; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags): DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用证书文件名。
    ///</summary>
    ///  <param name="fileName">
    ///  证书文件的名称。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(fileName: string): DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用的证书文件名称以及用来访问该证书的密码。
    ///</summary>
    ///  <param name="fileName">
    ///  证书文件的名称。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(fileName: string; password: string): DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用的证书文件名称和密码。
    ///</summary>
    ///  <param name="fileName">
    ///  证书文件的名称。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(fileName: string; password: DDN.mscorlib.DNSecureString): DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用的证书文件名称，用来访问该证书和密钥存储标记的密码。
    ///</summary>
    ///  <param name="fileName">
    ///  证书文件的名称。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///  <param name="keyStorageFlags">
    ///  一个枚举值的按位组合，这些值控制在何处以及如何导入证书。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(fileName: string; password: string; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags): DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用的证书文件名称、 密码和密钥存储标记。
    ///</summary>
    ///  <param name="fileName">
    ///  证书文件的名称。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///  <param name="keyStorageFlags">
    ///  一个枚举值的按位组合，这些值控制在何处以及如何导入证书。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(fileName: string; password: DDN.mscorlib.DNSecureString; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags): DNX509Certificate2; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用的非托管的句柄。
    ///</summary>
    ///  <param name="handle">
    ///  指向非托管代码中的证书上下文的指针。
    ///  C 结构称为 <see langword="PCCERT_CONTEXT" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(handle: IntPtr): DNX509Certificate2; overload;
    ///<summary>
    ///  初始化的新实例 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类使用 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />
    ///  对象。
    ///</summary>
    ///  <param name="certificate">
    ///  一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  发生错误，该证书。
    ///  例如：
    ///  证书文件不存在。
    ///  证书无效。
    ///  证书的密码不正确。
    ///</exception>
    {class} function init(certificate: DDN.mscorlib.DNX509Certificate): DNX509Certificate2; overload;

  { static methods } 

    ///<summary>
    ///  指示字节数组中所包含的证书的类型。
    ///</summary>
    ///  <param name="rawData">
    ///  一个包含 X.509 证书数据的字节数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="rawData" />
    ///  其长度为零或 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetCertContentType(rawData: TArray<Byte>): DDN.mscorlib.DNX509ContentType; overload;
    ///<summary>
    ///  指示在文件中所包含的证书的类型。
    ///</summary>
    ///  <param name="fileName">
    ///  证书文件的名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetCertContentType(fileName: string): DDN.mscorlib.DNX509ContentType; overload;

  end;

  ///<summary>
  ///  表示 X.509 证书。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Certificate2')]
  DNX509Certificate2 = interface(DDN.mscorlib.DNX509Certificate)
  ['{28F5AFA0-F1A6-3B97-97F9-876CAC10CAFB}']
  { getters & setters } 

    function get_Archived: Boolean;
    procedure set_Archived(value: Boolean);
    function get_Extensions: DNX509ExtensionCollection;
    function get_FriendlyName: string;
    procedure set_FriendlyName(value: string);
    function get_IssuerName: DNX500DistinguishedName;
    function get_NotAfter: DDN.mscorlib.DNDateTime;
    function get_NotBefore: DDN.mscorlib.DNDateTime;
    function get_HasPrivateKey: Boolean;
    function get_PrivateKey: DDN.mscorlib.DNAsymmetricAlgorithm;
    procedure set_PrivateKey(value: DDN.mscorlib.DNAsymmetricAlgorithm);
    function get_PublicKey: DNPublicKey;
    function get_RawData: TArray<Byte>;
    function get_SerialNumber: string;
    function get_SubjectName: DNX500DistinguishedName;
    function get_SignatureAlgorithm: DNOid;
    function get_Thumbprint: string;
    function get_Version: Int32;
    function get_Handle: IntPtr;
    function get_Issuer: string;
    function get_Subject: string;

  { methods } 

    ///<summary>
    ///  以文本格式显示 X.509 证书。
    ///</summary>
    ///<returns>
    ///  证书信息。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  字节数组中的数据的对象。
    ///</summary>
    ///  <param name="rawData">
    ///  一个包含 X.509 证书数据的字节数组。
    ///</param>
    procedure Import(rawData: TArray<Byte>); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  对象使用的字节数组、 密码和标志中的数据用于确定如何导入的私钥。
    ///</summary>
    ///  <param name="rawData">
    ///  一个包含 X.509 证书数据的字节数组。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///  <param name="keyStorageFlags">
    ///  一个枚举值的按位组合，这些值控制在何处以及如何导入证书。
    ///</param>
    procedure Import(rawData: TArray<Byte>; password: string; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  对象使用的字节数组、 密码和密钥存储标记中的数据。
    ///</summary>
    ///  <param name="rawData">
    ///  包含 X.509 证书数据的字节数组。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///  <param name="keyStorageFlags">
    ///  一个枚举值的按位组合，这些值控制在何处以及如何导入证书。
    ///</param>
    procedure Import(rawData: TArray<Byte>; password: DDN.mscorlib.DNSecureString; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  证书文件中的信息。
    ///</summary>
    ///  <param name="fileName">
    ///  证书的名称。
    ///</param>
    procedure Import(fileName: string); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  证书文件、 一个密码中的信息和一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
    ///  值。
    ///</summary>
    ///  <param name="fileName">
    ///  证书文件的名称。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///  <param name="keyStorageFlags">
    ///  一个枚举值的按位组合，这些值控制在何处以及如何导入证书。
    ///</param>
    procedure Import(fileName: string; password: string; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  证书文件、 一个密码和密钥存储标记中的信息。
    ///</summary>
    ///  <param name="fileName">
    ///  证书文件的名称。
    ///</param>
    ///  <param name="password">
    ///  访问 X.509 证书数据所需的密码。
    ///</param>
    ///  <param name="keyStorageFlags">
    ///  一个枚举值的按位组合，这些值控制在何处以及如何导入证书。
    ///</param>
    procedure Import(fileName: string; password: DDN.mscorlib.DNSecureString; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags); overload;
    ///<summary>
    ///  重置 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  对象。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  执行使用基本验证策略 X.509 链验证。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果验证成功，则 <see langword="false" />
    ///  如果验证失败。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  该证书不可读。
    ///</exception>
    function Verify: Boolean;
    ///<summary>
    ///  以文本格式显示 X.509 证书。
    ///</summary>
    ///  <param name="verbose"><see langword="true" />
    ///  若要显示公钥、 私钥、 扩展和等等; <see langword="false" />
    ///  来展示类似于 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  类，包括指纹、 序列号、 主题和颁发者名称，依次类推。
    ///</param>
    ///<returns>
    ///  证书信息。
    ///</returns>
    function ToString(verbose: Boolean): string; overload;
    ///<summary>
    ///  从证书获取使用者和颁发者名称。
    ///</summary>
    ///  <param name="nameType"><see cref="T:System.Security.Cryptography.X509Certificates.X509NameType" />
    ///  该主题。
    ///</param>
    ///  <param name="forIssuer"><see langword="true" />
    ///  若要包括的颁发者名称;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  证书的名称。
    ///</returns>
    function GetNameInfo(nameType: DNX509NameType; forIssuer: Boolean): string;
    function GetName: string;
    function GetIssuerName: string;
    function GetSerialNumber: TArray<Byte>;
    function GetSerialNumberString: string;
    function GetKeyAlgorithmParameters: TArray<Byte>;
    function GetKeyAlgorithmParametersString: string;
    function GetKeyAlgorithm: string;
    function GetPublicKey: TArray<Byte>;
    function GetPublicKeyString: string;
    function GetRawCertData: TArray<Byte>;
    function GetRawCertDataString: string;
    function GetCertHash: TArray<Byte>; overload;
    function GetCertHash(hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function GetCertHashString: string; overload;
    function GetCertHashString(hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): string; overload;
    function GetEffectiveDateString: string;
    function GetExpirationDateString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DDN.mscorlib.DNX509Certificate): Boolean; overload;
    function GetHashCode: Int32;
    function &Export(contentType: DDN.mscorlib.DNX509ContentType): TArray<Byte>; overload;
    function &Export(contentType: DDN.mscorlib.DNX509ContentType; password: string): TArray<Byte>; overload;
    function &Export(contentType: DDN.mscorlib.DNX509ContentType; password: DDN.mscorlib.DNSecureString): TArray<Byte>; overload;
    procedure Dispose;
    function GetFormat: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值存档 X.509 证书。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该证书是否已存档， <see langword="false" />
    ///  如果证书未存档。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  该证书不可读。
    ///</exception>
    property Archived: Boolean read get_Archived write set_Archived;
    ///<summary>
    ///  获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" />
    ///  对象的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  该证书不可读。
    ///</exception>
    property Extensions: DNX509ExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取或设置的证书关联的别名。
    ///</summary>
    ///<returns>
    ///  证书的友好名称。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  该证书不可读。
    ///</exception>
    property FriendlyName: string read get_FriendlyName write set_FriendlyName;
    ///<summary>
    ///  获取证书颁发者的可分辨的名称。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" />
    ///  对象，其中包含证书颁发者的名称。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  证书上下文无效。
    ///</exception>
    property IssuerName: DNX500DistinguishedName read get_IssuerName;
    ///<summary>
    ///  获取本地时间之后证书将不再有效的日期。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.DateTime" />
    ///  对象，表示证书的到期日期。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  该证书不可读。
    ///</exception>
    property NotAfter: DDN.mscorlib.DNDateTime read get_NotAfter;
    ///<summary>
    ///  获取本地时间的证书生效的日期。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.DateTime" />
    ///  对象，表示证书的有效日期。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  该证书不可读。
    ///</exception>
    property NotBefore: DDN.mscorlib.DNDateTime read get_NotBefore;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  对象包含一个私钥。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  对象包含一个私钥键; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  证书上下文无效。
    ///</exception>
    property HasPrivateKey: Boolean read get_HasPrivateKey;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />
    ///  对象，它表示与证书关联的私钥。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />
    ///  对象，它是 RSA 或 DSA 加密服务提供程序。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  键值不是为 RSA 或 DSA 的键，或该密钥是不可读取的。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  为此属性所设置的值 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  不支持此私钥的密钥算法。
    ///</exception><exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
    ///  X.509 密钥不匹配。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  加密服务提供程序密钥是 <see langword="null" />
    ///  。
    ///</exception>
    property PrivateKey: DDN.mscorlib.DNAsymmetricAlgorithm read get_PrivateKey write set_PrivateKey;
    ///<summary>
    ///  获取 <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey" />
    ///  与证书关联的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  键值不是为 RSA 或 DSA 的键，或该密钥是不可读取的。
    ///</exception>
    property PublicKey: DNPublicKey read get_PublicKey;
    ///<summary>
    ///  获取证书的原始数据。
    ///</summary>
    ///<returns>
    ///  原始数据的字节数组形式的证书。
    ///</returns>
    property RawData: TArray<Byte> read get_RawData;
    ///<summary>
    ///  获取证书的序列号。
    ///</summary>
    ///<returns>
    ///  证书序列号。
    ///</returns>
    property SerialNumber: string read get_SerialNumber;
    ///<summary>
    ///  获取证书的主题可分辨名称。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" />
    ///  对象，表示证书使用者的名称。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  证书上下文无效。
    ///</exception>
    property SubjectName: DNX500DistinguishedName read get_SubjectName;
    ///<summary>
    ///  获取用于创建证书签名的算法。
    ///</summary>
    ///<returns>
    ///  返回的对象标识符 (<see cref="T:System.Security.Cryptography.Oid" />
    ///  ) 的签名算法。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  该证书不可读。
    ///</exception>
    property SignatureAlgorithm: DNOid read get_SignatureAlgorithm;
    ///<summary>
    ///  获取证书的指纹。
    ///</summary>
    ///<returns>
    ///  证书的指纹。
    ///</returns>
    property Thumbprint: string read get_Thumbprint;
    ///<summary>
    ///  获取证书的 X.509 格式版本。
    ///</summary>
    ///<returns>
    ///  证书格式。
    ///</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">
    ///  该证书不可读。
    ///</exception>
    property Version: Int32 read get_Version;
    property Handle: IntPtr read get_Handle;
    property Issuer: string read get_Issuer;
    property Subject: string read get_Subject;
  end;

  TDNX509Certificate2 = class(TDNGenericImport<DNX509Certificate2Class, DNX509Certificate2>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ExtensionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EA98EE65-52CE-570C-814F-D13053C5D00F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNX509ExtensionCollection;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" />
  ///  对象集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ExtensionCollection')]
  DNX509ExtensionCollection = interface(DDN.mscorlib.DNObject)
  ['{7BCBA6CA-8C50-3744-B293-14F2E74B46FB}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的数 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" />
    ///  中的对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个整数，表示的数 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" />
    ///  中的对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
    ///  对象。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值表示是否保证此集合是线程安全的。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合为线程安全的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取一个对象，可用于同步对 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个对象，可用于同步对 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />
    ///  对象。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNX509ExtensionCollection = class(TDNGenericImport<DNX509ExtensionCollectionClass, DNX509ExtensionCollection>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNMatchClass = interface(DNObjectClass)
  ['{3FC91B26-8F26-58FE-8439-D51E368D3C51}']
  { static getter & setter } 

    {class} function get_Empty: DNMatch;

  { static methods } 

    ///<summary>
    ///  返回一个与提供的实例等效的 <see cref="T:System.Text.RegularExpressions.Match" />
    ///  实例，该实例适合在多个线程间共享。
    ///</summary>
    ///  <param name="inner">
    ///  与预期匹配等效的正则表达式匹配。
    ///</param>
    ///<returns>
    ///  适合在多个线程间共享的正则表达式匹配。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inner" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Synchronized(inner: DNMatch): DNMatch;

  { static propertys } 

    ///<summary>
    ///  获取空组。
    ///  所有失败的匹配都返回此空匹配。
    ///</summary>
    ///<returns>
    ///  空匹配。
    ///</returns>
    {class} property Empty: DNMatch read get_Empty;
  end;

  ///<summary>
  ///  表示单个正则表达式匹配的结果。
  ///</summary>
  [DNTypeName('System.Text.RegularExpressions.Match')]
  DNMatch = interface(DNObject)
  ['{B15E17CE-1B1B-3F7D-92E6-42DB24D15691}']
  { getters & setters } 

    function get_Groups: DNGroupCollection;
    function get_Success: Boolean;
    function get_Name: string;
    function get_Captures: DNCaptureCollection;
    function get_Index: Int32;
    function get_Length: Int32;
    function get_Value: string;

  { methods } 

    ///<summary>
    ///  从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 <see cref="T:System.Text.RegularExpressions.Match" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  下一个正则表达式匹配。
    ///</returns>
    ///<exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///</exception>
    function NextMatch: DNMatch;
    ///<summary>
    ///  返回对指定替换模式的扩展。
    ///</summary>
    ///  <param name="replacement">
    ///  要使用的替换模式。
    ///</param>
    ///<returns><paramref name="replacement" />
    ///  参数的扩展版本。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="replacement" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  此模式不允许使用扩展。
    ///</exception>
    function Result(replacement: string): string;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取由正则表达式匹配的组的集合。
    ///</summary>
    ///<returns>
    ///  由模式匹配的字符组。
    ///</returns>
    property Groups: DNGroupCollection read get_Groups;
    ///<summary>
    ///  获取一个值，该值指示匹配是否成功。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果匹配成功，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Success: Boolean read get_Success;
    ///<summary>
    ///  返回由当前实例表示的捕获组的名称。
    ///</summary>
    ///<returns>
    ///  由当前实例表示的捕获组的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取由捕获组，顺序最内层的最左侧第一个匹配的所有捕获的集合 (或如果使用修改正则表达式的最内层的最右边第一个订单 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />
    ///  选项)。
    ///  该集合可以有零个或多个项。
    ///</summary>
    ///<returns>
    ///  组匹配的子字符串的集合。
    ///</returns>
    property Captures: DNCaptureCollection read get_Captures;
    property Index: Int32 read get_Index;
    property Length: Int32 read get_Length;
    property Value: string read get_Value;
  end;

  TDNMatch = class(TDNGenericImport<DNMatchClass, DNMatch>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNCaptureCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C869FD2D-8A87-55E2-AF30-F10AA6BF723A}']
  end;

  ///<summary>
  ///  表示单个捕获组执行的捕获集。
  ///</summary>
  [DNTypeName('System.Text.RegularExpressions.CaptureCollection')]
  DNCaptureCollection = interface(DDN.mscorlib.DNObject)
  ['{92749BF7-5B97-3F55-898D-4C0D02C40853}']
  { getters & setters } 

    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  将集合的所有元素复制到给定数组中（从给定索引处开始）。
    ///</summary>
    ///  <param name="array">
    ///  要将集合复制到其中的数组。
    ///</param>
    ///  <param name="arrayIndex">
    ///  目标数组中的位置将开始复制的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array " />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />
    ///  超出界限 <paramref name="array" />
    ///  。
    ///  - 或 -
    ///  <paramref name="arrayIndex" />
    ///  加上 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />
    ///  超出界限 <paramref name="array" />
    ///  。
    ///</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    ///<summary>
    ///  提供一个循环访问集合的枚举器。
    ///</summary>
    ///<returns>
    ///  一个对象，包含所有 <see cref="T:System.Text.RegularExpressions.Capture" />
    ///  中的对象 <see cref="T:System.Text.RegularExpressions.CaptureCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取可用于同步对集合的访问的对象。
    ///</summary>
    ///<returns>
    ///  可用于同步集合访问的对象。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  获取一个值，该值指示对集合的访问是否同步（线程安全）。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取一个值，指示集合是否为只读集合。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="true" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取组捕获的子字符串的数目。
    ///</summary>
    ///<returns><see cref="T:System.Text.RegularExpressions.CaptureCollection" />
    ///  中的项数。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNCaptureCollection = class(TDNGenericImport<DNCaptureCollectionClass, DNCaptureCollection>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNGroupCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C49451AE-01D3-565B-9AE6-861D9A637BFA}']
  end;

  ///<summary>
  ///  返回一次匹配中捕获的组的集。
  ///</summary>
  [DNTypeName('System.Text.RegularExpressions.GroupCollection')]
  DNGroupCollection = interface(DDN.mscorlib.DNObject)
  ['{09082951-8A94-3F78-8263-D4F109713015}']
  { getters & setters } 

    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  将集合的所有元素复制到给定数组中（从给定索引处开始）。
    ///</summary>
    ///  <param name="array">
    ///  要将集合复制到其中的数组。
    ///</param>
    ///  <param name="arrayIndex">
    ///  目标数组中开始复制的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IndexOutOfRangeException"><paramref name="arrayIndex" />
    ///  超出界限 <paramref name="array" />
    ///  。
    ///  - 或 -
    ///  <paramref name="arrayIndex" />
    ///  加上 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" />
    ///  超出界限 <paramref name="array" />
    ///  。
    ///</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    ///<summary>
    ///  提供一个循环访问集合的枚举器。
    ///</summary>
    ///<returns>
    ///  一个枚举器，其中包含 <see cref="T:System.Text.RegularExpressions.Group" />
    ///  中的所有 <see cref="T:System.Text.RegularExpressions.GroupCollection" />
    ///  对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取可用于同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" />
    ///  的访问的对象。
    ///</summary>
    ///<returns>
    ///  要同步的 <see cref="T:System.Text.RegularExpressions.Match" />
    ///  对象的副本。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  获取一个值，该值指示是否同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" />
    ///  的访问（线程安全）。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取一个值，指示集合是否为只读集合。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="true" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  返回集合中的组数。
    ///</summary>
    ///<returns>
    ///  集合中的组数。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNGroupCollection = class(TDNGenericImport<DNGroupCollectionClass, DNGroupCollection>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNMatchCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{395BB284-00CE-590B-B3D7-28C7111CEC96}']
  end;

  ///<summary>
  ///  表示通过以迭代方式将正则表达式模式应用于输入字符串所找到的成功匹配的集合。
  ///</summary>
  [DNTypeName('System.Text.RegularExpressions.MatchCollection')]
  DNMatchCollection = interface(DDN.mscorlib.DNObject)
  ['{35995322-5214-328A-B426-C6B6A22003A7}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(i: Int32): DNMatch;

  { methods } 

    ///<summary>
    ///  从给定索引处开始将集合的所有元素复制到给定数组。
    ///</summary>
    ///  <param name="array">
    ///  要将集合复制到其中的数组。
    ///</param>
    ///  <param name="arrayIndex">
    ///  数组中开始复制的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  是多维数组。
    ///</exception><exception cref="T:System.IndexOutOfRangeException"><paramref name="arrayIndex" />
    ///  超出界限 <paramref name="array" />
    ///  。
    ///  - 或 -
    ///  <paramref name="arrayIndex" />
    ///  加上 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />
    ///  超出界限 <paramref name="array" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    ///<summary>
    ///  提供一个循环访问集合的枚举器。
    ///</summary>
    ///<returns>
    ///  一个对象，包含所有 <see cref="T:System.Text.RegularExpressions.Match" />
    ///  中的对象 <see cref="T:System.Text.RegularExpressions.MatchCollection" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///</exception>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取匹配项的数目。
    ///</summary>
    ///<returns>
    ///  匹配项的数目。
    ///</returns>
    ///<exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///</exception>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取可用于同步对集合的访问的对象。
    ///</summary>
    ///<returns>
    ///  可用于同步集合访问的对象。
    ///  此属性始终返回对象本身。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  获取一个值，该值指示对集合的访问是否已同步（线程安全）。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取一个值，指示集合是否为只读集合。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="true" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[i: Int32]: DNMatch read get_Item; default;
  end;

  TDNMatchCollection = class(TDNGenericImport<DNMatchCollectionClass, DNMatchCollection>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNRegexClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0C7333C2-8977-5B3F-AFD1-13908A678EFA}']
  { static getter & setter } 

    {class} function get_CacheSize: Int32;
    {class} procedure set_CacheSize(value: Int32);

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  为指定的正则表达式类。
    ///</summary>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(pattern: string): DNRegex; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  为指定的正则表达式，用修改模式的选项。
    ///</summary>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="options">
    ///  修改正则表达式的枚举值的按位组合。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  包含无效的标志。
    ///</exception>
    {class} function init(pattern: string; options: DNRegexOptions): DNRegex; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  为指定的正则表达式，修改模式和一个值，指定多长时间的模式匹配方法的选项的类应进行匹配尝试超时之前。
    ///</summary>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="options">
    ///  修改正则表达式的枚举值的按位组合。
    ///</param>
    ///  <param name="matchTimeout">
    ///  超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
    ///  来指示方法应不会超时。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="matchTimeout" />
    ///  为负、零或大于 24 天左右。
    ///</exception>
    {class} function init(pattern: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): DNRegex; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_InfiniteMatchTimeout: DDN.mscorlib.DNTimeSpan;

  { static fields } 

    ///<summary>
    ///  指定模式匹配操作不应超时。
    ///</summary>
    {class} property InfiniteMatchTimeout: DDN.mscorlib.DNTimeSpan read __fakeFieldGet_InfiniteMatchTimeout;

  { static methods } 

    ///<summary>
    ///  通过替换为转义码来转义最小的字符集（\、*、+、?、|、{、[、(、)、^、$、.、# 和空白）。
    ///  这将指示正则表达式引擎按原义解释这些字符而不是解释为元字符。
    ///</summary>
    ///  <param name="str">
    ///  包含要转换的文本的输入字符串。
    ///</param>
    ///<returns>
    ///  由转换为转义形式的元字符组成的字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="str" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Escape(str: string): string;
    ///<summary>
    ///  转换输入字符串中的任何转义字符。
    ///</summary>
    ///  <param name="str">
    ///  包含要转换的文本的输入字符串。
    ///</param>
    ///<returns>
    ///  包含任何转换为非转义形式的转义字符的字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="str" />
    ///  包括一个无法识别的转义序列。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="str" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Unescape(str: string): string;
    ///<summary>
    ///  指示所指定的正则表达式是否使用指定的匹配选项和超时间隔在指定的输入字符串中找到了匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="options">
    ///  枚举值的一个按位组合，这些枚举值提供匹配选项。
    ///</param>
    ///  <param name="matchTimeout">
    ///  超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
    ///  来指示方法应不会超时。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果正则表达式找到匹配项，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值。
    ///  - 或 -
    ///  <paramref name="matchTimeout" />
    ///  为负、零或大于 24 天左右。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///</exception>
    {class} function IsMatch(input: string; pattern: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    ///<summary>
    ///  使用指定的匹配选项在输入字符串中搜索指定的正则表达式的第一个匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="options">
    ///  枚举值的一个按位组合，这些枚举值提供匹配选项。
    ///</param>
    ///<returns>
    ///  一个包含有关匹配的信息的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值的有效按位组合。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function Match(input: string; pattern: string; options: DNRegexOptions): DNMatch; overload;
    ///<summary>
    ///  使用指定的匹配选项和超时间隔在输入字符串中搜索指定的正则表达式的第一个匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="options">
    ///  枚举值的一个按位组合，这些枚举值提供匹配选项。
    ///</param>
    ///  <param name="matchTimeout">
    ///  超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
    ///  来指示方法应不会超时。
    ///</param>
    ///<returns>
    ///  一个包含有关匹配的信息的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值的有效按位组合。
    ///  - 或 -
    ///  <paramref name="matchTimeout" />
    ///  为负、零或大于 24 天左右。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function Match(input: string; pattern: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): DNMatch; overload;
    ///<summary>
    ///  使用指定的匹配选项在指定的输入字符串中搜索指定的正则表达式的所有匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="options">
    ///  枚举值的按位组合，这些枚举值指定用于匹配的选项。
    ///</param>
    ///<returns>
    ///  一套 <see cref="T:System.Text.RegularExpressions.Match" />
    ///  搜索操作找到的对象。
    ///  如果未找到匹配项，则此方法将返回一个空集合对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值的有效按位组合。
    ///</exception>
    {class} function Matches(input: string; pattern: string; options: DNRegexOptions): DNMatchCollection; overload;
    ///<summary>
    ///  使用指定的匹配选项和超时间隔在指定的输入字符串中搜索指定的正则表达式的所有匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="options">
    ///  枚举值的按位组合，这些枚举值指定用于匹配的选项。
    ///</param>
    ///  <param name="matchTimeout">
    ///  超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
    ///  来指示方法应不会超时。
    ///</param>
    ///<returns>
    ///  一套 <see cref="T:System.Text.RegularExpressions.Match" />
    ///  搜索操作找到的对象。
    ///  如果未找到匹配项，则此方法将返回一个空集合对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值的有效按位组合。
    ///  - 或 -
    ///  <paramref name="matchTimeout" />
    ///  为负、零或大于 24 天左右。
    ///</exception>
    {class} function Matches(input: string; pattern: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): DNMatchCollection; overload;
    ///<summary>
    ///  在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="replacement">
    ///  替换字符串。
    ///</param>
    ///<returns>
    ///  一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
    ///  如果 <paramref name="pattern" />
    ///  与当前实例不匹配，则此方法返回未更改的当前实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  、<paramref name="pattern" />
    ///  或 <paramref name="replacement" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function Replace(input: string; pattern: string; replacement: string): string; overload;
    ///<summary>
    ///  在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。
    ///  指定的选项将修改匹配操作。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="replacement">
    ///  替换字符串。
    ///</param>
    ///  <param name="options">
    ///  枚举值的一个按位组合，这些枚举值提供匹配选项。
    ///</param>
    ///<returns>
    ///  一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
    ///  如果 <paramref name="pattern" />
    ///  与当前实例不匹配，则此方法返回未更改的当前实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  、<paramref name="pattern" />
    ///  或 <paramref name="replacement" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值的有效按位组合。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function Replace(input: string; pattern: string; replacement: string; options: DNRegexOptions): string; overload;
    ///<summary>
    ///  在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。
    ///  如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="replacement">
    ///  替换字符串。
    ///</param>
    ///  <param name="options">
    ///  枚举值的一个按位组合，这些枚举值提供匹配选项。
    ///</param>
    ///  <param name="matchTimeout">
    ///  超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
    ///  如果 <paramref name="pattern" />
    ///  与当前实例不匹配，则此方法返回未更改的当前实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  、<paramref name="pattern" />
    ///  或 <paramref name="replacement" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值的有效按位组合。
    ///  - 或 -
    ///  <paramref name="matchTimeout" />
    ///  为负、零或大于 24 天左右。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function Replace(input: string; pattern: string; replacement: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): string; overload;
    ///<summary>
    ///  在由正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。
    ///</summary>
    ///  <param name="input">
    ///  要拆分的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///<returns>
    ///  字符串数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function Split(input: string; pattern: string): TArray<string>; overload;
    ///<summary>
    ///  在由指定正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。
    ///  指定的选项将修改匹配操作。
    ///</summary>
    ///  <param name="input">
    ///  要拆分的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="options">
    ///  枚举值的一个按位组合，这些枚举值提供匹配选项。
    ///</param>
    ///<returns>
    ///  字符串数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值的有效按位组合。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function Split(input: string; pattern: string; options: DNRegexOptions): TArray<string>; overload;
    ///<summary>
    ///  在由指定正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。
    ///  如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。
    ///</summary>
    ///  <param name="input">
    ///  要拆分的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="options">
    ///  枚举值的一个按位组合，这些枚举值提供匹配选项。
    ///</param>
    ///  <param name="matchTimeout">
    ///  超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
    ///  来指示方法应不会超时。
    ///</param>
    ///<returns>
    ///  字符串数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值的有效按位组合。
    ///  - 或 -
    ///  <paramref name="matchTimeout" />
    ///  为负、零或大于 24 天左右。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function Split(input: string; pattern: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): TArray<string>; overload;
    ///<summary>
    ///  将一个或多个指定编译 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  命名的程序集的对象。
    ///</summary>
    ///  <param name="regexinfos">
    ///  一个数组，描述要编译的正则表达式。
    ///</param>
    ///  <param name="assemblyname">
    ///  程序集的文件名。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <paramref name="assemblyname" />
    ///  参数的 <see cref="P:System.Reflection.AssemblyName.Name" />
    ///  属性为空或 null 字符串。
    ///  - 或 -
    ///  中的一个或多个对象的正则表达式模式 <paramref name="regexinfos" />
    ///  包含无效的语法。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="assemblyname" />
    ///  或 <paramref name="regexinfos" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure CompileToAssembly(regexinfos: TArray<DNRegexCompilationInfo>; assemblyname: DDN.mscorlib.DNAssemblyName); overload;
    ///<summary>
    ///  将一个或多个指定编译 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  与具有指定特性名称的程序集的对象。
    ///</summary>
    ///  <param name="regexinfos">
    ///  一个数组，描述要编译的正则表达式。
    ///</param>
    ///  <param name="assemblyname">
    ///  程序集的文件名。
    ///</param>
    ///  <param name="attributes">
    ///  定义要应用于程序集的特性数组。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <paramref name="assemblyname" />
    ///  参数的 <see cref="P:System.Reflection.AssemblyName.Name" />
    ///  属性为空或 null 字符串。
    ///  - 或 -
    ///  中的一个或多个对象的正则表达式模式 <paramref name="regexinfos" />
    ///  包含无效的语法。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="assemblyname" />
    ///  或 <paramref name="regexinfos" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure CompileToAssembly(regexinfos: TArray<DNRegexCompilationInfo>; assemblyname: DDN.mscorlib.DNAssemblyName; attributes: TArray<DDN.mscorlib.DNCustomAttributeBuilder>); overload;
    ///<summary>
    ///  将一个或多个指定编译 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  对象和指定的资源文件与具有指定特性名称的程序集。
    ///</summary>
    ///  <param name="regexinfos">
    ///  一个数组，描述要编译的正则表达式。
    ///</param>
    ///  <param name="assemblyname">
    ///  程序集的文件名。
    ///</param>
    ///  <param name="attributes">
    ///  定义要应用于程序集的特性数组。
    ///</param>
    ///  <param name="resourceFile">
    ///  要包含在程序集中的 Win32 资源文件的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <paramref name="assemblyname" />
    ///  参数的 <see cref="P:System.Reflection.AssemblyName.Name" />
    ///  属性为空或 null 字符串。
    ///  - 或 -
    ///  中的一个或多个对象的正则表达式模式 <paramref name="regexinfos" />
    ///  包含无效的语法。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="assemblyname" />
    ///  或 <paramref name="regexinfos" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.COMException"><paramref name="resourceFile" />
    ///  参数指定了无效的 Win32 资源文件。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  通过指定的文件 <paramref name="resourceFile" />
    ///  找不到参数。
    ///</exception>
    {class} procedure CompileToAssembly(regexinfos: TArray<DNRegexCompilationInfo>; assemblyname: DDN.mscorlib.DNAssemblyName; attributes: TArray<DDN.mscorlib.DNCustomAttributeBuilder>; resourceFile: string); overload;
    ///<summary>
    ///  指示所指定的正则表达式在指定的输入字符串中是否找到了匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果正则表达式找到匹配项，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function IsMatch(input: string; pattern: string): Boolean; overload;
    ///<summary>
    ///  指示所指定的正则表达式是否使用指定的匹配选项在指定的输入字符串中找到了匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="options">
    ///  枚举值的一个按位组合，这些枚举值提供匹配选项。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果正则表达式找到匹配项，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  不是有效 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  值。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function IsMatch(input: string; pattern: string; options: DNRegexOptions): Boolean; overload;
    ///<summary>
    ///  在指定的输入字符串中搜索指定的正则表达式的第一个匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///<returns>
    ///  一个包含有关匹配的信息的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    {class} function Match(input: string; pattern: string): DNMatch; overload;
    ///<summary>
    ///  在指定的输入字符串中搜索指定的正则表达式的所有匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///<returns>
    ///  一套 <see cref="T:System.Text.RegularExpressions.Match" />
    ///  搜索操作找到的对象。
    ///  如果未找到匹配项，则此方法将返回一个空集合对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  出现正则表达式分析错误。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Matches(input: string; pattern: string): DNMatchCollection; overload;

  { static propertys } 

    ///<summary>
    ///  获取或设置已编译的正则表达式的当前静态缓存中的最大项数。
    ///</summary>
    ///<returns>
    ///  静态缓存中的最大项数。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  集运算中的值小于零。
    ///</exception>
    {class} property CacheSize: Int32 read get_CacheSize write set_CacheSize;
  end;

  ///<summary>
  ///  表示不可变的正则表达式。
  ///  若要浏览此类型的 .NET Framework 源代码，请参阅引用源。
  ///</summary>
  [DNTypeName('System.Text.RegularExpressions.Regex')]
  DNRegex = interface(DDN.mscorlib.DNObject)
  ['{AE42B213-8A8A-3F1B-B732-897A942B9585}']
  { getters & setters } 

    function get_Options: DNRegexOptions;
    function get_MatchTimeout: DDN.mscorlib.DNTimeSpan;
    function get_RightToLeft: Boolean;

  { methods } 

    ///<summary>
    ///  返回传入的正则表达式模式 <see langword="Regex" />
    ///  构造函数。
    ///</summary>
    ///<returns><paramref name="pattern" />
    ///  参数传递到 <see langword="Regex" />
    ///  构造函数。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取与指定组号相对应的组名。
    ///</summary>
    ///  <param name="i">
    ///  要转换为相应组名的组号。
    ///</param>
    ///<returns>
    ///  包含与指定组号关联的组名的字符串。
    ///  如果没有对应的组名称 <paramref name="i" />
    ///  , ，该方法返回 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    function GroupNameFromNumber(i: Int32): string;
    ///<summary>
    ///  返回与指定组名相对应的组号。
    ///</summary>
    ///  <param name="name">
    ///  要将转换为相应的组号的组名称。
    ///</param>
    ///<returns>
    ///  如果对应于指定的组名，则为-1 的组号 <paramref name="name" />
    ///  不是有效的组名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GroupNumberFromName(name: string): Int32;
    ///<summary>
    ///  该值指示是否在指定的正则表达式 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  构造函数指定的输入字符串中找到的匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果正则表达式找到匹配项，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function IsMatch(input: string): Boolean; overload;
    ///<summary>
    ///  该值指示是否在指定的正则表达式 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  构造函数从字符串中的指定起始位置开始对指定输入字符串中找到的匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="startat">
    ///  若要开始搜索字符位置。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果正则表达式找到匹配项，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" />
    ///  小于零或大于 <paramref name="input" />
    ///  的长度。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function IsMatch(input: string; startat: Int32): Boolean; overload;
    ///<summary>
    ///  搜索指定的输入的字符串中指定的正则表达式的第一个匹配项 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  构造函数。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///<returns>
    ///  一个包含有关匹配的信息的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function Match(input: string): DNMatch; overload;
    ///<summary>
    ///  从输入字符串中的指定起始位置开始，在该字符串中搜索正则表达式的第一个匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="startat">
    ///  开始搜索的字符位置（从零开始）。
    ///</param>
    ///<returns>
    ///  一个包含有关匹配的信息的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" />
    ///  小于零或大于 <paramref name="input" />
    ///  的长度。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function Match(input: string; startat: Int32): DNMatch; overload;
    ///<summary>
    ///  从指定的起始位置开始，在输入字符串中搜索正则表达式的第一个匹配项，并且仅搜索指定数量的字符。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="beginning">
    ///  输入字符串中从零开始的字符位置，它定义要搜索的最左侧的位置。
    ///</param>
    ///  <param name="length">
    ///  子字符串中包含在搜索中的字符数。
    ///</param>
    ///<returns>
    ///  一个包含有关匹配的信息的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="beginning" />
    ///  小于零或大于 <paramref name="input" />
    ///  的长度。
    ///  - 或 -
    ///  <paramref name="length" />
    ///  小于零或大于 <paramref name="input" />
    ///  的长度。
    ///  - 或 -
    ///  <paramref name="beginning" />
    ///<see langword="+" />
    ///  <paramref name="length" />
    ///<see langword="–1" />
    ///  表示 <paramref name="input" />
    ///  范围外的某个位置。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function Match(input: string; beginning: Int32; length: Int32): DNMatch; overload;
    ///<summary>
    ///  在指定的输入字符串中搜索正则表达式的所有匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///<returns>
    ///  一套 <see cref="T:System.Text.RegularExpressions.Match" />
    ///  搜索操作找到的对象。
    ///  如果未找到匹配项，则此方法将返回一个空集合对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Matches(input: string): DNMatchCollection; overload;
    ///<summary>
    ///  从字符串中的指定起始位置开始，在指定的输入字符串中搜索正则表达式的所有匹配项。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="startat">
    ///  在输入字符串中开始搜索的字符位置。
    ///</param>
    ///<returns>
    ///  一套 <see cref="T:System.Text.RegularExpressions.Match" />
    ///  搜索操作找到的对象。
    ///  如果未找到匹配项，则此方法将返回一个空集合对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" />
    ///  小于零或大于 <paramref name="input" />
    ///  的长度。
    ///</exception>
    function Matches(input: string; startat: Int32): DNMatchCollection; overload;
    ///<summary>
    ///  在指定的输入字符串内，使用指定的替换字符串替换与某个正则表达式模式匹配的所有的字符串。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="replacement">
    ///  替换字符串。
    ///</param>
    ///<returns>
    ///  一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
    ///  如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="replacement" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function Replace(input: string; replacement: string): string; overload;
    ///<summary>
    ///  在指定输入字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="replacement">
    ///  替换字符串。
    ///</param>
    ///  <param name="count">
    ///  可进行替换的最大次数。
    ///</param>
    ///<returns>
    ///  一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
    ///  如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="replacement" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function Replace(input: string; replacement: string; count: Int32): string; overload;
    ///<summary>
    ///  在指定输入子字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。
    ///</summary>
    ///  <param name="input">
    ///  要搜索匹配项的字符串。
    ///</param>
    ///  <param name="replacement">
    ///  替换字符串。
    ///</param>
    ///  <param name="count">
    ///  可进行替换的最大次数。
    ///</param>
    ///  <param name="startat">
    ///  输入字符串中开始执行搜索的字符位置。
    ///</param>
    ///<returns>
    ///  一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。
    ///  如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="replacement" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" />
    ///  小于零或大于 <paramref name="input" />
    ///  的长度。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function Replace(input: string; replacement: string; count: Int32; startat: Int32): string; overload;
    ///<summary>
    ///  将输入的字符串拆分为一个定义在由正则表达式模式中指定的位置的子字符串数组 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  构造函数。
    ///</summary>
    ///  <param name="input">
    ///  要拆分的字符串。
    ///</param>
    ///<returns>
    ///  字符串数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function Split(input: string): TArray<string>; overload;
    ///<summary>
    ///  输入字符串拆分为指定的最大次数的子字符串，定义正则表达式中指定的位置的数组 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  构造函数。
    ///</summary>
    ///  <param name="input">
    ///  要拆分的字符串。
    ///</param>
    ///  <param name="count">
    ///  可拆分的最大次数。
    ///</param>
    ///<returns>
    ///  字符串数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function Split(input: string; count: Int32): TArray<string>; overload;
    ///<summary>
    ///  输入字符串拆分为指定的最大次数的子字符串，定义正则表达式中指定的位置的数组 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  构造函数。
    ///  从输入字符串的指定字符位置开始搜索正则表达式模式。
    ///</summary>
    ///  <param name="input">
    ///  要拆分的字符串。
    ///</param>
    ///  <param name="count">
    ///  可拆分的最大次数。
    ///</param>
    ///  <param name="startat">
    ///  输入字符串中将开始搜索的字符位置。
    ///</param>
    ///<returns>
    ///  字符串数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat" />
    ///  小于零或大于 <paramref name="input" />
    ///  的长度。
    ///</exception><exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
    ///  发生超时。
    ///  有关超时的详细信息，请参阅“备注”部分。
    ///</exception>
    function Split(input: string; count: Int32; startat: Int32): TArray<string>; overload;
    ///<summary>
    ///  返回与数组中的组名相对应的捕获组号的数组。
    ///</summary>
    ///<returns>
    ///  组号的整数数组。
    ///</returns>
    function GetGroupNumbers: TArray<Int32>;
    ///<summary>
    ///  返回正则表达式的捕获组名数组。
    ///</summary>
    ///<returns>
    ///  组名的字符串数组。
    ///</returns>
    function GetGroupNames: TArray<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取已传入的选项 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  构造函数。
    ///</summary>
    ///<returns>
    ///  一个或多个成员 <see cref="T:System.Text.RegularExpressions.RegexOptions" />
    ///  枚举，它表示选项传递到了 <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  构造函数
    ///</returns>
    property Options: DNRegexOptions read get_Options;
    ///<summary>
    ///  获取当前实例的超时间隔。
    ///</summary>
    ///<returns>
    ///  在模式匹配操作中之前所经过的最大时间间隔 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />
    ///  引发，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
    ///  在超时被禁用。
    ///</returns>
    property MatchTimeout: DDN.mscorlib.DNTimeSpan read get_MatchTimeout;
    ///<summary>
    ///  获取一个值，该值指示正则表达式是否从右向左进行搜索。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果正则表达式搜索，从右到左;，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RightToLeft: Boolean read get_RightToLeft;
  end;

  TDNRegex = class(TDNGenericImport<DNRegexClass, DNRegex>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNRegexCompilationInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{669EB60A-1FDF-52D3-AF5A-A54941E4D782}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />
    ///  类，其中包含有关包含在程序集中的正则表达式的信息。
    ///</summary>
    ///  <param name="pattern">
    ///  要编译的正则表达式。
    ///</param>
    ///  <param name="options">
    ///  要编译的正则表达式时使用的正则表达式选项。
    ///</param>
    ///  <param name="name">
    ///  表示已编译的正则表达式的类型的名称。
    ///</param>
    ///  <param name="fullnamespace">
    ///  新类型所属的命名空间。
    ///</param>
    ///  <param name="ispublic"><see langword="true" />
    ///  若要使已编译的正则表达式公开可见;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  为 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="fullnamespace" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(pattern: string; options: DNRegexOptions; name: string; fullnamespace: string; ispublic: Boolean): DNRegexCompilationInfo; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />
    ///  类，其中包含有关与要包含在程序集中指定的超时值的正则表达式的信息。
    ///</summary>
    ///  <param name="pattern">
    ///  要编译的正则表达式。
    ///</param>
    ///  <param name="options">
    ///  要编译的正则表达式时使用的正则表达式选项。
    ///</param>
    ///  <param name="name">
    ///  表示已编译的正则表达式的类型的名称。
    ///</param>
    ///  <param name="fullnamespace">
    ///  新类型所属的命名空间。
    ///</param>
    ///  <param name="ispublic"><see langword="true" />
    ///  若要使已编译的正则表达式公开可见;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="matchTimeout">
    ///  默认的超时间隔为正则表达式的。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  为 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="fullnamespace" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="matchTimeout" />
    ///  为负、零或大于 24 天左右。
    ///</exception>
    {class} function init(pattern: string; options: DNRegexOptions; name: string; fullnamespace: string; ispublic: Boolean; matchTimeout: DDN.mscorlib.DNTimeSpan): DNRegexCompilationInfo; overload;

  end;

  ///<summary>
  ///  提供有关用于正则表达式编译为独立的程序集的正则表达式的信息。
  ///</summary>
  [DNTypeName('System.Text.RegularExpressions.RegexCompilationInfo')]
  DNRegexCompilationInfo = interface(DDN.mscorlib.DNObject)
  ['{85776C7E-AA0A-37C2-A85F-E9AE1A691217}']
  { getters & setters } 

    function get_Pattern: string;
    procedure set_Pattern(value: string);
    function get_Options: DNRegexOptions;
    procedure set_Options(value: DNRegexOptions);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_IsPublic: Boolean;
    procedure set_IsPublic(value: Boolean);
    function get_MatchTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_MatchTimeout(value: DDN.mscorlib.DNTimeSpan);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要编译的正则表达式。
    ///</summary>
    ///<returns>
    ///  要编译的正则表达式。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  此属性的值是 <see langword="null" />
    ///  。
    ///</exception>
    property Pattern: string read get_Pattern write set_Pattern;
    ///<summary>
    ///  获取或设置要编译的正则表达式时使用的选项。
    ///</summary>
    ///<returns>
    ///  枚举值的按位组合。
    ///</returns>
    property Options: DNRegexOptions read get_Options write set_Options;
    ///<summary>
    ///  获取或设置表示已编译的正则表达式的类型的名称。
    ///</summary>
    ///<returns>
    ///  新类型的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  此属性的值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  此属性的值为一个空字符串。
    ///</exception>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置新的类型所属的命名空间。
    ///</summary>
    ///<returns>
    ///  新类型的命名空间。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  此属性的值是 <see langword="null" />
    ///  。
    ///</exception>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置一个值，该值指示是否已编译的正则表达式具有公共可见性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果正则表达式具有公共可见性;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPublic: Boolean read get_IsPublic write set_IsPublic;
    ///<summary>
    ///  获取或设置正则表达式的默认超时间隔。
    ///</summary>
    ///<returns>
    ///  在模式匹配操作中之前所经过的默认最大时间间隔 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />
    ///  引发，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
    ///  在超时被禁用。
    ///</returns>
    property MatchTimeout: DDN.mscorlib.DNTimeSpan read get_MatchTimeout write set_MatchTimeout;
  end;

  TDNRegexCompilationInfo = class(TDNGenericImport<DNRegexCompilationInfoClass, DNRegexCompilationInfo>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A240520D-D05D-5B12-A682-729DD9A75FAC}']
  { static getter & setter } 

    {class} function get_Current: DNTransaction;
    {class} procedure set_Current(value: DNTransaction);

  { static propertys } 

    ///<summary>
    ///  获取或设置环境事务。
    ///</summary>
    ///<returns>
    ///  描述当前事务的 <see cref="T:System.Transactions.Transaction" />
    ///  。
    ///</returns>
    {class} property Current: DNTransaction read get_Current write set_Current;
  end;

  ///<summary>
  ///  表示的事务。
  ///</summary>
  [DNTypeName('System.Transactions.Transaction')]
  DNTransaction = interface(DDN.mscorlib.DNObject)
  ['{E1F23ACF-DC76-3B52-8794-5BB90592C284}']
  { getters & setters } 

    function get_PromoterType: DDN.mscorlib.DNGuid;

  { methods } 

    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  确定此事务和指定的对象是否相等。
    ///</summary>
    ///  <param name="obj">
    ///  与该实例进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  与此事务完全相同; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  释放由该对象占用的资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  获取提升事务时由 Promote 方法返回的 byte[]。
    ///</summary>
    ///<returns>
    ///  提升事务时由 Promote 方法返回的 byte[]。
    ///</returns>
    function GetPromotedToken: TArray<Byte>;
    ///<summary>
    ///  回滚 （中止） 事务。
    ///</summary>
    procedure Rollback; overload;
    ///<summary>
    ///  回滚 （中止） 事务。
    ///</summary>
    ///  <param name="e">
    ///  回滚发生原因的说明。
    ///</param>
    procedure Rollback(e: DDN.mscorlib.DNException); overload;
    ///<summary>
    ///  创建事务的克隆。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Transactions.Transaction" />
    ///  ，它是当前的事务对象的副本。
    ///</returns>
    function Clone: DNTransaction;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  对提升事务时由 Promote 方法返回的 byte[] 的格式进行唯一标识。
    ///</summary>
    ///<returns>
    ///  对提升事务时由 Promote 方法返回的 byte[] 的格式进行唯一标识的 GUID。
    ///</returns>
    property PromoterType: DDN.mscorlib.DNGuid read get_PromoterType;
  end;

  TDNTransaction = class(TDNGenericImport<DNTransactionClass, DNTransaction>) end;

  //-------------namespace: System----------------
  DNUriClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8A027B3B-A57B-527D-952E-7A148425AE4A}']
  { constructors } 

    ///<summary>
    ///  用指定的 URI 初始化 <see cref="T:System.Uri" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="uriString">
    ///  一个 URI。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uriString" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  在.NET for Windows Store apps或可移植类库，捕获该基类异常， <see cref="T:System.FormatException" />
    ///  ，而不是。
    ///  <paramref name="uriString" />
    ///  为空。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的方案格式不正确。
    ///  请参阅<see cref="M:System.Uri.CheckSchemeName(System.String)" />
    ///  。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  包含过多斜杠。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的密码无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的主机名无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的文件名无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的用户名无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的主机名或证书颁发机构名称不能以反斜杠结尾。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的端口号无效或无法分析。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  的长度超过 65519 个字符。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的方案的长度超过 1023 个字符。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中存在无效的字符序列。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的 MS-DOS 路径必须以 c:\\ 开头。
    ///</exception>
    {class} function init(uriString: string): DNUri; overload;
    ///<summary>
    ///  用指定的 URI 初始化 <see cref="T:System.Uri" />
    ///  类的新实例，并对字符转义进行显式控制。
    ///</summary>
    ///  <param name="uriString">
    ///  URI。
    ///</param>
    ///  <param name="dontEscape">
    ///  如果 <see langword="true" />
    ///  已完全转义，则为 <paramref name="uriString" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  请参阅“备注”。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uriString" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.UriFormatException"><paramref name="uriString" />
    ///  为空或仅包含空格。
    ///  - 或 -
    ///  中指定的方案<paramref name="uriString" />
    ///  无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  包含过多斜杠。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的密码无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的主机名无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的文件名无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的用户名无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的主机名或证书颁发机构名称不能以反斜杠结尾。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的端口号无效或无法分析。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  的长度超过 65519 个字符。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的方案的长度超过 1023 个字符。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中存在无效的字符序列。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的 MS-DOS 路径必须以 c:\\ 开头。
    ///</exception>
    {class} function init(uriString: string; dontEscape: Boolean): DNUri; overload;
    ///<summary>
    ///  根据指定的基 URI 和相对 URI，初始化 <see cref="T:System.Uri" />
    ///  类的新实例，并对字符转义进行显式控制。
    ///</summary>
    ///  <param name="baseUri">
    ///  基 URI。
    ///</param>
    ///  <param name="relativeUri">
    ///  要添加到基 URI 的相对 URI。
    ///</param>
    ///  <param name="dontEscape">
    ///  如果 <see langword="true" />
    ///  已完全转义，则为 <paramref name="uriString" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  请参阅“备注”。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="baseUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri" />
    ///  不是绝对的 <see cref="T:System.Uri" />
    ///  实例。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 为空或仅包含空格。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的方案无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 包含过多的斜杠。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的密码无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的主机名无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的文件名无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的用户名无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的主机名或证书颁发机构名称不能以反斜杠终止。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的端口号无效或无法分析。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 的长度超过 65519 个字符。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的方案长度超过 1023 个字符。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中存在无效字符序列。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的 MS-DOS 路径必须以 c:\\ 开头。
    ///</exception>
    {class} function init(baseUri: DNUri; relativeUri: string; dontEscape: Boolean): DNUri; overload;
    ///<summary>
    ///  用指定的 URI 初始化 <see cref="T:System.Uri" />
    ///  类的新实例。
    ///  此构造函数允许指定 URI 字符串是相对 URI、绝对 URI 还是不确定。
    ///</summary>
    ///  <param name="uriString">
    ///  标识将由 <see cref="T:System.Uri" />
    ///  实例表示的资源的字符串。
    ///</param>
    ///  <param name="uriKind">
    ///  指定 URI 字符串是相对 URI、绝对 URI 还是不确定。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="uriKind" />
    ///  无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="uriString" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  在.NET for Windows Store apps或可移植类库，捕获该基类异常， <see cref="T:System.FormatException" />
    ///  ，而不是。
    ///  <paramref name="uriString" />
    ///  包含相对 URI，而 <paramref name="uriKind" />
    ///  为 <see cref="F:System.UriKind.Absolute" />
    ///  。
    ///  或
    ///  <paramref name="uriString" />
    ///  包含绝对 URI，而 <paramref name="uriKind" />
    ///  为 <see cref="F:System.UriKind.Relative" />
    ///  。
    ///  或
    ///  <paramref name="uriString" />
    ///  为空。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的方案格式不正确。
    ///  请参阅<see cref="M:System.Uri.CheckSchemeName(System.String)" />
    ///  。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  包含过多斜杠。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的密码无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的主机名无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的文件名无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的用户名无效。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的主机名或证书颁发机构名称不能以反斜杠结尾。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的端口号无效或无法分析。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  的长度超过 65519 个字符。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的方案的长度超过 1023 个字符。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中存在无效的字符序列。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的 MS-DOS 路径必须以 c:\\ 开头。
    ///</exception>
    {class} function init(uriString: string; uriKind: DNUriKind): DNUri; overload;
    ///<summary>
    ///  根据指定的基 URI 和相对 URI 字符串，初始化 <see cref="T:System.Uri" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="baseUri">
    ///  基 URI。
    ///</param>
    ///  <param name="relativeUri">
    ///  要添加到基 URI 的相对 URI。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="baseUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri" />
    ///  不是绝对的 <see cref="T:System.Uri" />
    ///  实例。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  在.NET for Windows Store apps或可移植类库，捕获该基类异常， <see cref="T:System.FormatException" />
    ///  ，而不是。
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 为空或仅包含空格。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的方案无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 包含过多的斜杠。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的密码无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的主机名无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的文件名无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的用户名无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的主机名或证书颁发机构名称不能以反斜杠终止。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的端口号无效或无法分析。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 的长度超过 65519 个字符。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的方案长度超过 1023 个字符。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中存在无效字符序列。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的 MS-DOS 路径必须以 c:\\ 开头。
    ///</exception>
    {class} function init(baseUri: DNUri; relativeUri: string): DNUri; overload;
    ///<summary>
    ///  根据指定的基 <see cref="T:System.Uri" />
    ///  实例和相对 <see cref="T:System.Uri" />
    ///  实例的组合，初始化 <see cref="T:System.Uri" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="baseUri">
    ///  作为新 <see cref="T:System.Uri" />
    ///  实例的基的绝对 <see cref="T:System.Uri" />
    ///  。
    ///</param>
    ///  <param name="relativeUri">
    ///  与 <see cref="T:System.Uri" />
    ///  组合的相对 <paramref name="baseUri" />
    ///  实例。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="baseUri" />
    ///  不是绝对的 <see cref="T:System.Uri" />
    ///  实例。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="baseUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri" />
    ///  不是绝对的 <see cref="T:System.Uri" />
    ///  实例。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  在.NET for Windows Store apps或可移植类库，捕获该基类异常， <see cref="T:System.FormatException" />
    ///  ，而不是。
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 为空或仅包含空格。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的方案无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 包含过多的斜杠。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的密码无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的主机名无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的文件名无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的用户名无效。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的主机名或证书颁发机构名称不能以反斜杠终止。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的端口号无效或无法分析。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 的长度超过 65519 个字符。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中指定的方案长度超过 1023 个字符。
    ///  - 或 -
    ///  通过组合 <paramref name="baseUri" />
    ///  和 <paramref name="relativeUri" />
    ///  而构成的 URI 中存在无效字符序列。
    ///  - 或 -
    ///  <paramref name="uriString" />
    ///  中指定的 MS-DOS 路径必须以 c:\\ 开头。
    ///</exception>
    {class} function init(baseUri: DNUri; relativeUri: DNUri): DNUri; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_UriSchemeFile: string;
   function __fakeFieldGet_UriSchemeFtp: string;
   function __fakeFieldGet_UriSchemeGopher: string;
   function __fakeFieldGet_UriSchemeHttp: string;
   function __fakeFieldGet_UriSchemeHttps: string;
   function __fakeFieldGet_UriSchemeMailto: string;
   function __fakeFieldGet_UriSchemeNews: string;
   function __fakeFieldGet_UriSchemeNntp: string;
   function __fakeFieldGet_UriSchemeNetTcp: string;
   function __fakeFieldGet_UriSchemeNetPipe: string;
   function __fakeFieldGet_SchemeDelimiter: string;

  { static fields } 

    ///<summary>
    ///  指定 URI 是指向文件的指针。
    ///  此字段为只读。
    ///</summary>
    {class} property UriSchemeFile: string read __fakeFieldGet_UriSchemeFile;
    ///<summary>
    ///  指定通过文件传输协议 (FTP) 访问 URI。
    ///  此字段为只读。
    ///</summary>
    {class} property UriSchemeFtp: string read __fakeFieldGet_UriSchemeFtp;
    ///<summary>
    ///  指定通过 Gopher 协议访问 URI。
    ///  此字段为只读。
    ///</summary>
    {class} property UriSchemeGopher: string read __fakeFieldGet_UriSchemeGopher;
    ///<summary>
    ///  指定通过超文本传输协议 (HTTP) 访问 URI。
    ///  此字段为只读。
    ///</summary>
    {class} property UriSchemeHttp: string read __fakeFieldGet_UriSchemeHttp;
    ///<summary>
    ///  指定通过安全超文本传输协议 (HTTPS) 访问 URI。
    ///  此字段为只读。
    ///</summary>
    {class} property UriSchemeHttps: string read __fakeFieldGet_UriSchemeHttps;
    ///<summary>
    ///  指定 URI 是一个电子邮件地址，需通过简单邮件传输协议 (SMTP) 访问。
    ///  此字段为只读。
    ///</summary>
    {class} property UriSchemeMailto: string read __fakeFieldGet_UriSchemeMailto;
    ///<summary>
    ///  指定 URI 是 Internet 新闻组，而且可以通过 Network 新闻传输协议 (NNTP) 进行访问。
    ///  此字段为只读。
    ///</summary>
    {class} property UriSchemeNews: string read __fakeFieldGet_UriSchemeNews;
    ///<summary>
    ///  指定 URI 是 Internet 新闻组，而且可以通过 Network 新闻传输协议 (NNTP) 进行访问。
    ///  此字段为只读。
    ///</summary>
    {class} property UriSchemeNntp: string read __fakeFieldGet_UriSchemeNntp;
    ///<summary>
    ///  指明通过 Windows Communication Foundation (WCF) 使用的 NetTcp 方案访问该 URI。
    ///  此字段为只读。
    ///</summary>
    {class} property UriSchemeNetTcp: string read __fakeFieldGet_UriSchemeNetTcp;
    ///<summary>
    ///  指明通过 Windows Communication Foundation (WCF) 使用的 NetPipe 方案访问该 URI。
    ///  此字段为只读。
    ///</summary>
    {class} property UriSchemeNetPipe: string read __fakeFieldGet_UriSchemeNetPipe;
    ///<summary>
    ///  指定将通讯协议方案同 URI 的地址部分分开的字符。
    ///  此字段为只读。
    ///</summary>
    {class} property SchemeDelimiter: string read __fakeFieldGet_SchemeDelimiter;

  { static methods } 

    {class} function HexUnescape(pattern: string; out index: Int32): Char;
    ///<summary>
    ///  确定字符串中的一个字符是否为十六进制编码。
    ///</summary>
    ///  <param name="pattern">
    ///  要检查的字符串。
    ///</param>
    ///  <param name="index">
    ///  检查十六进制编码的 <paramref name="pattern" />
    ///  中的位置。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果 <see langword="true" />
    ///  在指定位置进行了十六进制编码，则该值为 <paramref name="pattern" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsHexEncoding(pattern: string; index: Int32): Boolean;
    ///<summary>
    ///  确定指定的方案名是否有效。
    ///</summary>
    ///  <param name="schemeName">
    ///  要验证的方案名。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果方案名有效，则该值为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function CheckSchemeName(schemeName: string): Boolean;
    ///<summary>
    ///  确定指定的字符是否为有效的十六进制数字。
    ///</summary>
    ///  <param name="character">
    ///  要验证的字符。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果字符是有效的十六进制数字，则该值为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsHexDigit(character: Char): Boolean;
    ///<summary>
    ///  获取十六进制数字的十进制值。
    ///</summary>
    ///  <param name="digit">
    ///  要转换的十六进制数字（0-9、a-f、A-F）。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Int32" />
    ///  值，包含与指定的十六进制数字对应的介于 0 到 15 之间的数字。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="digit" />
    ///  不是有效的十六进制数字 (0-9、 a-f、 A-F)。
    ///</exception>
    {class} function FromHex(digit: Char): Int32;
    {class} function TryCreate(uriString: string; uriKind: DNUriKind; out result: DNUri): Boolean; overload;
    {class} function TryCreate(baseUri: DNUri; relativeUri: string; out result: DNUri): Boolean; overload;
    {class} function TryCreate(baseUri: DNUri; relativeUri: DNUri; out result: DNUri): Boolean; overload;
    ///<summary>
    ///  使用指定的比较规则比较两个 URI 的指定部分。
    ///</summary>
    ///  <param name="uri1">
    ///  第一个 <see cref="T:System.Uri" />
    ///  。
    ///</param>
    ///  <param name="uri2">
    ///  第二个 <see cref="T:System.Uri" />
    ///  。
    ///</param>
    ///  <param name="partsToCompare"><see cref="T:System.UriComponents" />
    ///  值的按位组合，它指定要比较的 <paramref name="uri1" />
    ///  和 <paramref name="uri2" />
    ///  的部分。
    ///</param>
    ///  <param name="compareFormat"><see cref="T:System.UriFormat" />
    ///  值中的一个，它指定在比较 URI 部分时使用的字符转义。
    ///</param>
    ///  <param name="comparisonType"><see cref="T:System.StringComparison" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Int32" />
    ///  值，指示进行比较的 <see cref="T:System.Uri" />
    ///  部分之间的词法关系。
    ///  值
    ///  含义
    ///  小于零
    ///  <paramref name="uri1" />
    ///  小于 <paramref name="uri2" />
    ///  。
    ///  零
    ///  <paramref name="uri1" />
    ///  等于 <paramref name="uri2" />
    ///  。
    ///  大于零
    ///  <paramref name="uri1" />
    ///  大于 <paramref name="uri2" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="comparisonType" />
    ///  不是有效的 <see cref="T:System.StringComparison" />
    ///  值。
    ///</exception>
    {class} function Compare(uri1: DNUri; uri2: DNUri; partsToCompare: DNUriComponents; compareFormat: DNUriFormat; comparisonType: DDN.mscorlib.DNStringComparison): Int32;
    ///<summary>
    ///  通过尝试用字符串构造一个 URI 来指示字符串是否为格式良好的，并确保字符串不需要进一步转义。
    ///</summary>
    ///  <param name="uriString">
    ///  用于尝试构造 <see cref="T:System.Uri" />
    ///  的字符串。
    ///</param>
    ///  <param name="uriKind"><see cref="T:System.Uri" />
    ///  中的 <paramref name="uriString" />
    ///  的类型。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果该字符串格式正确，则该值为 <see langword="true " />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsWellFormedUriString(uriString: string; uriKind: DNUriKind): Boolean;
    ///<summary>
    ///  将 URI 字符串转换为它的转义表示形式。
    ///</summary>
    ///  <param name="stringToEscape">
    ///  要转义的字符串。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含 <paramref name="stringToEscape" />
    ///  的转义表示形式。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stringToEscape" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />
    ///  , ，而不是。
    ///  <paramref name="stringToEscape" />
    ///  的长度超过 32766 个字符。
    ///</exception>
    {class} function EscapeUriString(stringToEscape: string): string;
    ///<summary>
    ///  将字符串转换为它的转义表示形式。
    ///</summary>
    ///  <param name="stringToEscape">
    ///  要转义的字符串。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含 <paramref name="stringToEscape" />
    ///  的转义表示形式。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stringToEscape" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />
    ///  , ，而不是。
    ///  <paramref name="stringToEscape" />
    ///  的长度超过 32766 个字符。
    ///</exception>
    {class} function EscapeDataString(stringToEscape: string): string;
    ///<summary>
    ///  确定指定的主机名是否为有效的 DNS 名称。
    ///</summary>
    ///  <param name="name">
    ///  要验证的主机名。
    ///  可以是 IPv4 或 IPv6 地址或 Internet 主机名。
    ///</param>
    ///<returns>
    ///  指示主机名类型的 <see cref="T:System.UriHostNameType" />
    ///  。
    ///  如果无法确定主机名的类型，或者主机名为 <see langword="null" />
    ///  或零长度字符串，则此方法返回 <see cref="F:System.UriHostNameType.Unknown" />
    ///  。
    ///</returns>
    {class} function CheckHostName(name: string): DNUriHostNameType;
    ///<summary>
    ///  将指定的字符转换为它的等效十六进制字符。
    ///</summary>
    ///  <param name="character">
    ///  要转换为十六进制表示形式的字符。
    ///</param>
    ///<returns>
    ///  指定字符的十六进制表示形式。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="character" />
    ///  大于 255。
    ///</exception>
    {class} function HexEscape(character: Char): string;
    ///<summary>
    ///  将字符串转换为它的非转义表示形式。
    ///</summary>
    ///  <param name="stringToUnescape">
    ///  要恢复原义的字符串。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含 <paramref name="stringToUnescape" />
    ///  的非转义表示形式。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stringToUnescape" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function UnescapeDataString(stringToUnescape: string): string;

  end;

  ///<summary>
  ///  提供统一资源标识符 (URI) 的对象表示形式和对 URI 各部分的轻松访问。
  ///</summary>
  [DNTypeName('System.Uri')]
  DNUri = interface(DDN.mscorlib.DNObject)
  ['{9BB92499-99AB-3AE5-93D2-0F41F92018D0}']
  { getters & setters } 

    function get_AbsolutePath: string;
    function get_AbsoluteUri: string;
    function get_LocalPath: string;
    function get_Authority: string;
    function get_HostNameType: DNUriHostNameType;
    function get_IsDefaultPort: Boolean;
    function get_IsFile: Boolean;
    function get_IsLoopback: Boolean;
    function get_PathAndQuery: string;
    function get_Segments: TArray<string>;
    function get_IsUnc: Boolean;
    function get_Host: string;
    function get_Port: Int32;
    function get_Query: string;
    function get_Fragment: string;
    function get_Scheme: string;
    function get_OriginalString: string;
    function get_DnsSafeHost: string;
    function get_IdnHost: string;
    function get_IsAbsoluteUri: Boolean;
    function get_UserEscaped: Boolean;
    function get_UserInfo: string;

  { methods } 

    ///<summary>
    ///  获取 <see cref="T:System.Uri" />
    ///  实例的指定部分。
    ///</summary>
    ///  <param name="part"><see cref="T:System.UriPartial" />
    ///  值之一，指定要返回的 URI 部分的结尾。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含 <see cref="T:System.Uri" />
    ///  实例的指定部分。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前<see cref="T:System.Uri" />
    ///  实例不是绝对的实例。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定<paramref name="part" />
    ///  无效。
    ///</exception>
    function GetLeftPart(part: DNUriPartial): string;
    ///<summary>
    ///  获取 URI 的哈希代码。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Int32" />
    ///  ，其中包含为此 URI 生成的哈希值。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取指定的 <see cref="T:System.Uri" />
    ///  实例的规范化字符串表示形式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  实例，它包含 <see cref="T:System.Uri" />
    ///  实例的非转义规范化表示形式。
    ///  除了 #、? 和 %，所有字符均为非转义字符。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  比较两个 <see cref="T:System.Uri" />
    ///  实例是否相等。
    ///</summary>
    ///  <param name="comparand">
    ///  与当前实例相比较的 <see cref="T:System.Uri" />
    ///  实例或 URI 标识符。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果两个实例表示相同的 URI，则该值为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  确定两个 <see cref="T:System.Uri" />
    ///  实例之间的差异。
    ///</summary>
    ///  <param name="toUri">
    ///  与当前 URI 进行比较的 URI。
    ///</param>
    ///<returns>
    ///  如果此 URI 实例与 <paramref name="toUri" />
    ///  的主机名和方案相同，则此方法返回一个表示相对 URI 的 <see cref="T:System.String" />
    ///  。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="toUri" />
    ///  参数。
    ///  如果主机名或方案不同，则此方法返回一个表示 <see cref="T:System.String" />
    ///  参数的 <paramref name="toUri" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="toUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此实例表示相对的 URI，并且此方法是仅对绝对 Uri 有效。
    ///</exception>
    function MakeRelative(toUri: DNUri): string;
    ///<summary>
    ///  使用特殊字符的指定转义，获取当前实例的指定部分。
    ///</summary>
    ///  <param name="components"><see cref="T:System.UriComponents" />
    ///  值的按位组合，它指定当前实例中要返回到调用方的部分。
    ///</param>
    ///  <param name="format"><see cref="T:System.UriFormat" />
    ///  值中的一个，它控制如何转义特殊字符。
    ///</param>
    ///<returns>
    ///  一个包含这些部分的 <see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="components" />
    ///  不是有效的组合<see cref="T:System.UriComponents" />
    ///  值。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前<see cref="T:System.Uri" />
    ///  不是一个绝对 URI。
    ///  相对 Uri 不能使用此方法。
    ///</exception>
    function GetComponents(components: DNUriComponents; format: DNUriFormat): string;
    ///<summary>
    ///  指示用于构造此 <see cref="T:System.Uri" />
    ///  的字符串是否格式良好，以及它是否不需要进一步转义。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果该字符串格式正确，则该值为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsWellFormedOriginalString: Boolean;
    ///<summary>
    ///  确定当前的 <see cref="T:System.Uri" />
    ///  实例是否为指定 <see cref="T:System.Uri" />
    ///  实例的基。
    ///</summary>
    ///  <param name="uri">
    ///  要测试的指定 <see cref="T:System.Uri" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  如果当前 <see langword="true" />
    ///  实例是 <see cref="T:System.Uri" />
    ///  的基，则为 <paramref name="uri" />
    ///  ；否则，为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function IsBaseOf(uri: DNUri): Boolean;
    ///<summary>
    ///  确定两个 <see cref="T:System.Uri" />
    ///  实例之间的差异。
    ///</summary>
    ///  <param name="uri">
    ///  与当前 URI 进行比较的 URI。
    ///</param>
    ///<returns>
    ///  如果此 URI 实例与 <paramref name="uri" />
    ///  的主机名和方案相同，则此方法返回一个相对 <see cref="T:System.Uri" />
    ///  。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="uri" />
    ///  。
    ///  如果主机名或方案不同，则此方法返回一个表示 <see cref="T:System.Uri" />
    ///  参数的 <paramref name="uri" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    function MakeRelativeUri(uri: DNUri): DNUri;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 URI 的绝对路径。
    ///</summary>
    ///<returns>
    ///  包含资源的绝对路径的 <see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property AbsolutePath: string read get_AbsolutePath;
    ///<summary>
    ///  获取绝对 URI。
    ///</summary>
    ///<returns>
    ///  包含整个 URI 的 <see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property AbsoluteUri: string read get_AbsoluteUri;
    ///<summary>
    ///  获取文件名的本地操作系统表示形式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含文件名的本地操作系统表示形式。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property LocalPath: string read get_LocalPath;
    ///<summary>
    ///  获取服务器的域名系统 (DNS) 主机名或 IP 地址和端口号。
    ///</summary>
    ///<returns>
    ///  包含此实例所表示的 URI 的证书颁发机构部分的 <see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property Authority: string read get_Authority;
    ///<summary>
    ///  获取 URI 中指定的主机名的类型。
    ///</summary>
    ///<returns><see cref="T:System.UriHostNameType" />
    ///  枚举的一个成员。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property HostNameType: DNUriHostNameType read get_HostNameType;
    ///<summary>
    ///  获取一个值，该值指示 URI 的端口值是否为此方案的默认值。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果 <see langword="true" />
    ///  属性中的值是此方案的默认端口，则该值为 <see cref="P:System.Uri.Port" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property IsDefaultPort: Boolean read get_IsDefaultPort;
    ///<summary>
    ///  获取一个值，该值指示指定的 <see cref="T:System.Uri" />
    ///  是否为文件 URI。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果 <see langword="true" />
    ///  是文件 URI，则该值为 <see cref="T:System.Uri" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property IsFile: Boolean read get_IsFile;
    ///<summary>
    ///  获取一个值，该值指示指定的 <see cref="T:System.Uri" />
    ///  是否引用了本地主机。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果此 <see langword="true" />
    ///  引用了本地主机，则该值为 <see cref="T:System.Uri" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property IsLoopback: Boolean read get_IsLoopback;
    ///<summary>
    ///  获取用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" />
    ///  和 <see cref="P:System.Uri.Query" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，它包含用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" />
    ///  和 <see cref="P:System.Uri.Query" />
    ///  属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property PathAndQuery: string read get_PathAndQuery;
    ///<summary>
    ///  获取包含构成指定 URI 的路径段的数组。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  数组，包含构成指定 URI 的路径段。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property Segments: TArray<string> read get_Segments;
    ///<summary>
    ///  获取一个值，该值指示指定的 <see cref="T:System.Uri" />
    ///  是否为统一命名约定 (UNC) 路径。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果 <see langword="true" />
    ///  是 UNC 路径，则该值为 <see cref="T:System.Uri" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property IsUnc: Boolean read get_IsUnc;
    ///<summary>
    ///  获取此实例的主机部分。
    ///</summary>
    ///<returns>
    ///  一个包含主机名的 <see cref="T:System.String" />
    ///  。
    ///  这通常是服务器的 DNS 主机名或 IP 地址。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property Host: string read get_Host;
    ///<summary>
    ///  获取此 URI 的端口号。
    ///</summary>
    ///<returns>
    ///  一个包含此 URI 的端口号的 <see cref="T:System.Int32" />
    ///  值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property Port: Int32 read get_Port;
    ///<summary>
    ///  获取指定 URI 中包括的任何查询信息。
    ///</summary>
    ///<returns>
    ///  一个<see cref="T:System.String" />
    ///  ，包含指定 URI 中包括的任何查询信息。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property Query: string read get_Query;
    ///<summary>
    ///  获取转义 URI 片段。
    ///</summary>
    ///<returns>
    ///  一个包含任意 URI 片段信息的 <see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property Fragment: string read get_Fragment;
    ///<summary>
    ///  获取此 URI 的方案名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含此 URI 的方案（已转换为小写形式）。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property Scheme: string read get_Scheme;
    ///<summary>
    ///  获取传递给 <see cref="T:System.Uri" />
    ///  构造函数的原始 URI 字符串。
    ///</summary>
    ///<returns>
    ///  包含构造此实例时指定的同一 URI，则为 <see cref="T:System.String" />
    ///  ；否则，为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property OriginalString: string read get_OriginalString;
    ///<summary>
    ///  获得可安全用于 DNS 解析的未转义主机名。
    ///</summary>
    ///<returns>
    ///  一个包含适用于 DNS 解析的未转义 URI 主机部分的 <see cref="T:System.String" />
    ///  ；或者，如果原始的未转义主机字符串已适用于解析，则为原始的未转义主机字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。
    ///</exception>
    property DnsSafeHost: string read get_DnsSafeHost;
    ///<summary>
    ///  RFC 3490 根据需要使用 Punycode，符合主机的国际域名要求。
    ///</summary>
    ///<returns>
    ///  根据 IDN 标准，返回采用 Punycode 格式的主机名。<see cref="T:System.String" />
    ///  。
    ///</returns>
    property IdnHost: string read get_IdnHost;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Uri" />
    ///  实例是否为绝对 URI。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果 <see langword="true" />
    ///  实例是绝对 URI，则该值为 <see cref="T:System.Uri" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAbsoluteUri: Boolean read get_IsAbsoluteUri;
    ///<summary>
    ///  指示 URI 字符串在创建 <see cref="T:System.Uri" />
    ///  实例之前已被完全转义。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。如果在创建 <see langword="true" />
    ///  实例时 <paramref name="dontEscape" />
    ///  参数设置为 <see langword="true" />
    ///  ，则该值为 <see cref="T:System.Uri" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property UserEscaped: Boolean read get_UserEscaped;
    ///<summary>
    ///  获取用户名、密码或其他与指定 URI 关联的特定于用户的信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含与该 URI 关联的用户信息。
    ///  返回值不包括“@”字符，该字符是一个保留字符，用于分隔 URI 的用户信息部分。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此实例代表一个相对的 URI，而此属性仅对绝对 Uri 无效。
    ///</exception>
    property UserInfo: string read get_UserInfo;
  end;

  TDNUri = class(TDNGenericImport<DNUriClass, DNUri>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBinaryClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BC5F7805-404E-52E2-8980-17E05A908C45}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构，将 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性设置为提供的字节数组的内容。
    ///</summary>
    ///  <param name="value">
    ///  要存储或检索的字节数组。
    ///</param>
    {class} function init(value: TArray<Byte>): DNSqlBinary;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlBinary;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlBinary read __fakeFieldGet_Null;

  { static methods } 

    ///<summary>
    ///  串联两个指定 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  值以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  x 的串联的值和 y。
    ///</returns>
    {class} function Add(x: DNSqlBinary; y: DNSqlBinary): DNSqlBinary;
    ///<summary>
    ///  串联两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构，以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  串联的值 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  参数。
    ///</returns>
    {class} function Concat(x: DNSqlBinary; y: DNSqlBinary): DNSqlBinary;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlBinary" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean; overload;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构，以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示要在存储中或从数据库中检索二进制数据的长度可变的流。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlBinary')]
  DNSqlBinary = interface(DDN.mscorlib.DNValueType)
  ['{786A4E29-6E12-387C-B5BF-64828EB757E4}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: TArray<Byte>;
    function get_Item(index: Int32): Byte;
    function get_Length: Int32;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象与字符串。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  为的 null 则字符串将包含"null"。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  到 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</returns>
    function ToSqlGuid: DNSqlGuid;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象传递给所提供的对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  与此比较的对象 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，它指示此相对值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构和对象。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是小于的对象。
    ///  零
    ///  这 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是对象相同。
    ///  大于零
    ///  这 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是否大于对象。
    ///  - 或 -
    ///  该对象为 null 引用。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象与所提供 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象进行比较的这 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，它指示此相对值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构和对象。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是小于的对象。
    ///  零
    ///  这 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是对象相同。
    ///  大于零
    ///  这 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是否大于对象。
    ///  - 或 -
    ///  该对象为 null 引用。
    ///</returns>
    function CompareTo(value: DNSqlBinary): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构是否为 null。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  如果是 <see langword="null" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException"><see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性只读的属性时包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />
    ///  。
    ///</exception>
    property Value: TArray<Byte> read get_Value;
    property Item[index: Int32]: Byte read get_Item; default;
    ///<summary>
    ///  获取用字节表示长度 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  中的二进制数据的长度 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException"><see cref="P:System.Data.SqlTypes.SqlBinary.Length" />
    ///  属性为只读时 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />
    ///  。
    ///</exception>
    property Length: Int32 read get_Length;
  end;

  TDNSqlBinary = class(TDNGenericImport<DNSqlBinaryClass, DNSqlBinary>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBooleanClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BCB78FA4-2432-5072-AF33-969F663AA254}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构，使用提供的布尔值。
    ///</summary>
    ///  <param name="value">
    ///  为新值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构; 两个 <see langword="true" />
    ///  或 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(value: Boolean): DNSqlBoolean; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构，使用指定的整数值。
    ///</summary>
    ///  <param name="value">
    ///  其值是要用于新的整数 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    {class} function init(value: Int32): DNSqlBoolean; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_True: DNSqlBoolean;
   function __fakeFieldGet_False: DNSqlBoolean;
   function __fakeFieldGet_Null: DNSqlBoolean;
   function __fakeFieldGet_Zero: DNSqlBoolean;
   function __fakeFieldGet_One: DNSqlBoolean;

  { static fields } 

    ///<summary>
    ///  表示一个 true 值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    {class} property True: DNSqlBoolean read __fakeFieldGet_True;
    ///<summary>
    ///  表示一个 false 值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    {class} property False: DNSqlBoolean read __fakeFieldGet_False;
    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlBoolean read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlBoolean read __fakeFieldGet_Zero;
    ///<summary>
    ///  表示一个值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    {class} property One: DNSqlBoolean read __fakeFieldGet_One;

  { static methods } 

    ///<summary>
    ///  将指定 <see cref="T:System.String" />
    ///  到一个逻辑值的表示形式及其 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  等效。
    ///</summary>
    ///  <param name="s">
    ///  要转换的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构，其中包含已分析的值。
    ///</returns>
    {class} function Parse(s: string): DNSqlBoolean;
    ///<summary>
    ///  执行对一个值的求补运算对提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  二进制反码所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</returns>
    {class} function OnesComplement(x: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  计算两个指定的按位与运算 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  逻辑与运算的结果。
    ///</returns>
    {class} function &And(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  执行按位或运算，对两个指定 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构，其值为按位或运算的结果。
    ///</returns>
    {class} function &Or(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  执行按位异或运算对提供的参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  逻辑异或运算的结果。
    ///</returns>
    {class} function &Xor(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  如果两个实例是否不相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function Equals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean; overload;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see langword="true" />
    ///  的第一个实例是否大于第二个实例; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see langword="true" />
    ///  如果第一个实例小于第二个实例; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see langword="true" />
    ///  的第一个实例是否大于或等于第二个实例; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see langword="true" />
    ///  如果第一个实例小于或等于第二个实例，; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function LessThanOrEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示一个整数值，为 1 或 0，则存储在或者从数据库中检索。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlBoolean')]
  DNSqlBoolean = interface(DDN.mscorlib.DNValueType)
  ['{B8E24A3F-FC08-3838-9051-1F1CA4323B29}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Boolean;
    function get_IsTrue: Boolean;
    function get_IsFalse: Boolean;
    function get_ByteValue: Byte;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  为字符串的结构。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///  如果值为 null，则字符串将包含"null"。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  , ，新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的值为 1。
    ///  否则为新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的值为 1。
    ///  否则为新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlInt16" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构的值为 1。
    ///  否则为新 <see langword="SqlInt16" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlInt32" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  , ，新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构的值为 1。
    ///  否则为新 <see langword="SqlInt32" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlInt64" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  , ，新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构的值为 1。
    ///  否则为新 <see langword="SqlInt64" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  , ，新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  值为 1。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="false" />
    ///  , ，新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  值为 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值不是 1 或 0，新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  值是 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值为 1。
    ///  否则为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构的值为 1; 否则为新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  新的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  ，那么 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构的值为 1。
    ///  否则，新的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构与指定对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较对象，则为 null 引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</param>
    ///<returns>
    ///  有符号的数字，该值指示此实例和值的相对值。
    ///  值
    ///  描述
    ///  负整数
    ///  此实例小于 <paramref name="value" />
    ///  。
    ///  零
    ///  此实例等于 <paramref name="value" />
    ///  。
    ///  正整数
    ///  此实例大于 <paramref name="value" />
    ///  。
    ///  - 或 -
    ///  <paramref name="value" />
    ///  为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  对象与所提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  要比较对象，则为 null 引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</param>
    ///<returns>
    ///  有符号的数字，该值指示此实例和值的相对值。
    ///  值
    ///  描述
    ///  负整数
    ///  此实例小于 <paramref name="value" />
    ///  。
    ///  零
    ///  此实例等于 <paramref name="value" />
    ///  。
    ///  正整数
    ///  此实例大于 <paramref name="value" />
    ///  。
    ///  - 或 -
    ///  <paramref name="value" />
    ///  为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    function CompareTo(value: DNSqlBoolean): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构为空; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值。
    ///  此属性是只读的。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  该属性设置为 null。
    ///</exception>
    property Value: Boolean read get_Value;
    ///<summary>
    ///  指示是否当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="Value" />
    ///  是 <see langword="True" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsTrue: Boolean read get_IsTrue;
    ///<summary>
    ///  指示是否当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  是 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="Value" />
    ///  是 <see langword="False" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFalse: Boolean read get_IsFalse;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  字节形式的结构。
    ///</summary>
    ///<returns>
    ///  一个字节表示的值的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</returns>
    property ByteValue: Byte read get_ByteValue;
  end;

  TDNSqlBoolean = class(TDNGenericImport<DNSqlBooleanClass, DNSqlBoolean>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlByteClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B0043E6D-8C6A-5CFA-A00A-FC20DBA97B83}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，使用指定的字节值。
    ///</summary>
    ///  <param name="value">
    ///  要存储在一个字节值 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  属性的新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    {class} function init(value: Byte): DNSqlByte;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlByte;
   function __fakeFieldGet_Zero: DNSqlByte;
   function __fakeFieldGet_MinValue: DNSqlByte;
   function __fakeFieldGet_MaxValue: DNSqlByte;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlByte read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlByte read __fakeFieldGet_Zero;
    ///<summary>
    ///  一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    {class} property MinValue: DNSqlByte read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    {class} property MaxValue: DNSqlByte read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  为其等效的 8 位无符号整数的数字表示形式。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，其中包含所表示的 8 位数字 <see langword="String" />
    ///  参数。
    ///</returns>
    {class} function Parse(s: string): DNSqlByte;
    ///<summary>
    ///  二进制反码运算符执行按位码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  属性包含与补数 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  参数。
    ///</returns>
    {class} function OnesComplement(x: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  属性包含添加的结果。
    ///</returns>
    {class} function Add(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  从第一个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  从第一个操作数。
    ///</returns>
    {class} function Subtract(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  计算两个产品 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  属性包含相乘的积。
    ///</returns>
    {class} function Multiply(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  属性包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  包含其余部分。
    ///</returns>
    {class} function &Mod(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  将两个划分 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  值并返回余数。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</param>
    ///<returns>
    ///  得到的余数后在执行除法运算 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  。
    ///</returns>
    {class} function Modulus(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  按位与运算的结果。
    ///</returns>
    {class} function BitwiseAnd(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  按位或运算的结果。
    ///</returns>
    {class} function BitwiseOr(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  执行按位异或运算对提供的参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  异或运算的结果。
    ///</returns>
    {class} function &Xor(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlByte" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean; overload;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示一个 8 位无符号的整数，0 和 255 之间，范围中要存储中或从数据库中检索。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlByte')]
  DNSqlByte = interface(DDN.mscorlib.DNValueType)
  ['{4D1AFAD7-1431-3AFC-8960-D2DE9BE53DE6}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Byte;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///  如果 <see langword="Value" />
    ///  为 null， <see langword="String" />
    ///  将是一个空字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlDouble" />
    ///  具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlInt16" />
    ///  具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  到 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlInt32" />
    ///  具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlInt64" />
    ///  结构人员 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlMoney" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlSingle" />
    ///  具有相同的结构 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  如下 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  到 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlString" />
    ///  ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  将与所提供的此实例进行比较 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  将与所提供的此实例进行比较 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  对象进行比较。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlByte): Int32; overload;
    ///<summary>
    ///  比较提供 <see cref="T:System.Object" />
    ///  参数 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///  此属性是只读的
    ///</summary>
    ///<returns>
    ///  值 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</returns>
    property Value: Byte read get_Value;
  end;

  TDNSqlByte = class(TDNGenericImport<DNSqlByteClass, DNSqlByte>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDateTimeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{CFD65AA2-B683-5C7D-8EE2-F2E470823769}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用指定 <see cref="T:System.DateTime" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see langword="DateTime" />
    ///  结构。
    ///</param>
    {class} function init(value: DDN.mscorlib.DNDateTime): DNSqlDateTime; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用所提供的参数初始化年、 月、 日。
    ///</summary>
    ///  <param name="year">
    ///  一个整数，表示的年份的新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="month">
    ///  表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="day">
    ///  一个整数值，表示新的天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    {class} function init(year: Int32; month: Int32; day: Int32): DNSqlDateTime; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟和第二个新的结构。
    ///</summary>
    ///  <param name="year">
    ///  一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="month">
    ///  表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="day">
    ///  一个整数值，表示新的每月天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="hour">
    ///  一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="minute">
    ///  一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="second">
    ///  一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32): DNSqlDateTime; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟、 秒和毫秒，新的结构。
    ///</summary>
    ///  <param name="year">
    ///  一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="month">
    ///  表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="day">
    ///  一个整数值，表示新的每月天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="hour">
    ///  一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="minute">
    ///  一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="second">
    ///  一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="millisecond">
    ///  一个 double 值，表示最新的毫秒 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Double): DNSqlDateTime; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟、 秒和毫新结构。
    ///</summary>
    ///  <param name="year">
    ///  一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="month">
    ///  表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="day">
    ///  一个整数值，表示新的一天 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="hour">
    ///  一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="minute">
    ///  一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="second">
    ///  一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="bilisecond">
    ///  一个整数值表示毫第二个） 的新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; bilisecond: Int32): DNSqlDateTime; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用提供的参数。
    ///</summary>
    ///  <param name="dayTicks">
    ///  一个整数值，表示为刻度数的日期。
    ///</param>
    ///  <param name="timeTicks">
    ///  一个整数值，表示为刻度数的时间。
    ///</param>
    {class} function init(dayTicks: Int32; timeTicks: Int32): DNSqlDateTime; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SQLTicksPerSecond: Int32;
   function __fakeFieldGet_SQLTicksPerMinute: Int32;
   function __fakeFieldGet_SQLTicksPerHour: Int32;
   function __fakeFieldGet_MinValue: DNSqlDateTime;
   function __fakeFieldGet_MaxValue: DNSqlDateTime;
   function __fakeFieldGet_Null: DNSqlDateTime;

  { static fields } 

    ///<summary>
    ///  其值为等效于 1 秒的刻度数的常数。
    ///</summary>
    {class} property SQLTicksPerSecond: Int32 read __fakeFieldGet_SQLTicksPerSecond;
    ///<summary>
    ///  一个常数，其值是等效为一分钟的刻度数。
    ///</summary>
    {class} property SQLTicksPerMinute: Int32 read __fakeFieldGet_SQLTicksPerMinute;
    ///<summary>
    ///  其值为等效于一小时的刻度数的常数。
    ///</summary>
    {class} property SQLTicksPerHour: Int32 read __fakeFieldGet_SQLTicksPerHour;
    ///<summary>
    ///  表示的最小有效日期值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</summary>
    {class} property MinValue: DNSqlDateTime read __fakeFieldGet_MinValue;
    ///<summary>
    ///  表示的最大有效日期值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</summary>
    {class} property MaxValue: DNSqlDateTime read __fakeFieldGet_MaxValue;
    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlDateTime read __fakeFieldGet_Null;

  { static methods } 

    ///<summary>
    ///  将指定 <see cref="T:System.String" />
    ///  日期和时间表示形式及其 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  等效。
    ///</summary>
    ///  <param name="s"><see langword="string" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构等于的日期和时间指定表示 <see langword="string" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlDateTime;
    ///<summary>
    ///  添加 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  到指定 <see langword="TimeSpan" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  值。
    ///</param>
    ///  <param name="t">
    ///  一个 <see langword="Timespan" />
    ///  值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  值。
    ///</returns>
    {class} function Add(x: DNSqlDateTime; t: DDN.mscorlib.DNTimeSpan): DNSqlDateTime;
    ///<summary>
    ///  中减去指定 <see langword="Timespan" />
    ///  从此 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  实例。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  值。
    ///</param>
    ///  <param name="t">
    ///  一个 <see langword="Timespan" />
    ///  值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  值。
    ///</returns>
    {class} function Subtract(x: DNSqlDateTime; t: DDN.mscorlib.DNTimeSpan): DNSqlDateTime;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function Equals(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较的两个实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示数值范围从 1753 年 1 月 1 日至 12 月 31 日，精确到 3.33 毫秒要存储中或从数据库中检索到 9999 的日期和时间数据。
  ///<see cref="T:System.Data.SqlTypes.SqlDateTime" />
  ///  结构都有其对应的.NET Framework 类型，从不同的基础数据结构 <see cref="T:System.DateTime" />
  ///  , ，该类型可表示 12:00:00 AM 之间任何时间 0001 年 1 月 1 日和 11:59:59 PM 12/31/9999，100 纳秒的准确性。
  ///<see cref="T:System.Data.SqlTypes.SqlDateTime" />
  ///  实际上都存储到 00:00:00 AM 的相对差值 1900 年 1 月 1 日。
  ///  因此，从转换"00:00:00 AM 1/1/1900年"为整数，则将返回 0。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlDateTime')]
  DNSqlDateTime = interface(DDN.mscorlib.DNValueType)
  ['{C599278A-B83C-358D-96B1-56EA21FCF240}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNDateTime;
    function get_DayTicks: Int32;
    function get_TimeTicks: Int32;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="String" />
    ///  表示 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlString" />
    ///  其值是一个字符串，表示日期和时间的结构是否包含在此 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  与所提供的结构 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  为 Visual Basic)。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  与所提供的结构 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构进行比较。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例小于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  。
    ///  零
    ///  此实例与 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  相同。
    ///  大于零
    ///  此实例大于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  - 或 -
    ///<see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为空引用 (<see langword="Nothing " />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlDateTime): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值<see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  此值<see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  当 <see langword="Value" />
    ///  结构的 <see cref="N:System.Data.SqlTypes" />
    ///  属性设置为 null 时所引发的异常。
    ///</exception>
    property Value: DDN.mscorlib.DNDateTime read get_Value;
    ///<summary>
    ///  获取表示此日期的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  表示日期中包含的计时周期数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  当 <see langword="Value" />
    ///  结构的 <see cref="N:System.Data.SqlTypes" />
    ///  属性设置为 null 时所引发的异常。
    ///</exception>
    property DayTicks: Int32 read get_DayTicks;
    ///<summary>
    ///  获取表示此时间的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  表示此时间的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</returns>
    property TimeTicks: Int32 read get_TimeTicks;
  end;

  TDNSqlDateTime = class(TDNGenericImport<DNSqlDateTimeClass, DNSqlDateTime>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDecimalClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{9F2819B0-E2F3-575A-964E-F4FE05261A86}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用所提供 <see cref="T:System.Decimal" />
    ///  值。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Decimal" />
    ///  值存储为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    {class} function init(value: DDN.mscorlib.DNDecimal): DNSqlDecimal; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用提供的整数值。
    ///</summary>
    ///  <param name="value">
    ///  提供的整数值，它将用作新值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    {class} function init(value: Int32): DNSqlDecimal; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用提供的长整型值。
    ///</summary>
    ///  <param name="value">
    ///  提供的长整型值，它将用作新值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    {class} function init(value: Int64): DNSqlDecimal; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用提供的参数。
    ///</summary>
    ///  <param name="bPrecision">
    ///  最大数字位数，可以用于以表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性的新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="bScale">
    ///  小数位数数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性将解析为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="fPositive">
    ///  一个布尔值，该值指示是否新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构表示正数或负数。
    ///</param>
    ///  <param name="bits">
    ///  提供的新值的 128 位无符号的整数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</param>
    {class} function init(bPrecision: Byte; bScale: Byte; fPositive: Boolean; bits: TArray<Int32>): DNSqlDecimal; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用提供的参数。
    ///</summary>
    ///  <param name="bPrecision">
    ///  最大数字位数，可以用于以表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性的新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="bScale">
    ///  小数位数数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性将解析为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="fPositive">
    ///  一个布尔值，该值指示是否新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构表示正数或负数。
    ///</param>
    ///  <param name="data1">
    ///  一个 32 位无符号的整数，它将结合 data2、 data3 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构值。
    ///</param>
    ///  <param name="data2">
    ///  一个 32 位无符号的整数，它将结合 data1、 data3 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构值。
    ///</param>
    ///  <param name="data3">
    ///  一个 32 位无符号的整数，它将结合 data1、 data2 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构值。
    ///</param>
    ///  <param name="data4">
    ///  一个 32 位无符号的整数，它将结合 data1、 data2 和 data3 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构值。
    ///</param>
    {class} function init(bPrecision: Byte; bScale: Byte; fPositive: Boolean; data1: Int32; data2: Int32; data3: Int32; data4: Int32): DNSqlDecimal; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用提供的双精度型参数。
    ///</summary>
    ///  <param name="dVal">
    ///  双精度，这表示的值为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    {class} function init(dVal: Double): DNSqlDecimal; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MaxPrecision: Byte;
   function __fakeFieldGet_MaxScale: Byte;
   function __fakeFieldGet_Null: DNSqlDecimal;
   function __fakeFieldGet_MinValue: DNSqlDecimal;
   function __fakeFieldGet_MaxValue: DNSqlDecimal;

  { static fields } 

    ///<summary>
    ///  一个常数，表示的最大可能值为 <see cref="P:System.Data.SqlTypes.SqlDecimal.Precision" />
    ///  属性。
    ///</summary>
    {class} property MaxPrecision: Byte read __fakeFieldGet_MaxPrecision;
    ///<summary>
    ///  一个常数，表示的最大值 <see cref="P:System.Data.SqlTypes.SqlDecimal.Scale" />
    ///  属性。
    ///</summary>
    {class} property MaxScale: Byte read __fakeFieldGet_MaxScale;
    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  类。
    ///</summary>
    {class} property Null: DNSqlDecimal read __fakeFieldGet_Null;
    ///<summary>
    ///  一个常数，表示最小值为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</summary>
    {class} property MinValue: DNSqlDecimal read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</summary>
    {class} property MaxValue: DNSqlDecimal read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到数字表示形式及其 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  等效。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  等效于包含的值中指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlDecimal;
    ///<summary>
    ///  小数位数为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  操作数将调整为数字参数指示的数字个数。
    ///  根据 fRound 参数的值，值将被舍入到相应的数字或截断。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构来进行调整。
    ///</param>
    ///  <param name="digits">
    ///  调整后的结构中的数字个数。
    ///</param>
    ///  <param name="fRound">
    ///  如果此参数为 <see langword="true" />
    ///  , ，新值将舍入，如果 <see langword="false" />
    ///  , ，则该值将被截断。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性包含调整后的数字。
    ///</returns>
    {class} function AdjustScale(n: DNSqlDecimal; digits: Int32; fRound: Boolean): DNSqlDecimal;
    ///<summary>
    ///  值调整 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  操作数指定的精度和小数位数。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，其值进行调整。
    ///</param>
    ///  <param name="precision">
    ///  新的精度 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="scale">
    ///  新的小数位数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数中指定其值已调整到的精度和小数位数的结构。
    ///</returns>
    {class} function ConvertToPrecScale(n: DNSqlDecimal; precision: Int32; scale: Int32): DNSqlDecimal;
    ///<summary>
    ///  计算两个总和 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  运算符。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性包含的总和。
    ///</returns>
    {class} function Add(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  计算的结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  从第一个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，其 Value 属性包含该减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性包含相乘的积。
    ///</returns>
    {class} function Multiply(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  除法运算符计算除以第一个结果 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  操作数以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null、 的值 <see langword="SqlDecimal" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数，以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    ///<summary>
    ///  对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    ///<summary>
    ///  Abs 方法获取数值的绝对值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数。
    ///</summary>
    ///  <param name="n">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性包含该无符号的数值表示数值的绝对值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数。
    ///</returns>
    {class} function Abs(n: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  返回大于或等于指定的最小整数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构为其上限值进行计算。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  表示最小整数大于或等于指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    {class} function Ceiling(n: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  指定将舍入 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  数字到下一个较小的整数。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为其最小值是要计算的结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，其中包含此的整数部分 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    {class} function Floor(n: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  获取一个值，表示的符号 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  其符号的计算结果的结构。
    ///</param>
    ///<returns>
    ///  一个数字，指示的符号 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    {class} function Sign(n: DNSqlDecimal): DNSqlInt32;
    ///<summary>
    ///  获取最接近指定的数字 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值与指定的精度。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构要舍入。
    ///</param>
    ///  <param name="position">
    ///  返回值中的有效小数位数 （精度） 数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，其中包含舍入运算的结果。
    ///</returns>
    {class} function Round(n: DNSqlDecimal; position: Int32): DNSqlDecimal;
    ///<summary>
    ///  将截断指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值与您希望的位置。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构被截断。
    ///</param>
    ///  <param name="position">
    ///  数字将被截断的十进制位置。
    ///</param>
    ///<returns>
    ///  提供一个负值 <paramref name="position" />
    ///  为了截断到小数点左侧的相应位置的值的参数。
    ///</returns>
    {class} function Truncate(n: DNSqlDecimal; position: Int32): DNSqlDecimal;
    ///<summary>
    ///  引发指定的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的指定指数幂。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  要乘幂的结构。
    ///</param>
    ///  <param name="exp">
    ///  双精度值，该值指示数应乘到其中的幂。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它包含的结果。
    ///</returns>
    {class} function Power(n: DNSqlDecimal; exp: Double): DNSqlDecimal;

  end;

  ///<summary>
  ///  表示数值之间-10 ^38 + 1 和 10 ^38-1，具有固定的精度和小数位数。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlDecimal')]
  DNSqlDecimal = interface(DDN.mscorlib.DNValueType)
  ['{BDCFC99C-77C5-3116-BD41-6BE948F47914}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNDecimal;
    function get_IsPositive: Boolean;
    function get_Precision: Byte;
    function get_Scale: Byte;
    function get_Data: TArray<Int32>;
    function get_BinData: TArray<Byte>;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.String" />
    ///  对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  返回的内容的双精度等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  的此实例的属性。
    ///</summary>
    ///<returns>
    ///  十进制表示形式 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性。
    ///</returns>
    function ToDouble: Double;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  等于 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值是 <see langword="true" />
    ///  , 、 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的 <see langword="Value" />
    ///  将为 1。
    ///  否则为 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的 <see langword="Value" />
    ///  将为 0。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，其值一个字符串，表示在此所包含的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlDecimal): Int32; overload;
    ///<summary>
    ///  比较提供 <see cref="T:System.Object" />
    ///  参数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  实例。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  和两个是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  范围-79228162514264337593543950335 到 79,228,162,514,162,514,264,337,593,543,950,335 内的数字。
    ///</returns>
    property Value: DDN.mscorlib.DNDecimal read get_Value;
    ///<summary>
    ///  指示是否 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构是大于零。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  赋 null 值。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPositive: Boolean read get_IsPositive;
    ///<summary>
    ///  获取用于表示的数字的最大数目 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  用来表示的数字的最大数 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    property Precision: Byte read get_Precision;
    ///<summary>
    ///  获取到的小数位数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  得到解决。
    ///</summary>
    ///<returns>
    ///  小数位数数 <see langword="Value" />
    ///  属性是否已解决。
    ///</returns>
    property Scale: Byte read get_Scale;
    ///<summary>
    ///  获取的二进制表示形式这 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  作为一个整数数组的结构。
    ///</summary>
    ///<returns>
    ///  整数数组，其中包含的二进制表示形式这 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    property Data: TArray<Int32> read get_Data;
    ///<summary>
    ///  获取此值的二进制表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  作为字节数组的结构。
    ///</summary>
    ///<returns>
    ///  一个包含二进制表示形式的字节数组 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值。
    ///</returns>
    property BinData: TArray<Byte> read get_BinData;
  end;

  TDNSqlDecimal = class(TDNGenericImport<DNSqlDecimalClass, DNSqlDecimal>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDoubleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{6CF2800B-3833-5F2C-82F5-D52E4986C67A}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构提供的双精度型参数用于设置新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  属性。
    ///</summary>
    ///  <param name="value">
    ///  一个双精度值，其值将用于新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</param>
    {class} function init(value: Double): DNSqlDouble;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlDouble;
   function __fakeFieldGet_Zero: DNSqlDouble;
   function __fakeFieldGet_MinValue: DNSqlDouble;
   function __fakeFieldGet_MaxValue: DNSqlDouble;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlDouble read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlDouble read __fakeFieldGet_Zero;
    ///<summary>
    ///  一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    {class} property MinValue: DNSqlDouble read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</summary>
    {class} property MaxValue: DNSqlDouble read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  为它的等效双精度浮点数的数字表示形式。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  ，其中包含所表示的值 <see langword="String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlDouble;
    ///<summary>
    ///  加法运算符计算这两个和 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  这两个 sum <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  操作数。
    ///</returns>
    {class} function Add(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    ///<summary>
    ///  减法运算符第二个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  从第一个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    ///<summary>
    ///  乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  操作数。
    ///</returns>
    {class} function Multiply(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    ///<summary>
    ///  除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构，其中包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    ///<summary>
    ///  对两个实例执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function Equals(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean; overload;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定它们是否不等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示一个浮点数字中范围在-1.79 e + 308 到 1.79 e + 308 之间要存储中或从数据库中检索。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlDouble')]
  DNSqlDouble = interface(DDN.mscorlib.DNValueType)
  ['{15948ECF-16E5-35C7-AB50-F8B22FC235CA}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Double;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为字符串的结构。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlBoolean" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  为非零 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为零和 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />
    ///  。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  等于 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see langword="Value" />
    ///  等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的值。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see langword="Value" />
    ///  等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的值。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see langword="Value" />
    ///  等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的值。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlMoney" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  是否等于此值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlDecimal" />
    ///  它的已转换的值等于此舍入的值的结构 <see langword="SqlDouble" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlSingle" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  是否等同于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlString" />
    ///  表示 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing " />
    ///  在 Visual Basic 中)。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlDouble): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  structre。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  返回一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  实例为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</returns>
    property Value: Double read get_Value;
  end;

  TDNSqlDouble = class(TDNGenericImport<DNSqlDoubleClass, DNSqlDouble>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlGuidClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B91E024B-C566-5CF3-8C05-3B4D709225DC}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构，使用提供的字节数组参数。
    ///</summary>
    ///  <param name="value">
    ///  字节数组。
    ///</param>
    {class} function init(value: TArray<Byte>): DNSqlGuid; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构，使用指定 <see cref="T:System.String" />
    ///  参数。
    ///</summary>
    ///  <param name="s">
    ///  一个 <see cref="T:System.String" />
    ///  对象。
    ///</param>
    {class} function init(s: string): DNSqlGuid; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构，使用指定 <see cref="T:System.Guid" />
    ///  参数。
    ///</summary>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Guid" />
    ///</param>
    {class} function init(g: DDN.mscorlib.DNGuid): DNSqlGuid; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构，使用指定的值。
    ///</summary>
    ///  <param name="a">
    ///  前四个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="b">
    ///  接下来的两个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="c">
    ///  接下来的两个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="d">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="e">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="f">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="g">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="h">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="i">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="j">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="k">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    {class} function init(a: Int32; b: Int16; c: Int16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNSqlGuid; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlGuid;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlGuid read __fakeFieldGet_Null;

  { static methods } 

    ///<summary>
    ///  将指定 <see cref="T:System.String" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  等效于包含的值中指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlGuid;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlGuid" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean; overload;
    ///<summary>
    ///  对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示要在存储或从数据库中检索一个 GUID。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlGuid')]
  DNSqlGuid = interface(DDN.mscorlib.DNValueType)
  ['{F0D806DB-2E99-384B-8436-4F44230A9344}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNGuid;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  到字节数组的结构。
    ///</summary>
    ///<returns>
    ///  表示的字节数组 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</returns>
    function ToByteArray: TArray<Byte>;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlBinary" />
    ///  结构，其中包含的字节数 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</returns>
    function ToSqlBinary: DNSqlBinary;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构与所提供的对象并返回对其相对值的指示。
    ///  比较多个最后 6 个字节，但将视为最重要的比较中的最后 6 个字节。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例小于对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  对象为 null 引用 (<see langword="Nothing" />
    ///  )
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  与所提供的结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  并返回对其相对值的指示。
    ///  比较多个最后 6 个字节，但将视为最重要的比较中的最后 6 个字节。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例小于对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  对象为 null 引用 (<see langword="Nothing" />
    ///  )。
    ///</returns>
    function CompareTo(value: DNSqlGuid): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此哈希代码<see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="null" />
    ///  。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Guid" />
    ///  结构。
    ///</returns>
    property Value: DDN.mscorlib.DNGuid read get_Value;
  end;

  TDNSqlGuid = class(TDNGenericImport<DNSqlGuidClass, DNSqlGuid>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt16Class = interface(DDN.mscorlib.DNValueTypeClass)
  ['{3BF5CA4B-7F76-5731-9FD3-C8C0A300D610}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，使用提供的短整型参数。
    ///</summary>
    ///  <param name="value">
    ///  短整数。
    ///</param>
    {class} function init(value: Int16): DNSqlInt16;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt16;
   function __fakeFieldGet_Zero: DNSqlInt16;
   function __fakeFieldGet_MinValue: DNSqlInt16;
   function __fakeFieldGet_MaxValue: DNSqlInt16;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlInt16 read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlInt16 read __fakeFieldGet_Zero;
    ///<summary>
    ///  一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    {class} property MinValue: DNSqlInt16 read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    {class} property MaxValue: DNSqlInt16 read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  为其等效的 16 位有符号整数的数字表示形式。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  包含的值等效的 16 位有符号的整数指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlInt16;
    ///<summary>
    ///  ~ 运算符都将执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含指定的求补 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    {class} function OnesComplement(x: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数。
    ///</returns>
    {class} function Add(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  从第一个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含该减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  包含两个参数的乘积。
    ///</returns>
    {class} function Multiply(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  包含其余部分。
    ///</returns>
    {class} function &Mod(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  值并返回余数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  值。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  值。
    ///</param>
    ///<returns>
    ///  得到的余数后在执行除法运算 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  。
    ///</returns>
    {class} function Modulus(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含结果的按位 and。
    ///</returns>
    {class} function BitwiseAnd(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含位或运算的结果。
    ///</returns>
    {class} function BitwiseOr(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  执行按位异或运算对提供的参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，其中包含异或运算的结果。
    ///</returns>
    {class} function &Xor(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlInt16" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示要存储中或从数据库中检索的 16 位有符号的整数。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlInt16')]
  DNSqlInt16 = interface(DDN.mscorlib.DNValueType)
  ['{20F45935-DA99-3C1C-9580-217119B0F859}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int16;

  { methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  对象，表示 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///  如果值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  小于 0 或大于 255， <see cref="T:System.OverflowException" />
    ///  时发生。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  表示 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  对象为 null 引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlInt16): Int32; overload;
    ///<summary>
    ///  比较指定的对象和 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///  有关详细信息，请参阅处理 Null 值。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取此实例的值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  一个短整型，表示此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    property Value: Int16 read get_Value;
  end;

  TDNSqlInt16 = class(TDNGenericImport<DNSqlInt16Class, DNSqlInt16>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt32Class = interface(DDN.mscorlib.DNValueTypeClass)
  ['{CF5049B8-ABB5-5D6A-A82C-3A5F655687CF}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，使用提供的整数值。
    ///</summary>
    ///  <param name="value">
    ///  要转换的整数。
    ///</param>
    {class} function init(value: Int32): DNSqlInt32;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt32;
   function __fakeFieldGet_Zero: DNSqlInt32;
   function __fakeFieldGet_MinValue: DNSqlInt32;
   function __fakeFieldGet_MaxValue: DNSqlInt32;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  类。
    ///</summary>
    {class} property Null: DNSqlInt32 read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlInt32 read __fakeFieldGet_Zero;
    ///<summary>
    ///  一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    {class} property MinValue: DNSqlInt32 read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    {class} property MaxValue: DNSqlInt32 read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  为其等效的 32 位有符号整数的数字表示形式。
    ///</summary>
    ///  <param name="s"><see cref="T:System.String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  包含的值等效的 32 位有符号的整数指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlInt32;
    ///<summary>
    ///  执行按位二进制反码对指定的运算 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，其中包含求补运算的结果。
    ///</returns>
    {class} function OnesComplement(x: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  属性包含指定的总和 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</returns>
    {class} function Add(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  从第一个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  属性包含该减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  包含两个参数的乘积。
    ///</returns>
    {class} function Multiply(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  从第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  属性包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  包含其余部分。
    ///</returns>
    {class} function &Mod(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  值并返回余数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  值。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  值。
    ///</param>
    ///<returns>
    ///  得到的余数后在执行除法运算 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  。
    ///</returns>
    {class} function Modulus(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，其中包含按位与运算的结果。
    ///</returns>
    {class} function BitwiseAnd(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  计算指定的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，其中包含按位或运算的结果。
    ///</returns>
    {class} function BitwiseOr(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  执行对指定位异或运算 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，其中包含按位异或运算的结果。
    ///</returns>
    {class} function &Xor(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlInt32" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    ///<summary>
    ///  比较两个<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  A<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果任一实例<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    ///<summary>
    ///  比较两个<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  A<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果任一实例<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示要存储中或从数据库中检索的 32 位有符号的整数。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlInt32')]
  DNSqlInt32 = interface(DDN.mscorlib.DNValueType)
  ['{4BDFEF65-38A3-3B4D-A409-223E7AFFA172}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int32;

  { methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  等于 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///  如果值 <see langword="SqlInt32" />
    ///  小于 0 或大于 255， <see cref="T:System.OverflowException" />
    ///  时发生。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlInt32): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构为 null。
    ///</summary>
    ///<returns>
    ///  此属性是 <see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取此值<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  一个整数，表示此值<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  属性包含<see cref="F:System.Data.SqlTypes.SqlInt32.Null" />
    ///  。
    ///</exception>
    property Value: Int32 read get_Value;
  end;

  TDNSqlInt32 = class(TDNGenericImport<DNSqlInt32Class, DNSqlInt32>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt64Class = interface(DDN.mscorlib.DNValueTypeClass)
  ['{12B1DB76-156F-5305-93FE-EE0D0D4FAFE8}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，使用提供的长整型。
    ///</summary>
    ///  <param name="value">
    ///  一个长整型。
    ///</param>
    {class} function init(value: Int64): DNSqlInt64;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt64;
   function __fakeFieldGet_Zero: DNSqlInt64;
   function __fakeFieldGet_MinValue: DNSqlInt64;
   function __fakeFieldGet_MaxValue: DNSqlInt64;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlInt64 read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlInt64 read __fakeFieldGet_Zero;
    ///<summary>
    ///  一个常数，表示的最小可能值为 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</summary>
    {class} property MinValue: DNSqlInt64 read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大可能值为 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</summary>
    {class} property MaxValue: DNSqlInt64 read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  为其等效的 64 位有符号整数的数字表示形式。
    ///</summary>
    ///  <param name="s"><see cref="T:System.String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  包含的值等效的 64 位有符号的整数指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlInt64;
    ///<summary>
    ///  执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  是否等同于的二进制反码 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数。
    ///</returns>
    {class} function OnesComplement(x: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  的参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  等于这两种合计 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数。
    ///</returns>
    {class} function Add(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  从第一个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  属性值等于减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  是否等同于这两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数。
    ///</returns>
    {class} function Multiply(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  属性包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  属性包含其余部分。
    ///</returns>
    {class} function &Mod(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  值并返回余数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  值。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  值。
    ///</param>
    ///<returns>
    ///  得到的余数后在执行除法运算 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  。
    ///</returns>
    {class} function Modulus(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，其中包含按位与运算的结果。
    ///</returns>
    {class} function BitwiseAnd(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，其中包含按位或运算的结果。
    ///</returns>
    {class} function BitwiseOr(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  执行按位异或运算对提供的参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，其中包含按位异或运算的结果。
    ///</returns>
    {class} function &Xor(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数，以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlInt64" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean; overload;
    ///<summary>
    ///  对以确定它们是否不相等的两个 SqlInt64 参数执行逻辑比较。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    ///<summary>
    ///  对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数，以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数，以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    ///<summary>
    ///  对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数，以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示要存储在或从数据库中检索 64 位带符号的整数。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlInt64')]
  DNSqlInt64 = interface(DDN.mscorlib.DNValueType)
  ['{00CBD4D3-846A-301B-B4E5-3C8A0F0F8A22}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int64;

  { methods } 

    ///<summary>
    ///  将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  表示的值的这 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  等于 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  表示的值的这 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing " />
    ///  在 Visual Basic 中)。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</returns>
    function CompareTo(value: DNSqlInt64): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  一个长整型，表示此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</returns>
    property Value: Int64 read get_Value;
  end;

  TDNSqlInt64 = class(TDNGenericImport<DNSqlInt64Class, DNSqlInt64>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlMoneyClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{8BEB8FFC-8B77-5B40-862E-C38062667DEE}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类，具有指定的整数值。
    ///</summary>
    ///  <param name="value">
    ///  要初始化的货币值。
    ///</param>
    {class} function init(value: Int32): DNSqlMoney; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类，具有指定的长整型值。
    ///</summary>
    ///  <param name="value">
    ///  要初始化的货币值。
    ///</param>
    {class} function init(value: Int64): DNSqlMoney; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Decimal" />
    ///  值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="value">
    ///  要初始化的货币值。
    ///</param>
    {class} function init(value: DDN.mscorlib.DNDecimal): DNSqlMoney; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类，具有指定的双精度值。
    ///</summary>
    ///  <param name="value">
    ///  要初始化的货币值。
    ///</param>
    {class} function init(value: Double): DNSqlMoney; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlMoney;
   function __fakeFieldGet_Zero: DNSqlMoney;
   function __fakeFieldGet_MinValue: DNSqlMoney;
   function __fakeFieldGet_MaxValue: DNSqlMoney;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类。
    ///</summary>
    {class} property Null: DNSqlMoney read __fakeFieldGet_Null;
    ///<summary>
    ///  表示零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类。
    ///</summary>
    {class} property Zero: DNSqlMoney read __fakeFieldGet_Zero;
    ///<summary>
    ///  表示可分配给最小值 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类。
    ///</summary>
    {class} property MinValue: DNSqlMoney read __fakeFieldGet_MinValue;
    ///<summary>
    ///  表示可分配给最大值 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类。
    ///</summary>
    {class} property MaxValue: DNSqlMoney read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到数字表示形式及其 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  等效。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  等效于包含的值中指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlMoney;
    ///<summary>
    ///  计算两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  包含两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数。
    ///</returns>
    {class} function Add(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    ///<summary>
    ///  减法运算符中减去第二个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  从第一个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构，其中包含该减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    ///<summary>
    ///  乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  包含相乘的积。
    ///</returns>
    {class} function Multiply(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    ///<summary>
    ///  除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数，以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlMoney" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数，以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    ///<summary>
    ///  对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数执行逻辑比较，以确定第一个参数是否小于第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数，以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    ///<summary>
    ///  对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示货币值，范围从-2 63 （或-922337203685，477.5808） 到 2 63 精度为千分之十个货币单位要存储中或从数据库中检索为-1 （或 + 922337203685，477.5807）。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlMoney')]
  DNSqlMoney = interface(DDN.mscorlib.DNValueType)
  ['{9DE6EE1A-043D-37A7-A54E-A5541A181DEF}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNDecimal;

  { methods } 

    ///<summary>
    ///  将此实例的值转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  作为 <see cref="T:System.Decimal" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Decimal" />
    ///  结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</returns>
    function ToDecimal: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  将此值转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 64 位整数，其值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</returns>
    function ToInt64: Int64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 32 位整数，其值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</returns>
    function ToInt32: Int32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个双精度型值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</returns>
    function ToDouble: Double;
    ///<summary>
    ///  将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为字符串。
    ///</summary>
    ///<returns>
    ///  一个字符串，其值的字符串表示形式的数 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///  如果值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构为零， <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，其值为一个字符串，表示此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlMoney): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns>
    ///  相等比较将返回 <see langword="true" />
    ///  的实例的对象是否 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  返回一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取实例的货币值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  实例的货币值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  该属性设置为 null。
    ///</exception>
    property Value: DDN.mscorlib.DNDecimal read get_Value;
  end;

  TDNSqlMoney = class(TDNGenericImport<DNSqlMoneyClass, DNSqlMoney>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlSingleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{37F2DDC7-3D28-5A2D-A6B9-B1261DE01D9B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构的新实例。
    ///</summary>
    ///  <param name="value">
    ///  浮点数，它将用作 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    {class} function init(value: Single): DNSqlSingle; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，使用提供的双精度型参数。
    ///</summary>
    ///  <param name="value">
    ///  一个双精度值，该值将用作 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    {class} function init(value: Double): DNSqlSingle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlSingle;
   function __fakeFieldGet_Zero: DNSqlSingle;
   function __fakeFieldGet_MinValue: DNSqlSingle;
   function __fakeFieldGet_MaxValue: DNSqlSingle;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlSingle read __fakeFieldGet_Null;
    ///<summary>
    ///  表示零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  类。
    ///</summary>
    {class} property Zero: DNSqlSingle read __fakeFieldGet_Zero;
    ///<summary>
    ///  表示可分配给最小值 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  类。
    ///</summary>
    {class} property MinValue: DNSqlSingle read __fakeFieldGet_MinValue;
    ///<summary>
    ///  表示可分配给最大值 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  类。
    ///</summary>
    {class} property MaxValue: DNSqlSingle read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将指定 <see cref="T:System.String" />
    ///  到 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</summary>
    ///  <param name="s"><see cref="T:System.String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  等效于包含的值中指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlSingle;
    ///<summary>
    ///  计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，其中包含两个指定的总和 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</returns>
    {class} function Add(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    ///<summary>
    ///  值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  从第一个结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，其中包含该减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    ///<summary>
    ///  计算两个指定的积 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，其中包含乘法的乘积。
    ///</returns>
    {class} function Multiply(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    ///<summary>
    ///  将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构的第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see langword="SqlInt64" />
    ///  结构，其中包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  参数，以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlSingle" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  参数，以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    ///<summary>
    ///  对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  参数执行逻辑比较，以确定第一个参数是否小于第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  以确定第一个是否大于第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    ///<summary>
    ///  对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示浮点数，范围在-3.40 e + 38 到 3.40 e + 38 之间要存储中或从数据库中检索。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlSingle')]
  DNSqlSingle = interface(DDN.mscorlib.DNValueType)
  ['{276F2119-1904-3B1B-8463-F19AF694D94A}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Single;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="String" />
    ///  对象，表示此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  等于 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构的值是 <see langword="true" />
    ///  , 、 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的 <see langword="Value" />
    ///  将为 1。
    ///  否则为 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的 <see langword="Value" />
    ///  将为 0。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlDouble " />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlInt16" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlDecimal" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  表示的值的这 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlSingle): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  和两个是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  一个浮点值范围在-3.40 e + 38 到 3.40 e + 38。
    ///</returns>
    property Value: Single read get_Value;
  end;

  TDNSqlSingle = class(TDNGenericImport<DNSqlSingleClass, DNSqlSingle>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlStringClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{16539F8A-13D9-5E3B-AC40-2AC7238A19B8}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，使用指定的字符串和区域设置 id 值。
    ///</summary>
    ///  <param name="data">
    ///  要存储的字符串。
    ///</param>
    ///  <param name="lcid">
    ///  指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    {class} function init(data: string; lcid: Int32): DNSqlString; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，使用指定的字符串。
    ///</summary>
    ///  <param name="data">
    ///  要存储的字符串。
    ///</param>
    {class} function init(data: string): DNSqlString; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlString;
   function __fakeFieldGet_IgnoreCase: Int32;
   function __fakeFieldGet_IgnoreWidth: Int32;
   function __fakeFieldGet_IgnoreNonSpace: Int32;
   function __fakeFieldGet_IgnoreKanaType: Int32;
   function __fakeFieldGet_BinarySort: Int32;
   function __fakeFieldGet_BinarySort2: Int32;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlString read __fakeFieldGet_Null;
    ///<summary>
    ///  指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  比较应忽略大小写。
    ///</summary>
    {class} property IgnoreCase: Int32 read __fakeFieldGet_IgnoreCase;
    ///<summary>
    ///  指定的字符串比较必须忽略字符宽度。
    ///</summary>
    {class} property IgnoreWidth: Int32 read __fakeFieldGet_IgnoreWidth;
    ///<summary>
    ///  指定的字符串比较必须忽略非空格组合字符，如标注字符。
    ///</summary>
    {class} property IgnoreNonSpace: Int32 read __fakeFieldGet_IgnoreNonSpace;
    ///<summary>
    ///  指定的字符串比较必须忽略假名类型。
    ///</summary>
    {class} property IgnoreKanaType: Int32 read __fakeFieldGet_IgnoreKanaType;
    ///<summary>
    ///  指定的排序应基于字符的数字值而不是其字母数字值。
    ///</summary>
    {class} property BinarySort: Int32 read __fakeFieldGet_BinarySort;
    ///<summary>
    ///  指定的排序应基于字符的数字值，而不是其字母数字值。
    ///</summary>
    {class} property BinarySort2: Int32 read __fakeFieldGet_BinarySort2;

  { static methods } 

    ///<summary>
    ///  串联两个指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  ，其中包含新串联的值表示两个内容 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  参数。
    ///</returns>
    {class} function Concat(x: DNSqlString; y: DNSqlString): DNSqlString;
    ///<summary>
    ///  串联两个指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  值以创建一个新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  的串联的值，它是 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  。
    ///</returns>
    {class} function Add(x: DNSqlString; y: DNSqlString): DNSqlString;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  操作数以确定它们是否相等。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlString" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlString; y: DNSqlString): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  操作数以确定它们是否不相等。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  操作数以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以确定第一个是否大于第二个操作数。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个<see cref="T:System.Data.SqlTypes.SqlString" />
    ///  确定第一个是否小于或等于第二个操作数。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  A<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果任一实例<see cref="T:System.Data.SqlTypes.SqlString" />
    ///  为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以确定第一个是否大于或等于第二个操作数。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlString; y: DNSqlString): DNSqlBoolean;

  end;

  ///<summary>
  ///  表示存储在中或从数据库中检索的字符的长度可变的流。
  ///<see cref="T:System.Data.SqlTypes.SqlString" />
  ///  具有不同的基础数据结构从其相应的.NET Framework <see cref="T:System.String" />
  ///  数据类型。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlString')]
  DNSqlString = interface(DDN.mscorlib.DNValueType)
  ['{304E7F9C-A851-379F-A730-C4555C05BF33}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: string;
    function get_LCID: Int32;
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    function get_CompareInfo: DDN.mscorlib.DNCompareInfo;

  { methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  对象传递给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  与此相同的值与 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以 Unicode 格式。
    ///</summary>
    ///<returns>
    ///  一个字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以 Unicode 格式。
    ///</returns>
    function GetUnicodeBytes: TArray<Byte>;
    ///<summary>
    ///  获取字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以 ANSI 格式。
    ///</summary>
    ///<returns>
    ///  一个字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以 ANSI 格式。
    ///</returns>
    function GetNonUnicodeBytes: TArray<Byte>;
    ///<summary>
    ///  会创建一份 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  中所有属性值是与原始对象相同的对象。
    ///</returns>
    function Clone: DNSqlString;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  等于所表示的数 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlDateTime" />
    ///  结构，其中包含由此表示的日期值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlDateTime: DNSqlDateTime;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  ，其中包含此值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  ...
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />
    ///  是 <see langword="Guid" />
    ///  由此 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</returns>
    function ToSqlGuid: DNSqlGuid;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  对象与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</returns>
    function CompareTo(value: DNSqlString): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlString.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns>
    ///  相等比较将返回 <see langword="true" />
    ///  的实例的对象是否 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" />
    ///  是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />
    ///  。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取存储在此字符串 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  用于存储的字符串。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  该字符串的值是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />
    ///  。
    ///</exception>
    property Value: string read get_Value;
    ///<summary>
    ///  指定的地理区域设置和语言 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  中存储的字符串的区域设置 id <see cref="P:System.Data.SqlTypes.SqlString.Value" />
    ///  属性。
    ///</returns>
    property LCID: Int32 read get_LCID;
    ///<summary>
    ///  获取 <see cref="T:System.Globalization.CultureInfo" />
    ///  结构，它表示此有关区域性的信息 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  介绍有关区域性的信息包括区域性、 书写系统，以及所使用的日历，名称此 SqlString 结构的结构，还提供用于常见的操作，如设置日期格式和排序字符串的方法的特定于区域性的对象的访问。
    ///</returns>
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo;
    ///<summary>
    ///  获取 <see cref="T:System.Globalization.CompareInfo" />
    ///  对象，它定义如何为此执行字符串比较 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="CompareInfo" />
    ///  定义此字符串比较的对象 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</returns>
    property CompareInfo: DDN.mscorlib.DNCompareInfo read get_CompareInfo;
  end;

  TDNSqlString = class(TDNGenericImport<DNSqlStringClass, DNSqlString>) end;

  //-------------namespace: System.Drawing----------------
  DNCharacterRangeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A0A5CEDC-68FB-58AB-8D49-C44FE49BC34B}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.CharacterRange" />
    ///  结构，并指定字符串中字符位置的范围。
    ///</summary>
    ///  <param name="First">
    ///  第一个字符的范围内的位置。
    ///  例如，如果 <paramref name="First" />
    ///  设置为 0 时，该范围的第一个位置是在字符串中的位置 0。
    ///</param>
    ///  <param name="Length">
    ///  范围内的位置数。
    ///</param>
    {class} function init(First: Int32; Length: Int32): DNCharacterRange;

  end;

  ///<summary>
  ///  指定字符串中字符位置的范围。
  ///</summary>
  [DNTypeName('System.Drawing.CharacterRange')]
  DNCharacterRange = interface(DDN.mscorlib.DNValueType)
  ['{D26938C9-752E-36A5-8A7F-544485A0DBCA}']
  { getters & setters } 

    function get_First: Int32;
    procedure set_First(value: Int32);
    function get_Length: Int32;
    procedure set_Length(value: Int32);

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示此对象是否等效于指定的对象。
    ///</summary>
    ///  <param name="obj">
    ///  要比较相等的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  指示指定的对象是否具有相同的实例 <see cref="P:System.Drawing.CharacterRange.First" />
    ///  和 <see cref="P:System.Drawing.CharacterRange.Length" />
    ///  值与此实例; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  一个 32 位带符号整数，它是此实例的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置的第一个字符的字符串中的位置 <see cref="T:System.Drawing.CharacterRange" />
    ///  。
    ///</summary>
    ///<returns>
    ///  第一个位置 <see cref="T:System.Drawing.CharacterRange" />
    ///  。
    ///</returns>
    property First: Int32 read get_First write set_First;
    ///<summary>
    ///  获取或设置在此位置数 <see cref="T:System.Drawing.CharacterRange" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在此位置数 <see cref="T:System.Drawing.CharacterRange" />
    ///  。
    ///</returns>
    property Length: Int32 read get_Length write set_Length;
  end;

  TDNCharacterRange = class(TDNGenericImport<DNCharacterRangeClass, DNCharacterRange>) end;

  //-------------namespace: System.Drawing----------------
  DNColorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{F54C08F6-E6CF-5D2A-8BBC-E1387E7CC027}']
  { static getter & setter } 

    {class} function get_Transparent: DNColor;
    {class} function get_AliceBlue: DNColor;
    {class} function get_AntiqueWhite: DNColor;
    {class} function get_Aqua: DNColor;
    {class} function get_Aquamarine: DNColor;
    {class} function get_Azure: DNColor;
    {class} function get_Beige: DNColor;
    {class} function get_Bisque: DNColor;
    {class} function get_Black: DNColor;
    {class} function get_BlanchedAlmond: DNColor;
    {class} function get_Blue: DNColor;
    {class} function get_BlueViolet: DNColor;
    {class} function get_Brown: DNColor;
    {class} function get_BurlyWood: DNColor;
    {class} function get_CadetBlue: DNColor;
    {class} function get_Chartreuse: DNColor;
    {class} function get_Chocolate: DNColor;
    {class} function get_Coral: DNColor;
    {class} function get_CornflowerBlue: DNColor;
    {class} function get_Cornsilk: DNColor;
    {class} function get_Crimson: DNColor;
    {class} function get_Cyan: DNColor;
    {class} function get_DarkBlue: DNColor;
    {class} function get_DarkCyan: DNColor;
    {class} function get_DarkGoldenrod: DNColor;
    {class} function get_DarkGray: DNColor;
    {class} function get_DarkGreen: DNColor;
    {class} function get_DarkKhaki: DNColor;
    {class} function get_DarkMagenta: DNColor;
    {class} function get_DarkOliveGreen: DNColor;
    {class} function get_DarkOrange: DNColor;
    {class} function get_DarkOrchid: DNColor;
    {class} function get_DarkRed: DNColor;
    {class} function get_DarkSalmon: DNColor;
    {class} function get_DarkSeaGreen: DNColor;
    {class} function get_DarkSlateBlue: DNColor;
    {class} function get_DarkSlateGray: DNColor;
    {class} function get_DarkTurquoise: DNColor;
    {class} function get_DarkViolet: DNColor;
    {class} function get_DeepPink: DNColor;
    {class} function get_DeepSkyBlue: DNColor;
    {class} function get_DimGray: DNColor;
    {class} function get_DodgerBlue: DNColor;
    {class} function get_Firebrick: DNColor;
    {class} function get_FloralWhite: DNColor;
    {class} function get_ForestGreen: DNColor;
    {class} function get_Fuchsia: DNColor;
    {class} function get_Gainsboro: DNColor;
    {class} function get_GhostWhite: DNColor;
    {class} function get_Gold: DNColor;
    {class} function get_Goldenrod: DNColor;
    {class} function get_Gray: DNColor;
    {class} function get_Green: DNColor;
    {class} function get_GreenYellow: DNColor;
    {class} function get_Honeydew: DNColor;
    {class} function get_HotPink: DNColor;
    {class} function get_IndianRed: DNColor;
    {class} function get_Indigo: DNColor;
    {class} function get_Ivory: DNColor;
    {class} function get_Khaki: DNColor;
    {class} function get_Lavender: DNColor;
    {class} function get_LavenderBlush: DNColor;
    {class} function get_LawnGreen: DNColor;
    {class} function get_LemonChiffon: DNColor;
    {class} function get_LightBlue: DNColor;
    {class} function get_LightCoral: DNColor;
    {class} function get_LightCyan: DNColor;
    {class} function get_LightGoldenrodYellow: DNColor;
    {class} function get_LightGreen: DNColor;
    {class} function get_LightGray: DNColor;
    {class} function get_LightPink: DNColor;
    {class} function get_LightSalmon: DNColor;
    {class} function get_LightSeaGreen: DNColor;
    {class} function get_LightSkyBlue: DNColor;
    {class} function get_LightSlateGray: DNColor;
    {class} function get_LightSteelBlue: DNColor;
    {class} function get_LightYellow: DNColor;
    {class} function get_Lime: DNColor;
    {class} function get_LimeGreen: DNColor;
    {class} function get_Linen: DNColor;
    {class} function get_Magenta: DNColor;
    {class} function get_Maroon: DNColor;
    {class} function get_MediumAquamarine: DNColor;
    {class} function get_MediumBlue: DNColor;
    {class} function get_MediumOrchid: DNColor;
    {class} function get_MediumPurple: DNColor;
    {class} function get_MediumSeaGreen: DNColor;
    {class} function get_MediumSlateBlue: DNColor;
    {class} function get_MediumSpringGreen: DNColor;
    {class} function get_MediumTurquoise: DNColor;
    {class} function get_MediumVioletRed: DNColor;
    {class} function get_MidnightBlue: DNColor;
    {class} function get_MintCream: DNColor;
    {class} function get_MistyRose: DNColor;
    {class} function get_Moccasin: DNColor;
    {class} function get_NavajoWhite: DNColor;
    {class} function get_Navy: DNColor;
    {class} function get_OldLace: DNColor;
    {class} function get_Olive: DNColor;
    {class} function get_OliveDrab: DNColor;
    {class} function get_Orange: DNColor;
    {class} function get_OrangeRed: DNColor;
    {class} function get_Orchid: DNColor;
    {class} function get_PaleGoldenrod: DNColor;
    {class} function get_PaleGreen: DNColor;
    {class} function get_PaleTurquoise: DNColor;
    {class} function get_PaleVioletRed: DNColor;
    {class} function get_PapayaWhip: DNColor;
    {class} function get_PeachPuff: DNColor;
    {class} function get_Peru: DNColor;
    {class} function get_Pink: DNColor;
    {class} function get_Plum: DNColor;
    {class} function get_PowderBlue: DNColor;
    {class} function get_Purple: DNColor;
    {class} function get_Red: DNColor;
    {class} function get_RosyBrown: DNColor;
    {class} function get_RoyalBlue: DNColor;
    {class} function get_SaddleBrown: DNColor;
    {class} function get_Salmon: DNColor;
    {class} function get_SandyBrown: DNColor;
    {class} function get_SeaGreen: DNColor;
    {class} function get_SeaShell: DNColor;
    {class} function get_Sienna: DNColor;
    {class} function get_Silver: DNColor;
    {class} function get_SkyBlue: DNColor;
    {class} function get_SlateBlue: DNColor;
    {class} function get_SlateGray: DNColor;
    {class} function get_Snow: DNColor;
    {class} function get_SpringGreen: DNColor;
    {class} function get_SteelBlue: DNColor;
    {class} function get_Tan: DNColor;
    {class} function get_Teal: DNColor;
    {class} function get_Thistle: DNColor;
    {class} function get_Tomato: DNColor;
    {class} function get_Turquoise: DNColor;
    {class} function get_Violet: DNColor;
    {class} function get_Wheat: DNColor;
    {class} function get_White: DNColor;
    {class} function get_WhiteSmoke: DNColor;
    {class} function get_Yellow: DNColor;
    {class} function get_YellowGreen: DNColor;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNColor;

  { static fields } 

    ///<summary>
    ///  表示颜色，它是 <see langword="null" />
    ///  。
    ///</summary>
    {class} property Empty: DNColor read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  从 32 位 ARGB 值结构。
    ///</summary>
    ///  <param name="argb">
    ///  指定的 32 位 ARGB 值的值。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Color" />
    ///  此方法创建的结构。
    ///</returns>
    {class} function FromArgb(argb: Int32): DNColor; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  从指定的 8 位颜色值 （红色、 绿色和蓝色） 的结构。
    ///  Alpha 值隐式地为 255 （完全不透明）。
    ///  尽管此方法允许为每个颜色组件传递一个 32 位值，但每个分量的值仅限于 8 位。
    ///</summary>
    ///  <param name="red">
    ///  新的红色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="green">
    ///  新的绿色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="blue">
    ///  新的蓝色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="red" />
    ///  , <paramref name="green" />
    ///  , ，或 <paramref name="blue" />
    ///  小于 0 或大于 255。
    ///</exception>
    {class} function FromArgb(red: Int32; green: Int32; blue: Int32): DNColor; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  从指定的结构预定义颜色。
    ///</summary>
    ///  <param name="color">
    ///  一个元素 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    {class} function FromKnownColor(color: DNKnownColor): DNColor;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  预定义的颜色的指定名称的结构。
    ///</summary>
    ///  <param name="name">
    ///  一个字符串，是一种预定义颜色的名称。
    ///  有效的名称为的元素的名称相同 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    {class} function FromName(name: string): DNColor;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  从四个 ARGB 组件 （alpha、 红色、 绿色和蓝色） 的结构的值。
    ///  尽管此方法允许为每个组件传递一个 32 位值，但每个分量的值仅限于 8 位。
    ///</summary>
    ///  <param name="alpha">
    ///  Alpha 分量。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="red">
    ///  红色组件。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="green">
    ///  绿色的组件。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="blue">
    ///  蓝色组件。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="alpha" />
    ///  , <paramref name="red" />
    ///  , ，<paramref name="green" />
    ///  , ，或 <paramref name="blue" />
    ///  小于 0 或大于 255。
    ///</exception>
    {class} function FromArgb(alpha: Int32; red: Int32; green: Int32; blue: Int32): DNColor; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  从指定的结构 <see cref="T:System.Drawing.Color" />
    ///  结构，但要使用新指定的 alpha 值。
    ///  虽然此方法允许传递的 alpha 值为 32 位值，该值被限制为 8 位。
    ///</summary>
    ///  <param name="alpha">
    ///  新的 alpha 值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="baseColor">
    ///  从中创建新 <see cref="T:System.Drawing.Color" />
    ///  的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="alpha" />
    ///  为小于 0 或大于 255。
    ///</exception>
    {class} function FromArgb(alpha: Int32; baseColor: DNColor): DNColor; overload;

  { static propertys } 

    ///<summary>
    ///  获取系统定义的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Transparent: DNColor read get_Transparent;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF0F8FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property AliceBlue: DNColor read get_AliceBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFAEBD7。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property AntiqueWhite: DNColor read get_AntiqueWhite;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00FFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Aqua: DNColor read get_Aqua;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF7FFFD4。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Aquamarine: DNColor read get_Aquamarine;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF0FFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Azure: DNColor read get_Azure;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF5F5DC。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Beige: DNColor read get_Beige;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFE4C4。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Bisque: DNColor read get_Bisque;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF000000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Black: DNColor read get_Black;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFEBCD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property BlanchedAlmond: DNColor read get_BlanchedAlmond;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF0000FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Blue: DNColor read get_Blue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF8A2BE2。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property BlueViolet: DNColor read get_BlueViolet;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFA52A2A。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Brown: DNColor read get_Brown;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDEB887。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property BurlyWood: DNColor read get_BurlyWood;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF5F9EA0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property CadetBlue: DNColor read get_CadetBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF7FFF00。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Chartreuse: DNColor read get_Chartreuse;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFD2691E。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Chocolate: DNColor read get_Chocolate;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF7F50。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Coral: DNColor read get_Coral;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF6495ED。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property CornflowerBlue: DNColor read get_CornflowerBlue;
    ///<summary>
    ///  获取的 ARGB 值为系统定义的颜色 #FFFFF8DC。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Cornsilk: DNColor read get_Cornsilk;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDC143C。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Crimson: DNColor read get_Crimson;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00FFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Cyan: DNColor read get_Cyan;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00008B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkBlue: DNColor read get_DarkBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF008B8B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkCyan: DNColor read get_DarkCyan;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFB8860B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkGoldenrod: DNColor read get_DarkGoldenrod;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFA9A9A9。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkGray: DNColor read get_DarkGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF006400。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkGreen: DNColor read get_DarkGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFBDB76B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkKhaki: DNColor read get_DarkKhaki;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF8B008B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkMagenta: DNColor read get_DarkMagenta;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF556B2F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkOliveGreen: DNColor read get_DarkOliveGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF8C00。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkOrange: DNColor read get_DarkOrange;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF9932CC。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkOrchid: DNColor read get_DarkOrchid;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF8B0000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkRed: DNColor read get_DarkRed;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFE9967A。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkSalmon: DNColor read get_DarkSalmon;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF8FBC8F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkSeaGreen: DNColor read get_DarkSeaGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF483D8B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkSlateBlue: DNColor read get_DarkSlateBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF2F4F4F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkSlateGray: DNColor read get_DarkSlateGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00CED1。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkTurquoise: DNColor read get_DarkTurquoise;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF9400D3。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkViolet: DNColor read get_DarkViolet;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF1493。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DeepPink: DNColor read get_DeepPink;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00BFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DeepSkyBlue: DNColor read get_DeepSkyBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF696969。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DimGray: DNColor read get_DimGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF1E90FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DodgerBlue: DNColor read get_DodgerBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFB22222。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Firebrick: DNColor read get_Firebrick;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFAF0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property FloralWhite: DNColor read get_FloralWhite;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF228B22。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property ForestGreen: DNColor read get_ForestGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF00FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Fuchsia: DNColor read get_Fuchsia;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDCDCDC。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Gainsboro: DNColor read get_Gainsboro;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF8F8FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property GhostWhite: DNColor read get_GhostWhite;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFD700。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Gold: DNColor read get_Gold;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDAA520。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Goldenrod: DNColor read get_Goldenrod;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF808080。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，表示系统定义的颜色。
    ///</returns>
    {class} property Gray: DNColor read get_Gray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF008000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Green: DNColor read get_Green;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFADFF2F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property GreenYellow: DNColor read get_GreenYellow;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF0FFF0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Honeydew: DNColor read get_Honeydew;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF69B4。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property HotPink: DNColor read get_HotPink;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFCD5C5C。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property IndianRed: DNColor read get_IndianRed;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF4B0082。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Indigo: DNColor read get_Indigo;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFFF0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Ivory: DNColor read get_Ivory;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF0E68C。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Khaki: DNColor read get_Khaki;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFE6E6FA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Lavender: DNColor read get_Lavender;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFF0F5。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LavenderBlush: DNColor read get_LavenderBlush;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF7CFC00。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LawnGreen: DNColor read get_LawnGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFACD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LemonChiffon: DNColor read get_LemonChiffon;
    ///<summary>
    ///  获取具有 ARGB 值的系统定义的颜色#FFADD8E6。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightBlue: DNColor read get_LightBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF08080。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightCoral: DNColor read get_LightCoral;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFE0FFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightCyan: DNColor read get_LightCyan;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFAFAD2。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightGoldenrodYellow: DNColor read get_LightGoldenrodYellow;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF90EE90。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightGreen: DNColor read get_LightGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFD3D3D3。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightGray: DNColor read get_LightGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFB6C1。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightPink: DNColor read get_LightPink;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFA07A。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightSalmon: DNColor read get_LightSalmon;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF20B2AA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightSeaGreen: DNColor read get_LightSeaGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF87CEFA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightSkyBlue: DNColor read get_LightSkyBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF778899。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightSlateGray: DNColor read get_LightSlateGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFB0C4DE。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightSteelBlue: DNColor read get_LightSteelBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFFE0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightYellow: DNColor read get_LightYellow;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00FF00。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Lime: DNColor read get_Lime;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF32CD32。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LimeGreen: DNColor read get_LimeGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFAF0E6。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Linen: DNColor read get_Linen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF00FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Magenta: DNColor read get_Magenta;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF800000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Maroon: DNColor read get_Maroon;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF66CDAA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumAquamarine: DNColor read get_MediumAquamarine;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF0000CD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumBlue: DNColor read get_MediumBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFBA55D3。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumOrchid: DNColor read get_MediumOrchid;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF9370DB。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumPurple: DNColor read get_MediumPurple;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF3CB371。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumSeaGreen: DNColor read get_MediumSeaGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF7B68EE。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumSlateBlue: DNColor read get_MediumSlateBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00FA9A。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumSpringGreen: DNColor read get_MediumSpringGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF48D1CC。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumTurquoise: DNColor read get_MediumTurquoise;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFC71585。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumVioletRed: DNColor read get_MediumVioletRed;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF191970。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MidnightBlue: DNColor read get_MidnightBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF5FFFA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MintCream: DNColor read get_MintCream;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFE4E1。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MistyRose: DNColor read get_MistyRose;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFE4B5。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Moccasin: DNColor read get_Moccasin;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFDEAD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property NavajoWhite: DNColor read get_NavajoWhite;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF000080。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Navy: DNColor read get_Navy;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFDF5E6。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property OldLace: DNColor read get_OldLace;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF808000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Olive: DNColor read get_Olive;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF6B8E23。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property OliveDrab: DNColor read get_OliveDrab;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFA500。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Orange: DNColor read get_Orange;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF4500。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property OrangeRed: DNColor read get_OrangeRed;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDA70D6。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Orchid: DNColor read get_Orchid;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFEEE8AA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PaleGoldenrod: DNColor read get_PaleGoldenrod;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF98FB98。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PaleGreen: DNColor read get_PaleGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFAFEEEE。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PaleTurquoise: DNColor read get_PaleTurquoise;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDB7093。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PaleVioletRed: DNColor read get_PaleVioletRed;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFEFD5。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PapayaWhip: DNColor read get_PapayaWhip;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFDAB9。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PeachPuff: DNColor read get_PeachPuff;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFCD853F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Peru: DNColor read get_Peru;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFC0CB。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Pink: DNColor read get_Pink;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDDA0DD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Plum: DNColor read get_Plum;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFB0E0E6。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PowderBlue: DNColor read get_PowderBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF800080。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Purple: DNColor read get_Purple;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF0000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Red: DNColor read get_Red;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFBC8F8F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property RosyBrown: DNColor read get_RosyBrown;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF4169E1。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property RoyalBlue: DNColor read get_RoyalBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF8B4513。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SaddleBrown: DNColor read get_SaddleBrown;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFA8072。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Salmon: DNColor read get_Salmon;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF4A460。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SandyBrown: DNColor read get_SandyBrown;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF2E8B57。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SeaGreen: DNColor read get_SeaGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFF5EE。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SeaShell: DNColor read get_SeaShell;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFA0522D。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Sienna: DNColor read get_Sienna;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFC0C0C0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Silver: DNColor read get_Silver;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF87CEEB。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SkyBlue: DNColor read get_SkyBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF6A5ACD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SlateBlue: DNColor read get_SlateBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF708090。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SlateGray: DNColor read get_SlateGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFAFA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Snow: DNColor read get_Snow;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00FF7F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SpringGreen: DNColor read get_SpringGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF4682B4。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SteelBlue: DNColor read get_SteelBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFD2B48C。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Tan: DNColor read get_Tan;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF008080。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Teal: DNColor read get_Teal;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFD8BFD8。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Thistle: DNColor read get_Thistle;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF6347。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Tomato: DNColor read get_Tomato;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF40E0D0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Turquoise: DNColor read get_Turquoise;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFEE82EE。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Violet: DNColor read get_Violet;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF5DEB3。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Wheat: DNColor read get_Wheat;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property White: DNColor read get_White;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF5F5F5。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property WhiteSmoke: DNColor read get_WhiteSmoke;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFF00。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Yellow: DNColor read get_Yellow;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF9ACD32。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property YellowGreen: DNColor read get_YellowGreen;
  end;

  ///<summary>
  ///  表示 alpha、 红色、 绿色 (蓝色） 的 ARGB 颜色。
  ///</summary>
  [DNTypeName('System.Drawing.Color')]
  DNColor = interface(DDN.mscorlib.DNValueType)
  ['{173627B3-3CAB-3FF6-8CAB-93E849D6A8A5}']
  { getters & setters } 

    function get_R: Byte;
    function get_G: Byte;
    function get_B: Byte;
    function get_A: Byte;
    function get_IsKnownColor: Boolean;
    function get_IsEmpty: Boolean;
    function get_IsNamedColor: Boolean;
    function get_IsSystemColor: Boolean;
    function get_Name: string;

  { methods } 

    ///<summary>
    ///  获取此的色调-饱和度-亮度 (HSB) 亮度值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此亮度 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  亮度范围介于 0.0 到 1.0，其中 0.0 表示黑，1.0 表示白。
    ///</returns>
    function GetBrightness: Single;
    ///<summary>
    ///  获取的色调-饱和度-亮度 (HSB) 色调值，以度为单位，此 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  色调以度为单位，此 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  色调以度为单位，范围介于 0.0 到 360.0，在 HSB 颜色空间中。
    ///</returns>
    function GetHue: Single;
    ///<summary>
    ///  获取此的色调-饱和度-亮度 (HSB) 饱和度值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此饱和度 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  饱和度介于 0.0 到 1.0，其中 0.0 为灰度，1.0 表示最饱和。
    ///</returns>
    function GetSaturation: Single;
    ///<summary>
    ///  获取此的 32 位 ARGB 值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此 32 位 ARGB 值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    function ToArgb: Int32;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.KnownColor" />
    ///  此值的 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个元素 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举中，如果 <see cref="T:System.Drawing.Color" />
    ///  通过使用创建的预定义的颜色 <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  方法或 <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  方法; 否则为 0。
    ///</returns>
    function ToKnownColor: DNKnownColor;
    ///<summary>
    ///  测试指定的对象是否为 <see cref="T:System.Drawing.Color" />
    ///  结构，并且等效于此 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.Color" />
    ///  结构等效于此 <see cref="T:System.Drawing.Color" />
    ///  结构; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个整数值，指定此哈希代码 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Drawing.Color" />
    ///  用户可读的字符串的结构。
    ///</summary>
    ///<returns>
    ///  此名称的字符串 <see cref="T:System.Drawing.Color" />
    ///  , ，如果 <see cref="T:System.Drawing.Color" />
    ///  通过使用创建的预定义的颜色 <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  方法或 <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  方法; 否则为 ARGB 组件名称和它们的值组成的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此的红色分量值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此的红色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    property R: Byte read get_R;
    ///<summary>
    ///  获取此的绿色分量值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此的绿色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    property G: Byte read get_G;
    ///<summary>
    ///  获取此的蓝色分量值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此的蓝色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    property B: Byte read get_B;
    ///<summary>
    ///  获取此的 alpha 分量值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  This 的 alpha 分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    property A: Byte read get_A;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Drawing.Color" />
    ///  结构是预定义的颜色。
    ///  预定义的颜色表示的元素 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Drawing.Color" />
    ///  已通过使用创建的预定义的颜色 <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  方法或 <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  方法; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsKnownColor: Boolean read get_IsKnownColor;
    ///<summary>
    ///  指定是否这 <see cref="T:System.Drawing.Color" />
    ///  结构未初始化。
    ///</summary>
    ///<returns>
    ///  此属性返回 <see langword="true" />
    ///  该颜色是否未初始化; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Drawing.Color" />
    ///  结构是已命名的颜色或成员的 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Drawing.Color" />
    ///  由使用 <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  方法或 <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  方法; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNamedColor: Boolean read get_IsNamedColor;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Drawing.Color" />
    ///  结构是一种系统颜色。
    ///  系统颜色是一种 Windows 显示元素中使用的颜色。
    ///  系统颜色由元素的 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Drawing.Color" />
    ///  已通过使用创建的系统颜色 <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  方法或 <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  方法; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSystemColor: Boolean read get_IsSystemColor;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Color" />
    ///  的名称。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Color" />
    ///  的名称。
    ///</returns>
    property Name: string read get_Name;
  end;

  TDNColor = class(TDNGenericImport<DNColorClass, DNColor>) end;

  //-------------namespace: System.Drawing----------------
  DNPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B23E3AA6-C68F-573E-8FD5-A8150E5D4997}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Point" />
    ///  类的指定坐标。
    ///</summary>
    ///  <param name="x">
    ///  点的水平位置。
    ///</param>
    ///  <param name="y">
    ///  点的垂直位置。
    ///</param>
    {class} function init(x: Int32; y: Int32): DNPoint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Point" />
    ///  类 <see cref="T:System.Drawing.Size" />
    ///  。
    ///</summary>
    ///  <param name="sz">
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  新指定的坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    {class} function init(sz: DNSize): DNPoint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Point" />
    ///  类使用的整数值所指定的坐标。
    ///</summary>
    ///  <param name="dw">
    ///  一个 32 位整数，它指定为新的坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    {class} function init(dw: Int32): DNPoint; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPoint;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Point" />
    ///  具有 <see cref="P:System.Drawing.Point.X" />
    ///  和 <see cref="P:System.Drawing.Point.Y" />
    ///  值设置为零。
    ///</summary>
    {class} property Empty: DNPoint read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Drawing.Size" />
    ///  到指定 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///  <param name="pt">
    ///  要添加的 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.Size" />
    ///  添加
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  即加法运算的结果。
    ///</returns>
    {class} function Add(pt: DNPoint; sz: DNSize): DNPoint;
    ///<summary>
    ///  返回的结果中减去指定 <see cref="T:System.Drawing.Size" />
    ///  从指定 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.Point" />
    ///  被减数。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.Size" />
    ///  要从中减去 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  它是减法运算的结果。
    ///</returns>
    {class} function Subtract(pt: DNPoint; sz: DNSize): DNPoint;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.PointF" />
    ///  到 <see cref="T:System.Drawing.Point" />
    ///  通过舍入的值 <see cref="T:System.Drawing.PointF" />
    ///  到下一个较大的整数值。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  此方法将转换为。
    ///</returns>
    {class} function Ceiling(value: DNPointF): DNPoint;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.PointF" />
    ///  到 <see cref="T:System.Drawing.Point" />
    ///  通过截断的值 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  此方法将转换为。
    ///</returns>
    {class} function Truncate(value: DNPointF): DNPoint;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.PointF" />
    ///  到 <see cref="T:System.Drawing.Point" />
    ///  通过舍入的对象 <see cref="T:System.Drawing.Point" />
    ///  值到最接近的整数。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  此方法将转换为。
    ///</returns>
    {class} function Round(value: DNPointF): DNPoint;

  end;

  ///<summary>
  ///  表示的整数 x 坐标和 y 坐标点定义在二维平面中的有序的对。
  ///</summary>
  [DNTypeName('System.Drawing.Point')]
  DNPoint = interface(DDN.mscorlib.DNValueType)
  ['{CD6CB0A8-D6EF-33E8-888E-FE8C78CA568F}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    ///<summary>
    ///  指定是否这 <see cref="T:System.Drawing.Point" />
    ///  包含与指定相同的坐标 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.Point" />
    ///  并且具有与此相同的坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个整数值，指定此哈希值 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  按指定量平移此 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///  <param name="dx">
    ///  x 坐标的偏移量。
    ///</param>
    ///  <param name="dy">
    ///  y 坐标的偏移量。
    ///</param>
    procedure Offset(dx: Int32; dy: Int32); overload;
    ///<summary>
    ///  会将其转换 <see cref="T:System.Drawing.Point" />
    ///  由指定 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///  <param name="p"><see cref="T:System.Drawing.Point" />
    ///  使用偏移量这 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    procedure Offset(p: DNPoint); overload;
    ///<summary>
    ///  将此转换 <see cref="T:System.Drawing.Point" />
    ///  到用户可读字符串。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.Point" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Point" />
    ///  是否为空。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果两个 <see cref="P:System.Drawing.Point.X" />
    ///  和 <see cref="P:System.Drawing.Point.Y" />
    ///  0; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置此的 x 坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此的 x 坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  获取或设置此的 y 坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此的 y 坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</returns>
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: System.Drawing----------------
  DNPointFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{68F24B46-D3A6-59B7-BF29-00901DF2B211}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.PointF" />
    ///  类的指定坐标。
    ///</summary>
    ///  <param name="x">
    ///  点的水平位置。
    ///</param>
    ///  <param name="y">
    ///  点的垂直位置。
    ///</param>
    {class} function init(x: Single; y: Single): DNPointF;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPointF;

  { static fields } 

    ///<summary>
    ///  表示的新实例 <see cref="T:System.Drawing.PointF" />
    ///  类的成员数据未被初始化。
    ///</summary>
    {class} property Empty: DNPointF read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  将转换给定 <see cref="T:System.Drawing.PointF" />
    ///  由指定 <see cref="T:System.Drawing.Size" />
    ///  。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.PointF" />
    ///  转换。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.Size" />
    ///  ，它指定要添加到的坐标的数字 <paramref name="pt" />
    ///  。
    ///</param>
    ///<returns>
    ///  经过平移 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    {class} function Add(pt: DNPointF; sz: DNSize): DNPointF; overload;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.PointF" />
    ///  按指定大小的负值。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.PointF" />
    ///  转换。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.Size" />
    ///  ，它指定要从中的坐标减去的数字 <paramref name="pt" />
    ///  。
    ///</param>
    ///<returns>
    ///  经过平移 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    {class} function Subtract(pt: DNPointF; sz: DNSize): DNPointF; overload;
    ///<summary>
    ///  将转换给定 <see cref="T:System.Drawing.PointF" />
    ///  由指定 <see cref="T:System.Drawing.SizeF" />
    ///  。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.PointF" />
    ///  转换。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.SizeF" />
    ///  ，它指定要添加到的坐标的数字 <paramref name="pt" />
    ///  。
    ///</param>
    ///<returns>
    ///  经过平移 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    {class} function Add(pt: DNPointF; sz: DNSizeF): DNPointF; overload;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.PointF" />
    ///  按指定大小的负值。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.PointF" />
    ///  转换。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.SizeF" />
    ///  ，它指定要从中的坐标减去的数字 <paramref name="pt" />
    ///  。
    ///</param>
    ///<returns>
    ///  经过平移 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    {class} function Subtract(pt: DNPointF; sz: DNSizeF): DNPointF; overload;

  end;

  ///<summary>
  ///  表示的浮点 x 坐标和 y 坐标点定义在二维平面中的有序的对。
  ///</summary>
  [DNTypeName('System.Drawing.PointF')]
  DNPointF = interface(DDN.mscorlib.DNValueType)
  ['{A521101D-A776-3125-B530-67030F2E0A21}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);

  { methods } 

    ///<summary>
    ///  指定是否这 <see cref="T:System.Drawing.PointF" />
    ///  包含与指定相同的坐标 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.PointF" />
    ///  并且具有与此相同的坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个整数值，指定此哈希值 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Drawing.PointF" />
    ///  到可读字符串。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.PointF" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.PointF" />
    ///  是否为空。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果两个 <see cref="P:System.Drawing.PointF.X" />
    ///  和 <see cref="P:System.Drawing.PointF.Y" />
    ///  0; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置此的 x 坐标 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此的 x 坐标 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  获取或设置此的 y 坐标 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此的 y 坐标 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    property Y: Single read get_Y write set_Y;
  end;

  TDNPointF = class(TDNGenericImport<DNPointFClass, DNPointF>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{24950A89-FDF4-51EA-80AD-37BF2A502082}']
  { constructors } 

    ///<summary>
    ///  用指定的位置和大小初始化 <see cref="T:System.Drawing.Rectangle" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="x">
    ///  矩形左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  矩形左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  矩形的高度。
    ///</param>
    {class} function init(x: Int32; y: Int32; width: Int32; height: Int32): DNRectangle; overload;
    ///<summary>
    ///  用指定的位置和大小初始化 <see cref="T:System.Drawing.Rectangle" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="location"><see cref="T:System.Drawing.Point" />
    ///  ，它表示矩形区域的左上角。
    ///</param>
    ///  <param name="size"><see cref="T:System.Drawing.Size" />
    ///  ，它表示矩形区域的宽度和高度。
    ///</param>
    {class} function init(location: DNPoint; size: DNSize): DNRectangle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangle;

  { static fields } 

    ///<summary>
    ///  表示其属性未被初始化的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    {class} property Empty: DNRectangle read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  创建一个具有指定边缘位置的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="left">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 x 坐标。
    ///</param>
    ///  <param name="top">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 y 坐标。
    ///</param>
    ///  <param name="right">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构右下角的 x 坐标。
    ///</param>
    ///  <param name="bottom">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构右下角的 y 坐标。
    ///</param>
    ///<returns>
    ///  此方法创建的新 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</returns>
    {class} function FromLTRB(left: Int32; top: Int32; right: Int32; bottom: Int32): DNRectangle;
    ///<summary>
    ///  通过截断 <see cref="T:System.Drawing.RectangleF" />
    ///  值，将指定的 <see cref="T:System.Drawing.RectangleF" />
    ///  转换为 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Rectangle" />
    ///  的截断值。
    ///</returns>
    {class} function Truncate(value: DNRectangleF): DNRectangle;
    ///<summary>
    ///  返回第三个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示其他两个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的交集。
    ///  如果没有重叠，将返回空的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</summary>
    ///  <param name="a">
    ///  要相交的矩形。
    ///</param>
    ///  <param name="b">
    ///  要相交的矩形。
    ///</param>
    ///<returns>
    ///  表示 <paramref name="a" />
    ///  和 <paramref name="b" />
    ///  的交集的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</returns>
    {class} function Intersect(a: DNRectangle; b: DNRectangle): DNRectangle; overload;
    ///<summary>
    ///  获取包含两个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的交集的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="a">
    ///  要合并的矩形。
    ///</param>
    ///  <param name="b">
    ///  要合并的矩形。
    ///</param>
    ///<returns>
    ///  包含两个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的交集的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</returns>
    {class} function Union(a: DNRectangle; b: DNRectangle): DNRectangle;
    ///<summary>
    ///  通过将 <see cref="T:System.Drawing.RectangleF" />
    ///  值舍入到比它大的相邻整数值，将指定的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构转换为 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</returns>
    {class} function Ceiling(value: DNRectangleF): DNRectangle;
    ///<summary>
    ///  通过将 <see cref="T:System.Drawing.RectangleF" />
    ///  舍入到最近的整数值，将指定的 <see cref="T:System.Drawing.RectangleF" />
    ///  转换为 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Rectangle" />
    ///  的四舍五入整数值。
    ///</returns>
    {class} function Round(value: DNRectangleF): DNRectangle;
    ///<summary>
    ///  创建并返回指定 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的放大副本。
    ///  该副本被放大指定的量。
    ///  不修改原始 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="rect">
    ///  要从其开始操作的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///  不修改此矩形。
    ///</param>
    ///  <param name="x">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的水平放大量。
    ///</param>
    ///  <param name="y">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的垂直放大量。
    ///</param>
    ///<returns>
    ///  放大的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</returns>
    {class} function Inflate(rect: DNRectangle; x: Int32; y: Int32): DNRectangle; overload;

  end;

  ///<summary>
  ///  存储一组整数，共四个，表示一个矩形的位置和大小
  ///</summary>
  [DNTypeName('System.Drawing.Rectangle')]
  DNRectangle = interface(DDN.mscorlib.DNValueType)
  ['{548BBB02-5F3C-35FB-A75F-1FBD3D0D3584}']
  { getters & setters } 

    function get_Location: DNPoint;
    procedure set_Location(value: DNPoint);
    function get_Size: DNSize;
    procedure set_Size(value: DNSize);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Left: Int32;
    function get_Top: Int32;
    function get_Right: Int32;
    function get_Bottom: Int32;
    function get_IsEmpty: Boolean;

  { methods } 

    ///<summary>
    ///  确定指定的点是否包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构内。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  定义的点包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构中，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(x: Int32; y: Int32): Boolean; overload;
    ///<summary>
    ///  确定指定的点是否包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构内。
    ///</summary>
    ///  <param name="pt">
    ///  要测试的 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="pt" />
    ///  表示的点包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构中，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(pt: DNPoint): Boolean; overload;
    ///<summary>
    ///  确定 <paramref name="rect" />
    ///  表示的矩形区域是否完全包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构内。
    ///</summary>
    ///  <param name="rect">
    ///  要测试的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="rect" />
    ///  表示的矩形区域完全包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构内，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(rect: DNRectangle): Boolean; overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Rectangle" />
    ///  放大指定量。
    ///</summary>
    ///  <param name="width">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的水平放大量。
    ///</param>
    ///  <param name="height">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的垂直放大量。
    ///</param>
    procedure Inflate(width: Int32; height: Int32); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Rectangle" />
    ///  替换为其自身与指定 <see cref="T:System.Drawing.Rectangle" />
    ///  的交集。
    ///</summary>
    ///  <param name="rect">
    ///  用其进行相交操作的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</param>
    procedure Intersect(rect: DNRectangle); overload;
    ///<summary>
    ///  确定此矩形是否与 <paramref name="rect" />
    ///  相交。
    ///</summary>
    ///  <param name="rect">
    ///  要测试的矩形。
    ///</param>
    ///<returns>
    ///  如果有重叠，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function IntersectsWith(rect: DNRectangle): Boolean;
    ///<summary>
    ///  测试 <paramref name="obj" />
    ///  是否为与此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构具有相同位置和大小的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，并且其 <see cref="P:System.Drawing.Rectangle.X" />
    ///  、<see cref="P:System.Drawing.Rectangle.Y" />
    ///  、<see cref="P:System.Drawing.Rectangle.Width" />
    ///  和 <see cref="P:System.Drawing.Rectangle.Height" />
    ///  属性与此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的对应属性相等，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的哈希代码。
    ///  有关如何使用哈希代码的信息，请参见 <see cref="M:System.Object.GetHashCode" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个整数，表示此矩形的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Rectangle" />
    ///  放大指定量。
    ///</summary>
    ///  <param name="size">
    ///  此矩形的放大量。
    ///</param>
    procedure Inflate(size: DNSize); overload;
    ///<summary>
    ///  将此矩形的位置调整指定的量。
    ///</summary>
    ///  <param name="pos">
    ///  该位置的偏移量。
    ///</param>
    procedure Offset(pos: DNPoint); overload;
    ///<summary>
    ///  将此矩形的位置调整指定的量。
    ///</summary>
    ///  <param name="x">
    ///  水平偏移量。
    ///</param>
    ///  <param name="y">
    ///  垂直偏移量。
    ///</param>
    procedure Offset(x: Int32; y: Int32); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Rectangle" />
    ///  的特性转换为可读字符串。
    ///</summary>
    ///<returns>
    ///  一个包含此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构 ¾ 的位置、宽度和高度的字符串，例如 {X=20, Y=20, Width=100, Height=50}
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的坐标。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  ，它表示此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的左上角。
    ///</returns>
    property Location: DNPoint read get_Location write set_Location;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  的大小。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  ，它表示此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的宽度和高度。
    ///</returns>
    property Size: DNSize read get_Size write set_Size;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 x 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 x 坐标。
    ///  默认值为 0。
    ///</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 y 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 y 坐标。
    ///  默认值为 0。
    ///</returns>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的宽度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的宽度。
    ///  默认值为 0。
    ///</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的高度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的高度。
    ///  默认值为 0。
    ///</returns>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左边缘的 x 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左边缘的 x 坐标。
    ///</returns>
    property Left: Int32 read get_Left;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构上边缘的 y 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构上边缘的 y 坐标。
    ///</returns>
    property Top: Int32 read get_Top;
    ///<summary>
    ///  获取 x 坐标，该坐标是此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的 <see cref="P:System.Drawing.Rectangle.X" />
    ///  与 <see cref="P:System.Drawing.Rectangle.Width" />
    ///  属性值之和。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的 <see cref="P:System.Drawing.Rectangle.X" />
    ///  与 <see cref="P:System.Drawing.Rectangle.Width" />
    ///  之和的 x 坐标。
    ///</returns>
    property Right: Int32 read get_Right;
    ///<summary>
    ///  获取 y 坐标，该坐标是此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的 <see cref="P:System.Drawing.Rectangle.Y" />
    ///  与 <see cref="P:System.Drawing.Rectangle.Height" />
    ///  属性值之和。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的 <see cref="P:System.Drawing.Rectangle.Y" />
    ///  与 <see cref="P:System.Drawing.Rectangle.Height" />
    ///  之和的 y 坐标。
    ///</returns>
    property Bottom: Int32 read get_Bottom;
    ///<summary>
    ///  测试此 <see cref="T:System.Drawing.Rectangle" />
    ///  的所有数值属性是否都具有零值。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Rectangle" />
    ///  的 <see cref="P:System.Drawing.Rectangle.Width" />
    ///  、<see cref="P:System.Drawing.Rectangle.Height" />
    ///  、<see cref="P:System.Drawing.Rectangle.X" />
    ///  和 <see cref="P:System.Drawing.Rectangle.Y" />
    ///  属性都具有零值，此属性将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNRectangle = class(TDNGenericImport<DNRectangleClass, DNRectangle>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{93812BD6-FBF9-555C-B730-A20DE51F8701}']
  { constructors } 

    ///<summary>
    ///  用指定的位置和大小初始化 <see cref="T:System.Drawing.RectangleF" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="x">
    ///  矩形左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  矩形左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  矩形的高度。
    ///</param>
    {class} function init(x: Single; y: Single; width: Single; height: Single): DNRectangleF; overload;
    ///<summary>
    ///  用指定的位置和大小初始化 <see cref="T:System.Drawing.RectangleF" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="location"><see cref="T:System.Drawing.PointF" />
    ///  ，它表示矩形区域的左上角。
    ///</param>
    ///  <param name="size"><see cref="T:System.Drawing.SizeF" />
    ///  ，它表示矩形区域的宽度和高度。
    ///</param>
    {class} function init(location: DNPointF; size: DNSizeF): DNRectangleF; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangleF;

  { static fields } 

    ///<summary>
    ///  表示实例 <see cref="T:System.Drawing.RectangleF" />
    ///  未初始化其成员的类。
    ///</summary>
    {class} property Empty: DNRectangleF read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  创建可以包含两个形成并集的两个矩形的最小可能第三个矩形。
    ///</summary>
    ///  <param name="a">
    ///  要合并的矩形。
    ///</param>
    ///  <param name="b">
    ///  要合并的矩形。
    ///</param>
    ///<returns>
    ///  第三个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，其中包含这两个形成并集的两个矩形。
    ///</returns>
    {class} function Union(a: DNRectangleF; b: DNRectangleF): DNRectangleF;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.RectangleF" />
    ///  结构具有窗口左上角和右下角位于指定位置。
    ///</summary>
    ///  <param name="left">
    ///  该矩形区域的左上角 x 坐标。
    ///</param>
    ///  <param name="top">
    ///  该矩形区域的左上角 y 坐标。
    ///</param>
    ///  <param name="right">
    ///  该矩形区域的右下角 x 坐标。
    ///</param>
    ///  <param name="bottom">
    ///  该矩形区域的右下角 y 坐标。
    ///</param>
    ///<returns>
    ///  此方法创建的新 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</returns>
    {class} function FromLTRB(left: Single; top: Single; right: Single; bottom: Single): DNRectangleF;
    ///<summary>
    ///  创建并返回指定 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的放大副本。
    ///  该副本被放大指定量并不修改原始矩形。
    ///</summary>
    ///  <param name="rect">
    ///  要复制的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///  不修改此矩形。
    ///</param>
    ///  <param name="x">
    ///  水平副本的矩形的放大量。
    ///</param>
    ///  <param name="y">
    ///  副本的矩形垂直放大量。
    ///</param>
    ///<returns>
    ///  放大的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</returns>
    {class} function Inflate(rect: DNRectangleF; x: Single; y: Single): DNRectangleF; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示两个矩形交集。
    ///  如果没有重叠和空 <see cref="T:System.Drawing.RectangleF" />
    ///  返回。
    ///</summary>
    ///  <param name="a">
    ///  要相交的矩形。
    ///</param>
    ///  <param name="b">
    ///  要相交的矩形。
    ///</param>
    ///<returns>
    ///  第三个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的大小表示两个指定的矩形的重叠的区域。
    ///</returns>
    {class} function Intersect(a: DNRectangleF; b: DNRectangleF): DNRectangleF; overload;

  end;

  ///<summary>
  ///  存储一组表示位置的四个浮点数字和矩形的大小。
  ///  对于更高级的区域函数，请使用 <see cref="T:System.Drawing.Region" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.RectangleF')]
  DNRectangleF = interface(DDN.mscorlib.DNValueType)
  ['{A5567232-D740-3F7B-BBC9-D2F5B3EB90CB}']
  { getters & setters } 

    function get_Location: DNPointF;
    procedure set_Location(value: DNPointF);
    function get_Size: DNSizeF;
    procedure set_Size(value: DNSizeF);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Left: Single;
    function get_Top: Single;
    function get_Right: Single;
    function get_Bottom: Single;
    function get_IsEmpty: Boolean;

  { methods } 

    ///<summary>
    ///  这将放大 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的量。
    ///</summary>
    ///  <param name="x">
    ///  这样的放大量 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的水平。
    ///</param>
    ///  <param name="y">
    ///  这样的放大量 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的垂直。
    ///</param>
    procedure Inflate(x: Single; y: Single); overload;
    ///<summary>
    ///  测试是否 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.RectangleF" />
    ///  具有相同的位置和大小的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.RectangleF" />
    ///  并将其 <see langword="X" />
    ///  , ，<see langword="Y" />
    ///  , ，<see langword="Width" />
    ///  , ，和 <see langword="Height" />
    ///  的对应属性相等 <see cref="T:System.Drawing.RectangleF" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  确定指定的点是否包含在此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构内。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  定义的点包含在此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构中，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(x: Single; y: Single): Boolean; overload;
    ///<summary>
    ///  确定指定的点是否包含在此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构内。
    ///</summary>
    ///  <param name="pt">
    ///  要测试的 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果表示的点 <paramref name="pt" />
    ///  参数包含在此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(pt: DNPointF): Boolean; overload;
    ///<summary>
    ///  确定 <paramref name="rect" />
    ///  表示的矩形区域是否完全包含在此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构内。
    ///</summary>
    ///  <param name="rect">
    ///  要测试的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果表示矩形区域 <paramref name="rect" />
    ///  所表示的矩形区域范围内完全包含 <see cref="T:System.Drawing.RectangleF" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(rect: DNRectangleF): Boolean; overload;
    ///<summary>
    ///  获取此哈希代码 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///  有关使用哈希代码的信息，请参阅 <see langword="Object.GetHashCode" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.RectangleF" />
    ///  放大指定量。
    ///</summary>
    ///  <param name="size">
    ///  此矩形的放大量。
    ///</param>
    procedure Inflate(size: DNSizeF); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构替换为其自身与指定的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的交集。
    ///</summary>
    ///  <param name="rect">
    ///  要相交的矩形。
    ///</param>
    procedure Intersect(rect: DNRectangleF); overload;
    ///<summary>
    ///  确定此矩形是否与 <paramref name="rect" />
    ///  相交。
    ///</summary>
    ///  <param name="rect">
    ///  要测试的矩形。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果重叠。
    ///</returns>
    function IntersectsWith(rect: DNRectangleF): Boolean;
    ///<summary>
    ///  将此矩形的位置调整指定的量。
    ///</summary>
    ///  <param name="pos">
    ///  该位置的偏移量。
    ///</param>
    procedure Offset(pos: DNPointF); overload;
    ///<summary>
    ///  将此矩形的位置调整指定的量。
    ///</summary>
    ///  <param name="x">
    ///  该位置的水平偏移量。
    ///</param>
    ///  <param name="y">
    ///  该位置的垂直偏移量。
    ///</param>
    procedure Offset(x: Single; y: Single); overload;
    ///<summary>
    ///  将转换 <see langword="Location" />
    ///  和 <see cref="T:System.Drawing.Size" />
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  到用户可读字符串。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含位置、 宽度和高度这 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///  例如，"{X = 20，Y = 20，Width = 100，Height = 50}"。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左上角的坐标。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.PointF" />
    ///  ，它表示此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的左上角。
    ///</returns>
    property Location: DNPointF read get_Location write set_Location;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  的大小。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.SizeF" />
    ///  ，它表示此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的宽度和高度。
    ///</returns>
    property Size: DNSizeF read get_Size write set_Size;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左上角的 x 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左上角的 x 坐标。
    ///  默认值为 0。
    ///</returns>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左上角的 y 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左上角的 y 坐标。
    ///  默认值为 0。
    ///</returns>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的宽度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的宽度。
    ///  默认值为 0。
    ///</returns>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的高度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的高度。
    ///  默认值为 0。
    ///</returns>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左边缘的 x 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左边缘的 x 坐标。
    ///</returns>
    property Left: Single read get_Left;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构上边缘的 y 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构上边缘的 y 坐标。
    ///</returns>
    property Top: Single read get_Top;
    ///<summary>
    ///  获取是之和的 x 坐标 <see cref="P:System.Drawing.RectangleF.X" />
    ///  和 <see cref="P:System.Drawing.RectangleF.Width" />
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  之和的 x 坐标 <see cref="P:System.Drawing.RectangleF.X" />
    ///  和 <see cref="P:System.Drawing.RectangleF.Width" />
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</returns>
    property Right: Single read get_Right;
    ///<summary>
    ///  获取是之和的 y 坐标 <see cref="P:System.Drawing.RectangleF.Y" />
    ///  和 <see cref="P:System.Drawing.RectangleF.Height" />
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  之和的 y 坐标 <see cref="P:System.Drawing.RectangleF.Y" />
    ///  和 <see cref="P:System.Drawing.RectangleF.Height" />
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</returns>
    property Bottom: Single read get_Bottom;
    ///<summary>
    ///  测试是否 <see cref="P:System.Drawing.RectangleF.Width" />
    ///  或 <see cref="P:System.Drawing.RectangleF.Height" />
    ///  属性 <see cref="T:System.Drawing.RectangleF" />
    ///  值为零。
    ///</summary>
    ///<returns>
    ///  此属性返回 <see langword="true" />
    ///  如果 <see cref="P:System.Drawing.RectangleF.Width" />
    ///  或 <see cref="P:System.Drawing.RectangleF.Height" />
    ///  属性 <see cref="T:System.Drawing.RectangleF" />
    ///  值为零; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNRectangleF = class(TDNGenericImport<DNRectangleFClass, DNRectangleF>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{156B7BC2-8B4A-54A9-9F29-1BBCFEFCB428}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Size" />
    ///  从指定的结构 <see cref="T:System.Drawing.Point" />
    ///  结构。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.Point" />
    ///  结构，可用于初始化此 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</param>
    {class} function init(pt: DNPoint): DNSize; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Size" />
    ///  根据指定的维度的结构。
    ///</summary>
    ///  <param name="width">
    ///  新的宽度分量 <see cref="T:System.Drawing.Size" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  新的高度分量 <see cref="T:System.Drawing.Size" />
    ///  。
    ///</param>
    {class} function init(width: Int32; height: Int32): DNSize; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSize;

  { static fields } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Size" />
    ///  结构具有 <see cref="P:System.Drawing.Size.Height" />
    ///  和 <see cref="P:System.Drawing.Size.Width" />
    ///  值为 0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  具有 <see cref="P:System.Drawing.Size.Height" />
    ///  和 <see cref="P:System.Drawing.Size.Width" />
    ///  值为 0。
    ///</returns>
    {class} property Empty: DNSize read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  添加的宽度和高度的其中一个 <see cref="T:System.Drawing.Size" />
    ///  结构的宽度和高度与另一个 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///  <param name="sz1">
    ///  第一个 <see cref="T:System.Drawing.Size" />
    ///  可添加结构。
    ///</param>
    ///  <param name="sz2">
    ///  第二个 <see cref="T:System.Drawing.Size" />
    ///  可添加结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  结构，它是加法运算的结果。
    ///</returns>
    {class} function Add(sz1: DNSize; sz2: DNSize): DNSize;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.SizeF" />
    ///  结构 <see cref="T:System.Drawing.Size" />
    ///  按舍入的值显示结构 <see cref="T:System.Drawing.Size" />
    ///  到下一个较大的整数值的结构。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Drawing.SizeF" />
    ///  要转换的结构。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  此方法将转换为结构。
    ///</returns>
    {class} function Ceiling(value: DNSizeF): DNSize;
    ///<summary>
    ///  减去的宽度和高度的其中一个 <see cref="T:System.Drawing.Size" />
    ///  从宽度和高度与另一个结构 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///  <param name="sz1"><see cref="T:System.Drawing.Size" />
    ///  减法运算符左侧的结构。
    ///</param>
    ///  <param name="sz2"><see cref="T:System.Drawing.Size" />
    ///  减法运算符右侧的结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  结构，它是减法运算的结果。
    ///</returns>
    {class} function Subtract(sz1: DNSize; sz2: DNSize): DNSize;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.SizeF" />
    ///  结构 <see cref="T:System.Drawing.Size" />
    ///  通过截断的值的结构 <see cref="T:System.Drawing.SizeF" />
    ///  到下一个较低的整数值的结构。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Drawing.SizeF" />
    ///  要转换的结构。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  此方法将转换为结构。
    ///</returns>
    {class} function Truncate(value: DNSizeF): DNSize;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.SizeF" />
    ///  结构 <see cref="T:System.Drawing.Size" />
    ///  按舍入的值显示结构 <see cref="T:System.Drawing.SizeF" />
    ///  到最接近的整数值的结构。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Drawing.SizeF" />
    ///  要转换的结构。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  此方法将转换为结构。
    ///</returns>
    {class} function Round(value: DNSizeF): DNSize;

  end;

  ///<summary>
  ///  存储的整数，指定一个有序的对 <see cref="P:System.Drawing.Size.Height" />
  ///  和 <see cref="P:System.Drawing.Size.Width" />
  ///  。
  ///</summary>
  [DNTypeName('System.Drawing.Size')]
  DNSize = interface(DDN.mscorlib.DNValueType)
  ['{ECD5EB7F-1CD0-3F82-9997-5E4C9AB9F326}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);

  { methods } 

    ///<summary>
    ///  测试以确定指定的对象是否为 <see cref="T:System.Drawing.Size" />
    ///  具有与此相同的维度的结构 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.Size" />
    ///  具有相同的宽度和高度与此 <see cref="T:System.Drawing.Size" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个整数值，指定此哈希值 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  创建一个用户可读的字符串，表示此 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.Size" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  测试是否这 <see cref="T:System.Drawing.Size" />
    ///  结构的宽度和高度均为 0。
    ///</summary>
    ///<returns>
    ///  此属性返回 <see langword="true" />
    ///  时这 <see cref="T:System.Drawing.Size" />
    ///  结构的宽度和高度均为 0; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置此水平组件<see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此水平组件<see cref="T:System.Drawing.Size" />
    ///  结构，通常以像素度量。
    ///</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  获取或设置的垂直分量 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  垂直分量 <see cref="T:System.Drawing.Size" />
    ///  结构，通常以像素为单位进行度量。
    ///</returns>
    property Height: Int32 read get_Height write set_Height;
  end;

  TDNSize = class(TDNGenericImport<DNSizeClass, DNSize>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{889E69F7-7C5F-5D31-9A96-7A897B044864}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.SizeF" />
    ///  从指定的现有结构 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///  <param name="size"><see cref="T:System.Drawing.SizeF" />
    ///  从中创建新的结构 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</param>
    {class} function init(size: DNSizeF): DNSizeF; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.SizeF" />
    ///  从指定的结构 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.PointF" />
    ///  结构，可用于初始化此 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</param>
    {class} function init(pt: DNPointF): DNSizeF; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.SizeF" />
    ///  根据指定的维度的结构。
    ///</summary>
    ///  <param name="width">
    ///  新的宽度分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</param>
    ///  <param name="height">
    ///  新的高度分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</param>
    {class} function init(width: Single; height: Single): DNSizeF; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSizeF;

  { static fields } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SizeF" />
    ///  结构具有 <see cref="P:System.Drawing.SizeF.Height" />
    ///  和 <see cref="P:System.Drawing.SizeF.Width" />
    ///  值为 0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SizeF" />
    ///  结构具有 <see cref="P:System.Drawing.SizeF.Height" />
    ///  和 <see cref="P:System.Drawing.SizeF.Width" />
    ///  值为 0。
    ///</returns>
    {class} property Empty: DNSizeF read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  添加的宽度和高度的其中一个 <see cref="T:System.Drawing.SizeF" />
    ///  结构的宽度和高度与另一个 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///  <param name="sz1">
    ///  第一个 <see cref="T:System.Drawing.SizeF" />
    ///  可添加结构。
    ///</param>
    ///  <param name="sz2">
    ///  第二个 <see cref="T:System.Drawing.SizeF" />
    ///  可添加结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SizeF" />
    ///  结构，它是加法运算的结果。
    ///</returns>
    {class} function Add(sz1: DNSizeF; sz2: DNSizeF): DNSizeF;
    ///<summary>
    ///  减去的宽度和高度的其中一个 <see cref="T:System.Drawing.SizeF" />
    ///  从宽度和高度与另一个结构 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///  <param name="sz1"><see cref="T:System.Drawing.SizeF" />
    ///  减法运算符左侧的结构。
    ///</param>
    ///  <param name="sz2"><see cref="T:System.Drawing.SizeF" />
    ///  减法运算符右侧的结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SizeF" />
    ///  结构，它是减法运算的结果。
    ///</returns>
    {class} function Subtract(sz1: DNSizeF; sz2: DNSizeF): DNSizeF;

  end;

  ///<summary>
  ///  将存储浮点数、 通常的宽度和高度的矩形的有序的对。
  ///</summary>
  [DNTypeName('System.Drawing.SizeF')]
  DNSizeF = interface(DDN.mscorlib.DNValueType)
  ['{56ABB41C-4516-30F6-882E-57F234AB5028}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);

  { methods } 

    ///<summary>
    ///  测试以确定指定的对象是否为 <see cref="T:System.Drawing.SizeF" />
    ///  具有与此相同的维度的结构 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.SizeF" />
    ///  具有相同的宽度和高度与此 <see cref="T:System.Drawing.SizeF" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个整数值，指定此哈希值 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.SizeF" />
    ///  结构 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</returns>
    function ToPointF: DNPointF;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.SizeF" />
    ///  结构 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</returns>
    function ToSize: DNSize;
    ///<summary>
    ///  创建一个用户可读的字符串，表示此 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示此 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Drawing.SizeF" />
    ///  结构的零宽度和高度。
    ///</summary>
    ///<returns>
    ///  此属性返回 <see langword="true" />
    ///  时这 <see cref="T:System.Drawing.SizeF" />
    ///  结构的宽度和高度均为零; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置的水平分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  水平分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构，通常以像素为单位进行度量。
    ///</returns>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  获取或设置的垂直分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  垂直分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构，通常以像素为单位进行度量。
    ///</returns>
    property Height: Single read get_Height write set_Height;
  end;

  TDNSizeF = class(TDNGenericImport<DNSizeFClass, DNSizeF>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNUnitClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{0CD84224-DD89-5EC3-A7BF-BD15037C4B36}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  用指定的 32 位有符号整数的结构。
    ///</summary>
    ///  <param name="value">
    ///  一个 32 位有符号的整数，它表示的长度 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  以像素为单位。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" />
    ///  不是介于-32768 和 32767 之间。
    ///</exception>
    {class} function init(value: Int32): DNUnit; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  用指定的双精度浮点数的结构。
    ///</summary>
    ///  <param name="value">
    ///  双精度浮点数，它表示的长度 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  以像素为单位。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" />
    ///  不是介于-32768 和 32767 之间。
    ///</exception>
    {class} function init(value: Double): DNUnit; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  用指定的长度的结构。
    ///</summary>
    ///  <param name="value">
    ///  一个字符串，表示的长度 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的长度不是介于-32768 到 32767 之间。
    ///</exception><exception cref="T:System.FormatException"><paramref name="value" />
    ///  不是有效的 CSS 符合单位表达式。
    ///</exception>
    {class} function init(value: string): DNUnit; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  用指定的长度的结构和 <see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  一个字符串，表示的长度 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  表示的区域性。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的长度不是介于-32768 到 32767 之间。
    ///</exception><exception cref="T:System.FormatException"><paramref name="value" />
    ///  不是有效的 CSS 符合单位表达式。
    ///</exception>
    {class} function init(value: string; culture: DDN.mscorlib.DNCultureInfo): DNUnit; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNUnit;

  { static fields } 

    ///<summary>
    ///  表示空 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  。
    ///  此字段为只读。
    ///</summary>
    {class} property Empty: DNUnit read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  指定将字符串转换为 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  ，它表示指定的字符串。
    ///</returns>
    {class} function Parse(s: string): DNUnit; overload;
    ///<summary>
    ///  转换指定的字符串和 <see cref="T:System.Globalization.CultureInfo" />
    ///  到 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  表示的区域性的对象。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  ，它表示指定的字符串。
    ///</returns>
    {class} function Parse(s: string; culture: DDN.mscorlib.DNCultureInfo): DNUnit; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  类型的 <see cref="F:System.Web.UI.WebControls.UnitType.Percentage" />
    ///  从指定的双精度浮点数。
    ///</summary>
    ///  <param name="n">
    ///  双精度浮点数，它表示的长度 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  类型的 <see cref="F:System.Web.UI.WebControls.UnitType.Percentage" />
    ///  ，它表示指定的双精度浮点数的长度。
    ///</returns>
    {class} function Percentage(n: Double): DNUnit;
    ///<summary>
    ///  创建 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  类型的 <see cref="F:System.Web.UI.WebControls.UnitType.Pixel" />
    ///  从指定的 32 位有符号整数。
    ///</summary>
    ///  <param name="n">
    ///  一个 32 位有符号的整数，它表示的长度 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  类型的 <see cref="F:System.Web.UI.WebControls.UnitType.Pixel" />
    ///  ，它表示指定的长度 <paramref name="n" />
    ///  参数。
    ///</returns>
    {class} function Pixel(n: Int32): DNUnit;
    ///<summary>
    ///  创建 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  类型的 <see cref="F:System.Web.UI.WebControls.UnitType.Point" />
    ///  从指定的 32 位有符号整数。
    ///</summary>
    ///  <param name="n">
    ///  一个 32 位有符号的整数，它表示的长度 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  类型的 <see cref="F:System.Web.UI.WebControls.UnitType.Point" />
    ///  ，它表示指定的 32 位带符号整数的长度。
    ///</returns>
    {class} function Point(n: Int32): DNUnit;

  end;

  ///<summary>
  ///  表示长度测量。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.Unit')]
  DNUnit = interface(DDN.mscorlib.DNValueType)
  ['{12F71E33-D2AF-3BF2-96AE-23679BA914E0}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Value: Double;

  { methods } 

    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  一个 32 位带符号整数，它是此实例的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  比较此 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  与指定的对象。
    ///</summary>
    ///  <param name="obj">
    ///  要用于比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  从中调用此方法是对指定对象相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  将 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  的 <see cref="T:System.String" />
    ///  。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  将转换 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  为指定区域性中的等效字符串。
    ///</summary>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  表示的区域性。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  表示此 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  中指定的区域性 <paramref name="culture" />
    ///  。
    ///</returns>
    function ToString(culture: DDN.mscorlib.DNCultureInfo): string; overload;
    ///<summary>
    ///  将转换 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  为使用指定的格式提供程序的等效字符串。
    ///</summary>
    ///  <param name="formatProvider"><see cref="T:System.IFormatProvider" />
    ///  接口实现，提供区域性特定格式设置信息。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  表示此 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  中所指定的格式 <paramref name="formatProvider" />
    ///  。
    ///</returns>
    function ToString(formatProvider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  为空。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  为空，则为 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取的长度 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  。
    ///</summary>
    ///<returns>
    ///  双精度浮点数，它表示的长度 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  。
    ///</returns>
    property Value: Double read get_Value;
  end;

  TDNUnit = class(TDNGenericImport<DNUnitClass, DNUnit>) end;

  //-------------namespace: System.Web.Caching----------------
  DNCacheDependencyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B0DA5413-8FE0-5CBE-B2A6-ED081DEA7FBD}']
  { constructors } 

    ///<summary>
    ///  初始化的新实例 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  监视文件或目录的更改的类。
    ///</summary>
    ///  <param name="filename">
    ///  文件或缓存的对象所依赖的目录的路径。
    ///  当此资源更改时，缓存的对象则成为过时记录并从缓存中删除。
    ///</param>
    {class} function init(filename: string): DNCacheDependency; overload;
    ///<summary>
    ///  初始化的新实例 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  监视文件或目录的更改的类。
    ///</summary>
    ///  <param name="filename">
    ///  文件或缓存的对象所依赖的目录的路径。
    ///  当此资源更改时，缓存的对象则成为过时记录并从缓存中删除。
    ///</param>
    ///  <param name="start">
    ///  对其进行检查的目录或文件的上次修改的日期时间。
    ///</param>
    {class} function init(filename: string; start: DDN.mscorlib.DNDateTime): DNCacheDependency; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  监视的更改 （到文件或目录） 的路径的数组的类。
    ///</summary>
    ///  <param name="filenames">
    ///  （到文件或目录） 缓存的对象所依赖的路径的数组。
    ///  任何这些资源更改，缓存的对象则成为过时记录和从缓存中删除。
    ///</param>
    {class} function init(filenames: TArray<string>): DNCacheDependency; overload;
    ///<summary>
    ///  初始化的新实例 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  类，用于监视的更改 （到文件或目录） 的路径的数组，并指定更改监视开始的时间。
    ///</summary>
    ///  <param name="filenames">
    ///  （到文件或目录） 缓存的对象所依赖的路径的数组。
    ///  当所有这些资源更改时，缓存的对象则成为过时记录并从缓存中删除。
    ///</param>
    ///  <param name="start">
    ///  对其进行检查数组中的对象的上次修改的日期时间。
    ///</param>
    {class} function init(filenames: TArray<string>; start: DDN.mscorlib.DNDateTime): DNCacheDependency; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  监视的路径 （到文件或目录） 的数组、 一个缓存键的数组或两者同时更改的类。
    ///</summary>
    ///  <param name="filenames">
    ///  （到文件或目录） 缓存的对象所依赖的路径的数组。
    ///  任何这些资源更改，缓存的对象则成为过时记录和从缓存中删除。
    ///</param>
    ///  <param name="cachekeys">
    ///  更改为新对象将监视的缓存密钥的数组。
    ///  当任何这些缓存密钥更改时，与此依赖项对象关联的缓存的对象则成为过时记录并从缓存中删除。
    ///</param>
    {class} function init(filenames: TArray<string>; cachekeys: TArray<string>): DNCacheDependency; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  监视的路径 （到文件或目录） 的数组、 一个缓存键的数组或两者同时更改的类。
    ///</summary>
    ///  <param name="filenames">
    ///  （到文件或目录） 缓存的对象所依赖的路径的数组。
    ///  任何这些资源更改，缓存的对象则成为过时记录和从缓存中删除。
    ///</param>
    ///  <param name="cachekeys">
    ///  更改为新对象将监视的缓存密钥的数组。
    ///  当任何这些缓存密钥更改时，与此依赖项对象关联的缓存的对象则成为过时记录并从缓存中删除。
    ///</param>
    ///  <param name="start">
    ///  日期和时间，但要检查的对象的上次修改的日期的传入 <paramref name="filenames" />
    ///  和 <paramref name="cachekeys" />
    ///  数组。
    ///</param>
    {class} function init(filenames: TArray<string>; cachekeys: TArray<string>; start: DDN.mscorlib.DNDateTime): DNCacheDependency; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  监视的路径 （到文件或目录） 的数组、 一个缓存键的数组或两者同时更改的类。
    ///  它还使自己依赖于一个单独的实例 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  类。
    ///</summary>
    ///  <param name="filenames">
    ///  （到文件或目录） 缓存的对象所依赖的路径的数组。
    ///  任何这些资源更改，缓存的对象则成为过时记录和从缓存中删除。
    ///</param>
    ///  <param name="cachekeys">
    ///  更改为新对象将监视的缓存密钥的数组。
    ///  当任何这些缓存密钥更改时，与此依赖项对象关联的缓存的对象则成为过时记录并从缓存中删除。
    ///</param>
    ///  <param name="dependency">
    ///  另一个实例 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  此实例所依赖的类。
    ///</param>
    {class} function init(filenames: TArray<string>; cachekeys: TArray<string>; dependency: DNCacheDependency): DNCacheDependency; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  监视的路径 （到文件或目录） 的数组、 一个缓存键的数组或两者同时更改的类。
    ///  它还使自己依赖于的另一个实例 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  类以及更改监视开始的时间。
    ///</summary>
    ///  <param name="filenames">
    ///  （到文件或目录） 缓存的对象所依赖的路径的数组。
    ///  任何这些资源更改，缓存的对象则成为过时记录和从缓存中删除。
    ///</param>
    ///  <param name="cachekeys">
    ///  更改为新对象将监视的缓存密钥的数组。
    ///  当任何这些缓存密钥更改时，与此依赖项对象关联的缓存的对象则成为过时记录并从缓存中删除。
    ///</param>
    ///  <param name="dependency">
    ///  另一个实例 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  此实例所依赖的类。
    ///</param>
    ///  <param name="start">
    ///  对其进行检查数组中的对象的上次修改的日期的时间和 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  对象。
    ///</param>
    {class} function init(filenames: TArray<string>; cachekeys: TArray<string>; dependency: DNCacheDependency; start: DDN.mscorlib.DNDateTime): DNCacheDependency; overload;

  end;

  ///<summary>
  ///  在存储于 ASP.NET 应用程序的 <see cref="T:System.Web.Caching.Cache" />
  ///  对象中的项与文件、缓存键、文件或缓存键的数组，或另一个 <see cref="T:System.Web.Caching.CacheDependency" />
  ///  对象之间建立依赖关系。
  ///<see cref="T:System.Web.Caching.CacheDependency" />
  ///  类监视依赖关系，以便在任何这些对象发生更改时，自动删除缓存的项。
  ///</summary>
  [DNTypeName('System.Web.Caching.CacheDependency')]
  DNCacheDependency = interface(DDN.mscorlib.DNObject)
  ['{3A5DCF48-8E68-3AAE-9CD9-81E1FE012959}']
  { getters & setters } 

    function get_HasChanged: Boolean;
    function get_UtcLastModified: DDN.mscorlib.DNDateTime;

  { methods } 

    ///<summary>
    ///  释放由 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  对象使用的资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  允许第一个用户声明对此依赖项的独占拥有权。
    ///</summary>
    ///<returns>
    ///  如果此项第一个获得拥有权，则为 <see langword="true" />
    ///<see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///<see langword="false" />
    ///  。
    ///</returns>
    function TakeOwnership: Boolean;
    ///<summary>
    ///  检索 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  对象的唯一标识符。
    ///</summary>
    ///<returns><see cref="T:System.Web.Caching.CacheDependency" />
    ///  对象的唯一标识符。
    ///</returns>
    function GetUniqueID: string;
    ///<summary>
    ///  删除监视的缓存项时调用。
    ///</summary>
    procedure ItemRemoved;
    ///<summary>
    ///  获取文件依赖项。
    ///</summary>
    ///<returns>
    ///  文件依赖项。
    ///</returns>
    function GetFileDependencies: TArray<string>;
    ///<summary>
    ///  更新依赖于此项的每个缓存项的上次访问时间。
    ///</summary>
    procedure KeepDependenciesAlive;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  对象已更改。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  对象已更改; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChanged: Boolean read get_HasChanged;
    ///<summary>
    ///  获取上次更改依赖项的时间。
    ///</summary>
    ///<returns>
    ///  依赖项的上次更改时间。
    ///</returns>
    property UtcLastModified: DDN.mscorlib.DNDateTime read get_UtcLastModified;
  end;

  TDNCacheDependency = class(TDNGenericImport<DNCacheDependencyClass, DNCacheDependency>) end;

  //-------------namespace: System.Web----------------
  DNHttpCachePolicyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4DD4C936-AA1B-5569-8856-439F069803B7}']
  end;

  ///<summary>
  ///  包含可用于设置特定于缓存的 HTTP 标头以及用于控制 ASP.NET 页输出缓存的方法。
  ///</summary>
  [DNTypeName('System.Web.HttpCachePolicy')]
  DNHttpCachePolicy = interface(DDN.mscorlib.DNObject)
  ['{19BF1923-A494-350E-8DE9-AAC67FBFC53F}']
  { getters & setters } 

    function get_UtcTimestampCreated: DDN.mscorlib.DNDateTime;
    procedure set_UtcTimestampCreated(value: DDN.mscorlib.DNDateTime);

  { methods } 

    ///<summary>
    ///  获取一个值，该值指定 HTTP 缓存是否已被修改。
    ///</summary>
    ///<returns>
    ///  如果缓存已被修改则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsModified: Boolean;
    ///<summary>
    ///  停止针对当前响应的所有源服务器缓存。
    ///</summary>
    procedure SetNoServerCaching;
    ///<summary>
    ///  获取当前响应的服务器缓存状态。
    ///</summary>
    ///<returns>
    ///  如果对于当前响应，服务器缓存已停止，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetNoServerCaching: Boolean;
    ///<summary>
    ///  指定自定义文本字符串，它用于改变已缓存的输出响应。
    ///</summary>
    ///  <param name="custom">
    ///  用于改变已缓存的输出的文本字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="custom" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已调用 <see cref="M:System.Web.HttpCachePolicy.SetVaryByCustom(System.String)" />
    ///  方法。
    ///</exception>
    procedure SetVaryByCustom(custom: string);
    ///<summary>
    ///  获取用于改变 HTTP 缓存的自定义字符串。
    ///</summary>
    ///<returns>
    ///  用于改变 HTTP 缓存的自定义字符串。
    ///</returns>
    function GetVaryByCustom: string;
    ///<summary>
    ///  获取缓存扩展。
    ///</summary>
    ///<returns>
    ///  缓存扩展。
    ///</returns>
    function GetCacheExtensions: string;
    ///<summary>
    ///  设置 <see langword="Cache-Control: no-transform" />
    ///  HTTP 标头。
    ///</summary>
    procedure SetNoTransforms;
    ///<summary>
    ///  获取 HTTP No-Transform 指令的状态。
    ///</summary>
    ///<returns>
    ///  如果已设定 HTTP No-Transform 指令，则为 True<see langword="" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetNoTransforms: Boolean;
    ///<summary>
    ///  获取忽略范围请求的状态。
    ///</summary>
    ///<returns>
    ///  如果忽略范围请求，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetIgnoreRangeRequests: Boolean;
    ///<summary>
    ///  设置 <see langword="Cache-Control: no-store" />
    ///  HTTP 标头。
    ///</summary>
    procedure SetNoStore;
    ///<summary>
    ///  获取存储的状态。
    ///</summary>
    ///<returns>
    ///  如果没有设置存储，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetNoStore: Boolean;
    ///<summary>
    ///  将 <see langword="Expires" />
    ///  HTTP 标头设置为绝对日期和时间。
    ///</summary>
    ///  <param name="date">
    ///  绝对 <see cref="T:System.DateTime" />
    ///  要设置值 <see langword="Expires" />
    ///  访问消息标头。
    ///</param>
    procedure SetExpires(date: DDN.mscorlib.DNDateTime);
    ///<summary>
    ///  获取到期标头。
    ///</summary>
    ///<returns>
    ///  到期标头。
    ///</returns>
    function GetExpires: DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  集 <see langword="Cache-Control: max-age" />
    ///  HTTP 标头基于指定的时间跨度。
    ///</summary>
    ///  <param name="delta">
    ///  用于设置的时间跨度 <see langword="Cache" />
    ///  - <see langword="Control: max-age" />
    ///  标头。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="delta" />
    ///  小于 0 或大于一年。
    ///</exception>
    procedure SetMaxAge(delta: DDN.mscorlib.DNTimeSpan);
    ///<summary>
    ///  获取 Cache-Control 最长时间。
    ///</summary>
    ///<returns>
    ///  Cache-Control 最长时间。
    ///</returns>
    function GetMaxAge: DDN.mscorlib.DNTimeSpan;
    ///<summary>
    ///  集 <see langword="Cache-Control: s-maxage" />
    ///  HTTP 标头基于指定的时间跨度。
    ///</summary>
    ///  <param name="delta">
    ///  用于设置的时间跨度 <see langword="Cache-Control: s-maxage" />
    ///  标头。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="delta" />
    ///  小于 0。
    ///</exception>
    procedure SetProxyMaxAge(delta: DDN.mscorlib.DNTimeSpan);
    ///<summary>
    ///  获取 HTTP Cache-Control：最长代理时间。
    ///</summary>
    ///<returns>
    ///  HTTP Cache-Control：最长代理时间。
    ///</returns>
    function GetProxyMaxAge: DDN.mscorlib.DNTimeSpan;
    ///<summary>
    ///  将缓存从绝对值为可调时间的到期。
    ///</summary>
    ///  <param name="slide"><see langword="true" />
    ///  或 <see langword="false" />
    ///  。
    ///</param>
    procedure SetSlidingExpiration(slide: Boolean);
    ///<summary>
    ///  获取一个值，该值指定缓存是否具有可调过期策略。
    ///</summary>
    ///<returns>
    ///  如果缓存具有可调过期策略则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasSlidingExpiration: Boolean;
    ///<summary>
    ///  指定 ASP.NET 缓存是否应忽略客户端发送的使缓存失效的 HTTP <see langword="Cache-Control" />
    ///  标头。
    ///</summary>
    ///  <param name="validUntilExpires"><see langword="true" />
    ///  如果缓存忽略 <see langword="Cache-Control" />
    ///  无效标头; 否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure SetValidUntilExpires(validUntilExpires: Boolean);
    ///<summary>
    ///  获取一个值，该值指定 ASP.NET 缓存是否应忽略客户端发送的使缓存失效的 HTTP <see langword="Cache-Control" />
    ///  标头。
    ///</summary>
    ///<returns>
    ///  如果 ASP.NET 缓存应忽略客户端发送的 HTTP <see langword="Cache-Control" />
    ///  标头，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValidUntilExpires: Boolean;
    ///<summary>
    ///  使响应可以在客户端浏览器历史记录缓存，无论 <see cref="T:System.Web.HttpCacheability" />
    ///  在服务器上，所做的设置时 <paramref name="allow" />
    ///  参数是 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="allow"><see langword="true" />
    ///  指示客户端浏览器将响应存储在历史记录文件夹中。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</param>
    procedure SetAllowResponseInBrowserHistory(allow: Boolean);
    ///<summary>
    ///  将 <see langword="ETag" />
    ///  HTTP 标头设置为指定的字符串。
    ///</summary>
    ///  <param name="etag">
    ///  要用于 <see langword="ETag" />
    ///  标头的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="etag" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已设置 <see langword="ETag" />
    ///  标头。
    ///  - 或 -
    ///<see cref="M:System.Web.HttpCachePolicy.SetETagFromFileDependencies" />
    ///  已调用。
    ///</exception>
    procedure SetETag(etag: string);
    ///<summary>
    ///  获取 ETag。
    ///</summary>
    ///<returns>
    ///  ETag。
    ///</returns>
    function GetETag: string;
    ///<summary>
    ///  将 <see langword="Last-Modified" />
    ///  HTTP 标头设置为提供的 <see cref="T:System.DateTime" />
    ///  值。
    ///</summary>
    ///  <param name="date"><see langword="Last-Modified" />
    ///  标头的新 <see cref="T:System.DateTime" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="date" />
    ///  晚于当前 <see langword="DateTime" />
    ///  。
    ///</exception>
    procedure SetLastModified(date: DDN.mscorlib.DNDateTime);
    ///<summary>
    ///  以协调世界时 (UTC) 获取 <see langword="Last-Modified" />
    ///  HTTP 标头的值。
    ///</summary>
    ///<returns><see langword="Last-Modified" />
    ///  HTTP 标头的值。
    ///</returns>
    function GetUtcLastModified: DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  基于处理程序的文件依赖项的时间戳设置 <see langword="Last-Modified" />
    ///  HTTP 标头。
    ///</summary>
    procedure SetLastModifiedFromFileDependencies;
    ///<summary>
    ///  获取“上次修改时间”标题集的状态，该标头集要基于处理程序的文件依赖关系的时间戳。
    ///</summary>
    ///<returns>
    ///  如果“上次修改时间”标题设置为基于处理程序的文件依赖关系的时间戳，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetLastModifiedFromFileDependencies: Boolean;
    ///<summary>
    ///  基于处理程序的文件依赖项的时间戳设置 <see langword="ETag" />
    ///  HTTP 标头。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  已设置 <see langword="ETag" />
    ///  标头。
    ///</exception>
    procedure SetETagFromFileDependencies;
    ///<summary>
    ///  获取状态，该状态指示是否已基于处理程序的文件依赖项的时间戳设置 <see langword="ETag" />
    ///  标头。
    ///</summary>
    ///<returns>
    ///  如果已基于处理程序的文件依赖项的时间戳设置 <see langword="ETag" />
    ///  标头则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetETagFromFileDependencies: Boolean;
    ///<summary>
    ///  指定是否应包含响应 <see langword="vary:*" />
    ///  标头时按参数进行区分。
    ///</summary>
    ///  <param name="omit"><see langword="true" />
    ///  若要直接 <see cref="T:System.Web.HttpCachePolicy" />
    ///  为不使用 * 值及其 <see cref="P:System.Web.HttpCachePolicy.VaryByHeaders" />
    ///  属性; 否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure SetOmitVaryStar(omit: Boolean);
    ///<summary>
    ///  获取 <see langword="vary:*" />
    ///  标头的状态。
    ///</summary>
    ///<returns>
    ///  如果省略 <see langword="vary:*" />
    ///  标头，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetOmitVaryStar: Int32;
    ///<summary>
    ///  将指定文本追加到 <see langword="Cache-Control" />
    ///  HTTP 头。
    ///</summary>
    ///  <param name="extension">
    ///  要追加到 <see langword="Cache-Control" />
    ///  标头的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="extension" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure AppendCacheExtension(extension: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.HttpCachePolicy" />
    ///  的协调世界时 (UTC) 中的时间戳。
    ///</summary>
    ///<returns><see cref="T:System.DateTime" />
    ///  的 <see cref="T:System.Web.HttpCachePolicy" />
    ///  。
    ///</returns>
    property UtcTimestampCreated: DDN.mscorlib.DNDateTime read get_UtcTimestampCreated write set_UtcTimestampCreated;
  end;

  TDNHttpCachePolicy = class(TDNGenericImport<DNHttpCachePolicyClass, DNHttpCachePolicy>) end;

  //-------------namespace: System.Web----------------
  DNHttpContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6B7A3BAC-D919-5153-91FA-D06B52022E10}']
  { static getter & setter } 

    {class} function get_Current: DNHttpContext;
    {class} procedure set_Current(value: DNHttpContext);

  { static methods } 

    ///<summary>
    ///  为当前应用程序返回请求的配置信息。
    ///</summary>
    ///  <param name="name">
    ///  为其请求信息的应用程序配置标记。
    ///</param>
    ///<returns>
    ///  包含配置信息的对象。
    ///  （在使用之前，将返回的配置节强制转换为适当的配置类型。）
    ///</returns>
    {class} function GetAppConfig(name: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  根据指定的 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" />
    ///  和 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />
    ///  属性，获取应用程序级别资源对象。
    ///</summary>
    ///  <param name="classKey">
    ///  一个字符串，表示所请求资源对象的 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" />
    ///  属性。
    ///</param>
    ///  <param name="resourceKey">
    ///  一个字符串，表示所请求资源对象的 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />
    ///  属性。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  ，表示请求的应用程序级别资源对象；否则，如果未找到资源对象，或找到了资源对象但其没有请求的属性，则为 null。
    ///</returns>
    ///<exception cref="T:System.Resources.MissingManifestResourceException">
    ///  具有指定的资源对象 <paramref name="classKey" />
    ///  找不到参数。
    ///  - 或 -
    ///  主程序集不包含非特定区域性的资源，这些资源是必需的由于缺少适当的附属程序集。
    ///</exception>
    {class} function GetGlobalResourceObject(classKey: string; resourceKey: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  根据指定的 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" />
    ///  和 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />
    ///  属性以及 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象，获取一个应用程序级别资源对象。
    ///</summary>
    ///  <param name="classKey">
    ///  一个字符串，表示所请求资源对象的 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" />
    ///  属性。
    ///</param>
    ///  <param name="resourceKey">
    ///  一个字符串，表示所请求资源对象的 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />
    ///  属性。
    ///</param>
    ///  <param name="culture">
    ///  一个字符串，表示所请求资源的 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  ，表示请求的应用程序级别资源对象（对指定区域性对其进行了本地化）；否则，如果未找到资源对象，或找到了资源对象但其没有请求的属性，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Resources.MissingManifestResourceException">
    ///  资源对象为其指定 <paramref name="classKey" />
    ///  找不到参数。
    ///  - 或 -
    ///  主程序集不包含非特定区域性的资源，这些资源是必需的由于缺少适当的附属程序集。
    ///</exception>
    {class} function GetGlobalResourceObject(classKey: string; resourceKey: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  根据指定的 <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" />
    ///  和 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />
    ///  属性，获取页级别资源对象。
    ///</summary>
    ///  <param name="virtualPath">
    ///  本地资源对象的 <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" />
    ///  属性。
    ///</param>
    ///  <param name="resourceKey">
    ///  一个字符串，表示所请求资源对象的 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />
    ///  属性。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  ，表示请求的页级别资源对象；否则，如果找到了匹配的资源对象但不是 <paramref name="resourceKey" />
    ///  参数，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Resources.MissingManifestResourceException">
    ///  未找到资源对象为指定 <paramref name="virtualPath" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定 <paramref name="virtualPath" />
    ///  参数不是当前应用程序的根目录中。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  找不到页上的资源类。
    ///</exception>
    {class} function GetLocalResourceObject(virtualPath: string; resourceKey: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  根据指定的 <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" />
    ///  和 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />
    ///  属性以及 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象，获取一个页级别资源对象。
    ///</summary>
    ///  <param name="virtualPath">
    ///  本地资源对象的 <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" />
    ///  属性。
    ///</param>
    ///  <param name="resourceKey">
    ///  一个字符串，表示所请求资源对象的 <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />
    ///  属性。
    ///</param>
    ///  <param name="culture">
    ///  一个字符串，表示所请求资源对象的 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  ，表示请求的本地资源对象（针对指定区域性进行了本地化的对象）；否则，如果找到了匹配的资源对象但不是 <see langword="null" />
    ///  参数，则为 <paramref name="resourceKey" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Resources.MissingManifestResourceException">
    ///  未找到资源对象为指定 <paramref name="virtualPath" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定 <paramref name="virtualPath" />
    ///  参数不是当前应用程序的根目录中。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  找不到页上的资源类。
    ///</exception>
    {class} function GetLocalResourceObject(virtualPath: string; resourceKey: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;

  { static propertys } 

    ///<summary>
    ///  为当前 HTTP 请求获取或设置 <see cref="T:System.Web.HttpContext" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  当前 HTTP 请求的 <see cref="T:System.Web.HttpContext" />
    ///  实例。
    ///</returns>
    {class} property Current: DNHttpContext read get_Current write set_Current;
  end;

  ///<summary>
  ///  封装有关个别 HTTP 请求的所有 HTTP 特定的信息。
  ///</summary>
  [DNTypeName('System.Web.HttpContext')]
  DNHttpContext = interface(DDN.mscorlib.DNObject)
  ['{31429A69-C7C4-3F35-A3EB-5FF0D637BD02}']
  { getters & setters } 

    function get_IsWebSocketRequest: Boolean;
    function get_IsWebSocketRequestUpgrading: Boolean;
    function get_WebSocketRequestedProtocols: DDN.mscorlib.DNIList<string>;
    function get_WebSocketNegotiatedProtocol: string;
    function get_AllowAsyncDuringSyncStages: Boolean;
    procedure set_AllowAsyncDuringSyncStages(value: Boolean);
    function get_Response: DNHttpResponse;
    function get_Items: DDN.mscorlib.DNIDictionary;
    function get_Error: DDN.mscorlib.DNException;
    function get_AllErrors: TArray<DDN.mscorlib.DNException>;
    function get_User: DDN.mscorlib.DNIPrincipal;
    procedure set_User(value: DDN.mscorlib.DNIPrincipal);
    function get_SkipAuthorization: Boolean;
    procedure set_SkipAuthorization(value: Boolean);
    function get_IsDebuggingEnabled: Boolean;
    function get_IsCustomErrorEnabled: Boolean;
    function get_Timestamp: DDN.mscorlib.DNDateTime;
    function get_ThreadAbortOnTimeout: Boolean;
    procedure set_ThreadAbortOnTimeout(value: Boolean);
    function get_IsPostNotification: Boolean;

  { methods } 

    ///<summary>
    ///  使对象的 <see cref="M:System.IDisposable.Dispose" />
    ///  方法可以在此请求的 <see cref="T:System.Web.WebSockets.AspNetWebSocket" />
    ///  连接部分完成时进行调用。
    ///</summary>
    ///  <param name="target">
    ///  在请求的 <see cref="M:System.IDisposable.Dispose" />
    ///  连接部分完成时必须调动用其 <see cref="T:System.Web.WebSockets.AspNetWebSocket" />
    ///  方法的对象。
    ///</param>
    ///<returns>
    ///  订阅标记。
    ///</returns>
    function DisposeOnPipelineCompleted(target: DDN.mscorlib.DNIDisposable): DNISubscriptionToken;
    ///<summary>
    ///  将异常添加到当前 HTTP 请求的异常集合中。
    ///</summary>
    ///  <param name="errorInfo">
    ///  要添加到异常集合中的 <see cref="T:System.Exception" />
    ///  。
    ///</param>
    procedure AddError(errorInfo: DDN.mscorlib.DNException);
    ///<summary>
    ///  清除当前 HTTP 请求的所有错误。
    ///</summary>
    procedure ClearError;
    ///<summary>
    ///  为当前 HTTP 请求返回所请求的配置信息。
    ///</summary>
    ///  <param name="name">
    ///  为其请求信息的配置标记。
    ///</param>
    ///<returns>
    ///  指定的 <see cref="T:System.Configuration.ConfigurationSection" />
    ///  ，如果该节不存在，则为 <see langword="null" />
    ///  ，或是如果该节不能在运行时访问，则为一个内部对象。
    ///  （在使用之前，将返回的对象强制转换为适当的配置类型。）
    ///</returns>
    function GetConfig(name: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  使用给定路径重写 URL。
    ///</summary>
    ///  <param name="path">
    ///  内部重写路径。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Web.HttpException"><paramref name="path" />
    ///  参数不是当前应用程序的根目录中。
    ///</exception>
    procedure RewritePath(path: string); overload;
    ///<summary>
    ///  使用给定路径和一个布尔值重写 URL，该布尔值用于指定是否修改服务器资源的虚拟路径。
    ///</summary>
    ///  <param name="path">
    ///  内部重写路径。
    ///</param>
    ///  <param name="rebaseClientPath">
    ///  如果重置虚拟路径，则为 <see langword="true" />
    ///  ；如果保持虚拟路径不变，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Web.HttpException"><paramref name="path" />
    ///  参数不在当前应用程序的根目录下。
    ///</exception>
    procedure RewritePath(path: string; rebaseClientPath: Boolean); overload;
    ///<summary>
    ///  使用给定的路径、路径信息和查询字符串信息重写 URL。
    ///</summary>
    ///  <param name="filePath">
    ///  内部重写路径。
    ///</param>
    ///  <param name="pathInfo">
    ///  资源的附加路径信息。
    ///  有关详细信息，请参阅<see cref="P:System.Web.HttpRequest.PathInfo" />
    ///  。
    ///</param>
    ///  <param name="queryString">
    ///  请求查询字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  参数不是当前应用程序的根目录中。
    ///</exception><exception cref="T:System.Web.HttpException"><paramref name="filePath" />
    ///  参数不在当前应用程序的根目录下。
    ///</exception>
    procedure RewritePath(filePath: string; pathInfo: string; queryString: string); overload;
    ///<summary>
    ///  使用给定虚拟路径、路径信息、查询字符串信息和一个布尔值重写 URL，该布尔值用于指定是否将客户端文件路径设置为重写路径。
    ///</summary>
    ///  <param name="filePath">
    ///  服务请求的资源的虚拟路径。
    ///</param>
    ///  <param name="pathInfo">
    ///  用于 URL 重定向的附加路径信息。
    ///  有关更多信息，请参见<see cref="P:System.Web.HttpRequest.PathInfo" />
    ///  。
    ///</param>
    ///  <param name="queryString">
    ///  用于 URL 重定向的请求查询字符串。
    ///</param>
    ///  <param name="setClientFilePath">
    ///  若要将用于客户端资源的文件路径设置为 <paramref name="filePath" />
    ///  参数的值，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  参数不在当前应用程序的根目录下。
    ///</exception><exception cref="T:System.Web.HttpException"><paramref name="filePath" />
    ///  参数不在当前应用程序的根目录下。
    ///</exception>
    procedure RewritePath(filePath: string; pathInfo: string; queryString: string; setClientFilePath: Boolean); overload;
    ///<summary>
    ///  获取当前应用程序的默认配置的指定配置节。
    ///</summary>
    ///  <param name="sectionName">
    ///  配置节路径（使用 XPath 格式）和配置元素名称。
    ///</param>
    ///<returns>
    ///  指定的 <see cref="T:System.Configuration.ConfigurationSection" />
    ///  ，如果该节不存在，则为 <see langword="null" />
    ///  ，或是如果该节不能在运行时访问，则为一个内部对象。
    ///</returns>
    function GetSection(sectionName: string): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示此请求是否是一个 <see cref="T:System.Web.WebSockets.AspNetWebSocket" />
    ///  请求。
    ///</summary>
    ///<returns>
    ///  如果该请求是一个 <see cref="T:System.Web.WebSockets.AspNetWebSocket" />
    ///  请求，则为 <see langword="true" />
    ///  ，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsWebSocketRequest: Boolean read get_IsWebSocketRequest;
    ///<summary>
    ///  获取指示连接是否从 HTTP 连接升级到 <see cref="T:System.Web.WebSockets.AspNetWebSocket" />
    ///  连接的值。
    ///</summary>
    ///<returns>
    ///  如果连接正在升级，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsWebSocketRequestUpgrading: Boolean read get_IsWebSocketRequestUpgrading;
    ///<summary>
    ///  获取客户要求的子协议列表的有序列表。
    ///</summary>
    ///<returns>
    ///  请求的协议，如果不是 <see cref="T:System.Web.WebSockets.AspNetWebSocket" />
    ///  请求，或者列表不存在则为 <see langword="null" />
    ///  。
    ///</returns>
    property WebSocketRequestedProtocols: DDN.mscorlib.DNIList<string> read get_WebSocketRequestedProtocols;
    ///<summary>
    ///  获取用于 <see cref="T:System.Web.WebSockets.AspNetWebSocket" />
    ///  连接而从服务器发送到客户端的协商协议。
    ///</summary>
    ///<returns>
    ///  协商协议。
    ///</returns>
    property WebSocketNegotiatedProtocol: string read get_WebSocketNegotiatedProtocol;
    ///<summary>
    ///  获取或设置一个值，此值指示 ASP.NET 请求处理过程中是否允许非预期的异步操作。
    ///</summary>
    ///<returns>
    ///  当异步 API 在不是预期的时间使用时 ASP.NET 将引发异常，则为 <see langword="false" />
    ///  ，否则为 <see langword="true" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowAsyncDuringSyncStages: Boolean read get_AllowAsyncDuringSyncStages write set_AllowAsyncDuringSyncStages;
    ///<summary>
    ///  获取当前 HTTP 响应的 <see cref="T:System.Web.HttpResponse" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  当前 HTTP 响应的 <see cref="T:System.Web.HttpResponse" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException">
    ///  在集成模式下在 IIS 7 下运行 Web 应用程序。
    ///</exception>
    property Response: DNHttpResponse read get_Response;
    ///<summary>
    ///  获取可用于在 HTTP 请求过程中在 <see cref="T:System.Web.IHttpModule" />
    ///  接口和 <see cref="T:System.Web.IHttpHandler" />
    ///  接口之间组织和共享数据的键/值集合。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IDictionary" />
    ///  键/值集合，按指定的键提供对集合中个别值的访问。
    ///</returns>
    property Items: DDN.mscorlib.DNIDictionary read get_Items;
    ///<summary>
    ///  获取在处理 HTTP 请求的过程中累积的第一个错误（如果有）。
    ///</summary>
    ///<returns>
    ///  当前 HTTP 请求/响应过程的第一个 <see cref="T:System.Exception" />
    ///  ；如果在处理 HTTP 请求期间没有发生任何错误，则为 <see langword="null" />
    ///  。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Error: DDN.mscorlib.DNException read get_Error;
    ///<summary>
    ///  获取在处理 HTTP 请求的过程中累积的错误数组。
    ///</summary>
    ///<returns>
    ///  当前 HTTP 请求的 <see cref="T:System.Exception" />
    ///  对象数组。
    ///</returns>
    property AllErrors: TArray<DDN.mscorlib.DNException> read get_AllErrors;
    ///<summary>
    ///  获取或设置当前 HTTP 请求的安全信息。
    ///</summary>
    ///<returns>
    ///  当前 HTTP 请求的安全信息。
    ///</returns>
    property User: DDN.mscorlib.DNIPrincipal read get_User write set_User;
    ///<summary>
    ///  获取或设置一个值，该值指定 <see cref="T:System.Web.Security.UrlAuthorizationModule" />
    ///  对象是否应跳过对当前请求的授权检查。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Web.Security.UrlAuthorizationModule" />
    ///  应跳过授权检查，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property SkipAuthorization: Boolean read get_SkipAuthorization write set_SkipAuthorization;
    ///<summary>
    ///  获取一个值，该值指示当前 HTTP 请求是否处于调试模式。
    ///</summary>
    ///<returns>
    ///  如果请求处于调试模式，则为 <see langword="true" />
    ///  ；否则，为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDebuggingEnabled: Boolean read get_IsDebuggingEnabled;
    ///<summary>
    ///  获取一个值，该值指示是否已为当前 HTTP 请求启用自定义错误。
    ///</summary>
    ///<returns>
    ///  如果启用了自定义错误，则为 <see langword="true" />
    ///  ；否则，为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCustomErrorEnabled: Boolean read get_IsCustomErrorEnabled;
    ///<summary>
    ///  获取当前 HTTP 请求的初始时间戳。
    ///</summary>
    ///<returns>
    ///  当前 HTTP 请求的时间戳。
    ///</returns>
    property Timestamp: DDN.mscorlib.DNDateTime read get_Timestamp;
    ///<summary>
    ///  获取或设置一个值，此值指示 ASP.NET 运行时是否应在请求超时时，调用为该请求提供服务的线程上的 <see cref="M:System.Threading.Thread.Abort" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果在线程超时时调用 <see cref="M:System.Threading.Thread.Abort" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property ThreadAbortOnTimeout: Boolean read get_ThreadAbortOnTimeout write set_ThreadAbortOnTimeout;
    ///<summary>
    ///  在 <see cref="T:System.Web.HttpApplication" />
    ///  事件完成处理之后获取 ASP.NET 管道的当前进程点的值。
    ///</summary>
    ///<returns>
    ///  如果启用了自定义错误，则为 <see langword="true" />
    ///  ；否则，为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  该操作所需要的集成的管道模式 IIS 7.0 并且至少.NET Framework 3.0。
    ///</exception>
    property IsPostNotification: Boolean read get_IsPostNotification;
  end;

  TDNHttpContext = class(TDNGenericImport<DNHttpContextClass, DNHttpContext>) end;

  //-------------namespace: System.Web----------------
  DNHttpCookieClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D065956-5C32-5F3A-BD25-E8A68B5579AC}']
  { constructors } 

    ///<summary>
    ///  创建并命名一个新的 cookie。
    ///</summary>
    ///  <param name="name">
    ///  新的 cookie 的名称。
    ///</param>
    {class} function init(name: string): DNHttpCookie; overload;
    ///<summary>
    ///  创建名称，并将值分配给一个新的 cookie。
    ///</summary>
    ///  <param name="name">
    ///  新的 cookie 的名称。
    ///</param>
    ///  <param name="value">
    ///  新的 cookie 的值。
    ///</param>
    {class} function init(name: string; value: string): DNHttpCookie; overload;

  { static methods } 

    {class} function TryParse(input: string; out result: DNHttpCookie): Boolean;

  end;

  ///<summary>
  ///  提供以类型安全的方式来创建和操作单个 HTTP cookie。
  ///</summary>
  [DNTypeName('System.Web.HttpCookie')]
  DNHttpCookie = interface(DDN.mscorlib.DNObject)
  ['{B912DB10-D8DE-3470-9200-DC8BE312B40E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Path: string;
    procedure set_Path(value: string);
    function get_Secure: Boolean;
    procedure set_Secure(value: Boolean);
    function get_Shareable: Boolean;
    procedure set_Shareable(value: Boolean);
    function get_HttpOnly: Boolean;
    procedure set_HttpOnly(value: Boolean);
    function get_Domain: string;
    procedure set_Domain(value: string);
    function get_Expires: DDN.mscorlib.DNDateTime;
    procedure set_Expires(value: DDN.mscorlib.DNDateTime);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_HasKeys: Boolean;
    function get_Values: DNNameValueCollection;
    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 cookie 的名称。
    ///</summary>
    ///<returns>
    ///  默认值为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中) 除非另外指定构造函数。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置要与当前 cookie 传输的虚拟路径。
    ///</summary>
    ///<returns>
    ///  要将带有该 cookie 传输的虚拟路径。
    ///  默认值是 <see langword="/" />
    ///  , ，这是在服务器根目录。
    ///</returns>
    property Path: string read get_Path write set_Path;
    ///<summary>
    ///  获取或设置一个值，该值指示是否传输，即通过 HTTPS 仅使用安全套接字层 (SSL)-的 cookie。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要将 cookie 传输通过 SSL 连接 (HTTPS);否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Secure: Boolean read get_Secure write set_Secure;
    ///<summary>
    ///  确定是否允许 cookie 参与输出缓存。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要指定的输出缓存将不被取消的给定 <see cref="T:System.Web.HttpResponse" />
    ///  包含一个或多个出站 cookies; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Shareable: Boolean read get_Shareable write set_Shareable;
    ///<summary>
    ///  获取或设置一个值，指定 cookie 是由客户端脚本访问。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 cookie 有 <see langword="HttpOnly" />
    ///  特性，并通过客户端脚本访问; 否则为不能为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property HttpOnly: Boolean read get_HttpOnly write set_HttpOnly;
    ///<summary>
    ///  获取或设置要将与 cookie 相关联的域。
    ///</summary>
    ///<returns>
    ///  要将与 cookie 相关联的域的名称。
    ///  默认值为当前域。
    ///</returns>
    property Domain: string read get_Domain write set_Domain;
    ///<summary>
    ///  获取或设置的过期日期和时间的 cookie。
    ///</summary>
    ///<returns>
    ///  Cookie 过期时 （在客户端） 的一天的时间。
    ///</returns>
    property Expires: DDN.mscorlib.DNDateTime read get_Expires write set_Expires;
    ///<summary>
    ///  获取或设置一个单独的 cookie 值。
    ///</summary>
    ///<returns>
    ///  Cookie 值。
    ///  默认值为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取一个值，该值指示 cookie 是否有子项。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 cookie 有子项，否则， <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property HasKeys: Boolean read get_HasKeys;
    ///<summary>
    ///  获取包含在一个 cookie 对象内的键/值对的集合。
    ///</summary>
    ///<returns>
    ///  Cookie 值的集合。
    ///</returns>
    property Values: DNNameValueCollection read get_Values;
    property Item[key: string]: string read get_Item write set_Item; default;
  end;

  TDNHttpCookie = class(TDNGenericImport<DNHttpCookieClass, DNHttpCookie>) end;

  //-------------namespace: System.Web----------------
  DNHttpResponseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D3FF2532-A653-58EF-A2B2-844D996AF83C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.HttpResponse" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="writer">
    ///  实现自定义 HTTP 输出的 <see cref="T:System.IO.TextWriter" />
    ///  对象。
    ///</param>
    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNHttpResponse;

  { static methods } 

    ///<summary>
    ///  从缓存中删除与默认输出缓存提供程序关联的所有缓存项。
    ///  此方法是静态的。
    ///</summary>
    ///  <param name="path">
    ///  已从缓存中删除的项的虚拟绝对路径。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="path" />
    ///  不是绝对的虚拟路径。
    ///</exception>
    {class} procedure RemoveOutputCacheItem(path: string); overload;
    ///<summary>
    ///  使用指定的输出缓存提供程序删除所有与指定路径关联的输出缓存项。
    ///</summary>
    ///  <param name="path">
    ///  从缓存中删除的项的虚拟绝对路径。
    ///</param>
    ///  <param name="providerName">
    ///  用于删除与指定路径关联的输出缓存项的提供程序。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 null。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="path" />
    ///  是一个无效路径。
    ///</exception>
    {class} procedure RemoveOutputCacheItem(path: string; providerName: string); overload;

  end;

  ///<summary>
  ///  封装来自 ASP.NET 操作的 HTTP 响应信息。
  ///</summary>
  [DNTypeName('System.Web.HttpResponse')]
  DNHttpResponse = interface(DDN.mscorlib.DNObject)
  ['{B1BD5F85-6345-3DB9-AB88-0E84CFC174BA}']
  { getters & setters } 

    function get_HeadersWritten: Boolean;
    function get_SupportsAsyncFlush: Boolean;
    function get_Cookies: DNHttpCookieCollection;
    function get_Headers: DNNameValueCollection;
    function get_StatusCode: Int32;
    procedure set_StatusCode(value: Int32);
    function get_SubStatusCode: Int32;
    procedure set_SubStatusCode(value: Int32);
    function get_StatusDescription: string;
    procedure set_StatusDescription(value: string);
    function get_TrySkipIisCustomErrors: Boolean;
    procedure set_TrySkipIisCustomErrors(value: Boolean);
    function get_SuppressFormsAuthenticationRedirect: Boolean;
    procedure set_SuppressFormsAuthenticationRedirect(value: Boolean);
    function get_SuppressDefaultCacheControlHeader: Boolean;
    procedure set_SuppressDefaultCacheControlHeader(value: Boolean);
    function get_BufferOutput: Boolean;
    procedure set_BufferOutput(value: Boolean);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Charset: string;
    procedure set_Charset(value: string);
    function get_ContentEncoding: DDN.mscorlib.DNEncoding;
    procedure set_ContentEncoding(value: DDN.mscorlib.DNEncoding);
    function get_HeaderEncoding: DDN.mscorlib.DNEncoding;
    procedure set_HeaderEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Cache: DNHttpCachePolicy;
    function get_IsClientConnected: Boolean;
    function get_ClientDisconnectedToken: DDN.mscorlib.DNCancellationToken;
    function get_IsRequestBeingRedirected: Boolean;
    function get_RedirectLocation: string;
    procedure set_RedirectLocation(value: string);
    function get_Output: DDN.mscorlib.DNTextWriter;
    procedure set_Output(value: DDN.mscorlib.DNTextWriter);
    function get_OutputStream: DDN.mscorlib.DNStream;
    function get_Filter: DDN.mscorlib.DNStream;
    procedure set_Filter(value: DDN.mscorlib.DNStream);
    function get_SuppressContent: Boolean;
    procedure set_SuppressContent(value: Boolean);
    function get_Status: string;
    procedure set_Status(value: string);
    function get_Buffer: Boolean;
    procedure set_Buffer(value: Boolean);
    function get_Expires: Int32;
    procedure set_Expires(value: Int32);
    function get_ExpiresAbsolute: DDN.mscorlib.DNDateTime;
    procedure set_ExpiresAbsolute(value: DDN.mscorlib.DNDateTime);
    function get_CacheControl: string;
    procedure set_CacheControl(value: string);

  { methods } 

    ///<summary>
    ///  向客户端发送当前所有缓冲的响应。
    ///</summary>
    ///  <param name="callback">
    ///  回调对象。
    ///</param>
    ///  <param name="state">
    ///  响应状态。
    ///</param>
    ///<returns>
    ///  异步结果对象。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException">
    ///  响应已完成。
    ///</exception>
    function BeginFlush(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  完成异步刷新操作。
    ///</summary>
    ///  <param name="asyncResult">
    ///  异步结果对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  不支持异步刷新和 <paramref name="asyncResult" />
    ///  参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  不支持异步刷新和 <paramref name="asyncResult" />
    ///  参数不能强制转换为 FlushAsyncResult 对象。
    ///</exception>
    procedure EndFlush(asyncResult: DDN.mscorlib.DNIAsyncResult);
    ///<summary>
    ///  禁用当前响应的内核缓存。
    ///</summary>
    procedure DisableKernelCache;
    ///<summary>
    ///  禁用 IIS 用户-方式来缓存反映。
    ///</summary>
    procedure DisableUserCache;
    ///<summary>
    ///  关闭到客户端的套接字连接。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  将二进制字符串写入 HTTP 输出流。
    ///</summary>
    ///  <param name="buffer">
    ///  要写入输出流的字节。
    ///</param>
    procedure BinaryWrite(buffer: TArray<Byte>);
    ///<summary>
    ///  将 HTTP 头添加到输出流。
    ///</summary>
    ///  <param name="name">
    ///  要添加到输出流的 HTTP 头的名称。
    ///</param>
    ///  <param name="value">
    ///  要追加到头中的字符串。
    ///</param>
    ///<exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后追加标头。
    ///</exception>
    procedure AppendHeader(name: string; value: string);
    ///<summary>
    ///  将 HTTP cookie 添加到内部 cookie 集合。
    ///</summary>
    ///  <param name="cookie">
    ///  要添加到输出流的 <see cref="T:System.Web.HttpCookie" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后追加一个 cookie。
    ///</exception>
    procedure AppendCookie(cookie: DNHttpCookie);
    ///<summary>
    ///  更新 cookie 集合中的现有 cookie。
    ///</summary>
    ///  <param name="cookie">
    ///  集合中要更新的 cookie。
    ///</param>
    ///<exception cref="T:System.Web.HttpException">
    ///  之后已发送的 HTTP 标头设置 cookie。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  试图之后已发送的 HTTP 标头设置 cookie。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  之后已发送的 HTTP 标头设置 cookie。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  试图之后已发送的 HTTP 标头设置 cookie。
    ///</exception>
    procedure SetCookie(cookie: DNHttpCookie);
    ///<summary>
    ///  清除缓冲区流中的所有内容输出。
    ///</summary>
    procedure ClearContent;
    ///<summary>
    ///  清除缓冲区流中的所有内容输出。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  向客户端发送当前所有缓冲的输出。
    ///</summary>
    ///<exception cref="T:System.Web.HttpException">
    ///  在发送响应之后，会刷新缓存。
    ///</exception>
    procedure Flush;
    ///<summary>
    ///  将自定义日志信息添加到 Internet Information Services (IIS)日志文件。
    ///</summary>
    ///  <param name="param">
    ///  要添加到日志文件的文本。
    ///</param>
    procedure AppendToLog(param: string);
    ///<summary>
    ///  将请求重定向到新 URL 并指定该新 URL。
    ///</summary>
    ///  <param name="url">
    ///  目标位置。
    ///</param>
    ///<exception cref="T:System.Web.HttpException">
    ///  发送 HTTP 标头之后尝试重定向。
    ///</exception>
    procedure Redirect(url: string); overload;
    ///<summary>
    ///  将客户端重定向到新的 URL。
    ///  指定新的 URL 并指定当前页的执行是否应终止。
    ///</summary>
    ///  <param name="url">
    ///  目标的位置。
    ///</param>
    ///  <param name="endResponse">
    ///  指示当前页的执行是否应终止。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="url" />
    ///  包含换行符。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  发送 HTTP 标头之后尝试重定向。
    ///</exception><exception cref="T:System.ApplicationException">
    ///  该页面请求是回调的结果。
    ///</exception>
    procedure Redirect(url: string; endResponse: Boolean); overload;
    ///<summary>
    ///  使用路由名称将请求重定向到新 URL。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有路由对应于指定的路由参数。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后尝试进行重定向。
    ///</exception>
    procedure RedirectToRoute(routeName: string); overload;
    ///<summary>
    ///  使用路由参数值将请求重定向到新 URL。
    ///</summary>
    ///  <param name="routeValues">
    ///  路由参数值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有路由对应于指定的路由参数。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后尝试进行重定向。
    ///</exception>
    procedure RedirectToRoute(routeValues: DNRouteValueDictionary); overload;
    ///<summary>
    ///  使用路由参数值和路由名称将请求重定向到新 URL。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///  <param name="routeValues">
    ///  路由参数值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有路由对应于指定的路由参数。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后尝试进行重定向。
    ///</exception>
    procedure RedirectToRoute(routeName: string; routeValues: DNRouteValueDictionary); overload;
    ///<summary>
    ///  使用路由名称执行从所请求 URL 到新 URL 的永久重定向。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有路由对应于指定的路由参数。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后尝试进行重定向。
    ///</exception>
    procedure RedirectToRoutePermanent(routeName: string); overload;
    ///<summary>
    ///  使用路由参数值执行从所请求 URL 到新 URL 的永久重定向。
    ///</summary>
    ///  <param name="routeValues">
    ///  路由参数值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有路由对应于指定的路由参数。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后尝试进行重定向。
    ///</exception>
    procedure RedirectToRoutePermanent(routeValues: DNRouteValueDictionary); overload;
    ///<summary>
    ///  使用路由参数值和路由名称执行从所请求 URL 到新 URL 的永久重定向。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///  <param name="routeValues">
    ///  路由参数值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有路由对应于指定的路由参数。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后尝试进行重定向。
    ///</exception>
    procedure RedirectToRoutePermanent(routeName: string; routeValues: DNRouteValueDictionary); overload;
    ///<summary>
    ///  执行从所请求 URL 到所指定 URL 的永久重定向。
    ///</summary>
    ///  <param name="url">
    ///  要将请求重定向到其中的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="url" />
    ///  包括一个换行符 (\n)。
    ///</exception>
    procedure RedirectPermanent(url: string); overload;
    ///<summary>
    ///  执行从所请求 URL 到所指定 URL 的永久重定向，并提供用于完成响应的选项。
    ///</summary>
    ///  <param name="url">
    ///  要将请求重定向到其中的位置。
    ///</param>
    ///  <param name="endResponse">
    ///  若要终止响应，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="url" />
    ///  包括一个换行符 (\n)。
    ///</exception>
    procedure RedirectPermanent(url: string; endResponse: Boolean); overload;
    ///<summary>
    ///  将字符串写入 HTTP 响应输出流。
    ///</summary>
    ///  <param name="s">
    ///  要写入 HTTP 输出流的字符串。
    ///</param>
    procedure Write(s: string); overload;
    ///<summary>
    ///  将 <see cref="T:System.Object" />
    ///  写入 HTTP 响应流。
    ///</summary>
    ///  <param name="obj">
    ///  要写入 HTTP 输出流的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    procedure Write(obj: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将字符写入 HTTP 响应输出流。
    ///</summary>
    ///  <param name="ch">
    ///  要写入 HTTP 输出流的字符。
    ///</param>
    procedure Write(ch: Char); overload;
    ///<summary>
    ///  将字符数组写入 HTTP 响应输出流。
    ///</summary>
    ///  <param name="buffer">
    ///  要写入的字符数组。
    ///</param>
    ///  <param name="index">
    ///  字符数组中开始进行写入的位置。
    ///</param>
    ///  <param name="count">
    ///  从 <paramref name="index" />
    ///  开始的要写入的字符数。
    ///</param>
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    ///<summary>
    ///  将指定文件的内容作为文件块直接写入 HTTP 响应输出流。
    ///</summary>
    ///  <param name="filename">
    ///  要写入 HTTP 输出的文件名。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure WriteFile(filename: string); overload;
    ///<summary>
    ///  将指定的文件直接写入 HTTP 响应输出流，而不在内存中缓冲该文件。
    ///</summary>
    ///  <param name="filename">
    ///  要写入 HTTP 输出的文件名。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  参数是 <see langword="null" />
    ///</exception>
    procedure TransmitFile(filename: string); overload;
    ///<summary>
    ///  将文件的指定部分直接写入 HTTP 响应输出流，而不在内存中缓冲它。
    ///</summary>
    ///  <param name="filename">
    ///  要写入 HTTP 输出的文件名。
    ///</param>
    ///  <param name="offset">
    ///  文件中的位置，将从该位置开始将内容写入到 HTTP 输出中。
    ///</param>
    ///  <param name="length">
    ///  要传输的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="offset" />
    ///  参数小于零。
    ///  - 或 -
    ///  <paramref name="length" />
    ///  参数小于 -1。
    ///  - 或 -
    ///  <paramref name="length" />
    ///  参数指定的字节数超过了该文件包含减偏移量的字节数。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  不支持辅助进程外请求。
    ///  - 或 -
    ///  不使用响应 <see cref="T:System.Web.HttpWriter" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="offset" />
    ///  参数小于零或大于文件大小。
    ///  - 或 -
    ///  <paramref name="length" />
    ///  参数是否小于-1 或大于值 <paramref name="offset" />
    ///  参数加上文件的大小。
    ///</exception>
    procedure TransmitFile(filename: string; offset: Int64; length: Int64); overload;
    ///<summary>
    ///  将指定的文件直接写入 HTTP 响应输出流。
    ///</summary>
    ///  <param name="filename">
    ///  要写入 HTTP 输出流的文件名。
    ///</param>
    ///  <param name="offset">
    ///  文件中将开始进行写入的字节位置。
    ///</param>
    ///  <param name="size">
    ///  要写入输出流的字节数。
    ///</param>
    ///<exception cref="T:System.Web.HttpException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="size" />
    ///  大于文件大小减去 <paramref name="offset" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure WriteFile(filename: string; offset: Int64; size: Int64); overload;
    ///<summary>
    ///  将 HTTP 头添加到输出流。
    ///  提供 <see cref="M:System.Web.HttpResponse.AddHeader(System.String,System.String)" />
    ///  ，以便兼容 ASP 的早期版本。
    ///</summary>
    ///  <param name="name">
    ///  要将 <paramref name="value" />
    ///  添加到其中的 HTTP 标头的名称。
    ///</param>
    ///  <param name="value">
    ///  要添加到头中的字符串。
    ///</param>
    procedure AddHeader(name: string; value: string);
    ///<summary>
    ///  将当前所有缓冲的输出发送到客户端，停止该页的执行，并引发 <see cref="E:System.Web.HttpApplication.EndRequest" />
    ///  事件。
    ///</summary>
    ///<exception cref="T:System.Threading.ThreadAbortException">
    ///  对 <see cref="M:System.Web.HttpResponse.End" />
    ///  的调用已终止当前请求。
    ///</exception>
    procedure &End;
    ///<summary>
    ///  向客户端异步发送当前缓冲的所有输出。
    ///</summary>
    ///<returns>
    ///  表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />
    ///  。
    ///</returns>
    function FlushAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  将单个文件名添加到文件名集合中，当前响应依赖于该集合。
    ///</summary>
    ///  <param name="filename">
    ///  要添加的文件名。
    ///</param>
    procedure AddFileDependency(filename: string);
    ///<summary>
    ///  将一组文件名添加到文件名集合中，当前响应依赖于该集合。
    ///</summary>
    ///  <param name="filenames">
    ///  要添加的文件集合。
    ///</param>
    procedure AddFileDependencies(filenames: DDN.mscorlib.DNArrayList); overload;
    ///<summary>
    ///  将文件名数组添加到当前响应依赖的文件名集合中。
    ///</summary>
    ///  <param name="filenames">
    ///  要添加的文件数组。
    ///</param>
    procedure AddFileDependencies(filenames: TArray<string>); overload;
    ///<summary>
    ///  使缓存响应的有效性依赖于缓存中的其他项。
    ///</summary>
    ///  <param name="cacheKey">
    ///  缓存的响应所依赖的项的键。
    ///</param>
    procedure AddCacheItemDependency(cacheKey: string);
    ///<summary>
    ///  使缓存响应的有效性依赖于缓存中的其他项。
    ///</summary>
    ///  <param name="cacheKeys"><see cref="T:System.Collections.ArrayList" />
    ///  ，包含当前缓存的响应所依赖的项的键。
    ///</param>
    procedure AddCacheItemDependencies(cacheKeys: DDN.mscorlib.DNArrayList); overload;
    ///<summary>
    ///  使缓存项的有效性依赖于缓存中的另一项。
    ///</summary>
    ///  <param name="cacheKeys">
    ///  一个项键的数组，缓存响应依赖于这些项键。
    ///</param>
    procedure AddCacheItemDependencies(cacheKeys: TArray<string>); overload;
    ///<summary>
    ///  将一组缓存依赖项与响应关联，这样，如果响应存储在输出缓存中并且指定的依赖项发生变化，就可以使该响应失效。
    ///</summary>
    ///  <param name="dependencies">
    ///  要添加到应用程序依赖项列表的文件、缓存键或 <see cref="T:System.Web.Caching.CacheDependency" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dependencies" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此方法是太迟在缓存处理管道中之后, 调用已创建缓存的响应。
    ///</exception>
    procedure AddCacheDependency(dependencies: TArray<DNCacheDependency>);
    ///<summary>
    ///  将 HTTP <see langword="PICS-Label" />
    ///  标头追加到输出流。
    ///</summary>
    ///  <param name="value">
    ///  要添加到 <see langword="PICS-Label" />
    ///  标头的字符串。
    ///</param>
    procedure Pics(value: string);
    ///<summary>
    ///  使用路由参数值将请求重定向到新 URL。
    ///</summary>
    ///  <param name="routeValues">
    ///  路由参数值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有路由对应于指定的路由参数。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后尝试进行重定向。
    ///</exception>
    procedure RedirectToRoute(routeValues: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  使用路由参数值和路由名称将请求重定向到新 URL。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///  <param name="routeValues">
    ///  路由参数值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有路由对应于指定的路由参数。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后尝试进行重定向。
    ///</exception>
    procedure RedirectToRoute(routeName: string; routeValues: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  使用路由参数值执行从所请求 URL 到新 URL 的永久重定向。
    ///</summary>
    ///  <param name="routeValues">
    ///  路由参数值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有路由对应于指定的路由参数。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后尝试进行重定向。
    ///</exception>
    procedure RedirectToRoutePermanent(routeValues: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  使用路由参数值以及与新 URL 对应的路由的名称执行从所请求 URL 到新 URL 的永久重定向。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///  <param name="routeValues">
    ///  路由参数值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有路由对应于指定的路由参数。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送的 HTTP 标头之后尝试进行重定向。
    ///</exception>
    procedure RedirectToRoutePermanent(routeName: string; routeValues: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将指定文件的内容作为内存块直接写入 HTTP 响应输出流。
    ///</summary>
    ///  <param name="filename">
    ///  要写入内存块的文件名。
    ///</param>
    ///  <param name="readIntoMemory">
    ///  指示是否将把文件写入内存块。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure WriteFile(filename: string; readIntoMemory: Boolean); overload;
    ///<summary>
    ///  将指定的文件直接写入 HTTP 响应输出流。
    ///</summary>
    ///  <param name="fileHandle">
    ///  要写入 HTTP 输出流的文件的文件句柄。
    ///</param>
    ///  <param name="offset">
    ///  文件中将开始进行写入的字节位置。
    ///</param>
    ///  <param name="size">
    ///  要写入输出流的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileHandler" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Web.HttpException"><paramref name="offset" />
    ///  小于 0。
    ///  - 或 -
    ///  <paramref name="size" />
    ///  大于文件大小减去 <paramref name="offset" />
    ///  。
    ///</exception>
    procedure WriteFile(fileHandle: IntPtr; offset: Int64; size: Int64); overload;
    ///<summary>
    ///  此 API 用于支持将推送承诺发送到 HTTP 2.0 客户端的应用程序。
    ///  您可以找到更多详细信息有关 Http2 服务器推送到 HTTP/2 Specification Section 8.2: Server Push。
    ///</summary>
    ///  <param name="path">
    ///  推送请求的 URL。
    ///  它应为服务器想要推送到客户端的相对资源的虚拟路径。
    ///</param>
    procedure PushPromise(path: string); overload;
    ///<summary>
    ///  此 API 用于支持将推送承诺发送到 HTTP 2.0 客户端的应用程序。
    ///  您可以找到更多详细信息有关 Http2 服务器推送到 HTTP/2 Specification Section 8.2: Server Push。
    ///</summary>
    ///  <param name="path">
    ///  推送请求的 URL。
    ///  它应为服务器想要推送到客户端的相对资源的虚拟路径。
    ///</param>
    ///  <param name="method">
    ///  将由推送请求使用的 http 请求方法。
    ///</param>
    ///  <param name="headers">
    ///  将由推送请求使用的 http 请求头。
    ///</param>
    procedure PushPromise(path: string; method: string; headers: DNNameValueCollection); overload;
    ///<summary>
    ///  清除缓冲区流中的所有头。
    ///</summary>
    ///<exception cref="T:System.Web.HttpException">
    ///  标头会清除已发送的 HTTP 标头之后。
    ///</exception>
    procedure ClearHeaders;
    ///<summary>
    ///  如果会话正在使用 <see cref="P:System.Web.Configuration.SessionStateSection.Cookieless" />
    ///  会话状态，则将会话 ID 添加到虚拟路径中，并返回组合路径。
    ///  如果不使用 <see cref="P:System.Web.Configuration.SessionStateSection.Cookieless" />
    ///  会话状态，则 <see cref="M:System.Web.HttpResponse.ApplyAppPathModifier(System.String)" />
    ///  将返回原始虚拟路径。
    ///</summary>
    ///  <param name="virtualPath">
    ///  资源的虚拟路径。
    ///</param>
    ///<returns>
    ///  已插入会话 ID 的 <paramref name="virtualPath" />
    ///  。
    ///</returns>
    function ApplyAppPathModifier(virtualPath: string): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  [仅在 .NET Framework 4.5.2 及更高版本中受支持]
    ///  获取指示是否已写入响应标头的值。
    ///</summary>
    ///<returns>
    ///  如果已写入响应标头，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HeadersWritten: Boolean read get_HeadersWritten;
    ///<summary>
    ///  获取指示集合是否支持异步刷新操作的值。
    ///</summary>
    ///<returns>
    ///  如果连接支持异步刷新操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SupportsAsyncFlush: Boolean read get_SupportsAsyncFlush;
    ///<summary>
    ///  获取响应 cookie 集合。
    ///</summary>
    ///<returns>
    ///  响应 cookie 集合。
    ///</returns>
    property Cookies: DNHttpCookieCollection read get_Cookies;
    ///<summary>
    ///  获取响应标头的集合。
    ///</summary>
    ///<returns>
    ///  响应标头的 <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  该操作要求使用 IIS 7.0 中的集成管道模式，并且 .NET Framework 至少为 3.0 版。
    ///</exception>
    property Headers: DNNameValueCollection read get_Headers;
    ///<summary>
    ///  获取或设置返回给客户端的输出的 HTTP 状态代码。
    ///</summary>
    ///<returns>
    ///  表示返回到客户端的 HTTP 输出状态的整数。
    ///  默认值为 200 (OK)。
    ///  有关有效状态代码的列表，请参阅 Http Status Codes。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException"><see cref="P:System.Web.HttpResponse.StatusCode" />
    ///  已发送的 HTTP 标头之后设置。
    ///</exception>
    property StatusCode: Int32 read get_StatusCode write set_StatusCode;
    ///<summary>
    ///  获取或设置限定响应的状态代码的值。
    ///</summary>
    ///<returns>
    ///  表示 IIS 7.0 子状态代码的整数值。
    ///</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  该操作要求使用 IIS 7.0 中的集成管道模式，并且 .NET Framework 至少为 3.0 版。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  已发送所有 HTTP 标头之后设置的状态代码。
    ///</exception>
    property SubStatusCode: Int32 read get_SubStatusCode write set_SubStatusCode;
    ///<summary>
    ///  获取或设置返回给客户端的输出的 HTTP 状态字符串。
    ///</summary>
    ///<returns>
    ///  描述返回到客户端的 HTTP 输出的状态的字符串。
    ///  默认值为 "OK"。
    ///  有关有效状态代码的列表，请参阅 Http Status Codes。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException"><paramref name="StatusDescription" />
    ///  已发送的 HTTP 标头之后设置。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  所选的值有一个长度大于 512。
    ///</exception>
    property StatusDescription: string read get_StatusDescription write set_StatusDescription;
    ///<summary>
    ///  获取或设置指定是否禁用 IIS 7.0 自定义错误的值。
    ///</summary>
    ///<returns>
    ///  若要禁用 IIS 自定义错误，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property TrySkipIisCustomErrors: Boolean read get_TrySkipIisCustomErrors write set_TrySkipIisCustomErrors;
    ///<summary>
    ///  获取或设置指定重定向至登录页的 forms 身份验证是否应取消的值。
    ///</summary>
    ///<returns>
    ///  如果应取消窗体身份认证重定向，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SuppressFormsAuthenticationRedirect: Boolean read get_SuppressFormsAuthenticationRedirect write set_SuppressFormsAuthenticationRedirect;
    ///<summary>
    ///  [仅在 .NET Framework 4.5.2 及更高版本中受支持]
    ///  获取或设置指示是否取消当前 HTTP 响应的默认 Cache Control: private 标头的值。
    ///</summary>
    ///<returns>
    ///  若要取消当前 HTTP 响应的默认 Cache Control: private 标头，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SuppressDefaultCacheControlHeader: Boolean read get_SuppressDefaultCacheControlHeader write set_SuppressDefaultCacheControlHeader;
    ///<summary>
    ///  获取或设置一个值，该值指示是否缓冲输出并在处理完整个页之后发送它。
    ///</summary>
    ///<returns>
    ///  如果缓冲了发送到客户端的输出，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property BufferOutput: Boolean read get_BufferOutput write set_BufferOutput;
    ///<summary>
    ///  获取或设置输出流的 HTTP MIME 类型。
    ///</summary>
    ///<returns>
    ///  输出流的 HTTP MIME 类型。
    ///  默认值为“<see langword="text/html" />
    ///  ”。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException"><see cref="P:System.Web.HttpResponse.ContentType" />
    ///  属性设置为 <see langword="null" />
    ///  。
    ///</exception>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  获取或设置输出流的 HTTP 字符集。
    ///</summary>
    ///<returns>
    ///  输出流的 HTTP 字符集。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException"><see langword="Charset" />
    ///  属性已设置后在发送标头。
    ///</exception>
    property Charset: string read get_Charset write set_Charset;
    ///<summary>
    ///  获取或设置输出流的 HTTP 字符集。
    ///</summary>
    ///<returns>
    ///  包含当前响应的字符集相关信息的 <see cref="T:System.Text.Encoding" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试将 <see cref="P:System.Web.HttpResponse.ContentEncoding" />
    ///  设置为 <see langword="null" />
    ///  。
    ///</exception>
    property ContentEncoding: DDN.mscorlib.DNEncoding read get_ContentEncoding write set_ContentEncoding;
    ///<summary>
    ///  获取或设置表示当前标头输出流的编码的 <see cref="T:System.Text.Encoding" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  包含当前标头的字符集相关信息的 <see cref="T:System.Text.Encoding" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  编码值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  编码值为 <see cref="P:System.Text.Encoding.Unicode" />
    ///  。
    ///  - 或 -
    ///  已发送标头。
    ///</exception>
    property HeaderEncoding: DDN.mscorlib.DNEncoding read get_HeaderEncoding write set_HeaderEncoding;
    ///<summary>
    ///  获取网页的缓存策略(例如，过期时间、保密性设置和变化条款)。
    ///</summary>
    ///<returns>
    ///  包含当前响应的缓存策略相关信息的 <see cref="T:System.Web.HttpCachePolicy" />
    ///  对象。
    ///</returns>
    property Cache: DNHttpCachePolicy read get_Cache;
    ///<summary>
    ///  获取指示客户端是否仍连接在服务器上的值。
    ///</summary>
    ///<returns>
    ///  如果客户端当前仍在连接，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClientConnected: Boolean read get_IsClientConnected;
    ///<summary>
    ///  获取客户端断开连接时触发的 <see cref="T:System.Threading.CancellationToken" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  取消标记。
    ///</returns>
    property ClientDisconnectedToken: DDN.mscorlib.DNCancellationToken read get_ClientDisconnectedToken;
    ///<summary>
    ///  获取指示客户端是否正在被传输到新位置的布尔值。
    ///</summary>
    ///<returns>
    ///  如果位置响应标头的值与当前位置不同，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsRequestBeingRedirected: Boolean read get_IsRequestBeingRedirected;
    ///<summary>
    ///  获取或设置 HTTP <see langword="Location" />
    ///  标头的值。
    ///</summary>
    ///<returns>
    ///  通过 HTTP <see langword="Location" />
    ///  标头传输到客户端的绝对 URI。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException">
    ///  HTTP 标头都已写入。
    ///</exception>
    property RedirectLocation: string read get_RedirectLocation write set_RedirectLocation;
    ///<summary>
    ///  实现到传出 HTTP 响应流的文本输出。
    ///</summary>
    ///<returns>
    ///  实现到客户端的自定义输出的 <see cref="T:System.IO.TextWriter" />
    ///  对象。
    ///</returns>
    property Output: DDN.mscorlib.DNTextWriter read get_Output write set_Output;
    ///<summary>
    ///  实现到传出 HTTP 内容主体的二进制输出。
    ///</summary>
    ///<returns>
    ///  表示传出 HTTP 内容主体的原始内容的 IO <see cref="T:System.IO.Stream" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException"><paramref name="OutputStream" />
    ///  将不可用。
    ///</exception>
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream;
    ///<summary>
    ///  获取或设置一个包装筛选器对象，该对象用于在传输之前修改 HTTP 实体主体。
    ///</summary>
    ///<returns>
    ///  作为输出筛选器的 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException">
    ///  不允许与实体进行筛选。
    ///</exception>
    property Filter: DDN.mscorlib.DNStream read get_Filter write set_Filter;
    ///<summary>
    ///  获取或设置指示是否将 HTTP 内容发送到客户端的值。
    ///</summary>
    ///<returns>
    ///  若要取消输出，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SuppressContent: Boolean read get_SuppressContent write set_SuppressContent;
    ///<summary>
    ///  设置返回到客户端的 <see langword="Status" />
    ///  行。
    ///</summary>
    ///<returns>
    ///  设置状态代码会使描述 HTTP 输出状态的字符串返回到客户端。
    ///  默认值为 200 (OK)。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException">
    ///  状态设置为无效的状态代码。
    ///</exception>
    property Status: string read get_Status write set_Status;
    ///<summary>
    ///  获取或设置一个值，该值指示是否缓冲输出并在处理完整个响应之后发送它。
    ///</summary>
    ///<returns>
    ///  如果缓冲了发送到客户端的输出，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Buffer: Boolean read get_Buffer write set_Buffer;
    ///<summary>
    ///  获取或设置在浏览器上缓存的页过期之前的分钟数。
    ///  如果用户在页面过期之前返回到该页，则显示缓存的版本。
    ///  提供 <see cref="P:System.Web.HttpResponse.Expires" />
    ///  ，以便兼容 ASP 的早期版本。
    ///</summary>
    ///<returns>
    ///  在页过期之前的分钟数。
    ///</returns>
    property Expires: Int32 read get_Expires write set_Expires;
    ///<summary>
    ///  获取或设置从缓存中移删除缓存信息的绝对日期和时间。
    ///  提供 <see cref="P:System.Web.HttpResponse.ExpiresAbsolute" />
    ///  ，以便兼容 ASP 的早期版本。
    ///</summary>
    ///<returns>
    ///  该页过期时的日期和时间。
    ///</returns>
    property ExpiresAbsolute: DDN.mscorlib.DNDateTime read get_ExpiresAbsolute write set_ExpiresAbsolute;
    ///<summary>
    ///  获取或设置与 <see cref="T:System.Web.HttpCacheability" />
    ///  枚举值之一匹配的 <see langword="Cache-Control" />
    ///  HTTP 标头。
    ///</summary>
    ///<returns><see cref="T:System.Web.HttpCacheability" />
    ///  枚举值的字符串表示形式。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的字符串值不匹配的一个 <see cref="T:System.Web.HttpCacheability" />
    ///  枚举值。
    ///</exception>
    property CacheControl: string read get_CacheControl write set_CacheControl;
  end;

  TDNHttpResponse = class(TDNGenericImport<DNHttpResponseClass, DNHttpResponse>) end;

  //-------------namespace: System.Web----------------
  ///<summary>
  ///  表示由对象实现的并且可用来取消订阅侦听器的接口。
  ///</summary>
  [DNTypeName('System.Web.ISubscriptionToken')]
  DNISubscriptionToken = interface(DDN.mscorlib.DNObject)
  ['{54AC8CE6-A609-3938-BC6B-F36062A5D213}']
  { getters & setters } 

    function get_IsActive: Boolean;

  { methods } 

    ///<summary>
    ///  取消订阅事件侦听器。
    ///</summary>
    procedure Unsubscribe;

  { propertys } 

    ///<summary>
    ///  返回一个值，该值指示订阅是否处于当前处于活动状态。
    ///</summary>
    ///<returns><see langword="true" />
    ///  当该订阅是当前处于活动状态;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsActive: Boolean read get_IsActive;
  end;

  //-------------namespace: System.Web.Routing----------------
  DNRouteValueDictionaryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A31D8D24-3CAB-5E80-B035-F49AC28F8BFF}']
  { constructors } 

    ///<summary>
    ///  初始化为空的 <see cref="T:System.Web.Routing.RouteValueDictionary" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRouteValueDictionary; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Routing.RouteValueDictionary" />
    ///  类的新实例，并添加基于指定对象的属性的值。
    ///</summary>
    ///  <param name="values">
    ///  一个对象，其中包含将作为元素添加到新集合的属性。
    ///</param>
    {class} function init(values: DDN.mscorlib.DNObject): DNRouteValueDictionary; overload;
    {class} function init(dictionary: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject>): DNRouteValueDictionary; overload;

  end;

  ///<summary>
  ///  表示在路由框架的不同位置中使用的不区分大小写的键/值对集合，例如定义路由的默认值或者生成基于路由的 URL 时使用的集合。
  ///</summary>
  [DNTypeName('System.Web.Routing.RouteValueDictionary')]
  DNRouteValueDictionary = interface(DDN.mscorlib.DNObject)
  ['{C836065B-DCBC-327A-80AE-02D1995D259F}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  确定字典是否包含指定键。
    ///</summary>
    ///  <param name="key">
    ///  要在字典中查找的键。
    ///</param>
    ///<returns>
    ///  如果字典包含具有指定键的元素，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ContainsKey(key: string): Boolean;
    ///<summary>
    ///  确定字典是否包含特定值。
    ///</summary>
    ///  <param name="value">
    ///  要在字典中查找的值。
    ///</param>
    ///<returns>
    ///  如果字典包含具有指定值的元素，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ContainsValue(value: DDN.mscorlib.DNObject): Boolean;
    function TryGetValue(key: string; out value: DDN.mscorlib.DNObject): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中键/值对的数目。
    ///</summary>
    ///<returns>
    ///  集合中键/值对的数目。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNRouteValueDictionary = class(TDNGenericImport<DNRouteValueDictionaryClass, DNRouteValueDictionary>) end;

  //-------------namespace: System.Web.UI----------------
  DNAttributeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3F5A4A22-1B80-578F-9982-0BE4C3DE65B0}']
  end;

  ///<summary>
  ///  提供对 ASP.NET 服务器控件元素的开始标记中声明的所有特性的对象模型访问。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.AttributeCollection')]
  DNAttributeCollection = interface(DDN.mscorlib.DNObject)
  ['{1D2ED0A7-B7B9-34A6-9B42-B740C6FF6347}']
  { getters & setters } 

    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Count: Int32;
    function get_CssStyle: DNCssStyleCollection;

  { methods } 

    ///<summary>
    ///  确定是否的当前实例 <see cref="T:System.Web.UI.AttributeCollection" />
    ///  对象是否等于指定的对象。
    ///</summary>
    ///  <param name="o">
    ///  要与此实例进行比较的对象实例。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果中包含的对象 <paramref name="o" />
    ///  参数是否等于当前实例的 <see cref="T:System.Web.UI.AttributeCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  从一个服务器控件中移除所有特性 <see cref="T:System.Web.UI.AttributeCollection" />
    ///  对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  将写入指定的特性集合 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  集合所属的控件的输出流。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  将写入当前的输出流的属性集合的实例。
    ///</param>
    procedure Render(writer: DNHtmlTextWriter);
    ///<summary>
    ///  将属性从添加 <see cref="T:System.Web.UI.AttributeCollection" />
    ///  类 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  负责呈现属性作为标记的对象。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  给 ASP.NET 服务器控件的开始标记写入属性的实例。
    ///</param>
    procedure AddAttributes(writer: DNHtmlTextWriter);
    ///<summary>
    ///  将属性添加到服务器控件的 <see cref="T:System.Web.UI.AttributeCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="key">
    ///  特性名称。
    ///</param>
    ///  <param name="value">
    ///  特性值。
    ///</param>
    procedure Add(key: string; value: string);
    ///<summary>
    ///  从一个服务器控件中删除属性 <see cref="T:System.Web.UI.AttributeCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="key">
    ///  要移除的属性的名称。
    ///</param>
    procedure Remove(key: string);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: string]: string read get_Item write set_Item; default;
    ///<summary>
    ///  获取服务器控件中的所有属性的键的集合 <see cref="T:System.Web.UI.AttributeCollection" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  键集合。
    ///</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>
    ///  获取中的属性数 <see cref="T:System.Web.UI.AttributeCollection" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  集合中项的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取到的 ASP.NET 服务器控件的样式集合当前 <see cref="T:System.Web.UI.AttributeCollection" />
    ///  对象所属。
    ///</summary>
    ///<returns>
    ///  一个包含当前的服务器控件的样式的集合。
    ///</returns>
    property CssStyle: DNCssStyleCollection read get_CssStyle;
  end;

  TDNAttributeCollection = class(TDNGenericImport<DNAttributeCollectionClass, DNAttributeCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNControlClass = interface(DDN.mscorlib.DNObjectClass)
  ['{96BEFB69-B902-5300-AFDF-3319823A1430}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.Control" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNControl;

  end;

  ///<summary>
  ///  定义由所有 ASP.NET 服务器控件共享的属性、方法和事件。
  ///</summary>
  [DNTypeName('System.Web.UI.Control')]
  DNControl = interface(DDN.mscorlib.DNObject)
  ['{DA038958-9C9F-39E2-B803-AEAF33629A0B}']
  { getters & setters } 

    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  获取对应于一组路由参数的 URL。
    ///</summary>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  与指定的路由参数对应的 URL。
    ///</returns>
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    ///<summary>
    ///  获取对应于一组路由参数和路由名称的 URL。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  将指定的路由参数和路由名称对应的 URL。
    ///</returns>
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    ///<summary>
    ///  将应用到该控件的页样式表中定义的样式属性。
    ///</summary>
    ///  <param name="page"><see cref="T:System.Web.UI.Page" />
    ///  包含该控件。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  已应用了样式表。
    ///</exception>
    procedure ApplyStyleSheetSkin(page: DNPage);
    ///<summary>
    ///  将数据源绑定到调用的服务器控件及其所有子控件。
    ///</summary>
    procedure DataBind;
    ///<summary>
    ///  设置输入焦点移到控件。
    ///</summary>
    procedure Focus;
    ///<summary>
    ///  输出到提供的服务器控件内容 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象，如果启用了跟踪将存储有关控件的跟踪信息。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  接收控件内容的对象。
    ///</param>
    procedure RenderControl(writer: DNHtmlTextWriter);
    ///<summary>
    ///  使服务器控件以从内存中释放之前执行最后的清理。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将 URL 转换成一个请求的客户端上可用。
    ///</summary>
    ///  <param name="relativeUrl">
    ///  与 URL 关联 <see cref="P:System.Web.UI.Control.TemplateSourceDirectory" />
    ///  属性。
    ///</param>
    ///<returns>
    ///  转换后的 URL。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  如果则会发生 <paramref name="relativeUrl" />
    ///  参数包含 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveUrl(relativeUrl: string): string;
    ///<summary>
    ///  获取可由浏览器的 URL。
    ///</summary>
    ///  <param name="relativeUrl">
    ///  相对于当前页面 URL。
    ///</param>
    ///<returns>
    ///  适用于在浏览器上使用指定的资源完全限定的 URL。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relativeUrl" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveClientUrl(relativeUrl: string): string;
    ///<summary>
    ///  使用指定的服务器控件当前命名容器中搜索 <paramref name="id" />
    ///  参数。
    ///</summary>
    ///  <param name="id">
    ///  控件要查找的标识符。
    ///</param>
    ///<returns>
    ///  指定的控件，或 <see langword="null" />
    ///  如果指定的控件不存在。
    ///</returns>
    function FindControl(id: string): DNControl;
    ///<summary>
    ///  确定服务器控件是否包含任何子控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果控件包含其他控件，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasControls: Boolean;
    ///<summary>
    ///  设置跟踪为设计时呈现的数据的跟踪、 使用的跟踪数据键和跟踪数据值的数据。
    ///</summary>
    ///  <param name="traceDataKey">
    ///  跟踪数据键。
    ///</param>
    ///  <param name="traceDataValue">
    ///  跟踪数据的值。
    ///</param>
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  设置跟踪为设计时呈现的数据的跟踪，请使用跟踪的对象、 跟踪数据键和跟踪数据值的数据。
    ///</summary>
    ///  <param name="tracedObject">
    ///  跟踪的对象。
    ///</param>
    ///  <param name="traceDataKey">
    ///  跟踪数据键。
    ///</param>
    ///  <param name="traceDataValue">
    ///  跟踪数据的值。
    ///</param>
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  获取对应于一组路由参数的 URL。
    ///</summary>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  与指定的路由参数对应的 URL。
    ///</returns>
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  获取对应于一组路由参数和路由名称的 URL。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  将指定的路由参数和路由名称对应的 URL。
    ///</returns>
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  返回前缀的部分 <see cref="P:System.Web.UI.Control.UniqueID" />
    ///  指定控件的属性。
    ///</summary>
    ///  <param name="control">
    ///  一个位于命名容器内的控件。
    ///</param>
    ///<returns>
    ///  前缀的部分 <see cref="P:System.Web.UI.Control.UniqueID" />
    ///  指定控件的属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="control" />
    ///  的 <see cref="P:System.Web.UI.Control.NamingContainer" />
    ///  属性为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="control" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetUniqueIDRelativeTo(control: DNControl): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于生成的值的算法 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个值，指示如何 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  生成属性。
    ///  默认值为 <see cref="F:System.Web.UI.ClientIDMode.Inherit" />
    ///  。
    ///</returns>
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    ///<summary>
    ///  获取由 ASP.NET 生成的 HTML 标记的控件 ID。
    ///</summary>
    ///<returns>
    ///  由 ASP.NET 生成的 HTML 标记的控件 ID。
    ///</returns>
    property ClientID: string read get_ClientID;
    ///<summary>
    ///  获取或设置分配给服务器控件的编程标识符。
    ///</summary>
    ///<returns>
    ///  分配给控件的编程标识符。
    ///</returns>
    property ID: string read get_ID write set_ID;
    ///<summary>
    ///  获取或设置一个值，该值指示是否将主题应用到此控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要使用的主题;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see langword="Page_PreInit" />
    ///  事件已发生。
    ///  - 或 -
    ///  该控件已添加到 <see langword="Controls" />
    ///  集合。
    ///</exception>
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    ///<summary>
    ///  获取或设置要应用于控件的外观。
    ///</summary>
    ///<returns>
    ///  要应用于控件外观的名称。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  已应用了样式表。
    ///  - 或 -
    ///<see langword="Page_PreInit" />
    ///  事件已发生。
    ///  - 或 -
    ///  该控件已添加到 <see langword="Controls" />
    ///  集合。
    ///</exception>
    property SkinID: string read get_SkinID write set_SkinID;
    ///<summary>
    ///  获取或设置一个值，该值指示服务器控件是否向发出请求的客户端保持自己的视图状态以及它所包含的任何子控件的视图状态。
    ///</summary>
    ///<returns>
    ///  如果服务器控件保持其视图状态，则否 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    ///<summary>
    ///  获取或设置此控件的视图状态模式。
    ///</summary>
    ///<returns>
    ///  此控件的视图状态模式。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  尝试将此属性设置为一个值，将不在 <see cref="T:System.Web.UI.ViewStateMode" />
    ///  枚举。
    ///</exception>
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    ///<summary>
    ///  获取对服务器控件的引用的命名容器，这将创建唯一的命名空间区分具有相同的服务器控件 <see cref="P:System.Web.UI.Control.ID" />
    ///  属性值。
    ///</summary>
    ///<returns>
    ///  服务器控件的命名容器。
    ///</returns>
    property NamingContainer: DNControl read get_NamingContainer;
    ///<summary>
    ///  获取包含该控件的数据绑定的控件。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.Control" />
    ///  ，其中包含该控件的数据绑定。
    ///</returns>
    property BindingContainer: DNControl read get_BindingContainer;
    ///<summary>
    ///  获取命名容器的引用，如果命名容器实现 <see cref="T:System.Web.UI.IDataItemContainer" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名容器。
    ///  层次结构的命名容器的实现中 <see cref="T:System.Web.UI.IDataItemContainer" />
    ///  , ，此属性返回的命名容器层次结构中，顶部或 <see langword="null" />
    ///  如果当前 <see cref="T:System.Web.UI.Control" />
    ///  对象不在命名容器实现 <see cref="T:System.Web.UI.IDataItemContainer" />
    ///  。
    ///</returns>
    property DataItemContainer: DNControl read get_DataItemContainer;
    ///<summary>
    ///  获取命名容器的引用，如果命名容器实现 <see cref="T:System.Web.UI.IDataKeysControl" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名容器。
    ///  层次结构的命名容器的实现中 <see cref="T:System.Web.UI.IDataKeysControl" />
    ///  , ，该属性返回的命名容器层次结构中，顶部或 <see langword="null" />
    ///  如果当前 <see cref="T:System.Web.UI.Control" />
    ///  对象不在命名容器实现 <see cref="T:System.Web.UI.IDataKeysControl" />
    ///  。
    ///</returns>
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.Page" />
    ///  包含服务器控件的实例。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.Page" />
    ///  包含服务器控件的实例。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该控件是 <see cref="T:System.Web.UI.WebControls.Substitution" />
    ///  控件。
    ///</exception>
    property Page: DNPage read get_Page write set_Page;
    ///<summary>
    ///  获取一个值，指定将与兼容呈现 HTML 的 ASP.NET 版本。
    ///</summary>
    ///<returns>
    ///  HTML 呈现的 ASP.NET 版本将与兼容。
    ///</returns>
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    ///<summary>
    ///  获取或设置对包含该控件模板的引用。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.TemplateControl" />
    ///  包含该控件的实例。
    ///</returns>
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    ///<summary>
    ///  页面控件层次结构中获取对服务器控件的父控件的引用。
    ///</summary>
    ///<returns>
    ///  对服务器控件的父控件的引用。
    ///</returns>
    property Parent: DNControl read get_Parent;
    ///<summary>
    ///  获取虚拟目录的 <see cref="T:System.Web.UI.Page" />
    ///  或 <see cref="T:System.Web.UI.UserControl" />
    ///  ，其中包含当前的服务器控件。
    ///</summary>
    ///<returns>
    ///  包含服务器控件的页面或用户控件的虚拟目录。
    ///</returns>
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    ///<summary>
    ///  获取或设置相对于应用程序虚拟目录的 <see cref="T:System.Web.UI.Page" />
    ///  或 <see cref="T:System.Web.UI.UserControl" />
    ///  对象，其中包含此控件。
    ///</summary>
    ///<returns>
    ///  包含此控件的页面或用户控件相对于应用程序虚拟目录。
    ///</returns>
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    ///<summary>
    ///  获取承载在设计图面上呈现时的当前控件的容器相关信息。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.ISite" />
    ///  包含有关控件承载在容器的信息。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该控件是 <see cref="T:System.Web.UI.WebControls.Substitution" />
    ///  控件。
    ///</exception>
    property Site: DNISite read get_Site write set_Site;
    ///<summary>
    ///  获取或设置一个值，该值指示服务器控件是否作为 UI 呈现在页上。
    ///</summary>
    ///<returns>
    ///  如果控件在页上可见，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Visible: Boolean read get_Visible write set_Visible;
    ///<summary>
    ///  获取服务器控件的唯一的分层限定标识符。
    ///</summary>
    ///<returns>
    ///  服务器控件的完全限定的标识符。
    ///</returns>
    property UniqueID: string read get_UniqueID;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.ControlCollection" />
    ///  表示 UI 层次结构中的指定的服务器控件的子控件的对象。
    ///</summary>
    ///<returns>
    ///  指定服务器控件的子控件的集合。
    ///</returns>
    property Controls: DNControlCollection read get_Controls;
    ///<summary>
    ///  获取或设置一个值，该值指示控件是否检查潜在危险值在浏览器中的客户端输入。
    ///</summary>
    ///<returns>
    ///  确定控件是否检查客户端输入一个值。
    ///  值可以包括 <see cref="F:System.Web.UI.ValidateRequestMode.Disabled" />
    ///  , ，<see cref="F:System.Web.UI.ValidateRequestMode.Enabled" />
    ///  , ，和 <see cref="F:System.Web.UI.ValidateRequestMode.Inherit" />
    ///  。
    ///  默认值是 <see cref="F:System.Web.UI.ValidateRequestMode.Inherit" />
    ///  , ，这意味着该控件从其父级获取的值。
    ///</returns>
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNControl = class(TDNGenericImport<DNControlClass, DNControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNTemplateControlClass = interface(DNControlClass)
  ['{E884837D-C252-551A-92FF-4EB2A30B1ABB}']
  { static methods } 

    ///<summary>
    ///  读取的字符串资源。
    ///<see cref="M:System.Web.UI.TemplateControl.ReadStringResource(System.Type)" />
    ///  方法不是从您的代码中使用。
    ///</summary>
    ///  <param name="t"><see cref="T:System.Type" />
    ///  要读取的资源。
    ///</param>
    ///<returns>
    ///  表示资源的对象。
    ///</returns>
    {class} function ReadStringResource(t: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;

  end;

  ///<summary>
  ///  向 <see cref="T:System.Web.UI.Page" />
  ///  类和 <see cref="T:System.Web.UI.UserControl" />
  ///  类提供了功能的基本集合。
  ///</summary>
  [DNTypeName('System.Web.UI.TemplateControl')]
  DNTemplateControl = interface(DNControl)
  ['{41E5507A-1EB6-3017-8620-7A186E7AFC76}']
  { getters & setters } 

    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_AppRelativeVirtualPath: string;
    procedure set_AppRelativeVirtualPath(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_Error(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Error(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  读取的字符串资源。
    ///<see cref="M:System.Web.UI.TemplateControl.ReadStringResource" />
    ///  方法不是从您的代码中使用。
    ///</summary>
    ///<returns>
    ///  表示资源的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><see cref="M:System.Web.UI.TemplateControl.ReadStringResource" />
    ///  不再受支持。
    ///</exception>
    function ReadStringResource: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  返回一个布尔值，该值指示是否设备筛选器适用于 HTTP 请求。
    ///</summary>
    ///  <param name="filterName">
    ///  要测试的浏览器名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果客户端浏览器中指定 <paramref name="filterName" />
    ///  等同于指定的浏览器; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    function TestDeviceFilter(filterName: string): Boolean;
    ///<summary>
    ///  加载 <see cref="T:System.Web.UI.Control" />
    ///  对象从文件基于指定的虚拟路径。
    ///</summary>
    ///  <param name="virtualPath">
    ///  控制文件的虚拟路径。
    ///</param>
    ///<returns>
    ///  返回指定 <see cref="T:System.Web.UI.Control" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  虚拟路径是 <see langword="null" />
    ///  或为空。
    ///</exception>
    function LoadControl(virtualPath: string): DNControl; overload;
    ///<summary>
    ///  加载 <see cref="T:System.Web.UI.Control" />
    ///  对象根据指定的类型和构造函数参数。
    ///</summary>
    ///  <param name="t">
    ///  控件的类型。
    ///</param>
    ///  <param name="parameters">
    ///  与要调用构造函数的参数数量、顺序和类型匹配的参数数组。
    ///  如果 <paramref name="parameters" />
    ///  为空数组或 <see langword="null" />
    ///  ，则调用不带任何参数的构造函数（默认构造函数）。
    ///</param>
    ///<returns>
    ///  返回指定 <see cref="T:System.Web.UI.UserControl" />
    ///  。
    ///</returns>
    function LoadControl(t: DDN.mscorlib.DNType; parameters: TArray<DDN.mscorlib.DNObject>): DNControl; overload;
    ///<summary>
    ///  获取实例 <see cref="T:System.Web.UI.ITemplate" />
    ///  来自外部文件的接口。
    ///</summary>
    ///  <param name="virtualPath">
    ///  用户控件文件的虚拟路径。
    ///</param>
    ///<returns>
    ///  指定模板的一个实例。
    ///</returns>
    function LoadTemplate(virtualPath: string): DNITemplate;
    ///<summary>
    ///  将输入的字符串分析 <see cref="T:System.Web.UI.Control" />
    ///  Web 窗体页面或用户控件上的对象。
    ///</summary>
    ///  <param name="content">
    ///  一个字符串，包含用户控件。
    ///</param>
    ///<returns>
    ///  已分析 <see cref="T:System.Web.UI.Control" />
    ///  。
    ///</returns>
    function ParseControl(content: string): DNControl; overload;
    ///<summary>
    ///  将输入的字符串分析 <see cref="T:System.Web.UI.Control" />
    ///  ASP.NET Web 页面或用户控件上的对象。
    ///</summary>
    ///  <param name="content">
    ///  一个字符串，包含用户控件。
    ///</param>
    ///  <param name="ignoreParserFilter">
    ///  一个值，指定是否忽略分析器筛选器。
    ///</param>
    ///<returns>
    ///  已分析的控件。
    ///</returns>
    function ParseControl(content: string; ignoreParserFilter: Boolean): DNControl; overload;
    ///<summary>
    ///  获取对应于一组路由参数的 URL。
    ///</summary>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  与指定的路由参数对应的 URL。
    ///</returns>
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    ///<summary>
    ///  获取对应于一组路由参数和路由名称的 URL。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  将指定的路由参数和路由名称对应的 URL。
    ///</returns>
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    ///<summary>
    ///  将应用到该控件的页样式表中定义的样式属性。
    ///</summary>
    ///  <param name="page"><see cref="T:System.Web.UI.Page" />
    ///  包含该控件。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  已应用了样式表。
    ///</exception>
    procedure ApplyStyleSheetSkin(page: DNPage);
    ///<summary>
    ///  将数据源绑定到调用的服务器控件及其所有子控件。
    ///</summary>
    procedure DataBind;
    ///<summary>
    ///  设置输入焦点移到控件。
    ///</summary>
    procedure Focus;
    ///<summary>
    ///  输出到提供的服务器控件内容 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象，如果启用了跟踪将存储有关控件的跟踪信息。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  接收控件内容的对象。
    ///</param>
    procedure RenderControl(writer: DNHtmlTextWriter);
    ///<summary>
    ///  使服务器控件以从内存中释放之前执行最后的清理。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将 URL 转换成一个请求的客户端上可用。
    ///</summary>
    ///  <param name="relativeUrl">
    ///  与 URL 关联 <see cref="P:System.Web.UI.Control.TemplateSourceDirectory" />
    ///  属性。
    ///</param>
    ///<returns>
    ///  转换后的 URL。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  如果则会发生 <paramref name="relativeUrl" />
    ///  参数包含 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveUrl(relativeUrl: string): string;
    ///<summary>
    ///  获取可由浏览器的 URL。
    ///</summary>
    ///  <param name="relativeUrl">
    ///  相对于当前页面 URL。
    ///</param>
    ///<returns>
    ///  适用于在浏览器上使用指定的资源完全限定的 URL。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relativeUrl" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveClientUrl(relativeUrl: string): string;
    ///<summary>
    ///  使用指定的服务器控件当前命名容器中搜索 <paramref name="id" />
    ///  参数。
    ///</summary>
    ///  <param name="id">
    ///  控件要查找的标识符。
    ///</param>
    ///<returns>
    ///  指定的控件，或 <see langword="null" />
    ///  如果指定的控件不存在。
    ///</returns>
    function FindControl(id: string): DNControl;
    ///<summary>
    ///  确定服务器控件是否包含任何子控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果控件包含其他控件，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasControls: Boolean;
    ///<summary>
    ///  设置跟踪为设计时呈现的数据的跟踪、 使用的跟踪数据键和跟踪数据值的数据。
    ///</summary>
    ///  <param name="traceDataKey">
    ///  跟踪数据键。
    ///</param>
    ///  <param name="traceDataValue">
    ///  跟踪数据的值。
    ///</param>
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  设置跟踪为设计时呈现的数据的跟踪，请使用跟踪的对象、 跟踪数据键和跟踪数据值的数据。
    ///</summary>
    ///  <param name="tracedObject">
    ///  跟踪的对象。
    ///</param>
    ///  <param name="traceDataKey">
    ///  跟踪数据键。
    ///</param>
    ///  <param name="traceDataValue">
    ///  跟踪数据的值。
    ///</param>
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  获取对应于一组路由参数的 URL。
    ///</summary>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  与指定的路由参数对应的 URL。
    ///</returns>
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  获取对应于一组路由参数和路由名称的 URL。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  将指定的路由参数和路由名称对应的 URL。
    ///</returns>
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  返回前缀的部分 <see cref="P:System.Web.UI.Control.UniqueID" />
    ///  指定控件的属性。
    ///</summary>
    ///  <param name="control">
    ///  一个位于命名容器内的控件。
    ///</param>
    ///<returns>
    ///  前缀的部分 <see cref="P:System.Web.UI.Control.UniqueID" />
    ///  指定控件的属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="control" />
    ///  的 <see cref="P:System.Web.UI.Control.NamingContainer" />
    ///  属性为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="control" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetUniqueIDRelativeTo(control: DNControl): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个布尔值，该值指示是否将主题应用到派生自控件 <see cref="T:System.Web.UI.TemplateControl" />
    ///  类。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要使用的主题;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    ///<summary>
    ///  获取或设置从中分析和编译该控件的文件的相对于应用程序、 虚拟目录路径。
    ///</summary>
    ///<returns>
    ///  一个表示该路径的字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  设置的路径是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  设置的路径不是根路径。
    ///</exception>
    property AppRelativeVirtualPath: string read get_AppRelativeVirtualPath write set_AppRelativeVirtualPath;
    ///<summary>
    ///  获取或设置用于生成的值的算法 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个值，指示如何 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  生成属性。
    ///  默认值为 <see cref="F:System.Web.UI.ClientIDMode.Inherit" />
    ///  。
    ///</returns>
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    ///<summary>
    ///  获取由 ASP.NET 生成的 HTML 标记的控件 ID。
    ///</summary>
    ///<returns>
    ///  由 ASP.NET 生成的 HTML 标记的控件 ID。
    ///</returns>
    property ClientID: string read get_ClientID;
    ///<summary>
    ///  获取或设置分配给服务器控件的编程标识符。
    ///</summary>
    ///<returns>
    ///  分配给控件的编程标识符。
    ///</returns>
    property ID: string read get_ID write set_ID;
    ///<summary>
    ///  获取或设置要应用于控件的外观。
    ///</summary>
    ///<returns>
    ///  要应用于控件外观的名称。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  已应用了样式表。
    ///  - 或 -
    ///<see langword="Page_PreInit" />
    ///  事件已发生。
    ///  - 或 -
    ///  该控件已添加到 <see langword="Controls" />
    ///  集合。
    ///</exception>
    property SkinID: string read get_SkinID write set_SkinID;
    ///<summary>
    ///  获取或设置一个值，该值指示服务器控件是否向发出请求的客户端保持自己的视图状态以及它所包含的任何子控件的视图状态。
    ///</summary>
    ///<returns>
    ///  如果服务器控件保持其视图状态，则否 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    ///<summary>
    ///  获取或设置此控件的视图状态模式。
    ///</summary>
    ///<returns>
    ///  此控件的视图状态模式。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  尝试将此属性设置为一个值，将不在 <see cref="T:System.Web.UI.ViewStateMode" />
    ///  枚举。
    ///</exception>
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    ///<summary>
    ///  获取对服务器控件的引用的命名容器，这将创建唯一的命名空间区分具有相同的服务器控件 <see cref="P:System.Web.UI.Control.ID" />
    ///  属性值。
    ///</summary>
    ///<returns>
    ///  服务器控件的命名容器。
    ///</returns>
    property NamingContainer: DNControl read get_NamingContainer;
    ///<summary>
    ///  获取包含该控件的数据绑定的控件。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.Control" />
    ///  ，其中包含该控件的数据绑定。
    ///</returns>
    property BindingContainer: DNControl read get_BindingContainer;
    ///<summary>
    ///  获取命名容器的引用，如果命名容器实现 <see cref="T:System.Web.UI.IDataItemContainer" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名容器。
    ///  层次结构的命名容器的实现中 <see cref="T:System.Web.UI.IDataItemContainer" />
    ///  , ，此属性返回的命名容器层次结构中，顶部或 <see langword="null" />
    ///  如果当前 <see cref="T:System.Web.UI.Control" />
    ///  对象不在命名容器实现 <see cref="T:System.Web.UI.IDataItemContainer" />
    ///  。
    ///</returns>
    property DataItemContainer: DNControl read get_DataItemContainer;
    ///<summary>
    ///  获取命名容器的引用，如果命名容器实现 <see cref="T:System.Web.UI.IDataKeysControl" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名容器。
    ///  层次结构的命名容器的实现中 <see cref="T:System.Web.UI.IDataKeysControl" />
    ///  , ，该属性返回的命名容器层次结构中，顶部或 <see langword="null" />
    ///  如果当前 <see cref="T:System.Web.UI.Control" />
    ///  对象不在命名容器实现 <see cref="T:System.Web.UI.IDataKeysControl" />
    ///  。
    ///</returns>
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.Page" />
    ///  包含服务器控件的实例。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.Page" />
    ///  包含服务器控件的实例。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该控件是 <see cref="T:System.Web.UI.WebControls.Substitution" />
    ///  控件。
    ///</exception>
    property Page: DNPage read get_Page write set_Page;
    ///<summary>
    ///  获取一个值，指定将与兼容呈现 HTML 的 ASP.NET 版本。
    ///</summary>
    ///<returns>
    ///  HTML 呈现的 ASP.NET 版本将与兼容。
    ///</returns>
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    ///<summary>
    ///  获取或设置对包含该控件模板的引用。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.TemplateControl" />
    ///  包含该控件的实例。
    ///</returns>
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    ///<summary>
    ///  页面控件层次结构中获取对服务器控件的父控件的引用。
    ///</summary>
    ///<returns>
    ///  对服务器控件的父控件的引用。
    ///</returns>
    property Parent: DNControl read get_Parent;
    ///<summary>
    ///  获取虚拟目录的 <see cref="T:System.Web.UI.Page" />
    ///  或 <see cref="T:System.Web.UI.UserControl" />
    ///  ，其中包含当前的服务器控件。
    ///</summary>
    ///<returns>
    ///  包含服务器控件的页面或用户控件的虚拟目录。
    ///</returns>
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    ///<summary>
    ///  获取或设置相对于应用程序虚拟目录的 <see cref="T:System.Web.UI.Page" />
    ///  或 <see cref="T:System.Web.UI.UserControl" />
    ///  对象，其中包含此控件。
    ///</summary>
    ///<returns>
    ///  包含此控件的页面或用户控件相对于应用程序虚拟目录。
    ///</returns>
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    ///<summary>
    ///  获取承载在设计图面上呈现时的当前控件的容器相关信息。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.ISite" />
    ///  包含有关控件承载在容器的信息。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该控件是 <see cref="T:System.Web.UI.WebControls.Substitution" />
    ///  控件。
    ///</exception>
    property Site: DNISite read get_Site write set_Site;
    ///<summary>
    ///  获取或设置一个值，该值指示服务器控件是否作为 UI 呈现在页上。
    ///</summary>
    ///<returns>
    ///  如果控件在页上可见，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Visible: Boolean read get_Visible write set_Visible;
    ///<summary>
    ///  获取服务器控件的唯一的分层限定标识符。
    ///</summary>
    ///<returns>
    ///  服务器控件的完全限定的标识符。
    ///</returns>
    property UniqueID: string read get_UniqueID;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.ControlCollection" />
    ///  表示 UI 层次结构中的指定的服务器控件的子控件的对象。
    ///</summary>
    ///<returns>
    ///  指定服务器控件的子控件的集合。
    ///</returns>
    property Controls: DNControlCollection read get_Controls;
    ///<summary>
    ///  获取或设置一个值，该值指示控件是否检查潜在危险值在浏览器中的客户端输入。
    ///</summary>
    ///<returns>
    ///  确定控件是否检查客户端输入一个值。
    ///  值可以包括 <see cref="F:System.Web.UI.ValidateRequestMode.Disabled" />
    ///  , ，<see cref="F:System.Web.UI.ValidateRequestMode.Enabled" />
    ///  , ，和 <see cref="F:System.Web.UI.ValidateRequestMode.Inherit" />
    ///  。
    ///  默认值是 <see cref="F:System.Web.UI.ValidateRequestMode.Inherit" />
    ///  , ，这意味着该控件从其父级获取的值。
    ///</returns>
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTemplateControl = class(TDNGenericImport<DNTemplateControlClass, DNTemplateControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNPageClass = interface(DNTemplateControlClass)
  ['{FC24C493-A050-5D67-84E3-96E4731469D1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.Page" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPage;

  { static fields getter & setter } 

   function __fakeFieldGet_postEventSourceID: string;
   function __fakeFieldGet_postEventArgumentID: string;

  { static fields } 

    ///<summary>
    ///  一个字符串，定义 EVENTTARGET 隐藏的字段在呈现的页。
    ///</summary>
    {class} property postEventSourceID: string read __fakeFieldGet_postEventSourceID;
    ///<summary>
    ///  一个字符串，定义所引起的隐藏的字段在呈现的页。
    ///</summary>
    {class} property postEventArgumentID: string read __fakeFieldGet_postEventArgumentID;

  { static methods } 

    ///<summary>
    ///  创建指定 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象以呈现页面的内容。
    ///</summary>
    ///  <param name="tw">
    ///  用于创建 <see cref="T:System.IO.TextWriter" />
    ///  的 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  。
    ///</param>
    ///  <param name="writerType">
    ///  要创建文本编写器的类型。
    ///</param>
    ///<returns><see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  呈现页的内容。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException"><paramref name="writerType" />
    ///  参数设置为无效的类型。
    ///</exception>
    {class} function CreateHtmlTextWriterFromType(tw: DDN.mscorlib.DNTextWriter; writerType: DDN.mscorlib.DNType): DNHtmlTextWriter;

  end;

  ///<summary>
  ///  表示一个从托管 ASP.NET Web 应用程序的服务器请求的 .aspx 文件（也称为 Web 窗体页）。
  ///</summary>
  [DNTypeName('System.Web.UI.Page')]
  DNPage = interface(DNTemplateControl)
  ['{DA600DD7-B5BB-3793-810A-22AD45DBEE78}']
  { getters & setters } 

    function get_ClientTarget: string;
    procedure set_ClientTarget(value: string);
    function get_ClientQueryString: string;
    function get_ErrorPage: string;
    procedure set_ErrorPage(value: string);
    function get_IsCallback: Boolean;
    function get_IsReusable: Boolean;
    function get_AutoPostBackControl: DNControl;
    procedure set_AutoPostBackControl(value: DNControl);
    function get_IdSeparator: Char;
    function get_MaintainScrollPositionOnPostBack: Boolean;
    procedure set_MaintainScrollPositionOnPostBack(value: Boolean);
    function get_MasterPageFile: string;
    procedure set_MasterPageFile(value: string);
    function get_MaxPageStateFieldLength: Int32;
    procedure set_MaxPageStateFieldLength(value: Int32);
    function get_Response: DNHttpResponse;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_MetaDescription: string;
    procedure set_MetaDescription(value: string);
    function get_MetaKeywords: string;
    procedure set_MetaKeywords(value: string);
    function get_Theme: string;
    procedure set_Theme(value: string);
    function get_StyleSheetTheme: string;
    procedure set_StyleSheetTheme(value: string);
    function get_User: DDN.mscorlib.DNIPrincipal;
    function get_IsCrossPagePostBack: Boolean;
    function get_IsPostBack: Boolean;
    function get_EnableEventValidation: Boolean;
    procedure set_EnableEventValidation(value: Boolean);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateUserKey: string;
    procedure set_ViewStateUserKey(value: string);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);
    function get_SkipFormActionValidation: Boolean;
    procedure set_SkipFormActionValidation(value: Boolean);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_IsPostBackEventControlRegistered: Boolean;
    function get_IsValid: Boolean;
    function get_PreviousPage: DNPage;
    function get_Buffer: Boolean;
    procedure set_Buffer(value: Boolean);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_CodePage: Int32;
    procedure set_CodePage(value: Int32);
    function get_ResponseEncoding: string;
    procedure set_ResponseEncoding(value: string);
    function get_Culture: string;
    procedure set_Culture(value: string);
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_UICulture: string;
    procedure set_UICulture(value: string);
    function get_AsyncTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_AsyncTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_TraceEnabled: Boolean;
    procedure set_TraceEnabled(value: Boolean);
    function get_EnableViewStateMac: Boolean;
    procedure set_EnableViewStateMac(value: Boolean);
    function get_SmartNavigation: Boolean;
    procedure set_SmartNavigation(value: Boolean);
    function get_IsAsync: Boolean;
    function get_Items: DDN.mscorlib.DNIDictionary;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_AppRelativeVirtualPath: string;
    procedure set_AppRelativeVirtualPath(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;

  { events } 

    procedure add_LoadComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LoadComplete(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreInit(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreInit(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreLoad(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreLoad(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRenderComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRenderComplete(value: DDN.mscorlib.DNEventHandler);
    procedure add_InitComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_InitComplete(value: DDN.mscorlib.DNEventHandler);
    procedure add_SaveStateComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SaveStateComplete(value: DDN.mscorlib.DNEventHandler);
    procedure add_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_Error(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Error(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  检索由生成的哈希代码 <see cref="T:System.Web.UI.Page" />
    ///  在生成的对象运行的时间。
    ///  此哈希代码是唯一的 <see cref="T:System.Web.UI.Page" />
    ///  对象的控件层次结构。
    ///</summary>
    ///<returns>
    ///  在运行时生成的哈希代码。
    ///  默认值为 0。
    ///</returns>
    function GetTypeHashCode: Int32;
    ///<summary>
    ///  执行实例的任何初始化 <see cref="T:System.Web.UI.Page" />
    ///  RAD 设计器所需的类。
    ///  只能在设计时使用此方法。
    ///</summary>
    procedure DesignerInitialize;
    ///<summary>
    ///  返回一个客户端事件，导致回发到服务器中的程序可以使用的字符串。
    ///  引用字符串定义由指定 <see cref="T:System.Web.UI.Control" />
    ///  对象。
    ///</summary>
    ///  <param name="control">
    ///  要处理回发的服务器上的服务器控件。
    ///</param>
    ///<returns>
    ///  一个字符串，当视为客户端，脚本将启动回发。
    ///</returns>
    function GetPostBackEventReference(control: DNControl): string; overload;
    ///<summary>
    ///  返回一个客户端事件，导致回发到服务器中的程序可以使用的字符串。
    ///  引用字符串定义由处理回发和其他事件信息的字符串参数的指定控件。
    ///</summary>
    ///  <param name="control">
    ///  要处理回发的服务器控件。
    ///</param>
    ///  <param name="argument">
    ///  将参数传递到服务器控件。
    ///</param>
    ///<returns>
    ///  一个字符串，当视为客户端，脚本将启动回发。
    ///</returns>
    function GetPostBackEventReference(control: DNControl; argument: string): string; overload;
    ///<summary>
    ///  获取可在客户端事件中使用的引用，以将指定控件和指定事件参数发回给服务器。
    ///</summary>
    ///  <param name="control">
    ///  接收客户端事件回发的服务器控件。
    ///</param>
    ///  <param name="argument">
    ///  传递给 <see cref="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)" />
    ///  的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示客户端事件的字符串。
    ///</returns>
    function GetPostBackClientEvent(control: DNControl; argument: string): string;
    ///<summary>
    ///  确定是否已向页上注册客户端脚本块与指定的键。
    ///</summary>
    ///  <param name="key">
    ///  客户端脚本来搜索字符串键。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果注册了该脚本块;，否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsClientScriptBlockRegistered(key: string): Boolean;
    ///<summary>
    ///  确定是否注册客户端启动脚本 <see cref="T:System.Web.UI.Page" />
    ///  对象。
    ///</summary>
    ///  <param name="key">
    ///  要搜索的启动脚本字符串键。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果注册了启动脚本;，否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsStartupScriptRegistered(key: string): Boolean;
    ///<summary>
    ///  声明了一个呈现页时被声明为一个 ECMAScript 数组声明的值。
    ///</summary>
    ///  <param name="arrayName">
    ///  在其中声明值数组的名称。
    ///</param>
    ///  <param name="arrayValue">
    ///  要置于数组中的值。
    ///</param>
    procedure RegisterArrayDeclaration(arrayName: string; arrayValue: string);
    ///<summary>
    ///  允许服务器控件中自动注册该窗体上的隐藏的字段。
    ///  该字段将被发送到 <see cref="T:System.Web.UI.Page" />
    ///  对象时 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />
    ///  服务器控件是否呈现。
    ///</summary>
    ///  <param name="hiddenFieldName">
    ///  要呈现的隐藏字段的唯一名称。
    ///</param>
    ///  <param name="hiddenFieldInitialValue">
    ///  要在隐藏的窗体中发出的值。
    ///</param>
    procedure RegisterHiddenField(hiddenFieldName: string; hiddenFieldInitialValue: string);
    ///<summary>
    ///  发出的响应的客户端脚本块。
    ///</summary>
    ///  <param name="key">
    ///  将脚本块标识的唯一键。
    ///</param>
    ///  <param name="script">
    ///  发送到客户端的脚本的内容。
    ///</param>
    procedure RegisterClientScriptBlock(key: string; script: string);
    ///<summary>
    ///  发出的页面响应中的客户端脚本块。
    ///</summary>
    ///  <param name="key">
    ///  将脚本块标识的唯一键。
    ///</param>
    ///  <param name="script">
    ///  将发送到客户端的脚本的内容。
    ///</param>
    procedure RegisterStartupScript(key: string; script: string);
    ///<summary>
    ///  使页能够访问客户端 <see langword="OnSubmit" />
    ///  事件。
    ///  脚本应该是对注册在其他地方的客户端代码的函数调用。
    ///</summary>
    ///  <param name="key">
    ///  将脚本块标识的唯一键。
    ///</param>
    ///  <param name="script">
    ///  要发送到客户端的客户端脚本。
    ///</param>
    procedure RegisterOnSubmitStatement(key: string; script: string);
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Web.UI.Control" />
    ///  对象注册参与控件状态管理。
    ///</summary>
    ///  <param name="control"><see cref="T:System.Web.UI.Control" />
    ///  控件状态要求检查。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定 <see cref="T:System.Web.UI.Control" />
    ///  需要控制状态; 否则为 <see langword="false" />
    ///</returns>
    function RequiresControlState(control: DNControl): Boolean;
    ///<summary>
    ///  停止指定的控件的控件状态的持久性。
    ///</summary>
    ///  <param name="control"><see cref="T:System.Web.UI.Control" />
    ///  表示要停止的控件状态持久性。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Web.UI.Control" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure UnregisterRequiresControlState(control: DNControl);
    ///<summary>
    ///  将控件注册为一个要求页面回发到服务器时进行回发处理。
    ///</summary>
    ///  <param name="control">
    ///  要注册的控件。
    ///</param>
    ///<exception cref="T:System.Web.HttpException">
    ///  要注册的控件不实现 <see cref="T:System.Web.UI.IPostBackDataHandler" />
    ///  接口。
    ///</exception>
    procedure RegisterRequiresPostBack(control: DNControl);
    ///<summary>
    ///  检索虚拟路径，绝对或相对的还是相对于应用程序路径映射到的物理路径。
    ///</summary>
    ///  <param name="virtualPath">
    ///  一个 <see cref="T:System.String" />
    ///  表示的虚拟路径。
    ///</param>
    ///<returns>
    ///  与虚拟路径或相对于应用程序路径关联的物理路径。
    ///</returns>
    function MapPath(virtualPath: string): string;
    ///<summary>
    ///  将替换为页控件注册一个要求的视图状态加密。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.UI.Page.RegisterRequiresViewStateEncryption" />
    ///  之前或期间页上，必须调用方法 <see langword="PreRender" />
    ///  在页面生命周期阶段。
    ///</exception>
    procedure RegisterRequiresViewStateEncryption;
    ///<summary>
    ///  设置的内部服务器对象 <see cref="T:System.Web.UI.Page" />
    ///  对象，如 <see cref="P:System.Web.UI.Page.Context" />
    ///  , ，<see cref="P:System.Web.UI.Page.Request" />
    ///  , ，<see cref="P:System.Web.UI.Page.Response" />
    ///  , ，和 <see cref="P:System.Web.UI.Page.Application" />
    ///  属性。
    ///</summary>
    ///  <param name="context"><see cref="T:System.Web.HttpContext" />
    ///  提供对内部服务器对象的引用的对象 (例如， <see cref="P:System.Web.HttpContext.Request" />
    ///  , ，<see cref="P:System.Web.HttpContext.Response" />
    ///  , ，和 <see cref="P:System.Web.HttpContext.Session" />
    ///  ) 用于处理 HTTP 请求。
    ///</param>
    procedure ProcessRequest(context: DNHttpContext);
    ///<summary>
    ///  如果调用，会导致页面视图状态以保持不变。
    ///</summary>
    procedure RegisterViewStateHandler;
    ///<summary>
    ///  启动异步任务的执行。
    ///</summary>
    ///<exception cref="T:System.Web.HttpException">
    ///  没有异步任务中的异常。
    ///</exception>
    procedure ExecuteRegisteredAsyncTasks;
    ///<summary>
    ///  指示要验证其已分配的信息的页面上包含任何验证控件。
    ///</summary>
    procedure Validate; overload;
    ///<summary>
    ///  指示要验证其已分配的信息的指定的验证组中的验证控件。
    ///</summary>
    ///  <param name="validationGroup">
    ///  要验证的控件的验证组名称。
    ///</param>
    procedure Validate(validationGroup: string); overload;
    ///<summary>
    ///  获取数据绑定上下文堆栈顶部的数据项。
    ///</summary>
    ///<returns>
    ///  在数据绑定上下文堆栈顶部的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有为页上的数据绑定上下文。
    ///</exception>
    function GetDataItem: DDN.mscorlib.DNObject;
    ///<summary>
    ///  搜索具有指定标识符的服务器控件的页面命名容器。
    ///</summary>
    ///  <param name="id">
    ///  控件要查找的标识符。
    ///</param>
    ///<returns>
    ///  指定的控件，或 <see langword="null" />
    ///  如果指定的控件不存在。
    ///</returns>
    function FindControl(id: string): DNControl;
    ///<summary>
    ///  将浏览器焦点设置为具有指定标识符的控件。
    ///</summary>
    ///  <param name="clientID">
    ///  要将焦点设置到该控件的 ID。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="clientID" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.UI.Page.SetFocus(System.String)" />
    ///  该控件不是 Web 窗体页的一部分时调用。
    ///  - 或 -
    ///<see cref="M:System.Web.UI.Page.SetFocus(System.String)" />
    ///  之后，调用 <see cref="E:System.Web.UI.Control.PreRender" />
    ///  事件。
    ///</exception>
    procedure SetFocus(clientID: string); overload;
    ///<summary>
    ///  获取一个引用，使用 <see langword="javascript:" />
    ///  追加到其开头，可以使用客户端事件中回发到服务器的指定控件与指定的事件参数。
    ///</summary>
    ///  <param name="control">
    ///  要处理回发的服务器控件。
    ///</param>
    ///  <param name="argument">
    ///  将参数传递到服务器控件。
    ///</param>
    ///<returns>
    ///  一个字符串，表示对包含目标控件 ID 和事件参数的回发函数的 JavaScript 调用。
    ///</returns>
    function GetPostBackClientHyperlink(control: DNControl; argument: string): string;
    ///<summary>
    ///  确认 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />
    ///  在运行时为指定的 ASP.NET 服务器控件呈现控件。
    ///</summary>
    ///  <param name="control">
    ///  ASP.NET 服务器控件中所需 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />
    ///  控件。
    ///</param>
    ///<exception cref="T:System.Web.HttpException">
    ///  指定的服务器控件不包含开始和结束标记之间 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />
    ///  服务器控件在运行时。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  要验证的控件是 <see langword="null" />
    ///  。
    ///</exception>
    procedure VerifyRenderingInServerForm(control: DNControl);
    ///<summary>
    ///  将浏览器焦点设置为指定控件。
    ///</summary>
    ///  <param name="control">
    ///  要接收焦点的控件。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="control" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
    ///  该控件不是 Web 窗体页的一部分时调用。
    ///  - 或 -
    ///<see cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
    ///  之后，调用 <see cref="E:System.Web.UI.Control.PreRender" />
    ///  事件。
    ///</exception>
    procedure SetFocus(control: DNControl); overload;
    ///<summary>
    ///  将控件注册为必须保留其控件状态。
    ///</summary>
    ///  <param name="control">
    ///  要注册的控件。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  要注册的控件是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.UI.Page.RegisterRequiresControlState(System.Web.UI.Control)" />
    ///  仅之前或期间，可以调用方法 <see cref="E:System.Web.UI.Control.PreRender" />
    ///  事件。
    ///</exception>
    procedure RegisterRequiresControlState(control: DNControl);
    ///<summary>
    ///  读取的字符串资源。
    ///<see cref="M:System.Web.UI.TemplateControl.ReadStringResource" />
    ///  方法不是从您的代码中使用。
    ///</summary>
    ///<returns>
    ///  表示资源的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><see cref="M:System.Web.UI.TemplateControl.ReadStringResource" />
    ///  不再受支持。
    ///</exception>
    function ReadStringResource: DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回一个布尔值，该值指示是否设备筛选器适用于 HTTP 请求。
    ///</summary>
    ///  <param name="filterName">
    ///  要测试的浏览器名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果客户端浏览器中指定 <paramref name="filterName" />
    ///  等同于指定的浏览器; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    function TestDeviceFilter(filterName: string): Boolean;
    ///<summary>
    ///  加载 <see cref="T:System.Web.UI.Control" />
    ///  对象从文件基于指定的虚拟路径。
    ///</summary>
    ///  <param name="virtualPath">
    ///  控制文件的虚拟路径。
    ///</param>
    ///<returns>
    ///  返回指定 <see cref="T:System.Web.UI.Control" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  虚拟路径是 <see langword="null" />
    ///  或为空。
    ///</exception>
    function LoadControl(virtualPath: string): DNControl; overload;
    ///<summary>
    ///  加载 <see cref="T:System.Web.UI.Control" />
    ///  对象根据指定的类型和构造函数参数。
    ///</summary>
    ///  <param name="t">
    ///  控件的类型。
    ///</param>
    ///  <param name="parameters">
    ///  与要调用构造函数的参数数量、顺序和类型匹配的参数数组。
    ///  如果 <paramref name="parameters" />
    ///  为空数组或 <see langword="null" />
    ///  ，则调用不带任何参数的构造函数（默认构造函数）。
    ///</param>
    ///<returns>
    ///  返回指定 <see cref="T:System.Web.UI.UserControl" />
    ///  。
    ///</returns>
    function LoadControl(t: DDN.mscorlib.DNType; parameters: TArray<DDN.mscorlib.DNObject>): DNControl; overload;
    ///<summary>
    ///  获取实例 <see cref="T:System.Web.UI.ITemplate" />
    ///  来自外部文件的接口。
    ///</summary>
    ///  <param name="virtualPath">
    ///  用户控件文件的虚拟路径。
    ///</param>
    ///<returns>
    ///  指定模板的一个实例。
    ///</returns>
    function LoadTemplate(virtualPath: string): DNITemplate;
    ///<summary>
    ///  将输入的字符串分析 <see cref="T:System.Web.UI.Control" />
    ///  Web 窗体页面或用户控件上的对象。
    ///</summary>
    ///  <param name="content">
    ///  一个字符串，包含用户控件。
    ///</param>
    ///<returns>
    ///  已分析 <see cref="T:System.Web.UI.Control" />
    ///  。
    ///</returns>
    function ParseControl(content: string): DNControl; overload;
    ///<summary>
    ///  将输入的字符串分析 <see cref="T:System.Web.UI.Control" />
    ///  ASP.NET Web 页面或用户控件上的对象。
    ///</summary>
    ///  <param name="content">
    ///  一个字符串，包含用户控件。
    ///</param>
    ///  <param name="ignoreParserFilter">
    ///  一个值，指定是否忽略分析器筛选器。
    ///</param>
    ///<returns>
    ///  已分析的控件。
    ///</returns>
    function ParseControl(content: string; ignoreParserFilter: Boolean): DNControl; overload;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，使您可以重写的浏览器功能的自动检测并指定特定浏览器客户端页面的呈现方式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，指定您想要覆盖的浏览器功能。
    ///</returns>
    property ClientTarget: string read get_ClientTarget write set_ClientTarget;
    ///<summary>
    ///  获取所请求 URL 的查询字符串部分。
    ///</summary>
    ///<returns>
    ///  所请求的 URL 查询字符串部分。
    ///</returns>
    property ClientQueryString: string read get_ClientQueryString;
    ///<summary>
    ///  获取或设置请求的浏览器将重定向到未处理的页异常的错误页。
    ///</summary>
    ///<returns>
    ///  将浏览器重定向到错误页。
    ///</returns>
    property ErrorPage: string read get_ErrorPage write set_ErrorPage;
    ///<summary>
    ///  获取一个值，该值指示页请求是否为回调的结果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果页请求是回调; 结果否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCallback: Boolean read get_IsCallback;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Web.UI.Page" />
    ///  可以重用对象。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReusable: Boolean read get_IsReusable;
    ///<summary>
    ///  获取或设置用于执行回发的页面中的控件。
    ///</summary>
    ///<returns>
    ///  用于执行回发控件。
    ///</returns>
    property AutoPostBackControl: DNControl read get_AutoPostBackControl write set_AutoPostBackControl;
    ///<summary>
    ///  获取用于分隔在生成的唯一 ID 的页上的控件时控件标识符的字符。
    ///</summary>
    ///<returns>
    ///  用于分隔控件标识符的字符。
    ///  默认值将由 <see cref="T:System.Web.UI.Adapters.PageAdapter" />
    ///  呈现页面的实例。
    ///<see cref="P:System.Web.UI.Page.IdSeparator" />
    ///  是服务器端字段，不应修改。
    ///</returns>
    property IdSeparator: Char read get_IdSeparator;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在回发后将用户返回到客户端浏览器中的同一位置。
    ///  此属性取代了已过时的 <see cref="P:System.Web.UI.Page.SmartNavigation" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  如果应保持客户端位置，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property MaintainScrollPositionOnPostBack: Boolean read get_MaintainScrollPositionOnPostBack write set_MaintainScrollPositionOnPostBack;
    ///<summary>
    ///  获取或设置母版页上的虚拟路径。
    ///</summary>
    ///<returns>
    ///  主控页的虚拟路径。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.Page.MasterPageFile" />
    ///  属性设置后 <see cref="E:System.Web.UI.Page.PreInit" />
    ///  事件已完成。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  中指定的文件 <see cref="P:System.Web.UI.Page.MasterPageFile" />
    ///  属性不存在。
    ///  - 或 -
    ///  页上没有 <see cref="T:System.Web.UI.WebControls.Content" />
    ///  控件为顶级控件。
    ///</exception>
    property MasterPageFile: string read get_MasterPageFile write set_MasterPageFile;
    ///<summary>
    ///  获取或设置页面的状态字段的最大长度。
    ///</summary>
    ///<returns>
    ///  以字节为单位的页的状态字段的最大长度。
    ///  默认值为 -1。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Web.UI.Page.MaxPageStateFieldLength" />
    ///  属性不等于-1 或一个正数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.Page.MaxPageStateFieldLength" />
    ///  属性已设置页上已初始化后。
    ///</exception>
    property MaxPageStateFieldLength: Int32 read get_MaxPageStateFieldLength write set_MaxPageStateFieldLength;
    ///<summary>
    ///  获取与 <see cref="T:System.Web.UI.Page" />
    ///  对象关联的 <see cref="T:System.Web.HttpResponse" />
    ///  对象。
    ///  此对象可用于将 HTTP 响应数据发送到客户端，并包含有关该响应的信息。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="T:System.Web.HttpResponse" />
    ///  与页关联。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException"><see cref="T:System.Web.HttpResponse" />
    ///  对象不可用。
    ///</exception>
    property Response: DNHttpResponse read get_Response;
    ///<summary>
    ///  获取或设置页上的标题。
    ///</summary>
    ///<returns>
    ///  页的标题。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.Page.Title" />
    ///  属性需要页上的标头控件。
    ///</exception>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  获取或设置的"说明"的内容 <see langword="meta" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  "说明"的内容 <see langword="meta" />
    ///  元素。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  页上没有标头控件 ( <see langword="head" />
    ///  具有元素 <see langword="runat" />
    ///  属性设置为"server")。
    ///</exception>
    property MetaDescription: string read get_MetaDescription write set_MetaDescription;
    ///<summary>
    ///  获取或设置"关键字"的内容 <see langword="meta" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  "关键字"的内容 <see langword="meta" />
    ///  元素。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  页上没有标头控件 ( <see langword="head" />
    ///  具有元素 <see langword="runat" />
    ///  属性设置为"server")。
    ///</exception>
    property MetaKeywords: string read get_MetaKeywords write set_MetaKeywords;
    ///<summary>
    ///  获取或设置页面主题的名称。
    ///</summary>
    ///<returns>
    ///  页面主题的名称。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试设置 <see cref="P:System.Web.UI.Page.Theme" />
    ///  后 <see cref="E:System.Web.UI.Page.PreInit" />
    ///  已发生事件。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Web.UI.Page.Theme" />
    ///  设置为无效的主题名称。
    ///</exception>
    property Theme: string read get_Theme write set_Theme;
    ///<summary>
    ///  获取或设置在页面生命周期的早期应用于该页的主题名称。
    ///</summary>
    ///<returns>
    ///  在页面生命周期的早期应用于该页的主题名称。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试设置 <see cref="P:System.Web.UI.Page.StyleSheetTheme" />
    ///  属性之后 <see cref="M:System.Web.UI.Page.FrameworkInitialize" />
    ///  方法被调用。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Web.UI.Page.StyleSheetTheme" />
    ///  设置为无效的主题名称。
    ///  将引发此异常 <see cref="M:System.Web.UI.Page.FrameworkInitialize" />
    ///  调用方法时，不能通过属性 setter。
    ///</exception>
    property StyleSheetTheme: string read get_StyleSheetTheme write set_StyleSheetTheme;
    ///<summary>
    ///  获取有关发出页请求的用户信息。
    ///</summary>
    ///<returns><see cref="T:System.Security.Principal.IPrincipal" />
    ///  表示页请求的用户。
    ///</returns>
    property User: DDN.mscorlib.DNIPrincipal read get_User;
    ///<summary>
    ///  获取一个值，该值指示页是否涉及跨页面回发。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果页面正在参与跨页面请求;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCrossPagePostBack: Boolean read get_IsCrossPagePostBack;
    ///<summary>
    ///  获取一个值，该值指示页上呈现第一次还是正在加载中为回发的响应。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果在响应客户端回发，则加载页面后否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPostBack: Boolean read get_IsPostBack;
    ///<summary>
    ///  获取或设置一个值，指示该页是否验证回发和回调事件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该页验证回发和回调事件;否则为 <see langword="false" />
    ///  。默认值是 <see langword="true" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.Page.EnableEventValidation" />
    ///  属性已设置页上已初始化后。
    ///</exception>
    property EnableEventValidation: Boolean read get_EnableEventValidation write set_EnableEventValidation;
    ///<summary>
    ///  获取或设置一个值，该值指示是否页上将保持其视图状态的视图状态的任何服务器控件包含在当前页面请求结束时。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该页保持其视图状态，则否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    ///<summary>
    ///  将标识符分配给单个用户的当前页关联的视图状态变量中。
    ///</summary>
    ///<returns>
    ///  单个用户的标识符。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException"><see cref="P:System.Web.UI.Page.ViewStateUserKey" />
    ///  页处理期间太晚访问属性。
    ///</exception>
    property ViewStateUserKey: string read get_ViewStateUserKey write set_ViewStateUserKey;
    ///<summary>
    ///  获取或设置的特定实例的标识符 <see cref="T:System.Web.UI.Page" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  实例的标识符 <see cref="T:System.Web.UI.Page" />
    ///  类。
    ///  默认值为 _Page。
    ///</returns>
    property ID: string read get_ID write set_ID;
    ///<summary>
    ///  获取或设置一个值，该值指示网页是否检查潜在危险值在浏览器中的客户端输入。
    ///</summary>
    ///<returns>
    ///  一个值，该值指示网页是否检查客户端输入。
    ///  默认值为 <see cref="F:System.Web.UI.ValidateRequestMode.Enabled" />
    ///  。
    ///</returns>
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
    ///<summary>
    ///  获取或设置一个值，该值指示是否验证查询字符串值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应跳过查询字符串验证 （查询字符串不应验证）;否则为 <see langword="false" />
    ///  如果查询字符串验证应放置作为普通。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property SkipFormActionValidation: Boolean read get_SkipFormActionValidation write set_SkipFormActionValidation;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.UI.Page" />
    ///  呈现对象。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.UI.Page" />
    ///  呈现; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Visible: Boolean read get_Visible write set_Visible;
    ///<summary>
    ///  获取一个值，该值指示是否已注册执行回发的页面中的控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果控件具有已注册;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPostBackEventControlRegistered: Boolean read get_IsPostBackEventControlRegistered;
    ///<summary>
    ///  获取一个值，该值指示页验证是否成功。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果页验证成功，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException"><see cref="P:System.Web.UI.Page.IsValid" />
    ///  发生验证之前调用属性。
    ///</exception>
    property IsValid: Boolean read get_IsValid;
    ///<summary>
    ///  获取已将控制权移交到当前页的页面。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.Page" />
    ///  表示已将控制权移交到当前页的页。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前用户不是允许访问前一页。
    ///  - 或 -
    ///  ASP.NET 路由正在使用中前, 一页的 URL 是路由的 URL。
    ///  在 ASP.NET 检查访问权限时，它假定的 URL 是到文件的实际路径。
    ///  因为这不是这种情况与使用路由的 URL，该检查失败。
    ///</exception>
    property PreviousPage: DNPage read get_PreviousPage;
    ///<summary>
    ///  设置一个值，该值指示是否缓冲页面输出。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果页面输出进行缓冲处理;，否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Buffer: Boolean read get_Buffer write set_Buffer;
    ///<summary>
    ///  设置的 HTTP MIME 类型 <see cref="T:System.Web.HttpResponse" />
    ///  与页关联的对象。
    ///</summary>
    ///<returns>
    ///  与当前页关联的 HTTP MIME 类型。
    ///</returns>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  设置当前的代码页标识符 <see cref="T:System.Web.UI.Page" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个整数，表示当前的代码页标识符 <see cref="T:System.Web.UI.Page" />
    ///  。
    ///</returns>
    property CodePage: Int32 read get_CodePage write set_CodePage;
    ///<summary>
    ///  设置当前的编码语言 <see cref="T:System.Web.HttpResponse" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含当前的编码语言 <see cref="T:System.Web.HttpResponse" />
    ///  。
    ///</returns>
    property ResponseEncoding: string read get_ResponseEncoding write set_ResponseEncoding;
    ///<summary>
    ///  设置的区域性 ID <see cref="T:System.Threading.Thread" />
    ///  与页关联的对象。
    ///</summary>
    ///<returns>
    ///  一个有效的区域性 id。
    ///</returns>
    property Culture: string read get_Culture write set_Culture;
    ///<summary>
    ///  设置的区域设置标识符 <see cref="T:System.Threading.Thread" />
    ///  与页关联的对象。
    ///</summary>
    ///<returns>
    ///  要传递到的区域设置标识符 <see cref="T:System.Threading.Thread" />
    ///  。
    ///</returns>
    property LCID: Int32 read get_LCID write set_LCID;
    ///<summary>
    ///  设置的用户界面 (UI) ID <see cref="T:System.Threading.Thread" />
    ///  与页关联的对象。
    ///</summary>
    ///<returns>
    ///  UI id。
    ///</returns>
    property UICulture: string read get_UICulture write set_UICulture;
    ///<summary>
    ///  获取或设置一个值，该值在处理异步任务时使用的超时间隔。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.TimeSpan" />
    ///  ，其中包含的异步任务完成的允许的时间间隔。
    ///  默认时间间隔为 45 秒。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性设置为负值。
    ///</exception>
    property AsyncTimeout: DDN.mscorlib.DNTimeSpan read get_AsyncTimeout write set_AsyncTimeout;
    ///<summary>
    ///  设置一个值，该值指示是否启用了跟踪 <see cref="T:System.Web.UI.Page" />
    ///  对象。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为页上; 启用跟踪否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property TraceEnabled: Boolean read get_TraceEnabled write set_TraceEnabled;
    ///<summary>
    ///  获取或设置一个值，该值指示 ASP.NET 是否应检查消息身份验证代码 (MAC) 页面的视图状态中，当从客户端回发页面时。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果视图状态应 MAC 检查和编码;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property EnableViewStateMac: Boolean read get_EnableViewStateMac write set_EnableViewStateMac;
    ///<summary>
    ///  获取或设置指示是否启用了智能导航的值。
    ///  此属性已弃用。
    ///</summary>
    ///<returns>
    ///  如果已启用智能导航，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SmartNavigation: Boolean read get_SmartNavigation write set_SmartNavigation;
    ///<summary>
    ///  获取一个值，该值指示是否以异步方式处理页。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该页面的异步模式，则是否则为 <see langword="false" />
    ///  ;
    ///</returns>
    property IsAsync: Boolean read get_IsAsync;
    ///<summary>
    ///  获取存储在页面上下文中的对象的列表。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Collections.IDictionary" />
    ///  包含页上下文中存储的对象。
    ///</returns>
    property Items: DDN.mscorlib.DNIDictionary read get_Items;
    ///<summary>
    ///  获取或设置一个布尔值，该值指示是否将主题应用到派生自控件 <see cref="T:System.Web.UI.TemplateControl" />
    ///  类。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要使用的主题;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    ///<summary>
    ///  获取或设置从中分析和编译该控件的文件的相对于应用程序、 虚拟目录路径。
    ///</summary>
    ///<returns>
    ///  一个表示该路径的字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  设置的路径是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  设置的路径不是根路径。
    ///</exception>
    property AppRelativeVirtualPath: string read get_AppRelativeVirtualPath write set_AppRelativeVirtualPath;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property SkinID: string read get_SkinID write set_SkinID;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
  end;

  TDNPage = class(TDNGenericImport<DNPageClass, DNPage>)
  public const
    ///<summary>
    ///  一个字符串，定义 EVENTTARGET 隐藏的字段在呈现的页。
    ///</summary>
   postEventSourceID = '__EVENTTARGET';
    ///<summary>
    ///  一个字符串，定义所引起的隐藏的字段在呈现的页。
    ///</summary>
   postEventArgumentID = '__EVENTARGUMENT';
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNWebControlClass = interface(DNControlClass)
  ['{0B7A41BE-76F4-5CAC-930E-062AB9E8401E}']
  { static getter & setter } 

    {class} function get_DisabledCssClass: string;
    {class} procedure set_DisabledCssClass(value: string);

  { static propertys } 

    ///<summary>
    ///  获取或设置要禁用的控件时应用于呈现的 HTML 元素的 CSS 类。
    ///</summary>
    ///<returns>
    ///  禁用该控件时应为呈现的 HTML 元素应用 CSS 类。
    ///  默认值为"aspNetDisabled"。
    ///</returns>
    {class} property DisabledCssClass: string read get_DisabledCssClass write set_DisabledCssClass;
  end;

  ///<summary>
  ///  充当基类，该基类定义 <see cref="N:System.Web.UI.WebControls" />
  ///  命名空间中的所有控件常见的方法、属性和事件。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.WebControl')]
  DNWebControl = interface(DNControl)
  ['{23CE0D50-B8F7-303F-80A1-398DDC049C99}']
  { getters & setters } 

    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DNColor;
    procedure set_BackColor(value: DNColor);
    function get_BorderColor: DNColor;
    procedure set_BorderColor(value: DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DNColor;
    procedure set_ForeColor(value: DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SupportsDisabledAttribute: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  将指定样式的所有非空元素复制到 Web 控件，并覆盖任何现有的控件的样式元素。
    ///  此方法主要由控件开发人员使用。
    ///</summary>
    ///  <param name="s">
    ///  一个 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  ，表示要复制的样式。
    ///</param>
    procedure ApplyStyle(s: DNStyle);
    ///<summary>
    ///  将复制到 Web 的指定样式的任何非空元素控制，但将不会覆盖任何现有的控件的样式元素。
    ///  此方法主要由控件开发人员使用。
    ///</summary>
    ///  <param name="s">
    ///  一个 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  ，表示要复制的样式。
    ///</param>
    procedure MergeStyle(s: DNStyle);
    ///<summary>
    ///  打开指定的编写器控件标记的 HTML 呈现。
    ///  此方法主要由控件开发人员使用。
    ///</summary>
    ///  <param name="writer">
    ///  表示在客户端上呈现 HTML 内容的输出流的 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  。
    ///</param>
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    ///<summary>
    ///  到指定的编写器关闭该控件的标记的 HTML 呈现。
    ///  此方法主要由控件开发人员使用。
    ///</summary>
    ///  <param name="writer">
    ///  表示在客户端上呈现 HTML 内容的输出流的 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  。
    ///</param>
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    ///<summary>
    ///  仪表板复制属性未封装的 <see cref="P:System.Web.UI.WebControls.WebControl.Style" />
    ///  从指定的 Web 服务器控件为这种方法称为从 Web 服务器控件的对象。
    ///  此方法主要由控件开发人员使用。
    ///</summary>
    ///  <param name="controlSrc">
    ///  一个 <see cref="T:System.Web.UI.WebControls.WebControl" />
    ///  ，它表示要复制到从中调用此方法的 Web 服务器控件属性的源控件。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="controlSrc" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    ///<summary>
    ///  获取对应于一组路由参数的 URL。
    ///</summary>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  与指定的路由参数对应的 URL。
    ///</returns>
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    ///<summary>
    ///  获取对应于一组路由参数和路由名称的 URL。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  将指定的路由参数和路由名称对应的 URL。
    ///</returns>
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    ///<summary>
    ///  将应用到该控件的页样式表中定义的样式属性。
    ///</summary>
    ///  <param name="page"><see cref="T:System.Web.UI.Page" />
    ///  包含该控件。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  已应用了样式表。
    ///</exception>
    procedure ApplyStyleSheetSkin(page: DNPage);
    ///<summary>
    ///  将数据源绑定到调用的服务器控件及其所有子控件。
    ///</summary>
    procedure DataBind;
    ///<summary>
    ///  设置输入焦点移到控件。
    ///</summary>
    procedure Focus;
    ///<summary>
    ///  输出到提供的服务器控件内容 <see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  对象，如果启用了跟踪将存储有关控件的跟踪信息。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Web.UI.HtmlTextWriter" />
    ///  接收控件内容的对象。
    ///</param>
    procedure RenderControl(writer: DNHtmlTextWriter);
    ///<summary>
    ///  使服务器控件以从内存中释放之前执行最后的清理。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将 URL 转换成一个请求的客户端上可用。
    ///</summary>
    ///  <param name="relativeUrl">
    ///  与 URL 关联 <see cref="P:System.Web.UI.Control.TemplateSourceDirectory" />
    ///  属性。
    ///</param>
    ///<returns>
    ///  转换后的 URL。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  如果则会发生 <paramref name="relativeUrl" />
    ///  参数包含 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveUrl(relativeUrl: string): string;
    ///<summary>
    ///  获取可由浏览器的 URL。
    ///</summary>
    ///  <param name="relativeUrl">
    ///  相对于当前页面 URL。
    ///</param>
    ///<returns>
    ///  适用于在浏览器上使用指定的资源完全限定的 URL。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relativeUrl" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveClientUrl(relativeUrl: string): string;
    ///<summary>
    ///  使用指定的服务器控件当前命名容器中搜索 <paramref name="id" />
    ///  参数。
    ///</summary>
    ///  <param name="id">
    ///  控件要查找的标识符。
    ///</param>
    ///<returns>
    ///  指定的控件，或 <see langword="null" />
    ///  如果指定的控件不存在。
    ///</returns>
    function FindControl(id: string): DNControl;
    ///<summary>
    ///  确定服务器控件是否包含任何子控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果控件包含其他控件，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasControls: Boolean;
    ///<summary>
    ///  设置跟踪为设计时呈现的数据的跟踪、 使用的跟踪数据键和跟踪数据值的数据。
    ///</summary>
    ///  <param name="traceDataKey">
    ///  跟踪数据键。
    ///</param>
    ///  <param name="traceDataValue">
    ///  跟踪数据的值。
    ///</param>
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  设置跟踪为设计时呈现的数据的跟踪，请使用跟踪的对象、 跟踪数据键和跟踪数据值的数据。
    ///</summary>
    ///  <param name="tracedObject">
    ///  跟踪的对象。
    ///</param>
    ///  <param name="traceDataKey">
    ///  跟踪数据键。
    ///</param>
    ///  <param name="traceDataValue">
    ///  跟踪数据的值。
    ///</param>
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  获取对应于一组路由参数的 URL。
    ///</summary>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  与指定的路由参数对应的 URL。
    ///</returns>
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  获取对应于一组路由参数和路由名称的 URL。
    ///</summary>
    ///  <param name="routeName">
    ///  路由的名称。
    ///</param>
    ///  <param name="routeParameters">
    ///  路由参数。
    ///</param>
    ///<returns>
    ///  将指定的路由参数和路由名称对应的 URL。
    ///</returns>
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  返回前缀的部分 <see cref="P:System.Web.UI.Control.UniqueID" />
    ///  指定控件的属性。
    ///</summary>
    ///  <param name="control">
    ///  一个位于命名容器内的控件。
    ///</param>
    ///<returns>
    ///  前缀的部分 <see cref="P:System.Web.UI.Control.UniqueID" />
    ///  指定控件的属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="control" />
    ///  的 <see cref="P:System.Web.UI.Control.NamingContainer" />
    ///  属性为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="control" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetUniqueIDRelativeTo(control: DNControl): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置允许您快速导航到 Web 服务器控件的访问密钥。
    ///</summary>
    ///<returns>
    ///  快速导航到 Web 服务器控件访问密钥。
    ///  默认值是 <see cref="F:System.String.Empty" />
    ///  , ，指示未设置此属性。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  既不是指定的访问键 <see langword="null" />
    ///  , ，<see cref="F:System.String.Empty" />
    ///  也不是单个字符字符串。
    ///</exception>
    property AccessKey: string read get_AccessKey write set_AccessKey;
    ///<summary>
    ///  （只用于呈现） 获取的任意特性的集合在控件上的属性不对应。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.AttributeCollection" />
    ///  的名称和值对。
    ///</returns>
    property Attributes: DNAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取或设置 Web 服务器控件的背景色。
    ///</summary>
    ///<returns>
    ///  表示控件背景色的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  默认值为 <see cref="F:System.Drawing.Color.Empty" />
    ///  ，指示未设置此属性。
    ///</returns>
    property BackColor: DNColor read get_BackColor write set_BackColor;
    ///<summary>
    ///  获取或设置 Web 控件的边框颜色。
    ///</summary>
    ///<returns>
    ///  表示控件的边框颜色的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  默认值为 <see cref="F:System.Drawing.Color.Empty" />
    ///  ，指示未设置此属性。
    ///</returns>
    property BorderColor: DNColor read get_BorderColor write set_BorderColor;
    ///<summary>
    ///  获取或设置 Web 服务器控件的边框宽度。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  表示 Web 服务器控件的边框宽度。
    ///  默认值是 <see cref="F:System.Web.UI.WebControls.Unit.Empty" />
    ///  , ，指示未设置此属性。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的边框的宽度是负值。
    ///</exception>
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    ///<summary>
    ///  获取或设置 Web 服务器控件的边框样式。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.BorderStyle" />
    ///  枚举值之一。
    ///  默认值为 <see langword="NotSet" />
    ///  。
    ///</returns>
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    ///<summary>
    ///  获取 Web 服务器控件的样式。
    ///  此属性主要由控件开发人员使用。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  封装 Web 服务器控件的外观属性。
    ///</returns>
    property ControlStyle: DNStyle read get_ControlStyle;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  对象已经为 <see cref="P:System.Web.UI.WebControls.WebControl.ControlStyle" />
    ///  属性。
    ///  此属性主要由控件开发人员使用。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.UI.WebControls.Style" />
    ///  对象已经为 <see cref="P:System.Web.UI.WebControls.WebControl.ControlStyle" />
    ///  属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    ///<summary>
    ///  获取或设置由客户端上的 Web 服务器控件呈现的级联样式表 (CSS) 类。
    ///</summary>
    ///<returns>
    ///  由 Web 服务器控件在客户端上呈现 CSS 类。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property CssClass: string read get_CssClass write set_CssClass;
    ///<summary>
    ///  获取将呈现为 Web 服务器控件的外部标记上的样式属性的文本特性的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.CssStyleCollection" />
    ///  ，其中包含要在 Web 服务器控件的外部标记上呈现的 HTML 样式特性。
    ///</returns>
    property Style: DNCssStyleCollection read get_Style;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用 Web 服务器控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了控制;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>
    ///  获取或设置一个值，该值指示是否将主题应用到此控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要使用的主题;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    ///<summary>
    ///  获取与 Web 服务器控件相关联的字体属性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  表示 Web 服务器控件的字体属性。
    ///</returns>
    property Font: DNFontInfo read get_Font;
    ///<summary>
    ///  获取或设置 Web 服务器控件的前景颜色 （通常是文本的颜色）。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，表示控件的前景色。
    ///  默认值为 <see cref="F:System.Drawing.Color.Empty" />
    ///  。
    ///</returns>
    property ForeColor: DNColor read get_ForeColor write set_ForeColor;
    ///<summary>
    ///  获取一个值，该值指示控件是否已设置的属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果控件具有属性集;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasAttributes: Boolean read get_HasAttributes;
    ///<summary>
    ///  获取或设置 Web 服务器控件的高度。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  ，表示控件的高度。
    ///  默认值为 <see cref="F:System.Web.UI.WebControls.Unit.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  高度设置为负值。
    ///</exception>
    property Height: DNUnit read get_Height write set_Height;
    ///<summary>
    ///  获取一个值，该值指示在控件的 <see cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" />
    ///  属性为 <see langword="false" />
    ///  时，控件是否应将呈现的 HTML 元素的 <see langword="disabled" />
    ///  特性设置为 "disabled"。
    ///</summary>
    ///<returns>
    ///  总是为 <see langword="true" />
    ///  。
    ///</returns>
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    ///<summary>
    ///  获取或设置要应用于控件的外观。
    ///</summary>
    ///<returns>
    ///  要应用于控件外观的名称。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  中指定的外观 <see cref="P:System.Web.UI.WebControls.WebControl.SkinID" />
    ///  主题中不存在属性。
    ///</exception>
    property SkinID: string read get_SkinID write set_SkinID;
    ///<summary>
    ///  获取或设置 Web 服务器控件的 tab 键索引。
    ///</summary>
    ///<returns>
    ///  Web 服务器控件的 tab 键索引。
    ///  默认值为 <see langword="0" />
    ///  ，指示未设置此属性。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的选项卡索引不是介于-32768 到 32767 之间。
    ///</exception>
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    ///<summary>
    ///  获取或设置当鼠标指针悬停在 Web 服务器控件上时显示的文本。
    ///</summary>
    ///<returns>
    ///  将鼠标指针悬停在 Web 服务器控件上时显示的文本。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property ToolTip: string read get_ToolTip write set_ToolTip;
    ///<summary>
    ///  获取或设置 Web 服务器控件的宽度。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.Unit" />
    ///  表示控件的宽度。
    ///  默认值为 <see cref="F:System.Web.UI.WebControls.Unit.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  Web 服务器控件的宽度设置为负值。
    ///</exception>
    property Width: DNUnit read get_Width write set_Width;
    ///<summary>
    ///  获取或设置用于生成的值的算法 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个值，指示如何 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  生成属性。
    ///  默认值为 <see cref="F:System.Web.UI.ClientIDMode.Inherit" />
    ///  。
    ///</returns>
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    ///<summary>
    ///  获取由 ASP.NET 生成的 HTML 标记的控件 ID。
    ///</summary>
    ///<returns>
    ///  由 ASP.NET 生成的 HTML 标记的控件 ID。
    ///</returns>
    property ClientID: string read get_ClientID;
    ///<summary>
    ///  获取或设置分配给服务器控件的编程标识符。
    ///</summary>
    ///<returns>
    ///  分配给控件的编程标识符。
    ///</returns>
    property ID: string read get_ID write set_ID;
    ///<summary>
    ///  获取或设置一个值，该值指示服务器控件是否向发出请求的客户端保持自己的视图状态以及它所包含的任何子控件的视图状态。
    ///</summary>
    ///<returns>
    ///  如果服务器控件保持其视图状态，则否 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    ///<summary>
    ///  获取或设置此控件的视图状态模式。
    ///</summary>
    ///<returns>
    ///  此控件的视图状态模式。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  尝试将此属性设置为一个值，将不在 <see cref="T:System.Web.UI.ViewStateMode" />
    ///  枚举。
    ///</exception>
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    ///<summary>
    ///  获取对服务器控件的引用的命名容器，这将创建唯一的命名空间区分具有相同的服务器控件 <see cref="P:System.Web.UI.Control.ID" />
    ///  属性值。
    ///</summary>
    ///<returns>
    ///  服务器控件的命名容器。
    ///</returns>
    property NamingContainer: DNControl read get_NamingContainer;
    ///<summary>
    ///  获取包含该控件的数据绑定的控件。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.Control" />
    ///  ，其中包含该控件的数据绑定。
    ///</returns>
    property BindingContainer: DNControl read get_BindingContainer;
    ///<summary>
    ///  获取命名容器的引用，如果命名容器实现 <see cref="T:System.Web.UI.IDataItemContainer" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名容器。
    ///  层次结构的命名容器的实现中 <see cref="T:System.Web.UI.IDataItemContainer" />
    ///  , ，此属性返回的命名容器层次结构中，顶部或 <see langword="null" />
    ///  如果当前 <see cref="T:System.Web.UI.Control" />
    ///  对象不在命名容器实现 <see cref="T:System.Web.UI.IDataItemContainer" />
    ///  。
    ///</returns>
    property DataItemContainer: DNControl read get_DataItemContainer;
    ///<summary>
    ///  获取命名容器的引用，如果命名容器实现 <see cref="T:System.Web.UI.IDataKeysControl" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名容器。
    ///  层次结构的命名容器的实现中 <see cref="T:System.Web.UI.IDataKeysControl" />
    ///  , ，该属性返回的命名容器层次结构中，顶部或 <see langword="null" />
    ///  如果当前 <see cref="T:System.Web.UI.Control" />
    ///  对象不在命名容器实现 <see cref="T:System.Web.UI.IDataKeysControl" />
    ///  。
    ///</returns>
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.Page" />
    ///  包含服务器控件的实例。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.Page" />
    ///  包含服务器控件的实例。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该控件是 <see cref="T:System.Web.UI.WebControls.Substitution" />
    ///  控件。
    ///</exception>
    property Page: DNPage read get_Page write set_Page;
    ///<summary>
    ///  获取一个值，指定将与兼容呈现 HTML 的 ASP.NET 版本。
    ///</summary>
    ///<returns>
    ///  HTML 呈现的 ASP.NET 版本将与兼容。
    ///</returns>
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    ///<summary>
    ///  获取或设置对包含该控件模板的引用。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.TemplateControl" />
    ///  包含该控件的实例。
    ///</returns>
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    ///<summary>
    ///  页面控件层次结构中获取对服务器控件的父控件的引用。
    ///</summary>
    ///<returns>
    ///  对服务器控件的父控件的引用。
    ///</returns>
    property Parent: DNControl read get_Parent;
    ///<summary>
    ///  获取虚拟目录的 <see cref="T:System.Web.UI.Page" />
    ///  或 <see cref="T:System.Web.UI.UserControl" />
    ///  ，其中包含当前的服务器控件。
    ///</summary>
    ///<returns>
    ///  包含服务器控件的页面或用户控件的虚拟目录。
    ///</returns>
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    ///<summary>
    ///  获取或设置相对于应用程序虚拟目录的 <see cref="T:System.Web.UI.Page" />
    ///  或 <see cref="T:System.Web.UI.UserControl" />
    ///  对象，其中包含此控件。
    ///</summary>
    ///<returns>
    ///  包含此控件的页面或用户控件相对于应用程序虚拟目录。
    ///</returns>
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    ///<summary>
    ///  获取承载在设计图面上呈现时的当前控件的容器相关信息。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.ISite" />
    ///  包含有关控件承载在容器的信息。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该控件是 <see cref="T:System.Web.UI.WebControls.Substitution" />
    ///  控件。
    ///</exception>
    property Site: DNISite read get_Site write set_Site;
    ///<summary>
    ///  获取或设置一个值，该值指示服务器控件是否作为 UI 呈现在页上。
    ///</summary>
    ///<returns>
    ///  如果控件在页上可见，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Visible: Boolean read get_Visible write set_Visible;
    ///<summary>
    ///  获取服务器控件的唯一的分层限定标识符。
    ///</summary>
    ///<returns>
    ///  服务器控件的完全限定的标识符。
    ///</returns>
    property UniqueID: string read get_UniqueID;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.ControlCollection" />
    ///  表示 UI 层次结构中的指定的服务器控件的子控件的对象。
    ///</summary>
    ///<returns>
    ///  指定服务器控件的子控件的集合。
    ///</returns>
    property Controls: DNControlCollection read get_Controls;
    ///<summary>
    ///  获取或设置一个值，该值指示控件是否检查潜在危险值在浏览器中的客户端输入。
    ///</summary>
    ///<returns>
    ///  确定控件是否检查客户端输入一个值。
    ///  值可以包括 <see cref="F:System.Web.UI.ValidateRequestMode.Disabled" />
    ///  , ，<see cref="F:System.Web.UI.ValidateRequestMode.Enabled" />
    ///  , ，和 <see cref="F:System.Web.UI.ValidateRequestMode.Inherit" />
    ///  。
    ///  默认值是 <see cref="F:System.Web.UI.ValidateRequestMode.Inherit" />
    ///  , ，这意味着该控件从其父级获取的值。
    ///</returns>
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNWebControl = class(TDNGenericImport<DNWebControlClass, DNWebControl>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewClass = interface(DNObjectClass)
  ['{7309E895-6495-56B1-84FF-4C95A22C24E4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNGridView;

  end;

  ///<summary>
  ///  在表中显示数据源的值，其中每列表示一个字段，每行表示一条记录。
  ///  使用 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件可以选择和编辑这些项以及对它们进行排序。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridView')]
  DNGridView = interface(DNObject)
  ['{3BC755C6-B407-3C17-8B3F-FF64763C3AAE}']
  { getters & setters } 

    function get_UpdateMethod: string;
    procedure set_UpdateMethod(value: string);
    function get_DeleteMethod: string;
    procedure set_DeleteMethod(value: string);
    function get_AllowCustomPaging: Boolean;
    procedure set_AllowCustomPaging(value: Boolean);
    function get_AllowPaging: Boolean;
    procedure set_AllowPaging(value: Boolean);
    function get_AllowSorting: Boolean;
    procedure set_AllowSorting(value: Boolean);
    function get_AlternatingRowStyle: DNTableItemStyle;
    function get_AutoGenerateDeleteButton: Boolean;
    procedure set_AutoGenerateDeleteButton(value: Boolean);
    function get_AutoGenerateEditButton: Boolean;
    procedure set_AutoGenerateEditButton(value: Boolean);
    function get_AutoGenerateSelectButton: Boolean;
    procedure set_AutoGenerateSelectButton(value: Boolean);
    function get_AutoGenerateColumns: Boolean;
    procedure set_AutoGenerateColumns(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_BottomPagerRow: DNGridViewRow;
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_Columns: DNDataControlFieldCollection;
    function get_ColumnsGenerator: DNIAutoFieldGenerator;
    procedure set_ColumnsGenerator(value: DNIAutoFieldGenerator);
    function get_DataKeys: DNDataKeyArray;
    function get_ClientIDRowSuffixDataKeys: DNDataKeyArray;
    function get_DataKeyNames: TArray<string>;
    procedure set_DataKeyNames(value: TArray<string>);
    function get_EditIndex: Int32;
    procedure set_EditIndex(value: Int32);
    function get_EditRowStyle: DNTableItemStyle;
    function get_EnableModelValidation: Boolean;
    procedure set_EnableModelValidation(value: Boolean);
    function get_EnablePersistedSelection: Boolean;
    procedure set_EnablePersistedSelection(value: Boolean);
    function get_EnableSortingAndPagingCallbacks: Boolean;
    procedure set_EnableSortingAndPagingCallbacks(value: Boolean);
    function get_EmptyDataRowStyle: DNTableItemStyle;
    function get_EmptyDataTemplate: DNITemplate;
    procedure set_EmptyDataTemplate(value: DNITemplate);
    function get_EmptyDataText: string;
    procedure set_EmptyDataText(value: string);
    function get_FooterRow: DNGridViewRow;
    function get_FooterStyle: DNTableItemStyle;
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_HeaderRow: DNGridViewRow;
    function get_HeaderStyle: DNTableItemStyle;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_PageCount: Int32;
    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PagerSettings: DNPagerSettings;
    function get_PagerStyle: DNTableItemStyle;
    function get_PagerTemplate: DNITemplate;
    procedure set_PagerTemplate(value: DNITemplate);
    function get_PageSize: Int32;
    procedure set_PageSize(value: Int32);
    function get_ClientIDRowSuffix: TArray<string>;
    procedure set_ClientIDRowSuffix(value: TArray<string>);
    function get_RowHeaderColumn: string;
    procedure set_RowHeaderColumn(value: string);
    function get_Rows: DNGridViewRowCollection;
    function get_RowStyle: DNTableItemStyle;
    function get_SelectedDataKey: DNDataKey;
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedValue: DDN.mscorlib.DNObject;
    function get_SelectedRow: DNGridViewRow;
    function get_SelectedRowStyle: DNTableItemStyle;
    function get_ShowFooter: Boolean;
    procedure set_ShowFooter(value: Boolean);
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_ShowHeaderWhenEmpty: Boolean;
    procedure set_ShowHeaderWhenEmpty(value: Boolean);
    function get_SortDirection: DNSortDirection;
    function get_SortExpression: string;
    function get_SortedAscendingCellStyle: DNTableItemStyle;
    function get_SortedAscendingHeaderStyle: DNTableItemStyle;
    function get_SortedDescendingCellStyle: DNTableItemStyle;
    function get_SortedDescendingHeaderStyle: DNTableItemStyle;
    function get_TopPagerRow: DNGridViewRow;
    function get_UseAccessibleHeader: Boolean;
    procedure set_UseAccessibleHeader(value: Boolean);
    function get_VirtualItemCount: Int32;
    procedure set_VirtualItemCount(value: Int32);
    function get_SelectedPersistedDataKey: DNDataKey;
    procedure set_SelectedPersistedDataKey(value: DNDataKey);
    function get_Controls: DNControlCollection;
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DNColor;
    procedure set_BackColor(value: DNColor);
    function get_BorderColor: DNColor;
    procedure set_BorderColor(value: DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DNColor;
    procedure set_ForeColor(value: DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_RowDeleted(value: DNGridViewDeletedEventHandler);
    procedure remove_RowDeleted(value: DNGridViewDeletedEventHandler);
    procedure add_RowUpdated(value: DNGridViewUpdatedEventHandler);
    procedure remove_RowUpdated(value: DNGridViewUpdatedEventHandler);
    procedure add_RowCancelingEdit(value: DNGridViewCancelEditEventHandler);
    procedure remove_RowCancelingEdit(value: DNGridViewCancelEditEventHandler);
    procedure add_RowDeleting(value: DNGridViewDeleteEventHandler);
    procedure remove_RowDeleting(value: DNGridViewDeleteEventHandler);
    procedure add_RowEditing(value: DNGridViewEditEventHandler);
    procedure remove_RowEditing(value: DNGridViewEditEventHandler);
    procedure add_PageIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PageIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_PageIndexChanging(value: DNGridViewPageEventHandler);
    procedure remove_PageIndexChanging(value: DNGridViewPageEventHandler);
    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_SelectedIndexChanging(value: DNGridViewSelectEventHandler);
    procedure remove_SelectedIndexChanging(value: DNGridViewSelectEventHandler);
    procedure add_Sorted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Sorted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Sorting(value: DNGridViewSortEventHandler);
    procedure remove_Sorting(value: DNGridViewSortEventHandler);
    procedure add_RowUpdating(value: DNGridViewUpdateEventHandler);
    procedure remove_RowUpdating(value: DNGridViewUpdateEventHandler);
    procedure add_RowCommand(value: DNGridViewCommandEventHandler);
    procedure remove_RowCommand(value: DNGridViewCommandEventHandler);
    procedure add_RowCreated(value: DNGridViewRowEventHandler);
    procedure remove_RowCreated(value: DNGridViewRowEventHandler);
    procedure add_RowDataBound(value: DNGridViewRowEventHandler);
    procedure remove_RowDataBound(value: DNGridViewRowEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  确定指定的数据类型是否可以绑定到中的列 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///  <param name="type">
    ///  一个 <see cref="T:System.Type" />
    ///  ，它表示要测试的数据类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的数据类型可以绑定到中的列 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件的指针; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsBindableType(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>
    ///  将数据源绑定到 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///  不能继承此方法。
    ///</summary>
    procedure DataBind;
    ///<summary>
    ///  从数据源中删除指定索引处的记录。
    ///</summary>
    ///  <param name="rowIndex">
    ///  要删除行的索引。
    ///</param>
    ///<exception cref="T:System.Web.HttpException"><see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件未绑定到数据源控件。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  数据源控件 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件已绑定不支持删除操作，或者没有为数据源定义 delete 命令。
    ///</exception>
    procedure DeleteRow(rowIndex: Int32);
    ///<summary>
    ///  设置的页索引 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件使用的行索引。
    ///</summary>
    ///  <param name="rowIndex">
    ///  要编辑的页面上的行的索引。
    ///</param>
    procedure SetPageIndex(rowIndex: Int32);
    ///<summary>
    ///  选择要编辑中的行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///  <param name="rowIndex">
    ///  若要编辑的行的索引。
    ///</param>
    procedure SelectRow(rowIndex: Int32);
    ///<summary>
    ///  将某行处于编辑模式中 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件通过使用指定的行索引。
    ///</summary>
    ///  <param name="rowIndex">
    ///  若要编辑的行的索引。
    ///</param>
    procedure SetEditRow(rowIndex: Int32);
    ///<summary>
    ///  排序 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控制基于指定的排序表达式和方向。
    ///</summary>
    ///  <param name="sortExpression">
    ///  要排序的排序表达式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</param>
    ///  <param name="sortDirection"><see cref="T:System.Web.UI.WebControls.SortDirection" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.Web.HttpException"><see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件绑定到数据源控件，但 <see cref="T:System.Web.UI.DataSourceView" />
    ///  该键相关联的数据源是 <see langword="null" />
    ///  。
    ///</exception>
    procedure Sort(sortExpression: string; sortDirection: DNSortDirection);
    ///<summary>
    ///  更新使用行中的字段值的指定的行索引处的记录。
    ///</summary>
    ///  <param name="rowIndex">
    ///  要更新的行的索引。
    ///</param>
    ///  <param name="causesValidation"><see langword="true" />
    ///  当调用此方法; 执行页验证否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Web.HttpException"><see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件绑定到数据源控件，但 <see cref="T:System.Web.UI.DataSourceView" />
    ///  相关联的数据源是 <see langword="null" />
    ///  。
    ///</exception>
    procedure UpdateRow(rowIndex: Int32; causesValidation: Boolean);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要调用，以便更新数据的方法的名称。
    ///</summary>
    ///<returns>
    ///  方法的名称。
    ///</returns>
    property UpdateMethod: string read get_UpdateMethod write set_UpdateMethod;
    ///<summary>
    ///  获取或设置要调用，以便删除数据的方法的名称。
    ///</summary>
    ///<returns>
    ///  方法的名称。
    ///</returns>
    property DeleteMethod: string read get_DeleteMethod write set_DeleteMethod;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用自定义分页。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了自定义分页;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowCustomPaging: Boolean read get_AllowCustomPaging write set_AllowCustomPaging;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用分页功能。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用分页功能;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowPaging: Boolean read get_AllowPaging write set_AllowPaging;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用排序功能。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了排序的功能;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowSorting: Boolean read get_AllowSorting write set_AllowSorting;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，它使您能够设置交替中的数据行的外观 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  该对象表示的数据中交替行样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property AlternatingRowStyle: DNTableItemStyle read get_AlternatingRowStyle;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.CommandField" />
    ///  Delete 按钮对每个数据行的字段列自动添加到 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要自动添加 <see cref="T:System.Web.UI.WebControls.CommandField" />
    ///  具有每个数据行; 删除按钮的字段列否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AutoGenerateDeleteButton: Boolean read get_AutoGenerateDeleteButton write set_AutoGenerateDeleteButton;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.CommandField" />
    ///  具有每个数据行编辑按钮的字段列自动添加到 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要自动添加 <see cref="T:System.Web.UI.WebControls.CommandField" />
    ///  字段列有一个编辑按钮，每个数据行; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AutoGenerateEditButton: Boolean read get_AutoGenerateEditButton write set_AutoGenerateEditButton;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.CommandField" />
    ///  选择按钮对每个数据行的字段列自动添加到 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要自动添加 <see cref="T:System.Web.UI.WebControls.CommandField" />
    ///  字段列选择按钮对每个数据行; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AutoGenerateSelectButton: Boolean read get_AutoGenerateSelectButton write set_AutoGenerateSelectButton;
    ///<summary>
    ///  获取或设置一个值，该值指示是否为数据源中的每个字段自动创建绑定的字段。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要在数据源，则自动创建的每个字段绑定的字段否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property AutoGenerateColumns: Boolean read get_AutoGenerateColumns write set_AutoGenerateColumns;
    ///<summary>
    ///  获取或设置要显示的背景中的图像的 URL <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  要显示的背景中的图像 URL <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///  默认值为空字符串 ("")，表示尚未设置此属性。
    ///</returns>
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  对象，表示中的底部寻呼行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  ，表示在控件中的底部寻呼行。
    ///</returns>
    property BottomPagerRow: DNGridViewRow read get_BottomPagerRow;
    ///<summary>
    ///  获取或设置要在一个 HTML 标题元素中呈现的文本 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///  提供此属性以使控件的辅助技术设备的用户更易于访问。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示要在一个 HTML 标题元素中呈现的文本 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  获取或设置中的 HTML 标题元素的水平或垂直位置 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///  提供此属性以使控件的辅助技术设备的用户更易于访问。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.TableCaptionAlign" />
    ///  值之一。
    ///  默认值是 <see langword="TableCaptionAlign.NotSet" />
    ///  , ，它使用浏览器的默认设置。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的值不是之一 <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" />
    ///  枚举值。
    ///</exception>
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    ///<summary>
    ///  获取或设置单元格的内容和单元格的边框之间的空间量。
    ///</summary>
    ///<returns>
    ///  以像素为单位的单元格的内容和单元格的边框之间的空间量。
    ///  默认值为-1，指示未设置此属性。
    ///</returns>
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    ///<summary>
    ///  获取或设置单元格之间的空间量。
    ///</summary>
    ///<returns>
    ///  单元格之间的空间量（以像素为单位）。
    ///  默认值为 0。
    ///</returns>
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    ///<summary>
    ///  获取一套 <see cref="T:System.Web.UI.WebControls.DataControlField" />
    ///  对象，后者表示中的列字段 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" />
    ///  ，其中包含中的所有列字段 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property Columns: DNDataControlFieldCollection read get_Columns;
    ///<summary>
    ///  获取或设置将自动生成的列的控件 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件，以使用 ASP.NET 动态数据功能。
    ///</summary>
    ///<returns>
    ///  将自动生成的列的控件 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件，以使用 ASP.NET 动态数据功能。
    ///</returns>
    property ColumnsGenerator: DNIAutoFieldGenerator read get_ColumnsGenerator write set_ColumnsGenerator;
    ///<summary>
    ///  获取一套 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  表示的数据的对象中每个行的键值 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.DataKeyArray" />
    ///  包含中的每一行数据密钥 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property DataKeys: DNDataKeyArray read get_DataKeys;
    ///<summary>
    ///  获取用于唯一标识每个实例的数据绑定控件，当 ASP.NET 生成的数据值 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  值。
    ///</summary>
    ///<returns>
    ///  用于唯一标识每个实例的数据绑定控件，当 ASP.NET 生成的数据值 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  值。
    ///</returns>
    property ClientIDRowSuffixDataKeys: DNDataKeyArray read get_ClientIDRowSuffixDataKeys;
    ///<summary>
    ///  获取或设置一个数组，其中包含有关中显示的项 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个数组，包含主键的名称字段中显示的项 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property DataKeyNames: TArray<string> read get_DataKeyNames write set_DataKeyNames;
    ///<summary>
    ///  获取或设置要编辑的行的索引。
    ///</summary>
    ///<returns>
    ///  要编辑的行的从零开始的索引。
    ///  默认值为-1，指示正在编辑任何行。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的索引为小于-1。
    ///</exception>
    property EditIndex: Int32 read get_EditIndex write set_EditIndex;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，它使您能够设置中选择进行编辑的行的外观 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  表示中正在编辑的行的样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property EditRowStyle: DNTableItemStyle read get_EditRowStyle;
    ///<summary>
    ///  获取或设置一个值，该值指示是否验证程序控件将处理异常，在插入过程中发生或更新操作。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果验证程序控件将处理在插入过程中发生或更新操作，则为异常，，否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableModelValidation: Boolean read get_EnableModelValidation write set_EnableModelValidation;
    ///<summary>
    ///  获取或设置一个值，指示行的选择基于索引或数据密钥值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果行选择基于数据密钥值;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnablePersistedSelection: Boolean read get_EnablePersistedSelection write set_EnablePersistedSelection;
    ///<summary>
    ///  获取或设置一个值，该值指示是否将客户端回调用于排序和分页操作。
    ///</summary>
    ///<returns><see langword="true" />
    ///  要用于排序和分页操作，则为客户端回调否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.GridView.Columns" />
    ///  集合包含的列不支持回调，如 <see cref="T:System.Web.UI.WebControls.TemplateField" />
    ///  。
    ///</exception>
    property EnableSortingAndPagingCallbacks: Boolean read get_EnableSortingAndPagingCallbacks write set_EnableSortingAndPagingCallbacks;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，它使您能够设置空数据行的外观时，呈现 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件绑定到的数据源中不包含任何记录。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  ，使您可以设置为 null 的行的外观。
    ///</returns>
    property EmptyDataRowStyle: DNTableItemStyle read get_EmptyDataRowStyle;
    ///<summary>
    ///  获取或设置用户定义的内容为空数据行时，呈现 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件绑定到的数据源中不包含任何记录。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.ITemplate" />
    ///  包含空数据行的自定义内容。
    ///  默认值是 <see langword="null" />
    ///  , ，指示未设置此属性。
    ///</returns>
    property EmptyDataTemplate: DNITemplate read get_EmptyDataTemplate write set_EmptyDataTemplate;
    ///<summary>
    ///  获取或设置要显示空的数据行中的文本时，呈现 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件绑定到的数据源中不包含任何记录。
    ///</summary>
    ///<returns>
    ///  要在空数据行中显示的文本。
    ///  默认值为空字符串 ("")，表示尚未设置此属性。
    ///</returns>
    property EmptyDataText: string read get_EmptyDataText write set_EmptyDataText;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  对象，表示中的页脚行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  ，表示中的页脚行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property FooterRow: DNGridViewRow read get_FooterRow;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，它使您能够设置中的页脚行的外观 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  该对象表示的脚注行中的样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    ///<summary>
    ///  获取或设置网格线样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.GridLines" />
    ///  值之一。
    ///  默认值为 <see langword="GridLines.Both" />
    ///  。
    ///</returns>
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  对象，表示中的标题行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  表示中的标题行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property HeaderRow: DNGridViewRow read get_HeaderRow;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，它使您能够设置中的标题行的外观 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  表示中的标题行的样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    ///<summary>
    ///  获取或设置的水平对齐方式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  页上的控件。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.HorizontalAlign" />
    ///  值之一。
    ///  默认值为 <see langword="HorizontalAlign.NotSet" />
    ///  。
    ///</returns>
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    ///<summary>
    ///  获取显示的记录中的数据源所需的页数 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  中的页数 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property PageCount: Int32 read get_PageCount;
    ///<summary>
    ///  获取或设置当前显示页的索引。
    ///</summary>
    ///<returns>
    ///  当前显示页面的从零开始的索引。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.GridView.PageIndex" />
    ///  属性被设置为一个小于 0 的值。
    ///</exception>
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.WebControls.PagerSettings" />
    ///  对象，它使您能够设置的属性中的页导航按钮 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.UI.WebControls.PagerSettings" />
    ///  ，可用于设置的属性中的页导航按钮 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property PagerSettings: DNPagerSettings read get_PagerSettings;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，它使您能够设置寻呼程序中行的外观 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  表示页导航行中的样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property PagerStyle: DNTableItemStyle read get_PagerStyle;
    ///<summary>
    ///  获取或设置寻呼程序中行的自定义内容 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.ITemplate" />
    ///  包含页导航行的自定义内容。
    ///  默认值为 null，表示未设置此属性。
    ///</returns>
    property PagerTemplate: DNITemplate read get_PagerTemplate write set_PagerTemplate;
    ///<summary>
    ///  获取或设置要在页面上显示的记录数 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  要在单页上显示的记录数。
    ///  默认值为 10。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.GridView.PageSize" />
    ///  属性设置为小于 1 的值。
    ///</exception>
    property PageSize: Int32 read get_PageSize write set_PageSize;
    ///<summary>
    ///  获取或设置其值追加到数据字段的名称 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  属性值来唯一地标识每个实例的数据绑定控件。
    ///</summary>
    ///<returns>
    ///  其值用于唯一地标识每个实例的数据绑定控件，当 ASP.NET 生成的数据字段的名称 <see cref="P:System.Web.UI.Control.ClientID" />
    ///  值。
    ///</returns>
    property ClientIDRowSuffix: TArray<string> read get_ClientIDRowSuffix write set_ClientIDRowSuffix;
    ///<summary>
    ///  获取或设置要用作列标题的列的名称 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///  提供此属性以使控件的辅助技术设备的用户更易于访问。
    ///</summary>
    ///<returns>
    ///  要用作列标题的列的名称。
    ///  默认值为空字符串 ("")，表示尚未设置此属性。
    ///</returns>
    property RowHeaderColumn: string read get_RowHeaderColumn write set_RowHeaderColumn;
    ///<summary>
    ///  获取一套 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  对象，后者表示中的数据行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" />
    ///  ，其中包含中的所有数据行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property Rows: DNGridViewRowCollection read get_Rows;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，它使您能够设置中的数据行的外观 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  表示中的数据行的样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property RowStyle: DNTableItemStyle read get_RowStyle;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  对象，其中包含中的选定行的数据键值 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  中所选行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///  默认值是 <see langword="null" />
    ///  , ，指示当前选择任何行。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  没有数据的键中指定 <see cref="P:System.Web.UI.WebControls.GridView.DataKeyNames" />
    ///  属性。
    ///</exception>
    property SelectedDataKey: DNDataKey read get_SelectedDataKey;
    ///<summary>
    ///  获取或设置在所选行的索引 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  在所选行的从零开始的索引 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///  默认值为-1，指示当前选择任何行。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.GridView.SelectedIndex" />
    ///  属性设置为小于-1 的值。
    ///</exception>
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    ///<summary>
    ///  获取在所选行的数据键值 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  数据中所选行的键值 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property SelectedValue: DDN.mscorlib.DNObject read get_SelectedValue;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  对象，表示在控件中选定的行。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  ，表示在控件中的所选的行。
    ///</returns>
    property SelectedRow: DNGridViewRow read get_SelectedRow;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，它使您能够设置中的选定行的外观 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  该对象表示在所选行的样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property SelectedRowStyle: DNTableItemStyle read get_SelectedRowStyle;
    ///<summary>
    ///  获取或设置一个值，该值指示在显示页脚行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要显示页脚行中;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ShowFooter: Boolean read get_ShowFooter write set_ShowFooter;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在中显示的标题行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要显示的标题行;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在列标题 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  列不包含数据时，控件是否可见。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果标头可见，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ShowHeaderWhenEmpty: Boolean read get_ShowHeaderWhenEmpty write set_ShowHeaderWhenEmpty;
    ///<summary>
    ///  获取正在排序的列的排序方向。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.SortDirection" />
    ///  值之一。
    ///  默认值为 <see langword="SortDirection.Ascending" />
    ///  。
    ///</returns>
    property SortDirection: DNSortDirection read get_SortDirection;
    ///<summary>
    ///  获取与正在排序的列关联的排序表达式。
    ///</summary>
    ///<returns>
    ///  与正在排序的列关联的排序表达式。
    ///</returns>
    property SortExpression: string read get_SortExpression;
    ///<summary>
    ///  获取或设置的 CSS 样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  时按升序对列排序的列。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应用了样式为 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控制时的列是按升序排序; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SortedAscendingCellStyle: DNTableItemStyle read get_SortedAscendingCellStyle;
    ///<summary>
    ///  获取或设置要应用到的 CSS 样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  列标题时按升序对列排序。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应用了样式为 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  标题的列是按升序排序; 否则为当 <see langword="false" />
    ///  。
    ///</returns>
    property SortedAscendingHeaderStyle: DNTableItemStyle read get_SortedAscendingHeaderStyle;
    ///<summary>
    ///  获取或设置的样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  时按降序对列排序的列。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应用了样式为 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  如果列是按降序排序; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SortedDescendingCellStyle: DNTableItemStyle read get_SortedDescendingCellStyle;
    ///<summary>
    ///  获取或设置要应用于样式 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  列标题时按降序对列排序。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应用了样式为 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  标题的列是按降序排序; 否则为当 <see langword="false" />
    ///  。
    ///</returns>
    property SortedDescendingHeaderStyle: DNTableItemStyle read get_SortedDescendingHeaderStyle;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  对象，表示在顶部页导航行 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  ，表示在控件中的顶部页导航行。
    ///</returns>
    property TopPagerRow: DNGridViewRow read get_TopPagerRow;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件呈现其标头中可访问的格式。
    ///  提供此属性以使控件的辅助技术设备的用户更易于访问。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件呈现其标头中可访问的格式; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property UseAccessibleHeader: Boolean read get_UseAccessibleHeader write set_UseAccessibleHeader;
    ///<summary>
    ///  获取或数据源中设置实际项数 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  使用自定义分页时，将控件绑定到。
    ///</summary>
    ///<returns>
    ///  在数据中的虚拟项数源 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  使用自定义分页时，将控件绑定到。
    ///</returns>
    property VirtualItemCount: Int32 read get_VirtualItemCount write set_VirtualItemCount;
    ///<summary>
    ///  获取或设置中的持久化选定项的数据键值 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  中的持久化选定项的数据键值 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///  默认值是 <see langword="null" />
    ///  , ，指示当前未选定任何项。
    ///</returns>
    property SelectedPersistedDataKey: DNDataKey read get_SelectedPersistedDataKey write set_SelectedPersistedDataKey;
    ///<summary>
    ///  获取数据绑定复合控件内的子控件的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.ControlCollection" />
    ///  表示数据绑定复合控件内的子控件。
    ///</returns>
    property Controls: DNControlCollection read get_Controls;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DNColor read get_BackColor write set_BackColor;
    property BorderColor: DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNGridView = class(TDNGenericImport<DNGridViewClass, DNGridView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridClass = interface(DNObjectClass)
  ['{F972DAD5-48A7-51B7-AD04-B934BCDD299B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDataGrid;

  { static fields getter & setter } 

   function __fakeFieldGet_SortCommandName: string;
   function __fakeFieldGet_SelectCommandName: string;
   function __fakeFieldGet_EditCommandName: string;
   function __fakeFieldGet_DeleteCommandName: string;
   function __fakeFieldGet_UpdateCommandName: string;
   function __fakeFieldGet_CancelCommandName: string;
   function __fakeFieldGet_PageCommandName: string;
   function __fakeFieldGet_NextPageCommandArgument: string;
   function __fakeFieldGet_PrevPageCommandArgument: string;

  { static fields } 

    ///<summary>
    ///  表示命令名称排序。
    ///  此字段为只读。
    ///</summary>
    {class} property SortCommandName: string read __fakeFieldGet_SortCommandName;
    ///<summary>
    ///  表示 Select 命令名称。
    ///  此字段为只读。
    ///</summary>
    {class} property SelectCommandName: string read __fakeFieldGet_SelectCommandName;
    ///<summary>
    ///  表示编辑命令名称。
    ///  此字段为只读。
    ///</summary>
    {class} property EditCommandName: string read __fakeFieldGet_EditCommandName;
    ///<summary>
    ///  表示 Delete 命令名称。
    ///  此字段为只读。
    ///</summary>
    {class} property DeleteCommandName: string read __fakeFieldGet_DeleteCommandName;
    ///<summary>
    ///  表示 Update 命令名称。
    ///  此字段为只读。
    ///</summary>
    {class} property UpdateCommandName: string read __fakeFieldGet_UpdateCommandName;
    ///<summary>
    ///  表示 <see langword="Cancel" />
    ///  命令名称。
    ///  此字段为只读。
    ///</summary>
    {class} property CancelCommandName: string read __fakeFieldGet_CancelCommandName;
    ///<summary>
    ///  表示页命令名称。
    ///  此字段为只读。
    ///</summary>
    {class} property PageCommandName: string read __fakeFieldGet_PageCommandName;
    ///<summary>
    ///  表示下一个命令参数。
    ///  此字段为只读。
    ///</summary>
    {class} property NextPageCommandArgument: string read __fakeFieldGet_NextPageCommandArgument;
    ///<summary>
    ///  表示上一条命令参数。
    ///  此字段为只读。
    ///</summary>
    {class} property PrevPageCommandArgument: string read __fakeFieldGet_PrevPageCommandArgument;

  end;

  ///<summary>
  ///  数据绑定列表控件，此控件显示来自表中数据源中的项。
  ///<see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件使你可以选择、排序以及编辑这些项。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataGrid')]
  DNDataGrid = interface(DNObject)
  ['{CFC4A982-7465-340C-9642-BF1FB2B0057A}']
  { getters & setters } 

    function get_AllowCustomPaging: Boolean;
    procedure set_AllowCustomPaging(value: Boolean);
    function get_AllowPaging: Boolean;
    procedure set_AllowPaging(value: Boolean);
    function get_AllowSorting: Boolean;
    procedure set_AllowSorting(value: Boolean);
    function get_AlternatingItemStyle: DNTableItemStyle;
    function get_AutoGenerateColumns: Boolean;
    procedure set_AutoGenerateColumns(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_CurrentPageIndex: Int32;
    procedure set_CurrentPageIndex(value: Int32);
    function get_Columns: DNDataGridColumnCollection;
    function get_EditItemIndex: Int32;
    procedure set_EditItemIndex(value: Int32);
    function get_EditItemStyle: DNTableItemStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_HeaderStyle: DNTableItemStyle;
    function get_Items: DNDataGridItemCollection;
    function get_ItemStyle: DNTableItemStyle;
    function get_PageCount: Int32;
    function get_PagerStyle: DNDataGridPagerStyle;
    function get_PageSize: Int32;
    procedure set_PageSize(value: Int32);
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedItem: DNDataGridItem;
    function get_SelectedItemStyle: DNTableItemStyle;
    function get_ShowFooter: Boolean;
    procedure set_ShowFooter(value: Boolean);
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_VirtualItemCount: Int32;
    procedure set_VirtualItemCount(value: Int32);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_Controls: DNControlCollection;
    function get_DataKeys: DNDataKeyCollection;
    function get_DataKeyField: string;
    procedure set_DataKeyField(value: string);
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_UseAccessibleHeader: Boolean;
    procedure set_UseAccessibleHeader(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DNColor;
    procedure set_BackColor(value: DNColor);
    function get_BorderColor: DNColor;
    procedure set_BorderColor(value: DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DNColor;
    procedure set_ForeColor(value: DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CancelCommand(value: DNDataGridCommandEventHandler);
    procedure remove_CancelCommand(value: DNDataGridCommandEventHandler);
    procedure add_DeleteCommand(value: DNDataGridCommandEventHandler);
    procedure remove_DeleteCommand(value: DNDataGridCommandEventHandler);
    procedure add_EditCommand(value: DNDataGridCommandEventHandler);
    procedure remove_EditCommand(value: DNDataGridCommandEventHandler);
    procedure add_ItemCommand(value: DNDataGridCommandEventHandler);
    procedure remove_ItemCommand(value: DNDataGridCommandEventHandler);
    procedure add_ItemCreated(value: DNDataGridItemEventHandler);
    procedure remove_ItemCreated(value: DNDataGridItemEventHandler);
    procedure add_ItemDataBound(value: DNDataGridItemEventHandler);
    procedure remove_ItemDataBound(value: DNDataGridItemEventHandler);
    procedure add_PageIndexChanged(value: DNDataGridPageChangedEventHandler);
    procedure remove_PageIndexChanged(value: DNDataGridPageChangedEventHandler);
    procedure add_SortCommand(value: DNDataGridSortCommandEventHandler);
    procedure remove_SortCommand(value: DNDataGridSortCommandEventHandler);
    procedure add_UpdateCommand(value: DNDataGridCommandEventHandler);
    procedure remove_UpdateCommand(value: DNDataGridCommandEventHandler);
    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  将该控件及其所有子控件绑定到指定的数据源。
    ///</summary>
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否启用自定义分页。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了自定义分页;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowCustomPaging: Boolean read get_AllowCustomPaging write set_AllowCustomPaging;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用分页。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了分页;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowPaging: Boolean read get_AllowPaging write set_AllowPaging;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用排序。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了分类;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowSorting: Boolean read get_AllowSorting write set_AllowSorting;
    ///<summary>
    ///  获取样式属性中交替项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，它代表交替的样式属性中的项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  。
    ///  默认值为空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象。
    ///</returns>
    property AlternatingItemStyle: DNTableItemStyle read get_AlternatingItemStyle;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.BoundColumn" />
    ///  对象将自动创建并显示在 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  为数据源中的每个字段的控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.UI.WebControls.BoundColumn" />
    ///  对象是自动创建和显示; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property AutoGenerateColumns: Boolean read get_AutoGenerateColumns write set_AutoGenerateColumns;
    ///<summary>
    ///  获取或设置要显示的背景中的图像 URL <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  要显示的背景中的图像 URL <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    ///<summary>
    ///  获取或设置当前显示页的索引。
    ///</summary>
    ///<returns>
    ///  当前显示的页面的从零开始的索引。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的页索引是负值。
    ///</exception>
    property CurrentPageIndex: Int32 read get_CurrentPageIndex write set_CurrentPageIndex;
    ///<summary>
    ///  获取表示的列的对象的集合 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  对象，包含表示的列的对象的集合 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</returns>
    property Columns: DNDataGridColumnCollection read get_Columns;
    ///<summary>
    ///  获取或设置中的项的索引 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件即可编辑。
    ///</summary>
    ///<returns>
    ///  中的项的索引 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件即可编辑。
    ///  默认值为-1，指示在没有项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  所编辑的控件。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的索引为小于-1。
    ///</exception>
    property EditItemIndex: Int32 read get_EditItemIndex write set_EditItemIndex;
    ///<summary>
    ///  获取为中编辑选定的项的样式属性 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，其中包含为在中编辑选定的项的样式属性 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///  默认值为空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象。
    ///</returns>
    property EditItemStyle: DNTableItemStyle read get_EditItemStyle;
    ///<summary>
    ///  获取的页脚节中的样式属性 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，其中包含的样式属性的页脚节的 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///  默认值为空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象。
    ///</returns>
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    ///<summary>
    ///  获取标题部分中的样式属性 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  包含标题部分中的样式属性的对象 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///  默认值为空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象。
    ///</returns>
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    ///<summary>
    ///  获取一套 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  对象，后者表示中的各个项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
    ///  ，其中包含一套 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  对象表示中的各个项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</returns>
    property Items: DNDataGridItemCollection read get_Items;
    ///<summary>
    ///  获取中的项的样式属性 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，其中包含的样式属性中的项的 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///  默认值为空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象。
    ///</returns>
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    ///<summary>
    ///  获取显示中的项所需的页的总数 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  显示中的项所需的页总数 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</returns>
    property PageCount: Int32 read get_PageCount;
    ///<summary>
    ///  获取的分页部分的样式属性 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.DataGridPagerStyle" />
    ///  对象，其中包含的样式属性的分页部分的 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///  默认值为空 <see cref="T:System.Web.UI.WebControls.DataGridPagerStyle" />
    ///  对象。
    ///</returns>
    property PagerStyle: DNDataGridPagerStyle read get_PagerStyle;
    ///<summary>
    ///  获取或设置要在单页上显示的项数 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  若要在单页上显示的项数 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///  默认值为 10。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的页大小等于或大于 1。
    ///</exception>
    property PageSize: Int32 read get_PageSize write set_PageSize;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件中的选定项的索引。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件中的选定项的索引。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的索引为小于-1。
    ///</exception>
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  对象，表示中的选定的项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  对象，表示中的选定的项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</returns>
    property SelectedItem: DNDataGridItem read get_SelectedItem;
    ///<summary>
    ///  获取在当前选定的项的样式属性 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象，其中包含的样式属性中的当前选定项的 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///  默认值为空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" />
    ///  对象。
    ///</returns>
    property SelectedItemStyle: DNTableItemStyle read get_SelectedItemStyle;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在显示页脚 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要显示页脚。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ShowFooter: Boolean read get_ShowFooter write set_ShowFooter;
    ///<summary>
    ///  获取或设置一个值，该值指示是否将标头显示在 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要显示标头;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    ///<summary>
    ///  获取或设置在实际项数 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控制使用自定义分页的。
    ///</summary>
    ///<returns>
    ///  中的虚拟项数 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控制使用自定义分页的。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的值为负的数字。
    ///</exception>
    property VirtualItemCount: Int32 read get_VirtualItemCount write set_VirtualItemCount;
    ///<summary>
    ///  获取或设置要在控件中的 HTML 标题元素中呈现的文本。
    ///  提供此属性以使控件的辅助技术设备的用户更易于访问。
    ///</summary>
    ///<returns>
    ///  表示要在控件中的 HTML 标题元素中呈现的文本的字符串。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  获取或设置在控件中的 HTML 标题元素的水平或垂直位置。
    ///  提供此属性以使控件的辅助技术设备的用户更易于访问。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.TableCaptionAlign" />
    ///  枚举值之一。
    ///  默认值为 <see langword="NotSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的类型不是之一 <see cref="T:System.Web.UI.WebControls.TableCaptionAlign" />
    ///  枚举值。
    ///</exception>
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    ///<summary>
    ///  获取或设置单元格的内容和单元格的边框之间的空间量。
    ///</summary>
    ///<returns>
    ///  单元格的内容和单元格的边框之间的间距 （以像素为单位） 量。
    ///  默认值为-1，指示未设置此属性。
    ///</returns>
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    ///<summary>
    ///  获取或设置单元格之间的空间量。
    ///</summary>
    ///<returns>
    ///  单元格之间的间距 （以像素为单位） 量。
    ///  默认值为 0。
    ///</returns>
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.ControlCollection" />
    ///  对象，其中包含数据列表控件中的子控件的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.ControlCollection" />
    ///  ，其中包含数据列表控件中的子控件的集合。
    ///</returns>
    property Controls: DNControlCollection read get_Controls;
    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
    ///  存储数据列表控件中的每个记录的键值的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
    ///  用于存储数据列表控件中的每个记录的键值。
    ///</returns>
    property DataKeys: DNDataKeyCollection read get_DataKeys;
    ///<summary>
    ///  获取或设置由指定的数据源中的键字段 <see cref="P:System.Web.UI.WebControls.BaseDataList.DataSource" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  指定的数据源中的键字段的名称 <see cref="P:System.Web.UI.WebControls.BaseDataList.DataSource" />
    ///  。
    ///</returns>
    property DataKeyField: string read get_DataKeyField write set_DataKeyField;
    ///<summary>
    ///  获取或设置要绑定到列表控件数据的多成员数据源中的特定数据成员。
    ///</summary>
    ///<returns>
    ///  成员数据源中的数据成员。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property DataMember: string read get_DataMember write set_DataMember;
    ///<summary>
    ///  获取或设置包含用于填充该控件中的项的值列表的源。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerable" />
    ///  或 <see cref="T:System.ComponentModel.IListSource" />
    ///  ，其中包含用来提供数据绑定到此控件的值的集合。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException">
    ///  由于两个指定值的数据源无法解析 <see cref="P:System.Web.UI.WebControls.BaseDataList.DataSource" />
    ///  属性和 <see cref="P:System.Web.UI.WebControls.BaseDataList.DataSourceID" />
    ///  属性。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  数据源是类型的无效。
    ///  数据源必须是 <see langword="null" />
    ///  或者实现 <see cref="T:System.Collections.IEnumerable" />
    ///  或 <see cref="T:System.ComponentModel.IListSource" />
    ///  接口。
    ///</exception>
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    ///<summary>
    ///  获取或设置 <see cref="P:System.Web.UI.Control.ID" />
    ///  应使用列表控件的数据来检索其数据源的数据源控件的属性。
    ///</summary>
    ///<returns>
    ///  分配给数据源控件的编程标识符。
    ///</returns>
    ///<exception cref="T:System.Web.HttpException">
    ///  由于两个指定值的数据源无法解析 <see cref="P:System.Web.UI.WebControls.BaseDataList.DataSource" />
    ///  属性和 <see cref="P:System.Web.UI.WebControls.BaseDataList.DataSourceID" />
    ///  属性。
    ///</exception>
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    ///<summary>
    ///  获取或设置一个值，指定是否显示数据列表控件的单元格之间的边框。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.GridLines" />
    ///  值之一。
    ///  默认值为 <see langword="Both" />
    ///  。
    ///</returns>
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    ///<summary>
    ///  获取或设置数据列表在其容器内的控件的水平对齐方式。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.HorizontalAlign" />
    ///  值之一。
    ///  默认值为 <see langword="NotSet" />
    ///  。
    ///</returns>
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    ///<summary>
    ///  获取一个值，该值指示在控件的 <see cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" />
    ///  属性为 <see langword="false" />
    ///  时，控件是否应将呈现的 HTML 元素的 <see langword="disabled" />
    ///  特性设置为 "disabled"。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="P:System.Web.UI.Control.RenderingCompatibility" />
    ///  属性指示 ASP.NET 版本低于 4.0，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    ///<summary>
    ///  获取或设置一个值，该值指示列表控件的数据是否可访问的格式在其标头。
    ///  提供此属性以使控件的辅助技术设备的用户更易于访问。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果控件呈现其标头中可访问的格式;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property UseAccessibleHeader: Boolean read get_UseAccessibleHeader write set_UseAccessibleHeader;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DNColor read get_BackColor write set_BackColor;
    property BorderColor: DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDataGrid = class(TDNGenericImport<DNDataGridClass, DNDataGrid>)
  public const
    ///<summary>
    ///  表示命令名称排序。
    ///  此字段为只读。
    ///</summary>
   SortCommandName = 'Sort';
    ///<summary>
    ///  表示 Select 命令名称。
    ///  此字段为只读。
    ///</summary>
   SelectCommandName = 'Select';
    ///<summary>
    ///  表示编辑命令名称。
    ///  此字段为只读。
    ///</summary>
   EditCommandName = 'Edit';
    ///<summary>
    ///  表示 Delete 命令名称。
    ///  此字段为只读。
    ///</summary>
   DeleteCommandName = 'Delete';
    ///<summary>
    ///  表示 Update 命令名称。
    ///  此字段为只读。
    ///</summary>
   UpdateCommandName = 'Update';
    ///<summary>
    ///  表示 <see langword="Cancel" />
    ///  命令名称。
    ///  此字段为只读。
    ///</summary>
   CancelCommandName = 'Cancel';
    ///<summary>
    ///  表示页命令名称。
    ///  此字段为只读。
    ///</summary>
   PageCommandName = 'Page';
    ///<summary>
    ///  表示下一个命令参数。
    ///  此字段为只读。
    ///</summary>
   NextPageCommandArgument = 'Next';
    ///<summary>
    ///  表示上一条命令参数。
    ///  此字段为只读。
    ///</summary>
   PrevPageCommandArgument = 'Prev';
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridItemClass = interface(DNObjectClass)
  ['{8D826786-8ACA-552E-919D-E1D76D5FC96B}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件中的项（行）。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataGridItem')]
  DNDataGridItem = interface(DNObject)
  ['{5DEE6689-DC5A-38B7-9629-60C57D26519C}']
  { getters & setters } 

    function get_DataItem: DDN.mscorlib.DNObject;
    procedure set_DataItem(value: DDN.mscorlib.DNObject);
    function get_DataSetIndex: Int32;
    function get_ItemIndex: Int32;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DNColor;
    procedure set_BackColor(value: DNColor);
    function get_BorderColor: DNColor;
    procedure set_BorderColor(value: DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DNColor;
    procedure set_ForeColor(value: DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置项所表示的数据 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  对象在 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  表示中的数据项 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</returns>
    property DataItem: DDN.mscorlib.DNObject read get_DataItem write set_DataItem;
    ///<summary>
    ///  获取的索引 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  绑定的数据源中的对象。
    ///</summary>
    ///<returns>
    ///  索引 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  从绑定的数据源。
    ///</returns>
    property DataSetIndex: Int32 read get_DataSetIndex;
    ///<summary>
    ///  获取的索引 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  对象从 <see cref="P:System.Web.UI.WebControls.DataGrid.Items" />
    ///  集合 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  索引 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  从 <see cref="P:System.Web.UI.WebControls.DataGrid.Items" />
    ///  集合 <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  控件。
    ///</returns>
    property ItemIndex: Int32 read get_ItemIndex;
    ///<summary>
    ///  获取或设置行中的内容的水平对齐方式。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.HorizontalAlign" />
    ///  值之一。
    ///  默认值为 <see langword="NotSet" />
    ///  。
    ///</returns>
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    ///<summary>
    ///  获取一个值，该值指示在控件的 <see cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" />
    ///  属性为 <see langword="false" />
    ///  时，控件是否应将呈现的 HTML 元素的 <see langword="disabled" />
    ///  特性设置为 "disabled"。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="P:System.Web.UI.Control.RenderingCompatibility" />
    ///  属性指示 ASP.NET 版本低于 4.0，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DNColor read get_BackColor write set_BackColor;
    property BorderColor: DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDataGridItem = class(TDNGenericImport<DNDataGridItemClass, DNDataGridItem>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewRowClass = interface(DNObjectClass)
  ['{E251F404-0558-5E1B-9464-7CA4DCB8ACD8}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件中的单个行。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewRow')]
  DNGridViewRow = interface(DNObject)
  ['{9901CAF6-AA2A-3CFF-857B-370C8255CB04}']
  { getters & setters } 

    function get_DataItem: DDN.mscorlib.DNObject;
    procedure set_DataItem(value: DDN.mscorlib.DNObject);
    function get_DataItemIndex: Int32;
    function get_RowIndex: Int32;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DNColor;
    procedure set_BackColor(value: DNColor);
    function get_BorderColor: DNColor;
    procedure set_BorderColor(value: DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DNColor;
    procedure set_ForeColor(value: DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取到基础数据对象 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  绑定对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  表示基础数据对象传递给该 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  绑定对象。
    ///</returns>
    property DataItem: DDN.mscorlib.DNObject read get_DataItem write set_DataItem;
    ///<summary>
    ///  获取的索引 <see cref="P:System.Web.UI.WebControls.GridViewRow.DataItem" />
    ///  在基础 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  索引 <see cref="P:System.Web.UI.WebControls.GridViewRow.DataItem" />
    ///  基础数据源中。
    ///</returns>
    property DataItemIndex: Int32 read get_DataItemIndex;
    ///<summary>
    ///  获取的索引 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  对象在 <see cref="P:System.Web.UI.WebControls.GridView.Rows" />
    ///  集合 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</summary>
    ///<returns>
    ///  索引 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  对象在 <see cref="P:System.Web.UI.WebControls.GridView.Rows" />
    ///  集合 <see cref="T:System.Web.UI.WebControls.GridView" />
    ///  控件。
    ///</returns>
    property RowIndex: Int32 read get_RowIndex;
    ///<summary>
    ///  获取或设置行中的内容的水平对齐方式。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.WebControls.HorizontalAlign" />
    ///  值之一。
    ///  默认值为 <see langword="NotSet" />
    ///  。
    ///</returns>
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    ///<summary>
    ///  获取一个值，该值指示在控件的 <see cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" />
    ///  属性为 <see langword="false" />
    ///  时，控件是否应将呈现的 HTML 元素的 <see langword="disabled" />
    ///  特性设置为 "disabled"。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="P:System.Web.UI.Control.RenderingCompatibility" />
    ///  属性指示 ASP.NET 版本低于 4.0，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DNColor read get_BackColor write set_BackColor;
    property BorderColor: DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNGridViewRow = class(TDNGenericImport<DNGridViewRowClass, DNGridViewRow>) end;

  //-------------namespace: System.Web.UI----------------
  DNControlCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9A01C16B-2E12-5DA9-8FB0-64367EDCDF4E}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.UI.ControlCollection" />
    ///  对于指定的父服务器控件的类。
    ///</summary>
    ///  <param name="owner">
    ///  为创建控件集合 ASP.NET 服务器控件。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  如果则会发生 <paramref name="owner" />
    ///  参数是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(owner: DNControl): DNControlCollection;

  end;

  ///<summary>
  ///  提供使 ASP.NET 服务器控件能够维护一份及其子控件的集合容器。
  ///</summary>
  [DNTypeName('System.Web.UI.ControlCollection')]
  DNControlCollection = interface(DDN.mscorlib.DNObject)
  ['{2338289E-1546-320D-A95F-43B6D619A3B1}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Item(index: Int32): DNControl;

  { methods } 

    ///<summary>
    ///  从当前服务器控件中移除所有控件 <see cref="T:System.Web.UI.ControlCollection" />
    ///  对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  确定指定的服务器控件是否在父服务器控件的 <see cref="T:System.Web.UI.ControlCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="c">
    ///  要在集合中搜索的服务器控件。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该集合; 中存在指定的服务器控件否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(c: DNControl): Boolean;
    ///<summary>
    ///  检索可循环访问的枚举器 <see cref="T:System.Web.UI.ControlCollection" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  循环访问集合的枚举数。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  从中移除子控件，指定的索引位置 <see cref="T:System.Web.UI.ControlCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="index">
    ///  要从集合中删除的服务器控件序号索引。
    ///</param>
    ///<exception cref="T:System.Web.HttpException">
    ///  时引发 <see cref="T:System.Web.UI.ControlCollection" />
    ///  是只读的。
    ///</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  从父服务器控件中移除指定的服务器控件 <see cref="T:System.Web.UI.ControlCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要删除的服务器控件。
    ///</param>
    procedure Remove(value: DNControl);
    ///<summary>
    ///  将指定的 <see cref="T:System.Web.UI.Control" />
    ///  对象添加到集合。
    ///</summary>
    ///  <param name="child">
    ///  要添加到集合中的 <see cref="T:System.Web.UI.Control" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  时引发 <paramref name="child" />
    ///  参数未指定控件。
    ///</exception><exception cref="T:System.Web.HttpException">
    ///  时引发 <see cref="T:System.Web.UI.ControlCollection" />
    ///  是只读的。
    ///</exception>
    procedure Add(child: DNControl);
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.UI.Control" />
    ///  到集合中的指定的索引位置处的对象。
    ///</summary>
    ///  <param name="index">
    ///  要添加的子控件数组中的位置。
    ///</param>
    ///  <param name="child">
    ///  要添加到集合中的 <see cref="T:System.Web.UI.Control" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="child" />
    ///  参数未指定控件。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  参数小于零或大于 <see cref="P:System.Web.UI.ControlCollection.Count" />
    ///  属性。
    ///</exception><exception cref="T:System.Web.HttpException"><see cref="T:System.Web.UI.ControlCollection" />
    ///  为只读。
    ///</exception>
    procedure AddAt(index: Int32; child: DNControl);
    ///<summary>
    ///  检索指定的索引 <see cref="T:System.Web.UI.Control" />
    ///  集合中的对象。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Web.UI.Control" />
    ///  为返回的索引。
    ///</param>
    ///<returns>
    ///  指定的服务器控件的索引。
    ///  如果服务器控件不是当前集合的成员，则返回-1。
    ///</returns>
    function IndexOf(value: DNControl): Int32;
    ///<summary>
    ///  副本的子控件存储在 <see cref="T:System.Web.UI.ControlCollection" />
    ///  对象传递给 <see cref="T:System.Array" />
    ///  对象，从指定的索引位置开始 <see cref="T:System.Array" />
    ///  。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Array" />
    ///  要复制到的子控件。
    ///</param>
    ///  <param name="index"><paramref name="array" />
    ///  中从零开始的相对索引，从此位置开始进行复制。
    ///</param>
    ///<exception cref="T:System.Web.HttpException"><paramref name="array" />
    ///  不是 <see langword="null" />
    ///  和不一维。
    ///</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的服务器控件中的数量 <see cref="T:System.Web.UI.ControlCollection" />
    ///  指定 ASP.NET 服务器控件的对象。
    ///</summary>
    ///<returns>
    ///  中的服务器控件数 <see cref="T:System.Web.UI.ControlCollection" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取可用于同步对控件集合的访问的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Web.UI.ControlCollection" />
    ///  对象是只读的。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果控件是只读的;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Web.UI.ControlCollection" />
    ///  同步对象。
    ///</summary>
    ///<returns>
    ///  此属性始终为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[index: Int32]: DNControl read get_Item; default;
  end;

  TDNControlCollection = class(TDNGenericImport<DNControlCollectionClass, DNControlCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNCssStyleCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8B7F321E-013B-5CD4-9C92-57336678A678}']
  end;

  ///<summary>
  ///  包含指定的 HTML 服务器控件的 HTML 级联样式表 (CSS) 内联样式特性。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.CssStyleCollection')]
  DNCssStyleCollection = interface(DDN.mscorlib.DNObject)
  ['{86506D05-F003-37B9-A2BA-5ED2CE357343}']
  { getters & setters } 

    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Count: Int32;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    ///<summary>
    ///  样式将项添加到 <see cref="T:System.Web.UI.CssStyleCollection" />
    ///  控件使用指定的名称/值对。
    ///</summary>
    ///  <param name="key">
    ///  要添加到集合的新样式特性的名称。
    ///</param>
    ///  <param name="value">
    ///  要添加到集合的样式属性的值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Add(key: string; value: string);
    ///<summary>
    ///  移除从样式项 <see cref="T:System.Web.UI.CssStyleCollection" />
    ///  使用指定的样式的键的控件。
    ///</summary>
    ///  <param name="key">
    ///  要移除的样式项字符串文字。
    ///</param>
    procedure Remove(key: string);
    ///<summary>
    ///  删除所有样式项从 <see cref="T:System.Web.UI.CssStyleCollection" />
    ///  对象。
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: string]: string read get_Item write set_Item; default;
    ///<summary>
    ///  获取集合中的所有样式的密钥 <see cref="T:System.Web.UI.CssStyleCollection" />
    ///  特定的 HTML 服务器控件的对象。
    ///</summary>
    ///<returns>
    ///  中包含的键集合 <see cref="T:System.Web.UI.CssStyleCollection" />
    ///  为指定的 HTML 服务器控件。
    ///</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>
    ///  获取在项数 <see cref="T:System.Web.UI.CssStyleCollection" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  中的项数 <see cref="T:System.Web.UI.CssStyleCollection" />
    ///  对象。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取或设置的值 <see langword="style" />
    ///  HTML 服务器控件的属性。
    ///</summary>
    ///<returns>
    ///  样式字符串。
    ///</returns>
    property Value: string read get_Value write set_Value;
  end;

  TDNCssStyleCollection = class(TDNGenericImport<DNCssStyleCollectionClass, DNCssStyleCollection>) end;

  //-------------namespace: System.Web.UI----------------
  ///<summary>
  ///  定义自动生成字段的数据绑定控件的使用 ASP.NET 动态数据功能的方法。
  ///</summary>
  [DNTypeName('System.Web.UI.IAutoFieldGenerator')]
  DNIAutoFieldGenerator = interface(DDN.mscorlib.DNObject)
  ['{DCB50A25-2EC9-3A2B-938C-F5664C7CD711}']
  { methods } 

    ///<summary>
    ///  自动生成 <see cref="T:System.Web.DynamicData.DynamicField" />
    ///  对象基于表的元数据信息。
    ///</summary>
    ///  <param name="control">
    ///  将包含的数据绑定控件 <see cref="T:System.Web.DynamicData.DynamicField" />
    ///  对象。
    ///</param>
    ///<returns><see cref="T:System.Web.DynamicData.DynamicField" />
    ///  对象的集合。
    ///</returns>
    function GenerateFields(control: DNControl): DDN.mscorlib.DNICollection;

  end;

  //-------------namespace: System.Web.UI----------------
  ///<summary>
  ///  表示数据绑定控件绑定到的抽象的数据源。
  ///</summary>
  [DNTypeName('System.Web.UI.IDataSource')]
  DNIDataSource = interface(DDN.mscorlib.DNObject)
  ['{8A41ABFC-1B3C-364C-9DFB-7B232D64ADB7}']
  { events } 

    procedure add_DataSourceChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataSourceChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  获取表示视图与关联的对象列表的名称的集合 <see cref="T:System.Web.UI.IDataSource" />
    ///  接口。
    ///</summary>
    ///<returns><see cref="T:System.Collections.ICollection" />
    ///  ，其中包含与相关联的视图的名称 <see cref="T:System.Web.UI.IDataSource" />
    ///  。
    ///</returns>
    function GetViewNames: DDN.mscorlib.DNICollection;

  end;

  //-------------namespace: System.Web.UI----------------
  ///<summary>
  ///  定义用于填充带有子控件的模板化 ASP.NET 服务器控件的行为。
  ///  子控件表示页面上定义的内联模板。
  ///</summary>
  [DNTypeName('System.Web.UI.ITemplate')]
  DNITemplate = interface(DDN.mscorlib.DNObject)
  ['{F95F3FEC-A275-3419-AF5A-F53DE67117DB}']
  { methods } 

    ///<summary>
    ///  由一个类实现时，定义 <see cref="T:System.Web.UI.Control" />
    ///  对象的子控件和模板属于。
    ///  反过来内联模板中定义这些子控件。
    ///</summary>
    ///  <param name="container"><see cref="T:System.Web.UI.Control" />
    ///  对象，以包含内联模板中的控件实例。
    ///</param>
    procedure InstantiateIn(container: DNControl);

  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataControlFieldCollectionClass = interface(DNObjectClass)
  ['{6B3BE306-D836-5FCB-945A-ABF980A2C743}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDataControlFieldCollection;

  end;

  ///<summary>
  ///  表示数据绑定控件（如 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  和 <see cref="T:System.Web.UI.WebControls.DetailsView" />
  ///  ）使用的 <see cref="T:System.Web.UI.WebControls.DataControlField" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataControlFieldCollection')]
  DNDataControlFieldCollection = interface(DNObject)
  ['{C05ED606-0AFF-3C3C-A195-F71E2B737B9B}']
  { getters & setters } 

    function get_Count: Int32;

  { events } 

    procedure add_FieldsChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_FieldsChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  创建当前集合的副本。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" />
    ///  ，包含在当前集合中每个数据控件字段的副本。
    ///</returns>
    function CloneFields: DNDataControlFieldCollection;
    ///<summary>
    ///  删除 <see cref="T:System.Web.UI.WebControls.DataControlField" />
    ///  从指定索引处的对象 <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection" />
    ///  集合。
    ///</summary>
    ///  <param name="index">
    ///  索引 <see cref="T:System.Web.UI.WebControls.DataControlField" />
    ///  中删除。
    ///</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  从 <see cref="T:System.Web.UI.StateManagedCollection" />
    ///  集合中删除所有项。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  从特定的数组索引开始，将 <see cref="T:System.Web.UI.StateManagedCollection" />
    ///  集合的元素复制到数组中。
    ///</summary>
    ///  <param name="array">
    ///  一维 <see cref="T:System.Array" />
    ///  ，用作从 <see cref="T:System.Web.UI.StateManagedCollection" />
    ///  所复制的元素的目标数组。
    ///<see cref="T:System.Array" />
    ///  必须具有从零开始的索引。
    ///</param>
    ///  <param name="index"><paramref name="array" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  小于零。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  是多维的。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  大于或等于 <paramref name="array" />
    ///  的长度。
    ///  - 或 -
    ///  源中的元素数目 <see cref="T:System.Web.UI.StateManagedCollection" />
    ///  大于从的可用空间 <paramref name="index" />
    ///  目标从头到尾 <paramref name="array" />
    ///  。
    ///</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  返回循环访问 <see cref="T:System.Web.UI.StateManagedCollection" />
    ///  集合的迭代器。
    ///</summary>
    ///<returns>
    ///  可用于循环访问 <see cref="T:System.Web.UI.StateManagedCollection" />
    ///  的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  强制将整个 <see cref="T:System.Web.UI.StateManagedCollection" />
    ///  集合序列化为视图状态。
    ///</summary>
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.UI.StateManagedCollection" />
    ///  集合中包含的元素的数量。
    ///</summary>
    ///<returns><see cref="T:System.Web.UI.StateManagedCollection" />
    ///  中包含的元素数。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNDataControlFieldCollection = class(TDNGenericImport<DNDataControlFieldCollectionClass, DNDataControlFieldCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridColumnCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{81708595-AF57-527D-8FB9-74CF4CA86055}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="owner"><see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  与此集合相对应的控件。
    ///</param>
    ///  <param name="columns">
    ///  一个 <see cref="T:System.Collections.ArrayList" />
    ///  存储的列的集合。
    ///</param>
    {class} function init(owner: DNDataGrid; columns: DDN.mscorlib.DNArrayList): DNDataGridColumnCollection;

  end;

  ///<summary><see cref="T:System.Web.UI.WebControls.DataGridColumn" />
  ///  派生的列对象的集合，这些对象表示 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件中的列。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataGridColumnCollection')]
  DNDataGridColumnCollection = interface(DDN.mscorlib.DNObject)
  ['{A69F16CA-41DF-36E0-B715-826B0B10296D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  删除所有 <see cref="T:System.Web.UI.WebControls.DataGridColumn" />
    ///  -导出的列对象从 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  集合。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  将项从复制 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  到指定的集合 <see cref="T:System.Array" />
    ///  , 中的指定索引处开始， <see cref="T:System.Array" />
    ///  。
    ///</summary>
    ///  <param name="array">
    ///  一个从零开始 <see cref="T:System.Array" />
    ///  接收复制的项从 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  在指定的第一个位置 <see cref="T:System.Array" />
    ///  以接收复制的内容。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  返回 <see cref="T:System.Collections.IEnumerator" />
    ///  接口，其中包含所有 <see cref="T:System.Web.UI.WebControls.DataGridColumn" />
    ///  -派生的对象中的列 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEnumerator" />
    ///  接口，其中包含所有 <see cref="T:System.Web.UI.WebControls.DataGridColumn" />
    ///  -派生的对象中的列 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  删除 <see cref="T:System.Web.UI.WebControls.DataGridColumn" />
    ///  -导出的列对象从 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  集合中指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  索引 <see cref="T:System.Web.UI.WebControls.DataGridColumn" />
    ///  -导出的列中的 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  中删除。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  小于 <see langword="0" />
    ///  或大于 <see cref="P:System.Web.UI.WebControls.DataGridColumnCollection.Count" />
    ///  。
    ///</exception>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取中的列数 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  中的列数 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示是否在列 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  可以修改集合。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否访问 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  集合已同步 （线程安全）。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步访问的对象 <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  可用于同步对集合的访问。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataGridColumnCollection = class(TDNGenericImport<DNDataGridColumnCollectionClass, DNDataGridColumnCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridItemCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B6735B6D-B6C1-521E-8506-DA7ECDF0752A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="items">
    ///  一个 <see cref="T:System.Collections.ArrayList" />
    ///  包含用来初始化集合的项。
    ///</param>
    {class} function init(items: DDN.mscorlib.DNArrayList): DNDataGridItemCollection;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.UI.WebControls.DataGrid" />
  ///  控件中 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataGridItemCollection')]
  DNDataGridItemCollection = interface(DDN.mscorlib.DNObject)
  ['{88AE6B7E-1B3C-346F-9301-BCBEA9C4E74B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNDataGridItem;

  { methods } 

    ///<summary>
    ///  所有项都复制从此 <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
    ///  到指定的集合 <see cref="T:System.Array" />
    ///  , 中的指定索引处开始， <see cref="T:System.Array" />
    ///  。
    ///</summary>
    ///  <param name="array">
    ///  一个从零开始 <see cref="T:System.Array" />
    ///  接收复制的项从 <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  在指定的第一个位置 <see cref="T:System.Array" />
    ///  以接收复制的内容。
    ///</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  返回 <see cref="T:System.Collections.IEnumerator" />
    ///  -实现的对象，包含所有 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  中的对象 <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEnumerator" />
    ///  -实现的对象，包含所有 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  中的对象 <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的数 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  集合中的对象。
    ///</summary>
    ///<returns>
    ///  数 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  集合中的对象。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.DataGridItem" />
    ///  中的对象 <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
    ///  可以修改集合。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否访问 <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
    ///  集合已同步 （线程安全）。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步访问的对象 <see cref="T:System.Web.UI.WebControls.DataGridItemCollection" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  可用于同步对集合的访问。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNDataGridItem read get_Item; default;
  end;

  TDNDataGridItemCollection = class(TDNGenericImport<DNDataGridItemCollectionClass, DNDataGridItemCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{85339FFE-2414-5530-86AB-C2ED0FCF0F88}']
  end;

  ///<summary>
  ///  表示数据绑定控件中某个记录的一个或多个主键字段。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataKey')]
  DNDataKey = interface(DDN.mscorlib.DNObject)
  ['{3BDDACAC-7D46-3341-BFD2-5B9F1EB64298}']
  { getters & setters } 

    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定是否指定 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  数组是否等于当前的数据键。
    ///</summary>
    ///  <param name="other"><see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  要与当前 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  。
    ///  的名称。
    ///</param>
    function Equals(other: DNDataKey): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    ///<summary>
    ///  获取中索引 0 处的键字段的值 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  中索引 0 处的键字段的值 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNDataKey = class(TDNGenericImport<DNDataKeyClass, DNDataKey>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataKeyArrayClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AA9E4803-5B33-53B8-B1CC-A60C0E95E73A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.DataKeyArray" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="keys"><see cref="T:System.Collections.ArrayList" />
    ///  的 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  用来填充集合的对象。
    ///</param>
    {class} function init(keys: DDN.mscorlib.DNArrayList): DNDataKeyArray;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.UI.WebControls.DataKey" />
  ///  对象集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataKeyArray')]
  DNDataKeyArray = interface(DDN.mscorlib.DNObject)
  ['{0C1EC6C8-0753-39A1-9628-B7842E51DCB5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNDataKey;

  { methods } 

    ///<summary>
    ///  此集合中的所有项都复制到指定的数组 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  对象，该数组中的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  一个从零开始的数组 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  接收从集合复制的项的对象。
    ///</param>
    ///  <param name="index">
    ///  指定要接收复制的内容的数组中的第一个索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataKey>; index: Int32);
    ///<summary>
    ///  返回一个枚举，其中包含所有 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  集合中的对象。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  -实现的对象，包含所有 <see cref="T:System.Web.UI.WebControls.DataKey" />
    ///  集合中的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的项数。
    ///</summary>
    ///<returns>
    ///  集合中项的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示是否可以修改集合中的项。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取指示 <see cref="T:System.Web.UI.WebControls.DataKeyArray" />
    ///  集合是否已同步(线程安全)的值。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取用于同步对集合的访问的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  可用于同步对集合的访问。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNDataKey read get_Item; default;
  end;

  TDNDataKeyArray = class(TDNGenericImport<DNDataKeyArrayClass, DNDataKeyArray>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataKeyCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F98690D4-E6C7-584C-B2DE-39E77666DAFF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="keys">
    ///  一个 <see cref="T:System.Collections.ArrayList" />
    ///  ，其中包含从数据源的键字段。
    ///</param>
    {class} function init(keys: DDN.mscorlib.DNArrayList): DNDataKeyCollection;

  end;

  ///<summary>
  ///  表示包含数据源中的每个记录的键字段的集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.DataKeyCollection')]
  DNDataKeyCollection = interface(DDN.mscorlib.DNObject)
  ['{153DEDA4-B0A6-3D5B-9791-B38F127867C3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  从所有项都复制 <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
    ///  到指定 <see cref="T:System.Array" />
    ///  对象，该对象中的指定索引处开始 <see cref="T:System.Array" />
    ///  对象。
    ///</summary>
    ///  <param name="array">
    ///  一个从零开始 <see cref="T:System.Array" />
    ///  接收从复制的项的对象 <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  在指定的第一个位置 <see cref="T:System.Array" />
    ///  对象，以接收复制的内容。
    ///</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  创建 <see cref="T:System.Collections.IEnumerator" />
    ///  实现对象，其中包含中的所有键字段 <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEnumerator" />
    ///  实现对象，其中包含中的所有键字段 <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的项数。
    ///</summary>
    ///<returns>
    ///  集合中项的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示是否中的项 <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
    ///  可以进行修改。
    ///</summary>
    ///<returns><see langword="false" />
    ///  所有用例。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
    ///  同步 （线程安全）。
    ///</summary>
    ///<returns><see langword="false" />
    ///  所有用例。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取用于对访问进行同步的对象 <see cref="T:System.Web.UI.WebControls.DataKeyCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  可用于同步对集合的访问。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNDataKeyCollection = class(TDNGenericImport<DNDataKeyCollectionClass, DNDataKeyCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFontInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB03BBDD-8BA8-51FB-A55F-4E9AF6AAD836}']
  end;

  ///<summary>
  ///  封装文本的字体属性。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.FontInfo')]
  DNFontInfo = interface(DDN.mscorlib.DNObject)
  ['{B06A031A-8EBD-3743-B16B-3C2C70F9823F}']
  { getters & setters } 

    function get_Bold: Boolean;
    procedure set_Bold(value: Boolean);
    function get_Italic: Boolean;
    procedure set_Italic(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Names: TArray<string>;
    procedure set_Names(value: TArray<string>);
    function get_Overline: Boolean;
    procedure set_Overline(value: Boolean);
    function get_Strikeout: Boolean;
    procedure set_Strikeout(value: Boolean);
    function get_Underline: Boolean;
    procedure set_Underline(value: Boolean);

  { methods } 

    ///<summary>
    ///  指定的字体属性复制 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  实例 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  从中调用此方法的类。
    ///</summary>
    ///  <param name="f">
    ///  一个 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  ，其中包含要复制的字体属性。
    ///</param>
    procedure CopyFrom(f: DNFontInfo);
    ///<summary>
    ///  将指定的 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  的字体属性与从中调用此方法的 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  类的实例相结合。
    ///</summary>
    ///  <param name="f">
    ///  一个包含要结合的字体属性的 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  。
    ///</param>
    procedure MergeWith(f: DNFontInfo);
    ///<summary>
    ///  确定是否 <see cref="P:System.Web.UI.WebControls.FontInfo.Names" />
    ///  应保持。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Web.UI.WebControls.FontInfo.Names" />
    ///  属性已更改的默认值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeNames: Boolean;
    ///<summary>
    ///  将重置所有 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  属性添加到未设置状态，并清除视图状态。
    ///</summary>
    procedure ClearDefaults;
    ///<summary>
    ///  返回一个字符串，包含字体名称和实例大小 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含字体名称和实例大小 <see cref="T:System.Web.UI.WebControls.FontInfo" />
    ///  类。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示此字体是否是以粗体显示。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果字体为粗体;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Bold: Boolean read get_Bold write set_Bold;
    ///<summary>
    ///  获取或设置一个值，指示字体为斜体。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果字体为斜体。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Italic: Boolean read get_Italic write set_Italic;
    ///<summary>
    ///  获取或设置主要字体名称。
    ///</summary>
    ///<returns>
    ///  主要字体名称。
    ///  默认值是 <see cref="F:System.String.Empty" />
    ///  , ，指示未设置此属性。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  指定的字体名称为 null。
    ///</exception>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置字体名称的有序的数组。
    ///</summary>
    ///<returns>
    ///  字体名称的有序的数组。
    ///</returns>
    property Names: TArray<string> read get_Names write set_Names;
    ///<summary>
    ///  获取或设置一个值，指示字体是否带上划线。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果字体是否带上划线;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Overline: Boolean read get_Overline write set_Overline;
    ///<summary>
    ///  获取或设置一个值，该值指示此字体是否是带删除线。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果字体中间删除;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Strikeout: Boolean read get_Strikeout write set_Strikeout;
    ///<summary>
    ///  获取或设置一个值，指示字体是否带下划线。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此字体是带下划线;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Underline: Boolean read get_Underline write set_Underline;
  end;

  TDNFontInfo = class(TDNGenericImport<DNFontInfoClass, DNFontInfo>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewRowCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3F27AEE0-698F-590C-9975-AE42310C9C40}']
  { constructors } 

    ///<summary>
    ///  使用指定的 <see cref="T:System.Collections.ArrayList" />
    ///  对象初始化 <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="rows"><see cref="T:System.Collections.ArrayList" />
    ///  对象，其中包含 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  用来初始化集合的对象。
    ///</param>
    {class} function init(rows: DDN.mscorlib.DNArrayList): DNGridViewRowCollection;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.UI.WebControls.GridView" />
  ///  控件中 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.GridViewRowCollection')]
  DNGridViewRowCollection = interface(DDN.mscorlib.DNObject)
  ['{B93B4025-4355-3F69-B373-2A67B96D256C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNGridViewRow;

  { methods } 

    ///<summary>
    ///  所有项都复制从此 <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" />
    ///  到指定 <see cref="T:System.Array" />
    ///  对象，该对象中的指定索引处开始 <see cref="T:System.Array" />
    ///  对象。
    ///</summary>
    ///  <param name="array">
    ///  一个从零开始 <see cref="T:System.Array" />
    ///  接收从复制的项的对象 <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" />
    ///  对象。
    ///</param>
    ///  <param name="index">
    ///  在指定的第一个索引 <see cref="T:System.Array" />
    ///  对象，以接收复制的内容。
    ///</param>
    procedure CopyTo(&array: TArray<DNGridViewRow>; index: Int32);
    ///<summary>
    ///  返回一个枚举，其中包含所有 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  中的对象 <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  实现的对象，包含所有 <see cref="T:System.Web.UI.WebControls.GridViewRow" />
    ///  中的对象 <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取在项数 <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  中的项数 <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" />
    ///  对象。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示是否在行 <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" />
    ///  可以修改对象。
    ///</summary>
    ///<returns>
    ///  始终返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Web.UI.WebControls.GridViewRowCollection" />
    ///  对象已同步 （线程安全）。
    ///</summary>
    ///<returns>
    ///  始终返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取用于同步对集合的访问的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  可用于同步对集合的访问。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNGridViewRow read get_Item; default;
  end;

  TDNGridViewRowCollection = class(TDNGenericImport<DNGridViewRowCollectionClass, DNGridViewRowCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNPagerSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FCEAF726-3C2C-5E96-8AB6-12963FD7BB08}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.UI.WebControls.PagerSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPagerSettings;

  end;

  ///<summary>
  ///  表示支持分页的控件中的分页控件的属性。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.UI.WebControls.PagerSettings')]
  DNPagerSettings = interface(DDN.mscorlib.DNObject)
  ['{2977DD8A-1A94-3766-AA90-E5C7A701E96D}']
  { getters & setters } 

    function get_FirstPageImageUrl: string;
    procedure set_FirstPageImageUrl(value: string);
    function get_FirstPageText: string;
    procedure set_FirstPageText(value: string);
    function get_LastPageImageUrl: string;
    procedure set_LastPageImageUrl(value: string);
    function get_LastPageText: string;
    procedure set_LastPageText(value: string);
    function get_NextPageImageUrl: string;
    procedure set_NextPageImageUrl(value: string);
    function get_NextPageText: string;
    procedure set_NextPageText(value: string);
    function get_PageButtonCount: Int32;
    procedure set_PageButtonCount(value: Int32);
    function get_PreviousPageImageUrl: string;
    procedure set_PreviousPageImageUrl(value: string);
    function get_PreviousPageText: string;
    procedure set_PreviousPageText(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { events } 

    procedure add_PropertyChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PropertyChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  检索的字符串表示形式 <see cref="T:System.Web.UI.WebControls.PagerSettings" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  空字符串 ("")。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置为第一页按钮显示图像的 URL。
    ///</summary>
    ///<returns>
    ///  要为第一页按钮显示图像的 URL。
    ///  默认值为空字符串 ("")，这指示 <see cref="P:System.Web.UI.WebControls.PagerSettings.FirstPageImageUrl" />
    ///  未设置。
    ///</returns>
    property FirstPageImageUrl: string read get_FirstPageImageUrl write set_FirstPageImageUrl;
    ///<summary>
    ///  获取或设置要显示的第一页按钮的文本。
    ///</summary>
    ///<returns>
    ///  要显示的第一页按钮的文本。
    ///  默认值是 "&amp;lt;&amp;lt;", ，它将呈现为 "&lt;&lt;"。
    ///</returns>
    property FirstPageText: string read get_FirstPageText write set_FirstPageText;
    ///<summary>
    ///  获取或设置要显示的最后一页按钮的图像的 URL。
    ///</summary>
    ///<returns>
    ///  若要显示的最后一页按钮图像的 URL。
    ///  默认值为空字符串 ("")，这指示 <see cref="P:System.Web.UI.WebControls.PagerSettings.LastPageImageUrl" />
    ///  未设置。
    ///</returns>
    property LastPageImageUrl: string read get_LastPageImageUrl write set_LastPageImageUrl;
    ///<summary>
    ///  获取或设置要显示的最后一页按钮的文本。
    ///</summary>
    ///<returns>
    ///  要显示的最后一页按钮的文本。
    ///  默认值是 "&amp;gt;&amp;gt;", ，它将呈现为 "&gt;&gt;"。
    ///</returns>
    property LastPageText: string read get_LastPageText write set_LastPageText;
    ///<summary>
    ///  获取或设置要显示的下一页按钮的图像的 URL。
    ///</summary>
    ///<returns>
    ///  若要显示的下一页按钮图像的 URL。
    ///  默认值为空字符串 ("")，这指示 <see cref="P:System.Web.UI.WebControls.PagerSettings.NextPageImageUrl" />
    ///  未设置。
    ///</returns>
    property NextPageImageUrl: string read get_NextPageImageUrl write set_NextPageImageUrl;
    ///<summary>
    ///  获取或设置要显示的下一页按钮的文本。
    ///</summary>
    ///<returns>
    ///  要显示的下一页按钮的文本。
    ///  默认值是 "&amp;gt;", ，它将呈现为 "&gt;"。
    ///</returns>
    property NextPageText: string read get_NextPageText write set_NextPageText;
    ///<summary>
    ///  获取或设置要在寻呼程序中显示的页面按钮数时 <see cref="P:System.Web.UI.WebControls.PagerSettings.Mode" />
    ///  属性设置为 <see cref="F:System.Web.UI.WebControls.PagerButtons.Numeric" />
    ///  或 <see cref="F:System.Web.UI.WebControls.PagerButtons.NumericFirstLast" />
    ///  值。
    ///</summary>
    ///<returns>
    ///  要在寻呼程序中显示的页按钮数。
    ///  默认值为 10。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Web.UI.WebControls.PagerSettings.PageButtonCount" />
    ///  设置为等于或大于 1 的值。
    ///</exception>
    property PageButtonCount: Int32 read get_PageButtonCount write set_PageButtonCount;
    ///<summary>
    ///  获取或设置为上一页按钮显示图像的 URL。
    ///</summary>
    ///<returns>
    ///  要为上一页按钮显示图像的 URL。
    ///  默认值为空字符串 ("")，这指示 <see cref="P:System.Web.UI.WebControls.PagerSettings.PreviousPageImageUrl" />
    ///  未设置。
    ///</returns>
    property PreviousPageImageUrl: string read get_PreviousPageImageUrl write set_PreviousPageImageUrl;
    ///<summary>
    ///  获取或设置要显示为上一页按钮的文本。
    ///</summary>
    ///<returns>
    ///  要为上一页按钮显示的文本。
    ///  默认值是 "&amp;lt;", ，它将呈现为 "&lt;"。
    ///</returns>
    property PreviousPageText: string read get_PreviousPageText write set_PreviousPageText;
    ///<summary>
    ///  获取或设置一个值，该值指示是否支持分页的控件中显示的分页控件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要显示页导航;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNPagerSettings = class(TDNGenericImport<DNPagerSettingsClass, DNPagerSettings>) end;

  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  提供对一组前缀和命名空间映射的只读访问。
  ///</summary>
  [DNTypeName('System.Xml.IXmlNamespaceResolver')]
  DNIXmlNamespaceResolver = interface(DDN.mscorlib.DNObject)
  ['{963A8E22-D935-3065-ACF5-220A8350C64F}']
  { methods } 

    ///<summary>
    ///  获取当前处于作用域定义的前缀和命名空间映射的集合。
    ///</summary>
    ///  <param name="scope">
    ///  一个 <see cref="T:System.Xml.XmlNamespaceScope" />
    ///  值，指定要返回的命名空间节点的类型。
    ///</param>
    ///<returns>
    ///  一个包含当前在范围内的命名空间的 <see cref="T:System.Collections.IDictionary" />
    ///  。
    ///</returns>
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    ///<summary>
    ///  获取 URI 映射到指定的前缀的命名空间。
    ///</summary>
    ///  <param name="prefix">
    ///  要查找其命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  映射到前缀的命名空间 URI；如果前缀未映射到命名空间 URI，则为 <see langword="null" />
    ///  。
    ///</returns>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  获取映射到指定的命名空间 URI 的前缀。
    ///</summary>
    ///  <param name="namespaceName">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  映射到命名空间 URI 的前缀；如果命名空间 URI 未映射到前缀，则为 <see langword="null" />
    ///  。
    ///</returns>
    function LookupPrefix(namespaceName: string): string;

  end;

  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  定义已验证的 XML 节点的架构验证信息集。
  ///</summary>
  [DNTypeName('System.Xml.Schema.IXmlSchemaInfo')]
  DNIXmlSchemaInfo = interface(DDN.mscorlib.DNObject)
  ['{B877D1C0-5915-310A-8B75-8937F127300C}']
  { getters & setters } 

    function get_IsDefault: Boolean;
    function get_IsNil: Boolean;
    function get_SchemaType: DNXmlSchemaType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否这个被验证的 XML 节点被设置为在 XML 架构定义语言 (XSD) 架构验证过程中应用的默认的结果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此验证的 XML 节点被设置为默认值在架构验证，则为期间应用的结果否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDefault: Boolean read get_IsDefault;
    ///<summary>
    ///  获取一个值，该值指示此验证的 XML 节点值是否为零。
    ///</summary>
    ///<returns><see langword="true" />
    ///  此值被验证的 XML 节点是否为零;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNil: Boolean read get_IsNil;
    ///<summary>
    ///  获取此已验证的 XML 节点的静态 XML 架构定义语言 (XSD) 架构类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  此被验证的 XML 节点。
    ///</returns>
    property SchemaType: DNXmlSchemaType read get_SchemaType;
  end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaTypeClass = interface(DNObjectClass)
  ['{8FDF1377-B093-5013-822E-311F8771F20E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaType;

  end;

  ///<summary>
  ///  所有简单类型和复杂类型的基类。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaType')]
  DNXmlSchemaType = interface(DNObject)
  ['{034C6617-1C55-3EA2-8010-DFB0CD9A8FFE}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置类型的名称。
    ///</summary>
    ///<returns>
    ///  类型的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取编译后的对象类型或内置 XML 架构定义语言 (XSD) 数据类型、 简单类型元素或 complexType 元素。
    ///  这是后架构编译信息集属性。
    ///</summary>
    ///<returns>
    ///  内置 XSD 数据类型、 简单类型元素或 complexType 元素。
    ///</returns>
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    ///<summary>
    ///  获取此架构类型的基类型编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象，表示此架构类型的基类型。
    ///</returns>
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    ///<summary>
    ///  获取或设置一个值，该值指示此类型是否具有混合内容模型。
    ///  此属性才是有效的复杂类型中。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该类型具有混合内容模型中;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
  end;

  TDNXmlSchemaType = class(TDNGenericImport<DNXmlSchemaTypeClass, DNXmlSchemaType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexTypeClass = interface(DNXmlSchemaTypeClass)
  ['{672EAADE-3AD2-5F7E-9611-4C1E00A4F003}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaComplexType;

  end;

  ///<summary>
  ///  表示 <see langword="complexType" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类定义一个复杂类型，它确定属性集和元素的内容。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaComplexType')]
  DNXmlSchemaComplexType = interface(DNXmlSchemaType)
  ['{DD5B141E-1C22-39F2-9F27-2A12947759A9}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置确定的信息 <see langword="complexType" />
    ///  元素可在实例文档中。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，元素不能使用此 <see langword="complexType" />
    ///  直接元素，并且必须使用派生自该复杂类型 <see langword="complexType" />
    ///  元素。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    ///<summary>
    ///  获取或设置确定复杂类型是否具有混合内容模型（内容中的标记）的相关信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果字符数据可能出现这种复杂类型; 的子元素之间否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    ///<summary>
    ///  获取或设置类型的名称。
    ///</summary>
    ///<returns>
    ///  类型的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取编译后的对象类型或内置 XML 架构定义语言 (XSD) 数据类型、 简单类型元素或 complexType 元素。
    ///  这是后架构编译信息集属性。
    ///</summary>
    ///<returns>
    ///  内置 XSD 数据类型、 简单类型元素或 complexType 元素。
    ///</returns>
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    ///<summary>
    ///  获取此架构类型的基类型编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象，表示此架构类型的基类型。
    ///</returns>
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
  end;

  TDNXmlSchemaComplexType = class(TDNGenericImport<DNXmlSchemaComplexTypeClass, DNXmlSchemaComplexType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80051FF8-3AEB-56C0-919B-ECBEFDC42875}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSet; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  初始化 <see cref="T:System.Xml.XmlNameTable" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="nameTable">
    ///  要使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlNameTable" />
    ///  对象作为参数传递 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(nameTable: DNXmlNameTable): DNXmlSchemaSet; overload;

  { static propertys } 

    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  用于解析包含和导入的架构元素的命名空间或中引用的位置。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析包含和导入的架构元素的命名空间或中引用的位置。
    ///</returns>
    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  ///<summary>
  ///  包含 XML 架构定义语言 (XSD) 架构的缓存。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSet')]
  DNXmlSchemaSet = interface(DDN.mscorlib.DNObject)
  ['{2EECF1F1-E906-338D-AA1A-21E3F90E6E8D}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_IsCompiled: Boolean;
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_Count: Int32;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    ///<summary>
    ///  中的所有 XML 架构定义语言 (XSD) 架构中都添加给定 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException">
    ///  中的架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象作为参数传递 <see langword="null" />
    ///  。
    ///</exception>
    procedure Add(schemas: DNXmlSchemaSet);
    ///<summary>
    ///  该值指示指定的目标命名空间 URI 与 XML 架构定义语言 (XSD) 架构是否处于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="targetNamespace">
    ///  架构 targetNamespace 属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果与指定的目标命名空间 URI 的架构是否在 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(targetNamespace: string): Boolean;
    ///<summary>
    ///  返回集合的所有 XML 架构定义语言 (XSD) 架构中的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Collections.ICollection" />
    ///  对象，其中包含已添加到的所有架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///  如果没有架构已添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  , ，空 <see cref="T:System.Collections.ICollection" />
    ///  返回对象。
    ///</returns>
    function Schemas: DDN.mscorlib.DNICollection; overload;
    ///<summary>
    ///  返回集合的所有 XML 架构定义语言 (XSD) 架构中的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  属于给定命名空间。
    ///</summary>
    ///  <param name="targetNamespace">
    ///  架构 targetNamespace 属性。
    ///</param>
    ///<returns><see cref="T:System.Collections.ICollection" />
    ///  对象，其中包含已添加到的所有架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  属于给定命名空间。
    ///  如果没有架构已添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  , ，空 <see cref="T:System.Collections.ICollection" />
    ///  返回对象。
    ///</returns>
    function Schemas(targetNamespace: string): DDN.mscorlib.DNICollection; overload;
    ///<summary>
    ///  将添加到 XML 架构定义语言 (XSD) 架构编译 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  成一个逻辑架构。
    ///</summary>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException">
    ///  验证和编译中的架构时出错 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</exception>
    procedure Compile;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取默认 <see cref="T:System.Xml.XmlNameTable" />
    ///  使用 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  加载新的 XML 架构定义语言 (XSD) 架构时。
    ///</summary>
    ///<returns>
    ///  原子化字符串对象表。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取一个值，该值指示是否在 XML 架构定义语言 (XSD) 架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  已编译。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果在架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  自上次架构已添加或删除从已编译 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompiled: Boolean read get_IsCompiled;
    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  用于解析包含和导入的架构元素的命名空间或中引用的位置。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析包含和导入的架构元素的命名空间或中引用的位置。
    ///</returns>
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  获取数逻辑 XML 架构定义语言 (XSD) 架构中 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中的逻辑架构数 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXmlSchemaSet = class(TDNGenericImport<DNXmlSchemaSetClass, DNXmlSchemaSet>) end;

  //-------------namespace: System.Xml----------------
  DNXmlImplementationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{616B9815-E140-5278-AE6F-7D21CF454BB0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlImplementation" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlImplementation; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.XmlImplementation" />
    ///  类 <see cref="T:System.Xml.XmlNameTable" />
    ///  指定。
    ///</summary>
    ///  <param name="nt">
    ///  一个 <see cref="T:System.Xml.XmlNameTable" />
    ///  对象。
    ///</param>
    {class} function init(nt: DNXmlNameTable): DNXmlImplementation; overload;

  end;

  ///<summary>
  ///  定义一组的上下文 <see cref="T:System.Xml.XmlDocument" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Xml.XmlImplementation')]
  DNXmlImplementation = interface(DDN.mscorlib.DNObject)
  ['{B742D53C-E509-34DC-BAD5-2B37A1AFC661}']
  { methods } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  新的 <see langword="XmlDocument" />
    ///  对象。
    ///</returns>
    function CreateDocument: DNXmlDocument;
    ///<summary>
    ///  测试是否有文档对象模型 (DOM) 实现所实现的特定功能。
    ///</summary>
    ///  <param name="strFeature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="strVersion">
    ///  这是要测试的程序包名称的版本号。
    ///  如果未指定版本 (<see langword="null" />
    ///  )，则支持该功能的任何版本会导致该方法以返回 <see langword="true" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表显示了导致的组合 <see langword="HasFeature" />
    ///  返回 <see langword="true" />
    ///  。
    ///  strFeature
    ///  strVersion
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function HasFeature(strFeature: string; strVersion: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlImplementation = class(TDNGenericImport<DNXmlImplementationClass, DNXmlImplementation>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeCollectionClass = interface(DNObjectClass)
  ['{7D8D432B-42C5-5DD1-81AC-C7E940F30448}']
  end;

  ///<summary>
  ///  表示可以按名称或索引访问的属性的集合。
  ///</summary>
  [DNTypeName('System.Xml.XmlAttributeCollection')]
  DNXmlAttributeCollection = interface(DNObject)
  ['{AFF15495-0AAB-3C7F-A744-CB752611089E}']
  { getters & setters } 

    function get_ItemOf(i: Int32): DNXmlAttribute; overload;
    function get_ItemOf(name: string): DNXmlAttribute; overload;
    function get_ItemOf(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加 <see cref="T:System.Xml.XmlNode" />
    ///  使用其 <see cref="P:System.Xml.XmlNode.Name" />
    ///  属性
    ///</summary>
    ///  <param name="node">
    ///  要在此集合中存储的属性节点。
    ///  以后将使用节点的名称可以访问该节点。
    ///  如果已在集合中存在具有该名称的节点，则替换它一个新;否则，该节点被追加到集合的末尾。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="node" />
    ///  替换现有节点具有相同名称，旧节点则返回; 否则为返回添加的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="node" />
    ///  创建来自不同 <see cref="T:System.Xml.XmlDocument" />
    ///  比创建此集合。
    ///  这 <see langword="XmlAttributeCollection" />
    ///  是只读的。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="node" />
    ///  是 <see cref="T:System.Xml.XmlAttribute" />
    ///  已的另一个属性 <see cref="T:System.Xml.XmlElement" />
    ///  对象。
    ///  若要重新使用在其他元素中的属性，则必须将克隆 <see langword="XmlAttribute" />
    ///  对象想要重新使用。
    ///</exception>
    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的特性插入集合中的第一个节点。
    ///</summary>
    ///  <param name="node">
    ///  要插入的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</param>
    ///<returns><see langword="XmlAttribute" />
    ///  添加到集合。
    ///</returns>
    function Prepend(node: DNXmlAttribute): DNXmlAttribute;
    ///<summary>
    ///  将集合中的最后一个节点作为插入指定的属性。
    ///</summary>
    ///  <param name="node">
    ///  要插入的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</param>
    ///<returns><see langword="XmlAttribute" />
    ///  要追加到集合。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="node" />
    ///  已创建从不同于创建此集合的文档。
    ///</exception>
    function Append(node: DNXmlAttribute): DNXmlAttribute;
    ///<summary>
    ///  将插入指定的属性之前指定的引用属性。
    ///</summary>
    ///  <param name="newNode">
    ///  要插入的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</param>
    ///  <param name="refNode"><see cref="T:System.Xml.XmlAttribute" />
    ///  ，它是引用属性。
    ///  <paramref name="newNode" />
    ///  前后放置 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns><see langword="XmlAttribute" />
    ///  要插入到集合。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="newNode" />
    ///  从文档不同于创建此集合创建。
    ///  或者 <paramref name="refNode" />
    ///  不是此集合的成员。
    ///</exception>
    function InsertBefore(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    ///<summary>
    ///  在指定的引用属性之后立即插入指定的特性。
    ///</summary>
    ///  <param name="newNode">
    ///  要插入的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</param>
    ///  <param name="refNode"><see cref="T:System.Xml.XmlAttribute" />
    ///  ，它是引用属性。
    ///  <paramref name="newNode" />
    ///  放置后 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns><see langword="XmlAttribute" />
    ///  要插入到集合。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="newNode" />
    ///  从文档不同于创建此集合创建。
    ///  或者 <paramref name="refNode" />
    ///  不是此集合的成员。
    ///</exception>
    function InsertAfter(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    ///<summary>
    ///  从集合中移除指定的属性。
    ///</summary>
    ///  <param name="node">
    ///  要移除的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</param>
    ///<returns>
    ///  已移除的节点或 <see langword="null" />
    ///  如果它找不到集合中。
    ///</returns>
    function Remove(node: DNXmlAttribute): DNXmlAttribute;
    ///<summary>
    ///  删除指定的索引从集合相对应的属性。
    ///</summary>
    ///  <param name="i">
    ///  要删除的节点的索引。
    ///  第一个节点的索引为 0。
    ///</param>
    ///<returns>
    ///  返回 <see langword="null" />
    ///  是否存在任何属性中指定索引处。
    ///</returns>
    function RemoveAt(i: Int32): DNXmlAttribute;
    ///<summary>
    ///  移除集合中的所有属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  将所有复制 <see cref="T:System.Xml.XmlAttribute" />
    ///  到给定数组此集合中的对象。
    ///</summary>
    ///  <param name="array">
    ///  一个数组，它是从该集合复制的对象的目标。
    ///</param>
    ///  <param name="index">
    ///  复制开始处的数组中的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNXmlAttribute>; index: Int32);
    ///<summary>
    ///  检索 <see cref="T:System.Xml.XmlNode" />
    ///  由名称指定。
    ///</summary>
    ///  <param name="name">
    ///  要检索的节点的限定的名称。
    ///  它针对匹配节点的 <see cref="P:System.Xml.XmlNode.Name" />
    ///  属性进行匹配。
    ///</param>
    ///<returns><see langword="XmlNode" />
    ///  具有指定名称或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function GetNamedItem(name: string): DNXmlNode; overload;
    ///<summary>
    ///  删除从节点 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  要移除的节点的限定的名称。
    ///  名称匹配对 <see cref="P:System.Xml.XmlNode.Name" />
    ///  匹配节点的属性。
    ///</param>
    ///<returns><see langword="XmlNode" />
    ///  删除从此 <see langword="XmlNamedNodeMap" />
    ///  或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    ///<summary>
    ///  检索在指定索引处的节点 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///  <param name="index">
    ///  要从检索的节点的索引位置 <see langword="XmlNamedNodeMap" />
    ///  。
    ///  索引是从零开始;因此，第一个节点的索引为 0，最后一个节点的索引为 <see cref="P:System.Xml.XmlNamedNodeMap.Count" />
    ///  -1。
    ///</param>
    ///<returns>
    ///  位于指定索引处的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///  如果 <paramref name="index" />
    ///  小于 0 或大于或等于 <see cref="P:System.Xml.XmlNamedNodeMap.Count" />
    ///  属性， <see langword="null" />
    ///  返回。
    ///</returns>
    function Item(index: Int32): DNXmlNode;
    ///<summary>
    ///  检索与匹配的节点 <see cref="P:System.Xml.XmlNode.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  要检索的节点本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间统一资源标识符 (URI) 的节点来检索。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  具有匹配的本地名称和命名空间 URI 或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  中删除具有匹配节点 <see cref="P:System.Xml.XmlNode.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  要移除的节点本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间节点的 URI 中删除。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  删除或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  中的节点集合上进行"foreach"样式迭代提供支持 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///<returns>
    ///  枚举器对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ItemOf[i: Int32]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[name: string]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[localName: string; namespaceURI: string]: DNXmlAttribute read get_ItemOf; default;
    ///<summary>
    ///  获取中的节点数 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///<returns>
    ///  节点数。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXmlAttributeCollection = class(TDNGenericImport<DNXmlAttributeCollectionClass, DNXmlAttributeCollection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamespaceManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B8483CCF-B8DD-5A89-B0AB-9F9015775557}']
  { constructors } 

    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  初始化 <see cref="T:System.Xml.XmlNameTable" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="nameTable">
    ///  要使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NullReferenceException"><see langword="null" />
    ///  传递给构造函数
    ///</exception>
    {class} function init(nameTable: DNXmlNameTable): DNXmlNamespaceManager;

  end;

  ///<summary>
  ///  解析集合的命名空间、向集合添加命名空间和从集合中移除命名空间，以及提供对这些命名空间的范围管理。
  ///</summary>
  [DNTypeName('System.Xml.XmlNamespaceManager')]
  DNXmlNamespaceManager = interface(DDN.mscorlib.DNObject)
  ['{C5338A3B-B457-3C22-9CD2-4786DF44090F}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_DefaultNamespace: string;

  { methods } 

    ///<summary>
    ///  将命名空间范围推送到堆栈上。
    ///</summary>
    procedure PushScope;
    ///<summary>
    ///  将命名空间范围弹出堆栈。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有留在堆栈上的命名空间范围， <see langword="false" />
    ///  如果有多个要弹出的命名空间。
    ///</returns>
    function PopScope: Boolean;
    ///<summary>
    ///  为给定的前缀移除给定的命名空间。
    ///</summary>
    ///  <param name="prefix">
    ///  命名空间的前缀
    ///</param>
    ///  <param name="uri">
    ///  要为给定的前缀移除的命名空间。
    ///  所移除的命名空间来自当前的命名空间范围。
    ///  忽略当前范围以外的命名空间。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  值 <paramref name="prefix" />
    ///  或 <paramref name="uri" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    procedure RemoveNamespace(prefix: string; uri: string);
    ///<summary>
    ///  获取指定前缀的命名空间 URI。
    ///</summary>
    ///  <param name="prefix">
    ///  要解析其命名空间 URI 的前缀。
    ///  若要匹配默认命名空间，请传递 String.Empty。
    ///</param>
    ///<returns>
    ///  返回的命名空间 URI 为 <paramref name="prefix" />
    ///  或 <see langword="null" />
    ///  如果没有映射的命名空间。
    ///  返回的字符串是原子化的。
    ///  原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />
    ///  类。
    ///</returns>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  查找为给定的命名空间 URI 声明的前缀。
    ///</summary>
    ///  <param name="uri">
    ///  要为前缀解析的命名空间。
    ///</param>
    ///<returns>
    ///  匹配的前缀。
    ///  如果没有映射的前缀，则方法返回 String.Empty。
    ///  如果提供 null 值，则 <see langword="null" />
    ///  返回。
    ///</returns>
    function LookupPrefix(uri: string): string;
    ///<summary>
    ///  获取一个值，该值指示所提供的前缀是否具有为当前推送的范围定义的命名空间。
    ///</summary>
    ///  <param name="prefix">
    ///  你想要查找的命名空间前缀。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果没有定义; 的命名空间，否则为<see langword="false" />
    ///  。
    ///</returns>
    function HasNamespace(prefix: string): Boolean;
    ///<summary>
    ///  将给定的命名空间添加到集合。
    ///</summary>
    ///  <param name="prefix">
    ///  与要添加的命名空间关联的前缀。
    ///  使用 String.Empty 来添加默认命名空间。
    ///  注意如果 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  将使用用于解析 XML 路径语言 (XPath) 表达式中的命名空间，则必须指定前缀。
    ///  如果 XPath 表达式不包含前缀，则假定命名空间统一资源标识符 (URI) 为空命名空间。
    ///  有关 XPath 表达式的详细信息和 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  , ，请参阅 <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" />
    ///  和 <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" />
    ///  方法。
    ///</param>
    ///  <param name="uri">
    ///  要添加的命名空间。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  值为 <paramref name="prefix" />
    ///  是"xml"或"xmlns"。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  值为 <paramref name="prefix" />
    ///  或 <paramref name="uri" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    procedure AddNamespace(prefix: string; uri: string);
    ///<summary>
    ///  返回一个枚举器，用于循环访问中的命名空间 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  包含存储的前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取被可用于枚举当前范围内的命名空间的前缀键控的命名空间名称的集合。
    ///</summary>
    ///  <param name="scope">
    ///  一个指定要返回的命名空间节点的类型的枚举值。
    ///</param>
    ///<returns>
    ///  当前范围中的命名空间和前缀对的集合。
    ///</returns>
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlNameTable" />
    ///  与此对象关联。
    ///</summary>
    ///<returns>
    ///  此对象使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取默认命名空间的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  返回默认命名空间的命名空间 URI；如果没有默认命名空间，则返回 String.Empty。
    ///</returns>
    property DefaultNamespace: string read get_DefaultNamespace;
  end;

  TDNXmlNamespaceManager = class(TDNGenericImport<DNXmlNamespaceManagerClass, DNXmlNamespaceManager>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNameTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{77150595-D80A-50B6-8E01-202CC752528A}']
  end;

  ///<summary>
  ///  原子化字符串对象表。
  ///</summary>
  [DNTypeName('System.Xml.XmlNameTable')]
  DNXmlNameTable = interface(DDN.mscorlib.DNObject)
  ['{14B8B8DB-2F35-39C8-A2F8-9BC1E9834472}']
  { methods } 

    ///<summary>
    ///  当在派生类中重写时获取包含指定的范围内的给定数组中的字符相同的字符的原子化的字符串。
    ///</summary>
    ///  <param name="array">
    ///  包含要查找的名称的字符数组。
    ///</param>
    ///  <param name="offset">
    ///  数组中指定名称的第一个字符从零开始的索引。
    ///</param>
    ///  <param name="length">
    ///  在名称中的字符数。
    ///</param>
    ///<returns>
    ///  原子化的字符串或 <see langword="null" />
    ///  如果字符串具有不尚未原子化。
    ///  如果 <paramref name="length" />
    ///  为零，则返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  0 &gt; <paramref name="offset" />
    ///  - 或 -
    ///  <paramref name="offset" />
    ///  &gt;= <paramref name="array" />
    ///  .长度
    ///  - 或 -
    ///  <paramref name="length" />
    ///  &gt; <paramref name="array" />
    ///  .长度
    ///  上述条件不会导致如果引发异常 <paramref name="length" />
    ///  = 0。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" />
    ///  &lt; 0.
    ///</exception>
    function Get(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    ///<summary>
    ///  当在派生类中重写时获取包含与指定的字符串相同的值的原子化的字符串。
    ///</summary>
    ///  <param name="array">
    ///  要查找的名称。
    ///</param>
    ///<returns>
    ///  原子化的字符串或 <see langword="null" />
    ///  如果字符串具有不尚未原子化。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Get(&array: string): string; overload;
    ///<summary>
    ///  当在派生类中重写，将指定的字符串原子化并将其添加到 <see langword="XmlNameTable" />
    ///  。
    ///</summary>
    ///  <param name="array">
    ///  包含要添加的名称的字符数组。
    ///</param>
    ///  <param name="offset">
    ///  数组中指定名称的第一个字符的从零开始索引。
    ///</param>
    ///  <param name="length">
    ///  在名称中的字符数。
    ///</param>
    ///<returns>
    ///  新原子化的字符串或现有如果已经存在。
    ///  如果长度为零，则返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  0 &gt; <paramref name="offset" />
    ///  - 或 -
    ///  <paramref name="offset" />
    ///  &gt;= <paramref name="array" />
    ///  .长度
    ///  - 或 -
    ///  <paramref name="length" />
    ///  &gt; <paramref name="array" />
    ///  .长度
    ///  上述条件不会导致如果引发异常 <paramref name="length" />
    ///  = 0。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" />
    ///  &lt; 0.
    ///</exception>
    function Add(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    ///<summary>
    ///  当在派生类中重写，将指定的字符串原子化并将其添加到 <see langword="XmlNameTable" />
    ///  。
    ///</summary>
    ///  <param name="array">
    ///  要添加的名称。
    ///</param>
    ///<returns>
    ///  新原子化的字符串或现有如果已经存在。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Add(&array: string): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlNameTable = class(TDNGenericImport<DNXmlNameTableClass, DNXmlNameTable>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{67ED459D-701F-5264-948A-65FB8009A866}']
  end;

  ///<summary>
  ///  表示 XML 文档中的单个节点。
  ///</summary>
  [DNTypeName('System.Xml.XmlNode')]
  DNXmlNode = interface(DDN.mscorlib.DNObject)
  ['{1E11AFE9-F059-35CC-A0C3-B9AA38701C21}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用于定位此对象。
    ///</summary>
    ///<returns><see langword="XPathNavigator" />
    ///  对象，用于导航节点。
    ///<see langword="XPathNavigator" />
    ///  定位从中调用该方法的节点上。
    ///  它不定位在文档的根上。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newNode" />
    ///  放在 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  替换子节点 <paramref name="oldChild" />
    ///  与 <paramref name="newChild" />
    ///  节点。
    ///</summary>
    ///  <param name="newChild">
    ///  要放入子列表的新节点。
    ///</param>
    ///  <param name="oldChild">
    ///  列表中正在被替换的节点。
    ///</param>
    ///<returns>
    ///  被替换的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  移除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  正在被移除的节点。
    ///</param>
    ///<returns>
    ///  已移除的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  当在派生类中被重写时，创建该节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不能克隆的节点类型上调用此方法。
    ///</exception>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    ///<summary>
    ///  将当前节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  , ，当在派生类中重写。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将所有子节点的节点都保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  , ，当在派生类中重写。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中被重写时，获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  节点的限定名称。
    ///  返回的名称是依赖于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  名称
    ///  特性
    ///  属性的限定名称。
    ///  CDATA
    ///  #cdata-section
    ///  注释
    ///  #comment
    ///  Document
    ///  #document
    ///  DocumentFragment
    ///  #document-fragment
    ///  DocumentType
    ///  文档类型名称。
    ///  元素
    ///  元素的限定名。
    ///  实体
    ///  实体的名称。
    ///  EntityReference
    ///  引用的实体的名称。
    ///  Notation
    ///  表示法名称。
    ///  ProcessingInstruction
    ///  处理指令的目标。
    ///  Text
    ///  #text
    ///  Whitespace
    ///  #whitespace
    ///  SignificantWhitespace
    ///  #significant-whitespace
    ///  XmlDeclaration
    ///  #xml-declaration
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于<see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  值
    ///  特性
    ///  属性的值。
    ///  CDATASection
    ///  CDATA 节的内容。
    ///  注释
    ///  注释的内容。
    ///  Document
    ///<see langword="null" />
    ///  。
    ///  DocumentFragment
    ///<see langword="null" />
    ///  。
    ///  DocumentType
    ///<see langword="null" />
    ///  。
    ///  元素
    ///<see langword="null" />
    ///  。
    ///  你可以使用<see cref="P:System.Xml.XmlElement.InnerText" />
    ///  或<see cref="P:System.Xml.XmlElement.InnerXml" />
    ///  属性来访问元素节点的值。
    ///  实体
    ///<see langword="null" />
    ///  。
    ///  EntityReference
    ///<see langword="null" />
    ///  。
    ///  Notation
    ///<see langword="null" />
    ///  。
    ///  ProcessingInstruction
    ///  全部内容（不包括指令目标）。
    ///  Text
    ///  文本节点的内容。
    ///  SignificantWhitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  Whitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  XmlDeclaration
    ///  声明 （即，之间的所有内容的内容&lt;?xml and=""?&gt;).
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点的值设置为只读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不应该具有值 （例如，元素节点） 的节点的值设置。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNodeType" />
    ///  值之一。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///  NodeType
    ///  ParentNode 的返回值
    ///  Attribute、Document、DocumentFragment、Entity、Notation
    ///  返回 <see langword="null" />
    ///  ; 这些节点不具有父级。
    ///  CDATA
    ///  返回包含 CDATA 节的元素或实体引用。
    ///  注释
    ///  返回包含注释的元素、实体引用、文档类型或文档。
    ///  DocumentType
    ///  返回文档节点。
    ///  元素
    ///  返回该元素的父节点。
    ///  如果该元素是树中的根节点，则父级是文档节点。
    ///  EntityReference
    ///  返回包含该实体引用的元素、特性或实体引用。
    ///  ProcessingInstruction
    ///  返回包含该处理指令的文档、元素、文档类型或实体引用。
    ///  Text
    ///  返回包含该文本节点的父元素、特性或实体引用。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see langword="XmlNode" />
    ///  。
    ///  如果前面没有节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns>
    ///  下一个 <see langword="XmlNode" />
    ///  。
    ///  如果没有下一个节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlDocument" />
    ///  此节点所属。
    ///  如果节点是 <see cref="T:System.Xml.XmlDocument" />
    ///  （NodeType 等于 XmlNodeType.Document），则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  例如， <see langword="Prefix" />
    ///  元素 &lt; bk:book &gt; 是 bk。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性和指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是属性，该节点的 qualifiedName 是"xmlns"。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  当在派生类中被重写时，获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的节点的名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" />
    ///  是 book。
    ///  返回的名称是依赖于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  名称
    ///  特性
    ///  属性的本地名称。
    ///  CDATA
    ///  #cdata-section
    ///  注释
    ///  #comment
    ///  Document
    ///  #document
    ///  DocumentFragment
    ///  #document-fragment
    ///  DocumentType
    ///  文档类型名称。
    ///  元素
    ///  元素的本地名称。
    ///  实体
    ///  实体的名称。
    ///  EntityReference
    ///  引用的实体的名称。
    ///  Notation
    ///  表示法名称。
    ///  ProcessingInstruction
    ///  处理指令的目标。
    ///  Text
    ///  #text
    ///  Whitespace
    ///  #whitespace
    ///  SignificantWhitespace
    ///  #significant-whitespace
    ///  XmlDeclaration
    ///  #xml-declaration
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取或设置节点及其所有子节点的串连值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子节点的串连值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取包含此节点及其所有子节点的标记。
    ///</summary>
    ///<returns>
    ///  包含此节点及其所有子节点的标记。
    ///<see langword="OuterXml" />
    ///  不会返回默认属性。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    ///<summary>
    ///  获取或设置仅表示该节点的子节点的标记。
    ///</summary>
    ///<returns>
    ///  该节点的子节点的标记。
    ///<see langword="InnerXml" />
    ///  不会返回默认属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在节点上设置此属性不能有子节点。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  获取作为架构验证的结果分配给此节点的后架构验证信息集。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含此节点的后架构验证信息集。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlNode = class(TDNGenericImport<DNXmlNodeClass, DNXmlNode>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeClass = interface(DNXmlNodeClass)
  ['{568F5F75-91DF-5716-991A-DE584FED5846}']
  { static getter & setter } 

    procedure set_InnerText(value: string);
    procedure set_InnerXml(value: string);

  { static propertys } 

    ///<summary>
    ///  设置节点及其所有子级的串连的值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子级的串连值。
    ///  对于属性节点，此属性具有相同的功能 <see cref="P:System.Xml.XmlAttribute.Value" />
    ///  属性。
    ///</returns>
    {class} property InnerText: string write set_InnerText;
    ///<summary>
    ///  设置该属性的值。
    ///</summary>
    ///<returns>
    ///  特性值。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    {class} property InnerXml: string write set_InnerXml;
  end;

  ///<summary>
  ///  表示属性。
  ///  属性的有效值和默认值在文档类型定义 (DTD) 或架构中定义。
  ///</summary>
  [DNTypeName('System.Xml.XmlAttribute')]
  DNXmlAttribute = interface(DNXmlNode)
  ['{D53A0503-137B-30F4-8409-E7299C90A5C8}']
  { getters & setters } 

    function get_ParentNode: DNXmlNode;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_OwnerDocument: DNXmlDocument;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    procedure set_InnerText(value: string);
    function get_Specified: Boolean;
    function get_OwnerElement: DNXmlElement;
    procedure set_InnerXml(value: string);
    function get_BaseURI: string;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep"><see langword="true" />
    ///  递归地克隆指定节点之下的子树 <see langword="false" />
    ///  克隆节点本身
    ///</param>
    ///<returns>
    ///  重复节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see cref="T:System.Xml.XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  插入。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see cref="T:System.Xml.XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放在 <paramref name="refChild" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  插入。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将替换与指定的新子节点指定的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  新的子 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</param>
    ///  <param name="oldChild"><see cref="T:System.Xml.XmlNode" />
    ///  来替换。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  替换。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  删除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  要移除的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  中删除。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///  如果它是 <see cref="T:System.Xml.XmlDocumentFragment" />
    ///  , ，将文档片段的全部内容移至该节点的子列表。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  添加。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  添加。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  创建 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用于定位此对象。
    ///</summary>
    ///<returns><see langword="XPathNavigator" />
    ///  对象，用于导航节点。
    ///<see langword="XPathNavigator" />
    ///  定位从中调用该方法的节点上。
    ///  它不定位在文档的根上。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此节点的父级。
    ///  有关 <see langword="XmlAttribute" />
    ///  节点，此属性始终返回 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlAttribute" />
    ///  节点，此属性始终返回 <see langword="null" />
    ///  。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  属性节点的限定的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的属性节点的名称。
    ///  在下面的示例 &lt; 预订 bk:genre = '新颖 &gt;，则 <see langword="LocalName" />
    ///  的属性是 <see langword="genre" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果该属性未显式给予命名空间，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  该节点的 namespaceURI 为 <see langword="null" />
    ///  。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性，指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是一个特性，且该节点的 qualifiedName"xmlns"[命名空间]。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型 <see langword="XmlAttribute" />
    ///  节点是 XmlNodeType.Attribute。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此节点所属的 XML 文档。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  。
    ///  有关 <see langword="XmlAttribute" />
    ///  节点，此属性是属性的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该节点是只读的而 set 操作称为。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取后期-架构验证的信息集已分配给此节点作为架构验证结果。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  包含后-架构验证的信息集的此节点。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  设置节点及其所有子级的串连的值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子级的串连值。
    ///  对于属性节点，此属性具有相同的功能 <see cref="P:System.Xml.XmlAttribute.Value" />
    ///  属性。
    ///</returns>
    property InnerText: string write set_InnerText;
    ///<summary>
    ///  获取一个值，该值指示是否显式设置属性值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此属性已显式指定一个值，在原始实例文档;，否则为 <see langword="false" />
    ///  。
    ///  值为 <see langword="false" />
    ///  指示该属性的值来自 DTD。
    ///</returns>
    property Specified: Boolean read get_Specified;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlElement" />
    ///  特性所属。
    ///</summary>
    ///<returns><see langword="XmlElement" />
    ///  属性属于或 <see langword="null" />
    ///  如果没有此特性的一部分 <see langword="XmlElement" />
    ///  。
    ///</returns>
    property OwnerElement: DNXmlElement read get_OwnerElement;
    ///<summary>
    ///  设置该属性的值。
    ///</summary>
    ///<returns>
    ///  特性值。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string write set_InnerXml;
    ///<summary>
    ///  获取基统一资源标识符 (URI) 的节点。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。
    ///  属性节点具有作为其所有者元素相同的基 URI。
    ///  如果属性节点不具有所有者元素中， <see langword="BaseURI" />
    ///  返回 String.Empty。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see langword="XmlNode" />
    ///  。
    ///  如果前面没有节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns>
    ///  下一个 <see langword="XmlNode" />
    ///  。
    ///  如果没有下一个节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取包含此节点及其所有子节点的标记。
    ///</summary>
    ///<returns>
    ///  包含此节点及其所有子节点的标记。
    ///<see langword="OuterXml" />
    ///  不会返回默认属性。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlAttribute = class(TDNGenericImport<DNXmlAttributeClass, DNXmlAttribute>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentClass = interface(DNXmlNodeClass)
  ['{72ECC820-5D8B-5542-9F37-BD21B3B1CDF4}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);
    procedure set_InnerText(value: string);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlDocument" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlDocument; overload;
    ///<summary>
    ///  使用指定的 <see langword="XmlDocument" />
    ///  初始化 <see cref="T:System.Xml.XmlNameTable" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="nt">
    ///  要使用的 <see langword="XmlNameTable" />
    ///  。
    ///</param>
    {class} function init(nt: DNXmlNameTable): DNXmlDocument; overload;

  { static propertys } 

    ///<summary>
    ///  设置 <see cref="T:System.Xml.XmlResolver" />
    ///  以用于解析外部资源。
    ///</summary>
    ///<returns>
    ///  要使用的 <see langword="XmlResolver" />
    ///  。
    ///  在 .NET Framework 1.1 版中，调用方必须受到完全信任才能指定 <see langword="XmlResolver" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  此属性设置为 <see langword="null" />
    ///  ，并且遇到了外部 DTD 或实体。
    ///</exception>
    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  在所有情况下引发 <see cref="T:System.InvalidOperationException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  节点及其所有子节点的值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在所有情况下。
    ///</exception>
    {class} property InnerText: string write set_InnerText;
  end;

  ///<summary>
  ///  表示 XML 文档。
  ///  可使用此类在文档中加载、验证、编辑、添加和放置 XML。
  ///</summary>
  [DNTypeName('System.Xml.XmlDocument')]
  DNXmlDocument = interface(DNXmlNode)
  ['{25C48904-3F45-36CE-9DAC-C679105D5308}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_DocumentType: DNXmlDocumentType;
    function get_Implementation: DNXmlImplementation;
    function get_Name: string;
    function get_LocalName: string;
    function get_DocumentElement: DNXmlElement;
    function get_OwnerDocument: DNXmlDocument;
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_NameTable: DNXmlNameTable;
    function get_PreserveWhitespace: Boolean;
    procedure set_PreserveWhitespace(value: Boolean);
    function get_IsReadOnly: Boolean;
    procedure set_InnerText(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { events } 

    procedure add_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanged(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanged(value: DNXmlNodeChangedEventHandler);

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的 <see langword="XmlDocument" />
    ///  节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  创建具有指定 <see cref="P:System.Xml.XmlDocument.Name" />
    ///  的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///  如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  属性反映名称中第一个冒号之前的部分，<see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  属性反映名称中第一个冒号之后的部分。
    ///<see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  保持为空，除非该前缀是一个可识别的内置前缀，例如 xmlns。
    ///  在这种情况下，<see langword="NamespaceURI" />
    ///  具有值 http://www.w3.org/2000/xmlns/。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlAttribute" />
    ///  。
    ///</returns>
    function CreateAttribute(name: string): DNXmlAttribute; overload;
    ///<summary>
    ///  创建包含指定数据的 <see cref="T:System.Xml.XmlCDataSection" />
    ///  。
    ///</summary>
    ///  <param name="data">
    ///  新 <see langword="XmlCDataSection" />
    ///  的内容。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlCDataSection" />
    ///  。
    ///</returns>
    function CreateCDataSection(data: string): DNXmlCDataSection;
    ///<summary>
    ///  创建包含指定数据的 <see cref="T:System.Xml.XmlComment" />
    ///  。
    ///</summary>
    ///  <param name="data">
    ///  新 <see langword="XmlComment" />
    ///  的内容。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlComment" />
    ///  。
    ///</returns>
    function CreateComment(data: string): DNXmlComment;
    ///<summary>
    ///  返回新 <see cref="T:System.Xml.XmlDocumentType" />
    ///  对象。
    ///</summary>
    ///  <param name="name">
    ///  此文档类型的名称。
    ///</param>
    ///  <param name="publicId">
    ///  此文档类型的公共标识符或 <see langword="null" />
    ///  。
    ///  你可以指定一个公共 URI 以及一个系统标识符以标识外部 DTD 子集的位置。
    ///</param>
    ///  <param name="systemId">
    ///  此文档类型的系统标识符或 <see langword="null" />
    ///  。
    ///  指定外部 DTD 子集的文件位置的 URL。
    ///</param>
    ///  <param name="internalSubset">
    ///  此文档类型的 DTD 内部子集或 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlDocumentType" />
    ///  。
    ///</returns>
    function CreateDocumentType(name: string; publicId: string; systemId: string; internalSubset: string): DNXmlDocumentType;
    ///<summary>
    ///  创建一个 <see cref="T:System.Xml.XmlDocumentFragment" />
    ///  。
    ///</summary>
    ///<returns>
    ///  新的 <see langword="XmlDocumentFragment" />
    ///  。
    ///</returns>
    function CreateDocumentFragment: DNXmlDocumentFragment;
    ///<summary>
    ///  创建具有指定名称的元素。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///  如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  属性反映名称中位于冒号之前的部分，<see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  属性反映名称中位于冒号之后的部分。
    ///  限定名称不能包含“xmlns”前缀。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlElement" />
    ///  。
    ///</returns>
    function CreateElement(name: string): DNXmlElement; overload;
    ///<summary>
    ///  创建具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  实体引用的名称。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlEntityReference" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  名称无效（例如，以“#”开头的名称无效。）
    ///</exception>
    function CreateEntityReference(name: string): DNXmlEntityReference;
    ///<summary>
    ///  创建一个具有指定名称和数据的 <see cref="T:System.Xml.XmlProcessingInstruction" />
    ///  。
    ///</summary>
    ///  <param name="target">
    ///  处理指令的名称。
    ///</param>
    ///  <param name="data">
    ///  处理指令的数据。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlProcessingInstruction" />
    ///  。
    ///</returns>
    function CreateProcessingInstruction(target: string; data: string): DNXmlProcessingInstruction;
    ///<summary>
    ///  创建一个具有指定值的 <see cref="T:System.Xml.XmlDeclaration" />
    ///  节点。
    ///</summary>
    ///  <param name="version">
    ///  版本必须为“1.0”。
    ///</param>
    ///  <param name="encoding">
    ///  编码属性的值。
    ///  这是当将 <see cref="T:System.Xml.XmlDocument" />
    ///  保存到文件或流时使用的编码方式；因此必须将其设置为 <see cref="T:System.Text.Encoding" />
    ///  类支持的字符串，否则 <see cref="M:System.Xml.XmlDocument.Save(System.String)" />
    ///  失败。
    ///  如果这是 <see langword="null" />
    ///  或 String.Empty，则 <see langword="Save" />
    ///  方法不在 XML 声明上写出编码方式特性，因此将使用默认的编码方式 UTF-8。
    ///  注意：如果将 <see langword="XmlDocument" />
    ///  保存到 <see cref="T:System.IO.TextWriter" />
    ///  或 <see cref="T:System.Xml.XmlTextWriter" />
    ///  ，则放弃该编码值。
    ///  而改用 <see langword="TextWriter" />
    ///  或 <see langword="XmlTextWriter" />
    ///  的编码方式。
    ///  这会确保可以使用正确的编码读回写出的 XML。
    ///</param>
    ///  <param name="standalone">
    ///  该值必须是“yes”或“no”。
    ///  如果这是 <see langword="null" />
    ///  或 String.Empty，<see langword="Save" />
    ///  方法不在 XML 声明上写出独立特性。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlDeclaration" />
    ///  节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="version" />
    ///  或 <paramref name="standalone" />
    ///  的值是除上面指定的值以外的值。
    ///</exception>
    function CreateXmlDeclaration(version: string; encoding: string; standalone: string): DNXmlDeclaration;
    ///<summary>
    ///  创建具有指定文本的 <see cref="T:System.Xml.XmlText" />
    ///  。
    ///</summary>
    ///  <param name="text">
    ///  Text 节点的文本。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlText" />
    ///  节点。
    ///</returns>
    function CreateTextNode(text: string): DNXmlText;
    ///<summary>
    ///  创建一个 <see cref="T:System.Xml.XmlSignificantWhitespace" />
    ///  节点。
    ///</summary>
    ///  <param name="text">
    ///  此字符串必须只包含下列字符：&amp;#20；&amp;#10；&amp;#13 和 &amp;#9；
    ///</param>
    ///<returns>
    ///  一个新的 <see langword="XmlSignificantWhitespace" />
    ///  节点。
    ///</returns>
    function CreateSignificantWhitespace(text: string): DNXmlSignificantWhitespace;
    ///<summary>
    ///  创建一个用于导航此文档的新 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  创建一个 <see cref="T:System.Xml.XmlWhitespace" />
    ///  节点。
    ///</summary>
    ///  <param name="text">
    ///  此字符串必须只包含下列字符：&amp;#20；&amp;#10；&amp;#13 和 &amp;#9；
    ///</param>
    ///<returns>
    ///  一个新的 <see langword="XmlWhitespace" />
    ///  节点。
    ///</returns>
    function CreateWhitespace(text: string): DNXmlWhitespace;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlNodeList" />
    ///  ，它包含与指定 <see cref="P:System.Xml.XmlDocument.Name" />
    ///  匹配的所有子代元素的列表。
    ///</summary>
    ///  <param name="name">
    ///  要匹配的限定名称。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///  特殊值“*”匹配所有标记。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  ，包含所有匹配节点的列表。
    ///  如果没有任何节点与 <paramref name="name" />
    ///  匹配，则返回的集合将为空。
    ///</returns>
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    ///<summary>
    ///  创建具有指定限定名和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="qualifiedName">
    ///  属性的限定名称。
    ///  如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  属性将反映名称中位于冒号前的部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  属性将反映名称中位于冒号后的部分。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的 namespaceURI。
    ///  如果限定名称包含前缀 xmlns，则该参数必须是 http://www.w3.org/2000/xmlns/。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlAttribute" />
    ///  。
    ///</returns>
    function CreateAttribute(qualifiedName: string; namespaceURI: string): DNXmlAttribute; overload;
    ///<summary>
    ///  创建具有限定名和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///</summary>
    ///  <param name="qualifiedName">
    ///  元素的限定名。
    ///  如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  属性将反映名称中位于冒号前的部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  属性将反映名称中位于冒号后的部分。
    ///  限定名称不能包含“xmlns”前缀。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlElement" />
    ///  。
    ///</returns>
    function CreateElement(qualifiedName: string; namespaceURI: string): DNXmlElement; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlNodeList" />
    ///  ，它包含与指定 <see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  匹配的所有子代元素的列表。
    ///</summary>
    ///  <param name="localName">
    ///  要匹配的 LocalName。
    ///  特殊值“*”匹配所有标记。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要匹配的 NamespaceURI。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  ，包含所有匹配节点的列表。
    ///  如果没有任何节点与指定的 <paramref name="localName" />
    ///  和 <paramref name="namespaceURI" />
    ///  匹配，则返回的集合将为空。
    ///</returns>
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    ///<summary>
    ///  获取具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///</summary>
    ///  <param name="elementId">
    ///  要匹配的属性 ID。
    ///</param>
    ///<returns>
    ///  具有匹配 ID 的 <see langword="XmlElement" />
    ///  ；如果未找到匹配的元素，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetElementById(elementId: string): DNXmlElement;
    ///<summary>
    ///  将节点从另一个文档导入到当前文档。
    ///</summary>
    ///  <param name="node">
    ///  正在被导入的节点。
    ///</param>
    ///  <param name="deep">
    ///  如果执行深层克隆，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  导入的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在无法导入的节点类型上调用此方法。
    ///</exception>
    function ImportNode(node: DNXmlNode; deep: Boolean): DNXmlNode;
    ///<summary>
    ///  创建一个具有指定的 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  、<see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="prefix">
    ///  属性的前缀（如果有的话）。
    ///  String.Empty 与 <see langword="null" />
    ///  等效。
    ///</param>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI（如果有的话）。
    ///  String.Empty 与 <see langword="null" />
    ///  等效。
    ///  如果 <paramref name="prefix" />
    ///  为 xmlns，则该参数必须是 http://www.w3.org/2000/xmlns/；否则将引发异常。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlAttribute" />
    ///  。
    ///</returns>
    function CreateAttribute(prefix: string; localName: string; namespaceURI: string): DNXmlAttribute; overload;
    ///<summary>
    ///  创建具有指定 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  、<see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的元素。
    ///</summary>
    ///  <param name="prefix">
    ///  新元素的前缀（如果有的话）。
    ///  String.Empty 与 <see langword="null" />
    ///  等效。
    ///</param>
    ///  <param name="localName">
    ///  新元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新元素的命名空间 URI（如果有的话）。
    ///  String.Empty 与 <see langword="null" />
    ///  等效。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///</returns>
    function CreateElement(prefix: string; localName: string; namespaceURI: string): DNXmlElement; overload;
    ///<summary>
    ///  创建具有指定的节点类型、<see cref="P:System.Xml.XmlDocument.Name" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</summary>
    ///  <param name="nodeTypeString">
    ///  新节点的 <see cref="T:System.Xml.XmlNodeType" />
    ///  的字符串版本。
    ///  该参数必须是下表中列出的值之一。
    ///</param>
    ///  <param name="name">
    ///  新节点的限定名称。
    ///  如果名称包含一个冒号，则将它解析为 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  和 <see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  两部分。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlNode" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  未提供名称，而 <see langword="XmlNodeType" />
    ///  需要名称；或者 <paramref name="nodeTypeString" />
    ///  不是下列字符串之一。
    ///</exception>
    function CreateNode(nodeTypeString: string; name: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  创建一个具有指定的 <see cref="T:System.Xml.XmlNodeType" />
    ///  、<see cref="P:System.Xml.XmlDocument.Name" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  新节点的 <see langword="XmlNodeType" />
    ///  。
    ///</param>
    ///  <param name="name">
    ///  新节点的限定名称。
    ///  如果名称包含一个冒号，则将其解析为 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  和 <see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  两部分。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlNode" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  未提供名称，而 <see langword="XmlNodeType" />
    ///  需要名称。
    ///</exception>
    function CreateNode(&type: DNXmlNodeType; name: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  根据 <see cref="T:System.Xml.XmlReader" />
    ///  中的信息创建一个 <see cref="T:System.Xml.XmlNode" />
    ///  对象。
    ///  读取器必须定位在节点或属性上。
    ///</summary>
    ///  <param name="reader">
    ///  XML 源
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlNode" />
    ///  ；如果不存在其他节点，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NullReferenceException">
    ///  此读取器位于未转换为有效的 DOM 节点（例如，EndElement 或 EndEntity）的节点类型上。
    ///</exception>
    function ReadNode(reader: DNXmlReader): DNXmlNode;
    ///<summary>
    ///  从指定的 URL 加载 XML 文档。
    ///</summary>
    ///  <param name="filename">
    ///  含要加载的 XML 文档的文件的 URL。
    ///  URL 既可以是本地文件，也可以是 HTTP URL（Web 地址）。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 中存在加载或分析错误。
    ///  在这种情况下，将引发 <see cref="T:System.IO.FileNotFoundException" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="filename" />
    ///  是一个长度为零的字符串，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" />
    ///  定义的无效字符。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.PathTooLongException">
    ///  指定的路径和/或文件名超过了系统定义的最大长度。
    ///  例如，在基于 Windows 的平台上，路径必须少于 248 个字符，且文件名必须少于 260 个字符。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException">
    ///  指定的路径无效（例如，它位于未映射的驱动器上）。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  打开文件时发生 I/O 错误。
    ///</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="filename" />
    ///  指定了一个只读文件。
    ///  - 或 -
    ///  当前平台不支持此操作。
    ///  - 或 -
    ///  <paramref name="filename" />
    ///  指定了一个目录。
    ///  - 或 -
    ///  调用方没有所要求的权限。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  未找到 <paramref name="filename" />
    ///  中指定的文件。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="filename" />
    ///  的格式无效。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所要求的权限。
    ///</exception>
    procedure Load(filename: string); overload;
    ///<summary>
    ///  从指定的流加载 XML 文档。
    ///</summary>
    ///  <param name="inStream">
    ///  包含要加载的 XML 文档的流。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 中存在加载或分析错误。
    ///  在这种情况下，将引发 <see cref="T:System.IO.FileNotFoundException" />
    ///  。
    ///</exception>
    procedure Load(inStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  从指定的 <see cref="T:System.IO.TextReader" />
    ///  加载 XML 文档。
    ///</summary>
    ///  <param name="txtReader">
    ///  用于将 XML 数据输送到文档中的 <see langword="TextReader" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 中存在加载或分析错误。
    ///  在这种情况下，该文档保留为空。
    ///</exception>
    procedure Load(txtReader: DDN.mscorlib.DNTextReader); overload;
    ///<summary>
    ///  从指定的 <see cref="T:System.Xml.XmlReader" />
    ///  加载 XML 文档。
    ///</summary>
    ///  <param name="reader">
    ///  用于将 XML 数据输送到文档中的 <see langword="XmlReader" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 中存在加载或分析错误。
    ///  在这种情况下，该文档保留为空。
    ///</exception>
    procedure Load(reader: DNXmlReader); overload;
    ///<summary>
    ///  从指定的字符串加载 XML 文档。
    ///</summary>
    ///  <param name="xml">
    ///  包含要加载的 XML 文档的字符串。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 中存在加载或分析错误。
    ///  在这种情况下，该文档保留为空。
    ///</exception>
    procedure LoadXml(xml: string);
    ///<summary>
    ///  将 XML 文档保存到指定的文件。
    ///  如果存在指定文件，则此方法会覆盖它。
    ///</summary>
    ///  <param name="filename">
    ///  要将文档保存到其中的文件的位置。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
    ///</exception>
    procedure Save(filename: string); overload;
    ///<summary>
    ///  将 XML 文档保存到指定的流。
    ///</summary>
    ///  <param name="outStream">
    ///  要保存到其中的流。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
    ///</exception>
    procedure Save(outStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  将 XML 文档保存到指定的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  要保存到其中的 <see langword="TextWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
    ///</exception>
    procedure Save(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  将 <see langword="XmlDocument" />
    ///  节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将 <see langword="XmlDocument" />
    ///  节点的所有子级保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="xw">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(xw: DNXmlWriter);
    ///<summary>
    ///  验证 <see cref="T:System.Xml.XmlDocument" />
    ///  是不是 <see cref="P:System.Xml.XmlDocument.Schemas" />
    ///  属性中包含的 XML 架构定义语言 (XSD) 架构。
    ///</summary>
    ///  <param name="validationEventHandler">
    ///  接收有关架构验证警告和错误的信息的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  发生了架构验证事件并且没有指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  对象。
    ///</exception>
    procedure Validate(validationEventHandler: DNValidationEventHandler); overload;
    ///<summary>
    ///  创建一个具有指定的<see cref="T:System.Xml.XmlNodeType" />
    ///  、<see cref="P:System.Xml.XmlNode.Prefix" />
    ///  、<see cref="P:System.Xml.XmlDocument.Name" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  新节点的 <see langword="XmlNodeType" />
    ///  。
    ///</param>
    ///  <param name="prefix">
    ///  新节点的前缀。
    ///</param>
    ///  <param name="name">
    ///  新节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlNode" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  未提供名称，而 <see langword="XmlNodeType" />
    ///  需要名称。
    ///</exception>
    function CreateNode(&type: DNXmlNodeType; prefix: string; name: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  将 XML 文档保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
    ///</exception>
    procedure Save(w: DNXmlWriter); overload;
    ///<summary>
    ///  根据 <see cref="P:System.Xml.XmlDocument.Schemas" />
    ///  属性中的 XML 架构定义语言 (XSD) 架构，验证指定的 <see cref="T:System.Xml.XmlNode" />
    ///  对象。
    ///</summary>
    ///  <param name="validationEventHandler">
    ///  接收有关架构验证警告和错误的信息的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  对象。
    ///</param>
    ///  <param name="nodeToValidate">
    ///  从 <see cref="T:System.Xml.XmlDocument" />
    ///  创建的要验证的 <see cref="T:System.Xml.XmlNode" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlNode" />
    ///  对象参数不是从 <see cref="T:System.Xml.XmlDocument" />
    ///  创建的。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlNode" />
    ///  对象参数不是元素、特性、文档片段或根节点。
    ///</exception><exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  发生了架构验证事件并且没有指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  对象。
    ///</exception>
    procedure Validate(validationEventHandler: DNValidationEventHandler; nodeToValidate: DNXmlNode); overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newNode" />
    ///  放在 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  替换子节点 <paramref name="oldChild" />
    ///  与 <paramref name="newChild" />
    ///  节点。
    ///</summary>
    ///  <param name="newChild">
    ///  要放入子列表的新节点。
    ///</param>
    ///  <param name="oldChild">
    ///  列表中正在被替换的节点。
    ///</param>
    ///<returns>
    ///  被替换的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  移除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  正在被移除的节点。
    ///</param>
    ///<returns>
    ///  已移除的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型。
    ///  对于 <see langword="XmlDocument" />
    ///  节点，该值是 XmlNodeType.Document。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父节点（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  始终返回 <see langword="null" />
    ///  。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取包含 DOCTYPE 声明的节点。
    ///</summary>
    ///<returns>
    ///  包含 DocumentType（DOCTYPE 声明）的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property DocumentType: DNXmlDocumentType read get_DocumentType;
    ///<summary>
    ///  获取当前文档的 <see cref="T:System.Xml.XmlImplementation" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  当前文档的 <see langword="XmlImplementation" />
    ///  对象。
    ///</returns>
    property &Implementation: DNXmlImplementation read get_Implementation;
    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于 <see langword="XmlDocument" />
    ///  节点，该名称是 #document。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于 <see langword="XmlDocument" />
    ///  节点，本地名称是 #document。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取文档的根 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示 XML 文档树的根的 <see langword="XmlElement" />
    ///  。
    ///  如果不存在根，则返回 <see langword="null" />
    ///  。
    ///</returns>
    property DocumentElement: DNXmlElement read get_DocumentElement;
    ///<summary>
    ///  获取当前节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  对于 <see langword="XmlDocument" />
    ///  节点（<see cref="P:System.Xml.XmlDocument.NodeType" />
    ///  等于 XmlNodeType.Document），该属性总是返回 <see langword="null" />
    ///  。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取或设置与此 <see cref="T:System.Xml.XmlDocument" />
    ///  关联的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  为一个包含与此 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  关联的 XML 架构定义语言 (XSD) 架构的 <see cref="T:System.Xml.XmlDocument" />
    ///  对象；否则，为一个空 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象。
    ///</returns>
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
    ///<summary>
    ///  设置 <see cref="T:System.Xml.XmlResolver" />
    ///  以用于解析外部资源。
    ///</summary>
    ///<returns>
    ///  要使用的 <see langword="XmlResolver" />
    ///  。
    ///  在 .NET Framework 1.1 版中，调用方必须受到完全信任才能指定 <see langword="XmlResolver" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  此属性设置为 <see langword="null" />
    ///  ，并且遇到了外部 DTD 或实体。
    ///</exception>
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</summary>
    ///<returns><see langword="XmlNameTable" />
    ///  ，它使您能够获取该文档中字符串的原子化版本。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在元素内容中保留空白区域。
    ///</summary>
    ///<returns><see langword="true" />
    ///  表示保留空白；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property PreserveWhitespace: Boolean read get_PreserveWhitespace write set_PreserveWhitespace;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否是只读的。
    ///</summary>
    ///<returns>
    ///  如果当前节点为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///<see langword="XmlDocument" />
    ///  节点始终返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  在所有情况下引发 <see cref="T:System.InvalidOperationException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  节点及其所有子节点的值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在所有情况下。
    ///</exception>
    property InnerText: string write set_InnerText;
    ///<summary>
    ///  获取或设置表示当前节点的子级的标记。
    ///</summary>
    ///<returns>
    ///  当前节点的子级的标记。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  返回节点的后架构验证信息集 (PSVI)。
    ///</summary>
    ///<returns>
    ///  表示节点的 PSVI 的 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于<see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  值
    ///  特性
    ///  属性的值。
    ///  CDATASection
    ///  CDATA 节的内容。
    ///  注释
    ///  注释的内容。
    ///  Document
    ///<see langword="null" />
    ///  。
    ///  DocumentFragment
    ///<see langword="null" />
    ///  。
    ///  DocumentType
    ///<see langword="null" />
    ///  。
    ///  元素
    ///<see langword="null" />
    ///  。
    ///  你可以使用<see cref="P:System.Xml.XmlElement.InnerText" />
    ///  或<see cref="P:System.Xml.XmlElement.InnerXml" />
    ///  属性来访问元素节点的值。
    ///  实体
    ///<see langword="null" />
    ///  。
    ///  EntityReference
    ///<see langword="null" />
    ///  。
    ///  Notation
    ///<see langword="null" />
    ///  。
    ///  ProcessingInstruction
    ///  全部内容（不包括指令目标）。
    ///  Text
    ///  文本节点的内容。
    ///  SignificantWhitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  Whitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  XmlDeclaration
    ///  声明 （即，之间的所有内容的内容&lt;?xml and=""?&gt;).
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点的值设置为只读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不应该具有值 （例如，元素节点） 的节点的值设置。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see langword="XmlNode" />
    ///  。
    ///  如果前面没有节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns>
    ///  下一个 <see langword="XmlNode" />
    ///  。
    ///  如果没有下一个节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  例如， <see langword="Prefix" />
    ///  元素 &lt; bk:book &gt; 是 bk。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性和指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是属性，该节点的 qualifiedName 是"xmlns"。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取包含此节点及其所有子节点的标记。
    ///</summary>
    ///<returns>
    ///  包含此节点及其所有子节点的标记。
    ///<see langword="OuterXml" />
    ///  不会返回默认属性。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocument = class(TDNGenericImport<DNXmlDocumentClass, DNXmlDocument>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentFragmentClass = interface(DNXmlNodeClass)
  ['{6E0EA61D-9BC6-5CA3-BBB9-2C261777C15D}']
  end;

  ///<summary>
  ///  表示对树插入操作非常有用的轻量级对象。
  ///</summary>
  [DNTypeName('System.Xml.XmlDocumentFragment')]
  DNXmlDocumentFragment = interface(DNXmlNode)
  ['{495A1294-FF3E-3F56-A99F-A1AA85127036}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  创建 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用于定位此对象。
    ///</summary>
    ///<returns><see langword="XPathNavigator" />
    ///  对象，用于导航节点。
    ///<see langword="XPathNavigator" />
    ///  定位从中调用该方法的节点上。
    ///  它不定位在文档的根上。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newNode" />
    ///  放在 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  替换子节点 <paramref name="oldChild" />
    ///  与 <paramref name="newChild" />
    ///  节点。
    ///</summary>
    ///  <param name="newChild">
    ///  要放入子列表的新节点。
    ///</param>
    ///  <param name="oldChild">
    ///  列表中正在被替换的节点。
    ///</param>
    ///<returns>
    ///  被替换的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  移除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  正在被移除的节点。
    ///</param>
    ///<returns>
    ///  已移除的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDocumentFragment" />
    ///  , ，名称是 <see langword="#document-fragment" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDocumentFragment" />
    ///  节点，本地名称是 <see langword="#document-fragment" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDocumentFragment" />
    ///  节点，此值是 XmlNodeType.DocumentFragment。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  此节点的父级。
    ///  有关 <see langword="XmlDocumentFragment" />
    ///  节点，此属性始终为 <see langword="null" />
    ///  。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns><see langword="XmlDocument" />
    ///  此节点所属。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取或设置表示此节点的子级的标记。
    ///</summary>
    ///<returns>
    ///  此节点子级的标记。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于<see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  值
    ///  特性
    ///  属性的值。
    ///  CDATASection
    ///  CDATA 节的内容。
    ///  注释
    ///  注释的内容。
    ///  Document
    ///<see langword="null" />
    ///  。
    ///  DocumentFragment
    ///<see langword="null" />
    ///  。
    ///  DocumentType
    ///<see langword="null" />
    ///  。
    ///  元素
    ///<see langword="null" />
    ///  。
    ///  你可以使用<see cref="P:System.Xml.XmlElement.InnerText" />
    ///  或<see cref="P:System.Xml.XmlElement.InnerXml" />
    ///  属性来访问元素节点的值。
    ///  实体
    ///<see langword="null" />
    ///  。
    ///  EntityReference
    ///<see langword="null" />
    ///  。
    ///  Notation
    ///<see langword="null" />
    ///  。
    ///  ProcessingInstruction
    ///  全部内容（不包括指令目标）。
    ///  Text
    ///  文本节点的内容。
    ///  SignificantWhitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  Whitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  XmlDeclaration
    ///  声明 （即，之间的所有内容的内容&lt;?xml and=""?&gt;).
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点的值设置为只读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不应该具有值 （例如，元素节点） 的节点的值设置。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see langword="XmlNode" />
    ///  。
    ///  如果前面没有节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns>
    ///  下一个 <see langword="XmlNode" />
    ///  。
    ///  如果没有下一个节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  例如， <see langword="Prefix" />
    ///  元素 &lt; bk:book &gt; 是 bk。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性和指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是属性，该节点的 qualifiedName 是"xmlns"。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取或设置节点及其所有子节点的串连值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子节点的串连值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取包含此节点及其所有子节点的标记。
    ///</summary>
    ///<returns>
    ///  包含此节点及其所有子节点的标记。
    ///<see langword="OuterXml" />
    ///  不会返回默认属性。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    ///<summary>
    ///  获取作为架构验证的结果分配给此节点的后架构验证信息集。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含此节点的后架构验证信息集。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentFragment = class(TDNGenericImport<DNXmlDocumentFragmentClass, DNXmlDocumentFragment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCDataSectionClass = interface(DNObjectClass)
  ['{97FBAC7B-CA59-5B48-A7E2-B077AF8D1A99}']
  end;

  ///<summary>
  ///  表示 CDATA 节。
  ///</summary>
  [DNTypeName('System.Xml.XmlCDataSection')]
  DNXmlCDataSection = interface(DNObject)
  ['{1810EA9B-175D-3CDC-8921-290FD122D830}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_PreviousText: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  由于 CDATA 节点没有子级，因此不管参数的设置如何，克隆的节点都将始终包含数据内容。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将节点的子级保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于 CDATA 节点，该名称是 <see langword="#cdata-section" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于 CDATA 节点，本地名称是 <see langword="#cdata-section" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型。
    ///  对于 CDATA 节点，该值是 XmlNodeType.CDATA。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  节点的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点是只读的。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlCDataSection = class(TDNGenericImport<DNXmlCDataSectionClass, DNXmlCDataSection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCommentClass = interface(DNObjectClass)
  ['{BB4F609E-8620-50D3-BD93-A5228DAAD94E}']
  end;

  ///<summary>
  ///  表示 XML 注释的内容。
  ///</summary>
  [DNTypeName('System.Xml.XmlComment')]
  DNXmlComment = interface(DNObject)
  ['{CC1B4DB8-000C-375C-85B6-C4F457CA604C}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  因为注释节点不具有子级，克隆的节点始终包含文本内容，而不考虑参数设置。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///  因为注释节点不具有子级，此方法不起作用。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于注释节点，则这是 <see langword="#comment" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于注释节点，则这是 <see langword="#comment" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  对于注释节点的值是 XmlNodeType.Comment。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  节点的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点是只读的。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlComment = class(TDNGenericImport<DNXmlCommentClass, DNXmlComment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlSignificantWhitespaceClass = interface(DNObjectClass)
  ['{D3D69425-089C-5BEC-8B98-2869CBCD58BA}']
  end;

  ///<summary>
  ///  表示在混合内容节点中标记之间的空白或 xml:space= 'preserve' 范围内的空白。
  ///  这也称为有效空白。
  ///</summary>
  [DNTypeName('System.Xml.XmlSignificantWhitespace')]
  DNXmlSignificantWhitespace = interface(DNObject)
  ['{0B172DBB-0D28-360D-B6DA-C98B3EC1449A}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  对于重要的空白节点，克隆的节点将始终包含数据值，而不管参数的设置如何。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlSignificantWhitespace" />
    ///  节点，此属性返回 <see langword="#significant-whitespace" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlSignificantWhitespace" />
    ///  节点，此属性返回 <see langword="#significant-whitespace" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlSignificantWhitespace" />
    ///  节点，该值是 XmlNodeType.SignificantWhitespace。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取当前节点的父节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  当前节点的父节点。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  在节点中找到空白字符。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置 <see langword="Value" />
    ///  到无效空白字符。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlSignificantWhitespace = class(TDNGenericImport<DNXmlSignificantWhitespaceClass, DNXmlSignificantWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextClass = interface(DNObjectClass)
  ['{0651B7EA-6BE9-59ED-A83D-2E5F61F97A05}']
  end;

  ///<summary>
  ///  表示元素或属性的文本内容。
  ///</summary>
  [DNTypeName('System.Xml.XmlText')]
  DNXmlText = interface(DNObject)
  ['{C23B6FD2-1BB3-3560-8729-8F78B16B5B5C}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  在指定的偏移点将该节点拆分为两个节点，并使树中的这两个节点成为同级。
    ///</summary>
    ///  <param name="offset">
    ///  拆分节点的偏移点。
    ///</param>
    ///<returns>
    ///  新的节点。
    ///</returns>
    function SplitText(offset: Int32): DNXmlText;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///<see langword="XmlText" />
    ///  节点没有子级，因此此方法不起作用。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于文本节点，此属性返回 <see langword="#text" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于文本节点，此属性返回 <see langword="#text" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  对于文本节点，该值是 XmlNodeType.Text。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  文本节点的内容。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlText = class(TDNGenericImport<DNXmlTextClass, DNXmlText>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWhitespaceClass = interface(DNObjectClass)
  ['{2A70CCA8-A245-5913-A121-09B607B6A137}']
  end;

  ///<summary>
  ///  表示元素内容中的空白。
  ///</summary>
  [DNTypeName('System.Xml.XmlWhitespace')]
  DNXmlWhitespace = interface(DNObject)
  ['{7665AD2A-852F-30AD-8E7A-09633B25E173}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  对于空白节点，克隆的节点将始终包含数据值，而不管参数的设置如何。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlWhitespace" />
    ///  节点，此属性返回 <see langword="#whitespace" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlWhitespace" />
    ///  节点，此属性返回 <see langword="#whitespace" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取节点的类型。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlWhitespace" />
    ///  节点，则这是 <see cref="F:System.Xml.XmlNodeType.Whitespace" />
    ///  。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取当前节点的父节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  当前节点的父节点。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  在节点中找到空白字符。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置 <see cref="P:System.Xml.XmlWhitespace.Value" />
    ///  到无效空白字符。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlWhitespace = class(TDNGenericImport<DNXmlWhitespaceClass, DNXmlWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDeclarationClass = interface(DNObjectClass)
  ['{A6529FEA-8312-512A-987C-49BDDB60B87F}']
  end;

  ///<summary>
  ///  表示 XML 声明节点 &lt;?xml version='1.0'...?&gt;。
  ///</summary>
  [DNTypeName('System.Xml.XmlDeclaration')]
  DNXmlDeclaration = interface(DNObject)
  ['{E98CE747-E1FC-355C-8454-95C884B8FB04}']
  { getters & setters } 

    function get_Version: string;
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Standalone: string;
    procedure set_Standalone(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  因为 <see langword="XmlDeclaration" />
    ///  节点没有子级，克隆的节点始终包含数据值，而不考虑参数设置。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将节点的子级保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  因为 <see langword="XmlDeclaration" />
    ///  节点没有子级，此方法不起作用。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取文档的 XML 版本。
    ///</summary>
    ///<returns>
    ///  此值始终是 <see langword="1.0" />
    ///  。
    ///</returns>
    property Version: string read get_Version;
    ///<summary>
    ///  获取或设置 XML 文档的编码级别。
    ///</summary>
    ///<returns>
    ///  有效的字符编码名称。
    ///  最常受支持的字符集编码名称的 XML 如下所示︰
    ///  类别
    ///  编码名称
    ///  Unicode
    ///  UTF-8、 UTF-16
    ///  ISO 10646
    ///  ISO 10646-UCS 2，ISO 10646 UCS 4
    ///  ISO 8859
    ///  ISO 8859-n （其中"n"是从 1 到 9 的数字）
    ///  X JIS 0208 1997
    ///  ISO-2022年-JP，Shift_JIS，EUC-JP
    ///  此值为可选值。
    ///  如果未设置一个值，则此属性返回 String.Empty。
    ///  如果未包括出编码方式特性，则编写或保存文档时将假定为 utf-8 编码。
    ///</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>
    ///  获取或设置独立的属性的值。
    ///</summary>
    ///<returns>
    ///  有效值为 <see langword="yes" />
    ///  所需的 XML 文档的所有实体声明将都包含在文档或 <see langword="no" />
    ///  是否需要外部文档类型定义 (DTD)。
    ///  如果出独立特性不存在 XML 声明中，此属性返回 String.Empty。
    ///</returns>
    property Standalone: string read get_Standalone write set_Standalone;
    ///<summary>
    ///  获取或设置的值 <see langword="XmlDeclaration" />
    ///  。
    ///</summary>
    ///<returns>
    ///  内容 <see langword="XmlDeclaration" />
    ///  (即之间的所有内容 &lt;?xml 和 ?&gt;)。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置的串连的值 <see langword="XmlDeclaration" />
    ///  。
    ///</summary>
    ///<returns>
    ///  串联的值 <see langword="XmlDeclaration" />
    ///  (即之间的所有内容 &lt;?xml 和 ?&gt;)。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDeclaration" />
    ///  节点，名称是 <see langword="xml" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDeclaration" />
    ///  节点，本地名称是 <see langword="xml" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDeclaration" />
    ///  节点，此值是 XmlNodeType.XmlDeclaration。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  紧随该节点或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDeclaration = class(TDNGenericImport<DNXmlDeclarationClass, DNXmlDeclaration>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentTypeClass = interface(DNObjectClass)
  ['{BEC420DE-802C-5F38-95F7-CA44F66DB28E}']
  end;

  ///<summary>
  ///  表示文档类型声明。
  ///</summary>
  [DNTypeName('System.Xml.XmlDocumentType')]
  DNXmlDocumentType = interface(DNObject)
  ['{7AF5641A-36C3-3113-83DA-937C8D756FC0}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_InternalSubset: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  对于文档类型节点，克隆的节点始终包含的子树，而不考虑参数设置。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///  有关 <see langword="XmlDocumentType" />
    ///  节点，此方法不起作用。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于 DocumentType 节点，此属性返回的文档类型的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于 DocumentType 节点，此属性返回的文档类型的名称。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  对于 DocumentType 节点，此值是 XmlNodeType.DocumentType。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///  DocumentType 节点是只读的因为此属性始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取上 DOCTYPE 声明的公共标识符的值。
    ///</summary>
    ///<returns>
    ///  DOCTYPE 上的公共标识符。
    ///  如果没有公共标识符， <see langword="null" />
    ///  返回。
    ///</returns>
    property PublicId: string read get_PublicId;
    ///<summary>
    ///  获取上 DOCTYPE 声明的系统标识符的值。
    ///</summary>
    ///<returns>
    ///  DOCTYPE 上的系统标识符。
    ///  如果没有系统标识符， <see langword="null" />
    ///  返回。
    ///</returns>
    property SystemId: string read get_SystemId;
    ///<summary>
    ///  获取文档类型定义 (DTD) 内部子集中的值上的 DOCTYPE 声明。
    ///</summary>
    ///<returns>
    ///  DTD 内部子集上 DOCTYPE。
    ///  如果没有 DTD 内部子集，则返回 String.Empty。
    ///</returns>
    property InternalSubset: string read get_InternalSubset;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  紧随该节点或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentType = class(TDNGenericImport<DNXmlDocumentTypeClass, DNXmlDocumentType>) end;

  //-------------namespace: System.Xml----------------
  DNXmlElementClass = interface(DNObjectClass)
  ['{95FBF49A-C7B8-52DE-9824-77FC0B51F4A3}']
  end;

  ///<summary>
  ///  表示元素。
  ///</summary>
  [DNTypeName('System.Xml.XmlElement')]
  DNXmlElement = interface(DNObject)
  ['{4F4034C5-F0F2-3631-965C-95B3A6E74446}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_IsEmpty: Boolean;
    procedure set_IsEmpty(value: Boolean);
    function get_Attributes: DNXmlAttributeCollection;
    function get_HasAttributes: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NextSibling: DNXmlNode;
    function get_PreviousSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身（如果节点是 <see langword="XmlElement" />
    ///  ，还克隆其属性），则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  返回具有指定名称的属性的值。
    ///</summary>
    ///  <param name="name">
    ///  要检索的属性的名称。
    ///  这是限定名。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果未找到匹配属性，或者如果此属性没有指定值或默认值，则返回空字符串。
    ///</returns>
    function GetAttribute(name: string): string; overload;
    ///<summary>
    ///  设置具有指定名称的属性的值。
    ///</summary>
    ///  <param name="name">
    ///  要创建或更改的属性的名称。
    ///  这是限定名。
    ///  如果名称包含的冒号将它解析为前缀和本地名称组件。
    ///</param>
    ///  <param name="value">
    ///  要为该属性设置的值。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  指定的名称包含无效字符。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该节点是只读的。
    ///</exception>
    procedure SetAttribute(name: string; value: string); overload;
    ///<summary>
    ///  按名称删除特性。
    ///</summary>
    ///  <param name="name">
    ///  要删除的特性的名称。该名称限定名称。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该节点是只读的。
    ///</exception>
    procedure RemoveAttribute(name: string); overload;
    ///<summary>
    ///  返回具有指定名称的 <see langword="XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  要检索的属性的名称。
    ///  这是限定名。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///</param>
    ///<returns>
    ///  如果找到匹配的属性，则为指定的 <see langword="XmlAttribute" />
    ///  ；如果未找到，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetAttributeNode(name: string): DNXmlAttribute; overload;
    ///<summary>
    ///  添加指定 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="newAttr"><see langword="XmlAttribute" />
    ///  节点将添加到此元素的属性集合。
    ///</param>
    ///<returns>
    ///  如果特性将取代现有属性具有相同名称，旧 <see langword="XmlAttribute" />
    ///  返回; 否则为 <see langword="null" />
    ///  返回。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="newAttr" />
    ///  从创建此节点比不同文档创建。
    ///  或此节点是只读的。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="newAttr" />
    ///  已经是另一个属性 <see langword="XmlElement" />
    ///  对象。
    ///  您必须显式克隆 <see langword="XmlAttribute" />
    ///  节点重新使用它们在其他 <see langword="XmlElement" />
    ///  对象。
    ///</exception>
    function SetAttributeNode(newAttr: DNXmlAttribute): DNXmlAttribute; overload;
    ///<summary>
    ///  移除指定 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="oldAttr"><see langword="XmlAttribute" />
    ///  要移除的节点。
    ///  如果移除的属性具有默认值，则立即将其替换。
    ///</param>
    ///<returns>
    ///  移除 <see langword="XmlAttribute" />
    ///  或 <see langword="null" />
    ///  如果 <paramref name="oldAttr" />
    ///  不是属性节点的 <see langword="XmlElement" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception>
    function RemoveAttributeNode(oldAttr: DNXmlAttribute): DNXmlAttribute; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlNodeList" />
    ///  ，它包含与指定 <see cref="P:System.Xml.XmlElement.Name" />
    ///  匹配的所有子代元素的列表。
    ///</summary>
    ///  <param name="name">
    ///  要匹配的名称标记。
    ///  这是限定名。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///  星号 (*) 是匹配所有标记的特殊值。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  ，包含所有匹配节点的列表。
    ///  如果不存在任何匹配节点，则该列表为空。
    ///</returns>
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    ///<summary>
    ///  返回具有指定的本地名称和命名空间 URI 的属性的值。
    ///</summary>
    ///  <param name="localName">
    ///  要检索的属性本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 的属性检索。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果未找到匹配属性，或者如果此属性没有指定值或默认值，则返回空字符串。
    ///</returns>
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  设置具有指定的本地名称和命名空间 URI 的属性的值。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  要为该属性设置的值。
    ///</param>
    ///<returns>
    ///  特性值。
    ///</returns>
    function SetAttribute(localName: string; namespaceURI: string; value: string): string; overload;
    ///<summary>
    ///  删除具有指定的本地名称和命名空间 URI 的属性。
    ///  （如果删除的特性具有默认值时，则将立即替换它）。
    ///</summary>
    ///  <param name="localName">
    ///  要移除的属性本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 的属性中删除。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该节点是只读的。
    ///</exception>
    procedure RemoveAttribute(localName: string; namespaceURI: string); overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.XmlAttribute" />
    ///  具有指定的本地名称和命名空间 URI。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到匹配的属性，则为指定的 <see langword="XmlAttribute" />
    ///  ；如果未找到，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    ///<summary>
    ///  添加指定 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  要添加的 <see langword="XmlAttribute" />
    ///  。
    ///</returns>
    function SetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    ///<summary>
    ///  删除 <see cref="T:System.Xml.XmlAttribute" />
    ///  指定本地名称和命名空间 URI。
    ///  （如果删除的特性具有默认值时，则将立即替换它）。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  移除 <see langword="XmlAttribute" />
    ///  或 <see langword="null" />
    ///  如果 <see langword="XmlElement" />
    ///  没有匹配的属性节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception>
    function RemoveAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlNodeList" />
    ///  ，它包含与指定 <see cref="P:System.Xml.XmlElement.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlElement.NamespaceURI" />
    ///  匹配的所有子代元素的列表。
    ///</summary>
    ///  <param name="localName">
    ///  要匹配的本地名称。
    ///  星号 (*) 是匹配所有标记的特殊值。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 相匹配。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  ，包含所有匹配节点的列表。
    ///  如果不存在任何匹配节点，则该列表为空。
    ///</returns>
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    ///<summary>
    ///  确定当前节点是否具有带有指定名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  要查找的属性的名称。
    ///  这是限定名。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///</param>
    ///<returns>
    ///  如果当前节点具有指定的属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasAttribute(name: string): Boolean; overload;
    ///<summary>
    ///  确定当前节点是否具有指定的本地名称和命名空间 URI 的属性。
    ///</summary>
    ///  <param name="localName">
    ///  要查找的属性本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 的属性查找。
    ///</param>
    ///<returns>
    ///  如果当前节点具有指定的属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasAttribute(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  将当前节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从元素中删除具有指定索引的特性节点。
    ///  （如果删除的特性具有默认值时，则将立即替换它）。
    ///</summary>
    ///  <param name="i">
    ///  要删除的节点的索引。
    ///  第一个节点的索引为 0。
    ///</param>
    ///<returns>
    ///  已删除的特性节点；若给定索引处无节点则为 <see langword="null" />
    ///  。
    ///</returns>
    function RemoveAttributeAt(i: Int32): DNXmlNode;
    ///<summary>
    ///  从元素中删除所有指定的属性。
    ///  不删除默认属性。
    ///</summary>
    procedure RemoveAllAttributes;
    ///<summary>
    ///  删除当前节点的所有指定特性和子级。
    ///  不删除默认属性。
    ///</summary>
    procedure RemoveAll;
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  节点的限定名称。
    ///  对于 <see langword="XmlElement" />
    ///  节点，这是元素的标记名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取当前节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的当前节点的名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" />
    ///  是 book。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该节点是只读的
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  该节点的 namespaceURI 为 <see langword="null" />
    ///  。
    ///  指定的前缀为“xml”，而该节点的 namespaceURI 与 http://www.w3.org/XML/1998/namespace 不同。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型。
    ///  有关 <see langword="XmlElement" />
    ///  节点，此值是 XmlNodeType.Element。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此元素所属的 <see langword="XmlDocument" />
    ///  。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取或设置元素的标记格式。
    ///</summary>
    ///<returns>
    ///  如果元素将以标记短格式“&lt;item/&gt;”序列化，则返回 <see langword="true" />
    ///  ；对于长格式“&lt;item&gt;&lt;/item&gt;”，则为 <see langword="false" />
    ///  。
    ///  在设置此属性时，如果设置为 <see langword="true" />
    ///  ，将删除元素的子级，并且以短标记格式序列化该元素。
    ///  如果设置为 <see langword="false" />
    ///  ，将更改属性值（无论元素是否有内容）；如果该元素为空，则会采用长格式序列化。
    ///  此属性是文档对象模型 (DOM) 的 Microsoft 扩展。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty write set_IsEmpty;
    ///<summary>
    ///  获取包含此节点的属性列表的 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  包含此节点的属性列表的 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取一个 <see langword="boolean" />
    ///  值，该值指示当前节点是否有任何属性。
    ///</summary>
    ///<returns>
    ///  如果当前节点具有属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasAttributes: Boolean read get_HasAttributes;
    ///<summary>
    ///  获取作为架构验证的结果分配给此节点的后架构验证信息集。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含此节点的后架构验证信息集。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取或设置仅表示此节点的子级的标记。
    ///</summary>
    ///<returns>
    ///  此节点子级的标记。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  获取或设置节点及其所有子级的串连值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子级的串连值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlNode" />
    ///  紧接在此元素。
    ///</summary>
    ///<returns><see langword="XmlNode" />
    ///  紧接在此元素。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlElement = class(TDNGenericImport<DNXmlElementClass, DNXmlElement>) end;

  //-------------namespace: System.Xml----------------
  DNXmlEntityReferenceClass = interface(DNObjectClass)
  ['{90401A09-6381-574B-823A-E3F8F43DAFCD}']
  end;

  ///<summary>
  ///  表示实体引用节点。
  ///</summary>
  [DNTypeName('System.Xml.XmlEntityReference')]
  DNXmlEntityReference = interface(DNObject)
  ['{A49C5C6E-C1A3-30E6-AED4-6AB2D32BA301}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_BaseURI: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  有关 <see langword="XmlEntityReference" />
    ///  节点，此方法始终返回无子项的实体引用节点。
    ///  当将节点插入父级时，设置替换文本。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的名称。
    ///</summary>
    ///<returns>
    ///  引用的实体的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlEntityReference" />
    ///  节点，此属性返回引用的实体的名称。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  节点的值。
    ///  有关 <see langword="XmlEntityReference" />
    ///  节点，此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点是只读的。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  设置的属性。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型。
    ///  有关 <see langword="XmlEntityReference" />
    ///  节点，该值是 XmlNodeType.EntityReference。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///  因为 <see langword="XmlEntityReference" />
    ///  节点是只读的此属性始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取当前节点的基础统一资源标识符 (URI)。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  紧随该节点或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlEntityReference = class(TDNGenericImport<DNXmlEntityReferenceClass, DNXmlEntityReference>) end;

  //-------------namespace: System.Xml----------------
  DNXmlProcessingInstructionClass = interface(DNObjectClass)
  ['{A00F64E7-9C95-55E8-BE6E-9B41100EE844}']
  end;

  ///<summary>
  ///  表示一条处理指令，XML 定义该处理指令以将处理器特定的信息保存在文档的文本中。
  ///</summary>
  [DNTypeName('System.Xml.XmlProcessingInstruction')]
  DNXmlProcessingInstruction = interface(DNObject)
  ['{2550041F-0896-38C3-9876-092B4D27211E}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Target: string;
    function get_Data: string;
    procedure set_Data(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  重复节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///  因为 ProcessingInstruction 节点不具有子级，所以此方法无效。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于处理指令节点，此属性返回处理指令的目标。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于处理指令节点，此属性返回处理指令的目标。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  处理指令的全部内容（目标除外）。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点是只读的。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取处理指令的目标。
    ///</summary>
    ///<returns>
    ///  处理指令的目标。
    ///</returns>
    property Target: string read get_Target;
    ///<summary>
    ///  获取或设置处理指令的内容（目标除外）。
    ///</summary>
    ///<returns>
    ///  处理指令的内容（目标除外）。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取或设置节点及其所有子级的串连值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子级的串连值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlProcessingInstruction" />
    ///  节点，该值是 XmlNodeType.ProcessingInstruction。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  紧随该节点或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlProcessingInstruction = class(TDNGenericImport<DNXmlProcessingInstructionClass, DNXmlProcessingInstruction>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CD04361B-0A59-52B5-8AD4-CB82A6CB6425}']
  end;

  ///<summary>
  ///  表示节点的有序集合。
  ///</summary>
  [DNTypeName('System.Xml.XmlNodeList')]
  DNXmlNodeList = interface(DDN.mscorlib.DNObject)
  ['{A82A4A5B-6914-3CC4-B7C3-EBB1D009992C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ItemOf(i: Int32): DNXmlNode;

  { methods } 

    ///<summary>
    ///  检索给定索引处的节点。
    ///</summary>
    ///  <param name="index">
    ///  中的节点列表的从零开始索引。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  具有在集合中指定的索引。
    ///  如果 <paramref name="index" />
    ///  是大于或等于的节点数在列表中，这将返回 <see langword="null" />
    ///  。
    ///</returns>
    function Item(index: Int32): DNXmlNode;
    ///<summary>
    ///  获取循环的枚举器遍历节点集合。
    ///</summary>
    ///<returns>
    ///  一个用于循环访问节点的集合的枚举。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取中的节点数 <see langword="XmlNodeList" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中的节点数 <see langword="XmlNodeList" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
    property ItemOf[i: Int32]: DNXmlNode read get_ItemOf; default;
  end;

  TDNXmlNodeList = class(TDNGenericImport<DNXmlNodeListClass, DNXmlNodeList>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BED71FF4-9350-5FA7-AEB4-E4B0CBD7BE7A}']
  { static methods } 

    ///<summary>
    ///  返回一个值，该值指示字符串自变量是否是有效的 XML 名称。
    ///</summary>
    ///  <param name="str">
    ///  要验证的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该名称是否有效;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="str" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function IsName(str: string): Boolean;
    ///<summary>
    ///  返回一个值，该值指示该字符串自变量是否是有效的 XML 名称标记。
    ///</summary>
    ///  <param name="str">
    ///  要验证的名称标记。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果它是有效的名称的标记;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="str" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function IsNameToken(str: string): Boolean;
    ///<summary>
    ///  用指定的 URI 创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="inputUri">
    ///  包含 XML 数据的文件的 URI。
    ///<see cref="T:System.Xml.XmlUrlResolver" />
    ///  类用于将路径转换为规范化数据表示形式。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputUri" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.SecurityException"><see cref="T:System.Xml.XmlReader" />
    ///  没有足够的权限访问 XML 数据的位置。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  由 URI 标识的文件不存在。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />
    ///  。
    ///  URI 格式不正确。
    ///</exception>
    {class} function Create(inputUri: string): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的 URI 和设置创建新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="inputUri">
    ///  包含 XML 数据的文件的 URI。
    ///<see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象上的 <see cref="T:System.Xml.XmlResolver" />
    ///  对象用于将路径转换为规范化数据表示形式。
    ///  如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" />
    ///  为 <see langword="null" />
    ///  ，则使用新的 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  对象。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputUri" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  找不到 URI 指定的文件。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />
    ///  。
    ///  URI 格式不正确。
    ///</exception>
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings): DNXmlReader; overload;
    ///<summary>
    ///  使用带默认设置的指定流创建新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  包含 XML 数据的流。
    ///<see cref="T:System.Xml.XmlReader" />
    ///  对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
    ///  在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.SecurityException"><see cref="T:System.Xml.XmlReader" />
    ///  没有足够的权限访问 XML 数据的位置。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNStream): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的流和设置创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  包含 XML 数据的流。
    ///<see cref="T:System.Xml.XmlReader" />
    ///  对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
    ///  在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的流、基 URI 和设置创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  包含 XML 数据的流。
    ///<see cref="T:System.Xml.XmlReader" />
    ///  对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
    ///  在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="baseUri">
    ///  正在读取的实体或文档的基 URI。
    ///  此值可为 <see langword="null" />
    ///  。
    ///  “安全说明”   基 URI 用于解析 XML 文档的相对 URI。
    ///  不要使用来自非信任源的基 URI。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的文本读取器创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  从其中读取 XML 数据的文本读取器。
    ///  由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNTextReader): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的文本读取器和设置创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  从其中读取 XML 数据的文本读取器。
    ///  由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的文本读取器、设置和基 URI 创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  从其中读取 XML 数据的文本读取器。
    ///  由于文本读取器返回的是 Unicode 字符流，因此，<see cref="T:System.Xml.XmlReader" />
    ///  未使用 XML 声明中指定的编码对数据流进行解码。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="baseUri">
    ///  正在读取的实体或文档的基 URI。
    ///  此值可为 <see langword="null" />
    ///  。
    ///  “安全说明”   基 URI 用于解析 XML 文档的相对 URI。
    ///  不要使用来自非信任源的基 URI。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的 XML 读取器和设置创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="reader">
    ///  要用作基础 XML 编写器的对象。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///<see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象的一致性级别要么必须与基础读取器的一致性级别匹配，要么必须设置为 <see cref="F:System.Xml.ConformanceLevel.Auto" />
    ///  。
    ///</param>
    ///<returns>
    ///  在指定的 <see cref="T:System.Xml.XmlReader" />
    ///  对象周围包装的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  如果 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象指定的一致性级别与基础读取器一致性级别不一致。
    ///  - 或 -
    ///  基础 <see cref="T:System.Xml.XmlReader" />
    ///  处于 <see cref="F:System.Xml.ReadState.Error" />
    ///  或 <see cref="F:System.Xml.ReadState.Closed" />
    ///  状态。
    ///</exception>
    {class} function Create(reader: DNXmlReader; settings: DNXmlReaderSettings): DNXmlReader; overload;

  end;

  ///<summary>
  ///  表示提供对 XML 数据进行快速、非缓存、只进访问的读取器。
  ///  若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  ///</summary>
  [DNTypeName('System.Xml.XmlReader')]
  DNXmlReader = interface(DDN.mscorlib.DNObject)
  ['{E265CBE9-7445-3F96-8618-DA44B4ECEF45}']
  { getters & setters } 

    function get_Settings: DNXmlReaderSettings;
    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlLang: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_AttributeCount: Int32;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_EOF: Boolean;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_CanReadValueChunk: Boolean;
    function get_HasAttributes: Boolean;

  { methods } 

    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  作为最适当的公共语言运行时 (CLR) 对象的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see langword="Boolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsBoolean: Boolean;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDateTime: DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDateTimeOffset: DDN.mscorlib.DNDateTimeOffset;
    ///<summary>
    ///  将当前位置的文本内容作为双精度浮点数读取。
    ///</summary>
    ///<returns>
    ///  作为双精度浮点数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDouble: Double;
    ///<summary>
    ///  将当前位置的文本内容作为单精度浮点数读取。
    ///</summary>
    ///<returns>
    ///  作为单精度浮点数的当前位置的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsFloat: Single;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  作为将当前位置的文本内容 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDecimal: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  将当前位置的文本内容作为 32 位有符号整数读取。
    ///</summary>
    ///<returns>
    ///  作为 32 位有符号整数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsInt: Int32;
    ///<summary>
    ///  将当前位置的文本内容作为 64 位有符号整数读取。
    ///</summary>
    ///<returns>
    ///  作为 64 位有符号整数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsLong: Int64;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsString: string;
    ///<summary>
    ///  将内容作为指定类型的对象读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///  例如，将 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象转换为 xs:string 时可以使用此对象。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  已转换为请求类型的串联文本内容或属性值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  内容不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="returnType" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是受支持的节点类型。
    ///  请参阅下的表以了解详细信息。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为双精度浮点数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为双精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为单精度浮点数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为单精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为单精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Decimal" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 32 位有符号整数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为 32 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 32 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 64 位有符号整数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为 64 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 64 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.String" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后将元素内容作为请求类型读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  当在派生类中被重写时，移动到具有指定索引的属性。
    ///</summary>
    ///  <param name="i">
    ///  属性的索引。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  参数具有值为负。
    ///</exception>
    procedure MoveToAttribute(i: Int32); overload;
    ///<summary>
    ///  当在派生类中重写，将更改 <see cref="P:System.Xml.XmlReader.ReadState" />
    ///  到 <see cref="F:System.Xml.ReadState.Closed" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Close;
    ///<summary>
    ///  跳过当前节点的子级。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Skip;
    ///<summary>
    ///  读取嵌入在 XML 文档中的大量文本流。
    ///</summary>
    ///  <param name="buffer">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" />
    ///  可以开始将结果复制。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区中的最大字符数。
    ///  此方法返回复制的实际字符数。
    ///</param>
    ///<returns>
    ///  读取到缓冲区中的字符数。
    ///  如果不再有文本内容，则返回值零。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点不具有值 (<see cref="P:System.Xml.XmlReader.HasValue" />
    ///  是 <see langword="false" />
    ///  )。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  到缓冲区中的索引或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 数据格式不正确。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  当在派生类中被重写时，将元素或文本节点的内容当做字符串读取。
    ///  但是，我们建议你使用 <see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///<returns>
    ///  元素的内容或空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadString: string;
    ///<summary>
    ///  检查当前节点是否为内容 (非空白文本、 <see langword="CDATA" />
    ///  , ，<see langword="Element" />
    ///  , ，<see langword="EndElement" />
    ///  , ，<see langword="EntityReference" />
    ///  , ，或 <see langword="EndEntity" />
    ///  ) 节点。
    ///  如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
    ///  它跳过以下类型的节点：<see langword="ProcessingInstruction" />
    ///  、<see langword="DocumentType" />
    ///  、<see langword="Comment" />
    ///  、<see langword="Whitespace" />
    ///  或 <see langword="SignificantWhitespace" />
    ///  。
    ///</summary>
    ///<returns><see cref="P:System.Xml.XmlReader.NodeType" />
    ///  方法找到的当前节点或 <see langword="XmlNodeType.None" />
    ///  如果读取器已到达输入流的末尾。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToContent: DNXmlNodeType;
    ///<summary>
    ///  检查当前节点是否为元素并将读取器推进到下一个节点。
    ///</summary>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement; overload;
    ///<summary>
    ///  检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.Name" />
    ///  并将读取器推进到下一个节点。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///  - 或 -
    ///<see cref="P:System.Xml.XmlReader.Name" />
    ///  不匹配的元素的给定 <paramref name="name" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement(name: string); overload;
    ///<summary>
    ///  检查 <see cref="P:System.Xml.XmlReader.Name" />
    ///  属性找到的元素与给定的字符串匹配在读取纯文本元素之前。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///  <param name="name">
    ///  要检查的名称。
    ///</param>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="Name" />
    ///  与给定的参数; 不匹配，或者如果找到该元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString(name: string): string; overload;
    ///<summary>
    ///  检查当前内容节点是否为结束标记并将读取器推进到下一个节点。
    ///</summary>
    ///<exception cref="T:System.Xml.XmlException">
    ///  当前节点不是一个结束标记或输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadEndElement;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  找到开始标记还是空元素标记; <see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement: Boolean; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.Name" />
    ///  属性找到的元素与给定的参数匹配。
    ///</summary>
    ///  <param name="name">
    ///  匹配的字符串 <see langword="Name" />
    ///  找到的元素的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果生成的节点是元素与 <see langword="Name" />
    ///  属性与指定的字符串匹配。
    ///<see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找或者，如果该元素 <see langword="Name" />
    ///  属性与指定的字符串不匹配。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement(name: string): Boolean; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  属性找到的元素与给定的字符串匹配。
    ///</summary>
    ///  <param name="localname">
    ///  要匹配的字符串 <see langword="LocalName" />
    ///  找到的元素的属性。
    ///</param>
    ///  <param name="ns">
    ///  要匹配的字符串 <see langword="NamespaceURI" />
    ///  找到的元素的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果生成的节点是一个元素。
    ///<see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找或者，如果 <see langword="LocalName" />
    ///  和 <see langword="NamespaceURI" />
    ///  元素的属性与指定的字符串不匹配。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    ///<summary>
    ///  一直读取，直到找到具有指定限定名的元素。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的元素;否则为 <see langword="false" />
    ///  和 <see cref="T:System.Xml.XmlReader" />
    ///  处于的文件结束状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToFollowing(name: string): Boolean; overload;
    ///<summary>
    ///  一直读取，直到找到具有指定的本地名称和命名空间 URI 的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的元素;否则为 <see langword="false" />
    ///  和 <see cref="T:System.Xml.XmlReader" />
    ///  处于的文件结束状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  前移 <see cref="T:System.Xml.XmlReader" />
    ///  到下一个具有指定限定名的子代元素。
    ///</summary>
    ///  <param name="name">
    ///  要移动到的元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的子代元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的元素。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />
    ///  调用，此方法返回 <see langword="false" />
    ///  和位置的 <see cref="T:System.Xml.XmlReader" />
    ///  未发生更改时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToDescendant(name: string): Boolean; overload;
    ///<summary>
    ///  前移 <see cref="T:System.Xml.XmlReader" />
    ///  到下一个具有指定的本地名称和命名空间 URI 的子代元素。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要移动到的元素的命名空间 URI。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的子代元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的元素。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />
    ///  调用，此方法返回 <see langword="false" />
    ///  和位置的 <see cref="T:System.Xml.XmlReader" />
    ///  未发生更改时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  前移 <see langword="XmlReader" />
    ///  到下一个具有指定限定名的同级元素。
    ///</summary>
    ///  <param name="name">
    ///  要移动到的同级元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的同级元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的同级元素， <see langword="XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的父元素。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToNextSibling(name: string): Boolean; overload;
    ///<summary>
    ///  将 <see langword="XmlReader" />
    ///  推进到具有指定的本地名称和命名空间 URI 的下一个同级元素。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的同级元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  你希望移动到的同级元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到匹配的同级元素，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果没有找到匹配的同级元素，<see langword="XmlReader" />
    ///  会定位在父元素的结束标记（<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  为 <see langword="XmlNodeType.EndElement" />
    ///  ）上。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  两个参数值均为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  当在派生类中被重写时，将所有内容（包括标记）当做字符串读取。
    ///</summary>
    ///<returns>
    ///  当前节点中的所有 XML 内容（包括标记）。
    ///  如果当前节点没有任何子级，则返回空字符串。
    ///  如果当前节点既非元素，也非属性，则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 不正确，或者分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadInnerXml: string;
    ///<summary>
    ///  当在派生类中被重写时，读取表示该节点和所有它的子级的内容（包括标记）。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 不正确，或者分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadOuterXml: string;
    ///<summary>
    ///  返回一个新 <see langword="XmlReader" />
    ///  能用于读取当前节点及其所有子代的实例。
    ///</summary>
    ///<returns>
    ///  新的 XML 读取器实例设置为 <see cref="F:System.Xml.ReadState.Initial" />
    ///  。
    ///  调用 <see cref="M:System.Xml.XmlReader.Read" />
    ///  方法将新的读取器定位在调用之前的当前节点上 <see cref="M:System.Xml.XmlReader.ReadSubtree" />
    ///  方法。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用此方法时，XML 读取器未定位在元素上。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadSubtree: DNXmlReader;
    ///<summary>
    ///  释放 <see cref="T:System.Xml.XmlReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Dispose;
    ///<summary>
    ///  异步跳过当前节点的子级。
    ///</summary>
    ///<returns>
    ///  当前节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function SkipAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能为请求的类型转换的元素内容
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsObject: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBoolean: Boolean; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDateTime: DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  读取当前元素并将内容作为双精度浮点数返回。
    ///</summary>
    ///<returns>
    ///  作为双精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为双精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDouble: Double; overload;
    ///<summary>
    ///  读取当前元素并将内容作为单精度浮点数返回。
    ///</summary>
    ///<returns>
    ///  作为单精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为单精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsFloat: Single; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Decimal" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDecimal: DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  读取当前元素并将内容作为 32 位有符号整数返回。
    ///</summary>
    ///<returns>
    ///  作为 32 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 32 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsInt: Int32; overload;
    ///<summary>
    ///  读取当前元素并将内容作为 64 位有符号整数返回。
    ///</summary>
    ///<returns>
    ///  作为 64 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 64 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsLong: Int64; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.String" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsString: string; overload;
    ///<summary>
    ///  将元素内容作为请求类型读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  当在派生类中重写时获取具有指定属性的值 <see cref="P:System.Xml.XmlReader.Name" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果找不到属性或值为 <see langword="String.Empty" />
    ///  , ，<see langword="null" />
    ///  返回。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function GetAttribute(name: string): string; overload;
    ///<summary>
    ///  当在派生类中重写时获取具有指定属性的值 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果找不到属性或值为 <see langword="String.Empty" />
    ///  , ，<see langword="null" />
    ///  返回。
    ///  此方法不移动读取器。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function GetAttribute(name: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  当在派生类中被重写时，获取具有指定索引的属性的值。
    ///</summary>
    ///  <param name="i">
    ///  属性的索引。
    ///  索引是从零开始的。
    ///  （第一个属性的索引为 0。）
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  此方法不移动读取器。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i" />
    ///  超出范围。
    ///  它必须是非负数且小于属性集合的大小。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function GetAttribute(i: Int32): string; overload;
    ///<summary>
    ///  当在派生类中重写，将移动到具有指定的属性 <see cref="P:System.Xml.XmlReader.Name" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///</param>
    ///<returns>
    ///  如果找到了属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则读取器的位置未改变。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function MoveToAttribute(name: string): Boolean; overload;
    ///<summary>
    ///  当在派生类中重写，将移动到具有指定的属性 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到了属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则读取器的位置未改变。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function MoveToAttribute(name: string; ns: string): Boolean; overload;
    ///<summary>
    ///  当在派生类中被重写时，移动到第一个属性。
    ///</summary>
    ///<returns>
    ///  如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  （读取器的位置不更改）。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToFirstAttribute: Boolean;
    ///<summary>
    ///  当在派生类中被重写时，移动到下一个属性。
    ///</summary>
    ///<returns>
    ///  如果存在下一个属性，则为 <see langword="true" />
    ///  ；如果没有其他属性，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToNextAttribute: Boolean;
    ///<summary>
    ///  当在派生类中被重写时，移动到包含当前属性节点的元素。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />
    ///  ；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToElement: Boolean;
    ///<summary>
    ///  当在派生类中重写，将属性值分析为一个或多个 <see langword="Text" />
    ///  , ，<see langword="EntityReference" />
    ///  , ，或 <see langword="EndEntity" />
    ///  节点。
    ///</summary>
    ///<returns>
    ///  如果有可返回的节点，则为 <see langword="true" />
    ///  。
    ///  如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />
    ///  。
    ///  如果是空属性（如 misc=""），则返回 <see langword="true" />
    ///  ，同时返回值为 <see langword="String.Empty" />
    ///  的单个节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadAttributeValue: Boolean;
    ///<summary>
    ///  当在派生类中被重写时，从流中读取下一个节点。
    ///</summary>
    ///<returns>
    ///  如果已成功读取下一节点，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception>
    function Read: Boolean;
    ///<summary>
    ///  当在派生类中被重写时，在当前元素的范围内解析命名空间前缀。
    ///</summary>
    ///  <param name="prefix">
    ///  要解析其命名空间 URI 的前缀。
    ///  若要匹配默认命名空间，请传递一个空字符串。
    ///</param>
    ///<returns>
    ///  前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  当在派生类中重写时解析的实体引用 <see langword="EntityReference" />
    ///  节点。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  读取器未定位在 <see langword="EntityReference" />
    ///  节点; 此读取器的实现无法解析实体 (<see cref="P:System.Xml.XmlReader.CanResolveEntity" />
    ///  返回 <see langword="false" />
    ///  )。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ResolveEntity;
    ///<summary>
    ///  读取内容并返回 Base64 解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
    ///  不支持的当前节点上。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取元素并对 <see langword="Base64" />
    ///  内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是元素节点。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  该元素包含混合内容。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法将内容转换为请求的类型。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取内容并返回 <see langword="BinHex" />
    ///  解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
    ///  不支持的当前节点上。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取元素并对 <see langword="BinHex" />
    ///  内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是元素节点。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  该元素包含混合内容。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法将内容转换为请求的类型。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  并将读取器推进到下一个节点。
    ///</summary>
    ///  <param name="localname">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///  - 或 -
    ///<see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  属性找到的元素与给定的参数不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement(localname: string; ns: string); overload;
    ///<summary>
    ///  读取纯文本元素。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  不是开始标记; 下一个内容节点。或找到的元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString: string; overload;
    ///<summary>
    ///  检查 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  找到与给定的字符串匹配在读取纯文本元素之前的元素的属性。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///  <param name="localname">
    ///  要检查的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  要检查的命名空间 URI。
    ///</param>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="LocalName" />
    ///  或 <see langword="NamespaceURI" />
    ///  不匹配给定的参数; 或者如果找到该元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString(localname: string; ns: string): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取用于创建此 <see cref="T:System.Xml.XmlReader" />
    ///  实例的 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象，用于创建此读取器实例。
    ///  如果此读取器不使用创建 <see cref="Overload:System.Xml.XmlReader.Create" />
    ///  方法，则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Settings: DNXmlReaderSettings read get_Settings;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  指定当前节点的类型的枚举值之一。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的限定名。
    ///</summary>
    ///<returns>
    ///  当前节点的限定名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="Name" />
    ///  为 <see langword="bk:book" />
    ///  。
    ///  返回的名称取决于节点的 <see cref="P:System.Xml.XmlReader.NodeType" />
    ///  。
    ///  下列节点类型返回所列的值。
    ///  所有其他节点类型返回空字符串。
    ///  节点类型
    ///  名称
    ///<see langword="Attribute" />
    ///  属性名。
    ///<see langword="DocumentType" />
    ///  文档类型名称。
    ///<see langword="Element" />
    ///  标记名称。
    ///<see langword="EntityReference" />
    ///  引用的实体的名称。
    ///<see langword="ProcessingInstruction" />
    ///  处理指令的目标。
    ///<see langword="XmlDeclaration" />
    ///  文字字符串 <see langword="xml" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Name: string read get_Name;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的当前节点的名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" />
    ///  为 <see langword="book" />
    ///  。
    ///  对于没有名称的节点类型（如 <see langword="Text" />
    ///  、<see langword="Comment" />
    ///  等），该属性返回 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  当在派生类中被重写时，获取读取器定位在其上的节点的命名空间 URI（采用 W3C 命名空间规范中定义的形式）。
    ///</summary>
    ///<returns>
    ///  当前节点的命名空间 URI；否则为空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  当在派生类中被重写时，获取与当前节点关联的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  与当前节点关联的命名空间前缀。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Prefix: string read get_Prefix;
    ///<summary>
    ///  当在派生类中重写，获取一个值，该值指示当前节点是否可以具有 <see cref="P:System.Xml.XmlReader.Value" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果读取器当前定位在的节点可以具有 <see langword="Value" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  , ，该节点具有值为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property HasValue: Boolean read get_HasValue;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的文本值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于节点的 <see cref="P:System.Xml.XmlReader.NodeType" />
    ///  。
    ///  下表列出具有要返回的值的节点类型。
    ///  所有其他节点类型返回 <see langword="String.Empty" />
    ///  。
    ///  节点类型
    ///  值
    ///<see langword="Attribute" />
    ///  属性的值。
    ///<see langword="CDATA" />
    ///  CDATA 节的内容。
    ///<see langword="Comment" />
    ///  注释的内容。
    ///<see langword="DocumentType" />
    ///  内部子集。
    ///<see langword="ProcessingInstruction" />
    ///  全部内容（不包括指令目标）。
    ///<see langword="SignificantWhitespace" />
    ///  混合内容模型中标记之间的空白区域。
    ///<see langword="Text" />
    ///  文本节点的内容。
    ///<see langword="Whitespace" />
    ///  标记之间的空白。
    ///<see langword="XmlDeclaration" />
    ///  声明的内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Value: string read get_Value;
    ///<summary>
    ///  当在派生类中被重写时，获取 XML 文档中当前节点的深度。
    ///</summary>
    ///<returns>
    ///  XML 文档中当前节点的深度。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  当前节点的基 URI。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  当在派生类中重写，获取一个值，该值指示当前节点是否为空元素 (例如， &lt;MyElement/&gt;)。
    ///</summary>
    ///<returns>
    ///  如果当前节点是一个以 /&gt; 结尾的元素（<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  等于 <see langword="XmlNodeType.Element" />
    ///  ），则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    ///<summary>
    ///  当在派生类中被重写时，获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的特性。
    ///</summary>
    ///<returns>
    ///  如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 <see langword="true" />
    ///  ；如果属性值为显式设置的，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property IsDefault: Boolean read get_IsDefault;
    ///<summary>
    ///  当在派生类中被重写时，获取用于括住特性节点值的引号字符。
    ///</summary>
    ///<returns>
    ///  用于括起属性节点的值的引号字符（" 或 '）。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property QuoteChar: Char read get_QuoteChar;
    ///<summary>
    ///  当在派生类中重写，获取当前 <see langword="xml:lang" />
    ///  作用域。
    ///</summary>
    ///<returns>
    ///  当前 <see langword="xml:lang" />
    ///  范围。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property XmlLang: string read get_XmlLang;
    ///<summary>
    ///  获取作为架构验证结果分配给当前节点的架构信息。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，它包含当前节点的架构信息。
    ///  架构信息可以对元素、 属性或具有非空文本节点上设置 <see cref="P:System.Xml.XmlReader.ValueType" />
    ///  （类型化值）。
    ///  如果当前节点不属于上述节点类型，或者如果 <see langword="XmlReader" />
    ///  实例不会报告架构信息，则此属性返回 <see langword="null" />
    ///  。
    ///  如果是通过调用此属性 <see cref="T:System.Xml.XmlTextReader" />
    ///  或 <see cref="T:System.Xml.XmlValidatingReader" />
    ///  对象，则此属性始终返回 <see langword="null" />
    ///  。
    ///  这些 <see langword="XmlReader" />
    ///  实现不公开架构信息通过 <see langword="SchemaInfo" />
    ///  属性。
    ///  如果必须为某个元素获取架构验证后信息集 (PSVI)，请在此元素的结束标记处（而不是在开始标记处）放置读取器。
    ///  获取 PSVI <see langword="SchemaInfo" />
    ///  读取器的属性。
    ///  通过创建的验证读取器 <see cref="Overload:System.Xml.XmlReader.Create" />
    ///  与 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" />
    ///  属性设置为 <see cref="F:System.Xml.ValidationType.Schema" />
    ///  具有完整的 PSVI 的元素仅在读取器定位在元素的结束标记上时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的公共语言运行时 (CLR) 类型。
    ///</summary>
    ///<returns>
    ///  与节点的类型化值对应的 CLR 类型。
    ///  默认值为 <see langword="System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点上的属性数。
    ///</summary>
    ///<returns>
    ///  当前节点上的属性数目。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property AttributeCount: Int32 read get_AttributeCount;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    ///<summary>
    ///  当在派生类中被重写时，获取一个值，该值指示此读取器是否定位在流的结尾。
    ///</summary>
    ///<returns>
    ///  如果此读取器定位在流的结尾，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property EOF: Boolean read get_EOF;
    ///<summary>
    ///  当在派生类中重写时获取 <see cref="T:System.Xml.XmlNameTable" />
    ///  与此实现关联。
    ///</summary>
    ///<returns><see langword="XmlNameTable" />
    ///  ，它使你能够获取该节点内字符串的原子化版本。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取一个值，该值指示此读取器是否可以分析和解析实体。
    ///</summary>
    ///<returns>
    ///  如果此读取器可以分析和解析实体，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XmlReader" />
    ///  是否实现二进制内容读取方法。
    ///</summary>
    ///<returns>
    ///  如果实现了二进制内容读取方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XmlReader" />
    ///  是否实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
    ///  方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否有任何属性。
    ///</summary>
    ///<returns>
    ///  如果当前节点具有属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlReader = class(TDNGenericImport<DNXmlReaderClass, DNXmlReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{333069D0-1337-5A1D-988D-3D92D51A0162}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlReaderSettings; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="resolver">
    ///  XML 解析器。
    ///</param>
    {class} function init(resolver: DNXmlResolver): DNXmlReaderSettings; overload;

  { static propertys } 

    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  用来访问外部文档。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  用来访问外部文档。
    ///  如果设置为 <see langword="null" />
    ///  , 、 <see cref="T:System.Xml.XmlException" />
    ///  时，将引发 <see cref="T:System.Xml.XmlReader" />
    ///  尝试访问外部资源。
    ///  默认值是一种新 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  没有凭据。
    ///  从.NET Framework 4.5.2 开始，此设置具有默认值为 <see langword="null" />
    ///  。
    ///</returns>
    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  ///<summary>
  ///  指定的功能以支持上的一组 <see cref="T:System.Xml.XmlReader" />
  ///  创建的对象 <see cref="Overload:System.Xml.XmlReader.Create" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Xml.XmlReaderSettings')]
  DNXmlReaderSettings = interface(DDN.mscorlib.DNObject)
  ['{A34E9932-0279-3945-87FC-037F0B86F4F9}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_LineNumberOffset: Int32;
    procedure set_LineNumberOffset(value: Int32);
    function get_LinePositionOffset: Int32;
    procedure set_LinePositionOffset(value: Int32);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_MaxCharactersInDocument: Int64;
    procedure set_MaxCharactersInDocument(value: Int64);
    function get_MaxCharactersFromEntities: Int64;
    procedure set_MaxCharactersFromEntities(value: Int64);
    function get_IgnoreWhitespace: Boolean;
    procedure set_IgnoreWhitespace(value: Boolean);
    function get_IgnoreProcessingInstructions: Boolean;
    procedure set_IgnoreProcessingInstructions(value: Boolean);
    function get_IgnoreComments: Boolean;
    procedure set_IgnoreComments(value: Boolean);
    function get_ProhibitDtd: Boolean;
    procedure set_ProhibitDtd(value: Boolean);
    function get_DtdProcessing: DNDtdProcessing;
    procedure set_DtdProcessing(value: DNDtdProcessing);
    function get_CloseInput: Boolean;
    procedure set_CloseInput(value: Boolean);
    function get_ValidationType: DNValidationType;
    procedure set_ValidationType(value: DNValidationType);
    function get_ValidationFlags: DNXmlSchemaValidationFlags;
    procedure set_ValidationFlags(value: DNXmlSchemaValidationFlags);
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  实例的副本。
    ///</summary>
    ///<returns>
    ///  克隆 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象。
    ///</returns>
    function Clone: DNXmlReaderSettings;
    ///<summary>
    ///  将设置类的成员重置为各自的默认值。
    ///</summary>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置是否异步 <see cref="T:System.Xml.XmlReader" />
    ///  方法可对特定 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果可以使用异步方法，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Async: Boolean read get_Async write set_Async;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.XmlNameTable" />
    ///  用于原子化的字符串比较。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNameTable" />
    ///  用于存储所有使用的所有原子化的字符串 <see cref="T:System.Xml.XmlReader" />
    ///  创建使用此实例 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象。
    ///  默认值为 <see langword="null" />
    ///  。
    ///  创建 <see cref="T:System.Xml.XmlReader" />
    ///  实例将使用新的空 <see cref="T:System.Xml.NameTable" />
    ///  如果此值是 <see langword="null" />
    ///  。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  用来访问外部文档。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  用来访问外部文档。
    ///  如果设置为 <see langword="null" />
    ///  , 、 <see cref="T:System.Xml.XmlException" />
    ///  时，将引发 <see cref="T:System.Xml.XmlReader" />
    ///  尝试访问外部资源。
    ///  默认值是一种新 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  没有凭据。
    ///  从.NET Framework 4.5.2 开始，此设置具有默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  获取或设置行号偏移量的 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  行号偏移量。
    ///  默认值为 0。
    ///</returns>
    property LineNumberOffset: Int32 read get_LineNumberOffset write set_LineNumberOffset;
    ///<summary>
    ///  获取或设置的行位置偏移量 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  行位置偏移量。
    ///  默认值为 0。
    ///</returns>
    property LinePositionOffset: Int32 read get_LinePositionOffset write set_LinePositionOffset;
    ///<summary>
    ///  获取或设置的一致性级别的 <see cref="T:System.Xml.XmlReader" />
    ///  将遵循。
    ///</summary>
    ///<returns>
    ///  指定一致性级别（XML 读取器将强制该级别）的枚举值之一。
    ///  默认值为 <see cref="F:System.Xml.ConformanceLevel.Document" />
    ///  。
    ///</returns>
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    ///<summary>
    ///  获取或设置一个值，该值指示是否进行字符检查。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要进行字符检查;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  是处理文本数据时，将始终检查 XML 名称和文本内容是否有效，而不考虑属性设置。
    ///  设置 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" />
    ///  到 <see langword="false" />
    ///  关闭字符检查的字符实体引用。
    ///</returns>
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    ///<summary>
    ///  获取或设置一个值，该值指明 XML 文档中所允许的最大字符数。
    ///  零 (0) 值表示对 XML 文档的大小没有限制。
    ///  非零值指定最大大小（以字符数计）。
    ///</summary>
    ///<returns>
    ///  XML 文档中所允许的最大字符数。
    ///  默认值为 0。
    ///</returns>
    property MaxCharactersInDocument: Int64 read get_MaxCharactersInDocument write set_MaxCharactersInDocument;
    ///<summary>
    ///  获取或设置一个值，该值指示文档中允许扩展实体产生的最大字符数。
    ///</summary>
    ///<returns>
    ///  扩展实体中允许的最大字符数。
    ///  默认值为 0。
    ///</returns>
    property MaxCharactersFromEntities: Int64 read get_MaxCharactersFromEntities write set_MaxCharactersFromEntities;
    ///<summary>
    ///  获取或设置一个值，该值指示是否忽略无关紧要的空白区域。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要忽略空白;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreWhitespace: Boolean read get_IgnoreWhitespace write set_IgnoreWhitespace;
    ///<summary>
    ///  获取或设置一个值，该值指示是否忽略处理指令。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要忽略处理指令，则否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreProcessingInstructions: Boolean read get_IgnoreProcessingInstructions write set_IgnoreProcessingInstructions;
    ///<summary>
    ///  获取或设置一个值，该值指示是否忽略注释。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要忽略注释;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreComments: Boolean read get_IgnoreComments write set_IgnoreComments;
    ///<summary>
    ///  获取或设置一个值，该值指示是否禁用文档类型定义 (DTD) 处理。
    ///  此属性已过时。
    ///  请改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要禁用 DTD 处理。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property ProhibitDtd: Boolean read get_ProhibitDtd write set_ProhibitDtd;
    ///<summary>
    ///  获取或设置确定 DTD 的处理的值。
    ///</summary>
    ///<returns>
    ///  确定 DTD 的处理的枚举值之一。
    ///  默认值为 <see cref="F:System.Xml.DtdProcessing.Prohibit" />
    ///  。
    ///</returns>
    property DtdProcessing: DNDtdProcessing read get_DtdProcessing write set_DtdProcessing;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在基础流或 <see cref="T:System.IO.TextReader" />
    ///  时读取器关闭时被关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要关闭基础流或 <see cref="T:System.IO.TextReader" />
    ///  时读取器已关闭，否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property CloseInput: Boolean read get_CloseInput write set_CloseInput;
    ///<summary>
    ///  获取或设置一个值，该值指示是否<see cref="T:System.Xml.XmlReader" />
    ///  将执行验证或读取时键入分配。
    ///</summary>
    ///<returns>
    ///  之一<see cref="T:System.Xml.ValidationType" />
    ///  值，该值指示是否将执行验证或读取时键入分配 XmlReader。
    ///  默认值为 <see langword="ValidationType.None" />
    ///  。
    ///</returns>
    property ValidationType: DNValidationType read get_ValidationType write set_ValidationType;
    ///<summary>
    ///  获取或设置一个指示架构验证设置的值。
    ///  此设置适用于<see cref="T:System.Xml.XmlReader" />
    ///  验证架构的对象 (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" />
    ///  属性设置为<see langword="ValidationType.Schema" />
    ///  )。
    ///</summary>
    ///<returns>
    ///  指定验证选项的枚举值的按位组合。
    ///<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" />
    ///  和<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" />
    ///  默认启用。
    ///<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />
    ///<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" />
    ///  ，和<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" />
    ///  默认处于禁用状态。
    ///</returns>
    property ValidationFlags: DNXmlSchemaValidationFlags read get_ValidationFlags write set_ValidationFlags;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  在执行架构验证时使用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  在执行架构验证时使用。
    ///  默认值为空 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象。
    ///</returns>
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
  end;

  TDNXmlReaderSettings = class(TDNGenericImport<DNXmlReaderSettingsClass, DNXmlReaderSettings>) end;

  //-------------namespace: System.Xml----------------
  DNXmlResolverClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDE29340-6461-5FEC-9331-2E67780C1D99}']
  { static getter & setter } 

    procedure set_Credentials(value: DNICredentials);

  { static propertys } 

    ///<summary>
    ///  当在派生类中被重写时，设置用于对 Web 请求进行身份验证的凭据。
    ///</summary>
    ///<returns>
    ///  用于对 Web 请求进行身份验证的凭据。
    ///  如果未设置该属性，则该值默认为 <see langword="null" />
    ///  ；即 <see langword="XmlResolver" />
    ///  没有用户凭据。
    ///</returns>
    {class} property Credentials: DNICredentials write set_Credentials;
  end;

  ///<summary>
  ///  解析由统一资源标识符 (URI) 命名的外部 XML 资源。
  ///</summary>
  [DNTypeName('System.Xml.XmlResolver')]
  DNXmlResolver = interface(DDN.mscorlib.DNObject)
  ['{F2DEB691-8A4B-36EE-9262-ED43949B7CC1}']
  { getters & setters } 

    procedure set_Credentials(value: DNICredentials);

  { methods } 

    ///<summary>
    ///  当在派生类中被重写时，从基 URI 和相对 URI 解析绝对 URI。
    ///</summary>
    ///  <param name="baseUri">
    ///  用于解析相对 URI 的基 URI。
    ///</param>
    ///  <param name="relativeUri">
    ///  要解析的 URI。
    ///  URI 可以是绝对的或相对的。
    ///  如果是绝对的，此值有效地替换 <paramref name="baseUri" />
    ///  值。
    ///  如果是相对的，它与 <paramref name="baseUri" />
    ///  组合以构成绝对 URI。
    ///</param>
    ///<returns>
    ///  绝对 URI 或 <see langword="null" />
    ///  如果能解析相对 URI。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="relativeUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveUri(baseUri: DNUri; relativeUri: string): DNUri;
    ///<summary>
    ///  使之外的返回类型的解析程序 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  URI。
    ///</param>
    ///  <param name="type">
    ///  要返回的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="type" />
    ///  受支持; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function SupportsType(absoluteUri: DNUri; &type: DDN.mscorlib.DNType): Boolean;
    ///<summary>
    ///  当在派生类中被重写时，将 URI 映射到包含实际资源的对象。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当前未使用。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///  当前版本只返回 System.IO.Stream 对象。
    ///</param>
    ///<returns>
    ///  流对象；如果指定了流以外的类型，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="ofObjectToReturn" />
    ///  不是 <see langword="Stream" />
    ///  类型。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  指定的 URI 不是一个绝对 URI。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="absoluteUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  没有运行时错误 （例如，中断的服务器连接）。
    ///</exception>
    function GetEntity(absoluteUri: DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中被重写时，设置用于对 Web 请求进行身份验证的凭据。
    ///</summary>
    ///<returns>
    ///  用于对 Web 请求进行身份验证的凭据。
    ///  如果未设置该属性，则该值默认为 <see langword="null" />
    ///  ；即 <see langword="XmlResolver" />
    ///  没有用户凭据。
    ///</returns>
    property Credentials: DNICredentials write set_Credentials;
  end;

  TDNXmlResolver = class(TDNGenericImport<DNXmlResolverClass, DNXmlResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{387BD4BD-B278-52F4-B752-3F6A5A361BA4}']
  { static methods } 

    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定的文件名。
    ///</summary>
    ///  <param name="outputFileName">
    ///  要对其写入的文件。
    ///<see cref="T:System.Xml.XmlWriter" />
    ///  在指定的路径创建文件并向其写入 XML 1.0 文本语法中。
    ///  <paramref name="outputFileName" />
    ///  必须为文件系统路径。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(outputFileName: string): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定的流。
    ///</summary>
    ///  <param name="output">
    ///  要对其写入的流。
    ///<see cref="T:System.Xml.XmlWriter" />
    ///  写入 XML 1.0 文本语法并将其附加到指定的流。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DDN.mscorlib.DNStream): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="output"><see cref="T:System.IO.TextWriter" />
    ///  到想要编写。
    ///<see cref="T:System.Xml.XmlWriter" />
    ///  写入 XML 1.0 文本语法并将其附加到指定 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="text" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DDN.mscorlib.DNTextWriter): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定 <see cref="T:System.Text.StringBuilder" />
    ///  。
    ///</summary>
    ///  <param name="output"><see cref="T:System.Text.StringBuilder" />
    ///  要向其写入到。
    ///  通过写入的内容 <see cref="T:System.Xml.XmlWriter" />
    ///  追加到 <see cref="T:System.Text.StringBuilder" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="builder" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DDN.mscorlib.DNStringBuilder): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</summary>
    ///  <param name="output"><see cref="T:System.Xml.XmlWriter" />
    ///  你想要用作基础编写器的对象。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象封装指定 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="writer" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DNXmlWriter): DNXmlWriter; overload;

  end;

  ///<summary>
  ///  表示一个写入器，该写入器提供一种快速、非缓存和只进方式以生成包含 XML 数据的流或文件。
  ///</summary>
  [DNTypeName('System.Xml.XmlWriter')]
  DNXmlWriter = interface(DDN.mscorlib.DNObject)
  ['{DEE5DBC9-DE85-3F72-8CA7-9B3A0951D0DB}']
  { getters & setters } 

    function get_XmlLang: string;

  { methods } 

    ///<summary>
    ///  当在派生类中被重写时，写入指定的开始标记并将其与给定的命名空间关联起来。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///  如果此命名空间已在范围中并具有关联的前缀，则写入器也将自动写入该前缀。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartElement(localName: string; ns: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定的本地名称的开始标记。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartElement(localName: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写入具有指定的本地名称、命名空间 URI 和值的属性。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与属性关联的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器的状态不是 <see langword="WriteState.Element" />
    ///  或编写器已关闭。
    ///</exception><exception cref="T:System.ArgumentException"><see langword="xml:space" />
    ///  或 <see langword="xml:lang" />
    ///  属性值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定的本地名称和值的属性。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器的状态不是 <see langword="WriteState.Element" />
    ///  或编写器已关闭。
    ///</exception><exception cref="T:System.ArgumentException"><see langword="xml:space" />
    ///  或 <see langword="xml:lang" />
    ///  属性值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributeString(localName: string; value: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定的前缀、本地名称、命名空间 URI 和值的属性。
    ///</summary>
    ///  <param name="prefix">
    ///  属性的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器的状态不是 <see langword="WriteState.Element" />
    ///  或编写器已关闭。
    ///</exception><exception cref="T:System.ArgumentException"><see langword="xml:space" />
    ///  或 <see langword="xml:lang" />
    ///  属性值无效。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="localName" />
    ///  或 <paramref name="ns" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  写入具有指定本地名称和命名空间 URI 的属性的开头。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    ///<summary>
    ///  写入具有指定本地名称的属性的开头。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartAttribute(localName: string); overload;
    ///<summary>
    ///  当在派生类中重写，将编码为指定的二进制字节 <see langword="BinHex" />
    ///  并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭或处于错误状态。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///  - 或 -
    ///  缓冲区长度减去 <paramref name="index" />
    ///  小于 <paramref name="count" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    ///<summary>
    ///  当在派生类中被重写时，将关闭此流和基础流。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用了来编写后的其他输出 <see langword="Close" />
    ///  已调用或者此调用的结果是无效的 XML 文档。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Close;
    ///<summary>
    ///  当在派生类中被重写时，写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效 NmToken。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  不是有效的 NmToken;或 <paramref name="name" />
    ///  是 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteNmToken(name: string);
    ///<summary>
    ///  当在派生类中被重写时，写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效名称。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  不是有效的 XML 名称;或 <paramref name="name" />
    ///  是 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteName(name: string);
    ///<summary>
    ///  写入对象值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的对象值。
    ///  注意   随着.NET Framework 3.5 的发布，此方法接受 <see cref="T:System.DateTimeOffset" />
    ///  作为参数。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭或处于错误状态。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  写入 <see cref="T:System.String" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.String" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: string); overload;
    ///<summary>
    ///  写入 <see cref="T:System.DateTime" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.DateTime" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNDateTime); overload;
    ///<summary>
    ///  写入 <see cref="T:System.DateTimeOffset" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.DateTimeOffset" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNDateTimeOffset); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Double" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Double" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Double); overload;
    ///<summary>
    ///  写入一个单精度浮点数。
    ///</summary>
    ///  <param name="value">
    ///  要写入的单精度浮点数。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Single); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Decimal" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Decimal" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNDecimal); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Int32" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Int32" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Int32); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Int64" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Int64" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Int64); overload;
    ///<summary>
    ///  当在派生类中重写出在当前位置中找到的所有属性 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="XmlReader" />
    ///  要从其中复制属性。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  读取器未定位在 <see langword="element" />
    ///  , ，<see langword="attribute" />
    ///  或 <see langword="XmlDeclaration" />
    ///  节点。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    ///<summary>
    ///  将所有内容从复制 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到编写器的对象。
    ///  位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  保持不变。
    ///</summary>
    ///  <param name="navigator">
    ///  要复制其内容的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="navigator" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    ///<summary>
    ///  写入具有指定的本地名称和值的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  值是 <see langword="null" />
    ///  或空字符串。
    ///  - 或 -
    ///  参数值不是有效的。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteElementString(localName: string; value: string); overload;
    ///<summary>
    ///  写入具有指定的本地名称、命名空间 URI 和值的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  值是 <see langword="null" />
    ///  或空字符串。
    ///  - 或 -
    ///  参数值不是有效的。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  写入具有指定的前缀、本地名称、命名空间 URI 和值的元素。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  值是 <see langword="null" />
    ///  或空字符串。
    ///  - 或 -
    ///  参数值不是有效的。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  释放 <see cref="T:System.Xml.XmlWriter" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Dispose;
    ///<summary>
    ///  异步写入版本为“1.0”的 XML 声明。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteStartDocument" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStartDocumentAsync: DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  异步写入版本为“1.0”的 XML 声明和独立的属性。
    ///</summary>
    ///  <param name="standalone">
    ///  如果 <see langword="true" />
    ///  , ，它将写入"独立 = yes"; 如果 <see langword="false" />
    ///  , ，它将写入"独立 = no"。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteStartDocument" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStartDocumentAsync(standalone: Boolean): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  异步关闭任何打开的元素或属性并将写入器重新设置为起始状态。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteEndDocument" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteEndDocumentAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写入具有指定名称和可选属性的 DOCTYPE 声明。
    ///</summary>
    ///  <param name="name">
    ///  DOCTYPE 的名称。
    ///  它必须是非空的。
    ///</param>
    ///  <param name="pubid">
    ///  如果非 null 它还将写入 PUBLIC"pubid""sysid"其中 <paramref name="pubid" />
    ///  和 <paramref name="sysid" />
    ///  替换给定的参数的值。
    ///</param>
    ///  <param name="sysid">
    ///  如果 <paramref name="pubid" />
    ///  是 <see langword="null" />
    ///  和 <paramref name="sysid" />
    ///  为非 null 它将写入 SYSTEM"sysid"其中 <paramref name="sysid" />
    ///  将替换为此参数的值。
    ///</param>
    ///  <param name="subset">
    ///  如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteDocType" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写入指定的开始标记并将其与给定的命名空间和前缀关联起来。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteStartElement" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteEndElement" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteEndElementAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteFullEndElement" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteFullEndElementAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出一个包含指定文本的 &lt;![CDATA[...]]&gt; 块。
    ///</summary>
    ///  <param name="text">
    ///  要放置在 CDATA 块中的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteCData" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCDataAsync(text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出一个包含指定文本的注释 &lt;!--...--&gt;。
    ///</summary>
    ///  <param name="text">
    ///  要放在注释内的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteComment" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCommentAsync(text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出在名称和文本之间带有空格的处理指令如下︰ &lt;？ 命名 text？ &gt;。
    ///</summary>
    ///  <param name="name">
    ///  处理指令的名称。
    ///</param>
    ///  <param name="text">
    ///  要包括在处理指令中的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteProcessingInstruction" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteProcessingInstructionAsync(name: string; text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出实体引用作为 <see langword="&amp;name;" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  实体引用的名称。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteEntityRef" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteEntityRefAsync(name: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  为指定的 Unicode 字符值异步强制生成字符实体。
    ///</summary>
    ///  <param name="ch">
    ///  为其生成字符实体的 Unicode 字符。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteCharEntity" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCharEntityAsync(ch: Char): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出给定的空白区域。
    ///</summary>
    ///  <param name="ws">
    ///  空格字符的字符串。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteWhitespace" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteWhitespaceAsync(ws: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写入给定的文本内容。
    ///</summary>
    ///  <param name="text">
    ///  要写入的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteString" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStringAsync(text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  为代理项字符对异步生成并写入代理项字符实体。
    ///</summary>
    ///  <param name="lowChar">
    ///  低代理项。
    ///  它必须是介于 0xDC00 和 0xDFFF 之间的值。
    ///</param>
    ///  <param name="highChar">
    ///  高代理项。
    ///  它必须是介于 0xD800 和 0xDBFF 之间的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteSurrogateCharEntity" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDN.mscorlib.DNTask;
    ///<summary>
    ///  以每次一个缓冲区的方式异步写入文本。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入文本的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteChars" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    ///<summary>
    ///  从字符缓冲区手动异步写入原始标记。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的位置，指示要写入文本的起始位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteRaw" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  从字符串手动异步写入原始标记。
    ///</summary>
    ///  <param name="data">
    ///  包含要写入的文本的字符串。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteRaw" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteRawAsync(data: string): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  将指定的二进制字节异步编码为 Base64 并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteBase64" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    ///<summary>
    ///  以异步方式将为指定的二进制字节编码 <see langword="BinHex" />
    ///  并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteBinHex" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    ///<summary>
    ///  将缓冲区中的所有内容异步刷新到基础流，并同时刷新基础流。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="Flush" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function FlushAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效 NmToken。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteNmToken" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNmTokenAsync(name: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效名称。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteName" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNameAsync(name: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出命名空间限定的名称。
    ///  此方法查找位于给定命名空间范围内的前缀。
    ///</summary>
    ///  <param name="localName">
    ///  要写入的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  名称的命名空间 URI。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteQualifiedName" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteQualifiedNameAsync(localName: string; ns: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出在当前位置中找到的所有属性 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="XmlReader" />
    ///  要从其中复制属性。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteAttributes" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask;
    ///<summary>
    ///  将所有内容从读取器异步复制到写入器并将读取器移动到下一个同级的开头。
    ///</summary>
    ///  <param name="reader">
    ///  要从其中进行读取的 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteNode" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  以异步方式将所有内容从复制 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到编写器的对象。
    ///  位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  保持不变。
    ///</summary>
    ///  <param name="navigator">
    ///  要复制其内容的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteNode" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  异步写入具有指定的前缀、本地名称、命名空间 URI 和值的元素。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteElementString" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  当在派生类中被重写时，写入版本为“1.0”的 XML 声明。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  这不是调用构造函数之后的第一个写入方法。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartDocument; overload;
    ///<summary>
    ///  当在派生类中被重写时，写入版本为“1.0”的 XML 声明和独立的属性。
    ///</summary>
    ///  <param name="standalone">
    ///  如果 <see langword="true" />
    ///  , ，它将写入"独立 = yes"; 如果 <see langword="false" />
    ///  , ，它将写入"独立 = no"。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  这不是调用构造函数之后的第一个写入方法。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartDocument(standalone: Boolean); overload;
    ///<summary>
    ///  当在派生类中被重写时，关闭任何打开的元素或属性并将写入器重新设置为起始状态。
    ///</summary>
    ///<exception cref="T:System.ArgumentException">
    ///  XML 文档是无效的。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteEndDocument;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定名称和可选属性的 DOCTYPE 声明。
    ///</summary>
    ///  <param name="name">
    ///  DOCTYPE 的名称。
    ///  它必须是非空的。
    ///</param>
    ///  <param name="pubid">
    ///  如果非 null 它还将写入 PUBLIC"pubid""sysid"其中 <paramref name="pubid" />
    ///  和 <paramref name="sysid" />
    ///  替换给定的参数的值。
    ///</param>
    ///  <param name="sysid">
    ///  如果 <paramref name="pubid" />
    ///  是 <see langword="null" />
    ///  和 <paramref name="sysid" />
    ///  为非 null 它将写入 SYSTEM"sysid"其中 <paramref name="sysid" />
    ///  将替换为此参数的值。
    ///</param>
    ///  <param name="subset">
    ///  如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  Prolog 外部上 （在根元素中） 调用此方法。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  值为 <paramref name="name" />
    ///  将导致无效的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    ///<summary>
    ///  当在派生类中被重写时，写入指定的开始标记并将其与给定的命名空间和前缀关联起来。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  这会导致无效的 XML 文档。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteEndElement;
    ///<summary>
    ///  当在派生类中被重写时，关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteFullEndElement;
    ///<summary>
    ///  当在派生类中被重写时，写入具有指定的前缀、本地名称和命名空间 URI 的属性的开头。
    ///</summary>
    ///  <param name="prefix">
    ///  属性的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    ///<summary>
    ///  当在派生类中重写时，关闭上一个 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />
    ///  调用。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteEndAttribute;
    ///<summary>
    ///  当在派生类中被重写时，写出包含指定文本的 &lt;![CDATA[...]]&gt; 块。
    ///</summary>
    ///  <param name="text">
    ///  要放置在 CDATA 块中的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该文本会导致格式不正确的 XML 文档。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteCData(text: string);
    ///<summary>
    ///  当在派生类中被重写时，写出包含指定文本的注释 &lt;!--...--&gt;。
    ///</summary>
    ///  <param name="text">
    ///  要放在注释内的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该文本会导致一个格式正确的 XML 文档。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteComment(text: string);
    ///<summary>
    ///  当在派生类中重写，写出在名称和文本之间带有空格的处理指令，如下所示︰ &lt;？ 命名 text？ &gt;。
    ///</summary>
    ///  <param name="name">
    ///  处理指令的名称。
    ///</param>
    ///  <param name="text">
    ///  要包括在处理指令中的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该文本会导致格式不正确的 XML 文档。
    ///  <paramref name="name" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///  此方法用于创建 XML 声明后的 <see cref="M:System.Xml.XmlWriter.WriteStartDocument" />
    ///  已调用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteProcessingInstruction(name: string; text: string);
    ///<summary>
    ///  当在派生类中重写出实体引用作为 <see langword="&amp;name;" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  实体引用的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteEntityRef(name: string);
    ///<summary>
    ///  当在派生类中被重写时，为指定的 Unicode 字符值强制生成字符实体。
    ///</summary>
    ///  <param name="ch">
    ///  为其生成字符实体的 Unicode 字符。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  在代理项对字符范围的字符是 <see langword="0xd800" />
    ///  - <see langword="0xdfff" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteCharEntity(ch: Char);
    ///<summary>
    ///  当在派生类中被重写时，写出给定的空白区域。
    ///</summary>
    ///  <param name="ws">
    ///  空格字符的字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该字符串包含非空白字符。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteWhitespace(ws: string);
    ///<summary>
    ///  当在派生类中被重写时，写入给定的文本内容。
    ///</summary>
    ///  <param name="text">
    ///  要写入的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  文本字符串包含无效的代理项对。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteString(text: string);
    ///<summary>
    ///  当在派生类中被重写时，为代理项字符对生成并写入代理项字符实体。
    ///</summary>
    ///  <param name="lowChar">
    ///  低代理项。
    ///  它必须是介于 0xDC00 和 0xDFFF 之间的值。
    ///</param>
    ///  <param name="highChar">
    ///  高代理项。
    ///  它必须是介于 0xD800 和 0xDBFF 之间的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  传递了无效的代理项字符对。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    ///<summary>
    ///  当在派生类中被重写时，以每次一个缓冲区的方式写入文本。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入文本的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///  - 或 -
    ///  缓冲区长度减 <paramref name="index" />
    ///  是小于 <paramref name="count" />
    ///  ; 代理项对字符中的调用结果被拆分或写入无效的代理项对。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="buffer" />
    ///  参数值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    ///<summary>
    ///  当在派生类中被重写时，从字符缓冲区手动写入原始标记。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的位置，指示要写入文本的起始位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///  - 或 -
    ///  缓冲区长度减去 <paramref name="index" />
    ///  小于 <paramref name="count" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    ///<summary>
    ///  当在派生类中被重写时，从字符串手动写入原始标记。
    ///</summary>
    ///  <param name="data">
    ///  包含要写入的文本的字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteRaw(data: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，将指定的二进制字节编码为 Base64 并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///  - 或 -
    ///  缓冲区长度减去 <paramref name="index" />
    ///  小于 <paramref name="count" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    ///<summary>
    ///  当在派生类中被重写时，将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Flush;
    ///<summary>
    ///  当在派生类中被重写时，返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。
    ///</summary>
    ///  <param name="ns">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  匹配的前缀或 <see langword="null" />
    ///  如果没有匹配的命名空间在当前作用域中找到的 URI。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="ns" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function LookupPrefix(ns: string): string;
    ///<summary>
    ///  当在派生类中被重写时，写出命名空间限定的名称。
    ///  此方法查找位于给定命名空间范围内的前缀。
    ///</summary>
    ///  <param name="localName">
    ///  要写入的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  名称的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///  <paramref name="localName" />
    ///  不是有效的名称。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteQualifiedName(localName: string; ns: string);
    ///<summary>
    ///  写入 <see cref="T:System.Boolean" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Boolean" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Boolean); overload;
    ///<summary>
    ///  当在派生类中被重写时，将全部内容从读取器复制到写入器并将读取器移动到下一个同级的开始位置。
    ///</summary>
    ///  <param name="reader">
    ///  要从其中进行读取的 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="reader" />
    ///  包含无效字符。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    ///<summary>
    ///  异步写出具有指定前缀、本地名称、命名空间 URI 和值的属性。
    ///</summary>
    ///  <param name="prefix">
    ///  属性的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteAttributeString" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中重写，获取当前 <see langword="xml:lang" />
    ///  作用域。
    ///</summary>
    ///<returns>
    ///  当前 <see langword="xml:lang" />
    ///  范围。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property XmlLang: string read get_XmlLang;
  end;

  TDNXmlWriter = class(TDNGenericImport<DNXmlWriterClass, DNXmlWriter>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F66C6659-D159-5BE6-A5CE-CAA051FE3D65}']
  { static methods } 

    ///<summary>
    ///  编译指定的 XPath 表达式并返回表示 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式参数不是有效的 XPath 表达式。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    {class} function Compile(xpath: string): DNXPathExpression; overload;
    ///<summary>
    ///  编译时指定的 XPath 表达式不包含 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  为命名空间解析，并返回指定对象 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  表示 XPath 表达式的对象。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///  <param name="nsResolver">
    ///  实现的对象 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  命名空间解析的接口。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式参数不是有效的 XPath 表达式。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    {class} function Compile(xpath: string; nsResolver: DNIXmlNamespaceResolver): DNXPathExpression; overload;

  end;

  ///<summary>
  ///  提供一个类型化的类，表示已编译的 XPath 表达式。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathExpression')]
  DNXPathExpression = interface(DDN.mscorlib.DNObject)
  ['{B2D5CCCE-B400-3DC6-B310-EB894C049E94}']
  { getters & setters } 

    function get_Expression: string;

  { methods } 

    ///<summary>
    ///  当在派生类中重写时按照指定的 XPath 表达式选择的节点排序 <see cref="T:System.Collections.IComparer" />
    ///  对象。
    ///</summary>
    ///  <param name="expr">
    ///  一个表示排序关键字的对象。
    ///  这可以是节点的 <see langword="string" />
    ///  值，还可以是具有已编译 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</param>
    ///  <param name="comparer"><see cref="T:System.Collections.IComparer" />
    ///  提供特定的数据类型比较用于比较两个对象是否相等的对象。
    ///</param>
    ///<exception cref="T:System.Xml.XPath.XPathException"><see cref="T:System.Xml.XPath.XPathExpression" />
    ///  或排序关键字包括前缀，并且未提供 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  或未在所提供的 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  中找到该前缀。
    ///</exception>
    procedure AddSort(expr: DDN.mscorlib.DNObject; comparer: DDN.mscorlib.DNIComparer);
    ///<summary>
    ///  当在派生类中重写时返回此克隆 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</returns>
    function Clone: DNXPathExpression;
    ///<summary>
    ///  在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  对象。
    ///</summary>
    ///  <param name="nsManager">
    ///  要用于命名空间解析的 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.Xml.XPath.XPathException"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  对象参数不是从 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  类派生的。
    ///</exception>
    procedure SetContext(nsManager: DNXmlNamespaceManager); overload;
    ///<summary>
    ///  在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象。
    ///</summary>
    ///  <param name="nsResolver">
    ///  实现 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  接口以用于命名空间解析的对象。
    ///</param>
    ///<exception cref="T:System.Xml.XPath.XPathException"><see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象参数不派生自 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  。
    ///</exception>
    procedure SetContext(nsResolver: DNIXmlNamespaceResolver); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中重写时获取 <see langword="string" />
    ///  表示形式 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  。
    ///</summary>
    ///<returns><see langword="string" />
    ///  的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  表示形式。
    ///</returns>
    property Expression: string read get_Expression;
  end;

  TDNXPathExpression = class(TDNGenericImport<DNXPathExpressionClass, DNXPathExpression>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNavigatorClass = interface(DNObjectClass)
  ['{ED2BA7FB-0878-504B-988D-16D04F1775E3}']
  { static getter & setter } 

    {class} function get_NavigatorComparer: DDN.mscorlib.DNIEqualityComparer;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEqualityComparer" />
    ///  ，它用于 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象的相等比较。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEqualityComparer" />
    ///  ，它用于 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象的相等比较。
    ///</returns>
    {class} property NavigatorComparer: DDN.mscorlib.DNIEqualityComparer read get_NavigatorComparer;
  end;

  ///<summary>
  ///  为定位和编辑 XML 数据提供游标模型。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathNavigator')]
  DNXPathNavigator = interface(DNObject)
  ['{BE86B874-6C3C-3FC2-A6B3-4DA73CA20540}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_TypedValue: DDN.mscorlib.DNObject;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDN.mscorlib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;
    function get_NameTable: DNXmlNameTable;
    function get_NodeType: DNXPathNodeType;
    function get_LocalName: string;
    function get_Name: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_XmlLang: string;
    function get_UnderlyingObject: DDN.mscorlib.DNObject;
    function get_HasAttributes: Boolean;
    function get_HasChildren: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_CanEdit: Boolean;
    function get_OuterXml: string;
    procedure set_OuterXml(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;

  { methods } 

    ///<summary>
    ///  获取当前节点的文本值。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  ，其中包含当前节点的文本值。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  设置当前节点的值。
    ///</summary>
    ///  <param name="value">
    ///  节点的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  值参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  位于根节点（即命名空间节点）上，或指定的值无效。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure SetValue(value: string);
    ///<summary>
    ///  设置当前节点的类型化值。
    ///</summary>
    ///  <param name="typedValue">
    ///  节点的新类型化值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持指定的对象类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  指定的值不能为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  未定位在元素或属性节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure SetTypedValue(typedValue: DDN.mscorlib.DNObject);
    ///<summary>
    ///  获取当前节点的值作为<see cref="T:System.Type" />
    ///  指定，使用<see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  指定用来解析命名空间前缀的对象。
    ///</summary>
    ///  <param name="returnType"><see cref="T:System.Type" />
    ///  返回为当前节点的值。
    ///</param>
    ///  <param name="nsResolver">
    ///  用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  形式的当前节点的值<see cref="T:System.Type" />
    ///  请求。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的值不是目标类型的正确格式。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception>
    function ValueAs(returnType: DDN.mscorlib.DNType; nsResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  返回一份 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  这份 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.XmlReader" />
    ///  对象，该对象包含当前节点及其子节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlReader" />
    ///  对象，该对象包含当前节点及其子节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不会在元素节点或根节点上进行定位。
    ///</exception>
    function ReadSubtree: DNXmlReader;
    ///<summary>
    ///  将当前节点及其子节点流式传输到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</summary>
    ///  <param name="writer">
    ///  要流式传输至的 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</param>
    procedure WriteSubtree(writer: DNXmlWriter);
    ///<summary>
    ///  获取具有指定本地名称和命名空间 URI 的属性的值。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///  <paramref name="localName" />
    ///  是区分大小写。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含指定属性的值 <see cref="F:System.String.Empty" />
    ///  如果未找到一个匹配的特性，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不定位在元素节点上。
    ///</returns>
    function GetAttribute(localName: string; namespaceURI: string): string;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到具有匹配的本地名称和命名空间 URI 的属性。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 的属性; <see langword="null" />
    ///  空命名空间。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到的属性; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到具有指定的命名空间前缀的命名空间节点。
    ///</summary>
    ///  <param name="name">
    ///  命名空间节点的命名空间前缀。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到指定的命名空间; <see langword="false" />
    ///  如果找不到匹配的命名空间节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不定位在元素节点上。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNamespace(name: string): Boolean;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  至当前节点的第一个命名空间节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到第一个命名空间节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToFirstNamespace: Boolean; overload;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到下一步的命名空间节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个命名空间节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNextNamespace: Boolean; overload;
    ///<summary>
    ///  将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移至当前节点的第一个同级节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到当前节点的第一个同级节点 <see langword="false" />
    ///  如果没有第一个同级或者 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前定位在属性节点上。
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  已位于上的第一个同级 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  将返回 <see langword="true" />
    ///  并不会移动其位置。
    ///  如果 <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst" />
    ///  返回 <see langword="false" />
    ///  因为没有第一个同级，或如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前定位在特性上的位置， <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  保持不变。
    ///</returns>
    function MoveToFirst: Boolean;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  至当前节点所属的根节点。
    ///</summary>
    procedure MoveToRoot;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到具有本地名称和命名空间 URI 指定的子节点。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的子节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要移动到的子节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到的子节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToChild(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到的子节点 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  指定。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  要移动到的子节点。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到的子节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToChild(&type: DNXPathNodeType): Boolean; overload;
    ///<summary>
    ///  将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到按文档顺序指定了其本地名称或命名空间 URI 的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果成功移动了 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  按文档顺序将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到指定的边界内具有指定的本地名称和命名空间 URI 的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///  <param name="end"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在搜索下一个元素时当前 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不会越过的元素边界上。
    ///</param>
    ///<returns>
    ///  如果成功移动了 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToFollowing(localName: string; namespaceURI: string; &end: DNXPathNavigator): Boolean; overload;
    ///<summary>
    ///  将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到按文档顺序指定的 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  的以下元素。
    ///</summary>
    ///  <param name="type">
    ///  元素的 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///<see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  不能为 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" />
    ///  或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToFollowing(&type: DNXPathNodeType): Boolean; overload;
    ///<summary>
    ///  按文档顺序将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到指定边界内的指定 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  的下一个元素。
    ///</summary>
    ///  <param name="type">
    ///  元素的 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///<see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  不能是 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" />
    ///  或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />
    ///  。
    ///</param>
    ///  <param name="end"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在搜索下一个元素时当前 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不会越过的元素边界上。
    ///</param>
    ///<returns>
    ///  如果成功移动了 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToFollowing(&type: DNXPathNodeType; &end: DNXPathNavigator): Boolean; overload;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  具有本地名称和命名空间 URI 指定的下一个同级节点。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的下一个同级节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要移动到的下一个同级节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个同级节点; <see langword="false" />
    ///  如果没有其他同级或 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前定位在属性节点上。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNext(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  至相匹配的当前节点的下一个同级节点 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  指定。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  将移动到的同级节点。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个同级节点，则为 <see langword="true" />
    ///  ；如果没有更多同级节点或如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前位于属性节点上，则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNext(&type: DNXPathNodeType): Boolean; overload;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  是当前的后代 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///  <param name="nav"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  要与此 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  是当前的后代 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDescendant(nav: DNXPathNavigator): Boolean;
    ///<summary>
    ///  编译一个表示 XPath 表达式的字符串，并返回 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</summary>
    ///  <param name="xpath">
    ///  表示 XPath 表达式的字符串。
    ///</param>
    ///<returns><see cref="T:System.Xml.XPath.XPathExpression" />
    ///  表示 XPath 表达式的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="xpath" />
    ///  参数包含不是有效的 XPath 表达式。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Compile(xpath: string): DNXPathExpression;
    ///<summary>
    ///  使用指定的 XPath 查询在 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  中选择单个节点。
    ///</summary>
    ///  <param name="xpath">
    ///  表示 XPath 表达式的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，其中包含指定的 XPath 查询的第一个匹配节点；如果没有查询结果，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 查询无效。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXPathNavigator; overload;
    ///<summary>
    ///  通过指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象使用指定的 XPath 查询在 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  中选择单个节点，以解析命名空间前缀。
    ///</summary>
    ///  <param name="xpath">
    ///  表示 XPath 表达式的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象用于解析 XPath 查询中的命名空间前缀。
    ///</param>
    ///<returns>
    ///  一个包含指定 XPath 查询的第一个匹配节点的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象；如果没有查询结果，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 查询无效。
    ///</exception>
    function SelectSingleNode(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNavigator; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象在 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  中选择单个节点。
    ///</summary>
    ///  <param name="expression"><see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象，其中包含已编译的 XPath 查询。
    ///</param>
    ///<returns><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，其中包含指定的 XPath 查询的第一个匹配节点；如果没有查询结果，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 查询无效。
    ///</exception>
    function SelectSingleNode(expression: DNXPathExpression): DNXPathNavigator; overload;
    ///<summary>
    ///  使用指定的 XPath 表达式选择节点集。
    ///</summary>
    ///  <param name="xpath">
    ///  表示 XPath 表达式的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///<returns>
    ///  指向所选节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式包含错误或其返回类型不是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Select(xpath: string): DNXPathNodeIterator; overload;
    ///<summary>
    ///  使用指定的 XPath 表达式与指定用来解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象选择节点集。
    ///</summary>
    ///  <param name="xpath">
    ///  表示 XPath 表达式的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="resolver">
    ///  用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  指向所选节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式包含错误或其返回类型不是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Select(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNodeIterator; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  来选择节点集。
    ///</summary>
    ///  <param name="expr">
    ///  包含已编译的 XPath 查询的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  指向选定节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式包含错误或其返回类型不是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Select(expr: DNXPathExpression): DNXPathNodeIterator; overload;
    ///<summary>
    ///  计算指定的 XPath 表达式并返回类型化结果。
    ///</summary>
    ///  <param name="xpath">
    ///  表示可以计算的 XPath 表达式的字符串。
    ///</param>
    ///<returns>
    ///  表达式结果（布尔值、数字、字符串或节点集）。
    ///  这分别映射到 <see cref="T:System.Boolean" />
    ///  、<see cref="T:System.Double" />
    ///  、<see cref="T:System.String" />
    ///  或 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式的返回类型是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Evaluate(xpath: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  计算指定的 XPath 表达式并返回类型化结果，以使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象解析 XPath 表达式中的命名空间前缀。
    ///</summary>
    ///  <param name="xpath">
    ///  表示可以计算的 XPath 表达式的字符串。
    ///</param>
    ///  <param name="resolver">
    ///  用来解析 XPath 表达式中的命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  表达式结果（布尔值、数字、字符串或节点集）。
    ///  这分别映射到 <see cref="T:System.Boolean" />
    ///  、<see cref="T:System.Double" />
    ///  、<see cref="T:System.String" />
    ///  或 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式的返回类型是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Evaluate(xpath: string; resolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  计算 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  并返回类型化结果。
    ///</summary>
    ///  <param name="expr">
    ///  可计算的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  。
    ///</param>
    ///<returns>
    ///  表达式结果（布尔值、数字、字符串或节点集）。
    ///  这分别映射到 <see cref="T:System.Boolean" />
    ///  、<see cref="T:System.Double" />
    ///  、<see cref="T:System.String" />
    ///  或 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式的返回类型是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Evaluate(expr: DNXPathExpression): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  使用提供的上下文计算 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  ，并返回类型化结果。
    ///</summary>
    ///  <param name="expr">
    ///  可以计算的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  。
    ///</param>
    ///  <param name="context"><see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  ，指向要在其上执行计算的选定节点集。
    ///</param>
    ///<returns>
    ///  表达式结果（布尔值、数字、字符串或节点集）。
    ///  这分别映射到 <see cref="T:System.Boolean" />
    ///  、<see cref="T:System.Double" />
    ///  、<see cref="T:System.String" />
    ///  或 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式的返回类型是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Evaluate(expr: DNXPathExpression; context: DNXPathNodeIterator): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  确定当前节点是否匹配所指定的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  。
    ///</summary>
    ///  <param name="expr">
    ///  一个 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象，它包含已编译的 XPath 表达式。
    ///</param>
    ///<returns>
    ///  如果当前节点匹配 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  无法计算 XPath 表达式。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Matches(expr: DNXPathExpression): Boolean; overload;
    ///<summary>
    ///  确定当前节点是否与指定的 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果当前节点与指定的 XPath 表达式中;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  无法计算 XPath 表达式。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Matches(xpath: string): Boolean; overload;
    ///<summary>
    ///  选择当前节点的所有有相匹配的子节点 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  的子节点。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    function SelectChildren(&type: DNXPathNodeType): DNXPathNodeIterator; overload;
    ///<summary>
    ///  选择当前节点中具有指定的本地名称和命名空间 URI 的所有子节点。
    ///</summary>
    ///  <param name="name">
    ///  子节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  子节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  无法将 <see langword="null" />
    ///  作为一个参数进行传递。
    ///</exception>
    function SelectChildren(name: string; namespaceURI: string): DNXPathNodeIterator; overload;
    ///<summary>
    ///  选择所有祖先节点的当前节点中具有匹配 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  祖先节点。
    ///</param>
    ///  <param name="matchSelf">
    ///  若要在所选内容上包含上下文节点，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///  返回的节点的顺序与文档顺序相反。
    ///</returns>
    function SelectAncestors(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    ///<summary>
    ///  选择当前节点中具有指定的本地名称和命名空间 URI 的所有祖先节点。
    ///</summary>
    ///  <param name="name">
    ///  祖先节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  祖先节点的命名空间 URI。
    ///</param>
    ///  <param name="matchSelf">
    ///  若要在所选内容上包含上下文节点，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///  返回的节点的顺序与文档顺序相反。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  无法将 <see langword="null" />
    ///  作为一个参数进行传递。
    ///</exception>
    function SelectAncestors(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    ///<summary>
    ///  选择当前节点的具有匹配的所有子代节点 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  子代节点。
    ///</param>
    ///  <param name="matchSelf"><see langword="true" />
    ///  若要在所选内容; 中包括上下文节点否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    function SelectDescendants(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    ///<summary>
    ///  选择当前节点中具有指定的本地名称和命名空间 URI 的所有子代节点。
    ///</summary>
    ///  <param name="name">
    ///  子代节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 的子代节点。
    ///</param>
    ///  <param name="matchSelf"><see langword="true" />
    ///  若要在所选内容; 中包括上下文节点否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  无法将 <see langword="null" />
    ///  作为一个参数进行传递。
    ///</exception>
    function SelectDescendants(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于在当前节点的子节点列表的开始处创建一个新的子节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于在当前节点的子节点列表的开始处创建一个新的子节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不允许在前面追加新的子节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    function PrependChild: DNXmlWriter; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于在当前节点的子节点列表的末尾创建一个或多个新的子节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于在当前节点的子节点列表的末尾创建新的子节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不是根节点或不是一个元素节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    function AppendChild: DNXmlWriter; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于在当前所选节点的后面创建一个新的同级节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，它用于在当前所选节点的后面创建一个新的同级节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的后面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    function InsertAfter: DNXmlWriter; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，它用于在当前所选节点的前面创建一个新的同级节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，它用于在当前所选节点的前面创建一个新的同级节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的前面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    function InsertBefore: DNXmlWriter; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，用于在当前元素上创建新属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlWriter" />
    ///  对象，用于在当前元素上创建新属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  程序不位于某个元素节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    function CreateAttributes: DNXmlWriter;
    ///<summary>
    ///  替换从当前节点到指定节点之间的一组同级节点。
    ///</summary>
    ///  <param name="lastSiblingToReplace">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，它定位在要替换的范围内的最后一个同级节点上。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于指定替换范围。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  指定的要替换的最后一个节点不是当前节点的有效同级节点。
    ///</exception>
    function ReplaceRange(lastSiblingToReplace: DNXPathNavigator): DNXmlWriter;
    ///<summary>
    ///  将当前节点替换为指定的字符串内容。
    ///</summary>
    ///  <param name="newNode">
    ///  新节点的 XML 数据字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  XML 字符串参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  未定位于元素、文本、处理指令或注释节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 字符串参数的格式不正确。
    ///</exception>
    procedure ReplaceSelf(newNode: string); overload;
    ///<summary>
    ///  将当前节点替换为指定的 <see cref="T:System.Xml.XmlReader" />
    ///  对象的内容。
    ///</summary>
    ///  <param name="newNode">
    ///  位于新节点的 XML 数据上的 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlReader" />
    ///  对象处于错误状态或已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不位于元素、文本、处理指令或注释节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure ReplaceSelf(newNode: DNXmlReader); overload;
    ///<summary>
    ///  将当前节点替换为指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象的内容。
    ///</summary>
    ///  <param name="newNode">
    ///  在新节点上定位的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不位于元素、文本、处理指令或注释节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure ReplaceSelf(newNode: DNXPathNavigator); overload;
    ///<summary>
    ///  使用指定的 XML 数据字符串在当前节点的子节点列表的末尾创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  新的子节点的 XML 数据字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  XML 数据字符串参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不是根节点或不是一个元素节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 数据字符串参数的格式不正确。
    ///</exception>
    procedure AppendChild(newChild: string); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlReader" />
    ///  对象的 XML 内容在当前节点的子节点列表的末尾创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///  对象，该对象定位在新的子节点的 XML 数据上。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlReader" />
    ///  对象处于错误状态或已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不是根节点或不是一个元素节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure AppendChild(newChild: DNXmlReader); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  中的节点在当前节点的子节点列表的末尾创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在将作为新的子节点添加的节点上。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不是根节点或不是一个元素节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure AppendChild(newChild: DNXPathNavigator); overload;
    ///<summary>
    ///  使用指定的 XML 字符串在当前节点的子节点列表的开始处创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  新的子节点的 XML 数据字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  XML 字符串参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所在的当前节点不允许预置新的子节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 字符串参数的格式不正确。
    ///</exception>
    procedure PrependChild(newChild: string); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlReader" />
    ///  对象的 XML 内容，在当前节点的子节点列表的开始处创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///  对象，它定位在新子节点的 XML 数据上。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlReader" />
    ///  对象处于错误状态或已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所位于的当前节点不允许在其前面预置新的子节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure PrependChild(newChild: DNXmlReader); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象中的节点在当前节点的子节点列表的开始处创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在将作为新的子节点添加的节点上。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所位于的当前节点不允许在其前面预置新的子节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure PrependChild(newChild: DNXPathNavigator); overload;
    ///<summary>
    ///  使用指定的 XML 字符串在当前选定的节点之前创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  新的同级节点的 XML 数据字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  XML 字符串参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的前面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 字符串参数的格式不正确。
    ///</exception>
    procedure InsertBefore(newSibling: string); overload;
    ///<summary>
    ///  使用 <see cref="T:System.Xml.XmlReader" />
    ///  对象指定的 XML 内容在当前选定的节点之前创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  在新的同级节点的 XML 数据上定位的 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlReader" />
    ///  对象处于错误状态或已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的前面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure InsertBefore(newSibling: DNXmlReader); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  中的节点在当前选定的节点之前创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在将作为新的同级节点添加的节点上。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的前面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure InsertBefore(newSibling: DNXPathNavigator); overload;
    ///<summary>
    ///  使用指定的 XML 字符串在当前选定的节点之后创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  新的同级节点的 XML 数据字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  XML 字符串参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的后面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 字符串参数的格式不正确。
    ///</exception>
    procedure InsertAfter(newSibling: string); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlReader" />
    ///  对象的 XML 内容，在当前所选节点之后创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///  对象，它置于新同级节点的 XML 数据上。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlReader" />
    ///  对象处于错误状态或已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的后面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure InsertAfter(newSibling: DNXmlReader); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象中的节点在当前选定的节点之后创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在将作为新的同级节点添加的节点上。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的后面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure InsertAfter(newSibling: DNXPathNavigator); overload;
    ///<summary>
    ///  删除从当前节点到指定节点之间的一组同级节点。
    ///</summary>
    ///  <param name="lastSiblingToDelete">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，它定位在要删除的范围内的最后一个同级节点上。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  指定的要删除的最后一个节点不是当前节点的有效同级节点。
    ///</exception>
    procedure DeleteRange(lastSiblingToDelete: DNXPathNavigator);
    ///<summary>
    ///  删除当前节点及其子节点。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  定位在不能删除的节点上，例如根节点或命名空间节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure DeleteSelf;
    ///<summary>
    ///  使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点的子节点列表的开始处创建一个新的子元素。
    ///</summary>
    ///  <param name="prefix">
    ///  新的子元素（如果有）的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  新的子元素（如果有）的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新的子元素（如果有）的命名空间 URI。
    ///<see cref="F:System.String.Empty" />
    ///  和 <see langword="null" />
    ///  是等效的。
    ///</param>
    ///  <param name="value">
    ///  新的子元素的值。
    ///  如果传递了 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  ，则将创建一个空元素。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不允许在前面追加新的子节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure PrependChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    ///<summary>
    ///  使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点的子节点列表的末尾创建一个新的子元素节点。
    ///</summary>
    ///  <param name="prefix">
    ///  新的子元素节点（如果有）的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  新的子元素节点（如果有）的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新的子元素节点（如果有）的命名空间 URI。
    ///<see cref="F:System.String.Empty" />
    ///  和 <see langword="null" />
    ///  等效。
    ///</param>
    ///  <param name="value">
    ///  新的子元素节点的值。
    ///  如果传递了 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  ，则将创建一个空元素。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不是根节点或不是一个元素节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure AppendChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    ///<summary>
    ///  使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点之前创建一个新的同级元素。
    ///</summary>
    ///  <param name="prefix">
    ///  新的子元素（如果有）的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  新的子元素（如果有）的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新的子元素（如果有）的命名空间 URI。
    ///<see cref="F:System.String.Empty" />
    ///  和 <see langword="null" />
    ///  是等效的。
    ///</param>
    ///  <param name="value">
    ///  新的子元素的值。
    ///  如果传递 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  ，将创建一个空元素。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不允许在当前节点之前插入一个新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure InsertElementBefore(prefix: string; localName: string; namespaceURI: string; value: string);
    ///<summary>
    ///  使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点之后创建一个新的同级元素。
    ///</summary>
    ///  <param name="prefix">
    ///  新的子元素（如果有）的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  新的子元素（如果有）的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新的子元素（如果有）的命名空间 URI。
    ///<see cref="F:System.String.Empty" />
    ///  和 <see langword="null" />
    ///  是等效的。
    ///</param>
    ///  <param name="value">
    ///  新的子元素的值。
    ///  如果传递 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  ，将创建一个空元素。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点之后插入一个新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure InsertElementAfter(prefix: string; localName: string; namespaceURI: string; value: string);
    ///<summary>
    ///  使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前元素节点上创建一个属性节点。
    ///</summary>
    ///  <param name="prefix">
    ///  新的属性节点（如果有）的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  新的属性节点的本地名称，该名称不能是 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新的属性节点（如果有）的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  新的属性节点的值。
    ///  如果传递了 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  ，则将创建一个空属性节点。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  未定位在元素节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure CreateAttribute(prefix: string; localName: string; namespaceURI: string; value: string);
    ///<summary>
    ///  获取指定前缀的命名空间 URI。
    ///</summary>
    ///  <param name="prefix">
    ///  要解析其命名空间 URI 的前缀。
    ///  若要匹配默认命名空间，传递 <see cref="F:System.String.Empty" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含的命名空间 URI 分配给指定; 的命名空间前缀 <see langword="null" />
    ///  如果没有命名空间 URI 分配给指定的前缀。
    ///<see cref="T:System.String" />
    ///  返回原子化的。
    ///</returns>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  获取为指定的命名空间 URI 声明的前缀。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要为前缀解析的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含命名空间前缀分配给命名空间 URI; 否则为 <see cref="F:System.String.Empty" />
    ///  如果没有前缀分配给指定 URI 的命名空间。
    ///<see cref="T:System.String" />
    ///  返回原子化的。
    ///</returns>
    function LookupPrefix(namespaceURI: string): string;
    ///<summary>
    ///  返回当前节点的范围内命名空间。
    ///</summary>
    ///  <param name="scope"><see cref="T:System.Xml.XmlNamespaceScope" />
    ///  值，该值指定要返回的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Collections.Generic.IDictionary`2" />
    ///  的前缀键控的命名空间名称的集合。
    ///</returns>
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    ///<summary>
    ///  当在派生类中被重写时，创建一个新的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，它定位到的节点与此 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  定位到的节点相同。
    ///</summary>
    ///<returns>
    ///  一个新的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，它定位到的节点与此 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  定位到的节点相同。
    ///</returns>
    function Clone: DNXPathNavigator;
    ///<summary>
    ///  在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到当前节点的第一个属性。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功移动到了当前节点的第一个属性，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不变。
    ///</returns>
    function MoveToFirstAttribute: Boolean;
    ///<summary>
    ///  当在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到下一个属性。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个属性，则返回 <see langword="true" />
    ///  ；如果没有其他属性，则返回 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不变。
    ///</returns>
    function MoveToNextAttribute: Boolean;
    ///<summary>
    ///  返回与所指定本地名称对应的命名空间节点的值。
    ///</summary>
    ///  <param name="name">
    ///  命名空间节点的本地名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含值的命名空间节点; <see cref="F:System.String.Empty" />
    ///  如果未找到匹配的命名空间节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不定位在元素节点上。
    ///</returns>
    function GetNamespace(name: string): string;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到匹配的第一个命名空间节点 <see cref="T:System.Xml.XPath.XPathNamespaceScope" />
    ///  指定。
    ///</summary>
    ///  <param name="namespaceScope"><see cref="T:System.Xml.XPath.XPathNamespaceScope" />
    ///  值，该值描述命名空间范围。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到第一个命名空间节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToFirstNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到下一个命名空间节点匹配 <see cref="T:System.Xml.XPath.XPathNamespaceScope" />
    ///  指定。
    ///</summary>
    ///  <param name="namespaceScope"><see cref="T:System.Xml.XPath.XPathNamespaceScope" />
    ///  值，该值描述命名空间范围。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个命名空间节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNextNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    ///<summary>
    ///  当在派生类中重写时，会将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动至当前节点的下一个同级节点。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个同级节点，则为 <see langword="true" />
    ///  ；如果没有更多同级节点或如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前位于属性节点上，则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNext: Boolean; overload;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  至当前节点的上一个同级节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到上一个同级节点; 否则为 <see langword="false" />
    ///  是否没有上一个同级节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前定位在属性节点上。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToPrevious: Boolean;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到当前节点的第一个子节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到当前节点的第一个子节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToFirstChild: Boolean;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  至当前节点的父节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到当前节点的父节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToParent: Boolean;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到与指定的同一位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///  <param name="other"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  定位你想要将移动到的节点上。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到与指定的位置相同 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveTo(other: DNXPathNavigator): Boolean;
    ///<summary>
    ///  当在派生类中重写，将移动到具有类型的属性的节点 ID 其值匹配指定 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="id">
    ///  一个 <see cref="T:System.String" />
    ///  表示 ID 想要移动的节点的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功移动; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  , ，则导航器的位置保持不变。
    ///</returns>
    function MoveToId(id: string): Boolean;
    ///<summary>
    ///  当在派生类中重写，确定是否当前 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  于与指定的相同位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///  <param name="other"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  要与此 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象具有相同的位置; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsSamePosition(other: DNXPathNavigator): Boolean;
    ///<summary>
    ///  将当前的位置进行比较 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用的位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  指定。
    ///</summary>
    ///  <param name="nav"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  要与其进行比较。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeOrder" />
    ///  值，该值表示两个的相对位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</returns>
    function ComparePosition(nav: DNXPathNavigator): DNXmlNodeOrder;
    ///<summary>
    ///  验证中的 XML 数据 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  符合提供 XML 架构定义语言 (XSD) 架构。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  包含用来验证中包含的 XML 数据的架构 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///  <param name="validationEventHandler"><see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  用于接收有关架构验证警告和错误的信息。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果未发生任何架构验证错误;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  出现架构验证错误，并且不 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  指定要处理验证错误。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  定位在节点上，不是元素、 特性或根节点或者没有类型信息来执行验证。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
    ///  调用方法时使用 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  参数时 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不定位在 XML 数据的根节点上。
    ///</exception>
    function CheckValidity(schemas: DNXmlSchemaSet; validationEventHandler: DNValidationEventHandler): Boolean;
    ///<summary>
    ///  返回与指定的类型的项的值。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的项值的类型。
    ///</param>
    ///<returns>
    ///  将项目作为请求的类型的值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  项的值不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    function ValueAs(returnType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前节点是否表示一个 XPath 节点。
    ///</summary>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsNode: Boolean read get_IsNode;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  当前节点的信息。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象; 默认值是 <see langword="null" />
    ///  。
    ///</returns>
    property XmlType: DNXmlSchemaType read get_XmlType;
    ///<summary>
    ///  获取作为最合适的 .NET Framework 类型的已装箱对象的当前节点。
    ///</summary>
    ///<returns>
    ///  作为最合适的 .NET Framework 类型的已装箱对象的当前节点。
    ///</returns>
    property TypedValue: DDN.mscorlib.DNObject read get_TypedValue;
    ///<summary>
    ///  获取当前节点的 .NET Framework <see cref="T:System.Type" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的 .NET Framework <see cref="T:System.Type" />
    ///  。
    ///  默认值为 <see cref="T:System.String" />
    ///  。
    ///</returns>
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    ///<summary>
    ///  获取当前节点的值作为 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的值作为 <see cref="T:System.Boolean" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的字符串值不能转换为 <see cref="T:System.Boolean" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Boolean" />
    ///  无效。
    ///</exception>
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    ///<summary>
    ///  获取当前节点的值作为 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的值作为 <see cref="T:System.DateTime" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的字符串值不能转换为 <see cref="T:System.DateTime" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.DateTime" />
    ///  无效。
    ///</exception>
    property ValueAsDateTime: DDN.mscorlib.DNDateTime read get_ValueAsDateTime;
    ///<summary>
    ///  获取当前节点的值作为 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的值作为 <see cref="T:System.Double" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的字符串值不能转换为 <see cref="T:System.Double" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Double" />
    ///  无效。
    ///</exception>
    property ValueAsDouble: Double read get_ValueAsDouble;
    ///<summary>
    ///  获取当前节点的值作为 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的值作为 <see cref="T:System.Int32" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的字符串值不能转换为 <see cref="T:System.Int32" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Int32" />
    ///  无效。
    ///</exception>
    property ValueAsInt: Int32 read get_ValueAsInt;
    ///<summary>
    ///  获取当前节点的值作为 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的值作为 <see cref="T:System.Int64" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的字符串值不能转换为 <see cref="T:System.Int64" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Int64" />
    ///  无效。
    ///</exception>
    property ValueAsLong: Int64 read get_ValueAsLong;
    ///<summary>
    ///  当在派生类中重写时获取 <see cref="T:System.Xml.XmlNameTable" />
    ///  的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNameTable" />
    ///  对象，它使你能够获取的原子化的版本 <see cref="T:System.String" />
    ///  XML 文档中。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  当在派生类中重写时，获取当前节点的 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示当前节点其中一个 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  值。
    ///</returns>
    property NodeType: DNXPathNodeType read get_NodeType;
    ///<summary>
    ///  在派生类中被重写时，获取当前节点的 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />
    ///  （不带任何命名空间前缀）。
    ///</summary>
    ///<returns>
    ///  包含当前节点本地名称的 <see cref="T:System.String" />
    ///  ；如果当前节点没有名称（例如，文本或注释节点），则为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的限定名。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含当前节点的限定 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />
    ///  ；如果当前节点没有名称（例如，文本或注释节点），则为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，它包含当前节点的命名空间 URI；如果当前节点没有命名空间 URI，则为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  当在派生类中被重写时，获取与当前节点关联的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  它包含与当前节点关联的命名空间前缀。
    ///</returns>
    property Prefix: string read get_Prefix;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  从其加载节点，该位置或 <see cref="F:System.String.Empty" />
    ///  如果没有值。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  当在派生类中被重写时，获取一个值，该值指示当前节点是否是一个没有结束元素标记的空元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前节点是一个空的元素;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    ///<summary>
    ///  获取 xml:lang 当前节点范围。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含值的 xml:lang 作用域，或 <see cref="F:System.String.Empty" />
    ///  如果当前节点没有任何 xml:lang 作用域返回的值。
    ///</returns>
    property XmlLang: string read get_XmlLang;
    ///<summary>
    ///  使用 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  实现提供"虚拟化"XML 查看在存储区，以提供对基础对象的访问。
    ///</summary>
    ///<returns>
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property UnderlyingObject: DDN.mscorlib.DNObject read get_UnderlyingObject;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否有任何属性。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果当前节点具有属性，则将返回 <see langword="false" />
    ///  如果当前节点不具有任何属性，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不定位在元素节点上。
    ///</returns>
    property HasAttributes: Boolean read get_HasAttributes;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否具有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前节点具有任何子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildren: Boolean read get_HasChildren;
    ///<summary>
    ///  获取作为架构验证结果分配给当前节点的架构信息。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含当前节点的架构信息。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  是否可以编辑基础 XML 数据。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  可以编辑基础 XML 数据，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanEdit: Boolean read get_CanEdit;
    ///<summary>
    ///  获取或设置表示当前节点及其子节点的开始标记及结束标记的标记。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含表示当前节点及其子节点的开始标记及结束标记的标记。
    ///</returns>
    property OuterXml: string read get_OuterXml write set_OuterXml;
    ///<summary>
    ///  获取或设置表示当前节点的子节点标记。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含当前节点的子节点的标记。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  无法设置 <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" />
    ///  属性。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  当在派生类中重写时获取 <see langword="string" />
    ///  项的值。
    ///</summary>
    ///<returns><see langword="string" />
    ///  项的值。
    ///</returns>
    property Value: string read get_Value;
  end;

  TDNXPathNavigator = class(TDNGenericImport<DNXPathNavigatorClass, DNXPathNavigator>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNodeIteratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D5B45F05-6AFE-58F0-9E23-31308022884E}']
  end;

  ///<summary>
  ///  在选定节点集上提供一个迭代器。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathNodeIterator')]
  DNXPathNodeIterator = interface(DDN.mscorlib.DNObject)
  ['{181EDCFA-EB65-387B-9544-B953DD6A55D0}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;
    function get_CurrentPosition: Int32;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Collections.IEnumerator" />
    ///  要循环访问所选的节点集对象。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  要循环访问所选的节点集对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  当在派生类中重写时返回此克隆 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象克隆 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</returns>
    function Clone: DNXPathNodeIterator;
    ///<summary>
    ///  在派生类中重写时，将 <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" />
    ///  属性返回的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象移至选定节点集中的下一个节点。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象已移至下一个节点，则为 <see langword="true" />
    ///  ；如果没有其他选定节点，则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  在派生类中重写时，获取此 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，它定位在当前上下文节点上。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，定位在从中选择节点集的上下文节点上。
    ///  必须调用 <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" />
    ///  方法将 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  移至所选集中的第一个节点。
    ///</returns>
    property Current: DNXPathNavigator read get_Current;
    ///<summary>
    ///  当在派生类中重写时获取所选组节点中的当前位置的索引。
    ///</summary>
    ///<returns>
    ///  当前的位置的索引。
    ///</returns>
    property CurrentPosition: Int32 read get_CurrentPosition;
    ///<summary>
    ///  获取最后一个节点的索引中所选节点集。
    ///</summary>
    ///<returns>
    ///  所选节点，则为 0，如果没有选定的节点集中的最后一个节点的索引。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXPathNodeIterator = class(TDNGenericImport<DNXPathNodeIteratorClass, DNXPathNodeIterator>) end;


implementation

end.
