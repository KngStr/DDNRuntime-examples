//----------------------------------------------------------------------------
//  System.Data.Common.dll: System.Data.Common, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Data.Common
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Data.Common;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.ComponentModel.Primitives,
  DDNC.System.ComponentModel.TypeConverter,
  DDNC.System.Private.Xml,
  DDNC.System.ObjectModel,
  DDNC.System.Transactions.Local;

type

{ enums }

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.AcceptRejectRule')]
  DNAcceptRejectRule = type Integer;
  DNAcceptRejectRuleHelper = record helper for DNAcceptRejectRule
  public const
    None = 0;
    Cascade = 1;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.CommandBehavior')]
  DNCommandBehavior = type Integer;
  DNCommandBehaviorHelper = record helper for DNCommandBehavior
  public const
    Default_ = 0;
    SingleResult = 1;
    SchemaOnly = 2;
    KeyInfo = 4;
    SingleRow = 8;
    SequentialAccess = 16;
    CloseConnection = 32;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.CommandType')]
  DNCommandType = type Integer;
  DNCommandTypeHelper = record helper for DNCommandType
  public const
    Text = 1;
    StoredProcedure = 4;
    TableDirect = 512;
  end;


  //-------------namespace: System.Data.Common----------------
  [DNTypeName('System.Data.Common.CatalogLocation')]
  DNCatalogLocation = type Integer;
  DNCatalogLocationHelper = record helper for DNCatalogLocation
  public const
    Start = 1;
    End_ = 2;
  end;


  //-------------namespace: System.Data.Common----------------
  [DNTypeName('System.Data.Common.GroupByBehavior')]
  DNGroupByBehavior = type Integer;
  DNGroupByBehaviorHelper = record helper for DNGroupByBehavior
  public const
    Unknown = 0;
    NotSupported = 1;
    Unrelated = 2;
    MustContainAll = 3;
    ExactMatch = 4;
  end;


  //-------------namespace: System.Data.Common----------------
  [DNTypeName('System.Data.Common.IdentifierCase')]
  DNIdentifierCase = type Integer;
  DNIdentifierCaseHelper = record helper for DNIdentifierCase
  public const
    Unknown = 0;
    Insensitive = 1;
    Sensitive = 2;
  end;


  //-------------namespace: System.Data.Common----------------
  [DNTypeName('System.Data.Common.SupportedJoinOperators')]
  DNSupportedJoinOperators = type Integer;
  DNSupportedJoinOperatorsHelper = record helper for DNSupportedJoinOperators
  public const
    None = 0;
    Inner = 1;
    LeftOuter = 2;
    RightOuter = 4;
    FullOuter = 8;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.ConflictOption')]
  DNConflictOption = type Integer;
  DNConflictOptionHelper = record helper for DNConflictOption
  public const
    CompareAllSearchableValues = 1;
    CompareRowVersion = 2;
    OverwriteChanges = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.ConnectionState')]
  DNConnectionState = type Integer;
  DNConnectionStateHelper = record helper for DNConnectionState
  public const
    Closed = 0;
    Open = 1;
    Connecting = 2;
    Executing = 4;
    Fetching = 8;
    Broken = 16;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DataRowAction')]
  DNDataRowAction = type Integer;
  DNDataRowActionHelper = record helper for DNDataRowAction
  public const
    Nothing = 0;
    Delete = 1;
    Change = 2;
    Rollback = 4;
    Commit = 8;
    Add = 16;
    ChangeOriginal = 32;
    ChangeCurrentAndOriginal = 64;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DataRowState')]
  DNDataRowState = type Integer;
  DNDataRowStateHelper = record helper for DNDataRowState
  public const
    Detached = 1;
    Unchanged = 2;
    Added = 4;
    Deleted = 8;
    Modified = 16;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DataRowVersion')]
  DNDataRowVersion = type Integer;
  DNDataRowVersionHelper = record helper for DNDataRowVersion
  public const
    Original = 256;
    Current = 512;
    Proposed = 1024;
    Default_ = 1536;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DataSetDateTime')]
  DNDataSetDateTime = type Integer;
  DNDataSetDateTimeHelper = record helper for DNDataSetDateTime
  public const
    Local = 1;
    Unspecified = 2;
    UnspecifiedLocal = 3;
    Utc = 4;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DataViewRowState')]
  DNDataViewRowState = type Integer;
  DNDataViewRowStateHelper = record helper for DNDataViewRowState
  public const
    None = 0;
    Unchanged = 2;
    Added = 4;
    Deleted = 8;
    ModifiedCurrent = 16;
    CurrentRows = 22;
    ModifiedOriginal = 32;
    OriginalRows = 42;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DbType')]
  DNDbType = type Integer;
  DNDbTypeHelper = record helper for DNDbType
  public const
    AnsiString = 0;
    Binary = 1;
    Byte = 2;
    Boolean = 3;
    Currency = 4;
    Date = 5;
    DateTime = 6;
    Decimal = 7;
    Double = 8;
    Guid = 9;
    Int16 = 10;
    Int32 = 11;
    Int64 = 12;
    Object_ = 13;
    SByte = 14;
    Single = 15;
    String_ = 16;
    Time = 17;
    UInt16 = 18;
    UInt32 = 19;
    UInt64 = 20;
    VarNumeric = 21;
    AnsiStringFixedLength = 22;
    StringFixedLength = 23;
    Xml = 25;
    DateTime2 = 26;
    DateTimeOffset = 27;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IsolationLevel')]
  DNIsolationLevel = type Integer;
  DNIsolationLevelHelper = record helper for DNIsolationLevel
  public const
    Chaos = 16;
    ReadUncommitted = 256;
    ReadCommitted = 4096;
    RepeatableRead = 65536;
    Serializable = 1048576;
    Snapshot = 16777216;
    Unspecified = -1;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.KeyRestrictionBehavior')]
  DNKeyRestrictionBehavior = type Integer;
  DNKeyRestrictionBehaviorHelper = record helper for DNKeyRestrictionBehavior
  public const
    AllowOnly = 0;
    PreventUsage = 1;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.LoadOption')]
  DNLoadOption = type Integer;
  DNLoadOptionHelper = record helper for DNLoadOption
  public const
    OverwriteChanges = 1;
    PreserveChanges = 2;
    Upsert = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.MappingType')]
  DNMappingType = type Integer;
  DNMappingTypeHelper = record helper for DNMappingType
  public const
    Element = 1;
    Attribute = 2;
    SimpleContent = 3;
    Hidden = 4;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.MissingMappingAction')]
  DNMissingMappingAction = type Integer;
  DNMissingMappingActionHelper = record helper for DNMissingMappingAction
  public const
    Passthrough = 1;
    Ignore = 2;
    Error = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.MissingSchemaAction')]
  DNMissingSchemaAction = type Integer;
  DNMissingSchemaActionHelper = record helper for DNMissingSchemaAction
  public const
    Add = 1;
    Ignore = 2;
    Error = 3;
    AddWithKey = 4;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.ParameterDirection')]
  DNParameterDirection = type Integer;
  DNParameterDirectionHelper = record helper for DNParameterDirection
  public const
    Input = 1;
    Output = 2;
    InputOutput = 3;
    ReturnValue = 6;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.Rule')]
  DNRule = type Integer;
  DNRuleHelper = record helper for DNRule
  public const
    None = 0;
    Cascade = 1;
    SetNull = 2;
    SetDefault = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.SchemaSerializationMode')]
  DNSchemaSerializationMode = type Integer;
  DNSchemaSerializationModeHelper = record helper for DNSchemaSerializationMode
  public const
    IncludeSchema = 1;
    ExcludeSchema = 2;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.SchemaType')]
  DNSchemaType = type Integer;
  DNSchemaTypeHelper = record helper for DNSchemaType
  public const
    Source = 1;
    Mapped = 2;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.SerializationFormat')]
  DNSerializationFormat = type Integer;
  DNSerializationFormatHelper = record helper for DNSerializationFormat
  public const
    Xml = 0;
    Binary = 1;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.SqlDbType')]
  DNSqlDbType = type Integer;
  DNSqlDbTypeHelper = record helper for DNSqlDbType
  public const
    BigInt = 0;
    Binary = 1;
    Bit = 2;
    Char = 3;
    DateTime = 4;
    Decimal = 5;
    Float = 6;
    Image = 7;
    Int = 8;
    Money = 9;
    NChar = 10;
    NText = 11;
    NVarChar = 12;
    Real = 13;
    UniqueIdentifier = 14;
    SmallDateTime = 15;
    SmallInt = 16;
    SmallMoney = 17;
    Text = 18;
    Timestamp = 19;
    TinyInt = 20;
    VarBinary = 21;
    VarChar = 22;
    Variant = 23;
    Xml = 25;
    Udt = 29;
    Structured = 30;
    Date = 31;
    Time = 32;
    DateTime2 = 33;
    DateTimeOffset = 34;
  end;


  //-------------namespace: System.Data.SqlTypes----------------
  [DNTypeName('System.Data.SqlTypes.SqlCompareOptions')]
  DNSqlCompareOptions = type Integer;
  DNSqlCompareOptionsHelper = record helper for DNSqlCompareOptions
  public const
    None = 0;
    IgnoreCase = 1;
    IgnoreNonSpace = 2;
    IgnoreKanaType = 8;
    IgnoreWidth = 16;
    BinarySort2 = 16384;
    BinarySort = 32768;
  end;


  //-------------namespace: System.Data.SqlTypes----------------
  [DNTypeName('System.Data.SqlTypes.StorageState')]
  DNStorageState = type Integer;
  DNStorageStateHelper = record helper for DNStorageState
  public const
    Buffer = 0;
    Stream = 1;
    UnmanagedBuffer = 2;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.StatementType')]
  DNStatementType = type Integer;
  DNStatementTypeHelper = record helper for DNStatementType
  public const
    Select = 0;
    Insert = 1;
    Update = 2;
    Delete = 3;
    Batch = 4;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.UpdateRowSource')]
  DNUpdateRowSource = type Integer;
  DNUpdateRowSourceHelper = record helper for DNUpdateRowSource
  public const
    None = 0;
    OutputParameters = 1;
    FirstReturnedRecord = 2;
    Both = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.UpdateStatus')]
  DNUpdateStatus = type Integer;
  DNUpdateStatusHelper = record helper for DNUpdateStatus
  public const
    Continue_ = 0;
    ErrorsOccurred = 1;
    SkipCurrentRow = 2;
    SkipAllRemainingRows = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.XmlReadMode')]
  DNXmlReadMode = type Integer;
  DNXmlReadModeHelper = record helper for DNXmlReadMode
  public const
    Auto = 0;
    ReadSchema = 1;
    IgnoreSchema = 2;
    InferSchema = 3;
    DiffGram = 4;
    Fragment = 5;
    InferTypedSchema = 6;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.XmlWriteMode')]
  DNXmlWriteMode = type Integer;
  DNXmlWriteModeHelper = record helper for DNXmlWriteMode
  public const
    WriteSchema = 0;
    IgnoreSchema = 1;
    DiffGram = 2;
  end;




type


{ declares }

  DNIColumnMappingCollection = interface; // type: System.Data.IColumnMappingCollection, namespace: System.Data
  DNIDataParameterCollection = interface; // type: System.Data.IDataParameterCollection, namespace: System.Data
  DNITableMappingCollection = interface; // type: System.Data.ITableMappingCollection, namespace: System.Data
  DNIDbColumnSchemaGenerator = interface; // type: System.Data.Common.IDbColumnSchemaGenerator, namespace: System.Data.Common
  DNIColumnMapping = interface; // type: System.Data.IColumnMapping, namespace: System.Data
  DNIDataAdapter = interface; // type: System.Data.IDataAdapter, namespace: System.Data
  DNIDbDataAdapter = interface; // type: System.Data.IDbDataAdapter, namespace: System.Data
  DNIDataParameter = interface; // type: System.Data.IDataParameter, namespace: System.Data
  DNIDbDataParameter = interface; // type: System.Data.IDbDataParameter, namespace: System.Data
  DNIDataRecord = interface; // type: System.Data.IDataRecord, namespace: System.Data
  DNITableMapping = interface; // type: System.Data.ITableMapping, namespace: System.Data
  DNINullable = interface; // type: System.Data.SqlTypes.INullable, namespace: System.Data.SqlTypes
  DNIDataReader = interface; // type: System.Data.IDataReader, namespace: System.Data
  DNIDbCommand = interface; // type: System.Data.IDbCommand, namespace: System.Data
  DNIDbConnection = interface; // type: System.Data.IDbConnection, namespace: System.Data
  DNIDbTransaction = interface; // type: System.Data.IDbTransaction, namespace: System.Data
  DNDataSysDescriptionAttribute = interface; // type: System.Data.DataSysDescriptionAttribute, namespace: System.Data
  DNDbProviderSpecificTypePropertyAttribute = interface; // type: System.Data.Common.DbProviderSpecificTypePropertyAttribute, namespace: System.Data.Common
  DNPropertyCollection = interface; // type: System.Data.PropertyCollection, namespace: System.Data
  DNDataColumn = interface; // type: System.Data.DataColumn, namespace: System.Data
  DNDataSet = interface; // type: System.Data.DataSet, namespace: System.Data
  DNDataTable = interface; // type: System.Data.DataTable, namespace: System.Data
  DNTypedTableBase<T> = interface; // type: System.Data.TypedTableBase`1, namespace: System.Data
  DNDataView = interface; // type: System.Data.DataView, namespace: System.Data
  DNDataViewManager = interface; // type: System.Data.DataViewManager, namespace: System.Data
  DNDbColumn = interface; // type: System.Data.Common.DbColumn, namespace: System.Data.Common
  DNDbConnectionStringBuilder = interface; // type: System.Data.Common.DbConnectionStringBuilder, namespace: System.Data.Common
  DNDbDataReaderExtensions = interface; // type: System.Data.Common.DbDataReaderExtensions, namespace: System.Data.Common
  DNDbDataRecord = interface; // type: System.Data.Common.DbDataRecord, namespace: System.Data.Common
  DNDbDataSourceEnumerator = interface; // type: System.Data.Common.DbDataSourceEnumerator, namespace: System.Data.Common
  DNDbEnumerator = interface; // type: System.Data.Common.DbEnumerator, namespace: System.Data.Common
  DNDbMetaDataCollectionNames = interface; // type: System.Data.Common.DbMetaDataCollectionNames, namespace: System.Data.Common
  DNDbMetaDataColumnNames = interface; // type: System.Data.Common.DbMetaDataColumnNames, namespace: System.Data.Common
  DNDbProviderFactories = interface; // type: System.Data.Common.DbProviderFactories, namespace: System.Data.Common
  DNDbProviderFactory = interface; // type: System.Data.Common.DbProviderFactory, namespace: System.Data.Common
  DNSchemaTableColumn = interface; // type: System.Data.Common.SchemaTableColumn, namespace: System.Data.Common
  DNSchemaTableOptionalColumn = interface; // type: System.Data.Common.SchemaTableOptionalColumn, namespace: System.Data.Common
  DNConstraint = interface; // type: System.Data.Constraint, namespace: System.Data
  DNForeignKeyConstraint = interface; // type: System.Data.ForeignKeyConstraint, namespace: System.Data
  DNUniqueConstraint = interface; // type: System.Data.UniqueConstraint, namespace: System.Data
  DNDataReaderExtensions = interface; // type: System.Data.DataReaderExtensions, namespace: System.Data
  DNDataRelation = interface; // type: System.Data.DataRelation, namespace: System.Data
  DNDataRow = interface; // type: System.Data.DataRow, namespace: System.Data
  DNDataRowBuilder = interface; // type: System.Data.DataRowBuilder, namespace: System.Data
  DNDataRowComparer<TRow> = interface; // type: System.Data.DataRowComparer`1, namespace: System.Data
  DNDataRowComparer = interface; // type: System.Data.DataRowComparer, namespace: System.Data
  DNDataRowExtensions = interface; // type: System.Data.DataRowExtensions, namespace: System.Data
  DNDataRowView = interface; // type: System.Data.DataRowView, namespace: System.Data
  DNDataTableExtensions = interface; // type: System.Data.DataTableExtensions, namespace: System.Data
  DNDataViewSetting = interface; // type: System.Data.DataViewSetting, namespace: System.Data
  DNDataViewSettingCollection = interface; // type: System.Data.DataViewSettingCollection, namespace: System.Data
  DNEnumerableRowCollection = interface; // type: System.Data.EnumerableRowCollection, namespace: System.Data
  DNEnumerableRowCollection<TRow> = interface; // type: System.Data.EnumerableRowCollection`1, namespace: System.Data
  DNOrderedEnumerableRowCollection<TRow> = interface; // type: System.Data.OrderedEnumerableRowCollection`1, namespace: System.Data
  DNEnumerableRowCollectionExtensions = interface; // type: System.Data.EnumerableRowCollectionExtensions, namespace: System.Data
  DNInternalDataCollectionBase = interface; // type: System.Data.InternalDataCollectionBase, namespace: System.Data
  DNConstraintCollection = interface; // type: System.Data.ConstraintCollection, namespace: System.Data
  DNDataColumnCollection = interface; // type: System.Data.DataColumnCollection, namespace: System.Data
  DNDataRelationCollection = interface; // type: System.Data.DataRelationCollection, namespace: System.Data
  DNDataRowCollection = interface; // type: System.Data.DataRowCollection, namespace: System.Data
  DNDataTableCollection = interface; // type: System.Data.DataTableCollection, namespace: System.Data
  DNSqlBytes = interface; // type: System.Data.SqlTypes.SqlBytes, namespace: System.Data.SqlTypes
  DNSqlChars = interface; // type: System.Data.SqlTypes.SqlChars, namespace: System.Data.SqlTypes
  DNSqlXml = interface; // type: System.Data.SqlTypes.SqlXml, namespace: System.Data.SqlTypes
  DNTypedTableBaseExtensions = interface; // type: System.Data.TypedTableBaseExtensions, namespace: System.Data
  DNRowUpdatedEventArgs = interface; // type: System.Data.Common.RowUpdatedEventArgs, namespace: System.Data.Common
  DNRowUpdatingEventArgs = interface; // type: System.Data.Common.RowUpdatingEventArgs, namespace: System.Data.Common
  DNDataColumnChangeEventArgs = interface; // type: System.Data.DataColumnChangeEventArgs, namespace: System.Data
  DNDataRowChangeEventArgs = interface; // type: System.Data.DataRowChangeEventArgs, namespace: System.Data
  DNDataTableClearEventArgs = interface; // type: System.Data.DataTableClearEventArgs, namespace: System.Data
  DNDataTableNewRowEventArgs = interface; // type: System.Data.DataTableNewRowEventArgs, namespace: System.Data
  DNFillErrorEventArgs = interface; // type: System.Data.FillErrorEventArgs, namespace: System.Data
  DNMergeFailedEventArgs = interface; // type: System.Data.MergeFailedEventArgs, namespace: System.Data
  DNStateChangeEventArgs = interface; // type: System.Data.StateChangeEventArgs, namespace: System.Data
  DNStatementCompletedEventArgs = interface; // type: System.Data.StatementCompletedEventArgs, namespace: System.Data
  DNDataException = interface; // type: System.Data.DataException, namespace: System.Data
  DNConstraintException = interface; // type: System.Data.ConstraintException, namespace: System.Data
  DNDeletedRowInaccessibleException = interface; // type: System.Data.DeletedRowInaccessibleException, namespace: System.Data
  DNDuplicateNameException = interface; // type: System.Data.DuplicateNameException, namespace: System.Data
  DNInRowChangingEventException = interface; // type: System.Data.InRowChangingEventException, namespace: System.Data
  DNInvalidConstraintException = interface; // type: System.Data.InvalidConstraintException, namespace: System.Data
  DNInvalidExpressionException = interface; // type: System.Data.InvalidExpressionException, namespace: System.Data
  DNEvaluateException = interface; // type: System.Data.EvaluateException, namespace: System.Data
  DNSyntaxErrorException = interface; // type: System.Data.SyntaxErrorException, namespace: System.Data
  DNMissingPrimaryKeyException = interface; // type: System.Data.MissingPrimaryKeyException, namespace: System.Data
  DNNoNullAllowedException = interface; // type: System.Data.NoNullAllowedException, namespace: System.Data
  DNReadOnlyException = interface; // type: System.Data.ReadOnlyException, namespace: System.Data
  DNRowNotInTableException = interface; // type: System.Data.RowNotInTableException, namespace: System.Data
  DNStrongTypingException = interface; // type: System.Data.StrongTypingException, namespace: System.Data
  DNVersionNotFoundException = interface; // type: System.Data.VersionNotFoundException, namespace: System.Data
  DNDBConcurrencyException = interface; // type: System.Data.DBConcurrencyException, namespace: System.Data
  DNSqlTypeException = interface; // type: System.Data.SqlTypes.SqlTypeException, namespace: System.Data.SqlTypes
  DNSqlAlreadyFilledException = interface; // type: System.Data.SqlTypes.SqlAlreadyFilledException, namespace: System.Data.SqlTypes
  DNSqlNotFilledException = interface; // type: System.Data.SqlTypes.SqlNotFilledException, namespace: System.Data.SqlTypes
  DNSqlNullValueException = interface; // type: System.Data.SqlTypes.SqlNullValueException, namespace: System.Data.SqlTypes
  DNSqlTruncateException = interface; // type: System.Data.SqlTypes.SqlTruncateException, namespace: System.Data.SqlTypes
  DNDbException = interface; // type: System.Data.Common.DbException, namespace: System.Data.Common
  DNDataAdapter = interface; // type: System.Data.Common.DataAdapter, namespace: System.Data.Common
  DNDbDataAdapter = interface; // type: System.Data.Common.DbDataAdapter, namespace: System.Data.Common
  DNDbCommand = interface; // type: System.Data.Common.DbCommand, namespace: System.Data.Common
  DNDbCommandBuilder = interface; // type: System.Data.Common.DbCommandBuilder, namespace: System.Data.Common
  DNDbConnection = interface; // type: System.Data.Common.DbConnection, namespace: System.Data.Common
  DNDataColumnMapping = interface; // type: System.Data.Common.DataColumnMapping, namespace: System.Data.Common
  DNDataColumnMappingCollection = interface; // type: System.Data.Common.DataColumnMappingCollection, namespace: System.Data.Common
  DNDataTableMapping = interface; // type: System.Data.Common.DataTableMapping, namespace: System.Data.Common
  DNDataTableMappingCollection = interface; // type: System.Data.Common.DataTableMappingCollection, namespace: System.Data.Common
  DNDbDataReader = interface; // type: System.Data.Common.DbDataReader, namespace: System.Data.Common
  DNDataTableReader = interface; // type: System.Data.DataTableReader, namespace: System.Data
  DNDbParameter = interface; // type: System.Data.Common.DbParameter, namespace: System.Data.Common
  DNDbParameterCollection = interface; // type: System.Data.Common.DbParameterCollection, namespace: System.Data.Common
  DNDbTransaction = interface; // type: System.Data.Common.DbTransaction, namespace: System.Data.Common
  DNSqlBinary = interface; // type: System.Data.SqlTypes.SqlBinary, namespace: System.Data.SqlTypes
  DNSqlBoolean = interface; // type: System.Data.SqlTypes.SqlBoolean, namespace: System.Data.SqlTypes
  DNSqlByte = interface; // type: System.Data.SqlTypes.SqlByte, namespace: System.Data.SqlTypes
  DNSqlDateTime = interface; // type: System.Data.SqlTypes.SqlDateTime, namespace: System.Data.SqlTypes
  DNSqlDecimal = interface; // type: System.Data.SqlTypes.SqlDecimal, namespace: System.Data.SqlTypes
  DNSqlDouble = interface; // type: System.Data.SqlTypes.SqlDouble, namespace: System.Data.SqlTypes
  DNSqlGuid = interface; // type: System.Data.SqlTypes.SqlGuid, namespace: System.Data.SqlTypes
  DNSqlInt16 = interface; // type: System.Data.SqlTypes.SqlInt16, namespace: System.Data.SqlTypes
  DNSqlInt32 = interface; // type: System.Data.SqlTypes.SqlInt32, namespace: System.Data.SqlTypes
  DNSqlInt64 = interface; // type: System.Data.SqlTypes.SqlInt64, namespace: System.Data.SqlTypes
  DNSqlMoney = interface; // type: System.Data.SqlTypes.SqlMoney, namespace: System.Data.SqlTypes
  DNSqlSingle = interface; // type: System.Data.SqlTypes.SqlSingle, namespace: System.Data.SqlTypes
  DNSqlString = interface; // type: System.Data.SqlTypes.SqlString, namespace: System.Data.SqlTypes
  DNXmlDataDocument = interface; // type: System.Xml.XmlDataDocument, namespace: System.Xml

{ delegates }

  [DNTypeName('System.Data.DataColumnChangeEventHandler')]
  DNDataColumnChangeEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNDataColumnChangeEventArgs) of object;

  [DNTypeName('System.Data.DataRowChangeEventHandler')]
  DNDataRowChangeEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNDataRowChangeEventArgs) of object;

  [DNTypeName('System.Data.DataTableClearEventHandler')]
  DNDataTableClearEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNDataTableClearEventArgs) of object;

  [DNTypeName('System.Data.DataTableNewRowEventHandler')]
  DNDataTableNewRowEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNDataTableNewRowEventArgs) of object;

  [DNTypeName('System.Data.FillErrorEventHandler')]
  DNFillErrorEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNFillErrorEventArgs) of object;

  [DNTypeName('System.Data.MergeFailedEventHandler')]
  DNMergeFailedEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNMergeFailedEventArgs) of object;

  [DNTypeName('System.Data.StateChangeEventHandler')]
  DNStateChangeEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNStateChangeEventArgs) of object;

  [DNTypeName('System.Data.StatementCompletedEventHandler')]
  DNStatementCompletedEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNStatementCompletedEventArgs) of object;




{ objects }

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IColumnMappingCollection')]
  DNIColumnMappingCollection = interface(DDNC.System.Private.CoreLib.DNIList)
  ['{FEC17537-6149-34F2-B91F-9FB3AF6B2546}']
  { getters & setters } 

    function get_Item(index: string): DDNC.System.Private.CoreLib.DNObject;
    procedure set_Item(index: string; value: DDNC.System.Private.CoreLib.DNObject);

  { methods } 

    function Add(sourceColumnName: string; dataSetColumnName: string): DNIColumnMapping;
    function &Contains(sourceColumnName: string): Boolean;
    function GetByDataSetColumn(dataSetColumnName: string): DNIColumnMapping;
    function IndexOf(sourceColumnName: string): Int32;
    procedure RemoveAt(sourceColumnName: string);

  { propertys } 

    property Item[index: string]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDataParameterCollection')]
  DNIDataParameterCollection = interface(DDNC.System.Private.CoreLib.DNIList)
  ['{B490F13C-7E82-3A54-A31E-DFA010A1AFFE}']
  { getters & setters } 

    function get_Item(parameterName: string): DDNC.System.Private.CoreLib.DNObject;
    procedure set_Item(parameterName: string; value: DDNC.System.Private.CoreLib.DNObject);

  { methods } 

    function &Contains(parameterName: string): Boolean;
    function IndexOf(parameterName: string): Int32;
    procedure RemoveAt(parameterName: string);

  { propertys } 

    property Item[parameterName: string]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.ITableMappingCollection')]
  DNITableMappingCollection = interface(DDNC.System.Private.CoreLib.DNIList)
  ['{F11B7EBC-377D-3EF7-B126-CC26D43C2ED8}']
  { getters & setters } 

    function get_Item(index: string): DDNC.System.Private.CoreLib.DNObject;
    procedure set_Item(index: string; value: DDNC.System.Private.CoreLib.DNObject);

  { methods } 

    function Add(sourceTableName: string; dataSetTableName: string): DNITableMapping;
    function &Contains(sourceTableName: string): Boolean;
    function GetByDataSetTable(dataSetTableName: string): DNITableMapping;
    function IndexOf(sourceTableName: string): Int32;
    procedure RemoveAt(sourceTableName: string);

  { propertys } 

    property Item[index: string]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Data.Common----------------
  [DNTypeName('System.Data.Common.IDbColumnSchemaGenerator')]
  DNIDbColumnSchemaGenerator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{59AED2D8-A48C-3E29-AB58-F5400CDAF8F2}']
  { methods } 

    function GetColumnSchema: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNDbColumn>;

  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IColumnMapping')]
  DNIColumnMapping = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7701EF45-1147-36B5-B474-23C21843AFC0}']
  { getters & setters } 

    function get_DataSetColumn: string;
    procedure set_DataSetColumn(value: string);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);

  { propertys } 

    property DataSetColumn: string read get_DataSetColumn write set_DataSetColumn;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDataAdapter')]
  DNIDataAdapter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8883ACAD-6616-3F54-AD75-0BB5F0D85070}']
  { getters & setters } 

    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_TableMappings: DNITableMappingCollection;

  { methods } 

    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>;
    function Fill(dataSet: DNDataSet): Int32;
    function GetFillParameters: TArray<DNIDataParameter>;
    function Update(dataSet: DNDataSet): Int32;

  { propertys } 

    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property TableMappings: DNITableMappingCollection read get_TableMappings;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDbDataAdapter')]
  DNIDbDataAdapter = interface(DNIDataAdapter)
  ['{FA46C6A3-7D70-3321-AAA3-148BDF7AB779}']
  { getters & setters } 

    function get_SelectCommand: DNIDbCommand;
    procedure set_SelectCommand(value: DNIDbCommand);
    function get_InsertCommand: DNIDbCommand;
    procedure set_InsertCommand(value: DNIDbCommand);
    function get_UpdateCommand: DNIDbCommand;
    procedure set_UpdateCommand(value: DNIDbCommand);
    function get_DeleteCommand: DNIDbCommand;
    procedure set_DeleteCommand(value: DNIDbCommand);

  { propertys } 

    property SelectCommand: DNIDbCommand read get_SelectCommand write set_SelectCommand;
    property InsertCommand: DNIDbCommand read get_InsertCommand write set_InsertCommand;
    property UpdateCommand: DNIDbCommand read get_UpdateCommand write set_UpdateCommand;
    property DeleteCommand: DNIDbCommand read get_DeleteCommand write set_DeleteCommand;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDataParameter')]
  DNIDataParameter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{DBAE8A91-BB4E-3E18-B45F-233C65FBDA2B}']
  { getters & setters } 

    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);
    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    procedure set_Value(value: DDNC.System.Private.CoreLib.DNObject);

  { propertys } 

    property DbType: DNDbType read get_DbType write set_DbType;
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    property IsNullable: Boolean read get_IsNullable;
    property ParameterName: string read get_ParameterName write set_ParameterName;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value write set_Value;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDbDataParameter')]
  DNIDbDataParameter = interface(DNIDataParameter)
  ['{391E486C-97BE-3FD1-A26F-BC953AF9EF2D}']
  { getters & setters } 

    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_Size: Int32;
    procedure set_Size(value: Int32);

  { propertys } 

    property Precision: Byte read get_Precision write set_Precision;
    property Scale: Byte read get_Scale write set_Scale;
    property Size: Int32 read get_Size write set_Size;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDataRecord')]
  DNIDataRecord = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6DAA5A9D-4EAC-3C24-B85C-794B4E65604D}']
  { getters & setters } 

    function get_FieldCount: Int32;
    function get_Item(i: Int32): DDNC.System.Private.CoreLib.DNObject; overload;
    function get_Item(name: string): DDNC.System.Private.CoreLib.DNObject; overload;

  { methods } 

    function GetName(i: Int32): string;
    function GetDataTypeName(i: Int32): string;
    function GetFieldType(i: Int32): DDNC.System.Private.CoreLib.DNType;
    function GetValue(i: Int32): DDNC.System.Private.CoreLib.DNObject;
    function GetValues(values: TArray<DDNC.System.Private.CoreLib.DNObject>): Int32;
    function GetOrdinal(name: string): Int32;
    function GetBoolean(i: Int32): Boolean;
    function GetByte(i: Int32): Byte;
    function GetBytes(i: Int32; fieldOffset: Int64; buffer: TArray<Byte>; bufferoffset: Int32; length: Int32): Int64;
    function GetChar(i: Int32): Char;
    function GetChars(i: Int32; fieldoffset: Int64; buffer: TArray<Char>; bufferoffset: Int32; length: Int32): Int64;
    function GetGuid(i: Int32): DDNC.System.Private.CoreLib.DNGuid;
    function GetInt16(i: Int32): Int16;
    function GetInt32(i: Int32): Int32;
    function GetInt64(i: Int32): Int64;
    function GetFloat(i: Int32): Single;
    function GetDouble(i: Int32): Double;
    function GetString(i: Int32): string;
    function GetDecimal(i: Int32): DDNC.System.Private.CoreLib.DNDecimal;
    function GetDateTime(i: Int32): DDNC.System.Private.CoreLib.DNDateTime;
    function GetData(i: Int32): DNIDataReader;
    function IsDBNull(i: Int32): Boolean;

  { propertys } 

    property FieldCount: Int32 read get_FieldCount;
    property Item[i: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
    property Item[name: string]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.ITableMapping')]
  DNITableMapping = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7D6C1151-07C6-3BAE-A4CA-2505E8B9F92F}']
  { getters & setters } 

    function get_ColumnMappings: DNIColumnMappingCollection;
    function get_DataSetTable: string;
    procedure set_DataSetTable(value: string);
    function get_SourceTable: string;
    procedure set_SourceTable(value: string);

  { propertys } 

    property ColumnMappings: DNIColumnMappingCollection read get_ColumnMappings;
    property DataSetTable: string read get_DataSetTable write set_DataSetTable;
    property SourceTable: string read get_SourceTable write set_SourceTable;
  end;

  //-------------namespace: System.Data.SqlTypes----------------
  [DNTypeName('System.Data.SqlTypes.INullable')]
  DNINullable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{E7B3191E-CB93-3820-AB88-949781697507}']
  { getters & setters } 

    function get_IsNull: Boolean;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDataReader')]
  DNIDataReader = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{EEF6063A-B303-370C-A350-20E70194F0B0}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;

  { methods } 

    procedure Close;
    function GetSchemaTable: DNDataTable;
    function NextResult: Boolean;
    function Read: Boolean;

  { propertys } 

    property Depth: Int32 read get_Depth;
    property IsClosed: Boolean read get_IsClosed;
    property RecordsAffected: Int32 read get_RecordsAffected;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDbCommand')]
  DNIDbCommand = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{E41AC658-7894-35BD-B768-0D4824CDD220}']
  { getters & setters } 

    function get_Connection: DNIDbConnection;
    procedure set_Connection(value: DNIDbConnection);
    function get_Transaction: DNIDbTransaction;
    procedure set_Transaction(value: DNIDbTransaction);
    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_Parameters: DNIDataParameterCollection;
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);

  { methods } 

    procedure Prepare;
    procedure Cancel;
    function CreateParameter: DNIDbDataParameter;
    function ExecuteNonQuery: Int32;
    function ExecuteReader: DNIDataReader; overload;
    function ExecuteReader(behavior: DNCommandBehavior): DNIDataReader; overload;
    function ExecuteScalar: DDNC.System.Private.CoreLib.DNObject;

  { propertys } 

    property Connection: DNIDbConnection read get_Connection write set_Connection;
    property Transaction: DNIDbTransaction read get_Transaction write set_Transaction;
    property CommandText: string read get_CommandText write set_CommandText;
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    property Parameters: DNIDataParameterCollection read get_Parameters;
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDbConnection')]
  DNIDbConnection = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{9BB226F4-2AF3-37E7-B91D-3BB936FC0A7E}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_State: DNConnectionState;

  { methods } 

    function BeginTransaction: DNIDbTransaction; overload;
    function BeginTransaction(il: DNIsolationLevel): DNIDbTransaction; overload;
    procedure Close;
    procedure ChangeDatabase(databaseName: string);
    function CreateCommand: DNIDbCommand;
    procedure Open;

  { propertys } 

    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    property Database: string read get_Database;
    property State: DNConnectionState read get_State;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDbTransaction')]
  DNIDbTransaction = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{62572DE3-DD0D-3763-9548-50665D013F6D}']
  { getters & setters } 

    function get_Connection: DNIDbConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    procedure Commit;
    procedure Rollback;

  { propertys } 

    property Connection: DNIDbConnection read get_Connection;
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  //-------------namespace: System.Data----------------
  DNDataSysDescriptionAttributeClass = interface(DNObjectClass)
  ['{40EF581C-3DEB-5240-B3C0-41F26304BFB7}']
  { constructors } 

    {class} function init(description: string): DNDataSysDescriptionAttribute;

  end;

  [DNTypeName('System.Data.DataSysDescriptionAttribute')]
  DNDataSysDescriptionAttribute = interface(DNObject)
  ['{F9A12053-EDA2-393B-B584-E59F30C27B0C}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDataSysDescriptionAttribute = class(TDNGenericImport<DNDataSysDescriptionAttributeClass, DNDataSysDescriptionAttribute>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderSpecificTypePropertyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{A352A089-2C00-5B00-AA2A-D81959B05656}']
  { constructors } 

    {class} function init(isProviderSpecificTypeProperty: Boolean): DNDbProviderSpecificTypePropertyAttribute;

  end;

  [DNTypeName('System.Data.Common.DbProviderSpecificTypePropertyAttribute')]
  DNDbProviderSpecificTypePropertyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{64EA686A-7AC2-3EF2-8A4F-668D0EC108F7}']
  { getters & setters } 

    function get_IsProviderSpecificTypeProperty: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property IsProviderSpecificTypeProperty: Boolean read get_IsProviderSpecificTypeProperty;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDbProviderSpecificTypePropertyAttribute = class(TDNGenericImport<DNDbProviderSpecificTypePropertyAttributeClass, DNDbProviderSpecificTypePropertyAttribute>) end;

  //-------------namespace: System.Data----------------
  DNPropertyCollectionClass = interface(DDNC.System.Private.CoreLib.DNHashtableClass)
  ['{93714925-E766-5A6F-A1C1-0AEBC387C7E7}']
  { constructors } 

    {class} function init: DNPropertyCollection;

  end;

  [DNTypeName('System.Data.PropertyCollection')]
  DNPropertyCollection = interface(DDNC.System.Private.CoreLib.DNHashtable)
  ['{FBAAFB89-252F-3F7F-9809-5A3340EDE377}']
  { getters & setters } 

    function get_Item(key: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject;
    procedure set_Item(key: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDNC.System.Private.CoreLib.DNICollection;
    function get_Values: DDNC.System.Private.CoreLib.DNICollection;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;
    function get_Count: Int32;

  { methods } 

    function Clone: DDNC.System.Private.CoreLib.DNObject;
    procedure Add(key: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNObject);
    procedure Clear;
    function &Contains(key: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function ContainsKey(key: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function ContainsValue(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIDictionaryEnumerator;
    procedure Remove(key: DDNC.System.Private.CoreLib.DNObject);
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure OnDeserialization(sender: DDNC.System.Private.CoreLib.DNObject);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[key: DDNC.System.Private.CoreLib.DNObject]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDNC.System.Private.CoreLib.DNICollection read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNICollection read get_Values;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNPropertyCollection = class(TDNGenericImport<DNPropertyCollectionClass, DNPropertyCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnClass = interface(DNObjectClass)
  ['{95B33C84-9DBE-57E7-AF00-9A1E4853CDBD}']
  { constructors } 

    {class} function init: DNDataColumn; overload;
    {class} function init(columnName: string): DNDataColumn; overload;
    {class} function init(columnName: string; dataType: DDNC.System.Private.CoreLib.DNType): DNDataColumn; overload;
    {class} function init(columnName: string; dataType: DDNC.System.Private.CoreLib.DNType; expr: string): DNDataColumn; overload;
    {class} function init(columnName: string; dataType: DDNC.System.Private.CoreLib.DNType; expr: string; &type: DNMappingType): DNDataColumn; overload;

  end;

  [DNTypeName('System.Data.DataColumn')]
  DNDataColumn = interface(DNObject)
  ['{9DA9E887-AB7B-3986-BF43-E480CD69F1B0}']
  { getters & setters } 

    function get_AllowDBNull: Boolean;
    procedure set_AllowDBNull(value: Boolean);
    function get_AutoIncrement: Boolean;
    procedure set_AutoIncrement(value: Boolean);
    function get_AutoIncrementSeed: Int64;
    procedure set_AutoIncrementSeed(value: Int64);
    function get_AutoIncrementStep: Int64;
    procedure set_AutoIncrementStep(value: Int64);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_ColumnName: string;
    procedure set_ColumnName(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_DataType: DDNC.System.Private.CoreLib.DNType;
    procedure set_DataType(value: DDNC.System.Private.CoreLib.DNType);
    function get_DateTimeMode: DNDataSetDateTime;
    procedure set_DateTimeMode(value: DNDataSetDateTime);
    function get_DefaultValue: DDNC.System.Private.CoreLib.DNObject;
    procedure set_DefaultValue(value: DDNC.System.Private.CoreLib.DNObject);
    function get_Expression: string;
    procedure set_Expression(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Ordinal: Int32;
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Table: DNDataTable;
    function get_Unique: Boolean;
    procedure set_Unique(value: Boolean);
    function get_ColumnMapping: DNMappingType;
    procedure set_ColumnMapping(value: DNMappingType);
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function ToString: string;
    procedure SetOrdinal(ordinal: Int32);
    procedure Dispose;
    function GetService(service: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AllowDBNull: Boolean read get_AllowDBNull write set_AllowDBNull;
    property AutoIncrement: Boolean read get_AutoIncrement write set_AutoIncrement;
    property AutoIncrementSeed: Int64 read get_AutoIncrementSeed write set_AutoIncrementSeed;
    property AutoIncrementStep: Int64 read get_AutoIncrementStep write set_AutoIncrementStep;
    property Caption: string read get_Caption write set_Caption;
    property ColumnName: string read get_ColumnName write set_ColumnName;
    property Prefix: string read get_Prefix write set_Prefix;
    property DataType: DDNC.System.Private.CoreLib.DNType read get_DataType write set_DataType;
    property DateTimeMode: DNDataSetDateTime read get_DateTimeMode write set_DateTimeMode;
    property DefaultValue: DDNC.System.Private.CoreLib.DNObject read get_DefaultValue write set_DefaultValue;
    property Expression: string read get_Expression write set_Expression;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    property Namespace: string read get_Namespace write set_Namespace;
    property Ordinal: Int32 read get_Ordinal;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Table: DNDataTable read get_Table;
    property Unique: Boolean read get_Unique write set_Unique;
    property ColumnMapping: DNMappingType read get_ColumnMapping write set_ColumnMapping;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataColumn = class(TDNGenericImport<DNDataColumnClass, DNDataColumn>) end;

  //-------------namespace: System.Data----------------
  DNDataSetClass = interface(DNObjectClass)
  ['{A24DE034-5300-5C3E-8D63-62D0011A9FC7}']
  { constructors } 

    {class} function init: DNDataSet; overload;
    {class} function init(dataSetName: string): DNDataSet; overload;

  { static methods } 

    {class} function GetDataSetSchema(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlSchemaComplexType;

  end;

  [DNTypeName('System.Data.DataSet')]
  DNDataSet = interface(DNObject)
  ['{EE1C472A-5B42-3DB9-9F60-56B3848B5DDF}']
  { getters & setters } 

    function get_RemotingFormat: DNSerializationFormat;
    procedure set_RemotingFormat(value: DNSerializationFormat);
    function get_SchemaSerializationMode: DNSchemaSerializationMode;
    procedure set_SchemaSerializationMode(value: DNSchemaSerializationMode);
    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_DefaultViewManager: DNDataViewManager;
    function get_EnforceConstraints: Boolean;
    procedure set_EnforceConstraints(value: Boolean);
    function get_DataSetName: string;
    procedure set_DataSetName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_HasErrors: Boolean;
    function get_IsInitialized: Boolean;
    function get_Locale: DDNC.System.Private.CoreLib.DNCultureInfo;
    procedure set_Locale(value: DDNC.System.Private.CoreLib.DNCultureInfo);
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Relations: DNDataRelationCollection;
    function get_Tables: DNDataTableCollection;
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_MergeFailed(value: DNMergeFailedEventHandler);
    procedure remove_MergeFailed(value: DNMergeFailedEventHandler);
    procedure add_Initialized(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Initialized(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    procedure ReadXmlSchema(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure ReadXmlSchema(reader: DDNC.System.Private.CoreLib.DNTextReader); overload;
    procedure ReadXmlSchema(fileName: string); overload;
    procedure WriteXmlSchema(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure WriteXmlSchema(stream: DDNC.System.Private.CoreLib.DNStream; multipleTargetConverter: DDNC.System.Private.CoreLib.DNConverter<DDNC.System.Private.CoreLib.DNType, string>); overload;
    procedure WriteXmlSchema(fileName: string); overload;
    procedure WriteXmlSchema(fileName: string; multipleTargetConverter: DDNC.System.Private.CoreLib.DNConverter<DDNC.System.Private.CoreLib.DNType, string>); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.CoreLib.DNTextWriter; multipleTargetConverter: DDNC.System.Private.CoreLib.DNConverter<DDNC.System.Private.CoreLib.DNType, string>); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.Xml.DNXmlWriter); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.Xml.DNXmlWriter; multipleTargetConverter: DDNC.System.Private.CoreLib.DNConverter<DDNC.System.Private.CoreLib.DNType, string>); overload;
    function ReadXml(reader: DDNC.System.Private.Xml.DNXmlReader): DNXmlReadMode; overload;
    function ReadXml(stream: DDNC.System.Private.CoreLib.DNStream): DNXmlReadMode; overload;
    function ReadXml(reader: DDNC.System.Private.CoreLib.DNTextReader): DNXmlReadMode; overload;
    function ReadXml(fileName: string): DNXmlReadMode; overload;
    function ReadXml(reader: DDNC.System.Private.Xml.DNXmlReader; mode: DNXmlReadMode): DNXmlReadMode; overload;
    function ReadXml(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNXmlReadMode): DNXmlReadMode; overload;
    function ReadXml(reader: DDNC.System.Private.CoreLib.DNTextReader; mode: DNXmlReadMode): DNXmlReadMode; overload;
    function ReadXml(fileName: string; mode: DNXmlReadMode): DNXmlReadMode; overload;
    procedure WriteXml(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure WriteXml(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure WriteXml(writer: DDNC.System.Private.Xml.DNXmlWriter); overload;
    procedure WriteXml(fileName: string); overload;
    procedure WriteXml(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNXmlWriteMode); overload;
    procedure WriteXml(writer: DDNC.System.Private.CoreLib.DNTextWriter; mode: DNXmlWriteMode); overload;
    procedure WriteXml(writer: DDNC.System.Private.Xml.DNXmlWriter; mode: DNXmlWriteMode); overload;
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode); overload;
    procedure Merge(dataSet: DNDataSet); overload;
    procedure Merge(dataSet: DNDataSet; preserveChanges: Boolean); overload;
    procedure Merge(dataSet: DNDataSet; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    procedure Merge(table: DNDataTable); overload;
    procedure Merge(table: DNDataTable; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    procedure Merge(rows: TArray<DNDataRow>); overload;
    procedure Merge(rows: TArray<DNDataRow>; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    procedure RejectChanges;
    procedure Reset;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; errorHandler: DNFillErrorEventHandler; tables: TArray<DNDataTable>); overload;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; tables: TArray<DNDataTable>); overload;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; tables: TArray<string>); overload;
    function CreateDataReader: DNDataTableReader; overload;
    function CreateDataReader(dataTables: TArray<DNDataTable>): DNDataTableReader; overload;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure AcceptChanges;
    procedure BeginInit;
    procedure EndInit;
    procedure Clear;
    function Clone: DNDataSet;
    function Copy: DNDataSet;
    function GetChanges: DNDataSet; overload;
    function GetChanges(rowStates: DNDataRowState): DNDataSet; overload;
    function GetXml: string;
    function GetXmlSchema: string;
    function HasChanges: Boolean; overload;
    function HasChanges(rowStates: DNDataRowState): Boolean; overload;
    procedure InferXmlSchema(reader: DDNC.System.Private.Xml.DNXmlReader; nsArray: TArray<string>); overload;
    procedure InferXmlSchema(stream: DDNC.System.Private.CoreLib.DNStream; nsArray: TArray<string>); overload;
    procedure InferXmlSchema(reader: DDNC.System.Private.CoreLib.DNTextReader; nsArray: TArray<string>); overload;
    procedure InferXmlSchema(fileName: string; nsArray: TArray<string>); overload;
    procedure ReadXmlSchema(reader: DDNC.System.Private.Xml.DNXmlReader); overload;
    procedure Dispose;
    function GetService(service: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property RemotingFormat: DNSerializationFormat read get_RemotingFormat write set_RemotingFormat;
    property SchemaSerializationMode: DNSchemaSerializationMode read get_SchemaSerializationMode write set_SchemaSerializationMode;
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    property DefaultViewManager: DNDataViewManager read get_DefaultViewManager;
    property EnforceConstraints: Boolean read get_EnforceConstraints write set_EnforceConstraints;
    property DataSetName: string read get_DataSetName write set_DataSetName;
    property Namespace: string read get_Namespace write set_Namespace;
    property Prefix: string read get_Prefix write set_Prefix;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    property HasErrors: Boolean read get_HasErrors;
    property IsInitialized: Boolean read get_IsInitialized;
    property Locale: DDNC.System.Private.CoreLib.DNCultureInfo read get_Locale write set_Locale;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Relations: DNDataRelationCollection read get_Relations;
    property Tables: DNDataTableCollection read get_Tables;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataSet = class(TDNGenericImport<DNDataSetClass, DNDataSet>) end;

  //-------------namespace: System.Data----------------
  DNDataTableClass = interface(DNObjectClass)
  ['{49BC9ECE-5B36-5634-AC16-DB4EED2D0DF5}']
  { constructors } 

    {class} function init: DNDataTable; overload;
    {class} function init(tableName: string): DNDataTable; overload;
    {class} function init(tableName: string; tableNamespace: string): DNDataTable; overload;

  { static methods } 

    {class} function GetDataTableSchema(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlSchemaComplexType;

  end;

  [DNTypeName('System.Data.DataTable')]
  DNDataTable = interface(DNObject)
  ['{59A7B3C7-850E-3113-9FFB-D1AEB5E7231B}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_IsInitialized: Boolean;
    function get_RemotingFormat: DNSerializationFormat;
    procedure set_RemotingFormat(value: DNSerializationFormat);
    function get_ChildRelations: DNDataRelationCollection;
    function get_Columns: DNDataColumnCollection;
    function get_Constraints: DNConstraintCollection;
    function get_DataSet: DNDataSet;
    function get_DefaultView: DNDataView;
    function get_DisplayExpression: string;
    procedure set_DisplayExpression(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_HasErrors: Boolean;
    function get_Locale: DDNC.System.Private.CoreLib.DNCultureInfo;
    procedure set_Locale(value: DDNC.System.Private.CoreLib.DNCultureInfo);
    function get_MinimumCapacity: Int32;
    procedure set_MinimumCapacity(value: Int32);
    function get_ParentRelations: DNDataRelationCollection;
    function get_PrimaryKey: TArray<DNDataColumn>;
    procedure set_PrimaryKey(value: TArray<DNDataColumn>);
    function get_Rows: DNDataRowCollection;
    function get_TableName: string;
    procedure set_TableName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ColumnChanging(value: DNDataColumnChangeEventHandler);
    procedure remove_ColumnChanging(value: DNDataColumnChangeEventHandler);
    procedure add_ColumnChanged(value: DNDataColumnChangeEventHandler);
    procedure remove_ColumnChanged(value: DNDataColumnChangeEventHandler);
    procedure add_Initialized(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Initialized(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_RowChanged(value: DNDataRowChangeEventHandler);
    procedure remove_RowChanged(value: DNDataRowChangeEventHandler);
    procedure add_RowChanging(value: DNDataRowChangeEventHandler);
    procedure remove_RowChanging(value: DNDataRowChangeEventHandler);
    procedure add_RowDeleting(value: DNDataRowChangeEventHandler);
    procedure remove_RowDeleting(value: DNDataRowChangeEventHandler);
    procedure add_RowDeleted(value: DNDataRowChangeEventHandler);
    procedure remove_RowDeleted(value: DNDataRowChangeEventHandler);
    procedure add_TableClearing(value: DNDataTableClearEventHandler);
    procedure remove_TableClearing(value: DNDataTableClearEventHandler);
    procedure add_TableCleared(value: DNDataTableClearEventHandler);
    procedure remove_TableCleared(value: DNDataTableClearEventHandler);
    procedure add_TableNewRow(value: DNDataTableNewRowEventHandler);
    procedure remove_TableNewRow(value: DNDataTableNewRowEventHandler);
    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    procedure WriteXmlSchema(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure WriteXmlSchema(stream: DDNC.System.Private.CoreLib.DNStream; writeHierarchy: Boolean); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.CoreLib.DNTextWriter; writeHierarchy: Boolean); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.Xml.DNXmlWriter); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.Xml.DNXmlWriter; writeHierarchy: Boolean); overload;
    procedure WriteXmlSchema(fileName: string); overload;
    procedure WriteXmlSchema(fileName: string; writeHierarchy: Boolean); overload;
    function ReadXml(stream: DDNC.System.Private.CoreLib.DNStream): DNXmlReadMode; overload;
    function ReadXml(reader: DDNC.System.Private.CoreLib.DNTextReader): DNXmlReadMode; overload;
    function ReadXml(fileName: string): DNXmlReadMode; overload;
    function ReadXml(reader: DDNC.System.Private.Xml.DNXmlReader): DNXmlReadMode; overload;
    procedure ReadXmlSchema(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure ReadXmlSchema(reader: DDNC.System.Private.CoreLib.DNTextReader); overload;
    procedure ReadXmlSchema(fileName: string); overload;
    procedure ReadXmlSchema(reader: DDNC.System.Private.Xml.DNXmlReader); overload;
    function NewRow: DNDataRow;
    procedure RejectChanges;
    procedure Reset;
    function Select: TArray<DNDataRow>; overload;
    function Select(filterExpression: string): TArray<DNDataRow>; overload;
    function Select(filterExpression: string; sort: string): TArray<DNDataRow>; overload;
    function Select(filterExpression: string; sort: string; recordStates: DNDataViewRowState): TArray<DNDataRow>; overload;
    function ToString: string;
    procedure BeginLoadData;
    procedure EndLoadData;
    function LoadDataRow(values: TArray<DDNC.System.Private.CoreLib.DNObject>; fAcceptChanges: Boolean): DNDataRow; overload;
    function LoadDataRow(values: TArray<DDNC.System.Private.CoreLib.DNObject>; loadOption: DNLoadOption): DNDataRow; overload;
    procedure Merge(table: DNDataTable); overload;
    procedure Merge(table: DNDataTable; preserveChanges: Boolean); overload;
    procedure Merge(table: DNDataTable; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    procedure Load(reader: DNIDataReader); overload;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption); overload;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; errorHandler: DNFillErrorEventHandler); overload;
    function CreateDataReader: DNDataTableReader;
    procedure WriteXml(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure WriteXml(stream: DDNC.System.Private.CoreLib.DNStream; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure WriteXml(writer: DDNC.System.Private.CoreLib.DNTextWriter; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDNC.System.Private.Xml.DNXmlWriter); overload;
    procedure WriteXml(writer: DDNC.System.Private.Xml.DNXmlWriter; writeHierarchy: Boolean); overload;
    procedure WriteXml(fileName: string); overload;
    procedure WriteXml(fileName: string; writeHierarchy: Boolean); overload;
    procedure WriteXml(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNXmlWriteMode); overload;
    procedure WriteXml(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDNC.System.Private.CoreLib.DNTextWriter; mode: DNXmlWriteMode); overload;
    procedure WriteXml(writer: DDNC.System.Private.CoreLib.DNTextWriter; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDNC.System.Private.Xml.DNXmlWriter; mode: DNXmlWriteMode); overload;
    procedure WriteXml(writer: DDNC.System.Private.Xml.DNXmlWriter; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode); overload;
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure AcceptChanges;
    function Clone: DNDataTable;
    function Copy: DNDataTable;
    procedure Clear;
    function Compute(expression: string; filter: string): DDNC.System.Private.CoreLib.DNObject;
    function GetChanges: DNDataTable; overload;
    function GetChanges(rowStates: DNDataRowState): DNDataTable; overload;
    function GetErrors: TArray<DNDataRow>;
    procedure ImportRow(row: DNDataRow);
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure BeginInit;
    procedure EndInit;
    procedure Dispose;
    function GetService(service: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    property IsInitialized: Boolean read get_IsInitialized;
    property RemotingFormat: DNSerializationFormat read get_RemotingFormat write set_RemotingFormat;
    property ChildRelations: DNDataRelationCollection read get_ChildRelations;
    property Columns: DNDataColumnCollection read get_Columns;
    property Constraints: DNConstraintCollection read get_Constraints;
    property DataSet: DNDataSet read get_DataSet;
    property DefaultView: DNDataView read get_DefaultView;
    property DisplayExpression: string read get_DisplayExpression write set_DisplayExpression;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    property HasErrors: Boolean read get_HasErrors;
    property Locale: DDNC.System.Private.CoreLib.DNCultureInfo read get_Locale write set_Locale;
    property MinimumCapacity: Int32 read get_MinimumCapacity write set_MinimumCapacity;
    property ParentRelations: DNDataRelationCollection read get_ParentRelations;
    property PrimaryKey: TArray<DNDataColumn> read get_PrimaryKey write set_PrimaryKey;
    property Rows: DNDataRowCollection read get_Rows;
    property TableName: string read get_TableName write set_TableName;
    property Namespace: string read get_Namespace write set_Namespace;
    property Prefix: string read get_Prefix write set_Prefix;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataTable = class(TDNGenericImport<DNDataTableClass, DNDataTable>) end;

  //-------------namespace: System.Data----------------
  DNTypedTableBaseClass<T> = interface(DNDataTableClass)
  ['{F528A88B-F2FF-5467-842C-83A7A2499680}']
  end;

  [DNTypeName('System.Data.TypedTableBase`1')]
  DNTypedTableBase<T> = interface(DNDataTable)
  ['{7B884C7F-E424-3CE9-826B-EC9CA7F35168}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_IsInitialized: Boolean;
    function get_RemotingFormat: DNSerializationFormat;
    procedure set_RemotingFormat(value: DNSerializationFormat);
    function get_ChildRelations: DNDataRelationCollection;
    function get_Columns: DNDataColumnCollection;
    function get_Constraints: DNConstraintCollection;
    function get_DataSet: DNDataSet;
    function get_DefaultView: DNDataView;
    function get_DisplayExpression: string;
    procedure set_DisplayExpression(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_HasErrors: Boolean;
    function get_Locale: DDNC.System.Private.CoreLib.DNCultureInfo;
    procedure set_Locale(value: DDNC.System.Private.CoreLib.DNCultureInfo);
    function get_MinimumCapacity: Int32;
    procedure set_MinimumCapacity(value: Int32);
    function get_ParentRelations: DNDataRelationCollection;
    function get_PrimaryKey: TArray<DNDataColumn>;
    procedure set_PrimaryKey(value: TArray<DNDataColumn>);
    function get_Rows: DNDataRowCollection;
    function get_TableName: string;
    procedure set_TableName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ColumnChanging(value: DNDataColumnChangeEventHandler);
    procedure remove_ColumnChanging(value: DNDataColumnChangeEventHandler);
    procedure add_ColumnChanged(value: DNDataColumnChangeEventHandler);
    procedure remove_ColumnChanged(value: DNDataColumnChangeEventHandler);
    procedure add_Initialized(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Initialized(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_RowChanged(value: DNDataRowChangeEventHandler);
    procedure remove_RowChanged(value: DNDataRowChangeEventHandler);
    procedure add_RowChanging(value: DNDataRowChangeEventHandler);
    procedure remove_RowChanging(value: DNDataRowChangeEventHandler);
    procedure add_RowDeleting(value: DNDataRowChangeEventHandler);
    procedure remove_RowDeleting(value: DNDataRowChangeEventHandler);
    procedure add_RowDeleted(value: DNDataRowChangeEventHandler);
    procedure remove_RowDeleted(value: DNDataRowChangeEventHandler);
    procedure add_TableClearing(value: DNDataTableClearEventHandler);
    procedure remove_TableClearing(value: DNDataTableClearEventHandler);
    procedure add_TableCleared(value: DNDataTableClearEventHandler);
    procedure remove_TableCleared(value: DNDataTableClearEventHandler);
    procedure add_TableNewRow(value: DNDataTableNewRowEventHandler);
    procedure remove_TableNewRow(value: DNDataTableNewRowEventHandler);
    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    procedure WriteXmlSchema(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure WriteXmlSchema(stream: DDNC.System.Private.CoreLib.DNStream; writeHierarchy: Boolean); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.CoreLib.DNTextWriter; writeHierarchy: Boolean); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.Xml.DNXmlWriter); overload;
    procedure WriteXmlSchema(writer: DDNC.System.Private.Xml.DNXmlWriter; writeHierarchy: Boolean); overload;
    procedure WriteXmlSchema(fileName: string); overload;
    procedure WriteXmlSchema(fileName: string; writeHierarchy: Boolean); overload;
    function ReadXml(stream: DDNC.System.Private.CoreLib.DNStream): DNXmlReadMode; overload;
    function ReadXml(reader: DDNC.System.Private.CoreLib.DNTextReader): DNXmlReadMode; overload;
    function ReadXml(fileName: string): DNXmlReadMode; overload;
    function ReadXml(reader: DDNC.System.Private.Xml.DNXmlReader): DNXmlReadMode; overload;
    procedure ReadXmlSchema(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure ReadXmlSchema(reader: DDNC.System.Private.CoreLib.DNTextReader); overload;
    procedure ReadXmlSchema(fileName: string); overload;
    procedure ReadXmlSchema(reader: DDNC.System.Private.Xml.DNXmlReader); overload;
    function NewRow: DNDataRow;
    procedure RejectChanges;
    procedure Reset;
    function Select: TArray<DNDataRow>; overload;
    function Select(filterExpression: string): TArray<DNDataRow>; overload;
    function Select(filterExpression: string; sort: string): TArray<DNDataRow>; overload;
    function Select(filterExpression: string; sort: string; recordStates: DNDataViewRowState): TArray<DNDataRow>; overload;
    function ToString: string;
    procedure BeginLoadData;
    procedure EndLoadData;
    function LoadDataRow(values: TArray<DDNC.System.Private.CoreLib.DNObject>; fAcceptChanges: Boolean): DNDataRow; overload;
    function LoadDataRow(values: TArray<DDNC.System.Private.CoreLib.DNObject>; loadOption: DNLoadOption): DNDataRow; overload;
    procedure Merge(table: DNDataTable); overload;
    procedure Merge(table: DNDataTable; preserveChanges: Boolean); overload;
    procedure Merge(table: DNDataTable; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    procedure Load(reader: DNIDataReader); overload;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption); overload;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; errorHandler: DNFillErrorEventHandler); overload;
    function CreateDataReader: DNDataTableReader;
    procedure WriteXml(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure WriteXml(stream: DDNC.System.Private.CoreLib.DNStream; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure WriteXml(writer: DDNC.System.Private.CoreLib.DNTextWriter; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDNC.System.Private.Xml.DNXmlWriter); overload;
    procedure WriteXml(writer: DDNC.System.Private.Xml.DNXmlWriter; writeHierarchy: Boolean); overload;
    procedure WriteXml(fileName: string); overload;
    procedure WriteXml(fileName: string; writeHierarchy: Boolean); overload;
    procedure WriteXml(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNXmlWriteMode); overload;
    procedure WriteXml(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDNC.System.Private.CoreLib.DNTextWriter; mode: DNXmlWriteMode); overload;
    procedure WriteXml(writer: DDNC.System.Private.CoreLib.DNTextWriter; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDNC.System.Private.Xml.DNXmlWriter; mode: DNXmlWriteMode); overload;
    procedure WriteXml(writer: DDNC.System.Private.Xml.DNXmlWriter; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode); overload;
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure AcceptChanges;
    function Clone: DNDataTable;
    function Copy: DNDataTable;
    procedure Clear;
    function Compute(expression: string; filter: string): DDNC.System.Private.CoreLib.DNObject;
    function GetChanges: DNDataTable; overload;
    function GetChanges(rowStates: DNDataRowState): DNDataTable; overload;
    function GetErrors: TArray<DNDataRow>;
    procedure ImportRow(row: DNDataRow);
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure BeginInit;
    procedure EndInit;
    procedure Dispose;
    function GetService(service: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    property IsInitialized: Boolean read get_IsInitialized;
    property RemotingFormat: DNSerializationFormat read get_RemotingFormat write set_RemotingFormat;
    property ChildRelations: DNDataRelationCollection read get_ChildRelations;
    property Columns: DNDataColumnCollection read get_Columns;
    property Constraints: DNConstraintCollection read get_Constraints;
    property DataSet: DNDataSet read get_DataSet;
    property DefaultView: DNDataView read get_DefaultView;
    property DisplayExpression: string read get_DisplayExpression write set_DisplayExpression;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    property HasErrors: Boolean read get_HasErrors;
    property Locale: DDNC.System.Private.CoreLib.DNCultureInfo read get_Locale write set_Locale;
    property MinimumCapacity: Int32 read get_MinimumCapacity write set_MinimumCapacity;
    property ParentRelations: DNDataRelationCollection read get_ParentRelations;
    property PrimaryKey: TArray<DNDataColumn> read get_PrimaryKey write set_PrimaryKey;
    property Rows: DNDataRowCollection read get_Rows;
    property TableName: string read get_TableName write set_TableName;
    property Namespace: string read get_Namespace write set_Namespace;
    property Prefix: string read get_Prefix write set_Prefix;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNTypedTableBase<T> = class(TDNGenericImport<DNTypedTableBaseClass<T>, DNTypedTableBase<T>>) end;

  //-------------namespace: System.Data----------------
  DNDataViewClass = interface(DNObjectClass)
  ['{4494EEE0-87A1-562E-8D83-35AE506188AF}']
  { constructors } 

    {class} function init: DNDataView; overload;
    {class} function init(table: DNDataTable): DNDataView; overload;
    {class} function init(table: DNDataTable; RowFilter: string; Sort: string; RowState: DNDataViewRowState): DNDataView; overload;

  end;

  [DNTypeName('System.Data.DataView')]
  DNDataView = interface(DNObject)
  ['{EAEEB778-E0C1-3CF2-BBE2-42C3394735B6}']
  { getters & setters } 

    function get_AllowDelete: Boolean;
    procedure set_AllowDelete(value: Boolean);
    function get_ApplyDefaultSort: Boolean;
    procedure set_ApplyDefaultSort(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowNew: Boolean;
    procedure set_AllowNew(value: Boolean);
    function get_Count: Int32;
    function get_DataViewManager: DNDataViewManager;
    function get_IsInitialized: Boolean;
    function get_RowFilter: string;
    procedure set_RowFilter(value: string);
    function get_RowStateFilter: DNDataViewRowState;
    procedure set_RowStateFilter(value: DNDataViewRowState);
    function get_Sort: string;
    procedure set_Sort(value: string);
    function get_Table: DNDataTable;
    procedure set_Table(value: DNDataTable);
    function get_Item(recordIndex: Int32): DNDataRowView;
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ListChanged(value: DDNC.System.ComponentModel.TypeConverter.DNListChangedEventHandler);
    procedure remove_ListChanged(value: DDNC.System.ComponentModel.TypeConverter.DNListChangedEventHandler);
    procedure add_Initialized(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Initialized(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function ToTable: DNDataTable; overload;
    function ToTable(tableName: string): DNDataTable; overload;
    function ToTable(distinct: Boolean; columnNames: TArray<string>): DNDataTable; overload;
    function ToTable(tableName: string; distinct: Boolean; columnNames: TArray<string>): DNDataTable; overload;
    function Equals(view: DNDataView): Boolean; overload;
    function AddNew: DNDataRowView;
    procedure BeginInit;
    procedure EndInit;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    procedure Delete(index: Int32);
    function Find(key: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function Find(key: TArray<DDNC.System.Private.CoreLib.DNObject>): Int32; overload;
    function FindRows(key: DDNC.System.Private.CoreLib.DNObject): TArray<DNDataRowView>; overload;
    function FindRows(key: TArray<DDNC.System.Private.CoreLib.DNObject>): TArray<DNDataRowView>; overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure Dispose;
    function GetService(service: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;

  { propertys } 

    property AllowDelete: Boolean read get_AllowDelete write set_AllowDelete;
    property ApplyDefaultSort: Boolean read get_ApplyDefaultSort write set_ApplyDefaultSort;
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    property AllowNew: Boolean read get_AllowNew write set_AllowNew;
    property Count: Int32 read get_Count;
    property DataViewManager: DNDataViewManager read get_DataViewManager;
    property IsInitialized: Boolean read get_IsInitialized;
    property RowFilter: string read get_RowFilter write set_RowFilter;
    property RowStateFilter: DNDataViewRowState read get_RowStateFilter write set_RowStateFilter;
    property Sort: string read get_Sort write set_Sort;
    property Table: DNDataTable read get_Table write set_Table;
    property Item[recordIndex: Int32]: DNDataRowView read get_Item; default;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataView = class(TDNGenericImport<DNDataViewClass, DNDataView>) end;

  //-------------namespace: System.Data----------------
  DNDataViewManagerClass = interface(DNObjectClass)
  ['{65270F37-EC14-503F-8BCB-96073682C47C}']
  { constructors } 

    {class} function init: DNDataViewManager; overload;
    {class} function init(dataSet: DNDataSet): DNDataViewManager; overload;

  end;

  [DNTypeName('System.Data.DataViewManager')]
  DNDataViewManager = interface(DNObject)
  ['{423F3BED-9582-3C7A-A222-1BA0F450D140}']
  { getters & setters } 

    function get_DataSet: DNDataSet;
    procedure set_DataSet(value: DNDataSet);
    function get_DataViewSettings: DNDataViewSettingCollection;
    function get_DataViewSettingCollectionString: string;
    procedure set_DataViewSettingCollectionString(value: string);
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ListChanged(value: DDNC.System.ComponentModel.TypeConverter.DNListChangedEventHandler);
    procedure remove_ListChanged(value: DDNC.System.ComponentModel.TypeConverter.DNListChangedEventHandler);
    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function CreateDataView(table: DNDataTable): DNDataView;
    procedure Dispose;
    function GetService(service: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DataSet: DNDataSet read get_DataSet write set_DataSet;
    property DataViewSettings: DNDataViewSettingCollection read get_DataViewSettings;
    property DataViewSettingCollectionString: string read get_DataViewSettingCollectionString write set_DataViewSettingCollectionString;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataViewManager = class(TDNGenericImport<DNDataViewManagerClass, DNDataViewManager>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbColumnClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{7159B2A4-FAB1-5CCF-9326-AC4B056171AB}']
  end;

  [DNTypeName('System.Data.Common.DbColumn')]
  DNDbColumn = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{393DA9F3-F4CA-35E9-A2D5-93055CC8A5A3}']
  { getters & setters } 

    function get_AllowDBNull: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function get_BaseCatalogName: string;
    function get_BaseColumnName: string;
    function get_BaseSchemaName: string;
    function get_BaseServerName: string;
    function get_BaseTableName: string;
    function get_ColumnName: string;
    function get_ColumnOrdinal: DDNC.System.Private.CoreLib.DNNullable<Int32>;
    function get_ColumnSize: DDNC.System.Private.CoreLib.DNNullable<Int32>;
    function get_IsAliased: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function get_IsAutoIncrement: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function get_IsExpression: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function get_IsHidden: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function get_IsIdentity: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function get_IsKey: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function get_IsLong: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function get_IsReadOnly: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function get_IsUnique: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function get_NumericPrecision: DDNC.System.Private.CoreLib.DNNullable<Int32>;
    function get_NumericScale: DDNC.System.Private.CoreLib.DNNullable<Int32>;
    function get_UdtAssemblyQualifiedName: string;
    function get_DataType: DDNC.System.Private.CoreLib.DNType;
    function get_DataTypeName: string;
    function get_Item(&property: string): DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AllowDBNull: DDNC.System.Private.CoreLib.DNNullable<Boolean> read get_AllowDBNull;
    property BaseCatalogName: string read get_BaseCatalogName;
    property BaseColumnName: string read get_BaseColumnName;
    property BaseSchemaName: string read get_BaseSchemaName;
    property BaseServerName: string read get_BaseServerName;
    property BaseTableName: string read get_BaseTableName;
    property ColumnName: string read get_ColumnName;
    property ColumnOrdinal: DDNC.System.Private.CoreLib.DNNullable<Int32> read get_ColumnOrdinal;
    property ColumnSize: DDNC.System.Private.CoreLib.DNNullable<Int32> read get_ColumnSize;
    property IsAliased: DDNC.System.Private.CoreLib.DNNullable<Boolean> read get_IsAliased;
    property IsAutoIncrement: DDNC.System.Private.CoreLib.DNNullable<Boolean> read get_IsAutoIncrement;
    property IsExpression: DDNC.System.Private.CoreLib.DNNullable<Boolean> read get_IsExpression;
    property IsHidden: DDNC.System.Private.CoreLib.DNNullable<Boolean> read get_IsHidden;
    property IsIdentity: DDNC.System.Private.CoreLib.DNNullable<Boolean> read get_IsIdentity;
    property IsKey: DDNC.System.Private.CoreLib.DNNullable<Boolean> read get_IsKey;
    property IsLong: DDNC.System.Private.CoreLib.DNNullable<Boolean> read get_IsLong;
    property IsReadOnly: DDNC.System.Private.CoreLib.DNNullable<Boolean> read get_IsReadOnly;
    property IsUnique: DDNC.System.Private.CoreLib.DNNullable<Boolean> read get_IsUnique;
    property NumericPrecision: DDNC.System.Private.CoreLib.DNNullable<Int32> read get_NumericPrecision;
    property NumericScale: DDNC.System.Private.CoreLib.DNNullable<Int32> read get_NumericScale;
    property UdtAssemblyQualifiedName: string read get_UdtAssemblyQualifiedName;
    property DataType: DDNC.System.Private.CoreLib.DNType read get_DataType;
    property DataTypeName: string read get_DataTypeName;
    property Item[&property: string]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
  end;

  TDNDbColumn = class(TDNGenericImport<DNDbColumnClass, DNDbColumn>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbConnectionStringBuilderClass = interface(DNObjectClass)
  ['{8C53B49D-2CD8-554B-8C3F-DDF656B0C2FC}']
  { constructors } 

    {class} function init: DNDbConnectionStringBuilder; overload;
    {class} function init(useOdbcRules: Boolean): DNDbConnectionStringBuilder; overload;

  { static methods } 

    {class} procedure AppendKeyValuePair(builder: DDNC.System.Private.CoreLib.DNStringBuilder; keyword: string; value: string); overload;
    {class} procedure AppendKeyValuePair(builder: DDNC.System.Private.CoreLib.DNStringBuilder; keyword: string; value: string; useOdbcRules: Boolean); overload;

  end;

  [DNTypeName('System.Data.Common.DbConnectionStringBuilder')]
  DNDbConnectionStringBuilder = interface(DDNC.System.Private.CoreLib.DNIDictionary)
  ['{C543D397-0F63-3416-A97C-02C270F41070}']
  { getters & setters } 

    function get_Item(keyword: string): DDNC.System.Private.CoreLib.DNObject;
    procedure set_Item(keyword: string; value: DDNC.System.Private.CoreLib.DNObject);
    function get_BrowsableConnectionString: Boolean;
    procedure set_BrowsableConnectionString(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Keys: DDNC.System.Private.CoreLib.DNICollection;
    function get_Values: DDNC.System.Private.CoreLib.DNICollection;

  { methods } 

    procedure Add(keyword: string; value: DDNC.System.Private.CoreLib.DNObject);
    procedure Clear;
    function ContainsKey(keyword: string): Boolean;
    function EquivalentTo(connectionStringBuilder: DNDbConnectionStringBuilder): Boolean;
    function Remove(keyword: string): Boolean;
    function ShouldSerialize(keyword: string): Boolean;
    function ToString: string;
    function TryGetValue(keyword: string; out value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[keyword: string]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
    property BrowsableConnectionString: Boolean read get_BrowsableConnectionString write set_BrowsableConnectionString;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Keys: DDNC.System.Private.CoreLib.DNICollection read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNICollection read get_Values;
  end;

  TDNDbConnectionStringBuilder = class(TDNGenericImport<DNDbConnectionStringBuilderClass, DNDbConnectionStringBuilder>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataReaderExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D94DB1A5-E70F-53EA-8A68-E4ECCD6092E6}']
  { static methods } 

    {class} function GetColumnSchema(reader: DNDbDataReader): DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNDbColumn>;
    {class} function CanGetColumnSchema(reader: DNDbDataReader): Boolean;

  end;

  [DNTypeName('System.Data.Common.DbDataReaderExtensions')]
  DNDbDataReaderExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{BC0DA4BA-67CB-3DC0-A614-AE13DE7D2303}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDbDataReaderExtensions = class(TDNGenericImport<DNDbDataReaderExtensionsClass, DNDbDataReaderExtensions>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataRecordClass = interface(DNObjectClass)
  ['{2FC66CCB-680F-54F0-A951-3BBE2D654D6C}']
  end;

  [DNTypeName('System.Data.Common.DbDataRecord')]
  DNDbDataRecord = interface(DDNC.System.ComponentModel.TypeConverter.DNICustomTypeDescriptor)
  ['{7F09B6DC-1E4B-35D8-B7A5-79D52E280C81}']
  { getters & setters } 

    function get_FieldCount: Int32;
    function get_Item(i: Int32): DDNC.System.Private.CoreLib.DNObject; overload;
    function get_Item(name: string): DDNC.System.Private.CoreLib.DNObject; overload;

  { methods } 

    function GetBoolean(i: Int32): Boolean;
    function GetByte(i: Int32): Byte;
    function GetBytes(i: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    function GetChar(i: Int32): Char;
    function GetChars(i: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    function GetData(i: Int32): DNIDataReader;
    function GetDataTypeName(i: Int32): string;
    function GetDateTime(i: Int32): DDNC.System.Private.CoreLib.DNDateTime;
    function GetDecimal(i: Int32): DDNC.System.Private.CoreLib.DNDecimal;
    function GetDouble(i: Int32): Double;
    function GetFieldType(i: Int32): DDNC.System.Private.CoreLib.DNType;
    function GetFloat(i: Int32): Single;
    function GetGuid(i: Int32): DDNC.System.Private.CoreLib.DNGuid;
    function GetInt16(i: Int32): Int16;
    function GetInt32(i: Int32): Int32;
    function GetInt64(i: Int32): Int64;
    function GetName(i: Int32): string;
    function GetOrdinal(name: string): Int32;
    function GetString(i: Int32): string;
    function GetValue(i: Int32): DDNC.System.Private.CoreLib.DNObject;
    function GetValues(values: TArray<DDNC.System.Private.CoreLib.DNObject>): Int32;
    function IsDBNull(i: Int32): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property FieldCount: Int32 read get_FieldCount;
    property Item[i: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
    property Item[name: string]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
  end;

  TDNDbDataRecord = class(TDNGenericImport<DNDbDataRecordClass, DNDbDataRecord>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataSourceEnumeratorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A3D1CB05-7C7E-5ACD-B6C5-F506DF9F199D}']
  end;

  [DNTypeName('System.Data.Common.DbDataSourceEnumerator')]
  DNDbDataSourceEnumerator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1F87EDCA-19F0-3CD6-BC8F-579D3128BAD7}']
  { methods } 

    function GetDataSources: DNDataTable;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDbDataSourceEnumerator = class(TDNGenericImport<DNDbDataSourceEnumeratorClass, DNDbDataSourceEnumerator>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbEnumeratorClass = interface(DNObjectClass)
  ['{426A460B-8656-5764-8FAA-950B0339564C}']
  { constructors } 

    {class} function init(reader: DNIDataReader): DNDbEnumerator; overload;
    {class} function init(reader: DNIDataReader; closeReader: Boolean): DNDbEnumerator; overload;
    {class} function init(reader: DNDbDataReader): DNDbEnumerator; overload;
    {class} function init(reader: DNDbDataReader; closeReader: Boolean): DNDbEnumerator; overload;

  end;

  [DNTypeName('System.Data.Common.DbEnumerator')]
  DNDbEnumerator = interface(DDNC.System.Private.CoreLib.DNIEnumerator)
  ['{B0FC4CE1-6B5B-3CB3-BE31-F093D2F8EE39}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNObject read get_Current;
  end;

  TDNDbEnumerator = class(TDNGenericImport<DNDbEnumeratorClass, DNDbEnumerator>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbMetaDataCollectionNamesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{458BB2E2-C3F6-5E17-AA94-EFB6E8B5A3AE}']
  { static fields getter & setter } 

   function __fakeFieldGet_MetaDataCollections: string;
   function __fakeFieldGet_DataSourceInformation: string;
   function __fakeFieldGet_DataTypes: string;
   function __fakeFieldGet_Restrictions: string;
   function __fakeFieldGet_ReservedWords: string;

  { static fields } 

    {class} property MetaDataCollections: string read __fakeFieldGet_MetaDataCollections;
    {class} property DataSourceInformation: string read __fakeFieldGet_DataSourceInformation;
    {class} property DataTypes: string read __fakeFieldGet_DataTypes;
    {class} property Restrictions: string read __fakeFieldGet_Restrictions;
    {class} property ReservedWords: string read __fakeFieldGet_ReservedWords;

  end;

  [DNTypeName('System.Data.Common.DbMetaDataCollectionNames')]
  DNDbMetaDataCollectionNames = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8FFAAF14-6313-3F23-BD75-CFA8E25A4688}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDbMetaDataCollectionNames = class(TDNGenericImport<DNDbMetaDataCollectionNamesClass, DNDbMetaDataCollectionNames>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbMetaDataColumnNamesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9B7D38B3-9717-5A1F-AE7B-0CBC0288BF24}']
  { static fields getter & setter } 

   function __fakeFieldGet_CollectionName: string;
   function __fakeFieldGet_ColumnSize: string;
   function __fakeFieldGet_CompositeIdentifierSeparatorPattern: string;
   function __fakeFieldGet_CreateFormat: string;
   function __fakeFieldGet_CreateParameters: string;
   function __fakeFieldGet_DataSourceProductName: string;
   function __fakeFieldGet_DataSourceProductVersion: string;
   function __fakeFieldGet_DataType: string;
   function __fakeFieldGet_DataSourceProductVersionNormalized: string;
   function __fakeFieldGet_GroupByBehavior: string;
   function __fakeFieldGet_IdentifierCase: string;
   function __fakeFieldGet_IdentifierPattern: string;
   function __fakeFieldGet_IsAutoIncrementable: string;
   function __fakeFieldGet_IsBestMatch: string;
   function __fakeFieldGet_IsCaseSensitive: string;
   function __fakeFieldGet_IsConcurrencyType: string;
   function __fakeFieldGet_IsFixedLength: string;
   function __fakeFieldGet_IsFixedPrecisionScale: string;
   function __fakeFieldGet_IsLiteralSupported: string;
   function __fakeFieldGet_IsLong: string;
   function __fakeFieldGet_IsNullable: string;
   function __fakeFieldGet_IsSearchable: string;
   function __fakeFieldGet_IsSearchableWithLike: string;
   function __fakeFieldGet_IsUnsigned: string;
   function __fakeFieldGet_LiteralPrefix: string;
   function __fakeFieldGet_LiteralSuffix: string;
   function __fakeFieldGet_MaximumScale: string;
   function __fakeFieldGet_MinimumScale: string;
   function __fakeFieldGet_NumberOfIdentifierParts: string;
   function __fakeFieldGet_NumberOfRestrictions: string;
   function __fakeFieldGet_OrderByColumnsInSelect: string;
   function __fakeFieldGet_ParameterMarkerFormat: string;
   function __fakeFieldGet_ParameterMarkerPattern: string;
   function __fakeFieldGet_ParameterNameMaxLength: string;
   function __fakeFieldGet_ParameterNamePattern: string;
   function __fakeFieldGet_ProviderDbType: string;
   function __fakeFieldGet_QuotedIdentifierCase: string;
   function __fakeFieldGet_QuotedIdentifierPattern: string;
   function __fakeFieldGet_ReservedWord: string;
   function __fakeFieldGet_StatementSeparatorPattern: string;
   function __fakeFieldGet_StringLiteralPattern: string;
   function __fakeFieldGet_SupportedJoinOperators: string;
   function __fakeFieldGet_TypeName: string;

  { static fields } 

    {class} property CollectionName: string read __fakeFieldGet_CollectionName;
    {class} property ColumnSize: string read __fakeFieldGet_ColumnSize;
    {class} property CompositeIdentifierSeparatorPattern: string read __fakeFieldGet_CompositeIdentifierSeparatorPattern;
    {class} property CreateFormat: string read __fakeFieldGet_CreateFormat;
    {class} property CreateParameters: string read __fakeFieldGet_CreateParameters;
    {class} property DataSourceProductName: string read __fakeFieldGet_DataSourceProductName;
    {class} property DataSourceProductVersion: string read __fakeFieldGet_DataSourceProductVersion;
    {class} property DataType: string read __fakeFieldGet_DataType;
    {class} property DataSourceProductVersionNormalized: string read __fakeFieldGet_DataSourceProductVersionNormalized;
    {class} property GroupByBehavior: string read __fakeFieldGet_GroupByBehavior;
    {class} property IdentifierCase: string read __fakeFieldGet_IdentifierCase;
    {class} property IdentifierPattern: string read __fakeFieldGet_IdentifierPattern;
    {class} property IsAutoIncrementable: string read __fakeFieldGet_IsAutoIncrementable;
    {class} property IsBestMatch: string read __fakeFieldGet_IsBestMatch;
    {class} property IsCaseSensitive: string read __fakeFieldGet_IsCaseSensitive;
    {class} property IsConcurrencyType: string read __fakeFieldGet_IsConcurrencyType;
    {class} property IsFixedLength: string read __fakeFieldGet_IsFixedLength;
    {class} property IsFixedPrecisionScale: string read __fakeFieldGet_IsFixedPrecisionScale;
    {class} property IsLiteralSupported: string read __fakeFieldGet_IsLiteralSupported;
    {class} property IsLong: string read __fakeFieldGet_IsLong;
    {class} property IsNullable: string read __fakeFieldGet_IsNullable;
    {class} property IsSearchable: string read __fakeFieldGet_IsSearchable;
    {class} property IsSearchableWithLike: string read __fakeFieldGet_IsSearchableWithLike;
    {class} property IsUnsigned: string read __fakeFieldGet_IsUnsigned;
    {class} property LiteralPrefix: string read __fakeFieldGet_LiteralPrefix;
    {class} property LiteralSuffix: string read __fakeFieldGet_LiteralSuffix;
    {class} property MaximumScale: string read __fakeFieldGet_MaximumScale;
    {class} property MinimumScale: string read __fakeFieldGet_MinimumScale;
    {class} property NumberOfIdentifierParts: string read __fakeFieldGet_NumberOfIdentifierParts;
    {class} property NumberOfRestrictions: string read __fakeFieldGet_NumberOfRestrictions;
    {class} property OrderByColumnsInSelect: string read __fakeFieldGet_OrderByColumnsInSelect;
    {class} property ParameterMarkerFormat: string read __fakeFieldGet_ParameterMarkerFormat;
    {class} property ParameterMarkerPattern: string read __fakeFieldGet_ParameterMarkerPattern;
    {class} property ParameterNameMaxLength: string read __fakeFieldGet_ParameterNameMaxLength;
    {class} property ParameterNamePattern: string read __fakeFieldGet_ParameterNamePattern;
    {class} property ProviderDbType: string read __fakeFieldGet_ProviderDbType;
    {class} property QuotedIdentifierCase: string read __fakeFieldGet_QuotedIdentifierCase;
    {class} property QuotedIdentifierPattern: string read __fakeFieldGet_QuotedIdentifierPattern;
    {class} property ReservedWord: string read __fakeFieldGet_ReservedWord;
    {class} property StatementSeparatorPattern: string read __fakeFieldGet_StatementSeparatorPattern;
    {class} property StringLiteralPattern: string read __fakeFieldGet_StringLiteralPattern;
    {class} property SupportedJoinOperators: string read __fakeFieldGet_SupportedJoinOperators;
    {class} property TypeName: string read __fakeFieldGet_TypeName;

  end;

  [DNTypeName('System.Data.Common.DbMetaDataColumnNames')]
  DNDbMetaDataColumnNames = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{623427A7-F39E-309C-B148-1289405FDA3F}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDbMetaDataColumnNames = class(TDNGenericImport<DNDbMetaDataColumnNamesClass, DNDbMetaDataColumnNames>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderFactoriesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E92CE632-BCEC-52B7-A571-75DA9C3F520C}']
  { static methods } 

    {class} function TryGetFactory(providerInvariantName: string; out factory: DNDbProviderFactory): Boolean;
    {class} function GetFactory(providerInvariantName: string): DNDbProviderFactory; overload;
    {class} function GetFactory(providerRow: DNDataRow): DNDbProviderFactory; overload;
    {class} function GetFactory(connection: DNDbConnection): DNDbProviderFactory; overload;
    {class} function GetFactoryClasses: DNDataTable;
    {class} function GetProviderInvariantNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    {class} procedure RegisterFactory(providerInvariantName: string; factoryTypeAssemblyQualifiedName: string); overload;
    {class} procedure RegisterFactory(providerInvariantName: string; providerFactoryClass: DDNC.System.Private.CoreLib.DNType); overload;
    {class} procedure RegisterFactory(providerInvariantName: string; factory: DNDbProviderFactory); overload;
    {class} function UnregisterFactory(providerInvariantName: string): Boolean;

  end;

  [DNTypeName('System.Data.Common.DbProviderFactories')]
  DNDbProviderFactories = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D84BC82D-C73E-3B16-BD15-EBAF0E3DAC92}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDbProviderFactories = class(TDNGenericImport<DNDbProviderFactoriesClass, DNDbProviderFactories>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderFactoryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{947928EA-B09C-554E-8B3E-310310D6704A}']
  end;

  [DNTypeName('System.Data.Common.DbProviderFactory')]
  DNDbProviderFactory = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{86678B7E-E76F-3F6C-99FD-E9D3097C853E}']
  { getters & setters } 

    function get_CanCreateDataSourceEnumerator: Boolean;
    function get_CanCreateDataAdapter: Boolean;
    function get_CanCreateCommandBuilder: Boolean;

  { methods } 

    function CreateCommand: DNDbCommand;
    function CreateCommandBuilder: DNDbCommandBuilder;
    function CreateConnection: DNDbConnection;
    function CreateConnectionStringBuilder: DNDbConnectionStringBuilder;
    function CreateDataAdapter: DNDbDataAdapter;
    function CreateParameter: DNDbParameter;
    function CreateDataSourceEnumerator: DNDbDataSourceEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CanCreateDataSourceEnumerator: Boolean read get_CanCreateDataSourceEnumerator;
    property CanCreateDataAdapter: Boolean read get_CanCreateDataAdapter;
    property CanCreateCommandBuilder: Boolean read get_CanCreateCommandBuilder;
  end;

  TDNDbProviderFactory = class(TDNGenericImport<DNDbProviderFactoryClass, DNDbProviderFactory>) end;

  //-------------namespace: System.Data.Common----------------
  DNSchemaTableColumnClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{FD8C37F6-CB46-5027-966D-86954E3FE506}']
  { static fields getter & setter } 

   function __fakeFieldGet_ColumnName: string;
   function __fakeFieldGet_ColumnOrdinal: string;
   function __fakeFieldGet_ColumnSize: string;
   function __fakeFieldGet_NumericPrecision: string;
   function __fakeFieldGet_NumericScale: string;
   function __fakeFieldGet_DataType: string;
   function __fakeFieldGet_ProviderType: string;
   function __fakeFieldGet_NonVersionedProviderType: string;
   function __fakeFieldGet_IsLong: string;
   function __fakeFieldGet_AllowDBNull: string;
   function __fakeFieldGet_IsAliased: string;
   function __fakeFieldGet_IsExpression: string;
   function __fakeFieldGet_IsKey: string;
   function __fakeFieldGet_IsUnique: string;
   function __fakeFieldGet_BaseSchemaName: string;
   function __fakeFieldGet_BaseTableName: string;
   function __fakeFieldGet_BaseColumnName: string;

  { static fields } 

    {class} property ColumnName: string read __fakeFieldGet_ColumnName;
    {class} property ColumnOrdinal: string read __fakeFieldGet_ColumnOrdinal;
    {class} property ColumnSize: string read __fakeFieldGet_ColumnSize;
    {class} property NumericPrecision: string read __fakeFieldGet_NumericPrecision;
    {class} property NumericScale: string read __fakeFieldGet_NumericScale;
    {class} property DataType: string read __fakeFieldGet_DataType;
    {class} property ProviderType: string read __fakeFieldGet_ProviderType;
    {class} property NonVersionedProviderType: string read __fakeFieldGet_NonVersionedProviderType;
    {class} property IsLong: string read __fakeFieldGet_IsLong;
    {class} property AllowDBNull: string read __fakeFieldGet_AllowDBNull;
    {class} property IsAliased: string read __fakeFieldGet_IsAliased;
    {class} property IsExpression: string read __fakeFieldGet_IsExpression;
    {class} property IsKey: string read __fakeFieldGet_IsKey;
    {class} property IsUnique: string read __fakeFieldGet_IsUnique;
    {class} property BaseSchemaName: string read __fakeFieldGet_BaseSchemaName;
    {class} property BaseTableName: string read __fakeFieldGet_BaseTableName;
    {class} property BaseColumnName: string read __fakeFieldGet_BaseColumnName;

  end;

  [DNTypeName('System.Data.Common.SchemaTableColumn')]
  DNSchemaTableColumn = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8DEA295A-454D-377E-8CC1-7897398100B4}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSchemaTableColumn = class(TDNGenericImport<DNSchemaTableColumnClass, DNSchemaTableColumn>) end;

  //-------------namespace: System.Data.Common----------------
  DNSchemaTableOptionalColumnClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A36BC4C4-FD85-52D0-8F71-E25AFF1824D4}']
  { static fields getter & setter } 

   function __fakeFieldGet_ProviderSpecificDataType: string;
   function __fakeFieldGet_IsAutoIncrement: string;
   function __fakeFieldGet_IsHidden: string;
   function __fakeFieldGet_IsReadOnly: string;
   function __fakeFieldGet_IsRowVersion: string;
   function __fakeFieldGet_BaseServerName: string;
   function __fakeFieldGet_BaseCatalogName: string;
   function __fakeFieldGet_AutoIncrementSeed: string;
   function __fakeFieldGet_AutoIncrementStep: string;
   function __fakeFieldGet_DefaultValue: string;
   function __fakeFieldGet_Expression: string;
   function __fakeFieldGet_BaseTableNamespace: string;
   function __fakeFieldGet_BaseColumnNamespace: string;
   function __fakeFieldGet_ColumnMapping: string;

  { static fields } 

    {class} property ProviderSpecificDataType: string read __fakeFieldGet_ProviderSpecificDataType;
    {class} property IsAutoIncrement: string read __fakeFieldGet_IsAutoIncrement;
    {class} property IsHidden: string read __fakeFieldGet_IsHidden;
    {class} property IsReadOnly: string read __fakeFieldGet_IsReadOnly;
    {class} property IsRowVersion: string read __fakeFieldGet_IsRowVersion;
    {class} property BaseServerName: string read __fakeFieldGet_BaseServerName;
    {class} property BaseCatalogName: string read __fakeFieldGet_BaseCatalogName;
    {class} property AutoIncrementSeed: string read __fakeFieldGet_AutoIncrementSeed;
    {class} property AutoIncrementStep: string read __fakeFieldGet_AutoIncrementStep;
    {class} property DefaultValue: string read __fakeFieldGet_DefaultValue;
    {class} property Expression: string read __fakeFieldGet_Expression;
    {class} property BaseTableNamespace: string read __fakeFieldGet_BaseTableNamespace;
    {class} property BaseColumnNamespace: string read __fakeFieldGet_BaseColumnNamespace;
    {class} property ColumnMapping: string read __fakeFieldGet_ColumnMapping;

  end;

  [DNTypeName('System.Data.Common.SchemaTableOptionalColumn')]
  DNSchemaTableOptionalColumn = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6147F317-B2B9-304F-B24A-6092DAA12C8C}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSchemaTableOptionalColumn = class(TDNGenericImport<DNSchemaTableOptionalColumnClass, DNSchemaTableOptionalColumn>) end;

  //-------------namespace: System.Data----------------
  DNConstraintClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{52B51F32-424F-5228-9C89-298FB355A457}']
  end;

  [DNTypeName('System.Data.Constraint')]
  DNConstraint = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6EA88604-AFD5-38E2-B439-8672F4778598}']
  { getters & setters } 

    function get_ConstraintName: string;
    procedure set_ConstraintName(value: string);
    function get_Table: DNDataTable;
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ConstraintName: string read get_ConstraintName write set_ConstraintName;
    property Table: DNDataTable read get_Table;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNConstraint = class(TDNGenericImport<DNConstraintClass, DNConstraint>) end;

  //-------------namespace: System.Data----------------
  DNForeignKeyConstraintClass = interface(DNConstraintClass)
  ['{20F43806-0190-5B59-B0FA-E258FE90147F}']
  { constructors } 

    {class} function init(parentColumn: DNDataColumn; childColumn: DNDataColumn): DNForeignKeyConstraint; overload;
    {class} function init(constraintName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNForeignKeyConstraint; overload;
    {class} function init(parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNForeignKeyConstraint; overload;
    {class} function init(constraintName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNForeignKeyConstraint; overload;
    {class} function init(constraintName: string; parentTableName: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; acceptRejectRule: DNAcceptRejectRule; deleteRule: DNRule; updateRule: DNRule): DNForeignKeyConstraint; overload;
    {class} function init(constraintName: string; parentTableName: string; parentTableNamespace: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; acceptRejectRule: DNAcceptRejectRule; deleteRule: DNRule; updateRule: DNRule): DNForeignKeyConstraint; overload;

  end;

  [DNTypeName('System.Data.ForeignKeyConstraint')]
  DNForeignKeyConstraint = interface(DNConstraint)
  ['{8222731F-01AA-3492-A6FB-C7AEE7E07722}']
  { getters & setters } 

    function get_Columns: TArray<DNDataColumn>;
    function get_Table: DNDataTable;
    function get_AcceptRejectRule: DNAcceptRejectRule;
    procedure set_AcceptRejectRule(value: DNAcceptRejectRule);
    function get_DeleteRule: DNRule;
    procedure set_DeleteRule(value: DNRule);
    function get_RelatedColumns: TArray<DNDataColumn>;
    function get_RelatedTable: DNDataTable;
    function get_UpdateRule: DNRule;
    procedure set_UpdateRule(value: DNRule);
    function get_ConstraintName: string;
    procedure set_ConstraintName(value: string);
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    function Equals(key: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Columns: TArray<DNDataColumn> read get_Columns;
    property Table: DNDataTable read get_Table;
    property AcceptRejectRule: DNAcceptRejectRule read get_AcceptRejectRule write set_AcceptRejectRule;
    property DeleteRule: DNRule read get_DeleteRule write set_DeleteRule;
    property RelatedColumns: TArray<DNDataColumn> read get_RelatedColumns;
    property RelatedTable: DNDataTable read get_RelatedTable;
    property UpdateRule: DNRule read get_UpdateRule write set_UpdateRule;
    property ConstraintName: string read get_ConstraintName write set_ConstraintName;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNForeignKeyConstraint = class(TDNGenericImport<DNForeignKeyConstraintClass, DNForeignKeyConstraint>) end;

  //-------------namespace: System.Data----------------
  DNUniqueConstraintClass = interface(DNConstraintClass)
  ['{174E63FC-0636-5C7B-9C9B-E15F84C43D4F}']
  { constructors } 

    {class} function init(name: string; column: DNDataColumn): DNUniqueConstraint; overload;
    {class} function init(column: DNDataColumn): DNUniqueConstraint; overload;
    {class} function init(name: string; columns: TArray<DNDataColumn>): DNUniqueConstraint; overload;
    {class} function init(columns: TArray<DNDataColumn>): DNUniqueConstraint; overload;
    {class} function init(name: string; columnNames: TArray<string>; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    {class} function init(name: string; column: DNDataColumn; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    {class} function init(column: DNDataColumn; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    {class} function init(name: string; columns: TArray<DNDataColumn>; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    {class} function init(columns: TArray<DNDataColumn>; isPrimaryKey: Boolean): DNUniqueConstraint; overload;

  end;

  [DNTypeName('System.Data.UniqueConstraint')]
  DNUniqueConstraint = interface(DNConstraint)
  ['{EC7C23B9-2F19-3ACD-A63E-F042C8362ABE}']
  { getters & setters } 

    function get_Columns: TArray<DNDataColumn>;
    function get_IsPrimaryKey: Boolean;
    function get_Table: DNDataTable;
    function get_ConstraintName: string;
    procedure set_ConstraintName(value: string);
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    function Equals(key2: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Columns: TArray<DNDataColumn> read get_Columns;
    property IsPrimaryKey: Boolean read get_IsPrimaryKey;
    property Table: DNDataTable read get_Table;
    property ConstraintName: string read get_ConstraintName write set_ConstraintName;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNUniqueConstraint = class(TDNGenericImport<DNUniqueConstraintClass, DNUniqueConstraint>) end;

  //-------------namespace: System.Data----------------
  DNDataReaderExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{734534CA-8049-5E0F-9C97-0ACEB5101601}']
  { static methods } 

    {class} function GetBoolean(reader: DNDbDataReader; name: string): Boolean;
    {class} function GetByte(reader: DNDbDataReader; name: string): Byte;
    {class} function GetBytes(reader: DNDbDataReader; name: string; dataOffset: Int64; buffer: TArray<Byte>; bufferOffset: Int32; length: Int32): Int64;
    {class} function GetChar(reader: DNDbDataReader; name: string): Char;
    {class} function GetChars(reader: DNDbDataReader; name: string; dataOffset: Int64; buffer: TArray<Char>; bufferOffset: Int32; length: Int32): Int64;
    {class} function GetData(reader: DNDbDataReader; name: string): DNDbDataReader;
    {class} function GetDataTypeName(reader: DNDbDataReader; name: string): string;
    {class} function GetDateTime(reader: DNDbDataReader; name: string): DDNC.System.Private.CoreLib.DNDateTime;
    {class} function GetDecimal(reader: DNDbDataReader; name: string): DDNC.System.Private.CoreLib.DNDecimal;
    {class} function GetDouble(reader: DNDbDataReader; name: string): Double;
    {class} function GetFieldType(reader: DNDbDataReader; name: string): DDNC.System.Private.CoreLib.DNType;
    {class} function GetFloat(reader: DNDbDataReader; name: string): Single;
    {class} function GetGuid(reader: DNDbDataReader; name: string): DDNC.System.Private.CoreLib.DNGuid;
    {class} function GetInt16(reader: DNDbDataReader; name: string): Int16;
    {class} function GetInt32(reader: DNDbDataReader; name: string): Int32;
    {class} function GetInt64(reader: DNDbDataReader; name: string): Int64;
    {class} function GetProviderSpecificFieldType(reader: DNDbDataReader; name: string): DDNC.System.Private.CoreLib.DNType;
    {class} function GetProviderSpecificValue(reader: DNDbDataReader; name: string): DDNC.System.Private.CoreLib.DNObject;
    {class} function GetStream(reader: DNDbDataReader; name: string): DDNC.System.Private.CoreLib.DNStream;
    {class} function GetString(reader: DNDbDataReader; name: string): string;
    {class} function GetTextReader(reader: DNDbDataReader; name: string): DDNC.System.Private.CoreLib.DNTextReader;
    {class} function GetValue(reader: DNDbDataReader; name: string): DDNC.System.Private.CoreLib.DNObject;
    {class} function IsDBNull(reader: DNDbDataReader; name: string): Boolean;
    {class} function IsDBNullAsync(reader: DNDbDataReader; name: string; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Boolean>;

  end;

  [DNTypeName('System.Data.DataReaderExtensions')]
  DNDataReaderExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7EAED899-FBD3-3692-92BE-B5C6B5CA3EE9}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDataReaderExtensions = class(TDNGenericImport<DNDataReaderExtensionsClass, DNDataReaderExtensions>) end;

  //-------------namespace: System.Data----------------
  DNDataRelationClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9740764D-E681-5ECE-B165-C7EDDE022258}']
  { constructors } 

    {class} function init(relationName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    {class} function init(relationName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn; createConstraints: Boolean): DNDataRelation; overload;
    {class} function init(relationName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    {class} function init(relationName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>; createConstraints: Boolean): DNDataRelation; overload;
    {class} function init(relationName: string; parentTableName: string; childTableName: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; nested: Boolean): DNDataRelation; overload;
    {class} function init(relationName: string; parentTableName: string; parentTableNamespace: string; childTableName: string; childTableNamespace: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; nested: Boolean): DNDataRelation; overload;

  end;

  [DNTypeName('System.Data.DataRelation')]
  DNDataRelation = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B0984588-81D4-39DE-A7D5-3ED939A1F182}']
  { getters & setters } 

    function get_ChildColumns: TArray<DNDataColumn>;
    function get_ChildTable: DNDataTable;
    function get_DataSet: DNDataSet;
    function get_ParentColumns: TArray<DNDataColumn>;
    function get_ParentTable: DNDataTable;
    function get_RelationName: string;
    procedure set_RelationName(value: string);
    function get_Nested: Boolean;
    procedure set_Nested(value: Boolean);
    function get_ParentKeyConstraint: DNUniqueConstraint;
    function get_ChildKeyConstraint: DNForeignKeyConstraint;
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ChildColumns: TArray<DNDataColumn> read get_ChildColumns;
    property ChildTable: DNDataTable read get_ChildTable;
    property DataSet: DNDataSet read get_DataSet;
    property ParentColumns: TArray<DNDataColumn> read get_ParentColumns;
    property ParentTable: DNDataTable read get_ParentTable;
    property RelationName: string read get_RelationName write set_RelationName;
    property Nested: Boolean read get_Nested write set_Nested;
    property ParentKeyConstraint: DNUniqueConstraint read get_ParentKeyConstraint;
    property ChildKeyConstraint: DNForeignKeyConstraint read get_ChildKeyConstraint;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNDataRelation = class(TDNGenericImport<DNDataRelationClass, DNDataRelation>) end;

  //-------------namespace: System.Data----------------
  DNDataRowClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F8F00827-E9CA-547B-9D7C-17A310C60B9E}']
  end;

  [DNTypeName('System.Data.DataRow')]
  DNDataRow = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{05BA4230-BEFB-3397-AD5E-BA4102CC3852}']
  { getters & setters } 

    function get_RowError: string;
    procedure set_RowError(value: string);
    function get_RowState: DNDataRowState;
    function get_Table: DNDataTable;
    function get_Item(columnIndex: Int32): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure set_Item(columnIndex: Int32; value: DDNC.System.Private.CoreLib.DNObject); overload;
    function get_Item(columnName: string): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure set_Item(columnName: string; value: DDNC.System.Private.CoreLib.DNObject); overload;
    function get_Item(column: DNDataColumn): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure set_Item(column: DNDataColumn; value: DDNC.System.Private.CoreLib.DNObject); overload;
    function get_Item(columnIndex: Int32; version: DNDataRowVersion): DDNC.System.Private.CoreLib.DNObject; overload;
    function get_Item(columnName: string; version: DNDataRowVersion): DDNC.System.Private.CoreLib.DNObject; overload;
    function get_Item(column: DNDataColumn; version: DNDataRowVersion): DDNC.System.Private.CoreLib.DNObject; overload;
    function get_ItemArray: TArray<DDNC.System.Private.CoreLib.DNObject>;
    procedure set_ItemArray(value: TArray<DDNC.System.Private.CoreLib.DNObject>);
    function get_HasErrors: Boolean;

  { methods } 

    procedure SetParentRow(parentRow: DNDataRow); overload;
    procedure SetParentRow(parentRow: DNDataRow; relation: DNDataRelation); overload;
    procedure SetAdded;
    procedure SetModified;
    procedure AcceptChanges;
    procedure BeginEdit;
    procedure CancelEdit;
    procedure Delete;
    procedure EndEdit;
    procedure SetColumnError(columnIndex: Int32; error: string); overload;
    procedure SetColumnError(columnName: string; error: string); overload;
    procedure SetColumnError(column: DNDataColumn; error: string); overload;
    function GetColumnError(columnIndex: Int32): string; overload;
    function GetColumnError(columnName: string): string; overload;
    function GetColumnError(column: DNDataColumn): string; overload;
    procedure ClearErrors;
    function GetColumnsInError: TArray<DNDataColumn>;
    function GetChildRows(relationName: string): TArray<DNDataRow>; overload;
    function GetChildRows(relationName: string; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    function GetChildRows(relation: DNDataRelation): TArray<DNDataRow>; overload;
    function GetChildRows(relation: DNDataRelation; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    function GetParentRow(relationName: string): DNDataRow; overload;
    function GetParentRow(relationName: string; version: DNDataRowVersion): DNDataRow; overload;
    function GetParentRow(relation: DNDataRelation): DNDataRow; overload;
    function GetParentRow(relation: DNDataRelation; version: DNDataRowVersion): DNDataRow; overload;
    function GetParentRows(relationName: string): TArray<DNDataRow>; overload;
    function GetParentRows(relationName: string; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    function GetParentRows(relation: DNDataRelation): TArray<DNDataRow>; overload;
    function GetParentRows(relation: DNDataRelation; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    function HasVersion(version: DNDataRowVersion): Boolean;
    function IsNull(columnIndex: Int32): Boolean; overload;
    function IsNull(columnName: string): Boolean; overload;
    function IsNull(column: DNDataColumn): Boolean; overload;
    function IsNull(column: DNDataColumn; version: DNDataRowVersion): Boolean; overload;
    procedure RejectChanges;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property RowError: string read get_RowError write set_RowError;
    property RowState: DNDataRowState read get_RowState;
    property Table: DNDataTable read get_Table;
    property Item[columnIndex: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
    property Item[columnName: string]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
    property Item[column: DNDataColumn]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
    property Item[columnIndex: Int32; version: DNDataRowVersion]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
    property Item[columnName: string; version: DNDataRowVersion]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
    property Item[column: DNDataColumn; version: DNDataRowVersion]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
    property ItemArray: TArray<DDNC.System.Private.CoreLib.DNObject> read get_ItemArray write set_ItemArray;
    property HasErrors: Boolean read get_HasErrors;
  end;

  TDNDataRow = class(TDNGenericImport<DNDataRowClass, DNDataRow>) end;

  //-------------namespace: System.Data----------------
  DNDataRowBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{65413ED0-2DCD-5FED-A248-1FBFE105113F}']
  end;

  [DNTypeName('System.Data.DataRowBuilder')]
  DNDataRowBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{EC0F5E85-7A97-3E9E-8E6A-A909A24799BB}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDataRowBuilder = class(TDNGenericImport<DNDataRowBuilderClass, DNDataRowBuilder>) end;

  //-------------namespace: System.Data----------------
  DNDataRowComparerClass<TRow> = interface(DNObjectClass)
  ['{B6C66432-F9A5-5BB7-84E4-77B8894B14FF}']
  { static getter & setter } 

    {class} function get_Default: DNDataRowComparer<TRow>;

  { static propertys } 

    {class} property &Default: DNDataRowComparer<TRow> read get_Default;
  end;

  [DNTypeName('System.Data.DataRowComparer`1')]
  DNDataRowComparer<TRow> = interface(DDNC.System.Private.CoreLib.DNIEqualityComparer<TRow>)
  ['{C303D2DF-01F8-32E1-9D50-BB3B7F1BF502}']
  { methods } 

    function Equals(leftRow: TRow; rightRow: TRow): Boolean; overload;
    function GetHashCode(row: TRow): Int32; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;

  end;

  TDNDataRowComparer<TRow> = class(TDNGenericImport<DNDataRowComparerClass<TRow>, DNDataRowComparer<TRow>>) end;

  //-------------namespace: System.Data----------------
  DNDataRowComparerClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{53D58A71-4DC8-5D97-8BC6-E733A97F548B}']
  { static getter & setter } 

    {class} function get_Default: DNDataRowComparer<DNDataRow>;

  { static propertys } 

    {class} property &Default: DNDataRowComparer<DNDataRow> read get_Default;
  end;

  [DNTypeName('System.Data.DataRowComparer')]
  DNDataRowComparer = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6CD8AB2F-6B2D-3F21-982F-CBBC243DC100}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDataRowComparer = class(TDNGenericImport<DNDataRowComparerClass, DNDataRowComparer>) end;

  //-------------namespace: System.Data----------------
  DNDataRowExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{AA9D47A9-35DA-55F8-B214-CDC4E4726E8D}']
  end;

  [DNTypeName('System.Data.DataRowExtensions')]
  DNDataRowExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B31A1051-AA60-36C9-9216-E634C2F3F30C}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDataRowExtensions = class(TDNGenericImport<DNDataRowExtensionsClass, DNDataRowExtensions>) end;

  //-------------namespace: System.Data----------------
  DNDataRowViewClass = interface(DNObjectClass)
  ['{52D94BE5-D047-599E-B279-AF60CF179DF4}']
  end;

  [DNTypeName('System.Data.DataRowView')]
  DNDataRowView = interface(DDNC.System.ComponentModel.TypeConverter.DNICustomTypeDescriptor)
  ['{7FDF4484-09FB-38D4-98A9-1B26738E0A37}']
  { getters & setters } 

    function get_DataView: DNDataView;
    function get_Item(ndx: Int32): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure set_Item(ndx: Int32; value: DDNC.System.Private.CoreLib.DNObject); overload;
    function get_Item(&property: string): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure set_Item(&property: string; value: DDNC.System.Private.CoreLib.DNObject); overload;
    function get_RowVersion: DNDataRowVersion;
    function get_Row: DNDataRow;
    function get_IsNew: Boolean;
    function get_IsEdit: Boolean;

  { events } 

    procedure add_PropertyChanged(value: DDNC.System.ObjectModel.DNPropertyChangedEventHandler);
    procedure remove_PropertyChanged(value: DDNC.System.ObjectModel.DNPropertyChangedEventHandler);

  { methods } 

    function Equals(other: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function CreateChildView(relation: DNDataRelation; followParent: Boolean): DNDataView; overload;
    function CreateChildView(relation: DNDataRelation): DNDataView; overload;
    function CreateChildView(relationName: string; followParent: Boolean): DNDataView; overload;
    function CreateChildView(relationName: string): DNDataView; overload;
    procedure BeginEdit;
    procedure CancelEdit;
    procedure EndEdit;
    procedure Delete;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataView: DNDataView read get_DataView;
    property Item[ndx: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
    property Item[&property: string]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
    property RowVersion: DNDataRowVersion read get_RowVersion;
    property Row: DNDataRow read get_Row;
    property IsNew: Boolean read get_IsNew;
    property IsEdit: Boolean read get_IsEdit;
  end;

  TDNDataRowView = class(TDNGenericImport<DNDataRowViewClass, DNDataRowView>) end;

  //-------------namespace: System.Data----------------
  DNDataTableExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{32715A5F-AE61-5729-A484-3685D5B6A068}']
  { static methods } 

    {class} function AsEnumerable(source: DNDataTable): DNEnumerableRowCollection<DNDataRow>;
    {class} function AsDataView(table: DNDataTable): DNDataView; overload;

  end;

  [DNTypeName('System.Data.DataTableExtensions')]
  DNDataTableExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2D68506B-66BB-3314-B7C9-40E411A63A6A}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDataTableExtensions = class(TDNGenericImport<DNDataTableExtensionsClass, DNDataTableExtensions>) end;

  //-------------namespace: System.Data----------------
  DNDataViewSettingClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{47A193E1-68B1-5D1B-97CD-4DE5098C6B7D}']
  end;

  [DNTypeName('System.Data.DataViewSetting')]
  DNDataViewSetting = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D721FF09-D775-3EC9-93D9-EC299E304219}']
  { getters & setters } 

    function get_ApplyDefaultSort: Boolean;
    procedure set_ApplyDefaultSort(value: Boolean);
    function get_DataViewManager: DNDataViewManager;
    function get_Table: DNDataTable;
    function get_RowFilter: string;
    procedure set_RowFilter(value: string);
    function get_RowStateFilter: DNDataViewRowState;
    procedure set_RowStateFilter(value: DNDataViewRowState);
    function get_Sort: string;
    procedure set_Sort(value: string);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ApplyDefaultSort: Boolean read get_ApplyDefaultSort write set_ApplyDefaultSort;
    property DataViewManager: DNDataViewManager read get_DataViewManager;
    property Table: DNDataTable read get_Table;
    property RowFilter: string read get_RowFilter write set_RowFilter;
    property RowStateFilter: DNDataViewRowState read get_RowStateFilter write set_RowStateFilter;
    property Sort: string read get_Sort write set_Sort;
  end;

  TDNDataViewSetting = class(TDNGenericImport<DNDataViewSettingClass, DNDataViewSetting>) end;

  //-------------namespace: System.Data----------------
  DNDataViewSettingCollectionClass = interface(DNObjectClass)
  ['{14C0C178-B495-5523-A14B-81874F5C1700}']
  end;

  [DNTypeName('System.Data.DataViewSettingCollection')]
  DNDataViewSettingCollection = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{4632DDA4-567F-314C-AFCE-FDCA8974F29F}']
  { getters & setters } 

    function get_Item(table: DNDataTable): DNDataViewSetting; overload;
    procedure set_Item(table: DNDataTable; value: DNDataViewSetting); overload;
    function get_Item(tableName: string): DNDataViewSetting; overload;
    function get_Item(index: Int32): DNDataViewSetting; overload;
    procedure set_Item(index: Int32; value: DNDataViewSetting); overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    procedure CopyTo(ar: DDNC.System.Private.CoreLib.DNArray; index: Int32); overload;
    procedure CopyTo(ar: TArray<DNDataViewSetting>; index: Int32); overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[table: DNDataTable]: DNDataViewSetting read get_Item write set_Item; default;
    property Item[tableName: string]: DNDataViewSetting read get_Item; default;
    property Item[index: Int32]: DNDataViewSetting read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
  end;

  TDNDataViewSettingCollection = class(TDNGenericImport<DNDataViewSettingCollectionClass, DNDataViewSettingCollection>) end;

  //-------------namespace: System.Data----------------
  DNEnumerableRowCollectionClass = interface(DNObjectClass)
  ['{8459AAC5-5FAE-5B83-8DD8-F07A454C070A}']
  end;

  [DNTypeName('System.Data.EnumerableRowCollection')]
  DNEnumerableRowCollection = interface(DDNC.System.Private.CoreLib.DNIEnumerable)
  ['{326E29BC-8F4B-37E3-986D-6FD106D6F75E}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNEnumerableRowCollection = class(TDNGenericImport<DNEnumerableRowCollectionClass, DNEnumerableRowCollection>) end;

  //-------------namespace: System.Data----------------
  DNEnumerableRowCollectionClass<TRow> = interface(DNEnumerableRowCollectionClass)
  ['{F145BD69-A9CC-566B-A43D-019622E37F2F}']
  end;

  [DNTypeName('System.Data.EnumerableRowCollection`1')]
  DNEnumerableRowCollection<TRow> = interface(DNEnumerableRowCollection)
  ['{E081C95B-9E6C-3F75-B17A-859B8264EA54}']
  { methods } 

    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TRow>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNEnumerableRowCollection<TRow> = class(TDNGenericImport<DNEnumerableRowCollectionClass<TRow>, DNEnumerableRowCollection<TRow>>) end;

  //-------------namespace: System.Data----------------
  DNOrderedEnumerableRowCollectionClass<TRow> = interface(DNEnumerableRowCollectionClass<TRow>)
  ['{E9AE5E54-EF4F-5901-9C70-544C01E2CD3A}']
  end;

  [DNTypeName('System.Data.OrderedEnumerableRowCollection`1')]
  DNOrderedEnumerableRowCollection<TRow> = interface(DNEnumerableRowCollection<TRow>)
  ['{131407E0-6CF5-3E86-ABB6-C2614FEAD062}']
  { methods } 

    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TRow>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNOrderedEnumerableRowCollection<TRow> = class(TDNGenericImport<DNOrderedEnumerableRowCollectionClass<TRow>, DNOrderedEnumerableRowCollection<TRow>>) end;

  //-------------namespace: System.Data----------------
  DNEnumerableRowCollectionExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{40FC7EFE-8DA4-5DD0-BB55-6A50D04A7CC0}']
  end;

  [DNTypeName('System.Data.EnumerableRowCollectionExtensions')]
  DNEnumerableRowCollectionExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{0B190652-609A-38D4-8B3F-9CE28FA8504B}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNEnumerableRowCollectionExtensions = class(TDNGenericImport<DNEnumerableRowCollectionExtensionsClass, DNEnumerableRowCollectionExtensions>) end;

  //-------------namespace: System.Data----------------
  DNInternalDataCollectionBaseClass = interface(DNObjectClass)
  ['{6AA16931-19DB-5917-9AD8-8C418B4DC028}']
  { constructors } 

    {class} function init: DNInternalDataCollectionBase;

  end;

  [DNTypeName('System.Data.InternalDataCollectionBase')]
  DNInternalDataCollectionBase = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{E17D552A-63DB-3A3D-9E62-E77E1D0ADF58}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    procedure CopyTo(ar: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
  end;

  TDNInternalDataCollectionBase = class(TDNGenericImport<DNInternalDataCollectionBaseClass, DNInternalDataCollectionBase>) end;

  //-------------namespace: System.Data----------------
  DNConstraintCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{45DF7C35-A553-5F24-A90B-FBC06112BE89}']
  end;

  [DNTypeName('System.Data.ConstraintCollection')]
  DNConstraintCollection = interface(DNInternalDataCollectionBase)
  ['{14BD3698-3DCF-38B9-A5A3-9B4A92F89625}']
  { getters & setters } 

    function get_Item(index: Int32): DNConstraint; overload;
    function get_Item(name: string): DNConstraint; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDNC.System.ComponentModel.TypeConverter.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDNC.System.ComponentModel.TypeConverter.DNCollectionChangeEventHandler);

  { methods } 

    procedure Add(constraint: DNConstraint); overload;
    function Add(name: string; columns: TArray<DNDataColumn>; primaryKey: Boolean): DNConstraint; overload;
    function Add(name: string; column: DNDataColumn; primaryKey: Boolean): DNConstraint; overload;
    function Add(name: string; primaryKeyColumn: DNDataColumn; foreignKeyColumn: DNDataColumn): DNConstraint; overload;
    function Add(name: string; primaryKeyColumns: TArray<DNDataColumn>; foreignKeyColumns: TArray<DNDataColumn>): DNConstraint; overload;
    procedure AddRange(constraints: TArray<DNConstraint>);
    function CanRemove(constraint: DNConstraint): Boolean;
    procedure Clear;
    function &Contains(name: string): Boolean;
    procedure CopyTo(&array: TArray<DNConstraint>; index: Int32); overload;
    function IndexOf(constraint: DNConstraint): Int32; overload;
    function IndexOf(constraintName: string): Int32; overload;
    procedure Remove(constraint: DNConstraint); overload;
    procedure RemoveAt(index: Int32);
    procedure Remove(name: string); overload;
    procedure CopyTo(ar: DDNC.System.Private.CoreLib.DNArray; index: Int32); overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNConstraint read get_Item; default;
    property Item[name: string]: DNConstraint read get_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
  end;

  TDNConstraintCollection = class(TDNGenericImport<DNConstraintCollectionClass, DNConstraintCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{3F200F9A-CEC0-56EE-AD1A-8CFB7590E308}']
  end;

  [DNTypeName('System.Data.DataColumnCollection')]
  DNDataColumnCollection = interface(DNInternalDataCollectionBase)
  ['{FBFA8F14-9BA6-35F4-AE94-44A2450E6CCF}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataColumn; overload;
    function get_Item(name: string): DNDataColumn; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDNC.System.ComponentModel.TypeConverter.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDNC.System.ComponentModel.TypeConverter.DNCollectionChangeEventHandler);

  { methods } 

    procedure Add(column: DNDataColumn); overload;
    procedure AddRange(columns: TArray<DNDataColumn>);
    function Add(columnName: string; &type: DDNC.System.Private.CoreLib.DNType; expression: string): DNDataColumn; overload;
    function Add(columnName: string; &type: DDNC.System.Private.CoreLib.DNType): DNDataColumn; overload;
    function Add(columnName: string): DNDataColumn; overload;
    function Add: DNDataColumn; overload;
    function CanRemove(column: DNDataColumn): Boolean;
    procedure Clear;
    function &Contains(name: string): Boolean;
    procedure CopyTo(&array: TArray<DNDataColumn>; index: Int32); overload;
    function IndexOf(column: DNDataColumn): Int32; overload;
    function IndexOf(columnName: string): Int32; overload;
    procedure Remove(column: DNDataColumn); overload;
    procedure RemoveAt(index: Int32);
    procedure Remove(name: string); overload;
    procedure CopyTo(ar: DDNC.System.Private.CoreLib.DNArray; index: Int32); overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNDataColumn read get_Item; default;
    property Item[name: string]: DNDataColumn read get_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
  end;

  TDNDataColumnCollection = class(TDNGenericImport<DNDataColumnCollectionClass, DNDataColumnCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataRelationCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{E7ED350F-3DA8-53F8-B293-CD0E84B72A4A}']
  end;

  [DNTypeName('System.Data.DataRelationCollection')]
  DNDataRelationCollection = interface(DNInternalDataCollectionBase)
  ['{A929981A-ECA6-36FB-AF70-1236A3C1A0F2}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataRelation; overload;
    function get_Item(name: string): DNDataRelation; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDNC.System.ComponentModel.TypeConverter.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDNC.System.ComponentModel.TypeConverter.DNCollectionChangeEventHandler);

  { methods } 

    procedure Add(relation: DNDataRelation); overload;
    procedure AddRange(relations: TArray<DNDataRelation>);
    function Add(name: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    function Add(name: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>; createConstraints: Boolean): DNDataRelation; overload;
    function Add(parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    function Add(name: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    function Add(name: string; parentColumn: DNDataColumn; childColumn: DNDataColumn; createConstraints: Boolean): DNDataRelation; overload;
    function Add(parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    procedure Clear;
    function &Contains(name: string): Boolean;
    procedure CopyTo(&array: TArray<DNDataRelation>; index: Int32); overload;
    function IndexOf(relation: DNDataRelation): Int32; overload;
    function IndexOf(relationName: string): Int32; overload;
    function CanRemove(relation: DNDataRelation): Boolean;
    procedure Remove(relation: DNDataRelation); overload;
    procedure RemoveAt(index: Int32);
    procedure Remove(name: string); overload;
    procedure CopyTo(ar: DDNC.System.Private.CoreLib.DNArray; index: Int32); overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNDataRelation read get_Item; default;
    property Item[name: string]: DNDataRelation read get_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
  end;

  TDNDataRelationCollection = class(TDNGenericImport<DNDataRelationCollectionClass, DNDataRelationCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataRowCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{DCE3984B-5408-5505-BB8E-185EB91BAB65}']
  end;

  [DNTypeName('System.Data.DataRowCollection')]
  DNDataRowCollection = interface(DNInternalDataCollectionBase)
  ['{35C1DB00-B6F7-35A8-9307-152CB16F2F5A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNDataRow;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    procedure Add(row: DNDataRow); overload;
    procedure InsertAt(row: DNDataRow; pos: Int32);
    function IndexOf(row: DNDataRow): Int32;
    function Add(values: TArray<DDNC.System.Private.CoreLib.DNObject>): DNDataRow; overload;
    function Find(key: DDNC.System.Private.CoreLib.DNObject): DNDataRow; overload;
    function Find(keys: TArray<DDNC.System.Private.CoreLib.DNObject>): DNDataRow; overload;
    procedure Clear;
    function &Contains(key: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function &Contains(keys: TArray<DDNC.System.Private.CoreLib.DNObject>): Boolean; overload;
    procedure CopyTo(ar: DDNC.System.Private.CoreLib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNDataRow>; index: Int32); overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure Remove(row: DNDataRow);
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDataRow read get_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
  end;

  TDNDataRowCollection = class(TDNGenericImport<DNDataRowCollectionClass, DNDataRowCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataTableCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{88AC3416-2ED9-5DB0-9BCE-BE176084C6C4}']
  end;

  [DNTypeName('System.Data.DataTableCollection')]
  DNDataTableCollection = interface(DNInternalDataCollectionBase)
  ['{62372C86-66EB-325F-B491-E38914722B9A}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataTable; overload;
    function get_Item(name: string): DNDataTable; overload;
    function get_Item(name: string; tableNamespace: string): DNDataTable; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDNC.System.ComponentModel.TypeConverter.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDNC.System.ComponentModel.TypeConverter.DNCollectionChangeEventHandler);
    procedure add_CollectionChanging(value: DDNC.System.ComponentModel.TypeConverter.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanging(value: DDNC.System.ComponentModel.TypeConverter.DNCollectionChangeEventHandler);

  { methods } 

    procedure Add(table: DNDataTable); overload;
    procedure AddRange(tables: TArray<DNDataTable>);
    function Add(name: string): DNDataTable; overload;
    function Add(name: string; tableNamespace: string): DNDataTable; overload;
    function Add: DNDataTable; overload;
    function CanRemove(table: DNDataTable): Boolean;
    procedure Clear;
    function &Contains(name: string): Boolean; overload;
    function &Contains(name: string; tableNamespace: string): Boolean; overload;
    procedure CopyTo(&array: TArray<DNDataTable>; index: Int32); overload;
    function IndexOf(table: DNDataTable): Int32; overload;
    function IndexOf(tableName: string): Int32; overload;
    function IndexOf(tableName: string; tableNamespace: string): Int32; overload;
    procedure Remove(table: DNDataTable); overload;
    procedure RemoveAt(index: Int32);
    procedure Remove(name: string); overload;
    procedure Remove(name: string; tableNamespace: string); overload;
    procedure CopyTo(ar: DDNC.System.Private.CoreLib.DNArray; index: Int32); overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNDataTable read get_Item; default;
    property Item[name: string]: DNDataTable read get_Item; default;
    property Item[name: string; tableNamespace: string]: DNDataTable read get_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
  end;

  TDNDataTableCollection = class(TDNGenericImport<DNDataTableCollectionClass, DNDataTableCollection>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBytesClass = interface(DNObjectClass)
  ['{2E7D3E52-C8EC-5B60-9129-EBF724BA5593}']
  { static getter & setter } 

    {class} function get_Null: DNSqlBytes;

  { constructors } 

    {class} function init: DNSqlBytes; overload;
    {class} function init(buffer: TArray<Byte>): DNSqlBytes; overload;
    {class} function init(value: DNSqlBinary): DNSqlBytes; overload;
    {class} function init(s: DDNC.System.Private.CoreLib.DNStream): DNSqlBytes; overload;

  { static methods } 

    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  { static propertys } 

    {class} property Null: DNSqlBytes read get_Null;
  end;

  [DNTypeName('System.Data.SqlTypes.SqlBytes')]
  DNSqlBytes = interface(DNINullable)
  ['{ADF6BC85-C739-3415-BDE0-E127DF7FDB41}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Buffer: TArray<Byte>;
    function get_Length: Int64;
    function get_MaxLength: Int64;
    function get_Value: TArray<Byte>;
    function get_Item(offset: Int64): Byte;
    procedure set_Item(offset: Int64; value: Byte);
    function get_Storage: DNStorageState;
    function get_Stream: DDNC.System.Private.CoreLib.DNStream;
    procedure set_Stream(value: DDNC.System.Private.CoreLib.DNStream);

  { methods } 

    procedure SetNull;
    procedure SetLength(value: Int64);
    function Read(offset: Int64; buffer: TArray<Byte>; offsetInBuffer: Int32; count: Int32): Int64;
    procedure Write(offset: Int64; buffer: TArray<Byte>; offsetInBuffer: Int32; count: Int32);
    function ToSqlBinary: DNSqlBinary;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Buffer: TArray<Byte> read get_Buffer;
    property Length: Int64 read get_Length;
    property MaxLength: Int64 read get_MaxLength;
    property Value: TArray<Byte> read get_Value;
    property Item[offset: Int64]: Byte read get_Item write set_Item; default;
    property Storage: DNStorageState read get_Storage;
    property Stream: DDNC.System.Private.CoreLib.DNStream read get_Stream write set_Stream;
  end;

  TDNSqlBytes = class(TDNGenericImport<DNSqlBytesClass, DNSqlBytes>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlCharsClass = interface(DNObjectClass)
  ['{F2824883-1303-5F20-B23B-99E18DD49DD9}']
  { static getter & setter } 

    {class} function get_Null: DNSqlChars;

  { constructors } 

    {class} function init: DNSqlChars; overload;
    {class} function init(buffer: TArray<Char>): DNSqlChars; overload;
    {class} function init(value: DNSqlString): DNSqlChars; overload;

  { static methods } 

    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  { static propertys } 

    {class} property Null: DNSqlChars read get_Null;
  end;

  [DNTypeName('System.Data.SqlTypes.SqlChars')]
  DNSqlChars = interface(DNINullable)
  ['{50A21390-C541-377F-A43F-1A300E94B3F4}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Buffer: TArray<Char>;
    function get_Length: Int64;
    function get_MaxLength: Int64;
    function get_Value: TArray<Char>;
    function get_Item(offset: Int64): Char;
    procedure set_Item(offset: Int64; value: Char);
    function get_Storage: DNStorageState;

  { methods } 

    procedure SetNull;
    procedure SetLength(value: Int64);
    function Read(offset: Int64; buffer: TArray<Char>; offsetInBuffer: Int32; count: Int32): Int64;
    procedure Write(offset: Int64; buffer: TArray<Char>; offsetInBuffer: Int32; count: Int32);
    function ToSqlString: DNSqlString;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Buffer: TArray<Char> read get_Buffer;
    property Length: Int64 read get_Length;
    property MaxLength: Int64 read get_MaxLength;
    property Value: TArray<Char> read get_Value;
    property Item[offset: Int64]: Char read get_Item write set_Item; default;
    property Storage: DNStorageState read get_Storage;
  end;

  TDNSqlChars = class(TDNGenericImport<DNSqlCharsClass, DNSqlChars>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlXmlClass = interface(DNObjectClass)
  ['{F06B8A4E-00E1-51E3-B70C-63FA4178AF3B}']
  { static getter & setter } 

    {class} function get_Null: DNSqlXml;

  { constructors } 

    {class} function init: DNSqlXml; overload;
    {class} function init(value: DDNC.System.Private.Xml.DNXmlReader): DNSqlXml; overload;
    {class} function init(value: DDNC.System.Private.CoreLib.DNStream): DNSqlXml; overload;

  { static methods } 

    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  { static propertys } 

    {class} property Null: DNSqlXml read get_Null;
  end;

  [DNTypeName('System.Data.SqlTypes.SqlXml')]
  DNSqlXml = interface(DNINullable)
  ['{FA41EF62-F771-32B2-8B27-D2DE219B8DF5}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: string;

  { methods } 

    function CreateReader: DDNC.System.Private.Xml.DNXmlReader;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: string read get_Value;
  end;

  TDNSqlXml = class(TDNGenericImport<DNSqlXmlClass, DNSqlXml>) end;

  //-------------namespace: System.Data----------------
  DNTypedTableBaseExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E7962532-FCE7-539F-A72A-EC2B6D5FA5B1}']
  end;

  [DNTypeName('System.Data.TypedTableBaseExtensions')]
  DNTypedTableBaseExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{35E7CEFA-536B-315A-9F1A-5EF13FE991E6}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTypedTableBaseExtensions = class(TDNGenericImport<DNTypedTableBaseExtensionsClass, DNTypedTableBaseExtensions>) end;

  //-------------namespace: System.Data.Common----------------
  DNRowUpdatedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{3D03EE5D-C6DD-5FC3-93DD-C428C60718FB}']
  { constructors } 

    {class} function init(dataRow: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNRowUpdatedEventArgs;

  end;

  [DNTypeName('System.Data.Common.RowUpdatedEventArgs')]
  DNRowUpdatedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{73CCF56B-F9DF-3BBB-B716-C28837105FD3}']
  { getters & setters } 

    function get_Command: DNIDbCommand;
    function get_Errors: DDNC.System.Private.CoreLib.DNException;
    procedure set_Errors(value: DDNC.System.Private.CoreLib.DNException);
    function get_RecordsAffected: Int32;
    function get_Row: DNDataRow;
    function get_RowCount: Int32;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Command: DNIDbCommand read get_Command;
    property Errors: DDNC.System.Private.CoreLib.DNException read get_Errors write set_Errors;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property Row: DNDataRow read get_Row;
    property RowCount: Int32 read get_RowCount;
    property StatementType: DNStatementType read get_StatementType;
    property Status: DNUpdateStatus read get_Status write set_Status;
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNRowUpdatedEventArgs = class(TDNGenericImport<DNRowUpdatedEventArgsClass, DNRowUpdatedEventArgs>) end;

  //-------------namespace: System.Data.Common----------------
  DNRowUpdatingEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{10C063B7-1D36-5334-A5D2-ACEDBB1DA0E6}']
  { constructors } 

    {class} function init(dataRow: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNRowUpdatingEventArgs;

  end;

  [DNTypeName('System.Data.Common.RowUpdatingEventArgs')]
  DNRowUpdatingEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{F3F41A45-08E0-353E-9697-66DE77AFBD99}']
  { getters & setters } 

    function get_Command: DNIDbCommand;
    procedure set_Command(value: DNIDbCommand);
    function get_Errors: DDNC.System.Private.CoreLib.DNException;
    procedure set_Errors(value: DDNC.System.Private.CoreLib.DNException);
    function get_Row: DNDataRow;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Command: DNIDbCommand read get_Command write set_Command;
    property Errors: DDNC.System.Private.CoreLib.DNException read get_Errors write set_Errors;
    property Row: DNDataRow read get_Row;
    property StatementType: DNStatementType read get_StatementType;
    property Status: DNUpdateStatus read get_Status write set_Status;
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNRowUpdatingEventArgs = class(TDNGenericImport<DNRowUpdatingEventArgsClass, DNRowUpdatingEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnChangeEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{FCF8A9F5-D1D2-51A5-9C4B-950163BE788C}']
  { constructors } 

    {class} function init(row: DNDataRow; column: DNDataColumn; value: DDNC.System.Private.CoreLib.DNObject): DNDataColumnChangeEventArgs;

  end;

  [DNTypeName('System.Data.DataColumnChangeEventArgs')]
  DNDataColumnChangeEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{21A67B33-E9BA-3C85-B8BA-AD9FD4CB1294}']
  { getters & setters } 

    function get_Column: DNDataColumn;
    function get_Row: DNDataRow;
    function get_ProposedValue: DDNC.System.Private.CoreLib.DNObject;
    procedure set_ProposedValue(value: DDNC.System.Private.CoreLib.DNObject);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Column: DNDataColumn read get_Column;
    property Row: DNDataRow read get_Row;
    property ProposedValue: DDNC.System.Private.CoreLib.DNObject read get_ProposedValue write set_ProposedValue;
  end;

  TDNDataColumnChangeEventArgs = class(TDNGenericImport<DNDataColumnChangeEventArgsClass, DNDataColumnChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataRowChangeEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{5228310E-FA86-5F75-B8B4-A47B494E947A}']
  { constructors } 

    {class} function init(row: DNDataRow; action: DNDataRowAction): DNDataRowChangeEventArgs;

  end;

  [DNTypeName('System.Data.DataRowChangeEventArgs')]
  DNDataRowChangeEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{B7157E0E-2F2A-3B95-B5B0-6FEC30711E9D}']
  { getters & setters } 

    function get_Row: DNDataRow;
    function get_Action: DNDataRowAction;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Row: DNDataRow read get_Row;
    property Action: DNDataRowAction read get_Action;
  end;

  TDNDataRowChangeEventArgs = class(TDNGenericImport<DNDataRowChangeEventArgsClass, DNDataRowChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataTableClearEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{8340E09D-2C43-59BF-A748-1A2BA6C876CB}']
  { constructors } 

    {class} function init(dataTable: DNDataTable): DNDataTableClearEventArgs;

  end;

  [DNTypeName('System.Data.DataTableClearEventArgs')]
  DNDataTableClearEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{A8268BB6-571E-3D74-81B9-C6ACE80CABBC}']
  { getters & setters } 

    function get_Table: DNDataTable;
    function get_TableName: string;
    function get_TableNamespace: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Table: DNDataTable read get_Table;
    property TableName: string read get_TableName;
    property TableNamespace: string read get_TableNamespace;
  end;

  TDNDataTableClearEventArgs = class(TDNGenericImport<DNDataTableClearEventArgsClass, DNDataTableClearEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataTableNewRowEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{EF442DDA-956A-5DF4-B1B5-6D9F45213BCC}']
  { constructors } 

    {class} function init(dataRow: DNDataRow): DNDataTableNewRowEventArgs;

  end;

  [DNTypeName('System.Data.DataTableNewRowEventArgs')]
  DNDataTableNewRowEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{A2D1C950-329F-362C-9EEE-F6B2B9D9763C}']
  { getters & setters } 

    function get_Row: DNDataRow;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Row: DNDataRow read get_Row;
  end;

  TDNDataTableNewRowEventArgs = class(TDNGenericImport<DNDataTableNewRowEventArgsClass, DNDataTableNewRowEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNFillErrorEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{E949A82F-262C-5084-8684-BC1F17E04AB4}']
  { constructors } 

    {class} function init(dataTable: DNDataTable; values: TArray<DDNC.System.Private.CoreLib.DNObject>): DNFillErrorEventArgs;

  end;

  [DNTypeName('System.Data.FillErrorEventArgs')]
  DNFillErrorEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{E0194770-7128-3A9E-A9DD-4B945AE59018}']
  { getters & setters } 

    function get_Continue: Boolean;
    procedure set_Continue(value: Boolean);
    function get_DataTable: DNDataTable;
    function get_Errors: DDNC.System.Private.CoreLib.DNException;
    procedure set_Errors(value: DDNC.System.Private.CoreLib.DNException);
    function get_Values: TArray<DDNC.System.Private.CoreLib.DNObject>;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Continue: Boolean read get_Continue write set_Continue;
    property DataTable: DNDataTable read get_DataTable;
    property Errors: DDNC.System.Private.CoreLib.DNException read get_Errors write set_Errors;
    property Values: TArray<DDNC.System.Private.CoreLib.DNObject> read get_Values;
  end;

  TDNFillErrorEventArgs = class(TDNGenericImport<DNFillErrorEventArgsClass, DNFillErrorEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNMergeFailedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{C758C85A-8322-5B34-95DC-49984574B965}']
  { constructors } 

    {class} function init(table: DNDataTable; conflict: string): DNMergeFailedEventArgs;

  end;

  [DNTypeName('System.Data.MergeFailedEventArgs')]
  DNMergeFailedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{23BD7863-0F40-36E2-87A6-0FABC0A6CB5E}']
  { getters & setters } 

    function get_Table: DNDataTable;
    function get_Conflict: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Table: DNDataTable read get_Table;
    property Conflict: string read get_Conflict;
  end;

  TDNMergeFailedEventArgs = class(TDNGenericImport<DNMergeFailedEventArgsClass, DNMergeFailedEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNStateChangeEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{6A23CCF0-E16D-5AEB-9DF0-E95289FF86B7}']
  { constructors } 

    {class} function init(originalState: DNConnectionState; currentState: DNConnectionState): DNStateChangeEventArgs;

  end;

  [DNTypeName('System.Data.StateChangeEventArgs')]
  DNStateChangeEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{3DF7718E-FE6E-3463-B9E3-637840A20182}']
  { getters & setters } 

    function get_CurrentState: DNConnectionState;
    function get_OriginalState: DNConnectionState;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CurrentState: DNConnectionState read get_CurrentState;
    property OriginalState: DNConnectionState read get_OriginalState;
  end;

  TDNStateChangeEventArgs = class(TDNGenericImport<DNStateChangeEventArgsClass, DNStateChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNStatementCompletedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{63A3F012-D8B7-546F-88E3-41F9A07C3705}']
  { constructors } 

    {class} function init(recordCount: Int32): DNStatementCompletedEventArgs;

  end;

  [DNTypeName('System.Data.StatementCompletedEventArgs')]
  DNStatementCompletedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{06A2B49C-A6E1-308C-9565-4EFC9DC325BD}']
  { getters & setters } 

    function get_RecordCount: Int32;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property RecordCount: Int32 read get_RecordCount;
  end;

  TDNStatementCompletedEventArgs = class(TDNGenericImport<DNStatementCompletedEventArgsClass, DNStatementCompletedEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{53985C01-9A18-5891-B1EE-43C78CF2D27D}']
  { constructors } 

    {class} function init: DNDataException; overload;
    {class} function init(s: string): DNDataException; overload;
    {class} function init(s: string; innerException: DDNC.System.Private.CoreLib.DNException): DNDataException; overload;

  end;

  [DNTypeName('System.Data.DataException')]
  DNDataException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{F976CA96-0F25-3D35-B894-726033397BE8}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDataException = class(TDNGenericImport<DNDataExceptionClass, DNDataException>) end;

  //-------------namespace: System.Data----------------
  DNConstraintExceptionClass = interface(DNDataExceptionClass)
  ['{6552B206-4BB9-5EEC-9B1E-245EC5298936}']
  { constructors } 

    {class} function init: DNConstraintException; overload;
    {class} function init(s: string): DNConstraintException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNConstraintException; overload;

  end;

  [DNTypeName('System.Data.ConstraintException')]
  DNConstraintException = interface(DNDataException)
  ['{BCB3C2A0-73D3-3329-9C5F-8ED5C49FF8EC}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNConstraintException = class(TDNGenericImport<DNConstraintExceptionClass, DNConstraintException>) end;

  //-------------namespace: System.Data----------------
  DNDeletedRowInaccessibleExceptionClass = interface(DNDataExceptionClass)
  ['{42213258-12EB-5952-885B-FC1EA2ED5517}']
  { constructors } 

    {class} function init: DNDeletedRowInaccessibleException; overload;
    {class} function init(s: string): DNDeletedRowInaccessibleException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNDeletedRowInaccessibleException; overload;

  end;

  [DNTypeName('System.Data.DeletedRowInaccessibleException')]
  DNDeletedRowInaccessibleException = interface(DNDataException)
  ['{A58DE929-25BC-3BE4-8508-A2E657E74D4B}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDeletedRowInaccessibleException = class(TDNGenericImport<DNDeletedRowInaccessibleExceptionClass, DNDeletedRowInaccessibleException>) end;

  //-------------namespace: System.Data----------------
  DNDuplicateNameExceptionClass = interface(DNDataExceptionClass)
  ['{D7A68C91-AD95-5E09-A76D-2B04B87CFAD7}']
  { constructors } 

    {class} function init: DNDuplicateNameException; overload;
    {class} function init(s: string): DNDuplicateNameException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNDuplicateNameException; overload;

  end;

  [DNTypeName('System.Data.DuplicateNameException')]
  DNDuplicateNameException = interface(DNDataException)
  ['{776A6511-2FF4-3C58-A828-6AAE5A30CC56}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDuplicateNameException = class(TDNGenericImport<DNDuplicateNameExceptionClass, DNDuplicateNameException>) end;

  //-------------namespace: System.Data----------------
  DNInRowChangingEventExceptionClass = interface(DNDataExceptionClass)
  ['{BB6D94FB-2F3E-5045-87AD-CA182FA894B3}']
  { constructors } 

    {class} function init: DNInRowChangingEventException; overload;
    {class} function init(s: string): DNInRowChangingEventException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNInRowChangingEventException; overload;

  end;

  [DNTypeName('System.Data.InRowChangingEventException')]
  DNInRowChangingEventException = interface(DNDataException)
  ['{6170B68D-AB9B-3166-A7BB-6A4420CDB035}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInRowChangingEventException = class(TDNGenericImport<DNInRowChangingEventExceptionClass, DNInRowChangingEventException>) end;

  //-------------namespace: System.Data----------------
  DNInvalidConstraintExceptionClass = interface(DNDataExceptionClass)
  ['{1A90EBCF-EDC3-58E7-9663-3B4623A444EE}']
  { constructors } 

    {class} function init: DNInvalidConstraintException; overload;
    {class} function init(s: string): DNInvalidConstraintException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNInvalidConstraintException; overload;

  end;

  [DNTypeName('System.Data.InvalidConstraintException')]
  DNInvalidConstraintException = interface(DNDataException)
  ['{877956DB-FEC3-3909-9983-F977D3E6BEF9}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidConstraintException = class(TDNGenericImport<DNInvalidConstraintExceptionClass, DNInvalidConstraintException>) end;

  //-------------namespace: System.Data----------------
  DNInvalidExpressionExceptionClass = interface(DNDataExceptionClass)
  ['{F9D079DC-0837-5408-9F4B-6CBD14E3144A}']
  { constructors } 

    {class} function init: DNInvalidExpressionException; overload;
    {class} function init(s: string): DNInvalidExpressionException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNInvalidExpressionException; overload;

  end;

  [DNTypeName('System.Data.InvalidExpressionException')]
  DNInvalidExpressionException = interface(DNDataException)
  ['{08453BE5-C621-3D0A-A63E-0A73D1360F27}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidExpressionException = class(TDNGenericImport<DNInvalidExpressionExceptionClass, DNInvalidExpressionException>) end;

  //-------------namespace: System.Data----------------
  DNEvaluateExceptionClass = interface(DNInvalidExpressionExceptionClass)
  ['{B0E1B674-565E-54E2-A257-4C5D20E0BE03}']
  { constructors } 

    {class} function init: DNEvaluateException; overload;
    {class} function init(s: string): DNEvaluateException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNEvaluateException; overload;

  end;

  [DNTypeName('System.Data.EvaluateException')]
  DNEvaluateException = interface(DNInvalidExpressionException)
  ['{F4119AAC-550C-3443-954C-126299DD2F05}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNEvaluateException = class(TDNGenericImport<DNEvaluateExceptionClass, DNEvaluateException>) end;

  //-------------namespace: System.Data----------------
  DNSyntaxErrorExceptionClass = interface(DNInvalidExpressionExceptionClass)
  ['{92502DF5-440F-5E0C-8722-C181DC0AF370}']
  { constructors } 

    {class} function init: DNSyntaxErrorException; overload;
    {class} function init(s: string): DNSyntaxErrorException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNSyntaxErrorException; overload;

  end;

  [DNTypeName('System.Data.SyntaxErrorException')]
  DNSyntaxErrorException = interface(DNInvalidExpressionException)
  ['{C81A3155-F5A0-32DE-B954-BE624F640376}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSyntaxErrorException = class(TDNGenericImport<DNSyntaxErrorExceptionClass, DNSyntaxErrorException>) end;

  //-------------namespace: System.Data----------------
  DNMissingPrimaryKeyExceptionClass = interface(DNDataExceptionClass)
  ['{80881309-FA91-522F-92B3-0D2E60A01F4E}']
  { constructors } 

    {class} function init: DNMissingPrimaryKeyException; overload;
    {class} function init(s: string): DNMissingPrimaryKeyException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNMissingPrimaryKeyException; overload;

  end;

  [DNTypeName('System.Data.MissingPrimaryKeyException')]
  DNMissingPrimaryKeyException = interface(DNDataException)
  ['{6F329F3B-E115-3C2A-8505-CD942D04B46C}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNMissingPrimaryKeyException = class(TDNGenericImport<DNMissingPrimaryKeyExceptionClass, DNMissingPrimaryKeyException>) end;

  //-------------namespace: System.Data----------------
  DNNoNullAllowedExceptionClass = interface(DNDataExceptionClass)
  ['{66E6A46F-166A-56A0-9B34-65BF8C6B236E}']
  { constructors } 

    {class} function init: DNNoNullAllowedException; overload;
    {class} function init(s: string): DNNoNullAllowedException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNNoNullAllowedException; overload;

  end;

  [DNTypeName('System.Data.NoNullAllowedException')]
  DNNoNullAllowedException = interface(DNDataException)
  ['{18787590-7A8F-3F9C-8899-CF27F018AB13}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNNoNullAllowedException = class(TDNGenericImport<DNNoNullAllowedExceptionClass, DNNoNullAllowedException>) end;

  //-------------namespace: System.Data----------------
  DNReadOnlyExceptionClass = interface(DNDataExceptionClass)
  ['{C65057D3-C63C-5748-928F-3B98BC35760E}']
  { constructors } 

    {class} function init: DNReadOnlyException; overload;
    {class} function init(s: string): DNReadOnlyException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNReadOnlyException; overload;

  end;

  [DNTypeName('System.Data.ReadOnlyException')]
  DNReadOnlyException = interface(DNDataException)
  ['{18762E6B-4C87-3600-B2E1-6CCD6B57BD76}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNReadOnlyException = class(TDNGenericImport<DNReadOnlyExceptionClass, DNReadOnlyException>) end;

  //-------------namespace: System.Data----------------
  DNRowNotInTableExceptionClass = interface(DNDataExceptionClass)
  ['{30B75E15-F918-5EF9-88D1-5194FAF1385D}']
  { constructors } 

    {class} function init: DNRowNotInTableException; overload;
    {class} function init(s: string): DNRowNotInTableException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNRowNotInTableException; overload;

  end;

  [DNTypeName('System.Data.RowNotInTableException')]
  DNRowNotInTableException = interface(DNDataException)
  ['{94E92C27-9F17-30F9-81AB-76074E7CC10C}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNRowNotInTableException = class(TDNGenericImport<DNRowNotInTableExceptionClass, DNRowNotInTableException>) end;

  //-------------namespace: System.Data----------------
  DNStrongTypingExceptionClass = interface(DNDataExceptionClass)
  ['{6746E97D-A136-551D-ABE0-CD25744B8961}']
  { constructors } 

    {class} function init: DNStrongTypingException; overload;
    {class} function init(message: string): DNStrongTypingException; overload;
    {class} function init(s: string; innerException: DDNC.System.Private.CoreLib.DNException): DNStrongTypingException; overload;

  end;

  [DNTypeName('System.Data.StrongTypingException')]
  DNStrongTypingException = interface(DNDataException)
  ['{BA108A86-1AF2-38EC-9524-30C44B7FCFA3}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNStrongTypingException = class(TDNGenericImport<DNStrongTypingExceptionClass, DNStrongTypingException>) end;

  //-------------namespace: System.Data----------------
  DNVersionNotFoundExceptionClass = interface(DNDataExceptionClass)
  ['{B6F191DA-FEF5-5DFD-8578-8B4CAC5F5A73}']
  { constructors } 

    {class} function init: DNVersionNotFoundException; overload;
    {class} function init(s: string): DNVersionNotFoundException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNVersionNotFoundException; overload;

  end;

  [DNTypeName('System.Data.VersionNotFoundException')]
  DNVersionNotFoundException = interface(DNDataException)
  ['{60715DF0-87C6-3C41-B607-4447D7D4824A}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNVersionNotFoundException = class(TDNGenericImport<DNVersionNotFoundExceptionClass, DNVersionNotFoundException>) end;

  //-------------namespace: System.Data----------------
  DNDBConcurrencyExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{FD828DB0-8F18-57FC-A71A-CA16A17F333A}']
  { constructors } 

    {class} function init: DNDBConcurrencyException; overload;
    {class} function init(message: string): DNDBConcurrencyException; overload;
    {class} function init(message: string; inner: DDNC.System.Private.CoreLib.DNException): DNDBConcurrencyException; overload;
    {class} function init(message: string; inner: DDNC.System.Private.CoreLib.DNException; dataRows: TArray<DNDataRow>): DNDBConcurrencyException; overload;

  end;

  [DNTypeName('System.Data.DBConcurrencyException')]
  DNDBConcurrencyException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{8BB574B0-3067-37B0-922C-92C20D98FC16}']
  { getters & setters } 

    function get_Row: DNDataRow;
    procedure set_Row(value: DNDataRow);
    function get_RowCount: Int32;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Row: DNDataRow read get_Row write set_Row;
    property RowCount: Int32 read get_RowCount;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDBConcurrencyException = class(TDNGenericImport<DNDBConcurrencyExceptionClass, DNDBConcurrencyException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlTypeExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{B5FB4E6B-4B64-50DD-AD4B-C763D3317637}']
  { constructors } 

    {class} function init: DNSqlTypeException; overload;
    {class} function init(message: string): DNSqlTypeException; overload;
    {class} function init(message: string; e: DDNC.System.Private.CoreLib.DNException): DNSqlTypeException; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlTypeException')]
  DNSqlTypeException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{7153F520-90AA-3200-9BE2-70EACBFD2576}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSqlTypeException = class(TDNGenericImport<DNSqlTypeExceptionClass, DNSqlTypeException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlAlreadyFilledExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{3C3362D6-39F2-59EE-AB25-012BF80EAE94}']
  { constructors } 

    {class} function init: DNSqlAlreadyFilledException; overload;
    {class} function init(message: string): DNSqlAlreadyFilledException; overload;
    {class} function init(message: string; e: DDNC.System.Private.CoreLib.DNException): DNSqlAlreadyFilledException; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlAlreadyFilledException')]
  DNSqlAlreadyFilledException = interface(DNSqlTypeException)
  ['{0FF5C510-1539-3AF6-A69B-C1199A35E936}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSqlAlreadyFilledException = class(TDNGenericImport<DNSqlAlreadyFilledExceptionClass, DNSqlAlreadyFilledException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlNotFilledExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{37525D74-9E68-509D-ADD7-369F7993F457}']
  { constructors } 

    {class} function init: DNSqlNotFilledException; overload;
    {class} function init(message: string): DNSqlNotFilledException; overload;
    {class} function init(message: string; e: DDNC.System.Private.CoreLib.DNException): DNSqlNotFilledException; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlNotFilledException')]
  DNSqlNotFilledException = interface(DNSqlTypeException)
  ['{2A9B24E2-3D32-3EA5-BE6B-ECA3D2971DFD}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSqlNotFilledException = class(TDNGenericImport<DNSqlNotFilledExceptionClass, DNSqlNotFilledException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlNullValueExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{E38F68F8-3950-5603-BB03-867DA21377BA}']
  { constructors } 

    {class} function init: DNSqlNullValueException; overload;
    {class} function init(message: string): DNSqlNullValueException; overload;
    {class} function init(message: string; e: DDNC.System.Private.CoreLib.DNException): DNSqlNullValueException; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlNullValueException')]
  DNSqlNullValueException = interface(DNSqlTypeException)
  ['{3411E0AD-15D4-33BD-92B4-4D509D0EF5F1}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSqlNullValueException = class(TDNGenericImport<DNSqlNullValueExceptionClass, DNSqlNullValueException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlTruncateExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{C42A0CCB-0E7D-56DA-A9E3-CC0B16D70C5E}']
  { constructors } 

    {class} function init: DNSqlTruncateException; overload;
    {class} function init(message: string): DNSqlTruncateException; overload;
    {class} function init(message: string; e: DDNC.System.Private.CoreLib.DNException): DNSqlTruncateException; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlTruncateException')]
  DNSqlTruncateException = interface(DNSqlTypeException)
  ['{681C791C-6835-35EF-A8CD-07702D60CED4}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSqlTruncateException = class(TDNGenericImport<DNSqlTruncateExceptionClass, DNSqlTruncateException>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbExceptionClass = interface(DDNC.System.Private.CoreLib.DNExternalExceptionClass)
  ['{E35C09F0-FECA-5856-BC3C-756AFD48DE6B}']
  end;

  [DNTypeName('System.Data.Common.DbException')]
  DNDbException = interface(DDNC.System.Private.CoreLib.DNExternalException)
  ['{580272C5-D5F8-383A-A9D0-B1ECDF40F0E7}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function ToString: string;
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDbException = class(TDNGenericImport<DNDbExceptionClass, DNDbException>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataAdapterClass = interface(DNObjectClass)
  ['{72F51133-E818-5D34-BBAE-B64AF5133085}']
  end;

  [DNTypeName('System.Data.Common.DataAdapter')]
  DNDataAdapter = interface(DNObject)
  ['{EDE7545E-1667-3DBA-B670-0CA9BBADBD12}']
  { getters & setters } 

    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;

  { events } 

    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    procedure ResetFillLoadOption;
    function ShouldSerializeFillLoadOption: Boolean;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>;
    function Fill(dataSet: DNDataSet): Int32;
    function GetFillParameters: TArray<DNIDataParameter>;
    function Update(dataSet: DNDataSet): Int32;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
  end;

  TDNDataAdapter = class(TDNGenericImport<DNDataAdapterClass, DNDataAdapter>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataAdapterClass = interface(DNDataAdapterClass)
  ['{6E9C7B17-D3FF-57B5-82CC-83BE81C09445}']
  end;

  [DNTypeName('System.Data.Common.DbDataAdapter')]
  DNDbDataAdapter = interface(DNDataAdapter)
  ['{AD304CE3-4D55-351C-90E7-2B3E2ED64E16}']
  { getters & setters } 

    function get_DeleteCommand: DNDbCommand;
    procedure set_DeleteCommand(value: DNDbCommand);
    function get_InsertCommand: DNDbCommand;
    procedure set_InsertCommand(value: DNDbCommand);
    function get_SelectCommand: DNDbCommand;
    procedure set_SelectCommand(value: DNDbCommand);
    function get_UpdateBatchSize: Int32;
    procedure set_UpdateBatchSize(value: Int32);
    function get_UpdateCommand: DNDbCommand;
    procedure set_UpdateCommand(value: DNDbCommand);
    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;

  { events } 

    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function FillSchema(dataTable: DNDataTable; schemaType: DNSchemaType): DNDataTable; overload;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>; overload;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType; srcTable: string): TArray<DNDataTable>; overload;
    function Fill(dataSet: DNDataSet): Int32; overload;
    function Fill(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function Fill(dataSet: DNDataSet; startRecord: Int32; maxRecords: Int32; srcTable: string): Int32; overload;
    function Fill(dataTable: DNDataTable): Int32; overload;
    function Fill(startRecord: Int32; maxRecords: Int32; dataTables: TArray<DNDataTable>): Int32; overload;
    function GetFillParameters: TArray<DNIDataParameter>;
    function Update(dataSet: DNDataSet): Int32; overload;
    function Update(dataRows: TArray<DNDataRow>): Int32; overload;
    function Update(dataTable: DNDataTable): Int32; overload;
    function Update(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    procedure ResetFillLoadOption;
    function ShouldSerializeFillLoadOption: Boolean;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DeleteCommand: DNDbCommand read get_DeleteCommand write set_DeleteCommand;
    property InsertCommand: DNDbCommand read get_InsertCommand write set_InsertCommand;
    property SelectCommand: DNDbCommand read get_SelectCommand write set_SelectCommand;
    property UpdateBatchSize: Int32 read get_UpdateBatchSize write set_UpdateBatchSize;
    property UpdateCommand: DNDbCommand read get_UpdateCommand write set_UpdateCommand;
    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
  end;

  TDNDbDataAdapter = class(TDNGenericImport<DNDbDataAdapterClass, DNDbDataAdapter>)
  public const
   DefaultSourceTableName = 'Table';
  end;

  //-------------namespace: System.Data.Common----------------
  DNDbCommandClass = interface(DNObjectClass)
  ['{47E8EF68-FEA2-5CC8-94B2-0188E502BA03}']
  end;

  [DNTypeName('System.Data.Common.DbCommand')]
  DNDbCommand = interface(DNObject)
  ['{572DF81E-76F4-3CCD-AD19-4A8043328778}']
  { getters & setters } 

    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_Connection: DNDbConnection;
    procedure set_Connection(value: DNDbConnection);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Parameters: DNDbParameterCollection;
    function get_Transaction: DNDbTransaction;
    procedure set_Transaction(value: DNDbTransaction);
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    procedure Cancel;
    function CreateParameter: DNDbParameter;
    function ExecuteNonQuery: Int32;
    function ExecuteReader: DNDbDataReader; overload;
    function ExecuteReader(behavior: DNCommandBehavior): DNDbDataReader; overload;
    function ExecuteNonQueryAsync: DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function ExecuteNonQueryAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function ExecuteReaderAsync: DDNC.System.Private.CoreLib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(behavior: DNCommandBehavior): DDNC.System.Private.CoreLib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(behavior: DNCommandBehavior; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DNDbDataReader>; overload;
    function ExecuteScalarAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>; overload;
    function ExecuteScalarAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>; overload;
    function ExecuteScalar: DDNC.System.Private.CoreLib.DNObject;
    procedure Prepare;
    function PrepareAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CommandText: string read get_CommandText write set_CommandText;
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    property Connection: DNDbConnection read get_Connection write set_Connection;
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    property Parameters: DNDbParameterCollection read get_Parameters;
    property Transaction: DNDbTransaction read get_Transaction write set_Transaction;
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
  end;

  TDNDbCommand = class(TDNGenericImport<DNDbCommandClass, DNDbCommand>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbCommandBuilderClass = interface(DNObjectClass)
  ['{9542E172-F491-5DB5-BBB5-2A8A252C79C2}']
  end;

  [DNTypeName('System.Data.Common.DbCommandBuilder')]
  DNDbCommandBuilder = interface(DNObject)
  ['{D91170F4-9F03-3448-8E5D-5CD79124061F}']
  { getters & setters } 

    function get_ConflictOption: DNConflictOption;
    procedure set_ConflictOption(value: DNConflictOption);
    function get_CatalogLocation: DNCatalogLocation;
    procedure set_CatalogLocation(value: DNCatalogLocation);
    function get_CatalogSeparator: string;
    procedure set_CatalogSeparator(value: string);
    function get_DataAdapter: DNDbDataAdapter;
    procedure set_DataAdapter(value: DNDbDataAdapter);
    function get_QuotePrefix: string;
    procedure set_QuotePrefix(value: string);
    function get_QuoteSuffix: string;
    procedure set_QuoteSuffix(value: string);
    function get_SchemaSeparator: string;
    procedure set_SchemaSeparator(value: string);
    function get_SetAllValues: Boolean;
    procedure set_SetAllValues(value: Boolean);
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function GetInsertCommand: DNDbCommand; overload;
    function GetInsertCommand(useColumnsForParameterNames: Boolean): DNDbCommand; overload;
    function GetUpdateCommand: DNDbCommand; overload;
    function GetUpdateCommand(useColumnsForParameterNames: Boolean): DNDbCommand; overload;
    function GetDeleteCommand: DNDbCommand; overload;
    function GetDeleteCommand(useColumnsForParameterNames: Boolean): DNDbCommand; overload;
    function QuoteIdentifier(unquotedIdentifier: string): string;
    procedure RefreshSchema;
    function UnquoteIdentifier(quotedIdentifier: string): string;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ConflictOption: DNConflictOption read get_ConflictOption write set_ConflictOption;
    property CatalogLocation: DNCatalogLocation read get_CatalogLocation write set_CatalogLocation;
    property CatalogSeparator: string read get_CatalogSeparator write set_CatalogSeparator;
    property DataAdapter: DNDbDataAdapter read get_DataAdapter write set_DataAdapter;
    property QuotePrefix: string read get_QuotePrefix write set_QuotePrefix;
    property QuoteSuffix: string read get_QuoteSuffix write set_QuoteSuffix;
    property SchemaSeparator: string read get_SchemaSeparator write set_SchemaSeparator;
    property SetAllValues: Boolean read get_SetAllValues write set_SetAllValues;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
  end;

  TDNDbCommandBuilder = class(TDNGenericImport<DNDbCommandBuilderClass, DNDbCommandBuilder>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbConnectionClass = interface(DNObjectClass)
  ['{66E39207-9A72-5BA0-8A95-E4E0953CBE5B}']
  end;

  [DNTypeName('System.Data.Common.DbConnection')]
  DNDbConnection = interface(DNObject)
  ['{3F11D4AB-B0EB-3DE3-A51B-CDF771D8C69F}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_DataSource: string;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;

  { events } 

    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function BeginTransaction: DNDbTransaction; overload;
    function BeginTransaction(isolationLevel: DNIsolationLevel): DNDbTransaction; overload;
    function BeginTransactionAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<DNDbTransaction>; overload;
    function BeginTransactionAsync(isolationLevel: DNIsolationLevel; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<DNDbTransaction>; overload;
    procedure Close;
    function CloseAsync: DDNC.System.Private.CoreLib.DNTask;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    procedure ChangeDatabase(databaseName: string);
    function ChangeDatabaseAsync(databaseName: string; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    function CreateCommand: DNDbCommand;
    procedure EnlistTransaction(transaction: DDNC.System.Transactions.Local.DNTransaction);
    function GetSchema: DNDataTable; overload;
    function GetSchema(collectionName: string): DNDataTable; overload;
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    procedure Open;
    function OpenAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function OpenAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    property Database: string read get_Database;
    property DataSource: string read get_DataSource;
    property ServerVersion: string read get_ServerVersion;
    property State: DNConnectionState read get_State;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
  end;

  TDNDbConnection = class(TDNGenericImport<DNDbConnectionClass, DNDbConnection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataColumnMappingClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{9DB0EE92-CE6B-51E6-8D83-E5116A5A1053}']
  { constructors } 

    {class} function init: DNDataColumnMapping; overload;
    {class} function init(sourceColumn: string; dataSetColumn: string): DNDataColumnMapping; overload;

  { static methods } 

    {class} function GetDataColumnBySchemaAction(sourceColumn: string; dataSetColumn: string; dataTable: DNDataTable; dataType: DDNC.System.Private.CoreLib.DNType; schemaAction: DNMissingSchemaAction): DNDataColumn; overload;

  end;

  [DNTypeName('System.Data.Common.DataColumnMapping')]
  DNDataColumnMapping = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{44D1B0E5-E61A-3B46-9AF9-C7832BB369F2}']
  { getters & setters } 

    function get_DataSetColumn: string;
    procedure set_DataSetColumn(value: string);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);

  { methods } 

    function GetDataColumnBySchemaAction(dataTable: DNDataTable; dataType: DDNC.System.Private.CoreLib.DNType; schemaAction: DNMissingSchemaAction): DNDataColumn; overload;
    function ToString: string;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DataSetColumn: string read get_DataSetColumn write set_DataSetColumn;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
  end;

  TDNDataColumnMapping = class(TDNGenericImport<DNDataColumnMappingClass, DNDataColumnMapping>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataColumnMappingCollectionClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{CED885B2-EB1A-5BD4-B8A7-DB8CC45B76A9}']
  { constructors } 

    {class} function init: DNDataColumnMappingCollection;

  { static methods } 

    {class} function GetDataColumn(columnMappings: DNDataColumnMappingCollection; sourceColumn: string; dataType: DDNC.System.Private.CoreLib.DNType; dataTable: DNDataTable; mappingAction: DNMissingMappingAction; schemaAction: DNMissingSchemaAction): DNDataColumn;
    {class} function GetColumnMappingBySchemaAction(columnMappings: DNDataColumnMappingCollection; sourceColumn: string; mappingAction: DNMissingMappingAction): DNDataColumnMapping;

  end;

  [DNTypeName('System.Data.Common.DataColumnMappingCollection')]
  DNDataColumnMappingCollection = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{0E3BB602-EA3B-3DF0-9DB1-A652DFF1C823}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNDataColumnMapping; overload;
    procedure set_Item(index: Int32; value: DNDataColumnMapping); overload;
    function get_Item(sourceColumn: string): DNDataColumnMapping; overload;
    procedure set_Item(sourceColumn: string; value: DNDataColumnMapping); overload;

  { methods } 

    function Add(sourceColumn: string; dataSetColumn: string): DNDataColumnMapping;
    procedure AddRange(values: TArray<DNDataColumnMapping>); overload;
    procedure AddRange(values: DDNC.System.Private.CoreLib.DNArray); overload;
    function &Contains(value: string): Boolean; overload;
    function &Contains(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNDataColumnMapping>; index: Int32); overload;
    function GetByDataSetColumn(value: string): DNDataColumnMapping;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function IndexOf(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function IndexOf(sourceColumn: string): Int32; overload;
    function IndexOfDataSetColumn(dataSetColumn: string): Int32;
    procedure Insert(index: Int32; value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Insert(index: Int32; value: DNDataColumnMapping); overload;
    procedure RemoveAt(index: Int32); overload;
    procedure RemoveAt(sourceColumn: string); overload;
    procedure Remove(value: DNDataColumnMapping);
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDataColumnMapping read get_Item write set_Item; default;
    property Item[sourceColumn: string]: DNDataColumnMapping read get_Item write set_Item; default;
  end;

  TDNDataColumnMappingCollection = class(TDNGenericImport<DNDataColumnMappingCollectionClass, DNDataColumnMappingCollection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataTableMappingClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{2E31E6E9-F616-5846-AE43-16CDAE6FF1B0}']
  { constructors } 

    {class} function init: DNDataTableMapping; overload;
    {class} function init(sourceTable: string; dataSetTable: string): DNDataTableMapping; overload;
    {class} function init(sourceTable: string; dataSetTable: string; columnMappings: TArray<DNDataColumnMapping>): DNDataTableMapping; overload;

  end;

  [DNTypeName('System.Data.Common.DataTableMapping')]
  DNDataTableMapping = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{887641B2-24E7-399B-A46A-D51635A5EE7E}']
  { getters & setters } 

    function get_ColumnMappings: DNDataColumnMappingCollection;
    function get_DataSetTable: string;
    procedure set_DataSetTable(value: string);
    function get_SourceTable: string;
    procedure set_SourceTable(value: string);

  { methods } 

    function GetDataColumn(sourceColumn: string; dataType: DDNC.System.Private.CoreLib.DNType; dataTable: DNDataTable; mappingAction: DNMissingMappingAction; schemaAction: DNMissingSchemaAction): DNDataColumn;
    function GetColumnMappingBySchemaAction(sourceColumn: string; mappingAction: DNMissingMappingAction): DNDataColumnMapping;
    function GetDataTableBySchemaAction(dataSet: DNDataSet; schemaAction: DNMissingSchemaAction): DNDataTable;
    function ToString: string;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ColumnMappings: DNDataColumnMappingCollection read get_ColumnMappings;
    property DataSetTable: string read get_DataSetTable write set_DataSetTable;
    property SourceTable: string read get_SourceTable write set_SourceTable;
  end;

  TDNDataTableMapping = class(TDNGenericImport<DNDataTableMappingClass, DNDataTableMapping>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataTableMappingCollectionClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{D5F7EE87-EA7E-554E-8DC5-C785BAB91422}']
  { constructors } 

    {class} function init: DNDataTableMappingCollection;

  { static methods } 

    {class} function GetTableMappingBySchemaAction(tableMappings: DNDataTableMappingCollection; sourceTable: string; dataSetTable: string; mappingAction: DNMissingMappingAction): DNDataTableMapping;

  end;

  [DNTypeName('System.Data.Common.DataTableMappingCollection')]
  DNDataTableMappingCollection = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{62AD2DFE-1E97-32A9-B8EB-8F90B44DE331}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNDataTableMapping; overload;
    procedure set_Item(index: Int32; value: DNDataTableMapping); overload;
    function get_Item(sourceTable: string): DNDataTableMapping; overload;
    procedure set_Item(sourceTable: string; value: DNDataTableMapping); overload;

  { methods } 

    procedure AddRange(values: TArray<DNDataTableMapping>); overload;
    procedure AddRange(values: DDNC.System.Private.CoreLib.DNArray); overload;
    function Add(sourceTable: string; dataSetTable: string): DNDataTableMapping;
    function &Contains(value: string): Boolean; overload;
    function &Contains(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNDataTableMapping>; index: Int32); overload;
    function GetByDataSetTable(dataSetTable: string): DNDataTableMapping;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function IndexOf(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function IndexOf(sourceTable: string): Int32; overload;
    function IndexOfDataSetTable(dataSetTable: string): Int32;
    procedure Insert(index: Int32; value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Insert(index: Int32; value: DNDataTableMapping); overload;
    procedure RemoveAt(index: Int32); overload;
    procedure RemoveAt(sourceTable: string); overload;
    procedure Remove(value: DNDataTableMapping);
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDataTableMapping read get_Item write set_Item; default;
    property Item[sourceTable: string]: DNDataTableMapping read get_Item write set_Item; default;
  end;

  TDNDataTableMappingCollection = class(TDNGenericImport<DNDataTableMappingCollectionClass, DNDataTableMappingCollection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataReaderClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{70F0AAED-2116-5FE2-8C95-7768D13DF331}']
  end;

  [DNTypeName('System.Data.Common.DbDataReader')]
  DNDbDataReader = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{AABFB997-529A-3410-90BF-AC60821EEB93}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_VisibleFieldCount: Int32;
    function get_Item(ordinal: Int32): DDNC.System.Private.CoreLib.DNObject; overload;
    function get_Item(name: string): DDNC.System.Private.CoreLib.DNObject; overload;

  { methods } 

    procedure Close;
    function CloseAsync: DDNC.System.Private.CoreLib.DNTask;
    procedure Dispose;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    function GetDataTypeName(ordinal: Int32): string;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetFieldType(ordinal: Int32): DDNC.System.Private.CoreLib.DNType;
    function GetName(ordinal: Int32): string;
    function GetOrdinal(name: string): Int32;
    function GetSchemaTable: DNDataTable;
    function GetBoolean(ordinal: Int32): Boolean;
    function GetByte(ordinal: Int32): Byte;
    function GetBytes(ordinal: Int32; dataOffset: Int64; buffer: TArray<Byte>; bufferOffset: Int32; length: Int32): Int64;
    function GetChar(ordinal: Int32): Char;
    function GetChars(ordinal: Int32; dataOffset: Int64; buffer: TArray<Char>; bufferOffset: Int32; length: Int32): Int64;
    function GetData(ordinal: Int32): DNDbDataReader;
    function GetDateTime(ordinal: Int32): DDNC.System.Private.CoreLib.DNDateTime;
    function GetDecimal(ordinal: Int32): DDNC.System.Private.CoreLib.DNDecimal;
    function GetDouble(ordinal: Int32): Double;
    function GetFloat(ordinal: Int32): Single;
    function GetGuid(ordinal: Int32): DDNC.System.Private.CoreLib.DNGuid;
    function GetInt16(ordinal: Int32): Int16;
    function GetInt32(ordinal: Int32): Int32;
    function GetInt64(ordinal: Int32): Int64;
    function GetProviderSpecificFieldType(ordinal: Int32): DDNC.System.Private.CoreLib.DNType;
    function GetProviderSpecificValue(ordinal: Int32): DDNC.System.Private.CoreLib.DNObject;
    function GetProviderSpecificValues(values: TArray<DDNC.System.Private.CoreLib.DNObject>): Int32;
    function GetString(ordinal: Int32): string;
    function GetStream(ordinal: Int32): DDNC.System.Private.CoreLib.DNStream;
    function GetTextReader(ordinal: Int32): DDNC.System.Private.CoreLib.DNTextReader;
    function GetValue(ordinal: Int32): DDNC.System.Private.CoreLib.DNObject;
    function GetValues(values: TArray<DDNC.System.Private.CoreLib.DNObject>): Int32;
    function IsDBNull(ordinal: Int32): Boolean;
    function IsDBNullAsync(ordinal: Int32): DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function IsDBNullAsync(ordinal: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function NextResult: Boolean;
    function Read: Boolean;
    function ReadAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function ReadAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function NextResultAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function NextResultAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Depth: Int32 read get_Depth;
    property FieldCount: Int32 read get_FieldCount;
    property HasRows: Boolean read get_HasRows;
    property IsClosed: Boolean read get_IsClosed;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
    property Item[ordinal: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
    property Item[name: string]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
  end;

  TDNDbDataReader = class(TDNGenericImport<DNDbDataReaderClass, DNDbDataReader>) end;

  //-------------namespace: System.Data----------------
  DNDataTableReaderClass = interface(DNDbDataReaderClass)
  ['{7352B91F-3463-56A3-AB24-B218D1A86B3E}']
  { constructors } 

    {class} function init(dataTable: DNDataTable): DNDataTableReader; overload;
    {class} function init(dataTables: TArray<DNDataTable>): DNDataTableReader; overload;

  end;

  [DNTypeName('System.Data.DataTableReader')]
  DNDataTableReader = interface(DNDbDataReader)
  ['{52AD2901-71D8-393A-83C1-7A0A428C6F67}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_HasRows: Boolean;
    function get_Item(ordinal: Int32): DDNC.System.Private.CoreLib.DNObject; overload;
    function get_Item(name: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function get_FieldCount: Int32;
    function get_VisibleFieldCount: Int32;

  { methods } 

    procedure Close;
    function GetSchemaTable: DNDataTable;
    function NextResult: Boolean;
    function Read: Boolean;
    function GetProviderSpecificFieldType(ordinal: Int32): DDNC.System.Private.CoreLib.DNType;
    function GetProviderSpecificValue(ordinal: Int32): DDNC.System.Private.CoreLib.DNObject;
    function GetProviderSpecificValues(values: TArray<DDNC.System.Private.CoreLib.DNObject>): Int32;
    function GetBoolean(ordinal: Int32): Boolean;
    function GetByte(ordinal: Int32): Byte;
    function GetBytes(ordinal: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    function GetChar(ordinal: Int32): Char;
    function GetChars(ordinal: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    function GetDataTypeName(ordinal: Int32): string;
    function GetDateTime(ordinal: Int32): DDNC.System.Private.CoreLib.DNDateTime;
    function GetDecimal(ordinal: Int32): DDNC.System.Private.CoreLib.DNDecimal;
    function GetDouble(ordinal: Int32): Double;
    function GetFieldType(ordinal: Int32): DDNC.System.Private.CoreLib.DNType;
    function GetFloat(ordinal: Int32): Single;
    function GetGuid(ordinal: Int32): DDNC.System.Private.CoreLib.DNGuid;
    function GetInt16(ordinal: Int32): Int16;
    function GetInt32(ordinal: Int32): Int32;
    function GetInt64(ordinal: Int32): Int64;
    function GetName(ordinal: Int32): string;
    function GetOrdinal(name: string): Int32;
    function GetString(ordinal: Int32): string;
    function GetValue(ordinal: Int32): DDNC.System.Private.CoreLib.DNObject;
    function GetValues(values: TArray<DDNC.System.Private.CoreLib.DNObject>): Int32;
    function IsDBNull(ordinal: Int32): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function CloseAsync: DDNC.System.Private.CoreLib.DNTask;
    procedure Dispose;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    function GetData(ordinal: Int32): DNDbDataReader;
    function GetStream(ordinal: Int32): DDNC.System.Private.CoreLib.DNStream;
    function GetTextReader(ordinal: Int32): DDNC.System.Private.CoreLib.DNTextReader;
    function IsDBNullAsync(ordinal: Int32): DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function IsDBNullAsync(ordinal: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function ReadAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function ReadAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function NextResultAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function NextResultAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Depth: Int32 read get_Depth;
    property IsClosed: Boolean read get_IsClosed;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property HasRows: Boolean read get_HasRows;
    property Item[ordinal: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
    property Item[name: string]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
    property FieldCount: Int32 read get_FieldCount;
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
  end;

  TDNDataTableReader = class(TDNGenericImport<DNDataTableReaderClass, DNDataTableReader>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbParameterClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{E45B2F02-56E9-5CE1-885F-F6DDAB733308}']
  end;

  [DNTypeName('System.Data.Common.DbParameter')]
  DNDbParameter = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{71383C4F-33F3-3CDE-82BE-4888148E8A71}']
  { getters & setters } 

    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceColumnNullMapping: Boolean;
    procedure set_SourceColumnNullMapping(value: Boolean);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);
    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    procedure set_Value(value: DDNC.System.Private.CoreLib.DNObject);

  { methods } 

    procedure ResetDbType;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DbType: DNDbType read get_DbType write set_DbType;
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property ParameterName: string read get_ParameterName write set_ParameterName;
    property Precision: Byte read get_Precision write set_Precision;
    property Scale: Byte read get_Scale write set_Scale;
    property Size: Int32 read get_Size write set_Size;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    property SourceColumnNullMapping: Boolean read get_SourceColumnNullMapping write set_SourceColumnNullMapping;
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value write set_Value;
  end;

  TDNDbParameter = class(TDNGenericImport<DNDbParameterClass, DNDbParameter>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbParameterCollectionClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{550F7526-25BE-5480-9789-ECF44F36248C}']
  end;

  [DNTypeName('System.Data.Common.DbParameterCollection')]
  DNDbParameterCollection = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{A128802A-F962-3C86-AF17-D39E058E12CD}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;
    function get_Item(index: Int32): DNDbParameter; overload;
    procedure set_Item(index: Int32; value: DNDbParameter); overload;
    function get_Item(parameterName: string): DNDbParameter; overload;
    procedure set_Item(parameterName: string; value: DNDbParameter); overload;

  { methods } 

    function Add(value: DDNC.System.Private.CoreLib.DNObject): Int32;
    procedure AddRange(values: DDNC.System.Private.CoreLib.DNArray);
    function &Contains(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function &Contains(value: string): Boolean; overload;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    procedure Clear;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function IndexOf(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function IndexOf(parameterName: string): Int32; overload;
    procedure Insert(index: Int32; value: DDNC.System.Private.CoreLib.DNObject);
    procedure Remove(value: DDNC.System.Private.CoreLib.DNObject);
    procedure RemoveAt(index: Int32); overload;
    procedure RemoveAt(parameterName: string); overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNDbParameter read get_Item write set_Item; default;
    property Item[parameterName: string]: DNDbParameter read get_Item write set_Item; default;
  end;

  TDNDbParameterCollection = class(TDNGenericImport<DNDbParameterCollectionClass, DNDbParameterCollection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbTransactionClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{70B31028-A97C-5944-B5DF-165A9694AE0D}']
  end;

  [DNTypeName('System.Data.Common.DbTransaction')]
  DNDbTransaction = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{590B08ED-00CF-38B0-8F35-A9CEB42BFC6C}']
  { getters & setters } 

    function get_Connection: DNDbConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    procedure Commit;
    function CommitAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure Dispose;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    procedure Rollback;
    function RollbackAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Connection: DNDbConnection read get_Connection;
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNDbTransaction = class(TDNGenericImport<DNDbTransactionClass, DNDbTransaction>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBinaryClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C728CB0F-938E-53D1-AD57-CF01E1D8EE92}']
  { constructors } 

    {class} function init(value: TArray<Byte>): DNSqlBinary;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlBinary;

  { static fields } 

    {class} property Null: DNSqlBinary read __fakeFieldGet_Null;

  { static methods } 

    {class} function Add(x: DNSqlBinary; y: DNSqlBinary): DNSqlBinary;
    {class} function Concat(x: DNSqlBinary; y: DNSqlBinary): DNSqlBinary;
    {class} function Equals(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    {class} function LessThan(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlBinary')]
  DNSqlBinary = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{836EEBAF-2101-3F8D-9F5F-D182624C6231}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: TArray<Byte>;
    function get_Item(index: Int32): Byte;
    function get_Length: Int32;

  { methods } 

    function ToString: string;
    function ToSqlGuid: DNSqlGuid;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlBinary): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: TArray<Byte> read get_Value;
    property Item[index: Int32]: Byte read get_Item; default;
    property Length: Int32 read get_Length;
  end;

  TDNSqlBinary = class(TDNGenericImport<DNSqlBinaryClass, DNSqlBinary>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBooleanClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{849BF4A0-F6A8-5164-B5FF-2CF98D2E6005}']
  { constructors } 

    {class} function init(value: Boolean): DNSqlBoolean; overload;
    {class} function init(value: Int32): DNSqlBoolean; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_True: DNSqlBoolean;
   function __fakeFieldGet_False: DNSqlBoolean;
   function __fakeFieldGet_Null: DNSqlBoolean;
   function __fakeFieldGet_Zero: DNSqlBoolean;
   function __fakeFieldGet_One: DNSqlBoolean;

  { static fields } 

    {class} property True: DNSqlBoolean read __fakeFieldGet_True;
    {class} property False: DNSqlBoolean read __fakeFieldGet_False;
    {class} property Null: DNSqlBoolean read __fakeFieldGet_Null;
    {class} property Zero: DNSqlBoolean read __fakeFieldGet_Zero;
    {class} property One: DNSqlBoolean read __fakeFieldGet_One;

  { static methods } 

    {class} function Parse(s: string): DNSqlBoolean;
    {class} function OnesComplement(x: DNSqlBoolean): DNSqlBoolean;
    {class} function &And(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function &Or(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function &Xor(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function Equals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function LessThan(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function GreaterThanOrEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function LessThanOrEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlBoolean')]
  DNSqlBoolean = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{3937F134-ACEA-3057-9488-48F7565EFE22}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Boolean;
    function get_IsTrue: Boolean;
    function get_IsFalse: Boolean;
    function get_ByteValue: Byte;

  { methods } 

    function ToString: string;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlBoolean): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Boolean read get_Value;
    property IsTrue: Boolean read get_IsTrue;
    property IsFalse: Boolean read get_IsFalse;
    property ByteValue: Byte read get_ByteValue;
  end;

  TDNSqlBoolean = class(TDNGenericImport<DNSqlBooleanClass, DNSqlBoolean>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlByteClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{98B8B7DD-1F59-5F76-8A78-470F79808C6F}']
  { constructors } 

    {class} function init(value: Byte): DNSqlByte;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlByte;
   function __fakeFieldGet_Zero: DNSqlByte;
   function __fakeFieldGet_MinValue: DNSqlByte;
   function __fakeFieldGet_MaxValue: DNSqlByte;

  { static fields } 

    {class} property Null: DNSqlByte read __fakeFieldGet_Null;
    {class} property Zero: DNSqlByte read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlByte read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlByte read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlByte;
    {class} function OnesComplement(x: DNSqlByte): DNSqlByte;
    {class} function Add(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function Subtract(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function Multiply(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function Divide(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function &Mod(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function Modulus(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function BitwiseAnd(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function BitwiseOr(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function &Xor(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function Equals(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    {class} function LessThan(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlByte')]
  DNSqlByte = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{532F3856-CCB4-38C0-A436-77B22FBD1A70}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Byte;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlByte): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Byte read get_Value;
  end;

  TDNSqlByte = class(TDNGenericImport<DNSqlByteClass, DNSqlByte>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDateTimeClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C3479627-EC32-5203-88D1-DBB8419D515D}']
  { constructors } 

    {class} function init(value: DDNC.System.Private.CoreLib.DNDateTime): DNSqlDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32): DNSqlDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32): DNSqlDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Double): DNSqlDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; bilisecond: Int32): DNSqlDateTime; overload;
    {class} function init(dayTicks: Int32; timeTicks: Int32): DNSqlDateTime; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SQLTicksPerSecond: Int32;
   function __fakeFieldGet_SQLTicksPerMinute: Int32;
   function __fakeFieldGet_SQLTicksPerHour: Int32;
   function __fakeFieldGet_MinValue: DNSqlDateTime;
   function __fakeFieldGet_MaxValue: DNSqlDateTime;
   function __fakeFieldGet_Null: DNSqlDateTime;

  { static fields } 

    {class} property SQLTicksPerSecond: Int32 read __fakeFieldGet_SQLTicksPerSecond;
    {class} property SQLTicksPerMinute: Int32 read __fakeFieldGet_SQLTicksPerMinute;
    {class} property SQLTicksPerHour: Int32 read __fakeFieldGet_SQLTicksPerHour;
    {class} property MinValue: DNSqlDateTime read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlDateTime read __fakeFieldGet_MaxValue;
    {class} property Null: DNSqlDateTime read __fakeFieldGet_Null;

  { static methods } 

    {class} function Parse(s: string): DNSqlDateTime;
    {class} function Add(x: DNSqlDateTime; t: DDNC.System.Private.CoreLib.DNTimeSpan): DNSqlDateTime;
    {class} function Subtract(x: DNSqlDateTime; t: DDNC.System.Private.CoreLib.DNTimeSpan): DNSqlDateTime;
    {class} function Equals(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    {class} function LessThan(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlDateTime')]
  DNSqlDateTime = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{ADCA597F-E11E-3953-BCCB-9D220BAFC47D}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDNC.System.Private.CoreLib.DNDateTime;
    function get_DayTicks: Int32;
    function get_TimeTicks: Int32;

  { methods } 

    function ToString: string;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlDateTime): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: DDNC.System.Private.CoreLib.DNDateTime read get_Value;
    property DayTicks: Int32 read get_DayTicks;
    property TimeTicks: Int32 read get_TimeTicks;
  end;

  TDNSqlDateTime = class(TDNGenericImport<DNSqlDateTimeClass, DNSqlDateTime>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDecimalClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CE9355B1-0480-5CDC-9796-FF43E3C2AD0F}']
  { constructors } 

    {class} function init(value: DDNC.System.Private.CoreLib.DNDecimal): DNSqlDecimal; overload;
    {class} function init(value: Int32): DNSqlDecimal; overload;
    {class} function init(value: Int64): DNSqlDecimal; overload;
    {class} function init(bPrecision: Byte; bScale: Byte; fPositive: Boolean; bits: TArray<Int32>): DNSqlDecimal; overload;
    {class} function init(bPrecision: Byte; bScale: Byte; fPositive: Boolean; data1: Int32; data2: Int32; data3: Int32; data4: Int32): DNSqlDecimal; overload;
    {class} function init(dVal: Double): DNSqlDecimal; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MaxPrecision: Byte;
   function __fakeFieldGet_MaxScale: Byte;
   function __fakeFieldGet_Null: DNSqlDecimal;
   function __fakeFieldGet_MinValue: DNSqlDecimal;
   function __fakeFieldGet_MaxValue: DNSqlDecimal;

  { static fields } 

    {class} property MaxPrecision: Byte read __fakeFieldGet_MaxPrecision;
    {class} property MaxScale: Byte read __fakeFieldGet_MaxScale;
    {class} property Null: DNSqlDecimal read __fakeFieldGet_Null;
    {class} property MinValue: DNSqlDecimal read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlDecimal read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Abs(n: DNSqlDecimal): DNSqlDecimal;
    {class} function Ceiling(n: DNSqlDecimal): DNSqlDecimal;
    {class} function Floor(n: DNSqlDecimal): DNSqlDecimal;
    {class} function Sign(n: DNSqlDecimal): DNSqlInt32;
    {class} function Round(n: DNSqlDecimal; position: Int32): DNSqlDecimal;
    {class} function Truncate(n: DNSqlDecimal; position: Int32): DNSqlDecimal;
    {class} function Power(n: DNSqlDecimal; exp: Double): DNSqlDecimal;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;
    {class} function Parse(s: string): DNSqlDecimal;
    {class} function AdjustScale(n: DNSqlDecimal; digits: Int32; fRound: Boolean): DNSqlDecimal;
    {class} function ConvertToPrecScale(n: DNSqlDecimal; precision: Int32; scale: Int32): DNSqlDecimal;
    {class} function Add(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    {class} function Subtract(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    {class} function Multiply(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    {class} function Divide(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    {class} function Equals(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    {class} function LessThan(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlDecimal')]
  DNSqlDecimal = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{179FFF95-EABD-38A6-B208-328E690BF065}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDNC.System.Private.CoreLib.DNDecimal;
    function get_IsPositive: Boolean;
    function get_Precision: Byte;
    function get_Scale: Byte;
    function get_Data: TArray<Int32>;
    function get_BinData: TArray<Byte>;

  { methods } 

    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlDecimal): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function ToDouble: Double;
    function ToSqlBoolean: DNSqlBoolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: DDNC.System.Private.CoreLib.DNDecimal read get_Value;
    property IsPositive: Boolean read get_IsPositive;
    property Precision: Byte read get_Precision;
    property Scale: Byte read get_Scale;
    property Data: TArray<Int32> read get_Data;
    property BinData: TArray<Byte> read get_BinData;
  end;

  TDNSqlDecimal = class(TDNGenericImport<DNSqlDecimalClass, DNSqlDecimal>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDoubleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F630C5D5-75A0-533F-B993-578A8AB38685}']
  { constructors } 

    {class} function init(value: Double): DNSqlDouble;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlDouble;
   function __fakeFieldGet_Zero: DNSqlDouble;
   function __fakeFieldGet_MinValue: DNSqlDouble;
   function __fakeFieldGet_MaxValue: DNSqlDouble;

  { static fields } 

    {class} property Null: DNSqlDouble read __fakeFieldGet_Null;
    {class} property Zero: DNSqlDouble read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlDouble read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlDouble read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlDouble;
    {class} function Add(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    {class} function Subtract(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    {class} function Multiply(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    {class} function Divide(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    {class} function Equals(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    {class} function LessThan(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlDouble')]
  DNSqlDouble = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{57C0E865-0984-3074-8003-0E1535D2B48D}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Double;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlDouble): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Double read get_Value;
  end;

  TDNSqlDouble = class(TDNGenericImport<DNSqlDoubleClass, DNSqlDouble>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlGuidClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4F686433-6A7B-5C5E-BDC4-576AC524FE77}']
  { constructors } 

    {class} function init(value: TArray<Byte>): DNSqlGuid; overload;
    {class} function init(s: string): DNSqlGuid; overload;
    {class} function init(g: DDNC.System.Private.CoreLib.DNGuid): DNSqlGuid; overload;
    {class} function init(a: Int32; b: Int16; c: Int16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNSqlGuid; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlGuid;

  { static fields } 

    {class} property Null: DNSqlGuid read __fakeFieldGet_Null;

  { static methods } 

    {class} function Parse(s: string): DNSqlGuid;
    {class} function Equals(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    {class} function LessThan(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlGuid')]
  DNSqlGuid = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{FA520856-2AD8-3F38-9D7E-E46BC2E7E468}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDNC.System.Private.CoreLib.DNGuid;

  { methods } 

    function ToByteArray: TArray<Byte>;
    function ToString: string;
    function ToSqlString: DNSqlString;
    function ToSqlBinary: DNSqlBinary;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlGuid): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: DDNC.System.Private.CoreLib.DNGuid read get_Value;
  end;

  TDNSqlGuid = class(TDNGenericImport<DNSqlGuidClass, DNSqlGuid>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt16Class = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C0F59F50-AFA3-5003-9BDF-07D71C67636A}']
  { constructors } 

    {class} function init(value: Int16): DNSqlInt16;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt16;
   function __fakeFieldGet_Zero: DNSqlInt16;
   function __fakeFieldGet_MinValue: DNSqlInt16;
   function __fakeFieldGet_MaxValue: DNSqlInt16;

  { static fields } 

    {class} property Null: DNSqlInt16 read __fakeFieldGet_Null;
    {class} property Zero: DNSqlInt16 read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlInt16 read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlInt16 read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlInt16;
    {class} function OnesComplement(x: DNSqlInt16): DNSqlInt16;
    {class} function Add(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function Subtract(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function Multiply(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function Divide(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function &Mod(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function Modulus(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function BitwiseAnd(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function BitwiseOr(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function &Xor(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function Equals(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    {class} function LessThan(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlInt16')]
  DNSqlInt16 = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F21208E1-ED2D-3008-B3E0-EB41C190EE1B}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int16;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlInt16): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Int16 read get_Value;
  end;

  TDNSqlInt16 = class(TDNGenericImport<DNSqlInt16Class, DNSqlInt16>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt32Class = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C1D41BF5-7B41-5AE7-ABF9-C50EE999BA7F}']
  { constructors } 

    {class} function init(value: Int32): DNSqlInt32;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt32;
   function __fakeFieldGet_Zero: DNSqlInt32;
   function __fakeFieldGet_MinValue: DNSqlInt32;
   function __fakeFieldGet_MaxValue: DNSqlInt32;

  { static fields } 

    {class} property Null: DNSqlInt32 read __fakeFieldGet_Null;
    {class} property Zero: DNSqlInt32 read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlInt32 read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlInt32 read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlInt32;
    {class} function OnesComplement(x: DNSqlInt32): DNSqlInt32;
    {class} function Add(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function Subtract(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function Multiply(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function Divide(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function &Mod(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function Modulus(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function BitwiseAnd(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function BitwiseOr(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function &Xor(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function Equals(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    {class} function LessThan(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlInt32')]
  DNSqlInt32 = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{323C1725-2027-3676-B823-678EF3B2F384}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int32;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlInt32): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Int32 read get_Value;
  end;

  TDNSqlInt32 = class(TDNGenericImport<DNSqlInt32Class, DNSqlInt32>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt64Class = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{282A9967-5001-5243-B544-A81BDE78B61C}']
  { constructors } 

    {class} function init(value: Int64): DNSqlInt64;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt64;
   function __fakeFieldGet_Zero: DNSqlInt64;
   function __fakeFieldGet_MinValue: DNSqlInt64;
   function __fakeFieldGet_MaxValue: DNSqlInt64;

  { static fields } 

    {class} property Null: DNSqlInt64 read __fakeFieldGet_Null;
    {class} property Zero: DNSqlInt64 read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlInt64 read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlInt64 read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlInt64;
    {class} function OnesComplement(x: DNSqlInt64): DNSqlInt64;
    {class} function Add(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function Subtract(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function Multiply(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function Divide(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function &Mod(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function Modulus(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function BitwiseAnd(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function BitwiseOr(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function &Xor(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function Equals(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    {class} function LessThan(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlInt64')]
  DNSqlInt64 = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D86B32C6-0271-37EA-AEC4-94679EC584BF}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int64;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlInt64): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Int64 read get_Value;
  end;

  TDNSqlInt64 = class(TDNGenericImport<DNSqlInt64Class, DNSqlInt64>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlMoneyClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7241AEB0-F2EC-59F1-896A-051208F940EB}']
  { constructors } 

    {class} function init(value: Int32): DNSqlMoney; overload;
    {class} function init(value: Int64): DNSqlMoney; overload;
    {class} function init(value: DDNC.System.Private.CoreLib.DNDecimal): DNSqlMoney; overload;
    {class} function init(value: Double): DNSqlMoney; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlMoney;
   function __fakeFieldGet_Zero: DNSqlMoney;
   function __fakeFieldGet_MinValue: DNSqlMoney;
   function __fakeFieldGet_MaxValue: DNSqlMoney;

  { static fields } 

    {class} property Null: DNSqlMoney read __fakeFieldGet_Null;
    {class} property Zero: DNSqlMoney read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlMoney read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlMoney read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlMoney;
    {class} function Add(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    {class} function Subtract(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    {class} function Multiply(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    {class} function Divide(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    {class} function Equals(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    {class} function LessThan(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlMoney')]
  DNSqlMoney = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{AAFA1D78-10ED-372C-BF47-8E63A6F2AAD9}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDNC.System.Private.CoreLib.DNDecimal;

  { methods } 

    function ToDecimal: DDNC.System.Private.CoreLib.DNDecimal;
    function ToInt64: Int64;
    function ToInt32: Int32;
    function ToDouble: Double;
    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlMoney): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: DDNC.System.Private.CoreLib.DNDecimal read get_Value;
  end;

  TDNSqlMoney = class(TDNGenericImport<DNSqlMoneyClass, DNSqlMoney>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlSingleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{76CC70EA-9CB6-5CEF-A2F3-35AD2210DBFE}']
  { constructors } 

    {class} function init(value: Single): DNSqlSingle; overload;
    {class} function init(value: Double): DNSqlSingle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlSingle;
   function __fakeFieldGet_Zero: DNSqlSingle;
   function __fakeFieldGet_MinValue: DNSqlSingle;
   function __fakeFieldGet_MaxValue: DNSqlSingle;

  { static fields } 

    {class} property Null: DNSqlSingle read __fakeFieldGet_Null;
    {class} property Zero: DNSqlSingle read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlSingle read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlSingle read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlSingle;
    {class} function Add(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    {class} function Subtract(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    {class} function Multiply(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    {class} function Divide(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    {class} function Equals(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    {class} function LessThan(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlSingle')]
  DNSqlSingle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2A59EE2B-3EF3-3D8C-B3CA-C5DE50CC86A2}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Single;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlSingle): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Single read get_Value;
  end;

  TDNSqlSingle = class(TDNGenericImport<DNSqlSingleClass, DNSqlSingle>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlStringClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0B8E8849-7F57-52EB-ACBF-1BDDB83C74FD}']
  { constructors } 

    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>; index: Int32; count: Int32; fUnicode: Boolean): DNSqlString; overload;
    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>; fUnicode: Boolean): DNSqlString; overload;
    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>; index: Int32; count: Int32): DNSqlString; overload;
    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>): DNSqlString; overload;
    {class} function init(data: string; lcid: Int32; compareOptions: DNSqlCompareOptions): DNSqlString; overload;
    {class} function init(data: string; lcid: Int32): DNSqlString; overload;
    {class} function init(data: string): DNSqlString; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlString;
   function __fakeFieldGet_IgnoreCase: Int32;
   function __fakeFieldGet_IgnoreWidth: Int32;
   function __fakeFieldGet_IgnoreNonSpace: Int32;
   function __fakeFieldGet_IgnoreKanaType: Int32;
   function __fakeFieldGet_BinarySort: Int32;
   function __fakeFieldGet_BinarySort2: Int32;

  { static fields } 

    {class} property Null: DNSqlString read __fakeFieldGet_Null;
    {class} property IgnoreCase: Int32 read __fakeFieldGet_IgnoreCase;
    {class} property IgnoreWidth: Int32 read __fakeFieldGet_IgnoreWidth;
    {class} property IgnoreNonSpace: Int32 read __fakeFieldGet_IgnoreNonSpace;
    {class} property IgnoreKanaType: Int32 read __fakeFieldGet_IgnoreKanaType;
    {class} property BinarySort: Int32 read __fakeFieldGet_BinarySort;
    {class} property BinarySort2: Int32 read __fakeFieldGet_BinarySort2;

  { static methods } 

    {class} function Concat(x: DNSqlString; y: DNSqlString): DNSqlString;
    {class} function Add(x: DNSqlString; y: DNSqlString): DNSqlString;
    {class} function Equals(x: DNSqlString; y: DNSqlString): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    {class} function LessThan(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    {class} function CompareOptionsFromSqlCompareOptions(compareOptions: DNSqlCompareOptions): DDNC.System.Private.CoreLib.DNCompareOptions;
    {class} function GetXsdType(schemaSet: DDNC.System.Private.Xml.DNXmlSchemaSet): DDNC.System.Private.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlString')]
  DNSqlString = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A8A74CE7-C839-3D5A-8FD6-C7939C21DE0F}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: string;
    function get_LCID: Int32;
    function get_CultureInfo: DDNC.System.Private.CoreLib.DNCultureInfo;
    function get_CompareInfo: DDNC.System.Private.CoreLib.DNCompareInfo;
    function get_SqlCompareOptions: DNSqlCompareOptions;

  { methods } 

    function ToString: string;
    function GetUnicodeBytes: TArray<Byte>;
    function GetNonUnicodeBytes: TArray<Byte>;
    function Clone: DNSqlString;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDateTime: DNSqlDateTime;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlGuid: DNSqlGuid;
    function CompareTo(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlString): Int32; overload;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: string read get_Value;
    property LCID: Int32 read get_LCID;
    property CultureInfo: DDNC.System.Private.CoreLib.DNCultureInfo read get_CultureInfo;
    property CompareInfo: DDNC.System.Private.CoreLib.DNCompareInfo read get_CompareInfo;
    property SqlCompareOptions: DNSqlCompareOptions read get_SqlCompareOptions;
  end;

  TDNSqlString = class(TDNGenericImport<DNSqlStringClass, DNSqlString>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDataDocumentClass = interface(DNObjectClass)
  ['{934E0CFB-88DF-5FCF-891C-F70FB7FAA6FC}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DDNC.System.Private.Xml.DNXmlResolver);
    procedure set_InnerText(value: string);

  { constructors } 

    {class} function init: DNXmlDataDocument; overload;
    {class} function init(dataset: DNDataSet): DNXmlDataDocument; overload;

  { static propertys } 

    {class} property XmlResolver: DDNC.System.Private.Xml.DNXmlResolver write set_XmlResolver;
    {class} property InnerText: string write set_InnerText;
  end;

  [DNTypeName('System.Xml.XmlDataDocument')]
  DNXmlDataDocument = interface(DNObject)
  ['{C1D1F990-A544-3454-B315-6E45D10E0F1C}']
  { getters & setters } 

    function get_DataSet: DNDataSet;
    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_ParentNode: DDNC.System.Private.Xml.DNXmlNode;
    function get_DocumentType: DDNC.System.Private.Xml.DNXmlDocumentType;
    function get_Implementation: DDNC.System.Private.Xml.DNXmlImplementation;
    function get_Name: string;
    function get_LocalName: string;
    function get_DocumentElement: DDNC.System.Private.Xml.DNXmlElement;
    function get_OwnerDocument: DDNC.System.Private.Xml.DNXmlDocument;
    function get_Schemas: DDNC.System.Private.Xml.DNXmlSchemaSet;
    procedure set_Schemas(value: DDNC.System.Private.Xml.DNXmlSchemaSet);
    procedure set_XmlResolver(value: DDNC.System.Private.Xml.DNXmlResolver);
    function get_NameTable: DDNC.System.Private.Xml.DNXmlNameTable;
    function get_PreserveWhitespace: Boolean;
    procedure set_PreserveWhitespace(value: Boolean);
    function get_IsReadOnly: Boolean;
    procedure set_InnerText(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DDNC.System.Private.Xml.DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DDNC.System.Private.Xml.DNXmlNodeList;
    function get_PreviousSibling: DDNC.System.Private.Xml.DNXmlNode;
    function get_NextSibling: DDNC.System.Private.Xml.DNXmlNode;
    function get_Attributes: DDNC.System.Private.Xml.DNXmlAttributeCollection;
    function get_FirstChild: DDNC.System.Private.Xml.DNXmlNode;
    function get_LastChild: DDNC.System.Private.Xml.DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_OuterXml: string;
    function get_Item(name: string): DDNC.System.Private.Xml.DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DDNC.System.Private.Xml.DNXmlElement; overload;
    function get_PreviousText: DDNC.System.Private.Xml.DNXmlNode;

  { events } 

    procedure add_NodeInserting(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserting(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeInserted(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserted(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoving(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoving(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoved(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoved(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeChanging(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanging(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeChanged(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanged(value: DDNC.System.Private.Xml.DNXmlNodeChangedEventHandler);

  { methods } 

    function GetElementById(elemId: string): DDNC.System.Private.Xml.DNXmlElement;
    function GetElementsByTagName(name: string): DDNC.System.Private.Xml.DNXmlNodeList; overload;
    function CreateElement(prefix: string; localName: string; namespaceURI: string): DDNC.System.Private.Xml.DNXmlElement; overload;
    function CreateEntityReference(name: string): DDNC.System.Private.Xml.DNXmlEntityReference;
    function GetRowFromElement(e: DDNC.System.Private.Xml.DNXmlElement): DNDataRow;
    function GetElementFromRow(r: DNDataRow): DDNC.System.Private.Xml.DNXmlElement;
    function CloneNode(deep: Boolean): DDNC.System.Private.Xml.DNXmlNode;
    procedure Load(filename: string); overload;
    procedure Load(inStream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Load(txtReader: DDNC.System.Private.CoreLib.DNTextReader); overload;
    procedure Load(reader: DDNC.System.Private.Xml.DNXmlReader); overload;
    function CreateAttribute(name: string): DDNC.System.Private.Xml.DNXmlAttribute; overload;
    function CreateCDataSection(data: string): DDNC.System.Private.Xml.DNXmlCDataSection;
    function CreateComment(data: string): DDNC.System.Private.Xml.DNXmlComment;
    function CreateDocumentType(name: string; publicId: string; systemId: string; internalSubset: string): DDNC.System.Private.Xml.DNXmlDocumentType;
    function CreateDocumentFragment: DDNC.System.Private.Xml.DNXmlDocumentFragment;
    function CreateElement(name: string): DDNC.System.Private.Xml.DNXmlElement; overload;
    function CreateProcessingInstruction(target: string; data: string): DDNC.System.Private.Xml.DNXmlProcessingInstruction;
    function CreateXmlDeclaration(version: string; encoding: string; standalone: string): DDNC.System.Private.Xml.DNXmlDeclaration;
    function CreateTextNode(text: string): DDNC.System.Private.Xml.DNXmlText;
    function CreateSignificantWhitespace(text: string): DDNC.System.Private.Xml.DNXmlSignificantWhitespace;
    function CreateNavigator: DDNC.System.Private.Xml.DNXPathNavigator;
    function CreateWhitespace(text: string): DDNC.System.Private.Xml.DNXmlWhitespace;
    function CreateAttribute(qualifiedName: string; namespaceURI: string): DDNC.System.Private.Xml.DNXmlAttribute; overload;
    function CreateElement(qualifiedName: string; namespaceURI: string): DDNC.System.Private.Xml.DNXmlElement; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DDNC.System.Private.Xml.DNXmlNodeList; overload;
    function ImportNode(node: DDNC.System.Private.Xml.DNXmlNode; deep: Boolean): DDNC.System.Private.Xml.DNXmlNode;
    function CreateAttribute(prefix: string; localName: string; namespaceURI: string): DDNC.System.Private.Xml.DNXmlAttribute; overload;
    function CreateNode(&type: DDNC.System.Private.Xml.DNXmlNodeType; prefix: string; name: string; namespaceURI: string): DDNC.System.Private.Xml.DNXmlNode; overload;
    function CreateNode(nodeTypeString: string; name: string; namespaceURI: string): DDNC.System.Private.Xml.DNXmlNode; overload;
    function CreateNode(&type: DDNC.System.Private.Xml.DNXmlNodeType; name: string; namespaceURI: string): DDNC.System.Private.Xml.DNXmlNode; overload;
    function ReadNode(reader: DDNC.System.Private.Xml.DNXmlReader): DDNC.System.Private.Xml.DNXmlNode;
    procedure LoadXml(xml: string);
    procedure Save(filename: string); overload;
    procedure Save(outStream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Save(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Save(w: DDNC.System.Private.Xml.DNXmlWriter); overload;
    procedure WriteTo(w: DDNC.System.Private.Xml.DNXmlWriter);
    procedure WriteContentTo(xw: DDNC.System.Private.Xml.DNXmlWriter);
    procedure Validate(validationEventHandler: DDNC.System.Private.Xml.DNValidationEventHandler); overload;
    procedure Validate(validationEventHandler: DDNC.System.Private.Xml.DNValidationEventHandler; nodeToValidate: DDNC.System.Private.Xml.DNXmlNode); overload;
    function SelectSingleNode(xpath: string): DDNC.System.Private.Xml.DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DDNC.System.Private.Xml.DNXmlNamespaceManager): DDNC.System.Private.Xml.DNXmlNode; overload;
    function SelectNodes(xpath: string): DDNC.System.Private.Xml.DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DDNC.System.Private.Xml.DNXmlNamespaceManager): DDNC.System.Private.Xml.DNXmlNodeList; overload;
    function InsertBefore(newChild: DDNC.System.Private.Xml.DNXmlNode; refChild: DDNC.System.Private.Xml.DNXmlNode): DDNC.System.Private.Xml.DNXmlNode;
    function InsertAfter(newChild: DDNC.System.Private.Xml.DNXmlNode; refChild: DDNC.System.Private.Xml.DNXmlNode): DDNC.System.Private.Xml.DNXmlNode;
    function ReplaceChild(newChild: DDNC.System.Private.Xml.DNXmlNode; oldChild: DDNC.System.Private.Xml.DNXmlNode): DDNC.System.Private.Xml.DNXmlNode;
    function RemoveChild(oldChild: DDNC.System.Private.Xml.DNXmlNode): DDNC.System.Private.Xml.DNXmlNode;
    function PrependChild(newChild: DDNC.System.Private.Xml.DNXmlNode): DDNC.System.Private.Xml.DNXmlNode;
    function AppendChild(newChild: DDNC.System.Private.Xml.DNXmlNode): DDNC.System.Private.Xml.DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DDNC.System.Private.Xml.DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DataSet: DNDataSet read get_DataSet;
    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property ParentNode: DDNC.System.Private.Xml.DNXmlNode read get_ParentNode;
    property DocumentType: DDNC.System.Private.Xml.DNXmlDocumentType read get_DocumentType;
    property &Implementation: DDNC.System.Private.Xml.DNXmlImplementation read get_Implementation;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property DocumentElement: DDNC.System.Private.Xml.DNXmlElement read get_DocumentElement;
    property OwnerDocument: DDNC.System.Private.Xml.DNXmlDocument read get_OwnerDocument;
    property Schemas: DDNC.System.Private.Xml.DNXmlSchemaSet read get_Schemas write set_Schemas;
    property XmlResolver: DDNC.System.Private.Xml.DNXmlResolver write set_XmlResolver;
    property NameTable: DDNC.System.Private.Xml.DNXmlNameTable read get_NameTable;
    property PreserveWhitespace: Boolean read get_PreserveWhitespace write set_PreserveWhitespace;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string write set_InnerText;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DDNC.System.Private.Xml.DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DDNC.System.Private.Xml.DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DDNC.System.Private.Xml.DNXmlNode read get_PreviousSibling;
    property NextSibling: DDNC.System.Private.Xml.DNXmlNode read get_NextSibling;
    property Attributes: DDNC.System.Private.Xml.DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DDNC.System.Private.Xml.DNXmlNode read get_FirstChild;
    property LastChild: DDNC.System.Private.Xml.DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DDNC.System.Private.Xml.DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DDNC.System.Private.Xml.DNXmlElement read get_Item; default;
    property PreviousText: DDNC.System.Private.Xml.DNXmlNode read get_PreviousText;
  end;

  TDNXmlDataDocument = class(TDNGenericImport<DNXmlDataDocumentClass, DNXmlDataDocument>) end;


implementation


initialization
  LoadAssemblyModule('System.Data.Common, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
