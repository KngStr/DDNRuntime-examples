//----------------------------------------------------------------------------
//  System.Security.dll: System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Security
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Security;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Xml;

type

{ enums }

  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>Specifies the scope of the data protection to be applied by the <see cref="M:System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)" />
  ///  method.</summary>
  [DNTypeName('System.Security.Cryptography.DataProtectionScope')]
  DNDataProtectionScope = type Integer;
  DNDataProtectionScopeHelper = record helper for DNDataProtectionScope
  public const
    ///<summary>The protected data is associated with the current user. Only threads running under the current user context can unprotect the data.</summary>
    CurrentUser = 0;
    ///<summary>The protected data is associated with the machine context. Any process running on the computer can unprotect data. This enumeration value is usually used in server-specific applications that run on a server where untrusted users are not allowed access.</summary>
    LocalMachine = 1;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  ///<summary>Specifies the scope of memory protection to be applied by the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" />
  ///  method.</summary>
  [DNTypeName('System.Security.Cryptography.MemoryProtectionScope')]
  DNMemoryProtectionScope = type Integer;
  DNMemoryProtectionScopeHelper = record helper for DNMemoryProtectionScope
  public const
    ///<summary>Only code running in the same process as the code that called the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" />
    ///  method can unprotect memory.</summary>
    SameProcess = 0;
    ///<summary>All code in any process can unprotect memory that was protected using the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" />
    ///  method.</summary>
    CrossProcess = 1;
    ///<summary>Only code running in the same user context as the code that called the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" />
    ///  method can unprotect memory.</summary>
    SameLogon = 2;
  end;


  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.KeyAgreeKeyChoice" />
  ///  enumeration defines the type of key used in a key agreement protocol.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.KeyAgreeKeyChoice')]
  DNKeyAgreeKeyChoice = type Integer;
  DNKeyAgreeKeyChoiceHelper = record helper for DNKeyAgreeKeyChoice
  public const
    ///<summary>The key agreement key type is unknown.</summary>
    Unknown = 0;
    ///<summary>The key agreement key is ephemeral, existing only for the duration of the key agreement protocol.</summary>
    EphemeralKey = 1;
    ///<summary>The key agreement key is static, existing for an extended period of time.</summary>
    StaticKey = 2;
  end;


  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoType" />
  ///  enumeration defines the types of recipient information.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.RecipientInfoType')]
  DNRecipientInfoType = type Integer;
  DNRecipientInfoTypeHelper = record helper for DNRecipientInfoType
  public const
    ///<summary>The recipient information type is unknown.</summary>
    Unknown = 0;
    ///<summary>Key transport recipient information.</summary>
    KeyTransport = 1;
    ///<summary>Key agreement recipient information.</summary>
    KeyAgreement = 2;
  end;


  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType" />
  ///  enumeration defines how a subject is identified.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType')]
  DNSubjectIdentifierOrKeyType = type Integer;
  DNSubjectIdentifierOrKeyTypeHelper = record helper for DNSubjectIdentifierOrKeyType
  public const
    ///<summary>The type is unknown.</summary>
    Unknown = 0;
    ///<summary>The subject is identified by the certificate issuer and serial number.</summary>
    IssuerAndSerialNumber = 1;
    ///<summary>The subject is identified by the hash of the subject key.</summary>
    SubjectKeyIdentifier = 2;
    ///<summary>The subject is identified by the public key.</summary>
    PublicKeyInfo = 3;
  end;


  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
  ///  enumeration defines the type of subject identifier.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.SubjectIdentifierType')]
  DNSubjectIdentifierType = type Integer;
  DNSubjectIdentifierTypeHelper = record helper for DNSubjectIdentifierType
  public const
    ///<summary>The type of subject identifier is unknown.</summary>
    Unknown = 0;
    ///<summary>The subject is identified by the certificate issuer and serial number.</summary>
    IssuerAndSerialNumber = 1;
    ///<summary>The subject is identified by the hash of the subject's public key. The hash algorithm used is determined by the signature algorithm suite in the subject's certificate.</summary>
    SubjectKeyIdentifier = 2;
    ///<summary>The subject is identified as taking part in an integrity check operation that uses only a hashing algorithm.</summary>
    NoSignature = 3;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  ///<summary>Specifies the type of selection requested using the <see cref="Overload:System.Security.Cryptography.X509Certificates.X509Certificate2UI.SelectFromCollection" />
  ///  method.</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509SelectionFlag')]
  DNX509SelectionFlag = type Integer;
  DNX509SelectionFlagHelper = record helper for DNX509SelectionFlag
  public const
    ///<summary>A single selection. The UI allows the user to select one X.509 certificate.</summary>
    SingleSelection = 0;
    ///<summary>A multiple selection. The user can use the SHIFT or CRTL keys to select more than one X.509 certificate.</summary>
    MultiSelection = 1;
  end;


  //-------------namespace: System.Security.Permissions----------------
  ///<summary>Specifies the access permissions for encrypting data and memory.</summary>
  [DNTypeName('System.Security.Permissions.DataProtectionPermissionFlags')]
  DNDataProtectionPermissionFlags = type Integer;
  DNDataProtectionPermissionFlagsHelper = record helper for DNDataProtectionPermissionFlags
  public const
    ///<summary>No protection abilities.</summary>
    NoFlags = 0;
    ///<summary>The ability to encrypt data.</summary>
    ProtectData = 1;
    ///<summary>The ability to unencrypt data.</summary>
    UnprotectData = 2;
    ///<summary>The ability to encrypt memory.</summary>
    ProtectMemory = 4;
    ///<summary>The ability to unencrypt memory.</summary>
    UnprotectMemory = 8;
    ///<summary>The ability to encrypt data, encrypt memory, unencrypt data, and unencrypt memory.</summary>
    AllFlags = 15;
  end;




type


{ declares }

  DNIRelDecryptor = interface; // type: System.Security.Cryptography.Xml.IRelDecryptor, namespace: System.Security.Cryptography.Xml
  DNDataProtectionPermissionAttribute = interface; // type: System.Security.Permissions.DataProtectionPermissionAttribute, namespace: System.Security.Permissions
  DNDataProtectionPermission = interface; // type: System.Security.Permissions.DataProtectionPermission, namespace: System.Security.Permissions
  DNPkcs9AttributeObject = interface; // type: System.Security.Cryptography.Pkcs.Pkcs9AttributeObject, namespace: System.Security.Cryptography.Pkcs
  DNPkcs9ContentType = interface; // type: System.Security.Cryptography.Pkcs.Pkcs9ContentType, namespace: System.Security.Cryptography.Pkcs
  DNPkcs9DocumentDescription = interface; // type: System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription, namespace: System.Security.Cryptography.Pkcs
  DNPkcs9DocumentName = interface; // type: System.Security.Cryptography.Pkcs.Pkcs9DocumentName, namespace: System.Security.Cryptography.Pkcs
  DNPkcs9MessageDigest = interface; // type: System.Security.Cryptography.Pkcs.Pkcs9MessageDigest, namespace: System.Security.Cryptography.Pkcs
  DNPkcs9SigningTime = interface; // type: System.Security.Cryptography.Pkcs.Pkcs9SigningTime, namespace: System.Security.Cryptography.Pkcs
  DNCryptographicAttributeObject = interface; // type: System.Security.Cryptography.CryptographicAttributeObject, namespace: System.Security.Cryptography
  DNCryptographicAttributeObjectCollection = interface; // type: System.Security.Cryptography.CryptographicAttributeObjectCollection, namespace: System.Security.Cryptography
  DNCryptographicAttributeObjectEnumerator = interface; // type: System.Security.Cryptography.CryptographicAttributeObjectEnumerator, namespace: System.Security.Cryptography
  DNDataProtector = interface; // type: System.Security.Cryptography.DataProtector, namespace: System.Security.Cryptography
  DNDpapiDataProtector = interface; // type: System.Security.Cryptography.DpapiDataProtector, namespace: System.Security.Cryptography
  DNAlgorithmIdentifier = interface; // type: System.Security.Cryptography.Pkcs.AlgorithmIdentifier, namespace: System.Security.Cryptography.Pkcs
  DNCmsRecipient = interface; // type: System.Security.Cryptography.Pkcs.CmsRecipient, namespace: System.Security.Cryptography.Pkcs
  DNCmsRecipientCollection = interface; // type: System.Security.Cryptography.Pkcs.CmsRecipientCollection, namespace: System.Security.Cryptography.Pkcs
  DNCmsRecipientEnumerator = interface; // type: System.Security.Cryptography.Pkcs.CmsRecipientEnumerator, namespace: System.Security.Cryptography.Pkcs
  DNCmsSigner = interface; // type: System.Security.Cryptography.Pkcs.CmsSigner, namespace: System.Security.Cryptography.Pkcs
  DNContentInfo = interface; // type: System.Security.Cryptography.Pkcs.ContentInfo, namespace: System.Security.Cryptography.Pkcs
  DNEnvelopedCms = interface; // type: System.Security.Cryptography.Pkcs.EnvelopedCms, namespace: System.Security.Cryptography.Pkcs
  DNPublicKeyInfo = interface; // type: System.Security.Cryptography.Pkcs.PublicKeyInfo, namespace: System.Security.Cryptography.Pkcs
  DNRecipientInfo = interface; // type: System.Security.Cryptography.Pkcs.RecipientInfo, namespace: System.Security.Cryptography.Pkcs
  DNKeyAgreeRecipientInfo = interface; // type: System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo, namespace: System.Security.Cryptography.Pkcs
  DNKeyTransRecipientInfo = interface; // type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo, namespace: System.Security.Cryptography.Pkcs
  DNRecipientInfoCollection = interface; // type: System.Security.Cryptography.Pkcs.RecipientInfoCollection, namespace: System.Security.Cryptography.Pkcs
  DNRecipientInfoEnumerator = interface; // type: System.Security.Cryptography.Pkcs.RecipientInfoEnumerator, namespace: System.Security.Cryptography.Pkcs
  DNSignedCms = interface; // type: System.Security.Cryptography.Pkcs.SignedCms, namespace: System.Security.Cryptography.Pkcs
  DNSignerInfo = interface; // type: System.Security.Cryptography.Pkcs.SignerInfo, namespace: System.Security.Cryptography.Pkcs
  DNSignerInfoCollection = interface; // type: System.Security.Cryptography.Pkcs.SignerInfoCollection, namespace: System.Security.Cryptography.Pkcs
  DNSignerInfoEnumerator = interface; // type: System.Security.Cryptography.Pkcs.SignerInfoEnumerator, namespace: System.Security.Cryptography.Pkcs
  DNSubjectIdentifier = interface; // type: System.Security.Cryptography.Pkcs.SubjectIdentifier, namespace: System.Security.Cryptography.Pkcs
  DNSubjectIdentifierOrKey = interface; // type: System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey, namespace: System.Security.Cryptography.Pkcs
  DNProtectedData = interface; // type: System.Security.Cryptography.ProtectedData, namespace: System.Security.Cryptography
  DNProtectedMemory = interface; // type: System.Security.Cryptography.ProtectedMemory, namespace: System.Security.Cryptography
  DNX509Certificate2UI = interface; // type: System.Security.Cryptography.X509Certificates.X509Certificate2UI, namespace: System.Security.Cryptography.X509Certificates
  DNCipherData = interface; // type: System.Security.Cryptography.Xml.CipherData, namespace: System.Security.Cryptography.Xml
  DNDataObject = interface; // type: System.Security.Cryptography.Xml.DataObject, namespace: System.Security.Cryptography.Xml
  DNEncryptedReference = interface; // type: System.Security.Cryptography.Xml.EncryptedReference, namespace: System.Security.Cryptography.Xml
  DNCipherReference = interface; // type: System.Security.Cryptography.Xml.CipherReference, namespace: System.Security.Cryptography.Xml
  DNDataReference = interface; // type: System.Security.Cryptography.Xml.DataReference, namespace: System.Security.Cryptography.Xml
  DNKeyReference = interface; // type: System.Security.Cryptography.Xml.KeyReference, namespace: System.Security.Cryptography.Xml
  DNEncryptedType = interface; // type: System.Security.Cryptography.Xml.EncryptedType, namespace: System.Security.Cryptography.Xml
  DNEncryptedData = interface; // type: System.Security.Cryptography.Xml.EncryptedData, namespace: System.Security.Cryptography.Xml
  DNEncryptedKey = interface; // type: System.Security.Cryptography.Xml.EncryptedKey, namespace: System.Security.Cryptography.Xml
  DNEncryptedXml = interface; // type: System.Security.Cryptography.Xml.EncryptedXml, namespace: System.Security.Cryptography.Xml
  DNEncryptionMethod = interface; // type: System.Security.Cryptography.Xml.EncryptionMethod, namespace: System.Security.Cryptography.Xml
  DNEncryptionProperty = interface; // type: System.Security.Cryptography.Xml.EncryptionProperty, namespace: System.Security.Cryptography.Xml
  DNEncryptionPropertyCollection = interface; // type: System.Security.Cryptography.Xml.EncryptionPropertyCollection, namespace: System.Security.Cryptography.Xml
  DNKeyInfo = interface; // type: System.Security.Cryptography.Xml.KeyInfo, namespace: System.Security.Cryptography.Xml
  DNKeyInfoClause = interface; // type: System.Security.Cryptography.Xml.KeyInfoClause, namespace: System.Security.Cryptography.Xml
  DNDSAKeyValue = interface; // type: System.Security.Cryptography.Xml.DSAKeyValue, namespace: System.Security.Cryptography.Xml
  DNKeyInfoEncryptedKey = interface; // type: System.Security.Cryptography.Xml.KeyInfoEncryptedKey, namespace: System.Security.Cryptography.Xml
  DNKeyInfoName = interface; // type: System.Security.Cryptography.Xml.KeyInfoName, namespace: System.Security.Cryptography.Xml
  DNKeyInfoNode = interface; // type: System.Security.Cryptography.Xml.KeyInfoNode, namespace: System.Security.Cryptography.Xml
  DNKeyInfoRetrievalMethod = interface; // type: System.Security.Cryptography.Xml.KeyInfoRetrievalMethod, namespace: System.Security.Cryptography.Xml
  DNKeyInfoX509Data = interface; // type: System.Security.Cryptography.Xml.KeyInfoX509Data, namespace: System.Security.Cryptography.Xml
  DNRSAKeyValue = interface; // type: System.Security.Cryptography.Xml.RSAKeyValue, namespace: System.Security.Cryptography.Xml
  DNReference = interface; // type: System.Security.Cryptography.Xml.Reference, namespace: System.Security.Cryptography.Xml
  DNReferenceList = interface; // type: System.Security.Cryptography.Xml.ReferenceList, namespace: System.Security.Cryptography.Xml
  DNSignature = interface; // type: System.Security.Cryptography.Xml.Signature, namespace: System.Security.Cryptography.Xml
  DNSignedInfo = interface; // type: System.Security.Cryptography.Xml.SignedInfo, namespace: System.Security.Cryptography.Xml
  DNSignedXml = interface; // type: System.Security.Cryptography.Xml.SignedXml, namespace: System.Security.Cryptography.Xml
  DNTransform = interface; // type: System.Security.Cryptography.Xml.Transform, namespace: System.Security.Cryptography.Xml
  DNXmlDecryptionTransform = interface; // type: System.Security.Cryptography.Xml.XmlDecryptionTransform, namespace: System.Security.Cryptography.Xml
  DNXmlDsigBase64Transform = interface; // type: System.Security.Cryptography.Xml.XmlDsigBase64Transform, namespace: System.Security.Cryptography.Xml
  DNXmlDsigC14NTransform = interface; // type: System.Security.Cryptography.Xml.XmlDsigC14NTransform, namespace: System.Security.Cryptography.Xml
  DNXmlDsigC14NWithCommentsTransform = interface; // type: System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform, namespace: System.Security.Cryptography.Xml
  DNXmlDsigEnvelopedSignatureTransform = interface; // type: System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform, namespace: System.Security.Cryptography.Xml
  DNXmlDsigExcC14NTransform = interface; // type: System.Security.Cryptography.Xml.XmlDsigExcC14NTransform, namespace: System.Security.Cryptography.Xml
  DNXmlDsigExcC14NWithCommentsTransform = interface; // type: System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform, namespace: System.Security.Cryptography.Xml
  DNXmlDsigXPathTransform = interface; // type: System.Security.Cryptography.Xml.XmlDsigXPathTransform, namespace: System.Security.Cryptography.Xml
  DNXmlDsigXsltTransform = interface; // type: System.Security.Cryptography.Xml.XmlDsigXsltTransform, namespace: System.Security.Cryptography.Xml
  DNXmlLicenseTransform = interface; // type: System.Security.Cryptography.Xml.XmlLicenseTransform, namespace: System.Security.Cryptography.Xml
  DNTransformChain = interface; // type: System.Security.Cryptography.Xml.TransformChain, namespace: System.Security.Cryptography.Xml
  DNX509IssuerSerial = interface; // type: System.Security.Cryptography.Xml.X509IssuerSerial, namespace: System.Security.Cryptography.Xml


{ objects }

  //-------------namespace: System.Security.Cryptography.Xml----------------
  ///<summary>Defines methods that decrypt an XrML <see langword="&lt;encryptedGrant&gt;" />
  ///  element.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.IRelDecryptor')]
  DNIRelDecryptor = interface(DDN.mscorlib.DNObject)
  ['{D926D95B-A15C-3D27-B950-06C8AD0704E8}']
  { methods } 

    ///<summary>Decrypts an XrML <see langword="&lt;encryptedGrant&gt;" />
    ///  element that is contained within a <see cref="T:System.IO.Stream" />
    ///  object.</summary>
    ///  <param name="encryptionMethod">An <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" />
    ///  object that encapsulates the algorithm used for XML encryption.</param>
    ///  <param name="keyInfo">A <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object that contains an asymmetric key to use for decryption.</param>
    ///  <param name="toDecrypt">A stream object that contains an <see langword="&lt;encryptedGrant&gt;" />
    ///  element to decrypt.</param>
    ///<returns>A <see cref="T:System.IO.Stream" />
    ///  object that contains a decrypted <see langword="&lt;encryptedGrant&gt;" />
    ///  element.</returns>
    function Decrypt(encryptionMethod: DNEncryptionMethod; keyInfo: DNKeyInfo; toDecrypt: DDN.mscorlib.DNStream): DDN.mscorlib.DNStream;

  end;

  //-------------namespace: System.Security.Permissions----------------
  DNDataProtectionPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{94B548FD-48A9-5B1F-B320-3AA0FF93E607}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.DataProtectionPermissionAttribute" />
    ///  class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  .</summary>
    ///  <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  values. </param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNDataProtectionPermissionAttribute;

  end;

  ///<summary>Allows security actions for <see cref="T:System.Security.Permissions.DataProtectionPermission" />
  ///  to be applied to code using declarative security. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Permissions.DataProtectionPermissionAttribute')]
  DNDataProtectionPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{C3F8F9D4-6BD9-3E21-9DE3-5FFC1EEED4E7}']
  { getters & setters } 

    function get_Flags: DNDataProtectionPermissionFlags;
    procedure set_Flags(value: DNDataProtectionPermissionFlags);
    function get_ProtectData: Boolean;
    procedure set_ProtectData(value: Boolean);
    function get_UnprotectData: Boolean;
    procedure set_UnprotectData(value: Boolean);
    function get_ProtectMemory: Boolean;
    procedure set_ProtectMemory(value: Boolean);
    function get_UnprotectMemory: Boolean;
    procedure set_UnprotectMemory(value: Boolean);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Creates and returns a new <see cref="T:System.Security.Permissions.DataProtectionPermission" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Security.Permissions.DataProtectionPermission" />
    ///  that corresponds to the attribute.</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the data protection permissions.</summary>
    ///<returns>A bitwise combination of the <see cref="T:System.Security.Permissions.DataProtectionPermissionFlags" />
    ///  values. The default is <see cref="F:System.Security.Permissions.DataProtectionPermissionFlags.NoFlags" />
    ///  .</returns>
    property Flags: DNDataProtectionPermissionFlags read get_Flags write set_Flags;
    ///<summary>Gets or sets a value indicating whether data can be encrypted using the <see cref="T:System.Security.Cryptography.ProtectedData" />
    ///  class.</summary>
    ///<returns><see langword="true" />
    ///  if data can be encrypted; otherwise, <see langword="false" />
    ///  .  </returns>
    property ProtectData: Boolean read get_ProtectData write set_ProtectData;
    ///<summary>Gets or sets a value indicating whether data can be unencrypted using the <see cref="T:System.Security.Cryptography.ProtectedData" />
    ///  class.</summary>
    ///<returns><see langword="true" />
    ///  if data can be unencrypted; otherwise, <see langword="false" />
    ///  .  </returns>
    property UnprotectData: Boolean read get_UnprotectData write set_UnprotectData;
    ///<summary>Gets or sets a value indicating whether memory can be encrypted using the <see cref="T:System.Security.Cryptography.ProtectedMemory" />
    ///  class.</summary>
    ///<returns><see langword="true" />
    ///  if memory can be encrypted; otherwise, <see langword="false" />
    ///  .  </returns>
    property ProtectMemory: Boolean read get_ProtectMemory write set_ProtectMemory;
    ///<summary>Gets or sets a value indicating whether memory can be unencrypted using the <see cref="T:System.Security.Cryptography.ProtectedMemory" />
    ///  class.</summary>
    ///<returns><see langword="true" />
    ///  if memory can be unencrypted; otherwise, <see langword="false" />
    ///  .  </returns>
    property UnprotectMemory: Boolean read get_UnprotectMemory write set_UnprotectMemory;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataProtectionPermissionAttribute = class(TDNGenericImport<DNDataProtectionPermissionAttributeClass, DNDataProtectionPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNDataProtectionPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{493E9BBE-FAE1-59A5-87BC-80902F22AAA6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.DataProtectionPermission" />
    ///  class with the specified permission state. </summary>
    ///  <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" />
    ///  values.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="state" />
    ///  is not a valid <see cref="T:System.Security.Permissions.PermissionState" />
    ///  value. </exception>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNDataProtectionPermission; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.DataProtectionPermission" />
    ///  class with the specified permission flags. </summary>
    ///  <param name="flag">A bitwise combination of the <see cref="T:System.Security.Permissions.DataProtectionPermissionFlags" />
    ///  values.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="flags" />
    ///  is not a valid combination of the <see cref="T:System.Security.Permissions.DataProtectionPermissionFlags" />
    ///  values. </exception>
    {class} function init(flag: DNDataProtectionPermissionFlags): DNDataProtectionPermission; overload;

  end;

  ///<summary>Controls the ability to access encrypted data and memory. This class cannot be inherited. </summary>
  [DNTypeName('System.Security.Permissions.DataProtectionPermission')]
  DNDataProtectionPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{C23B46EB-77BE-3C65-8C6A-D26E9C89293A}']
  { getters & setters } 

    function get_Flags: DNDataProtectionPermissionFlags;
    procedure set_Flags(value: DNDataProtectionPermissionFlags);

  { methods } 

    ///<summary>Returns a value indicating whether the current permission is unrestricted.</summary>
    ///<returns><see langword="true" />
    ///  if the current permission is unrestricted; otherwise, <see langword="false" />
    ///  .</returns>
    function IsUnrestricted: Boolean;
    ///<summary>Creates and returns an identical copy of the current permission.</summary>
    ///<returns>A copy of the current permission.</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
    ///  <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
    ///<returns>A new permission that represents the union of the current permission and the specified permission.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is not <see langword="null" />
    ///  and does not specify a permission of the same type as the current permission. </exception>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Determines whether the current permission is a subset of the specified permission.</summary>
    ///  <param name="target">A permission to test for the subset relationship. This permission must be the same type as the current permission. </param>
    ///<returns><see langword="true" />
    ///  if the current permission is a subset of the specified permission; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is not <see langword="null" />
    ///  and does not specify a permission of the same type as the current permission. </exception>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
    ///  <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission. </param>
    ///<returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is <see langword="null" />
    ///  if the intersection is empty.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is not <see langword="null" />
    ///  and does not specify a permission of the same type as the current permission. </exception>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Creates an XML encoding of the permission and its current state.</summary>
    ///<returns>An XML encoding of the permission, including state information.</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>Reconstructs a permission with a specific state from an XML encoding.</summary>
    ///  <param name="securityElement">A <see cref="T:System.Security.SecurityElement" />
    ///  that contains the XML encoding used to reconstruct the permission.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="securityElement" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.ArgumentException"><paramref name="securityElement" />
    ///  is not a valid permission element.-or- The version number of <paramref name="securityElement" />
    ///  is not supported. </exception>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the data and memory protection flags.</summary>
    ///<returns>A bitwise combination of the <see cref="T:System.Security.Permissions.DataProtectionPermissionFlags" />
    ///  values.</returns>
    ///<exception cref="T:System.ArgumentException">The specified value is not a valid combination of the <see cref="T:System.Security.Permissions.DataProtectionPermissionFlags" />
    ///  values. </exception>
    property Flags: DNDataProtectionPermissionFlags read get_Flags write set_Flags;
  end;

  TDNDataProtectionPermission = class(TDNGenericImport<DNDataProtectionPermissionClass, DNDataProtectionPermission>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNPkcs9AttributeObjectClass = interface(DNObjectClass)
  ['{D82DC25D-F64E-5C81-A166-6DE18D742940}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  class.</summary>
    {class} function init: DNPkcs9AttributeObject; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  class using a specified string representation of an object identifier (OID) as the attribute type and a specified ASN.1 encoded data as the attribute value.</summary>
    ///  <param name="oid">The string representation of an OID that represents the PKCS #9 attribute type.</param>
    ///  <param name="encodedData">An array of byte values that contains the PKCS #9 attribute value.</param>
    {class} function init(oid: string; encodedData: TArray<Byte>): DNPkcs9AttributeObject; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  class using a specified <see cref="T:System.Security.Cryptography.Oid" />
    ///  object as the attribute type and a specified ASN.1 encoded data as the attribute value.</summary>
    ///  <param name="oid">An object that represents the PKCS #9 attribute type.</param>
    ///  <param name="encodedData">An array of byte values that represents the PKCS #9 attribute value.</param>
    {class} function init(oid: DDN.System.DNOid; encodedData: TArray<Byte>): DNPkcs9AttributeObject; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  class using a specified <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object as its attribute type and value.</summary>
    ///  <param name="asnEncodedData">An object that contains the PKCS #9 attribute type and value to use.</param>
    ///<exception cref="T:System.ArgumentException">The length of the <paramref name="Value" />
    ///  member of the <paramref name="Oid" />
    ///  member of <paramref name="asnEncodedData" />
    ///  is zero.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="Oid" />
    ///  member of <paramref name="asnEncodedData" />
    ///  is <see langword="null" />
    ///  .-or-The <paramref name="Value" />
    ///  member of the <paramref name="Oid" />
    ///  member of <paramref name="asnEncodedData" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(asnEncodedData: DDN.System.DNAsnEncodedData): DNPkcs9AttributeObject; overload;

  end;

  ///<summary>Represents an attribute used for CMS/PKCS #7 and PKCS #9 operations.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.Pkcs9AttributeObject')]
  DNPkcs9AttributeObject = interface(DNObject)
  ['{3B4D1CD6-2C4F-3734-B72B-A7040AC3ACA6}']
  { getters & setters } 

    function get_Oid: DDN.System.DNOid;
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    ///<summary>Copies a PKCS #9 attribute type and value for this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  from the specified <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object.</summary>
    ///  <param name="asnEncodedData">An object that contains the PKCS #9 attribute type and value to use.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="asnEncodeData" />
    ///  does not represent a compatible attribute type.</exception><exception cref="T:System.ArgumentNullException"><paramref name="asnEncodedData" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure CopyFrom(asnEncodedData: DDN.System.DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</summary>
    ///<returns>An object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</returns>
    property Oid: DDN.System.DNOid read get_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNPkcs9AttributeObject = class(TDNGenericImport<DNPkcs9AttributeObjectClass, DNPkcs9AttributeObject>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNPkcs9ContentTypeClass = interface(DNPkcs9AttributeObjectClass)
  ['{1D7C7031-0534-5F63-A041-B5B7D3BF6F8D}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9ContentType.#ctor" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9ContentType" />
    ///  class.</summary>
    {class} function init: DNPkcs9ContentType;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9ContentType" />
  ///  class defines the type of the content of a CMS/PKCS #7 message.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.Pkcs9ContentType')]
  DNPkcs9ContentType = interface(DNPkcs9AttributeObject)
  ['{88BB2A53-22A7-30AC-8D96-0825EC051A70}']
  { getters & setters } 

    function get_ContentType: DDN.System.DNOid;
    function get_Oid: DDN.System.DNOid;
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    ///<summary>Copies information from an <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object.</summary>
    ///  <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object from which to copy information.</param>
    procedure CopyFrom(asnEncodedData: DDN.System.DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.Pkcs9ContentType.ContentType" />
    ///  property gets an <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that contains the content type.</summary>
    ///<returns>An  <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that contains the content type.</returns>
    property ContentType: DDN.System.DNOid read get_ContentType;
    ///<summary>Gets an <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</summary>
    ///<returns>An object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</returns>
    property Oid: DDN.System.DNOid read get_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNPkcs9ContentType = class(TDNGenericImport<DNPkcs9ContentTypeClass, DNPkcs9ContentType>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNPkcs9DocumentDescriptionClass = interface(DNPkcs9AttributeObjectClass)
  ['{5A9E0FEA-8CCE-58B8-9932-31D1C839C2B1}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.#ctor" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription" />
    ///  class.</summary>
    {class} function init: DNPkcs9DocumentDescription; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.#ctor(System.String)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription" />
    ///  class by using the specified description of the content of a CMS/PKCS #7 message.</summary>
    ///  <param name="documentDescription">An instance of the <see cref="T:System.String" />
    ///  class that specifies the description for the CMS/PKCS #7 message.</param>
    {class} function init(documentDescription: string): DNPkcs9DocumentDescription; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.#ctor(System.Byte[])" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription" />
    ///  class by using the specified array of byte values as the encoded description of the content of a CMS/PKCS #7 message.</summary>
    ///  <param name="encodedDocumentDescription">An array of byte values that specifies the encoded description of the CMS/PKCS #7 message.</param>
    {class} function init(encodedDocumentDescription: TArray<Byte>): DNPkcs9DocumentDescription; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription" />
  ///  class defines the description of the content of a CMS/PKCS #7 message.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription')]
  DNPkcs9DocumentDescription = interface(DNPkcs9AttributeObject)
  ['{41EC3031-FC11-32A4-A3B0-5386D6EF865B}']
  { getters & setters } 

    function get_DocumentDescription: string;
    function get_Oid: DDN.System.DNOid;
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    ///<summary>Copies information from an <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object.</summary>
    ///  <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object from which to copy information.</param>
    procedure CopyFrom(asnEncodedData: DDN.System.DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.DocumentDescription" />
    ///  property retrieves the document description.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  object that contains the document description.</returns>
    property DocumentDescription: string read get_DocumentDescription;
    ///<summary>Gets an <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</summary>
    ///<returns>An object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</returns>
    property Oid: DDN.System.DNOid read get_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNPkcs9DocumentDescription = class(TDNGenericImport<DNPkcs9DocumentDescriptionClass, DNPkcs9DocumentDescription>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNPkcs9DocumentNameClass = interface(DNPkcs9AttributeObjectClass)
  ['{7EA2C31F-C1A5-5944-BC78-1C495121CD09}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.#ctor" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentName" />
    ///  class.</summary>
    {class} function init: DNPkcs9DocumentName; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.#ctor(System.String)" />
    ///  constructor creates an instance of the  <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentName" />
    ///  class by using the specified name for the CMS/PKCS #7 message.</summary>
    ///  <param name="documentName">A  <see cref="T:System.String" />
    ///  object that specifies the name for the CMS/PKCS #7 message.</param>
    {class} function init(documentName: string): DNPkcs9DocumentName; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.#ctor(System.Byte[])" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentName" />
    ///  class by using the specified array of byte values as the encoded name of the content of a CMS/PKCS #7 message.</summary>
    ///  <param name="encodedDocumentName">An array of byte values that specifies the encoded name of the CMS/PKCS #7 message.</param>
    {class} function init(encodedDocumentName: TArray<Byte>): DNPkcs9DocumentName; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentName" />
  ///  class defines the name of a CMS/PKCS #7 message.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.Pkcs9DocumentName')]
  DNPkcs9DocumentName = interface(DNPkcs9AttributeObject)
  ['{A849A423-AEAD-394F-8943-EE5921FA53CA}']
  { getters & setters } 

    function get_DocumentName: string;
    function get_Oid: DDN.System.DNOid;
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    ///<summary>Copies information from an <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object.</summary>
    ///  <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object from which to copy information.</param>
    procedure CopyFrom(asnEncodedData: DDN.System.DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.DocumentName" />
    ///  property retrieves the document name.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  object that contains the document name.</returns>
    property DocumentName: string read get_DocumentName;
    ///<summary>Gets an <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</summary>
    ///<returns>An object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</returns>
    property Oid: DDN.System.DNOid read get_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNPkcs9DocumentName = class(TDNGenericImport<DNPkcs9DocumentNameClass, DNPkcs9DocumentName>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNPkcs9MessageDigestClass = interface(DNPkcs9AttributeObjectClass)
  ['{FB93868B-A2A3-512F-AECD-4E4E7FF769D2}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest.#ctor" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest" />
    ///  class.</summary>
    {class} function init: DNPkcs9MessageDigest;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest" />
  ///  class defines the message digest of a CMS/PKCS #7 message.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.Pkcs9MessageDigest')]
  DNPkcs9MessageDigest = interface(DNPkcs9AttributeObject)
  ['{23D9775B-BDEF-324F-98E0-DF0DAD9F1B52}']
  { getters & setters } 

    function get_MessageDigest: TArray<Byte>;
    function get_Oid: DDN.System.DNOid;
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    ///<summary>Copies information from an <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object.</summary>
    ///  <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object from which to copy information.</param>
    procedure CopyFrom(asnEncodedData: DDN.System.DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest.MessageDigest" />
    ///  property retrieves the message digest.</summary>
    ///<returns>An array of byte values that contains the message digest.</returns>
    property MessageDigest: TArray<Byte> read get_MessageDigest;
    ///<summary>Gets an <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</summary>
    ///<returns>An object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</returns>
    property Oid: DDN.System.DNOid read get_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNPkcs9MessageDigest = class(TDNGenericImport<DNPkcs9MessageDigestClass, DNPkcs9MessageDigest>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNPkcs9SigningTimeClass = interface(DNPkcs9AttributeObjectClass)
  ['{821FA1D1-8E9A-5218-8B72-B1BD375944BF}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.#ctor" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime" />
    ///  class.</summary>
    {class} function init: DNPkcs9SigningTime; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.#ctor(System.DateTime)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime" />
    ///  class by using the specified signing date and time.</summary>
    ///  <param name="signingTime">A <see cref="T:System.DateTime" />
    ///  structure that represents the signing date and time of the signature.</param>
    {class} function init(signingTime: DDN.mscorlib.DNDateTime): DNPkcs9SigningTime; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.#ctor(System.Byte[])" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime" />
    ///  class by using the specified array of byte values as the encoded signing date and time of the content of a CMS/PKCS #7 message.</summary>
    ///  <param name="encodedSigningTime">An array of byte values that specifies the encoded signing date and time of the CMS/PKCS #7 message.</param>
    {class} function init(encodedSigningTime: TArray<Byte>): DNPkcs9SigningTime; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime" />
  ///  class defines the signing date and time of a signature. A <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime" />
  ///  object can  be used as an authenticated attribute of a <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
  ///  object when an authenticated date and time are to accompany a digital signature.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.Pkcs9SigningTime')]
  DNPkcs9SigningTime = interface(DNPkcs9AttributeObject)
  ['{93BF70DC-BEA3-34FE-B172-EC1C0AB7E329}']
  { getters & setters } 

    function get_SigningTime: DDN.mscorlib.DNDateTime;
    function get_Oid: DDN.System.DNOid;
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    ///<summary>Copies information from a <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object.</summary>
    ///  <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object from which to copy information.</param>
    procedure CopyFrom(asnEncodedData: DDN.System.DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.SigningTime" />
    ///  property retrieves a <see cref="T:System.DateTime" />
    ///  structure that represents the date and time that the message was signed.</summary>
    ///<returns>A <see cref="T:System.DateTime" />
    ///  structure that contains the date and time the document was signed.</returns>
    property SigningTime: DDN.mscorlib.DNDateTime read get_SigningTime;
    ///<summary>Gets an <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</summary>
    ///<returns>An object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" />
    ///  object.</returns>
    property Oid: DDN.System.DNOid read get_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNPkcs9SigningTime = class(TDNGenericImport<DNPkcs9SigningTimeClass, DNPkcs9SigningTime>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptographicAttributeObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BB73E783-E254-5B33-8599-F33388CFE7F1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  class using an attribute represented by the specified <see cref="T:System.Security.Cryptography.Oid" />
    ///  object.</summary>
    ///  <param name="oid">The attribute to store in this <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object.</param>
    {class} function init(oid: DDN.System.DNOid): DNCryptographicAttributeObject; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  class using an attribute represented by the specified <see cref="T:System.Security.Cryptography.Oid" />
    ///  object and the set of values associated with that attribute represented by the specified <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" />
    ///  collection.</summary>
    ///  <param name="oid">The attribute to store in this <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object.</param>
    ///  <param name="values">The set of values associated with the attribute represented by the <paramref name="oid" />
    ///  parameter.</param>
    ///<exception cref="T:System.InvalidOperationException">The collection contains duplicate items.</exception>
    {class} function init(oid: DDN.System.DNOid; values: DDN.System.DNAsnEncodedDataCollection): DNCryptographicAttributeObject; overload;

  end;

  ///<summary>Contains a type and a collection of values associated with that type.</summary>
  [DNTypeName('System.Security.Cryptography.CryptographicAttributeObject')]
  DNCryptographicAttributeObject = interface(DDN.mscorlib.DNObject)
  ['{A457D173-FAFD-3DD9-A3BF-4C426D26F47C}']
  { getters & setters } 

    function get_Oid: DDN.System.DNOid;
    function get_Values: DDN.System.DNAsnEncodedDataCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that specifies the object identifier for the attribute.</summary>
    ///<returns>The object identifier for the attribute.</returns>
    property Oid: DDN.System.DNOid read get_Oid;
    ///<summary>Gets the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" />
    ///  collection that contains the set of values that are associated with the attribute.</summary>
    ///<returns>The set of values that is associated with the attribute.</returns>
    property Values: DDN.System.DNAsnEncodedDataCollection read get_Values;
  end;

  TDNCryptographicAttributeObject = class(TDNGenericImport<DNCryptographicAttributeObjectClass, DNCryptographicAttributeObject>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptographicAttributeObjectCollectionClass = interface(DNObjectClass)
  ['{991B9107-366A-5CB7-936F-DC56974714E5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  class.</summary>
    {class} function init: DNCryptographicAttributeObjectCollection; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  class, adding a specified <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  to the collection.</summary>
    ///  <param name="attribute">A <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object that is added to the collection.</param>
    {class} function init(attribute: DNCryptographicAttributeObject): DNCryptographicAttributeObjectCollection; overload;

  end;

  ///<summary>Contains a set of <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
  ///  objects.</summary>
  [DNTypeName('System.Security.Cryptography.CryptographicAttributeObjectCollection')]
  DNCryptographicAttributeObjectCollection = interface(DDN.mscorlib.DNICollection)
  ['{0F16A88D-79CE-358C-8E75-49DA19E8D66D}']
  { getters & setters } 

    function get_Item(index: Int32): DNCryptographicAttributeObject;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object to the collection.</summary>
    ///  <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" />
    ///  object to add to the collection.</param>
    ///<returns><see langword="true" />
    ///  if the method returns the zero-based index of the added item; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asnEncodedData" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    function Add(asnEncodedData: DDN.System.DNAsnEncodedData): Int32; overload;
    ///<summary>Removes the specified <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object from the collection.</summary>
    ///  <param name="attribute">The <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object to remove from the collection.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="attribute" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Remove(attribute: DNCryptographicAttributeObject);
    ///<summary>Gets a <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectEnumerator" />
    ///  object for the collection.</summary>
    ///<returns><see langword="true" />
    ///  if the method returns a <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectEnumerator" />
    ///  object that can be used to enumerate the collection; otherwise, <see langword="false" />
    ///  .</returns>
    function GetEnumerator: DNCryptographicAttributeObjectEnumerator;
    ///<summary>Copies the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection to an array of <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  objects.</summary>
    ///  <param name="array">An array of <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  objects that the collection is copied to.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  to which the collection is to be copied.</param>
    ///<exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception><exception cref="T:System.ArgumentNullException"><see langword="null" />
    ///  was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    procedure CopyTo(&array: TArray<DNCryptographicAttributeObject>; index: Int32);
    ///<summary>Adds the specified <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object to the collection.</summary>
    ///  <param name="attribute">The <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object to add to the collection.</param>
    ///<returns><see langword="true" />
    ///  if the method returns the zero-based index of the added item; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="asnEncodedData" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException">The specified item already exists in the collection.</exception>
    function Add(attribute: DNCryptographicAttributeObject): Int32; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCryptographicAttributeObject read get_Item; default;
    ///<summary>Gets the number of items in the collection.</summary>
    ///<returns>The number of items in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value that indicates whether access to the collection is synchronized, or thread safe.</summary>
    ///<returns><see langword="true" />
    ///  if access to the collection is thread safe; otherwise <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets an <see cref="T:System.Object" />
    ///  object used to synchronize access to the collection.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  object used to synchronize access to the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCryptographicAttributeObjectCollection = class(TDNGenericImport<DNCryptographicAttributeObjectCollectionClass, DNCryptographicAttributeObjectCollection>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptographicAttributeObjectEnumeratorClass = interface(DNObjectClass)
  ['{D726A622-7D65-5E6B-9147-6AB036EF2B6D}']
  end;

  ///<summary>Provides enumeration functionality for the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
  ///  collection. This class cannot be inherited. </summary>
  [DNTypeName('System.Security.Cryptography.CryptographicAttributeObjectEnumerator')]
  DNCryptographicAttributeObjectEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{B1B5B4C5-2D8A-3B62-8375-67BA6ACF2BEF}']
  { getters & setters } 

    function get_Current: DNCryptographicAttributeObject;

  { methods } 

    ///<summary>Advances the enumeration to the next <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object in the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection.</summary>
    ///<returns><see langword="true" />
    ///  if the enumeration successfully moved to the next <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object; <see langword="false" />
    ///  if the enumerator is at the end of the enumeration.</returns>
    function MoveNext: Boolean;
    ///<summary>Resets the enumeration to the first <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object in the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection.</summary>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the current <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object from the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" />
    ///  object that represents the current cryptographic attribute in the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection.</returns>
    property Current: DNCryptographicAttributeObject read get_Current;
  end;

  TDNCryptographicAttributeObjectEnumerator = class(TDNGenericImport<DNCryptographicAttributeObjectEnumeratorClass, DNCryptographicAttributeObjectEnumerator>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDataProtectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EAF46267-1BC9-5663-8442-B38EEB6CFB28}']
  { static methods } 

    ///<summary>Creates an instance of a data protector implementation by using the specified class name of the data protector, the application name, the primary purpose, and the specific purposes.</summary>
    ///  <param name="providerClass">The class name for the data protector.</param>
    ///  <param name="applicationName">The name of the application.</param>
    ///  <param name="primaryPurpose">The primary purpose for the protected data.</param>
    ///  <param name="specificPurposes">The specific purposes for the protected data.</param>
    ///<returns>A data protector implementation object.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="providerClass" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function Create(providerClass: string; applicationName: string; primaryPurpose: string; specificPurposes: TArray<string>): DNDataProtector;

  end;

  ///<summary>Provides the base class for data protectors.</summary>
  [DNTypeName('System.Security.Cryptography.DataProtector')]
  DNDataProtector = interface(DDN.mscorlib.DNObject)
  ['{16770A15-E376-3D7F-9349-89DED00E785F}']
  { methods } 

    ///<summary>Determines if re-encryption is required for the specified encrypted data.</summary>
    ///  <param name="encryptedData">The encrypted data to be evaluated.</param>
    ///<returns><see langword="true" />
    ///  if the data must be re-encrypted; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReprotectRequired(encryptedData: TArray<Byte>): Boolean;
    ///<summary>Protects the specified user data.</summary>
    ///  <param name="userData">The data to be protected.</param>
    ///<returns>A byte array that contains the encrypted data.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="userData" />
    ///  is <see langword="null" />
    ///  .</exception>
    function Protect(userData: TArray<Byte>): TArray<Byte>;
    ///<summary>Unprotects the specified protected data.</summary>
    ///  <param name="encryptedData">The encrypted data to be unprotected.</param>
    ///<returns>A byte array that contains the plain-text data.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="encryptedData" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="encryptedData" />
    ///  contained an invalid purpose.</exception>
    function Unprotect(encryptedData: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataProtector = class(TDNGenericImport<DNDataProtectorClass, DNDataProtector>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDpapiDataProtectorClass = interface(DNDataProtectorClass)
  ['{6E018184-F4FC-55EF-A0AD-DA1E3FC6DAEC}']
  { constructors } 

    ///<summary>Creates a new instance of the <see cref="T:System.Security.Cryptography.DpapiDataProtector" />
    ///  class by using the specified application name, primary purpose, and specific purposes.</summary>
    ///  <param name="appName">The name of the application.</param>
    ///  <param name="primaryPurpose">The primary purpose for the data protector.</param>
    ///  <param name="specificPurpose">The specific purpose(s) for the data protector.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="appName" />
    ///  is an empty string or <see langword="null" />
    ///  .-or-
    ///  <paramref name="primaryPurpose" />
    ///  is an empty string or <see langword="null" />
    ///  .-or-
    ///  <paramref name="specificPurposes" />
    ///  contains an empty string or <see langword="null" />
    ///  .</exception>
    {class} function init(appName: string; primaryPurpose: string; specificPurpose: TArray<string>): DNDpapiDataProtector;

  end;

  ///<summary>Provides simple data protection methods.</summary>
  [DNTypeName('System.Security.Cryptography.DpapiDataProtector')]
  DNDpapiDataProtector = interface(DNDataProtector)
  ['{BD338ADB-1FD8-3A15-B197-07944BA04681}']
  { getters & setters } 

    function get_Scope: DNDataProtectionScope;
    procedure set_Scope(value: DNDataProtectionScope);

  { methods } 

    ///<summary>Determines if the data must be re-encrypted.</summary>
    ///  <param name="encryptedData">The encrypted data to be checked.</param>
    ///<returns><see langword="true" />
    ///  if the data must be re-encrypted; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReprotectRequired(encryptedData: TArray<Byte>): Boolean;
    ///<summary>Protects the specified user data.</summary>
    ///  <param name="userData">The data to be protected.</param>
    ///<returns>A byte array that contains the encrypted data.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="userData" />
    ///  is <see langword="null" />
    ///  .</exception>
    function Protect(userData: TArray<Byte>): TArray<Byte>;
    ///<summary>Unprotects the specified protected data.</summary>
    ///  <param name="encryptedData">The encrypted data to be unprotected.</param>
    ///<returns>A byte array that contains the plain-text data.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="encryptedData" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="encryptedData" />
    ///  contained an invalid purpose.</exception>
    function Unprotect(encryptedData: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the scope of the data protection.</summary>
    ///<returns>One of the enumeration values that specifies the scope of the data protection (either the current user or the local machine). The default is <see cref="F:System.Security.Cryptography.DataProtectionScope.CurrentUser" />
    ///  .</returns>
    property Scope: DNDataProtectionScope read get_Scope write set_Scope;
  end;

  TDNDpapiDataProtector = class(TDNGenericImport<DNDpapiDataProtectorClass, DNDpapiDataProtector>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNAlgorithmIdentifierClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08E51796-3F9A-5A5F-AC5F-5B441A7B4510}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />
    ///  class by using a set of default parameters. </summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    {class} function init: DNAlgorithmIdentifier; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />
    ///  class with the specified algorithm identifier.</summary>
    ///  <param name="oid">An object identifier for the algorithm.</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    {class} function init(oid: DDN.System.DNOid): DNAlgorithmIdentifier; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid,System.Int32)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />
    ///  class with the specified algorithm identifier and key length.</summary>
    ///  <param name="oid">An object identifier for the algorithm.</param>
    ///  <param name="keyLength">The length, in bits, of the key.</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    {class} function init(oid: DDN.System.DNOid; keyLength: Int32): DNAlgorithmIdentifier; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />
  ///  class defines the algorithm used for a cryptographic operation.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.AlgorithmIdentifier')]
  DNAlgorithmIdentifier = interface(DDN.mscorlib.DNObject)
  ['{016350BD-4169-3D6C-A04E-69FB925ED24E}']
  { getters & setters } 

    function get_Oid: DDN.System.DNOid;
    procedure set_Oid(value: DDN.System.DNOid);
    function get_KeyLength: Int32;
    procedure set_KeyLength(value: Int32);
    function get_Parameters: TArray<Byte>;
    procedure set_Parameters(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid" />
    ///  property sets or retrieves the <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that specifies the object identifier for the algorithm.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that represents the algorithm.</returns>
    property Oid: DDN.System.DNOid read get_Oid write set_Oid;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.KeyLength" />
    ///  property sets or retrieves the key length, in bits. This property is not used for algorithms that use a fixed key length.</summary>
    ///<returns>An int value that represents the key length, in bits.</returns>
    property KeyLength: Int32 read get_KeyLength write set_KeyLength;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Parameters" />
    ///  property sets or retrieves any parameters required by the algorithm.</summary>
    ///<returns>An array of byte values that specifies any parameters required by the algorithm.</returns>
    property Parameters: TArray<Byte> read get_Parameters write set_Parameters;
  end;

  TDNAlgorithmIdentifier = class(TDNGenericImport<DNAlgorithmIdentifierClass, DNAlgorithmIdentifier>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNCmsRecipientClass = interface(DDN.mscorlib.DNObjectClass)
  ['{928A6CD5-B65B-5B0A-90D8-7EE66B3884DB}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipient.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
    ///  constructor constructs an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  class by using the specified recipient certificate.</summary>
    ///  <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  object that represents the recipient certificate.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    {class} function init(certificate: DDN.System.DNX509Certificate2): DNCmsRecipient; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipient.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
    ///  constructor constructs an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  class by using the specified recipient identifier type and recipient certificate.</summary>
    ///  <param name="recipientIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  enumeration that specifies the type of the identifier of the recipient.</param>
    ///  <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  object that represents the recipient certificate.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    {class} function init(recipientIdentifierType: DNSubjectIdentifierType; certificate: DDN.System.DNX509Certificate2): DNCmsRecipient; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
  ///  class defines the recipient of a CMS/PKCS #7 message.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.CmsRecipient')]
  DNCmsRecipient = interface(DDN.mscorlib.DNObject)
  ['{E01D5A8E-8F22-3906-BEB7-B00506257CD5}']
  { getters & setters } 

    function get_RecipientIdentifierType: DNSubjectIdentifierType;
    function get_Certificate: DDN.System.DNX509Certificate2;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipient.RecipientIdentifierType" />
    ///  property retrieves the type of the identifier of the recipient.</summary>
    ///<returns>A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  enumeration that specifies the type of the identifier of the recipient.</returns>
    property RecipientIdentifierType: DNSubjectIdentifierType read get_RecipientIdentifierType;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipient.Certificate" />
    ///  property retrieves the certificate associated with the recipient.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  object that holds the certificate associated with the recipient.</returns>
    property Certificate: DDN.System.DNX509Certificate2 read get_Certificate;
  end;

  TDNCmsRecipient = class(TDNGenericImport<DNCmsRecipientClass, DNCmsRecipient>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNCmsRecipientCollectionClass = interface(DNObjectClass)
  ['{86C8DE48-D692-5031-A650-A1C9350E3CA1}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.#ctor" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  class.</summary>
    {class} function init: DNCmsRecipientCollection; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.#ctor(System.Security.Cryptography.Pkcs.CmsRecipient)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  class and adds the specified recipient.</summary>
    ///  <param name="recipient">An instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  class that represents the specified CMS/PKCS #7 recipient.</param>
    {class} function init(recipient: DNCmsRecipient): DNCmsRecipientCollection; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  class and adds recipients based on the specified subject identifier and set of certificates that identify the recipients.</summary>
    ///  <param name="recipientIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  enumeration that specifies the type of subject identifier.</param>
    ///  <param name="certificates">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  collection that contains the certificates that identify the recipients.</param>
    {class} function init(recipientIdentifierType: DNSubjectIdentifierType; certificates: DDN.System.DNX509Certificate2Collection): DNCmsRecipientCollection; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
  ///  class represents a set of <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
  ///  objects. <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
  ///  implements the <see cref="T:System.Collections.ICollection" />
  ///  interface. </summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.CmsRecipientCollection')]
  DNCmsRecipientCollection = interface(DDN.mscorlib.DNICollection)
  ['{BADE85E0-B862-337A-B8B5-16A9CAB6EAF4}']
  { getters & setters } 

    function get_Item(index: Int32): DNCmsRecipient;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Add(System.Security.Cryptography.Pkcs.CmsRecipient)" />
    ///  method adds a recipient to the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</summary>
    ///  <param name="recipient">A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  object that represents the recipient to add to the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</param>
    ///<returns>If the method succeeds, the method returns an <see cref="T:System.Int32" />
    ///  value that represents the zero-based position where the recipient is to be inserted.If the method fails, it throws an exception.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="recipient" />
    ///  is <see langword="null" />
    ///  .</exception>
    function Add(recipient: DNCmsRecipient): Int32;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Remove(System.Security.Cryptography.Pkcs.CmsRecipient)" />
    ///  method removes a recipient from the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</summary>
    ///  <param name="recipient">A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  object that represents the recipient to remove from the collection.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="recipient" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Remove(recipient: DNCmsRecipient);
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.GetEnumerator" />
    ///  method returns a <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator" />
    ///  object for the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator" />
    ///  object that can be used to enumerate the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</returns>
    function GetEnumerator: DNCmsRecipientEnumerator;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.CopyTo(System.Array,System.Int32)" />
    ///  method copies the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection to an array.</summary>
    ///  <param name="array">An <see cref="T:System.Array" />
    ///  object to which the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection is to be copied.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  where the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection is copied.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  is not large enough to hold the specified elements.-or-
    ///  <paramref name="array" />
    ///  does not contain the proper number of dimensions.</exception><exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  is outside the range of elements in <paramref name="array" />
    ///  .</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.CopyTo(System.Security.Cryptography.Pkcs.CmsRecipient[],System.Int32)" />
    ///  method copies the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection to a <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  array.</summary>
    ///  <param name="array">An array of <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  objects where the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection is to be copied.</param>
    ///  <param name="index">The zero-based index for the array of <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  objects in <paramref name="array" />
    ///  to which the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection is copied.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  is not large enough to hold the specified elements.-or-
    ///  <paramref name="array" />
    ///  does not contain the proper number of dimensions.</exception><exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  is outside the range of elements in <paramref name="array" />
    ///  .</exception>
    procedure CopyTo(&array: TArray<DNCmsRecipient>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCmsRecipient read get_Item; default;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Count" />
    ///  property retrieves the number of items in the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  value that represents the number of items in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.IsSynchronized" />
    ///  property retrieves whether access to the collection is synchronized, or thread safe. This property always returns <see langword="false" />
    ///  , which means that the collection is not thread safe.</summary>
    ///<returns>A <see cref="T:System.Boolean" />
    ///  value of <see langword="false" />
    ///  , which means that the collection is not thread safe.</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.SyncRoot" />
    ///  property retrieves an <see cref="T:System.Object" />
    ///  object used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  object that is used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCmsRecipientCollection = class(TDNGenericImport<DNCmsRecipientCollectionClass, DNCmsRecipientCollection>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNCmsRecipientEnumeratorClass = interface(DNObjectClass)
  ['{EB3FCD61-34AC-5BDA-BD11-7340B8693EAF}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator" />
  ///  class provides enumeration functionality for the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
  ///  collection. <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator" />
  ///  implements the <see cref="T:System.Collections.IEnumerator" />
  ///  interface. </summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.CmsRecipientEnumerator')]
  DNCmsRecipientEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{95F00E89-B43C-3A8E-8C8F-FF723400A54F}']
  { getters & setters } 

    function get_Current: DNCmsRecipient;

  { methods } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.MoveNext" />
    ///  method advances the enumeration to the next <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  object in the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</summary>
    ///<returns><see langword="true" />
    ///  if the enumeration successfully moved to the next <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  object; <see langword="false" />
    ///  if the enumeration moved past the last item in the enumeration.</returns>
    function MoveNext: Boolean;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.Reset" />
    ///  method resets the enumeration to the first <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  object in the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</summary>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.Current" />
    ///  property retrieves the current <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  object from the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  object that represents the current recipient in the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection.</returns>
    property Current: DNCmsRecipient read get_Current;
  end;

  TDNCmsRecipientEnumerator = class(TDNGenericImport<DNCmsRecipientEnumeratorClass, DNCmsRecipientEnumerator>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNCmsSignerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{34AEDDF9-D571-5669-9FE9-109D251A3B7E}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  class by using a default subject identifier type.</summary>
    {class} function init: DNCmsSigner; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  class with the specified subject identifier type.</summary>
    ///  <param name="signerIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  enumeration that specifies the signer identifier type.</param>
    {class} function init(signerIdentifierType: DNSubjectIdentifierType): DNCmsSigner; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  class with the specified signing certificate.</summary>
    ///  <param name="certificate">An    <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  object that represents the signing certificate.</param>
    {class} function init(certificate: DDN.System.DNX509Certificate2): DNCmsSigner; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.CspParameters)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  class with the specified cryptographic service provider (CSP) parameters. <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.CspParameters)" />
    ///  is useful when you know the specific CSP and private key to use for signing.</summary>
    ///  <param name="parameters">A <see cref="T:System.Security.Cryptography.CspParameters" />
    ///  object that represents the set of CSP parameters to use.</param>
    {class} function init(parameters: DDN.mscorlib.DNCspParameters): DNCmsSigner; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  class with the specified signer identifier type and signing certificate.</summary>
    ///  <param name="signerIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  enumeration that specifies the signer identifier type.</param>
    ///  <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  object that represents the signing certificate.</param>
    {class} function init(signerIdentifierType: DNSubjectIdentifierType; certificate: DDN.System.DNX509Certificate2): DNCmsSigner; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
  ///  class provides signing functionality.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.CmsSigner')]
  DNCmsSigner = interface(DDN.mscorlib.DNObject)
  ['{F9F6FB69-AFB1-338E-BA7B-A2296F6A4362}']
  { getters & setters } 

    function get_SignerIdentifierType: DNSubjectIdentifierType;
    procedure set_SignerIdentifierType(value: DNSubjectIdentifierType);
    function get_Certificate: DDN.System.DNX509Certificate2;
    procedure set_Certificate(value: DDN.System.DNX509Certificate2);
    function get_DigestAlgorithm: DDN.System.DNOid;
    procedure set_DigestAlgorithm(value: DDN.System.DNOid);
    function get_SignedAttributes: DNCryptographicAttributeObjectCollection;
    function get_UnsignedAttributes: DNCryptographicAttributeObjectCollection;
    function get_Certificates: DDN.System.DNX509Certificate2Collection;
    function get_IncludeOption: DDN.System.DNX509IncludeOption;
    procedure set_IncludeOption(value: DDN.System.DNX509IncludeOption);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.SignerIdentifierType" />
    ///  property sets or retrieves the type of the identifier of the signer.</summary>
    ///<returns>A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  enumeration that specifies the type of the identifier of the signer.</returns>
    ///<exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception>
    property SignerIdentifierType: DNSubjectIdentifierType read get_SignerIdentifierType write set_SignerIdentifierType;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.Certificate" />
    ///  property sets or retrieves the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  object that represents the signing certificate.</summary>
    ///<returns>An  <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  object that represents the signing certificate.</returns>
    property Certificate: DDN.System.DNX509Certificate2 read get_Certificate write set_Certificate;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.DigestAlgorithm" />
    ///  property sets or retrieves the <see cref="T:System.Security.Cryptography.Oid" />
    ///  that represents the hash algorithm used with the signature.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that represents the hash algorithm used with the signature.</returns>
    property DigestAlgorithm: DDN.System.DNOid read get_DigestAlgorithm write set_DigestAlgorithm;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.SignedAttributes" />
    ///  property retrieves the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection of signed attributes to be associated with the resulting <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  content. Signed attributes are signed along with the specified content.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection that represents the signed attributes. If there are no signed attributes, the property is an empty collection.</returns>
    property SignedAttributes: DNCryptographicAttributeObjectCollection read get_SignedAttributes;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.UnsignedAttributes" />
    ///  property retrieves the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection of unsigned PKCS #9 attributes to be associated with the resulting <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  content. Unsigned attributes can be modified without invalidating the signature.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection that represents the unsigned attributes. If there are no unsigned attributes, the property is an empty collection.</returns>
    property UnsignedAttributes: DNCryptographicAttributeObjectCollection read get_UnsignedAttributes;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.Certificates" />
    ///  property retrieves the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  collection that contains certificates associated with the message to be signed.  </summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  collection that represents the collection of  certificates associated with the message to be signed.</returns>
    property Certificates: DDN.System.DNX509Certificate2Collection read get_Certificates;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.IncludeOption" />
    ///  property sets or retrieves the option that controls whether the root and entire chain associated with the signing certificate are included with the created CMS/PKCS #7 message.</summary>
    ///<returns>A member of the <see cref="T:System.Security.Cryptography.X509Certificates.X509IncludeOption" />
    ///  enumeration that specifies how much of the X509 certificate chain should be included in the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  object. The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.IncludeOption" />
    ///  property can be one of the following <see cref="T:System.Security.Cryptography.X509Certificates.X509IncludeOption" />
    ///  members.NameValueMeaning
    ///<see cref="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.None" />
    ///  0The certificate chain is not included.
    ///<see cref="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.ExcludeRoot" />
    ///  1The certificate chain, except for the root certificate, is included.
    ///<see cref="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.EndCertOnly" />
    ///  2Only the end certificate is included.
    ///<see cref="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.WholeChain" />
    ///  3The certificate chain, including the root certificate, is included.</returns>
    ///<exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception>
    property IncludeOption: DDN.System.DNX509IncludeOption read get_IncludeOption write set_IncludeOption;
  end;

  TDNCmsSigner = class(TDNGenericImport<DNCmsSignerClass, DNCmsSigner>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNContentInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18FE1DA7-FCBE-5132-911C-2DDDF9F3EA86}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Byte[])" />
    ///  constructor  creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  class by using an array of byte values as the data and a default <paramref name="object identifier" />
    ///  (OID) that represents the content type.</summary>
    ///  <param name="content">An array of byte values that represents the data from which to create the <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference  was passed to a method that does not accept it as a valid argument. </exception>
    {class} function init(content: TArray<Byte>): DNContentInfo; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Security.Cryptography.Oid,System.Byte[])" />
    ///  constructor  creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  class by using the specified content type and an array of byte values as the data.</summary>
    ///  <param name="contentType">An <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that contains an <paramref name="object identifier" />
    ///  (OID) that specifies the content type of the content. This can be data, digestedData, encryptedData, envelopedData, hashedData, signedAndEnvelopedData, or signedData.  For more information, see  Remarks.</param>
    ///  <param name="content">An array of byte values that represents the data from which to create the <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference  was passed to a method that does not accept it as a valid argument. </exception>
    {class} function init(contentType: DDN.System.DNOid; content: TArray<Byte>): DNContentInfo; overload;

  { static methods } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.ContentInfo.GetContentType(System.Byte[])" />
    ///  static method  retrieves the outer content type of the encoded <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  message represented by an array of byte values.</summary>
    ///  <param name="encodedMessage">An array of byte values that represents the encoded <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  message from which to retrieve the outer content type.</param>
    ///<returns>If the method succeeds, the method returns an <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that contains the outer content type of the specified encoded <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  message.If the method fails, it throws an exception.</returns>
    ///<exception cref="T:System.ArgumentNullException">A null reference  was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred during a cryptographic operation.</exception>
    {class} function GetContentType(encodedMessage: TArray<Byte>): DDN.System.DNOid;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
  ///  class represents the CMS/PKCS #7 ContentInfo data structure as defined in the CMS/PKCS #7 standards document. This data structure is the basis for all CMS/PKCS #7 messages.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.ContentInfo')]
  DNContentInfo = interface(DDN.mscorlib.DNObject)
  ['{50A08F43-D731-3583-B830-1F81460F6816}']
  { getters & setters } 

    function get_ContentType: DDN.System.DNOid;
    function get_Content: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.ContentInfo.ContentType" />
    ///  property  retrieves the <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that contains the <paramref name="object identifier" />
    ///  (OID)  of the content type of the inner content of the CMS/PKCS #7 message.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that contains the OID value that represents the content type.</returns>
    property ContentType: DDN.System.DNOid read get_ContentType;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.ContentInfo.Content" />
    ///  property  retrieves the content of the CMS/PKCS #7 message.</summary>
    ///<returns>An array of byte values that represents the content data.</returns>
    property Content: TArray<Byte> read get_Content;
  end;

  TDNContentInfo = class(TDNGenericImport<DNContentInfoClass, DNContentInfo>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNEnvelopedCmsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{98E07E6F-93FE-5533-A1EE-38A886389CDC}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" />
    ///  class.</summary>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    {class} function init: DNEnvelopedCms; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" />
    ///  class by using the specified content information as the inner content type.</summary>
    ///  <param name="contentInfo">An instance of the <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.ContentInfo" />
    ///  class that represents the content and its type.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    {class} function init(contentInfo: DNContentInfo): DNEnvelopedCms; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" />
    ///  class by using the specified subject identifier type and content information. The specified content information is to be used as the inner content type.</summary>
    ///  <param name="recipientIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  enumeration that specifies the means of identifying the recipient.</param>
    ///  <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object that represents the content and its type.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    {class} function init(recipientIdentifierType: DNSubjectIdentifierType; contentInfo: DNContentInfo): DNEnvelopedCms; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Security.Cryptography.Pkcs.AlgorithmIdentifier)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" />
    ///  class by using the specified content information and encryption algorithm. The specified content information is to be used as the inner content type.</summary>
    ///  <param name="contentInfo">A  <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object that represents the content and its type.</param>
    ///  <param name="encryptionAlgorithm">An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />
    ///  object that specifies the encryption algorithm.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    {class} function init(contentInfo: DNContentInfo; encryptionAlgorithm: DNAlgorithmIdentifier): DNEnvelopedCms; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Security.Cryptography.Pkcs.AlgorithmIdentifier)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" />
    ///  class by using the specified subject identifier type, content information, and encryption algorithm. The specified content information is to be used as the inner content type.</summary>
    ///  <param name="recipientIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  enumeration that specifies the means of identifying the recipient.</param>
    ///  <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object that represents the content and its type.</param>
    ///  <param name="encryptionAlgorithm">An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />
    ///  object that specifies the encryption algorithm.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
    {class} function init(recipientIdentifierType: DNSubjectIdentifierType; contentInfo: DNContentInfo; encryptionAlgorithm: DNAlgorithmIdentifier): DNEnvelopedCms; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" />
  ///  class represents a CMS/PKCS #7 structure for enveloped data.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.EnvelopedCms')]
  DNEnvelopedCms = interface(DDN.mscorlib.DNObject)
  ['{422E92AA-9BA8-33F6-BEBE-CC85A080135E}']
  { getters & setters } 

    function get_Version: Int32;
    function get_ContentInfo: DNContentInfo;
    function get_ContentEncryptionAlgorithm: DNAlgorithmIdentifier;
    function get_Certificates: DDN.System.DNX509Certificate2Collection;
    function get_UnprotectedAttributes: DNCryptographicAttributeObjectCollection;
    function get_RecipientInfos: DNRecipientInfoCollection;

  { methods } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encode" />
    ///  method encodes the contents of the enveloped CMS/PKCS #7 message and returns it as an array of byte values. Encryption must be done before encoding.</summary>
    ///<returns>If the method succeeds, the method returns an array of byte values that represent the encoded information.If the method fails, it throws an exception.</returns>
    ///<exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    function Encode: TArray<Byte>;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decode(System.Byte[])" />
    ///  method decodes the specified enveloped CMS/PKCS #7 message and resets all member variables in the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" />
    ///  object.</summary>
    ///  <param name="encodedMessage">An array of byte values that represent the information to be decoded.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
    procedure Decode(encodedMessage: TArray<Byte>);
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt" />
    ///  method encrypts the contents of the CMS/PKCS #7 message.</summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure Encrypt; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt(System.Security.Cryptography.Pkcs.CmsRecipient)" />
    ///  method encrypts the contents of the CMS/PKCS #7 message by using the specified recipient information.</summary>
    ///  <param name="recipient">A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
    ///  object that represents the recipient information.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure Encrypt(recipient: DNCmsRecipient); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt(System.Security.Cryptography.Pkcs.CmsRecipientCollection)" />
    ///  method encrypts the contents of the CMS/PKCS #7 message by using the information for the specified list of recipients. The message is encrypted by using a message encryption key with a symmetric encryption algorithm such as triple DES. The message encryption key is then encrypted with the public key of each recipient.</summary>
    ///  <param name="recipients">A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" />
    ///  collection that represents the information for the list of recipients.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure Encrypt(recipients: DNCmsRecipientCollection); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt" />
    ///  method decrypts the contents of the decoded enveloped CMS/PKCS #7 message. The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt" />
    ///  method searches the current user and computer My stores for the appropriate certificate and private key.</summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    procedure Decrypt; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.Pkcs.RecipientInfo)" />
    ///  method decrypts the contents of the decoded enveloped CMS/PKCS #7 message by using the private key associated with the certificate identified by the specified recipient information.</summary>
    ///  <param name="recipientInfo">A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  object that represents the recipient information that identifies the certificate associated with the private key to use for the decryption.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    procedure Decrypt(recipientInfo: DNRecipientInfo); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
    ///  method decrypts the contents of the decoded enveloped CMS/PKCS #7 message by using the specified certificate collection. The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
    ///  method searches the specified certificate collection and the My certificate store for the proper certificate to use for the decryption.</summary>
    ///  <param name="extraStore">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  collection that represents additional certificates to use for the decryption. The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
    ///  method searches this certificate collection and the My certificate store for the proper certificate to use for the decryption.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    procedure Decrypt(extraStore: DDN.System.DNX509Certificate2Collection); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.Pkcs.RecipientInfo,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
    ///  method decrypts the contents of the decoded enveloped CMS/PKCS #7 message by using the private key associated with the certificate identified by the specified recipient information and by using the specified certificate collection.  The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.Pkcs.RecipientInfo,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
    ///  method searches the specified certificate collection and the My certificate store for the proper certificate to use for the decryption.</summary>
    ///  <param name="recipientInfo">A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  object that represents the recipient information to use for the decryption.</param>
    ///  <param name="extraStore">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  collection that represents additional certificates to use for the decryption. The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.Pkcs.RecipientInfo,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
    ///  method searches this certificate collection and the My certificate store for the proper certificate to use for the decryption.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    procedure Decrypt(recipientInfo: DNRecipientInfo; extraStore: DDN.System.DNX509Certificate2Collection); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.Version" />
    ///  property retrieves the version of the enveloped CMS/PKCS #7 message.  </summary>
    ///<returns>An int value that represents the version of the enveloped CMS/PKCS #7 message.</returns>
    property Version: Int32 read get_Version;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.ContentInfo" />
    ///  property retrieves the inner content information for the enveloped CMS/PKCS #7 message.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object that represents the inner content information from the enveloped CMS/PKCS #7 message.</returns>
    property ContentInfo: DNContentInfo read get_ContentInfo;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.ContentEncryptionAlgorithm" />
    ///  property retrieves the identifier of the algorithm used to encrypt the content.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />
    ///  object that represents the algorithm identifier.</returns>
    property ContentEncryptionAlgorithm: DNAlgorithmIdentifier read get_ContentEncryptionAlgorithm;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.Certificates" />
    ///  property retrieves the set of certificates associated with the enveloped CMS/PKCS #7 message.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  collection that represents the X.509 certificates used with the enveloped CMS/PKCS #7 message. If no certificates exist, the property value is an empty collection.</returns>
    property Certificates: DDN.System.DNX509Certificate2Collection read get_Certificates;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.UnprotectedAttributes" />
    ///  property retrieves the unprotected (unencrypted) attributes associated with the enveloped CMS/PKCS #7 message. Unprotected attributes are not encrypted, and so do not have data confidentiality within an <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection that represents the unprotected attributes. If no unprotected attributes exist, the property value is an empty collection.</returns>
    property UnprotectedAttributes: DNCryptographicAttributeObjectCollection read get_UnprotectedAttributes;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.RecipientInfos" />
    ///  property retrieves the recipient information associated with the enveloped CMS/PKCS #7 message.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection that represents the recipient information. If no recipients exist, the property value is an empty collection.</returns>
    property RecipientInfos: DNRecipientInfoCollection read get_RecipientInfos;
  end;

  TDNEnvelopedCms = class(TDNGenericImport<DNEnvelopedCmsClass, DNEnvelopedCms>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNPublicKeyInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{23D17C0B-F87C-532F-BEC0-6964FD2B2B38}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.PublicKeyInfo" />
  ///  class represents information associated with a public key.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.PublicKeyInfo')]
  DNPublicKeyInfo = interface(DDN.mscorlib.DNObject)
  ['{BE6D1D7F-0C06-32C8-953F-5C5845D2E43A}']
  { getters & setters } 

    function get_Algorithm: DNAlgorithmIdentifier;
    function get_KeyValue: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.PublicKeyInfo.Algorithm" />
    ///  property retrieves the algorithm identifier associated with the public key.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />
    ///  object that represents the algorithm.</returns>
    property Algorithm: DNAlgorithmIdentifier read get_Algorithm;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.PublicKeyInfo.KeyValue" />
    ///  property retrieves the value of the encoded public component of the public key pair.</summary>
    ///<returns>An array of byte values  that represents the encoded public component of the public key pair.</returns>
    property KeyValue: TArray<Byte> read get_KeyValue;
  end;

  TDNPublicKeyInfo = class(TDNGenericImport<DNPublicKeyInfoClass, DNPublicKeyInfo>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNRecipientInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7BADC27-3961-5B77-B360-01513D030AC9}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
  ///  class represents information about a CMS/PKCS #7 message recipient. The <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
  ///  class is an abstract class inherited by the <see cref="T:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo" />
  ///  and <see cref="T:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo" />
  ///  classes.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.RecipientInfo')]
  DNRecipientInfo = interface(DDN.mscorlib.DNObject)
  ['{DD07B4AD-5778-37B4-B7A0-14889EB6B80B}']
  { getters & setters } 

    function get_Type: DNRecipientInfoType;
    function get_Version: Int32;
    function get_RecipientIdentifier: DNSubjectIdentifier;
    function get_KeyEncryptionAlgorithm: DNAlgorithmIdentifier;
    function get_EncryptedKey: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.Type" />
    ///  property retrieves the type of the recipient. The type of the recipient determines which of two major protocols is used to establish a key between the originator and the recipient of a CMS/PKCS #7 message.</summary>
    ///<returns>A value of the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoType" />
    ///  enumeration that defines the type of the recipient.</returns>
    property &Type: DNRecipientInfoType read get_Type;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.Version" />
    ///  abstract property retrieves the version of the recipient information. Derived classes automatically set this property for their objects, and the value indicates whether it is using PKCS #7 or Cryptographic Message Syntax (CMS) to protect messages. The version also implies whether the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  object establishes a cryptographic key by a key agreement algorithm or a key transport algorithm.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  value that represents the version of the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  object.</returns>
    property Version: Int32 read get_Version;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.RecipientIdentifier" />
    ///  abstract property retrieves the identifier of the recipient.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifier" />
    ///  object that contains the identifier of the recipient.</returns>
    property RecipientIdentifier: DNSubjectIdentifier read get_RecipientIdentifier;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.KeyEncryptionAlgorithm" />
    ///  abstract property retrieves the algorithm used to perform the key establishment.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />
    ///  object that contains the value of the algorithm used to establish the key between the originator and recipient of the CMS/PKCS #7 message.</returns>
    property KeyEncryptionAlgorithm: DNAlgorithmIdentifier read get_KeyEncryptionAlgorithm;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.EncryptedKey" />
    ///  abstract property retrieves the encrypted recipient keying material.</summary>
    ///<returns>An array of byte values that contain the encrypted recipient keying material.</returns>
    property EncryptedKey: TArray<Byte> read get_EncryptedKey;
  end;

  TDNRecipientInfo = class(TDNGenericImport<DNRecipientInfoClass, DNRecipientInfo>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNKeyAgreeRecipientInfoClass = interface(DNRecipientInfoClass)
  ['{C9D86C92-DA27-524B-867C-A01BBDD7B583}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo" />
  ///  class defines key agreement recipient information. Key agreement algorithms typically use the Diffie-Hellman key agreement algorithm, in which the two parties that establish a shared cryptographic key both take part in its generation and, by definition, agree on that key. This is in contrast to key transport algorithms, in which one party generates the key unilaterally and sends, or transports it, to the other party.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo')]
  DNKeyAgreeRecipientInfo = interface(DNRecipientInfo)
  ['{A4423C3A-AD76-3930-8130-3D99DC2A070D}']
  { getters & setters } 

    function get_Version: Int32;
    function get_OriginatorIdentifierOrKey: DNSubjectIdentifierOrKey;
    function get_RecipientIdentifier: DNSubjectIdentifier;
    function get_Date: DDN.mscorlib.DNDateTime;
    function get_OtherKeyAttribute: DNCryptographicAttributeObject;
    function get_KeyEncryptionAlgorithm: DNAlgorithmIdentifier;
    function get_EncryptedKey: TArray<Byte>;
    function get_Type: DNRecipientInfoType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.Version" />
    ///  property retrieves the version of the key agreement recipient. This is automatically set for  objects in this class, and the value  implies that the recipient is taking part in a key agreement algorithm.</summary>
    ///<returns>The version of the <see cref="T:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo" />
    ///  object.</returns>
    property Version: Int32 read get_Version;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.OriginatorIdentifierOrKey" />
    ///  property retrieves information about the originator of the key agreement for key agreement algorithms that warrant it.</summary>
    ///<returns>An object that contains information about the originator of the key agreement.</returns>
    property OriginatorIdentifierOrKey: DNSubjectIdentifierOrKey read get_OriginatorIdentifierOrKey;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.RecipientIdentifier" />
    ///  property retrieves the identifier of the recipient.</summary>
    ///<returns>The identifier of the recipient.</returns>
    property RecipientIdentifier: DNSubjectIdentifier read get_RecipientIdentifier;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.Date" />
    ///  property retrieves the date and time of the start of the key agreement protocol by the originator.</summary>
    ///<returns>The date and time of the start of the key agreement protocol by the originator.</returns>
    ///<exception cref="T:System.InvalidOperationException">The recipient identifier type is not a subject key identifier.</exception>
    property Date: DDN.mscorlib.DNDateTime read get_Date;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.OtherKeyAttribute" />
    ///  property retrieves attributes of the keying material.</summary>
    ///<returns>The attributes of the keying material.</returns>
    ///<exception cref="T:System.InvalidOperationException">The recipient identifier type is not a subject key identifier.</exception>
    property OtherKeyAttribute: DNCryptographicAttributeObject read get_OtherKeyAttribute;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.KeyEncryptionAlgorithm" />
    ///  property retrieves the algorithm used to perform the key agreement.</summary>
    ///<returns>The value of the algorithm used to perform the key agreement.</returns>
    property KeyEncryptionAlgorithm: DNAlgorithmIdentifier read get_KeyEncryptionAlgorithm;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.EncryptedKey" />
    ///  property retrieves the encrypted recipient keying material.</summary>
    ///<returns>An array of byte values that contain the encrypted recipient keying material.</returns>
    property EncryptedKey: TArray<Byte> read get_EncryptedKey;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.Type" />
    ///  property retrieves the type of the recipient. The type of the recipient determines which of two major protocols is used to establish a key between the originator and the recipient of a CMS/PKCS #7 message.</summary>
    ///<returns>A value of the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoType" />
    ///  enumeration that defines the type of the recipient.</returns>
    property &Type: DNRecipientInfoType read get_Type;
  end;

  TDNKeyAgreeRecipientInfo = class(TDNGenericImport<DNKeyAgreeRecipientInfoClass, DNKeyAgreeRecipientInfo>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNKeyTransRecipientInfoClass = interface(DNRecipientInfoClass)
  ['{E2821120-106A-57F0-AE0F-97328BE6E5CF}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo" />
  ///  class defines key transport recipient information.        Key transport algorithms typically use the RSA algorithm, in which  an originator establishes a shared cryptographic key with a recipient by generating that key and  then transporting it to the recipient. This is in contrast to key agreement algorithms, in which the two parties that will be using a cryptographic key both take part in its generation, thereby mutually agreeing to that key.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.KeyTransRecipientInfo')]
  DNKeyTransRecipientInfo = interface(DNRecipientInfo)
  ['{9E73218E-3C28-3E4E-9DF6-112A400D4468}']
  { getters & setters } 

    function get_Version: Int32;
    function get_RecipientIdentifier: DNSubjectIdentifier;
    function get_KeyEncryptionAlgorithm: DNAlgorithmIdentifier;
    function get_EncryptedKey: TArray<Byte>;
    function get_Type: DNRecipientInfoType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version" />
    ///  property retrieves the version of the key transport recipient. The version of the key transport recipient is automatically set for  objects in this class, and the value  implies that the recipient is taking part in a key transport algorithm.</summary>
    ///<returns>An int value that represents the version of the key transport <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  object.</returns>
    property Version: Int32 read get_Version;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier" />
    ///  property retrieves the subject identifier associated with the encrypted content.</summary>
    ///<returns>A   <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifier" />
    ///  object that  stores the identifier of the recipient taking part in the key transport.</returns>
    property RecipientIdentifier: DNSubjectIdentifier read get_RecipientIdentifier;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm" />
    ///  property retrieves the key encryption algorithm used to encrypt the content encryption key.</summary>
    ///<returns> An  <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />
    ///  object that stores the key encryption algorithm identifier.</returns>
    property KeyEncryptionAlgorithm: DNAlgorithmIdentifier read get_KeyEncryptionAlgorithm;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey" />
    ///  property retrieves the encrypted key for this key transport recipient.</summary>
    ///<returns>An array of byte values that represents the encrypted key.</returns>
    property EncryptedKey: TArray<Byte> read get_EncryptedKey;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.Type" />
    ///  property retrieves the type of the recipient. The type of the recipient determines which of two major protocols is used to establish a key between the originator and the recipient of a CMS/PKCS #7 message.</summary>
    ///<returns>A value of the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoType" />
    ///  enumeration that defines the type of the recipient.</returns>
    property &Type: DNRecipientInfoType read get_Type;
  end;

  TDNKeyTransRecipientInfo = class(TDNGenericImport<DNKeyTransRecipientInfoClass, DNKeyTransRecipientInfo>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNRecipientInfoCollectionClass = interface(DNObjectClass)
  ['{34984546-EEBF-5194-AEFF-94667C43B0AE}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
  ///  class represents a collection of <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
  ///  objects. <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
  ///  implements the <see cref="T:System.Collections.ICollection" />
  ///  interface. </summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.RecipientInfoCollection')]
  DNRecipientInfoCollection = interface(DDN.mscorlib.DNICollection)
  ['{710BB5DF-E041-3566-B9FA-40548D84D868}']
  { getters & setters } 

    function get_Item(index: Int32): DNRecipientInfo;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.GetEnumerator" />
    ///  method returns a <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator" />
    ///  object for the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator" />
    ///  object that can be used to enumerate the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection.</returns>
    function GetEnumerator: DNRecipientInfoEnumerator;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.CopyTo(System.Array,System.Int32)" />
    ///  method copies the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection to an array.</summary>
    ///  <param name="array">An <see cref="T:System.Array" />
    ///  object to which  the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection is to be copied.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  where the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection is copied.</param>
    ///<exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception><exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.CopyTo(System.Security.Cryptography.Pkcs.RecipientInfo[],System.Int32)" />
    ///  method copies the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection to a <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  array.</summary>
    ///  <param name="array">An array of <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  objects where the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection is to be copied.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  where the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection is copied.</param>
    ///<exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception><exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    procedure CopyTo(&array: TArray<DNRecipientInfo>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRecipientInfo read get_Item; default;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.Count" />
    ///  property retrieves the number of items in the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection.</summary>
    ///<returns>An int value that represents the number of items in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.IsSynchronized" />
    ///  property retrieves whether access to the collection is synchronized, or thread safe. This property always returns <see langword="false" />
    ///  , which means the collection is not thread safe.</summary>
    ///<returns>A <see cref="T:System.Boolean" />
    ///  value of <see langword="false" />
    ///  , which means the collection is not thread safe.</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.SyncRoot" />
    ///  property retrieves an <see cref="T:System.Object" />
    ///  object used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  object used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNRecipientInfoCollection = class(TDNGenericImport<DNRecipientInfoCollectionClass, DNRecipientInfoCollection>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNRecipientInfoEnumeratorClass = interface(DNObjectClass)
  ['{40E43F12-CA6B-59E9-9F58-9E2D5405AABE}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator" />
  ///  class provides enumeration functionality for the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
  ///  collection. <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator" />
  ///  implements the <see cref="T:System.Collections.IEnumerator" />
  ///  interface. </summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.RecipientInfoEnumerator')]
  DNRecipientInfoEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{193CCA77-EED0-31AF-98D2-40C914E017D9}']
  { getters & setters } 

    function get_Current: DNRecipientInfo;

  { methods } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.MoveNext" />
    ///  method advances the enumeration to the next <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  object in the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection.</summary>
    ///<returns>This method returns a bool that specifies whether the enumeration successfully advanced. If the enumeration successfully moved to the next <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  object, the method returns <see langword="true" />
    ///  . If the enumeration moved past the last item in the enumeration, it returns <see langword="false" />
    ///  .</returns>
    function MoveNext: Boolean;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.Reset" />
    ///  method resets the enumeration to the first <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  object in the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection.</summary>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.Current" />
    ///  property retrieves the current <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  object from the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" />
    ///  object that represents the current recipient information structure in the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" />
    ///  collection.</returns>
    property Current: DNRecipientInfo read get_Current;
  end;

  TDNRecipientInfoEnumerator = class(TDNGenericImport<DNRecipientInfoEnumeratorClass, DNRecipientInfoEnumerator>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNSignedCmsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B85B3D29-2DEC-599B-95EA-2BD5002B345D}']
  { constructors } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  class.</summary>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    {class} function init: DNSignedCms; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  class by using the specified subject identifier type as the default subject identifier type for signers.</summary>
    ///  <param name="signerIdentifierType">A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  member that specifies the default subject identifier type for signers.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    {class} function init(signerIdentifierType: DNSubjectIdentifierType): DNSignedCms; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  class by using the specified content information as the inner content.</summary>
    ///  <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object that specifies the content information as the inner content of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  message.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    {class} function init(contentInfo: DNContentInfo): DNSignedCms; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  class by using the specified subject identifier type as the default subject identifier type for signers and content information as the inner content.</summary>
    ///  <param name="signerIdentifierType">A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  member that specifies the default subject identifier type for signers.</param>
    ///  <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object that specifies the content information as the inner content of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  message.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    {class} function init(signerIdentifierType: DNSubjectIdentifierType; contentInfo: DNContentInfo): DNSignedCms; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  class by using the specified content information as the inner content and by using the detached state.</summary>
    ///  <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object that specifies the content information as the inner content of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  message.</param>
    ///  <param name="detached">A <see cref="T:System.Boolean" />
    ///  value that specifies whether the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  object is for a detached signature. If <paramref name="detached" />
    ///  is <see langword="true" />
    ///  , the signature is detached. If <paramref name="detached" />
    ///  is <see langword="false" />
    ///  , the signature is not detached.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    {class} function init(contentInfo: DNContentInfo; detached: Boolean): DNSignedCms; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)" />
    ///  constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  class by using the specified subject identifier type as the default subject identifier type for signers, the content information as the inner content, and by using the detached state.</summary>
    ///  <param name="signerIdentifierType">A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  member that specifies the default subject identifier type for signers.</param>
    ///  <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object that specifies the content information as the inner content of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  message.</param>
    ///  <param name="detached">A <see cref="T:System.Boolean" />
    ///  value that specifies whether the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  object is for a detached signature. If <paramref name="detached" />
    ///  is <see langword="true" />
    ///  , the signature is detached. If detached is <see langword="false" />
    ///  , the signature is not detached.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
    {class} function init(signerIdentifierType: DNSubjectIdentifierType; contentInfo: DNContentInfo; detached: Boolean): DNSignedCms; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
  ///  class enables signing and verifying of CMS/PKCS #7 messages. </summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.SignedCms')]
  DNSignedCms = interface(DDN.mscorlib.DNObject)
  ['{3B79B3A9-BF36-3477-BE28-A333B438757F}']
  { getters & setters } 

    function get_Version: Int32;
    function get_ContentInfo: DNContentInfo;
    function get_Detached: Boolean;
    function get_Certificates: DDN.System.DNX509Certificate2Collection;
    function get_SignerInfos: DNSignerInfoCollection;

  { methods } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.Encode" />
    ///  method encodes the information in the object into a CMS/PKCS #7 message.</summary>
    ///<returns>An array of byte values that represents the encoded message. The encoded message can be decoded by the <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])" />
    ///  method.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    function Encode: TArray<Byte>;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])" />
    ///  method decodes an encoded <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  message. Upon successful decoding, the decoded information can be retrieved from the properties of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  object.</summary>
    ///  <param name="encodedMessage">Array of byte values that represents the encoded CMS/PKCS #7 message to be decoded.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure Decode(encodedMessage: TArray<Byte>);
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature" />
    ///  method prompts the user to select a signing certificate, creates a signature, and adds the signature to the CMS/PKCS #7 message.</summary>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure ComputeSignature; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner)" />
    ///  method creates a signature using the specified signer and adds the signature to the CMS/PKCS #7 message.</summary>
    ///  <param name="signer">A <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  object that represents the signer.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure ComputeSignature(signer: DNCmsSigner); overload;
    ///<summary>Creates a signature using the specified signer and adds the signature to the CMS/PKCS #7 message. If the value of the silent parameter is <see langword="false" />
    ///  and the <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.Certificate" />
    ///  property of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  object specified by the signer parameter is not set to a valid certificate, this method prompts the user to select a signing certificate.</summary>
    ///  <param name="signer">A <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  object that represents the signer.</param>
    ///  <param name="silent"><see langword="false" />
    ///  to prompt the user to select a signing certificate.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException">The value of the <paramref name="silent" />
    ///  parameter is <see langword="true" />
    ///  and a signing certificate is not specified.</exception>
    procedure ComputeSignature(signer: DNCmsSigner; silent: Boolean); overload;
    ///<summary>Removes the signature at the specified index of the <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos" />
    ///  collection. </summary>
    ///  <param name="index">The zero-based index of the signature to remove.</param>
    ///<exception cref="T:System.InvalidOperationException">A CMS/PKCS #7 message is not signed, and <paramref name="index" />
    ///  is invalid.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  is less than zero.-or-
    ///  <paramref name="index" />
    ///  is greater than the signature count minus 1.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The signature could not be removed.-or-An internal cryptographic error occurred.</exception>
    procedure RemoveSignature(index: Int32); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Security.Cryptography.Pkcs.SignerInfo)" />
    ///  method removes the signature for the specified <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  object.</summary>
    ///  <param name="signerInfo">A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  object that represents the countersignature being removed.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure RemoveSignature(signerInfo: DNSignerInfo); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)" />
    ///  method verifies the digital signatures on the signed CMS/PKCS #7 message and, optionally, validates the signers' certificates.</summary>
    ///  <param name="verifySignatureOnly">A <see cref="T:System.Boolean" />
    ///  value that specifies whether only the digital signatures are verified without the signers' certificates being validated. If <paramref name="verifySignatureOnly" />
    ///  is <see langword="true" />
    ///  , only the digital signatures are verified. If it is <see langword="false" />
    ///  , the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated. The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or nonrepudiation.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException"> A method call was invalid for the object's current state.</exception>
    procedure CheckSignature(verifySignatureOnly: Boolean); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" />
    ///  method verifies the digital signatures on the signed CMS/PKCS #7 message by using the specified collection of certificates and, optionally, validates the signers' certificates.</summary>
    ///  <param name="extraStore">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  object that can be used to validate the certificate chain. If no additional certificates are to be used to validate the certificate chain, use <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)" />
    ///  instead of <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" />
    ///  .</param>
    ///  <param name="verifySignatureOnly">A <see cref="T:System.Boolean" />
    ///  value that specifies whether only the digital signatures are verified without the signers' certificates being validated. If <paramref name="verifySignatureOnly" />
    ///  is <see langword="true" />
    ///  , only the digital signatures are verified. If it is <see langword="false" />
    ///  , the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated. The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or nonrepudiation.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    procedure CheckSignature(extraStore: DDN.System.DNX509Certificate2Collection; verifySignatureOnly: Boolean); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash" />
    ///  method verifies the data integrity of the CMS/PKCS #7 message. <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash" />
    ///  is a specialized method used in specific security infrastructure applications that only wish to check the hash of the CMS message, rather than perform a full digital signature verification. <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash" />
    ///  does not authenticate the author nor sender of the message because this method does not involve verifying a digital signature. For general-purpose checking of the integrity and authenticity of a CMS/PKCS #7 message, use the <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)" />
    ///  or <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" />
    ///  methods.</summary>
    ///<exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    procedure CheckHash;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.Version" />
    ///  property retrieves the version of the CMS/PKCS #7 message.</summary>
    ///<returns>An int value that represents the CMS/PKCS #7 message version.</returns>
    property Version: Int32 read get_Version;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.ContentInfo" />
    ///  property retrieves the inner contents of the encoded CMS/PKCS #7 message.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" />
    ///  object that represents the contents of the encoded CMS/PKCS #7 message.</returns>
    property ContentInfo: DNContentInfo read get_ContentInfo;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.Detached" />
    ///  property retrieves whether the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  object is for a detached signature.</summary>
    ///<returns>A <see cref="T:System.Boolean" />
    ///  value that specifies whether the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
    ///  object is for a detached signature. If this property is <see langword="true" />
    ///  , the signature is detached. If this property is <see langword="false" />
    ///  , the signature is not detached.</returns>
    property Detached: Boolean read get_Detached;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.Certificates" />
    ///  property retrieves the certificates associated with the encoded CMS/PKCS #7 message.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  collection that represents the set of certificates for the encoded CMS/PKCS #7 message.</returns>
    property Certificates: DDN.System.DNX509Certificate2Collection read get_Certificates;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos" />
    ///  property retrieves the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection associated with the CMS/PKCS #7 message.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  object that represents the signer information for the CMS/PKCS #7 message.</returns>
    property SignerInfos: DNSignerInfoCollection read get_SignerInfos;
  end;

  TDNSignedCms = class(TDNGenericImport<DNSignedCmsClass, DNSignedCms>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNSignerInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9FBD8A1A-8369-50CF-886C-D92254E38BEE}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
  ///  class represents a signer associated with a <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />
  ///  object that represents a CMS/PKCS #7 message.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.SignerInfo')]
  DNSignerInfo = interface(DDN.mscorlib.DNObject)
  ['{85282D35-4C09-3365-B598-C3D3652917AC}']
  { getters & setters } 

    function get_Version: Int32;
    function get_Certificate: DDN.System.DNX509Certificate2;
    function get_SignerIdentifier: DNSubjectIdentifier;
    function get_DigestAlgorithm: DDN.System.DNOid;
    function get_SignedAttributes: DNCryptographicAttributeObjectCollection;
    function get_UnsignedAttributes: DNCryptographicAttributeObjectCollection;
    function get_CounterSignerInfos: DNSignerInfoCollection;
    function get_SignatureAlgorithm: DDN.System.DNOid;

  { methods } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.ComputeCounterSignature" />
    ///  method prompts the user to select a signing certificate, creates a countersignature, and adds the signature to the CMS/PKCS #7 message. Countersignatures are restricted to one level.</summary>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure ComputeCounterSignature; overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.ComputeCounterSignature(System.Security.Cryptography.Pkcs.CmsSigner)" />
    ///  method creates a countersignature by using the specified signer and adds the signature to the CMS/PKCS #7 message. Countersignatures are restricted to one level.</summary>
    ///  <param name="signer">A <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  object that represents the counter signer.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure ComputeCounterSignature(signer: DNCmsSigner); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.RemoveCounterSignature(System.Int32)" />
    ///  method removes the countersignature at the specified index of the <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.CounterSignerInfos" />
    ///  collection.</summary>
    ///  <param name="index">The zero-based index of the countersignature to remove.</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure RemoveCounterSignature(index: Int32); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Boolean)" />
    ///  method verifies the digital signature of the message and, optionally, validates the certificate.</summary>
    ///  <param name="verifySignatureOnly">A bool value that specifies whether only the digital signature is verified. If <paramref name="verifySignatureOnly" />
    ///  is <see langword="true" />
    ///  , only the signature is verified. If <paramref name="verifySignatureOnly" />
    ///  is <see langword="false" />
    ///  , the digital signature is verified, the certificate chain is validated, and the purposes of the certificates are validated. The purposes of the certificate are considered valid if the certificate has no key usage or if the key usage supports digital signature or nonrepudiation.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    procedure CheckSignature(verifySignatureOnly: Boolean); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" />
    ///  method verifies the digital signature of the message by using the specified collection of certificates and, optionally, validates the certificate.</summary>
    ///  <param name="extraStore">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  object that can be used to validate the chain. If no additional certificates are to be used to validate the chain, use <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Boolean)" />
    ///  instead of <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" />
    ///  .</param>
    ///  <param name="verifySignatureOnly">A bool value that specifies whether only the digital signature is verified. If <paramref name="verifySignatureOnly" />
    ///  is <see langword="true" />
    ///  , only the signature is verified. If <paramref name="verifySignatureOnly" />
    ///  is <see langword="false" />
    ///  , the digital signature is verified, the certificate chain is validated, and the purposes of the certificates are validated. The purposes of the certificate are considered valid if the certificate has no key usage or if the key usage supports digital signature or nonrepudiation.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception><exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    procedure CheckSignature(extraStore: DDN.System.DNX509Certificate2Collection; verifySignatureOnly: Boolean); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckHash" />
    ///  method verifies the data integrity of the CMS/PKCS #7 message signer information. <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckHash" />
    ///  is a specialized method used in specific security infrastructure applications in which the subject uses the HashOnly member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  enumeration when setting up a <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
    ///  object. <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckHash" />
    ///  does not authenticate the signer information because this method does not involve verifying a digital signature. For general-purpose checking of the integrity and authenticity of CMS/PKCS #7 message signer information and countersignatures, use the <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Boolean)" />
    ///  or <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" />
    ///  methods.</summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure CheckHash;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.RemoveCounterSignature(System.Security.Cryptography.Pkcs.SignerInfo)" />
    ///  method removes the countersignature for the specified <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  object.</summary>
    ///  <param name="counterSignerInfo">A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  object that represents the countersignature being removed.</param>
    ///<exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    procedure RemoveCounterSignature(counterSignerInfo: DNSignerInfo); overload;
    function GetSignature: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.Version" />
    ///  property retrieves the signer information version.</summary>
    ///<returns>An int value that specifies the signer information version.</returns>
    property Version: Int32 read get_Version;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.Certificate" />
    ///  property retrieves the signing certificate associated with the signer information.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  object that represents the signing certificate.</returns>
    property Certificate: DDN.System.DNX509Certificate2 read get_Certificate;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.SignerIdentifier" />
    ///  property retrieves the certificate identifier of the signer associated with the signer information.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifier" />
    ///  object that uniquely identifies the certificate associated with the signer information.</returns>
    property SignerIdentifier: DNSubjectIdentifier read get_SignerIdentifier;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.DigestAlgorithm" />
    ///  property retrieves the <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that represents the hash algorithm used in the computation of the signatures.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Oid" />
    ///  object that represents the hash algorithm used with the signature.</returns>
    property DigestAlgorithm: DDN.System.DNOid read get_DigestAlgorithm;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.SignedAttributes" />
    ///  property retrieves the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection of signed attributes that is associated with the signer information. Signed attributes are signed along with the rest of the message content.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection that represents the signed attributes. If there are no signed attributes, the property is an empty collection.</returns>
    property SignedAttributes: DNCryptographicAttributeObjectCollection read get_SignedAttributes;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes" />
    ///  property retrieves the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection of unsigned attributes that is associated with the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  content. Unsigned attributes can be modified without invalidating the signature.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />
    ///  collection that represents the unsigned attributes. If there are no unsigned attributes, the property is an empty collection.</returns>
    property UnsignedAttributes: DNCryptographicAttributeObjectCollection read get_UnsignedAttributes;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.CounterSignerInfos" />
    ///  property retrieves the set of counter signers associated with the signer information. </summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection that represents the counter signers for the signer information. If there are no counter signers, the property is an empty collection.</returns>
    property CounterSignerInfos: DNSignerInfoCollection read get_CounterSignerInfos;
    property SignatureAlgorithm: DDN.System.DNOid read get_SignatureAlgorithm;
  end;

  TDNSignerInfo = class(TDNGenericImport<DNSignerInfoClass, DNSignerInfo>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNSignerInfoCollectionClass = interface(DNObjectClass)
  ['{105E9E03-91E2-5249-9C06-97BF86DB11C4}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
  ///  class represents a collection of <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
  ///  objects. <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
  ///  implements the <see cref="T:System.Collections.ICollection" />
  ///  interface. </summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.SignerInfoCollection')]
  DNSignerInfoCollection = interface(DDN.mscorlib.DNICollection)
  ['{508B2DA5-A2BD-3E84-8DFD-C26B1A3B2805}']
  { getters & setters } 

    function get_Item(index: Int32): DNSignerInfo;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.GetEnumerator" />
    ///  method returns a <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator" />
    ///  object for the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator" />
    ///  object that can be used to enumerate the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection.</returns>
    function GetEnumerator: DNSignerInfoEnumerator;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.CopyTo(System.Array,System.Int32)" />
    ///  method copies the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection to an array.</summary>
    ///  <param name="array">An <see cref="T:System.Array" />
    ///  object to which the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection is to be copied.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  where the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection is copied.</param>
    ///<exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception><exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.CopyTo(System.Security.Cryptography.Pkcs.SignerInfo[],System.Int32)" />
    ///  method copies the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection to a <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  array.</summary>
    ///  <param name="array">An array of <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  objects where the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection is to be copied.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  where the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection is copied.</param>
    ///<exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception><exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception><exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    procedure CopyTo(&array: TArray<DNSignerInfo>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSignerInfo read get_Item; default;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.Count" />
    ///  property retrieves the number of items in the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection.</summary>
    ///<returns>An int value that represents the number of items in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.IsSynchronized" />
    ///  property retrieves whether access to the collection is synchronized, or thread safe. This property always returns <see langword="false" />
    ///  , which means the collection is not thread safe.</summary>
    ///<returns>A <see cref="T:System.Boolean" />
    ///  value of <see langword="false" />
    ///  , which means the collection is not thread safe.</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.SyncRoot" />
    ///  property retrieves an <see cref="T:System.Object" />
    ///  object is used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  object is used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSignerInfoCollection = class(TDNGenericImport<DNSignerInfoCollectionClass, DNSignerInfoCollection>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNSignerInfoEnumeratorClass = interface(DNObjectClass)
  ['{9ECAF90C-0ADD-5DB8-88AD-7C7329CF6AB2}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator" />
  ///  class provides enumeration functionality for the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
  ///  collection. <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator" />
  ///  implements the <see cref="T:System.Collections.IEnumerator" />
  ///  interface. </summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.SignerInfoEnumerator')]
  DNSignerInfoEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{963E2083-6AC5-3469-B91C-0557EA20BFFC}']
  { getters & setters } 

    function get_Current: DNSignerInfo;

  { methods } 

    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.MoveNext" />
    ///  method advances the enumeration to the next   <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  object in the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection.</summary>
    ///<returns>This method returns a bool value that specifies whether the enumeration successfully advanced. If the enumeration successfully moved to the next <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  object, the method returns <see langword="true" />
    ///  . If the enumeration moved past the last item in the enumeration, it returns <see langword="false" />
    ///  .</returns>
    function MoveNext: Boolean;
    ///<summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.Reset" />
    ///  method resets the enumeration to the first <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  object in the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection.</summary>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.Current" />
    ///  property retrieves the current <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  object from the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" />
    ///  object that represents the current signer information structure in the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" />
    ///  collection.</returns>
    property Current: DNSignerInfo read get_Current;
  end;

  TDNSignerInfoEnumerator = class(TDNGenericImport<DNSignerInfoEnumeratorClass, DNSignerInfoEnumerator>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNSubjectIdentifierClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AEEBD3EA-F8B1-5137-9960-64A95E9E52AA}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifier" />
  ///  class defines the type of the identifier of a subject, such as a <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
  ///  or a <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
  ///  .  The subject can be identified by the certificate issuer and serial number or the subject key.</summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.SubjectIdentifier')]
  DNSubjectIdentifier = interface(DDN.mscorlib.DNObject)
  ['{1F38155D-2FB4-33BC-8B78-22CA1BF5CAB1}']
  { getters & setters } 

    function get_Type: DNSubjectIdentifierType;
    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Type" />
    ///  property retrieves the type of subject identifier. The subject can be identified by the certificate issuer and serial number or the subject key.</summary>
    ///<returns>A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
    ///  enumeration that identifies the type of subject.</returns>
    property &Type: DNSubjectIdentifierType read get_Type;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Value" />
    ///  property retrieves the value of the subject identifier. Use the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Type" />
    ///  property to determine the type of subject identifier, and use the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Value" />
    ///  property to retrieve the corresponding value.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  object that represents the value of the subject identifier. This <see cref="T:System.Object" />
    ///  can be one of the following objects as determined by the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Type" />
    ///  property.
    ///<see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Type" />
    ///  propertyObjectIssuerAndSerialNumber
    ///<see cref="T:System.Security.Cryptography.Xml.X509IssuerSerial" />
    ///  SubjectKeyIdentifier
    ///<see cref="T:System.String" />
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNSubjectIdentifier = class(TDNGenericImport<DNSubjectIdentifierClass, DNSubjectIdentifier>) end;

  //-------------namespace: System.Security.Cryptography.Pkcs----------------
  DNSubjectIdentifierOrKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C39B449C-ABE5-55CF-86ED-E6C51B44C5AC}']
  end;

  ///<summary>The <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey" />
  ///  class defines the type of the identifier of a subject, such as a <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />
  ///  or a <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />
  ///  .  The subject can be identified by the certificate issuer and serial number, the hash of the subject key, or the subject key. </summary>
  [DNTypeName('System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey')]
  DNSubjectIdentifierOrKey = interface(DDN.mscorlib.DNObject)
  ['{D684C03D-44E3-3738-B7F3-77CDA73C1C8F}']
  { getters & setters } 

    function get_Type: DNSubjectIdentifierOrKeyType;
    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Type" />
    ///  property retrieves the type of subject identifier or key. The subject can be identified by the certificate issuer and serial number, the hash of the subject key, or the subject key.</summary>
    ///<returns>A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType" />
    ///  enumeration that specifies the type of subject identifier.</returns>
    property &Type: DNSubjectIdentifierOrKeyType read get_Type;
    ///<summary>The <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Value" />
    ///  property retrieves the value of the subject identifier or  key. Use the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Type" />
    ///  property to determine the type of subject identifier or key, and use the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Value" />
    ///  property to retrieve the corresponding value.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  object that represents the value of the subject identifier or key. This <see cref="T:System.Object" />
    ///  can be one of the following objects as determined by the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Type" />
    ///  property.
    ///<see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Type" />
    ///  propertyObjectIssuerAndSerialNumber
    ///<see cref="T:System.Security.Cryptography.Xml.X509IssuerSerial" />
    ///  SubjectKeyIdentifier
    ///<see cref="T:System.String" />
    ///  PublicKeyInfo
    ///<see cref="T:System.Security.Cryptography.Pkcs.PublicKeyInfo" />
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNSubjectIdentifierOrKey = class(TDNGenericImport<DNSubjectIdentifierOrKeyClass, DNSubjectIdentifierOrKey>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNProtectedDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{023EB4D0-DEAC-50E7-B95C-8A780C93C31D}']
  { static methods } 

    ///<summary>Encrypts the data in a specified byte array and returns a byte array that contains the encrypted data.</summary>
    ///  <param name="userData">A byte array that contains data to encrypt. </param>
    ///  <param name="optionalEntropy">An optional additional byte array used to increase the complexity of the encryption, or <see langword="null" />
    ///  for no additional complexity.</param>
    ///  <param name="scope">One of the enumeration values that specifies the scope of encryption. </param>
    ///<returns>A byte array representing the encrypted data.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="userData" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The encryption failed.</exception><exception cref="T:System.NotSupportedException">The operating system does not support this method. </exception><exception cref="T:System.OutOfMemoryException">The system ran out of memory while encrypting the data.</exception>
    {class} function Protect(userData: TArray<Byte>; optionalEntropy: TArray<Byte>; scope: DNDataProtectionScope): TArray<Byte>;
    ///<summary>Decrypts the data in a specified byte array and returns a byte array that contains the decrypted data.</summary>
    ///  <param name="encryptedData">A byte array containing data encrypted using the <see cref="M:System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)" />
    ///  method. </param>
    ///  <param name="optionalEntropy">An optional additional byte array that was used to encrypt the data, or <see langword="null" />
    ///  if the additional byte array was not used.</param>
    ///  <param name="scope">One of the enumeration values that specifies the scope of data protection that was used to encrypt the data. </param>
    ///<returns>A byte array representing the decrypted data.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="encryptedData" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The decryption failed.</exception><exception cref="T:System.NotSupportedException">The operating system does not support this method. </exception><exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    {class} function Unprotect(encryptedData: TArray<Byte>; optionalEntropy: TArray<Byte>; scope: DNDataProtectionScope): TArray<Byte>;

  end;

  ///<summary>Provides methods for encrypting and decrypting data. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.ProtectedData')]
  DNProtectedData = interface(DDN.mscorlib.DNObject)
  ['{C91FD287-5DEE-390C-AFD5-7A1B574E50DC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProtectedData = class(TDNGenericImport<DNProtectedDataClass, DNProtectedData>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNProtectedMemoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8BDDD140-F1B4-59D4-9FE1-197B7FABEC05}']
  { static methods } 

    ///<summary>Protects the specified data.</summary>
    ///  <param name="userData">The byte array containing data in memory to protect. The array must be a multiple of 16 bytes. </param>
    ///  <param name="scope">One of the enumeration values that specifies the scope of memory protection. </param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="userData" />
    ///  must be 16 bytes in length or in multiples of 16 bytes. </exception><exception cref="T:System.NotSupportedException">The operating system does not support this method. This method can be used only with the Windows 2000 or later operating systems. </exception><exception cref="T:System.ArgumentNullException"><paramref name="userData " />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} procedure Protect(userData: TArray<Byte>; scope: DNMemoryProtectionScope);
    ///<summary>Unprotects data in memory that was protected using the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" />
    ///  method.</summary>
    ///  <param name="encryptedData">The byte array in memory to unencrypt. </param>
    ///  <param name="scope">One of the enumeration values that specifies the scope of memory protection. </param>
    ///<exception cref="T:System.NotSupportedException">The operating system does not support this method. This method can be used only with the Windows 2000 or later operating systems. </exception><exception cref="T:System.ArgumentNullException"><paramref name="encryptedData " />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="encryptedData " />
    ///  is empty.-or-This call was not implemented.-or-NTSTATUS contains an error.</exception>
    {class} procedure Unprotect(encryptedData: TArray<Byte>; scope: DNMemoryProtectionScope);

  end;

  ///<summary>Provides methods for protecting and unprotecting memory. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.ProtectedMemory')]
  DNProtectedMemory = interface(DDN.mscorlib.DNObject)
  ['{E3572D8B-459A-341E-9DE1-2BD8BE627CDB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProtectedMemory = class(TDNGenericImport<DNProtectedMemoryClass, DNProtectedMemory>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509Certificate2UIClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4E273ECA-7FB5-526F-A4CF-1C744D620157}']
  { static methods } 

    ///<summary>Displays a dialog box that contains the properties of an X.509 certificate and its associated certificate chain.</summary>
    ///  <param name="certificate">The X.509 certificate to display.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="certificate" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="certificate" />
    ///  parameter is invalid. </exception>
    {class} procedure DisplayCertificate(certificate: DDN.System.DNX509Certificate2); overload;
    ///<summary>Displays a dialog box that contains the properties of an X.509 certificate and its associated certificate chain using a handle to a parent window.</summary>
    ///  <param name="certificate">The X.509 certificate to display.</param>
    ///  <param name="hwndParent">A handle to the parent window to use for the display dialog.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="certificate" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="certificate" />
    ///  parameter is invalid. </exception>
    {class} procedure DisplayCertificate(certificate: DDN.System.DNX509Certificate2; hwndParent: IntPtr); overload;
    ///<summary>Displays a dialog box for selecting an X.509 certificate from a certificate collection.</summary>
    ///  <param name="certificates">A collection of X.509 certificates to select from.</param>
    ///  <param name="title">The title of the dialog box.</param>
    ///  <param name="message">A descriptive message to guide the user.  The message is displayed in the dialog box.</param>
    ///  <param name="selectionFlag">One of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SelectionFlag" />
    ///  values that specifies whether single or multiple selections are allowed. </param>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  object that contains the selected certificate or certificates.</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="selectionFlag" />
    ///  parameter is not a valid flag. </exception><exception cref="T:System.ArgumentNullException">The <paramref name="certificates" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="certificates" />
    ///  parameter is invalid. </exception>
    {class} function SelectFromCollection(certificates: DDN.System.DNX509Certificate2Collection; title: string; message: string; selectionFlag: DNX509SelectionFlag): DDN.System.DNX509Certificate2Collection; overload;
    ///<summary>Displays a dialog box for selecting an X.509 certificate from a certificate collection using a handle to a parent window.</summary>
    ///  <param name="certificates">A collection of X.509 certificates to select from.</param>
    ///  <param name="title">The title of the dialog box.</param>
    ///  <param name="message">A descriptive message to guide the user.  The message is displayed in the dialog box.</param>
    ///  <param name="selectionFlag">One of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SelectionFlag" />
    ///  values that specifies whether single or multiple selections are allowed. </param>
    ///  <param name="hwndParent">A handle to the parent window to use for the display dialog box.</param>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
    ///  object that contains the selected certificate or certificates.</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="selectionFlag" />
    ///  parameter is not a valid flag. </exception><exception cref="T:System.ArgumentNullException">The <paramref name="certificates" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="certificates" />
    ///  parameter is invalid. </exception>
    {class} function SelectFromCollection(certificates: DDN.System.DNX509Certificate2Collection; title: string; message: string; selectionFlag: DNX509SelectionFlag; hwndParent: IntPtr): DDN.System.DNX509Certificate2Collection; overload;

  end;

  ///<summary>Displays user interface dialogs that allow you to select and view X.509 certificates. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Certificate2UI')]
  DNX509Certificate2UI = interface(DDN.mscorlib.DNObject)
  ['{6F0D45A8-97F3-35D8-A4C2-66A27C74DCE9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNX509Certificate2UI = class(TDNGenericImport<DNX509Certificate2UIClass, DNX509Certificate2UI>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNCipherDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{12719416-8F29-53A3-BBF1-03D45CB6A036}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  class.</summary>
    {class} function init: DNCipherData; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  class using a byte array as the <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />
    ///  value.</summary>
    ///  <param name="cipherValue">The encrypted data to use for the <see langword="&lt;CipherValue&gt;" />
    ///  element.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="cipherValue" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />
    ///  property has already been set.</exception>
    {class} function init(cipherValue: TArray<Byte>): DNCipherData; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  class using a <see cref="T:System.Security.Cryptography.Xml.CipherReference" />
    ///  object.</summary>
    ///  <param name="cipherReference">The <see cref="T:System.Security.Cryptography.Xml.CipherReference" />
    ///  object to use.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="cipherValue" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />
    ///  property has already been set.</exception>
    {class} function init(cipherReference: DNCipherReference): DNCipherData; overload;

  end;

  ///<summary>Represents the <see langword="&lt;CipherData&gt;" />
  ///  element in XML encryption. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.CipherData')]
  DNCipherData = interface(DDN.mscorlib.DNObject)
  ['{3659D1BE-8038-3677-A0AA-090D2A504A32}']
  { getters & setters } 

    function get_CipherReference: DNCipherReference;
    procedure set_CipherReference(value: DNCipherReference);
    function get_CipherValue: TArray<Byte>;
    procedure set_CipherValue(value: TArray<Byte>);

  { methods } 

    ///<summary>Gets the XML values for the <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the XML information for the <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  object.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />
    ///  property and the <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" />
    ///  property are <see langword="null" />
    ///  .</exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads XML data from an <see cref="T:System.Xml.XmlElement" />
    ///  into a <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  object.</summary>
    ///  <param name="value">An <see cref="T:System.Xml.XmlElement" />
    ///  that represents the XML data to load.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />
    ///  property and the <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" />
    ///  property are <see langword="null" />
    ///  .</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the <see langword="&lt;CipherReference&gt;" />
    ///  element.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.CipherReference" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" />
    ///  property was set to <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" />
    ///  property was set more than once.</exception>
    property CipherReference: DNCipherReference read get_CipherReference write set_CipherReference;
    ///<summary>Gets or sets the <see langword="&lt;CipherValue&gt;" />
    ///  element.</summary>
    ///<returns>A byte array that represents the <see langword="&lt;CipherValue&gt;" />
    ///  element.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />
    ///  property was set to <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />
    ///  property was set more than once.</exception>
    property CipherValue: TArray<Byte> read get_CipherValue write set_CipherValue;
  end;

  TDNCipherData = class(TDNGenericImport<DNCipherDataClass, DNCipherData>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNDataObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B72C8303-3285-5E66-9B64-65BDADBB0D7B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  class.</summary>
    {class} function init: DNDataObject; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  class with the specified identification, MIME type, encoding, and data.</summary>
    ///  <param name="id">The identification to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  with. </param>
    ///  <param name="mimeType">The MIME type of the data used to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  . </param>
    ///  <param name="encoding">The encoding of the data used to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  . </param>
    ///  <param name="data">The data to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  with. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="data" />
    ///  parameter is <see langword="null" />
    ///  . </exception>
    {class} function init(id: string; mimeType: string; encoding: string; data: DDN.System.Xml.DNXmlElement): DNDataObject; overload;

  end;

  ///<summary>Represents the object element of an XML signature that holds data to be signed.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.DataObject')]
  DNDataObject = interface(DDN.mscorlib.DNObject)
  ['{17E65955-BDA6-3F0E-8800-1B654A63FCC6}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Data: DDN.System.Xml.DNXmlNodeList;
    procedure set_Data(value: DDN.System.Xml.DNXmlNodeList);

  { methods } 

    ///<summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  object.</summary>
    ///<returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads a <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  state from an XML element.</summary>
    ///  <param name="value">The XML element to load the <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  state from. </param>
    ///<exception cref="T:System.ArgumentNullException">The value from the XML element is <see langword="null" />
    ///  .</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the identification of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  object.</summary>
    ///<returns>The name of the element that contains data to be used. </returns>
    property Id: string read get_Id write set_Id;
    ///<summary>Gets or sets the MIME type of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  object. </summary>
    ///<returns>The MIME type of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  object. The default is <see langword="null" />
    ///  .</returns>
    property MimeType: string read get_MimeType write set_MimeType;
    ///<summary>Gets or sets the encoding of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  object.</summary>
    ///<returns>The type of encoding of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  object.</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>Gets or sets the data value of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  object.</summary>
    ///<returns>The data of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException">The value used to set the property is <see langword="null" />
    ///  .</exception>
    property Data: DDN.System.Xml.DNXmlNodeList read get_Data write set_Data;
  end;

  TDNDataObject = class(TDNGenericImport<DNDataObjectClass, DNDataObject>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNEncryptedReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5E24E8B3-541B-564C-BA0A-440886A50D0F}']
  end;

  ///<summary>Represents the abstract base class used in XML encryption from which the <see cref="T:System.Security.Cryptography.Xml.CipherReference" />
  ///  , <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
  ///  , and <see cref="T:System.Security.Cryptography.Xml.DataReference" />
  ///  classes derive.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.EncryptedReference')]
  DNEncryptedReference = interface(DDN.mscorlib.DNObject)
  ['{0390C15D-4623-31A1-81E0-8C493785A7A4}']
  { getters & setters } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_TransformChain: DNTransformChain;
    procedure set_TransformChain(value: DNTransformChain);

  { methods } 

    ///<summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object to the current transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///  <param name="transform">A <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object to add to the transform chain.</param>
    procedure AddTransform(transform: DNTransform);
    ///<summary>Returns the XML representation of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the values of the <see langword="&lt;EncryptedReference&gt;" />
    ///  element in XML encryption.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.ReferenceType" />
    ///  property is <see langword="null" />
    ///  .</exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads an XML element into an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///  <param name="value">An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents an XML element.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the Uniform Resource Identifier (URI) of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>The Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.Uri" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property Uri: string read get_Uri write set_Uri;
    ///<summary>Gets or sets the transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object that describes transforms used on the encrypted data.</returns>
    property TransformChain: DNTransformChain read get_TransformChain write set_TransformChain;
  end;

  TDNEncryptedReference = class(TDNGenericImport<DNEncryptedReferenceClass, DNEncryptedReference>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNCipherReferenceClass = interface(DNEncryptedReferenceClass)
  ['{BB79A29C-ED5D-5E48-B96C-53E9F5B76806}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherReference" />
    ///  class.</summary>
    {class} function init: DNCipherReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherReference" />
    ///  class using the specified Uniform Resource Identifier (URI).</summary>
    ///  <param name="uri">A Uniform Resource Identifier (URI) pointing to the encrypted data.</param>
    {class} function init(uri: string): DNCipherReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherReference" />
    ///  class using the specified Uniform Resource Identifier (URI) and transform chain information.</summary>
    ///  <param name="uri">A Uniform Resource Identifier (URI) pointing to the encrypted data.</param>
    ///  <param name="transformChain">A <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object that describes transforms to do on the encrypted data.</param>
    {class} function init(uri: string; transformChain: DNTransformChain): DNCipherReference; overload;

  end;

  ///<summary>Represents the <see langword="&lt;CipherReference&gt;" />
  ///  element in XML encryption. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.CipherReference')]
  DNCipherReference = interface(DNEncryptedReference)
  ['{CD382733-E2F7-300D-A22F-D55B4E50FCAE}']
  { getters & setters } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_TransformChain: DNTransformChain;
    procedure set_TransformChain(value: DNTransformChain);

  { methods } 

    ///<summary>Returns the XML representation of a <see cref="T:System.Security.Cryptography.Xml.CipherReference" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  that represents the <see langword="&lt;CipherReference&gt;" />
    ///  element in XML encryption.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.Xml.CipherReference" />
    ///  value is <see langword="null" />
    ///  .</exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads XML information into the <see langword="&lt;CipherReference&gt;" />
    ///  element in XML encryption.</summary>
    ///  <param name="value">An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents an XML element to use as the reference.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  provided is <see langword="null" />
    ///  .</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    ///<summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object to the current transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///  <param name="transform">A <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object to add to the transform chain.</param>
    procedure AddTransform(transform: DNTransform);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the Uniform Resource Identifier (URI) of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>The Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.Uri" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property Uri: string read get_Uri write set_Uri;
    ///<summary>Gets or sets the transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object that describes transforms used on the encrypted data.</returns>
    property TransformChain: DNTransformChain read get_TransformChain write set_TransformChain;
  end;

  TDNCipherReference = class(TDNGenericImport<DNCipherReferenceClass, DNCipherReference>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNDataReferenceClass = interface(DNEncryptedReferenceClass)
  ['{646EA0AB-9F97-53B8-AF94-B864DE0ED877}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  class.</summary>
    {class} function init: DNDataReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  class using the specified Uniform Resource Identifier (URI).</summary>
    ///  <param name="uri">A Uniform Resource Identifier (URI) that points to the encrypted data.</param>
    {class} function init(uri: string): DNDataReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  class using the specified Uniform Resource Identifier (URI) and a <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object.</summary>
    ///  <param name="uri">A Uniform Resource Identifier (URI) that points to the encrypted data.</param>
    ///  <param name="transformChain">A <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object that describes transforms to do on the encrypted data.</param>
    {class} function init(uri: string; transformChain: DNTransformChain): DNDataReference; overload;

  end;

  ///<summary>Represents the <see langword="&lt;DataReference&gt;" />
  ///  element used in XML encryption. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.DataReference')]
  DNDataReference = interface(DNEncryptedReference)
  ['{703A7CAD-89F8-32D5-9F29-104824D3CB16}']
  { getters & setters } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_TransformChain: DNTransformChain;
    procedure set_TransformChain(value: DNTransformChain);

  { methods } 

    ///<summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object to the current transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///  <param name="transform">A <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object to add to the transform chain.</param>
    procedure AddTransform(transform: DNTransform);
    ///<summary>Returns the XML representation of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the values of the <see langword="&lt;EncryptedReference&gt;" />
    ///  element in XML encryption.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.ReferenceType" />
    ///  property is <see langword="null" />
    ///  .</exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads an XML element into an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///  <param name="value">An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents an XML element.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the Uniform Resource Identifier (URI) of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>The Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.Uri" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property Uri: string read get_Uri write set_Uri;
    ///<summary>Gets or sets the transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object that describes transforms used on the encrypted data.</returns>
    property TransformChain: DNTransformChain read get_TransformChain write set_TransformChain;
  end;

  TDNDataReference = class(TDNGenericImport<DNDataReferenceClass, DNDataReference>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNKeyReferenceClass = interface(DNEncryptedReferenceClass)
  ['{9A619B54-E47D-5E7E-8D92-42C2B7B30321}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  class for XML encryption.</summary>
    {class} function init: DNKeyReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  class for XML encryption using the supplied Uniform Resource Identifier (URI).</summary>
    ///  <param name="uri">A Uniform Resource Identifier (URI) that points to the encrypted key.</param>
    {class} function init(uri: string): DNKeyReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  class for XML encryption using the specified Uniform Resource Identifier (URI) and a <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object.</summary>
    ///  <param name="uri">A Uniform Resource Identifier (URI) that points to the encrypted key.</param>
    ///  <param name="transformChain">A <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object that describes transforms to do on the encrypted key.</param>
    {class} function init(uri: string; transformChain: DNTransformChain): DNKeyReference; overload;

  end;

  ///<summary>Represents the <see langword="&lt;KeyReference&gt;" />
  ///  element used in XML encryption. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.KeyReference')]
  DNKeyReference = interface(DNEncryptedReference)
  ['{FAE94490-3F08-3462-87F0-3280300E5EC3}']
  { getters & setters } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_TransformChain: DNTransformChain;
    procedure set_TransformChain(value: DNTransformChain);

  { methods } 

    ///<summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object to the current transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///  <param name="transform">A <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object to add to the transform chain.</param>
    procedure AddTransform(transform: DNTransform);
    ///<summary>Returns the XML representation of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the values of the <see langword="&lt;EncryptedReference&gt;" />
    ///  element in XML encryption.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.ReferenceType" />
    ///  property is <see langword="null" />
    ///  .</exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads an XML element into an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///  <param name="value">An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents an XML element.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the Uniform Resource Identifier (URI) of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>The Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.Uri" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property Uri: string read get_Uri write set_Uri;
    ///<summary>Gets or sets the transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object that describes transforms used on the encrypted data.</returns>
    property TransformChain: DNTransformChain read get_TransformChain write set_TransformChain;
  end;

  TDNKeyReference = class(TDNGenericImport<DNKeyReferenceClass, DNKeyReference>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNEncryptedTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1A58CAF7-1AA2-57B4-B355-5109054389A3}']
  end;

  ///<summary>Represents the abstract base class from which the classes <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
  ///  and <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
  ///  derive.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.EncryptedType')]
  DNEncryptedType = interface(DDN.mscorlib.DNObject)
  ['{B16957FA-6313-353D-A27A-D0F59B4E8200}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_KeyInfo: DNKeyInfo;
    procedure set_KeyInfo(value: DNKeyInfo);
    function get_EncryptionMethod: DNEncryptionMethod;
    procedure set_EncryptionMethod(value: DNEncryptionMethod);
    function get_EncryptionProperties: DNEncryptionPropertyCollection;
    function get_CipherData: DNCipherData;
    procedure set_CipherData(value: DNCipherData);

  { methods } 

    ///<summary>Adds an <see langword="&lt;EncryptionProperty&gt;" />
    ///  child element to the <see langword="&lt;EncryptedProperties&gt;" />
    ///  element in the current <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  object in XML encryption.</summary>
    ///  <param name="ep">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object.</param>
    procedure AddProperty(ep: DNEncryptionProperty);
    ///<summary>Loads XML information into the <see langword="&lt;EncryptedType&gt;" />
    ///  element in XML encryption.</summary>
    ///  <param name="value">An <see cref="T:System.Xml.XmlElement" />
    ///  object representing an XML element to use in the <see langword="&lt;EncryptedType&gt;" />
    ///  element.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  provided is <see langword="null" />
    ///  .</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    ///<summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the <see langword="&lt;EncryptedType&gt;" />
    ///  element in XML encryption.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the <see langword="Id" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string of the <see langword="Id" />
    ///  attribute of the <see langword="&lt;EncryptedType&gt;" />
    ///  element.</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>Gets or sets the <see langword="Type" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string that describes the text form of the encrypted data.</returns>
    property &Type: string read get_Type write set_Type;
    ///<summary>Gets or sets the <see langword="MimeType" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string that describes the media type of the encrypted data.</returns>
    property MimeType: string read get_MimeType write set_MimeType;
    ///<summary>Gets or sets the <see langword="Encoding" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string that describes the encoding of the encrypted data.</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>Gets of sets the <see langword="&lt;KeyInfo&gt;" />
    ///  element in XML encryption.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</returns>
    property KeyInfo: DNKeyInfo read get_KeyInfo write set_KeyInfo;
    ///<summary>Gets or sets the <see langword="&lt;EncryptionMethod&gt;" />
    ///  element for XML encryption.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" />
    ///  object that represents the <see langword="&lt;EncryptionMethod&gt;" />
    ///  element.</returns>
    property EncryptionMethod: DNEncryptionMethod read get_EncryptionMethod write set_EncryptionMethod;
    ///<summary>Gets or sets the <see langword="&lt;EncryptionProperties&gt;" />
    ///  element in XML encryption.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</returns>
    property EncryptionProperties: DNEncryptionPropertyCollection read get_EncryptionProperties;
    ///<summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  value for an instance of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  class.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedType.CipherData" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property CipherData: DNCipherData read get_CipherData write set_CipherData;
  end;

  TDNEncryptedType = class(TDNGenericImport<DNEncryptedTypeClass, DNEncryptedType>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNEncryptedDataClass = interface(DNEncryptedTypeClass)
  ['{E56F5504-1E60-5D29-A77B-E993F28DD0D4}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  class.</summary>
    {class} function init: DNEncryptedData;

  end;

  ///<summary>Represents the <see langword="&lt;EncryptedData&gt;" />
  ///  element in XML encryption. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.EncryptedData')]
  DNEncryptedData = interface(DNEncryptedType)
  ['{FC2F57BB-F8D4-3D10-AB53-F65C0D6C9997}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_KeyInfo: DNKeyInfo;
    procedure set_KeyInfo(value: DNKeyInfo);
    function get_EncryptionMethod: DNEncryptionMethod;
    procedure set_EncryptionMethod(value: DNEncryptionMethod);
    function get_EncryptionProperties: DNEncryptionPropertyCollection;
    function get_CipherData: DNCipherData;
    procedure set_CipherData(value: DNCipherData);

  { methods } 

    ///<summary>Loads XML information into the <see langword="&lt;EncryptedData&gt;" />
    ///  element in XML encryption.</summary>
    ///  <param name="value">An <see cref="T:System.Xml.XmlElement" />
    ///  object representing an XML element to use for the <see langword="&lt;EncryptedData&gt;" />
    ///  element.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  provided is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" />
    ///  parameter does not contain a &lt;<see langword="CypherData" />
    ///  &gt; node.</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    ///<summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  that represents the <see langword="&lt;EncryptedData&gt;" />
    ///  element in XML encryption.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  value is <see langword="null" />
    ///  .</exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Adds an <see langword="&lt;EncryptionProperty&gt;" />
    ///  child element to the <see langword="&lt;EncryptedProperties&gt;" />
    ///  element in the current <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  object in XML encryption.</summary>
    ///  <param name="ep">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object.</param>
    procedure AddProperty(ep: DNEncryptionProperty);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the <see langword="Id" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string of the <see langword="Id" />
    ///  attribute of the <see langword="&lt;EncryptedType&gt;" />
    ///  element.</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>Gets or sets the <see langword="Type" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string that describes the text form of the encrypted data.</returns>
    property &Type: string read get_Type write set_Type;
    ///<summary>Gets or sets the <see langword="MimeType" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string that describes the media type of the encrypted data.</returns>
    property MimeType: string read get_MimeType write set_MimeType;
    ///<summary>Gets or sets the <see langword="Encoding" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string that describes the encoding of the encrypted data.</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>Gets of sets the <see langword="&lt;KeyInfo&gt;" />
    ///  element in XML encryption.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</returns>
    property KeyInfo: DNKeyInfo read get_KeyInfo write set_KeyInfo;
    ///<summary>Gets or sets the <see langword="&lt;EncryptionMethod&gt;" />
    ///  element for XML encryption.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" />
    ///  object that represents the <see langword="&lt;EncryptionMethod&gt;" />
    ///  element.</returns>
    property EncryptionMethod: DNEncryptionMethod read get_EncryptionMethod write set_EncryptionMethod;
    ///<summary>Gets or sets the <see langword="&lt;EncryptionProperties&gt;" />
    ///  element in XML encryption.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</returns>
    property EncryptionProperties: DNEncryptionPropertyCollection read get_EncryptionProperties;
    ///<summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  value for an instance of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  class.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedType.CipherData" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property CipherData: DNCipherData read get_CipherData write set_CipherData;
  end;

  TDNEncryptedData = class(TDNGenericImport<DNEncryptedDataClass, DNEncryptedData>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNEncryptedKeyClass = interface(DNEncryptedTypeClass)
  ['{4BDBAED7-48DD-5EEF-A6C6-29ADCF4B1DF8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
    ///  class.</summary>
    {class} function init: DNEncryptedKey;

  end;

  ///<summary>Represents the <see langword="&lt;EncryptedKey&gt;" />
  ///  element in XML encryption. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.EncryptedKey')]
  DNEncryptedKey = interface(DNEncryptedType)
  ['{48CB09B5-2B67-3196-9158-51F16E388F70}']
  { getters & setters } 

    function get_Recipient: string;
    procedure set_Recipient(value: string);
    function get_CarriedKeyName: string;
    procedure set_CarriedKeyName(value: string);
    function get_ReferenceList: DNReferenceList;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_KeyInfo: DNKeyInfo;
    procedure set_KeyInfo(value: DNKeyInfo);
    function get_EncryptionMethod: DNEncryptionMethod;
    procedure set_EncryptionMethod(value: DNEncryptionMethod);
    function get_EncryptionProperties: DNEncryptionPropertyCollection;
    function get_CipherData: DNCipherData;
    procedure set_CipherData(value: DNCipherData);

  { methods } 

    ///<summary>Adds a <see langword="&lt;DataReference&gt; " />
    ///  element to the <see langword="&lt;ReferenceList&gt;" />
    ///  element.</summary>
    ///  <param name="dataReference">A <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  object to add to the <see cref="P:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList" />
    ///  property.</param>
    procedure AddReference(dataReference: DNDataReference); overload;
    ///<summary>Adds a <see langword="&lt;KeyReference&gt; " />
    ///  element to the <see langword="&lt;ReferenceList&gt;" />
    ///  element.</summary>
    ///  <param name="keyReference">A <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object to add to the <see cref="P:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList" />
    ///  property.</param>
    procedure AddReference(keyReference: DNKeyReference); overload;
    ///<summary>Loads the specified XML information into the <see langword="&lt;EncryptedKey&gt;" />
    ///  element in XML encryption.</summary>
    ///  <param name="value">An <see cref="T:System.Xml.XmlElement" />
    ///  representing an XML element to use for the <see langword="&lt;EncryptedKey&gt;" />
    ///  element.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" />
    ///  parameter does not contain a <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  element.</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    ///<summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  that represents the <see langword="&lt;EncryptedKey&gt;" />
    ///  element in XML encryption.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
    ///  value is <see langword="null" />
    ///  .</exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Adds an <see langword="&lt;EncryptionProperty&gt;" />
    ///  child element to the <see langword="&lt;EncryptedProperties&gt;" />
    ///  element in the current <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  object in XML encryption.</summary>
    ///  <param name="ep">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object.</param>
    procedure AddProperty(ep: DNEncryptionProperty);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the optional <see langword="Recipient" />
    ///  attribute in XML encryption.</summary>
    ///<returns>A string representing the value of the <see langword="Recipient" />
    ///  attribute.</returns>
    property Recipient: string read get_Recipient write set_Recipient;
    ///<summary>Gets or sets the optional <see langword="&lt;CarriedKeyName&gt;" />
    ///  element in XML encryption.</summary>
    ///<returns>A string that represents a name for the key value.</returns>
    property CarriedKeyName: string read get_CarriedKeyName write set_CarriedKeyName;
    ///<summary>Gets or sets the <see langword="&lt;ReferenceList&gt;" />
    ///  element in XML encryption.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  object.</returns>
    property ReferenceList: DNReferenceList read get_ReferenceList;
    ///<summary>Gets or sets the <see langword="Id" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string of the <see langword="Id" />
    ///  attribute of the <see langword="&lt;EncryptedType&gt;" />
    ///  element.</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>Gets or sets the <see langword="Type" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string that describes the text form of the encrypted data.</returns>
    property &Type: string read get_Type write set_Type;
    ///<summary>Gets or sets the <see langword="MimeType" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string that describes the media type of the encrypted data.</returns>
    property MimeType: string read get_MimeType write set_MimeType;
    ///<summary>Gets or sets the <see langword="Encoding" />
    ///  attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  instance in XML encryption.</summary>
    ///<returns>A string that describes the encoding of the encrypted data.</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>Gets of sets the <see langword="&lt;KeyInfo&gt;" />
    ///  element in XML encryption.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</returns>
    property KeyInfo: DNKeyInfo read get_KeyInfo write set_KeyInfo;
    ///<summary>Gets or sets the <see langword="&lt;EncryptionMethod&gt;" />
    ///  element for XML encryption.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" />
    ///  object that represents the <see langword="&lt;EncryptionMethod&gt;" />
    ///  element.</returns>
    property EncryptionMethod: DNEncryptionMethod read get_EncryptionMethod write set_EncryptionMethod;
    ///<summary>Gets or sets the <see langword="&lt;EncryptionProperties&gt;" />
    ///  element in XML encryption.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</returns>
    property EncryptionProperties: DNEncryptionPropertyCollection read get_EncryptionProperties;
    ///<summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  value for an instance of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" />
    ///  class.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.CipherData" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedType.CipherData" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property CipherData: DNCipherData read get_CipherData write set_CipherData;
  end;

  TDNEncryptedKey = class(TDNGenericImport<DNEncryptedKeyClass, DNEncryptedKey>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNEncryptedXmlClass = interface(DDN.mscorlib.DNObjectClass)
  ['{40AEFBF3-ED84-5B91-A038-F79A01132B3A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  class.</summary>
    {class} function init: DNEncryptedXml; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  class using the specified XML document.</summary>
    ///  <param name="document">An <see cref="T:System.Xml.XmlDocument" />
    ///  object used to initialize the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  object.</param>
    {class} function init(document: DDN.System.Xml.DNXmlDocument): DNEncryptedXml; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  class using the specified XML document and evidence.</summary>
    ///  <param name="document">An <see cref="T:System.Xml.XmlDocument" />
    ///  object used to initialize the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  object.</param>
    ///  <param name="evidence">An <see cref="T:System.Security.Policy.Evidence" />
    ///  object associated with the <see cref="T:System.Xml.XmlDocument" />
    ///  object.</param>
    {class} function init(document: DDN.System.Xml.DNXmlDocument; evidence: DDN.mscorlib.DNEvidence): DNEncryptedXml; overload;

  { static methods } 

    ///<summary>Encrypts a key using a symmetric algorithm that a recipient uses to decrypt an <see langword="&lt;EncryptedData&gt;" />
    ///  element.</summary>
    ///  <param name="keyData">The key to encrypt.</param>
    ///  <param name="symmetricAlgorithm">The symmetric key used to encrypt <paramref name="keyData" />
    ///  .</param>
    ///<returns>A byte array that represents the encrypted value of the <paramref name="keyData" />
    ///  parameter.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="symmetricAlgorithm" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="symmetricAlgorithm" />
    ///  parameter is not the Triple DES Key Wrap algorithm or the Advanced Encryption Standard (AES) Key Wrap algorithm (also called Rijndael). </exception>
    {class} function EncryptKey(keyData: TArray<Byte>; symmetricAlgorithm: DDN.mscorlib.DNSymmetricAlgorithm): TArray<Byte>; overload;
    ///<summary>Encrypts the key that a recipient uses to decrypt an <see langword="&lt;EncryptedData&gt;" />
    ///  element.</summary>
    ///  <param name="keyData">The key to encrypt.</param>
    ///  <param name="rsa">The asymmetric key used to encrypt <paramref name="keyData" />
    ///  .</param>
    ///  <param name="useOAEP">A value that specifies whether to use Optimal Asymmetric Encryption Padding (OAEP).</param>
    ///<returns>A byte array that represents the encrypted value of the <paramref name="keyData" />
    ///  parameter.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="rsa" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    {class} function EncryptKey(keyData: TArray<Byte>; rsa: DDN.mscorlib.DNRSA; useOAEP: Boolean): TArray<Byte>; overload;
    ///<summary>Decrypts an <see langword="&lt;EncryptedKey&gt;" />
    ///  element using a symmetric algorithm.</summary>
    ///  <param name="keyData">An array of bytes that represents an encrypted <see langword="&lt;EncryptedKey&gt;" />
    ///  element.</param>
    ///  <param name="symmetricAlgorithm">The symmetric key used to decrypt <paramref name="keyData" />
    ///  .</param>
    ///<returns>A byte array that contains the plain text key.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="symmetricAlgorithm" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="symmetricAlgorithm" />
    ///  element is not the Triple DES Key Wrap algorithm or the Advanced Encryption Standard (AES) Key Wrap algorithm (also called Rijndael). </exception>
    {class} function DecryptKey(keyData: TArray<Byte>; symmetricAlgorithm: DDN.mscorlib.DNSymmetricAlgorithm): TArray<Byte>; overload;
    ///<summary>Decrypts an <see langword="&lt;EncryptedKey&gt;" />
    ///  element using an asymmetric algorithm.</summary>
    ///  <param name="keyData">An array of bytes that represents an encrypted <see langword="&lt;EncryptedKey&gt;" />
    ///  element.</param>
    ///  <param name="rsa">The asymmetric key used to decrypt <paramref name="keyData" />
    ///  .</param>
    ///  <param name="useOAEP">A value that specifies whether to use Optimal Asymmetric Encryption Padding (OAEP).</param>
    ///<returns>A byte array that contains the plain text key.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="rsa" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    {class} function DecryptKey(keyData: TArray<Byte>; rsa: DDN.mscorlib.DNRSA; useOAEP: Boolean): TArray<Byte>; overload;
    ///<summary>Replaces the specified element with the specified <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  object.</summary>
    ///  <param name="inputElement">The element to replace with an <see langword="&lt;EncryptedData&gt;" />
    ///  element.</param>
    ///  <param name="encryptedData">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  object to replace the <paramref name="inputElement" />
    ///  parameter with.</param>
    ///  <param name="content"><see langword="true" />
    ///  to replace only the contents of the element; <see langword="false" />
    ///  to replace the entire element.</param>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="encryptedData" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    {class} procedure ReplaceElement(inputElement: DDN.System.Xml.DNXmlElement; encryptedData: DNEncryptedData; content: Boolean);

  end;

  ///<summary>Represents the process model for implementing XML encryption.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.EncryptedXml')]
  DNEncryptedXml = interface(DDN.mscorlib.DNObject)
  ['{05293FB4-17EC-3B7F-92DF-18C9FD266F05}']
  { getters & setters } 

    function get_XmlDSigSearchDepth: Int32;
    procedure set_XmlDSigSearchDepth(value: Int32);
    function get_DocumentEvidence: DDN.mscorlib.DNEvidence;
    procedure set_DocumentEvidence(value: DDN.mscorlib.DNEvidence);
    function get_Resolver: DDN.System.Xml.DNXmlResolver;
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Padding: DDN.mscorlib.DNPaddingMode;
    procedure set_Padding(value: DDN.mscorlib.DNPaddingMode);
    function get_Mode: DDN.mscorlib.DNCipherMode;
    procedure set_Mode(value: DDN.mscorlib.DNCipherMode);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_Recipient: string;
    procedure set_Recipient(value: string);

  { methods } 

    ///<summary>Determines how to resolve internal Uniform Resource Identifier (URI) references.</summary>
    ///  <param name="document">An <see cref="T:System.Xml.XmlDocument" />
    ///  object that contains an element with an ID value.</param>
    ///  <param name="idValue">A string that represents the ID value.</param>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that contains an ID indicating how internal Uniform Resource Identifiers (URIs) are to be resolved.</returns>
    function GetIdElement(document: DDN.System.Xml.DNXmlDocument; idValue: string): DDN.System.Xml.DNXmlElement;
    ///<summary>Defines a mapping between a key name and a symmetric key or an asymmetric key.</summary>
    ///  <param name="keyName">The name to map to <paramref name="keyObject" />
    ///  .</param>
    ///  <param name="keyObject">The symmetric key to map to <paramref name="keyName" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyName" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="keyObject" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="keyObject" />
    ///  parameter is not an RSA algorithm or a symmetric key. </exception>
    procedure AddKeyNameMapping(keyName: string; keyObject: DDN.mscorlib.DNObject);
    ///<summary>Resets all key name mapping.</summary>
    procedure ClearKeyNameMappings;
    ///<summary>Decrypts an <see langword="&lt;EncryptedData&gt;" />
    ///  element using the specified symmetric algorithm.</summary>
    ///  <param name="encryptedData">The data to decrypt.</param>
    ///  <param name="symmetricAlgorithm">The symmetric key used to decrypt <paramref name="encryptedData" />
    ///  .</param>
    ///<returns>A byte array that contains the raw decrypted plain text.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedData" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="symmetricAlgorithm" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    function DecryptData(encryptedData: DNEncryptedData; symmetricAlgorithm: DDN.mscorlib.DNSymmetricAlgorithm): TArray<Byte>;
    ///<summary>Retrieves the decryption initialization vector (IV) from an <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  object.</summary>
    ///  <param name="encryptedData">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  object that contains the initialization vector (IV) to retrieve.</param>
    ///  <param name="symmetricAlgorithmUri">The Uniform Resource Identifier (URI) that describes the cryptographic algorithm associated with the <paramref name="encryptedData" />
    ///  value.</param>
    ///<returns>A byte array that contains the decryption initialization vector (IV).</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedData" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="encryptedData" />
    ///  parameter has an <see cref="P:System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod" />
    ///  property that is null.-or-The value of the <paramref name="symmetricAlgorithmUrisymAlgUri" />
    ///  parameter is not a supported algorithm.</exception>
    function GetDecryptionIV(encryptedData: DNEncryptedData; symmetricAlgorithmUri: string): TArray<Byte>;
    ///<summary>Retrieves the decryption key from the specified <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  object.</summary>
    ///  <param name="encryptedData">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  object that contains the decryption key to retrieve.</param>
    ///  <param name="symmetricAlgorithmUri">The size of the decryption key to retrieve.</param>
    ///<returns>A <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />
    ///  object associated with the decryption key.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedData" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The encryptedData parameter has an <see cref="P:System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod" />
    ///  property that is null.-or-The encrypted key cannot be retrieved using the specified parameters.</exception>
    function GetDecryptionKey(encryptedData: DNEncryptedData; symmetricAlgorithmUri: string): DDN.mscorlib.DNSymmetricAlgorithm;
    ///<summary>Determines the key represented by the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
    ///  element.</summary>
    ///  <param name="encryptedKey">The <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
    ///  object that contains the key to retrieve.</param>
    ///<returns>A byte array that contains the key.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedKey" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="encryptedKey" />
    ///  parameter is not the Triple DES Key Wrap algorithm or the Advanced Encryption Standard (AES) Key Wrap algorithm (also called Rijndael). </exception>
    function DecryptEncryptedKey(encryptedKey: DNEncryptedKey): TArray<Byte>;
    ///<summary>Encrypts the outer XML of an element using the specified X.509 certificate.</summary>
    ///  <param name="inputElement">The XML element to encrypt.</param>
    ///  <param name="certificate">The X.509 certificate to use for encryption.</param>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  element that represents the encrypted XML data.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="certificate" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotSupportedException">The value of the <paramref name="certificate" />
    ///  parameter does not represent an RSA key algorithm.</exception>
    function Encrypt(inputElement: DDN.System.Xml.DNXmlElement; certificate: DDN.System.DNX509Certificate2): DNEncryptedData; overload;
    ///<summary>Encrypts the outer XML of an element using the specified key in the key mapping table.</summary>
    ///  <param name="inputElement">The XML element to encrypt.</param>
    ///  <param name="keyName">A key name that can be found in the key mapping table.</param>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedData" />
    ///  object that represents the encrypted XML data.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="keyName" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="keyName" />
    ///  parameter does not match a registered key name pair.-or-The cryptographic key described by the <paramref name="keyName" />
    ///  parameter is not supported. </exception>
    function Encrypt(inputElement: DDN.System.Xml.DNXmlElement; keyName: string): DNEncryptedData; overload;
    ///<summary>Decrypts all <see langword="&lt;EncryptedData&gt;" />
    ///  elements of the XML document that were specified during initialization of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  class.</summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic key used to decrypt the document was not found. </exception>
    procedure DecryptDocument;
    ///<summary>Encrypts data in the specified byte array using the specified symmetric algorithm.</summary>
    ///  <param name="plaintext">The data to encrypt.</param>
    ///  <param name="symmetricAlgorithm">The symmetric algorithm to use for encryption.</param>
    ///<returns>A byte array of encrypted data.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="plaintext" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="symmetricAlgorithm" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be encrypted using the specified parameters.</exception>
    function EncryptData(plaintext: TArray<Byte>; symmetricAlgorithm: DDN.mscorlib.DNSymmetricAlgorithm): TArray<Byte>; overload;
    ///<summary>Encrypts the specified element or its contents using the specified symmetric algorithm.</summary>
    ///  <param name="inputElement">The element or its contents to encrypt.</param>
    ///  <param name="symmetricAlgorithm">The symmetric algorithm to use for encryption.</param>
    ///  <param name="content"><see langword="true" />
    ///  to encrypt only the contents of the element; <see langword="false" />
    ///  to encrypt the entire element.</param>
    ///<returns>A byte array that contains the encrypted data.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="symmetricAlgorithm" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    function EncryptData(inputElement: DDN.System.Xml.DNXmlElement; symmetricAlgorithm: DDN.mscorlib.DNSymmetricAlgorithm; content: Boolean): TArray<Byte>; overload;
    ///<summary>Replaces an <see langword="&lt;EncryptedData&gt;" />
    ///  element with a specified decrypted sequence of bytes.</summary>
    ///  <param name="inputElement">The <see langword="&lt;EncryptedData&gt;" />
    ///  element to replace.</param>
    ///  <param name="decryptedData">The decrypted data to replace <paramref name="inputElement" />
    ///  with.</param>
    ///<exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" />
    ///  parameter is <see langword="null" />
    ///  .-or-The value of the <paramref name="decryptedData" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure ReplaceData(inputElement: DDN.System.Xml.DNXmlElement; decryptedData: TArray<Byte>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the XML digital signature recursion depth to prevent infinite recursion and stack overflow. This might happen if the digital signature XML contains the URI which then points back to the original XML. </summary>
    ///<returns>Returns <see cref="T:System.Int32" />
    ///  .</returns>
    property XmlDSigSearchDepth: Int32 read get_XmlDSigSearchDepth write set_XmlDSigSearchDepth;
    ///<summary>Gets or sets the evidence of the <see cref="T:System.Xml.XmlDocument" />
    ///  object from which the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  object is constructed.</summary>
    ///<returns>An <see cref="T:System.Security.Policy.Evidence" />
    ///  object.</returns>
    property DocumentEvidence: DDN.mscorlib.DNEvidence read get_DocumentEvidence write set_DocumentEvidence;
    ///<summary>Gets or sets the <see cref="T:System.Xml.XmlResolver" />
    ///  object used by the Document Object Model (DOM) to resolve external XML references.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver read get_Resolver write set_Resolver;
    ///<summary>Gets or sets the padding mode used for XML encryption.</summary>
    ///<returns>One of the <see cref="T:System.Security.Cryptography.PaddingMode" />
    ///  values that specifies the type of padding used for encryption.</returns>
    property Padding: DDN.mscorlib.DNPaddingMode read get_Padding write set_Padding;
    ///<summary>Gets or sets the cipher mode used for XML encryption.</summary>
    ///<returns>One of the <see cref="T:System.Security.Cryptography.CipherMode" />
    ///  values.</returns>
    property Mode: DDN.mscorlib.DNCipherMode read get_Mode write set_Mode;
    ///<summary>Gets or sets the encoding used for XML encryption.</summary>
    ///<returns>An <see cref="T:System.Text.Encoding" />
    ///  object.</returns>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>Gets or sets the recipient of the encrypted key information.</summary>
    ///<returns>The recipient of the encrypted key information.</returns>
    property Recipient: string read get_Recipient write set_Recipient;
  end;

  TDNEncryptedXml = class(TDNGenericImport<DNEncryptedXmlClass, DNEncryptedXml>)
  public const
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for XML encryption syntax and processing. This field is constant.</summary>
   XmlEncNamespaceUrl = 'http://www.w3.org/2001/04/xmlenc#';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for an XML encryption element. This field is constant.</summary>
   XmlEncElementUrl = 'http://www.w3.org/2001/04/xmlenc#Element';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for XML encryption element content. This field is constant.</summary>
   XmlEncElementContentUrl = 'http://www.w3.org/2001/04/xmlenc#Content';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the XML encryption <see langword="&lt;EncryptedKey&gt;" />
    ///  element. This field is constant.</summary>
   XmlEncEncryptedKeyUrl = 'http://www.w3.org/2001/04/xmlenc#EncryptedKey';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the Digital Encryption Standard (DES) algorithm. This field is constant.</summary>
   XmlEncDESUrl = 'http://www.w3.org/2001/04/xmlenc#des-cbc';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the Triple DES algorithm. This field is constant.</summary>
   XmlEncTripleDESUrl = 'http://www.w3.org/2001/04/xmlenc#tripledes-cbc';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the 128-bit Advanced Encryption Standard (AES) algorithm (also known as the Rijndael algorithm). This field is constant.</summary>
   XmlEncAES128Url = 'http://www.w3.org/2001/04/xmlenc#aes128-cbc';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the 256-bit Advanced Encryption Standard (AES) algorithm (also known as the Rijndael algorithm). This field is constant.</summary>
   XmlEncAES256Url = 'http://www.w3.org/2001/04/xmlenc#aes256-cbc';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the 192-bit Advanced Encryption Standard (AES) algorithm (also known as the Rijndael algorithm). This field is constant.</summary>
   XmlEncAES192Url = 'http://www.w3.org/2001/04/xmlenc#aes192-cbc';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the RSA Public Key Cryptography Standard (PKCS) Version 1.5 algorithm. This field is constant.</summary>
   XmlEncRSA15Url = 'http://www.w3.org/2001/04/xmlenc#rsa-1_5';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the RSA Optimal Asymmetric Encryption Padding (OAEP) encryption algorithm. This field is constant.</summary>
   XmlEncRSAOAEPUrl = 'http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the TRIPLEDES key wrap algorithm. This field is constant.</summary>
   XmlEncTripleDESKeyWrapUrl = 'http://www.w3.org/2001/04/xmlenc#kw-tripledes';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the 128-bit Advanced Encryption Standard (AES) Key Wrap algorithm (also known as the Rijndael Key Wrap algorithm). This field is constant. </summary>
   XmlEncAES128KeyWrapUrl = 'http://www.w3.org/2001/04/xmlenc#kw-aes128';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the 256-bit Advanced Encryption Standard (AES) Key Wrap algorithm (also known as the Rijndael Key Wrap algorithm). This field is constant.</summary>
   XmlEncAES256KeyWrapUrl = 'http://www.w3.org/2001/04/xmlenc#kw-aes256';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the 192-bit Advanced Encryption Standard (AES) Key Wrap algorithm (also known as the Rijndael Key Wrap algorithm). This field is constant.</summary>
   XmlEncAES192KeyWrapUrl = 'http://www.w3.org/2001/04/xmlenc#kw-aes192';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the SHA-256 algorithm. This field is constant.</summary>
   XmlEncSHA256Url = 'http://www.w3.org/2001/04/xmlenc#sha256';
    ///<summary>Represents the namespace Uniform Resource Identifier (URI) for the SHA-512 algorithm. This field is constant.</summary>
   XmlEncSHA512Url = 'http://www.w3.org/2001/04/xmlenc#sha512';
  end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNEncryptionMethodClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC7F8721-CDD0-5EFD-8314-85D1C9318DEE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" />
    ///  class. </summary>
    {class} function init: DNEncryptionMethod; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" />
    ///  class specifying an algorithm Uniform Resource Identifier (URI). </summary>
    ///  <param name="algorithm">The Uniform Resource Identifier (URI) that describes the algorithm represented by an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" />
    ///  class. </param>
    {class} function init(algorithm: string): DNEncryptionMethod; overload;

  end;

  ///<summary>Encapsulates the encryption algorithm used for XML encryption. </summary>
  [DNTypeName('System.Security.Cryptography.Xml.EncryptionMethod')]
  DNEncryptionMethod = interface(DDN.mscorlib.DNObject)
  ['{45373A3E-546E-3C91-A8A0-3F3F1BD7F98B}']
  { getters & setters } 

    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_KeyAlgorithm: string;
    procedure set_KeyAlgorithm(value: string);

  { methods } 

    ///<summary>Returns an <see cref="T:System.Xml.XmlElement" />
    ///  object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" />
    ///  class.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" />
    ///  class.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Parses the specified <see cref="T:System.Xml.XmlElement" />
    ///  object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" />
    ///  object to match.</summary>
    ///  <param name="value">An <see cref="T:System.Xml.XmlElement" />
    ///  object to parse.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The key size expressed in the <paramref name="value" />
    ///  parameter was less than 0. </exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the algorithm key size used for XML encryption. </summary>
    ///<returns>The algorithm key size, in bits, used for XML encryption.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Security.Cryptography.Xml.EncryptionMethod.KeySize" />
    ///  property was set to a value that was less than 0.</exception>
    property KeySize: Int32 read get_KeySize write set_KeySize;
    ///<summary>Gets or sets a Uniform Resource Identifier (URI) that describes the algorithm to use for XML encryption. </summary>
    ///<returns>A Uniform Resource Identifier (URI) that describes the algorithm to use for XML encryption.</returns>
    property KeyAlgorithm: string read get_KeyAlgorithm write set_KeyAlgorithm;
  end;

  TDNEncryptionMethod = class(TDNGenericImport<DNEncryptionMethodClass, DNEncryptionMethod>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNEncryptionPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C6EC2007-0CC9-5398-89E6-B7502F6CA67C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  class. </summary>
    {class} function init: DNEncryptionProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  class using an <see cref="T:System.Xml.XmlElement" />
    ///  object. </summary>
    ///  <param name="elementProperty">An <see cref="T:System.Xml.XmlElement" />
    ///  object to use for initialization.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="elementProperty" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Xml.XmlElement.LocalName" />
    ///  property of the <paramref name="elementProperty" />
    ///  parameter is not "EncryptionProperty". -or-The <see cref="P:System.Xml.XmlElement.NamespaceURI" />
    ///  property of the <paramref name="elementProperty" />
    ///  parameter is not "http://www.w3.org/2001/04/xmlenc#".</exception>
    {class} function init(elementProperty: DDN.System.Xml.DNXmlElement): DNEncryptionProperty; overload;

  end;

  ///<summary>Represents the <see langword="&lt;EncryptionProperty&gt;" />
  ///  element used in XML encryption. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.EncryptionProperty')]
  DNEncryptionProperty = interface(DDN.mscorlib.DNObject)
  ['{FBCF2510-EE0D-3BBA-81F9-EB08F217DECD}']
  { getters & setters } 

    function get_Id: string;
    function get_Target: string;
    function get_PropertyElement: DDN.System.Xml.DNXmlElement;
    procedure set_PropertyElement(value: DDN.System.Xml.DNXmlElement);

  { methods } 

    ///<summary>Returns an <see cref="T:System.Xml.XmlElement" />
    ///  object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  class.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  class.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Parses the input <see cref="T:System.Xml.XmlElement" />
    ///  and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object to match.</summary>
    ///  <param name="value">An <see cref="T:System.Xml.XmlElement" />
    ///  object to parse.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Xml.XmlElement.LocalName" />
    ///  property of the <paramref name="value" />
    ///  parameter is not "EncryptionProperty". -or-The <see cref="P:System.Xml.XmlElement.NamespaceURI" />
    ///  property of the <paramref name="value" />
    ///  parameter is not "http://www.w3.org/2001/04/xmlenc#".</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the ID of the current <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object.</summary>
    ///<returns>The ID of the current <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object.</returns>
    property Id: string read get_Id;
    ///<summary>Gets the target of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object.</summary>
    ///<returns>The target of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object.</returns>
    property Target: string read get_Target;
    ///<summary>Gets or sets an <see cref="T:System.Xml.XmlElement" />
    ///  object that represents an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object. </summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptionProperty.PropertyElement" />
    ///  property was set to <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Xml.XmlElement.LocalName" />
    ///  property of the value set to the <see cref="P:System.Security.Cryptography.Xml.EncryptionProperty.PropertyElement" />
    ///  property is not "EncryptionProperty". -or-The <see cref="P:System.Xml.XmlElement.NamespaceURI" />
    ///  property of the value set to the <see cref="P:System.Security.Cryptography.Xml.EncryptionProperty.PropertyElement" />
    ///  property is not "http://www.w3.org/2001/04/xmlenc#".</exception>
    property PropertyElement: DDN.System.Xml.DNXmlElement read get_PropertyElement write set_PropertyElement;
  end;

  TDNEncryptionProperty = class(TDNGenericImport<DNEncryptionPropertyClass, DNEncryptionProperty>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNEncryptionPropertyCollectionClass = interface(DNObjectClass)
  ['{F50F0241-CF57-5ED2-A6F0-DACFBD9BF9DC}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  class.</summary>
    {class} function init: DNEncryptionPropertyCollection;

  end;

  ///<summary>Represents a collection of <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
  ///  classes used in XML encryption. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.EncryptionPropertyCollection')]
  DNEncryptionPropertyCollection = interface(DDN.mscorlib.DNIList)
  ['{4EDF7CB8-170C-3691-AF15-EE46A5F94BD8}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_ItemOf(index: Int32): DNEncryptionProperty;
    procedure set_ItemOf(index: Int32; value: DNEncryptionProperty);
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    ///<summary>Returns an enumerator that iterates through an <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  object that can be used to iterate through an <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Adds an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</summary>
    ///  <param name="value">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object to add to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</param>
    ///<returns>The position at which the new element is inserted.</returns>
    function Add(value: DNEncryptionProperty): Int32;
    ///<summary>Determines whether the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object contains a specific <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object.</summary>
    ///  <param name="value">The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object to locate in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object. </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object is found in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object; otherwise, <see langword="false" />
    ///  . </returns>
    function &Contains(value: DNEncryptionProperty): Boolean;
    ///<summary>Determines the index of a specific item in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</summary>
    ///  <param name="value">The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object to locate in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</param>
    ///<returns>The index of <paramref name="value" />
    ///  if found in the collection; otherwise, -1.</returns>
    function IndexOf(value: DNEncryptionProperty): Int32;
    ///<summary>Inserts an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object into the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object at the specified position.</summary>
    ///  <param name="index">The zero-based index at which <paramref name="value" />
    ///  should be inserted.</param>
    ///  <param name="value">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object to insert into the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</param>
    procedure Insert(index: Int32; value: DNEncryptionProperty);
    ///<summary>Removes the first occurrence of a specific <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</summary>
    ///  <param name="value">The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object to remove from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</param>
    procedure Remove(value: DNEncryptionProperty);
    ///<summary>Removes the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object at the specified index.</summary>
    ///  <param name="index">The zero-based index of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>Returns the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object at the specified index.</summary>
    ///  <param name="index">The index of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object to return.</param>
    ///<returns>The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  object at the specified index.</returns>
    function Item(index: Int32): DNEncryptionProperty;
    ///<summary>Copies the elements of the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object to an array, starting at a particular array index.</summary>
    ///  <param name="array">The one-dimensional <see cref="T:System.Array" />
    ///  object that is the destination of the elements copied from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object. The array must have zero-based indexing.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  at which copying begins. </param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>Copies the elements of the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object to an array of <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  objects, starting at a particular array index.</summary>
    ///  <param name="array">The one-dimensional array of  <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" />
    ///  objects that is the destination of the elements copied from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object. The array must have zero-based indexing.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    procedure CopyTo(&array: TArray<DNEncryptionProperty>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of elements contained in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</summary>
    ///<returns>The number of elements contained in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value that indicates whether the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object has a fixed size.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object has a fixed size; otherwise, <see langword="false" />
    ///  .</returns>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>Gets a value that indicates whether the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object is read-only; otherwise, <see langword="false" />
    ///  . </returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property ItemOf[index: Int32]: DNEncryptionProperty read get_ItemOf write set_ItemOf; default;
    ///<summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</summary>
    ///<returns>An object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>Gets a value that indicates whether access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object is synchronized (thread safe).</summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" />
    ///  object is synchronized (thread safe); otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNEncryptionPropertyCollection = class(TDNGenericImport<DNEncryptionPropertyCollectionClass, DNEncryptionPropertyCollection>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNKeyInfoClass = interface(DNObjectClass)
  ['{FC55D02A-89AB-5B1C-A81C-D61D7D5EDE15}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  class.</summary>
    {class} function init: DNKeyInfo;

  end;

  ///<summary>Represents an XML digital signature or XML encryption <see langword="&lt;KeyInfo&gt;" />
  ///  element.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.KeyInfo')]
  DNKeyInfo = interface(DDN.mscorlib.DNIEnumerable)
  ['{4FEF8CE8-09B4-3D13-88DD-39A9F077A80C}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />
    ///  that represents a particular type of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  information to the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</summary>
    ///  <param name="clause">The <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />
    ///  to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object. </param>
    procedure AddClause(clause: DNKeyInfoClause);
    ///<summary>Returns an enumerator of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />
    ///  objects in the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</summary>
    ///<returns>An enumerator of the subelements of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  that can be used to iterate through the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator; overload;
    ///<summary>Returns an enumerator of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />
    ///  objects of the specified type in the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</summary>
    ///  <param name="requestedObjectType">The type of object to enumerate. </param>
    ///<returns>An enumerator of the subelements of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  that can be used to iterate through the collection.</returns>
    function GetEnumerator(requestedObjectType: DDN.mscorlib.DNType): DDN.mscorlib.DNIEnumerator; overload;
    ///<summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</summary>
    ///<returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads a <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  state from an XML element.</summary>
    ///  <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  state. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  . </exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the key information identity.</summary>
    ///<returns>The key information identity.</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>Gets the number of <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />
    ///  objects contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</summary>
    ///<returns>The number of <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />
    ///  objects contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</returns>
    property Count: Int32 read get_Count;
  end;

  TDNKeyInfo = class(TDNGenericImport<DNKeyInfoClass, DNKeyInfo>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNKeyInfoClauseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E78A823-CB35-5307-B462-C2C57C34AFD6}']
  end;

  ///<summary>Represents the abstract base class from which all implementations of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
  ///  subelements inherit.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.KeyInfoClause')]
  DNKeyInfoClause = interface(DDN.mscorlib.DNObject)
  ['{C1677807-714E-320B-B67E-77C6F73AFBC3}']
  { methods } 

    ///<summary>When overridden in a derived class, returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />
    ///  .</summary>
    ///<returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />
    ///  .</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>When overridden in a derived class, parses the input <see cref="T:System.Xml.XmlElement" />
    ///  and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />
    ///  to match.</summary>
    ///  <param name="element">The <see cref="T:System.Xml.XmlElement" />
    ///  that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />
    ///  . </param>
    procedure LoadXml(element: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyInfoClause = class(TDNGenericImport<DNKeyInfoClauseClass, DNKeyInfoClause>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNDSAKeyValueClass = interface(DNKeyInfoClauseClass)
  ['{377CFB91-8900-518F-93BB-9A4DAF7A8573}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" />
    ///  class with a new, randomly-generated <see cref="T:System.Security.Cryptography.DSA" />
    ///  public key.</summary>
    {class} function init: DNDSAKeyValue; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" />
    ///  class with the specified <see cref="T:System.Security.Cryptography.DSA" />
    ///  public key.</summary>
    ///  <param name="key">The instance of an implementation of the <see cref="T:System.Security.Cryptography.DSA" />
    ///  class that holds the public key. </param>
    {class} function init(key: DDN.mscorlib.DNDSA): DNDSAKeyValue; overload;

  end;

  ///<summary>Represents the <see cref="T:System.Security.Cryptography.DSA" />
  ///  private key of the <see langword="&lt;KeyInfo&gt;" />
  ///  element.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.DSAKeyValue')]
  DNDSAKeyValue = interface(DNKeyInfoClause)
  ['{A0A0C73D-39C1-322A-961E-96C8AC5372E9}']
  { getters & setters } 

    function get_Key: DDN.mscorlib.DNDSA;
    procedure set_Key(value: DDN.mscorlib.DNDSA);

  { methods } 

    ///<summary>Returns the XML representation of a <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" />
    ///  element.</summary>
    ///<returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" />
    ///  element.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads a <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" />
    ///  state from an XML element.</summary>
    ///  <param name="value">The XML element to load the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" />
    ///  state from. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" />
    ///  parameter is not a valid <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" />
    ///  XML element. </exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the key value represented by a <see cref="T:System.Security.Cryptography.DSA" />
    ///  object.</summary>
    ///<returns>The public key represented by a <see cref="T:System.Security.Cryptography.DSA" />
    ///  object.</returns>
    property Key: DDN.mscorlib.DNDSA read get_Key write set_Key;
  end;

  TDNDSAKeyValue = class(TDNGenericImport<DNDSAKeyValueClass, DNDSAKeyValue>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNKeyInfoEncryptedKeyClass = interface(DNKeyInfoClauseClass)
  ['{07FDC586-F492-5315-AD01-43989E8E0ED2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" />
    ///  class. </summary>
    {class} function init: DNKeyInfoEncryptedKey; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" />
    ///  class using an <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
    ///  object.</summary>
    ///  <param name="encryptedKey">An <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
    ///  object that encapsulates an encrypted key.</param>
    {class} function init(encryptedKey: DNEncryptedKey): DNKeyInfoEncryptedKey; overload;

  end;

  ///<summary>Wraps the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
  ///  class, it to be placed as a subelement of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
  ///  class.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.KeyInfoEncryptedKey')]
  DNKeyInfoEncryptedKey = interface(DNKeyInfoClause)
  ['{F553DA72-AA00-392C-BA00-264884732880}']
  { getters & setters } 

    function get_EncryptedKey: DNEncryptedKey;
    procedure set_EncryptedKey(value: DNEncryptedKey);

  { methods } 

    ///<summary>Returns an XML representation of a <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" />
    ///  object.</summary>
    ///<returns>An XML representation of a <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" />
    ///  object. </returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The encrypted key is <see langword="null" />
    ///  .</exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Parses the input <see cref="T:System.Xml.XmlElement" />
    ///  object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" />
    ///  object to match.</summary>
    ///  <param name="value">The <see cref="T:System.Xml.XmlElement" />
    ///  object that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" />
    ///  object.</param>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
    ///  object that encapsulates an encrypted key.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />
    ///  object that encapsulates an encrypted key.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.EncryptedKey" />
    ///  property is <see langword="null" />
    ///  .</exception>
    property EncryptedKey: DNEncryptedKey read get_EncryptedKey write set_EncryptedKey;
  end;

  TDNKeyInfoEncryptedKey = class(TDNGenericImport<DNKeyInfoEncryptedKeyClass, DNKeyInfoEncryptedKey>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNKeyInfoNameClass = interface(DNKeyInfoClauseClass)
  ['{CF9A57EF-B84F-5BF8-93DE-0E3041631673}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" />
    ///  class.</summary>
    {class} function init: DNKeyInfoName; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" />
    ///  class by specifying the string identifier that is the value of the <see langword="&lt;KeyName&gt;" />
    ///  element.</summary>
    ///  <param name="keyName">The string identifier that is the value of the <see langword="&lt;KeyName&gt;" />
    ///  element.</param>
    {class} function init(keyName: string): DNKeyInfoName; overload;

  end;

  ///<summary>Represents a <see langword="&lt;KeyName&gt;" />
  ///  subelement of an XMLDSIG or XML Encryption <see langword="&lt;KeyInfo&gt;" />
  ///  element.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.KeyInfoName')]
  DNKeyInfoName = interface(DNKeyInfoClause)
  ['{9A4062E1-3932-3BBF-853E-522D7AA04085}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    ///<summary>Returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" />
    ///  object.</summary>
    ///<returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Parses the input <see cref="T:System.Xml.XmlElement" />
    ///  object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" />
    ///  object to match.</summary>
    ///  <param name="value">The <see cref="T:System.Xml.XmlElement" />
    ///  object that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  . </exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the string identifier contained within a <see langword="&lt;KeyName&gt;" />
    ///  element.</summary>
    ///<returns>The string identifier that is the value of the <see langword="&lt;KeyName&gt;" />
    ///  element.</returns>
    property Value: string read get_Value write set_Value;
  end;

  TDNKeyInfoName = class(TDNGenericImport<DNKeyInfoNameClass, DNKeyInfoName>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNKeyInfoNodeClass = interface(DNKeyInfoClauseClass)
  ['{309743C1-6F21-59A2-9EF2-80AD1F690E56}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />
    ///  class.</summary>
    {class} function init: DNKeyInfoNode; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />
    ///  class with content taken from the specified <see cref="T:System.Xml.XmlElement" />
    ///  .</summary>
    ///  <param name="node">An XML element from which to take the content used to create the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />
    ///  . </param>
    {class} function init(node: DDN.System.Xml.DNXmlElement): DNKeyInfoNode; overload;

  end;

  ///<summary>Handles <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
  ///  subelements that do not have specific implementations or handlers registered on the machine.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.KeyInfoNode')]
  DNKeyInfoNode = interface(DNKeyInfoClause)
  ['{7766A4DB-3072-34A2-972F-B5408656246C}']
  { getters & setters } 

    function get_Value: DDN.System.Xml.DNXmlElement;
    procedure set_Value(value: DDN.System.Xml.DNXmlElement);

  { methods } 

    ///<summary>Parses the input <see cref="T:System.Xml.XmlElement" />
    ///  and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />
    ///  to match.</summary>
    ///  <param name="value">The <see cref="T:System.Xml.XmlElement" />
    ///  that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />
    ///  . </param>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    ///<summary>Returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />
    ///  .</summary>
    ///<returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />
    ///  .</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the XML content of the current <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />
    ///  .</summary>
    ///<returns>The XML content of the current <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />
    ///  .</returns>
    property Value: DDN.System.Xml.DNXmlElement read get_Value write set_Value;
  end;

  TDNKeyInfoNode = class(TDNGenericImport<DNKeyInfoNodeClass, DNKeyInfoNode>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNKeyInfoRetrievalMethodClass = interface(DNKeyInfoClauseClass)
  ['{D856FA4A-AC5A-5A26-A77D-DF088B8C9478}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  class.</summary>
    {class} function init: DNKeyInfoRetrievalMethod; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  class with the specified Uniform Resource Identifier (URI) pointing to the referenced <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object.</summary>
    ///  <param name="strUri">The Uniform Resource Identifier (URI) of the information to be referenced by the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  . </param>
    {class} function init(strUri: string): DNKeyInfoRetrievalMethod; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  class with the specified Uniform Resource Identifier (URI) pointing to the referenced <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object and the URI that describes the type of data to retrieve.  </summary>
    ///  <param name="strUri">The Uniform Resource Identifier (URI) of the information to be referenced by the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  .</param>
    ///  <param name="typeName">The URI that describes the type of data to retrieve.</param>
    {class} function init(strUri: string; typeName: string): DNKeyInfoRetrievalMethod; overload;

  end;

  ///<summary>References <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
  ///  objects stored at a different location when using XMLDSIG or XML encryption.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.KeyInfoRetrievalMethod')]
  DNKeyInfoRetrievalMethod = interface(DNKeyInfoClause)
  ['{57F2BFAA-B0E3-30C3-9649-77A9DDD8B64B}']
  { getters & setters } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_Type: string;
    procedure set_Type(value: string);

  { methods } 

    ///<summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  object.</summary>
    ///<returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Parses the input <see cref="T:System.Xml.XmlElement" />
    ///  object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  object to match.</summary>
    ///  <param name="value">The XML element that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  . </exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  object.</summary>
    ///<returns>The Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />
    ///  object.</returns>
    property Uri: string read get_Uri write set_Uri;
    ///<summary>Gets or sets a Uniform Resource Identifier (URI) that describes the type of data to be retrieved.</summary>
    ///<returns>A Uniform Resource Identifier (URI) that describes the type of data to be retrieved.</returns>
    property &Type: string read get_Type write set_Type;
  end;

  TDNKeyInfoRetrievalMethod = class(TDNGenericImport<DNKeyInfoRetrievalMethodClass, DNKeyInfoRetrievalMethod>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNKeyInfoX509DataClass = interface(DNKeyInfoClauseClass)
  ['{5E166CBF-728D-57E4-A131-18D505F9FA94}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  class.</summary>
    {class} function init: DNKeyInfoX509Data; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  class from the specified ASN.1 DER encoding of an X.509v3 certificate.</summary>
    ///  <param name="rgbCert">The ASN.1 DER encoding of an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />
    ///  object to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  from.</param>
    {class} function init(rgbCert: TArray<Byte>): DNKeyInfoX509Data; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  class from the specified X.509v3 certificate.</summary>
    ///  <param name="cert">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />
    ///  object to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  from.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="cert" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    {class} function init(cert: DDN.mscorlib.DNX509Certificate): DNKeyInfoX509Data; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  class from the specified X.509v3 certificate.</summary>
    ///  <param name="cert">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />
    ///  object to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  from.</param>
    ///  <param name="includeOption">One of the <see cref="T:System.Security.Cryptography.X509Certificates.X509IncludeOption" />
    ///  values that specifies how much of the certificate chain to include.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="cert" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The certificate has only a partial certificate chain.</exception>
    {class} function init(cert: DDN.mscorlib.DNX509Certificate; includeOption: DDN.System.DNX509IncludeOption): DNKeyInfoX509Data; overload;

  end;

  ///<summary>Represents an <see langword="&lt;X509Data&gt;" />
  ///  subelement of an XMLDSIG or XML Encryption <see langword="&lt;KeyInfo&gt;" />
  ///  element.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.KeyInfoX509Data')]
  DNKeyInfoX509Data = interface(DNKeyInfoClause)
  ['{80A1B9CB-E826-3393-A806-5689B8289E14}']
  { getters & setters } 

    function get_Certificates: DDN.mscorlib.DNArrayList;
    function get_SubjectKeyIds: DDN.mscorlib.DNArrayList;
    function get_SubjectNames: DDN.mscorlib.DNArrayList;
    function get_IssuerSerials: DDN.mscorlib.DNArrayList;
    function get_CRL: TArray<Byte>;
    procedure set_CRL(value: TArray<Byte>);

  { methods } 

    ///<summary>Adds the specified X.509v3 certificate to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  .</summary>
    ///  <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />
    ///  object to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="certificate" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure AddCertificate(certificate: DDN.mscorlib.DNX509Certificate);
    ///<summary>Adds the specified subject key identifier (SKI) byte array to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</summary>
    ///  <param name="subjectKeyId">A byte array that represents the subject key identifier (SKI) to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object. </param>
    procedure AddSubjectKeyId(subjectKeyId: TArray<Byte>); overload;
    ///<summary>Adds the specified subject key identifier (SKI) string to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</summary>
    ///  <param name="subjectKeyId">A string that represents the subject key identifier (SKI) to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</param>
    procedure AddSubjectKeyId(subjectKeyId: string); overload;
    ///<summary>Adds the subject name of the entity that was issued an X.509v3 certificate to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</summary>
    ///  <param name="subjectName">The name of the entity that was issued an X.509 certificate to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object. </param>
    procedure AddSubjectName(subjectName: string);
    ///<summary>Adds the specified issuer name and serial number pair to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</summary>
    ///  <param name="issuerName">The issuer name portion of the pair to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object. </param>
    ///  <param name="serialNumber">The serial number portion of the pair to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object. </param>
    procedure AddIssuerSerial(issuerName: string; serialNumber: string);
    ///<summary>Returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</summary>
    ///<returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Parses the input <see cref="T:System.Xml.XmlElement" />
    ///  object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object to match.</summary>
    ///  <param name="element">The <see cref="T:System.Xml.XmlElement" />
    ///  object that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="element" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="element" />
    ///  parameter does not contain an &lt;<see langword="X509IssuerName" />
    ///  &gt; node.-or-The <paramref name="element" />
    ///  parameter does not contain an &lt;<see langword="X509SerialNumber" />
    ///  &gt; node.</exception>
    procedure LoadXml(element: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a list of the X.509v3 certificates contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</summary>
    ///<returns>A list of the X.509 certificates contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</returns>
    property Certificates: DDN.mscorlib.DNArrayList read get_Certificates;
    ///<summary>Gets a list of the subject key identifiers (SKIs) contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</summary>
    ///<returns>A list of the subject key identifiers (SKIs) contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</returns>
    property SubjectKeyIds: DDN.mscorlib.DNArrayList read get_SubjectKeyIds;
    ///<summary>Gets a list of the subject names of the entities contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</summary>
    ///<returns>A list of the subject names of the entities contained in the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</returns>
    property SubjectNames: DDN.mscorlib.DNArrayList read get_SubjectNames;
    ///<summary>Gets a list of <see cref="T:System.Security.Cryptography.Xml.X509IssuerSerial" />
    ///  structures that represent an issuer name and serial number pair.</summary>
    ///<returns>A list of <see cref="T:System.Security.Cryptography.Xml.X509IssuerSerial" />
    ///  structures that represent an issuer name and serial number pair.</returns>
    property IssuerSerials: DDN.mscorlib.DNArrayList read get_IssuerSerials;
    ///<summary>Gets or sets the Certificate Revocation List (CRL) contained within the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</summary>
    ///<returns>The Certificate Revocation List (CRL) contained within the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" />
    ///  object.</returns>
    property CRL: TArray<Byte> read get_CRL write set_CRL;
  end;

  TDNKeyInfoX509Data = class(TDNGenericImport<DNKeyInfoX509DataClass, DNKeyInfoX509Data>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNRSAKeyValueClass = interface(DNKeyInfoClauseClass)
  ['{8ECB78C0-172D-5578-AD47-ED9250A98F6C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.RSAKeyValue" />
    ///  class with a new randomly generated <see cref="T:System.Security.Cryptography.RSA" />
    ///  public key.</summary>
    {class} function init: DNRSAKeyValue; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.RSAKeyValue" />
    ///  class with the specified <see cref="T:System.Security.Cryptography.RSA" />
    ///  public key.</summary>
    ///  <param name="key">The instance of an implementation of <see cref="T:System.Security.Cryptography.RSA" />
    ///  that holds the public key. </param>
    {class} function init(key: DDN.mscorlib.DNRSA): DNRSAKeyValue; overload;

  end;

  ///<summary>Represents the &lt;<see langword="RSAKeyValu" />
  ///  e&gt; element of an XML signature.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.RSAKeyValue')]
  DNRSAKeyValue = interface(DNKeyInfoClause)
  ['{268DE0CB-0A43-39B7-B1BE-2A08D924C414}']
  { getters & setters } 

    function get_Key: DDN.mscorlib.DNRSA;
    procedure set_Key(value: DDN.mscorlib.DNRSA);

  { methods } 

    ///<summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.RSA" />
    ///  key clause.</summary>
    ///<returns>The XML representation of the <see cref="T:System.Security.Cryptography.RSA" />
    ///  key clause.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads an <see cref="T:System.Security.Cryptography.RSA" />
    ///  key clause from an XML element.</summary>
    ///  <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.RSA" />
    ///  key clause. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" />
    ///  parameter is not a valid <see cref="T:System.Security.Cryptography.RSA" />
    ///  key clause XML element. </exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the instance of <see cref="T:System.Security.Cryptography.RSA" />
    ///  that holds the public key.</summary>
    ///<returns>The instance of <see cref="T:System.Security.Cryptography.RSA" />
    ///  that holds the public key.</returns>
    property Key: DDN.mscorlib.DNRSA read get_Key write set_Key;
  end;

  TDNRSAKeyValue = class(TDNGenericImport<DNRSAKeyValueClass, DNRSAKeyValue>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1B0A8D95-8E8E-5CD5-AD1A-883B141ED377}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  class with default properties.</summary>
    {class} function init: DNReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  class with a hash value of the specified <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  with which to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream): DNReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  class with the specified <see cref="T:System.Uri" />
    ///  .</summary>
    ///  <param name="uri">The <see cref="T:System.Uri" />
    ///  with which to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  . </param>
    {class} function init(uri: string): DNReference; overload;

  end;

  ///<summary>Represents the <see langword="&lt;reference&gt;" />
  ///  element of an XML signature.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.Reference')]
  DNReference = interface(DDN.mscorlib.DNObject)
  ['{BEF96AF0-4A13-3483-8743-89C05AFE9B89}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_DigestMethod: string;
    procedure set_DigestMethod(value: string);
    function get_DigestValue: TArray<Byte>;
    procedure set_DigestValue(value: TArray<Byte>);
    function get_TransformChain: DNTransformChain;
    procedure set_TransformChain(value: DNTransformChain);

  { methods } 

    ///<summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object to the list of transforms to be performed on the data before passing it to the digest algorithm.</summary>
    ///  <param name="transform">The transform to be added to the list of transforms. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="transform" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure AddTransform(transform: DNTransform);
    ///<summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  .</summary>
    ///<returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  .</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.Reference.DigestMethod" />
    ///  property is <see langword="null" />
    ///  .-or- The <see cref="P:System.Security.Cryptography.Xml.Reference.DigestValue" />
    ///  property is <see langword="null" />
    ///  . </exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads a <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  state from an XML element.</summary>
    ///  <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  state. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" />
    ///  parameter does not contain any transforms.-or- The <paramref name="value" />
    ///  parameter contains an unknown transform. </exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the ID of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  .</summary>
    ///<returns>The ID of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  . The default is <see langword="null" />
    ///  .</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>Gets or sets the <see cref="T:System.Uri" />
    ///  of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Uri" />
    ///  of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  .</returns>
    property Uri: string read get_Uri write set_Uri;
    ///<summary>Gets or sets the type of the object being signed.</summary>
    ///<returns>The type of the object being signed.</returns>
    property &Type: string read get_Type write set_Type;
    ///<summary>Gets or sets the digest method Uniform Resource Identifier (URI) of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  .</summary>
    ///<returns>The digest method URI of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  . The default value is "http://www.w3.org/2000/09/xmldsig#sha1".</returns>
    property DigestMethod: string read get_DigestMethod write set_DigestMethod;
    ///<summary>Gets or sets the digest value of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  .</summary>
    ///<returns>The digest value of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  .</returns>
    property DigestValue: TArray<Byte> read get_DigestValue write set_DigestValue;
    ///<summary>Gets the transform chain of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  .</summary>
    ///<returns>The transform chain of the current <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  .</returns>
    property TransformChain: DNTransformChain read get_TransformChain write set_TransformChain;
  end;

  TDNReference = class(TDNGenericImport<DNReferenceClass, DNReference>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNReferenceListClass = interface(DNObjectClass)
  ['{36F6DFA5-BA28-5249-96BA-24643DCCF579}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  class. </summary>
    {class} function init: DNReferenceList;

  end;

  ///<summary>Represents the <see langword="&lt;ReferenceList&gt;" />
  ///  element used in XML encryption. This class cannot be inherited.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.ReferenceList')]
  DNReferenceList = interface(DDN.mscorlib.DNIList)
  ['{BCDD56BB-1E8D-3F2C-BEE0-E43243B00643}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ItemOf(index: Int32): DNEncryptedReference;
    procedure set_ItemOf(index: Int32; value: DNEncryptedReference);
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    ///<summary>Returns an enumerator that iterates through a <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  collection.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  object that can be used to iterate through a <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Determines whether the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  collection contains a specific <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object.</summary>
    ///  <param name="value">The <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object to locate in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  collection. </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object is found in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  collection; otherwise, <see langword="false" />
    ///  . </returns>
    function &Contains(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Determines the index of a specific item in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  collection.</summary>
    ///  <param name="value">The <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object to locate in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  collection.</param>
    ///<returns>The index of <paramref name="value" />
    ///  if found in the collection; otherwise, -1.</returns>
    function IndexOf(value: DDN.mscorlib.DNObject): Int32;
    ///<summary>Inserts a <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object into the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  collection at the specified position.</summary>
    ///  <param name="index">The zero-based index at which <paramref name="value" />
    ///  should be inserted.</param>
    ///  <param name="value">A <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object to insert into the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  collection.</param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="value" />
    ///  parameter is not a <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  object.-or-The <paramref name="value" />
    ///  parameter is not a <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject);
    ///<summary>Removes the <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object at the specified index.</summary>
    ///  <param name="index">The zero-based index of the <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>Returns the <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object at the specified index.</summary>
    ///  <param name="index">The index of the <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object to return.</param>
    ///<returns>The <see cref="T:System.Security.Cryptography.Xml.DataReference" />
    ///  or <see cref="T:System.Security.Cryptography.Xml.KeyReference" />
    ///  object at the specified index.</returns>
    function Item(index: Int32): DNEncryptedReference;
    ///<summary>Copies the elements of the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  object to an array, starting at a specified array index.</summary>
    ///  <param name="array">The one-dimensional <see cref="T:System.Array" />
    ///  object that is the destination of the elements copied from the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  object. The array must have zero-based indexing.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of elements contained in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  object.</summary>
    ///<returns>The number of elements contained in the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  object.</returns>
    property Count: Int32 read get_Count;
    property ItemOf[index: Int32]: DNEncryptedReference read get_ItemOf write set_ItemOf; default;
    ///<summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  object.</summary>
    ///<returns>An object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  object.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>Gets a value that indicates whether access to the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  object is synchronized (thread safe).</summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Security.Cryptography.Xml.ReferenceList" />
    ///  object is synchronized (thread safe); otherwise, <see langword="false" />
    ///  . </returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNReferenceList = class(TDNGenericImport<DNReferenceListClass, DNReferenceList>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C5D1FF7-84D9-58EB-9424-EFCF9097AA71}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  class.</summary>
    {class} function init: DNSignature;

  end;

  ///<summary>Represents the <see langword="&lt;Signature&gt;" />
  ///  element of an XML signature.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.Signature')]
  DNSignature = interface(DDN.mscorlib.DNObject)
  ['{1693EF5C-FC4B-35A7-8423-C2945D7BE194}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_SignedInfo: DNSignedInfo;
    procedure set_SignedInfo(value: DNSignedInfo);
    function get_SignatureValue: TArray<Byte>;
    procedure set_SignatureValue(value: TArray<Byte>);
    function get_KeyInfo: DNKeyInfo;
    procedure set_KeyInfo(value: DNKeyInfo);
    function get_ObjectList: DDN.mscorlib.DNIList;
    procedure set_ObjectList(value: DDN.mscorlib.DNIList);

  { methods } 

    ///<summary>Adds a <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  to the list of objects to be signed.</summary>
    ///  <param name="dataObject">The <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  to be added to the list of objects to be signed. </param>
    procedure AddObject(dataObject: DNDataObject);
    ///<summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  .</summary>
    ///<returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  .</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.Signature.SignedInfo" />
    ///  property is <see langword="null" />
    ///  .-or- The <see cref="P:System.Security.Cryptography.Xml.Signature.SignatureValue" />
    ///  property is <see langword="null" />
    ///  . </exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads a <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  state from an XML element.</summary>
    ///  <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  state. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" />
    ///  parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.Signature.SignatureValue" />
    ///  .-or- The <paramref name="value" />
    ///  parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.Signature.SignedInfo" />
    ///  . </exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the ID of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  .</summary>
    ///<returns>The ID of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  . The default is <see langword="null" />
    ///  .</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  .</returns>
    property SignedInfo: DNSignedInfo read get_SignedInfo write set_SignedInfo;
    ///<summary>Gets or sets the value of the digital signature.</summary>
    ///<returns>A byte array that contains the value of the digital signature.</returns>
    property SignatureValue: TArray<Byte> read get_SignatureValue write set_SignatureValue;
    ///<summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  of the current <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  .</returns>
    property KeyInfo: DNKeyInfo read get_KeyInfo write set_KeyInfo;
    ///<summary>Gets or sets a list of objects to be signed.</summary>
    ///<returns>A list of objects to be signed.</returns>
    property ObjectList: DDN.mscorlib.DNIList read get_ObjectList write set_ObjectList;
  end;

  TDNSignature = class(TDNGenericImport<DNSignatureClass, DNSignature>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNSignedInfoClass = interface(DNObjectClass)
  ['{87B8ADF6-8E82-5AA3-B273-3597227F4754}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  class.</summary>
    {class} function init: DNSignedInfo;

  end;

  ///<summary>Contains information about the canonicalization algorithm and signature algorithm used for the XML signature.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.SignedInfo')]
  DNSignedInfo = interface(DDN.mscorlib.DNICollection)
  ['{2EB50F73-857A-36B6-A280-799AF76E98BE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_CanonicalizationMethod: string;
    procedure set_CanonicalizationMethod(value: string);
    function get_CanonicalizationMethodObject: DNTransform;
    function get_SignatureMethod: string;
    procedure set_SignatureMethod(value: string);
    function get_SignatureLength: string;
    procedure set_SignatureLength(value: string);
    function get_References: DDN.mscorlib.DNArrayList;

  { methods } 

    ///<summary>Returns an enumerator that iterates through the collection of references.</summary>
    ///<returns>An enumerator that iterates through the collection of references.</returns>
    ///<exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Copies the elements of this instance into an <see cref="T:System.Array" />
    ///  object, starting at a specified index in the array.</summary>
    ///  <param name="array">An <see cref="T:System.Array" />
    ///  object that holds the collection's elements. </param>
    ///  <param name="index">The beginning index in the array where the elements are copied. </param>
    ///<exception cref="T:System.NotSupportedException">This method is not supported. </exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  object to the list of references to digest and sign.</summary>
    ///  <param name="reference">The reference to add to the list of references. </param>
    ///<exception cref="T:System.ArgumentNullException">The reference parameter is <see langword="null" />
    ///  .</exception>
    procedure AddReference(reference: DNReference);
    ///<summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</summary>
    ///<returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  instance.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.SignedInfo.SignatureMethod" />
    ///  property is <see langword="null" />
    ///  .-or- The <see cref="P:System.Security.Cryptography.Xml.SignedInfo.References" />
    ///  property is empty. </exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads a <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  state from an XML element.</summary>
    ///  <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  state. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" />
    ///  parameter is not a valid <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  element.-or- The <paramref name="value" />
    ///  parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.SignedInfo.CanonicalizationMethod" />
    ///  property.-or- The <paramref name="value" />
    ///  parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.SignedInfo.SignatureMethod" />
    ///  property.</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of references in the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</summary>
    ///<returns>The number of references in the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</returns>
    ///<exception cref="T:System.NotSupportedException">This property is not supported. </exception>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value that indicates whether the collection is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the collection is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException">This property is not supported. </exception>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>Gets a value that indicates whether the collection is synchronized.</summary>
    ///<returns><see langword="true" />
    ///  if the collection is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException">This property is not supported. </exception>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets an object to use for synchronization.</summary>
    ///<returns>An object to use for synchronization.</returns>
    ///<exception cref="T:System.NotSupportedException">This property is not supported. </exception>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>Gets or sets the ID of the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</summary>
    ///<returns>The ID of the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>Gets or sets the canonicalization algorithm that is used before signing for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</summary>
    ///<returns>The canonicalization algorithm used before signing for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</returns>
    property CanonicalizationMethod: string read get_CanonicalizationMethod write set_CanonicalizationMethod;
    ///<summary>Gets a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object used for canonicalization.</summary>
    ///<returns>A <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object used for canonicalization.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException"><see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  is <see langword="null" />
    ///  .</exception>
    property CanonicalizationMethodObject: DNTransform read get_CanonicalizationMethodObject;
    ///<summary>Gets or sets the name of the algorithm used for signature generation and validation for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</summary>
    ///<returns>The name of the algorithm used for signature generation and validation for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</returns>
    property SignatureMethod: string read get_SignatureMethod write set_SignatureMethod;
    ///<summary>Gets or sets the length of the signature for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</summary>
    ///<returns>The length of the signature for the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</returns>
    property SignatureLength: string read get_SignatureLength write set_SignatureLength;
    ///<summary>Gets a list of the <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  objects of the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</summary>
    ///<returns>A list of the <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  elements of the current <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object.</returns>
    property References: DDN.mscorlib.DNArrayList read get_References;
  end;

  TDNSignedInfo = class(TDNGenericImport<DNSignedInfoClass, DNSignedInfo>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNSignedXmlClass = interface(DDN.mscorlib.DNObjectClass)
  ['{130A794F-4463-5D0A-A4B4-946D847D4B7C}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  class.</summary>
    {class} function init: DNSignedXml; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  class from the specified XML document.</summary>
    ///  <param name="document">The <see cref="T:System.Xml.XmlDocument" />
    ///  object to use to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="document" />
    ///  parameter is <see langword="null" />
    ///  .-or-The <paramref name="document" />
    ///  parameter contains a null <see cref="P:System.Xml.XmlDocument.DocumentElement" />
    ///  property.</exception>
    {class} function init(document: DDN.System.Xml.DNXmlDocument): DNSignedXml; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  class from the specified <see cref="T:System.Xml.XmlElement" />
    ///  object.</summary>
    ///  <param name="elem">The <see cref="T:System.Xml.XmlElement" />
    ///  object to use to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="elem" />
    ///  parameter is <see langword="null" />
    ///  . </exception>
    {class} function init(elem: DDN.System.Xml.DNXmlElement): DNSignedXml; overload;

  { static propertys } 

    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. The defaults is a <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Provides a wrapper on a core XML signature object to facilitate creating XML signatures.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.SignedXml')]
  DNSignedXml = interface(DDN.mscorlib.DNObject)
  ['{C1A1D953-CC23-3DA9-A149-1AB9DB11E526}']
  { getters & setters } 

    function get_SigningKeyName: string;
    procedure set_SigningKeyName(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_SignatureFormatValidator: DDN.mscorlib.DNFunc<DNSignedXml, Boolean>;
    procedure set_SignatureFormatValidator(value: DDN.mscorlib.DNFunc<DNSignedXml, Boolean>);
    function get_SafeCanonicalizationMethods: DDN.mscorlib.DNCollection<string>;
    function get_SigningKey: DDN.mscorlib.DNAsymmetricAlgorithm;
    procedure set_SigningKey(value: DDN.mscorlib.DNAsymmetricAlgorithm);
    function get_EncryptedXml: DNEncryptedXml;
    procedure set_EncryptedXml(value: DNEncryptedXml);
    function get_Signature: DNSignature;
    function get_SignedInfo: DNSignedInfo;
    function get_SignatureMethod: string;
    function get_SignatureLength: string;
    function get_SignatureValue: TArray<Byte>;
    function get_KeyInfo: DNKeyInfo;
    procedure set_KeyInfo(value: DNKeyInfo);

  { methods } 

    ///<summary>Returns the XML representation of a <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</summary>
    ///<returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  object.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" />
    ///  property is <see langword="null" />
    ///  .-or- The <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" />
    ///  property is <see langword="null" />
    ///  . </exception>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>Loads a <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  state from an XML element.</summary>
    ///  <param name="value">The XML element to load the <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  state from. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" />
    ///  parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureValue" />
    ///  property.-or- The <paramref name="value" />
    ///  parameter does not contain a valid <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignedInfo" />
    ///  property.</exception>
    procedure LoadXml(value: DDN.System.Xml.DNXmlElement);
    ///<summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  object to the <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object that describes a digest method, digest value, and transform to use for creating an XML digital signature.</summary>
    ///  <param name="reference">The  <see cref="T:System.Security.Cryptography.Xml.Reference" />
    ///  object that describes a digest method, digest value, and transform to use for creating an XML digital signature.</param>
    procedure AddReference(reference: DNReference);
    ///<summary>Adds a <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  object to the list of objects to be signed.</summary>
    ///  <param name="dataObject">The <see cref="T:System.Security.Cryptography.Xml.DataObject" />
    ///  object to add to the list of objects to be signed. </param>
    procedure AddObject(dataObject: DNDataObject);
    ///<summary>Determines whether the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property verifies using the public key in the signature.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property verifies; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" />
    ///  property of the public key in the signature does not match the <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" />
    ///  property.-or- The signature description could not be created.-or The hash algorithm could not be created. </exception>
    function CheckSignature: Boolean; overload;
    function CheckSignatureReturningKey(out signingKey: DDN.mscorlib.DNAsymmetricAlgorithm): Boolean;
    ///<summary>Returns the <see cref="T:System.Xml.XmlElement" />
    ///  object with the specified ID from the specified <see cref="T:System.Xml.XmlDocument" />
    ///  object.</summary>
    ///  <param name="document">The <see cref="T:System.Xml.XmlDocument" />
    ///  object to retrieve the <see cref="T:System.Xml.XmlElement" />
    ///  object from.</param>
    ///  <param name="idValue">The ID of the <see cref="T:System.Xml.XmlElement" />
    ///  object to retrieve from the <see cref="T:System.Xml.XmlDocument" />
    ///  object.</param>
    ///<returns>The <see cref="T:System.Xml.XmlElement" />
    ///  object with the specified ID from the specified <see cref="T:System.Xml.XmlDocument" />
    ///  object, or <see langword="null" />
    ///  if it could not be found.</returns>
    function GetIdElement(document: DDN.System.Xml.DNXmlDocument; idValue: string): DDN.System.Xml.DNXmlElement;
    ///<summary>Determines whether the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property verifies for the specified key.</summary>
    ///  <param name="key">The implementation of the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />
    ///  property that holds the key to be used to verify the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property. </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property verifies for the specified key; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="key" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm" />
    ///  property of the <paramref name="key" />
    ///  parameter does not match the <see cref="P:System.Security.Cryptography.Xml.SignedXml.SignatureMethod" />
    ///  property.-or- The signature description could not be created.-or The hash algorithm could not be created. </exception>
    function CheckSignature(key: DDN.mscorlib.DNAsymmetricAlgorithm): Boolean; overload;
    ///<summary>Determines whether the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property verifies for the specified message authentication code (MAC) algorithm.</summary>
    ///  <param name="macAlg">The implementation of <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />
    ///  that holds the MAC to be used to verify the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property. </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property verifies for the specified MAC; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="macAlg" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" />
    ///  property of the specified <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />
    ///  object is not valid.-or- The <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property is <see langword="null" />
    ///  .-or- The cryptographic transform used to check the signature could not be created. </exception>
    function CheckSignature(macAlg: DDN.mscorlib.DNKeyedHashAlgorithm): Boolean; overload;
    ///<summary>Determines whether the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property verifies for the specified <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  object and, optionally, whether the certificate is valid.</summary>
    ///  <param name="certificate">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  object to use to verify the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property.</param>
    ///  <param name="verifySignatureOnly"><see langword="true" />
    ///  to verify the signature only; <see langword="false" />
    ///  to verify both the signature and certificate.</param>
    ///<returns><see langword="true" />
    ///  if the signature is valid; otherwise, <see langword="false" />
    ///  . -or-
    ///<see langword="true" />
    ///  if the signature and certificate are valid; otherwise, <see langword="false" />
    ///  . </returns>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="certificate" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">A signature description could not be created for the <paramref name="certificate" />
    ///  parameter.</exception>
    function CheckSignature(certificate: DDN.System.DNX509Certificate2; verifySignatureOnly: Boolean): Boolean; overload;
    ///<summary>Computes an XML digital signature.</summary>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" />
    ///  property is <see langword="null" />
    ///  .-or- The <see cref="P:System.Security.Cryptography.Xml.SignedXml.SigningKey" />
    ///  property is not a <see cref="T:System.Security.Cryptography.DSA" />
    ///  object or <see cref="T:System.Security.Cryptography.RSA" />
    ///  object.-or- The key could not be loaded. </exception>
    procedure ComputeSignature; overload;
    ///<summary>Computes an XML digital signature using the specified message authentication code (MAC) algorithm.</summary>
    ///  <param name="macAlg">A <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />
    ///  object that holds the MAC to be used to compute the value of the <see cref="P:System.Security.Cryptography.Xml.SignedXml.Signature" />
    ///  property. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="macAlg" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />
    ///  object specified by the <paramref name="macAlg" />
    ///  parameter is not an instance of <see cref="T:System.Security.Cryptography.HMACSHA1" />
    ///  .-or- The <see cref="P:System.Security.Cryptography.HashAlgorithm.HashSize" />
    ///  property of the specified <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />
    ///  object is not valid.-or- The cryptographic transform used to check the signature could not be created. </exception>
    procedure ComputeSignature(macAlg: DDN.mscorlib.DNKeyedHashAlgorithm); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the installed key to be used for signing the <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</summary>
    ///<returns>The name of the installed key to be used for signing the <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</returns>
    property SigningKeyName: string read get_SigningKeyName write set_SigningKeyName;
    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. The defaults is a <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    ///<summary>Gets a delegate that will be called to validate the format (not the cryptographic security) of an XML signature.</summary>
    ///<returns><see langword="true" />
    ///  if the format is acceptable; otherwise, <see langword="false" />
    ///  .</returns>
    property SignatureFormatValidator: DDN.mscorlib.DNFunc<DNSignedXml, Boolean> read get_SignatureFormatValidator write set_SignatureFormatValidator;
    ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Gets the names of methods whose canonicalization algorithms are explicitly allowed. </summary>
    ///<returns>A collection of the names of methods that safely produce canonical XML. </returns>
    property SafeCanonicalizationMethods: DDN.mscorlib.DNCollection<string> read get_SafeCanonicalizationMethods;
    ///<summary>Gets or sets the asymmetric algorithm key used for signing a <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</summary>
    ///<returns>The asymmetric algorithm key used for signing the <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</returns>
    property SigningKey: DDN.mscorlib.DNAsymmetricAlgorithm read get_SigningKey write set_SigningKey;
    ///<summary>Gets or sets an <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  object that defines the XML encryption processing rules.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  object that defines the XML encryption processing rules.</returns>
    property EncryptedXml: DNEncryptedXml read get_EncryptedXml write set_EncryptedXml;
    ///<summary>Gets the <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Security.Cryptography.Xml.Signature" />
    ///  object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</returns>
    property Signature: DNSignature read get_Signature;
    ///<summary>Gets the <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Security.Cryptography.Xml.SignedInfo" />
    ///  object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</returns>
    property SignedInfo: DNSignedInfo read get_SignedInfo;
    ///<summary>Gets the signature method of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</summary>
    ///<returns>The signature method of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</returns>
    property SignatureMethod: string read get_SignatureMethod;
    ///<summary>Gets the length of the signature for the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</summary>
    ///<returns>The length of the signature for the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</returns>
    property SignatureLength: string read get_SignatureLength;
    ///<summary>Gets the signature value of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</summary>
    ///<returns>A byte array that contains the signature value of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</returns>
    property SignatureValue: TArray<Byte> read get_SignatureValue;
    ///<summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Security.Cryptography.Xml.KeyInfo" />
    ///  object of the current <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  object.</returns>
    property KeyInfo: DNKeyInfo read get_KeyInfo write set_KeyInfo;
  end;

  TDNSignedXml = class(TDNGenericImport<DNSignedXmlClass, DNSignedXml>)
  public const
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard namespace for XML digital signatures. This field is constant.</summary>
   XmlDsigNamespaceUrl = 'http://www.w3.org/2000/09/xmldsig#';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard minimal canonicalization algorithm for XML digital signatures. This field is constant.</summary>
   XmlDsigMinimalCanonicalizationUrl = 'http://www.w3.org/2000/09/xmldsig#minimal';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard canonicalization algorithm for XML digital signatures. This field is constant.</summary>
   XmlDsigCanonicalizationUrl = 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard canonicalization algorithm for XML digital signatures and includes comments. This field is constant.</summary>
   XmlDsigCanonicalizationWithCommentsUrl = 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.SHA1" />
    ///  digest method for XML digital signatures. This field is constant.</summary>
   XmlDsigSHA1Url = 'http://www.w3.org/2000/09/xmldsig#sha1';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.DSA" />
    ///  algorithm for XML digital signatures. This field is constant.</summary>
   XmlDsigDSAUrl = 'http://www.w3.org/2000/09/xmldsig#dsa-sha1';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.RSA" />
    ///  signature method for XML digital signatures. This field is constant.</summary>
   XmlDsigRSASHA1Url = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.HMACSHA1" />
    ///  algorithm for XML digital signatures. This field is constant.</summary>
   XmlDsigHMACSHA1Url = 'http://www.w3.org/2000/09/xmldsig#hmac-sha1';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.SHA256" />
    ///  digest method for XML digital signatures. This field is constant.</summary>
   XmlDsigSHA256Url = 'http://www.w3.org/2001/04/xmlenc#sha256';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the  <see cref="T:System.Security.Cryptography.RSA" />
    ///  SHA-256 signature method variation for XML digital signatures. This field is constant.</summary>
   XmlDsigRSASHA256Url = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.SHA384" />
    ///  digest method for XML digital signatures. This field is constant.</summary>
   XmlDsigSHA384Url = 'http://www.w3.org/2001/04/xmldsig-more#sha384';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the  <see cref="T:System.Security.Cryptography.RSA" />
    ///  SHA-384 signature method variation for XML digital signatures. This field is constant.</summary>
   XmlDsigRSASHA384Url = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the standard <see cref="T:System.Security.Cryptography.SHA512" />
    ///  digest method for XML digital signatures. This field is constant.</summary>
   XmlDsigSHA512Url = 'http://www.w3.org/2001/04/xmlenc#sha512';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the  <see cref="T:System.Security.Cryptography.RSA" />
    ///  SHA-512 signature method variation for XML digital signatures. This field is constant.</summary>
   XmlDsigRSASHA512Url = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the Canonical XML transformation. This field is constant.</summary>
   XmlDsigC14NTransformUrl = 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the Canonical XML transformation, with comments. This field is constant.</summary>
   XmlDsigC14NWithCommentsTransformUrl = 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments';
    ///<summary>Represents the Uniform Resource Identifier (URI) for exclusive XML canonicalization. This field is constant.</summary>
   XmlDsigExcC14NTransformUrl = 'http://www.w3.org/2001/10/xml-exc-c14n#';
    ///<summary>Represents the Uniform Resource Identifier (URI) for exclusive XML canonicalization, with comments. This field is constant.</summary>
   XmlDsigExcC14NWithCommentsTransformUrl = 'http://www.w3.org/2001/10/xml-exc-c14n#WithComments';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the base 64 transformation. This field is constant.</summary>
   XmlDsigBase64TransformUrl = 'http://www.w3.org/2000/09/xmldsig#base64';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the XML Path Language (XPath). This field is constant.</summary>
   XmlDsigXPathTransformUrl = 'http://www.w3.org/TR/1999/REC-xpath-19991116';
    ///<summary>Represents the Uniform Resource Identifier (URI) for XSLT transformations. This field is constant.</summary>
   XmlDsigXsltTransformUrl = 'http://www.w3.org/TR/1999/REC-xslt-19991116';
    ///<summary>Represents the Uniform Resource Identifier (URI) for enveloped signature transformation. This field is constant.</summary>
   XmlDsigEnvelopedSignatureTransformUrl = 'http://www.w3.org/2000/09/xmldsig#enveloped-signature';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the XML mode decryption transformation. This field is constant.</summary>
   XmlDecryptionTransformUrl = 'http://www.w3.org/2002/07/decrypt#XML';
    ///<summary>Represents the Uniform Resource Identifier (URI) for the license transform algorithm used to normalize XrML licenses for signatures.</summary>
   XmlLicenseTransformUrl = 'urn:mpeg:mpeg21:2003:01-REL-R-NS:licenseTransform';
  end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNTransformClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9639F76D-E045-542E-BB01-D805832B15F7}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { static propertys } 

    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Represents the abstract base class from which all <see langword="&lt;Transform&gt;" />
  ///  elements that can be used in an XML digital signature derive.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.Transform')]
  DNTransform = interface(DDN.mscorlib.DNObject)
  ['{FCC012EE-C0D6-3B96-BD98-4A0A4B09DA94}']
  { getters & setters } 

    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>When overridden in a derived class, returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object. </summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Returns the XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>The XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    ///<summary>When overridden in a derived class, parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  object as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element and configures the internal state of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object to match the <see langword="&lt;Transform&gt;" />
    ///  element.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  object that specifies transform-specific content for the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object. </param>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>When overridden in a derived class, loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object. </param>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    ///<summary>When overridden in a derived class, returns the output of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>When overridden in a derived class, returns the output of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object of the specified type.</summary>
    ///  <param name="type">The type of the output to return. This must be one of the types in the <see cref="P:System.Security.Cryptography.Xml.Transform.OutputTypes" />
    ///  property. </param>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object as an object of the specified type.</returns>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the Uniform Resource Identifier (URI) that identifies the algorithm performed by the current transform.</summary>
    ///<returns>The URI that identifies the algorithm performed by the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property Algorithm: string read get_Algorithm write set_Algorithm;
    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    ///<summary>When overridden in a derived class, gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>When overridden in a derived class, gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.Transform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object; only objects of one of these types are returned from the <see cref="M:System.Security.Cryptography.Xml.Transform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    ///<summary>Gets or sets an <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running. </summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running.</returns>
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    ///<summary>Gets or sets a <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature. </summary>
    ///<returns>A <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.Transform.PropagatedNamespaces" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNTransform = class(TDNGenericImport<DNTransformClass, DNTransform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNXmlDecryptionTransformClass = interface(DNTransformClass)
  ['{C77D5C80-A847-5889-A9AF-C8D97E691D2A}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  class. </summary>
    {class} function init: DNXmlDecryptionTransform;

  { static propertys } 

    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Specifies the order of XML Digital Signature and XML Encryption operations when both are performed on the same document.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.XmlDecryptionTransform')]
  DNXmlDecryptionTransform = interface(DNTransform)
  ['{25256B07-B936-38A9-A6A6-D70FE943EB4F}']
  { getters & setters } 

    function get_EncryptedXml: DNEncryptedXml;
    procedure set_EncryptedXml(value: DNEncryptedXml);
    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>Adds a Uniform Resource Identifier (URI) to exclude from processing.</summary>
    ///  <param name="uri">A Uniform Resource Identifier (URI) to exclude from processing</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="uri" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure AddExceptUri(uri: string);
    ///<summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  object as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element and configures the internal state of the current <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  object to match the <see langword="&lt;Transform&gt;" />
    ///  element.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  object that specifies transform-specific content for the current <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  object.</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="nodeList" />
    ///  parameter is <see langword="null" />
    ///  .-or-The Uniform Resource Identifier (URI) value of an <see cref="T:System.Xml.XmlNode" />
    ///  object in <paramref name="nodeList" />
    ///  was not found.-or-The length of the URI value of an <see cref="T:System.Xml.XmlNode" />
    ///  object in <paramref name="nodeList" />
    ///  is 0. -or-The first character of the URI value of an <see cref="T:System.Xml.XmlNode" />
    ///  object in <paramref name="nodeList" />
    ///  is not '#'.  </exception>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>When overridden in a derived class, loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  object.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="obj" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</summary>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">A decryption key could not be found.</exception>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</summary>
    ///  <param name="type">The type of the output to return. <see cref="T:System.Xml.XmlNodeList" />
    ///  is the only valid type for this parameter.</param>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="type" />
    ///  parameter is not an <see cref="T:System.Xml.XmlNodeList" />
    ///  object.</exception>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>When overridden in a derived class, returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object. </summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Returns the XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>The XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  object that contains information about the keys necessary to decrypt an XML document.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" />
    ///  object that contains information about the keys necessary to decrypt an XML document.</returns>
    property EncryptedXml: DNEncryptedXml read get_EncryptedXml write set_EncryptedXml;
    ///<summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDecryptionTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  object.</summary>
    ///<returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDecryptionTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDecryptionTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  object; only objects of one of these types are returned from the <see cref="M:System.Security.Cryptography.Xml.XmlDecryptionTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDecryptionTransform" />
    ///  object.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    ///<summary>Gets or sets the Uniform Resource Identifier (URI) that identifies the algorithm performed by the current transform.</summary>
    ///<returns>The URI that identifies the algorithm performed by the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property Algorithm: string read get_Algorithm write set_Algorithm;
    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    ///<summary>Gets or sets an <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running. </summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running.</returns>
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    ///<summary>Gets or sets a <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature. </summary>
    ///<returns>A <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.Transform.PropagatedNamespaces" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNXmlDecryptionTransform = class(TDNGenericImport<DNXmlDecryptionTransformClass, DNXmlDecryptionTransform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNXmlDsigBase64TransformClass = interface(DNTransformClass)
  ['{20CC692A-E057-580E-AFD7-F0FACFC88FE1}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  class.</summary>
    {class} function init: DNXmlDsigBase64Transform;

  { static propertys } 

    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Represents the <see langword="Base64" />
  ///  decoding transform as defined in Section 6.6.2 of the XMLDSIG specification.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.XmlDsigBase64Transform')]
  DNXmlDsigBase64Transform = interface(DNTransform)
  ['{CC6B5E88-1E4A-3753-A872-B6AD4885E573}']
  { getters & setters } 

    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object.</summary>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object.</returns>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object of type <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="type">The type of the output to return. <see cref="T:System.IO.Stream" />
    ///  is the only valid type for this parameter. </param>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object of type <see cref="T:System.IO.Stream" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="type" />
    ///  parameter is not a <see cref="T:System.IO.Stream" />
    ///  object. </exception>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  object as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element; this method is not supported because the <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object has no inner XML elements.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  object to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object. </param>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>Loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="obj" />
    ///  parameter is a <see cref="T:System.IO.Stream" />
    ///  and it is <see langword="null" />
    ///  . </exception>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    ///<summary>When overridden in a derived class, returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object. </summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Returns the XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>The XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object.</summary>
    ///<returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object; only objects of one of these types are returned from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigBase64Transform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigBase64Transform" />
    ///  object.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    ///<summary>Gets or sets the Uniform Resource Identifier (URI) that identifies the algorithm performed by the current transform.</summary>
    ///<returns>The URI that identifies the algorithm performed by the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property Algorithm: string read get_Algorithm write set_Algorithm;
    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    ///<summary>Gets or sets an <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running. </summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running.</returns>
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    ///<summary>Gets or sets a <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature. </summary>
    ///<returns>A <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.Transform.PropagatedNamespaces" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNXmlDsigBase64Transform = class(TDNGenericImport<DNXmlDsigBase64TransformClass, DNXmlDsigBase64Transform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNXmlDsigC14NTransformClass = interface(DNTransformClass)
  ['{4215E3DB-7F42-5695-950B-6103F62AEE24}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  class.</summary>
    {class} function init: DNXmlDsigC14NTransform; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  class with comments, if specified.</summary>
    ///  <param name="includeComments"><see langword="true" />
    ///  to include comments; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(includeComments: Boolean): DNXmlDsigC14NTransform; overload;

  { static propertys } 

    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Represents the C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), without comments.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.XmlDsigC14NTransform')]
  DNXmlDsigC14NTransform = interface(DNTransform)
  ['{5D53B79A-51F8-3501-AD4A-58C9EC56C5E1}']
  { getters & setters } 

    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</summary>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</returns>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object of type <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="type">The type of the output to return. <see cref="T:System.IO.Stream" />
    ///  is the only valid type for this parameter. </param>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object of type <see cref="T:System.IO.Stream" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="type" />
    ///  parameter is not a <see cref="T:System.IO.Stream" />
    ///  object.</exception>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the digest associated with an <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object. </summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with an <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  object as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element; this method is not supported because this element has no inner XML elements.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  object to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object. </param>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>Loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="obj" />
    ///  parameter is a <see cref="T:System.IO.Stream" />
    ///  object and it is <see langword="null" />
    ///  . </exception>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    ///<summary>Returns the XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>The XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</summary>
    ///<returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object; the <see cref="M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object return only objects of one of these types.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    ///<summary>Gets or sets the Uniform Resource Identifier (URI) that identifies the algorithm performed by the current transform.</summary>
    ///<returns>The URI that identifies the algorithm performed by the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property Algorithm: string read get_Algorithm write set_Algorithm;
    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    ///<summary>Gets or sets an <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running. </summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running.</returns>
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    ///<summary>Gets or sets a <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature. </summary>
    ///<returns>A <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.Transform.PropagatedNamespaces" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNXmlDsigC14NTransform = class(TDNGenericImport<DNXmlDsigC14NTransformClass, DNXmlDsigC14NTransform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNXmlDsigC14NWithCommentsTransformClass = interface(DNXmlDsigC14NTransformClass)
  ['{E1F18D8E-7B16-5E64-9837-D1AAB5C0AF7A}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform" />
    ///  class.</summary>
    {class} function init: DNXmlDsigC14NWithCommentsTransform;

  { static propertys } 

    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Represents the C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), with comments.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform')]
  DNXmlDsigC14NWithCommentsTransform = interface(DNXmlDsigC14NTransform)
  ['{8A2CD598-015C-3B4D-A54A-DD15B27F9468}']
  { getters & setters } 

    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</summary>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</returns>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object of type <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="type">The type of the output to return. <see cref="T:System.IO.Stream" />
    ///  is the only valid type for this parameter. </param>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object of type <see cref="T:System.IO.Stream" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="type" />
    ///  parameter is not a <see cref="T:System.IO.Stream" />
    ///  object.</exception>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the digest associated with an <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object. </summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with an <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  object as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element; this method is not supported because this element has no inner XML elements.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  object to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object. </param>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>Loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="obj" />
    ///  parameter is a <see cref="T:System.IO.Stream" />
    ///  object and it is <see langword="null" />
    ///  . </exception>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</summary>
    ///<returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object; the <see cref="M:System.Security.Cryptography.Xml.XmlDsigC14NTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigC14NTransform" />
    ///  object return only objects of one of these types.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    property Algorithm: string read get_Algorithm write set_Algorithm;
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNXmlDsigC14NWithCommentsTransform = class(TDNGenericImport<DNXmlDsigC14NWithCommentsTransformClass, DNXmlDsigC14NWithCommentsTransform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNXmlDsigEnvelopedSignatureTransformClass = interface(DNTransformClass)
  ['{9A66ACE3-E412-50EF-A98D-443DCCBE3AC2}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  class.</summary>
    {class} function init: DNXmlDsigEnvelopedSignatureTransform; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  class with comments, if specified.</summary>
    ///  <param name="includeComments"><see langword="true" />
    ///  to include comments; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(includeComments: Boolean): DNXmlDsigEnvelopedSignatureTransform; overload;

  { static propertys } 

    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Represents the enveloped signature transform for an XML digital signature as defined by the W3C.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform')]
  DNXmlDsigEnvelopedSignatureTransform = interface(DNTransform)
  ['{AC3C0557-1DB7-3B2A-9C15-6A40B07CF03B}']
  { getters & setters } 

    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element and configures the internal state of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object to match the <see langword="&lt;Transform&gt;" />
    ///  element.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object. </param>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>Loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="obj" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.Cryptography.CryptographicException">The containing XML document is <see langword="null" />
    ///  .</exception>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</summary>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</returns>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The containing XML document is <see langword="null" />
    ///  .</exception>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object of type <see cref="T:System.Xml.XmlNodeList" />
    ///  .</summary>
    ///  <param name="type">The type of the output to return. <see cref="T:System.Xml.XmlNodeList" />
    ///  is the only valid type for this parameter. </param>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object of type <see cref="T:System.Xml.XmlNodeList" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="type" />
    ///  parameter is not an <see cref="T:System.Xml.XmlNodeList" />
    ///  object.</exception>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>When overridden in a derived class, returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object. </summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Returns the XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>The XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</summary>
    ///<returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object; only objects of one of these types are returned from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform" />
    ///  object.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    ///<summary>Gets or sets the Uniform Resource Identifier (URI) that identifies the algorithm performed by the current transform.</summary>
    ///<returns>The URI that identifies the algorithm performed by the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property Algorithm: string read get_Algorithm write set_Algorithm;
    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    ///<summary>Gets or sets an <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running. </summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running.</returns>
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    ///<summary>Gets or sets a <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature. </summary>
    ///<returns>A <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.Transform.PropagatedNamespaces" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNXmlDsigEnvelopedSignatureTransform = class(TDNGenericImport<DNXmlDsigEnvelopedSignatureTransformClass, DNXmlDsigEnvelopedSignatureTransform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNXmlDsigExcC14NTransformClass = interface(DNTransformClass)
  ['{D3C6537A-DF78-59B0-9C95-F0BFC8084C94}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  class. </summary>
    {class} function init: DNXmlDsigExcC14NTransform; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  class specifying a value that determines whether to include comments. </summary>
    ///  <param name="includeComments"><see langword="true" />
    ///  to include comments; otherwise, <see langword="false" />
    ///  .</param>
    {class} function init(includeComments: Boolean): DNXmlDsigExcC14NTransform; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  class specifying a list of namespace prefixes to canonicalize using the standard canonicalization algorithm. </summary>
    ///  <param name="inclusiveNamespacesPrefixList">The namespace prefixes to canonicalize using the standard canonicalization algorithm.</param>
    {class} function init(inclusiveNamespacesPrefixList: string): DNXmlDsigExcC14NTransform; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  class specifying whether to include comments, and specifying a list of namespace prefixes. </summary>
    ///  <param name="includeComments"><see langword="true" />
    ///  to include comments; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="inclusiveNamespacesPrefixList">The namespace prefixes to canonicalize using the standard canonicalization algorithm.</param>
    {class} function init(includeComments: Boolean; inclusiveNamespacesPrefixList: string): DNXmlDsigExcC14NTransform; overload;

  { static propertys } 

    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Represents the exclusive C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), without comments.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.XmlDsigExcC14NTransform')]
  DNXmlDsigExcC14NTransform = interface(DNTransform)
  ['{330A5D1D-DD87-3D52-A8F6-291C8E8CA290}']
  { getters & setters } 

    function get_InclusiveNamespacesPrefixList: string;
    procedure set_InclusiveNamespacesPrefixList(value: string);
    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object</summary>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</returns>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object as an object of the specified type.</summary>
    ///  <param name="type">The type of the output to return. This must be one of the types in the <see cref="P:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.OutputTypes" />
    ///  property.</param>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object as an object of the specified type.</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="type" />
    ///  parameter is not a <see cref="T:System.IO.Stream" />
    ///  object.-or-The <paramref name="type" />
    ///  parameter does not derive from a <see cref="T:System.IO.Stream" />
    ///  object.</exception>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  object as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element and configures the internal state of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object to match the <see langword="&lt;Transform&gt;" />
    ///  element.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  object that specifies transform-specific content for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</param>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>When overridden in a derived class, loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="obj" />
    ///  parameter is not a <see cref="T:System.IO.Stream" />
    ///  object.-or-The <paramref name="obj" />
    ///  parameter is not an <see cref="T:System.Xml.XmlDocument" />
    ///  object.-or-The <paramref name="obj" />
    ///  parameter is not an <see cref="T:System.Xml.XmlNodeList" />
    ///  object.</exception>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    ///<summary>Returns the XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>The XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a string that contains namespace prefixes to canonicalize using the standard canonicalization algorithm. </summary>
    ///<returns>A string that contains namespace prefixes to canonicalize using the standard canonicalization algorithm.</returns>
    property InclusiveNamespacesPrefixList: string read get_InclusiveNamespacesPrefixList write set_InclusiveNamespacesPrefixList;
    ///<summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</summary>
    ///<returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object; the <see cref="Overload:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object return only objects of one of these types.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    ///<summary>Gets or sets the Uniform Resource Identifier (URI) that identifies the algorithm performed by the current transform.</summary>
    ///<returns>The URI that identifies the algorithm performed by the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property Algorithm: string read get_Algorithm write set_Algorithm;
    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    ///<summary>Gets or sets an <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running. </summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running.</returns>
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    ///<summary>Gets or sets a <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature. </summary>
    ///<returns>A <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.Transform.PropagatedNamespaces" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNXmlDsigExcC14NTransform = class(TDNGenericImport<DNXmlDsigExcC14NTransformClass, DNXmlDsigExcC14NTransform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNXmlDsigExcC14NWithCommentsTransformClass = interface(DNXmlDsigExcC14NTransformClass)
  ['{48111CF4-C284-550D-AEAC-BCCAD1B7D430}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform" />
    ///  class. </summary>
    {class} function init: DNXmlDsigExcC14NWithCommentsTransform; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform" />
    ///  class specifying a list of namespace prefixes to canonicalize using the standard canonicalization algorithm.</summary>
    ///  <param name="inclusiveNamespacesPrefixList">The namespace prefixes to canonicalize using the standard canonicalization algorithm.</param>
    {class} function init(inclusiveNamespacesPrefixList: string): DNXmlDsigExcC14NWithCommentsTransform; overload;

  { static propertys } 

    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Represents the exclusive C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), with comments.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform')]
  DNXmlDsigExcC14NWithCommentsTransform = interface(DNXmlDsigExcC14NTransform)
  ['{5EEAA1EA-F3A2-322C-B534-A4A63085BDBB}']
  { getters & setters } 

    function get_InclusiveNamespacesPrefixList: string;
    procedure set_InclusiveNamespacesPrefixList(value: string);
    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object</summary>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</returns>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object as an object of the specified type.</summary>
    ///  <param name="type">The type of the output to return. This must be one of the types in the <see cref="P:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.OutputTypes" />
    ///  property.</param>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object as an object of the specified type.</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="type" />
    ///  parameter is not a <see cref="T:System.IO.Stream" />
    ///  object.-or-The <paramref name="type" />
    ///  parameter does not derive from a <see cref="T:System.IO.Stream" />
    ///  object.</exception>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  object as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element and configures the internal state of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object to match the <see langword="&lt;Transform&gt;" />
    ///  element.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  object that specifies transform-specific content for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</param>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>When overridden in a derived class, loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="obj" />
    ///  parameter is not a <see cref="T:System.IO.Stream" />
    ///  object.-or-The <paramref name="obj" />
    ///  parameter is not an <see cref="T:System.Xml.XmlDocument" />
    ///  object.-or-The <paramref name="obj" />
    ///  parameter is not an <see cref="T:System.Xml.XmlNodeList" />
    ///  object.</exception>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a string that contains namespace prefixes to canonicalize using the standard canonicalization algorithm. </summary>
    ///<returns>A string that contains namespace prefixes to canonicalize using the standard canonicalization algorithm.</returns>
    property InclusiveNamespacesPrefixList: string read get_InclusiveNamespacesPrefixList write set_InclusiveNamespacesPrefixList;
    ///<summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</summary>
    ///<returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object; the <see cref="Overload:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform" />
    ///  object return only objects of one of these types.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    property Algorithm: string read get_Algorithm write set_Algorithm;
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNXmlDsigExcC14NWithCommentsTransform = class(TDNGenericImport<DNXmlDsigExcC14NWithCommentsTransformClass, DNXmlDsigExcC14NWithCommentsTransform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNXmlDsigXPathTransformClass = interface(DNTransformClass)
  ['{0F5878B6-A1C5-546E-9BBD-E736BC97F9CC}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  class.</summary>
    {class} function init: DNXmlDsigXPathTransform;

  { static propertys } 

    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Represents the XPath transform for a digital signature as defined by the W3C.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.XmlDsigXPathTransform')]
  DNXmlDsigXPathTransform = interface(DNTransform)
  ['{8A024016-CC3D-3FD0-A9AD-5E64370CBFFE}']
  { getters & setters } 

    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  object as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element and configures the internal state of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object to match the <see langword="&lt;Transform&gt;" />
    ///  element.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  object to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object. </param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="nodeList" />
    ///  parameter is <see langword="null" />
    ///  .-or- The <paramref name="nodeList" />
    ///  parameter does not contain an <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  element. </exception>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>Loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object. </param>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object.</summary>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object.</returns>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object of type <see cref="T:System.Xml.XmlNodeList" />
    ///  .</summary>
    ///  <param name="type">The type of the output to return. <see cref="T:System.Xml.XmlNodeList" />
    ///  is the only valid type for this parameter. </param>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object of type <see cref="T:System.Xml.XmlNodeList" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="type" />
    ///  parameter is not an <see cref="T:System.Xml.XmlNodeList" />
    ///  object.</exception>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>When overridden in a derived class, returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object. </summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Returns the XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>The XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object.</summary>
    ///<returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object; the <see cref="M:System.Security.Cryptography.Xml.XmlDsigXPathTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXPathTransform" />
    ///  object return only objects of one of these types.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    ///<summary>Gets or sets the Uniform Resource Identifier (URI) that identifies the algorithm performed by the current transform.</summary>
    ///<returns>The URI that identifies the algorithm performed by the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property Algorithm: string read get_Algorithm write set_Algorithm;
    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    ///<summary>Gets or sets an <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running. </summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running.</returns>
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    ///<summary>Gets or sets a <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature. </summary>
    ///<returns>A <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.Transform.PropagatedNamespaces" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNXmlDsigXPathTransform = class(TDNGenericImport<DNXmlDsigXPathTransformClass, DNXmlDsigXPathTransform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNXmlDsigXsltTransformClass = interface(DNTransformClass)
  ['{7EA941B3-2F1E-58E1-8D0F-CA6544FD17A5}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  class.</summary>
    {class} function init: DNXmlDsigXsltTransform; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  class with comments, if specified.</summary>
    ///  <param name="includeComments"><see langword="true" />
    ///  to include comments; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(includeComments: Boolean): DNXmlDsigXsltTransform; overload;

  { static propertys } 

    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Represents the XSLT transform for a digital signature as defined by the W3C.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.XmlDsigXsltTransform')]
  DNXmlDsigXsltTransform = interface(DNTransform)
  ['{0C0220F2-7A67-3D12-8159-6516E01FA7E4}']
  { getters & setters } 

    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object of type <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="type">The type of the output to return. <see cref="T:System.IO.Stream" />
    ///  is the only valid type for this parameter. </param>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object of type <see cref="T:System.IO.Stream" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="type" />
    ///  parameter is not a <see cref="T:System.IO.Stream" />
    ///  object.</exception>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  object as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element and configures the internal state of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object to match the <see langword="&lt;Transform&gt;" />
    ///  element.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  object that encapsulates an XSLT style sheet to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object. This style sheet is applied to the document loaded by the <see cref="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput(System.Object)" />
    ///  method. </param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="nodeList" />
    ///  parameter is <see langword="null" />
    ///  .-or- The <paramref name="nodeList" />
    ///  parameter does not contain an <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object. </exception>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>Loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object. </param>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    ///<summary>Returns the output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object.</summary>
    ///<returns>The output of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object.</returns>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>When overridden in a derived class, returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object. </summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Returns the XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>The XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an array of types that are valid inputs to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object.</summary>
    ///<returns>An array of valid input types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object; you can pass only objects of one of these types to the <see cref="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput(System.Object)" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>Gets an array of types that are possible outputs from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object; only objects of one of these types are returned from the <see cref="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
    ///  object.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    ///<summary>Gets or sets the Uniform Resource Identifier (URI) that identifies the algorithm performed by the current transform.</summary>
    ///<returns>The URI that identifies the algorithm performed by the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property Algorithm: string read get_Algorithm write set_Algorithm;
    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    ///<summary>Gets or sets an <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running. </summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running.</returns>
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    ///<summary>Gets or sets a <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature. </summary>
    ///<returns>A <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.Transform.PropagatedNamespaces" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNXmlDsigXsltTransform = class(TDNGenericImport<DNXmlDsigXsltTransformClass, DNXmlDsigXsltTransform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNXmlLicenseTransformClass = interface(DNTransformClass)
  ['{542DB4E2-FB7B-5725-B1E3-D67975D1B946}']
  { static getter & setter } 

    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  class. </summary>
    {class} function init: DNXmlLicenseTransform;

  { static propertys } 

    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    {class} property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
  end;

  ///<summary>Represents the license transform algorithm used to normalize XrML licenses for signatures.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.XmlLicenseTransform')]
  DNXmlLicenseTransform = interface(DNTransform)
  ['{B828D115-C2A3-3B4D-A717-9FB0462E57B4}']
  { getters & setters } 

    function get_InputTypes: TArray<DDN.mscorlib.DNType>;
    function get_OutputTypes: TArray<DDN.mscorlib.DNType>;
    function get_Decryptor: DNIRelDecryptor;
    procedure set_Decryptor(value: DNIRelDecryptor);
    function get_Algorithm: string;
    procedure set_Algorithm(value: string);
    procedure set_Resolver(value: DDN.System.Xml.DNXmlResolver);
    function get_Context: DDN.System.Xml.DNXmlElement;
    procedure set_Context(value: DDN.System.Xml.DNXmlElement);
    function get_PropagatedNamespaces: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>Returns the output of an <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</summary>
    ///<returns>The output of the <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</returns>
    function GetOutput: DDN.mscorlib.DNObject; overload;
    ///<summary>Returns the output of an <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</summary>
    ///  <param name="type">The type of the output to return. <see cref="T:System.Xml.XmlDocument" />
    ///  is the only valid type for this parameter.</param>
    ///<returns>The output of the <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="type" />
    ///  parameter is not an <see cref="T:System.Xml.XmlDocument" />
    ///  object.</exception>
    function GetOutput(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Parses the specified <see cref="T:System.Xml.XmlNodeList" />
    ///  object as transform-specific content of a <see langword="&lt;Transform&gt;" />
    ///  element; this method is not supported because the <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object has no inner XML elements.</summary>
    ///  <param name="nodeList">An <see cref="T:System.Xml.XmlNodeList" />
    ///  object that encapsulates the transform to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object. </param>
    procedure LoadInnerXml(nodeList: DDN.System.Xml.DNXmlNodeList);
    ///<summary>Loads the specified input into the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</summary>
    ///  <param name="obj">The input to load into the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object. The type of the input object must be <see cref="T:System.Xml.XmlDocument" />
    ///  .</param>
    ///<exception cref="T:System.Security.Cryptography.CryptographicException">The context was not set before this transform was invoked.-or-The <see langword="&lt;issuer&gt;" />
    ///  element was not set before this transform was invoked.-or-The <see langword="&lt;license&gt;" />
    ///  element was not set before this transform was invoked.-or-The <see cref="P:System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor" />
    ///  property was not set before this transform was invoked.</exception>
    procedure LoadInput(obj: DDN.mscorlib.DNObject);
    ///<summary>When overridden in a derived class, returns the digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object. </summary>
    ///  <param name="hash">The <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  object used to create a digest.</param>
    ///<returns>The digest associated with a <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetDigestedOutput(hash: DDN.mscorlib.DNHashAlgorithm): TArray<Byte>;
    ///<summary>Returns the XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</summary>
    ///<returns>The XML representation of the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    function GetXml: DDN.System.Xml.DNXmlElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an array of types that are valid inputs to the <see cref="P:System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</summary>
    ///<returns>An array of types that are valid inputs to the <see cref="P:System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object; you can pass only objects of one of these types to the <see cref="P:System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</returns>
    property InputTypes: TArray<DDN.mscorlib.DNType> read get_InputTypes;
    ///<summary>Gets an array of types that are valid outputs from the <see cref="P:System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes" />
    ///  method of the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</summary>
    ///<returns>An array of valid output types for the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object; only objects of one of these types are returned from the <see cref="M:System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput" />
    ///  methods of the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</returns>
    property OutputTypes: TArray<DDN.mscorlib.DNType> read get_OutputTypes;
    ///<summary>Gets or sets the decryptor of the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</summary>
    ///<returns>The decryptor of the current <see cref="T:System.Security.Cryptography.Xml.XmlLicenseTransform" />
    ///  object.</returns>
    property Decryptor: DNIRelDecryptor read get_Decryptor write set_Decryptor;
    ///<summary>Gets or sets the Uniform Resource Identifier (URI) that identifies the algorithm performed by the current transform.</summary>
    ///<returns>The URI that identifies the algorithm performed by the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object.</returns>
    property Algorithm: string read get_Algorithm write set_Algorithm;
    ///<summary>Sets the current <see cref="T:System.Xml.XmlResolver" />
    ///  object.</summary>
    ///<returns>The current <see cref="T:System.Xml.XmlResolver" />
    ///  object. This property defaults to an <see cref="T:System.Xml.XmlSecureResolver" />
    ///  object.</returns>
    property Resolver: DDN.System.Xml.DNXmlResolver write set_Resolver;
    ///<summary>Gets or sets an <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running. </summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  object that represents the document context under which the current <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  object is running.</returns>
    property Context: DDN.System.Xml.DNXmlElement read get_Context write set_Context;
    ///<summary>Gets or sets a <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature. </summary>
    ///<returns>A <see cref="T:System.Collections.Hashtable" />
    ///  object that contains the namespaces that are propagated into the signature.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.Transform.PropagatedNamespaces" />
    ///  property was set to <see langword="null" />
    ///  .</exception>
    property PropagatedNamespaces: DDN.mscorlib.DNHashtable read get_PropagatedNamespaces;
  end;

  TDNXmlLicenseTransform = class(TDNGenericImport<DNXmlLicenseTransformClass, DNXmlLicenseTransform>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNTransformChainClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1CEDE88F-1E8A-57B7-9DDB-85B3A20147B3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  class.</summary>
    {class} function init: DNTransformChain;

  end;

  ///<summary>Defines an ordered list of <see cref="T:System.Security.Cryptography.Xml.Transform" />
  ///  objects that is applied to unsigned content prior to digest calculation.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.TransformChain')]
  DNTransformChain = interface(DDN.mscorlib.DNObject)
  ['{E4668765-48E0-391C-BD17-BF1BBEFB1F6C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTransform;

  { methods } 

    ///<summary>Adds a transform to the list of transforms to be applied to the unsigned content prior to digest calculation.</summary>
    ///  <param name="transform">The transform to add to the list of transforms. </param>
    procedure Add(transform: DNTransform);
    ///<summary>Returns an enumerator of the transforms in the <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object.</summary>
    ///<returns>An enumerator of the transforms in the <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of transforms in the <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object.</summary>
    ///<returns>The number of transforms in the <see cref="T:System.Security.Cryptography.Xml.TransformChain" />
    ///  object.</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTransform read get_Item; default;
  end;

  TDNTransformChain = class(TDNGenericImport<DNTransformChainClass, DNTransformChain>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNX509IssuerSerialClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{F565DD75-E9B9-5954-8609-296D00DE2C57}']
  end;

  ///<summary>Represents the &lt;<see langword="X509IssuerSerial" />
  ///  &gt; element of an XML digital signature.</summary>
  [DNTypeName('System.Security.Cryptography.Xml.X509IssuerSerial')]
  DNX509IssuerSerial = interface(DDN.mscorlib.DNValueType)
  ['{157BE144-3AED-330B-B384-E54129500F99}']
  { getters & setters } 

    function get_IssuerName: string;
    procedure set_IssuerName(value: string);
    function get_SerialNumber: string;
    procedure set_SerialNumber(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets an X.509 certificate issuer's distinguished name.</summary>
    ///<returns>An X.509 certificate issuer's distinguished name.</returns>
    property IssuerName: string read get_IssuerName write set_IssuerName;
    ///<summary>Gets or sets an X.509 certificate issuer's serial number.</summary>
    ///<returns>An X.509 certificate issuer's serial number.</returns>
    property SerialNumber: string read get_SerialNumber write set_SerialNumber;
  end;

  TDNX509IssuerSerial = class(TDNGenericImport<DNX509IssuerSerialClass, DNX509IssuerSerial>) end;


implementation


initialization
  LoadAssemblyModule('System.Security.dll', True);

finalization

end.
