//----------------------------------------------------------------------------
//  System.Drawing.dll: System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Drawing
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Drawing;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.ContentAlignment')]
  DNContentAlignment = type Integer;
  DNContentAlignmentHelper = record helper for DNContentAlignment
  public const
    TopLeft = 1;
    TopCenter = 2;
    TopRight = 4;
    MiddleLeft = 16;
    MiddleCenter = 32;
    MiddleRight = 64;
    BottomLeft = 256;
    BottomCenter = 512;
    BottomRight = 1024;
  end;


  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.CopyPixelOperation')]
  DNCopyPixelOperation = type Integer;
  DNCopyPixelOperationHelper = record helper for DNCopyPixelOperation
  public const
    Blackness = 66;
    NotSourceErase = 1114278;
    NotSourceCopy = 3342344;
    SourceErase = 4457256;
    DestinationInvert = 5570569;
    PatInvert = 5898313;
    SourceInvert = 6684742;
    SourceAnd = 8913094;
    MergePaint = 12255782;
    MergeCopy = 12583114;
    SourceCopy = 13369376;
    SourcePaint = 15597702;
    PatCopy = 15728673;
    PatPaint = 16452105;
    Whiteness = 16711778;
    CaptureBlt = 1073741824;
    NoMirrorBitmap = -2147483648;
  end;


  //-------------namespace: System.Drawing.Design----------------
  [DNTypeName('System.Drawing.Design.UITypeEditorEditStyle')]
  DNUITypeEditorEditStyle = type Integer;
  DNUITypeEditorEditStyleHelper = record helper for DNUITypeEditorEditStyle
  public const
    None = 1;
    Modal = 2;
    DropDown = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.CombineMode')]
  DNCombineMode = type Integer;
  DNCombineModeHelper = record helper for DNCombineMode
  public const
    Replace = 0;
    Intersect = 1;
    Union = 2;
    Xor_ = 3;
    Exclude = 4;
    Complement = 5;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.CompositingMode')]
  DNCompositingMode = type Integer;
  DNCompositingModeHelper = record helper for DNCompositingMode
  public const
    SourceOver = 0;
    SourceCopy = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.CompositingQuality')]
  DNCompositingQuality = type Integer;
  DNCompositingQualityHelper = record helper for DNCompositingQuality
  public const
    Default_ = 0;
    HighSpeed = 1;
    HighQuality = 2;
    GammaCorrected = 3;
    AssumeLinear = 4;
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.CoordinateSpace')]
  DNCoordinateSpace = type Integer;
  DNCoordinateSpaceHelper = record helper for DNCoordinateSpace
  public const
    World = 0;
    Page = 1;
    Device = 2;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.DashCap')]
  DNDashCap = type Integer;
  DNDashCapHelper = record helper for DNDashCap
  public const
    Flat = 0;
    Round = 2;
    Triangle = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.DashStyle')]
  DNDashStyle = type Integer;
  DNDashStyleHelper = record helper for DNDashStyle
  public const
    Solid = 0;
    Dash = 1;
    Dot = 2;
    DashDot = 3;
    DashDotDot = 4;
    Custom = 5;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.FillMode')]
  DNFillMode = type Integer;
  DNFillModeHelper = record helper for DNFillMode
  public const
    Alternate = 0;
    Winding = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.FlushIntention')]
  DNFlushIntention = type Integer;
  DNFlushIntentionHelper = record helper for DNFlushIntention
  public const
    Flush = 0;
    Sync = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.HatchStyle')]
  DNHatchStyle = type Integer;
  DNHatchStyleHelper = record helper for DNHatchStyle
  public const
    Horizontal = 0;
    Min = 0;
    Vertical = 1;
    ForwardDiagonal = 2;
    BackwardDiagonal = 3;
    Cross = 4;
    LargeGrid = 4;
    Max = 4;
    DiagonalCross = 5;
    Percent05 = 6;
    Percent10 = 7;
    Percent20 = 8;
    Percent25 = 9;
    Percent30 = 10;
    Percent40 = 11;
    Percent50 = 12;
    Percent60 = 13;
    Percent70 = 14;
    Percent75 = 15;
    Percent80 = 16;
    Percent90 = 17;
    LightDownwardDiagonal = 18;
    LightUpwardDiagonal = 19;
    DarkDownwardDiagonal = 20;
    DarkUpwardDiagonal = 21;
    WideDownwardDiagonal = 22;
    WideUpwardDiagonal = 23;
    LightVertical = 24;
    LightHorizontal = 25;
    NarrowVertical = 26;
    NarrowHorizontal = 27;
    DarkVertical = 28;
    DarkHorizontal = 29;
    DashedDownwardDiagonal = 30;
    DashedUpwardDiagonal = 31;
    DashedHorizontal = 32;
    DashedVertical = 33;
    SmallConfetti = 34;
    LargeConfetti = 35;
    ZigZag = 36;
    Wave = 37;
    DiagonalBrick = 38;
    HorizontalBrick = 39;
    Weave = 40;
    Plaid = 41;
    Divot = 42;
    DottedGrid = 43;
    DottedDiamond = 44;
    Shingle = 45;
    Trellis = 46;
    Sphere = 47;
    SmallGrid = 48;
    SmallCheckerBoard = 49;
    LargeCheckerBoard = 50;
    OutlinedDiamond = 51;
    SolidDiamond = 52;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.InterpolationMode')]
  DNInterpolationMode = type Integer;
  DNInterpolationModeHelper = record helper for DNInterpolationMode
  public const
    Default_ = 0;
    Low = 1;
    High = 2;
    Bilinear = 3;
    Bicubic = 4;
    NearestNeighbor = 5;
    HighQualityBilinear = 6;
    HighQualityBicubic = 7;
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.LinearGradientMode')]
  DNLinearGradientMode = type Integer;
  DNLinearGradientModeHelper = record helper for DNLinearGradientMode
  public const
    Horizontal = 0;
    Vertical = 1;
    ForwardDiagonal = 2;
    BackwardDiagonal = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.LineCap')]
  DNLineCap = type Integer;
  DNLineCapHelper = record helper for DNLineCap
  public const
    Flat = 0;
    Square = 1;
    Round = 2;
    Triangle = 3;
    NoAnchor = 16;
    SquareAnchor = 17;
    RoundAnchor = 18;
    DiamondAnchor = 19;
    ArrowAnchor = 20;
    AnchorMask = 240;
    Custom = 255;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.LineJoin')]
  DNLineJoin = type Integer;
  DNLineJoinHelper = record helper for DNLineJoin
  public const
    Miter = 0;
    Bevel = 1;
    Round = 2;
    MiterClipped = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.MatrixOrder')]
  DNMatrixOrder = type Integer;
  DNMatrixOrderHelper = record helper for DNMatrixOrder
  public const
    Prepend = 0;
    Append = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.PathPointType')]
  DNPathPointType = type Integer;
  DNPathPointTypeHelper = record helper for DNPathPointType
  public const
    Start = 0;
    Line = 1;
    Bezier = 3;
    Bezier3 = 3;
    PathTypeMask = 7;
    DashMode = 16;
    PathMarker = 32;
    CloseSubpath = 128;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.PenAlignment')]
  DNPenAlignment = type Integer;
  DNPenAlignmentHelper = record helper for DNPenAlignment
  public const
    Center = 0;
    Inset = 1;
    Outset = 2;
    Left = 3;
    Right = 4;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.PenType')]
  DNPenType = type Integer;
  DNPenTypeHelper = record helper for DNPenType
  public const
    SolidColor = 0;
    HatchFill = 1;
    TextureFill = 2;
    PathGradient = 3;
    LinearGradient = 4;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.PixelOffsetMode')]
  DNPixelOffsetMode = type Integer;
  DNPixelOffsetModeHelper = record helper for DNPixelOffsetMode
  public const
    Default_ = 0;
    HighSpeed = 1;
    HighQuality = 2;
    None = 3;
    Half = 4;
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.QualityMode')]
  DNQualityMode = type Integer;
  DNQualityModeHelper = record helper for DNQualityMode
  public const
    Default_ = 0;
    Low = 1;
    High = 2;
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.SmoothingMode')]
  DNSmoothingMode = type Integer;
  DNSmoothingModeHelper = record helper for DNSmoothingMode
  public const
    Default_ = 0;
    HighSpeed = 1;
    HighQuality = 2;
    None = 3;
    AntiAlias = 4;
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.WarpMode')]
  DNWarpMode = type Integer;
  DNWarpModeHelper = record helper for DNWarpMode
  public const
    Perspective = 0;
    Bilinear = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  [DNTypeName('System.Drawing.Drawing2D.WrapMode')]
  DNWrapMode = type Integer;
  DNWrapModeHelper = record helper for DNWrapMode
  public const
    Tile = 0;
    TileFlipX = 1;
    TileFlipY = 2;
    TileFlipXY = 3;
    Clamp = 4;
  end;


  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.FontStyle')]
  DNFontStyle = type Integer;
  DNFontStyleHelper = record helper for DNFontStyle
  public const
    Regular = 0;
    Bold = 1;
    Italic = 2;
    Underline = 4;
    Strikeout = 8;
  end;


  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.GraphicsUnit')]
  DNGraphicsUnit = type Integer;
  DNGraphicsUnitHelper = record helper for DNGraphicsUnit
  public const
    World = 0;
    Display = 1;
    Pixel = 2;
    Point = 3;
    Inch = 4;
    Document = 5;
    Millimeter = 6;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.ColorAdjustType')]
  DNColorAdjustType = type Integer;
  DNColorAdjustTypeHelper = record helper for DNColorAdjustType
  public const
    Default_ = 0;
    Bitmap = 1;
    Brush = 2;
    Pen = 3;
    Text = 4;
    Count = 5;
    Any = 6;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.ColorChannelFlag')]
  DNColorChannelFlag = type Integer;
  DNColorChannelFlagHelper = record helper for DNColorChannelFlag
  public const
    ColorChannelC = 0;
    ColorChannelM = 1;
    ColorChannelY = 2;
    ColorChannelK = 3;
    ColorChannelLast = 4;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.ColorMapType')]
  DNColorMapType = type Integer;
  DNColorMapTypeHelper = record helper for DNColorMapType
  public const
    Default_ = 0;
    Brush = 1;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.ColorMatrixFlag')]
  DNColorMatrixFlag = type Integer;
  DNColorMatrixFlagHelper = record helper for DNColorMatrixFlag
  public const
    Default_ = 0;
    SkipGrays = 1;
    AltGrays = 2;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.ColorMode')]
  DNColorMode = type Integer;
  DNColorModeHelper = record helper for DNColorMode
  public const
    Argb32Mode = 0;
    Argb64Mode = 1;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.EmfPlusRecordType')]
  DNEmfPlusRecordType = type Integer;
  DNEmfPlusRecordTypeHelper = record helper for DNEmfPlusRecordType
  public const
    EmfMin = 1;
    EmfHeader = 1;
    EmfPolyBezier = 2;
    EmfPolygon = 3;
    EmfPolyline = 4;
    EmfPolyBezierTo = 5;
    EmfPolyLineTo = 6;
    EmfPolyPolyline = 7;
    EmfPolyPolygon = 8;
    EmfSetWindowExtEx = 9;
    EmfSetWindowOrgEx = 10;
    EmfSetViewportExtEx = 11;
    EmfSetViewportOrgEx = 12;
    EmfSetBrushOrgEx = 13;
    EmfEof = 14;
    EmfSetPixelV = 15;
    EmfSetMapperFlags = 16;
    EmfSetMapMode = 17;
    EmfSetBkMode = 18;
    EmfSetPolyFillMode = 19;
    EmfSetROP2 = 20;
    EmfSetStretchBltMode = 21;
    EmfSetTextAlign = 22;
    EmfSetColorAdjustment = 23;
    EmfSetTextColor = 24;
    EmfSetBkColor = 25;
    EmfOffsetClipRgn = 26;
    EmfMoveToEx = 27;
    EmfSetMetaRgn = 28;
    EmfExcludeClipRect = 29;
    EmfIntersectClipRect = 30;
    EmfScaleViewportExtEx = 31;
    EmfScaleWindowExtEx = 32;
    EmfSaveDC = 33;
    EmfRestoreDC = 34;
    EmfSetWorldTransform = 35;
    EmfModifyWorldTransform = 36;
    EmfSelectObject = 37;
    EmfCreatePen = 38;
    EmfCreateBrushIndirect = 39;
    EmfDeleteObject = 40;
    EmfAngleArc = 41;
    EmfEllipse = 42;
    EmfRectangle = 43;
    EmfRoundRect = 44;
    EmfRoundArc = 45;
    EmfChord = 46;
    EmfPie = 47;
    EmfSelectPalette = 48;
    EmfCreatePalette = 49;
    EmfSetPaletteEntries = 50;
    EmfResizePalette = 51;
    EmfRealizePalette = 52;
    EmfExtFloodFill = 53;
    EmfLineTo = 54;
    EmfArcTo = 55;
    EmfPolyDraw = 56;
    EmfSetArcDirection = 57;
    EmfSetMiterLimit = 58;
    EmfBeginPath = 59;
    EmfEndPath = 60;
    EmfCloseFigure = 61;
    EmfFillPath = 62;
    EmfStrokeAndFillPath = 63;
    EmfStrokePath = 64;
    EmfFlattenPath = 65;
    EmfWidenPath = 66;
    EmfSelectClipPath = 67;
    EmfAbortPath = 68;
    EmfReserved069 = 69;
    EmfGdiComment = 70;
    EmfFillRgn = 71;
    EmfFrameRgn = 72;
    EmfInvertRgn = 73;
    EmfPaintRgn = 74;
    EmfExtSelectClipRgn = 75;
    EmfBitBlt = 76;
    EmfStretchBlt = 77;
    EmfMaskBlt = 78;
    EmfPlgBlt = 79;
    EmfSetDIBitsToDevice = 80;
    EmfStretchDIBits = 81;
    EmfExtCreateFontIndirect = 82;
    EmfExtTextOutA = 83;
    EmfExtTextOutW = 84;
    EmfPolyBezier16 = 85;
    EmfPolygon16 = 86;
    EmfPolyline16 = 87;
    EmfPolyBezierTo16 = 88;
    EmfPolylineTo16 = 89;
    EmfPolyPolyline16 = 90;
    EmfPolyPolygon16 = 91;
    EmfPolyDraw16 = 92;
    EmfCreateMonoBrush = 93;
    EmfCreateDibPatternBrushPt = 94;
    EmfExtCreatePen = 95;
    EmfPolyTextOutA = 96;
    EmfPolyTextOutW = 97;
    EmfSetIcmMode = 98;
    EmfCreateColorSpace = 99;
    EmfSetColorSpace = 100;
    EmfDeleteColorSpace = 101;
    EmfGlsRecord = 102;
    EmfGlsBoundedRecord = 103;
    EmfPixelFormat = 104;
    EmfDrawEscape = 105;
    EmfExtEscape = 106;
    EmfStartDoc = 107;
    EmfSmallTextOut = 108;
    EmfForceUfiMapping = 109;
    EmfNamedEscpae = 110;
    EmfColorCorrectPalette = 111;
    EmfSetIcmProfileA = 112;
    EmfSetIcmProfileW = 113;
    EmfAlphaBlend = 114;
    EmfSetLayout = 115;
    EmfTransparentBlt = 116;
    EmfReserved117 = 117;
    EmfGradientFill = 118;
    EmfSetLinkedUfis = 119;
    EmfSetTextJustification = 120;
    EmfColorMatchToTargetW = 121;
    EmfCreateColorSpaceW = 122;
    EmfMax = 122;
    Invalid = 16384;
    EmfPlusRecordBase = 16384;
    Header = 16385;
    Min = 16385;
    EndOfFile = 16386;
    Comment = 16387;
    GetDC = 16388;
    MultiFormatStart = 16389;
    MultiFormatSection = 16390;
    MultiFormatEnd = 16391;
    Object_ = 16392;
    Clear = 16393;
    FillRects = 16394;
    DrawRects = 16395;
    FillPolygon = 16396;
    DrawLines = 16397;
    FillEllipse = 16398;
    DrawEllipse = 16399;
    FillPie = 16400;
    DrawPie = 16401;
    DrawArc = 16402;
    FillRegion = 16403;
    FillPath = 16404;
    DrawPath = 16405;
    FillClosedCurve = 16406;
    DrawClosedCurve = 16407;
    DrawCurve = 16408;
    DrawBeziers = 16409;
    DrawImage = 16410;
    DrawImagePoints = 16411;
    DrawString = 16412;
    SetRenderingOrigin = 16413;
    SetAntiAliasMode = 16414;
    SetTextRenderingHint = 16415;
    SetTextContrast = 16416;
    SetInterpolationMode = 16417;
    SetPixelOffsetMode = 16418;
    SetCompositingMode = 16419;
    SetCompositingQuality = 16420;
    Save = 16421;
    Restore = 16422;
    BeginContainer = 16423;
    BeginContainerNoParams = 16424;
    EndContainer = 16425;
    SetWorldTransform = 16426;
    ResetWorldTransform = 16427;
    MultiplyWorldTransform = 16428;
    TranslateWorldTransform = 16429;
    ScaleWorldTransform = 16430;
    RotateWorldTransform = 16431;
    SetPageTransform = 16432;
    ResetClip = 16433;
    SetClipRect = 16434;
    SetClipPath = 16435;
    SetClipRegion = 16436;
    OffsetClip = 16437;
    Max = 16438;
    DrawDriverString = 16438;
    Total = 16439;
    WmfRecordBase = 65536;
    WmfSaveDC = 65566;
    WmfRealizePalette = 65589;
    WmfSetPalEntries = 65591;
    WmfCreatePalette = 65783;
    WmfSetBkMode = 65794;
    WmfSetMapMode = 65795;
    WmfSetROP2 = 65796;
    WmfSetRelAbs = 65797;
    WmfSetPolyFillMode = 65798;
    WmfSetStretchBltMode = 65799;
    WmfSetTextCharExtra = 65800;
    WmfRestoreDC = 65831;
    WmfInvertRegion = 65834;
    WmfPaintRegion = 65835;
    WmfSelectClipRegion = 65836;
    WmfSelectObject = 65837;
    WmfSetTextAlign = 65838;
    WmfResizePalette = 65849;
    WmfDibCreatePatternBrush = 65858;
    WmfSetLayout = 65865;
    WmfDeleteObject = 66032;
    WmfCreatePatternBrush = 66041;
    WmfSetBkColor = 66049;
    WmfSetTextColor = 66057;
    WmfSetTextJustification = 66058;
    WmfSetWindowOrg = 66059;
    WmfSetWindowExt = 66060;
    WmfSetViewportOrg = 66061;
    WmfSetViewportExt = 66062;
    WmfOffsetWindowOrg = 66063;
    WmfOffsetViewportOrg = 66065;
    WmfLineTo = 66067;
    WmfMoveTo = 66068;
    WmfOffsetCilpRgn = 66080;
    WmfFillRegion = 66088;
    WmfSetMapperFlags = 66097;
    WmfSelectPalette = 66100;
    WmfCreatePenIndirect = 66298;
    WmfCreateFontIndirect = 66299;
    WmfCreateBrushIndirect = 66300;
    WmfPolygon = 66340;
    WmfPolyline = 66341;
    WmfScaleWindowExt = 66576;
    WmfScaleViewportExt = 66578;
    WmfExcludeClipRect = 66581;
    WmfIntersectClipRect = 66582;
    WmfEllipse = 66584;
    WmfFloodFill = 66585;
    WmfRectangle = 66587;
    WmfSetPixel = 66591;
    WmfFrameRegion = 66601;
    WmfAnimatePalette = 66614;
    WmfTextOut = 66849;
    WmfPolyPolygon = 66872;
    WmfExtFloodFill = 66888;
    WmfRoundRect = 67100;
    WmfPatBlt = 67101;
    WmfEscape = 67110;
    WmfCreateRegion = 67327;
    WmfArc = 67607;
    WmfPie = 67610;
    WmfChord = 67632;
    WmfBitBlt = 67874;
    WmfDibBitBlt = 67904;
    WmfExtTextOut = 68146;
    WmfStretchBlt = 68387;
    WmfDibStretchBlt = 68417;
    WmfSetDibToDev = 68915;
    WmfStretchDib = 69443;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.EmfType')]
  DNEmfType = type Integer;
  DNEmfTypeHelper = record helper for DNEmfType
  public const
    EmfOnly = 3;
    EmfPlusOnly = 4;
    EmfPlusDual = 5;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.EncoderParameterValueType')]
  DNEncoderParameterValueType = type Integer;
  DNEncoderParameterValueTypeHelper = record helper for DNEncoderParameterValueType
  public const
    ValueTypeByte = 1;
    ValueTypeAscii = 2;
    ValueTypeShort = 3;
    ValueTypeLong = 4;
    ValueTypeRational = 5;
    ValueTypeLongRange = 6;
    ValueTypeUndefined = 7;
    ValueTypeRationalRange = 8;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.EncoderValue')]
  DNEncoderValue = type Integer;
  DNEncoderValueHelper = record helper for DNEncoderValue
  public const
    ColorTypeCMYK = 0;
    ColorTypeYCCK = 1;
    CompressionLZW = 2;
    CompressionCCITT3 = 3;
    CompressionCCITT4 = 4;
    CompressionRle = 5;
    CompressionNone = 6;
    ScanMethodInterlaced = 7;
    ScanMethodNonInterlaced = 8;
    VersionGif87 = 9;
    VersionGif89 = 10;
    RenderProgressive = 11;
    RenderNonProgressive = 12;
    TransformRotate90 = 13;
    TransformRotate180 = 14;
    TransformRotate270 = 15;
    TransformFlipHorizontal = 16;
    TransformFlipVertical = 17;
    MultiFrame = 18;
    LastFrame = 19;
    Flush = 20;
    FrameDimensionTime = 21;
    FrameDimensionResolution = 22;
    FrameDimensionPage = 23;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.ImageCodecFlags')]
  DNImageCodecFlags = type Integer;
  DNImageCodecFlagsHelper = record helper for DNImageCodecFlags
  public const
    Encoder = 1;
    Decoder = 2;
    SupportBitmap = 4;
    SupportVector = 8;
    SeekableEncode = 16;
    BlockingDecode = 32;
    Builtin = 65536;
    System = 131072;
    User = 262144;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.ImageFlags')]
  DNImageFlags = type Integer;
  DNImageFlagsHelper = record helper for DNImageFlags
  public const
    None = 0;
    Scalable = 1;
    HasAlpha = 2;
    HasTranslucent = 4;
    PartiallyScalable = 8;
    ColorSpaceRgb = 16;
    ColorSpaceCmyk = 32;
    ColorSpaceGray = 64;
    ColorSpaceYcbcr = 128;
    ColorSpaceYcck = 256;
    HasRealDpi = 4096;
    HasRealPixelSize = 8192;
    ReadOnly = 65536;
    Caching = 131072;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.ImageLockMode')]
  DNImageLockMode = type Integer;
  DNImageLockModeHelper = record helper for DNImageLockMode
  public const
    ReadOnly = 1;
    WriteOnly_ = 2;
    ReadWrite = 3;
    UserInputBuffer = 4;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.MetafileFrameUnit')]
  DNMetafileFrameUnit = type Integer;
  DNMetafileFrameUnitHelper = record helper for DNMetafileFrameUnit
  public const
    Pixel = 2;
    Point = 3;
    Inch = 4;
    Document = 5;
    Millimeter = 6;
    GdiCompatible = 7;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.MetafileType')]
  DNMetafileType = type Integer;
  DNMetafileTypeHelper = record helper for DNMetafileType
  public const
    Invalid = 0;
    Wmf = 1;
    WmfPlaceable = 2;
    Emf = 3;
    EmfPlusOnly = 4;
    EmfPlusDual = 5;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.PaletteFlags')]
  DNPaletteFlags = type Integer;
  DNPaletteFlagsHelper = record helper for DNPaletteFlags
  public const
    HasAlpha = 1;
    GrayScale = 2;
    Halftone = 4;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  [DNTypeName('System.Drawing.Imaging.PixelFormat')]
  DNPixelFormat = type Integer;
  DNPixelFormatHelper = record helper for DNPixelFormat
  public const
    DontCare = 0;
    Undefined = 0;
    Max = 15;
    Indexed = 65536;
    Gdi = 131072;
    Format16bppRgb555 = 135173;
    Format16bppRgb565 = 135174;
    Format24bppRgb = 137224;
    Format32bppRgb = 139273;
    Format1bppIndexed = 196865;
    Format4bppIndexed = 197634;
    Format8bppIndexed = 198659;
    Alpha = 262144;
    Format16bppArgb1555 = 397319;
    PAlpha = 524288;
    Format32bppPArgb = 925707;
    Extended = 1048576;
    Format16bppGrayScale = 1052676;
    Format48bppRgb = 1060876;
    Format64bppPArgb = 1851406;
    Canonical = 2097152;
    Format32bppArgb = 2498570;
    Format64bppArgb = 3424269;
  end;


  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.KnownColor')]
  DNKnownColor = type Integer;
  DNKnownColorHelper = record helper for DNKnownColor
  public const
    ActiveBorder = 1;
    ActiveCaption = 2;
    ActiveCaptionText = 3;
    AppWorkspace = 4;
    Control = 5;
    ControlDark = 6;
    ControlDarkDark = 7;
    ControlLight = 8;
    ControlLightLight = 9;
    ControlText = 10;
    Desktop = 11;
    GrayText = 12;
    Highlight = 13;
    HighlightText = 14;
    HotTrack = 15;
    InactiveBorder = 16;
    InactiveCaption = 17;
    InactiveCaptionText = 18;
    Info = 19;
    InfoText = 20;
    Menu = 21;
    MenuText = 22;
    ScrollBar = 23;
    Window = 24;
    WindowFrame = 25;
    WindowText = 26;
    Transparent = 27;
    AliceBlue = 28;
    AntiqueWhite = 29;
    Aqua = 30;
    Aquamarine = 31;
    Azure = 32;
    Beige = 33;
    Bisque = 34;
    Black = 35;
    BlanchedAlmond = 36;
    Blue = 37;
    BlueViolet = 38;
    Brown = 39;
    BurlyWood = 40;
    CadetBlue = 41;
    Chartreuse = 42;
    Chocolate = 43;
    Coral = 44;
    CornflowerBlue = 45;
    Cornsilk = 46;
    Crimson = 47;
    Cyan = 48;
    DarkBlue = 49;
    DarkCyan = 50;
    DarkGoldenrod = 51;
    DarkGray = 52;
    DarkGreen = 53;
    DarkKhaki = 54;
    DarkMagenta = 55;
    DarkOliveGreen = 56;
    DarkOrange = 57;
    DarkOrchid = 58;
    DarkRed = 59;
    DarkSalmon = 60;
    DarkSeaGreen = 61;
    DarkSlateBlue = 62;
    DarkSlateGray = 63;
    DarkTurquoise = 64;
    DarkViolet = 65;
    DeepPink = 66;
    DeepSkyBlue = 67;
    DimGray = 68;
    DodgerBlue = 69;
    Firebrick = 70;
    FloralWhite = 71;
    ForestGreen = 72;
    Fuchsia = 73;
    Gainsboro = 74;
    GhostWhite = 75;
    Gold = 76;
    Goldenrod = 77;
    Gray = 78;
    Green = 79;
    GreenYellow = 80;
    Honeydew = 81;
    HotPink = 82;
    IndianRed = 83;
    Indigo = 84;
    Ivory = 85;
    Khaki = 86;
    Lavender = 87;
    LavenderBlush = 88;
    LawnGreen = 89;
    LemonChiffon = 90;
    LightBlue = 91;
    LightCoral = 92;
    LightCyan = 93;
    LightGoldenrodYellow = 94;
    LightGray = 95;
    LightGreen = 96;
    LightPink = 97;
    LightSalmon = 98;
    LightSeaGreen = 99;
    LightSkyBlue = 100;
    LightSlateGray = 101;
    LightSteelBlue = 102;
    LightYellow = 103;
    Lime = 104;
    LimeGreen = 105;
    Linen = 106;
    Magenta = 107;
    Maroon = 108;
    MediumAquamarine = 109;
    MediumBlue = 110;
    MediumOrchid = 111;
    MediumPurple = 112;
    MediumSeaGreen = 113;
    MediumSlateBlue = 114;
    MediumSpringGreen = 115;
    MediumTurquoise = 116;
    MediumVioletRed = 117;
    MidnightBlue = 118;
    MintCream = 119;
    MistyRose = 120;
    Moccasin = 121;
    NavajoWhite = 122;
    Navy = 123;
    OldLace = 124;
    Olive = 125;
    OliveDrab = 126;
    Orange = 127;
    OrangeRed = 128;
    Orchid = 129;
    PaleGoldenrod = 130;
    PaleGreen = 131;
    PaleTurquoise = 132;
    PaleVioletRed = 133;
    PapayaWhip = 134;
    PeachPuff = 135;
    Peru = 136;
    Pink = 137;
    Plum = 138;
    PowderBlue = 139;
    Purple = 140;
    Red = 141;
    RosyBrown = 142;
    RoyalBlue = 143;
    SaddleBrown = 144;
    Salmon = 145;
    SandyBrown = 146;
    SeaGreen = 147;
    SeaShell = 148;
    Sienna = 149;
    Silver = 150;
    SkyBlue = 151;
    SlateBlue = 152;
    SlateGray = 153;
    Snow = 154;
    SpringGreen = 155;
    SteelBlue = 156;
    Tan = 157;
    Teal = 158;
    Thistle = 159;
    Tomato = 160;
    Turquoise = 161;
    Violet = 162;
    Wheat = 163;
    White = 164;
    WhiteSmoke = 165;
    Yellow = 166;
    YellowGreen = 167;
    ButtonFace = 168;
    ButtonHighlight = 169;
    ButtonShadow = 170;
    GradientActiveCaption = 171;
    GradientInactiveCaption = 172;
    MenuBar = 173;
    MenuHighlight = 174;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  [DNTypeName('System.Drawing.Printing.Duplex')]
  DNDuplex = type Integer;
  DNDuplexHelper = record helper for DNDuplex
  public const
    Simplex = 1;
    Vertical = 2;
    Horizontal = 3;
    Default_ = -1;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  [DNTypeName('System.Drawing.Printing.PaperKind')]
  DNPaperKind = type Integer;
  DNPaperKindHelper = record helper for DNPaperKind
  public const
    Custom = 0;
    Letter = 1;
    LetterSmall = 2;
    Tabloid = 3;
    Ledger = 4;
    Legal = 5;
    Statement = 6;
    Executive = 7;
    A3 = 8;
    A4 = 9;
    A4Small = 10;
    A5 = 11;
    B4 = 12;
    B5 = 13;
    Folio = 14;
    Quarto = 15;
    Standard10x14 = 16;
    Standard11x17 = 17;
    Note = 18;
    Number9Envelope = 19;
    Number10Envelope = 20;
    Number11Envelope = 21;
    Number12Envelope = 22;
    Number14Envelope = 23;
    CSheet = 24;
    DSheet = 25;
    ESheet = 26;
    DLEnvelope = 27;
    C5Envelope = 28;
    C3Envelope = 29;
    C4Envelope = 30;
    C6Envelope = 31;
    C65Envelope = 32;
    B4Envelope = 33;
    B5Envelope = 34;
    B6Envelope = 35;
    ItalyEnvelope = 36;
    MonarchEnvelope = 37;
    PersonalEnvelope = 38;
    USStandardFanfold = 39;
    GermanStandardFanfold = 40;
    GermanLegalFanfold = 41;
    IsoB4 = 42;
    JapanesePostcard = 43;
    Standard9x11 = 44;
    Standard10x11 = 45;
    Standard15x11 = 46;
    InviteEnvelope = 47;
    LetterExtra = 50;
    LegalExtra = 51;
    TabloidExtra = 52;
    A4Extra = 53;
    LetterTransverse = 54;
    A4Transverse = 55;
    LetterExtraTransverse = 56;
    APlus = 57;
    BPlus = 58;
    LetterPlus = 59;
    A4Plus = 60;
    A5Transverse = 61;
    B5Transverse = 62;
    A3Extra = 63;
    A5Extra = 64;
    B5Extra = 65;
    A2 = 66;
    A3Transverse = 67;
    A3ExtraTransverse = 68;
    JapaneseDoublePostcard = 69;
    A6 = 70;
    JapaneseEnvelopeKakuNumber2 = 71;
    JapaneseEnvelopeKakuNumber3 = 72;
    JapaneseEnvelopeChouNumber3 = 73;
    JapaneseEnvelopeChouNumber4 = 74;
    LetterRotated = 75;
    A3Rotated = 76;
    A4Rotated = 77;
    A5Rotated = 78;
    B4JisRotated = 79;
    B5JisRotated = 80;
    JapanesePostcardRotated = 81;
    JapaneseDoublePostcardRotated = 82;
    A6Rotated = 83;
    JapaneseEnvelopeKakuNumber2Rotated = 84;
    JapaneseEnvelopeKakuNumber3Rotated = 85;
    JapaneseEnvelopeChouNumber3Rotated = 86;
    JapaneseEnvelopeChouNumber4Rotated = 87;
    B6Jis = 88;
    B6JisRotated = 89;
    Standard12x11 = 90;
    JapaneseEnvelopeYouNumber4 = 91;
    JapaneseEnvelopeYouNumber4Rotated = 92;
    Prc16K = 93;
    Prc32K = 94;
    Prc32KBig = 95;
    PrcEnvelopeNumber1 = 96;
    PrcEnvelopeNumber2 = 97;
    PrcEnvelopeNumber3 = 98;
    PrcEnvelopeNumber4 = 99;
    PrcEnvelopeNumber5 = 100;
    PrcEnvelopeNumber6 = 101;
    PrcEnvelopeNumber7 = 102;
    PrcEnvelopeNumber8 = 103;
    PrcEnvelopeNumber9 = 104;
    PrcEnvelopeNumber10 = 105;
    Prc16KRotated = 106;
    Prc32KRotated = 107;
    Prc32KBigRotated = 108;
    PrcEnvelopeNumber1Rotated = 109;
    PrcEnvelopeNumber2Rotated = 110;
    PrcEnvelopeNumber3Rotated = 111;
    PrcEnvelopeNumber4Rotated = 112;
    PrcEnvelopeNumber5Rotated = 113;
    PrcEnvelopeNumber6Rotated = 114;
    PrcEnvelopeNumber7Rotated = 115;
    PrcEnvelopeNumber8Rotated = 116;
    PrcEnvelopeNumber9Rotated = 117;
    PrcEnvelopeNumber10Rotated = 118;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  [DNTypeName('System.Drawing.Printing.PaperSourceKind')]
  DNPaperSourceKind = type Integer;
  DNPaperSourceKindHelper = record helper for DNPaperSourceKind
  public const
    Upper = 1;
    Lower = 2;
    Middle = 3;
    Manual = 4;
    Envelope = 5;
    ManualFeed = 6;
    AutomaticFeed = 7;
    TractorFeed = 8;
    SmallFormat = 9;
    LargeFormat = 10;
    LargeCapacity = 11;
    Cassette = 14;
    FormSource = 15;
    Custom = 257;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  [DNTypeName('System.Drawing.Printing.PrintAction')]
  DNPrintAction = type Integer;
  DNPrintActionHelper = record helper for DNPrintAction
  public const
    PrintToFile = 0;
    PrintToPreview = 1;
    PrintToPrinter = 2;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  [DNTypeName('System.Drawing.Printing.PrinterResolutionKind')]
  DNPrinterResolutionKind = type Integer;
  DNPrinterResolutionKindHelper = record helper for DNPrinterResolutionKind
  public const
    Custom = 0;
    High = -4;
    Medium = -3;
    Low = -2;
    Draft = -1;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  [DNTypeName('System.Drawing.Printing.PrinterUnit')]
  DNPrinterUnit = type Integer;
  DNPrinterUnitHelper = record helper for DNPrinterUnit
  public const
    Display = 0;
    ThousandthsOfAnInch = 1;
    HundredthsOfAMillimeter = 2;
    TenthsOfAMillimeter = 3;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  [DNTypeName('System.Drawing.Printing.PrintingPermissionLevel')]
  DNPrintingPermissionLevel = type Integer;
  DNPrintingPermissionLevelHelper = record helper for DNPrintingPermissionLevel
  public const
    NoPrinting = 0;
    SafePrinting = 1;
    DefaultPrinting = 2;
    AllPrinting = 3;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  [DNTypeName('System.Drawing.Printing.PrintRange')]
  DNPrintRange = type Integer;
  DNPrintRangeHelper = record helper for DNPrintRange
  public const
    AllPages = 0;
    Selection = 1;
    SomePages = 2;
    CurrentPage = 4194304;
  end;


  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.RotateFlipType')]
  DNRotateFlipType = type Integer;
  DNRotateFlipTypeHelper = record helper for DNRotateFlipType
  public const
    Rotate180FlipXY = 0;
    RotateNoneFlipNone = 0;
    Rotate90FlipNone = 1;
    Rotate270FlipXY = 1;
    Rotate180FlipNone = 2;
    RotateNoneFlipXY = 2;
    Rotate270FlipNone = 3;
    Rotate90FlipXY = 3;
    RotateNoneFlipX = 4;
    Rotate180FlipY = 4;
    Rotate90FlipX = 5;
    Rotate270FlipY = 5;
    Rotate180FlipX = 6;
    RotateNoneFlipY = 6;
    Rotate270FlipX = 7;
    Rotate90FlipY = 7;
  end;


  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.StringAlignment')]
  DNStringAlignment = type Integer;
  DNStringAlignmentHelper = record helper for DNStringAlignment
  public const
    Near_ = 0;
    Center = 1;
    Far_ = 2;
  end;


  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.StringDigitSubstitute')]
  DNStringDigitSubstitute = type Integer;
  DNStringDigitSubstituteHelper = record helper for DNStringDigitSubstitute
  public const
    User = 0;
    None = 1;
    National = 2;
    Traditional = 3;
  end;


  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.StringFormatFlags')]
  DNStringFormatFlags = type Integer;
  DNStringFormatFlagsHelper = record helper for DNStringFormatFlags
  public const
    DirectionRightToLeft = 1;
    DirectionVertical = 2;
    FitBlackBox = 4;
    DisplayFormatControl = 32;
    NoFontFallback = 1024;
    MeasureTrailingSpaces = 2048;
    NoWrap = 4096;
    LineLimit = 8192;
    NoClip = 16384;
  end;


  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.StringTrimming')]
  DNStringTrimming = type Integer;
  DNStringTrimmingHelper = record helper for DNStringTrimming
  public const
    None = 0;
    Character = 1;
    Word = 2;
    EllipsisCharacter = 3;
    EllipsisWord = 4;
    EllipsisPath = 5;
  end;


  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.StringUnit')]
  DNStringUnit = type Integer;
  DNStringUnitHelper = record helper for DNStringUnit
  public const
    World = 0;
    Display = 1;
    Pixel = 2;
    Point = 3;
    Inch = 4;
    Document = 5;
    Millimeter = 6;
    Em = 32;
  end;


  //-------------namespace: System.Drawing.Text----------------
  [DNTypeName('System.Drawing.Text.GenericFontFamilies')]
  DNGenericFontFamilies = type Integer;
  DNGenericFontFamiliesHelper = record helper for DNGenericFontFamilies
  public const
    Serif = 0;
    SansSerif = 1;
    Monospace = 2;
  end;


  //-------------namespace: System.Drawing.Text----------------
  [DNTypeName('System.Drawing.Text.HotkeyPrefix')]
  DNHotkeyPrefix = type Integer;
  DNHotkeyPrefixHelper = record helper for DNHotkeyPrefix
  public const
    None = 0;
    Show = 1;
    Hide = 2;
  end;


  //-------------namespace: System.Drawing.Text----------------
  [DNTypeName('System.Drawing.Text.TextRenderingHint')]
  DNTextRenderingHint = type Integer;
  DNTextRenderingHintHelper = record helper for DNTextRenderingHint
  public const
    SystemDefault = 0;
    SingleBitPerPixelGridFit = 1;
    SingleBitPerPixel = 2;
    AntiAliasGridFit = 3;
    AntiAlias = 4;
    ClearTypeGridFit = 5;
  end;




type


{ declares }

  DNIPropertyValueUIService = interface; // type: System.Drawing.Design.IPropertyValueUIService, namespace: System.Drawing.Design
  DNIToolboxItemProvider = interface; // type: System.Drawing.Design.IToolboxItemProvider, namespace: System.Drawing.Design
  DNIToolboxService = interface; // type: System.Drawing.Design.IToolboxService, namespace: System.Drawing.Design
  DNIToolboxUser = interface; // type: System.Drawing.Design.IToolboxUser, namespace: System.Drawing.Design
  DNIDeviceContext = interface; // type: System.Drawing.IDeviceContext, namespace: System.Drawing
  DNBitmapSuffixInSameAssemblyAttribute = interface; // type: System.Drawing.BitmapSuffixInSameAssemblyAttribute, namespace: System.Drawing
  DNBitmapSuffixInSatelliteAssemblyAttribute = interface; // type: System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute, namespace: System.Drawing
  DNToolboxBitmapAttribute = interface; // type: System.Drawing.ToolboxBitmapAttribute, namespace: System.Drawing
  DNPrintingPermissionAttribute = interface; // type: System.Drawing.Printing.PrintingPermissionAttribute, namespace: System.Drawing.Printing
  DNCategoryNameCollection = interface; // type: System.Drawing.Design.CategoryNameCollection, namespace: System.Drawing.Design
  DNToolboxItemCollection = interface; // type: System.Drawing.Design.ToolboxItemCollection, namespace: System.Drawing.Design
  DNFontConverter_FontUnitConverter = interface; // type: System.Drawing.FontConverter+FontUnitConverter, namespace: System.Drawing
  DNIconConverter = interface; // type: System.Drawing.IconConverter, namespace: System.Drawing
  DNMarginsConverter = interface; // type: System.Drawing.Printing.MarginsConverter, namespace: System.Drawing.Printing
  DNColorConverter = interface; // type: System.Drawing.ColorConverter, namespace: System.Drawing
  DNFontConverter = interface; // type: System.Drawing.FontConverter, namespace: System.Drawing
  DNFontConverter_FontNameConverter = interface; // type: System.Drawing.FontConverter+FontNameConverter, namespace: System.Drawing
  DNImageConverter = interface; // type: System.Drawing.ImageConverter, namespace: System.Drawing
  DNImageFormatConverter = interface; // type: System.Drawing.ImageFormatConverter, namespace: System.Drawing
  DNPointConverter = interface; // type: System.Drawing.PointConverter, namespace: System.Drawing
  DNRectangleConverter = interface; // type: System.Drawing.RectangleConverter, namespace: System.Drawing
  DNSizeConverter = interface; // type: System.Drawing.SizeConverter, namespace: System.Drawing
  DNSizeFConverter = interface; // type: System.Drawing.SizeFConverter, namespace: System.Drawing
  DNSystemDrawingSection = interface; // type: System.Drawing.Configuration.SystemDrawingSection, namespace: System.Drawing.Configuration
  DNBrushes = interface; // type: System.Drawing.Brushes, namespace: System.Drawing
  DNBufferedGraphics = interface; // type: System.Drawing.BufferedGraphics, namespace: System.Drawing
  DNBufferedGraphicsContext = interface; // type: System.Drawing.BufferedGraphicsContext, namespace: System.Drawing
  DNBufferedGraphicsManager = interface; // type: System.Drawing.BufferedGraphicsManager, namespace: System.Drawing
  DNColorTranslator = interface; // type: System.Drawing.ColorTranslator, namespace: System.Drawing
  DNPropertyValueUIItem = interface; // type: System.Drawing.Design.PropertyValueUIItem, namespace: System.Drawing.Design
  DNToolboxItem = interface; // type: System.Drawing.Design.ToolboxItem, namespace: System.Drawing.Design
  DNUITypeEditor = interface; // type: System.Drawing.Design.UITypeEditor, namespace: System.Drawing.Design
  DNBlend = interface; // type: System.Drawing.Drawing2D.Blend, namespace: System.Drawing.Drawing2D
  DNColorBlend = interface; // type: System.Drawing.Drawing2D.ColorBlend, namespace: System.Drawing.Drawing2D
  DNPathData = interface; // type: System.Drawing.Drawing2D.PathData, namespace: System.Drawing.Drawing2D
  DNRegionData = interface; // type: System.Drawing.Drawing2D.RegionData, namespace: System.Drawing.Drawing2D
  DNImageAnimator = interface; // type: System.Drawing.ImageAnimator, namespace: System.Drawing
  DNBitmapData = interface; // type: System.Drawing.Imaging.BitmapData, namespace: System.Drawing.Imaging
  DNColorMap = interface; // type: System.Drawing.Imaging.ColorMap, namespace: System.Drawing.Imaging
  DNColorMatrix = interface; // type: System.Drawing.Imaging.ColorMatrix, namespace: System.Drawing.Imaging
  DNColorPalette = interface; // type: System.Drawing.Imaging.ColorPalette, namespace: System.Drawing.Imaging
  DNEncoder = interface; // type: System.Drawing.Imaging.Encoder, namespace: System.Drawing.Imaging
  DNEncoderParameter = interface; // type: System.Drawing.Imaging.EncoderParameter, namespace: System.Drawing.Imaging
  DNEncoderParameters = interface; // type: System.Drawing.Imaging.EncoderParameters, namespace: System.Drawing.Imaging
  DNFrameDimension = interface; // type: System.Drawing.Imaging.FrameDimension, namespace: System.Drawing.Imaging
  DNImageAttributes = interface; // type: System.Drawing.Imaging.ImageAttributes, namespace: System.Drawing.Imaging
  DNImageCodecInfo = interface; // type: System.Drawing.Imaging.ImageCodecInfo, namespace: System.Drawing.Imaging
  DNImageFormat = interface; // type: System.Drawing.Imaging.ImageFormat, namespace: System.Drawing.Imaging
  DNMetafileHeader = interface; // type: System.Drawing.Imaging.MetafileHeader, namespace: System.Drawing.Imaging
  DNMetaHeader = interface; // type: System.Drawing.Imaging.MetaHeader, namespace: System.Drawing.Imaging
  DNPropertyItem = interface; // type: System.Drawing.Imaging.PropertyItem, namespace: System.Drawing.Imaging
  DNWmfPlaceableFileHeader = interface; // type: System.Drawing.Imaging.WmfPlaceableFileHeader, namespace: System.Drawing.Imaging
  DNPens = interface; // type: System.Drawing.Pens, namespace: System.Drawing
  DNMargins = interface; // type: System.Drawing.Printing.Margins, namespace: System.Drawing.Printing
  DNPageSettings = interface; // type: System.Drawing.Printing.PageSettings, namespace: System.Drawing.Printing
  DNPaperSize = interface; // type: System.Drawing.Printing.PaperSize, namespace: System.Drawing.Printing
  DNPaperSource = interface; // type: System.Drawing.Printing.PaperSource, namespace: System.Drawing.Printing
  DNPreviewPageInfo = interface; // type: System.Drawing.Printing.PreviewPageInfo, namespace: System.Drawing.Printing
  DNPrintController = interface; // type: System.Drawing.Printing.PrintController, namespace: System.Drawing.Printing
  DNPreviewPrintController = interface; // type: System.Drawing.Printing.PreviewPrintController, namespace: System.Drawing.Printing
  DNStandardPrintController = interface; // type: System.Drawing.Printing.StandardPrintController, namespace: System.Drawing.Printing
  DNPrinterResolution = interface; // type: System.Drawing.Printing.PrinterResolution, namespace: System.Drawing.Printing
  DNPrinterSettings = interface; // type: System.Drawing.Printing.PrinterSettings, namespace: System.Drawing.Printing
  DNPrinterSettings_PaperSizeCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PaperSizeCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_PaperSourceCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PaperSourceCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_PrinterResolutionCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_StringCollection = interface; // type: System.Drawing.Printing.PrinterSettings+StringCollection, namespace: System.Drawing.Printing
  DNPrinterUnitConvert = interface; // type: System.Drawing.Printing.PrinterUnitConvert, namespace: System.Drawing.Printing
  DNSystemBrushes = interface; // type: System.Drawing.SystemBrushes, namespace: System.Drawing
  DNSystemColors = interface; // type: System.Drawing.SystemColors, namespace: System.Drawing
  DNSystemFonts = interface; // type: System.Drawing.SystemFonts, namespace: System.Drawing
  DNSystemIcons = interface; // type: System.Drawing.SystemIcons, namespace: System.Drawing
  DNSystemPens = interface; // type: System.Drawing.SystemPens, namespace: System.Drawing
  DNFontCollection = interface; // type: System.Drawing.Text.FontCollection, namespace: System.Drawing.Text
  DNInstalledFontCollection = interface; // type: System.Drawing.Text.InstalledFontCollection, namespace: System.Drawing.Text
  DNPrivateFontCollection = interface; // type: System.Drawing.Text.PrivateFontCollection, namespace: System.Drawing.Text
  DNPrintEventArgs = interface; // type: System.Drawing.Printing.PrintEventArgs, namespace: System.Drawing.Printing
  DNQueryPageSettingsEventArgs = interface; // type: System.Drawing.Printing.QueryPageSettingsEventArgs, namespace: System.Drawing.Printing
  DNPaintValueEventArgs = interface; // type: System.Drawing.Design.PaintValueEventArgs, namespace: System.Drawing.Design
  DNToolboxComponentsCreatedEventArgs = interface; // type: System.Drawing.Design.ToolboxComponentsCreatedEventArgs, namespace: System.Drawing.Design
  DNToolboxComponentsCreatingEventArgs = interface; // type: System.Drawing.Design.ToolboxComponentsCreatingEventArgs, namespace: System.Drawing.Design
  DNPrintPageEventArgs = interface; // type: System.Drawing.Printing.PrintPageEventArgs, namespace: System.Drawing.Printing
  DNInvalidPrinterException = interface; // type: System.Drawing.Printing.InvalidPrinterException, namespace: System.Drawing.Printing
  DNPrintDocument = interface; // type: System.Drawing.Printing.PrintDocument, namespace: System.Drawing.Printing
  DNBrush = interface; // type: System.Drawing.Brush, namespace: System.Drawing
  DNHatchBrush = interface; // type: System.Drawing.Drawing2D.HatchBrush, namespace: System.Drawing.Drawing2D
  DNLinearGradientBrush = interface; // type: System.Drawing.Drawing2D.LinearGradientBrush, namespace: System.Drawing.Drawing2D
  DNPathGradientBrush = interface; // type: System.Drawing.Drawing2D.PathGradientBrush, namespace: System.Drawing.Drawing2D
  DNSolidBrush = interface; // type: System.Drawing.SolidBrush, namespace: System.Drawing
  DNTextureBrush = interface; // type: System.Drawing.TextureBrush, namespace: System.Drawing
  DNCustomLineCap = interface; // type: System.Drawing.Drawing2D.CustomLineCap, namespace: System.Drawing.Drawing2D
  DNAdjustableArrowCap = interface; // type: System.Drawing.Drawing2D.AdjustableArrowCap, namespace: System.Drawing.Drawing2D
  DNGraphicsContainer = interface; // type: System.Drawing.Drawing2D.GraphicsContainer, namespace: System.Drawing.Drawing2D
  DNGraphicsPath = interface; // type: System.Drawing.Drawing2D.GraphicsPath, namespace: System.Drawing.Drawing2D
  DNGraphicsPathIterator = interface; // type: System.Drawing.Drawing2D.GraphicsPathIterator, namespace: System.Drawing.Drawing2D
  DNGraphicsState = interface; // type: System.Drawing.Drawing2D.GraphicsState, namespace: System.Drawing.Drawing2D
  DNMatrix = interface; // type: System.Drawing.Drawing2D.Matrix, namespace: System.Drawing.Drawing2D
  DNFont = interface; // type: System.Drawing.Font, namespace: System.Drawing
  DNFontFamily = interface; // type: System.Drawing.FontFamily, namespace: System.Drawing
  DNGraphics = interface; // type: System.Drawing.Graphics, namespace: System.Drawing
  DNIcon = interface; // type: System.Drawing.Icon, namespace: System.Drawing
  DNImage = interface; // type: System.Drawing.Image, namespace: System.Drawing
  DNBitmap = interface; // type: System.Drawing.Bitmap, namespace: System.Drawing
  DNMetafile = interface; // type: System.Drawing.Imaging.Metafile, namespace: System.Drawing.Imaging
  DNPen = interface; // type: System.Drawing.Pen, namespace: System.Drawing
  DNRegion = interface; // type: System.Drawing.Region, namespace: System.Drawing
  DNStringFormat = interface; // type: System.Drawing.StringFormat, namespace: System.Drawing
  DNPrintingPermission = interface; // type: System.Drawing.Printing.PrintingPermission, namespace: System.Drawing.Printing
  DNCharacterRange = interface; // type: System.Drawing.CharacterRange, namespace: System.Drawing
  DNColor = interface; // type: System.Drawing.Color, namespace: System.Drawing
  DNPoint = interface; // type: System.Drawing.Point, namespace: System.Drawing
  DNPointF = interface; // type: System.Drawing.PointF, namespace: System.Drawing
  DNRectangle = interface; // type: System.Drawing.Rectangle, namespace: System.Drawing
  DNRectangleF = interface; // type: System.Drawing.RectangleF, namespace: System.Drawing
  DNSize = interface; // type: System.Drawing.Size, namespace: System.Drawing
  DNSizeF = interface; // type: System.Drawing.SizeF, namespace: System.Drawing

{ delegates }

  [DNTypeName('System.Drawing.Design.PropertyValueUIHandler')]
  DNPropertyValueUIHandler = procedure(context: DDN.System.DNITypeDescriptorContext; propDesc: DDN.System.DNPropertyDescriptor; valueUIItemList: DDN.mscorlib.DNArrayList) of object;

  [DNTypeName('System.Drawing.Design.PropertyValueUIItemInvokeHandler')]
  DNPropertyValueUIItemInvokeHandler = procedure(context: DDN.System.DNITypeDescriptorContext; descriptor: DDN.System.DNPropertyDescriptor; invokedItem: DNPropertyValueUIItem) of object;

  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatedEventHandler')]
  DNToolboxComponentsCreatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNToolboxComponentsCreatedEventArgs) of object;

  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatingEventHandler')]
  DNToolboxComponentsCreatingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNToolboxComponentsCreatingEventArgs) of object;

  [DNTypeName('System.Drawing.Design.ToolboxItemCreatorCallback')]
  DNToolboxItemCreatorCallback = function(serializedObject: DDN.mscorlib.DNObject; format: string): DNToolboxItem of object;

  [DNTypeName('System.Drawing.Graphics+DrawImageAbort')]
  DNGraphics_DrawImageAbort = function(callbackdata: IntPtr): Boolean of object;

  [DNTypeName('System.Drawing.Imaging.PlayRecordCallback')]
  DNPlayRecordCallback = procedure(recordType: DNEmfPlusRecordType; flags: Int32; dataSize: Int32; recordData: IntPtr) of object;

  [DNTypeName('System.Drawing.Graphics+EnumerateMetafileProc')]
  DNGraphics_EnumerateMetafileProc = function(recordType: DNEmfPlusRecordType; flags: Int32; dataSize: Int32; data: IntPtr; callbackData: DNPlayRecordCallback): Boolean of object;

  [DNTypeName('System.Drawing.Image+GetThumbnailImageAbort')]
  DNImage_GetThumbnailImageAbort = function: Boolean of object;

  [DNTypeName('System.Drawing.Printing.PrintEventHandler')]
  DNPrintEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPrintEventArgs) of object;

  [DNTypeName('System.Drawing.Printing.PrintPageEventHandler')]
  DNPrintPageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPrintPageEventArgs) of object;

  [DNTypeName('System.Drawing.Printing.QueryPageSettingsEventHandler')]
  DNQueryPageSettingsEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNQueryPageSettingsEventArgs) of object;




{ objects }

  //-------------namespace: System.Drawing.Design----------------
  [DNTypeName('System.Drawing.Design.IPropertyValueUIService')]
  DNIPropertyValueUIService = interface(DDN.mscorlib.DNObject)
  ['{F040B2E4-FA29-3542-9D43-C6B81C6A55DC}']
  { events } 

    procedure add_PropertyUIValueItemsChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PropertyUIValueItemsChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure AddPropertyValueUIHandler(newHandler: DNPropertyValueUIHandler);
    function GetPropertyUIValueItems(context: DDN.System.DNITypeDescriptorContext; propDesc: DDN.System.DNPropertyDescriptor): TArray<DNPropertyValueUIItem>;
    procedure NotifyPropertyValueUIItemsChanged;
    procedure RemovePropertyValueUIHandler(newHandler: DNPropertyValueUIHandler);

  end;

  //-------------namespace: System.Drawing.Design----------------
  [DNTypeName('System.Drawing.Design.IToolboxItemProvider')]
  DNIToolboxItemProvider = interface(DDN.mscorlib.DNObject)
  ['{7F949FDD-E8FA-3F3A-B2FA-BA70C779B8E9}']
  { getters & setters } 

    function get_Items: DNToolboxItemCollection;

  { propertys } 

    property Items: DNToolboxItemCollection read get_Items;
  end;

  //-------------namespace: System.Drawing.Design----------------
  [DNTypeName('System.Drawing.Design.IToolboxService')]
  DNIToolboxService = interface(DDN.mscorlib.DNObject)
  ['{4BACD258-DE64-4048-BC4E-FEDBEF9ACB76}']
  { getters & setters } 

    function get_CategoryNames: DNCategoryNameCollection;
    function get_SelectedCategory: string;
    procedure set_SelectedCategory(value: string);

  { methods } 

    procedure AddCreator(creator: DNToolboxItemCreatorCallback; format: string); overload;
    procedure AddCreator(creator: DNToolboxItemCreatorCallback; format: string; host: DDN.System.DNIDesignerHost); overload;
    procedure AddLinkedToolboxItem(toolboxItem: DNToolboxItem; host: DDN.System.DNIDesignerHost); overload;
    procedure AddLinkedToolboxItem(toolboxItem: DNToolboxItem; category: string; host: DDN.System.DNIDesignerHost); overload;
    procedure AddToolboxItem(toolboxItem: DNToolboxItem); overload;
    procedure AddToolboxItem(toolboxItem: DNToolboxItem; category: string); overload;
    function DeserializeToolboxItem(serializedObject: DDN.mscorlib.DNObject): DNToolboxItem; overload;
    function DeserializeToolboxItem(serializedObject: DDN.mscorlib.DNObject; host: DDN.System.DNIDesignerHost): DNToolboxItem; overload;
    function GetSelectedToolboxItem: DNToolboxItem; overload;
    function GetSelectedToolboxItem(host: DDN.System.DNIDesignerHost): DNToolboxItem; overload;
    function GetToolboxItems: DNToolboxItemCollection; overload;
    function GetToolboxItems(host: DDN.System.DNIDesignerHost): DNToolboxItemCollection; overload;
    function GetToolboxItems(category: string): DNToolboxItemCollection; overload;
    function GetToolboxItems(category: string; host: DDN.System.DNIDesignerHost): DNToolboxItemCollection; overload;
    function IsSupported(serializedObject: DDN.mscorlib.DNObject; host: DDN.System.DNIDesignerHost): Boolean; overload;
    function IsSupported(serializedObject: DDN.mscorlib.DNObject; filterAttributes: DDN.mscorlib.DNICollection): Boolean; overload;
    function IsToolboxItem(serializedObject: DDN.mscorlib.DNObject): Boolean; overload;
    function IsToolboxItem(serializedObject: DDN.mscorlib.DNObject; host: DDN.System.DNIDesignerHost): Boolean; overload;
    procedure Refresh;
    procedure RemoveCreator(format: string); overload;
    procedure RemoveCreator(format: string; host: DDN.System.DNIDesignerHost); overload;
    procedure RemoveToolboxItem(toolboxItem: DNToolboxItem); overload;
    procedure RemoveToolboxItem(toolboxItem: DNToolboxItem; category: string); overload;
    procedure SelectedToolboxItemUsed;
    function SerializeToolboxItem(toolboxItem: DNToolboxItem): DDN.mscorlib.DNObject;
    function SetCursor: Boolean;
    procedure SetSelectedToolboxItem(toolboxItem: DNToolboxItem);

  { propertys } 

    property CategoryNames: DNCategoryNameCollection read get_CategoryNames;
    property SelectedCategory: string read get_SelectedCategory write set_SelectedCategory;
  end;

  //-------------namespace: System.Drawing.Design----------------
  [DNTypeName('System.Drawing.Design.IToolboxUser')]
  DNIToolboxUser = interface(DDN.mscorlib.DNObject)
  ['{024519CA-FA87-3CEF-A9FD-B3045C8BF453}']
  { methods } 

    function GetToolSupported(tool: DNToolboxItem): Boolean;
    procedure ToolPicked(tool: DNToolboxItem);

  end;

  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.IDeviceContext')]
  DNIDeviceContext = interface(DDN.mscorlib.DNIDisposable)
  ['{3B0820CC-0BAB-3225-A135-975CF1F66BA5}']
  { methods } 

    function GetHdc: IntPtr;
    procedure ReleaseHdc;

  end;

  //-------------namespace: System.Drawing----------------
  DNBitmapSuffixInSameAssemblyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C24982A4-D71E-5366-8253-A7F32372902F}']
  { constructors } 

    {class} function init: DNBitmapSuffixInSameAssemblyAttribute;

  end;

  [DNTypeName('System.Drawing.BitmapSuffixInSameAssemblyAttribute')]
  DNBitmapSuffixInSameAssemblyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{9449CA8F-3B8D-3EA9-B6DB-2E03AB8D5600}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBitmapSuffixInSameAssemblyAttribute = class(TDNGenericImport<DNBitmapSuffixInSameAssemblyAttributeClass, DNBitmapSuffixInSameAssemblyAttribute>) end;

  //-------------namespace: System.Drawing----------------
  DNBitmapSuffixInSatelliteAssemblyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E8AD5958-1F97-5AEA-8C8D-D89675889BC3}']
  { constructors } 

    {class} function init: DNBitmapSuffixInSatelliteAssemblyAttribute;

  end;

  [DNTypeName('System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute')]
  DNBitmapSuffixInSatelliteAssemblyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E91912D3-D8A5-3DED-8DD7-5A140B63BF6D}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBitmapSuffixInSatelliteAssemblyAttribute = class(TDNGenericImport<DNBitmapSuffixInSatelliteAssemblyAttributeClass, DNBitmapSuffixInSatelliteAssemblyAttribute>) end;

  //-------------namespace: System.Drawing----------------
  DNToolboxBitmapAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F18CF918-B3C3-59F4-999F-59B337ED1173}']
  { constructors } 

    {class} function init(imageFile: string): DNToolboxBitmapAttribute; overload;
    {class} function init(t: DDN.mscorlib.DNType): DNToolboxBitmapAttribute; overload;
    {class} function init(t: DDN.mscorlib.DNType; name: string): DNToolboxBitmapAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNToolboxBitmapAttribute;

  { static fields } 

    {class} property &Default: DNToolboxBitmapAttribute read __fakeFieldGet_Default;

  { static methods } 

    {class} function GetImageFromResource(t: DDN.mscorlib.DNType; imageName: string; large: Boolean): DNImage;

  end;

  [DNTypeName('System.Drawing.ToolboxBitmapAttribute')]
  DNToolboxBitmapAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{958611BF-572A-3521-8649-F0196B634BBC}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(value: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetImage(component: DDN.mscorlib.DNObject): DNImage; overload;
    function GetImage(component: DDN.mscorlib.DNObject; large: Boolean): DNImage; overload;
    function GetImage(&type: DDN.mscorlib.DNType): DNImage; overload;
    function GetImage(&type: DDN.mscorlib.DNType; large: Boolean): DNImage; overload;
    function GetImage(&type: DDN.mscorlib.DNType; imgName: string; large: Boolean): DNImage; overload;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNToolboxBitmapAttribute = class(TDNGenericImport<DNToolboxBitmapAttributeClass, DNToolboxBitmapAttribute>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintingPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{27880435-7C49-5C6E-B24D-01933E2BFDEC}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNPrintingPermissionAttribute;

  end;

  [DNTypeName('System.Drawing.Printing.PrintingPermissionAttribute')]
  DNPrintingPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{D1C669D1-CD77-385B-B501-843601DA7831}']
  { getters & setters } 

    function get_Level: DNPrintingPermissionLevel;
    procedure set_Level(value: DNPrintingPermissionLevel);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Level: DNPrintingPermissionLevel read get_Level write set_Level;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPrintingPermissionAttribute = class(TDNGenericImport<DNPrintingPermissionAttributeClass, DNPrintingPermissionAttribute>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNCategoryNameCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{ABF49256-3068-5ADC-AF1F-B840D0C0E415}']
  { constructors } 

    {class} function init(value: DNCategoryNameCollection): DNCategoryNameCollection; overload;
    {class} function init(value: TArray<string>): DNCategoryNameCollection; overload;

  end;

  [DNTypeName('System.Drawing.Design.CategoryNameCollection')]
  DNCategoryNameCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{90EDDA3E-F955-3197-82E3-15B2AC28BD27}']
  { getters & setters } 

    function get_Item(index: Int32): string;
    function get_Count: Int32;

  { methods } 

    function &Contains(value: string): Boolean;
    procedure CopyTo(&array: TArray<string>; index: Int32);
    function IndexOf(value: string): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: string read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNCategoryNameCollection = class(TDNGenericImport<DNCategoryNameCollectionClass, DNCategoryNameCollection>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxItemCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{45954401-EFBA-5D96-9174-419CE609A37B}']
  { constructors } 

    {class} function init(value: DNToolboxItemCollection): DNToolboxItemCollection; overload;
    {class} function init(value: TArray<DNToolboxItem>): DNToolboxItemCollection; overload;

  end;

  [DNTypeName('System.Drawing.Design.ToolboxItemCollection')]
  DNToolboxItemCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{58541023-7DF4-3273-AA27-E4C0362FE493}']
  { getters & setters } 

    function get_Item(index: Int32): DNToolboxItem;
    function get_Count: Int32;

  { methods } 

    function &Contains(value: DNToolboxItem): Boolean;
    procedure CopyTo(&array: TArray<DNToolboxItem>; index: Int32);
    function IndexOf(value: DNToolboxItem): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNToolboxItem read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNToolboxItemCollection = class(TDNGenericImport<DNToolboxItemCollectionClass, DNToolboxItemCollection>) end;

  //-------------namespace: System.Drawing----------------
  DNFontConverter_FontUnitConverterClass = interface(DNObjectClass)
  ['{E52EC7AA-2FBD-5159-8F8E-64117BB8B2B9}']
  { constructors } 

    {class} function init: DNFontConverter_FontUnitConverter;

  end;

  [DNTypeName('System.Drawing.FontConverter+FontUnitConverter')]
  DNFontConverter_FontUnitConverter = interface(DNObject)
  ['{6A1AEA9B-ED2B-355F-86C4-00BFB8F91FD2}']
  { methods } 

    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConverter_FontUnitConverter = class(TDNGenericImport<DNFontConverter_FontUnitConverterClass, DNFontConverter_FontUnitConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNIconConverterClass = interface(DNObjectClass)
  ['{80FD3AC4-64BA-5D2F-BBA5-37556D2CF30D}']
  { constructors } 

    {class} function init: DNIconConverter;

  end;

  [DNTypeName('System.Drawing.IconConverter')]
  DNIconConverter = interface(DNObject)
  ['{9B244C3F-C2B0-3BD6-83AB-96CADE65010F}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIconConverter = class(TDNGenericImport<DNIconConverterClass, DNIconConverter>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNMarginsConverterClass = interface(DNObjectClass)
  ['{D8F6CE72-3903-5F84-917D-8167CD235FEA}']
  { constructors } 

    {class} function init: DNMarginsConverter;

  end;

  [DNTypeName('System.Drawing.Printing.MarginsConverter')]
  DNMarginsConverter = interface(DNObject)
  ['{F95545A7-1A52-3CB5-92D0-6BA9F2145F85}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMarginsConverter = class(TDNGenericImport<DNMarginsConverterClass, DNMarginsConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNColorConverterClass = interface(DNObjectClass)
  ['{F6A5D361-A51E-504E-B922-B7DFF92D8343}']
  { constructors } 

    {class} function init: DNColorConverter;

  end;

  [DNTypeName('System.Drawing.ColorConverter')]
  DNColorConverter = interface(DNObject)
  ['{0DCDEF42-0CC9-36F4-8F69-4F9D5805DEC3}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColorConverter = class(TDNGenericImport<DNColorConverterClass, DNColorConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNFontConverterClass = interface(DNObjectClass)
  ['{CC812D60-ABA3-5B71-9E16-EC78F4F8F9DD}']
  { constructors } 

    {class} function init: DNFontConverter;

  end;

  [DNTypeName('System.Drawing.FontConverter')]
  DNFontConverter = interface(DNObject)
  ['{EF60651F-9566-36AA-8388-C90CDC3DB73B}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConverter = class(TDNGenericImport<DNFontConverterClass, DNFontConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNFontConverter_FontNameConverterClass = interface(DNObjectClass)
  ['{9F84072F-A21E-57B7-BCDA-6F4A572C257C}']
  { constructors } 

    {class} function init: DNFontConverter_FontNameConverter;

  end;

  [DNTypeName('System.Drawing.FontConverter+FontNameConverter')]
  DNFontConverter_FontNameConverter = interface(DNObject)
  ['{F4E660EE-5F2C-3FD1-9F3C-B4DECB492462}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConverter_FontNameConverter = class(TDNGenericImport<DNFontConverter_FontNameConverterClass, DNFontConverter_FontNameConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNImageConverterClass = interface(DNObjectClass)
  ['{4A2CE72A-BAE7-5C80-B713-4D7435711BF7}']
  { constructors } 

    {class} function init: DNImageConverter;

  end;

  [DNTypeName('System.Drawing.ImageConverter')]
  DNImageConverter = interface(DNObject)
  ['{D0A407DC-F920-3AAA-AE30-85A1F49D7160}']
  { methods } 

    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageConverter = class(TDNGenericImport<DNImageConverterClass, DNImageConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNImageFormatConverterClass = interface(DNObjectClass)
  ['{9B9898F3-5F4C-5876-B5F5-BB43A0AEA1DE}']
  { constructors } 

    {class} function init: DNImageFormatConverter;

  end;

  [DNTypeName('System.Drawing.ImageFormatConverter')]
  DNImageFormatConverter = interface(DNObject)
  ['{813DEBD4-AFA2-3311-AB49-2241417CC926}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageFormatConverter = class(TDNGenericImport<DNImageFormatConverterClass, DNImageFormatConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNPointConverterClass = interface(DNObjectClass)
  ['{443635B0-AF21-5209-AA72-172902CF83D1}']
  { constructors } 

    {class} function init: DNPointConverter;

  end;

  [DNTypeName('System.Drawing.PointConverter')]
  DNPointConverter = interface(DNObject)
  ['{1B140E71-044F-3B84-9559-E223FEB29F6F}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPointConverter = class(TDNGenericImport<DNPointConverterClass, DNPointConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleConverterClass = interface(DNObjectClass)
  ['{367FB9EA-845B-536D-BF02-545CC1341507}']
  { constructors } 

    {class} function init: DNRectangleConverter;

  end;

  [DNTypeName('System.Drawing.RectangleConverter')]
  DNRectangleConverter = interface(DNObject)
  ['{51E83AD8-34A3-3815-99DF-4BEEB6701484}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRectangleConverter = class(TDNGenericImport<DNRectangleConverterClass, DNRectangleConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeConverterClass = interface(DNObjectClass)
  ['{49BE830D-5D51-560C-852B-2BF0871657C5}']
  { constructors } 

    {class} function init: DNSizeConverter;

  end;

  [DNTypeName('System.Drawing.SizeConverter')]
  DNSizeConverter = interface(DNObject)
  ['{0149E1CD-362B-368D-8F5E-257A59ACEED2}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSizeConverter = class(TDNGenericImport<DNSizeConverterClass, DNSizeConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeFConverterClass = interface(DNObjectClass)
  ['{A5C40D56-7FF1-5EBE-8B7E-C76DD640AFB0}']
  { constructors } 

    {class} function init: DNSizeFConverter;

  end;

  [DNTypeName('System.Drawing.SizeFConverter')]
  DNSizeFConverter = interface(DNObject)
  ['{EEF07B80-8E1B-3AF5-BACF-FFEE3B7A57EF}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSizeFConverter = class(TDNGenericImport<DNSizeFConverterClass, DNSizeFConverter>) end;

  //-------------namespace: System.Drawing.Configuration----------------
  DNSystemDrawingSectionClass = interface(DNObjectClass)
  ['{AE5FA05C-C43D-5E9F-BD9A-79C3816F312B}']
  { constructors } 

    {class} function init: DNSystemDrawingSection;

  end;

  [DNTypeName('System.Drawing.Configuration.SystemDrawingSection')]
  DNSystemDrawingSection = interface(DNObject)
  ['{289B240A-8971-3582-9549-E64B875A76C1}']
  { getters & setters } 

    function get_BitmapSuffix: string;
    procedure set_BitmapSuffix(value: string);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BitmapSuffix: string read get_BitmapSuffix write set_BitmapSuffix;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSystemDrawingSection = class(TDNGenericImport<DNSystemDrawingSectionClass, DNSystemDrawingSection>) end;

  //-------------namespace: System.Drawing----------------
  DNBrushesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{168C1B92-8815-550A-8D88-A455269AF7F6}']
  { static getter & setter } 

    {class} function get_Transparent: DNBrush;
    {class} function get_AliceBlue: DNBrush;
    {class} function get_AntiqueWhite: DNBrush;
    {class} function get_Aqua: DNBrush;
    {class} function get_Aquamarine: DNBrush;
    {class} function get_Azure: DNBrush;
    {class} function get_Beige: DNBrush;
    {class} function get_Bisque: DNBrush;
    {class} function get_Black: DNBrush;
    {class} function get_BlanchedAlmond: DNBrush;
    {class} function get_Blue: DNBrush;
    {class} function get_BlueViolet: DNBrush;
    {class} function get_Brown: DNBrush;
    {class} function get_BurlyWood: DNBrush;
    {class} function get_CadetBlue: DNBrush;
    {class} function get_Chartreuse: DNBrush;
    {class} function get_Chocolate: DNBrush;
    {class} function get_Coral: DNBrush;
    {class} function get_CornflowerBlue: DNBrush;
    {class} function get_Cornsilk: DNBrush;
    {class} function get_Crimson: DNBrush;
    {class} function get_Cyan: DNBrush;
    {class} function get_DarkBlue: DNBrush;
    {class} function get_DarkCyan: DNBrush;
    {class} function get_DarkGoldenrod: DNBrush;
    {class} function get_DarkGray: DNBrush;
    {class} function get_DarkGreen: DNBrush;
    {class} function get_DarkKhaki: DNBrush;
    {class} function get_DarkMagenta: DNBrush;
    {class} function get_DarkOliveGreen: DNBrush;
    {class} function get_DarkOrange: DNBrush;
    {class} function get_DarkOrchid: DNBrush;
    {class} function get_DarkRed: DNBrush;
    {class} function get_DarkSalmon: DNBrush;
    {class} function get_DarkSeaGreen: DNBrush;
    {class} function get_DarkSlateBlue: DNBrush;
    {class} function get_DarkSlateGray: DNBrush;
    {class} function get_DarkTurquoise: DNBrush;
    {class} function get_DarkViolet: DNBrush;
    {class} function get_DeepPink: DNBrush;
    {class} function get_DeepSkyBlue: DNBrush;
    {class} function get_DimGray: DNBrush;
    {class} function get_DodgerBlue: DNBrush;
    {class} function get_Firebrick: DNBrush;
    {class} function get_FloralWhite: DNBrush;
    {class} function get_ForestGreen: DNBrush;
    {class} function get_Fuchsia: DNBrush;
    {class} function get_Gainsboro: DNBrush;
    {class} function get_GhostWhite: DNBrush;
    {class} function get_Gold: DNBrush;
    {class} function get_Goldenrod: DNBrush;
    {class} function get_Gray: DNBrush;
    {class} function get_Green: DNBrush;
    {class} function get_GreenYellow: DNBrush;
    {class} function get_Honeydew: DNBrush;
    {class} function get_HotPink: DNBrush;
    {class} function get_IndianRed: DNBrush;
    {class} function get_Indigo: DNBrush;
    {class} function get_Ivory: DNBrush;
    {class} function get_Khaki: DNBrush;
    {class} function get_Lavender: DNBrush;
    {class} function get_LavenderBlush: DNBrush;
    {class} function get_LawnGreen: DNBrush;
    {class} function get_LemonChiffon: DNBrush;
    {class} function get_LightBlue: DNBrush;
    {class} function get_LightCoral: DNBrush;
    {class} function get_LightCyan: DNBrush;
    {class} function get_LightGoldenrodYellow: DNBrush;
    {class} function get_LightGreen: DNBrush;
    {class} function get_LightGray: DNBrush;
    {class} function get_LightPink: DNBrush;
    {class} function get_LightSalmon: DNBrush;
    {class} function get_LightSeaGreen: DNBrush;
    {class} function get_LightSkyBlue: DNBrush;
    {class} function get_LightSlateGray: DNBrush;
    {class} function get_LightSteelBlue: DNBrush;
    {class} function get_LightYellow: DNBrush;
    {class} function get_Lime: DNBrush;
    {class} function get_LimeGreen: DNBrush;
    {class} function get_Linen: DNBrush;
    {class} function get_Magenta: DNBrush;
    {class} function get_Maroon: DNBrush;
    {class} function get_MediumAquamarine: DNBrush;
    {class} function get_MediumBlue: DNBrush;
    {class} function get_MediumOrchid: DNBrush;
    {class} function get_MediumPurple: DNBrush;
    {class} function get_MediumSeaGreen: DNBrush;
    {class} function get_MediumSlateBlue: DNBrush;
    {class} function get_MediumSpringGreen: DNBrush;
    {class} function get_MediumTurquoise: DNBrush;
    {class} function get_MediumVioletRed: DNBrush;
    {class} function get_MidnightBlue: DNBrush;
    {class} function get_MintCream: DNBrush;
    {class} function get_MistyRose: DNBrush;
    {class} function get_Moccasin: DNBrush;
    {class} function get_NavajoWhite: DNBrush;
    {class} function get_Navy: DNBrush;
    {class} function get_OldLace: DNBrush;
    {class} function get_Olive: DNBrush;
    {class} function get_OliveDrab: DNBrush;
    {class} function get_Orange: DNBrush;
    {class} function get_OrangeRed: DNBrush;
    {class} function get_Orchid: DNBrush;
    {class} function get_PaleGoldenrod: DNBrush;
    {class} function get_PaleGreen: DNBrush;
    {class} function get_PaleTurquoise: DNBrush;
    {class} function get_PaleVioletRed: DNBrush;
    {class} function get_PapayaWhip: DNBrush;
    {class} function get_PeachPuff: DNBrush;
    {class} function get_Peru: DNBrush;
    {class} function get_Pink: DNBrush;
    {class} function get_Plum: DNBrush;
    {class} function get_PowderBlue: DNBrush;
    {class} function get_Purple: DNBrush;
    {class} function get_Red: DNBrush;
    {class} function get_RosyBrown: DNBrush;
    {class} function get_RoyalBlue: DNBrush;
    {class} function get_SaddleBrown: DNBrush;
    {class} function get_Salmon: DNBrush;
    {class} function get_SandyBrown: DNBrush;
    {class} function get_SeaGreen: DNBrush;
    {class} function get_SeaShell: DNBrush;
    {class} function get_Sienna: DNBrush;
    {class} function get_Silver: DNBrush;
    {class} function get_SkyBlue: DNBrush;
    {class} function get_SlateBlue: DNBrush;
    {class} function get_SlateGray: DNBrush;
    {class} function get_Snow: DNBrush;
    {class} function get_SpringGreen: DNBrush;
    {class} function get_SteelBlue: DNBrush;
    {class} function get_Tan: DNBrush;
    {class} function get_Teal: DNBrush;
    {class} function get_Thistle: DNBrush;
    {class} function get_Tomato: DNBrush;
    {class} function get_Turquoise: DNBrush;
    {class} function get_Violet: DNBrush;
    {class} function get_Wheat: DNBrush;
    {class} function get_White: DNBrush;
    {class} function get_WhiteSmoke: DNBrush;
    {class} function get_Yellow: DNBrush;
    {class} function get_YellowGreen: DNBrush;

  { static propertys } 

    {class} property Transparent: DNBrush read get_Transparent;
    {class} property AliceBlue: DNBrush read get_AliceBlue;
    {class} property AntiqueWhite: DNBrush read get_AntiqueWhite;
    {class} property Aqua: DNBrush read get_Aqua;
    {class} property Aquamarine: DNBrush read get_Aquamarine;
    {class} property Azure: DNBrush read get_Azure;
    {class} property Beige: DNBrush read get_Beige;
    {class} property Bisque: DNBrush read get_Bisque;
    {class} property Black: DNBrush read get_Black;
    {class} property BlanchedAlmond: DNBrush read get_BlanchedAlmond;
    {class} property Blue: DNBrush read get_Blue;
    {class} property BlueViolet: DNBrush read get_BlueViolet;
    {class} property Brown: DNBrush read get_Brown;
    {class} property BurlyWood: DNBrush read get_BurlyWood;
    {class} property CadetBlue: DNBrush read get_CadetBlue;
    {class} property Chartreuse: DNBrush read get_Chartreuse;
    {class} property Chocolate: DNBrush read get_Chocolate;
    {class} property Coral: DNBrush read get_Coral;
    {class} property CornflowerBlue: DNBrush read get_CornflowerBlue;
    {class} property Cornsilk: DNBrush read get_Cornsilk;
    {class} property Crimson: DNBrush read get_Crimson;
    {class} property Cyan: DNBrush read get_Cyan;
    {class} property DarkBlue: DNBrush read get_DarkBlue;
    {class} property DarkCyan: DNBrush read get_DarkCyan;
    {class} property DarkGoldenrod: DNBrush read get_DarkGoldenrod;
    {class} property DarkGray: DNBrush read get_DarkGray;
    {class} property DarkGreen: DNBrush read get_DarkGreen;
    {class} property DarkKhaki: DNBrush read get_DarkKhaki;
    {class} property DarkMagenta: DNBrush read get_DarkMagenta;
    {class} property DarkOliveGreen: DNBrush read get_DarkOliveGreen;
    {class} property DarkOrange: DNBrush read get_DarkOrange;
    {class} property DarkOrchid: DNBrush read get_DarkOrchid;
    {class} property DarkRed: DNBrush read get_DarkRed;
    {class} property DarkSalmon: DNBrush read get_DarkSalmon;
    {class} property DarkSeaGreen: DNBrush read get_DarkSeaGreen;
    {class} property DarkSlateBlue: DNBrush read get_DarkSlateBlue;
    {class} property DarkSlateGray: DNBrush read get_DarkSlateGray;
    {class} property DarkTurquoise: DNBrush read get_DarkTurquoise;
    {class} property DarkViolet: DNBrush read get_DarkViolet;
    {class} property DeepPink: DNBrush read get_DeepPink;
    {class} property DeepSkyBlue: DNBrush read get_DeepSkyBlue;
    {class} property DimGray: DNBrush read get_DimGray;
    {class} property DodgerBlue: DNBrush read get_DodgerBlue;
    {class} property Firebrick: DNBrush read get_Firebrick;
    {class} property FloralWhite: DNBrush read get_FloralWhite;
    {class} property ForestGreen: DNBrush read get_ForestGreen;
    {class} property Fuchsia: DNBrush read get_Fuchsia;
    {class} property Gainsboro: DNBrush read get_Gainsboro;
    {class} property GhostWhite: DNBrush read get_GhostWhite;
    {class} property Gold: DNBrush read get_Gold;
    {class} property Goldenrod: DNBrush read get_Goldenrod;
    {class} property Gray: DNBrush read get_Gray;
    {class} property Green: DNBrush read get_Green;
    {class} property GreenYellow: DNBrush read get_GreenYellow;
    {class} property Honeydew: DNBrush read get_Honeydew;
    {class} property HotPink: DNBrush read get_HotPink;
    {class} property IndianRed: DNBrush read get_IndianRed;
    {class} property Indigo: DNBrush read get_Indigo;
    {class} property Ivory: DNBrush read get_Ivory;
    {class} property Khaki: DNBrush read get_Khaki;
    {class} property Lavender: DNBrush read get_Lavender;
    {class} property LavenderBlush: DNBrush read get_LavenderBlush;
    {class} property LawnGreen: DNBrush read get_LawnGreen;
    {class} property LemonChiffon: DNBrush read get_LemonChiffon;
    {class} property LightBlue: DNBrush read get_LightBlue;
    {class} property LightCoral: DNBrush read get_LightCoral;
    {class} property LightCyan: DNBrush read get_LightCyan;
    {class} property LightGoldenrodYellow: DNBrush read get_LightGoldenrodYellow;
    {class} property LightGreen: DNBrush read get_LightGreen;
    {class} property LightGray: DNBrush read get_LightGray;
    {class} property LightPink: DNBrush read get_LightPink;
    {class} property LightSalmon: DNBrush read get_LightSalmon;
    {class} property LightSeaGreen: DNBrush read get_LightSeaGreen;
    {class} property LightSkyBlue: DNBrush read get_LightSkyBlue;
    {class} property LightSlateGray: DNBrush read get_LightSlateGray;
    {class} property LightSteelBlue: DNBrush read get_LightSteelBlue;
    {class} property LightYellow: DNBrush read get_LightYellow;
    {class} property Lime: DNBrush read get_Lime;
    {class} property LimeGreen: DNBrush read get_LimeGreen;
    {class} property Linen: DNBrush read get_Linen;
    {class} property Magenta: DNBrush read get_Magenta;
    {class} property Maroon: DNBrush read get_Maroon;
    {class} property MediumAquamarine: DNBrush read get_MediumAquamarine;
    {class} property MediumBlue: DNBrush read get_MediumBlue;
    {class} property MediumOrchid: DNBrush read get_MediumOrchid;
    {class} property MediumPurple: DNBrush read get_MediumPurple;
    {class} property MediumSeaGreen: DNBrush read get_MediumSeaGreen;
    {class} property MediumSlateBlue: DNBrush read get_MediumSlateBlue;
    {class} property MediumSpringGreen: DNBrush read get_MediumSpringGreen;
    {class} property MediumTurquoise: DNBrush read get_MediumTurquoise;
    {class} property MediumVioletRed: DNBrush read get_MediumVioletRed;
    {class} property MidnightBlue: DNBrush read get_MidnightBlue;
    {class} property MintCream: DNBrush read get_MintCream;
    {class} property MistyRose: DNBrush read get_MistyRose;
    {class} property Moccasin: DNBrush read get_Moccasin;
    {class} property NavajoWhite: DNBrush read get_NavajoWhite;
    {class} property Navy: DNBrush read get_Navy;
    {class} property OldLace: DNBrush read get_OldLace;
    {class} property Olive: DNBrush read get_Olive;
    {class} property OliveDrab: DNBrush read get_OliveDrab;
    {class} property Orange: DNBrush read get_Orange;
    {class} property OrangeRed: DNBrush read get_OrangeRed;
    {class} property Orchid: DNBrush read get_Orchid;
    {class} property PaleGoldenrod: DNBrush read get_PaleGoldenrod;
    {class} property PaleGreen: DNBrush read get_PaleGreen;
    {class} property PaleTurquoise: DNBrush read get_PaleTurquoise;
    {class} property PaleVioletRed: DNBrush read get_PaleVioletRed;
    {class} property PapayaWhip: DNBrush read get_PapayaWhip;
    {class} property PeachPuff: DNBrush read get_PeachPuff;
    {class} property Peru: DNBrush read get_Peru;
    {class} property Pink: DNBrush read get_Pink;
    {class} property Plum: DNBrush read get_Plum;
    {class} property PowderBlue: DNBrush read get_PowderBlue;
    {class} property Purple: DNBrush read get_Purple;
    {class} property Red: DNBrush read get_Red;
    {class} property RosyBrown: DNBrush read get_RosyBrown;
    {class} property RoyalBlue: DNBrush read get_RoyalBlue;
    {class} property SaddleBrown: DNBrush read get_SaddleBrown;
    {class} property Salmon: DNBrush read get_Salmon;
    {class} property SandyBrown: DNBrush read get_SandyBrown;
    {class} property SeaGreen: DNBrush read get_SeaGreen;
    {class} property SeaShell: DNBrush read get_SeaShell;
    {class} property Sienna: DNBrush read get_Sienna;
    {class} property Silver: DNBrush read get_Silver;
    {class} property SkyBlue: DNBrush read get_SkyBlue;
    {class} property SlateBlue: DNBrush read get_SlateBlue;
    {class} property SlateGray: DNBrush read get_SlateGray;
    {class} property Snow: DNBrush read get_Snow;
    {class} property SpringGreen: DNBrush read get_SpringGreen;
    {class} property SteelBlue: DNBrush read get_SteelBlue;
    {class} property Tan: DNBrush read get_Tan;
    {class} property Teal: DNBrush read get_Teal;
    {class} property Thistle: DNBrush read get_Thistle;
    {class} property Tomato: DNBrush read get_Tomato;
    {class} property Turquoise: DNBrush read get_Turquoise;
    {class} property Violet: DNBrush read get_Violet;
    {class} property Wheat: DNBrush read get_Wheat;
    {class} property White: DNBrush read get_White;
    {class} property WhiteSmoke: DNBrush read get_WhiteSmoke;
    {class} property Yellow: DNBrush read get_Yellow;
    {class} property YellowGreen: DNBrush read get_YellowGreen;
  end;

  [DNTypeName('System.Drawing.Brushes')]
  DNBrushes = interface(DDN.mscorlib.DNObject)
  ['{C63C38E2-2655-356B-9A1A-0117499AEC35}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrushes = class(TDNGenericImport<DNBrushesClass, DNBrushes>) end;

  //-------------namespace: System.Drawing----------------
  DNBufferedGraphicsClass = interface(DNObjectClass)
  ['{A7CA480C-8C3B-58A8-BBDB-9FE64246B5C8}']
  end;

  [DNTypeName('System.Drawing.BufferedGraphics')]
  DNBufferedGraphics = interface(DDN.mscorlib.DNIDisposable)
  ['{330A3DBD-B0A9-3C31-AB87-C7E25DD86B21}']
  { getters & setters } 

    function get_Graphics: DNGraphics;

  { methods } 

    procedure Render; overload;
    procedure Dispose;
    procedure Render(targetDC: IntPtr); overload;
    procedure Render(target: DNGraphics); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Graphics: DNGraphics read get_Graphics;
  end;

  TDNBufferedGraphics = class(TDNGenericImport<DNBufferedGraphicsClass, DNBufferedGraphics>) end;

  //-------------namespace: System.Drawing----------------
  DNBufferedGraphicsContextClass = interface(DNObjectClass)
  ['{BAC41E8C-E712-5FD5-9455-C8CDA1EAF623}']
  { constructors } 

    {class} function init: DNBufferedGraphicsContext;

  end;

  [DNTypeName('System.Drawing.BufferedGraphicsContext')]
  DNBufferedGraphicsContext = interface(DDN.mscorlib.DNIDisposable)
  ['{E35AA1CB-98A1-3C1B-8B01-CD59A9CB2791}']
  { getters & setters } 

    function get_MaximumBuffer: DNSize;
    procedure set_MaximumBuffer(value: DNSize);

  { methods } 

    function Allocate(targetGraphics: DNGraphics; targetRectangle: DNRectangle): DNBufferedGraphics; overload;
    function Allocate(targetDC: IntPtr; targetRectangle: DNRectangle): DNBufferedGraphics; overload;
    procedure Dispose;
    procedure Invalidate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MaximumBuffer: DNSize read get_MaximumBuffer write set_MaximumBuffer;
  end;

  TDNBufferedGraphicsContext = class(TDNGenericImport<DNBufferedGraphicsContextClass, DNBufferedGraphicsContext>) end;

  //-------------namespace: System.Drawing----------------
  DNBufferedGraphicsManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5DB77C3A-2632-539B-B93B-1D2640EF8267}']
  { static getter & setter } 

    {class} function get_Current: DNBufferedGraphicsContext;

  { static propertys } 

    {class} property Current: DNBufferedGraphicsContext read get_Current;
  end;

  [DNTypeName('System.Drawing.BufferedGraphicsManager')]
  DNBufferedGraphicsManager = interface(DDN.mscorlib.DNObject)
  ['{52C2C884-4CCF-3F14-AB9E-090103E4157B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBufferedGraphicsManager = class(TDNGenericImport<DNBufferedGraphicsManagerClass, DNBufferedGraphicsManager>) end;

  //-------------namespace: System.Drawing----------------
  DNColorTranslatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4122E647-1518-5D38-99A8-8DC28AD4D278}']
  { static methods } 

    {class} function ToWin32(c: DNColor): Int32;
    {class} function ToOle(c: DNColor): Int32;
    {class} function FromOle(oleColor: Int32): DNColor;
    {class} function FromWin32(win32Color: Int32): DNColor;
    {class} function FromHtml(htmlColor: string): DNColor;
    {class} function ToHtml(c: DNColor): string;

  end;

  [DNTypeName('System.Drawing.ColorTranslator')]
  DNColorTranslator = interface(DDN.mscorlib.DNObject)
  ['{564300EB-EE73-38E4-AE22-C0DB8F4979D4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColorTranslator = class(TDNGenericImport<DNColorTranslatorClass, DNColorTranslator>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNPropertyValueUIItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6965276E-8BB8-5FDC-BAEE-CD1F4E975D40}']
  { constructors } 

    {class} function init(uiItemImage: DNImage; handler: DNPropertyValueUIItemInvokeHandler; tooltip: string): DNPropertyValueUIItem;

  end;

  [DNTypeName('System.Drawing.Design.PropertyValueUIItem')]
  DNPropertyValueUIItem = interface(DDN.mscorlib.DNObject)
  ['{C2D34DDC-4DEF-3B22-B852-2334D3D9E33C}']
  { getters & setters } 

    function get_Image: DNImage;
    function get_InvokeHandler: DNPropertyValueUIItemInvokeHandler;
    function get_ToolTip: string;

  { methods } 

    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Image: DNImage read get_Image;
    property InvokeHandler: DNPropertyValueUIItemInvokeHandler read get_InvokeHandler;
    property ToolTip: string read get_ToolTip;
  end;

  TDNPropertyValueUIItem = class(TDNGenericImport<DNPropertyValueUIItemClass, DNPropertyValueUIItem>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxItemClass = interface(DNObjectClass)
  ['{93226D67-BDB9-5256-B65F-33A067F2F32F}']
  { constructors } 

    {class} function init: DNToolboxItem; overload;
    {class} function init(toolType: DDN.mscorlib.DNType): DNToolboxItem; overload;

  end;

  [DNTypeName('System.Drawing.Design.ToolboxItem')]
  DNToolboxItem = interface(DDN.mscorlib.DNISerializable)
  ['{DC283D53-B4AF-30F8-80E9-F6FBBF5CCCD2}']
  { getters & setters } 

    function get_AssemblyName: DDN.mscorlib.DNAssemblyName;
    procedure set_AssemblyName(value: DDN.mscorlib.DNAssemblyName);
    function get_DependentAssemblies: TArray<DDN.mscorlib.DNAssemblyName>;
    procedure set_DependentAssemblies(value: TArray<DDN.mscorlib.DNAssemblyName>);
    function get_Bitmap: DNBitmap;
    procedure set_Bitmap(value: DNBitmap);
    function get_OriginalBitmap: DNBitmap;
    procedure set_OriginalBitmap(value: DNBitmap);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_ComponentType: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_Filter: DDN.mscorlib.DNICollection;
    procedure set_Filter(value: DDN.mscorlib.DNICollection);
    function get_IsTransient: Boolean;
    procedure set_IsTransient(value: Boolean);
    function get_Locked: Boolean;
    function get_Properties: DDN.mscorlib.DNIDictionary;
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Version: string;

  { events } 

    procedure add_ComponentsCreated(value: DNToolboxComponentsCreatedEventHandler);
    procedure remove_ComponentsCreated(value: DNToolboxComponentsCreatedEventHandler);
    procedure add_ComponentsCreating(value: DNToolboxComponentsCreatingEventHandler);
    procedure remove_ComponentsCreating(value: DNToolboxComponentsCreatingEventHandler);

  { methods } 

    function CreateComponents: TArray<DDN.System.DNIComponent>; overload;
    function CreateComponents(host: DDN.System.DNIDesignerHost): TArray<DDN.System.DNIComponent>; overload;
    function CreateComponents(host: DDN.System.DNIDesignerHost; defaultValues: DDN.mscorlib.DNIDictionary): TArray<DDN.System.DNIComponent>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType(host: DDN.System.DNIDesignerHost): DDN.mscorlib.DNType; overload;
    procedure Lock;
    function ToString: string;
    procedure Initialize(&type: DDN.mscorlib.DNType);
    function GetType: DDN.mscorlib.DNType; overload;

  { propertys } 

    property AssemblyName: DDN.mscorlib.DNAssemblyName read get_AssemblyName write set_AssemblyName;
    property DependentAssemblies: TArray<DDN.mscorlib.DNAssemblyName> read get_DependentAssemblies write set_DependentAssemblies;
    property Bitmap: DNBitmap read get_Bitmap write set_Bitmap;
    property OriginalBitmap: DNBitmap read get_OriginalBitmap write set_OriginalBitmap;
    property Company: string read get_Company write set_Company;
    property ComponentType: string read get_ComponentType;
    property Description: string read get_Description write set_Description;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property Filter: DDN.mscorlib.DNICollection read get_Filter write set_Filter;
    property IsTransient: Boolean read get_IsTransient write set_IsTransient;
    property Locked: Boolean read get_Locked;
    property Properties: DDN.mscorlib.DNIDictionary read get_Properties;
    property TypeName: string read get_TypeName write set_TypeName;
    property Version: string read get_Version;
  end;

  TDNToolboxItem = class(TDNGenericImport<DNToolboxItemClass, DNToolboxItem>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNUITypeEditorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5800513C-779B-5AFD-B482-18908D1F5A3C}']
  { constructors } 

    {class} function init: DNUITypeEditor;

  end;

  [DNTypeName('System.Drawing.Design.UITypeEditor')]
  DNUITypeEditor = interface(DDN.mscorlib.DNObject)
  ['{99538F93-7A3F-3E3D-84D3-38275B52C7A5}']
  { getters & setters } 

    function get_IsDropDownResizable: Boolean;

  { methods } 

    function EditValue(provider: DDN.mscorlib.DNIServiceProvider; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function EditValue(context: DDN.System.DNITypeDescriptorContext; provider: DDN.mscorlib.DNIServiceProvider; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function GetEditStyle: DNUITypeEditorEditStyle; overload;
    function GetPaintValueSupported: Boolean; overload;
    function GetPaintValueSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetEditStyle(context: DDN.System.DNITypeDescriptorContext): DNUITypeEditorEditStyle; overload;
    procedure PaintValue(value: DDN.mscorlib.DNObject; canvas: DNGraphics; rectangle: DNRectangle); overload;
    procedure PaintValue(e: DNPaintValueEventArgs); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDropDownResizable: Boolean read get_IsDropDownResizable;
  end;

  TDNUITypeEditor = class(TDNGenericImport<DNUITypeEditorClass, DNUITypeEditor>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNBlendClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A7F7B8D2-F73D-5EF8-99CE-C8C85DC7CC57}']
  { constructors } 

    {class} function init: DNBlend; overload;
    {class} function init(count: Int32): DNBlend; overload;

  end;

  [DNTypeName('System.Drawing.Drawing2D.Blend')]
  DNBlend = interface(DDN.mscorlib.DNObject)
  ['{6B74E20B-F4FF-3273-9FA8-CBD66D5D00B2}']
  { getters & setters } 

    function get_Factors: TArray<Single>;
    procedure set_Factors(value: TArray<Single>);
    function get_Positions: TArray<Single>;
    procedure set_Positions(value: TArray<Single>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Factors: TArray<Single> read get_Factors write set_Factors;
    property Positions: TArray<Single> read get_Positions write set_Positions;
  end;

  TDNBlend = class(TDNGenericImport<DNBlendClass, DNBlend>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNColorBlendClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C640630-04BF-5E8C-9C8D-1C535E8716E8}']
  { constructors } 

    {class} function init: DNColorBlend; overload;
    {class} function init(count: Int32): DNColorBlend; overload;

  end;

  [DNTypeName('System.Drawing.Drawing2D.ColorBlend')]
  DNColorBlend = interface(DDN.mscorlib.DNObject)
  ['{E64D2B60-BEB1-3554-BCD3-2481BBE334A6}']
  { getters & setters } 

    function get_Colors: TArray<DNColor>;
    procedure set_Colors(value: TArray<DNColor>);
    function get_Positions: TArray<Single>;
    procedure set_Positions(value: TArray<Single>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Colors: TArray<DNColor> read get_Colors write set_Colors;
    property Positions: TArray<Single> read get_Positions write set_Positions;
  end;

  TDNColorBlend = class(TDNGenericImport<DNColorBlendClass, DNColorBlend>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNPathDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7B48935A-E731-53B0-8E8A-566DDE8D810C}']
  { constructors } 

    {class} function init: DNPathData;

  end;

  [DNTypeName('System.Drawing.Drawing2D.PathData')]
  DNPathData = interface(DDN.mscorlib.DNObject)
  ['{556E6DFC-86A0-333E-B6CC-B80DBDF05065}']
  { getters & setters } 

    function get_Points: TArray<DNPointF>;
    procedure set_Points(value: TArray<DNPointF>);
    function get_Types: TArray<Byte>;
    procedure set_Types(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Points: TArray<DNPointF> read get_Points write set_Points;
    property Types: TArray<Byte> read get_Types write set_Types;
  end;

  TDNPathData = class(TDNGenericImport<DNPathDataClass, DNPathData>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNRegionDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{702718D6-9F2B-53F3-8F47-63AA1DF7DFD7}']
  end;

  [DNTypeName('System.Drawing.Drawing2D.RegionData')]
  DNRegionData = interface(DDN.mscorlib.DNObject)
  ['{AFF2E189-33BC-3173-98F4-F6125CAB3B08}']
  { getters & setters } 

    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Data: TArray<Byte> read get_Data write set_Data;
  end;

  TDNRegionData = class(TDNGenericImport<DNRegionDataClass, DNRegionData>) end;

  //-------------namespace: System.Drawing----------------
  DNImageAnimatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{849A1BD4-4F51-5757-A37E-BF6219C4A424}']
  { static methods } 

    {class} procedure UpdateFrames(image: DNImage); overload;
    {class} function CanAnimate(image: DNImage): Boolean;
    {class} procedure StopAnimate(image: DNImage; onFrameChangedHandler: DDN.mscorlib.DNEventHandler);
    {class} procedure Animate(image: DNImage; onFrameChangedHandler: DDN.mscorlib.DNEventHandler);
    {class} procedure UpdateFrames; overload;

  end;

  [DNTypeName('System.Drawing.ImageAnimator')]
  DNImageAnimator = interface(DDN.mscorlib.DNObject)
  ['{79D045E9-9A50-34E4-A668-72E48DC7DB90}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageAnimator = class(TDNGenericImport<DNImageAnimatorClass, DNImageAnimator>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNBitmapDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EE65B648-C66F-50C6-BAF2-C9A54865BD12}']
  { constructors } 

    {class} function init: DNBitmapData;

  end;

  [DNTypeName('System.Drawing.Imaging.BitmapData')]
  DNBitmapData = interface(DDN.mscorlib.DNObject)
  ['{3E7E92A8-C78F-3FB2-A197-5AF12F6DBA38}']
  { getters & setters } 

    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Stride: Int32;
    procedure set_Stride(value: Int32);
    function get_PixelFormat: DNPixelFormat;
    procedure set_PixelFormat(value: DNPixelFormat);
    function get_Scan0: IntPtr;
    procedure set_Scan0(value: IntPtr);
    function get_Reserved: Int32;
    procedure set_Reserved(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Int32 read get_Width write set_Width;
    property Height: Int32 read get_Height write set_Height;
    property Stride: Int32 read get_Stride write set_Stride;
    property PixelFormat: DNPixelFormat read get_PixelFormat write set_PixelFormat;
    property Scan0: IntPtr read get_Scan0 write set_Scan0;
    property Reserved: Int32 read get_Reserved write set_Reserved;
  end;

  TDNBitmapData = class(TDNGenericImport<DNBitmapDataClass, DNBitmapData>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNColorMapClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FB1C5DF-C902-585D-8D71-A2C1FDB00778}']
  { constructors } 

    {class} function init: DNColorMap;

  end;

  [DNTypeName('System.Drawing.Imaging.ColorMap')]
  DNColorMap = interface(DDN.mscorlib.DNObject)
  ['{D0BEF867-AEA4-37FE-B61A-D3AA050E1B32}']
  { getters & setters } 

    function get_OldColor: DNColor;
    procedure set_OldColor(value: DNColor);
    function get_NewColor: DNColor;
    procedure set_NewColor(value: DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OldColor: DNColor read get_OldColor write set_OldColor;
    property NewColor: DNColor read get_NewColor write set_NewColor;
  end;

  TDNColorMap = class(TDNGenericImport<DNColorMapClass, DNColorMap>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNColorMatrixClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6515D929-3D5B-517B-B804-07A917853004}']
  { constructors } 

    {class} function init: DNColorMatrix; overload;
    {class} function init(newColorMatrix: TArray<TArray<Single>>): DNColorMatrix; overload;

  end;

  [DNTypeName('System.Drawing.Imaging.ColorMatrix')]
  DNColorMatrix = interface(DDN.mscorlib.DNObject)
  ['{149DE87C-0360-3126-8E4E-16844F0C316A}']
  { getters & setters } 

    function get_Matrix00: Single;
    procedure set_Matrix00(value: Single);
    function get_Matrix01: Single;
    procedure set_Matrix01(value: Single);
    function get_Matrix02: Single;
    procedure set_Matrix02(value: Single);
    function get_Matrix03: Single;
    procedure set_Matrix03(value: Single);
    function get_Matrix04: Single;
    procedure set_Matrix04(value: Single);
    function get_Matrix10: Single;
    procedure set_Matrix10(value: Single);
    function get_Matrix11: Single;
    procedure set_Matrix11(value: Single);
    function get_Matrix12: Single;
    procedure set_Matrix12(value: Single);
    function get_Matrix13: Single;
    procedure set_Matrix13(value: Single);
    function get_Matrix14: Single;
    procedure set_Matrix14(value: Single);
    function get_Matrix20: Single;
    procedure set_Matrix20(value: Single);
    function get_Matrix21: Single;
    procedure set_Matrix21(value: Single);
    function get_Matrix22: Single;
    procedure set_Matrix22(value: Single);
    function get_Matrix23: Single;
    procedure set_Matrix23(value: Single);
    function get_Matrix24: Single;
    procedure set_Matrix24(value: Single);
    function get_Matrix30: Single;
    procedure set_Matrix30(value: Single);
    function get_Matrix31: Single;
    procedure set_Matrix31(value: Single);
    function get_Matrix32: Single;
    procedure set_Matrix32(value: Single);
    function get_Matrix33: Single;
    procedure set_Matrix33(value: Single);
    function get_Matrix34: Single;
    procedure set_Matrix34(value: Single);
    function get_Matrix40: Single;
    procedure set_Matrix40(value: Single);
    function get_Matrix41: Single;
    procedure set_Matrix41(value: Single);
    function get_Matrix42: Single;
    procedure set_Matrix42(value: Single);
    function get_Matrix43: Single;
    procedure set_Matrix43(value: Single);
    function get_Matrix44: Single;
    procedure set_Matrix44(value: Single);
    function get_Item(row: Int32; column: Int32): Single;
    procedure set_Item(row: Int32; column: Int32; value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Matrix00: Single read get_Matrix00 write set_Matrix00;
    property Matrix01: Single read get_Matrix01 write set_Matrix01;
    property Matrix02: Single read get_Matrix02 write set_Matrix02;
    property Matrix03: Single read get_Matrix03 write set_Matrix03;
    property Matrix04: Single read get_Matrix04 write set_Matrix04;
    property Matrix10: Single read get_Matrix10 write set_Matrix10;
    property Matrix11: Single read get_Matrix11 write set_Matrix11;
    property Matrix12: Single read get_Matrix12 write set_Matrix12;
    property Matrix13: Single read get_Matrix13 write set_Matrix13;
    property Matrix14: Single read get_Matrix14 write set_Matrix14;
    property Matrix20: Single read get_Matrix20 write set_Matrix20;
    property Matrix21: Single read get_Matrix21 write set_Matrix21;
    property Matrix22: Single read get_Matrix22 write set_Matrix22;
    property Matrix23: Single read get_Matrix23 write set_Matrix23;
    property Matrix24: Single read get_Matrix24 write set_Matrix24;
    property Matrix30: Single read get_Matrix30 write set_Matrix30;
    property Matrix31: Single read get_Matrix31 write set_Matrix31;
    property Matrix32: Single read get_Matrix32 write set_Matrix32;
    property Matrix33: Single read get_Matrix33 write set_Matrix33;
    property Matrix34: Single read get_Matrix34 write set_Matrix34;
    property Matrix40: Single read get_Matrix40 write set_Matrix40;
    property Matrix41: Single read get_Matrix41 write set_Matrix41;
    property Matrix42: Single read get_Matrix42 write set_Matrix42;
    property Matrix43: Single read get_Matrix43 write set_Matrix43;
    property Matrix44: Single read get_Matrix44 write set_Matrix44;
    property Item[row: Int32; column: Int32]: Single read get_Item write set_Item; default;
  end;

  TDNColorMatrix = class(TDNGenericImport<DNColorMatrixClass, DNColorMatrix>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNColorPaletteClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D5700A5-F93A-528A-AAEA-8A5C32FB3939}']
  end;

  [DNTypeName('System.Drawing.Imaging.ColorPalette')]
  DNColorPalette = interface(DDN.mscorlib.DNObject)
  ['{0CF09C28-25D5-32B7-A65A-CB9710DCD5DB}']
  { getters & setters } 

    function get_Flags: Int32;
    function get_Entries: TArray<DNColor>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Flags: Int32 read get_Flags;
    property Entries: TArray<DNColor> read get_Entries;
  end;

  TDNColorPalette = class(TDNGenericImport<DNColorPaletteClass, DNColorPalette>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{24E9A650-C428-5F5F-88CD-C510A480FCBA}']
  { constructors } 

    {class} function init(guid: DDN.mscorlib.DNGuid): DNEncoder;

  { static fields getter & setter } 

   function __fakeFieldGet_Compression: DNEncoder;
   function __fakeFieldGet_ColorDepth: DNEncoder;
   function __fakeFieldGet_ScanMethod: DNEncoder;
   function __fakeFieldGet_Version: DNEncoder;
   function __fakeFieldGet_RenderMethod: DNEncoder;
   function __fakeFieldGet_Quality: DNEncoder;
   function __fakeFieldGet_Transformation: DNEncoder;
   function __fakeFieldGet_LuminanceTable: DNEncoder;
   function __fakeFieldGet_ChrominanceTable: DNEncoder;
   function __fakeFieldGet_SaveFlag: DNEncoder;

  { static fields } 

    {class} property Compression: DNEncoder read __fakeFieldGet_Compression;
    {class} property ColorDepth: DNEncoder read __fakeFieldGet_ColorDepth;
    {class} property ScanMethod: DNEncoder read __fakeFieldGet_ScanMethod;
    {class} property Version: DNEncoder read __fakeFieldGet_Version;
    {class} property RenderMethod: DNEncoder read __fakeFieldGet_RenderMethod;
    {class} property Quality: DNEncoder read __fakeFieldGet_Quality;
    {class} property Transformation: DNEncoder read __fakeFieldGet_Transformation;
    {class} property LuminanceTable: DNEncoder read __fakeFieldGet_LuminanceTable;
    {class} property ChrominanceTable: DNEncoder read __fakeFieldGet_ChrominanceTable;
    {class} property SaveFlag: DNEncoder read __fakeFieldGet_SaveFlag;

  end;

  [DNTypeName('System.Drawing.Imaging.Encoder')]
  DNEncoder = interface(DDN.mscorlib.DNObject)
  ['{673667DC-F729-31F3-8A8C-824C297FFEBB}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNEncoder = class(TDNGenericImport<DNEncoderClass, DNEncoder>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderParameterClass = interface(DNObjectClass)
  ['{47EFB640-614B-569F-A64B-546A1D6032F7}']
  { constructors } 

    {class} function init(encoder: DNEncoder; value: Byte): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; value: Byte; undefined: Boolean): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; value: Int16): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; value: Int64): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; numerator: Int32; denominator: Int32): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; rangebegin: Int64; rangeend: Int64): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; numerator1: Int32; demoninator1: Int32; numerator2: Int32; demoninator2: Int32): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; value: string): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; value: TArray<Byte>): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; value: TArray<Byte>; undefined: Boolean): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; value: TArray<Int16>): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; value: TArray<Int64>): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; numerator: TArray<Int32>; denominator: TArray<Int32>): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; rangebegin: TArray<Int64>; rangeend: TArray<Int64>): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; numerator1: TArray<Int32>; denominator1: TArray<Int32>; numerator2: TArray<Int32>; denominator2: TArray<Int32>): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; NumberOfValues: Int32; &Type: Int32; Value: Int32): DNEncoderParameter; overload;
    {class} function init(encoder: DNEncoder; numberValues: Int32; &type: DNEncoderParameterValueType; value: IntPtr): DNEncoderParameter; overload;

  end;

  [DNTypeName('System.Drawing.Imaging.EncoderParameter')]
  DNEncoderParameter = interface(DDN.mscorlib.DNIDisposable)
  ['{81498B35-5C97-31F7-B6AA-9737D41547EB}']
  { getters & setters } 

    function get_Encoder: DNEncoder;
    procedure set_Encoder(value: DNEncoder);
    function get_Type: DNEncoderParameterValueType;
    function get_ValueType: DNEncoderParameterValueType;
    function get_NumberOfValues: Int32;

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Encoder: DNEncoder read get_Encoder write set_Encoder;
    property &Type: DNEncoderParameterValueType read get_Type;
    property ValueType: DNEncoderParameterValueType read get_ValueType;
    property NumberOfValues: Int32 read get_NumberOfValues;
  end;

  TDNEncoderParameter = class(TDNGenericImport<DNEncoderParameterClass, DNEncoderParameter>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderParametersClass = interface(DNObjectClass)
  ['{AB2EF01F-00D9-5693-B2FA-09F4A916F9E6}']
  { constructors } 

    {class} function init(count: Int32): DNEncoderParameters; overload;
    {class} function init: DNEncoderParameters; overload;

  end;

  [DNTypeName('System.Drawing.Imaging.EncoderParameters')]
  DNEncoderParameters = interface(DDN.mscorlib.DNIDisposable)
  ['{809106FA-A250-36F7-BEB3-4B323D20606C}']
  { getters & setters } 

    function get_Param: TArray<DNEncoderParameter>;
    procedure set_Param(value: TArray<DNEncoderParameter>);

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Param: TArray<DNEncoderParameter> read get_Param write set_Param;
  end;

  TDNEncoderParameters = class(TDNGenericImport<DNEncoderParametersClass, DNEncoderParameters>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNFrameDimensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9C5EB92-BC52-5E9B-9698-1CFAFBCDCA03}']
  { static getter & setter } 

    {class} function get_Time: DNFrameDimension;
    {class} function get_Resolution: DNFrameDimension;
    {class} function get_Page: DNFrameDimension;

  { constructors } 

    {class} function init(guid: DDN.mscorlib.DNGuid): DNFrameDimension;

  { static propertys } 

    {class} property Time: DNFrameDimension read get_Time;
    {class} property Resolution: DNFrameDimension read get_Resolution;
    {class} property Page: DNFrameDimension read get_Page;
  end;

  [DNTypeName('System.Drawing.Imaging.FrameDimension')]
  DNFrameDimension = interface(DDN.mscorlib.DNObject)
  ['{46DCD9AD-47E5-3ACD-95F1-1D9D21950994}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNFrameDimension = class(TDNGenericImport<DNFrameDimensionClass, DNFrameDimension>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageAttributesClass = interface(DNObjectClass)
  ['{64FD85C9-5B18-5481-8629-5F2381840509}']
  { constructors } 

    {class} function init: DNImageAttributes;

  end;

  [DNTypeName('System.Drawing.Imaging.ImageAttributes')]
  DNImageAttributes = interface(DDN.mscorlib.DNICloneable)
  ['{F8730A05-D36D-3ED8-97B3-A0C36EC3A959}']
  { methods } 

    procedure SetColorMatrix(newColorMatrix: DNColorMatrix; mode: DNColorMatrixFlag; &type: DNColorAdjustType); overload;
    procedure ClearColorKey(&type: DNColorAdjustType); overload;
    procedure Dispose;
    function Clone: DDN.mscorlib.DNObject;
    procedure SetColorMatrix(newColorMatrix: DNColorMatrix); overload;
    procedure SetColorMatrix(newColorMatrix: DNColorMatrix; flags: DNColorMatrixFlag); overload;
    procedure ClearColorMatrix; overload;
    procedure ClearColorMatrix(&type: DNColorAdjustType); overload;
    procedure SetColorMatrices(newColorMatrix: DNColorMatrix; grayMatrix: DNColorMatrix); overload;
    procedure SetColorMatrices(newColorMatrix: DNColorMatrix; grayMatrix: DNColorMatrix; flags: DNColorMatrixFlag); overload;
    procedure SetColorMatrices(newColorMatrix: DNColorMatrix; grayMatrix: DNColorMatrix; mode: DNColorMatrixFlag; &type: DNColorAdjustType); overload;
    procedure SetThreshold(threshold: Single); overload;
    procedure SetThreshold(threshold: Single; &type: DNColorAdjustType); overload;
    procedure ClearThreshold; overload;
    procedure ClearThreshold(&type: DNColorAdjustType); overload;
    procedure SetGamma(gamma: Single); overload;
    procedure SetGamma(gamma: Single; &type: DNColorAdjustType); overload;
    procedure ClearGamma; overload;
    procedure ClearGamma(&type: DNColorAdjustType); overload;
    procedure SetNoOp; overload;
    procedure SetNoOp(&type: DNColorAdjustType); overload;
    procedure ClearNoOp; overload;
    procedure ClearNoOp(&type: DNColorAdjustType); overload;
    procedure SetColorKey(colorLow: DNColor; colorHigh: DNColor); overload;
    procedure SetColorKey(colorLow: DNColor; colorHigh: DNColor; &type: DNColorAdjustType); overload;
    procedure ClearColorKey; overload;
    procedure SetOutputChannel(flags: DNColorChannelFlag); overload;
    procedure SetOutputChannel(flags: DNColorChannelFlag; &type: DNColorAdjustType); overload;
    procedure ClearOutputChannel; overload;
    procedure ClearOutputChannel(&type: DNColorAdjustType); overload;
    procedure SetOutputChannelColorProfile(colorProfileFilename: string); overload;
    procedure SetOutputChannelColorProfile(colorProfileFilename: string; &type: DNColorAdjustType); overload;
    procedure ClearOutputChannelColorProfile; overload;
    procedure ClearOutputChannelColorProfile(&type: DNColorAdjustType); overload;
    procedure SetRemapTable(map: TArray<DNColorMap>); overload;
    procedure SetRemapTable(map: TArray<DNColorMap>; &type: DNColorAdjustType); overload;
    procedure ClearRemapTable; overload;
    procedure ClearRemapTable(&type: DNColorAdjustType); overload;
    procedure SetBrushRemapTable(map: TArray<DNColorMap>);
    procedure ClearBrushRemapTable;
    procedure SetWrapMode(mode: DNWrapMode); overload;
    procedure SetWrapMode(mode: DNWrapMode; color: DNColor); overload;
    procedure SetWrapMode(mode: DNWrapMode; color: DNColor; clamp: Boolean); overload;
    procedure GetAdjustedPalette(palette: DNColorPalette; &type: DNColorAdjustType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageAttributes = class(TDNGenericImport<DNImageAttributesClass, DNImageAttributes>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageCodecInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C8865BE7-D8A2-5329-820A-E3B1F73D98DD}']
  { static methods } 

    {class} function GetImageDecoders: TArray<DNImageCodecInfo>;
    {class} function GetImageEncoders: TArray<DNImageCodecInfo>;

  end;

  [DNTypeName('System.Drawing.Imaging.ImageCodecInfo')]
  DNImageCodecInfo = interface(DDN.mscorlib.DNObject)
  ['{537B3612-FB61-3670-ADA4-71FFA9B084A4}']
  { getters & setters } 

    function get_Clsid: DDN.mscorlib.DNGuid;
    procedure set_Clsid(value: DDN.mscorlib.DNGuid);
    function get_FormatID: DDN.mscorlib.DNGuid;
    procedure set_FormatID(value: DDN.mscorlib.DNGuid);
    function get_CodecName: string;
    procedure set_CodecName(value: string);
    function get_DllName: string;
    procedure set_DllName(value: string);
    function get_FormatDescription: string;
    procedure set_FormatDescription(value: string);
    function get_FilenameExtension: string;
    procedure set_FilenameExtension(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Flags: DNImageCodecFlags;
    procedure set_Flags(value: DNImageCodecFlags);
    function get_Version: Int32;
    procedure set_Version(value: Int32);
    function get_SignaturePatterns: TArray<TArray<Byte>>;
    procedure set_SignaturePatterns(value: TArray<TArray<Byte>>);
    function get_SignatureMasks: TArray<TArray<Byte>>;
    procedure set_SignatureMasks(value: TArray<TArray<Byte>>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Clsid: DDN.mscorlib.DNGuid read get_Clsid write set_Clsid;
    property FormatID: DDN.mscorlib.DNGuid read get_FormatID write set_FormatID;
    property CodecName: string read get_CodecName write set_CodecName;
    property DllName: string read get_DllName write set_DllName;
    property FormatDescription: string read get_FormatDescription write set_FormatDescription;
    property FilenameExtension: string read get_FilenameExtension write set_FilenameExtension;
    property MimeType: string read get_MimeType write set_MimeType;
    property Flags: DNImageCodecFlags read get_Flags write set_Flags;
    property Version: Int32 read get_Version write set_Version;
    property SignaturePatterns: TArray<TArray<Byte>> read get_SignaturePatterns write set_SignaturePatterns;
    property SignatureMasks: TArray<TArray<Byte>> read get_SignatureMasks write set_SignatureMasks;
  end;

  TDNImageCodecInfo = class(TDNGenericImport<DNImageCodecInfoClass, DNImageCodecInfo>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{25FC6ED2-3943-578C-9A01-211CB8B0A6F6}']
  { static getter & setter } 

    {class} function get_MemoryBmp: DNImageFormat;
    {class} function get_Bmp: DNImageFormat;
    {class} function get_Emf: DNImageFormat;
    {class} function get_Wmf: DNImageFormat;
    {class} function get_Gif: DNImageFormat;
    {class} function get_Jpeg: DNImageFormat;
    {class} function get_Png: DNImageFormat;
    {class} function get_Tiff: DNImageFormat;
    {class} function get_Exif: DNImageFormat;
    {class} function get_Icon: DNImageFormat;

  { constructors } 

    {class} function init(guid: DDN.mscorlib.DNGuid): DNImageFormat;

  { static propertys } 

    {class} property MemoryBmp: DNImageFormat read get_MemoryBmp;
    {class} property Bmp: DNImageFormat read get_Bmp;
    {class} property Emf: DNImageFormat read get_Emf;
    {class} property Wmf: DNImageFormat read get_Wmf;
    {class} property Gif: DNImageFormat read get_Gif;
    {class} property Jpeg: DNImageFormat read get_Jpeg;
    {class} property Png: DNImageFormat read get_Png;
    {class} property Tiff: DNImageFormat read get_Tiff;
    {class} property Exif: DNImageFormat read get_Exif;
    {class} property Icon: DNImageFormat read get_Icon;
  end;

  [DNTypeName('System.Drawing.Imaging.ImageFormat')]
  DNImageFormat = interface(DDN.mscorlib.DNObject)
  ['{EBB52948-9B23-3FA2-A8D3-F339D076BDA1}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNImageFormat = class(TDNGenericImport<DNImageFormatClass, DNImageFormat>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNMetafileHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D930988B-9641-52BA-BDC2-94C1D02C11B8}']
  end;

  [DNTypeName('System.Drawing.Imaging.MetafileHeader')]
  DNMetafileHeader = interface(DDN.mscorlib.DNObject)
  ['{F749C549-2F5E-3D94-970D-D1C8FF510A13}']
  { getters & setters } 

    function get_Type: DNMetafileType;
    function get_MetafileSize: Int32;
    function get_Version: Int32;
    function get_DpiX: Single;
    function get_DpiY: Single;
    function get_Bounds: DNRectangle;
    function get_WmfHeader: DNMetaHeader;
    function get_EmfPlusHeaderSize: Int32;
    function get_LogicalDpiX: Int32;
    function get_LogicalDpiY: Int32;

  { methods } 

    function IsWmf: Boolean;
    function IsWmfPlaceable: Boolean;
    function IsEmf: Boolean;
    function IsEmfOrEmfPlus: Boolean;
    function IsEmfPlus: Boolean;
    function IsEmfPlusDual: Boolean;
    function IsEmfPlusOnly: Boolean;
    function IsDisplay: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNMetafileType read get_Type;
    property MetafileSize: Int32 read get_MetafileSize;
    property Version: Int32 read get_Version;
    property DpiX: Single read get_DpiX;
    property DpiY: Single read get_DpiY;
    property Bounds: DNRectangle read get_Bounds;
    property WmfHeader: DNMetaHeader read get_WmfHeader;
    property EmfPlusHeaderSize: Int32 read get_EmfPlusHeaderSize;
    property LogicalDpiX: Int32 read get_LogicalDpiX;
    property LogicalDpiY: Int32 read get_LogicalDpiY;
  end;

  TDNMetafileHeader = class(TDNGenericImport<DNMetafileHeaderClass, DNMetafileHeader>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNMetaHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6928A08A-60A0-5685-9949-5EDCD878DA0F}']
  { constructors } 

    {class} function init: DNMetaHeader;

  end;

  [DNTypeName('System.Drawing.Imaging.MetaHeader')]
  DNMetaHeader = interface(DDN.mscorlib.DNObject)
  ['{238A9696-BFF3-30AB-81F2-AA745499233B}']
  { getters & setters } 

    function get_Type: Int16;
    procedure set_Type(value: Int16);
    function get_HeaderSize: Int16;
    procedure set_HeaderSize(value: Int16);
    function get_Version: Int16;
    procedure set_Version(value: Int16);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_NoObjects: Int16;
    procedure set_NoObjects(value: Int16);
    function get_MaxRecord: Int32;
    procedure set_MaxRecord(value: Int32);
    function get_NoParameters: Int16;
    procedure set_NoParameters(value: Int16);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: Int16 read get_Type write set_Type;
    property HeaderSize: Int16 read get_HeaderSize write set_HeaderSize;
    property Version: Int16 read get_Version write set_Version;
    property Size: Int32 read get_Size write set_Size;
    property NoObjects: Int16 read get_NoObjects write set_NoObjects;
    property MaxRecord: Int32 read get_MaxRecord write set_MaxRecord;
    property NoParameters: Int16 read get_NoParameters write set_NoParameters;
  end;

  TDNMetaHeader = class(TDNGenericImport<DNMetaHeaderClass, DNMetaHeader>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNPropertyItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{47C1C0A9-9953-5D4C-A0AD-BD082331D0C9}']
  end;

  [DNTypeName('System.Drawing.Imaging.PropertyItem')]
  DNPropertyItem = interface(DDN.mscorlib.DNObject)
  ['{8167BE6A-869C-366B-9369-37CA48FFC88C}']
  { getters & setters } 

    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_Len: Int32;
    procedure set_Len(value: Int32);
    function get_Type: Int16;
    procedure set_Type(value: Int16);
    function get_Value: TArray<Byte>;
    procedure set_Value(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id write set_Id;
    property Len: Int32 read get_Len write set_Len;
    property &Type: Int16 read get_Type write set_Type;
    property Value: TArray<Byte> read get_Value write set_Value;
  end;

  TDNPropertyItem = class(TDNGenericImport<DNPropertyItemClass, DNPropertyItem>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNWmfPlaceableFileHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF04ADAF-7FD3-5524-854F-F9D8D3EE7A41}']
  { constructors } 

    {class} function init: DNWmfPlaceableFileHeader;

  end;

  [DNTypeName('System.Drawing.Imaging.WmfPlaceableFileHeader')]
  DNWmfPlaceableFileHeader = interface(DDN.mscorlib.DNObject)
  ['{4EC535F9-C5FC-3378-B06A-011F02BA919D}']
  { getters & setters } 

    function get_Key: Int32;
    procedure set_Key(value: Int32);
    function get_Hmf: Int16;
    procedure set_Hmf(value: Int16);
    function get_BboxLeft: Int16;
    procedure set_BboxLeft(value: Int16);
    function get_BboxTop: Int16;
    procedure set_BboxTop(value: Int16);
    function get_BboxRight: Int16;
    procedure set_BboxRight(value: Int16);
    function get_BboxBottom: Int16;
    procedure set_BboxBottom(value: Int16);
    function get_Inch: Int16;
    procedure set_Inch(value: Int16);
    function get_Reserved: Int32;
    procedure set_Reserved(value: Int32);
    function get_Checksum: Int16;
    procedure set_Checksum(value: Int16);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: Int32 read get_Key write set_Key;
    property Hmf: Int16 read get_Hmf write set_Hmf;
    property BboxLeft: Int16 read get_BboxLeft write set_BboxLeft;
    property BboxTop: Int16 read get_BboxTop write set_BboxTop;
    property BboxRight: Int16 read get_BboxRight write set_BboxRight;
    property BboxBottom: Int16 read get_BboxBottom write set_BboxBottom;
    property Inch: Int16 read get_Inch write set_Inch;
    property Reserved: Int32 read get_Reserved write set_Reserved;
    property Checksum: Int16 read get_Checksum write set_Checksum;
  end;

  TDNWmfPlaceableFileHeader = class(TDNGenericImport<DNWmfPlaceableFileHeaderClass, DNWmfPlaceableFileHeader>) end;

  //-------------namespace: System.Drawing----------------
  DNPensClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6072B564-E9D4-544C-8D0A-CD686B6C4D0E}']
  { static getter & setter } 

    {class} function get_Transparent: DNPen;
    {class} function get_AliceBlue: DNPen;
    {class} function get_AntiqueWhite: DNPen;
    {class} function get_Aqua: DNPen;
    {class} function get_Aquamarine: DNPen;
    {class} function get_Azure: DNPen;
    {class} function get_Beige: DNPen;
    {class} function get_Bisque: DNPen;
    {class} function get_Black: DNPen;
    {class} function get_BlanchedAlmond: DNPen;
    {class} function get_Blue: DNPen;
    {class} function get_BlueViolet: DNPen;
    {class} function get_Brown: DNPen;
    {class} function get_BurlyWood: DNPen;
    {class} function get_CadetBlue: DNPen;
    {class} function get_Chartreuse: DNPen;
    {class} function get_Chocolate: DNPen;
    {class} function get_Coral: DNPen;
    {class} function get_CornflowerBlue: DNPen;
    {class} function get_Cornsilk: DNPen;
    {class} function get_Crimson: DNPen;
    {class} function get_Cyan: DNPen;
    {class} function get_DarkBlue: DNPen;
    {class} function get_DarkCyan: DNPen;
    {class} function get_DarkGoldenrod: DNPen;
    {class} function get_DarkGray: DNPen;
    {class} function get_DarkGreen: DNPen;
    {class} function get_DarkKhaki: DNPen;
    {class} function get_DarkMagenta: DNPen;
    {class} function get_DarkOliveGreen: DNPen;
    {class} function get_DarkOrange: DNPen;
    {class} function get_DarkOrchid: DNPen;
    {class} function get_DarkRed: DNPen;
    {class} function get_DarkSalmon: DNPen;
    {class} function get_DarkSeaGreen: DNPen;
    {class} function get_DarkSlateBlue: DNPen;
    {class} function get_DarkSlateGray: DNPen;
    {class} function get_DarkTurquoise: DNPen;
    {class} function get_DarkViolet: DNPen;
    {class} function get_DeepPink: DNPen;
    {class} function get_DeepSkyBlue: DNPen;
    {class} function get_DimGray: DNPen;
    {class} function get_DodgerBlue: DNPen;
    {class} function get_Firebrick: DNPen;
    {class} function get_FloralWhite: DNPen;
    {class} function get_ForestGreen: DNPen;
    {class} function get_Fuchsia: DNPen;
    {class} function get_Gainsboro: DNPen;
    {class} function get_GhostWhite: DNPen;
    {class} function get_Gold: DNPen;
    {class} function get_Goldenrod: DNPen;
    {class} function get_Gray: DNPen;
    {class} function get_Green: DNPen;
    {class} function get_GreenYellow: DNPen;
    {class} function get_Honeydew: DNPen;
    {class} function get_HotPink: DNPen;
    {class} function get_IndianRed: DNPen;
    {class} function get_Indigo: DNPen;
    {class} function get_Ivory: DNPen;
    {class} function get_Khaki: DNPen;
    {class} function get_Lavender: DNPen;
    {class} function get_LavenderBlush: DNPen;
    {class} function get_LawnGreen: DNPen;
    {class} function get_LemonChiffon: DNPen;
    {class} function get_LightBlue: DNPen;
    {class} function get_LightCoral: DNPen;
    {class} function get_LightCyan: DNPen;
    {class} function get_LightGoldenrodYellow: DNPen;
    {class} function get_LightGreen: DNPen;
    {class} function get_LightGray: DNPen;
    {class} function get_LightPink: DNPen;
    {class} function get_LightSalmon: DNPen;
    {class} function get_LightSeaGreen: DNPen;
    {class} function get_LightSkyBlue: DNPen;
    {class} function get_LightSlateGray: DNPen;
    {class} function get_LightSteelBlue: DNPen;
    {class} function get_LightYellow: DNPen;
    {class} function get_Lime: DNPen;
    {class} function get_LimeGreen: DNPen;
    {class} function get_Linen: DNPen;
    {class} function get_Magenta: DNPen;
    {class} function get_Maroon: DNPen;
    {class} function get_MediumAquamarine: DNPen;
    {class} function get_MediumBlue: DNPen;
    {class} function get_MediumOrchid: DNPen;
    {class} function get_MediumPurple: DNPen;
    {class} function get_MediumSeaGreen: DNPen;
    {class} function get_MediumSlateBlue: DNPen;
    {class} function get_MediumSpringGreen: DNPen;
    {class} function get_MediumTurquoise: DNPen;
    {class} function get_MediumVioletRed: DNPen;
    {class} function get_MidnightBlue: DNPen;
    {class} function get_MintCream: DNPen;
    {class} function get_MistyRose: DNPen;
    {class} function get_Moccasin: DNPen;
    {class} function get_NavajoWhite: DNPen;
    {class} function get_Navy: DNPen;
    {class} function get_OldLace: DNPen;
    {class} function get_Olive: DNPen;
    {class} function get_OliveDrab: DNPen;
    {class} function get_Orange: DNPen;
    {class} function get_OrangeRed: DNPen;
    {class} function get_Orchid: DNPen;
    {class} function get_PaleGoldenrod: DNPen;
    {class} function get_PaleGreen: DNPen;
    {class} function get_PaleTurquoise: DNPen;
    {class} function get_PaleVioletRed: DNPen;
    {class} function get_PapayaWhip: DNPen;
    {class} function get_PeachPuff: DNPen;
    {class} function get_Peru: DNPen;
    {class} function get_Pink: DNPen;
    {class} function get_Plum: DNPen;
    {class} function get_PowderBlue: DNPen;
    {class} function get_Purple: DNPen;
    {class} function get_Red: DNPen;
    {class} function get_RosyBrown: DNPen;
    {class} function get_RoyalBlue: DNPen;
    {class} function get_SaddleBrown: DNPen;
    {class} function get_Salmon: DNPen;
    {class} function get_SandyBrown: DNPen;
    {class} function get_SeaGreen: DNPen;
    {class} function get_SeaShell: DNPen;
    {class} function get_Sienna: DNPen;
    {class} function get_Silver: DNPen;
    {class} function get_SkyBlue: DNPen;
    {class} function get_SlateBlue: DNPen;
    {class} function get_SlateGray: DNPen;
    {class} function get_Snow: DNPen;
    {class} function get_SpringGreen: DNPen;
    {class} function get_SteelBlue: DNPen;
    {class} function get_Tan: DNPen;
    {class} function get_Teal: DNPen;
    {class} function get_Thistle: DNPen;
    {class} function get_Tomato: DNPen;
    {class} function get_Turquoise: DNPen;
    {class} function get_Violet: DNPen;
    {class} function get_Wheat: DNPen;
    {class} function get_White: DNPen;
    {class} function get_WhiteSmoke: DNPen;
    {class} function get_Yellow: DNPen;
    {class} function get_YellowGreen: DNPen;

  { static propertys } 

    {class} property Transparent: DNPen read get_Transparent;
    {class} property AliceBlue: DNPen read get_AliceBlue;
    {class} property AntiqueWhite: DNPen read get_AntiqueWhite;
    {class} property Aqua: DNPen read get_Aqua;
    {class} property Aquamarine: DNPen read get_Aquamarine;
    {class} property Azure: DNPen read get_Azure;
    {class} property Beige: DNPen read get_Beige;
    {class} property Bisque: DNPen read get_Bisque;
    {class} property Black: DNPen read get_Black;
    {class} property BlanchedAlmond: DNPen read get_BlanchedAlmond;
    {class} property Blue: DNPen read get_Blue;
    {class} property BlueViolet: DNPen read get_BlueViolet;
    {class} property Brown: DNPen read get_Brown;
    {class} property BurlyWood: DNPen read get_BurlyWood;
    {class} property CadetBlue: DNPen read get_CadetBlue;
    {class} property Chartreuse: DNPen read get_Chartreuse;
    {class} property Chocolate: DNPen read get_Chocolate;
    {class} property Coral: DNPen read get_Coral;
    {class} property CornflowerBlue: DNPen read get_CornflowerBlue;
    {class} property Cornsilk: DNPen read get_Cornsilk;
    {class} property Crimson: DNPen read get_Crimson;
    {class} property Cyan: DNPen read get_Cyan;
    {class} property DarkBlue: DNPen read get_DarkBlue;
    {class} property DarkCyan: DNPen read get_DarkCyan;
    {class} property DarkGoldenrod: DNPen read get_DarkGoldenrod;
    {class} property DarkGray: DNPen read get_DarkGray;
    {class} property DarkGreen: DNPen read get_DarkGreen;
    {class} property DarkKhaki: DNPen read get_DarkKhaki;
    {class} property DarkMagenta: DNPen read get_DarkMagenta;
    {class} property DarkOliveGreen: DNPen read get_DarkOliveGreen;
    {class} property DarkOrange: DNPen read get_DarkOrange;
    {class} property DarkOrchid: DNPen read get_DarkOrchid;
    {class} property DarkRed: DNPen read get_DarkRed;
    {class} property DarkSalmon: DNPen read get_DarkSalmon;
    {class} property DarkSeaGreen: DNPen read get_DarkSeaGreen;
    {class} property DarkSlateBlue: DNPen read get_DarkSlateBlue;
    {class} property DarkSlateGray: DNPen read get_DarkSlateGray;
    {class} property DarkTurquoise: DNPen read get_DarkTurquoise;
    {class} property DarkViolet: DNPen read get_DarkViolet;
    {class} property DeepPink: DNPen read get_DeepPink;
    {class} property DeepSkyBlue: DNPen read get_DeepSkyBlue;
    {class} property DimGray: DNPen read get_DimGray;
    {class} property DodgerBlue: DNPen read get_DodgerBlue;
    {class} property Firebrick: DNPen read get_Firebrick;
    {class} property FloralWhite: DNPen read get_FloralWhite;
    {class} property ForestGreen: DNPen read get_ForestGreen;
    {class} property Fuchsia: DNPen read get_Fuchsia;
    {class} property Gainsboro: DNPen read get_Gainsboro;
    {class} property GhostWhite: DNPen read get_GhostWhite;
    {class} property Gold: DNPen read get_Gold;
    {class} property Goldenrod: DNPen read get_Goldenrod;
    {class} property Gray: DNPen read get_Gray;
    {class} property Green: DNPen read get_Green;
    {class} property GreenYellow: DNPen read get_GreenYellow;
    {class} property Honeydew: DNPen read get_Honeydew;
    {class} property HotPink: DNPen read get_HotPink;
    {class} property IndianRed: DNPen read get_IndianRed;
    {class} property Indigo: DNPen read get_Indigo;
    {class} property Ivory: DNPen read get_Ivory;
    {class} property Khaki: DNPen read get_Khaki;
    {class} property Lavender: DNPen read get_Lavender;
    {class} property LavenderBlush: DNPen read get_LavenderBlush;
    {class} property LawnGreen: DNPen read get_LawnGreen;
    {class} property LemonChiffon: DNPen read get_LemonChiffon;
    {class} property LightBlue: DNPen read get_LightBlue;
    {class} property LightCoral: DNPen read get_LightCoral;
    {class} property LightCyan: DNPen read get_LightCyan;
    {class} property LightGoldenrodYellow: DNPen read get_LightGoldenrodYellow;
    {class} property LightGreen: DNPen read get_LightGreen;
    {class} property LightGray: DNPen read get_LightGray;
    {class} property LightPink: DNPen read get_LightPink;
    {class} property LightSalmon: DNPen read get_LightSalmon;
    {class} property LightSeaGreen: DNPen read get_LightSeaGreen;
    {class} property LightSkyBlue: DNPen read get_LightSkyBlue;
    {class} property LightSlateGray: DNPen read get_LightSlateGray;
    {class} property LightSteelBlue: DNPen read get_LightSteelBlue;
    {class} property LightYellow: DNPen read get_LightYellow;
    {class} property Lime: DNPen read get_Lime;
    {class} property LimeGreen: DNPen read get_LimeGreen;
    {class} property Linen: DNPen read get_Linen;
    {class} property Magenta: DNPen read get_Magenta;
    {class} property Maroon: DNPen read get_Maroon;
    {class} property MediumAquamarine: DNPen read get_MediumAquamarine;
    {class} property MediumBlue: DNPen read get_MediumBlue;
    {class} property MediumOrchid: DNPen read get_MediumOrchid;
    {class} property MediumPurple: DNPen read get_MediumPurple;
    {class} property MediumSeaGreen: DNPen read get_MediumSeaGreen;
    {class} property MediumSlateBlue: DNPen read get_MediumSlateBlue;
    {class} property MediumSpringGreen: DNPen read get_MediumSpringGreen;
    {class} property MediumTurquoise: DNPen read get_MediumTurquoise;
    {class} property MediumVioletRed: DNPen read get_MediumVioletRed;
    {class} property MidnightBlue: DNPen read get_MidnightBlue;
    {class} property MintCream: DNPen read get_MintCream;
    {class} property MistyRose: DNPen read get_MistyRose;
    {class} property Moccasin: DNPen read get_Moccasin;
    {class} property NavajoWhite: DNPen read get_NavajoWhite;
    {class} property Navy: DNPen read get_Navy;
    {class} property OldLace: DNPen read get_OldLace;
    {class} property Olive: DNPen read get_Olive;
    {class} property OliveDrab: DNPen read get_OliveDrab;
    {class} property Orange: DNPen read get_Orange;
    {class} property OrangeRed: DNPen read get_OrangeRed;
    {class} property Orchid: DNPen read get_Orchid;
    {class} property PaleGoldenrod: DNPen read get_PaleGoldenrod;
    {class} property PaleGreen: DNPen read get_PaleGreen;
    {class} property PaleTurquoise: DNPen read get_PaleTurquoise;
    {class} property PaleVioletRed: DNPen read get_PaleVioletRed;
    {class} property PapayaWhip: DNPen read get_PapayaWhip;
    {class} property PeachPuff: DNPen read get_PeachPuff;
    {class} property Peru: DNPen read get_Peru;
    {class} property Pink: DNPen read get_Pink;
    {class} property Plum: DNPen read get_Plum;
    {class} property PowderBlue: DNPen read get_PowderBlue;
    {class} property Purple: DNPen read get_Purple;
    {class} property Red: DNPen read get_Red;
    {class} property RosyBrown: DNPen read get_RosyBrown;
    {class} property RoyalBlue: DNPen read get_RoyalBlue;
    {class} property SaddleBrown: DNPen read get_SaddleBrown;
    {class} property Salmon: DNPen read get_Salmon;
    {class} property SandyBrown: DNPen read get_SandyBrown;
    {class} property SeaGreen: DNPen read get_SeaGreen;
    {class} property SeaShell: DNPen read get_SeaShell;
    {class} property Sienna: DNPen read get_Sienna;
    {class} property Silver: DNPen read get_Silver;
    {class} property SkyBlue: DNPen read get_SkyBlue;
    {class} property SlateBlue: DNPen read get_SlateBlue;
    {class} property SlateGray: DNPen read get_SlateGray;
    {class} property Snow: DNPen read get_Snow;
    {class} property SpringGreen: DNPen read get_SpringGreen;
    {class} property SteelBlue: DNPen read get_SteelBlue;
    {class} property Tan: DNPen read get_Tan;
    {class} property Teal: DNPen read get_Teal;
    {class} property Thistle: DNPen read get_Thistle;
    {class} property Tomato: DNPen read get_Tomato;
    {class} property Turquoise: DNPen read get_Turquoise;
    {class} property Violet: DNPen read get_Violet;
    {class} property Wheat: DNPen read get_Wheat;
    {class} property White: DNPen read get_White;
    {class} property WhiteSmoke: DNPen read get_WhiteSmoke;
    {class} property Yellow: DNPen read get_Yellow;
    {class} property YellowGreen: DNPen read get_YellowGreen;
  end;

  [DNTypeName('System.Drawing.Pens')]
  DNPens = interface(DDN.mscorlib.DNObject)
  ['{DDE10CFF-4319-33E5-B17E-2D7F271CFE8E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPens = class(TDNGenericImport<DNPensClass, DNPens>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNMarginsClass = interface(DNObjectClass)
  ['{9C3CF37A-1B86-5A2C-AD1B-1833E79D2D04}']
  { constructors } 

    {class} function init: DNMargins; overload;
    {class} function init(left: Int32; right: Int32; top: Int32; bottom: Int32): DNMargins; overload;

  end;

  [DNTypeName('System.Drawing.Printing.Margins')]
  DNMargins = interface(DDN.mscorlib.DNICloneable)
  ['{E3900763-C225-303C-9673-70085B3ACEEB}']
  { getters & setters } 

    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Left: Int32 read get_Left write set_Left;
    property Right: Int32 read get_Right write set_Right;
    property Top: Int32 read get_Top write set_Top;
    property Bottom: Int32 read get_Bottom write set_Bottom;
  end;

  TDNMargins = class(TDNGenericImport<DNMarginsClass, DNMargins>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPageSettingsClass = interface(DNObjectClass)
  ['{1A742101-AB39-5A46-8351-A82BA2415C14}']
  { constructors } 

    {class} function init: DNPageSettings; overload;
    {class} function init(printerSettings: DNPrinterSettings): DNPageSettings; overload;

  end;

  [DNTypeName('System.Drawing.Printing.PageSettings')]
  DNPageSettings = interface(DDN.mscorlib.DNICloneable)
  ['{AD0BA20F-317B-3261-86E9-488F717D1BA7}']
  { getters & setters } 

    function get_Bounds: DNRectangle;
    function get_Color: Boolean;
    procedure set_Color(value: Boolean);
    function get_HardMarginX: Single;
    function get_HardMarginY: Single;
    function get_Landscape: Boolean;
    procedure set_Landscape(value: Boolean);
    function get_Margins: DNMargins;
    procedure set_Margins(value: DNMargins);
    function get_PaperSize: DNPaperSize;
    procedure set_PaperSize(value: DNPaperSize);
    function get_PaperSource: DNPaperSource;
    procedure set_PaperSource(value: DNPaperSource);
    function get_PrintableArea: DNRectangleF;
    function get_PrinterResolution: DNPrinterResolution;
    procedure set_PrinterResolution(value: DNPrinterResolution);
    function get_PrinterSettings: DNPrinterSettings;
    procedure set_PrinterSettings(value: DNPrinterSettings);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    procedure CopyToHdevmode(hdevmode: IntPtr);
    procedure SetHdevmode(hdevmode: IntPtr);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Bounds: DNRectangle read get_Bounds;
    property Color: Boolean read get_Color write set_Color;
    property HardMarginX: Single read get_HardMarginX;
    property HardMarginY: Single read get_HardMarginY;
    property Landscape: Boolean read get_Landscape write set_Landscape;
    property Margins: DNMargins read get_Margins write set_Margins;
    property PaperSize: DNPaperSize read get_PaperSize write set_PaperSize;
    property PaperSource: DNPaperSource read get_PaperSource write set_PaperSource;
    property PrintableArea: DNRectangleF read get_PrintableArea;
    property PrinterResolution: DNPrinterResolution read get_PrinterResolution write set_PrinterResolution;
    property PrinterSettings: DNPrinterSettings read get_PrinterSettings write set_PrinterSettings;
  end;

  TDNPageSettings = class(TDNGenericImport<DNPageSettingsClass, DNPageSettings>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPaperSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8EDA3B12-D5E3-5F25-B87F-D32097D3FB96}']
  { constructors } 

    {class} function init: DNPaperSize; overload;
    {class} function init(name: string; width: Int32; height: Int32): DNPaperSize; overload;

  end;

  [DNTypeName('System.Drawing.Printing.PaperSize')]
  DNPaperSize = interface(DDN.mscorlib.DNObject)
  ['{19C1F738-FF0A-34D5-8CA1-0FE5B08906EB}']
  { getters & setters } 

    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Kind: DNPaperKind;
    function get_PaperName: string;
    procedure set_PaperName(value: string);
    function get_RawKind: Int32;
    procedure set_RawKind(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Height: Int32 read get_Height write set_Height;
    property Kind: DNPaperKind read get_Kind;
    property PaperName: string read get_PaperName write set_PaperName;
    property RawKind: Int32 read get_RawKind write set_RawKind;
    property Width: Int32 read get_Width write set_Width;
  end;

  TDNPaperSize = class(TDNGenericImport<DNPaperSizeClass, DNPaperSize>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPaperSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E071617-CB4D-5AA8-97E5-B16FCDD4823E}']
  { constructors } 

    {class} function init: DNPaperSource;

  end;

  [DNTypeName('System.Drawing.Printing.PaperSource')]
  DNPaperSource = interface(DDN.mscorlib.DNObject)
  ['{42181C14-259D-307A-8D1A-B2B952F93DC7}']
  { getters & setters } 

    function get_Kind: DNPaperSourceKind;
    function get_RawKind: Int32;
    procedure set_RawKind(value: Int32);
    function get_SourceName: string;
    procedure set_SourceName(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Kind: DNPaperSourceKind read get_Kind;
    property RawKind: Int32 read get_RawKind write set_RawKind;
    property SourceName: string read get_SourceName write set_SourceName;
  end;

  TDNPaperSource = class(TDNGenericImport<DNPaperSourceClass, DNPaperSource>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPreviewPageInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5CBEA6CF-3B47-58B2-9628-0F2551A46969}']
  { constructors } 

    {class} function init(image: DNImage; physicalSize: DNSize): DNPreviewPageInfo;

  end;

  [DNTypeName('System.Drawing.Printing.PreviewPageInfo')]
  DNPreviewPageInfo = interface(DDN.mscorlib.DNObject)
  ['{E9C17F39-040C-36F1-8B60-2A04D0382492}']
  { getters & setters } 

    function get_Image: DNImage;
    function get_PhysicalSize: DNSize;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Image: DNImage read get_Image;
    property PhysicalSize: DNSize read get_PhysicalSize;
  end;

  TDNPreviewPageInfo = class(TDNGenericImport<DNPreviewPageInfoClass, DNPreviewPageInfo>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintControllerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AF429C9D-CD57-5F4C-96F8-DEE2A5F0DFFD}']
  end;

  [DNTypeName('System.Drawing.Printing.PrintController')]
  DNPrintController = interface(DDN.mscorlib.DNObject)
  ['{1FF59139-A803-31C5-B176-6D24D5A3BF55}']
  { getters & setters } 

    function get_IsPreview: Boolean;

  { methods } 

    procedure OnStartPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function OnStartPage(document: DNPrintDocument; e: DNPrintPageEventArgs): DNGraphics;
    procedure OnEndPage(document: DNPrintDocument; e: DNPrintPageEventArgs);
    procedure OnEndPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsPreview: Boolean read get_IsPreview;
  end;

  TDNPrintController = class(TDNGenericImport<DNPrintControllerClass, DNPrintController>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPreviewPrintControllerClass = interface(DNPrintControllerClass)
  ['{A1CBA942-4144-5A5D-A199-208D7EE91934}']
  { constructors } 

    {class} function init: DNPreviewPrintController;

  end;

  [DNTypeName('System.Drawing.Printing.PreviewPrintController')]
  DNPreviewPrintController = interface(DNPrintController)
  ['{8C7C352B-4A85-3963-BFBE-0834E68A7EF4}']
  { getters & setters } 

    function get_IsPreview: Boolean;
    function get_UseAntiAlias: Boolean;
    procedure set_UseAntiAlias(value: Boolean);

  { methods } 

    procedure OnStartPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function OnStartPage(document: DNPrintDocument; e: DNPrintPageEventArgs): DNGraphics;
    procedure OnEndPage(document: DNPrintDocument; e: DNPrintPageEventArgs);
    procedure OnEndPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function GetPreviewPageInfo: TArray<DNPreviewPageInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsPreview: Boolean read get_IsPreview;
    property UseAntiAlias: Boolean read get_UseAntiAlias write set_UseAntiAlias;
  end;

  TDNPreviewPrintController = class(TDNGenericImport<DNPreviewPrintControllerClass, DNPreviewPrintController>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNStandardPrintControllerClass = interface(DNPrintControllerClass)
  ['{6EA475BD-4348-56D2-B652-03893FB9EB5E}']
  { constructors } 

    {class} function init: DNStandardPrintController;

  end;

  [DNTypeName('System.Drawing.Printing.StandardPrintController')]
  DNStandardPrintController = interface(DNPrintController)
  ['{69D833C9-4486-3127-9A18-EDC3EEBAD194}']
  { getters & setters } 

    function get_IsPreview: Boolean;

  { methods } 

    procedure OnStartPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function OnStartPage(document: DNPrintDocument; e: DNPrintPageEventArgs): DNGraphics;
    procedure OnEndPage(document: DNPrintDocument; e: DNPrintPageEventArgs);
    procedure OnEndPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsPreview: Boolean read get_IsPreview;
  end;

  TDNStandardPrintController = class(TDNGenericImport<DNStandardPrintControllerClass, DNStandardPrintController>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterResolutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BE7C6948-F399-5E8D-ABFF-7A901642495B}']
  { constructors } 

    {class} function init: DNPrinterResolution;

  end;

  [DNTypeName('System.Drawing.Printing.PrinterResolution')]
  DNPrinterResolution = interface(DDN.mscorlib.DNObject)
  ['{75B45367-ECCC-30F8-86CD-7748B9CC6B7F}']
  { getters & setters } 

    function get_Kind: DNPrinterResolutionKind;
    procedure set_Kind(value: DNPrinterResolutionKind);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Kind: DNPrinterResolutionKind read get_Kind write set_Kind;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNPrinterResolution = class(TDNGenericImport<DNPrinterResolutionClass, DNPrinterResolution>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettingsClass = interface(DNObjectClass)
  ['{7676BB00-8FB4-5924-B413-C4DEDEA38DE2}']
  { static getter & setter } 

    {class} function get_InstalledPrinters: DNPrinterSettings_StringCollection;

  { constructors } 

    {class} function init: DNPrinterSettings;

  { static propertys } 

    {class} property InstalledPrinters: DNPrinterSettings_StringCollection read get_InstalledPrinters;
  end;

  [DNTypeName('System.Drawing.Printing.PrinterSettings')]
  DNPrinterSettings = interface(DDN.mscorlib.DNICloneable)
  ['{5C0D0EE8-9D2A-3308-A024-607A2B3101D6}']
  { getters & setters } 

    function get_CanDuplex: Boolean;
    function get_Copies: Int16;
    procedure set_Copies(value: Int16);
    function get_Collate: Boolean;
    procedure set_Collate(value: Boolean);
    function get_DefaultPageSettings: DNPageSettings;
    function get_Duplex: DNDuplex;
    procedure set_Duplex(value: DNDuplex);
    function get_FromPage: Int32;
    procedure set_FromPage(value: Int32);
    function get_IsDefaultPrinter: Boolean;
    function get_IsPlotter: Boolean;
    function get_IsValid: Boolean;
    function get_LandscapeAngle: Int32;
    function get_MaximumCopies: Int32;
    function get_MaximumPage: Int32;
    procedure set_MaximumPage(value: Int32);
    function get_MinimumPage: Int32;
    procedure set_MinimumPage(value: Int32);
    function get_PrintFileName: string;
    procedure set_PrintFileName(value: string);
    function get_PaperSizes: DNPrinterSettings_PaperSizeCollection;
    function get_PaperSources: DNPrinterSettings_PaperSourceCollection;
    function get_PrintRange: DNPrintRange;
    procedure set_PrintRange(value: DNPrintRange);
    function get_PrintToFile: Boolean;
    procedure set_PrintToFile(value: Boolean);
    function get_PrinterName: string;
    procedure set_PrinterName(value: string);
    function get_PrinterResolutions: DNPrinterSettings_PrinterResolutionCollection;
    function get_SupportsColor: Boolean;
    function get_ToPage: Int32;
    procedure set_ToPage(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function CreateMeasurementGraphics: DNGraphics; overload;
    function CreateMeasurementGraphics(honorOriginAtMargins: Boolean): DNGraphics; overload;
    function CreateMeasurementGraphics(pageSettings: DNPageSettings): DNGraphics; overload;
    function CreateMeasurementGraphics(pageSettings: DNPageSettings; honorOriginAtMargins: Boolean): DNGraphics; overload;
    function GetHdevmode: IntPtr; overload;
    function GetHdevmode(pageSettings: DNPageSettings): IntPtr; overload;
    function GetHdevnames: IntPtr;
    function IsDirectPrintingSupported(imageFormat: DNImageFormat): Boolean; overload;
    function IsDirectPrintingSupported(image: DNImage): Boolean; overload;
    procedure SetHdevmode(hdevmode: IntPtr);
    procedure SetHdevnames(hdevnames: IntPtr);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CanDuplex: Boolean read get_CanDuplex;
    property Copies: Int16 read get_Copies write set_Copies;
    property Collate: Boolean read get_Collate write set_Collate;
    property DefaultPageSettings: DNPageSettings read get_DefaultPageSettings;
    property Duplex: DNDuplex read get_Duplex write set_Duplex;
    property FromPage: Int32 read get_FromPage write set_FromPage;
    property IsDefaultPrinter: Boolean read get_IsDefaultPrinter;
    property IsPlotter: Boolean read get_IsPlotter;
    property IsValid: Boolean read get_IsValid;
    property LandscapeAngle: Int32 read get_LandscapeAngle;
    property MaximumCopies: Int32 read get_MaximumCopies;
    property MaximumPage: Int32 read get_MaximumPage write set_MaximumPage;
    property MinimumPage: Int32 read get_MinimumPage write set_MinimumPage;
    property PrintFileName: string read get_PrintFileName write set_PrintFileName;
    property PaperSizes: DNPrinterSettings_PaperSizeCollection read get_PaperSizes;
    property PaperSources: DNPrinterSettings_PaperSourceCollection read get_PaperSources;
    property PrintRange: DNPrintRange read get_PrintRange write set_PrintRange;
    property PrintToFile: Boolean read get_PrintToFile write set_PrintToFile;
    property PrinterName: string read get_PrinterName write set_PrinterName;
    property PrinterResolutions: DNPrinterSettings_PrinterResolutionCollection read get_PrinterResolutions;
    property SupportsColor: Boolean read get_SupportsColor;
    property ToPage: Int32 read get_ToPage write set_ToPage;
  end;

  TDNPrinterSettings = class(TDNGenericImport<DNPrinterSettingsClass, DNPrinterSettings>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PaperSizeCollectionClass = interface(DNObjectClass)
  ['{D314BDB6-5CFF-5342-9670-44AAC3799605}']
  { constructors } 

    {class} function init(&array: TArray<DNPaperSize>): DNPrinterSettings_PaperSizeCollection;

  end;

  [DNTypeName('System.Drawing.Printing.PrinterSettings+PaperSizeCollection')]
  DNPrinterSettings_PaperSizeCollection = interface(DDN.mscorlib.DNICollection)
  ['{F2DC6D91-B2ED-36E4-B5A2-706A808045D2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPaperSize;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(paperSizes: TArray<DNPaperSize>; index: Int32);
    function Add(paperSize: DNPaperSize): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPaperSize read get_Item; default;
  end;

  TDNPrinterSettings_PaperSizeCollection = class(TDNGenericImport<DNPrinterSettings_PaperSizeCollectionClass, DNPrinterSettings_PaperSizeCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PaperSourceCollectionClass = interface(DNObjectClass)
  ['{5100E56B-B5DC-5249-B8D7-B0F2B861D340}']
  { constructors } 

    {class} function init(&array: TArray<DNPaperSource>): DNPrinterSettings_PaperSourceCollection;

  end;

  [DNTypeName('System.Drawing.Printing.PrinterSettings+PaperSourceCollection')]
  DNPrinterSettings_PaperSourceCollection = interface(DDN.mscorlib.DNICollection)
  ['{0CB10CF3-79E3-3D88-93A5-DD986AFAF5BA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPaperSource;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(paperSources: TArray<DNPaperSource>; index: Int32);
    function Add(paperSource: DNPaperSource): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPaperSource read get_Item; default;
  end;

  TDNPrinterSettings_PaperSourceCollection = class(TDNGenericImport<DNPrinterSettings_PaperSourceCollectionClass, DNPrinterSettings_PaperSourceCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PrinterResolutionCollectionClass = interface(DNObjectClass)
  ['{668BC649-4DAA-5E00-AB27-8A362631F6B7}']
  { constructors } 

    {class} function init(&array: TArray<DNPrinterResolution>): DNPrinterSettings_PrinterResolutionCollection;

  end;

  [DNTypeName('System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection')]
  DNPrinterSettings_PrinterResolutionCollection = interface(DDN.mscorlib.DNICollection)
  ['{185EA4C4-A9C2-35B6-9219-E54A78482F11}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPrinterResolution;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(printerResolutions: TArray<DNPrinterResolution>; index: Int32);
    function Add(printerResolution: DNPrinterResolution): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPrinterResolution read get_Item; default;
  end;

  TDNPrinterSettings_PrinterResolutionCollection = class(TDNGenericImport<DNPrinterSettings_PrinterResolutionCollectionClass, DNPrinterSettings_PrinterResolutionCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_StringCollectionClass = interface(DNObjectClass)
  ['{77A66E73-7EC6-5C1E-B999-E119E23B82DD}']
  { constructors } 

    {class} function init(&array: TArray<string>): DNPrinterSettings_StringCollection;

  end;

  [DNTypeName('System.Drawing.Printing.PrinterSettings+StringCollection')]
  DNPrinterSettings_StringCollection = interface(DDN.mscorlib.DNICollection)
  ['{797C1ACD-B7D5-3449-A800-F41050E30EEC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): string;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(strings: TArray<string>; index: Int32);
    function Add(value: string): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: string read get_Item; default;
  end;

  TDNPrinterSettings_StringCollection = class(TDNGenericImport<DNPrinterSettings_StringCollectionClass, DNPrinterSettings_StringCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterUnitConvertClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8024AF2E-A700-524C-9FAB-758EE5FC4922}']
  { static methods } 

    {class} function Convert(value: Double; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): Double; overload;
    {class} function Convert(value: Int32; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): Int32; overload;
    {class} function Convert(value: DNPoint; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNPoint; overload;
    {class} function Convert(value: DNSize; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNSize; overload;
    {class} function Convert(value: DNRectangle; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNRectangle; overload;
    {class} function Convert(value: DNMargins; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNMargins; overload;

  end;

  [DNTypeName('System.Drawing.Printing.PrinterUnitConvert')]
  DNPrinterUnitConvert = interface(DDN.mscorlib.DNObject)
  ['{7566FB87-BC85-3EF3-B1BD-FF61ECA936A2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPrinterUnitConvert = class(TDNGenericImport<DNPrinterUnitConvertClass, DNPrinterUnitConvert>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemBrushesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{33838080-5025-5B34-B824-039B9A202B58}']
  { static getter & setter } 

    {class} function get_ActiveBorder: DNBrush;
    {class} function get_ActiveCaption: DNBrush;
    {class} function get_ActiveCaptionText: DNBrush;
    {class} function get_AppWorkspace: DNBrush;
    {class} function get_ButtonFace: DNBrush;
    {class} function get_ButtonHighlight: DNBrush;
    {class} function get_ButtonShadow: DNBrush;
    {class} function get_Control: DNBrush;
    {class} function get_ControlLightLight: DNBrush;
    {class} function get_ControlLight: DNBrush;
    {class} function get_ControlDark: DNBrush;
    {class} function get_ControlDarkDark: DNBrush;
    {class} function get_ControlText: DNBrush;
    {class} function get_Desktop: DNBrush;
    {class} function get_GradientActiveCaption: DNBrush;
    {class} function get_GradientInactiveCaption: DNBrush;
    {class} function get_GrayText: DNBrush;
    {class} function get_Highlight: DNBrush;
    {class} function get_HighlightText: DNBrush;
    {class} function get_HotTrack: DNBrush;
    {class} function get_InactiveCaption: DNBrush;
    {class} function get_InactiveBorder: DNBrush;
    {class} function get_InactiveCaptionText: DNBrush;
    {class} function get_Info: DNBrush;
    {class} function get_InfoText: DNBrush;
    {class} function get_Menu: DNBrush;
    {class} function get_MenuBar: DNBrush;
    {class} function get_MenuHighlight: DNBrush;
    {class} function get_MenuText: DNBrush;
    {class} function get_ScrollBar: DNBrush;
    {class} function get_Window: DNBrush;
    {class} function get_WindowFrame: DNBrush;
    {class} function get_WindowText: DNBrush;

  { static methods } 

    {class} function FromSystemColor(c: DNColor): DNBrush;

  { static propertys } 

    {class} property ActiveBorder: DNBrush read get_ActiveBorder;
    {class} property ActiveCaption: DNBrush read get_ActiveCaption;
    {class} property ActiveCaptionText: DNBrush read get_ActiveCaptionText;
    {class} property AppWorkspace: DNBrush read get_AppWorkspace;
    {class} property ButtonFace: DNBrush read get_ButtonFace;
    {class} property ButtonHighlight: DNBrush read get_ButtonHighlight;
    {class} property ButtonShadow: DNBrush read get_ButtonShadow;
    {class} property Control: DNBrush read get_Control;
    {class} property ControlLightLight: DNBrush read get_ControlLightLight;
    {class} property ControlLight: DNBrush read get_ControlLight;
    {class} property ControlDark: DNBrush read get_ControlDark;
    {class} property ControlDarkDark: DNBrush read get_ControlDarkDark;
    {class} property ControlText: DNBrush read get_ControlText;
    {class} property Desktop: DNBrush read get_Desktop;
    {class} property GradientActiveCaption: DNBrush read get_GradientActiveCaption;
    {class} property GradientInactiveCaption: DNBrush read get_GradientInactiveCaption;
    {class} property GrayText: DNBrush read get_GrayText;
    {class} property Highlight: DNBrush read get_Highlight;
    {class} property HighlightText: DNBrush read get_HighlightText;
    {class} property HotTrack: DNBrush read get_HotTrack;
    {class} property InactiveCaption: DNBrush read get_InactiveCaption;
    {class} property InactiveBorder: DNBrush read get_InactiveBorder;
    {class} property InactiveCaptionText: DNBrush read get_InactiveCaptionText;
    {class} property Info: DNBrush read get_Info;
    {class} property InfoText: DNBrush read get_InfoText;
    {class} property Menu: DNBrush read get_Menu;
    {class} property MenuBar: DNBrush read get_MenuBar;
    {class} property MenuHighlight: DNBrush read get_MenuHighlight;
    {class} property MenuText: DNBrush read get_MenuText;
    {class} property ScrollBar: DNBrush read get_ScrollBar;
    {class} property Window: DNBrush read get_Window;
    {class} property WindowFrame: DNBrush read get_WindowFrame;
    {class} property WindowText: DNBrush read get_WindowText;
  end;

  [DNTypeName('System.Drawing.SystemBrushes')]
  DNSystemBrushes = interface(DDN.mscorlib.DNObject)
  ['{8F04EEF1-EFAB-3D0A-A3C1-8B5578A1FD52}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemBrushes = class(TDNGenericImport<DNSystemBrushesClass, DNSystemBrushes>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemColorsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A8743384-ED03-57E1-90C8-BCA0D1AE1516}']
  { static getter & setter } 

    {class} function get_ActiveBorder: DNColor;
    {class} function get_ActiveCaption: DNColor;
    {class} function get_ActiveCaptionText: DNColor;
    {class} function get_AppWorkspace: DNColor;
    {class} function get_ButtonFace: DNColor;
    {class} function get_ButtonHighlight: DNColor;
    {class} function get_ButtonShadow: DNColor;
    {class} function get_Control: DNColor;
    {class} function get_ControlDark: DNColor;
    {class} function get_ControlDarkDark: DNColor;
    {class} function get_ControlLight: DNColor;
    {class} function get_ControlLightLight: DNColor;
    {class} function get_ControlText: DNColor;
    {class} function get_Desktop: DNColor;
    {class} function get_GradientActiveCaption: DNColor;
    {class} function get_GradientInactiveCaption: DNColor;
    {class} function get_GrayText: DNColor;
    {class} function get_Highlight: DNColor;
    {class} function get_HighlightText: DNColor;
    {class} function get_HotTrack: DNColor;
    {class} function get_InactiveBorder: DNColor;
    {class} function get_InactiveCaption: DNColor;
    {class} function get_InactiveCaptionText: DNColor;
    {class} function get_Info: DNColor;
    {class} function get_InfoText: DNColor;
    {class} function get_Menu: DNColor;
    {class} function get_MenuBar: DNColor;
    {class} function get_MenuHighlight: DNColor;
    {class} function get_MenuText: DNColor;
    {class} function get_ScrollBar: DNColor;
    {class} function get_Window: DNColor;
    {class} function get_WindowFrame: DNColor;
    {class} function get_WindowText: DNColor;

  { static propertys } 

    {class} property ActiveBorder: DNColor read get_ActiveBorder;
    {class} property ActiveCaption: DNColor read get_ActiveCaption;
    {class} property ActiveCaptionText: DNColor read get_ActiveCaptionText;
    {class} property AppWorkspace: DNColor read get_AppWorkspace;
    {class} property ButtonFace: DNColor read get_ButtonFace;
    {class} property ButtonHighlight: DNColor read get_ButtonHighlight;
    {class} property ButtonShadow: DNColor read get_ButtonShadow;
    {class} property Control: DNColor read get_Control;
    {class} property ControlDark: DNColor read get_ControlDark;
    {class} property ControlDarkDark: DNColor read get_ControlDarkDark;
    {class} property ControlLight: DNColor read get_ControlLight;
    {class} property ControlLightLight: DNColor read get_ControlLightLight;
    {class} property ControlText: DNColor read get_ControlText;
    {class} property Desktop: DNColor read get_Desktop;
    {class} property GradientActiveCaption: DNColor read get_GradientActiveCaption;
    {class} property GradientInactiveCaption: DNColor read get_GradientInactiveCaption;
    {class} property GrayText: DNColor read get_GrayText;
    {class} property Highlight: DNColor read get_Highlight;
    {class} property HighlightText: DNColor read get_HighlightText;
    {class} property HotTrack: DNColor read get_HotTrack;
    {class} property InactiveBorder: DNColor read get_InactiveBorder;
    {class} property InactiveCaption: DNColor read get_InactiveCaption;
    {class} property InactiveCaptionText: DNColor read get_InactiveCaptionText;
    {class} property Info: DNColor read get_Info;
    {class} property InfoText: DNColor read get_InfoText;
    {class} property Menu: DNColor read get_Menu;
    {class} property MenuBar: DNColor read get_MenuBar;
    {class} property MenuHighlight: DNColor read get_MenuHighlight;
    {class} property MenuText: DNColor read get_MenuText;
    {class} property ScrollBar: DNColor read get_ScrollBar;
    {class} property Window: DNColor read get_Window;
    {class} property WindowFrame: DNColor read get_WindowFrame;
    {class} property WindowText: DNColor read get_WindowText;
  end;

  [DNTypeName('System.Drawing.SystemColors')]
  DNSystemColors = interface(DDN.mscorlib.DNObject)
  ['{10A38EB3-7AF4-3F68-A063-A3D0F88166E3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemColors = class(TDNGenericImport<DNSystemColorsClass, DNSystemColors>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemFontsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D1FF717-A482-579A-A5CE-D672A646DB0E}']
  { static getter & setter } 

    {class} function get_CaptionFont: DNFont;
    {class} function get_SmallCaptionFont: DNFont;
    {class} function get_MenuFont: DNFont;
    {class} function get_StatusFont: DNFont;
    {class} function get_MessageBoxFont: DNFont;
    {class} function get_IconTitleFont: DNFont;
    {class} function get_DefaultFont: DNFont;
    {class} function get_DialogFont: DNFont;

  { static methods } 

    {class} function GetFontByName(systemFontName: string): DNFont;

  { static propertys } 

    {class} property CaptionFont: DNFont read get_CaptionFont;
    {class} property SmallCaptionFont: DNFont read get_SmallCaptionFont;
    {class} property MenuFont: DNFont read get_MenuFont;
    {class} property StatusFont: DNFont read get_StatusFont;
    {class} property MessageBoxFont: DNFont read get_MessageBoxFont;
    {class} property IconTitleFont: DNFont read get_IconTitleFont;
    {class} property DefaultFont: DNFont read get_DefaultFont;
    {class} property DialogFont: DNFont read get_DialogFont;
  end;

  [DNTypeName('System.Drawing.SystemFonts')]
  DNSystemFonts = interface(DDN.mscorlib.DNObject)
  ['{0BDC7CB2-BF00-36B8-AC47-38EADBACD892}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemFonts = class(TDNGenericImport<DNSystemFontsClass, DNSystemFonts>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemIconsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0811C24B-7B5F-59A7-BE4A-B867BE5327EA}']
  { static getter & setter } 

    {class} function get_Application: DNIcon;
    {class} function get_Asterisk: DNIcon;
    {class} function get_Error: DNIcon;
    {class} function get_Exclamation: DNIcon;
    {class} function get_Hand: DNIcon;
    {class} function get_Information: DNIcon;
    {class} function get_Question: DNIcon;
    {class} function get_Warning: DNIcon;
    {class} function get_WinLogo: DNIcon;
    {class} function get_Shield: DNIcon;

  { static propertys } 

    {class} property Application: DNIcon read get_Application;
    {class} property Asterisk: DNIcon read get_Asterisk;
    {class} property Error: DNIcon read get_Error;
    {class} property Exclamation: DNIcon read get_Exclamation;
    {class} property Hand: DNIcon read get_Hand;
    {class} property Information: DNIcon read get_Information;
    {class} property Question: DNIcon read get_Question;
    {class} property Warning: DNIcon read get_Warning;
    {class} property WinLogo: DNIcon read get_WinLogo;
    {class} property Shield: DNIcon read get_Shield;
  end;

  [DNTypeName('System.Drawing.SystemIcons')]
  DNSystemIcons = interface(DDN.mscorlib.DNObject)
  ['{5A42D3FD-8519-31FF-8531-51F2442A97AE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemIcons = class(TDNGenericImport<DNSystemIconsClass, DNSystemIcons>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemPensClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC8172BB-7789-50A9-893B-C26AA54154C5}']
  { static getter & setter } 

    {class} function get_ActiveBorder: DNPen;
    {class} function get_ActiveCaption: DNPen;
    {class} function get_ActiveCaptionText: DNPen;
    {class} function get_AppWorkspace: DNPen;
    {class} function get_ButtonFace: DNPen;
    {class} function get_ButtonHighlight: DNPen;
    {class} function get_ButtonShadow: DNPen;
    {class} function get_Control: DNPen;
    {class} function get_ControlText: DNPen;
    {class} function get_ControlDark: DNPen;
    {class} function get_ControlDarkDark: DNPen;
    {class} function get_ControlLight: DNPen;
    {class} function get_ControlLightLight: DNPen;
    {class} function get_Desktop: DNPen;
    {class} function get_GradientActiveCaption: DNPen;
    {class} function get_GradientInactiveCaption: DNPen;
    {class} function get_GrayText: DNPen;
    {class} function get_Highlight: DNPen;
    {class} function get_HighlightText: DNPen;
    {class} function get_HotTrack: DNPen;
    {class} function get_InactiveBorder: DNPen;
    {class} function get_InactiveCaption: DNPen;
    {class} function get_InactiveCaptionText: DNPen;
    {class} function get_Info: DNPen;
    {class} function get_InfoText: DNPen;
    {class} function get_Menu: DNPen;
    {class} function get_MenuBar: DNPen;
    {class} function get_MenuHighlight: DNPen;
    {class} function get_MenuText: DNPen;
    {class} function get_ScrollBar: DNPen;
    {class} function get_Window: DNPen;
    {class} function get_WindowFrame: DNPen;
    {class} function get_WindowText: DNPen;

  { static methods } 

    {class} function FromSystemColor(c: DNColor): DNPen;

  { static propertys } 

    {class} property ActiveBorder: DNPen read get_ActiveBorder;
    {class} property ActiveCaption: DNPen read get_ActiveCaption;
    {class} property ActiveCaptionText: DNPen read get_ActiveCaptionText;
    {class} property AppWorkspace: DNPen read get_AppWorkspace;
    {class} property ButtonFace: DNPen read get_ButtonFace;
    {class} property ButtonHighlight: DNPen read get_ButtonHighlight;
    {class} property ButtonShadow: DNPen read get_ButtonShadow;
    {class} property Control: DNPen read get_Control;
    {class} property ControlText: DNPen read get_ControlText;
    {class} property ControlDark: DNPen read get_ControlDark;
    {class} property ControlDarkDark: DNPen read get_ControlDarkDark;
    {class} property ControlLight: DNPen read get_ControlLight;
    {class} property ControlLightLight: DNPen read get_ControlLightLight;
    {class} property Desktop: DNPen read get_Desktop;
    {class} property GradientActiveCaption: DNPen read get_GradientActiveCaption;
    {class} property GradientInactiveCaption: DNPen read get_GradientInactiveCaption;
    {class} property GrayText: DNPen read get_GrayText;
    {class} property Highlight: DNPen read get_Highlight;
    {class} property HighlightText: DNPen read get_HighlightText;
    {class} property HotTrack: DNPen read get_HotTrack;
    {class} property InactiveBorder: DNPen read get_InactiveBorder;
    {class} property InactiveCaption: DNPen read get_InactiveCaption;
    {class} property InactiveCaptionText: DNPen read get_InactiveCaptionText;
    {class} property Info: DNPen read get_Info;
    {class} property InfoText: DNPen read get_InfoText;
    {class} property Menu: DNPen read get_Menu;
    {class} property MenuBar: DNPen read get_MenuBar;
    {class} property MenuHighlight: DNPen read get_MenuHighlight;
    {class} property MenuText: DNPen read get_MenuText;
    {class} property ScrollBar: DNPen read get_ScrollBar;
    {class} property Window: DNPen read get_Window;
    {class} property WindowFrame: DNPen read get_WindowFrame;
    {class} property WindowText: DNPen read get_WindowText;
  end;

  [DNTypeName('System.Drawing.SystemPens')]
  DNSystemPens = interface(DDN.mscorlib.DNObject)
  ['{0193DFF9-1BC0-3C1F-A57C-B0588F275126}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemPens = class(TDNGenericImport<DNSystemPensClass, DNSystemPens>) end;

  //-------------namespace: System.Drawing.Text----------------
  DNFontCollectionClass = interface(DNObjectClass)
  ['{658FAB24-84C8-575B-AEF2-6C87356F9CD5}']
  end;

  [DNTypeName('System.Drawing.Text.FontCollection')]
  DNFontCollection = interface(DDN.mscorlib.DNIDisposable)
  ['{1E49A6A1-22AE-3BA9-ADA8-DE8A9D090BDE}']
  { getters & setters } 

    function get_Families: TArray<DNFontFamily>;

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Families: TArray<DNFontFamily> read get_Families;
  end;

  TDNFontCollection = class(TDNGenericImport<DNFontCollectionClass, DNFontCollection>) end;

  //-------------namespace: System.Drawing.Text----------------
  DNInstalledFontCollectionClass = interface(DNFontCollectionClass)
  ['{1A9D8C9E-5A4D-5333-8C03-23685FE64160}']
  { constructors } 

    {class} function init: DNInstalledFontCollection;

  end;

  [DNTypeName('System.Drawing.Text.InstalledFontCollection')]
  DNInstalledFontCollection = interface(DNFontCollection)
  ['{18BAC7AC-7EC1-3E37-A600-CA3CC56B849F}']
  { getters & setters } 

    function get_Families: TArray<DNFontFamily>;

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Families: TArray<DNFontFamily> read get_Families;
  end;

  TDNInstalledFontCollection = class(TDNGenericImport<DNInstalledFontCollectionClass, DNInstalledFontCollection>) end;

  //-------------namespace: System.Drawing.Text----------------
  DNPrivateFontCollectionClass = interface(DNFontCollectionClass)
  ['{D9E6F7A7-DA39-552D-8F60-71C2E5F257FE}']
  { constructors } 

    {class} function init: DNPrivateFontCollection;

  end;

  [DNTypeName('System.Drawing.Text.PrivateFontCollection')]
  DNPrivateFontCollection = interface(DNFontCollection)
  ['{397F6523-8278-3AFB-97E5-5444365E9A72}']
  { getters & setters } 

    function get_Families: TArray<DNFontFamily>;

  { methods } 

    procedure AddFontFile(filename: string);
    procedure AddMemoryFont(memory: IntPtr; length: Int32);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Families: TArray<DNFontFamily> read get_Families;
  end;

  TDNPrivateFontCollection = class(TDNGenericImport<DNPrivateFontCollectionClass, DNPrivateFontCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintEventArgsClass = interface(DNObjectClass)
  ['{DD88D947-6F22-569B-9601-6073DB817CC1}']
  { constructors } 

    {class} function init: DNPrintEventArgs;

  end;

  [DNTypeName('System.Drawing.Printing.PrintEventArgs')]
  DNPrintEventArgs = interface(DNObject)
  ['{740149A2-C310-3A38-90EC-D84638581A00}']
  { getters & setters } 

    function get_PrintAction: DNPrintAction;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PrintAction: DNPrintAction read get_PrintAction;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNPrintEventArgs = class(TDNGenericImport<DNPrintEventArgsClass, DNPrintEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNQueryPageSettingsEventArgsClass = interface(DNPrintEventArgsClass)
  ['{40D2D17D-329D-5469-85F9-313B929E506A}']
  { constructors } 

    {class} function init(pageSettings: DNPageSettings): DNQueryPageSettingsEventArgs;

  end;

  [DNTypeName('System.Drawing.Printing.QueryPageSettingsEventArgs')]
  DNQueryPageSettingsEventArgs = interface(DNPrintEventArgs)
  ['{89C40DE8-7377-3FD3-B574-143C6A9E7BB0}']
  { getters & setters } 

    function get_PageSettings: DNPageSettings;
    procedure set_PageSettings(value: DNPageSettings);
    function get_PrintAction: DNPrintAction;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageSettings: DNPageSettings read get_PageSettings write set_PageSettings;
    property PrintAction: DNPrintAction read get_PrintAction;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNQueryPageSettingsEventArgs = class(TDNGenericImport<DNQueryPageSettingsEventArgsClass, DNQueryPageSettingsEventArgs>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNPaintValueEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E07A33BE-AA54-50C0-8DCF-2233AEC4103E}']
  { constructors } 

    {class} function init(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; graphics: DNGraphics; bounds: DNRectangle): DNPaintValueEventArgs;

  end;

  [DNTypeName('System.Drawing.Design.PaintValueEventArgs')]
  DNPaintValueEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{930E4EF8-64A3-3225-9E76-6A89F790EF1E}']
  { getters & setters } 

    function get_Bounds: DNRectangle;
    function get_Context: DDN.System.DNITypeDescriptorContext;
    function get_Graphics: DNGraphics;
    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Bounds: DNRectangle read get_Bounds;
    property Context: DDN.System.DNITypeDescriptorContext read get_Context;
    property Graphics: DNGraphics read get_Graphics;
    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNPaintValueEventArgs = class(TDNGenericImport<DNPaintValueEventArgsClass, DNPaintValueEventArgs>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxComponentsCreatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{957F3B55-1AA3-5DCA-8C10-13F6A0BF1883}']
  { constructors } 

    {class} function init(components: TArray<DDN.System.DNIComponent>): DNToolboxComponentsCreatedEventArgs;

  end;

  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatedEventArgs')]
  DNToolboxComponentsCreatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{D9C9B38B-6C71-3629-9227-22C80CF66162}']
  { getters & setters } 

    function get_Components: TArray<DDN.System.DNIComponent>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Components: TArray<DDN.System.DNIComponent> read get_Components;
  end;

  TDNToolboxComponentsCreatedEventArgs = class(TDNGenericImport<DNToolboxComponentsCreatedEventArgsClass, DNToolboxComponentsCreatedEventArgs>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxComponentsCreatingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D6CEBDD0-D42F-5AF7-A8EC-04D931626653}']
  { constructors } 

    {class} function init(host: DDN.System.DNIDesignerHost): DNToolboxComponentsCreatingEventArgs;

  end;

  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatingEventArgs')]
  DNToolboxComponentsCreatingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B7F90306-D408-3A12-9B2C-CD1F3CE5A5AE}']
  { getters & setters } 

    function get_DesignerHost: DDN.System.DNIDesignerHost;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DesignerHost: DDN.System.DNIDesignerHost read get_DesignerHost;
  end;

  TDNToolboxComponentsCreatingEventArgs = class(TDNGenericImport<DNToolboxComponentsCreatingEventArgsClass, DNToolboxComponentsCreatingEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintPageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FAEE24EA-1B7E-5DA1-AE8A-791352369941}']
  { constructors } 

    {class} function init(graphics: DNGraphics; marginBounds: DNRectangle; pageBounds: DNRectangle; pageSettings: DNPageSettings): DNPrintPageEventArgs;

  end;

  [DNTypeName('System.Drawing.Printing.PrintPageEventArgs')]
  DNPrintPageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2A5D8F32-812E-3C94-9263-51BCC040C47C}']
  { getters & setters } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_Graphics: DNGraphics;
    function get_HasMorePages: Boolean;
    procedure set_HasMorePages(value: Boolean);
    function get_MarginBounds: DNRectangle;
    function get_PageBounds: DNRectangle;
    function get_PageSettings: DNPageSettings;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancel: Boolean read get_Cancel write set_Cancel;
    property Graphics: DNGraphics read get_Graphics;
    property HasMorePages: Boolean read get_HasMorePages write set_HasMorePages;
    property MarginBounds: DNRectangle read get_MarginBounds;
    property PageBounds: DNRectangle read get_PageBounds;
    property PageSettings: DNPageSettings read get_PageSettings;
  end;

  TDNPrintPageEventArgs = class(TDNGenericImport<DNPrintPageEventArgsClass, DNPrintPageEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNInvalidPrinterExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{61B60F22-03DD-5D86-8926-7775864970BB}']
  { constructors } 

    {class} function init(settings: DNPrinterSettings): DNInvalidPrinterException;

  end;

  [DNTypeName('System.Drawing.Printing.InvalidPrinterException')]
  DNInvalidPrinterException = interface(DDN.mscorlib.DNSystemException)
  ['{6D01472A-14A8-36E6-8E93-3577E1A8A4B5}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidPrinterException = class(TDNGenericImport<DNInvalidPrinterExceptionClass, DNInvalidPrinterException>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintDocumentClass = interface(DNObjectClass)
  ['{34BD3BB6-F9F1-504E-B7D3-3DB900132744}']
  { constructors } 

    {class} function init: DNPrintDocument;

  end;

  [DNTypeName('System.Drawing.Printing.PrintDocument')]
  DNPrintDocument = interface(DNObject)
  ['{9501869F-5E2A-35B6-8588-737438CB7BC8}']
  { getters & setters } 

    function get_DefaultPageSettings: DNPageSettings;
    procedure set_DefaultPageSettings(value: DNPageSettings);
    function get_DocumentName: string;
    procedure set_DocumentName(value: string);
    function get_OriginAtMargins: Boolean;
    procedure set_OriginAtMargins(value: Boolean);
    function get_PrintController: DNPrintController;
    procedure set_PrintController(value: DNPrintController);
    function get_PrinterSettings: DNPrinterSettings;
    procedure set_PrinterSettings(value: DNPrinterSettings);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_BeginPrint(value: DNPrintEventHandler);
    procedure remove_BeginPrint(value: DNPrintEventHandler);
    procedure add_EndPrint(value: DNPrintEventHandler);
    procedure remove_EndPrint(value: DNPrintEventHandler);
    procedure add_PrintPage(value: DNPrintPageEventHandler);
    procedure remove_PrintPage(value: DNPrintPageEventHandler);
    procedure add_QueryPageSettings(value: DNQueryPageSettingsEventHandler);
    procedure remove_QueryPageSettings(value: DNQueryPageSettingsEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Print;
    function ToString: string;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultPageSettings: DNPageSettings read get_DefaultPageSettings write set_DefaultPageSettings;
    property DocumentName: string read get_DocumentName write set_DocumentName;
    property OriginAtMargins: Boolean read get_OriginAtMargins write set_OriginAtMargins;
    property PrintController: DNPrintController read get_PrintController write set_PrintController;
    property PrinterSettings: DNPrinterSettings read get_PrinterSettings write set_PrinterSettings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNPrintDocument = class(TDNGenericImport<DNPrintDocumentClass, DNPrintDocument>) end;

  //-------------namespace: System.Drawing----------------
  DNBrushClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{629CBCB4-595B-51D5-8891-446B38F904D4}']
  end;

  [DNTypeName('System.Drawing.Brush')]
  DNBrush = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{60C4596A-1199-3E69-B581-7E1C9CDE9B1A}']
  { methods } 

    procedure Dispose;
    function Clone: DDN.mscorlib.DNObject;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrush = class(TDNGenericImport<DNBrushClass, DNBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNHatchBrushClass = interface(DNBrushClass)
  ['{2463DC27-A67E-5974-965B-A398DFD6DA3E}']
  { constructors } 

    {class} function init(hatchstyle: DNHatchStyle; foreColor: DNColor): DNHatchBrush; overload;
    {class} function init(hatchstyle: DNHatchStyle; foreColor: DNColor; backColor: DNColor): DNHatchBrush; overload;

  end;

  [DNTypeName('System.Drawing.Drawing2D.HatchBrush')]
  DNHatchBrush = interface(DNBrush)
  ['{77A4D49D-2D7A-373D-88B0-CA6E954C3537}']
  { getters & setters } 

    function get_HatchStyle: DNHatchStyle;
    function get_ForegroundColor: DNColor;
    function get_BackgroundColor: DNColor;

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HatchStyle: DNHatchStyle read get_HatchStyle;
    property ForegroundColor: DNColor read get_ForegroundColor;
    property BackgroundColor: DNColor read get_BackgroundColor;
  end;

  TDNHatchBrush = class(TDNGenericImport<DNHatchBrushClass, DNHatchBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNLinearGradientBrushClass = interface(DNBrushClass)
  ['{469B1A6B-7DF1-528C-A017-CA7DE0537B7A}']
  { constructors } 

    {class} function init(point1: DNPointF; point2: DNPointF; color1: DNColor; color2: DNColor): DNLinearGradientBrush; overload;
    {class} function init(point1: DNPoint; point2: DNPoint; color1: DNColor; color2: DNColor): DNLinearGradientBrush; overload;
    {class} function init(rect: DNRectangleF; color1: DNColor; color2: DNColor; linearGradientMode: DNLinearGradientMode): DNLinearGradientBrush; overload;
    {class} function init(rect: DNRectangle; color1: DNColor; color2: DNColor; linearGradientMode: DNLinearGradientMode): DNLinearGradientBrush; overload;
    {class} function init(rect: DNRectangleF; color1: DNColor; color2: DNColor; angle: Single): DNLinearGradientBrush; overload;
    {class} function init(rect: DNRectangleF; color1: DNColor; color2: DNColor; angle: Single; isAngleScaleable: Boolean): DNLinearGradientBrush; overload;
    {class} function init(rect: DNRectangle; color1: DNColor; color2: DNColor; angle: Single): DNLinearGradientBrush; overload;
    {class} function init(rect: DNRectangle; color1: DNColor; color2: DNColor; angle: Single; isAngleScaleable: Boolean): DNLinearGradientBrush; overload;

  end;

  [DNTypeName('System.Drawing.Drawing2D.LinearGradientBrush')]
  DNLinearGradientBrush = interface(DNBrush)
  ['{5AE2600B-BBD2-3404-8FE9-C6553DE9329B}']
  { getters & setters } 

    function get_LinearColors: TArray<DNColor>;
    procedure set_LinearColors(value: TArray<DNColor>);
    function get_Rectangle: DNRectangleF;
    function get_GammaCorrection: Boolean;
    procedure set_GammaCorrection(value: Boolean);
    function get_Blend: DNBlend;
    procedure set_Blend(value: DNBlend);
    function get_InterpolationColors: DNColorBlend;
    procedure set_InterpolationColors(value: DNColorBlend);
    function get_WrapMode: DNWrapMode;
    procedure set_WrapMode(value: DNWrapMode);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);

  { methods } 

    procedure TranslateTransform(dx: Single; dy: Single); overload;
    function Clone: DDN.mscorlib.DNObject;
    procedure SetSigmaBellShape(focus: Single); overload;
    procedure SetSigmaBellShape(focus: Single; scale: Single); overload;
    procedure SetBlendTriangularShape(focus: Single); overload;
    procedure SetBlendTriangularShape(focus: Single; scale: Single); overload;
    procedure ResetTransform;
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    procedure RotateTransform(angle: Single); overload;
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LinearColors: TArray<DNColor> read get_LinearColors write set_LinearColors;
    property Rectangle: DNRectangleF read get_Rectangle;
    property GammaCorrection: Boolean read get_GammaCorrection write set_GammaCorrection;
    property Blend: DNBlend read get_Blend write set_Blend;
    property InterpolationColors: DNColorBlend read get_InterpolationColors write set_InterpolationColors;
    property WrapMode: DNWrapMode read get_WrapMode write set_WrapMode;
    property Transform: DNMatrix read get_Transform write set_Transform;
  end;

  TDNLinearGradientBrush = class(TDNGenericImport<DNLinearGradientBrushClass, DNLinearGradientBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNPathGradientBrushClass = interface(DNBrushClass)
  ['{E741BBA6-B534-5F44-8D3F-42CE30184DD3}']
  { constructors } 

    {class} function init(points: TArray<DNPointF>): DNPathGradientBrush; overload;
    {class} function init(points: TArray<DNPointF>; wrapMode: DNWrapMode): DNPathGradientBrush; overload;
    {class} function init(points: TArray<DNPoint>): DNPathGradientBrush; overload;
    {class} function init(points: TArray<DNPoint>; wrapMode: DNWrapMode): DNPathGradientBrush; overload;
    {class} function init(path: DNGraphicsPath): DNPathGradientBrush; overload;

  end;

  [DNTypeName('System.Drawing.Drawing2D.PathGradientBrush')]
  DNPathGradientBrush = interface(DNBrush)
  ['{E5B2B033-F0E6-3A04-A0D0-8CF89EBF335A}']
  { getters & setters } 

    function get_CenterColor: DNColor;
    procedure set_CenterColor(value: DNColor);
    function get_SurroundColors: TArray<DNColor>;
    procedure set_SurroundColors(value: TArray<DNColor>);
    function get_CenterPoint: DNPointF;
    procedure set_CenterPoint(value: DNPointF);
    function get_Rectangle: DNRectangleF;
    function get_Blend: DNBlend;
    procedure set_Blend(value: DNBlend);
    function get_InterpolationColors: DNColorBlend;
    procedure set_InterpolationColors(value: DNColorBlend);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_FocusScales: DNPointF;
    procedure set_FocusScales(value: DNPointF);
    function get_WrapMode: DNWrapMode;
    procedure set_WrapMode(value: DNWrapMode);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    procedure SetSigmaBellShape(focus: Single); overload;
    procedure SetSigmaBellShape(focus: Single; scale: Single); overload;
    procedure SetBlendTriangularShape(focus: Single); overload;
    procedure SetBlendTriangularShape(focus: Single; scale: Single); overload;
    procedure ResetTransform;
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    procedure RotateTransform(angle: Single); overload;
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CenterColor: DNColor read get_CenterColor write set_CenterColor;
    property SurroundColors: TArray<DNColor> read get_SurroundColors write set_SurroundColors;
    property CenterPoint: DNPointF read get_CenterPoint write set_CenterPoint;
    property Rectangle: DNRectangleF read get_Rectangle;
    property Blend: DNBlend read get_Blend write set_Blend;
    property InterpolationColors: DNColorBlend read get_InterpolationColors write set_InterpolationColors;
    property Transform: DNMatrix read get_Transform write set_Transform;
    property FocusScales: DNPointF read get_FocusScales write set_FocusScales;
    property WrapMode: DNWrapMode read get_WrapMode write set_WrapMode;
  end;

  TDNPathGradientBrush = class(TDNGenericImport<DNPathGradientBrushClass, DNPathGradientBrush>) end;

  //-------------namespace: System.Drawing----------------
  DNSolidBrushClass = interface(DNBrushClass)
  ['{D7F20627-0C7C-58D3-997D-61EA3F7FF064}']
  { constructors } 

    {class} function init(color: DNColor): DNSolidBrush;

  end;

  [DNTypeName('System.Drawing.SolidBrush')]
  DNSolidBrush = interface(DNBrush)
  ['{F91083B8-1E45-3C38-9B63-5362D63049B4}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
  end;

  TDNSolidBrush = class(TDNGenericImport<DNSolidBrushClass, DNSolidBrush>) end;

  //-------------namespace: System.Drawing----------------
  DNTextureBrushClass = interface(DNBrushClass)
  ['{FFC9F2B2-99D2-5913-AC6F-7D4D3E0F07B3}']
  { constructors } 

    {class} function init(bitmap: DNImage): DNTextureBrush; overload;
    {class} function init(image: DNImage; wrapMode: DNWrapMode): DNTextureBrush; overload;
    {class} function init(image: DNImage; wrapMode: DNWrapMode; dstRect: DNRectangleF): DNTextureBrush; overload;
    {class} function init(image: DNImage; wrapMode: DNWrapMode; dstRect: DNRectangle): DNTextureBrush; overload;
    {class} function init(image: DNImage; dstRect: DNRectangleF): DNTextureBrush; overload;
    {class} function init(image: DNImage; dstRect: DNRectangleF; imageAttr: DNImageAttributes): DNTextureBrush; overload;
    {class} function init(image: DNImage; dstRect: DNRectangle): DNTextureBrush; overload;
    {class} function init(image: DNImage; dstRect: DNRectangle; imageAttr: DNImageAttributes): DNTextureBrush; overload;

  end;

  [DNTypeName('System.Drawing.TextureBrush')]
  DNTextureBrush = interface(DNBrush)
  ['{794DFFD4-9CAD-3DB9-A95A-EAD7CB72AD6C}']
  { getters & setters } 

    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_WrapMode: DNWrapMode;
    procedure set_WrapMode(value: DNWrapMode);
    function get_Image: DNImage;

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    procedure ResetTransform;
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    procedure RotateTransform(angle: Single); overload;
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Transform: DNMatrix read get_Transform write set_Transform;
    property WrapMode: DNWrapMode read get_WrapMode write set_WrapMode;
    property Image: DNImage read get_Image;
  end;

  TDNTextureBrush = class(TDNGenericImport<DNTextureBrushClass, DNTextureBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNCustomLineCapClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{09507B6C-0C81-5A60-969B-023BAE664F05}']
  { constructors } 

    {class} function init(fillPath: DNGraphicsPath; strokePath: DNGraphicsPath): DNCustomLineCap; overload;
    {class} function init(fillPath: DNGraphicsPath; strokePath: DNGraphicsPath; baseCap: DNLineCap): DNCustomLineCap; overload;
    {class} function init(fillPath: DNGraphicsPath; strokePath: DNGraphicsPath; baseCap: DNLineCap; baseInset: Single): DNCustomLineCap; overload;

  end;

  [DNTypeName('System.Drawing.Drawing2D.CustomLineCap')]
  DNCustomLineCap = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{6450327A-3128-3AF9-B7DD-84092A06D609}']
  { getters & setters } 

    function get_StrokeJoin: DNLineJoin;
    procedure set_StrokeJoin(value: DNLineJoin);
    function get_BaseCap: DNLineCap;
    procedure set_BaseCap(value: DNLineCap);
    function get_BaseInset: Single;
    procedure set_BaseInset(value: Single);
    function get_WidthScale: Single;
    procedure set_WidthScale(value: Single);

  { methods } 

    procedure Dispose;
    function Clone: DDN.mscorlib.DNObject;
    procedure SetStrokeCaps(startCap: DNLineCap; endCap: DNLineCap);
    procedure GetStrokeCaps(out startCap: DNLineCap; out endCap: DNLineCap);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StrokeJoin: DNLineJoin read get_StrokeJoin write set_StrokeJoin;
    property BaseCap: DNLineCap read get_BaseCap write set_BaseCap;
    property BaseInset: Single read get_BaseInset write set_BaseInset;
    property WidthScale: Single read get_WidthScale write set_WidthScale;
  end;

  TDNCustomLineCap = class(TDNGenericImport<DNCustomLineCapClass, DNCustomLineCap>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNAdjustableArrowCapClass = interface(DNCustomLineCapClass)
  ['{8CFD6120-22B3-5398-82D0-784AAF7B9677}']
  { constructors } 

    {class} function init(width: Single; height: Single): DNAdjustableArrowCap; overload;
    {class} function init(width: Single; height: Single; isFilled: Boolean): DNAdjustableArrowCap; overload;

  end;

  [DNTypeName('System.Drawing.Drawing2D.AdjustableArrowCap')]
  DNAdjustableArrowCap = interface(DNCustomLineCap)
  ['{072BBE91-D5FA-39A0-8FA7-04AEF7702C58}']
  { getters & setters } 

    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_MiddleInset: Single;
    procedure set_MiddleInset(value: Single);
    function get_Filled: Boolean;
    procedure set_Filled(value: Boolean);
    function get_StrokeJoin: DNLineJoin;
    procedure set_StrokeJoin(value: DNLineJoin);
    function get_BaseCap: DNLineCap;
    procedure set_BaseCap(value: DNLineCap);
    function get_BaseInset: Single;
    procedure set_BaseInset(value: Single);
    function get_WidthScale: Single;
    procedure set_WidthScale(value: Single);

  { methods } 

    procedure Dispose;
    function Clone: DDN.mscorlib.DNObject;
    procedure SetStrokeCaps(startCap: DNLineCap; endCap: DNLineCap);
    procedure GetStrokeCaps(out startCap: DNLineCap; out endCap: DNLineCap);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Height: Single read get_Height write set_Height;
    property Width: Single read get_Width write set_Width;
    property MiddleInset: Single read get_MiddleInset write set_MiddleInset;
    property Filled: Boolean read get_Filled write set_Filled;
    property StrokeJoin: DNLineJoin read get_StrokeJoin write set_StrokeJoin;
    property BaseCap: DNLineCap read get_BaseCap write set_BaseCap;
    property BaseInset: Single read get_BaseInset write set_BaseInset;
    property WidthScale: Single read get_WidthScale write set_WidthScale;
  end;

  TDNAdjustableArrowCap = class(TDNGenericImport<DNAdjustableArrowCapClass, DNAdjustableArrowCap>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsContainerClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{98368B9B-4EED-5BC8-971A-17292A7F5E67}']
  end;

  [DNTypeName('System.Drawing.Drawing2D.GraphicsContainer')]
  DNGraphicsContainer = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{59F0647C-2277-3516-9AF1-9B27E963FAC5}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGraphicsContainer = class(TDNGenericImport<DNGraphicsContainerClass, DNGraphicsContainer>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsPathClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{14B290CE-ECCD-59E2-A69C-E477F26C5DA5}']
  { constructors } 

    {class} function init: DNGraphicsPath; overload;
    {class} function init(fillMode: DNFillMode): DNGraphicsPath; overload;
    {class} function init(pts: TArray<DNPointF>; types: TArray<Byte>): DNGraphicsPath; overload;
    {class} function init(pts: TArray<DNPointF>; types: TArray<Byte>; fillMode: DNFillMode): DNGraphicsPath; overload;
    {class} function init(pts: TArray<DNPoint>; types: TArray<Byte>): DNGraphicsPath; overload;
    {class} function init(pts: TArray<DNPoint>; types: TArray<Byte>; fillMode: DNFillMode): DNGraphicsPath; overload;

  end;

  [DNTypeName('System.Drawing.Drawing2D.GraphicsPath')]
  DNGraphicsPath = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{5C410D7F-42A1-329D-83AE-05AA8D2623B4}']
  { getters & setters } 

    function get_FillMode: DNFillMode;
    procedure set_FillMode(value: DNFillMode);
    function get_PathData: DNPathData;
    function get_PointCount: Int32;
    function get_PathTypes: TArray<Byte>;
    function get_PathPoints: TArray<DNPointF>;

  { methods } 

    procedure AddRectangle(rect: DNRectangle); overload;
    function Clone: DDN.mscorlib.DNObject;
    procedure Dispose;
    procedure Reset;
    procedure StartFigure;
    procedure CloseFigure;
    procedure CloseAllFigures;
    procedure SetMarkers;
    procedure ClearMarkers;
    procedure Reverse;
    function GetLastPoint: DNPointF;
    function IsVisible(x: Single; y: Single): Boolean; overload;
    function IsVisible(point: DNPointF): Boolean; overload;
    function IsVisible(x: Single; y: Single; graphics: DNGraphics): Boolean; overload;
    function IsVisible(pt: DNPointF; graphics: DNGraphics): Boolean; overload;
    function IsVisible(x: Int32; y: Int32): Boolean; overload;
    function IsVisible(point: DNPoint): Boolean; overload;
    function IsVisible(x: Int32; y: Int32; graphics: DNGraphics): Boolean; overload;
    function IsVisible(pt: DNPoint; graphics: DNGraphics): Boolean; overload;
    function IsOutlineVisible(x: Single; y: Single; pen: DNPen): Boolean; overload;
    function IsOutlineVisible(point: DNPointF; pen: DNPen): Boolean; overload;
    function IsOutlineVisible(x: Single; y: Single; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    function IsOutlineVisible(pt: DNPointF; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    function IsOutlineVisible(x: Int32; y: Int32; pen: DNPen): Boolean; overload;
    function IsOutlineVisible(point: DNPoint; pen: DNPen): Boolean; overload;
    function IsOutlineVisible(x: Int32; y: Int32; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    function IsOutlineVisible(pt: DNPoint; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    procedure AddLine(pt1: DNPointF; pt2: DNPointF); overload;
    procedure AddLine(x1: Single; y1: Single; x2: Single; y2: Single); overload;
    procedure AddLines(points: TArray<DNPointF>); overload;
    procedure AddLine(pt1: DNPoint; pt2: DNPoint); overload;
    procedure AddLine(x1: Int32; y1: Int32; x2: Int32; y2: Int32); overload;
    procedure AddLines(points: TArray<DNPoint>); overload;
    procedure AddArc(rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    procedure AddArc(x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    procedure AddArc(rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    procedure AddArc(x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Single; sweepAngle: Single); overload;
    procedure AddBezier(pt1: DNPointF; pt2: DNPointF; pt3: DNPointF; pt4: DNPointF); overload;
    procedure AddBezier(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; x4: Single; y4: Single); overload;
    procedure AddBeziers(points: TArray<DNPointF>); overload;
    procedure AddBezier(pt1: DNPoint; pt2: DNPoint; pt3: DNPoint; pt4: DNPoint); overload;
    procedure AddBezier(x1: Int32; y1: Int32; x2: Int32; y2: Int32; x3: Int32; y3: Int32; x4: Int32; y4: Int32); overload;
    procedure AddBeziers(points: TArray<DNPoint>); overload;
    procedure AddCurve(points: TArray<DNPointF>); overload;
    procedure AddCurve(points: TArray<DNPointF>; tension: Single); overload;
    procedure AddCurve(points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    procedure AddCurve(points: TArray<DNPoint>); overload;
    procedure AddCurve(points: TArray<DNPoint>; tension: Single); overload;
    procedure AddCurve(points: TArray<DNPoint>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    procedure AddClosedCurve(points: TArray<DNPointF>); overload;
    procedure AddClosedCurve(points: TArray<DNPointF>; tension: Single); overload;
    procedure AddClosedCurve(points: TArray<DNPoint>); overload;
    procedure AddClosedCurve(points: TArray<DNPoint>; tension: Single); overload;
    procedure AddRectangle(rect: DNRectangleF); overload;
    procedure AddRectangles(rects: TArray<DNRectangleF>); overload;
    procedure AddRectangles(rects: TArray<DNRectangle>); overload;
    procedure AddEllipse(rect: DNRectangleF); overload;
    procedure AddEllipse(x: Single; y: Single; width: Single; height: Single); overload;
    procedure AddEllipse(rect: DNRectangle); overload;
    procedure AddEllipse(x: Int32; y: Int32; width: Int32; height: Int32); overload;
    procedure AddPie(rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    procedure AddPie(x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    procedure AddPie(x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Single; sweepAngle: Single); overload;
    procedure AddPolygon(points: TArray<DNPointF>); overload;
    procedure AddPolygon(points: TArray<DNPoint>); overload;
    procedure AddPath(addingPath: DNGraphicsPath; connect: Boolean);
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; origin: DNPointF; format: DNStringFormat); overload;
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; origin: DNPoint; format: DNStringFormat); overload;
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; layoutRect: DNRectangleF; format: DNStringFormat); overload;
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; layoutRect: DNRectangle; format: DNStringFormat); overload;
    procedure Transform(matrix: DNMatrix);
    function GetBounds: DNRectangleF; overload;
    function GetBounds(matrix: DNMatrix): DNRectangleF; overload;
    function GetBounds(matrix: DNMatrix; pen: DNPen): DNRectangleF; overload;
    procedure Flatten; overload;
    procedure Flatten(matrix: DNMatrix); overload;
    procedure Flatten(matrix: DNMatrix; flatness: Single); overload;
    procedure Widen(pen: DNPen); overload;
    procedure Widen(pen: DNPen; matrix: DNMatrix); overload;
    procedure Widen(pen: DNPen; matrix: DNMatrix; flatness: Single); overload;
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF); overload;
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix); overload;
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix; warpMode: DNWarpMode); overload;
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix; warpMode: DNWarpMode; flatness: Single); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FillMode: DNFillMode read get_FillMode write set_FillMode;
    property PathData: DNPathData read get_PathData;
    property PointCount: Int32 read get_PointCount;
    property PathTypes: TArray<Byte> read get_PathTypes;
    property PathPoints: TArray<DNPointF> read get_PathPoints;
  end;

  TDNGraphicsPath = class(TDNGenericImport<DNGraphicsPathClass, DNGraphicsPath>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsPathIteratorClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{66A5F06A-337C-5F68-A324-5E71717B8321}']
  { constructors } 

    {class} function init(path: DNGraphicsPath): DNGraphicsPathIterator;

  end;

  [DNTypeName('System.Drawing.Drawing2D.GraphicsPathIterator')]
  DNGraphicsPathIterator = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{55968918-F8EA-33EB-97AA-66016B21FB1A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SubpathCount: Int32;

  { methods } 

    procedure Dispose;
    function NextSubpath(out startIndex: Int32; out endIndex: Int32; out isClosed: Boolean): Int32; overload;
    function NextSubpath(path: DNGraphicsPath; out isClosed: Boolean): Int32; overload;
    function NextPathType(out pathType: Byte; out startIndex: Int32; out endIndex: Int32): Int32;
    function NextMarker(out startIndex: Int32; out endIndex: Int32): Int32; overload;
    function NextMarker(path: DNGraphicsPath): Int32; overload;
    function HasCurve: Boolean;
    procedure Rewind;
    function Enumerate(out points: TArray<DNPointF>; out types: TArray<Byte>): Int32;
    function CopyData(out points: TArray<DNPointF>; out types: TArray<Byte>; startIndex: Int32; endIndex: Int32): Int32;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SubpathCount: Int32 read get_SubpathCount;
  end;

  TDNGraphicsPathIterator = class(TDNGenericImport<DNGraphicsPathIteratorClass, DNGraphicsPathIterator>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsStateClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{E333BB85-84A5-5579-B326-3FCA6BB060EC}']
  end;

  [DNTypeName('System.Drawing.Drawing2D.GraphicsState')]
  DNGraphicsState = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8A98BC4E-E202-3891-AF68-E1F545AC82CE}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGraphicsState = class(TDNGenericImport<DNGraphicsStateClass, DNGraphicsState>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNMatrixClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{F48E5EE0-BFA5-5ED3-A983-09F1FEE84FB5}']
  { constructors } 

    {class} function init: DNMatrix; overload;
    {class} function init(m11: Single; m12: Single; m21: Single; m22: Single; dx: Single; dy: Single): DNMatrix; overload;
    {class} function init(rect: DNRectangleF; plgpts: TArray<DNPointF>): DNMatrix; overload;
    {class} function init(rect: DNRectangle; plgpts: TArray<DNPoint>): DNMatrix; overload;

  end;

  [DNTypeName('System.Drawing.Drawing2D.Matrix')]
  DNMatrix = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8DE19850-6042-39C0-AA35-BE31D935886B}']
  { getters & setters } 

    function get_Elements: TArray<Single>;
    function get_OffsetX: Single;
    function get_OffsetY: Single;
    function get_IsInvertible: Boolean;
    function get_IsIdentity: Boolean;

  { methods } 

    procedure Reset;
    procedure TransformPoints(pts: TArray<DNPointF>); overload;
    procedure TransformPoints(pts: TArray<DNPoint>); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNMatrix;
    procedure Multiply(matrix: DNMatrix); overload;
    procedure Multiply(matrix: DNMatrix; order: DNMatrixOrder); overload;
    procedure Translate(offsetX: Single; offsetY: Single); overload;
    procedure Translate(offsetX: Single; offsetY: Single; order: DNMatrixOrder); overload;
    procedure Scale(scaleX: Single; scaleY: Single); overload;
    procedure Scale(scaleX: Single; scaleY: Single; order: DNMatrixOrder); overload;
    procedure Rotate(angle: Single); overload;
    procedure Rotate(angle: Single; order: DNMatrixOrder); overload;
    procedure RotateAt(angle: Single; point: DNPointF); overload;
    procedure RotateAt(angle: Single; point: DNPointF; order: DNMatrixOrder); overload;
    procedure Shear(shearX: Single; shearY: Single); overload;
    procedure Shear(shearX: Single; shearY: Single; order: DNMatrixOrder); overload;
    procedure Invert;
    procedure TransformVectors(pts: TArray<DNPointF>); overload;
    procedure VectorTransformPoints(pts: TArray<DNPoint>);
    procedure TransformVectors(pts: TArray<DNPoint>); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Elements: TArray<Single> read get_Elements;
    property OffsetX: Single read get_OffsetX;
    property OffsetY: Single read get_OffsetY;
    property IsInvertible: Boolean read get_IsInvertible;
    property IsIdentity: Boolean read get_IsIdentity;
  end;

  TDNMatrix = class(TDNGenericImport<DNMatrixClass, DNMatrix>) end;

  //-------------namespace: System.Drawing----------------
  DNFontClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{F89AC109-B6DF-5073-9E9F-EBB7614B5634}']
  { constructors } 

    {class} function init(prototype: DNFont; newStyle: DNFontStyle): DNFont; overload;
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit): DNFont; overload;
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte): DNFont; overload;
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte; gdiVerticalFont: Boolean): DNFont; overload;
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte): DNFont; overload;
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte; gdiVerticalFont: Boolean): DNFont; overload;
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle): DNFont; overload;
    {class} function init(family: DNFontFamily; emSize: Single; &unit: DNGraphicsUnit): DNFont; overload;
    {class} function init(family: DNFontFamily; emSize: Single): DNFont; overload;
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit): DNFont; overload;
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle): DNFont; overload;
    {class} function init(familyName: string; emSize: Single; &unit: DNGraphicsUnit): DNFont; overload;
    {class} function init(familyName: string; emSize: Single): DNFont; overload;

  { static methods } 

    {class} function FromHfont(hfont: IntPtr): DNFont;
    {class} function FromLogFont(lf: DDN.mscorlib.DNObject; hdc: IntPtr): DNFont; overload;
    {class} function FromLogFont(lf: DDN.mscorlib.DNObject): DNFont; overload;
    {class} function FromHdc(hdc: IntPtr): DNFont;

  end;

  [DNTypeName('System.Drawing.Font')]
  DNFont = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{091B628B-3473-38BF-9A98-4F9DB4FB61F8}']
  { getters & setters } 

    function get_FontFamily: DNFontFamily;
    function get_Bold: Boolean;
    function get_GdiCharSet: Byte;
    function get_GdiVerticalFont: Boolean;
    function get_Italic: Boolean;
    function get_Name: string;
    function get_OriginalFontName: string;
    function get_Strikeout: Boolean;
    function get_Underline: Boolean;
    function get_Style: DNFontStyle;
    function get_Size: Single;
    function get_SizeInPoints: Single;
    function get_Unit: DNGraphicsUnit;
    function get_Height: Int32;
    function get_IsSystemFont: Boolean;
    function get_SystemFontName: string;

  { methods } 

    procedure ToLogFont(logFont: DDN.mscorlib.DNObject); overload;
    procedure ToLogFont(logFont: DDN.mscorlib.DNObject; graphics: DNGraphics); overload;
    function ToHfont: IntPtr;
    function Clone: DDN.mscorlib.DNObject;
    procedure Dispose;
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHeight(graphics: DNGraphics): Single; overload;
    function GetHeight: Single; overload;
    function GetHeight(dpi: Single): Single; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FontFamily: DNFontFamily read get_FontFamily;
    property Bold: Boolean read get_Bold;
    property GdiCharSet: Byte read get_GdiCharSet;
    property GdiVerticalFont: Boolean read get_GdiVerticalFont;
    property Italic: Boolean read get_Italic;
    property Name: string read get_Name;
    property OriginalFontName: string read get_OriginalFontName;
    property Strikeout: Boolean read get_Strikeout;
    property Underline: Boolean read get_Underline;
    property Style: DNFontStyle read get_Style;
    property Size: Single read get_Size;
    property SizeInPoints: Single read get_SizeInPoints;
    property &Unit: DNGraphicsUnit read get_Unit;
    property Height: Int32 read get_Height;
    property IsSystemFont: Boolean read get_IsSystemFont;
    property SystemFontName: string read get_SystemFontName;
  end;

  TDNFont = class(TDNGenericImport<DNFontClass, DNFont>) end;

  //-------------namespace: System.Drawing----------------
  DNFontFamilyClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{8ACB9960-8FA2-5EB0-98A5-806C8FF6BA78}']
  { static getter & setter } 

    {class} function get_Families: TArray<DNFontFamily>;
    {class} function get_GenericSansSerif: DNFontFamily;
    {class} function get_GenericSerif: DNFontFamily;
    {class} function get_GenericMonospace: DNFontFamily;

  { constructors } 

    {class} function init(name: string): DNFontFamily; overload;
    {class} function init(name: string; fontCollection: DNFontCollection): DNFontFamily; overload;
    {class} function init(genericFamily: DNGenericFontFamilies): DNFontFamily; overload;

  { static methods } 

    {class} function GetFamilies(graphics: DNGraphics): TArray<DNFontFamily>;

  { static propertys } 

    {class} property Families: TArray<DNFontFamily> read get_Families;
    {class} property GenericSansSerif: DNFontFamily read get_GenericSansSerif;
    {class} property GenericSerif: DNFontFamily read get_GenericSerif;
    {class} property GenericMonospace: DNFontFamily read get_GenericMonospace;
  end;

  [DNTypeName('System.Drawing.FontFamily')]
  DNFontFamily = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{FE31F082-2955-34AC-8BA8-9BC7BF319D78}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function IsStyleAvailable(style: DNFontStyle): Boolean;
    function GetEmHeight(style: DNFontStyle): Int32;
    function GetLineSpacing(style: DNFontStyle): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure Dispose;
    function ToString: string;
    function GetName(language: Int32): string;
    function GetCellAscent(style: DNFontStyle): Int32;
    function GetCellDescent(style: DNFontStyle): Int32;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
  end;

  TDNFontFamily = class(TDNGenericImport<DNFontFamilyClass, DNFontFamily>) end;

  //-------------namespace: System.Drawing----------------
  DNGraphicsClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{8B64F2D6-2CA6-5EB8-AAD8-B244F4CE7A55}']
  { static methods } 

    {class} function FromHdc(hdc: IntPtr): DNGraphics; overload;
    {class} function FromHdcInternal(hdc: IntPtr): DNGraphics;
    {class} function FromHwndInternal(hwnd: IntPtr): DNGraphics;
    {class} function FromImage(image: DNImage): DNGraphics;
    {class} function GetHalftonePalette: IntPtr;
    {class} function FromHdc(hdc: IntPtr; hdevice: IntPtr): DNGraphics; overload;
    {class} function FromHwnd(hwnd: IntPtr): DNGraphics;

  end;

  [DNTypeName('System.Drawing.Graphics')]
  DNGraphics = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{3EAFE9D3-C1B1-3755-AB28-DA7CAFBF37FC}']
  { getters & setters } 

    function get_CompositingMode: DNCompositingMode;
    procedure set_CompositingMode(value: DNCompositingMode);
    function get_RenderingOrigin: DNPoint;
    procedure set_RenderingOrigin(value: DNPoint);
    function get_CompositingQuality: DNCompositingQuality;
    procedure set_CompositingQuality(value: DNCompositingQuality);
    function get_TextRenderingHint: DNTextRenderingHint;
    procedure set_TextRenderingHint(value: DNTextRenderingHint);
    function get_TextContrast: Int32;
    procedure set_TextContrast(value: Int32);
    function get_SmoothingMode: DNSmoothingMode;
    procedure set_SmoothingMode(value: DNSmoothingMode);
    function get_PixelOffsetMode: DNPixelOffsetMode;
    procedure set_PixelOffsetMode(value: DNPixelOffsetMode);
    function get_InterpolationMode: DNInterpolationMode;
    procedure set_InterpolationMode(value: DNInterpolationMode);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_PageUnit: DNGraphicsUnit;
    procedure set_PageUnit(value: DNGraphicsUnit);
    function get_PageScale: Single;
    procedure set_PageScale(value: Single);
    function get_DpiX: Single;
    function get_DpiY: Single;
    function get_Clip: DNRegion;
    procedure set_Clip(value: DNRegion);
    function get_ClipBounds: DNRectangleF;
    function get_IsClipEmpty: Boolean;
    function get_VisibleClipBounds: DNRectangleF;
    function get_IsVisibleClipEmpty: Boolean;

  { methods } 

    procedure ReleaseHdc(hdc: IntPtr); overload;
    procedure ReleaseHdcInternal(hdc: IntPtr);
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    function GetNearestColor(color: DNColor): DNColor;
    procedure DrawLine(pen: DNPen; x1: Int32; y1: Int32; x2: Int32; y2: Int32); overload;
    procedure DrawRectangle(pen: DNPen; rect: DNRectangle); overload;
    procedure DrawRectangle(pen: DNPen; x: Single; y: Single; width: Single; height: Single); overload;
    procedure DrawRectangle(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    procedure DrawEllipse(pen: DNPen; rect: DNRectangleF); overload;
    procedure Clear(color: DNColor);
    procedure FillRectangle(brush: DNBrush; x: Single; y: Single; width: Single; height: Single); overload;
    procedure FillRectangle(brush: DNBrush; rect: DNRectangle); overload;
    procedure FillRectangle(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    procedure FillRectangles(brush: DNBrush; rects: TArray<DNRectangle>); overload;
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPoint>); overload;
    procedure FillEllipse(brush: DNBrush; x: Single; y: Single; width: Single; height: Single); overload;
    procedure FillRegion(brush: DNBrush; region: DNRegion);
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; x: Single; y: Single); overload;
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; layoutRectangle: DNRectangleF); overload;
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; layoutRectangle: DNRectangleF; format: DNStringFormat); overload;
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF; stringFormat: DNStringFormat): DNSizeF; overload;
    function MeasureString(text: string; font: DNFont): DNSizeF; overload;
    function MeasureString(text: string; font: DNFont; width: Int32; format: DNStringFormat): DNSizeF; overload;
    procedure DrawImage(image: DNImage; x: Int32; y: Int32); overload;
    procedure DrawImage(image: DNImage; rect: DNRectangle); overload;
    procedure DrawImage(image: DNImage; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: IntPtr); overload;
    procedure SetClip(rect: DNRectangle); overload;
    procedure SetClip(region: DNRegion; combineMode: DNCombineMode); overload;
    procedure ExcludeClip(region: DNRegion); overload;
    procedure TranslateClip(dx: Int32; dy: Int32); overload;
    function GetContextInfo: DDN.mscorlib.DNObject;
    function IsVisible(rect: DNRectangle): Boolean; overload;
    function Save: DNGraphicsState;
    procedure Restore(gstate: DNGraphicsState);
    function BeginContainer: DNGraphicsContainer; overload;
    procedure EndContainer(container: DNGraphicsContainer);
    function GetHdc: IntPtr;
    procedure ReleaseHdc; overload;
    procedure Dispose;
    procedure Flush; overload;
    procedure Flush(intention: DNFlushIntention); overload;
    procedure CopyFromScreen(upperLeftSource: DNPoint; upperLeftDestination: DNPoint; blockRegionSize: DNSize); overload;
    procedure CopyFromScreen(sourceX: Int32; sourceY: Int32; destinationX: Int32; destinationY: Int32; blockRegionSize: DNSize); overload;
    procedure CopyFromScreen(upperLeftSource: DNPoint; upperLeftDestination: DNPoint; blockRegionSize: DNSize; copyPixelOperation: DNCopyPixelOperation); overload;
    procedure CopyFromScreen(sourceX: Int32; sourceY: Int32; destinationX: Int32; destinationY: Int32; blockRegionSize: DNSize; copyPixelOperation: DNCopyPixelOperation); overload;
    procedure ResetTransform;
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    procedure RotateTransform(angle: Single); overload;
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    procedure TransformPoints(destSpace: DNCoordinateSpace; srcSpace: DNCoordinateSpace; pts: TArray<DNPointF>); overload;
    procedure TransformPoints(destSpace: DNCoordinateSpace; srcSpace: DNCoordinateSpace; pts: TArray<DNPoint>); overload;
    procedure DrawLine(pen: DNPen; x1: Single; y1: Single; x2: Single; y2: Single); overload;
    procedure DrawLine(pen: DNPen; pt1: DNPointF; pt2: DNPointF); overload;
    procedure DrawLines(pen: DNPen; points: TArray<DNPointF>); overload;
    procedure DrawLine(pen: DNPen; pt1: DNPoint; pt2: DNPoint); overload;
    procedure DrawLines(pen: DNPen; points: TArray<DNPoint>); overload;
    procedure DrawArc(pen: DNPen; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    procedure DrawArc(pen: DNPen; rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    procedure DrawArc(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    procedure DrawArc(pen: DNPen; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    procedure DrawBezier(pen: DNPen; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; x4: Single; y4: Single); overload;
    procedure DrawBezier(pen: DNPen; pt1: DNPointF; pt2: DNPointF; pt3: DNPointF; pt4: DNPointF); overload;
    procedure DrawBeziers(pen: DNPen; points: TArray<DNPointF>); overload;
    procedure DrawBezier(pen: DNPen; pt1: DNPoint; pt2: DNPoint; pt3: DNPoint; pt4: DNPoint); overload;
    procedure DrawBeziers(pen: DNPen; points: TArray<DNPoint>); overload;
    procedure DrawRectangles(pen: DNPen; rects: TArray<DNRectangleF>); overload;
    procedure DrawRectangles(pen: DNPen; rects: TArray<DNRectangle>); overload;
    procedure DrawEllipse(pen: DNPen; x: Single; y: Single; width: Single; height: Single); overload;
    procedure DrawEllipse(pen: DNPen; rect: DNRectangle); overload;
    procedure DrawEllipse(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    procedure DrawPie(pen: DNPen; rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    procedure DrawPie(pen: DNPen; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    procedure DrawPie(pen: DNPen; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    procedure DrawPie(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    procedure DrawPolygon(pen: DNPen; points: TArray<DNPointF>); overload;
    procedure DrawPolygon(pen: DNPen; points: TArray<DNPoint>); overload;
    procedure DrawPath(pen: DNPen; path: DNGraphicsPath);
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>); overload;
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; tension: Single); overload;
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32); overload;
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>); overload;
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>; tension: Single); overload;
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPointF>); overload;
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPointF>; tension: Single; fillmode: DNFillMode); overload;
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPoint>); overload;
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPoint>; tension: Single; fillmode: DNFillMode); overload;
    procedure FillRectangle(brush: DNBrush; rect: DNRectangleF); overload;
    procedure FillRectangles(brush: DNBrush; rects: TArray<DNRectangleF>); overload;
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPointF>); overload;
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPointF>; fillMode: DNFillMode); overload;
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPoint>; fillMode: DNFillMode); overload;
    procedure FillEllipse(brush: DNBrush; rect: DNRectangleF); overload;
    procedure FillEllipse(brush: DNBrush; rect: DNRectangle); overload;
    procedure FillEllipse(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    procedure FillPie(brush: DNBrush; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    procedure FillPie(brush: DNBrush; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    procedure FillPie(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    procedure FillPath(brush: DNBrush; path: DNGraphicsPath);
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>); overload;
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>; fillmode: DNFillMode); overload;
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>; fillmode: DNFillMode; tension: Single); overload;
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>); overload;
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>; fillmode: DNFillMode); overload;
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>; fillmode: DNFillMode; tension: Single); overload;
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; point: DNPointF); overload;
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; x: Single; y: Single; format: DNStringFormat); overload;
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; point: DNPointF; format: DNStringFormat); overload;
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF; stringFormat: DNStringFormat; out charactersFitted: Int32; out linesFilled: Int32): DNSizeF; overload;
    function MeasureString(text: string; font: DNFont; origin: DNPointF; stringFormat: DNStringFormat): DNSizeF; overload;
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF): DNSizeF; overload;
    function MeasureString(text: string; font: DNFont; width: Int32): DNSizeF; overload;
    function MeasureCharacterRanges(text: string; font: DNFont; layoutRect: DNRectangleF; stringFormat: DNStringFormat): TArray<DNRegion>;
    procedure DrawIcon(icon: DNIcon; x: Int32; y: Int32); overload;
    procedure DrawIcon(icon: DNIcon; targetRect: DNRectangle); overload;
    procedure DrawIconUnstretched(icon: DNIcon; targetRect: DNRectangle);
    procedure DrawImage(image: DNImage; point: DNPointF); overload;
    procedure DrawImage(image: DNImage; x: Single; y: Single); overload;
    procedure DrawImage(image: DNImage; rect: DNRectangleF); overload;
    procedure DrawImage(image: DNImage; x: Single; y: Single; width: Single; height: Single); overload;
    procedure DrawImage(image: DNImage; point: DNPoint); overload;
    procedure DrawImageUnscaled(image: DNImage; point: DNPoint); overload;
    procedure DrawImageUnscaled(image: DNImage; x: Int32; y: Int32); overload;
    procedure DrawImageUnscaled(image: DNImage; rect: DNRectangle); overload;
    procedure DrawImageUnscaled(image: DNImage; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    procedure DrawImageUnscaledAndClipped(image: DNImage; rect: DNRectangle);
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>); overload;
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>); overload;
    procedure DrawImage(image: DNImage; x: Single; y: Single; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    procedure DrawImage(image: DNImage; x: Int32; y: Int32; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    procedure DrawImage(image: DNImage; destRect: DNRectangleF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: Int32); overload;
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: Int32); overload;
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit); overload;
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes); overload;
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: IntPtr); overload;
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit); overload;
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; srcRect: DNRectangleF; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; srcRect: DNRectangle; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; srcRect: DNRectangleF; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; srcRect: DNRectangle; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; srcRect: DNRectangle; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    procedure SetClip(g: DNGraphics); overload;
    procedure SetClip(g: DNGraphics; combineMode: DNCombineMode); overload;
    procedure SetClip(rect: DNRectangle; combineMode: DNCombineMode); overload;
    procedure SetClip(rect: DNRectangleF); overload;
    procedure SetClip(rect: DNRectangleF; combineMode: DNCombineMode); overload;
    procedure SetClip(path: DNGraphicsPath); overload;
    procedure SetClip(path: DNGraphicsPath; combineMode: DNCombineMode); overload;
    procedure IntersectClip(rect: DNRectangle); overload;
    procedure IntersectClip(rect: DNRectangleF); overload;
    procedure IntersectClip(region: DNRegion); overload;
    procedure ExcludeClip(rect: DNRectangle); overload;
    procedure ResetClip;
    procedure TranslateClip(dx: Single; dy: Single); overload;
    function IsVisible(x: Int32; y: Int32): Boolean; overload;
    function IsVisible(point: DNPoint): Boolean; overload;
    function IsVisible(x: Single; y: Single): Boolean; overload;
    function IsVisible(point: DNPointF): Boolean; overload;
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32): Boolean; overload;
    function IsVisible(x: Single; y: Single; width: Single; height: Single): Boolean; overload;
    function IsVisible(rect: DNRectangleF): Boolean; overload;
    function BeginContainer(dstrect: DNRectangleF; srcrect: DNRectangleF; &unit: DNGraphicsUnit): DNGraphicsContainer; overload;
    function BeginContainer(dstrect: DNRectangle; srcrect: DNRectangle; &unit: DNGraphicsUnit): DNGraphicsContainer; overload;
    procedure AddMetafileComment(data: TArray<Byte>);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CompositingMode: DNCompositingMode read get_CompositingMode write set_CompositingMode;
    property RenderingOrigin: DNPoint read get_RenderingOrigin write set_RenderingOrigin;
    property CompositingQuality: DNCompositingQuality read get_CompositingQuality write set_CompositingQuality;
    property TextRenderingHint: DNTextRenderingHint read get_TextRenderingHint write set_TextRenderingHint;
    property TextContrast: Int32 read get_TextContrast write set_TextContrast;
    property SmoothingMode: DNSmoothingMode read get_SmoothingMode write set_SmoothingMode;
    property PixelOffsetMode: DNPixelOffsetMode read get_PixelOffsetMode write set_PixelOffsetMode;
    property InterpolationMode: DNInterpolationMode read get_InterpolationMode write set_InterpolationMode;
    property Transform: DNMatrix read get_Transform write set_Transform;
    property PageUnit: DNGraphicsUnit read get_PageUnit write set_PageUnit;
    property PageScale: Single read get_PageScale write set_PageScale;
    property DpiX: Single read get_DpiX;
    property DpiY: Single read get_DpiY;
    property Clip: DNRegion read get_Clip write set_Clip;
    property ClipBounds: DNRectangleF read get_ClipBounds;
    property IsClipEmpty: Boolean read get_IsClipEmpty;
    property VisibleClipBounds: DNRectangleF read get_VisibleClipBounds;
    property IsVisibleClipEmpty: Boolean read get_IsVisibleClipEmpty;
  end;

  TDNGraphics = class(TDNGenericImport<DNGraphicsClass, DNGraphics>) end;

  //-------------namespace: System.Drawing----------------
  DNIconClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{3D203B12-B3FE-5D34-A578-F82BA634BF10}']
  { constructors } 

    {class} function init(fileName: string): DNIcon; overload;
    {class} function init(fileName: string; size: DNSize): DNIcon; overload;
    {class} function init(fileName: string; width: Int32; height: Int32): DNIcon; overload;
    {class} function init(original: DNIcon; size: DNSize): DNIcon; overload;
    {class} function init(original: DNIcon; width: Int32; height: Int32): DNIcon; overload;
    {class} function init(&type: DDN.mscorlib.DNType; resource: string): DNIcon; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNIcon; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; size: DNSize): DNIcon; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; width: Int32; height: Int32): DNIcon; overload;

  { static methods } 

    {class} function ExtractAssociatedIcon(filePath: string): DNIcon;
    {class} function FromHandle(handle: IntPtr): DNIcon;

  end;

  [DNTypeName('System.Drawing.Icon')]
  DNIcon = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{F874226E-D299-3CEF-A532-1EA4153B91FC}']
  { getters & setters } 

    function get_Handle: IntPtr;
    function get_Height: Int32;
    function get_Size: DNSize;
    function get_Width: Int32;

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    procedure Dispose;
    procedure Save(outputStream: DDN.mscorlib.DNStream);
    function ToBitmap: DNBitmap;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Handle: IntPtr read get_Handle;
    property Height: Int32 read get_Height;
    property Size: DNSize read get_Size;
    property Width: Int32 read get_Width;
  end;

  TDNIcon = class(TDNGenericImport<DNIconClass, DNIcon>) end;

  //-------------namespace: System.Drawing----------------
  DNImageClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{79A48C86-C565-56AC-8B0C-7D93CF731D7E}']
  { static methods } 

    {class} function FromFile(filename: string): DNImage; overload;
    {class} function FromFile(filename: string; useEmbeddedColorManagement: Boolean): DNImage; overload;
    {class} function FromStream(stream: DDN.mscorlib.DNStream): DNImage; overload;
    {class} function FromStream(stream: DDN.mscorlib.DNStream; useEmbeddedColorManagement: Boolean): DNImage; overload;
    {class} function FromHbitmap(hbitmap: IntPtr): DNBitmap; overload;
    {class} function FromHbitmap(hbitmap: IntPtr; hpalette: IntPtr): DNBitmap; overload;
    {class} function GetPixelFormatSize(pixfmt: DNPixelFormat): Int32;
    {class} function IsAlphaPixelFormat(pixfmt: DNPixelFormat): Boolean;
    {class} function IsExtendedPixelFormat(pixfmt: DNPixelFormat): Boolean;
    {class} function IsCanonicalPixelFormat(pixfmt: DNPixelFormat): Boolean;
    {class} function FromStream(stream: DDN.mscorlib.DNStream; useEmbeddedColorManagement: Boolean; validateImageData: Boolean): DNImage; overload;

  end;

  [DNTypeName('System.Drawing.Image')]
  DNImage = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{451DBF16-B46B-3B4F-993C-EFD8B01553A0}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    procedure Dispose;
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    procedure Save(filename: string); overload;
    procedure Save(filename: string; format: DNImageFormat); overload;
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    procedure RemovePropertyItem(propid: Int32);
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    property Size: DNSize read get_Size;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
    property HorizontalResolution: Single read get_HorizontalResolution;
    property VerticalResolution: Single read get_VerticalResolution;
    property Flags: Int32 read get_Flags;
    property RawFormat: DNImageFormat read get_RawFormat;
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    property Palette: DNColorPalette read get_Palette write set_Palette;
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNImage = class(TDNGenericImport<DNImageClass, DNImage>) end;

  //-------------namespace: System.Drawing----------------
  DNBitmapClass = interface(DNImageClass)
  ['{94ACAB77-01F8-5022-B397-D27F8602028F}']
  { constructors } 

    {class} function init(filename: string): DNBitmap; overload;
    {class} function init(filename: string; useIcm: Boolean): DNBitmap; overload;
    {class} function init(&type: DDN.mscorlib.DNType; resource: string): DNBitmap; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNBitmap; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; useIcm: Boolean): DNBitmap; overload;
    {class} function init(width: Int32; height: Int32; stride: Int32; format: DNPixelFormat; scan0: IntPtr): DNBitmap; overload;
    {class} function init(width: Int32; height: Int32; format: DNPixelFormat): DNBitmap; overload;
    {class} function init(width: Int32; height: Int32): DNBitmap; overload;
    {class} function init(width: Int32; height: Int32; g: DNGraphics): DNBitmap; overload;
    {class} function init(original: DNImage): DNBitmap; overload;
    {class} function init(original: DNImage; width: Int32; height: Int32): DNBitmap; overload;
    {class} function init(original: DNImage; newSize: DNSize): DNBitmap; overload;

  { static methods } 

    {class} function FromHicon(hicon: IntPtr): DNBitmap;
    {class} function FromResource(hinstance: IntPtr; bitmapName: string): DNBitmap;

  end;

  [DNTypeName('System.Drawing.Bitmap')]
  DNBitmap = interface(DNImage)
  ['{6549E875-8857-35A3-94A2-C3D574DDEB1D}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    function GetHbitmap: IntPtr; overload;
    function GetHbitmap(background: DNColor): IntPtr; overload;
    function GetHicon: IntPtr;
    function Clone(rect: DNRectangle; format: DNPixelFormat): DNBitmap; overload;
    function Clone(rect: DNRectangleF; format: DNPixelFormat): DNBitmap; overload;
    procedure MakeTransparent; overload;
    procedure MakeTransparent(transparentColor: DNColor); overload;
    function LockBits(rect: DNRectangle; flags: DNImageLockMode; format: DNPixelFormat): DNBitmapData; overload;
    function LockBits(rect: DNRectangle; flags: DNImageLockMode; format: DNPixelFormat; bitmapData: DNBitmapData): DNBitmapData; overload;
    procedure UnlockBits(bitmapdata: DNBitmapData);
    function GetPixel(x: Int32; y: Int32): DNColor;
    procedure SetPixel(x: Int32; y: Int32; color: DNColor);
    procedure SetResolution(xDpi: Single; yDpi: Single);
    function Clone: DDN.mscorlib.DNObject; overload;
    procedure Dispose;
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    procedure Save(filename: string); overload;
    procedure Save(filename: string; format: DNImageFormat); overload;
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    procedure RemovePropertyItem(propid: Int32);
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    property Size: DNSize read get_Size;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
    property HorizontalResolution: Single read get_HorizontalResolution;
    property VerticalResolution: Single read get_VerticalResolution;
    property Flags: Int32 read get_Flags;
    property RawFormat: DNImageFormat read get_RawFormat;
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    property Palette: DNColorPalette read get_Palette write set_Palette;
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNBitmap = class(TDNGenericImport<DNBitmapClass, DNBitmap>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNMetafileClass = interface(DNImageClass)
  ['{42D491F2-DEA3-52BA-AE62-751A64D411AB}']
  { constructors } 

    {class} function init(hmetafile: IntPtr; wmfHeader: DNWmfPlaceableFileHeader): DNMetafile; overload;
    {class} function init(hmetafile: IntPtr; wmfHeader: DNWmfPlaceableFileHeader; deleteWmf: Boolean): DNMetafile; overload;
    {class} function init(henhmetafile: IntPtr; deleteEmf: Boolean): DNMetafile; overload;
    {class} function init(filename: string): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNMetafile; overload;
    {class} function init(referenceHdc: IntPtr; emfType: DNEmfType): DNMetafile; overload;
    {class} function init(referenceHdc: IntPtr; emfType: DNEmfType; description: string): DNMetafile; overload;
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; desc: string): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; &type: DNEmfType): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; &type: DNEmfType; description: string): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; desc: string): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; description: string): DNMetafile; overload;
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; &type: DNEmfType): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; &type: DNEmfType; description: string): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;

  { static methods } 

    {class} function GetMetafileHeader(hmetafile: IntPtr; wmfHeader: DNWmfPlaceableFileHeader): DNMetafileHeader; overload;
    {class} function GetMetafileHeader(henhmetafile: IntPtr): DNMetafileHeader; overload;
    {class} function GetMetafileHeader(fileName: string): DNMetafileHeader; overload;
    {class} function GetMetafileHeader(stream: DDN.mscorlib.DNStream): DNMetafileHeader; overload;

  end;

  [DNTypeName('System.Drawing.Imaging.Metafile')]
  DNMetafile = interface(DNImage)
  ['{0039BEED-721E-35E8-A37D-1DBBB36A5A0D}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    function GetMetafileHeader: DNMetafileHeader; overload;
    function GetHenhmetafile: IntPtr;
    procedure PlayRecord(recordType: DNEmfPlusRecordType; flags: Int32; dataSize: Int32; data: TArray<Byte>);
    function Clone: DDN.mscorlib.DNObject;
    procedure Dispose;
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    procedure Save(filename: string); overload;
    procedure Save(filename: string; format: DNImageFormat); overload;
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    procedure RemovePropertyItem(propid: Int32);
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    property Size: DNSize read get_Size;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
    property HorizontalResolution: Single read get_HorizontalResolution;
    property VerticalResolution: Single read get_VerticalResolution;
    property Flags: Int32 read get_Flags;
    property RawFormat: DNImageFormat read get_RawFormat;
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    property Palette: DNColorPalette read get_Palette write set_Palette;
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNMetafile = class(TDNGenericImport<DNMetafileClass, DNMetafile>) end;

  //-------------namespace: System.Drawing----------------
  DNPenClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{C1364DE7-F49E-5C06-941C-C2AD2E6AB4B2}']
  { constructors } 

    {class} function init(color: DNColor): DNPen; overload;
    {class} function init(color: DNColor; width: Single): DNPen; overload;
    {class} function init(brush: DNBrush): DNPen; overload;
    {class} function init(brush: DNBrush; width: Single): DNPen; overload;

  end;

  [DNTypeName('System.Drawing.Pen')]
  DNPen = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{CDC550AB-7CA0-3E7F-AB2B-7A88B65D0ECD}']
  { getters & setters } 

    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_StartCap: DNLineCap;
    procedure set_StartCap(value: DNLineCap);
    function get_EndCap: DNLineCap;
    procedure set_EndCap(value: DNLineCap);
    function get_DashCap: DNDashCap;
    procedure set_DashCap(value: DNDashCap);
    function get_LineJoin: DNLineJoin;
    procedure set_LineJoin(value: DNLineJoin);
    function get_CustomStartCap: DNCustomLineCap;
    procedure set_CustomStartCap(value: DNCustomLineCap);
    function get_CustomEndCap: DNCustomLineCap;
    procedure set_CustomEndCap(value: DNCustomLineCap);
    function get_MiterLimit: Single;
    procedure set_MiterLimit(value: Single);
    function get_Alignment: DNPenAlignment;
    procedure set_Alignment(value: DNPenAlignment);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_PenType: DNPenType;
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Brush: DNBrush;
    procedure set_Brush(value: DNBrush);
    function get_DashStyle: DNDashStyle;
    procedure set_DashStyle(value: DNDashStyle);
    function get_DashOffset: Single;
    procedure set_DashOffset(value: Single);
    function get_DashPattern: TArray<Single>;
    procedure set_DashPattern(value: TArray<Single>);
    function get_CompoundArray: TArray<Single>;
    procedure set_CompoundArray(value: TArray<Single>);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    procedure Dispose;
    procedure SetLineCap(startCap: DNLineCap; endCap: DNLineCap; dashCap: DNDashCap);
    procedure ResetTransform;
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    procedure RotateTransform(angle: Single); overload;
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Single read get_Width write set_Width;
    property StartCap: DNLineCap read get_StartCap write set_StartCap;
    property EndCap: DNLineCap read get_EndCap write set_EndCap;
    property DashCap: DNDashCap read get_DashCap write set_DashCap;
    property LineJoin: DNLineJoin read get_LineJoin write set_LineJoin;
    property CustomStartCap: DNCustomLineCap read get_CustomStartCap write set_CustomStartCap;
    property CustomEndCap: DNCustomLineCap read get_CustomEndCap write set_CustomEndCap;
    property MiterLimit: Single read get_MiterLimit write set_MiterLimit;
    property Alignment: DNPenAlignment read get_Alignment write set_Alignment;
    property Transform: DNMatrix read get_Transform write set_Transform;
    property PenType: DNPenType read get_PenType;
    property Color: DNColor read get_Color write set_Color;
    property Brush: DNBrush read get_Brush write set_Brush;
    property DashStyle: DNDashStyle read get_DashStyle write set_DashStyle;
    property DashOffset: Single read get_DashOffset write set_DashOffset;
    property DashPattern: TArray<Single> read get_DashPattern write set_DashPattern;
    property CompoundArray: TArray<Single> read get_CompoundArray write set_CompoundArray;
  end;

  TDNPen = class(TDNGenericImport<DNPenClass, DNPen>) end;

  //-------------namespace: System.Drawing----------------
  DNRegionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4B5420B2-257B-550F-892E-A967F1CA8C5D}']
  { constructors } 

    {class} function init: DNRegion; overload;
    {class} function init(rect: DNRectangleF): DNRegion; overload;
    {class} function init(rect: DNRectangle): DNRegion; overload;
    {class} function init(path: DNGraphicsPath): DNRegion; overload;
    {class} function init(rgnData: DNRegionData): DNRegion; overload;

  { static methods } 

    {class} function FromHrgn(hrgn: IntPtr): DNRegion;

  end;

  [DNTypeName('System.Drawing.Region')]
  DNRegion = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{ECA0B9D1-F8EA-3069-9AF8-DD9A08876F74}']
  { methods } 

    function Clone: DNRegion;
    procedure MakeInfinite;
    procedure MakeEmpty;
    procedure Intersect(region: DNRegion); overload;
    procedure Union(rect: DNRectangle); overload;
    procedure Exclude(rect: DNRectangle); overload;
    function GetHrgn(g: DNGraphics): IntPtr;
    function IsInfinite(g: DNGraphics): Boolean;
    procedure Dispose;
    procedure Intersect(rect: DNRectangleF); overload;
    procedure Intersect(rect: DNRectangle); overload;
    procedure Intersect(path: DNGraphicsPath); overload;
    procedure ReleaseHrgn(regionHandle: IntPtr);
    procedure Union(rect: DNRectangleF); overload;
    procedure Union(path: DNGraphicsPath); overload;
    procedure Union(region: DNRegion); overload;
    procedure &Xor(rect: DNRectangleF); overload;
    procedure &Xor(rect: DNRectangle); overload;
    procedure &Xor(path: DNGraphicsPath); overload;
    procedure &Xor(region: DNRegion); overload;
    procedure Exclude(rect: DNRectangleF); overload;
    procedure Exclude(path: DNGraphicsPath); overload;
    procedure Exclude(region: DNRegion); overload;
    procedure Complement(rect: DNRectangleF); overload;
    procedure Complement(rect: DNRectangle); overload;
    procedure Complement(path: DNGraphicsPath); overload;
    procedure Complement(region: DNRegion); overload;
    procedure Translate(dx: Single; dy: Single); overload;
    procedure Translate(dx: Int32; dy: Int32); overload;
    procedure Transform(matrix: DNMatrix);
    function GetBounds(g: DNGraphics): DNRectangleF;
    function IsEmpty(g: DNGraphics): Boolean;
    function Equals(region: DNRegion; g: DNGraphics): Boolean; overload;
    function GetRegionData: DNRegionData;
    function IsVisible(x: Single; y: Single): Boolean; overload;
    function IsVisible(point: DNPointF): Boolean; overload;
    function IsVisible(x: Single; y: Single; g: DNGraphics): Boolean; overload;
    function IsVisible(point: DNPointF; g: DNGraphics): Boolean; overload;
    function IsVisible(x: Single; y: Single; width: Single; height: Single): Boolean; overload;
    function IsVisible(rect: DNRectangleF): Boolean; overload;
    function IsVisible(x: Single; y: Single; width: Single; height: Single; g: DNGraphics): Boolean; overload;
    function IsVisible(rect: DNRectangleF; g: DNGraphics): Boolean; overload;
    function IsVisible(x: Int32; y: Int32; g: DNGraphics): Boolean; overload;
    function IsVisible(point: DNPoint): Boolean; overload;
    function IsVisible(point: DNPoint; g: DNGraphics): Boolean; overload;
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32): Boolean; overload;
    function IsVisible(rect: DNRectangle): Boolean; overload;
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32; g: DNGraphics): Boolean; overload;
    function IsVisible(rect: DNRectangle; g: DNGraphics): Boolean; overload;
    function GetRegionScans(matrix: DNMatrix): TArray<DNRectangleF>;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegion = class(TDNGenericImport<DNRegionClass, DNRegion>) end;

  //-------------namespace: System.Drawing----------------
  DNStringFormatClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{56C8F5D2-5C03-54B7-9939-1F548CEBD429}']
  { static getter & setter } 

    {class} function get_GenericDefault: DNStringFormat;
    {class} function get_GenericTypographic: DNStringFormat;

  { constructors } 

    {class} function init: DNStringFormat; overload;
    {class} function init(options: DNStringFormatFlags): DNStringFormat; overload;
    {class} function init(options: DNStringFormatFlags; language: Int32): DNStringFormat; overload;
    {class} function init(format: DNStringFormat): DNStringFormat; overload;

  { static propertys } 

    {class} property GenericDefault: DNStringFormat read get_GenericDefault;
    {class} property GenericTypographic: DNStringFormat read get_GenericTypographic;
  end;

  [DNTypeName('System.Drawing.StringFormat')]
  DNStringFormat = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{977C6406-2374-3D2B-ADE1-F9C93DB908CA}']
  { getters & setters } 

    function get_FormatFlags: DNStringFormatFlags;
    procedure set_FormatFlags(value: DNStringFormatFlags);
    function get_Alignment: DNStringAlignment;
    procedure set_Alignment(value: DNStringAlignment);
    function get_LineAlignment: DNStringAlignment;
    procedure set_LineAlignment(value: DNStringAlignment);
    function get_HotkeyPrefix: DNHotkeyPrefix;
    procedure set_HotkeyPrefix(value: DNHotkeyPrefix);
    function get_Trimming: DNStringTrimming;
    procedure set_Trimming(value: DNStringTrimming);
    function get_DigitSubstitutionMethod: DNStringDigitSubstitute;
    function get_DigitSubstitutionLanguage: Int32;

  { methods } 

    procedure Dispose;
    function Clone: DDN.mscorlib.DNObject;
    procedure SetMeasurableCharacterRanges(ranges: TArray<DNCharacterRange>);
    procedure SetTabStops(firstTabOffset: Single; tabStops: TArray<Single>);
    function GetTabStops(out firstTabOffset: Single): TArray<Single>;
    procedure SetDigitSubstitution(language: Int32; substitute: DNStringDigitSubstitute);
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FormatFlags: DNStringFormatFlags read get_FormatFlags write set_FormatFlags;
    property Alignment: DNStringAlignment read get_Alignment write set_Alignment;
    property LineAlignment: DNStringAlignment read get_LineAlignment write set_LineAlignment;
    property HotkeyPrefix: DNHotkeyPrefix read get_HotkeyPrefix write set_HotkeyPrefix;
    property Trimming: DNStringTrimming read get_Trimming write set_Trimming;
    property DigitSubstitutionMethod: DNStringDigitSubstitute read get_DigitSubstitutionMethod;
    property DigitSubstitutionLanguage: Int32 read get_DigitSubstitutionLanguage;
  end;

  TDNStringFormat = class(TDNGenericImport<DNStringFormatClass, DNStringFormat>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintingPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{D1AFC8C9-0BA1-5D62-A388-9EFEA4850FEF}']
  { constructors } 

    {class} function init(state: DDN.mscorlib.DNPermissionState): DNPrintingPermission; overload;
    {class} function init(printingLevel: DNPrintingPermissionLevel): DNPrintingPermission; overload;

  end;

  [DNTypeName('System.Drawing.Printing.PrintingPermission')]
  DNPrintingPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{0C882D6F-8421-398D-A24E-BBA452CC6928}']
  { getters & setters } 

    function get_Level: DNPrintingPermissionLevel;
    procedure set_Level(value: DNPrintingPermissionLevel);

  { methods } 

    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function Copy: DDN.mscorlib.DNIPermission;
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure FromXml(esd: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Level: DNPrintingPermissionLevel read get_Level write set_Level;
  end;

  TDNPrintingPermission = class(TDNGenericImport<DNPrintingPermissionClass, DNPrintingPermission>) end;

  //-------------namespace: System.Drawing----------------
  DNCharacterRangeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A0A5CEDC-68FB-58AB-8D49-C44FE49BC34B}']
  { constructors } 

    {class} function init(First: Int32; Length: Int32): DNCharacterRange;

  end;

  [DNTypeName('System.Drawing.CharacterRange')]
  DNCharacterRange = interface(DDN.mscorlib.DNValueType)
  ['{D26938C9-752E-36A5-8A7F-544485A0DBCA}']
  { getters & setters } 

    function get_First: Int32;
    procedure set_First(value: Int32);
    function get_Length: Int32;
    procedure set_Length(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property First: Int32 read get_First write set_First;
    property Length: Int32 read get_Length write set_Length;
  end;

  TDNCharacterRange = class(TDNGenericImport<DNCharacterRangeClass, DNCharacterRange>) end;

  //-------------namespace: System.Drawing----------------
  DNColorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{F54C08F6-E6CF-5D2A-8BBC-E1387E7CC027}']
  { static getter & setter } 

    {class} function get_Transparent: DNColor;
    {class} function get_AliceBlue: DNColor;
    {class} function get_AntiqueWhite: DNColor;
    {class} function get_Aqua: DNColor;
    {class} function get_Aquamarine: DNColor;
    {class} function get_Azure: DNColor;
    {class} function get_Beige: DNColor;
    {class} function get_Bisque: DNColor;
    {class} function get_Black: DNColor;
    {class} function get_BlanchedAlmond: DNColor;
    {class} function get_Blue: DNColor;
    {class} function get_BlueViolet: DNColor;
    {class} function get_Brown: DNColor;
    {class} function get_BurlyWood: DNColor;
    {class} function get_CadetBlue: DNColor;
    {class} function get_Chartreuse: DNColor;
    {class} function get_Chocolate: DNColor;
    {class} function get_Coral: DNColor;
    {class} function get_CornflowerBlue: DNColor;
    {class} function get_Cornsilk: DNColor;
    {class} function get_Crimson: DNColor;
    {class} function get_Cyan: DNColor;
    {class} function get_DarkBlue: DNColor;
    {class} function get_DarkCyan: DNColor;
    {class} function get_DarkGoldenrod: DNColor;
    {class} function get_DarkGray: DNColor;
    {class} function get_DarkGreen: DNColor;
    {class} function get_DarkKhaki: DNColor;
    {class} function get_DarkMagenta: DNColor;
    {class} function get_DarkOliveGreen: DNColor;
    {class} function get_DarkOrange: DNColor;
    {class} function get_DarkOrchid: DNColor;
    {class} function get_DarkRed: DNColor;
    {class} function get_DarkSalmon: DNColor;
    {class} function get_DarkSeaGreen: DNColor;
    {class} function get_DarkSlateBlue: DNColor;
    {class} function get_DarkSlateGray: DNColor;
    {class} function get_DarkTurquoise: DNColor;
    {class} function get_DarkViolet: DNColor;
    {class} function get_DeepPink: DNColor;
    {class} function get_DeepSkyBlue: DNColor;
    {class} function get_DimGray: DNColor;
    {class} function get_DodgerBlue: DNColor;
    {class} function get_Firebrick: DNColor;
    {class} function get_FloralWhite: DNColor;
    {class} function get_ForestGreen: DNColor;
    {class} function get_Fuchsia: DNColor;
    {class} function get_Gainsboro: DNColor;
    {class} function get_GhostWhite: DNColor;
    {class} function get_Gold: DNColor;
    {class} function get_Goldenrod: DNColor;
    {class} function get_Gray: DNColor;
    {class} function get_Green: DNColor;
    {class} function get_GreenYellow: DNColor;
    {class} function get_Honeydew: DNColor;
    {class} function get_HotPink: DNColor;
    {class} function get_IndianRed: DNColor;
    {class} function get_Indigo: DNColor;
    {class} function get_Ivory: DNColor;
    {class} function get_Khaki: DNColor;
    {class} function get_Lavender: DNColor;
    {class} function get_LavenderBlush: DNColor;
    {class} function get_LawnGreen: DNColor;
    {class} function get_LemonChiffon: DNColor;
    {class} function get_LightBlue: DNColor;
    {class} function get_LightCoral: DNColor;
    {class} function get_LightCyan: DNColor;
    {class} function get_LightGoldenrodYellow: DNColor;
    {class} function get_LightGreen: DNColor;
    {class} function get_LightGray: DNColor;
    {class} function get_LightPink: DNColor;
    {class} function get_LightSalmon: DNColor;
    {class} function get_LightSeaGreen: DNColor;
    {class} function get_LightSkyBlue: DNColor;
    {class} function get_LightSlateGray: DNColor;
    {class} function get_LightSteelBlue: DNColor;
    {class} function get_LightYellow: DNColor;
    {class} function get_Lime: DNColor;
    {class} function get_LimeGreen: DNColor;
    {class} function get_Linen: DNColor;
    {class} function get_Magenta: DNColor;
    {class} function get_Maroon: DNColor;
    {class} function get_MediumAquamarine: DNColor;
    {class} function get_MediumBlue: DNColor;
    {class} function get_MediumOrchid: DNColor;
    {class} function get_MediumPurple: DNColor;
    {class} function get_MediumSeaGreen: DNColor;
    {class} function get_MediumSlateBlue: DNColor;
    {class} function get_MediumSpringGreen: DNColor;
    {class} function get_MediumTurquoise: DNColor;
    {class} function get_MediumVioletRed: DNColor;
    {class} function get_MidnightBlue: DNColor;
    {class} function get_MintCream: DNColor;
    {class} function get_MistyRose: DNColor;
    {class} function get_Moccasin: DNColor;
    {class} function get_NavajoWhite: DNColor;
    {class} function get_Navy: DNColor;
    {class} function get_OldLace: DNColor;
    {class} function get_Olive: DNColor;
    {class} function get_OliveDrab: DNColor;
    {class} function get_Orange: DNColor;
    {class} function get_OrangeRed: DNColor;
    {class} function get_Orchid: DNColor;
    {class} function get_PaleGoldenrod: DNColor;
    {class} function get_PaleGreen: DNColor;
    {class} function get_PaleTurquoise: DNColor;
    {class} function get_PaleVioletRed: DNColor;
    {class} function get_PapayaWhip: DNColor;
    {class} function get_PeachPuff: DNColor;
    {class} function get_Peru: DNColor;
    {class} function get_Pink: DNColor;
    {class} function get_Plum: DNColor;
    {class} function get_PowderBlue: DNColor;
    {class} function get_Purple: DNColor;
    {class} function get_Red: DNColor;
    {class} function get_RosyBrown: DNColor;
    {class} function get_RoyalBlue: DNColor;
    {class} function get_SaddleBrown: DNColor;
    {class} function get_Salmon: DNColor;
    {class} function get_SandyBrown: DNColor;
    {class} function get_SeaGreen: DNColor;
    {class} function get_SeaShell: DNColor;
    {class} function get_Sienna: DNColor;
    {class} function get_Silver: DNColor;
    {class} function get_SkyBlue: DNColor;
    {class} function get_SlateBlue: DNColor;
    {class} function get_SlateGray: DNColor;
    {class} function get_Snow: DNColor;
    {class} function get_SpringGreen: DNColor;
    {class} function get_SteelBlue: DNColor;
    {class} function get_Tan: DNColor;
    {class} function get_Teal: DNColor;
    {class} function get_Thistle: DNColor;
    {class} function get_Tomato: DNColor;
    {class} function get_Turquoise: DNColor;
    {class} function get_Violet: DNColor;
    {class} function get_Wheat: DNColor;
    {class} function get_White: DNColor;
    {class} function get_WhiteSmoke: DNColor;
    {class} function get_Yellow: DNColor;
    {class} function get_YellowGreen: DNColor;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNColor;

  { static fields } 

    {class} property Empty: DNColor read __fakeFieldGet_Empty;

  { static methods } 

    {class} function FromArgb(argb: Int32): DNColor; overload;
    {class} function FromArgb(red: Int32; green: Int32; blue: Int32): DNColor; overload;
    {class} function FromKnownColor(color: DNKnownColor): DNColor;
    {class} function FromName(name: string): DNColor;
    {class} function FromArgb(alpha: Int32; red: Int32; green: Int32; blue: Int32): DNColor; overload;
    {class} function FromArgb(alpha: Int32; baseColor: DNColor): DNColor; overload;

  { static propertys } 

    {class} property Transparent: DNColor read get_Transparent;
    {class} property AliceBlue: DNColor read get_AliceBlue;
    {class} property AntiqueWhite: DNColor read get_AntiqueWhite;
    {class} property Aqua: DNColor read get_Aqua;
    {class} property Aquamarine: DNColor read get_Aquamarine;
    {class} property Azure: DNColor read get_Azure;
    {class} property Beige: DNColor read get_Beige;
    {class} property Bisque: DNColor read get_Bisque;
    {class} property Black: DNColor read get_Black;
    {class} property BlanchedAlmond: DNColor read get_BlanchedAlmond;
    {class} property Blue: DNColor read get_Blue;
    {class} property BlueViolet: DNColor read get_BlueViolet;
    {class} property Brown: DNColor read get_Brown;
    {class} property BurlyWood: DNColor read get_BurlyWood;
    {class} property CadetBlue: DNColor read get_CadetBlue;
    {class} property Chartreuse: DNColor read get_Chartreuse;
    {class} property Chocolate: DNColor read get_Chocolate;
    {class} property Coral: DNColor read get_Coral;
    {class} property CornflowerBlue: DNColor read get_CornflowerBlue;
    {class} property Cornsilk: DNColor read get_Cornsilk;
    {class} property Crimson: DNColor read get_Crimson;
    {class} property Cyan: DNColor read get_Cyan;
    {class} property DarkBlue: DNColor read get_DarkBlue;
    {class} property DarkCyan: DNColor read get_DarkCyan;
    {class} property DarkGoldenrod: DNColor read get_DarkGoldenrod;
    {class} property DarkGray: DNColor read get_DarkGray;
    {class} property DarkGreen: DNColor read get_DarkGreen;
    {class} property DarkKhaki: DNColor read get_DarkKhaki;
    {class} property DarkMagenta: DNColor read get_DarkMagenta;
    {class} property DarkOliveGreen: DNColor read get_DarkOliveGreen;
    {class} property DarkOrange: DNColor read get_DarkOrange;
    {class} property DarkOrchid: DNColor read get_DarkOrchid;
    {class} property DarkRed: DNColor read get_DarkRed;
    {class} property DarkSalmon: DNColor read get_DarkSalmon;
    {class} property DarkSeaGreen: DNColor read get_DarkSeaGreen;
    {class} property DarkSlateBlue: DNColor read get_DarkSlateBlue;
    {class} property DarkSlateGray: DNColor read get_DarkSlateGray;
    {class} property DarkTurquoise: DNColor read get_DarkTurquoise;
    {class} property DarkViolet: DNColor read get_DarkViolet;
    {class} property DeepPink: DNColor read get_DeepPink;
    {class} property DeepSkyBlue: DNColor read get_DeepSkyBlue;
    {class} property DimGray: DNColor read get_DimGray;
    {class} property DodgerBlue: DNColor read get_DodgerBlue;
    {class} property Firebrick: DNColor read get_Firebrick;
    {class} property FloralWhite: DNColor read get_FloralWhite;
    {class} property ForestGreen: DNColor read get_ForestGreen;
    {class} property Fuchsia: DNColor read get_Fuchsia;
    {class} property Gainsboro: DNColor read get_Gainsboro;
    {class} property GhostWhite: DNColor read get_GhostWhite;
    {class} property Gold: DNColor read get_Gold;
    {class} property Goldenrod: DNColor read get_Goldenrod;
    {class} property Gray: DNColor read get_Gray;
    {class} property Green: DNColor read get_Green;
    {class} property GreenYellow: DNColor read get_GreenYellow;
    {class} property Honeydew: DNColor read get_Honeydew;
    {class} property HotPink: DNColor read get_HotPink;
    {class} property IndianRed: DNColor read get_IndianRed;
    {class} property Indigo: DNColor read get_Indigo;
    {class} property Ivory: DNColor read get_Ivory;
    {class} property Khaki: DNColor read get_Khaki;
    {class} property Lavender: DNColor read get_Lavender;
    {class} property LavenderBlush: DNColor read get_LavenderBlush;
    {class} property LawnGreen: DNColor read get_LawnGreen;
    {class} property LemonChiffon: DNColor read get_LemonChiffon;
    {class} property LightBlue: DNColor read get_LightBlue;
    {class} property LightCoral: DNColor read get_LightCoral;
    {class} property LightCyan: DNColor read get_LightCyan;
    {class} property LightGoldenrodYellow: DNColor read get_LightGoldenrodYellow;
    {class} property LightGreen: DNColor read get_LightGreen;
    {class} property LightGray: DNColor read get_LightGray;
    {class} property LightPink: DNColor read get_LightPink;
    {class} property LightSalmon: DNColor read get_LightSalmon;
    {class} property LightSeaGreen: DNColor read get_LightSeaGreen;
    {class} property LightSkyBlue: DNColor read get_LightSkyBlue;
    {class} property LightSlateGray: DNColor read get_LightSlateGray;
    {class} property LightSteelBlue: DNColor read get_LightSteelBlue;
    {class} property LightYellow: DNColor read get_LightYellow;
    {class} property Lime: DNColor read get_Lime;
    {class} property LimeGreen: DNColor read get_LimeGreen;
    {class} property Linen: DNColor read get_Linen;
    {class} property Magenta: DNColor read get_Magenta;
    {class} property Maroon: DNColor read get_Maroon;
    {class} property MediumAquamarine: DNColor read get_MediumAquamarine;
    {class} property MediumBlue: DNColor read get_MediumBlue;
    {class} property MediumOrchid: DNColor read get_MediumOrchid;
    {class} property MediumPurple: DNColor read get_MediumPurple;
    {class} property MediumSeaGreen: DNColor read get_MediumSeaGreen;
    {class} property MediumSlateBlue: DNColor read get_MediumSlateBlue;
    {class} property MediumSpringGreen: DNColor read get_MediumSpringGreen;
    {class} property MediumTurquoise: DNColor read get_MediumTurquoise;
    {class} property MediumVioletRed: DNColor read get_MediumVioletRed;
    {class} property MidnightBlue: DNColor read get_MidnightBlue;
    {class} property MintCream: DNColor read get_MintCream;
    {class} property MistyRose: DNColor read get_MistyRose;
    {class} property Moccasin: DNColor read get_Moccasin;
    {class} property NavajoWhite: DNColor read get_NavajoWhite;
    {class} property Navy: DNColor read get_Navy;
    {class} property OldLace: DNColor read get_OldLace;
    {class} property Olive: DNColor read get_Olive;
    {class} property OliveDrab: DNColor read get_OliveDrab;
    {class} property Orange: DNColor read get_Orange;
    {class} property OrangeRed: DNColor read get_OrangeRed;
    {class} property Orchid: DNColor read get_Orchid;
    {class} property PaleGoldenrod: DNColor read get_PaleGoldenrod;
    {class} property PaleGreen: DNColor read get_PaleGreen;
    {class} property PaleTurquoise: DNColor read get_PaleTurquoise;
    {class} property PaleVioletRed: DNColor read get_PaleVioletRed;
    {class} property PapayaWhip: DNColor read get_PapayaWhip;
    {class} property PeachPuff: DNColor read get_PeachPuff;
    {class} property Peru: DNColor read get_Peru;
    {class} property Pink: DNColor read get_Pink;
    {class} property Plum: DNColor read get_Plum;
    {class} property PowderBlue: DNColor read get_PowderBlue;
    {class} property Purple: DNColor read get_Purple;
    {class} property Red: DNColor read get_Red;
    {class} property RosyBrown: DNColor read get_RosyBrown;
    {class} property RoyalBlue: DNColor read get_RoyalBlue;
    {class} property SaddleBrown: DNColor read get_SaddleBrown;
    {class} property Salmon: DNColor read get_Salmon;
    {class} property SandyBrown: DNColor read get_SandyBrown;
    {class} property SeaGreen: DNColor read get_SeaGreen;
    {class} property SeaShell: DNColor read get_SeaShell;
    {class} property Sienna: DNColor read get_Sienna;
    {class} property Silver: DNColor read get_Silver;
    {class} property SkyBlue: DNColor read get_SkyBlue;
    {class} property SlateBlue: DNColor read get_SlateBlue;
    {class} property SlateGray: DNColor read get_SlateGray;
    {class} property Snow: DNColor read get_Snow;
    {class} property SpringGreen: DNColor read get_SpringGreen;
    {class} property SteelBlue: DNColor read get_SteelBlue;
    {class} property Tan: DNColor read get_Tan;
    {class} property Teal: DNColor read get_Teal;
    {class} property Thistle: DNColor read get_Thistle;
    {class} property Tomato: DNColor read get_Tomato;
    {class} property Turquoise: DNColor read get_Turquoise;
    {class} property Violet: DNColor read get_Violet;
    {class} property Wheat: DNColor read get_Wheat;
    {class} property White: DNColor read get_White;
    {class} property WhiteSmoke: DNColor read get_WhiteSmoke;
    {class} property Yellow: DNColor read get_Yellow;
    {class} property YellowGreen: DNColor read get_YellowGreen;
  end;

  [DNTypeName('System.Drawing.Color')]
  DNColor = interface(DDN.mscorlib.DNValueType)
  ['{173627B3-3CAB-3FF6-8CAB-93E849D6A8A5}']
  { getters & setters } 

    function get_R: Byte;
    function get_G: Byte;
    function get_B: Byte;
    function get_A: Byte;
    function get_IsKnownColor: Boolean;
    function get_IsEmpty: Boolean;
    function get_IsNamedColor: Boolean;
    function get_IsSystemColor: Boolean;
    function get_Name: string;

  { methods } 

    function GetBrightness: Single;
    function GetHue: Single;
    function GetSaturation: Single;
    function ToArgb: Int32;
    function ToKnownColor: DNKnownColor;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property R: Byte read get_R;
    property G: Byte read get_G;
    property B: Byte read get_B;
    property A: Byte read get_A;
    property IsKnownColor: Boolean read get_IsKnownColor;
    property IsEmpty: Boolean read get_IsEmpty;
    property IsNamedColor: Boolean read get_IsNamedColor;
    property IsSystemColor: Boolean read get_IsSystemColor;
    property Name: string read get_Name;
  end;

  TDNColor = class(TDNGenericImport<DNColorClass, DNColor>) end;

  //-------------namespace: System.Drawing----------------
  DNPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B23E3AA6-C68F-573E-8FD5-A8150E5D4997}']
  { constructors } 

    {class} function init(x: Int32; y: Int32): DNPoint; overload;
    {class} function init(sz: DNSize): DNPoint; overload;
    {class} function init(dw: Int32): DNPoint; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPoint;

  { static fields } 

    {class} property Empty: DNPoint read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Add(pt: DNPoint; sz: DNSize): DNPoint;
    {class} function Subtract(pt: DNPoint; sz: DNSize): DNPoint;
    {class} function Ceiling(value: DNPointF): DNPoint;
    {class} function Truncate(value: DNPointF): DNPoint;
    {class} function Round(value: DNPointF): DNPoint;

  end;

  [DNTypeName('System.Drawing.Point')]
  DNPoint = interface(DDN.mscorlib.DNValueType)
  ['{CD6CB0A8-D6EF-33E8-888E-FE8C78CA568F}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure Offset(dx: Int32; dy: Int32); overload;
    procedure Offset(p: DNPoint); overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: System.Drawing----------------
  DNPointFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{68F24B46-D3A6-59B7-BF29-00901DF2B211}']
  { constructors } 

    {class} function init(x: Single; y: Single): DNPointF;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPointF;

  { static fields } 

    {class} property Empty: DNPointF read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Add(pt: DNPointF; sz: DNSize): DNPointF; overload;
    {class} function Subtract(pt: DNPointF; sz: DNSize): DNPointF; overload;
    {class} function Add(pt: DNPointF; sz: DNSizeF): DNPointF; overload;
    {class} function Subtract(pt: DNPointF; sz: DNSizeF): DNPointF; overload;

  end;

  [DNTypeName('System.Drawing.PointF')]
  DNPointF = interface(DDN.mscorlib.DNValueType)
  ['{A521101D-A776-3125-B530-67030F2E0A21}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
  end;

  TDNPointF = class(TDNGenericImport<DNPointFClass, DNPointF>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{24950A89-FDF4-51EA-80AD-37BF2A502082}']
  { constructors } 

    {class} function init(x: Int32; y: Int32; width: Int32; height: Int32): DNRectangle; overload;
    {class} function init(location: DNPoint; size: DNSize): DNRectangle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangle;

  { static fields } 

    {class} property Empty: DNRectangle read __fakeFieldGet_Empty;

  { static methods } 

    {class} function FromLTRB(left: Int32; top: Int32; right: Int32; bottom: Int32): DNRectangle;
    {class} function Truncate(value: DNRectangleF): DNRectangle;
    {class} function Intersect(a: DNRectangle; b: DNRectangle): DNRectangle; overload;
    {class} function Union(a: DNRectangle; b: DNRectangle): DNRectangle;
    {class} function Ceiling(value: DNRectangleF): DNRectangle;
    {class} function Round(value: DNRectangleF): DNRectangle;
    {class} function Inflate(rect: DNRectangle; x: Int32; y: Int32): DNRectangle; overload;

  end;

  [DNTypeName('System.Drawing.Rectangle')]
  DNRectangle = interface(DDN.mscorlib.DNValueType)
  ['{548BBB02-5F3C-35FB-A75F-1FBD3D0D3584}']
  { getters & setters } 

    function get_Location: DNPoint;
    procedure set_Location(value: DNPoint);
    function get_Size: DNSize;
    procedure set_Size(value: DNSize);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Left: Int32;
    function get_Top: Int32;
    function get_Right: Int32;
    function get_Bottom: Int32;
    function get_IsEmpty: Boolean;

  { methods } 

    function &Contains(x: Int32; y: Int32): Boolean; overload;
    function &Contains(pt: DNPoint): Boolean; overload;
    function &Contains(rect: DNRectangle): Boolean; overload;
    procedure Inflate(width: Int32; height: Int32); overload;
    procedure Intersect(rect: DNRectangle); overload;
    function IntersectsWith(rect: DNRectangle): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure Inflate(size: DNSize); overload;
    procedure Offset(pos: DNPoint); overload;
    procedure Offset(x: Int32; y: Int32); overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Location: DNPoint read get_Location write set_Location;
    property Size: DNSize read get_Size write set_Size;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Width: Int32 read get_Width write set_Width;
    property Height: Int32 read get_Height write set_Height;
    property Left: Int32 read get_Left;
    property Top: Int32 read get_Top;
    property Right: Int32 read get_Right;
    property Bottom: Int32 read get_Bottom;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNRectangle = class(TDNGenericImport<DNRectangleClass, DNRectangle>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{93812BD6-FBF9-555C-B730-A20DE51F8701}']
  { constructors } 

    {class} function init(x: Single; y: Single; width: Single; height: Single): DNRectangleF; overload;
    {class} function init(location: DNPointF; size: DNSizeF): DNRectangleF; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangleF;

  { static fields } 

    {class} property Empty: DNRectangleF read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Union(a: DNRectangleF; b: DNRectangleF): DNRectangleF;
    {class} function FromLTRB(left: Single; top: Single; right: Single; bottom: Single): DNRectangleF;
    {class} function Inflate(rect: DNRectangleF; x: Single; y: Single): DNRectangleF; overload;
    {class} function Intersect(a: DNRectangleF; b: DNRectangleF): DNRectangleF; overload;

  end;

  [DNTypeName('System.Drawing.RectangleF')]
  DNRectangleF = interface(DDN.mscorlib.DNValueType)
  ['{A5567232-D740-3F7B-BBC9-D2F5B3EB90CB}']
  { getters & setters } 

    function get_Location: DNPointF;
    procedure set_Location(value: DNPointF);
    function get_Size: DNSizeF;
    procedure set_Size(value: DNSizeF);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Left: Single;
    function get_Top: Single;
    function get_Right: Single;
    function get_Bottom: Single;
    function get_IsEmpty: Boolean;

  { methods } 

    procedure Inflate(x: Single; y: Single); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function &Contains(x: Single; y: Single): Boolean; overload;
    function &Contains(pt: DNPointF): Boolean; overload;
    function &Contains(rect: DNRectangleF): Boolean; overload;
    function GetHashCode: Int32;
    procedure Inflate(size: DNSizeF); overload;
    procedure Intersect(rect: DNRectangleF); overload;
    function IntersectsWith(rect: DNRectangleF): Boolean;
    procedure Offset(pos: DNPointF); overload;
    procedure Offset(x: Single; y: Single); overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Location: DNPointF read get_Location write set_Location;
    property Size: DNSizeF read get_Size write set_Size;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property Left: Single read get_Left;
    property Top: Single read get_Top;
    property Right: Single read get_Right;
    property Bottom: Single read get_Bottom;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNRectangleF = class(TDNGenericImport<DNRectangleFClass, DNRectangleF>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{156B7BC2-8B4A-54A9-9F29-1BBCFEFCB428}']
  { constructors } 

    {class} function init(pt: DNPoint): DNSize; overload;
    {class} function init(width: Int32; height: Int32): DNSize; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSize;

  { static fields } 

    {class} property Empty: DNSize read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Add(sz1: DNSize; sz2: DNSize): DNSize;
    {class} function Ceiling(value: DNSizeF): DNSize;
    {class} function Subtract(sz1: DNSize; sz2: DNSize): DNSize;
    {class} function Truncate(value: DNSizeF): DNSize;
    {class} function Round(value: DNSizeF): DNSize;

  end;

  [DNTypeName('System.Drawing.Size')]
  DNSize = interface(DDN.mscorlib.DNValueType)
  ['{ECD5EB7F-1CD0-3F82-9997-5E4C9AB9F326}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Width: Int32 read get_Width write set_Width;
    property Height: Int32 read get_Height write set_Height;
  end;

  TDNSize = class(TDNGenericImport<DNSizeClass, DNSize>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{889E69F7-7C5F-5D31-9A96-7A897B044864}']
  { constructors } 

    {class} function init(size: DNSizeF): DNSizeF; overload;
    {class} function init(pt: DNPointF): DNSizeF; overload;
    {class} function init(width: Single; height: Single): DNSizeF; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSizeF;

  { static fields } 

    {class} property Empty: DNSizeF read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Add(sz1: DNSizeF; sz2: DNSizeF): DNSizeF;
    {class} function Subtract(sz1: DNSizeF; sz2: DNSizeF): DNSizeF;

  end;

  [DNTypeName('System.Drawing.SizeF')]
  DNSizeF = interface(DDN.mscorlib.DNValueType)
  ['{56ABB41C-4516-30F6-882E-57F234AB5028}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToPointF: DNPointF;
    function ToSize: DNSize;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
  end;

  TDNSizeF = class(TDNGenericImport<DNSizeFClass, DNSizeF>) end;


implementation


initialization
  LoadAssemblyModule('System.Drawing.dll', True);

finalization

end.
