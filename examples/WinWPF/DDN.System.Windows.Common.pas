//-----------------------------------------------------------//
//                                                           //
//     DDN.System.Windows.Common                    
//     Delphi .NET Import                                    //
//     Author: ying32                                        //
//     .NET Framework: .NET 4.0                              //
//                                                           //
//-----------------------------------------------------------//

unit DDN.System.Windows.Common;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib;

type

{ enums }

  //-------------namespace: System.Collections.Specialized----------------
  [DNTypeName('System.Collections.Specialized.NotifyCollectionChangedAction')]
  DNNotifyCollectionChangedAction = type Integer;
  DNNotifyCollectionChangedActionHelper = record helper for DNNotifyCollectionChangedAction
  public const
    Add = 0;
    Remove = 1;
    Replace = 2;
    Move = 3;
    Reset = 4;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.DesignerSerializationVisibility')]
  DNDesignerSerializationVisibility = type Integer;
  DNDesignerSerializationVisibilityHelper = record helper for DNDesignerSerializationVisibility
  public const
    Hidden = 0;
    Visible = 1;
    Content = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ListChangedType')]
  DNListChangedType = type Integer;
  DNListChangedTypeHelper = record helper for DNListChangedType
  public const
    Reset = 0;
    ItemAdded = 1;
    ItemDeleted = 2;
    ItemMoved = 3;
    ItemChanged = 4;
    PropertyDescriptorAdded = 5;
    PropertyDescriptorDeleted = 6;
    PropertyDescriptorChanged = 7;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ListSortDirection')]
  DNListSortDirection = type Integer;
  DNListSortDirectionHelper = record helper for DNListSortDirection
  public const
    Ascending = 0;
    Descending = 1;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.NewItemPlaceholderPosition')]
  DNNewItemPlaceholderPosition = type Integer;
  DNNewItemPlaceholderPositionHelper = record helper for DNNewItemPlaceholderPosition
  public const
    None = 0;
    AtBeginning = 1;
    AtEnd = 2;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.SourceLevels')]
  DNSourceLevels = type Integer;
  DNSourceLevelsHelper = record helper for DNSourceLevels
  public const
    Off = 0;
    Critical = 1;
    Error = 3;
    Warning = 7;
    Information = 15;
    Verbose = 31;
    ActivityTracing = 65280;
    All = -1;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.TraceEventType')]
  DNTraceEventType = type Integer;
  DNTraceEventTypeHelper = record helper for DNTraceEventType
  public const
    Critical = 1;
    Error = 2;
    Warning = 4;
    Information = 8;
    Verbose = 16;
    Start = 256;
    Stop = 512;
    Suspend = 1024;
    Resume = 2048;
    Transfer = 4096;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.TraceOptions')]
  DNTraceOptions = type Integer;
  DNTraceOptionsHelper = record helper for DNTraceOptions
  public const
    None = 0;
    LogicalOperationStack = 1;
    DateTime = 2;
    Timestamp = 4;
    ProcessId = 8;
    ThreadId = 16;
    Callstack = 32;
  end;


  //-------------namespace: System.IO.Packaging----------------
  [DNTypeName('System.IO.Packaging.CompressionOption')]
  DNCompressionOption = type Integer;
  DNCompressionOptionHelper = record helper for DNCompressionOption
  public const
    Normal = 0;
    Maximum = 1;
    Fast = 2;
    SuperFast = 3;
    NotCompressed = -1;
  end;


  //-------------namespace: System.IO.Packaging----------------
  [DNTypeName('System.IO.Packaging.TargetMode')]
  DNTargetMode = type Integer;
  DNTargetModeHelper = record helper for DNTargetMode
  public const
    Internal = 0;
    External_ = 1;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.ExpressionType')]
  DNExpressionType = type Integer;
  DNExpressionTypeHelper = record helper for DNExpressionType
  public const
    Add = 0;
    AddChecked = 1;
    And_ = 2;
    AndAlso = 3;
    ArrayLength = 4;
    ArrayIndex = 5;
    Call = 6;
    Coalesce = 7;
    Conditional = 8;
    Constant = 9;
    Convert = 10;
    ConvertChecked = 11;
    Divide = 12;
    Equal = 13;
    ExclusiveOr = 14;
    GreaterThan = 15;
    GreaterThanOrEqual = 16;
    Invoke = 17;
    Lambda = 18;
    LeftShift = 19;
    LessThan = 20;
    LessThanOrEqual = 21;
    ListInit = 22;
    MemberAccess = 23;
    MemberInit = 24;
    Modulo = 25;
    Multiply = 26;
    MultiplyChecked = 27;
    Negate = 28;
    UnaryPlus = 29;
    NegateChecked = 30;
    New = 31;
    NewArrayInit = 32;
    NewArrayBounds = 33;
    Not_ = 34;
    NotEqual = 35;
    Or_ = 36;
    OrElse = 37;
    Parameter = 38;
    Power = 39;
    Quote = 40;
    RightShift = 41;
    Subtract = 42;
    SubtractChecked = 43;
    TypeAs = 44;
    TypeIs = 45;
    Assign = 46;
    Block = 47;
    DebugInfo = 48;
    Decrement = 49;
    Dynamic_ = 50;
    Default_ = 51;
    Extension = 52;
    Goto_ = 53;
    Increment = 54;
    Index = 55;
    Label_ = 56;
    RuntimeVariables = 57;
    Loop = 58;
    Switch = 59;
    Throw = 60;
    Try_ = 61;
    Unbox = 62;
    AddAssign = 63;
    AndAssign = 64;
    DivideAssign = 65;
    ExclusiveOrAssign = 66;
    LeftShiftAssign = 67;
    ModuloAssign = 68;
    MultiplyAssign = 69;
    OrAssign = 70;
    PowerAssign = 71;
    RightShiftAssign = 72;
    SubtractAssign = 73;
    AddAssignChecked = 74;
    MultiplyAssignChecked = 75;
    SubtractAssignChecked = 76;
    PreIncrementAssign = 77;
    PreDecrementAssign = 78;
    PostIncrementAssign = 79;
    PostDecrementAssign = 80;
    TypeEqual = 81;
    OnesComplement = 82;
    IsTrue = 83;
    IsFalse = 84;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.GotoExpressionKind')]
  DNGotoExpressionKind = type Integer;
  DNGotoExpressionKindHelper = record helper for DNGotoExpressionKind
  public const
    Goto_ = 0;
    Return = 1;
    Break = 2;
    Continue_ = 3;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.MemberBindingType')]
  DNMemberBindingType = type Integer;
  DNMemberBindingTypeHelper = record helper for DNMemberBindingType
  public const
    Assignment = 0;
    MemberBinding = 1;
    ListBinding = 2;
  end;


  //-------------namespace: System.Net.Cache----------------
  [DNTypeName('System.Net.Cache.RequestCacheLevel')]
  DNRequestCacheLevel = type Integer;
  DNRequestCacheLevelHelper = record helper for DNRequestCacheLevel
  public const
    Default_ = 0;
    BypassCache = 1;
    CacheOnly = 2;
    CacheIfAvailable = 3;
    Revalidate = 4;
    Reload = 5;
    NoCacheNoStore = 6;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.DecompressionMethods')]
  DNDecompressionMethods = type Integer;
  DNDecompressionMethodsHelper = record helper for DNDecompressionMethods
  public const
    None = 0;
    GZip = 1;
    Deflate = 2;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.HttpRequestHeader')]
  DNHttpRequestHeader = type Integer;
  DNHttpRequestHeaderHelper = record helper for DNHttpRequestHeader
  public const
    CacheControl = 0;
    Connection = 1;
    Date = 2;
    KeepAlive = 3;
    Pragma = 4;
    Trailer = 5;
    TransferEncoding = 6;
    Upgrade = 7;
    Via = 8;
    Warning = 9;
    Allow = 10;
    ContentLength = 11;
    ContentType = 12;
    ContentEncoding = 13;
    ContentLanguage = 14;
    ContentLocation = 15;
    ContentMd5 = 16;
    ContentRange = 17;
    Expires = 18;
    LastModified = 19;
    Accept = 20;
    AcceptCharset = 21;
    AcceptEncoding = 22;
    AcceptLanguage = 23;
    Authorization = 24;
    Cookie = 25;
    Expect = 26;
    From = 27;
    Host = 28;
    IfMatch = 29;
    IfModifiedSince = 30;
    IfNoneMatch = 31;
    IfRange = 32;
    IfUnmodifiedSince = 33;
    MaxForwards = 34;
    ProxyAuthorization = 35;
    Referer = 36;
    Range = 37;
    Te = 38;
    Translate = 39;
    UserAgent = 40;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.HttpResponseHeader')]
  DNHttpResponseHeader = type Integer;
  DNHttpResponseHeaderHelper = record helper for DNHttpResponseHeader
  public const
    CacheControl = 0;
    Connection = 1;
    Date = 2;
    KeepAlive = 3;
    Pragma = 4;
    Trailer = 5;
    TransferEncoding = 6;
    Upgrade = 7;
    Via = 8;
    Warning = 9;
    Allow = 10;
    ContentLength = 11;
    ContentType = 12;
    ContentEncoding = 13;
    ContentLanguage = 14;
    ContentLocation = 15;
    ContentMd5 = 16;
    ContentRange = 17;
    Expires = 18;
    LastModified = 19;
    AcceptRanges = 20;
    Age = 21;
    ETag = 22;
    Location = 23;
    ProxyAuthenticate = 24;
    RetryAfter = 25;
    Server = 26;
    SetCookie = 27;
    Vary = 28;
    WwwAuthenticate = 29;
  end;


  //-------------namespace: System.Net.Security----------------
  [DNTypeName('System.Net.Security.AuthenticationLevel')]
  DNAuthenticationLevel = type Integer;
  DNAuthenticationLevelHelper = record helper for DNAuthenticationLevel
  public const
    None = 0;
    MutualAuthRequested = 1;
    MutualAuthRequired = 2;
  end;


  //-------------namespace: System.Net.Security----------------
  [DNTypeName('System.Net.Security.SslPolicyErrors')]
  DNSslPolicyErrors = type Integer;
  DNSslPolicyErrorsHelper = record helper for DNSslPolicyErrors
  public const
    None = 0;
    RemoteCertificateNotAvailable = 1;
    RemoteCertificateNameMismatch = 2;
    RemoteCertificateChainErrors = 4;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.Collation')]
  DNCollation = type Integer;
  DNCollationHelper = record helper for DNCollation
  public const
    Unknown = 0;
    Collated = 1;
    Uncollated = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.ConflictStatus')]
  DNConflictStatus = type Integer;
  DNConflictStatusHelper = record helper for DNConflictStatus
  public const
    NoConflict = 0;
    ConflictResolved = 1;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.DeviceFontSubstitution')]
  DNDeviceFontSubstitution = type Integer;
  DNDeviceFontSubstitutionHelper = record helper for DNDeviceFontSubstitution
  public const
    Unknown = 0;
    Off = 1;
    On_ = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.Duplexing')]
  DNDuplexing = type Integer;
  DNDuplexingHelper = record helper for DNDuplexing
  public const
    Unknown = 0;
    OneSided = 1;
    TwoSidedShortEdge = 2;
    TwoSidedLongEdge = 3;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.EnumeratedPrintQueueTypes')]
  DNEnumeratedPrintQueueTypes = type Integer;
  DNEnumeratedPrintQueueTypesHelper = record helper for DNEnumeratedPrintQueueTypes
  public const
    Queued = 1;
    DirectPrinting = 2;
    Shared = 8;
    Connections = 16;
    Local = 64;
    EnableDevQuery = 128;
    KeepPrintedJobs = 256;
    WorkOffline = 1024;
    EnableBidi = 2048;
    RawOnly = 4096;
    PublishedInDirectoryServices = 8192;
    Fax = 16384;
    TerminalServer = 32768;
    PushedUserConnection = 131072;
    PushedMachineConnection = 262144;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.InputBin')]
  DNInputBin = type Integer;
  DNInputBinHelper = record helper for DNInputBin
  public const
    Unknown = 0;
    AutoSelect = 1;
    Cassette = 2;
    Tractor = 3;
    AutoSheetFeeder = 4;
    Manual = 5;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.OutputColor')]
  DNOutputColor = type Integer;
  DNOutputColorHelper = record helper for DNOutputColor
  public const
    Unknown = 0;
    Color = 1;
    Grayscale = 2;
    Monochrome = 3;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.OutputQuality')]
  DNOutputQuality = type Integer;
  DNOutputQualityHelper = record helper for DNOutputQuality
  public const
    Unknown = 0;
    Automatic = 1;
    Draft = 2;
    Fax = 3;
    High = 4;
    Normal = 5;
    Photographic = 6;
    Text = 7;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageBorderless')]
  DNPageBorderless = type Integer;
  DNPageBorderlessHelper = record helper for DNPageBorderless
  public const
    Unknown = 0;
    Borderless = 1;
    None = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageMediaSizeName')]
  DNPageMediaSizeName = type Integer;
  DNPageMediaSizeNameHelper = record helper for DNPageMediaSizeName
  public const
    Unknown = 0;
    ISOA0 = 1;
    ISOA1 = 2;
    ISOA10 = 3;
    ISOA2 = 4;
    ISOA3 = 5;
    ISOA3Rotated = 6;
    ISOA3Extra = 7;
    ISOA4 = 8;
    ISOA4Rotated = 9;
    ISOA4Extra = 10;
    ISOA5 = 11;
    ISOA5Rotated = 12;
    ISOA5Extra = 13;
    ISOA6 = 14;
    ISOA6Rotated = 15;
    ISOA7 = 16;
    ISOA8 = 17;
    ISOA9 = 18;
    ISOB0 = 19;
    ISOB1 = 20;
    ISOB10 = 21;
    ISOB2 = 22;
    ISOB3 = 23;
    ISOB4 = 24;
    ISOB4Envelope = 25;
    ISOB5Envelope = 26;
    ISOB5Extra = 27;
    ISOB7 = 28;
    ISOB8 = 29;
    ISOB9 = 30;
    ISOC0 = 31;
    ISOC1 = 32;
    ISOC10 = 33;
    ISOC2 = 34;
    ISOC3 = 35;
    ISOC3Envelope = 36;
    ISOC4 = 37;
    ISOC4Envelope = 38;
    ISOC5 = 39;
    ISOC5Envelope = 40;
    ISOC6 = 41;
    ISOC6Envelope = 42;
    ISOC6C5Envelope = 43;
    ISOC7 = 44;
    ISOC8 = 45;
    ISOC9 = 46;
    ISODLEnvelope = 47;
    ISODLEnvelopeRotated = 48;
    ISOSRA3 = 49;
    JapanQuadrupleHagakiPostcard = 50;
    JISB0 = 51;
    JISB1 = 52;
    JISB10 = 53;
    JISB2 = 54;
    JISB3 = 55;
    JISB4 = 56;
    JISB4Rotated = 57;
    JISB5 = 58;
    JISB5Rotated = 59;
    JISB6 = 60;
    JISB6Rotated = 61;
    JISB7 = 62;
    JISB8 = 63;
    JISB9 = 64;
    JapanChou3Envelope = 65;
    JapanChou3EnvelopeRotated = 66;
    JapanChou4Envelope = 67;
    JapanChou4EnvelopeRotated = 68;
    JapanHagakiPostcard = 69;
    JapanHagakiPostcardRotated = 70;
    JapanKaku2Envelope = 71;
    JapanKaku2EnvelopeRotated = 72;
    JapanKaku3Envelope = 73;
    JapanKaku3EnvelopeRotated = 74;
    JapanYou4Envelope = 75;
    NorthAmerica10x11 = 76;
    NorthAmerica10x14 = 77;
    NorthAmerica11x17 = 78;
    NorthAmerica9x11 = 79;
    NorthAmericaArchitectureASheet = 80;
    NorthAmericaArchitectureBSheet = 81;
    NorthAmericaArchitectureCSheet = 82;
    NorthAmericaArchitectureDSheet = 83;
    NorthAmericaArchitectureESheet = 84;
    NorthAmericaCSheet = 85;
    NorthAmericaDSheet = 86;
    NorthAmericaESheet = 87;
    NorthAmericaExecutive = 88;
    NorthAmericaGermanLegalFanfold = 89;
    NorthAmericaGermanStandardFanfold = 90;
    NorthAmericaLegal = 91;
    NorthAmericaLegalExtra = 92;
    NorthAmericaLetter = 93;
    NorthAmericaLetterRotated = 94;
    NorthAmericaLetterExtra = 95;
    NorthAmericaLetterPlus = 96;
    NorthAmericaMonarchEnvelope = 97;
    NorthAmericaNote = 98;
    NorthAmericaNumber10Envelope = 99;
    NorthAmericaNumber10EnvelopeRotated = 100;
    NorthAmericaNumber9Envelope = 101;
    NorthAmericaNumber11Envelope = 102;
    NorthAmericaNumber12Envelope = 103;
    NorthAmericaNumber14Envelope = 104;
    NorthAmericaPersonalEnvelope = 105;
    NorthAmericaQuarto = 106;
    NorthAmericaStatement = 107;
    NorthAmericaSuperA = 108;
    NorthAmericaSuperB = 109;
    NorthAmericaTabloid = 110;
    NorthAmericaTabloidExtra = 111;
    OtherMetricA4Plus = 112;
    OtherMetricA3Plus = 113;
    OtherMetricFolio = 114;
    OtherMetricInviteEnvelope = 115;
    OtherMetricItalianEnvelope = 116;
    PRC1Envelope = 117;
    PRC1EnvelopeRotated = 118;
    PRC10Envelope = 119;
    PRC10EnvelopeRotated = 120;
    PRC16K = 121;
    PRC16KRotated = 122;
    PRC2Envelope = 123;
    PRC2EnvelopeRotated = 124;
    PRC32K = 125;
    PRC32KRotated = 126;
    PRC32KBig = 127;
    PRC3Envelope = 128;
    PRC3EnvelopeRotated = 129;
    PRC4Envelope = 130;
    PRC4EnvelopeRotated = 131;
    PRC5Envelope = 132;
    PRC5EnvelopeRotated = 133;
    PRC6Envelope = 134;
    PRC6EnvelopeRotated = 135;
    PRC7Envelope = 136;
    PRC7EnvelopeRotated = 137;
    PRC8Envelope = 138;
    PRC8EnvelopeRotated = 139;
    PRC9Envelope = 140;
    PRC9EnvelopeRotated = 141;
    Roll04Inch = 142;
    Roll06Inch = 143;
    Roll08Inch = 144;
    Roll12Inch = 145;
    Roll15Inch = 146;
    Roll18Inch = 147;
    Roll22Inch = 148;
    Roll24Inch = 149;
    Roll30Inch = 150;
    Roll36Inch = 151;
    Roll54Inch = 152;
    JapanDoubleHagakiPostcard = 153;
    JapanDoubleHagakiPostcardRotated = 154;
    JapanLPhoto = 155;
    Japan2LPhoto = 156;
    JapanYou1Envelope = 157;
    JapanYou2Envelope = 158;
    JapanYou3Envelope = 159;
    JapanYou4EnvelopeRotated = 160;
    JapanYou6Envelope = 161;
    JapanYou6EnvelopeRotated = 162;
    NorthAmerica4x6 = 163;
    NorthAmerica4x8 = 164;
    NorthAmerica5x7 = 165;
    NorthAmerica8x10 = 166;
    NorthAmerica10x12 = 167;
    NorthAmerica14x17 = 168;
    BusinessCard = 169;
    CreditCard = 170;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageMediaType')]
  DNPageMediaType = type Integer;
  DNPageMediaTypeHelper = record helper for DNPageMediaType
  public const
    Unknown = 0;
    AutoSelect = 1;
    Archival = 2;
    BackPrintFilm = 3;
    Bond = 4;
    CardStock = 5;
    Continuous = 6;
    EnvelopePlain = 7;
    EnvelopeWindow = 8;
    Fabric = 9;
    HighResolution = 10;
    Label_ = 11;
    MultiLayerForm = 12;
    MultiPartForm = 13;
    Photographic = 14;
    PhotographicFilm = 15;
    PhotographicGlossy = 16;
    PhotographicHighGloss = 17;
    PhotographicMatte = 18;
    PhotographicSatin = 19;
    PhotographicSemiGloss = 20;
    Plain = 21;
    Screen = 22;
    ScreenPaged = 23;
    Stationery = 24;
    TabStockFull = 25;
    TabStockPreCut = 26;
    Transparency = 27;
    TShirtTransfer = 28;
    None = 29;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageOrder')]
  DNPageOrder = type Integer;
  DNPageOrderHelper = record helper for DNPageOrder
  public const
    Unknown = 0;
    Standard = 1;
    Reverse = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageOrientation')]
  DNPageOrientation = type Integer;
  DNPageOrientationHelper = record helper for DNPageOrientation
  public const
    Unknown = 0;
    Landscape = 1;
    Portrait = 2;
    ReverseLandscape = 3;
    ReversePortrait = 4;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageQualitativeResolution')]
  DNPageQualitativeResolution = type Integer;
  DNPageQualitativeResolutionHelper = record helper for DNPageQualitativeResolution
  public const
    Unknown = 0;
    Default_ = 1;
    Draft = 2;
    High = 3;
    Normal = 4;
    Other = 5;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PagesPerSheetDirection')]
  DNPagesPerSheetDirection = type Integer;
  DNPagesPerSheetDirectionHelper = record helper for DNPagesPerSheetDirection
  public const
    Unknown = 0;
    RightBottom = 1;
    BottomRight = 2;
    LeftBottom = 3;
    BottomLeft = 4;
    RightTop = 5;
    TopRight = 6;
    LeftTop = 7;
    TopLeft = 8;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PhotoPrintingIntent')]
  DNPhotoPrintingIntent = type Integer;
  DNPhotoPrintingIntentHelper = record helper for DNPhotoPrintingIntent
  public const
    Unknown = 0;
    None = 1;
    PhotoBest = 2;
    PhotoDraft = 3;
    PhotoStandard = 4;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintJobPriority')]
  DNPrintJobPriority = type Integer;
  DNPrintJobPriorityHelper = record helper for DNPrintJobPriority
  public const
    None = 0;
    Minimum = 1;
    Default_ = 1;
    Maximum = 99;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintJobStatus')]
  DNPrintJobStatus = type Integer;
  DNPrintJobStatusHelper = record helper for DNPrintJobStatus
  public const
    None = 0;
    Paused = 1;
    Error = 2;
    Deleting = 4;
    Spooling = 8;
    Printing = 16;
    Offline = 32;
    PaperOut = 64;
    Printed = 128;
    Deleted = 256;
    Blocked = 512;
    UserIntervention = 1024;
    Restarted = 2048;
    Completed = 4096;
    Retained = 8192;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintQueueAttributes')]
  DNPrintQueueAttributes = type Integer;
  DNPrintQueueAttributesHelper = record helper for DNPrintQueueAttributes
  public const
    None = 0;
    Queued = 1;
    Direct = 2;
    Shared = 8;
    Hidden = 32;
    EnableDevQuery = 128;
    KeepPrintedJobs = 256;
    ScheduleCompletedJobsFirst = 512;
    EnableBidi = 2048;
    RawOnly = 4096;
    Published_ = 8192;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintQueueIndexedProperty')]
  DNPrintQueueIndexedProperty = type Integer;
  DNPrintQueueIndexedPropertyHelper = record helper for DNPrintQueueIndexedProperty
  public const
    Name = 0;
    ShareName = 1;
    Comment = 2;
    Location = 3;
    Description = 4;
    Priority = 5;
    DefaultPriority = 6;
    StartTimeOfDay = 7;
    UntilTimeOfDay = 8;
    AveragePagesPerMinute = 9;
    NumberOfJobs = 10;
    QueueAttributes = 11;
    QueueDriver = 12;
    QueuePort = 13;
    QueuePrintProcessor = 14;
    HostingPrintServer = 15;
    QueueStatus = 16;
    SeparatorFile = 17;
    UserPrintTicket = 18;
    DefaultPrintTicket = 19;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintQueueStatus')]
  DNPrintQueueStatus = type Integer;
  DNPrintQueueStatusHelper = record helper for DNPrintQueueStatus
  public const
    None = 0;
    Paused = 1;
    Error = 2;
    PendingDeletion = 4;
    PaperJam = 8;
    PaperOut = 16;
    ManualFeed = 32;
    PaperProblem = 64;
    Offline = 128;
    IOActive = 256;
    Busy = 512;
    Printing = 1024;
    OutputBinFull = 2048;
    NotAvailable = 4096;
    Waiting = 8192;
    Processing = 16384;
    Initializing = 32768;
    WarmingUp = 65536;
    TonerLow = 131072;
    NoToner = 262144;
    PagePunt = 524288;
    UserIntervention = 1048576;
    OutOfMemory = 2097152;
    DoorOpen = 4194304;
    ServerUnknown = 8388608;
    PowerSave = 16777216;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintQueueStringPropertyType')]
  DNPrintQueueStringPropertyType = type Integer;
  DNPrintQueueStringPropertyTypeHelper = record helper for DNPrintQueueStringPropertyType
  public const
    Location = 0;
    Comment = 1;
    ShareName = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintServerEventLoggingTypes')]
  DNPrintServerEventLoggingTypes = type Integer;
  DNPrintServerEventLoggingTypesHelper = record helper for DNPrintServerEventLoggingTypes
  public const
    None = 0;
    LogPrintingSuccessEvents = 1;
    LogPrintingErrorEvents = 2;
    LogPrintingWarningEvents = 3;
    LogPrintingInformationEvents = 4;
    LogAllPrintingEvents = 5;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintServerIndexedProperty')]
  DNPrintServerIndexedProperty = type Integer;
  DNPrintServerIndexedPropertyHelper = record helper for DNPrintServerIndexedProperty
  public const
    DefaultSpoolDirectory = 0;
    PortThreadPriority = 1;
    DefaultPortThreadPriority = 2;
    SchedulerPriority = 3;
    DefaultSchedulerPriority = 4;
    BeepEnabled = 5;
    NetPopup = 6;
    EventLog = 7;
    MajorVersion = 8;
    MinorVersion = 9;
    RestartJobOnPoolTimeout = 10;
    RestartJobOnPoolEnabled = 11;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintSystemDesiredAccess')]
  DNPrintSystemDesiredAccess = type Integer;
  DNPrintSystemDesiredAccessHelper = record helper for DNPrintSystemDesiredAccess
  public const
    None = 0;
    EnumerateServer = 131074;
    UsePrinter = 131080;
    AdministrateServer = 983041;
    AdministratePrinter = 983052;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintTicketScope')]
  DNPrintTicketScope = type Integer;
  DNPrintTicketScopeHelper = record helper for DNPrintTicketScope
  public const
    PageScope = 0;
    DocumentScope = 1;
    JobScope = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.Stapling')]
  DNStapling = type Integer;
  DNStaplingHelper = record helper for DNStapling
  public const
    Unknown = 0;
    SaddleStitch = 1;
    StapleBottomLeft = 2;
    StapleBottomRight = 3;
    StapleDualLeft = 4;
    StapleDualRight = 5;
    StapleDualTop = 6;
    StapleDualBottom = 7;
    StapleTopLeft = 8;
    StapleTopRight = 9;
    None = 10;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.TrueTypeFontMode')]
  DNTrueTypeFontMode = type Integer;
  DNTrueTypeFontModeHelper = record helper for DNTrueTypeFontMode
  public const
    Unknown = 0;
    Automatic = 1;
    DownloadAsOutlineFont = 2;
    DownloadAsRasterFont = 3;
    DownloadAsNativeTrueTypeFont = 4;
    RenderAsBitmap = 5;
  end;


  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  [DNTypeName('System.Security.Authentication.ExtendedProtection.ChannelBindingKind')]
  DNChannelBindingKind = type Integer;
  DNChannelBindingKindHelper = record helper for DNChannelBindingKind
  public const
    Unknown = 0;
    Unique = 25;
    Endpoint = 26;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ChainStatusFlags')]
  DNX509ChainStatusFlags = type Integer;
  DNX509ChainStatusFlagsHelper = record helper for DNX509ChainStatusFlags
  public const
    NoError = 0;
    NotTimeValid = 1;
    NotTimeNested = 2;
    Revoked = 4;
    NotSignatureValid = 8;
    NotValidForUsage = 16;
    UntrustedRoot = 32;
    RevocationStatusUnknown = 64;
    Cyclic = 128;
    InvalidExtension = 256;
    InvalidPolicyConstraints = 512;
    InvalidBasicConstraints = 1024;
    InvalidNameConstraints = 2048;
    HasNotSupportedNameConstraint = 4096;
    HasNotDefinedNameConstraint = 8192;
    HasNotPermittedNameConstraint = 16384;
    HasExcludedNameConstraint = 32768;
    PartialChain = 65536;
    CtlNotTimeValid = 131072;
    CtlNotSignatureValid = 262144;
    CtlNotValidForUsage = 524288;
    HasWeakSignature = 1048576;
    OfflineRevocation = 16777216;
    NoIssuanceChainPolicy = 33554432;
    ExplicitDistrust = 67108864;
    HasNotSupportedCriticalExtension = 134217728;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriComponents')]
  DNUriComponents = type Integer;
  DNUriComponentsHelper = record helper for DNUriComponents
  public const
    Scheme = 1;
    UserInfo = 2;
    Host = 4;
    Port = 8;
    SchemeAndServer = 13;
    Path = 16;
    Query = 32;
    PathAndQuery = 48;
    HttpRequestUrl = 61;
    Fragment = 64;
    AbsoluteUri = 127;
    StrongPort = 128;
    HostAndPort = 132;
    StrongAuthority = 134;
    NormalizedHost = 256;
    KeepDelimiter = 1073741824;
    SerializationInfoString = -2147483648;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriFormat')]
  DNUriFormat = type Integer;
  DNUriFormatHelper = record helper for DNUriFormat
  public const
    UriEscaped = 1;
    Unescaped = 2;
    SafeUnescaped = 3;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriHostNameType')]
  DNUriHostNameType = type Integer;
  DNUriHostNameTypeHelper = record helper for DNUriHostNameType
  public const
    Unknown = 0;
    Basic = 1;
    Dns = 2;
    IPv4 = 3;
    IPv6 = 4;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriKind')]
  DNUriKind = type Integer;
  DNUriKindHelper = record helper for DNUriKind
  public const
    RelativeOrAbsolute = 0;
    Absolute_ = 1;
    Relative = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriPartial')]
  DNUriPartial = type Integer;
  DNUriPartialHelper = record helper for DNUriPartial
  public const
    Scheme = 0;
    Authority = 1;
    Path = 2;
    Query = 3;
  end;


  //-------------namespace: System.Windows.Automation----------------
  [DNTypeName('System.Windows.Automation.AsyncContentLoadedState')]
  DNAsyncContentLoadedState = type Integer;
  DNAsyncContentLoadedStateHelper = record helper for DNAsyncContentLoadedState
  public const
    Beginning = 0;
    Progress = 1;
    Completed = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  [DNTypeName('System.Windows.Automation.AutomationLiveSetting')]
  DNAutomationLiveSetting = type Integer;
  DNAutomationLiveSettingHelper = record helper for DNAutomationLiveSetting
  public const
    Off = 0;
    Polite = 1;
    Assertive = 2;
  end;


  //-------------namespace: System.Windows.Automation.Peers----------------
  [DNTypeName('System.Windows.Automation.Peers.AutomationControlType')]
  DNAutomationControlType = type Integer;
  DNAutomationControlTypeHelper = record helper for DNAutomationControlType
  public const
    Button = 0;
    Calendar = 1;
    CheckBox = 2;
    ComboBox = 3;
    Edit = 4;
    Hyperlink = 5;
    Image = 6;
    ListItem = 7;
    List = 8;
    Menu = 9;
    MenuBar = 10;
    MenuItem = 11;
    ProgressBar = 12;
    RadioButton = 13;
    ScrollBar = 14;
    Slider = 15;
    Spinner = 16;
    StatusBar = 17;
    Tab = 18;
    TabItem = 19;
    Text = 20;
    ToolBar = 21;
    ToolTip = 22;
    Tree = 23;
    TreeItem = 24;
    Custom = 25;
    Group = 26;
    Thumb = 27;
    DataGrid = 28;
    DataItem = 29;
    Document = 30;
    SplitButton = 31;
    Window = 32;
    Pane = 33;
    Header = 34;
    HeaderItem = 35;
    Table = 36;
    TitleBar = 37;
    Separator = 38;
  end;


  //-------------namespace: System.Windows.Automation.Peers----------------
  [DNTypeName('System.Windows.Automation.Peers.AutomationEvents')]
  DNAutomationEvents = type Integer;
  DNAutomationEventsHelper = record helper for DNAutomationEvents
  public const
    ToolTipOpened = 0;
    ToolTipClosed = 1;
    MenuOpened = 2;
    MenuClosed = 3;
    AutomationFocusChanged = 4;
    InvokePatternOnInvoked = 5;
    SelectionItemPatternOnElementAddedToSelection = 6;
    SelectionItemPatternOnElementRemovedFromSelection = 7;
    SelectionItemPatternOnElementSelected = 8;
    SelectionPatternOnInvalidated = 9;
    TextPatternOnTextSelectionChanged = 10;
    TextPatternOnTextChanged = 11;
    AsyncContentLoaded = 12;
    PropertyChanged = 13;
    StructureChanged = 14;
    InputReachedTarget = 15;
    InputReachedOtherElement = 16;
    InputDiscarded = 17;
    LiveRegionChanged = 18;
  end;


  //-------------namespace: System.Windows.Automation.Peers----------------
  [DNTypeName('System.Windows.Automation.Peers.AutomationOrientation')]
  DNAutomationOrientation = type Integer;
  DNAutomationOrientationHelper = record helper for DNAutomationOrientation
  public const
    None = 0;
    Horizontal = 1;
    Vertical = 2;
  end;


  //-------------namespace: System.Windows.Automation.Peers----------------
  [DNTypeName('System.Windows.Automation.Peers.PatternInterface')]
  DNPatternInterface = type Integer;
  DNPatternInterfaceHelper = record helper for DNPatternInterface
  public const
    Invoke = 0;
    Selection = 1;
    Value = 2;
    RangeValue = 3;
    Scroll = 4;
    ScrollItem = 5;
    ExpandCollapse = 6;
    Grid = 7;
    GridItem = 8;
    MultipleView = 9;
    Window = 10;
    SelectionItem = 11;
    Dock = 12;
    Table = 13;
    TableItem = 14;
    Toggle = 15;
    Transform = 16;
    Text = 17;
    ItemContainer = 18;
    VirtualizedItem = 19;
    SynchronizedInput = 20;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.BaselineAlignment')]
  DNBaselineAlignment = type Integer;
  DNBaselineAlignmentHelper = record helper for DNBaselineAlignment
  public const
    Top = 0;
    Center = 1;
    Bottom = 2;
    Baseline = 3;
    TextTop = 4;
    TextBottom = 5;
    Subscript = 6;
    Superscript = 7;
  end;


  //-------------namespace: System.Windows.Controls----------------
  [DNTypeName('System.Windows.Controls.PageRangeSelection')]
  DNPageRangeSelection = type Integer;
  DNPageRangeSelectionHelper = record helper for DNPageRangeSelection
  public const
    AllPages = 0;
    UserPages = 1;
    CurrentPage = 2;
    SelectedPages = 3;
  end;


  //-------------namespace: System.Windows.Documents.Serialization----------------
  [DNTypeName('System.Windows.Documents.Serialization.WritingProgressChangeLevel')]
  DNWritingProgressChangeLevel = type Integer;
  DNWritingProgressChangeLevelHelper = record helper for DNWritingProgressChangeLevel
  public const
    None = 0;
    FixedDocumentSequenceWritingProgress = 1;
    FixedDocumentWritingProgress = 2;
    FixedPageWritingProgress = 3;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.DragAction')]
  DNDragAction = type Integer;
  DNDragActionHelper = record helper for DNDragAction
  public const
    Continue_ = 0;
    Drop = 1;
    Cancel = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.DragDropEffects')]
  DNDragDropEffects = type Integer;
  DNDragDropEffectsHelper = record helper for DNDragDropEffects
  public const
    None = 0;
    Copy = 1;
    Move = 2;
    Link = 4;
    Scroll = -2147483648;
    All = -2147483645;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.DragDropKeyStates')]
  DNDragDropKeyStates = type Integer;
  DNDragDropKeyStatesHelper = record helper for DNDragDropKeyStates
  public const
    None = 0;
    LeftMouseButton = 1;
    RightMouseButton = 2;
    ShiftKey = 4;
    ControlKey = 8;
    MiddleMouseButton = 16;
    AltKey = 32;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FlowDirection')]
  DNFlowDirection = type Integer;
  DNFlowDirectionHelper = record helper for DNFlowDirection
  public const
    LeftToRight = 0;
    RightToLeft = 1;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontCapitals')]
  DNFontCapitals = type Integer;
  DNFontCapitalsHelper = record helper for DNFontCapitals
  public const
    Normal = 0;
    AllSmallCaps = 1;
    SmallCaps = 2;
    AllPetiteCaps = 3;
    PetiteCaps = 4;
    Unicase = 5;
    Titling = 6;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontEastAsianLanguage')]
  DNFontEastAsianLanguage = type Integer;
  DNFontEastAsianLanguageHelper = record helper for DNFontEastAsianLanguage
  public const
    Normal = 0;
    Jis78 = 1;
    Jis83 = 2;
    Jis90 = 3;
    Jis04 = 4;
    HojoKanji = 5;
    NlcKanji = 6;
    Simplified = 7;
    Traditional = 8;
    TraditionalNames = 9;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontEastAsianWidths')]
  DNFontEastAsianWidths = type Integer;
  DNFontEastAsianWidthsHelper = record helper for DNFontEastAsianWidths
  public const
    Normal = 0;
    Proportional = 1;
    Full = 2;
    Half = 3;
    Third = 4;
    Quarter = 5;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontFraction')]
  DNFontFraction = type Integer;
  DNFontFractionHelper = record helper for DNFontFraction
  public const
    Normal = 0;
    Slashed = 1;
    Stacked = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontNumeralAlignment')]
  DNFontNumeralAlignment = type Integer;
  DNFontNumeralAlignmentHelper = record helper for DNFontNumeralAlignment
  public const
    Normal = 0;
    Proportional = 1;
    Tabular = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontNumeralStyle')]
  DNFontNumeralStyle = type Integer;
  DNFontNumeralStyleHelper = record helper for DNFontNumeralStyle
  public const
    Normal = 0;
    Lining = 1;
    OldStyle = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontVariants')]
  DNFontVariants = type Integer;
  DNFontVariantsHelper = record helper for DNFontVariants
  public const
    Normal = 0;
    Superscript = 1;
    Subscript = 2;
    Ordinal = 3;
    Inferior = 4;
    Ruby = 5;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.HorizontalAlignment')]
  DNHorizontalAlignment = type Integer;
  DNHorizontalAlignmentHelper = record helper for DNHorizontalAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
    Stretch = 3;
  end;


  //-------------namespace: System.Windows.Ink----------------
  [DNTypeName('System.Windows.Ink.ApplicationGesture')]
  DNApplicationGesture = type Integer;
  DNApplicationGestureHelper = record helper for DNApplicationGesture
  public const
    AllGestures = 0;
    NoGesture = 61440;
    ScratchOut = 61441;
    Triangle = 61442;
    Square = 61443;
    Star = 61444;
    Check = 61445;
    Curlicue = 61456;
    DoubleCurlicue = 61457;
    Circle = 61472;
    DoubleCircle = 61473;
    SemicircleLeft = 61480;
    SemicircleRight = 61481;
    ChevronUp = 61488;
    ChevronDown = 61489;
    ChevronLeft = 61490;
    ChevronRight = 61491;
    ArrowUp = 61496;
    ArrowDown = 61497;
    ArrowLeft = 61498;
    ArrowRight = 61499;
    Up = 61528;
    Down = 61529;
    Left = 61530;
    Right = 61531;
    UpDown = 61536;
    DownUp = 61537;
    LeftRight = 61538;
    RightLeft = 61539;
    UpLeftLong = 61540;
    UpRightLong = 61541;
    DownLeftLong = 61542;
    DownRightLong = 61543;
    UpLeft = 61544;
    UpRight = 61545;
    DownLeft = 61546;
    DownRight = 61547;
    LeftUp = 61548;
    LeftDown = 61549;
    RightUp = 61550;
    RightDown = 61551;
    Exclamation = 61604;
    Tap = 61680;
    DoubleTap = 61681;
  end;


  //-------------namespace: System.Windows.Ink----------------
  [DNTypeName('System.Windows.Ink.RecognitionConfidence')]
  DNRecognitionConfidence = type Integer;
  DNRecognitionConfidenceHelper = record helper for DNRecognitionConfidence
  public const
    Strong = 0;
    Intermediate = 1;
    Poor = 2;
  end;


  //-------------namespace: System.Windows.Ink----------------
  [DNTypeName('System.Windows.Ink.StylusTip')]
  DNStylusTip = type Integer;
  DNStylusTipHelper = record helper for DNStylusTip
  public const
    Rectangle = 0;
    Ellipse = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.CaptureMode')]
  DNCaptureMode = type Integer;
  DNCaptureModeHelper = record helper for DNCaptureMode
  public const
    None = 0;
    Element = 1;
    SubTree = 2;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.FocusNavigationDirection')]
  DNFocusNavigationDirection = type Integer;
  DNFocusNavigationDirectionHelper = record helper for DNFocusNavigationDirection
  public const
    Next = 0;
    Previous = 1;
    First = 2;
    Last = 3;
    Left = 4;
    Right = 5;
    Up = 6;
    Down = 7;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.Key')]
  DNKey = type Integer;
  DNKeyHelper = record helper for DNKey
  public const
    None = 0;
    Cancel = 1;
    Back = 2;
    Tab = 3;
    LineFeed = 4;
    Clear = 5;
    Return = 6;
    Enter = 6;
    Pause = 7;
    Capital = 8;
    CapsLock = 8;
    KanaMode = 9;
    HangulMode = 9;
    JunjaMode = 10;
    FinalMode = 11;
    HanjaMode = 12;
    KanjiMode = 12;
    Escape = 13;
    ImeConvert = 14;
    ImeNonConvert = 15;
    ImeAccept = 16;
    ImeModeChange = 17;
    Space = 18;
    Prior = 19;
    PageUp = 19;
    Next = 20;
    PageDown = 20;
    End_ = 21;
    Home = 22;
    Left = 23;
    Up = 24;
    Right = 25;
    Down = 26;
    Select = 27;
    Print = 28;
    Execute = 29;
    Snapshot = 30;
    PrintScreen = 30;
    Insert = 31;
    Delete = 32;
    Help = 33;
    D0 = 34;
    D1 = 35;
    D2 = 36;
    D3 = 37;
    D4 = 38;
    D5 = 39;
    D6 = 40;
    D7 = 41;
    D8 = 42;
    D9 = 43;
    A = 44;
    B = 45;
    C = 46;
    D = 47;
    E = 48;
    F = 49;
    G = 50;
    H = 51;
    I = 52;
    J = 53;
    K = 54;
    L = 55;
    M = 56;
    N = 57;
    O = 58;
    P = 59;
    Q = 60;
    R = 61;
    S = 62;
    T = 63;
    U = 64;
    V = 65;
    W = 66;
    X = 67;
    Y = 68;
    Z = 69;
    LWin = 70;
    RWin = 71;
    Apps = 72;
    Sleep = 73;
    NumPad0 = 74;
    NumPad1 = 75;
    NumPad2 = 76;
    NumPad3 = 77;
    NumPad4 = 78;
    NumPad5 = 79;
    NumPad6 = 80;
    NumPad7 = 81;
    NumPad8 = 82;
    NumPad9 = 83;
    Multiply = 84;
    Add = 85;
    Separator = 86;
    Subtract = 87;
    Decimal = 88;
    Divide = 89;
    F1 = 90;
    F2 = 91;
    F3 = 92;
    F4 = 93;
    F5 = 94;
    F6 = 95;
    F7 = 96;
    F8 = 97;
    F9 = 98;
    F10 = 99;
    F11 = 100;
    F12 = 101;
    F13 = 102;
    F14 = 103;
    F15 = 104;
    F16 = 105;
    F17 = 106;
    F18 = 107;
    F19 = 108;
    F20 = 109;
    F21 = 110;
    F22 = 111;
    F23 = 112;
    F24 = 113;
    NumLock = 114;
    Scroll = 115;
    LeftShift = 116;
    RightShift = 117;
    LeftCtrl = 118;
    RightCtrl = 119;
    LeftAlt = 120;
    RightAlt = 121;
    BrowserBack = 122;
    BrowserForward = 123;
    BrowserRefresh = 124;
    BrowserStop = 125;
    BrowserSearch = 126;
    BrowserFavorites = 127;
    BrowserHome = 128;
    VolumeMute = 129;
    VolumeDown = 130;
    VolumeUp = 131;
    MediaNextTrack = 132;
    MediaPreviousTrack = 133;
    MediaStop = 134;
    MediaPlayPause = 135;
    LaunchMail = 136;
    SelectMedia = 137;
    LaunchApplication1 = 138;
    LaunchApplication2 = 139;
    Oem1 = 140;
    OemSemicolon = 140;
    OemPlus = 141;
    OemComma = 142;
    OemMinus = 143;
    OemPeriod = 144;
    Oem2 = 145;
    OemQuestion = 145;
    Oem3 = 146;
    OemTilde = 146;
    AbntC1 = 147;
    AbntC2 = 148;
    Oem4 = 149;
    OemOpenBrackets = 149;
    Oem5 = 150;
    OemPipe = 150;
    Oem6 = 151;
    OemCloseBrackets = 151;
    Oem7 = 152;
    OemQuotes = 152;
    Oem8 = 153;
    Oem102 = 154;
    OemBackslash = 154;
    ImeProcessed = 155;
    System = 156;
    OemAttn = 157;
    DbeAlphanumeric = 157;
    OemFinish = 158;
    DbeKatakana = 158;
    OemCopy = 159;
    DbeHiragana = 159;
    OemAuto = 160;
    DbeSbcsChar = 160;
    OemEnlw = 161;
    DbeDbcsChar = 161;
    OemBackTab = 162;
    DbeRoman = 162;
    Attn = 163;
    DbeNoRoman = 163;
    CrSel = 164;
    DbeEnterWordRegisterMode = 164;
    ExSel = 165;
    DbeEnterImeConfigureMode = 165;
    EraseEof = 166;
    DbeFlushString = 166;
    Play = 167;
    DbeCodeInput = 167;
    Zoom = 168;
    DbeNoCodeInput = 168;
    NoName = 169;
    DbeDetermineString = 169;
    Pa1 = 170;
    DbeEnterDialogConversionMode = 170;
    OemClear = 171;
    DeadCharProcessed = 172;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.KeyStates')]
  DNKeyStates = type Integer;
  DNKeyStatesHelper = record helper for DNKeyStates
  public const
    None = 0;
    Down = 1;
    Toggled = 2;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.ManipulationModes')]
  DNManipulationModes = type Integer;
  DNManipulationModesHelper = record helper for DNManipulationModes
  public const
    None = 0;
    TranslateX = 1;
    TranslateY = 2;
    Translate = 3;
    Rotate = 4;
    Scale = 8;
    All = 15;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.ModifierKeys')]
  DNModifierKeys = type Integer;
  DNModifierKeysHelper = record helper for DNModifierKeys
  public const
    None = 0;
    Alt = 1;
    Control = 2;
    Shift = 4;
    Windows = 8;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.MouseButton')]
  DNMouseButton = type Integer;
  DNMouseButtonHelper = record helper for DNMouseButton
  public const
    Left = 0;
    Middle = 1;
    Right = 2;
    XButton1 = 3;
    XButton2 = 4;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.MouseButtonState')]
  DNMouseButtonState = type Integer;
  DNMouseButtonStateHelper = record helper for DNMouseButtonState
  public const
    Released = 0;
    Pressed = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.RestoreFocusMode')]
  DNRestoreFocusMode = type Integer;
  DNRestoreFocusModeHelper = record helper for DNRestoreFocusMode
  public const
    Auto = 0;
    None = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.StylusButtonState')]
  DNStylusButtonState = type Integer;
  DNStylusButtonStateHelper = record helper for DNStylusButtonState
  public const
    Up = 0;
    Down = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.StylusPointPropertyUnit')]
  DNStylusPointPropertyUnit = type Integer;
  DNStylusPointPropertyUnitHelper = record helper for DNStylusPointPropertyUnit
  public const
    None = 0;
    Inches = 1;
    Centimeters = 2;
    Degrees = 3;
    Radians = 4;
    Seconds = 5;
    Pounds = 6;
    Grams = 7;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.SystemGesture')]
  DNSystemGesture = type Integer;
  DNSystemGestureHelper = record helper for DNSystemGesture
  public const
    None = 0;
    Tap = 16;
    RightTap = 18;
    Drag = 19;
    RightDrag = 20;
    HoldEnter = 21;
    HoldLeave = 22;
    HoverEnter = 23;
    HoverLeave = 24;
    Flick = 31;
    TwoFingerTap = 4352;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.TextCompositionAutoComplete')]
  DNTextCompositionAutoComplete = type Integer;
  DNTextCompositionAutoCompleteHelper = record helper for DNTextCompositionAutoComplete
  public const
    Off = 0;
    On_ = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.TouchAction')]
  DNTouchAction = type Integer;
  DNTouchActionHelper = record helper for DNTouchAction
  public const
    Down = 0;
    Move = 1;
    Up = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.LineBreakCondition')]
  DNLineBreakCondition = type Integer;
  DNLineBreakConditionHelper = record helper for DNLineBreakCondition
  public const
    BreakDesired = 0;
    BreakPossible = 1;
    BreakRestrained = 2;
    BreakAlways = 3;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.LocalizationCategory')]
  DNLocalizationCategory = type Integer;
  DNLocalizationCategoryHelper = record helper for DNLocalizationCategory
  public const
    None = 0;
    Text = 1;
    Title = 2;
    Label_ = 3;
    Button = 4;
    CheckBox = 5;
    ComboBox = 6;
    ListBox = 7;
    Menu = 8;
    RadioButton = 9;
    ToolTip = 10;
    Hyperlink = 11;
    TextFlow = 12;
    XmlData = 13;
    Font = 14;
    Inherit = 15;
    Ignore = 16;
    NeverLocalize = 17;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.ClockState')]
  DNClockState = type Integer;
  DNClockStateHelper = record helper for DNClockState
  public const
    Active = 0;
    Filling = 1;
    Stopped = 2;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.FillBehavior')]
  DNFillBehavior = type Integer;
  DNFillBehaviorHelper = record helper for DNFillBehavior
  public const
    HoldEnd = 0;
    Stop = 1;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.HandoffBehavior')]
  DNHandoffBehavior = type Integer;
  DNHandoffBehaviorHelper = record helper for DNHandoffBehavior
  public const
    SnapshotAndReplace = 0;
    Compose = 1;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.KeyTimeType')]
  DNKeyTimeType = type Integer;
  DNKeyTimeTypeHelper = record helper for DNKeyTimeType
  public const
    Uniform = 0;
    Percent = 1;
    TimeSpan = 2;
    Paced = 3;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.SlipBehavior')]
  DNSlipBehavior = type Integer;
  DNSlipBehaviorHelper = record helper for DNSlipBehavior
  public const
    Grow = 0;
    Slip = 1;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.TimeSeekOrigin')]
  DNTimeSeekOrigin = type Integer;
  DNTimeSeekOriginHelper = record helper for DNTimeSeekOrigin
  public const
    BeginTime = 0;
    Duration = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.BrushMappingMode')]
  DNBrushMappingMode = type Integer;
  DNBrushMappingModeHelper = record helper for DNBrushMappingMode
  public const
    Absolute_ = 0;
    RelativeToBoundingBox = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.FillRule')]
  DNFillRule = type Integer;
  DNFillRuleHelper = record helper for DNFillRule
  public const
    EvenOdd = 0;
    Nonzero = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.FontEmbeddingRight')]
  DNFontEmbeddingRight = type Integer;
  DNFontEmbeddingRightHelper = record helper for DNFontEmbeddingRight
  public const
    Installable = 0;
    InstallableButNoSubsetting = 1;
    InstallableButWithBitmapsOnly = 2;
    InstallableButNoSubsettingAndWithBitmapsOnly = 3;
    RestrictedLicense = 4;
    PreviewAndPrint = 5;
    PreviewAndPrintButNoSubsetting = 6;
    PreviewAndPrintButWithBitmapsOnly = 7;
    PreviewAndPrintButNoSubsettingAndWithBitmapsOnly = 8;
    Editable = 9;
    EditableButNoSubsetting = 10;
    EditableButWithBitmapsOnly = 11;
    EditableButNoSubsettingAndWithBitmapsOnly = 12;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.GeometryCombineMode')]
  DNGeometryCombineMode = type Integer;
  DNGeometryCombineModeHelper = record helper for DNGeometryCombineMode
  public const
    Union = 0;
    Intersect = 1;
    Xor_ = 2;
    Exclude = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.IntersectionDetail')]
  DNIntersectionDetail = type Integer;
  DNIntersectionDetailHelper = record helper for DNIntersectionDetail
  public const
    NotCalculated = 0;
    Empty = 1;
    FullyInside = 2;
    FullyContains = 3;
    Intersects = 4;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.PenLineCap')]
  DNPenLineCap = type Integer;
  DNPenLineCapHelper = record helper for DNPenLineCap
  public const
    Flat = 0;
    Square = 1;
    Round = 2;
    Triangle = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.PenLineJoin')]
  DNPenLineJoin = type Integer;
  DNPenLineJoinHelper = record helper for DNPenLineJoin
  public const
    Miter = 0;
    Bevel = 1;
    Round = 2;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.Stretch')]
  DNStretch = type Integer;
  DNStretchHelper = record helper for DNStretch
  public const
    None = 0;
    Fill = 1;
    Uniform = 2;
    UniformToFill = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.StyleSimulations')]
  DNStyleSimulations = type Integer;
  DNStyleSimulationsHelper = record helper for DNStyleSimulations
  public const
    None = 0;
    BoldSimulation = 1;
    ItalicSimulation = 2;
    BoldItalicSimulation = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.TextFormattingMode')]
  DNTextFormattingMode = type Integer;
  DNTextFormattingModeHelper = record helper for DNTextFormattingMode
  public const
    Ideal = 0;
    Display = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.TextHintingMode')]
  DNTextHintingMode = type Integer;
  DNTextHintingModeHelper = record helper for DNTextHintingMode
  public const
    Auto = 0;
    Fixed = 1;
    Animated = 2;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.TextRenderingMode')]
  DNTextRenderingMode = type Integer;
  DNTextRenderingModeHelper = record helper for DNTextRenderingMode
  public const
    Auto = 0;
    Aliased = 1;
    Grayscale = 2;
    ClearType = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.ToleranceType')]
  DNToleranceType = type Integer;
  DNToleranceTypeHelper = record helper for DNToleranceType
  public const
    Absolute_ = 0;
    Relative = 1;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.Modifiability')]
  DNModifiability = type Integer;
  DNModifiabilityHelper = record helper for DNModifiability
  public const
    Unmodifiable = 0;
    Modifiable = 1;
    Inherit = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.Readability')]
  DNReadability = type Integer;
  DNReadabilityHelper = record helper for DNReadability
  public const
    Unreadable = 0;
    Readable = 1;
    Inherit = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.RoutingStrategy')]
  DNRoutingStrategy = type Integer;
  DNRoutingStrategyHelper = record helper for DNRoutingStrategy
  public const
    Tunnel = 0;
    Bubble = 1;
    Direct = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.SizeToContent')]
  DNSizeToContent = type Integer;
  DNSizeToContentHelper = record helper for DNSizeToContent
  public const
    Manual = 0;
    Width = 1;
    Height = 2;
    WidthAndHeight = 3;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextAlignment')]
  DNTextAlignment = type Integer;
  DNTextAlignmentHelper = record helper for DNTextAlignment
  public const
    Left = 0;
    Right = 1;
    Center = 2;
    Justify = 3;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextDecorationLocation')]
  DNTextDecorationLocation = type Integer;
  DNTextDecorationLocationHelper = record helper for DNTextDecorationLocation
  public const
    Underline = 0;
    OverLine = 1;
    Strikethrough = 2;
    Baseline = 3;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextDecorationUnit')]
  DNTextDecorationUnit = type Integer;
  DNTextDecorationUnitHelper = record helper for DNTextDecorationUnit
  public const
    FontRecommended = 0;
    FontRenderingEmSize = 1;
    Pixel = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextMarkerStyle')]
  DNTextMarkerStyle = type Integer;
  DNTextMarkerStyleHelper = record helper for DNTextMarkerStyle
  public const
    None = 0;
    Disc = 1;
    Circle = 2;
    Square = 3;
    Box = 4;
    LowerRoman = 5;
    UpperRoman = 6;
    LowerLatin = 7;
    UpperLatin = 8;
    Decimal = 9;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextTrimming')]
  DNTextTrimming = type Integer;
  DNTextTrimmingHelper = record helper for DNTextTrimming
  public const
    None = 0;
    CharacterEllipsis = 1;
    WordEllipsis = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextWrapping')]
  DNTextWrapping = type Integer;
  DNTextWrappingHelper = record helper for DNTextWrapping
  public const
    WrapWithOverflow = 0;
    NoWrap = 1;
    Wrap = 2;
  end;


  //-------------namespace: System.Windows.Threading----------------
  [DNTypeName('System.Windows.Threading.DispatcherOperationStatus')]
  DNDispatcherOperationStatus = type Integer;
  DNDispatcherOperationStatusHelper = record helper for DNDispatcherOperationStatus
  public const
    Pending = 0;
    Aborted = 1;
    Completed = 2;
    Executing = 3;
  end;


  //-------------namespace: System.Windows.Threading----------------
  [DNTypeName('System.Windows.Threading.DispatcherPriority')]
  DNDispatcherPriority = type Integer;
  DNDispatcherPriorityHelper = record helper for DNDispatcherPriority
  public const
    Inactive = 0;
    SystemIdle = 1;
    ApplicationIdle = 2;
    ContextIdle = 3;
    Background = 4;
    Input = 5;
    Loaded = 6;
    Render = 7;
    DataBind = 8;
    Normal = 9;
    Send = 10;
    Invalid = -1;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.VerticalAlignment')]
  DNVerticalAlignment = type Integer;
  DNVerticalAlignmentHelper = record helper for DNVerticalAlignment
  public const
    Top = 0;
    Center = 1;
    Bottom = 2;
    Stretch = 3;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.Visibility')]
  DNVisibility = type Integer;
  DNVisibilityHelper = record helper for DNVisibility
  public const
    Visible = 0;
    Hidden = 1;
    Collapsed = 2;
  end;


  //-------------namespace: System.Windows.Xps.Serialization----------------
  [DNTypeName('System.Windows.Xps.Serialization.PrintTicketLevel')]
  DNPrintTicketLevel = type Integer;
  DNPrintTicketLevelHelper = record helper for DNPrintTicketLevel
  public const
    None = 0;
    FixedDocumentSequencePrintTicket = 1;
    FixedDocumentPrintTicket = 2;
    FixedPagePrintTicket = 3;
  end;


  //-------------namespace: System.Windows.Xps----------------
  [DNTypeName('System.Windows.Xps.XpsDocumentNotificationLevel')]
  DNXpsDocumentNotificationLevel = type Integer;
  DNXpsDocumentNotificationLevelHelper = record helper for DNXpsDocumentNotificationLevel
  public const
    None = 0;
    ReceiveNotificationEnabled = 1;
    ReceiveNotificationDisabled = 2;
  end;


  //-------------namespace: System.Xaml.Schema----------------
  [DNTypeName('System.Xaml.Schema.AllowedMemberLocations')]
  DNAllowedMemberLocations = type Integer;
  DNAllowedMemberLocationsHelper = record helper for DNAllowedMemberLocations
  public const
    None = 0;
    Attribute = 1;
    MemberElement = 2;
    Any = 3;
  end;


  //-------------namespace: System.Xaml.Schema----------------
  [DNTypeName('System.Xaml.Schema.ShouldSerializeResult')]
  DNShouldSerializeResult = type Integer;
  DNShouldSerializeResultHelper = record helper for DNShouldSerializeResult
  public const
    Default_ = 0;
    True = 1;
    False = 2;
  end;


  //-------------namespace: System.Xaml----------------
  [DNTypeName('System.Xaml.XamlNodeType')]
  DNXamlNodeType = type Integer;
  DNXamlNodeTypeHelper = record helper for DNXamlNodeType
  public const
    None = 0;
    StartObject = 1;
    GetObject = 2;
    EndObject = 3;
    StartMember = 4;
    EndMember = 5;
    Value = 6;
    NamespaceDeclaration = 7;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ConformanceLevel')]
  DNConformanceLevel = type Integer;
  DNConformanceLevelHelper = record helper for DNConformanceLevel
  public const
    Auto = 0;
    Fragment = 1;
    Document = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.DtdProcessing')]
  DNDtdProcessing = type Integer;
  DNDtdProcessingHelper = record helper for DNDtdProcessing
  public const
    Prohibit = 0;
    Ignore = 1;
    Parse = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.NamespaceHandling')]
  DNNamespaceHandling = type Integer;
  DNNamespaceHandlingHelper = record helper for DNNamespaceHandling
  public const
    Default_ = 0;
    OmitDuplicates = 1;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.NewLineHandling')]
  DNNewLineHandling = type Integer;
  DNNewLineHandlingHelper = record helper for DNNewLineHandling
  public const
    Replace = 0;
    Entitize = 1;
    None = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ReadState')]
  DNReadState = type Integer;
  DNReadStateHelper = record helper for DNReadState
  public const
    Initial = 0;
    Interactive = 1;
    Error = 2;
    EndOfFile = 3;
    Closed = 4;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaDerivationMethod')]
  DNXmlSchemaDerivationMethod = type Integer;
  DNXmlSchemaDerivationMethodHelper = record helper for DNXmlSchemaDerivationMethod
  public const
    Empty = 0;
    Substitution = 1;
    Extension = 2;
    Restriction = 4;
    List = 8;
    Union = 16;
    All = 255;
    None = 256;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaForm')]
  DNXmlSchemaForm = type Integer;
  DNXmlSchemaFormHelper = record helper for DNXmlSchemaForm
  public const
    None = 0;
    Qualified = 1;
    Unqualified = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaUse')]
  DNXmlSchemaUse = type Integer;
  DNXmlSchemaUseHelper = record helper for DNXmlSchemaUse
  public const
    None = 0;
    Optional = 1;
    Prohibited = 2;
    Required = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaValidationFlags')]
  DNXmlSchemaValidationFlags = type Integer;
  DNXmlSchemaValidationFlagsHelper = record helper for DNXmlSchemaValidationFlags
  public const
    None = 0;
    ProcessInlineSchema = 1;
    ProcessSchemaLocation = 2;
    ReportValidationWarnings = 4;
    ProcessIdentityConstraints = 8;
    AllowXmlAttributes = 16;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaValidity')]
  DNXmlSchemaValidity = type Integer;
  DNXmlSchemaValidityHelper = record helper for DNXmlSchemaValidity
  public const
    NotKnown = 0;
    Valid = 1;
    Invalid = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSeverityType')]
  DNXmlSeverityType = type Integer;
  DNXmlSeverityTypeHelper = record helper for DNXmlSeverityType
  public const
    Error = 0;
    Warning = 1;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlTypeCode')]
  DNXmlTypeCode = type Integer;
  DNXmlTypeCodeHelper = record helper for DNXmlTypeCode
  public const
    None = 0;
    Item = 1;
    Node = 2;
    Document = 3;
    Element = 4;
    Attribute = 5;
    Namespace = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    Text = 9;
    AnyAtomicType = 10;
    UntypedAtomic = 11;
    String_ = 12;
    Boolean = 13;
    Decimal = 14;
    Float = 15;
    Double = 16;
    Duration = 17;
    DateTime = 18;
    Time = 19;
    Date = 20;
    GYearMonth = 21;
    GYear = 22;
    GMonthDay = 23;
    GDay = 24;
    GMonth = 25;
    HexBinary = 26;
    Base64Binary = 27;
    AnyUri = 28;
    QName = 29;
    Notation = 30;
    NormalizedString = 31;
    Token = 32;
    Language = 33;
    NmToken = 34;
    Name = 35;
    NCName = 36;
    Id = 37;
    Idref = 38;
    Entity = 39;
    Integer = 40;
    NonPositiveInteger = 41;
    NegativeInteger = 42;
    Long = 43;
    Int = 44;
    Short = 45;
    Byte = 46;
    NonNegativeInteger = 47;
    UnsignedLong = 48;
    UnsignedInt = 49;
    UnsignedShort = 50;
    UnsignedByte = 51;
    PositiveInteger = 52;
    YearMonthDuration = 53;
    DayTimeDuration = 54;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ValidationType')]
  DNValidationType = type Integer;
  DNValidationTypeHelper = record helper for DNValidationType
  public const
    None = 0;
    Auto = 1;
    DTD = 2;
    XDR = 3;
    Schema = 4;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.WriteState')]
  DNWriteState = type Integer;
  DNWriteStateHelper = record helper for DNWriteState
  public const
    Start = 0;
    Prolog = 1;
    Element = 2;
    Attribute = 3;
    Content = 4;
    Closed = 5;
    Error = 6;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNamespaceScope')]
  DNXmlNamespaceScope = type Integer;
  DNXmlNamespaceScopeHelper = record helper for DNXmlNamespaceScope
  public const
    All = 0;
    ExcludeXml = 1;
    Local = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeChangedAction')]
  DNXmlNodeChangedAction = type Integer;
  DNXmlNodeChangedActionHelper = record helper for DNXmlNodeChangedAction
  public const
    Insert = 0;
    Remove = 1;
    Change = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeOrder')]
  DNXmlNodeOrder = type Integer;
  DNXmlNodeOrderHelper = record helper for DNXmlNodeOrder
  public const
    Before = 0;
    After = 1;
    Same = 2;
    Unknown = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeType')]
  DNXmlNodeType = type Integer;
  DNXmlNodeTypeHelper = record helper for DNXmlNodeType
  public const
    None = 0;
    Element = 1;
    Attribute = 2;
    Text = 3;
    CDATA = 4;
    EntityReference = 5;
    Entity = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    Document = 9;
    DocumentType = 10;
    DocumentFragment = 11;
    Notation = 12;
    Whitespace = 13;
    SignificantWhitespace = 14;
    EndElement = 15;
    EndEntity = 16;
    XmlDeclaration = 17;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlOutputMethod')]
  DNXmlOutputMethod = type Integer;
  DNXmlOutputMethodHelper = record helper for DNXmlOutputMethod
  public const
    Xml = 0;
    Html = 1;
    Text = 2;
    AutoDetect = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlSpace')]
  DNXmlSpace = type Integer;
  DNXmlSpaceHelper = record helper for DNXmlSpace
  public const
    None = 0;
    Default_ = 1;
    Preserve = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlCaseOrder')]
  DNXmlCaseOrder = type Integer;
  DNXmlCaseOrderHelper = record helper for DNXmlCaseOrder
  public const
    None = 0;
    UpperFirst = 1;
    LowerFirst = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlDataType')]
  DNXmlDataType = type Integer;
  DNXmlDataTypeHelper = record helper for DNXmlDataType
  public const
    Text = 1;
    Number = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlSortOrder')]
  DNXmlSortOrder = type Integer;
  DNXmlSortOrderHelper = record helper for DNXmlSortOrder
  public const
    Ascending = 1;
    Descending = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathNamespaceScope')]
  DNXPathNamespaceScope = type Integer;
  DNXPathNamespaceScopeHelper = record helper for DNXPathNamespaceScope
  public const
    All = 0;
    ExcludeXml = 1;
    Local = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathNodeType')]
  DNXPathNodeType = type Integer;
  DNXPathNodeTypeHelper = record helper for DNXPathNodeType
  public const
    Root = 0;
    Element = 1;
    Attribute = 2;
    Namespace = 3;
    Text = 4;
    SignificantWhitespace = 5;
    Whitespace = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    All = 9;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathResultType')]
  DNXPathResultType = type Integer;
  DNXPathResultTypeHelper = record helper for DNXPathResultType
  public const
    Number = 0;
    String_ = 1;
    Navigator = 1;
    Boolean = 2;
    NodeSet = 3;
    Any = 5;
    Error = 6;
  end;




type


{ declares }

  DNAttachedPropertyBrowsableAttribute = interface; // type: System.Windows.AttachedPropertyBrowsableAttribute, namespace: System.Windows
  DNLocalizabilityAttribute = interface; // type: System.Windows.LocalizabilityAttribute, namespace: System.Windows
  DNX509CertificateCollection = interface; // type: System.Security.Cryptography.X509Certificates.X509CertificateCollection, namespace: System.Security.Cryptography.X509Certificates
  DNXmlSchemaObjectCollection = interface; // type: System.Xml.Schema.XmlSchemaObjectCollection, namespace: System.Xml.Schema
  DNPrintPropertyDictionary = interface; // type: System.Printing.IndexedProperties.PrintPropertyDictionary, namespace: System.Printing.IndexedProperties
  DNIBindingList = interface; // type: System.ComponentModel.IBindingList, namespace: System.ComponentModel
  DNICollectionView = interface; // type: System.ComponentModel.ICollectionView, namespace: System.ComponentModel
  DNSortDescriptionCollection = interface; // type: System.ComponentModel.SortDescriptionCollection, namespace: System.ComponentModel
  DNStrokeCollection = interface; // type: System.Windows.Ink.StrokeCollection, namespace: System.Windows.Ink
  DNStylusPointCollection = interface; // type: System.Windows.Input.StylusPointCollection, namespace: System.Windows.Input
  DNTouchPointCollection = interface; // type: System.Windows.Input.TouchPointCollection, namespace: System.Windows.Input
  DNTriggerCollection = interface; // type: System.Windows.TriggerCollection, namespace: System.Windows
  DNStylusButtonCollection = interface; // type: System.Windows.Input.StylusButtonCollection, namespace: System.Windows.Input
  DNComponentCollection = interface; // type: System.ComponentModel.ComponentCollection, namespace: System.ComponentModel
  DNINotifyCollectionChanged = interface; // type: System.Collections.Specialized.INotifyCollectionChanged, namespace: System.Collections.Specialized
  DNNameObjectCollectionBase_KeysCollection = interface; // type: System.Collections.Specialized.NameObjectCollectionBase+KeysCollection, namespace: System.Collections.Specialized
  DNNameValueCollection = interface; // type: System.Collections.Specialized.NameValueCollection, namespace: System.Collections.Specialized
  DNWebHeaderCollection = interface; // type: System.Net.WebHeaderCollection, namespace: System.Net
  DNStringCollection = interface; // type: System.Collections.Specialized.StringCollection, namespace: System.Collections.Specialized
  DNStringDictionary = interface; // type: System.Collections.Specialized.StringDictionary, namespace: System.Collections.Specialized
  DNStringEnumerator = interface; // type: System.Collections.Specialized.StringEnumerator, namespace: System.Collections.Specialized
  DNAttributeCollection = interface; // type: System.ComponentModel.AttributeCollection, namespace: System.ComponentModel
  DNGroupDescription = interface; // type: System.ComponentModel.GroupDescription, namespace: System.ComponentModel
  DNINotifyPropertyChanged = interface; // type: System.ComponentModel.INotifyPropertyChanged, namespace: System.ComponentModel
  DNPropertyDescriptor = interface; // type: System.ComponentModel.PropertyDescriptor, namespace: System.ComponentModel
  DNPropertyDescriptorCollection = interface; // type: System.ComponentModel.PropertyDescriptorCollection, namespace: System.ComponentModel
  DNTypeConverter = interface; // type: System.ComponentModel.TypeConverter, namespace: System.ComponentModel
  DNTypeConverter_StandardValuesCollection = interface; // type: System.ComponentModel.TypeConverter+StandardValuesCollection, namespace: System.ComponentModel
  DNNullableConverter = interface; // type: System.ComponentModel.NullableConverter, namespace: System.ComponentModel
  DNExpressionConverter = interface; // type: System.Windows.ExpressionConverter, namespace: System.Windows
  DNSourceSwitch = interface; // type: System.Diagnostics.SourceSwitch, namespace: System.Diagnostics
  DNTraceEventCache = interface; // type: System.Diagnostics.TraceEventCache, namespace: System.Diagnostics
  DNTraceFilter = interface; // type: System.Diagnostics.TraceFilter, namespace: System.Diagnostics
  DNTraceListenerCollection = interface; // type: System.Diagnostics.TraceListenerCollection, namespace: System.Diagnostics
  DNTraceSource = interface; // type: System.Diagnostics.TraceSource, namespace: System.Diagnostics
  DNBindingRestrictions = interface; // type: System.Dynamic.BindingRestrictions, namespace: System.Dynamic
  DNCallInfo = interface; // type: System.Dynamic.CallInfo, namespace: System.Dynamic
  DNDynamicMetaObject = interface; // type: System.Dynamic.DynamicMetaObject, namespace: System.Dynamic
  DNDynamicObject = interface; // type: System.Dynamic.DynamicObject, namespace: System.Dynamic
  DNNotifyCollectionChangedEventArgs = interface; // type: System.Collections.Specialized.NotifyCollectionChangedEventArgs, namespace: System.Collections.Specialized
  DNAsyncCompletedEventArgs = interface; // type: System.ComponentModel.AsyncCompletedEventArgs, namespace: System.ComponentModel
  DNGetPageCompletedEventArgs = interface; // type: System.Windows.Documents.GetPageCompletedEventArgs, namespace: System.Windows.Documents
  DNWritingCompletedEventArgs = interface; // type: System.Windows.Documents.Serialization.WritingCompletedEventArgs, namespace: System.Windows.Documents.Serialization
  DNCancelEventArgs = interface; // type: System.ComponentModel.CancelEventArgs, namespace: System.ComponentModel
  DNCurrentChangingEventArgs = interface; // type: System.ComponentModel.CurrentChangingEventArgs, namespace: System.ComponentModel
  DNHandledEventArgs = interface; // type: System.ComponentModel.HandledEventArgs, namespace: System.ComponentModel
  DNListChangedEventArgs = interface; // type: System.ComponentModel.ListChangedEventArgs, namespace: System.ComponentModel
  DNProgressChangedEventArgs = interface; // type: System.ComponentModel.ProgressChangedEventArgs, namespace: System.ComponentModel
  DNWritingProgressChangedEventArgs = interface; // type: System.Windows.Documents.Serialization.WritingProgressChangedEventArgs, namespace: System.Windows.Documents.Serialization
  DNPropertyChangedEventArgs = interface; // type: System.ComponentModel.PropertyChangedEventArgs, namespace: System.ComponentModel
  DNAsyncContentLoadedEventArgs = interface; // type: System.Windows.Automation.AsyncContentLoadedEventArgs, namespace: System.Windows.Automation
  DNPagesChangedEventArgs = interface; // type: System.Windows.Documents.PagesChangedEventArgs, namespace: System.Windows.Documents
  DNWritingCancelledEventArgs = interface; // type: System.Windows.Documents.Serialization.WritingCancelledEventArgs, namespace: System.Windows.Documents.Serialization
  DNWritingPrintTicketRequiredEventArgs = interface; // type: System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs, namespace: System.Windows.Documents.Serialization
  DNDrawingAttributesReplacedEventArgs = interface; // type: System.Windows.Ink.DrawingAttributesReplacedEventArgs, namespace: System.Windows.Ink
  DNLassoSelectionChangedEventArgs = interface; // type: System.Windows.Ink.LassoSelectionChangedEventArgs, namespace: System.Windows.Ink
  DNPropertyDataChangedEventArgs = interface; // type: System.Windows.Ink.PropertyDataChangedEventArgs, namespace: System.Windows.Ink
  DNStrokeCollectionChangedEventArgs = interface; // type: System.Windows.Ink.StrokeCollectionChangedEventArgs, namespace: System.Windows.Ink
  DNStrokeHitEventArgs = interface; // type: System.Windows.Ink.StrokeHitEventArgs, namespace: System.Windows.Ink
  DNStylusPointsReplacedEventArgs = interface; // type: System.Windows.Ink.StylusPointsReplacedEventArgs, namespace: System.Windows.Ink
  DNNotifyInputEventArgs = interface; // type: System.Windows.Input.NotifyInputEventArgs, namespace: System.Windows.Input
  DNProcessInputEventArgs = interface; // type: System.Windows.Input.ProcessInputEventArgs, namespace: System.Windows.Input
  DNPreProcessInputEventArgs = interface; // type: System.Windows.Input.PreProcessInputEventArgs, namespace: System.Windows.Input
  DNXamlSetMarkupExtensionEventArgs = interface; // type: System.Windows.Markup.XamlSetMarkupExtensionEventArgs, namespace: System.Windows.Markup
  DNXamlSetTypeConverterEventArgs = interface; // type: System.Windows.Markup.XamlSetTypeConverterEventArgs, namespace: System.Windows.Markup
  DNExceptionEventArgs = interface; // type: System.Windows.Media.ExceptionEventArgs, namespace: System.Windows.Media
  DNDownloadProgressEventArgs = interface; // type: System.Windows.Media.Imaging.DownloadProgressEventArgs, namespace: System.Windows.Media.Imaging
  DNMediaScriptCommandEventArgs = interface; // type: System.Windows.Media.MediaScriptCommandEventArgs, namespace: System.Windows.Media
  DNRoutedEventArgs = interface; // type: System.Windows.RoutedEventArgs, namespace: System.Windows
  DNContextMenuEventArgs = interface; // type: System.Windows.Controls.ContextMenuEventArgs, namespace: System.Windows.Controls
  DNToolTipEventArgs = interface; // type: System.Windows.Controls.ToolTipEventArgs, namespace: System.Windows.Controls
  DNDataTransferEventArgs = interface; // type: System.Windows.Data.DataTransferEventArgs, namespace: System.Windows.Data
  DNDpiChangedEventArgs = interface; // type: System.Windows.DpiChangedEventArgs, namespace: System.Windows
  DNDragEventArgs = interface; // type: System.Windows.DragEventArgs, namespace: System.Windows
  DNGiveFeedbackEventArgs = interface; // type: System.Windows.GiveFeedbackEventArgs, namespace: System.Windows
  DNCanExecuteRoutedEventArgs = interface; // type: System.Windows.Input.CanExecuteRoutedEventArgs, namespace: System.Windows.Input
  DNExecutedRoutedEventArgs = interface; // type: System.Windows.Input.ExecutedRoutedEventArgs, namespace: System.Windows.Input
  DNInputEventArgs = interface; // type: System.Windows.Input.InputEventArgs, namespace: System.Windows.Input
  DNKeyboardFocusChangedEventArgs = interface; // type: System.Windows.Input.KeyboardFocusChangedEventArgs, namespace: System.Windows.Input
  DNKeyEventArgs = interface; // type: System.Windows.Input.KeyEventArgs, namespace: System.Windows.Input
  DNManipulationBoundaryFeedbackEventArgs = interface; // type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs, namespace: System.Windows.Input
  DNManipulationCompletedEventArgs = interface; // type: System.Windows.Input.ManipulationCompletedEventArgs, namespace: System.Windows.Input
  DNManipulationDeltaEventArgs = interface; // type: System.Windows.Input.ManipulationDeltaEventArgs, namespace: System.Windows.Input
  DNManipulationInertiaStartingEventArgs = interface; // type: System.Windows.Input.ManipulationInertiaStartingEventArgs, namespace: System.Windows.Input
  DNManipulationStartedEventArgs = interface; // type: System.Windows.Input.ManipulationStartedEventArgs, namespace: System.Windows.Input
  DNManipulationStartingEventArgs = interface; // type: System.Windows.Input.ManipulationStartingEventArgs, namespace: System.Windows.Input
  DNMouseEventArgs = interface; // type: System.Windows.Input.MouseEventArgs, namespace: System.Windows.Input
  DNMouseButtonEventArgs = interface; // type: System.Windows.Input.MouseButtonEventArgs, namespace: System.Windows.Input
  DNMouseWheelEventArgs = interface; // type: System.Windows.Input.MouseWheelEventArgs, namespace: System.Windows.Input
  DNQueryCursorEventArgs = interface; // type: System.Windows.Input.QueryCursorEventArgs, namespace: System.Windows.Input
  DNStylusEventArgs = interface; // type: System.Windows.Input.StylusEventArgs, namespace: System.Windows.Input
  DNStylusButtonEventArgs = interface; // type: System.Windows.Input.StylusButtonEventArgs, namespace: System.Windows.Input
  DNStylusDownEventArgs = interface; // type: System.Windows.Input.StylusDownEventArgs, namespace: System.Windows.Input
  DNStylusSystemGestureEventArgs = interface; // type: System.Windows.Input.StylusSystemGestureEventArgs, namespace: System.Windows.Input
  DNTextCompositionEventArgs = interface; // type: System.Windows.Input.TextCompositionEventArgs, namespace: System.Windows.Input
  DNTouchEventArgs = interface; // type: System.Windows.Input.TouchEventArgs, namespace: System.Windows.Input
  DNQueryContinueDragEventArgs = interface; // type: System.Windows.QueryContinueDragEventArgs, namespace: System.Windows
  DNRequestBringIntoViewEventArgs = interface; // type: System.Windows.RequestBringIntoViewEventArgs, namespace: System.Windows
  DNSizeChangedEventArgs = interface; // type: System.Windows.SizeChangedEventArgs, namespace: System.Windows
  DNDispatcherUnhandledExceptionEventArgs = interface; // type: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs, namespace: System.Windows.Threading
  DNDispatcherUnhandledExceptionFilterEventArgs = interface; // type: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs, namespace: System.Windows.Threading
  DNDispatcherHookEventArgs = interface; // type: System.Windows.Threading.DispatcherHookEventArgs, namespace: System.Windows.Threading
  DNValidationEventArgs = interface; // type: System.Xml.Schema.ValidationEventArgs, namespace: System.Xml.Schema
  DNXmlNodeChangedEventArgs = interface; // type: System.Xml.XmlNodeChangedEventArgs, namespace: System.Xml
  DNXmlSchemaException = interface; // type: System.Xml.Schema.XmlSchemaException, namespace: System.Xml.Schema
  DNIComponent = interface; // type: System.ComponentModel.IComponent, namespace: System.ComponentModel
  DNIContainer = interface; // type: System.ComponentModel.IContainer, namespace: System.ComponentModel
  DNPackage = interface; // type: System.IO.Packaging.Package, namespace: System.IO.Packaging
  DNPackagePart = interface; // type: System.IO.Packaging.PackagePart, namespace: System.IO.Packaging
  DNPackagePartCollection = interface; // type: System.IO.Packaging.PackagePartCollection, namespace: System.IO.Packaging
  DNPackageProperties = interface; // type: System.IO.Packaging.PackageProperties, namespace: System.IO.Packaging
  DNPackageRelationship = interface; // type: System.IO.Packaging.PackageRelationship, namespace: System.IO.Packaging
  DNPackageRelationshipCollection = interface; // type: System.IO.Packaging.PackageRelationshipCollection, namespace: System.IO.Packaging
  DNISite = interface; // type: System.ComponentModel.ISite, namespace: System.ComponentModel
  DNITypeDescriptorContext = interface; // type: System.ComponentModel.ITypeDescriptorContext, namespace: System.ComponentModel
  DNIValueSerializerContext = interface; // type: System.Windows.Markup.IValueSerializerContext, namespace: System.Windows.Markup
  DNCatchBlock = interface; // type: System.Linq.Expressions.CatchBlock, namespace: System.Linq.Expressions
  DNElementInit = interface; // type: System.Linq.Expressions.ElementInit, namespace: System.Linq.Expressions
  DNExpression = interface; // type: System.Linq.Expressions.Expression, namespace: System.Linq.Expressions
  DNBinaryExpression = interface; // type: System.Linq.Expressions.BinaryExpression, namespace: System.Linq.Expressions
  DNBlockExpression = interface; // type: System.Linq.Expressions.BlockExpression, namespace: System.Linq.Expressions
  DNConditionalExpression = interface; // type: System.Linq.Expressions.ConditionalExpression, namespace: System.Linq.Expressions
  DNConstantExpression = interface; // type: System.Linq.Expressions.ConstantExpression, namespace: System.Linq.Expressions
  DNDebugInfoExpression = interface; // type: System.Linq.Expressions.DebugInfoExpression, namespace: System.Linq.Expressions
  DNDefaultExpression = interface; // type: System.Linq.Expressions.DefaultExpression, namespace: System.Linq.Expressions
  DNDynamicExpression = interface; // type: System.Linq.Expressions.DynamicExpression, namespace: System.Linq.Expressions
  DNGotoExpression = interface; // type: System.Linq.Expressions.GotoExpression, namespace: System.Linq.Expressions
  DNIndexExpression = interface; // type: System.Linq.Expressions.IndexExpression, namespace: System.Linq.Expressions
  DNInvocationExpression = interface; // type: System.Linq.Expressions.InvocationExpression, namespace: System.Linq.Expressions
  DNLabelExpression = interface; // type: System.Linq.Expressions.LabelExpression, namespace: System.Linq.Expressions
  DNLambdaExpression = interface; // type: System.Linq.Expressions.LambdaExpression, namespace: System.Linq.Expressions
  DNListInitExpression = interface; // type: System.Linq.Expressions.ListInitExpression, namespace: System.Linq.Expressions
  DNLoopExpression = interface; // type: System.Linq.Expressions.LoopExpression, namespace: System.Linq.Expressions
  DNMemberExpression = interface; // type: System.Linq.Expressions.MemberExpression, namespace: System.Linq.Expressions
  DNMemberInitExpression = interface; // type: System.Linq.Expressions.MemberInitExpression, namespace: System.Linq.Expressions
  DNMethodCallExpression = interface; // type: System.Linq.Expressions.MethodCallExpression, namespace: System.Linq.Expressions
  DNNewArrayExpression = interface; // type: System.Linq.Expressions.NewArrayExpression, namespace: System.Linq.Expressions
  DNNewExpression = interface; // type: System.Linq.Expressions.NewExpression, namespace: System.Linq.Expressions
  DNParameterExpression = interface; // type: System.Linq.Expressions.ParameterExpression, namespace: System.Linq.Expressions
  DNRuntimeVariablesExpression = interface; // type: System.Linq.Expressions.RuntimeVariablesExpression, namespace: System.Linq.Expressions
  DNSwitchExpression = interface; // type: System.Linq.Expressions.SwitchExpression, namespace: System.Linq.Expressions
  DNTryExpression = interface; // type: System.Linq.Expressions.TryExpression, namespace: System.Linq.Expressions
  DNTypeBinaryExpression = interface; // type: System.Linq.Expressions.TypeBinaryExpression, namespace: System.Linq.Expressions
  DNUnaryExpression = interface; // type: System.Linq.Expressions.UnaryExpression, namespace: System.Linq.Expressions
  DNLabelTarget = interface; // type: System.Linq.Expressions.LabelTarget, namespace: System.Linq.Expressions
  DNMemberBinding = interface; // type: System.Linq.Expressions.MemberBinding, namespace: System.Linq.Expressions
  DNMemberAssignment = interface; // type: System.Linq.Expressions.MemberAssignment, namespace: System.Linq.Expressions
  DNMemberListBinding = interface; // type: System.Linq.Expressions.MemberListBinding, namespace: System.Linq.Expressions
  DNMemberMemberBinding = interface; // type: System.Linq.Expressions.MemberMemberBinding, namespace: System.Linq.Expressions
  DNSwitchCase = interface; // type: System.Linq.Expressions.SwitchCase, namespace: System.Linq.Expressions
  DNSymbolDocumentInfo = interface; // type: System.Linq.Expressions.SymbolDocumentInfo, namespace: System.Linq.Expressions
  DNTraceListener = interface; // type: System.Diagnostics.TraceListener, namespace: System.Diagnostics
  DNWebRequest = interface; // type: System.Net.WebRequest, namespace: System.Net
  DNHttpWebRequest = interface; // type: System.Net.HttpWebRequest, namespace: System.Net
  DNWebResponse = interface; // type: System.Net.WebResponse, namespace: System.Net
  DNRequestCachePolicy = interface; // type: System.Net.Cache.RequestCachePolicy, namespace: System.Net.Cache
  DNCookie = interface; // type: System.Net.Cookie, namespace: System.Net
  DNCookieCollection = interface; // type: System.Net.CookieCollection, namespace: System.Net
  DNCookieContainer = interface; // type: System.Net.CookieContainer, namespace: System.Net
  DNICredentials = interface; // type: System.Net.ICredentials, namespace: System.Net
  DNIWebProxy = interface; // type: System.Net.IWebProxy, namespace: System.Net
  DNIWebRequestCreate = interface; // type: System.Net.IWebRequestCreate, namespace: System.Net
  DNNetworkCredential = interface; // type: System.Net.NetworkCredential, namespace: System.Net
  DNTransportContext = interface; // type: System.Net.TransportContext, namespace: System.Net
  DNPrintProperty = interface; // type: System.Printing.IndexedProperties.PrintProperty, namespace: System.Printing.IndexedProperties
  DNPageImageableArea = interface; // type: System.Printing.PageImageableArea, namespace: System.Printing
  DNPageMediaSize = interface; // type: System.Printing.PageMediaSize, namespace: System.Printing
  DNPageResolution = interface; // type: System.Printing.PageResolution, namespace: System.Printing
  DNPageScalingFactorRange = interface; // type: System.Printing.PageScalingFactorRange, namespace: System.Printing
  DNPrintCapabilities = interface; // type: System.Printing.PrintCapabilities, namespace: System.Printing
  DNPrintDocumentImageableArea = interface; // type: System.Printing.PrintDocumentImageableArea, namespace: System.Printing
  DNPrintJobSettings = interface; // type: System.Printing.PrintJobSettings, namespace: System.Printing
  DNPrintQueueStringProperty = interface; // type: System.Printing.PrintQueueStringProperty, namespace: System.Printing
  DNPrintSystemObject = interface; // type: System.Printing.PrintSystemObject, namespace: System.Printing
  DNPrintDriver = interface; // type: System.Printing.PrintDriver, namespace: System.Printing
  DNPrintProcessor = interface; // type: System.Printing.PrintProcessor, namespace: System.Printing
  DNPrintPort = interface; // type: System.Printing.PrintPort, namespace: System.Printing
  DNPrintQueue = interface; // type: System.Printing.PrintQueue, namespace: System.Printing
  DNPrintServer = interface; // type: System.Printing.PrintServer, namespace: System.Printing
  DNPrintSystemJobInfo = interface; // type: System.Printing.PrintSystemJobInfo, namespace: System.Printing
  DNPrintJobInfoCollection = interface; // type: System.Printing.PrintJobInfoCollection, namespace: System.Printing
  DNPrintQueueCollection = interface; // type: System.Printing.PrintQueueCollection, namespace: System.Printing
  DNPrintTicket = interface; // type: System.Printing.PrintTicket, namespace: System.Printing
  DNCallSiteBinder = interface; // type: System.Runtime.CompilerServices.CallSiteBinder, namespace: System.Runtime.CompilerServices
  DNBinaryOperationBinder = interface; // type: System.Dynamic.BinaryOperationBinder, namespace: System.Dynamic
  DNConvertBinder = interface; // type: System.Dynamic.ConvertBinder, namespace: System.Dynamic
  DNCreateInstanceBinder = interface; // type: System.Dynamic.CreateInstanceBinder, namespace: System.Dynamic
  DNDeleteIndexBinder = interface; // type: System.Dynamic.DeleteIndexBinder, namespace: System.Dynamic
  DNDeleteMemberBinder = interface; // type: System.Dynamic.DeleteMemberBinder, namespace: System.Dynamic
  DNGetIndexBinder = interface; // type: System.Dynamic.GetIndexBinder, namespace: System.Dynamic
  DNGetMemberBinder = interface; // type: System.Dynamic.GetMemberBinder, namespace: System.Dynamic
  DNInvokeBinder = interface; // type: System.Dynamic.InvokeBinder, namespace: System.Dynamic
  DNInvokeMemberBinder = interface; // type: System.Dynamic.InvokeMemberBinder, namespace: System.Dynamic
  DNSetIndexBinder = interface; // type: System.Dynamic.SetIndexBinder, namespace: System.Dynamic
  DNSetMemberBinder = interface; // type: System.Dynamic.SetMemberBinder, namespace: System.Dynamic
  DNUnaryOperationBinder = interface; // type: System.Dynamic.UnaryOperationBinder, namespace: System.Dynamic
  DNDebugInfoGenerator = interface; // type: System.Runtime.CompilerServices.DebugInfoGenerator, namespace: System.Runtime.CompilerServices
  DNChannelBinding = interface; // type: System.Security.Authentication.ExtendedProtection.ChannelBinding, namespace: System.Security.Authentication.ExtendedProtection
  DNTokenBinding = interface; // type: System.Security.Authentication.ExtendedProtection.TokenBinding, namespace: System.Security.Authentication.ExtendedProtection
  DNX509CertificateCollection_X509CertificateEnumerator = interface; // type: System.Security.Cryptography.X509Certificates.X509CertificateCollection+X509CertificateEnumerator, namespace: System.Security.Cryptography.X509Certificates
  DNX509Chain = interface; // type: System.Security.Cryptography.X509Certificates.X509Chain, namespace: System.Security.Cryptography.X509Certificates
  DNDataObject = interface; // type: System.Security.Cryptography.Xml.DataObject, namespace: System.Security.Cryptography.Xml
  DNKeyInfo = interface; // type: System.Security.Cryptography.Xml.KeyInfo, namespace: System.Security.Cryptography.Xml
  DNKeyInfoClause = interface; // type: System.Security.Cryptography.Xml.KeyInfoClause, namespace: System.Security.Cryptography.Xml
  DNReference = interface; // type: System.Security.Cryptography.Xml.Reference, namespace: System.Security.Cryptography.Xml
  DNSignature = interface; // type: System.Security.Cryptography.Xml.Signature, namespace: System.Security.Cryptography.Xml
  DNSignedInfo = interface; // type: System.Security.Cryptography.Xml.SignedInfo, namespace: System.Security.Cryptography.Xml
  DNTransformChain = interface; // type: System.Security.Cryptography.Xml.TransformChain, namespace: System.Security.Cryptography.Xml
  DNUri = interface; // type: System.Uri, namespace: System
  DNSortDescription = interface; // type: System.ComponentModel.SortDescription, namespace: System.ComponentModel
  DNValidationResult = interface; // type: System.Printing.ValidationResult, namespace: System.Printing
  DNPageRange = interface; // type: System.Windows.Controls.PageRange, namespace: System.Windows.Controls
  DNDependencyPropertyChangedEventArgs = interface; // type: System.Windows.DependencyPropertyChangedEventArgs, namespace: System.Windows
  DNDpiScale = interface; // type: System.Windows.DpiScale, namespace: System.Windows
  DNDuration = interface; // type: System.Windows.Duration, namespace: System.Windows
  DNFontStretch = interface; // type: System.Windows.FontStretch, namespace: System.Windows
  DNFontStyle = interface; // type: System.Windows.FontStyle, namespace: System.Windows
  DNFontWeight = interface; // type: System.Windows.FontWeight, namespace: System.Windows
  DNStylusPoint = interface; // type: System.Windows.Input.StylusPoint, namespace: System.Windows.Input
  DNInt32Rect = interface; // type: System.Windows.Int32Rect, namespace: System.Windows
  DNMSG = interface; // type: System.Windows.Interop.MSG, namespace: System.Windows.Interop
  DNLocalValueEntry = interface; // type: System.Windows.LocalValueEntry, namespace: System.Windows
  DNLocalValueEnumerator = interface; // type: System.Windows.LocalValueEnumerator, namespace: System.Windows
  DNKeyTime = interface; // type: System.Windows.Media.Animation.KeyTime, namespace: System.Windows.Media.Animation
  DNRepeatBehavior = interface; // type: System.Windows.Media.Animation.RepeatBehavior, namespace: System.Windows.Media.Animation
  DNTimelineCollection_Enumerator = interface; // type: System.Windows.Media.Animation.TimelineCollection+Enumerator, namespace: System.Windows.Media.Animation
  DNColor = interface; // type: System.Windows.Media.Color, namespace: System.Windows.Media
  DNDoubleCollection_Enumerator = interface; // type: System.Windows.Media.DoubleCollection+Enumerator, namespace: System.Windows.Media
  DNMatrix = interface; // type: System.Windows.Media.Matrix, namespace: System.Windows.Media
  DNMatrix3D = interface; // type: System.Windows.Media.Media3D.Matrix3D, namespace: System.Windows.Media.Media3D
  DNPoint3D = interface; // type: System.Windows.Media.Media3D.Point3D, namespace: System.Windows.Media.Media3D
  DNPoint4D = interface; // type: System.Windows.Media.Media3D.Point4D, namespace: System.Windows.Media.Media3D
  DNQuaternion = interface; // type: System.Windows.Media.Media3D.Quaternion, namespace: System.Windows.Media.Media3D
  DNRect3D = interface; // type: System.Windows.Media.Media3D.Rect3D, namespace: System.Windows.Media.Media3D
  DNSize3D = interface; // type: System.Windows.Media.Media3D.Size3D, namespace: System.Windows.Media.Media3D
  DNVector3D = interface; // type: System.Windows.Media.Media3D.Vector3D, namespace: System.Windows.Media.Media3D
  DNVisual3DCollection_Enumerator = interface; // type: System.Windows.Media.Media3D.Visual3DCollection+Enumerator, namespace: System.Windows.Media.Media3D
  DNPathFigureCollection_Enumerator = interface; // type: System.Windows.Media.PathFigureCollection+Enumerator, namespace: System.Windows.Media
  DNPixelFormat = interface; // type: System.Windows.Media.PixelFormat, namespace: System.Windows.Media
  DNPixelFormatChannelMask = interface; // type: System.Windows.Media.PixelFormatChannelMask, namespace: System.Windows.Media
  DNPointCollection_Enumerator = interface; // type: System.Windows.Media.PointCollection+Enumerator, namespace: System.Windows.Media
  DNTextEffectCollection_Enumerator = interface; // type: System.Windows.Media.TextEffectCollection+Enumerator, namespace: System.Windows.Media
  DNCharacterHit = interface; // type: System.Windows.Media.TextFormatting.CharacterHit, namespace: System.Windows.Media.TextFormatting
  DNPoint = interface; // type: System.Windows.Point, namespace: System.Windows
  DNRect = interface; // type: System.Windows.Rect, namespace: System.Windows
  DNSize = interface; // type: System.Windows.Size, namespace: System.Windows
  DNTextDecorationCollection_Enumerator = interface; // type: System.Windows.TextDecorationCollection+Enumerator, namespace: System.Windows
  DNThickness = interface; // type: System.Windows.Thickness, namespace: System.Windows
  DNDispatcherPriorityAwaitable = interface; // type: System.Windows.Threading.DispatcherPriorityAwaitable, namespace: System.Windows.Threading
  DNDispatcherPriorityAwaiter = interface; // type: System.Windows.Threading.DispatcherPriorityAwaiter, namespace: System.Windows.Threading
  DNDispatcherProcessingDisabled = interface; // type: System.Windows.Threading.DispatcherProcessingDisabled, namespace: System.Windows.Threading
  DNVector = interface; // type: System.Windows.Vector, namespace: System.Windows
  DNAutomationEvent = interface; // type: System.Windows.Automation.AutomationEvent, namespace: System.Windows.Automation
  DNAutomationProperty = interface; // type: System.Windows.Automation.AutomationProperty, namespace: System.Windows.Automation
  DNUIElementCollection = interface; // type: System.Windows.Controls.UIElementCollection, namespace: System.Windows.Controls
  DNDataSourceProvider = interface; // type: System.Windows.Data.DataSourceProvider, namespace: System.Windows.Data
  DNDependencyObjectType = interface; // type: System.Windows.DependencyObjectType, namespace: System.Windows
  DNDependencyProperty = interface; // type: System.Windows.DependencyProperty, namespace: System.Windows
  DNDependencyPropertyKey = interface; // type: System.Windows.DependencyPropertyKey, namespace: System.Windows
  DNContentPosition = interface; // type: System.Windows.Documents.ContentPosition, namespace: System.Windows.Documents
  DNDocumentPage = interface; // type: System.Windows.Documents.DocumentPage, namespace: System.Windows.Documents
  DNDocumentPaginator = interface; // type: System.Windows.Documents.DocumentPaginator, namespace: System.Windows.Documents
  DNDocumentReferenceCollection = interface; // type: System.Windows.Documents.DocumentReferenceCollection, namespace: System.Windows.Documents
  DNIDocumentPaginatorSource = interface; // type: System.Windows.Documents.IDocumentPaginatorSource, namespace: System.Windows.Documents
  DNPageContentCollection = interface; // type: System.Windows.Documents.PageContentCollection, namespace: System.Windows.Documents
  DNXpsDocumentWriter = interface; // type: System.Windows.Xps.XpsDocumentWriter, namespace: System.Windows.Xps
  DNSerializerWriterCollator = interface; // type: System.Windows.Documents.Serialization.SerializerWriterCollator, namespace: System.Windows.Documents.Serialization
  DNEventRoute = interface; // type: System.Windows.EventRoute, namespace: System.Windows
  DNBindingExpressionBase = interface; // type: System.Windows.Data.BindingExpressionBase, namespace: System.Windows.Data
  DNBindingExpression = interface; // type: System.Windows.Data.BindingExpression, namespace: System.Windows.Data
  DNIDataObject = interface; // type: System.Windows.IDataObject, namespace: System.Windows
  DNIInputElement = interface; // type: System.Windows.IInputElement, namespace: System.Windows
  DNDrawingAttributes = interface; // type: System.Windows.Ink.DrawingAttributes, namespace: System.Windows.Ink
  DNGestureRecognitionResult = interface; // type: System.Windows.Ink.GestureRecognitionResult, namespace: System.Windows.Ink
  DNIncrementalLassoHitTester = interface; // type: System.Windows.Ink.IncrementalLassoHitTester, namespace: System.Windows.Ink
  DNIncrementalStrokeHitTester = interface; // type: System.Windows.Ink.IncrementalStrokeHitTester, namespace: System.Windows.Ink
  DNStroke = interface; // type: System.Windows.Ink.Stroke, namespace: System.Windows.Ink
  DNStylusShape = interface; // type: System.Windows.Ink.StylusShape, namespace: System.Windows.Ink
  DNCommandBinding = interface; // type: System.Windows.Input.CommandBinding, namespace: System.Windows.Input
  DNCommandBindingCollection = interface; // type: System.Windows.Input.CommandBindingCollection, namespace: System.Windows.Input
  DNCursor = interface; // type: System.Windows.Input.Cursor, namespace: System.Windows.Input
  DNICommand = interface; // type: System.Windows.Input.ICommand, namespace: System.Windows.Input
  DNIManipulator = interface; // type: System.Windows.Input.IManipulator, namespace: System.Windows.Input
  DNInertiaExpansionBehavior = interface; // type: System.Windows.Input.InertiaExpansionBehavior, namespace: System.Windows.Input
  DNInertiaRotationBehavior = interface; // type: System.Windows.Input.InertiaRotationBehavior, namespace: System.Windows.Input
  DNInertiaTranslationBehavior = interface; // type: System.Windows.Input.InertiaTranslationBehavior, namespace: System.Windows.Input
  DNInputBindingCollection = interface; // type: System.Windows.Input.InputBindingCollection, namespace: System.Windows.Input
  DNInputGesture = interface; // type: System.Windows.Input.InputGesture, namespace: System.Windows.Input
  DNInputGestureCollection = interface; // type: System.Windows.Input.InputGestureCollection, namespace: System.Windows.Input
  DNInputScope = interface; // type: System.Windows.Input.InputScope, namespace: System.Windows.Input
  DNManipulationDelta = interface; // type: System.Windows.Input.ManipulationDelta, namespace: System.Windows.Input
  DNManipulationPivot = interface; // type: System.Windows.Input.ManipulationPivot, namespace: System.Windows.Input
  DNInertiaParameters2D = interface; // type: System.Windows.Input.Manipulations.InertiaParameters2D, namespace: System.Windows.Input.Manipulations
  DNManipulationParameters2D = interface; // type: System.Windows.Input.Manipulations.ManipulationParameters2D, namespace: System.Windows.Input.Manipulations
  DNManipulationVelocities = interface; // type: System.Windows.Input.ManipulationVelocities, namespace: System.Windows.Input
  DNRoutedCommand = interface; // type: System.Windows.Input.RoutedCommand, namespace: System.Windows.Input
  DNRoutedUICommand = interface; // type: System.Windows.Input.RoutedUICommand, namespace: System.Windows.Input
  DNStagingAreaInputItem = interface; // type: System.Windows.Input.StagingAreaInputItem, namespace: System.Windows.Input
  DNStylusButton = interface; // type: System.Windows.Input.StylusButton, namespace: System.Windows.Input
  DNStylusPointDescription = interface; // type: System.Windows.Input.StylusPointDescription, namespace: System.Windows.Input
  DNStylusPointProperty = interface; // type: System.Windows.Input.StylusPointProperty, namespace: System.Windows.Input
  DNStylusPointPropertyInfo = interface; // type: System.Windows.Input.StylusPointPropertyInfo, namespace: System.Windows.Input
  DNTouchPoint = interface; // type: System.Windows.Input.TouchPoint, namespace: System.Windows.Input
  DNTraversalRequest = interface; // type: System.Windows.Input.TraversalRequest, namespace: System.Windows.Input
  DNIKeyboardInputSink = interface; // type: System.Windows.Interop.IKeyboardInputSink, namespace: System.Windows.Interop
  DNIKeyboardInputSite = interface; // type: System.Windows.Interop.IKeyboardInputSite, namespace: System.Windows.Interop
  DNIWeakEventListener = interface; // type: System.Windows.IWeakEventListener, namespace: System.Windows
  DNINameScope = interface; // type: System.Windows.Markup.INameScope, namespace: System.Windows.Markup
  DNMarkupExtension = interface; // type: System.Windows.Markup.MarkupExtension, namespace: System.Windows.Markup
  DNBindingBase = interface; // type: System.Windows.Data.BindingBase, namespace: System.Windows.Data
  DNMarkupObject = interface; // type: System.Windows.Markup.Primitives.MarkupObject, namespace: System.Windows.Markup.Primitives
  DNMarkupProperty = interface; // type: System.Windows.Markup.Primitives.MarkupProperty, namespace: System.Windows.Markup.Primitives
  DNServiceProviders = interface; // type: System.Windows.Markup.ServiceProviders, namespace: System.Windows.Markup
  DNValueSerializer = interface; // type: System.Windows.Markup.ValueSerializer, namespace: System.Windows.Markup
  DNXmlLanguage = interface; // type: System.Windows.Markup.XmlLanguage, namespace: System.Windows.Markup
  DNClockCollection = interface; // type: System.Windows.Media.Animation.ClockCollection, namespace: System.Windows.Media.Animation
  DNIEasingFunction = interface; // type: System.Windows.Media.Animation.IEasingFunction, namespace: System.Windows.Media.Animation
  DNColorContext = interface; // type: System.Windows.Media.ColorContext, namespace: System.Windows.Media
  DNFamilyTypeface = interface; // type: System.Windows.Media.FamilyTypeface, namespace: System.Windows.Media
  DNFamilyTypefaceCollection = interface; // type: System.Windows.Media.FamilyTypefaceCollection, namespace: System.Windows.Media
  DNFontFamily = interface; // type: System.Windows.Media.FontFamily, namespace: System.Windows.Media
  DNFontFamilyMap = interface; // type: System.Windows.Media.FontFamilyMap, namespace: System.Windows.Media
  DNFontFamilyMapCollection = interface; // type: System.Windows.Media.FontFamilyMapCollection, namespace: System.Windows.Media
  DNFormattedText = interface; // type: System.Windows.Media.FormattedText, namespace: System.Windows.Media
  DNGlyphRun = interface; // type: System.Windows.Media.GlyphRun, namespace: System.Windows.Media
  DNGlyphTypeface = interface; // type: System.Windows.Media.GlyphTypeface, namespace: System.Windows.Media
  DNPointHitTestResult = interface; // type: System.Windows.Media.PointHitTestResult, namespace: System.Windows.Media
  DNLanguageSpecificStringDictionary = interface; // type: System.Windows.Media.LanguageSpecificStringDictionary, namespace: System.Windows.Media
  DNVisual3DCollection = interface; // type: System.Windows.Media.Media3D.Visual3DCollection, namespace: System.Windows.Media.Media3D
  DNNumberSubstitution = interface; // type: System.Windows.Media.NumberSubstitution, namespace: System.Windows.Media
  DNTypeface = interface; // type: System.Windows.Media.Typeface, namespace: System.Windows.Media
  DNPropertyMetadata = interface; // type: System.Windows.PropertyMetadata, namespace: System.Windows
  DNUIPropertyMetadata = interface; // type: System.Windows.UIPropertyMetadata, namespace: System.Windows
  DNResourceDictionary = interface; // type: System.Windows.ResourceDictionary, namespace: System.Windows
  DNRoutedEvent = interface; // type: System.Windows.RoutedEvent, namespace: System.Windows
  DNDispatcher = interface; // type: System.Windows.Threading.Dispatcher, namespace: System.Windows.Threading
  DNDispatcherHooks = interface; // type: System.Windows.Threading.DispatcherHooks, namespace: System.Windows.Threading
  DNDispatcherObject = interface; // type: System.Windows.Threading.DispatcherObject, namespace: System.Windows.Threading
  DNAutomationPeer = interface; // type: System.Windows.Automation.Peers.AutomationPeer, namespace: System.Windows.Automation.Peers
  DNContentElementAutomationPeer = interface; // type: System.Windows.Automation.Peers.ContentElementAutomationPeer, namespace: System.Windows.Automation.Peers
  DNUIElementAutomationPeer = interface; // type: System.Windows.Automation.Peers.UIElementAutomationPeer, namespace: System.Windows.Automation.Peers
  DNDependencyObject = interface; // type: System.Windows.DependencyObject, namespace: System.Windows
  DNContentElement = interface; // type: System.Windows.ContentElement, namespace: System.Windows
  DNFixedDocument = interface; // type: System.Windows.Documents.FixedDocument, namespace: System.Windows.Documents
  DNFixedDocumentSequence = interface; // type: System.Windows.Documents.FixedDocumentSequence, namespace: System.Windows.Documents
  DNBindingGroup = interface; // type: System.Windows.Data.BindingGroup, namespace: System.Windows.Data
  DNFreezable = interface; // type: System.Windows.Freezable, namespace: System.Windows
  DNInputBinding = interface; // type: System.Windows.Input.InputBinding, namespace: System.Windows.Input
  DNAnimatable = interface; // type: System.Windows.Media.Animation.Animatable, namespace: System.Windows.Media.Animation
  DNTimeline = interface; // type: System.Windows.Media.Animation.Timeline, namespace: System.Windows.Media.Animation
  DNAnimationTimeline = interface; // type: System.Windows.Media.Animation.AnimationTimeline, namespace: System.Windows.Media.Animation
  DNTimelineGroup = interface; // type: System.Windows.Media.Animation.TimelineGroup, namespace: System.Windows.Media.Animation
  DNParallelTimeline = interface; // type: System.Windows.Media.Animation.ParallelTimeline, namespace: System.Windows.Media.Animation
  DNStoryboard = interface; // type: System.Windows.Media.Animation.Storyboard, namespace: System.Windows.Media.Animation
  DNMediaTimeline = interface; // type: System.Windows.Media.MediaTimeline, namespace: System.Windows.Media
  DNTimelineCollection = interface; // type: System.Windows.Media.Animation.TimelineCollection, namespace: System.Windows.Media.Animation
  DNBrush = interface; // type: System.Windows.Media.Brush, namespace: System.Windows.Media
  DNSolidColorBrush = interface; // type: System.Windows.Media.SolidColorBrush, namespace: System.Windows.Media
  DNCacheMode = interface; // type: System.Windows.Media.CacheMode, namespace: System.Windows.Media
  DNDashStyle = interface; // type: System.Windows.Media.DashStyle, namespace: System.Windows.Media
  DNDrawing = interface; // type: System.Windows.Media.Drawing, namespace: System.Windows.Media
  DNBitmapEffect = interface; // type: System.Windows.Media.Effects.BitmapEffect, namespace: System.Windows.Media.Effects
  DNBitmapEffectInput = interface; // type: System.Windows.Media.Effects.BitmapEffectInput, namespace: System.Windows.Media.Effects
  DNEffect = interface; // type: System.Windows.Media.Effects.Effect, namespace: System.Windows.Media.Effects
  DNGeneralTransform = interface; // type: System.Windows.Media.GeneralTransform, namespace: System.Windows.Media
  DNTransform = interface; // type: System.Windows.Media.Transform, namespace: System.Windows.Media
  DNGeometry = interface; // type: System.Windows.Media.Geometry, namespace: System.Windows.Media
  DNPathGeometry = interface; // type: System.Windows.Media.PathGeometry, namespace: System.Windows.Media
  DNGuidelineSet = interface; // type: System.Windows.Media.GuidelineSet, namespace: System.Windows.Media
  DNImageSource = interface; // type: System.Windows.Media.ImageSource, namespace: System.Windows.Media
  DNBitmapSource = interface; // type: System.Windows.Media.Imaging.BitmapSource, namespace: System.Windows.Media.Imaging
  DNCamera = interface; // type: System.Windows.Media.Media3D.Camera, namespace: System.Windows.Media.Media3D
  DNGeneralTransform3D = interface; // type: System.Windows.Media.Media3D.GeneralTransform3D, namespace: System.Windows.Media.Media3D
  DNTransform3D = interface; // type: System.Windows.Media.Media3D.Transform3D, namespace: System.Windows.Media.Media3D
  DNMediaPlayer = interface; // type: System.Windows.Media.MediaPlayer, namespace: System.Windows.Media
  DNPathFigure = interface; // type: System.Windows.Media.PathFigure, namespace: System.Windows.Media
  DNPathFigureCollection = interface; // type: System.Windows.Media.PathFigureCollection, namespace: System.Windows.Media
  DNPathSegment = interface; // type: System.Windows.Media.PathSegment, namespace: System.Windows.Media
  DNPathSegmentCollection = interface; // type: System.Windows.Media.PathSegmentCollection, namespace: System.Windows.Media
  DNPen = interface; // type: System.Windows.Media.Pen, namespace: System.Windows.Media
  DNTextEffect = interface; // type: System.Windows.Media.TextEffect, namespace: System.Windows.Media
  DNTextEffectCollection = interface; // type: System.Windows.Media.TextEffectCollection, namespace: System.Windows.Media
  DNTextDecoration = interface; // type: System.Windows.TextDecoration, namespace: System.Windows
  DNTextDecorationCollection = interface; // type: System.Windows.TextDecorationCollection, namespace: System.Windows
  DNKeySpline = interface; // type: System.Windows.Media.Animation.KeySpline, namespace: System.Windows.Media.Animation
  DNDoubleCollection = interface; // type: System.Windows.Media.DoubleCollection, namespace: System.Windows.Media
  DNImageMetadata = interface; // type: System.Windows.Media.ImageMetadata, namespace: System.Windows.Media
  DNGeneralTransform2DTo3D = interface; // type: System.Windows.Media.Media3D.GeneralTransform2DTo3D, namespace: System.Windows.Media.Media3D
  DNGeneralTransform3DTo2D = interface; // type: System.Windows.Media.Media3D.GeneralTransform3DTo2D, namespace: System.Windows.Media.Media3D
  DNPointCollection = interface; // type: System.Windows.Media.PointCollection, namespace: System.Windows.Media
  DNVisual3D = interface; // type: System.Windows.Media.Media3D.Visual3D, namespace: System.Windows.Media.Media3D
  DNVisual = interface; // type: System.Windows.Media.Visual, namespace: System.Windows.Media
  DNUIElement = interface; // type: System.Windows.UIElement, namespace: System.Windows
  DNContextMenu = interface; // type: System.Windows.Controls.ContextMenu, namespace: System.Windows.Controls
  DNFixedPage = interface; // type: System.Windows.Documents.FixedPage, namespace: System.Windows.Documents
  DNInputDevice = interface; // type: System.Windows.Input.InputDevice, namespace: System.Windows.Input
  DNKeyboardDevice = interface; // type: System.Windows.Input.KeyboardDevice, namespace: System.Windows.Input
  DNMouseDevice = interface; // type: System.Windows.Input.MouseDevice, namespace: System.Windows.Input
  DNStylusDevice = interface; // type: System.Windows.Input.StylusDevice, namespace: System.Windows.Input
  DNTabletDevice = interface; // type: System.Windows.Input.TabletDevice, namespace: System.Windows.Input
  DNTouchDevice = interface; // type: System.Windows.Input.TouchDevice, namespace: System.Windows.Input
  DNInputManager = interface; // type: System.Windows.Input.InputManager, namespace: System.Windows.Input
  DNTextComposition = interface; // type: System.Windows.Input.TextComposition, namespace: System.Windows.Input
  DNClock = interface; // type: System.Windows.Media.Animation.Clock, namespace: System.Windows.Media.Animation
  DNAnimationClock = interface; // type: System.Windows.Media.Animation.AnimationClock, namespace: System.Windows.Media.Animation
  DNClockGroup = interface; // type: System.Windows.Media.Animation.ClockGroup, namespace: System.Windows.Media.Animation
  DNMediaClock = interface; // type: System.Windows.Media.MediaClock, namespace: System.Windows.Media
  DNClockController = interface; // type: System.Windows.Media.Animation.ClockController, namespace: System.Windows.Media.Animation
  DNCompositionTarget = interface; // type: System.Windows.Media.CompositionTarget, namespace: System.Windows.Media
  DNDrawingContext = interface; // type: System.Windows.Media.DrawingContext, namespace: System.Windows.Media
  DNBitmapPalette = interface; // type: System.Windows.Media.Imaging.BitmapPalette, namespace: System.Windows.Media.Imaging
  DNPresentationSource = interface; // type: System.Windows.PresentationSource, namespace: System.Windows
  DNStyle = interface; // type: System.Windows.Style, namespace: System.Windows
  DNDispatcherFrame = interface; // type: System.Windows.Threading.DispatcherFrame, namespace: System.Windows.Threading
  DNWeakEventManager = interface; // type: System.Windows.WeakEventManager, namespace: System.Windows
  DNDispatcherOperation = interface; // type: System.Windows.Threading.DispatcherOperation, namespace: System.Windows.Threading
  DNINamespacePrefixLookup = interface; // type: System.Xaml.INamespacePrefixLookup, namespace: System.Xaml
  DNIXamlNamespaceResolver = interface; // type: System.Xaml.IXamlNamespaceResolver, namespace: System.Xaml
  DNNamespaceDeclaration = interface; // type: System.Xaml.NamespaceDeclaration, namespace: System.Xaml
  DNXamlMemberInvoker = interface; // type: System.Xaml.Schema.XamlMemberInvoker, namespace: System.Xaml.Schema
  DNXamlTypeInvoker = interface; // type: System.Xaml.Schema.XamlTypeInvoker, namespace: System.Xaml.Schema
  DNXamlTypeName = interface; // type: System.Xaml.Schema.XamlTypeName, namespace: System.Xaml.Schema
  DNXamlDeferringLoader = interface; // type: System.Xaml.XamlDeferringLoader, namespace: System.Xaml
  DNXamlMember = interface; // type: System.Xaml.XamlMember, namespace: System.Xaml
  DNXamlDirective = interface; // type: System.Xaml.XamlDirective, namespace: System.Xaml
  DNXamlReader = interface; // type: System.Xaml.XamlReader, namespace: System.Xaml
  DNXamlReaderSettings = interface; // type: System.Xaml.XamlReaderSettings, namespace: System.Xaml
  DNXamlSchemaContext = interface; // type: System.Xaml.XamlSchemaContext, namespace: System.Xaml
  DNXamlSchemaContextSettings = interface; // type: System.Xaml.XamlSchemaContextSettings, namespace: System.Xaml
  DNXamlType = interface; // type: System.Xaml.XamlType, namespace: System.Xaml
  DNIXmlNamespaceResolver = interface; // type: System.Xml.IXmlNamespaceResolver, namespace: System.Xml
  DNIXmlSchemaInfo = interface; // type: System.Xml.Schema.IXmlSchemaInfo, namespace: System.Xml.Schema
  DNXmlSchemaCompilationSettings = interface; // type: System.Xml.Schema.XmlSchemaCompilationSettings, namespace: System.Xml.Schema
  DNXmlSchemaDatatype = interface; // type: System.Xml.Schema.XmlSchemaDatatype, namespace: System.Xml.Schema
  DNXmlSchemaObject = interface; // type: System.Xml.Schema.XmlSchemaObject, namespace: System.Xml.Schema
  DNXmlSchema = interface; // type: System.Xml.Schema.XmlSchema, namespace: System.Xml.Schema
  DNXmlSchemaAttribute = interface; // type: System.Xml.Schema.XmlSchemaAttribute, namespace: System.Xml.Schema
  DNXmlSchemaElement = interface; // type: System.Xml.Schema.XmlSchemaElement, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeContent = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeContent, namespace: System.Xml.Schema
  DNXmlSchemaType = interface; // type: System.Xml.Schema.XmlSchemaType, namespace: System.Xml.Schema
  DNXmlSchemaComplexType = interface; // type: System.Xml.Schema.XmlSchemaComplexType, namespace: System.Xml.Schema
  DNXmlSchemaSimpleType = interface; // type: System.Xml.Schema.XmlSchemaSimpleType, namespace: System.Xml.Schema
  DNXmlSchemaAnnotation = interface; // type: System.Xml.Schema.XmlSchemaAnnotation, namespace: System.Xml.Schema
  DNXmlSchemaObjectEnumerator = interface; // type: System.Xml.Schema.XmlSchemaObjectEnumerator, namespace: System.Xml.Schema
  DNXmlSchemaObjectTable = interface; // type: System.Xml.Schema.XmlSchemaObjectTable, namespace: System.Xml.Schema
  DNXmlSchemaSet = interface; // type: System.Xml.Schema.XmlSchemaSet, namespace: System.Xml.Schema
  DNIXmlSerializable = interface; // type: System.Xml.Serialization.IXmlSerializable, namespace: System.Xml.Serialization
  DNXmlSerializerNamespaces = interface; // type: System.Xml.Serialization.XmlSerializerNamespaces, namespace: System.Xml.Serialization
  DNXmlImplementation = interface; // type: System.Xml.XmlImplementation, namespace: System.Xml
  DNXmlNamedNodeMap = interface; // type: System.Xml.XmlNamedNodeMap, namespace: System.Xml
  DNXmlAttributeCollection = interface; // type: System.Xml.XmlAttributeCollection, namespace: System.Xml
  DNXmlNamespaceManager = interface; // type: System.Xml.XmlNamespaceManager, namespace: System.Xml
  DNXmlNameTable = interface; // type: System.Xml.XmlNameTable, namespace: System.Xml
  DNXmlNode = interface; // type: System.Xml.XmlNode, namespace: System.Xml
  DNXmlAttribute = interface; // type: System.Xml.XmlAttribute, namespace: System.Xml
  DNXmlDocument = interface; // type: System.Xml.XmlDocument, namespace: System.Xml
  DNXmlDocumentFragment = interface; // type: System.Xml.XmlDocumentFragment, namespace: System.Xml
  DNXmlCDataSection = interface; // type: System.Xml.XmlCDataSection, namespace: System.Xml
  DNXmlComment = interface; // type: System.Xml.XmlComment, namespace: System.Xml
  DNXmlSignificantWhitespace = interface; // type: System.Xml.XmlSignificantWhitespace, namespace: System.Xml
  DNXmlText = interface; // type: System.Xml.XmlText, namespace: System.Xml
  DNXmlWhitespace = interface; // type: System.Xml.XmlWhitespace, namespace: System.Xml
  DNXmlDeclaration = interface; // type: System.Xml.XmlDeclaration, namespace: System.Xml
  DNXmlDocumentType = interface; // type: System.Xml.XmlDocumentType, namespace: System.Xml
  DNXmlElement = interface; // type: System.Xml.XmlElement, namespace: System.Xml
  DNXmlEntityReference = interface; // type: System.Xml.XmlEntityReference, namespace: System.Xml
  DNXmlProcessingInstruction = interface; // type: System.Xml.XmlProcessingInstruction, namespace: System.Xml
  DNXmlNodeList = interface; // type: System.Xml.XmlNodeList, namespace: System.Xml
  DNXmlParserContext = interface; // type: System.Xml.XmlParserContext, namespace: System.Xml
  DNXmlQualifiedName = interface; // type: System.Xml.XmlQualifiedName, namespace: System.Xml
  DNXmlReader = interface; // type: System.Xml.XmlReader, namespace: System.Xml
  DNXmlReaderSettings = interface; // type: System.Xml.XmlReaderSettings, namespace: System.Xml
  DNXmlResolver = interface; // type: System.Xml.XmlResolver, namespace: System.Xml
  DNXmlWriter = interface; // type: System.Xml.XmlWriter, namespace: System.Xml
  DNXmlWriterSettings = interface; // type: System.Xml.XmlWriterSettings, namespace: System.Xml
  DNXPathExpression = interface; // type: System.Xml.XPath.XPathExpression, namespace: System.Xml.XPath
  DNXPathNavigator = interface; // type: System.Xml.XPath.XPathNavigator, namespace: System.Xml.XPath
  DNXPathNodeIterator = interface; // type: System.Xml.XPath.XPathNodeIterator, namespace: System.Xml.XPath

{ delegates }

  [DNTypeName('System.Collections.Specialized.NotifyCollectionChangedEventHandler')]
  DNNotifyCollectionChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNNotifyCollectionChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.AsyncCompletedEventHandler')]
  DNAsyncCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAsyncCompletedEventArgs) of object;

  [DNTypeName('System.ComponentModel.CancelEventHandler')]
  DNCancelEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCancelEventArgs) of object;

  [DNTypeName('System.ComponentModel.CurrentChangingEventHandler')]
  DNCurrentChangingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCurrentChangingEventArgs) of object;

  [DNTypeName('System.ComponentModel.ListChangedEventHandler')]
  DNListChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNListChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.PropertyChangedEventHandler')]
  DNPropertyChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPropertyChangedEventArgs) of object;

  [DNTypeName('System.Net.HttpContinueDelegate')]
  DNHttpContinueDelegate = procedure(StatusCode: Int32; httpHeaders: DNWebHeaderCollection) of object;

  [DNTypeName('System.Net.Security.RemoteCertificateValidationCallback')]
  DNRemoteCertificateValidationCallback = function(sender: DDN.mscorlib.DNObject; certificate: DDN.mscorlib.DNX509Certificate; chain: DNX509Chain; sslPolicyErrors: DNSslPolicyErrors): Boolean of object;

  [DNTypeName('System.Windows.CoerceValueCallback')]
  DNCoerceValueCallback = function(d: DNDependencyObject; baseValue: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject of object;

  [DNTypeName('System.Windows.Controls.ContextMenuEventHandler')]
  DNContextMenuEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNContextMenuEventArgs) of object;

  [DNTypeName('System.Windows.Controls.ToolTipEventHandler')]
  DNToolTipEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNToolTipEventArgs) of object;

  [DNTypeName('System.Windows.DependencyPropertyChangedEventHandler')]
  DNDependencyPropertyChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDependencyPropertyChangedEventArgs) of object;

  [DNTypeName('System.Windows.Documents.GetPageCompletedEventHandler')]
  DNGetPageCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGetPageCompletedEventArgs) of object;

  [DNTypeName('System.Windows.Documents.PagesChangedEventHandler')]
  DNPagesChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPagesChangedEventArgs) of object;

  [DNTypeName('System.Windows.Documents.Serialization.WritingCancelledEventHandler')]
  DNWritingCancelledEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWritingCancelledEventArgs) of object;

  [DNTypeName('System.Windows.Documents.Serialization.WritingCompletedEventHandler')]
  DNWritingCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWritingCompletedEventArgs) of object;

  [DNTypeName('System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler')]
  DNWritingPrintTicketRequiredEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWritingPrintTicketRequiredEventArgs) of object;

  [DNTypeName('System.Windows.Documents.Serialization.WritingProgressChangedEventHandler')]
  DNWritingProgressChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWritingProgressChangedEventArgs) of object;

  [DNTypeName('System.Windows.DpiChangedEventHandler')]
  DNDpiChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDpiChangedEventArgs) of object;

  [DNTypeName('System.Windows.DragEventHandler')]
  DNDragEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDragEventArgs) of object;

  [DNTypeName('System.Windows.GiveFeedbackEventHandler')]
  DNGiveFeedbackEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGiveFeedbackEventArgs) of object;

  [DNTypeName('System.Windows.Ink.DrawingAttributesReplacedEventHandler')]
  DNDrawingAttributesReplacedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDrawingAttributesReplacedEventArgs) of object;

  [DNTypeName('System.Windows.Ink.LassoSelectionChangedEventHandler')]
  DNLassoSelectionChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNLassoSelectionChangedEventArgs) of object;

  [DNTypeName('System.Windows.Ink.PropertyDataChangedEventHandler')]
  DNPropertyDataChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPropertyDataChangedEventArgs) of object;

  [DNTypeName('System.Windows.Ink.StrokeCollectionChangedEventHandler')]
  DNStrokeCollectionChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStrokeCollectionChangedEventArgs) of object;

  [DNTypeName('System.Windows.Ink.StrokeHitEventHandler')]
  DNStrokeHitEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStrokeHitEventArgs) of object;

  [DNTypeName('System.Windows.Ink.StylusPointsReplacedEventHandler')]
  DNStylusPointsReplacedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStylusPointsReplacedEventArgs) of object;

  [DNTypeName('System.Windows.Input.CanExecuteRoutedEventHandler')]
  DNCanExecuteRoutedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCanExecuteRoutedEventArgs) of object;

  [DNTypeName('System.Windows.Input.ExecutedRoutedEventHandler')]
  DNExecutedRoutedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNExecutedRoutedEventArgs) of object;

  [DNTypeName('System.Windows.Input.KeyboardFocusChangedEventHandler')]
  DNKeyboardFocusChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNKeyboardFocusChangedEventArgs) of object;

  [DNTypeName('System.Windows.Input.KeyEventHandler')]
  DNKeyEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNKeyEventArgs) of object;

  [DNTypeName('System.Windows.Input.MouseButtonEventHandler')]
  DNMouseButtonEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMouseButtonEventArgs) of object;

  [DNTypeName('System.Windows.Input.MouseEventHandler')]
  DNMouseEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMouseEventArgs) of object;

  [DNTypeName('System.Windows.Input.MouseWheelEventHandler')]
  DNMouseWheelEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMouseWheelEventArgs) of object;

  [DNTypeName('System.Windows.Input.NotifyInputEventHandler')]
  DNNotifyInputEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNNotifyInputEventArgs) of object;

  [DNTypeName('System.Windows.Input.PreProcessInputEventHandler')]
  DNPreProcessInputEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPreProcessInputEventArgs) of object;

  [DNTypeName('System.Windows.Input.ProcessInputEventHandler')]
  DNProcessInputEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNProcessInputEventArgs) of object;

  [DNTypeName('System.Windows.Input.QueryCursorEventHandler')]
  DNQueryCursorEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNQueryCursorEventArgs) of object;

  [DNTypeName('System.Windows.Input.StylusButtonEventHandler')]
  DNStylusButtonEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStylusButtonEventArgs) of object;

  [DNTypeName('System.Windows.Input.StylusDownEventHandler')]
  DNStylusDownEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStylusDownEventArgs) of object;

  [DNTypeName('System.Windows.Input.StylusEventHandler')]
  DNStylusEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStylusEventArgs) of object;

  [DNTypeName('System.Windows.Input.StylusSystemGestureEventHandler')]
  DNStylusSystemGestureEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStylusSystemGestureEventArgs) of object;

  [DNTypeName('System.Windows.Input.TextCompositionEventHandler')]
  DNTextCompositionEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNTextCompositionEventArgs) of object;

  [DNTypeName('System.Windows.Interop.HwndSourceHook')]
  DNHwndSourceHook = function(hwnd: IntPtr; msg: Int32; wParam: IntPtr; lParam: IntPtr; out handled: Boolean): IntPtr of object;

  [DNTypeName('System.Windows.PropertyChangedCallback')]
  DNPropertyChangedCallback = procedure(d: DNDependencyObject; e: DNDependencyPropertyChangedEventArgs) of object;

  [DNTypeName('System.Windows.QueryContinueDragEventHandler')]
  DNQueryContinueDragEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNQueryContinueDragEventArgs) of object;

  [DNTypeName('System.Windows.RequestBringIntoViewEventHandler')]
  DNRequestBringIntoViewEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNRequestBringIntoViewEventArgs) of object;

  [DNTypeName('System.Windows.RoutedEventHandler')]
  DNRoutedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNRoutedEventArgs) of object;

  [DNTypeName('System.Windows.SizeChangedEventHandler')]
  DNSizeChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSizeChangedEventArgs) of object;

  [DNTypeName('System.Windows.Threading.DispatcherHookEventHandler')]
  DNDispatcherHookEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDispatcherHookEventArgs) of object;

  [DNTypeName('System.Windows.Threading.DispatcherOperationCallback')]
  DNDispatcherOperationCallback = function(arg: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject of object;

  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionEventHandler')]
  DNDispatcherUnhandledExceptionEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDispatcherUnhandledExceptionEventArgs) of object;

  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler')]
  DNDispatcherUnhandledExceptionFilterEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDispatcherUnhandledExceptionFilterEventArgs) of object;

  [DNTypeName('System.Windows.ValidateValueCallback')]
  DNValidateValueCallback = function(value: DDN.mscorlib.DNObject): Boolean of object;

  [DNTypeName('System.Xml.Schema.ValidationEventHandler')]
  DNValidationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNValidationEventArgs) of object;

  [DNTypeName('System.Xml.XmlNodeChangedEventHandler')]
  DNXmlNodeChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXmlNodeChangedEventArgs) of object;




{ objects }

  //-------------namespace: System.Windows----------------
  DNAttachedPropertyBrowsableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{589E7A88-D6A6-55A2-8BBA-64D68D891597}']
  end;

  [DNTypeName('System.Windows.AttachedPropertyBrowsableAttribute')]
  DNAttachedPropertyBrowsableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8B67D7A8-1467-3116-8A9D-6446AA4C2271}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAttachedPropertyBrowsableAttribute = class(TDNGenericImport<DNAttachedPropertyBrowsableAttributeClass, DNAttachedPropertyBrowsableAttribute>) end;

  //-------------namespace: System.Windows----------------
  DNLocalizabilityAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{840DCF53-9C9E-52C9-8E29-FAC7693FEAF4}']
  { constructors } 

    {class} function init(category: DNLocalizationCategory): DNLocalizabilityAttribute;

  end;

  [DNTypeName('System.Windows.LocalizabilityAttribute')]
  DNLocalizabilityAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{20961F89-C9DB-35B1-9D96-059C2E85EFFF}']
  { getters & setters } 

    function get_Category: DNLocalizationCategory;
    function get_Readability: DNReadability;
    procedure set_Readability(value: DNReadability);
    function get_Modifiability: DNModifiability;
    procedure set_Modifiability(value: DNModifiability);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Category: DNLocalizationCategory read get_Category;
    property Readability: DNReadability read get_Readability write set_Readability;
    property Modifiability: DNModifiability read get_Modifiability write set_Modifiability;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNLocalizabilityAttribute = class(TDNGenericImport<DNLocalizabilityAttributeClass, DNLocalizabilityAttribute>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509CertificateCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{83C3CA7F-F03B-57EF-A7C6-5777897E6B60}']
  { constructors } 

    {class} function init: DNX509CertificateCollection; overload;
    {class} function init(value: DNX509CertificateCollection): DNX509CertificateCollection; overload;
    {class} function init(value: TArray<DDN.mscorlib.DNX509Certificate>): DNX509CertificateCollection; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509CertificateCollection')]
  DNX509CertificateCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{2794BB5A-5E85-3BC9-892B-C863B375B2EF}']
  { getters & setters } 

    function get_Item(index: Int32): DDN.mscorlib.DNX509Certificate;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNX509Certificate);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DDN.mscorlib.DNX509Certificate): Int32;
    procedure AddRange(value: TArray<DDN.mscorlib.DNX509Certificate>); overload;
    procedure AddRange(value: DNX509CertificateCollection); overload;
    function &Contains(value: DDN.mscorlib.DNX509Certificate): Boolean;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNX509Certificate>; index: Int32);
    function IndexOf(value: DDN.mscorlib.DNX509Certificate): Int32;
    procedure Insert(index: Int32; value: DDN.mscorlib.DNX509Certificate);
    function GetEnumerator: DNX509CertificateCollection_X509CertificateEnumerator;
    procedure Remove(value: DDN.mscorlib.DNX509Certificate);
    function GetHashCode: Int32;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DDN.mscorlib.DNX509Certificate read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNX509CertificateCollection = class(TDNGenericImport<DNX509CertificateCollectionClass, DNX509CertificateCollection>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{D5C3C4A3-9DFD-54C7-AD9D-4639E2276E59}']
  { constructors } 

    {class} function init: DNXmlSchemaObjectCollection; overload;
    {class} function init(parent: DNXmlSchemaObject): DNXmlSchemaObjectCollection; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectCollection')]
  DNXmlSchemaObjectCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{596E0E99-AE45-3841-A593-3BC7DF11D333}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlSchemaObject;
    procedure set_Item(index: Int32; value: DNXmlSchemaObject);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNXmlSchemaObjectEnumerator;
    function Add(item: DNXmlSchemaObject): Int32;
    procedure Insert(index: Int32; item: DNXmlSchemaObject);
    function IndexOf(item: DNXmlSchemaObject): Int32;
    function &Contains(item: DNXmlSchemaObject): Boolean;
    procedure Remove(item: DNXmlSchemaObject);
    procedure CopyTo(&array: TArray<DNXmlSchemaObject>; index: Int32);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlSchemaObject read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlSchemaObjectCollection = class(TDNGenericImport<DNXmlSchemaObjectCollectionClass, DNXmlSchemaObjectCollection>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintPropertyDictionaryClass = interface(DDN.mscorlib.DNHashtableClass)
  ['{C8321301-CD28-5D2C-90FE-9759DA988651}']
  { constructors } 

    {class} function init: DNPrintPropertyDictionary;

  end;

  [DNTypeName('System.Printing.IndexedProperties.PrintPropertyDictionary')]
  DNPrintPropertyDictionary = interface(DDN.mscorlib.DNHashtable)
  ['{35D0C565-A93C-3961-9AE8-A3A16C051876}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;

  { methods } 

    procedure Add(attributeValue: DNPrintProperty); overload;
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetProperty(attribName: string): DNPrintProperty;
    procedure SetProperty(attribName: string; attribValue: DNPrintProperty);
    procedure Dispose;
    procedure Add(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    procedure Clear;
    function Clone: DDN.mscorlib.DNObject;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsValue(value: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    procedure Remove(key: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNPrintPropertyDictionary = class(TDNGenericImport<DNPrintPropertyDictionaryClass, DNPrintPropertyDictionary>) end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IBindingList')]
  DNIBindingList = interface(DDN.mscorlib.DNIList)
  ['{A3CB8810-1DA4-35EF-86A2-77A80371893D}']
  { getters & setters } 

    function get_AllowNew: Boolean;
    function get_AllowEdit: Boolean;
    function get_AllowRemove: Boolean;
    function get_SupportsChangeNotification: Boolean;
    function get_SupportsSearching: Boolean;
    function get_SupportsSorting: Boolean;
    function get_IsSorted: Boolean;
    function get_SortProperty: DNPropertyDescriptor;
    function get_SortDirection: DNListSortDirection;

  { events } 

    procedure add_ListChanged(value: DNListChangedEventHandler);
    procedure remove_ListChanged(value: DNListChangedEventHandler);

  { methods } 

    function AddNew: DDN.mscorlib.DNObject;
    procedure AddIndex(&property: DNPropertyDescriptor);
    procedure ApplySort(&property: DNPropertyDescriptor; direction: DNListSortDirection);
    function Find(&property: DNPropertyDescriptor; key: DDN.mscorlib.DNObject): Int32;
    procedure RemoveIndex(&property: DNPropertyDescriptor);
    procedure RemoveSort;

  { propertys } 

    property AllowNew: Boolean read get_AllowNew;
    property AllowEdit: Boolean read get_AllowEdit;
    property AllowRemove: Boolean read get_AllowRemove;
    property SupportsChangeNotification: Boolean read get_SupportsChangeNotification;
    property SupportsSearching: Boolean read get_SupportsSearching;
    property SupportsSorting: Boolean read get_SupportsSorting;
    property IsSorted: Boolean read get_IsSorted;
    property SortProperty: DNPropertyDescriptor read get_SortProperty;
    property SortDirection: DNListSortDirection read get_SortDirection;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ICollectionView')]
  DNICollectionView = interface(DDN.mscorlib.DNIEnumerable)
  ['{BC1C216E-67A1-3933-9CD6-A13AA4B974A9}']
  { getters & setters } 

    function get_Culture: DDN.mscorlib.DNCultureInfo;
    procedure set_Culture(value: DDN.mscorlib.DNCultureInfo);
    function get_SourceCollection: DDN.mscorlib.DNIEnumerable;
    function get_CanFilter: Boolean;
    function get_SortDescriptions: DNSortDescriptionCollection;
    function get_CanSort: Boolean;
    function get_CanGroup: Boolean;
    function get_IsEmpty: Boolean;
    function get_CurrentItem: DDN.mscorlib.DNObject;
    function get_CurrentPosition: Int32;
    function get_IsCurrentAfterLast: Boolean;
    function get_IsCurrentBeforeFirst: Boolean;

  { events } 

    procedure add_CurrentChanging(value: DNCurrentChangingEventHandler);
    procedure remove_CurrentChanging(value: DNCurrentChangingEventHandler);
    procedure add_CurrentChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Refresh;
    function &Contains(item: DDN.mscorlib.DNObject): Boolean;
    function DeferRefresh: DDN.mscorlib.DNIDisposable;
    function MoveCurrentToFirst: Boolean;
    function MoveCurrentToLast: Boolean;
    function MoveCurrentToNext: Boolean;
    function MoveCurrentToPrevious: Boolean;
    function MoveCurrentTo(item: DDN.mscorlib.DNObject): Boolean;
    function MoveCurrentToPosition(position: Int32): Boolean;

  { propertys } 

    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture write set_Culture;
    property SourceCollection: DDN.mscorlib.DNIEnumerable read get_SourceCollection;
    property CanFilter: Boolean read get_CanFilter;
    property SortDescriptions: DNSortDescriptionCollection read get_SortDescriptions;
    property CanSort: Boolean read get_CanSort;
    property CanGroup: Boolean read get_CanGroup;
    property IsEmpty: Boolean read get_IsEmpty;
    property CurrentItem: DDN.mscorlib.DNObject read get_CurrentItem;
    property CurrentPosition: Int32 read get_CurrentPosition;
    property IsCurrentAfterLast: Boolean read get_IsCurrentAfterLast;
    property IsCurrentBeforeFirst: Boolean read get_IsCurrentBeforeFirst;
  end;

  //-------------namespace: System.ComponentModel----------------
  DNSortDescriptionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3F82F2F0-1F83-5D26-902D-64C828F77F00}']
  { constructors } 

    {class} function init: DNSortDescriptionCollection;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSortDescriptionCollection;

  { static fields } 

    {class} property Empty: DNSortDescriptionCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.ComponentModel.SortDescriptionCollection')]
  DNSortDescriptionCollection = interface(DDN.mscorlib.DNObject)
  ['{4D31FCBB-7A91-3E0F-9E3A-E30A76D1F74A}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNSortDescription>; index: Int32);
    function &Contains(item: DNSortDescription): Boolean;
    function IndexOf(item: DNSortDescription): Int32;
    procedure Insert(index: Int32; item: DNSortDescription);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortDescriptionCollection = class(TDNGenericImport<DNSortDescriptionCollectionClass, DNSortDescriptionCollection>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStrokeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0398F2FD-6375-5D8E-A8DB-2A35F0A67846}']
  { constructors } 

    {class} function init: DNStrokeCollection; overload;
    {class} function init(strokes: DDN.mscorlib.DNIEnumerable<DNStroke>): DNStrokeCollection; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNStrokeCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_InkSerializedFormat: string;

  { static fields } 

    {class} property InkSerializedFormat: string read __fakeFieldGet_InkSerializedFormat;

  end;

  [DNTypeName('System.Windows.Ink.StrokeCollection')]
  DNStrokeCollection = interface(DDN.mscorlib.DNObject)
  ['{ED486B01-26E5-3F35-98B4-B7D56D98126B}']
  { getters & setters } 

    function get_Count: Int32;

  { events } 

    procedure add_StrokesChanged(value: DNStrokeCollectionChangedEventHandler);
    procedure remove_StrokesChanged(value: DNStrokeCollectionChangedEventHandler);
    procedure add_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);
    procedure remove_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);

  { methods } 

    procedure Save(stream: DDN.mscorlib.DNStream; compress: Boolean); overload;
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    procedure AddPropertyData(propertyDataId: DDN.mscorlib.DNGuid; propertyData: DDN.mscorlib.DNObject);
    procedure RemovePropertyData(propertyDataId: DDN.mscorlib.DNGuid);
    function GetPropertyData(propertyDataId: DDN.mscorlib.DNGuid): DDN.mscorlib.DNObject;
    function GetPropertyDataIds: TArray<DDN.mscorlib.DNGuid>;
    function ContainsPropertyData(propertyDataId: DDN.mscorlib.DNGuid): Boolean;
    procedure Transform(transformMatrix: DNMatrix; applyToStylusTip: Boolean);
    function Clone: DNStrokeCollection;
    function IndexOf(stroke: DNStroke): Int32;
    procedure Remove(strokes: DNStrokeCollection);
    procedure Add(strokes: DNStrokeCollection);
    procedure Replace(strokeToReplace: DNStroke; strokesToReplaceWith: DNStrokeCollection); overload;
    procedure Replace(strokesToReplace: DNStrokeCollection; strokesToReplaceWith: DNStrokeCollection); overload;
    function GetBounds: DNRect;
    function HitTest(point: DNPoint): DNStrokeCollection; overload;
    function HitTest(point: DNPoint; diameter: Double): DNStrokeCollection; overload;
    function HitTest(lassoPoints: DDN.mscorlib.DNIEnumerable<DNPoint>; percentageWithinLasso: Int32): DNStrokeCollection; overload;
    function HitTest(bounds: DNRect; percentageWithinBounds: Int32): DNStrokeCollection; overload;
    function HitTest(path: DDN.mscorlib.DNIEnumerable<DNPoint>; stylusShape: DNStylusShape): DNStrokeCollection; overload;
    procedure Clip(lassoPoints: DDN.mscorlib.DNIEnumerable<DNPoint>); overload;
    procedure Erase(lassoPoints: DDN.mscorlib.DNIEnumerable<DNPoint>); overload;
    procedure Erase(eraserPath: DDN.mscorlib.DNIEnumerable<DNPoint>; eraserShape: DNStylusShape); overload;
    procedure Draw(context: DNDrawingContext);
    function GetIncrementalStrokeHitTester(eraserShape: DNStylusShape): DNIncrementalStrokeHitTester;
    function GetIncrementalLassoHitTester(percentageWithinLasso: Int32): DNIncrementalLassoHitTester;
    procedure Clip(bounds: DNRect); overload;
    procedure Erase(bounds: DNRect); overload;
    procedure CopyTo(&array: TArray<DNStroke>; index: Int32);
    function &Contains(item: DNStroke): Boolean;
    procedure Insert(index: Int32; item: DNStroke);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStrokeCollection = class(TDNGenericImport<DNStrokeCollectionClass, DNStrokeCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18334B3E-9349-50FC-BE92-6CC16EF73E5C}']
  { constructors } 

    {class} function init: DNStylusPointCollection; overload;
    {class} function init(initialCapacity: Int32): DNStylusPointCollection; overload;
    {class} function init(stylusPointDescription: DNStylusPointDescription): DNStylusPointCollection; overload;
    {class} function init(stylusPointDescription: DNStylusPointDescription; initialCapacity: Int32): DNStylusPointCollection; overload;
    {class} function init(stylusPoints: DDN.mscorlib.DNIEnumerable<DNStylusPoint>): DNStylusPointCollection; overload;
    {class} function init(points: DDN.mscorlib.DNIEnumerable<DNPoint>): DNStylusPointCollection; overload;

  end;

  [DNTypeName('System.Windows.Input.StylusPointCollection')]
  DNStylusPointCollection = interface(DDN.mscorlib.DNObject)
  ['{4B1686D2-09DE-3FBE-A10B-45007983C059}']
  { getters & setters } 

    function get_Description: DNStylusPointDescription;
    function get_Count: Int32;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Add(stylusPoints: DNStylusPointCollection);
    function Clone: DNStylusPointCollection;
    function Reformat(subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection;
    function ToHiMetricArray: TArray<Int32>;
    procedure CopyTo(&array: TArray<DNStylusPoint>; index: Int32);
    function &Contains(item: DNStylusPoint): Boolean;
    function IndexOf(item: DNStylusPoint): Int32;
    procedure Insert(index: Int32; item: DNStylusPoint);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: DNStylusPointDescription read get_Description;
    property Count: Int32 read get_Count;
  end;

  TDNStylusPointCollection = class(TDNGenericImport<DNStylusPointCollectionClass, DNStylusPointCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTouchPointCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4331DF4C-F933-5382-8A5B-3D8C540A938A}']
  { constructors } 

    {class} function init: DNTouchPointCollection;

  end;

  [DNTypeName('System.Windows.Input.TouchPointCollection')]
  DNTouchPointCollection = interface(DDN.mscorlib.DNObject)
  ['{C3BE72B2-D0E0-306D-88C1-F3B7140E652B}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNTouchPoint>; index: Int32);
    function &Contains(item: DNTouchPoint): Boolean;
    function IndexOf(item: DNTouchPoint): Int32;
    procedure Insert(index: Int32; item: DNTouchPoint);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNTouchPointCollection = class(TDNGenericImport<DNTouchPointCollectionClass, DNTouchPointCollection>) end;

  //-------------namespace: System.Windows----------------
  DNTriggerCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{66796370-512A-5416-AB3C-74CEF017D1AC}']
  end;

  [DNTypeName('System.Windows.TriggerCollection')]
  DNTriggerCollection = interface(DDN.mscorlib.DNObject)
  ['{BB54C12D-E323-3944-A5EB-3E73525BD6BB}']
  { getters & setters } 

    function get_IsSealed: Boolean;
    function get_Count: Int32;

  { methods } 

    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsSealed: Boolean read get_IsSealed;
    property Count: Int32 read get_Count;
  end;

  TDNTriggerCollection = class(TDNGenericImport<DNTriggerCollectionClass, DNTriggerCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusButtonCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{17A56F55-5EAE-55F5-9060-EB8B3FF7CAA0}']
  end;

  [DNTypeName('System.Windows.Input.StylusButtonCollection')]
  DNStylusButtonCollection = interface(DDN.mscorlib.DNObject)
  ['{A71EE954-4650-3C17-9C4F-F5173DCCC934}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetStylusButtonByGuid(guid: DDN.mscorlib.DNGuid): DNStylusButton;
    function &Contains(value: DNStylusButton): Boolean;
    procedure CopyTo(&array: TArray<DNStylusButton>; index: Int32);
    function IndexOf(value: DNStylusButton): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStylusButtonCollection = class(TDNGenericImport<DNStylusButtonCollectionClass, DNStylusButtonCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{B7818FF0-6370-5A57-989D-24CCCEEE0165}']
  { constructors } 

    {class} function init(components: TArray<DNIComponent>): DNComponentCollection;

  end;

  [DNTypeName('System.ComponentModel.ComponentCollection')]
  DNComponentCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{9653003F-5A61-33CB-86E6-1BA38CED5DF8}']
  { getters & setters } 

    function get_Item(name: string): DNIComponent; overload;
    function get_Item(index: Int32): DNIComponent; overload;
    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNIComponent>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNIComponent read get_Item; default;
    property Item[index: Int32]: DNIComponent read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNComponentCollection = class(TDNGenericImport<DNComponentCollectionClass, DNComponentCollection>) end;

  //-------------namespace: System.Collections.Specialized----------------
  [DNTypeName('System.Collections.Specialized.INotifyCollectionChanged')]
  DNINotifyCollectionChanged = interface(DDN.mscorlib.DNObject)
  ['{150173C6-D488-3654-807A-7FE534EB309C}']
  { events } 

    procedure add_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);
    procedure remove_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);

  end;

  //-------------namespace: System.Collections.Specialized----------------
  DNNameObjectCollectionBase_KeysCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8056D97B-E35F-57D6-A66E-94C97EE8836D}']
  end;

  [DNTypeName('System.Collections.Specialized.NameObjectCollectionBase+KeysCollection')]
  DNNameObjectCollectionBase_KeysCollection = interface(DDN.mscorlib.DNObject)
  ['{4F00D501-6A21-3AF8-8BE7-5B41DF6456A1}']
  { getters & setters } 

    function get_Item(index: Int32): string;
    function get_Count: Int32;

  { methods } 

    function Get(index: Int32): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: string read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNNameObjectCollectionBase_KeysCollection = class(TDNGenericImport<DNNameObjectCollectionBase_KeysCollectionClass, DNNameObjectCollectionBase_KeysCollection>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNNameValueCollectionClass = interface(DNObjectClass)
  ['{8A48AC0E-4E01-5F5E-AB8C-561846E46221}']
  { constructors } 

    {class} function init: DNNameValueCollection; overload;
    {class} function init(col: DNNameValueCollection): DNNameValueCollection; overload;
    {class} function init(hashProvider: DDN.mscorlib.DNIHashCodeProvider; comparer: DDN.mscorlib.DNIComparer): DNNameValueCollection; overload;
    {class} function init(capacity: Int32): DNNameValueCollection; overload;
    {class} function init(equalityComparer: DDN.mscorlib.DNIEqualityComparer): DNNameValueCollection; overload;
    {class} function init(capacity: Int32; equalityComparer: DDN.mscorlib.DNIEqualityComparer): DNNameValueCollection; overload;
    {class} function init(capacity: Int32; col: DNNameValueCollection): DNNameValueCollection; overload;
    {class} function init(capacity: Int32; hashProvider: DDN.mscorlib.DNIHashCodeProvider; comparer: DDN.mscorlib.DNIComparer): DNNameValueCollection; overload;

  end;

  [DNTypeName('System.Collections.Specialized.NameValueCollection')]
  DNNameValueCollection = interface(DNObject)
  ['{AA01B7E8-9A70-3252-B321-4D5D85FDEF2C}']
  { getters & setters } 

    function get_Item(name: string): string; overload;
    procedure set_Item(name: string; value: string);
    function get_Item(index: Int32): string; overload;
    function get_AllKeys: TArray<string>;
    function get_Count: Int32;
    function get_Keys: DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    procedure Add(c: DNNameValueCollection); overload;
    procedure Clear;
    function HasKeys: Boolean;
    procedure Add(name: string; value: string); overload;
    function Get(name: string): string; overload;
    function GetValues(name: string): TArray<string>; overload;
    procedure &Set(name: string; value: string);
    procedure Remove(name: string);
    function Get(index: Int32): string; overload;
    function GetValues(index: Int32): TArray<string>; overload;
    function GetKey(index: Int32): string;
    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: string read get_Item write set_Item; default;
    property Item[index: Int32]: string read get_Item; default;
    property AllKeys: TArray<string> read get_AllKeys;
    property Count: Int32 read get_Count;
    property Keys: DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNNameValueCollection = class(TDNGenericImport<DNNameValueCollectionClass, DNNameValueCollection>) end;

  //-------------namespace: System.Net----------------
  DNWebHeaderCollectionClass = interface(DNNameValueCollectionClass)
  ['{61575522-2A63-5D65-B1E7-524CA859D619}']
  { constructors } 

    {class} function init: DNWebHeaderCollection;

  { static methods } 

    {class} function IsRestricted(headerName: string): Boolean; overload;
    {class} function IsRestricted(headerName: string; response: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Net.WebHeaderCollection')]
  DNWebHeaderCollection = interface(DNNameValueCollection)
  ['{430D1273-C3E9-3632-9988-389C81849C00}']
  { getters & setters } 

    function get_Item(header: DNHttpRequestHeader): string; overload;
    procedure set_Item(header: DNHttpRequestHeader; value: string); overload;
    function get_Item(header: DNHttpResponseHeader): string; overload;
    procedure set_Item(header: DNHttpResponseHeader; value: string); overload;
    function get_Count: Int32;
    function get_Keys: DNNameObjectCollectionBase_KeysCollection;
    function get_AllKeys: TArray<string>;
    function get_Item(name: string): string; overload;
    procedure set_Item(name: string; value: string); overload;
    function get_Item(index: Int32): string; overload;

  { methods } 

    procedure Add(header: DNHttpRequestHeader; value: string); overload;
    procedure &Set(header: DNHttpRequestHeader; value: string); overload;
    procedure Remove(header: DNHttpRequestHeader); overload;
    procedure Remove(header: DNHttpResponseHeader); overload;
    procedure Remove(name: string); overload;
    function ToString: string;
    function ToByteArray: TArray<Byte>;
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Get(name: string): string; overload;
    function Get(index: Int32): string; overload;
    function GetValues(index: Int32): TArray<string>; overload;
    function GetKey(index: Int32): string;
    procedure Clear;
    procedure Add(header: DNHttpResponseHeader; value: string); overload;
    procedure &Set(header: DNHttpResponseHeader; value: string); overload;
    procedure Add(name: string; value: string); overload;
    procedure Add(header: string); overload;
    procedure &Set(name: string; value: string); overload;
    function GetValues(header: string): TArray<string>; overload;
    procedure GetObjectData(serializationInfo: DDN.mscorlib.DNSerializationInfo; streamingContext: DDN.mscorlib.DNStreamingContext);
    procedure Add(c: DNNameValueCollection); overload;
    function HasKeys: Boolean;
    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[header: DNHttpRequestHeader]: string read get_Item write set_Item; default;
    property Item[header: DNHttpResponseHeader]: string read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property Keys: DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: string read get_Item write set_Item; default;
    property Item[index: Int32]: string read get_Item; default;
  end;

  TDNWebHeaderCollection = class(TDNGenericImport<DNWebHeaderCollectionClass, DNWebHeaderCollection>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNStringCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1965CB76-8D43-59C0-9731-2E68ADCF2BB8}']
  { constructors } 

    {class} function init: DNStringCollection;

  end;

  [DNTypeName('System.Collections.Specialized.StringCollection')]
  DNStringCollection = interface(DDN.mscorlib.DNObject)
  ['{CFA0C6EB-5176-38E7-95B7-D13D6677CEED}']
  { getters & setters } 

    function get_Item(index: Int32): string;
    procedure set_Item(index: Int32; value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function Add(value: string): Int32;
    procedure AddRange(value: TArray<string>);
    function &Contains(value: string): Boolean;
    procedure CopyTo(&array: TArray<string>; index: Int32);
    function GetEnumerator: DNStringEnumerator;
    function IndexOf(value: string): Int32;
    procedure Insert(index: Int32; value: string);
    procedure Remove(value: string);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: string read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNStringCollection = class(TDNGenericImport<DNStringCollectionClass, DNStringCollection>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNStringDictionaryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D4F7547-A030-5E4B-970F-720C9E6FE128}']
  { constructors } 

    {class} function init: DNStringDictionary;

  end;

  [DNTypeName('System.Collections.Specialized.StringDictionary')]
  DNStringDictionary = interface(DDN.mscorlib.DNObject)
  ['{0851A3C2-AC75-3BB9-B353-5F0B3F42406C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    procedure Add(key: string; value: string);
    procedure Clear;
    function ContainsKey(key: string): Boolean;
    function ContainsValue(value: string): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    procedure Remove(key: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[key: string]: string read get_Item write set_Item; default;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNStringDictionary = class(TDNGenericImport<DNStringDictionaryClass, DNStringDictionary>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNStringEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{79BC84CF-8651-5043-9070-69C2FDB3F737}']
  end;

  [DNTypeName('System.Collections.Specialized.StringEnumerator')]
  DNStringEnumerator = interface(DDN.mscorlib.DNObject)
  ['{60E3B2B8-FF7D-3B3C-A540-E5A0DB767EBA}']
  { getters & setters } 

    function get_Current: string;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: string read get_Current;
  end;

  TDNStringEnumerator = class(TDNGenericImport<DNStringEnumeratorClass, DNStringEnumerator>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAttributeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{42F71F61-5B96-51C3-9E6F-72B8B480E2D7}']
  { constructors } 

    {class} function init(attributes: TArray<DDN.mscorlib.DNAttribute>): DNAttributeCollection;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNAttributeCollection;

  { static fields } 

    {class} property Empty: DNAttributeCollection read __fakeFieldGet_Empty;

  { static methods } 

    {class} function FromExisting(existing: DNAttributeCollection; newAttributes: TArray<DDN.mscorlib.DNAttribute>): DNAttributeCollection;

  end;

  [DNTypeName('System.ComponentModel.AttributeCollection')]
  DNAttributeCollection = interface(DDN.mscorlib.DNObject)
  ['{4309D526-F739-3BE3-B89C-4F6DDE852C14}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDN.mscorlib.DNAttribute; overload;
    function get_Item(attributeType: DDN.mscorlib.DNType): DDN.mscorlib.DNAttribute; overload;

  { methods } 

    function &Contains(attribute: DDN.mscorlib.DNAttribute): Boolean; overload;
    function &Contains(attributes: TArray<DDN.mscorlib.DNAttribute>): Boolean; overload;
    function Matches(attribute: DDN.mscorlib.DNAttribute): Boolean; overload;
    function Matches(attributes: TArray<DDN.mscorlib.DNAttribute>): Boolean; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDN.mscorlib.DNAttribute read get_Item; default;
    property Item[attributeType: DDN.mscorlib.DNType]: DDN.mscorlib.DNAttribute read get_Item; default;
  end;

  TDNAttributeCollection = class(TDNGenericImport<DNAttributeCollectionClass, DNAttributeCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNGroupDescriptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{072B00B2-AA86-5257-A309-232B0CE079AD}']
  end;

  [DNTypeName('System.ComponentModel.GroupDescription')]
  DNGroupDescription = interface(DDN.mscorlib.DNObject)
  ['{B052C46C-1867-3D59-AD83-439B670DCE0F}']
  { getters & setters } 

    function get_SortDescriptions: DNSortDescriptionCollection;
    function get_CustomSort: DDN.mscorlib.DNIComparer;
    procedure set_CustomSort(value: DDN.mscorlib.DNIComparer);

  { methods } 

    function ShouldSerializeGroupNames: Boolean;
    function ShouldSerializeSortDescriptions: Boolean;
    function NamesMatch(groupName: DDN.mscorlib.DNObject; itemName: DDN.mscorlib.DNObject): Boolean;
    function GroupNameFromItem(item: DDN.mscorlib.DNObject; level: Int32; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SortDescriptions: DNSortDescriptionCollection read get_SortDescriptions;
    property CustomSort: DDN.mscorlib.DNIComparer read get_CustomSort write set_CustomSort;
  end;

  TDNGroupDescription = class(TDNGenericImport<DNGroupDescriptionClass, DNGroupDescription>) end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INotifyPropertyChanged')]
  DNINotifyPropertyChanged = interface(DDN.mscorlib.DNObject)
  ['{C1E4E159-8825-3659-BAB8-17F67BE9E7EE}']
  { events } 

    procedure add_PropertyChanged(value: DNPropertyChangedEventHandler);
    procedure remove_PropertyChanged(value: DNPropertyChangedEventHandler);

  end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyDescriptorClass = interface(DNObjectClass)
  ['{C9622A0A-D78E-5479-95DC-0988298ECD69}']
  end;

  [DNTypeName('System.ComponentModel.PropertyDescriptor')]
  DNPropertyDescriptor = interface(DNObject)
  ['{D40E4E6F-4692-3438-B4CC-7E423473B2C1}']
  { getters & setters } 

    function get_ComponentType: DDN.mscorlib.DNType;
    function get_Converter: DNTypeConverter;
    function get_IsLocalizable: Boolean;
    function get_IsReadOnly: Boolean;
    function get_SerializationVisibility: DNDesignerSerializationVisibility;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_SupportsChangeEvents: Boolean;
    function get_Attributes: DNAttributeCollection;
    function get_Category: string;
    function get_Description: string;
    function get_IsBrowsable: Boolean;
    function get_Name: string;
    function get_DesignTimeOnly: Boolean;
    function get_DisplayName: string;

  { methods } 

    procedure AddValueChanged(component: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNEventHandler);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetChildProperties: DNPropertyDescriptorCollection; overload;
    function GetChildProperties(filter: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetChildProperties(instance: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetChildProperties(instance: DDN.mscorlib.DNObject; filter: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetHashCode: Int32;
    procedure RemoveValueChanged(component: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNEventHandler);
    function CanResetValue(component: DDN.mscorlib.DNObject): Boolean;
    function GetEditor(editorBaseType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function GetValue(component: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure ResetValue(component: DDN.mscorlib.DNObject);
    procedure SetValue(component: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function ShouldSerializeValue(component: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ComponentType: DDN.mscorlib.DNType read get_ComponentType;
    property Converter: DNTypeConverter read get_Converter;
    property IsLocalizable: Boolean read get_IsLocalizable;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property SerializationVisibility: DNDesignerSerializationVisibility read get_SerializationVisibility;
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    property SupportsChangeEvents: Boolean read get_SupportsChangeEvents;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Category: string read get_Category;
    property Description: string read get_Description;
    property IsBrowsable: Boolean read get_IsBrowsable;
    property Name: string read get_Name;
    property DesignTimeOnly: Boolean read get_DesignTimeOnly;
    property DisplayName: string read get_DisplayName;
  end;

  TDNPropertyDescriptor = class(TDNGenericImport<DNPropertyDescriptorClass, DNPropertyDescriptor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyDescriptorCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{400ECE6F-D862-52A4-AA27-E8F48F498369}']
  { constructors } 

    {class} function init(properties: TArray<DNPropertyDescriptor>): DNPropertyDescriptorCollection; overload;
    {class} function init(properties: TArray<DNPropertyDescriptor>; readOnly: Boolean): DNPropertyDescriptorCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPropertyDescriptorCollection;

  { static fields } 

    {class} property Empty: DNPropertyDescriptorCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.ComponentModel.PropertyDescriptorCollection')]
  DNPropertyDescriptorCollection = interface(DDN.mscorlib.DNObject)
  ['{36F242F1-65CA-36EB-9970-D7D97E88DA25}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPropertyDescriptor; overload;
    function get_Item(name: string): DNPropertyDescriptor; overload;

  { methods } 

    function Add(value: DNPropertyDescriptor): Int32;
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Find(name: string; ignoreCase: Boolean): DNPropertyDescriptor;
    procedure Insert(index: Int32; value: DNPropertyDescriptor);
    procedure RemoveAt(index: Int32);
    function Sort: DNPropertyDescriptorCollection; overload;
    function Sort(names: TArray<string>): DNPropertyDescriptorCollection; overload;
    function Sort(names: TArray<string>; comparer: DDN.mscorlib.DNIComparer): DNPropertyDescriptorCollection; overload;
    function Sort(comparer: DDN.mscorlib.DNIComparer): DNPropertyDescriptorCollection; overload;
    function &Contains(value: DNPropertyDescriptor): Boolean;
    function IndexOf(value: DNPropertyDescriptor): Int32;
    procedure Remove(value: DNPropertyDescriptor);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPropertyDescriptor read get_Item; default;
    property Item[name: string]: DNPropertyDescriptor read get_Item; default;
  end;

  TDNPropertyDescriptorCollection = class(TDNGenericImport<DNPropertyDescriptorCollectionClass, DNPropertyDescriptorCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeConverterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8D2BD4DC-2859-5F29-A55C-88C9804C1E73}']
  { constructors } 

    {class} function init: DNTypeConverter;

  end;

  [DNTypeName('System.ComponentModel.TypeConverter')]
  DNTypeConverter = interface(DDN.mscorlib.DNObject)
  ['{75992C48-BF7A-3B44-AC68-A946CFFDB2BF}']
  { methods } 

    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeConverter = class(TDNGenericImport<DNTypeConverterClass, DNTypeConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeConverter_StandardValuesCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E92DC87-B137-5B6A-A9E1-3D63BC181DEF}']
  { constructors } 

    {class} function init(values: DDN.mscorlib.DNICollection): DNTypeConverter_StandardValuesCollection;

  end;

  [DNTypeName('System.ComponentModel.TypeConverter+StandardValuesCollection')]
  DNTypeConverter_StandardValuesCollection = interface(DDN.mscorlib.DNObject)
  ['{1B3A67B8-8364-3317-BA09-4C7600D293ED}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDN.mscorlib.DNObject;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNTypeConverter_StandardValuesCollection = class(TDNGenericImport<DNTypeConverter_StandardValuesCollectionClass, DNTypeConverter_StandardValuesCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNNullableConverterClass = interface(DNTypeConverterClass)
  ['{B89F18EC-DD6E-529F-9B92-FB38F2A6DEF3}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNNullableConverter;

  end;

  [DNTypeName('System.ComponentModel.NullableConverter')]
  DNNullableConverter = interface(DNTypeConverter)
  ['{2022A220-0565-37C2-BC5E-A07176CD4829}']
  { getters & setters } 

    function get_NullableType: DDN.mscorlib.DNType;
    function get_UnderlyingType: DDN.mscorlib.DNType;
    function get_UnderlyingTypeConverter: DNTypeConverter;

  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NullableType: DDN.mscorlib.DNType read get_NullableType;
    property UnderlyingType: DDN.mscorlib.DNType read get_UnderlyingType;
    property UnderlyingTypeConverter: DNTypeConverter read get_UnderlyingTypeConverter;
  end;

  TDNNullableConverter = class(TDNGenericImport<DNNullableConverterClass, DNNullableConverter>) end;

  //-------------namespace: System.Windows----------------
  DNExpressionConverterClass = interface(DNTypeConverterClass)
  ['{72281B02-4880-5234-A8C6-AAA267714B94}']
  { constructors } 

    {class} function init: DNExpressionConverter;

  end;

  [DNTypeName('System.Windows.ExpressionConverter')]
  DNExpressionConverter = interface(DNTypeConverter)
  ['{5E80B855-1CDF-30F1-A7D9-F660D45E6021}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpressionConverter = class(TDNGenericImport<DNExpressionConverterClass, DNExpressionConverter>) end;

  //-------------namespace: System.Diagnostics----------------
  DNSourceSwitchClass = interface(DNObjectClass)
  ['{13847A0D-AE0B-5D74-9C9A-D767025F4160}']
  { constructors } 

    {class} function init(name: string): DNSourceSwitch; overload;
    {class} function init(displayName: string; defaultSwitchValue: string): DNSourceSwitch; overload;

  end;

  [DNTypeName('System.Diagnostics.SourceSwitch')]
  DNSourceSwitch = interface(DNObject)
  ['{2397357A-8D3A-3B9C-A999-7516D4F6A3E8}']
  { getters & setters } 

    function get_Level: DNSourceLevels;
    procedure set_Level(value: DNSourceLevels);
    function get_Attributes: DNStringDictionary;
    function get_DisplayName: string;
    function get_Description: string;

  { methods } 

    function ShouldTrace(eventType: DNTraceEventType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Level: DNSourceLevels read get_Level write set_Level;
    property Attributes: DNStringDictionary read get_Attributes;
    property DisplayName: string read get_DisplayName;
    property Description: string read get_Description;
  end;

  TDNSourceSwitch = class(TDNGenericImport<DNSourceSwitchClass, DNSourceSwitch>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceEventCacheClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93EF0C8A-B1EA-5C5A-852D-35436A929CD6}']
  { constructors } 

    {class} function init: DNTraceEventCache;

  end;

  [DNTypeName('System.Diagnostics.TraceEventCache')]
  DNTraceEventCache = interface(DDN.mscorlib.DNObject)
  ['{C6F4042C-71DB-31E2-9772-944FA3D67A6F}']
  { getters & setters } 

    function get_Callstack: string;
    function get_LogicalOperationStack: DDN.mscorlib.DNStack;
    function get_DateTime: DDN.mscorlib.DNDateTime;
    function get_ProcessId: Int32;
    function get_ThreadId: string;
    function get_Timestamp: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Callstack: string read get_Callstack;
    property LogicalOperationStack: DDN.mscorlib.DNStack read get_LogicalOperationStack;
    property DateTime: DDN.mscorlib.DNDateTime read get_DateTime;
    property ProcessId: Int32 read get_ProcessId;
    property ThreadId: string read get_ThreadId;
    property Timestamp: Int64 read get_Timestamp;
  end;

  TDNTraceEventCache = class(TDNGenericImport<DNTraceEventCacheClass, DNTraceEventCache>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D6A2F58-92BF-5596-ADA3-5492634450C7}']
  end;

  [DNTypeName('System.Diagnostics.TraceFilter')]
  DNTraceFilter = interface(DDN.mscorlib.DNObject)
  ['{FA161A05-74E9-37AE-8D11-A5F0752482A6}']
  { methods } 

    function ShouldTrace(cache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; formatOrMessage: string; args: TArray<DDN.mscorlib.DNObject>; data1: DDN.mscorlib.DNObject; data: TArray<DDN.mscorlib.DNObject>): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTraceFilter = class(TDNGenericImport<DNTraceFilterClass, DNTraceFilter>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceListenerCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AADB9B88-BF9A-5825-A1A8-6C115F49840E}']
  end;

  [DNTypeName('System.Diagnostics.TraceListenerCollection')]
  DNTraceListenerCollection = interface(DDN.mscorlib.DNObject)
  ['{A6FB1CEF-E670-370B-929F-9CB5B90064C6}']
  { getters & setters } 

    function get_Item(i: Int32): DNTraceListener; overload;
    procedure set_Item(i: Int32; value: DNTraceListener);
    function get_Item(name: string): DNTraceListener; overload;
    function get_Count: Int32;

  { methods } 

    function Add(listener: DNTraceListener): Int32;
    procedure AddRange(value: TArray<DNTraceListener>); overload;
    procedure AddRange(value: DNTraceListenerCollection); overload;
    function &Contains(listener: DNTraceListener): Boolean;
    procedure CopyTo(listeners: TArray<DNTraceListener>; index: Int32);
    function IndexOf(listener: DNTraceListener): Int32;
    procedure Insert(index: Int32; listener: DNTraceListener);
    procedure Remove(listener: DNTraceListener); overload;
    procedure Remove(name: string); overload;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNTraceListener read get_Item write set_Item; default;
    property Item[name: string]: DNTraceListener read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNTraceListenerCollection = class(TDNGenericImport<DNTraceListenerCollectionClass, DNTraceListenerCollection>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{17E543D5-7E9B-5C2A-9746-6642520CE4CD}']
  { constructors } 

    {class} function init(name: string): DNTraceSource; overload;
    {class} function init(name: string; defaultLevel: DNSourceLevels): DNTraceSource; overload;

  end;

  [DNTypeName('System.Diagnostics.TraceSource')]
  DNTraceSource = interface(DDN.mscorlib.DNObject)
  ['{13C8399A-109C-3950-84ED-13F791D8E158}']
  { getters & setters } 

    function get_Attributes: DNStringDictionary;
    function get_Name: string;
    function get_Listeners: DNTraceListenerCollection;
    function get_Switch: DNSourceSwitch;
    procedure set_Switch(value: DNSourceSwitch);

  { methods } 

    procedure Close;
    procedure Flush;
    procedure TraceEvent(eventType: DNTraceEventType; id: Int32); overload;
    procedure TraceEvent(eventType: DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventType: DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceData(eventType: DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceData(eventType: DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceInformation(message: string); overload;
    procedure TraceInformation(format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceTransfer(id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DNStringDictionary read get_Attributes;
    property Name: string read get_Name;
    property Listeners: DNTraceListenerCollection read get_Listeners;
    property Switch: DNSourceSwitch read get_Switch write set_Switch;
  end;

  TDNTraceSource = class(TDNGenericImport<DNTraceSourceClass, DNTraceSource>) end;

  //-------------namespace: System.Dynamic----------------
  DNBindingRestrictionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD600AAD-CFDF-54FF-8254-461FC32A3C5A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNBindingRestrictions;

  { static fields } 

    {class} property Empty: DNBindingRestrictions read __fakeFieldGet_Empty;

  { static methods } 

    {class} function GetTypeRestriction(expression: DNExpression; &type: DDN.mscorlib.DNType): DNBindingRestrictions;
    {class} function GetInstanceRestriction(expression: DNExpression; instance: DDN.mscorlib.DNObject): DNBindingRestrictions;
    {class} function GetExpressionRestriction(expression: DNExpression): DNBindingRestrictions;
    {class} function Combine(contributingObjects: DDN.mscorlib.DNIList<DNDynamicMetaObject>): DNBindingRestrictions;

  end;

  [DNTypeName('System.Dynamic.BindingRestrictions')]
  DNBindingRestrictions = interface(DDN.mscorlib.DNObject)
  ['{FB6E11CE-F3B8-3BEC-AE30-9135F618C3A4}']
  { methods } 

    function Merge(restrictions: DNBindingRestrictions): DNBindingRestrictions;
    function ToExpression: DNExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBindingRestrictions = class(TDNGenericImport<DNBindingRestrictionsClass, DNBindingRestrictions>) end;

  //-------------namespace: System.Dynamic----------------
  DNCallInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80DF0ECB-4EE5-57E9-B196-D0D3DA6EBE68}']
  { constructors } 

    {class} function init(argCount: Int32; argNames: TArray<string>): DNCallInfo; overload;
    {class} function init(argCount: Int32; argNames: DDN.mscorlib.DNIEnumerable<string>): DNCallInfo; overload;

  end;

  [DNTypeName('System.Dynamic.CallInfo')]
  DNCallInfo = interface(DDN.mscorlib.DNObject)
  ['{9FE8E955-3B50-3853-9698-AE3CA9D0B2D9}']
  { getters & setters } 

    function get_ArgumentCount: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  TDNCallInfo = class(TDNGenericImport<DNCallInfoClass, DNCallInfo>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicMetaObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F4E3A75-55E7-505A-B140-2023A687853A}']
  { constructors } 

    {class} function init(expression: DNExpression; restrictions: DNBindingRestrictions): DNDynamicMetaObject; overload;
    {class} function init(expression: DNExpression; restrictions: DNBindingRestrictions; value: DDN.mscorlib.DNObject): DNDynamicMetaObject; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EmptyMetaObjects: TArray<DNDynamicMetaObject>;

  { static fields } 

    {class} property EmptyMetaObjects: TArray<DNDynamicMetaObject> read __fakeFieldGet_EmptyMetaObjects;

  { static methods } 

    {class} function Create(value: DDN.mscorlib.DNObject; expression: DNExpression): DNDynamicMetaObject;

  end;

  [DNTypeName('System.Dynamic.DynamicMetaObject')]
  DNDynamicMetaObject = interface(DDN.mscorlib.DNObject)
  ['{7C5EC2F6-5CA9-34BC-B4E0-C857AA5BE3D7}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_Restrictions: DNBindingRestrictions;
    function get_Value: DDN.mscorlib.DNObject;
    function get_HasValue: Boolean;
    function get_RuntimeType: DDN.mscorlib.DNType;
    function get_LimitType: DDN.mscorlib.DNType;

  { methods } 

    function BindConvert(binder: DNConvertBinder): DNDynamicMetaObject;
    function BindGetMember(binder: DNGetMemberBinder): DNDynamicMetaObject;
    function BindSetMember(binder: DNSetMemberBinder; value: DNDynamicMetaObject): DNDynamicMetaObject;
    function BindDeleteMember(binder: DNDeleteMemberBinder): DNDynamicMetaObject;
    function BindGetIndex(binder: DNGetIndexBinder; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindSetIndex(binder: DNSetIndexBinder; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject): DNDynamicMetaObject;
    function BindDeleteIndex(binder: DNDeleteIndexBinder; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindInvokeMember(binder: DNInvokeMemberBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindInvoke(binder: DNInvokeBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindCreateInstance(binder: DNCreateInstanceBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindUnaryOperation(binder: DNUnaryOperationBinder): DNDynamicMetaObject;
    function BindBinaryOperation(binder: DNBinaryOperationBinder; arg: DNDynamicMetaObject): DNDynamicMetaObject;
    function GetDynamicMemberNames: DDN.mscorlib.DNIEnumerable<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property Restrictions: DNBindingRestrictions read get_Restrictions;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property HasValue: Boolean read get_HasValue;
    property RuntimeType: DDN.mscorlib.DNType read get_RuntimeType;
    property LimitType: DDN.mscorlib.DNType read get_LimitType;
  end;

  TDNDynamicMetaObject = class(TDNGenericImport<DNDynamicMetaObjectClass, DNDynamicMetaObject>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E1BBE545-B356-5E8C-83E9-4B2715F4F039}']
  end;

  [DNTypeName('System.Dynamic.DynamicObject')]
  DNDynamicObject = interface(DDN.mscorlib.DNObject)
  ['{204F3E34-E149-3EAB-8FE7-10348AA2C02E}']
  { methods } 

    function TryGetMember(binder: DNGetMemberBinder; out result: DDN.mscorlib.DNObject): Boolean;
    function TrySetMember(binder: DNSetMemberBinder; value: DDN.mscorlib.DNObject): Boolean;
    function TryDeleteMember(binder: DNDeleteMemberBinder): Boolean;
    function TryInvokeMember(binder: DNInvokeMemberBinder; args: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TryConvert(binder: DNConvertBinder; out result: DDN.mscorlib.DNObject): Boolean;
    function TryCreateInstance(binder: DNCreateInstanceBinder; args: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TryInvoke(binder: DNInvokeBinder; args: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TryBinaryOperation(binder: DNBinaryOperationBinder; arg: DDN.mscorlib.DNObject; out result: DDN.mscorlib.DNObject): Boolean;
    function TryUnaryOperation(binder: DNUnaryOperationBinder; out result: DDN.mscorlib.DNObject): Boolean;
    function TryGetIndex(binder: DNGetIndexBinder; indexes: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TrySetIndex(binder: DNSetIndexBinder; indexes: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject): Boolean;
    function TryDeleteIndex(binder: DNDeleteIndexBinder; indexes: TArray<DDN.mscorlib.DNObject>): Boolean;
    function GetMetaObject(parameter: DNExpression): DNDynamicMetaObject;
    function GetDynamicMemberNames: DDN.mscorlib.DNIEnumerable<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDynamicObject = class(TDNGenericImport<DNDynamicObjectClass, DNDynamicObject>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNNotifyCollectionChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{DC4620D0-AFA7-56CA-8651-04E033E20D55}']
  { constructors } 

    {class} function init(action: DNNotifyCollectionChangedAction): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItem: DDN.mscorlib.DNObject): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItem: DDN.mscorlib.DNObject; index: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItems: DDN.mscorlib.DNIList): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItems: DDN.mscorlib.DNIList; startingIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItem: DDN.mscorlib.DNObject; oldItem: DDN.mscorlib.DNObject): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItem: DDN.mscorlib.DNObject; oldItem: DDN.mscorlib.DNObject; index: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItems: DDN.mscorlib.DNIList; oldItems: DDN.mscorlib.DNIList): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItems: DDN.mscorlib.DNIList; oldItems: DDN.mscorlib.DNIList; startingIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItem: DDN.mscorlib.DNObject; index: Int32; oldIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItems: DDN.mscorlib.DNIList; index: Int32; oldIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;

  end;

  [DNTypeName('System.Collections.Specialized.NotifyCollectionChangedEventArgs')]
  DNNotifyCollectionChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{A7C2374A-4911-3983-82F4-CF5111EAFDF0}']
  { getters & setters } 

    function get_Action: DNNotifyCollectionChangedAction;
    function get_NewItems: DDN.mscorlib.DNIList;
    function get_OldItems: DDN.mscorlib.DNIList;
    function get_NewStartingIndex: Int32;
    function get_OldStartingIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DNNotifyCollectionChangedAction read get_Action;
    property NewItems: DDN.mscorlib.DNIList read get_NewItems;
    property OldItems: DDN.mscorlib.DNIList read get_OldItems;
    property NewStartingIndex: Int32 read get_NewStartingIndex;
    property OldStartingIndex: Int32 read get_OldStartingIndex;
  end;

  TDNNotifyCollectionChangedEventArgs = class(TDNGenericImport<DNNotifyCollectionChangedEventArgsClass, DNNotifyCollectionChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAsyncCompletedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{29C3E9DB-2FD7-545F-ABE4-21181334839E}']
  { constructors } 

    {class} function init: DNAsyncCompletedEventArgs; overload;
    {class} function init(error: DDN.mscorlib.DNException; cancelled: Boolean; userState: DDN.mscorlib.DNObject): DNAsyncCompletedEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.AsyncCompletedEventArgs')]
  DNAsyncCompletedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{FB7EF278-BA12-30FB-91BD-58C29E1FCE30}']
  { getters & setters } 

    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNAsyncCompletedEventArgs = class(TDNGenericImport<DNAsyncCompletedEventArgsClass, DNAsyncCompletedEventArgs>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNGetPageCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{CFBDDCBF-D6AE-51AB-BD90-EB089856762A}']
  { constructors } 

    {class} function init(page: DNDocumentPage; pageNumber: Int32; error: DDN.mscorlib.DNException; cancelled: Boolean; userState: DDN.mscorlib.DNObject): DNGetPageCompletedEventArgs;

  end;

  [DNTypeName('System.Windows.Documents.GetPageCompletedEventArgs')]
  DNGetPageCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{2C3B6ED8-D5E0-3C7F-807F-4B842D7EF081}']
  { getters & setters } 

    function get_DocumentPage: DNDocumentPage;
    function get_PageNumber: Int32;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DocumentPage: DNDocumentPage read get_DocumentPage;
    property PageNumber: Int32 read get_PageNumber;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNGetPageCompletedEventArgs = class(TDNGenericImport<DNGetPageCompletedEventArgsClass, DNGetPageCompletedEventArgs>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNWritingCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{9F19C0E8-EEF5-5B3B-9658-6CFEFA2086E9}']
  { constructors } 

    {class} function init(cancelled: Boolean; state: DDN.mscorlib.DNObject; exception: DDN.mscorlib.DNException): DNWritingCompletedEventArgs;

  end;

  [DNTypeName('System.Windows.Documents.Serialization.WritingCompletedEventArgs')]
  DNWritingCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{852F4278-0220-3656-AD67-6C1937A5ED15}']
  { getters & setters } 

    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNWritingCompletedEventArgs = class(TDNGenericImport<DNWritingCompletedEventArgsClass, DNWritingCompletedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCancelEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{8211894D-5C55-5C18-B669-8A95DF532EB8}']
  { constructors } 

    {class} function init: DNCancelEventArgs; overload;
    {class} function init(cancel: Boolean): DNCancelEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.CancelEventArgs')]
  DNCancelEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{FBD7DB18-1E00-3218-9BBE-23C28E3296EC}']
  { getters & setters } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNCancelEventArgs = class(TDNGenericImport<DNCancelEventArgsClass, DNCancelEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCurrentChangingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D5249D4F-7113-5338-B171-44CB8AC67A87}']
  { constructors } 

    {class} function init: DNCurrentChangingEventArgs; overload;
    {class} function init(isCancelable: Boolean): DNCurrentChangingEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.CurrentChangingEventArgs')]
  DNCurrentChangingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BD0DE444-65E7-3DCE-868D-F46694E861F3}']
  { getters & setters } 

    function get_IsCancelable: Boolean;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsCancelable: Boolean read get_IsCancelable;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNCurrentChangingEventArgs = class(TDNGenericImport<DNCurrentChangingEventArgsClass, DNCurrentChangingEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNHandledEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{5EA8651F-6698-5CBA-A2A3-2A5549CBF893}']
  { constructors } 

    {class} function init: DNHandledEventArgs; overload;
    {class} function init(defaultHandledValue: Boolean): DNHandledEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.HandledEventArgs')]
  DNHandledEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{709AF0DE-B3C9-31DB-9FCB-15C48D5F548F}']
  { getters & setters } 

    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHandledEventArgs = class(TDNGenericImport<DNHandledEventArgsClass, DNHandledEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNListChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{2CB56579-6023-53C8-9532-2ED3C07398A1}']
  { constructors } 

    {class} function init(listChangedType: DNListChangedType; newIndex: Int32): DNListChangedEventArgs; overload;
    {class} function init(listChangedType: DNListChangedType; newIndex: Int32; propDesc: DNPropertyDescriptor): DNListChangedEventArgs; overload;
    {class} function init(listChangedType: DNListChangedType; propDesc: DNPropertyDescriptor): DNListChangedEventArgs; overload;
    {class} function init(listChangedType: DNListChangedType; newIndex: Int32; oldIndex: Int32): DNListChangedEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.ListChangedEventArgs')]
  DNListChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C7AAB3F1-E25D-36A2-B1BC-9082B8E2E07B}']
  { getters & setters } 

    function get_ListChangedType: DNListChangedType;
    function get_NewIndex: Int32;
    function get_OldIndex: Int32;
    function get_PropertyDescriptor: DNPropertyDescriptor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ListChangedType: DNListChangedType read get_ListChangedType;
    property NewIndex: Int32 read get_NewIndex;
    property OldIndex: Int32 read get_OldIndex;
    property PropertyDescriptor: DNPropertyDescriptor read get_PropertyDescriptor;
  end;

  TDNListChangedEventArgs = class(TDNGenericImport<DNListChangedEventArgsClass, DNListChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNProgressChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{554C6787-77E7-550B-ABF4-384941770769}']
  { constructors } 

    {class} function init(progressPercentage: Int32; userState: DDN.mscorlib.DNObject): DNProgressChangedEventArgs;

  end;

  [DNTypeName('System.ComponentModel.ProgressChangedEventArgs')]
  DNProgressChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{4BD125C8-1FDE-337C-9B5B-787C41620812}']
  { getters & setters } 

    function get_ProgressPercentage: Int32;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProgressPercentage: Int32 read get_ProgressPercentage;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNProgressChangedEventArgs = class(TDNGenericImport<DNProgressChangedEventArgsClass, DNProgressChangedEventArgs>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNWritingProgressChangedEventArgsClass = interface(DNProgressChangedEventArgsClass)
  ['{FD6FDCEC-59A0-5E67-B4A2-9B8C7045BDD0}']
  { constructors } 

    {class} function init(writingLevel: DNWritingProgressChangeLevel; number: Int32; progressPercentage: Int32; state: DDN.mscorlib.DNObject): DNWritingProgressChangedEventArgs;

  end;

  [DNTypeName('System.Windows.Documents.Serialization.WritingProgressChangedEventArgs')]
  DNWritingProgressChangedEventArgs = interface(DNProgressChangedEventArgs)
  ['{D0140974-7F7A-3DAA-BECE-B7E17B678581}']
  { getters & setters } 

    function get_Number: Int32;
    function get_WritingLevel: DNWritingProgressChangeLevel;
    function get_ProgressPercentage: Int32;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Number: Int32 read get_Number;
    property WritingLevel: DNWritingProgressChangeLevel read get_WritingLevel;
    property ProgressPercentage: Int32 read get_ProgressPercentage;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNWritingProgressChangedEventArgs = class(TDNGenericImport<DNWritingProgressChangedEventArgsClass, DNWritingProgressChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{26C79417-0E71-504B-85B2-6E6F0CF902B6}']
  { constructors } 

    {class} function init(propertyName: string): DNPropertyChangedEventArgs;

  end;

  [DNTypeName('System.ComponentModel.PropertyChangedEventArgs')]
  DNPropertyChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{D3C091DF-E4B3-3743-95AF-7F39D21EBEF0}']
  { getters & setters } 

    function get_PropertyName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyName: string read get_PropertyName;
  end;

  TDNPropertyChangedEventArgs = class(TDNGenericImport<DNPropertyChangedEventArgsClass, DNPropertyChangedEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAsyncContentLoadedEventArgsClass = interface(DNObjectClass)
  ['{AAF51CED-9DC4-5F65-B70E-DB4F23C532F8}']
  { constructors } 

    {class} function init(asyncContentState: DNAsyncContentLoadedState; percentComplete: Double): DNAsyncContentLoadedEventArgs;

  end;

  [DNTypeName('System.Windows.Automation.AsyncContentLoadedEventArgs')]
  DNAsyncContentLoadedEventArgs = interface(DNObject)
  ['{CC63525C-1F7F-3F3B-BA81-7B9EB2FE6FA9}']
  { getters & setters } 

    function get_AsyncContentLoadedState: DNAsyncContentLoadedState;
    function get_PercentComplete: Double;
    function get_EventId: DNAutomationEvent;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AsyncContentLoadedState: DNAsyncContentLoadedState read get_AsyncContentLoadedState;
    property PercentComplete: Double read get_PercentComplete;
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNAsyncContentLoadedEventArgs = class(TDNGenericImport<DNAsyncContentLoadedEventArgsClass, DNAsyncContentLoadedEventArgs>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNPagesChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{CE0882F9-11EE-557B-90C9-04680968356B}']
  { constructors } 

    {class} function init(start: Int32; count: Int32): DNPagesChangedEventArgs;

  end;

  [DNTypeName('System.Windows.Documents.PagesChangedEventArgs')]
  DNPagesChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{45CE15B4-8BDB-337C-B40B-490C668C18B4}']
  { getters & setters } 

    function get_Start: Int32;
    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: Int32 read get_Start;
    property Count: Int32 read get_Count;
  end;

  TDNPagesChangedEventArgs = class(TDNGenericImport<DNPagesChangedEventArgsClass, DNPagesChangedEventArgs>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNWritingCancelledEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4103B60A-7BB9-569E-A981-19D50E509467}']
  { constructors } 

    {class} function init(exception: DDN.mscorlib.DNException): DNWritingCancelledEventArgs;

  end;

  [DNTypeName('System.Windows.Documents.Serialization.WritingCancelledEventArgs')]
  DNWritingCancelledEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{DAD5EB8B-4F84-30C8-8DED-33CBA7788B46}']
  { getters & setters } 

    function get_Error: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Error: DDN.mscorlib.DNException read get_Error;
  end;

  TDNWritingCancelledEventArgs = class(TDNGenericImport<DNWritingCancelledEventArgsClass, DNWritingCancelledEventArgs>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNWritingPrintTicketRequiredEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{681A7D8F-5AC9-5DDE-A84B-D4E55DEB566F}']
  { constructors } 

    {class} function init(printTicketLevel: DNPrintTicketLevel; sequence: Int32): DNWritingPrintTicketRequiredEventArgs;

  end;

  [DNTypeName('System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs')]
  DNWritingPrintTicketRequiredEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0AB9C9DB-9187-3880-A79E-ED6B4881C60C}']
  { getters & setters } 

    function get_CurrentPrintTicketLevel: DNPrintTicketLevel;
    function get_Sequence: Int32;
    function get_CurrentPrintTicket: DNPrintTicket;
    procedure set_CurrentPrintTicket(value: DNPrintTicket);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentPrintTicketLevel: DNPrintTicketLevel read get_CurrentPrintTicketLevel;
    property Sequence: Int32 read get_Sequence;
    property CurrentPrintTicket: DNPrintTicket read get_CurrentPrintTicket write set_CurrentPrintTicket;
  end;

  TDNWritingPrintTicketRequiredEventArgs = class(TDNGenericImport<DNWritingPrintTicketRequiredEventArgsClass, DNWritingPrintTicketRequiredEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNDrawingAttributesReplacedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{910A8B65-29BC-5C18-9F53-D6FC8D4DD52B}']
  { constructors } 

    {class} function init(newDrawingAttributes: DNDrawingAttributes; previousDrawingAttributes: DNDrawingAttributes): DNDrawingAttributesReplacedEventArgs;

  end;

  [DNTypeName('System.Windows.Ink.DrawingAttributesReplacedEventArgs')]
  DNDrawingAttributesReplacedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{E79A9297-A863-3F6C-9A35-93F706285E57}']
  { getters & setters } 

    function get_NewDrawingAttributes: DNDrawingAttributes;
    function get_PreviousDrawingAttributes: DNDrawingAttributes;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewDrawingAttributes: DNDrawingAttributes read get_NewDrawingAttributes;
    property PreviousDrawingAttributes: DNDrawingAttributes read get_PreviousDrawingAttributes;
  end;

  TDNDrawingAttributesReplacedEventArgs = class(TDNGenericImport<DNDrawingAttributesReplacedEventArgsClass, DNDrawingAttributesReplacedEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNLassoSelectionChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{61111518-8D92-5CF8-ABA2-11CF2EF7DA57}']
  end;

  [DNTypeName('System.Windows.Ink.LassoSelectionChangedEventArgs')]
  DNLassoSelectionChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1EFC8D1B-4A6F-35B0-ADA5-433236DB2098}']
  { getters & setters } 

    function get_SelectedStrokes: DNStrokeCollection;
    function get_DeselectedStrokes: DNStrokeCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SelectedStrokes: DNStrokeCollection read get_SelectedStrokes;
    property DeselectedStrokes: DNStrokeCollection read get_DeselectedStrokes;
  end;

  TDNLassoSelectionChangedEventArgs = class(TDNGenericImport<DNLassoSelectionChangedEventArgsClass, DNLassoSelectionChangedEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNPropertyDataChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FA166FC3-A50F-5D0A-9640-8CAD97D4DA84}']
  { constructors } 

    {class} function init(propertyGuid: DDN.mscorlib.DNGuid; newValue: DDN.mscorlib.DNObject; previousValue: DDN.mscorlib.DNObject): DNPropertyDataChangedEventArgs;

  end;

  [DNTypeName('System.Windows.Ink.PropertyDataChangedEventArgs')]
  DNPropertyDataChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0D064728-C236-3C67-A675-86603B44DEA8}']
  { getters & setters } 

    function get_PropertyGuid: DDN.mscorlib.DNGuid;
    function get_NewValue: DDN.mscorlib.DNObject;
    function get_PreviousValue: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyGuid: DDN.mscorlib.DNGuid read get_PropertyGuid;
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
    property PreviousValue: DDN.mscorlib.DNObject read get_PreviousValue;
  end;

  TDNPropertyDataChangedEventArgs = class(TDNGenericImport<DNPropertyDataChangedEventArgsClass, DNPropertyDataChangedEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStrokeCollectionChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{92167DB8-2548-510C-8D92-F44C45D55507}']
  { constructors } 

    {class} function init(added: DNStrokeCollection; removed: DNStrokeCollection): DNStrokeCollectionChangedEventArgs;

  end;

  [DNTypeName('System.Windows.Ink.StrokeCollectionChangedEventArgs')]
  DNStrokeCollectionChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{FE760549-9BC9-3541-8245-5167B7AEA588}']
  { getters & setters } 

    function get_Added: DNStrokeCollection;
    function get_Removed: DNStrokeCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Added: DNStrokeCollection read get_Added;
    property Removed: DNStrokeCollection read get_Removed;
  end;

  TDNStrokeCollectionChangedEventArgs = class(TDNGenericImport<DNStrokeCollectionChangedEventArgsClass, DNStrokeCollectionChangedEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStrokeHitEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{2FE1B1C9-E51B-57AE-BB76-66946E96440C}']
  end;

  [DNTypeName('System.Windows.Ink.StrokeHitEventArgs')]
  DNStrokeHitEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F8F31090-4242-3A58-B728-A2AB6E1E0C23}']
  { getters & setters } 

    function get_HitStroke: DNStroke;

  { methods } 

    function GetPointEraseResults: DNStrokeCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HitStroke: DNStroke read get_HitStroke;
  end;

  TDNStrokeHitEventArgs = class(TDNGenericImport<DNStrokeHitEventArgsClass, DNStrokeHitEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStylusPointsReplacedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{B97DAE37-22B0-5C9D-B2EF-B80828C76F69}']
  { constructors } 

    {class} function init(newStylusPoints: DNStylusPointCollection; previousStylusPoints: DNStylusPointCollection): DNStylusPointsReplacedEventArgs;

  end;

  [DNTypeName('System.Windows.Ink.StylusPointsReplacedEventArgs')]
  DNStylusPointsReplacedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{24B22091-6679-3F14-9F30-2791087D8BC3}']
  { getters & setters } 

    function get_NewStylusPoints: DNStylusPointCollection;
    function get_PreviousStylusPoints: DNStylusPointCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewStylusPoints: DNStylusPointCollection read get_NewStylusPoints;
    property PreviousStylusPoints: DNStylusPointCollection read get_PreviousStylusPoints;
  end;

  TDNStylusPointsReplacedEventArgs = class(TDNGenericImport<DNStylusPointsReplacedEventArgsClass, DNStylusPointsReplacedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNNotifyInputEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F01688C9-1565-51C7-8626-B2FEEF163CD0}']
  end;

  [DNTypeName('System.Windows.Input.NotifyInputEventArgs')]
  DNNotifyInputEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{209008FD-5FC6-3FCF-BDD4-1195727F0503}']
  { getters & setters } 

    function get_StagingItem: DNStagingAreaInputItem;
    function get_InputManager: DNInputManager;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StagingItem: DNStagingAreaInputItem read get_StagingItem;
    property InputManager: DNInputManager read get_InputManager;
  end;

  TDNNotifyInputEventArgs = class(TDNGenericImport<DNNotifyInputEventArgsClass, DNNotifyInputEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNProcessInputEventArgsClass = interface(DNNotifyInputEventArgsClass)
  ['{E26A7ED0-B2A4-5059-9317-B28EC5093F1D}']
  end;

  [DNTypeName('System.Windows.Input.ProcessInputEventArgs')]
  DNProcessInputEventArgs = interface(DNNotifyInputEventArgs)
  ['{36327679-6C9F-3DC7-95FB-DEE9F21A1F19}']
  { getters & setters } 

    function get_StagingItem: DNStagingAreaInputItem;
    function get_InputManager: DNInputManager;

  { methods } 

    function PushInput(input: DNInputEventArgs; promote: DNStagingAreaInputItem): DNStagingAreaInputItem; overload;
    function PushInput(input: DNStagingAreaInputItem): DNStagingAreaInputItem; overload;
    function PopInput: DNStagingAreaInputItem;
    function PeekInput: DNStagingAreaInputItem;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StagingItem: DNStagingAreaInputItem read get_StagingItem;
    property InputManager: DNInputManager read get_InputManager;
  end;

  TDNProcessInputEventArgs = class(TDNGenericImport<DNProcessInputEventArgsClass, DNProcessInputEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNPreProcessInputEventArgsClass = interface(DNProcessInputEventArgsClass)
  ['{109D9126-C484-5827-95CF-7E973E839012}']
  end;

  [DNTypeName('System.Windows.Input.PreProcessInputEventArgs')]
  DNPreProcessInputEventArgs = interface(DNProcessInputEventArgs)
  ['{6E3DB92F-7FE5-3C7B-8BAE-8BBC4331D375}']
  { getters & setters } 

    function get_Canceled: Boolean;
    function get_StagingItem: DNStagingAreaInputItem;
    function get_InputManager: DNInputManager;

  { methods } 

    procedure Cancel;
    function PushInput(input: DNInputEventArgs; promote: DNStagingAreaInputItem): DNStagingAreaInputItem; overload;
    function PushInput(input: DNStagingAreaInputItem): DNStagingAreaInputItem; overload;
    function PopInput: DNStagingAreaInputItem;
    function PeekInput: DNStagingAreaInputItem;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Canceled: Boolean read get_Canceled;
    property StagingItem: DNStagingAreaInputItem read get_StagingItem;
    property InputManager: DNInputManager read get_InputManager;
  end;

  TDNPreProcessInputEventArgs = class(TDNGenericImport<DNPreProcessInputEventArgsClass, DNPreProcessInputEventArgs>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetMarkupExtensionEventArgsClass = interface(DNObjectClass)
  ['{E828B8DB-375A-50A6-8530-78B58030D618}']
  { constructors } 

    {class} function init(member: DNXamlMember; value: DNMarkupExtension; serviceProvider: DDN.mscorlib.DNIServiceProvider): DNXamlSetMarkupExtensionEventArgs;

  end;

  [DNTypeName('System.Windows.Markup.XamlSetMarkupExtensionEventArgs')]
  DNXamlSetMarkupExtensionEventArgs = interface(DNObject)
  ['{B635BFE2-E4BE-33DB-9ECB-BC4BBC4070F9}']
  { getters & setters } 

    function get_MarkupExtension: DNMarkupExtension;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_Member: DNXamlMember;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    procedure CallBase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MarkupExtension: DNMarkupExtension read get_MarkupExtension;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property Member: DNXamlMember read get_Member;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNXamlSetMarkupExtensionEventArgs = class(TDNGenericImport<DNXamlSetMarkupExtensionEventArgsClass, DNXamlSetMarkupExtensionEventArgs>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetTypeConverterEventArgsClass = interface(DNObjectClass)
  ['{C36468DD-E6CF-52C4-9C0E-60ABBD6E8011}']
  { constructors } 

    {class} function init(member: DNXamlMember; typeConverter: DNTypeConverter; value: DDN.mscorlib.DNObject; serviceProvider: DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo): DNXamlSetTypeConverterEventArgs;

  end;

  [DNTypeName('System.Windows.Markup.XamlSetTypeConverterEventArgs')]
  DNXamlSetTypeConverterEventArgs = interface(DNObject)
  ['{C92E4D80-049A-3501-911F-A93C2F79F802}']
  { getters & setters } 

    function get_TypeConverter: DNTypeConverter;
    function get_ServiceProvider: DNITypeDescriptorContext;
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    function get_Member: DNXamlMember;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    procedure CallBase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeConverter: DNTypeConverter read get_TypeConverter;
    property ServiceProvider: DNITypeDescriptorContext read get_ServiceProvider;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo;
    property Member: DNXamlMember read get_Member;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNXamlSetTypeConverterEventArgs = class(TDNGenericImport<DNXamlSetTypeConverterEventArgsClass, DNXamlSetTypeConverterEventArgs>) end;

  //-------------namespace: System.Windows.Media----------------
  DNExceptionEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{DDC1977A-F640-5CC5-86A7-EC6C13D6198A}']
  end;

  [DNTypeName('System.Windows.Media.ExceptionEventArgs')]
  DNExceptionEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2D80A3BE-70EC-3E42-B35B-CD814A49B27C}']
  { getters & setters } 

    function get_ErrorException: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ErrorException: DDN.mscorlib.DNException read get_ErrorException;
  end;

  TDNExceptionEventArgs = class(TDNGenericImport<DNExceptionEventArgsClass, DNExceptionEventArgs>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNDownloadProgressEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{42235967-77A7-5D17-9A4A-2E89D9875947}']
  end;

  [DNTypeName('System.Windows.Media.Imaging.DownloadProgressEventArgs')]
  DNDownloadProgressEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C331DD76-0940-3475-A27D-6F53B2A38B65}']
  { getters & setters } 

    function get_Progress: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Progress: Int32 read get_Progress;
  end;

  TDNDownloadProgressEventArgs = class(TDNGenericImport<DNDownloadProgressEventArgsClass, DNDownloadProgressEventArgs>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMediaScriptCommandEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{BEC285AC-A0F8-5560-8E8C-06B9E39B715D}']
  end;

  [DNTypeName('System.Windows.Media.MediaScriptCommandEventArgs')]
  DNMediaScriptCommandEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1723E802-2BCC-321C-BE85-C939C1A00769}']
  { getters & setters } 

    function get_ParameterType: string;
    function get_ParameterValue: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParameterType: string read get_ParameterType;
    property ParameterValue: string read get_ParameterValue;
  end;

  TDNMediaScriptCommandEventArgs = class(TDNGenericImport<DNMediaScriptCommandEventArgsClass, DNMediaScriptCommandEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNRoutedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F807D56C-469E-5B66-97A5-1E59BACD379E}']
  { constructors } 

    {class} function init: DNRoutedEventArgs; overload;
    {class} function init(routedEvent: DNRoutedEvent): DNRoutedEventArgs; overload;
    {class} function init(routedEvent: DNRoutedEvent; source: DDN.mscorlib.DNObject): DNRoutedEventArgs; overload;

  end;

  [DNTypeName('System.Windows.RoutedEventArgs')]
  DNRoutedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2AD9448F-6906-318C-AB8A-37C6CD956291}']
  { getters & setters } 

    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNRoutedEventArgs = class(TDNGenericImport<DNRoutedEventArgsClass, DNRoutedEventArgs>) end;

  //-------------namespace: System.Windows.Controls----------------
  DNContextMenuEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{3151182E-5AA0-568B-91A8-85E73CDC3FFC}']
  end;

  [DNTypeName('System.Windows.Controls.ContextMenuEventArgs')]
  DNContextMenuEventArgs = interface(DNRoutedEventArgs)
  ['{E1A33E7C-8E5F-377F-BFC7-CA78DCDD6A5B}']
  { getters & setters } 

    function get_CursorLeft: Double;
    function get_CursorTop: Double;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CursorLeft: Double read get_CursorLeft;
    property CursorTop: Double read get_CursorTop;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNContextMenuEventArgs = class(TDNGenericImport<DNContextMenuEventArgsClass, DNContextMenuEventArgs>) end;

  //-------------namespace: System.Windows.Controls----------------
  DNToolTipEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{8B367949-A5A4-5921-9AEF-6FF893A9B573}']
  end;

  [DNTypeName('System.Windows.Controls.ToolTipEventArgs')]
  DNToolTipEventArgs = interface(DNRoutedEventArgs)
  ['{FBB25819-8068-3B4F-A701-5863756FB0D5}']
  { getters & setters } 

    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNToolTipEventArgs = class(TDNGenericImport<DNToolTipEventArgsClass, DNToolTipEventArgs>) end;

  //-------------namespace: System.Windows.Data----------------
  DNDataTransferEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{6C22D470-D26C-5FBC-91E3-FD96049AFE2E}']
  end;

  [DNTypeName('System.Windows.Data.DataTransferEventArgs')]
  DNDataTransferEventArgs = interface(DNRoutedEventArgs)
  ['{636899D5-2D9C-37A2-A456-D182909B6B2E}']
  { getters & setters } 

    function get_TargetObject: DNDependencyObject;
    function get_Property: DNDependencyProperty;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetObject: DNDependencyObject read get_TargetObject;
    property &Property: DNDependencyProperty read get_Property;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNDataTransferEventArgs = class(TDNGenericImport<DNDataTransferEventArgsClass, DNDataTransferEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNDpiChangedEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{348A3D65-C417-56B7-95DE-391AD58825F7}']
  end;

  [DNTypeName('System.Windows.DpiChangedEventArgs')]
  DNDpiChangedEventArgs = interface(DNRoutedEventArgs)
  ['{1E815D4F-1C7A-3624-89B3-500AECDC2AD0}']
  { getters & setters } 

    function get_OldDpi: DNDpiScale;
    function get_NewDpi: DNDpiScale;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OldDpi: DNDpiScale read get_OldDpi;
    property NewDpi: DNDpiScale read get_NewDpi;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNDpiChangedEventArgs = class(TDNGenericImport<DNDpiChangedEventArgsClass, DNDpiChangedEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNDragEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{A0D3A64B-2ECE-5229-A875-863CBDD3D022}']
  end;

  [DNTypeName('System.Windows.DragEventArgs')]
  DNDragEventArgs = interface(DNRoutedEventArgs)
  ['{398A4F8C-B7FE-3755-BC10-A255F7BB3369}']
  { getters & setters } 

    function get_Data: DNIDataObject;
    function get_KeyStates: DNDragDropKeyStates;
    function get_AllowedEffects: DNDragDropEffects;
    function get_Effects: DNDragDropEffects;
    procedure set_Effects(value: DNDragDropEffects);
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Data: DNIDataObject read get_Data;
    property KeyStates: DNDragDropKeyStates read get_KeyStates;
    property AllowedEffects: DNDragDropEffects read get_AllowedEffects;
    property Effects: DNDragDropEffects read get_Effects write set_Effects;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNDragEventArgs = class(TDNGenericImport<DNDragEventArgsClass, DNDragEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNGiveFeedbackEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{EF5B5274-AD6F-5A43-AEC8-E0E26F8731A2}']
  end;

  [DNTypeName('System.Windows.GiveFeedbackEventArgs')]
  DNGiveFeedbackEventArgs = interface(DNRoutedEventArgs)
  ['{9DB6C689-0FC9-32A0-9384-0F6CD88462D6}']
  { getters & setters } 

    function get_Effects: DNDragDropEffects;
    function get_UseDefaultCursors: Boolean;
    procedure set_UseDefaultCursors(value: Boolean);
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Effects: DNDragDropEffects read get_Effects;
    property UseDefaultCursors: Boolean read get_UseDefaultCursors write set_UseDefaultCursors;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNGiveFeedbackEventArgs = class(TDNGenericImport<DNGiveFeedbackEventArgsClass, DNGiveFeedbackEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCanExecuteRoutedEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{6F40BEE4-4ED8-5595-BC13-9660171A7147}']
  end;

  [DNTypeName('System.Windows.Input.CanExecuteRoutedEventArgs')]
  DNCanExecuteRoutedEventArgs = interface(DNRoutedEventArgs)
  ['{C200A19A-2CC1-3220-A4B0-B156203A3C28}']
  { getters & setters } 

    function get_Command: DNICommand;
    function get_Parameter: DDN.mscorlib.DNObject;
    function get_CanExecute: Boolean;
    procedure set_CanExecute(value: Boolean);
    function get_ContinueRouting: Boolean;
    procedure set_ContinueRouting(value: Boolean);
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNICommand read get_Command;
    property Parameter: DDN.mscorlib.DNObject read get_Parameter;
    property CanExecute: Boolean read get_CanExecute write set_CanExecute;
    property ContinueRouting: Boolean read get_ContinueRouting write set_ContinueRouting;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNCanExecuteRoutedEventArgs = class(TDNGenericImport<DNCanExecuteRoutedEventArgsClass, DNCanExecuteRoutedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNExecutedRoutedEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{38BB61B5-DF92-5233-890C-6208F48E5FC1}']
  end;

  [DNTypeName('System.Windows.Input.ExecutedRoutedEventArgs')]
  DNExecutedRoutedEventArgs = interface(DNRoutedEventArgs)
  ['{FD6724B5-6B10-3D57-A31C-ADCF5948F961}']
  { getters & setters } 

    function get_Command: DNICommand;
    function get_Parameter: DDN.mscorlib.DNObject;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNICommand read get_Command;
    property Parameter: DDN.mscorlib.DNObject read get_Parameter;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNExecutedRoutedEventArgs = class(TDNGenericImport<DNExecutedRoutedEventArgsClass, DNExecutedRoutedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{69D7679E-0CF4-59DC-A314-A2FC18857129}']
  { constructors } 

    {class} function init(inputDevice: DNInputDevice; timestamp: Int32): DNInputEventArgs;

  end;

  [DNTypeName('System.Windows.Input.InputEventArgs')]
  DNInputEventArgs = interface(DNRoutedEventArgs)
  ['{5080CF3A-33B0-3D38-B710-9F2697B17A77}']
  { getters & setters } 

    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNInputEventArgs = class(TDNGenericImport<DNInputEventArgsClass, DNInputEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyboardFocusChangedEventArgsClass = interface(DNObjectClass)
  ['{1791911B-1C91-58A8-9140-17C5E533E01B}']
  { constructors } 

    {class} function init(keyboard: DNKeyboardDevice; timestamp: Int32; oldFocus: DNIInputElement; newFocus: DNIInputElement): DNKeyboardFocusChangedEventArgs;

  end;

  [DNTypeName('System.Windows.Input.KeyboardFocusChangedEventArgs')]
  DNKeyboardFocusChangedEventArgs = interface(DNObject)
  ['{858660E0-92BD-39ED-8EC1-E4B9C4827F36}']
  { getters & setters } 

    function get_OldFocus: DNIInputElement;
    function get_NewFocus: DNIInputElement;
    function get_KeyboardDevice: DNKeyboardDevice;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OldFocus: DNIInputElement read get_OldFocus;
    property NewFocus: DNIInputElement read get_NewFocus;
    property KeyboardDevice: DNKeyboardDevice read get_KeyboardDevice;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNKeyboardFocusChangedEventArgs = class(TDNGenericImport<DNKeyboardFocusChangedEventArgsClass, DNKeyboardFocusChangedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyEventArgsClass = interface(DNObjectClass)
  ['{D099FF1B-8F93-58FA-A048-93D02E4C08AB}']
  { constructors } 

    {class} function init(keyboard: DNKeyboardDevice; inputSource: DNPresentationSource; timestamp: Int32; key: DNKey): DNKeyEventArgs;

  end;

  [DNTypeName('System.Windows.Input.KeyEventArgs')]
  DNKeyEventArgs = interface(DNObject)
  ['{C9FE1AAA-AAAD-379C-AFC3-120B9C05C72E}']
  { getters & setters } 

    function get_InputSource: DNPresentationSource;
    function get_Key: DNKey;
    function get_ImeProcessedKey: DNKey;
    function get_SystemKey: DNKey;
    function get_DeadCharProcessedKey: DNKey;
    function get_KeyStates: DNKeyStates;
    function get_IsRepeat: Boolean;
    function get_IsDown: Boolean;
    function get_IsUp: Boolean;
    function get_IsToggled: Boolean;
    function get_KeyboardDevice: DNKeyboardDevice;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InputSource: DNPresentationSource read get_InputSource;
    property Key: DNKey read get_Key;
    property ImeProcessedKey: DNKey read get_ImeProcessedKey;
    property SystemKey: DNKey read get_SystemKey;
    property DeadCharProcessedKey: DNKey read get_DeadCharProcessedKey;
    property KeyStates: DNKeyStates read get_KeyStates;
    property IsRepeat: Boolean read get_IsRepeat;
    property IsDown: Boolean read get_IsDown;
    property IsUp: Boolean read get_IsUp;
    property IsToggled: Boolean read get_IsToggled;
    property KeyboardDevice: DNKeyboardDevice read get_KeyboardDevice;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNKeyEventArgs = class(TDNGenericImport<DNKeyEventArgsClass, DNKeyEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationBoundaryFeedbackEventArgsClass = interface(DNInputEventArgsClass)
  ['{87BA4C0E-9893-5C7E-B958-2657A0F9CFA6}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationBoundaryFeedbackEventArgs')]
  DNManipulationBoundaryFeedbackEventArgs = interface(DNInputEventArgs)
  ['{E0C22554-EDEF-3086-A4EE-BBEB549A29F8}']
  { getters & setters } 

    function get_ManipulationContainer: DNIInputElement;
    function get_BoundaryFeedback: DNManipulationDelta;
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ManipulationContainer: DNIInputElement read get_ManipulationContainer;
    property BoundaryFeedback: DNManipulationDelta read get_BoundaryFeedback;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationBoundaryFeedbackEventArgs = class(TDNGenericImport<DNManipulationBoundaryFeedbackEventArgsClass, DNManipulationBoundaryFeedbackEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationCompletedEventArgsClass = interface(DNInputEventArgsClass)
  ['{96B1F48B-2E1D-57AF-8EA7-D12FC34414F9}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationCompletedEventArgs')]
  DNManipulationCompletedEventArgs = interface(DNInputEventArgs)
  ['{4984B7FC-3D5C-39F1-B95B-D50A88CB5BB6}']
  { getters & setters } 

    function get_IsInertial: Boolean;
    function get_ManipulationContainer: DNIInputElement;
    function get_ManipulationOrigin: DNPoint;
    function get_TotalManipulation: DNManipulationDelta;
    function get_FinalVelocities: DNManipulationVelocities;
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Cancel: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInertial: Boolean read get_IsInertial;
    property ManipulationContainer: DNIInputElement read get_ManipulationContainer;
    property ManipulationOrigin: DNPoint read get_ManipulationOrigin;
    property TotalManipulation: DNManipulationDelta read get_TotalManipulation;
    property FinalVelocities: DNManipulationVelocities read get_FinalVelocities;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationCompletedEventArgs = class(TDNGenericImport<DNManipulationCompletedEventArgsClass, DNManipulationCompletedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationDeltaEventArgsClass = interface(DNInputEventArgsClass)
  ['{C3020CF9-3E0A-5A45-ACDE-39306996D75F}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationDeltaEventArgs')]
  DNManipulationDeltaEventArgs = interface(DNInputEventArgs)
  ['{54228E20-AA83-3104-9BA9-8DB5F54FDA0C}']
  { getters & setters } 

    function get_IsInertial: Boolean;
    function get_ManipulationContainer: DNIInputElement;
    function get_ManipulationOrigin: DNPoint;
    function get_CumulativeManipulation: DNManipulationDelta;
    function get_DeltaManipulation: DNManipulationDelta;
    function get_Velocities: DNManipulationVelocities;
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    procedure ReportBoundaryFeedback(unusedManipulation: DNManipulationDelta);
    procedure Complete;
    procedure StartInertia;
    function Cancel: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInertial: Boolean read get_IsInertial;
    property ManipulationContainer: DNIInputElement read get_ManipulationContainer;
    property ManipulationOrigin: DNPoint read get_ManipulationOrigin;
    property CumulativeManipulation: DNManipulationDelta read get_CumulativeManipulation;
    property DeltaManipulation: DNManipulationDelta read get_DeltaManipulation;
    property Velocities: DNManipulationVelocities read get_Velocities;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationDeltaEventArgs = class(TDNGenericImport<DNManipulationDeltaEventArgsClass, DNManipulationDeltaEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationInertiaStartingEventArgsClass = interface(DNInputEventArgsClass)
  ['{3E6A740B-2BEE-57B4-B19C-E54A59154FDE}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationInertiaStartingEventArgs')]
  DNManipulationInertiaStartingEventArgs = interface(DNInputEventArgs)
  ['{75C7CD94-C786-3D48-875B-253772B87E37}']
  { getters & setters } 

    function get_ManipulationContainer: DNIInputElement;
    function get_ManipulationOrigin: DNPoint;
    procedure set_ManipulationOrigin(value: DNPoint);
    function get_InitialVelocities: DNManipulationVelocities;
    function get_TranslationBehavior: DNInertiaTranslationBehavior;
    procedure set_TranslationBehavior(value: DNInertiaTranslationBehavior);
    function get_RotationBehavior: DNInertiaRotationBehavior;
    procedure set_RotationBehavior(value: DNInertiaRotationBehavior);
    function get_ExpansionBehavior: DNInertiaExpansionBehavior;
    procedure set_ExpansionBehavior(value: DNInertiaExpansionBehavior);
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Cancel: Boolean;
    procedure SetInertiaParameter(parameter: DNInertiaParameters2D);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ManipulationContainer: DNIInputElement read get_ManipulationContainer;
    property ManipulationOrigin: DNPoint read get_ManipulationOrigin write set_ManipulationOrigin;
    property InitialVelocities: DNManipulationVelocities read get_InitialVelocities;
    property TranslationBehavior: DNInertiaTranslationBehavior read get_TranslationBehavior write set_TranslationBehavior;
    property RotationBehavior: DNInertiaRotationBehavior read get_RotationBehavior write set_RotationBehavior;
    property ExpansionBehavior: DNInertiaExpansionBehavior read get_ExpansionBehavior write set_ExpansionBehavior;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationInertiaStartingEventArgs = class(TDNGenericImport<DNManipulationInertiaStartingEventArgsClass, DNManipulationInertiaStartingEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationStartedEventArgsClass = interface(DNInputEventArgsClass)
  ['{222A13A1-76DA-5D6F-9291-417488BCD705}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationStartedEventArgs')]
  DNManipulationStartedEventArgs = interface(DNInputEventArgs)
  ['{91791897-0B98-38DE-9F37-8D52B72D5533}']
  { getters & setters } 

    function get_ManipulationContainer: DNIInputElement;
    function get_ManipulationOrigin: DNPoint;
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    procedure Complete;
    function Cancel: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ManipulationContainer: DNIInputElement read get_ManipulationContainer;
    property ManipulationOrigin: DNPoint read get_ManipulationOrigin;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationStartedEventArgs = class(TDNGenericImport<DNManipulationStartedEventArgsClass, DNManipulationStartedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationStartingEventArgsClass = interface(DNInputEventArgsClass)
  ['{805674D0-425A-50B1-B491-0416772118CC}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationStartingEventArgs')]
  DNManipulationStartingEventArgs = interface(DNInputEventArgs)
  ['{4770345D-0FE6-3C92-9A42-44A29B2454DE}']
  { getters & setters } 

    function get_Mode: DNManipulationModes;
    procedure set_Mode(value: DNManipulationModes);
    function get_ManipulationContainer: DNIInputElement;
    procedure set_ManipulationContainer(value: DNIInputElement);
    function get_Pivot: DNManipulationPivot;
    procedure set_Pivot(value: DNManipulationPivot);
    function get_IsSingleTouchEnabled: Boolean;
    procedure set_IsSingleTouchEnabled(value: Boolean);
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Cancel: Boolean;
    procedure SetManipulationParameter(parameter: DNManipulationParameters2D);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Mode: DNManipulationModes read get_Mode write set_Mode;
    property ManipulationContainer: DNIInputElement read get_ManipulationContainer write set_ManipulationContainer;
    property Pivot: DNManipulationPivot read get_Pivot write set_Pivot;
    property IsSingleTouchEnabled: Boolean read get_IsSingleTouchEnabled write set_IsSingleTouchEnabled;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationStartingEventArgs = class(TDNGenericImport<DNManipulationStartingEventArgsClass, DNManipulationStartingEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseEventArgsClass = interface(DNInputEventArgsClass)
  ['{828F9CD4-8AA9-5ED1-B488-828E7E68E958}']
  { constructors } 

    {class} function init(mouse: DNMouseDevice; timestamp: Int32): DNMouseEventArgs; overload;
    {class} function init(mouse: DNMouseDevice; timestamp: Int32; stylusDevice: DNStylusDevice): DNMouseEventArgs; overload;

  end;

  [DNTypeName('System.Windows.Input.MouseEventArgs')]
  DNMouseEventArgs = interface(DNInputEventArgs)
  ['{D70FFB4A-1E5E-3C33-9622-708781F2FA3D}']
  { getters & setters } 

    function get_MouseDevice: DNMouseDevice;
    function get_StylusDevice: DNStylusDevice;
    function get_LeftButton: DNMouseButtonState;
    function get_RightButton: DNMouseButtonState;
    function get_MiddleButton: DNMouseButtonState;
    function get_XButton1: DNMouseButtonState;
    function get_XButton2: DNMouseButtonState;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MouseDevice: DNMouseDevice read get_MouseDevice;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property LeftButton: DNMouseButtonState read get_LeftButton;
    property RightButton: DNMouseButtonState read get_RightButton;
    property MiddleButton: DNMouseButtonState read get_MiddleButton;
    property XButton1: DNMouseButtonState read get_XButton1;
    property XButton2: DNMouseButtonState read get_XButton2;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNMouseEventArgs = class(TDNGenericImport<DNMouseEventArgsClass, DNMouseEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseButtonEventArgsClass = interface(DNMouseEventArgsClass)
  ['{2E1857B4-0A05-565D-B996-4C1AC31D03BF}']
  { constructors } 

    {class} function init(mouse: DNMouseDevice; timestamp: Int32; button: DNMouseButton): DNMouseButtonEventArgs; overload;
    {class} function init(mouse: DNMouseDevice; timestamp: Int32; button: DNMouseButton; stylusDevice: DNStylusDevice): DNMouseButtonEventArgs; overload;

  end;

  [DNTypeName('System.Windows.Input.MouseButtonEventArgs')]
  DNMouseButtonEventArgs = interface(DNMouseEventArgs)
  ['{869C09E3-4568-313E-82B7-3B3307D8D6F8}']
  { getters & setters } 

    function get_ChangedButton: DNMouseButton;
    function get_ButtonState: DNMouseButtonState;
    function get_ClickCount: Int32;
    function get_MouseDevice: DNMouseDevice;
    function get_StylusDevice: DNStylusDevice;
    function get_LeftButton: DNMouseButtonState;
    function get_RightButton: DNMouseButtonState;
    function get_MiddleButton: DNMouseButtonState;
    function get_XButton1: DNMouseButtonState;
    function get_XButton2: DNMouseButtonState;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChangedButton: DNMouseButton read get_ChangedButton;
    property ButtonState: DNMouseButtonState read get_ButtonState;
    property ClickCount: Int32 read get_ClickCount;
    property MouseDevice: DNMouseDevice read get_MouseDevice;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property LeftButton: DNMouseButtonState read get_LeftButton;
    property RightButton: DNMouseButtonState read get_RightButton;
    property MiddleButton: DNMouseButtonState read get_MiddleButton;
    property XButton1: DNMouseButtonState read get_XButton1;
    property XButton2: DNMouseButtonState read get_XButton2;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNMouseButtonEventArgs = class(TDNGenericImport<DNMouseButtonEventArgsClass, DNMouseButtonEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseWheelEventArgsClass = interface(DNMouseEventArgsClass)
  ['{DEC535A5-D48A-5210-BC6E-9DA5AFE93764}']
  { constructors } 

    {class} function init(mouse: DNMouseDevice; timestamp: Int32; delta: Int32): DNMouseWheelEventArgs;

  end;

  [DNTypeName('System.Windows.Input.MouseWheelEventArgs')]
  DNMouseWheelEventArgs = interface(DNMouseEventArgs)
  ['{C967BEEF-7702-3537-87BB-582E5862C9D1}']
  { getters & setters } 

    function get_Delta: Int32;
    function get_MouseDevice: DNMouseDevice;
    function get_StylusDevice: DNStylusDevice;
    function get_LeftButton: DNMouseButtonState;
    function get_RightButton: DNMouseButtonState;
    function get_MiddleButton: DNMouseButtonState;
    function get_XButton1: DNMouseButtonState;
    function get_XButton2: DNMouseButtonState;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Delta: Int32 read get_Delta;
    property MouseDevice: DNMouseDevice read get_MouseDevice;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property LeftButton: DNMouseButtonState read get_LeftButton;
    property RightButton: DNMouseButtonState read get_RightButton;
    property MiddleButton: DNMouseButtonState read get_MiddleButton;
    property XButton1: DNMouseButtonState read get_XButton1;
    property XButton2: DNMouseButtonState read get_XButton2;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNMouseWheelEventArgs = class(TDNGenericImport<DNMouseWheelEventArgsClass, DNMouseWheelEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNQueryCursorEventArgsClass = interface(DNMouseEventArgsClass)
  ['{008C3AE0-BC64-51F6-8017-5FFF959342F3}']
  { constructors } 

    {class} function init(mouse: DNMouseDevice; timestamp: Int32): DNQueryCursorEventArgs; overload;
    {class} function init(mouse: DNMouseDevice; timestamp: Int32; stylusDevice: DNStylusDevice): DNQueryCursorEventArgs; overload;

  end;

  [DNTypeName('System.Windows.Input.QueryCursorEventArgs')]
  DNQueryCursorEventArgs = interface(DNMouseEventArgs)
  ['{6FDE6F96-4440-3CF0-B4B2-DEE2C7CC7E46}']
  { getters & setters } 

    function get_Cursor: DNCursor;
    procedure set_Cursor(value: DNCursor);
    function get_MouseDevice: DNMouseDevice;
    function get_StylusDevice: DNStylusDevice;
    function get_LeftButton: DNMouseButtonState;
    function get_RightButton: DNMouseButtonState;
    function get_MiddleButton: DNMouseButtonState;
    function get_XButton1: DNMouseButtonState;
    function get_XButton2: DNMouseButtonState;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cursor: DNCursor read get_Cursor write set_Cursor;
    property MouseDevice: DNMouseDevice read get_MouseDevice;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property LeftButton: DNMouseButtonState read get_LeftButton;
    property RightButton: DNMouseButtonState read get_RightButton;
    property MiddleButton: DNMouseButtonState read get_MiddleButton;
    property XButton1: DNMouseButtonState read get_XButton1;
    property XButton2: DNMouseButtonState read get_XButton2;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNQueryCursorEventArgs = class(TDNGenericImport<DNQueryCursorEventArgsClass, DNQueryCursorEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusEventArgsClass = interface(DNInputEventArgsClass)
  ['{949E0CF6-9E85-5642-9FF6-C378C72F6D9D}']
  { constructors } 

    {class} function init(stylus: DNStylusDevice; timestamp: Int32): DNStylusEventArgs;

  end;

  [DNTypeName('System.Windows.Input.StylusEventArgs')]
  DNStylusEventArgs = interface(DNInputEventArgs)
  ['{40490D28-8A1D-3223-B8C5-CC8769348C52}']
  { getters & setters } 

    function get_StylusDevice: DNStylusDevice;
    function get_InAir: Boolean;
    function get_Inverted: Boolean;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function GetStylusPoints(relativeTo: DNIInputElement): DNStylusPointCollection; overload;
    function GetStylusPoints(relativeTo: DNIInputElement; subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property InAir: Boolean read get_InAir;
    property Inverted: Boolean read get_Inverted;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNStylusEventArgs = class(TDNGenericImport<DNStylusEventArgsClass, DNStylusEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusButtonEventArgsClass = interface(DNStylusEventArgsClass)
  ['{7EF48912-06D1-5058-A51F-0EA3A4BB6393}']
  { constructors } 

    {class} function init(stylusDevice: DNStylusDevice; timestamp: Int32; button: DNStylusButton): DNStylusButtonEventArgs;

  end;

  [DNTypeName('System.Windows.Input.StylusButtonEventArgs')]
  DNStylusButtonEventArgs = interface(DNStylusEventArgs)
  ['{46095FC5-3ABF-32A3-A67C-985D72E57B00}']
  { getters & setters } 

    function get_StylusButton: DNStylusButton;
    function get_StylusDevice: DNStylusDevice;
    function get_InAir: Boolean;
    function get_Inverted: Boolean;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function GetStylusPoints(relativeTo: DNIInputElement): DNStylusPointCollection; overload;
    function GetStylusPoints(relativeTo: DNIInputElement; subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StylusButton: DNStylusButton read get_StylusButton;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property InAir: Boolean read get_InAir;
    property Inverted: Boolean read get_Inverted;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNStylusButtonEventArgs = class(TDNGenericImport<DNStylusButtonEventArgsClass, DNStylusButtonEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusDownEventArgsClass = interface(DNStylusEventArgsClass)
  ['{F09D61A3-1B31-56A1-9DC0-B57F28D3042D}']
  { constructors } 

    {class} function init(stylusDevice: DNStylusDevice; timestamp: Int32): DNStylusDownEventArgs;

  end;

  [DNTypeName('System.Windows.Input.StylusDownEventArgs')]
  DNStylusDownEventArgs = interface(DNStylusEventArgs)
  ['{FC5E4B0D-3254-32DE-8648-AC54771B5E0E}']
  { getters & setters } 

    function get_TapCount: Int32;
    function get_StylusDevice: DNStylusDevice;
    function get_InAir: Boolean;
    function get_Inverted: Boolean;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function GetStylusPoints(relativeTo: DNIInputElement): DNStylusPointCollection; overload;
    function GetStylusPoints(relativeTo: DNIInputElement; subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TapCount: Int32 read get_TapCount;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property InAir: Boolean read get_InAir;
    property Inverted: Boolean read get_Inverted;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNStylusDownEventArgs = class(TDNGenericImport<DNStylusDownEventArgsClass, DNStylusDownEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusSystemGestureEventArgsClass = interface(DNStylusEventArgsClass)
  ['{BFC839A1-CD40-5520-9E3C-A17ACE8B3CB2}']
  { constructors } 

    {class} function init(stylusDevice: DNStylusDevice; timestamp: Int32; systemGesture: DNSystemGesture): DNStylusSystemGestureEventArgs;

  end;

  [DNTypeName('System.Windows.Input.StylusSystemGestureEventArgs')]
  DNStylusSystemGestureEventArgs = interface(DNStylusEventArgs)
  ['{C57AD047-137E-3392-AEDA-B2DB05019DC8}']
  { getters & setters } 

    function get_SystemGesture: DNSystemGesture;
    function get_StylusDevice: DNStylusDevice;
    function get_InAir: Boolean;
    function get_Inverted: Boolean;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function GetStylusPoints(relativeTo: DNIInputElement): DNStylusPointCollection; overload;
    function GetStylusPoints(relativeTo: DNIInputElement; subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SystemGesture: DNSystemGesture read get_SystemGesture;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property InAir: Boolean read get_InAir;
    property Inverted: Boolean read get_Inverted;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNStylusSystemGestureEventArgs = class(TDNGenericImport<DNStylusSystemGestureEventArgsClass, DNStylusSystemGestureEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTextCompositionEventArgsClass = interface(DNInputEventArgsClass)
  ['{55099432-D966-511E-9A91-253425496437}']
  { constructors } 

    {class} function init(inputDevice: DNInputDevice; composition: DNTextComposition): DNTextCompositionEventArgs;

  end;

  [DNTypeName('System.Windows.Input.TextCompositionEventArgs')]
  DNTextCompositionEventArgs = interface(DNInputEventArgs)
  ['{9EFC1D41-4C1C-3FD1-9FE5-0B3F762F8A45}']
  { getters & setters } 

    function get_TextComposition: DNTextComposition;
    function get_Text: string;
    function get_SystemText: string;
    function get_ControlText: string;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextComposition: DNTextComposition read get_TextComposition;
    property Text: string read get_Text;
    property SystemText: string read get_SystemText;
    property ControlText: string read get_ControlText;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNTextCompositionEventArgs = class(TDNGenericImport<DNTextCompositionEventArgsClass, DNTextCompositionEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTouchEventArgsClass = interface(DNInputEventArgsClass)
  ['{35EF0F8F-07E1-5D2A-AA5A-DF0A2C207E6B}']
  { constructors } 

    {class} function init(touchDevice: DNTouchDevice; timestamp: Int32): DNTouchEventArgs;

  end;

  [DNTypeName('System.Windows.Input.TouchEventArgs')]
  DNTouchEventArgs = interface(DNInputEventArgs)
  ['{7CF2FE81-D18A-313C-BB67-39DE6291BC12}']
  { getters & setters } 

    function get_TouchDevice: DNTouchDevice;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetTouchPoint(relativeTo: DNIInputElement): DNTouchPoint;
    function GetIntermediateTouchPoints(relativeTo: DNIInputElement): DNTouchPointCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TouchDevice: DNTouchDevice read get_TouchDevice;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNTouchEventArgs = class(TDNGenericImport<DNTouchEventArgsClass, DNTouchEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNQueryContinueDragEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{619D9571-BDE2-5EBA-B44F-479F2A4C0B9C}']
  end;

  [DNTypeName('System.Windows.QueryContinueDragEventArgs')]
  DNQueryContinueDragEventArgs = interface(DNRoutedEventArgs)
  ['{96DBFEC3-71A7-3959-A8D3-5AEE692D853C}']
  { getters & setters } 

    function get_EscapePressed: Boolean;
    function get_KeyStates: DNDragDropKeyStates;
    function get_Action: DNDragAction;
    procedure set_Action(value: DNDragAction);
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EscapePressed: Boolean read get_EscapePressed;
    property KeyStates: DNDragDropKeyStates read get_KeyStates;
    property Action: DNDragAction read get_Action write set_Action;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNQueryContinueDragEventArgs = class(TDNGenericImport<DNQueryContinueDragEventArgsClass, DNQueryContinueDragEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNRequestBringIntoViewEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{BE5C8CCE-74D7-508E-9749-7C3F8ED2567D}']
  end;

  [DNTypeName('System.Windows.RequestBringIntoViewEventArgs')]
  DNRequestBringIntoViewEventArgs = interface(DNRoutedEventArgs)
  ['{B8BE7540-895F-3034-B2CF-5171F9584454}']
  { getters & setters } 

    function get_TargetObject: DNDependencyObject;
    function get_TargetRect: DNRect;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetObject: DNDependencyObject read get_TargetObject;
    property TargetRect: DNRect read get_TargetRect;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNRequestBringIntoViewEventArgs = class(TDNGenericImport<DNRequestBringIntoViewEventArgsClass, DNRequestBringIntoViewEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNSizeChangedEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{6EB39679-0BB8-5FD8-96F0-5EE4BB7BB30E}']
  end;

  [DNTypeName('System.Windows.SizeChangedEventArgs')]
  DNSizeChangedEventArgs = interface(DNRoutedEventArgs)
  ['{028B0CEA-CE3C-3641-80D9-7718202678E1}']
  { getters & setters } 

    function get_PreviousSize: DNSize;
    function get_NewSize: DNSize;
    function get_WidthChanged: Boolean;
    function get_HeightChanged: Boolean;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PreviousSize: DNSize read get_PreviousSize;
    property NewSize: DNSize read get_NewSize;
    property WidthChanged: Boolean read get_WidthChanged;
    property HeightChanged: Boolean read get_HeightChanged;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNSizeChangedEventArgs = class(TDNGenericImport<DNSizeChangedEventArgsClass, DNSizeChangedEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherUnhandledExceptionEventArgsClass = interface(DNObjectClass)
  ['{F751C5B1-5A3E-5CA9-B1D7-593024F0F674}']
  end;

  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionEventArgs')]
  DNDispatcherUnhandledExceptionEventArgs = interface(DNObject)
  ['{35CD6937-DB5C-32CB-BBF7-E1F9BC201095}']
  { getters & setters } 

    function get_Exception: DDN.mscorlib.DNException;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Exception: DDN.mscorlib.DNException read get_Exception;
    property Handled: Boolean read get_Handled write set_Handled;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherUnhandledExceptionEventArgs = class(TDNGenericImport<DNDispatcherUnhandledExceptionEventArgsClass, DNDispatcherUnhandledExceptionEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherUnhandledExceptionFilterEventArgsClass = interface(DNObjectClass)
  ['{E8F12DA3-4148-575A-8DE1-D12088C7DAE7}']
  end;

  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs')]
  DNDispatcherUnhandledExceptionFilterEventArgs = interface(DNObject)
  ['{918BB443-6F39-3EBC-8E57-8FAC3C428B92}']
  { getters & setters } 

    function get_Exception: DDN.mscorlib.DNException;
    function get_RequestCatch: Boolean;
    procedure set_RequestCatch(value: Boolean);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Exception: DDN.mscorlib.DNException read get_Exception;
    property RequestCatch: Boolean read get_RequestCatch write set_RequestCatch;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherUnhandledExceptionFilterEventArgs = class(TDNGenericImport<DNDispatcherUnhandledExceptionFilterEventArgsClass, DNDispatcherUnhandledExceptionFilterEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherHookEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{8E5B96AD-675A-5D77-A0E4-14B54A5C6A07}']
  { constructors } 

    {class} function init(operation: DNDispatcherOperation): DNDispatcherHookEventArgs;

  end;

  [DNTypeName('System.Windows.Threading.DispatcherHookEventArgs')]
  DNDispatcherHookEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B48BDDAF-9FC9-3589-8B18-F5CDB772877B}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;
    function get_Operation: DNDispatcherOperation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
    property Operation: DNDispatcherOperation read get_Operation;
  end;

  TDNDispatcherHookEventArgs = class(TDNGenericImport<DNDispatcherHookEventArgsClass, DNDispatcherHookEventArgs>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNValidationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FD89FE6F-3039-5078-BA46-B00CE55AACA1}']
  end;

  [DNTypeName('System.Xml.Schema.ValidationEventArgs')]
  DNValidationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{49138DCC-3D4B-3D96-AF44-350EF4295AB3}']
  { getters & setters } 

    function get_Severity: DNXmlSeverityType;
    function get_Exception: DNXmlSchemaException;
    function get_Message: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Severity: DNXmlSeverityType read get_Severity;
    property Exception: DNXmlSchemaException read get_Exception;
    property Message: string read get_Message;
  end;

  TDNValidationEventArgs = class(TDNGenericImport<DNValidationEventArgsClass, DNValidationEventArgs>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A5830A41-9A45-5E8D-BC73-144AE5DF513F}']
  { constructors } 

    {class} function init(node: DNXmlNode; oldParent: DNXmlNode; newParent: DNXmlNode; oldValue: string; newValue: string; action: DNXmlNodeChangedAction): DNXmlNodeChangedEventArgs;

  end;

  [DNTypeName('System.Xml.XmlNodeChangedEventArgs')]
  DNXmlNodeChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{6F33740C-B2E1-3A44-A063-8F78C5C6CD1B}']
  { getters & setters } 

    function get_Action: DNXmlNodeChangedAction;
    function get_Node: DNXmlNode;
    function get_OldParent: DNXmlNode;
    function get_NewParent: DNXmlNode;
    function get_OldValue: string;
    function get_NewValue: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DNXmlNodeChangedAction read get_Action;
    property Node: DNXmlNode read get_Node;
    property OldParent: DNXmlNode read get_OldParent;
    property NewParent: DNXmlNode read get_NewParent;
    property OldValue: string read get_OldValue;
    property NewValue: string read get_NewValue;
  end;

  TDNXmlNodeChangedEventArgs = class(TDNGenericImport<DNXmlNodeChangedEventArgsClass, DNXmlNodeChangedEventArgs>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{4B8E330C-085D-5126-AF56-589AA8D96746}']
  { constructors } 

    {class} function init: DNXmlSchemaException; overload;
    {class} function init(message: string): DNXmlSchemaException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXmlSchemaException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaException; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaException')]
  DNXmlSchemaException = interface(DDN.mscorlib.DNSystemException)
  ['{8AABB69F-6F59-302E-86A1-437E6B0CA7EC}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlSchemaException = class(TDNGenericImport<DNXmlSchemaExceptionClass, DNXmlSchemaException>) end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IComponent')]
  DNIComponent = interface(DDN.mscorlib.DNIDisposable)
  ['{B86E59F2-F1E2-389D-B5F1-C55307C8106E}']
  { getters & setters } 

    function get_Site: DNISite;
    procedure set_Site(value: DNISite);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { propertys } 

    property Site: DNISite read get_Site write set_Site;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IContainer')]
  DNIContainer = interface(DDN.mscorlib.DNIDisposable)
  ['{61D9C50C-4AAD-3539-AF82-4F36C19D77C8}']
  { getters & setters } 

    function get_Components: DNComponentCollection;

  { methods } 

    procedure Add(component: DNIComponent); overload;
    procedure Add(component: DNIComponent; name: string); overload;
    procedure Remove(component: DNIComponent);

  { propertys } 

    property Components: DNComponentCollection read get_Components;
  end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D4A59CAA-C0BD-5A0A-AC6A-F9266ED14B99}']
  { static methods } 

    {class} function Open(path: string): DNPackage; overload;
    {class} function Open(path: string; packageMode: DDN.mscorlib.DNFileMode): DNPackage; overload;
    {class} function Open(path: string; packageMode: DDN.mscorlib.DNFileMode; packageAccess: DDN.mscorlib.DNFileAccess): DNPackage; overload;
    {class} function Open(path: string; packageMode: DDN.mscorlib.DNFileMode; packageAccess: DDN.mscorlib.DNFileAccess; packageShare: DDN.mscorlib.DNFileShare): DNPackage; overload;
    {class} function Open(stream: DDN.mscorlib.DNStream): DNPackage; overload;
    {class} function Open(stream: DDN.mscorlib.DNStream; packageMode: DDN.mscorlib.DNFileMode): DNPackage; overload;
    {class} function Open(stream: DDN.mscorlib.DNStream; packageMode: DDN.mscorlib.DNFileMode; packageAccess: DDN.mscorlib.DNFileAccess): DNPackage; overload;

  end;

  [DNTypeName('System.IO.Packaging.Package')]
  DNPackage = interface(DDN.mscorlib.DNObject)
  ['{E64FFA71-5302-3787-84BC-17A0A7697095}']
  { getters & setters } 

    function get_FileOpenAccess: DDN.mscorlib.DNFileAccess;
    function get_PackageProperties: DNPackageProperties;

  { methods } 

    function CreatePart(partUri: DNUri; contentType: string): DNPackagePart; overload;
    function CreatePart(partUri: DNUri; contentType: string; compressionOption: DNCompressionOption): DNPackagePart; overload;
    function GetPart(partUri: DNUri): DNPackagePart;
    function PartExists(partUri: DNUri): Boolean;
    procedure Close;
    function CreateRelationship(targetUri: DNUri; targetMode: DNTargetMode; relationshipType: string): DNPackageRelationship; overload;
    function CreateRelationship(targetUri: DNUri; targetMode: DNTargetMode; relationshipType: string; id: string): DNPackageRelationship; overload;
    function GetRelationships: DNPackageRelationshipCollection;
    function GetRelationshipsByType(relationshipType: string): DNPackageRelationshipCollection;
    function GetRelationship(id: string): DNPackageRelationship;
    function RelationshipExists(id: string): Boolean;
    procedure Flush;
    procedure DeleteRelationship(id: string);
    procedure DeletePart(partUri: DNUri);
    function GetParts: DNPackagePartCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FileOpenAccess: DDN.mscorlib.DNFileAccess read get_FileOpenAccess;
    property PackageProperties: DNPackageProperties read get_PackageProperties;
  end;

  TDNPackage = class(TDNGenericImport<DNPackageClass, DNPackage>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackagePartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{75F366D9-0429-5B89-8D90-F5202A3C7A4D}']
  end;

  [DNTypeName('System.IO.Packaging.PackagePart')]
  DNPackagePart = interface(DDN.mscorlib.DNObject)
  ['{857D257F-E47D-3A3E-AD50-E039B205F092}']
  { getters & setters } 

    function get_Uri: DNUri;
    function get_ContentType: string;
    function get_Package: DNPackage;
    function get_CompressionOption: DNCompressionOption;

  { methods } 

    function GetStream: DDN.mscorlib.DNStream; overload;
    function GetStream(mode: DDN.mscorlib.DNFileMode): DDN.mscorlib.DNStream; overload;
    function CreateRelationship(targetUri: DNUri; targetMode: DNTargetMode; relationshipType: string): DNPackageRelationship; overload;
    function CreateRelationship(targetUri: DNUri; targetMode: DNTargetMode; relationshipType: string; id: string): DNPackageRelationship; overload;
    function GetRelationships: DNPackageRelationshipCollection;
    function GetRelationshipsByType(relationshipType: string): DNPackageRelationshipCollection;
    function GetRelationship(id: string): DNPackageRelationship;
    function RelationshipExists(id: string): Boolean;
    procedure DeleteRelationship(id: string);
    function GetStream(mode: DDN.mscorlib.DNFileMode; access: DDN.mscorlib.DNFileAccess): DDN.mscorlib.DNStream; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Uri: DNUri read get_Uri;
    property ContentType: string read get_ContentType;
    property &Package: DNPackage read get_Package;
    property CompressionOption: DNCompressionOption read get_CompressionOption;
  end;

  TDNPackagePart = class(TDNGenericImport<DNPackagePartClass, DNPackagePart>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackagePartCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F42B37AB-59AF-50F6-A915-7222FE7B06C8}']
  end;

  [DNTypeName('System.IO.Packaging.PackagePartCollection')]
  DNPackagePartCollection = interface(DDN.mscorlib.DNObject)
  ['{080F5D9A-0A28-3CA9-8D5A-B0F287CDC5BC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackagePartCollection = class(TDNGenericImport<DNPackagePartCollectionClass, DNPackagePartCollection>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackagePropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{47C0AEB2-E581-5E0A-BA27-562FF14A8597}']
  end;

  [DNTypeName('System.IO.Packaging.PackageProperties')]
  DNPackageProperties = interface(DDN.mscorlib.DNObject)
  ['{8E0D9515-9AB1-3222-861F-1055272E7959}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Creator: string;
    procedure set_Creator(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_LastModifiedBy: string;
    procedure set_LastModifiedBy(value: string);
    function get_Revision: string;
    procedure set_Revision(value: string);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_Identifier: string;
    procedure set_Identifier(value: string);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title write set_Title;
    property Subject: string read get_Subject write set_Subject;
    property Creator: string read get_Creator write set_Creator;
    property Keywords: string read get_Keywords write set_Keywords;
    property Description: string read get_Description write set_Description;
    property LastModifiedBy: string read get_LastModifiedBy write set_LastModifiedBy;
    property Revision: string read get_Revision write set_Revision;
    property Category: string read get_Category write set_Category;
    property Identifier: string read get_Identifier write set_Identifier;
    property ContentType: string read get_ContentType write set_ContentType;
    property Language: string read get_Language write set_Language;
    property Version: string read get_Version write set_Version;
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
  end;

  TDNPackageProperties = class(TDNGenericImport<DNPackagePropertiesClass, DNPackageProperties>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageRelationshipClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D111D645-490B-50ED-A0E7-A5380832660B}']
  end;

  [DNTypeName('System.IO.Packaging.PackageRelationship')]
  DNPackageRelationship = interface(DDN.mscorlib.DNObject)
  ['{9DFA56CE-0D16-3E13-84AF-4EA76757236E}']
  { getters & setters } 

    function get_SourceUri: DNUri;
    function get_TargetUri: DNUri;
    function get_RelationshipType: string;
    function get_TargetMode: DNTargetMode;
    function get_Id: string;
    function get_Package: DNPackage;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SourceUri: DNUri read get_SourceUri;
    property TargetUri: DNUri read get_TargetUri;
    property RelationshipType: string read get_RelationshipType;
    property TargetMode: DNTargetMode read get_TargetMode;
    property Id: string read get_Id;
    property &Package: DNPackage read get_Package;
  end;

  TDNPackageRelationship = class(TDNGenericImport<DNPackageRelationshipClass, DNPackageRelationship>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageRelationshipCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DECF96DA-060B-58A5-8674-7A758AF68FA3}']
  end;

  [DNTypeName('System.IO.Packaging.PackageRelationshipCollection')]
  DNPackageRelationshipCollection = interface(DDN.mscorlib.DNObject)
  ['{0B9D239A-1FB1-35CA-8665-0C637E28CABA}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackageRelationshipCollection = class(TDNGenericImport<DNPackageRelationshipCollectionClass, DNPackageRelationshipCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ISite')]
  DNISite = interface(DDN.mscorlib.DNIServiceProvider)
  ['{C4E1006A-9D98-3E96-A07E-921725135C28}']
  { getters & setters } 

    function get_Component: DNIComponent;
    function get_Container: DNIContainer;
    function get_DesignMode: Boolean;
    function get_Name: string;
    procedure set_Name(value: string);

  { propertys } 

    property Component: DNIComponent read get_Component;
    property Container: DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
    property Name: string read get_Name write set_Name;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ITypeDescriptorContext')]
  DNITypeDescriptorContext = interface(DDN.mscorlib.DNIServiceProvider)
  ['{5CBAE170-8759-3B8A-B919-E12FB86AD1F3}']
  { getters & setters } 

    function get_Container: DNIContainer;
    function get_Instance: DDN.mscorlib.DNObject;
    function get_PropertyDescriptor: DNPropertyDescriptor;

  { methods } 

    function OnComponentChanging: Boolean;
    procedure OnComponentChanged;

  { propertys } 

    property Container: DNIContainer read get_Container;
    property Instance: DDN.mscorlib.DNObject read get_Instance;
    property PropertyDescriptor: DNPropertyDescriptor read get_PropertyDescriptor;
  end;

  //-------------namespace: System.Windows.Markup----------------
  [DNTypeName('System.Windows.Markup.IValueSerializerContext')]
  DNIValueSerializerContext = interface(DNITypeDescriptorContext)
  ['{8304769D-A06C-3C84-98F6-6690BC5727C4}']
  { methods } 

    function GetValueSerializerFor(&type: DDN.mscorlib.DNType): DNValueSerializer; overload;
    function GetValueSerializerFor(descriptor: DNPropertyDescriptor): DNValueSerializer; overload;

  end;

  //-------------namespace: System.Linq.Expressions----------------
  DNCatchBlockClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82F694E3-D0BB-57EF-8298-83B63E214F5B}']
  end;

  [DNTypeName('System.Linq.Expressions.CatchBlock')]
  DNCatchBlock = interface(DDN.mscorlib.DNObject)
  ['{FC67E70C-F8B5-3A77-8CD8-A289136AEF93}']
  { getters & setters } 

    function get_Variable: DNParameterExpression;
    function get_Test: DDN.mscorlib.DNType;
    function get_Body: DNExpression;
    function get_Filter: DNExpression;

  { methods } 

    function ToString: string;
    function Update(variable: DNParameterExpression; filter: DNExpression; body: DNExpression): DNCatchBlock;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Variable: DNParameterExpression read get_Variable;
    property Test: DDN.mscorlib.DNType read get_Test;
    property Body: DNExpression read get_Body;
    property Filter: DNExpression read get_Filter;
  end;

  TDNCatchBlock = class(TDNGenericImport<DNCatchBlockClass, DNCatchBlock>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNElementInitClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9AE3CB1-9152-5890-A5A0-5BAC809079B4}']
  end;

  [DNTypeName('System.Linq.Expressions.ElementInit')]
  DNElementInit = interface(DDN.mscorlib.DNObject)
  ['{45F6112D-6439-3067-BDB9-DA62367EFBC0}']
  { getters & setters } 

    function get_AddMethod: DDN.mscorlib.DNMethodInfo;

  { methods } 

    function ToString: string;
    function Update(arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNElementInit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AddMethod: DDN.mscorlib.DNMethodInfo read get_AddMethod;
  end;

  TDNElementInit = class(TDNGenericImport<DNElementInitClass, DNElementInit>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB5693C1-11DD-5538-880B-F4BDF42BA0B1}']
  { static methods } 

    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Equal(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function GreaterThan(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LessThanOrEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AndAlso(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function OrElse(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Coalesce(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Add(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AddChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Subtract(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Divide(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Modulo(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Multiply(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LeftShift(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function RightShift(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function &And(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function &Or(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ExclusiveOr(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Power(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Block(expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Catch(&type: DDN.mscorlib.DNType; body: DNExpression): DNCatchBlock; overload;
    {class} function Catch(variable: DNParameterExpression; body: DNExpression): DNCatchBlock; overload;
    {class} function Catch(&type: DDN.mscorlib.DNType; body: DNExpression; filter: DNExpression): DNCatchBlock; overload;
    {class} function Catch(variable: DNParameterExpression; body: DNExpression; filter: DNExpression): DNCatchBlock; overload;
    {class} function IfThen(test: DNExpression; ifTrue: DNExpression): DNConditionalExpression;
    {class} function IfThenElse(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression;
    {class} function Constant(value: DDN.mscorlib.DNObject): DNConstantExpression; overload;
    {class} function Constant(value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DNConstantExpression; overload;
    {class} function DebugInfo(document: DNSymbolDocumentInfo; startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32): DNDebugInfoExpression;
    {class} function ClearDebugInfo(document: DNSymbolDocumentInfo): DNDebugInfoExpression;
    {class} function Empty: DNDefaultExpression;
    {class} function &Default(&type: DDN.mscorlib.DNType): DNDefaultExpression;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function ElementInit(addMethod: DDN.mscorlib.DNMethodInfo; arguments: TArray<DNExpression>): DNElementInit; overload;
    {class} function Break(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function &Continue(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function &Continue(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function MakeIndex(instance: DNExpression; indexer: DDN.mscorlib.DNPropertyInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression;
    {class} function ArrayAccess(&array: DNExpression; indexes: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; indexer: DDN.mscorlib.DNPropertyInfo; arguments: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; indexer: DDN.mscorlib.DNPropertyInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression; overload;
    {class} function Invoke(expression: DNExpression; arguments: TArray<DNExpression>): DNInvocationExpression; overload;
    {class} function &Label(target: DNLabelTarget): DNLabelExpression; overload;
    {class} function &Label: DNLabelTarget; overload;
    {class} function &Label(name: string): DNLabelTarget; overload;
    {class} function &Label(&type: DDN.mscorlib.DNType): DNLabelTarget; overload;
    {class} function &Label(&type: DDN.mscorlib.DNType; name: string): DNLabelTarget; overload;
    {class} function Lambda(body: DNExpression; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; tailCall: Boolean; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; tailCall: Boolean; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; name: string; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; name: string; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; name: string; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function GetFuncType(typeArgs: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNType;
    {class} function TryGetFuncType(typeArgs: TArray<DDN.mscorlib.DNType>; out funcType: DDN.mscorlib.DNType): Boolean;
    {class} function GetActionType(typeArgs: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNType;
    {class} function TryGetActionType(typeArgs: TArray<DDN.mscorlib.DNType>; out actionType: DDN.mscorlib.DNType): Boolean;
    {class} function ListInit(newExpression: DNNewExpression; initializers: TArray<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; addMethod: DDN.mscorlib.DNMethodInfo; initializers: TArray<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: TArray<DNElementInit>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNListInitExpression; overload;
    {class} function Loop(body: DNExpression): DNLoopExpression; overload;
    {class} function Loop(body: DNExpression; break: DNLabelTarget): DNLoopExpression; overload;
    {class} function Bind(propertyAccessor: DDN.mscorlib.DNMethodInfo; expression: DNExpression): DNMemberAssignment; overload;
    {class} function Field(expression: DNExpression; &type: DDN.mscorlib.DNType; fieldName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; &type: DDN.mscorlib.DNType; propertyName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; propertyAccessor: DDN.mscorlib.DNMethodInfo): DNMemberExpression; overload;
    {class} function MakeMemberAccess(expression: DNExpression; member: DDN.mscorlib.DNMemberInfo): DNMemberExpression;
    {class} function MemberInit(newExpression: DNNewExpression; bindings: TArray<DNMemberBinding>): DNMemberInitExpression; overload;
    {class} function MemberInit(newExpression: DNNewExpression; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberInitExpression; overload;
    {class} function ListBind(member: DDN.mscorlib.DNMemberInfo; initializers: TArray<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(member: DDN.mscorlib.DNMemberInfo; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; initializers: TArray<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNMemberListBinding; overload;
    {class} function MemberBind(member: DDN.mscorlib.DNMemberInfo; bindings: TArray<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(member: DDN.mscorlib.DNMemberInfo; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; bindings: TArray<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression; arg4: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; indexes: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function NewArrayInit(&type: DDN.mscorlib.DNType; initializers: TArray<DNExpression>): DNNewArrayExpression; overload;
    {class} function NewArrayBounds(&type: DDN.mscorlib.DNType; bounds: TArray<DNExpression>): DNNewArrayExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: TArray<DNExpression>): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>; members: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNMemberInfo>): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>; members: TArray<DDN.mscorlib.DNMemberInfo>): DNNewExpression; overload;
    {class} function New(&type: DDN.mscorlib.DNType): DNNewExpression; overload;
    {class} function Parameter(&type: DDN.mscorlib.DNType): DNParameterExpression; overload;
    {class} function Variable(&type: DDN.mscorlib.DNType): DNParameterExpression; overload;
    {class} function Parameter(&type: DDN.mscorlib.DNType; name: string): DNParameterExpression; overload;
    {class} function Variable(&type: DDN.mscorlib.DNType; name: string): DNParameterExpression; overload;
    {class} function RuntimeVariables(variables: TArray<DNParameterExpression>): DNRuntimeVariablesExpression; overload;
    {class} function RuntimeVariables(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNRuntimeVariablesExpression; overload;
    {class} function SwitchCase(body: DNExpression; testValues: TArray<DNExpression>): DNSwitchCase; overload;
    {class} function Switch(switchValue: DNExpression; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(&type: DDN.mscorlib.DNType; switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: DDN.mscorlib.DNIEnumerable<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function SymbolDocument(fileName: string): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDN.mscorlib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDN.mscorlib.DNGuid; languageVendor: DDN.mscorlib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDN.mscorlib.DNGuid; languageVendor: DDN.mscorlib.DNGuid; documentType: DDN.mscorlib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function TryFault(body: DNExpression; fault: DNExpression): DNTryExpression;
    {class} function TryFinally(body: DNExpression; &finally: DNExpression): DNTryExpression;
    {class} function TryCatch(body: DNExpression; handlers: TArray<DNCatchBlock>): DNTryExpression;
    {class} function TryCatchFinally(body: DNExpression; &finally: DNExpression; handlers: TArray<DNCatchBlock>): DNTryExpression;
    {class} function MakeUnary(unaryType: DNExpressionType; operand: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    {class} function MakeUnary(unaryType: DNExpressionType; operand: DNExpression; &type: DDN.mscorlib.DNType; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Negate(expression: DNExpression): DNUnaryExpression; overload;
    {class} function UnaryPlus(expression: DNExpression): DNUnaryExpression; overload;
    {class} function NegateChecked(expression: DNExpression): DNUnaryExpression; overload;
    {class} function &Not(expression: DNExpression): DNUnaryExpression; overload;
    {class} function IsFalse(expression: DNExpression): DNUnaryExpression; overload;
    {class} function IsTrue(expression: DNExpression): DNUnaryExpression; overload;
    {class} function OnesComplement(expression: DNExpression): DNUnaryExpression; overload;
    {class} function Convert(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    {class} function ConvertChecked(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    {class} function ArrayLength(&array: DNExpression): DNUnaryExpression;
    {class} function Rethrow: DNUnaryExpression; overload;
    {class} function Rethrow(&type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    {class} function Throw(value: DNExpression): DNUnaryExpression; overload;
    {class} function Increment(expression: DNExpression): DNUnaryExpression; overload;
    {class} function Decrement(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PreIncrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PreIncrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PreDecrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PreDecrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PostIncrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PostIncrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PostDecrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PostDecrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Assign(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function ReferenceEqual(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function NotEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function NotEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ReferenceNotEqual(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function LessThan(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LessThan(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function GreaterThanOrEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function GreaterThanOrEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AndAlso(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function OrElse(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Coalesce(left: DNExpression; right: DNExpression; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function AddChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Subtract(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function SubtractChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Divide(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Modulo(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Multiply(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function MultiplyChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LeftShift(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function RightShift(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function &And(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function &Or(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOr(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Power(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; index: DNExpression): DNBinaryExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression; arg4: DNExpression): DNBlockExpression; overload;
    {class} function Block(expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function MakeCatchBlock(&type: DDN.mscorlib.DNType; variable: DNParameterExpression; body: DNExpression; filter: DNExpression): DNCatchBlock;
    {class} function Condition(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression; overload;
    {class} function Condition(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression; &type: DDN.mscorlib.DNType): DNConditionalExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function ElementInit(addMethod: DDN.mscorlib.DNMethodInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNElementInit; overload;
    {class} function MakeGoto(kind: DNGotoExpressionKind; target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression;
    {class} function ArrayAccess(&array: DNExpression; indexes: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; propertyName: string; arguments: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function Invoke(expression: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNInvocationExpression; overload;
    {class} function &Label(target: DNLabelTarget; defaultValue: DNExpression): DNLabelExpression; overload;
    {class} function GetDelegateType(typeArgs: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNType;
    {class} function ListInit(newExpression: DNNewExpression; initializers: DDN.mscorlib.DNIEnumerable<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; addMethod: DDN.mscorlib.DNMethodInfo; initializers: DDN.mscorlib.DNIEnumerable<DNExpression>): DNListInitExpression; overload;
    {class} function Loop(body: DNExpression; break: DNLabelTarget; &continue: DNLabelTarget): DNLoopExpression; overload;
    {class} function Bind(member: DDN.mscorlib.DNMemberInfo; expression: DNExpression): DNMemberAssignment; overload;
    {class} function Field(expression: DNExpression; fieldName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; propertyName: string): DNMemberExpression; overload;
    {class} function PropertyOrField(expression: DNExpression; propertyOrFieldName: string): DNMemberExpression;
    {class} function Call(instance: DNExpression; methodName: string; typeArguments: TArray<DDN.mscorlib.DNType>; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(&type: DDN.mscorlib.DNType; methodName: string; typeArguments: TArray<DDN.mscorlib.DNType>; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; indexes: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function NewArrayBounds(&type: DDN.mscorlib.DNType; bounds: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewArrayExpression; overload;
    {class} function SwitchCase(body: DNExpression; testValues: DDN.mscorlib.DNIEnumerable<DNExpression>): DNSwitchCase; overload;
    {class} function Switch(&type: DDN.mscorlib.DNType; switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: DDN.mscorlib.DNIEnumerable<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function MakeTry(&type: DDN.mscorlib.DNType; body: DNExpression; &finally: DNExpression; fault: DNExpression; handlers: DDN.mscorlib.DNIEnumerable<DNCatchBlock>): DNTryExpression;
    {class} function TypeIs(expression: DNExpression; &type: DDN.mscorlib.DNType): DNTypeBinaryExpression;
    {class} function TypeEqual(expression: DNExpression; &type: DDN.mscorlib.DNType): DNTypeBinaryExpression;
    {class} function Negate(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function UnaryPlus(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function NegateChecked(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function IsFalse(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function IsTrue(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function OnesComplement(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function TypeAs(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression;
    {class} function Unbox(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression;
    {class} function ConvertChecked(expression: DNExpression; &type: DDN.mscorlib.DNType; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Quote(expression: DNExpression): DNUnaryExpression;
    {class} function Throw(value: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    {class} function Increment(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Decrement(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Equal(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function GreaterThan(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LessThanOrEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Add(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Lambda(body: DNExpression; name: string; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Field(expression: DNExpression; field: DDN.mscorlib.DNFieldInfo): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; &property: DDN.mscorlib.DNPropertyInfo): DNMemberExpression; overload;
    {class} function NewArrayInit(&type: DDN.mscorlib.DNType; initializers: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewArrayExpression; overload;
    {class} function &Not(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Convert(expression: DNExpression; &type: DDN.mscorlib.DNType; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;

  end;

  [DNTypeName('System.Linq.Expressions.Expression')]
  DNExpression = interface(DDN.mscorlib.DNObject)
  ['{57071121-58D1-3F8B-AC92-8E800D171A46}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNExpression = class(TDNGenericImport<DNExpressionClass, DNExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNBinaryExpressionClass = interface(DNExpressionClass)
  ['{91789D04-E372-5290-8931-82B96CC59305}']
  end;

  [DNTypeName('System.Linq.Expressions.BinaryExpression')]
  DNBinaryExpression = interface(DNExpression)
  ['{EF49C1CA-EFE3-3547-B40F-BB563F5D10DB}']
  { getters & setters } 

    function get_CanReduce: Boolean;
    function get_Right: DNExpression;
    function get_Left: DNExpression;
    function get_Method: DDN.mscorlib.DNMethodInfo;
    function get_Conversion: DNLambdaExpression;
    function get_IsLifted: Boolean;
    function get_IsLiftedToNull: Boolean;
    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;

  { methods } 

    function Update(left: DNExpression; conversion: DNLambdaExpression; right: DNExpression): DNBinaryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CanReduce: Boolean read get_CanReduce;
    property Right: DNExpression read get_Right;
    property Left: DNExpression read get_Left;
    property Method: DDN.mscorlib.DNMethodInfo read get_Method;
    property Conversion: DNLambdaExpression read get_Conversion;
    property IsLifted: Boolean read get_IsLifted;
    property IsLiftedToNull: Boolean read get_IsLiftedToNull;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
  end;

  TDNBinaryExpression = class(TDNGenericImport<DNBinaryExpressionClass, DNBinaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNBlockExpressionClass = interface(DNExpressionClass)
  ['{9015D880-1C72-55B8-A5DD-152145139FA6}']
  end;

  [DNTypeName('System.Linq.Expressions.BlockExpression')]
  DNBlockExpression = interface(DNExpression)
  ['{4ADE1326-F32D-3684-A10B-F89B1981E42B}']
  { getters & setters } 

    function get_Result: DNExpression;
    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Result: DNExpression read get_Result;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNBlockExpression = class(TDNGenericImport<DNBlockExpressionClass, DNBlockExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNConditionalExpressionClass = interface(DNExpressionClass)
  ['{ECB3F797-8D2F-51B3-B15A-B7347D37F725}']
  end;

  [DNTypeName('System.Linq.Expressions.ConditionalExpression')]
  DNConditionalExpression = interface(DNExpression)
  ['{452FF498-0D0D-3058-AA87-2ED4AC9A2ECB}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_Test: DNExpression;
    function get_IfTrue: DNExpression;
    function get_IfFalse: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property Test: DNExpression read get_Test;
    property IfTrue: DNExpression read get_IfTrue;
    property IfFalse: DNExpression read get_IfFalse;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNConditionalExpression = class(TDNGenericImport<DNConditionalExpressionClass, DNConditionalExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNConstantExpressionClass = interface(DNExpressionClass)
  ['{EF3717B5-F977-57DF-82AD-5D8C07442C0C}']
  end;

  [DNTypeName('System.Linq.Expressions.ConstantExpression')]
  DNConstantExpression = interface(DNExpression)
  ['{C0BD600C-8151-3DE1-9A18-A2FBAFA21722}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Value: DDN.mscorlib.DNObject;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNConstantExpression = class(TDNGenericImport<DNConstantExpressionClass, DNConstantExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDebugInfoExpressionClass = interface(DNExpressionClass)
  ['{5712692D-C598-52D5-947B-6229D1A03888}']
  end;

  [DNTypeName('System.Linq.Expressions.DebugInfoExpression')]
  DNDebugInfoExpression = interface(DNExpression)
  ['{EEE86BA5-8E06-3FD9-A26A-5A6D437DBFF2}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_StartLine: Int32;
    function get_StartColumn: Int32;
    function get_EndLine: Int32;
    function get_EndColumn: Int32;
    function get_Document: DNSymbolDocumentInfo;
    function get_IsClear: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property StartLine: Int32 read get_StartLine;
    property StartColumn: Int32 read get_StartColumn;
    property EndLine: Int32 read get_EndLine;
    property EndColumn: Int32 read get_EndColumn;
    property Document: DNSymbolDocumentInfo read get_Document;
    property IsClear: Boolean read get_IsClear;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDebugInfoExpression = class(TDNGenericImport<DNDebugInfoExpressionClass, DNDebugInfoExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDefaultExpressionClass = interface(DNExpressionClass)
  ['{C3CC3D36-48FE-51BA-ACE7-92FC8FB171FB}']
  end;

  [DNTypeName('System.Linq.Expressions.DefaultExpression')]
  DNDefaultExpression = interface(DNExpression)
  ['{703F4557-43C0-3DCF-919E-67EBF03D4644}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDefaultExpression = class(TDNGenericImport<DNDefaultExpressionClass, DNDefaultExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDynamicExpressionClass = interface(DNExpressionClass)
  ['{2163DE95-A4EB-5C77-A332-F1BC68E8DD69}']
  { static methods } 

    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;

  end;

  [DNTypeName('System.Linq.Expressions.DynamicExpression')]
  DNDynamicExpression = interface(DNExpression)
  ['{7AD50124-4068-3266-B4E7-EED07F37B8F6}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Binder: DNCallSiteBinder;
    function get_DelegateType: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Binder: DNCallSiteBinder read get_Binder;
    property DelegateType: DDN.mscorlib.DNType read get_DelegateType;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDynamicExpression = class(TDNGenericImport<DNDynamicExpressionClass, DNDynamicExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNGotoExpressionClass = interface(DNExpressionClass)
  ['{FB63F368-4E06-5FE6-B0E1-E909CFF59E51}']
  end;

  [DNTypeName('System.Linq.Expressions.GotoExpression')]
  DNGotoExpression = interface(DNExpression)
  ['{F0DC023B-24DC-3A7F-A928-1F1A05E03124}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Value: DNExpression;
    function get_Target: DNLabelTarget;
    function get_Kind: DNGotoExpressionKind;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(target: DNLabelTarget; value: DNExpression): DNGotoExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Value: DNExpression read get_Value;
    property Target: DNLabelTarget read get_Target;
    property Kind: DNGotoExpressionKind read get_Kind;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNGotoExpression = class(TDNGenericImport<DNGotoExpressionClass, DNGotoExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNIndexExpressionClass = interface(DNExpressionClass)
  ['{37E35E28-53CF-5BA3-81FC-0316EDAEEB11}']
  end;

  [DNTypeName('System.Linq.Expressions.IndexExpression')]
  DNIndexExpression = interface(DNExpression)
  ['{79C65FB9-134E-37BC-9028-657D7B399EA3}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_Object: DNExpression;
    function get_Indexer: DDN.mscorlib.DNPropertyInfo;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(&object: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property &Object: DNExpression read get_Object;
    property Indexer: DDN.mscorlib.DNPropertyInfo read get_Indexer;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNIndexExpression = class(TDNGenericImport<DNIndexExpressionClass, DNIndexExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNInvocationExpressionClass = interface(DNExpressionClass)
  ['{6FE15B6C-70A0-5BE1-B599-8CF4669D5EFE}']
  end;

  [DNTypeName('System.Linq.Expressions.InvocationExpression')]
  DNInvocationExpression = interface(DNExpression)
  ['{0704CC69-1CAB-396D-B00D-6485524D2E5E}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Expression: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNInvocationExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Expression: DNExpression read get_Expression;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNInvocationExpression = class(TDNGenericImport<DNInvocationExpressionClass, DNInvocationExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLabelExpressionClass = interface(DNExpressionClass)
  ['{2DBE2271-8658-54FC-85A1-1A78FA90064F}']
  end;

  [DNTypeName('System.Linq.Expressions.LabelExpression')]
  DNLabelExpression = interface(DNExpression)
  ['{38BFD387-4AC0-3CAA-A98A-BC27F1F06A33}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Target: DNLabelTarget;
    function get_DefaultValue: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(target: DNLabelTarget; defaultValue: DNExpression): DNLabelExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Target: DNLabelTarget read get_Target;
    property DefaultValue: DNExpression read get_DefaultValue;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLabelExpression = class(TDNGenericImport<DNLabelExpressionClass, DNLabelExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLambdaExpressionClass = interface(DNExpressionClass)
  ['{C1E95244-8A29-56DE-99C1-794A0DF61F66}']
  end;

  [DNTypeName('System.Linq.Expressions.LambdaExpression')]
  DNLambdaExpression = interface(DNExpression)
  ['{251E60FA-00EA-3F31-A271-A36E70686597}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Name: string;
    function get_Body: DNExpression;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_TailCall: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Compile: DDN.mscorlib.DNDelegate; overload;
    function Compile(debugInfoGenerator: DNDebugInfoGenerator): DDN.mscorlib.DNDelegate; overload;
    function Compile(preferInterpretation: Boolean): DDN.mscorlib.DNDelegate; overload;
    procedure CompileToMethod(method: DDN.mscorlib.DNMethodBuilder); overload;
    procedure CompileToMethod(method: DDN.mscorlib.DNMethodBuilder; debugInfoGenerator: DNDebugInfoGenerator); overload;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Name: string read get_Name;
    property Body: DNExpression read get_Body;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property TailCall: Boolean read get_TailCall;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLambdaExpression = class(TDNGenericImport<DNLambdaExpressionClass, DNLambdaExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNListInitExpressionClass = interface(DNExpressionClass)
  ['{BBA23C76-D195-5E65-BDF2-264DE6E09A2B}']
  end;

  [DNTypeName('System.Linq.Expressions.ListInitExpression')]
  DNListInitExpression = interface(DNExpression)
  ['{5D5CAF46-34F9-3338-97C5-3FE54AA65CD0}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;
    function get_NewExpression: DNNewExpression;

  { methods } 

    function Reduce: DNExpression;
    function Update(newExpression: DNNewExpression; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNListInitExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
    property NewExpression: DNNewExpression read get_NewExpression;
  end;

  TDNListInitExpression = class(TDNGenericImport<DNListInitExpressionClass, DNListInitExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLoopExpressionClass = interface(DNExpressionClass)
  ['{D480B008-237E-59A4-88F8-43FE54D6CEDE}']
  end;

  [DNTypeName('System.Linq.Expressions.LoopExpression')]
  DNLoopExpression = interface(DNExpression)
  ['{84E5D5C4-651C-32E9-B4D9-6064187F72A4}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Body: DNExpression;
    function get_BreakLabel: DNLabelTarget;
    function get_ContinueLabel: DNLabelTarget;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(breakLabel: DNLabelTarget; continueLabel: DNLabelTarget; body: DNExpression): DNLoopExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Body: DNExpression read get_Body;
    property BreakLabel: DNLabelTarget read get_BreakLabel;
    property ContinueLabel: DNLabelTarget read get_ContinueLabel;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLoopExpression = class(TDNGenericImport<DNLoopExpressionClass, DNLoopExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberExpressionClass = interface(DNExpressionClass)
  ['{6DC74673-28D7-5581-8DBC-CDA822F33036}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberExpression')]
  DNMemberExpression = interface(DNExpression)
  ['{BA22043F-22FF-311E-9A9A-90D9C1E1A01B}']
  { getters & setters } 

    function get_Member: DDN.mscorlib.DNMemberInfo;
    function get_Expression: DNExpression;
    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression): DNMemberExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
    property Expression: DNExpression read get_Expression;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNMemberExpression = class(TDNGenericImport<DNMemberExpressionClass, DNMemberExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberInitExpressionClass = interface(DNExpressionClass)
  ['{002E3297-D8F2-5111-ABE8-224AE6ED1A01}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberInitExpression')]
  DNMemberInitExpression = interface(DNExpression)
  ['{77EA09CB-545C-334F-B423-7D3B92250C76}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;
    function get_NodeType: DNExpressionType;
    function get_NewExpression: DNNewExpression;

  { methods } 

    function Reduce: DNExpression;
    function Update(newExpression: DNNewExpression; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberInitExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
    property NodeType: DNExpressionType read get_NodeType;
    property NewExpression: DNNewExpression read get_NewExpression;
  end;

  TDNMemberInitExpression = class(TDNGenericImport<DNMemberInitExpressionClass, DNMemberInitExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMethodCallExpressionClass = interface(DNExpressionClass)
  ['{B0E34F8F-57D7-59EF-9CD6-8DEAA39D3E1A}']
  end;

  [DNTypeName('System.Linq.Expressions.MethodCallExpression')]
  DNMethodCallExpression = interface(DNExpression)
  ['{50FFD00B-1F28-3BC5-8B54-A6F8DEA75FF5}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_Method: DDN.mscorlib.DNMethodInfo;
    function get_Object: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(&object: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property Method: DDN.mscorlib.DNMethodInfo read get_Method;
    property &Object: DNExpression read get_Object;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNMethodCallExpression = class(TDNGenericImport<DNMethodCallExpressionClass, DNMethodCallExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNNewArrayExpressionClass = interface(DNExpressionClass)
  ['{3223B2DB-BDFD-58ED-89CF-5A72785C09DD}']
  end;

  [DNTypeName('System.Linq.Expressions.NewArrayExpression')]
  DNNewArrayExpression = interface(DNExpression)
  ['{5791C72D-EF6C-3D6F-A82E-F399353297BA}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewArrayExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNNewArrayExpression = class(TDNGenericImport<DNNewArrayExpressionClass, DNNewArrayExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNNewExpressionClass = interface(DNExpressionClass)
  ['{42F1B4AA-93AD-529B-9822-0A0ECF826088}']
  end;

  [DNTypeName('System.Linq.Expressions.NewExpression')]
  DNNewExpression = interface(DNExpression)
  ['{602E5164-1022-372F-86DC-A7F7252382F8}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Constructor: DDN.mscorlib.DNConstructorInfo;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property &Constructor: DDN.mscorlib.DNConstructorInfo read get_Constructor;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNNewExpression = class(TDNGenericImport<DNNewExpressionClass, DNNewExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNParameterExpressionClass = interface(DNExpressionClass)
  ['{89316903-B38F-5472-8B91-B49FC3ABA168}']
  end;

  [DNTypeName('System.Linq.Expressions.ParameterExpression')]
  DNParameterExpression = interface(DNExpression)
  ['{7CA3F201-4497-3CA0-9C2A-BBA28AB7AF84}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Name: string;
    function get_IsByRef: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Name: string read get_Name;
    property IsByRef: Boolean read get_IsByRef;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNParameterExpression = class(TDNGenericImport<DNParameterExpressionClass, DNParameterExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNRuntimeVariablesExpressionClass = interface(DNExpressionClass)
  ['{EE17A3C5-4D8E-5744-B546-BDA8839E78B7}']
  end;

  [DNTypeName('System.Linq.Expressions.RuntimeVariablesExpression')]
  DNRuntimeVariablesExpression = interface(DNExpression)
  ['{58A293FE-6B80-3E52-955D-611234F1FF8B}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNRuntimeVariablesExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNRuntimeVariablesExpression = class(TDNGenericImport<DNRuntimeVariablesExpressionClass, DNRuntimeVariablesExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSwitchExpressionClass = interface(DNExpressionClass)
  ['{73DBC495-6915-5348-B1D5-4D33F64D8396}']
  end;

  [DNTypeName('System.Linq.Expressions.SwitchExpression')]
  DNSwitchExpression = interface(DNExpression)
  ['{3D71D2B7-69F3-31EF-A771-730739C63CC3}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_SwitchValue: DNExpression;
    function get_DefaultBody: DNExpression;
    function get_Comparison: DDN.mscorlib.DNMethodInfo;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(switchValue: DNExpression; cases: DDN.mscorlib.DNIEnumerable<DNSwitchCase>; defaultBody: DNExpression): DNSwitchExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property SwitchValue: DNExpression read get_SwitchValue;
    property DefaultBody: DNExpression read get_DefaultBody;
    property Comparison: DDN.mscorlib.DNMethodInfo read get_Comparison;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNSwitchExpression = class(TDNGenericImport<DNSwitchExpressionClass, DNSwitchExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNTryExpressionClass = interface(DNExpressionClass)
  ['{1AA017DE-F994-5479-9662-FC4823BBF85A}']
  end;

  [DNTypeName('System.Linq.Expressions.TryExpression')]
  DNTryExpression = interface(DNExpression)
  ['{65F6F267-F64F-3B95-A17D-658ACBE7ED5B}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Body: DNExpression;
    function get_Finally: DNExpression;
    function get_Fault: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(body: DNExpression; handlers: DDN.mscorlib.DNIEnumerable<DNCatchBlock>; &finally: DNExpression; fault: DNExpression): DNTryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Body: DNExpression read get_Body;
    property &Finally: DNExpression read get_Finally;
    property Fault: DNExpression read get_Fault;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNTryExpression = class(TDNGenericImport<DNTryExpressionClass, DNTryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNTypeBinaryExpressionClass = interface(DNExpressionClass)
  ['{8174D038-D81C-5279-B0A6-515A5D091C5A}']
  end;

  [DNTypeName('System.Linq.Expressions.TypeBinaryExpression')]
  DNTypeBinaryExpression = interface(DNExpression)
  ['{F9FAAC1B-79BA-363C-A5BF-5657C5F68601}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Expression: DNExpression;
    function get_TypeOperand: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression): DNTypeBinaryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Expression: DNExpression read get_Expression;
    property TypeOperand: DDN.mscorlib.DNType read get_TypeOperand;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNTypeBinaryExpression = class(TDNGenericImport<DNTypeBinaryExpressionClass, DNTypeBinaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNUnaryExpressionClass = interface(DNExpressionClass)
  ['{0328AF99-A8C6-5FD9-B705-1CA8E4AD4D1E}']
  end;

  [DNTypeName('System.Linq.Expressions.UnaryExpression')]
  DNUnaryExpression = interface(DNExpression)
  ['{EDACA99F-7DF8-3000-9123-3B978FDD6840}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Operand: DNExpression;
    function get_Method: DDN.mscorlib.DNMethodInfo;
    function get_IsLifted: Boolean;
    function get_IsLiftedToNull: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function Update(operand: DNExpression): DNUnaryExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Operand: DNExpression read get_Operand;
    property Method: DDN.mscorlib.DNMethodInfo read get_Method;
    property IsLifted: Boolean read get_IsLifted;
    property IsLiftedToNull: Boolean read get_IsLiftedToNull;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNUnaryExpression = class(TDNGenericImport<DNUnaryExpressionClass, DNUnaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLabelTargetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{185F6F89-FEB4-58D0-958D-1B47C80E62A3}']
  end;

  [DNTypeName('System.Linq.Expressions.LabelTarget')]
  DNLabelTarget = interface(DDN.mscorlib.DNObject)
  ['{17DB098C-D299-32FE-AF65-6AE6EB0C3510}']
  { getters & setters } 

    function get_Name: string;
    function get_Type: DDN.mscorlib.DNType;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property &Type: DDN.mscorlib.DNType read get_Type;
  end;

  TDNLabelTarget = class(TDNGenericImport<DNLabelTargetClass, DNLabelTarget>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6EFAAC2D-347D-58D0-BF93-4D0644A4C4F4}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberBinding')]
  DNMemberBinding = interface(DDN.mscorlib.DNObject)
  ['{5F122447-E06A-345F-BBD6-1327C454854E}']
  { getters & setters } 

    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberBinding = class(TDNGenericImport<DNMemberBindingClass, DNMemberBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberAssignmentClass = interface(DNMemberBindingClass)
  ['{CF93536B-5AFA-598C-87D8-8698D7DF547C}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberAssignment')]
  DNMemberAssignment = interface(DNMemberBinding)
  ['{10882F5E-3D52-3B00-8E8B-31E352064C66}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Update(expression: DNExpression): DNMemberAssignment;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberAssignment = class(TDNGenericImport<DNMemberAssignmentClass, DNMemberAssignment>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberListBindingClass = interface(DNMemberBindingClass)
  ['{3F835938-4A72-555C-9032-2291B5EF8E60}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberListBinding')]
  DNMemberListBinding = interface(DNMemberBinding)
  ['{1812EE04-B6FF-3F2B-BF0F-B2DE2CAF47A8}']
  { getters & setters } 

    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Update(initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNMemberListBinding;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberListBinding = class(TDNGenericImport<DNMemberListBindingClass, DNMemberListBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberMemberBindingClass = interface(DNMemberBindingClass)
  ['{5BFE47A0-4ED7-50BC-9161-F7D7F3CF7B51}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberMemberBinding')]
  DNMemberMemberBinding = interface(DNMemberBinding)
  ['{6792C556-7187-323F-B950-88AA750B05E9}']
  { getters & setters } 

    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Update(bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberMemberBinding = class(TDNGenericImport<DNMemberMemberBindingClass, DNMemberMemberBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSwitchCaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2F6A2E78-1956-5E0F-B21D-B03B28C0872C}']
  end;

  [DNTypeName('System.Linq.Expressions.SwitchCase')]
  DNSwitchCase = interface(DDN.mscorlib.DNObject)
  ['{2FDBBFCB-753F-31B3-B6CA-30D8C8745E35}']
  { getters & setters } 

    function get_Body: DNExpression;

  { methods } 

    function ToString: string;
    function Update(testValues: DDN.mscorlib.DNIEnumerable<DNExpression>; body: DNExpression): DNSwitchCase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Body: DNExpression read get_Body;
  end;

  TDNSwitchCase = class(TDNGenericImport<DNSwitchCaseClass, DNSwitchCase>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSymbolDocumentInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{57BCF7D1-74BE-577F-BC23-920583FC051E}']
  end;

  [DNTypeName('System.Linq.Expressions.SymbolDocumentInfo')]
  DNSymbolDocumentInfo = interface(DDN.mscorlib.DNObject)
  ['{46D2036A-E6E7-39D0-BB7E-BBE171F9D132}']
  { getters & setters } 

    function get_FileName: string;
    function get_Language: DDN.mscorlib.DNGuid;
    function get_LanguageVendor: DDN.mscorlib.DNGuid;
    function get_DocumentType: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FileName: string read get_FileName;
    property Language: DDN.mscorlib.DNGuid read get_Language;
    property LanguageVendor: DDN.mscorlib.DNGuid read get_LanguageVendor;
    property DocumentType: DDN.mscorlib.DNGuid read get_DocumentType;
  end;

  TDNSymbolDocumentInfo = class(TDNGenericImport<DNSymbolDocumentInfoClass, DNSymbolDocumentInfo>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceListenerClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{5CFED9B0-9178-5C60-8028-FAA10265258E}']
  end;

  [DNTypeName('System.Diagnostics.TraceListener')]
  DNTraceListener = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{14BD87DC-745A-312F-9A11-09E1F3F455A7}']
  { getters & setters } 

    function get_Attributes: DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DNTraceFilter;
    procedure set_Filter(value: DNTraceFilter);
    function get_TraceOutputOptions: DNTraceOptions;
    procedure set_TraceOutputOptions(value: DNTraceOptions);

  { methods } 

    procedure Dispose;
    procedure Close;
    procedure Flush;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure Write(message: string); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceTransfer(eventCache: DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNTraceListener = class(TDNGenericImport<DNTraceListenerClass, DNTraceListener>) end;

  //-------------namespace: System.Net----------------
  DNWebRequestClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{A893EED0-681F-5C7D-867A-C623F651184B}']
  { static getter & setter } 

    {class} function get_DefaultCachePolicy: DNRequestCachePolicy;
    {class} procedure set_DefaultCachePolicy(value: DNRequestCachePolicy);
    {class} function get_DefaultWebProxy: DNIWebProxy;
    {class} procedure set_DefaultWebProxy(value: DNIWebProxy);

  { static methods } 

    {class} procedure RegisterPortableWebRequestCreator(creator: DNIWebRequestCreate);
    {class} function Create(requestUriString: string): DNWebRequest; overload;
    {class} function Create(requestUri: DNUri): DNWebRequest; overload;
    {class} function CreateDefault(requestUri: DNUri): DNWebRequest;
    {class} function CreateHttp(requestUriString: string): DNHttpWebRequest; overload;
    {class} function CreateHttp(requestUri: DNUri): DNHttpWebRequest; overload;
    {class} function RegisterPrefix(prefix: string; creator: DNIWebRequestCreate): Boolean;
    {class} function GetSystemWebProxy: DNIWebProxy;

  { static propertys } 

    {class} property DefaultCachePolicy: DNRequestCachePolicy read get_DefaultCachePolicy write set_DefaultCachePolicy;
    {class} property DefaultWebProxy: DNIWebProxy read get_DefaultWebProxy write set_DefaultWebProxy;
  end;

  [DNTypeName('System.Net.WebRequest')]
  DNWebRequest = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{B27539AB-FAD9-3CB2-BAB5-BC9F492C5C2F}']
  { getters & setters } 

    function get_CreatorInstance: DNIWebRequestCreate;
    function get_CachePolicy: DNRequestCachePolicy;
    procedure set_CachePolicy(value: DNRequestCachePolicy);
    function get_Method: string;
    procedure set_Method(value: string);
    function get_RequestUri: DNUri;
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_Headers: DNWebHeaderCollection;
    procedure set_Headers(value: DNWebHeaderCollection);
    function get_ContentLength: Int64;
    procedure set_ContentLength(value: Int64);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_Proxy: DNIWebProxy;
    procedure set_Proxy(value: DNIWebProxy);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_AuthenticationLevel: DNAuthenticationLevel;
    procedure set_AuthenticationLevel(value: DNAuthenticationLevel);
    function get_ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel;
    procedure set_ImpersonationLevel(value: DDN.mscorlib.DNTokenImpersonationLevel);

  { methods } 

    function GetRequestStream: DDN.mscorlib.DNStream;
    function GetResponse: DNWebResponse;
    function BeginGetResponse(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetResponse(asyncResult: DDN.mscorlib.DNIAsyncResult): DNWebResponse;
    function BeginGetRequestStream(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetRequestStream(asyncResult: DDN.mscorlib.DNIAsyncResult): DDN.mscorlib.DNStream;
    procedure &Abort;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CreatorInstance: DNIWebRequestCreate read get_CreatorInstance;
    property CachePolicy: DNRequestCachePolicy read get_CachePolicy write set_CachePolicy;
    property Method: string read get_Method write set_Method;
    property RequestUri: DNUri read get_RequestUri;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property Headers: DNWebHeaderCollection read get_Headers write set_Headers;
    property ContentLength: Int64 read get_ContentLength write set_ContentLength;
    property ContentType: string read get_ContentType write set_ContentType;
    property Credentials: DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property Proxy: DNIWebProxy read get_Proxy write set_Proxy;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property AuthenticationLevel: DNAuthenticationLevel read get_AuthenticationLevel write set_AuthenticationLevel;
    property ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel read get_ImpersonationLevel write set_ImpersonationLevel;
  end;

  TDNWebRequest = class(TDNGenericImport<DNWebRequestClass, DNWebRequest>) end;

  //-------------namespace: System.Net----------------
  DNHttpWebRequestClass = interface(DNWebRequestClass)
  ['{68C3FA13-49E0-58F1-9BB2-51D94BE799D0}']
  { static getter & setter } 

    {class} function get_DefaultCachePolicy: DNRequestCachePolicy;
    {class} procedure set_DefaultCachePolicy(value: DNRequestCachePolicy);
    {class} function get_DefaultMaximumResponseHeadersLength: Int32;
    {class} procedure set_DefaultMaximumResponseHeadersLength(value: Int32);
    {class} function get_DefaultMaximumErrorResponseLength: Int32;
    {class} procedure set_DefaultMaximumErrorResponseLength(value: Int32);

  { constructors } 

    {class} function init: DNHttpWebRequest;

  { static propertys } 

    {class} property DefaultCachePolicy: DNRequestCachePolicy read get_DefaultCachePolicy write set_DefaultCachePolicy;
    {class} property DefaultMaximumResponseHeadersLength: Int32 read get_DefaultMaximumResponseHeadersLength write set_DefaultMaximumResponseHeadersLength;
    {class} property DefaultMaximumErrorResponseLength: Int32 read get_DefaultMaximumErrorResponseLength write set_DefaultMaximumErrorResponseLength;
  end;

  [DNTypeName('System.Net.HttpWebRequest')]
  DNHttpWebRequest = interface(DNWebRequest)
  ['{4191AC1F-317E-354B-8F40-AE1227375046}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_AllowWriteStreamBuffering: Boolean;
    procedure set_AllowWriteStreamBuffering(value: Boolean);
    function get_AllowReadStreamBuffering: Boolean;
    procedure set_AllowReadStreamBuffering(value: Boolean);
    function get_HaveResponse: Boolean;
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_Pipelined: Boolean;
    procedure set_Pipelined(value: Boolean);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_SendChunked: Boolean;
    procedure set_SendChunked(value: Boolean);
    function get_AutomaticDecompression: DNDecompressionMethods;
    procedure set_AutomaticDecompression(value: DNDecompressionMethods);
    function get_MaximumResponseHeadersLength: Int32;
    procedure set_MaximumResponseHeadersLength(value: Int32);
    function get_ClientCertificates: DNX509CertificateCollection;
    procedure set_ClientCertificates(value: DNX509CertificateCollection);
    function get_CookieContainer: DNCookieContainer;
    procedure set_CookieContainer(value: DNCookieContainer);
    function get_SupportsCookieContainer: Boolean;
    function get_RequestUri: DNUri;
    function get_ContentLength: Int64;
    procedure set_ContentLength(value: Int64);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_ReadWriteTimeout: Int32;
    procedure set_ReadWriteTimeout(value: Int32);
    function get_ContinueTimeout: Int32;
    procedure set_ContinueTimeout(value: Int32);
    function get_Address: DNUri;
    function get_ContinueDelegate: DNHttpContinueDelegate;
    procedure set_ContinueDelegate(value: DNHttpContinueDelegate);
    function get_Host: string;
    procedure set_Host(value: string);
    function get_MaximumAutomaticRedirections: Int32;
    procedure set_MaximumAutomaticRedirections(value: Int32);
    function get_Method: string;
    procedure set_Method(value: string);
    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_Headers: DNWebHeaderCollection;
    procedure set_Headers(value: DNWebHeaderCollection);
    function get_Proxy: DNIWebProxy;
    procedure set_Proxy(value: DNIWebProxy);
    function get_ProtocolVersion: DDN.mscorlib.DNVersion;
    procedure set_ProtocolVersion(value: DDN.mscorlib.DNVersion);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_MediaType: string;
    procedure set_MediaType(value: string);
    function get_TransferEncoding: string;
    procedure set_TransferEncoding(value: string);
    function get_Connection: string;
    procedure set_Connection(value: string);
    function get_Accept: string;
    procedure set_Accept(value: string);
    function get_Referer: string;
    procedure set_Referer(value: string);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Expect: string;
    procedure set_Expect(value: string);
    function get_IfModifiedSince: DDN.mscorlib.DNDateTime;
    procedure set_IfModifiedSince(value: DDN.mscorlib.DNDateTime);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_ServerCertificateValidationCallback: DNRemoteCertificateValidationCallback;
    procedure set_ServerCertificateValidationCallback(value: DNRemoteCertificateValidationCallback);
    function get_CreatorInstance: DNIWebRequestCreate;
    function get_CachePolicy: DNRequestCachePolicy;
    procedure set_CachePolicy(value: DNRequestCachePolicy);
    function get_AuthenticationLevel: DNAuthenticationLevel;
    procedure set_AuthenticationLevel(value: DNAuthenticationLevel);
    function get_ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel;
    procedure set_ImpersonationLevel(value: DDN.mscorlib.DNTokenImpersonationLevel);

  { methods } 

    function EndGetRequestStream(asyncResult: DDN.mscorlib.DNIAsyncResult): DDN.mscorlib.DNStream; overload;
    function GetRequestStream: DDN.mscorlib.DNStream; overload;
    procedure &Abort;
    function BeginGetRequestStream(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetRequestStream(asyncResult: DDN.mscorlib.DNIAsyncResult; out context: DNTransportContext): DDN.mscorlib.DNStream; overload;
    function GetRequestStream(out context: DNTransportContext): DDN.mscorlib.DNStream; overload;
    function BeginGetResponse(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetResponse(asyncResult: DDN.mscorlib.DNIAsyncResult): DNWebResponse;
    function GetResponse: DNWebResponse;
    procedure AddRange(from: Int32; &to: Int32); overload;
    procedure AddRange(from: Int64; &to: Int64); overload;
    procedure AddRange(range: Int32); overload;
    procedure AddRange(range: Int64); overload;
    procedure AddRange(rangeSpecifier: string; from: Int32; &to: Int32); overload;
    procedure AddRange(rangeSpecifier: string; from: Int64; &to: Int64); overload;
    procedure AddRange(rangeSpecifier: string; range: Int32); overload;
    procedure AddRange(rangeSpecifier: string; range: Int64); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property AllowWriteStreamBuffering: Boolean read get_AllowWriteStreamBuffering write set_AllowWriteStreamBuffering;
    property AllowReadStreamBuffering: Boolean read get_AllowReadStreamBuffering write set_AllowReadStreamBuffering;
    property HaveResponse: Boolean read get_HaveResponse;
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    property Pipelined: Boolean read get_Pipelined write set_Pipelined;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property SendChunked: Boolean read get_SendChunked write set_SendChunked;
    property AutomaticDecompression: DNDecompressionMethods read get_AutomaticDecompression write set_AutomaticDecompression;
    property MaximumResponseHeadersLength: Int32 read get_MaximumResponseHeadersLength write set_MaximumResponseHeadersLength;
    property ClientCertificates: DNX509CertificateCollection read get_ClientCertificates write set_ClientCertificates;
    property CookieContainer: DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property SupportsCookieContainer: Boolean read get_SupportsCookieContainer;
    property RequestUri: DNUri read get_RequestUri;
    property ContentLength: Int64 read get_ContentLength write set_ContentLength;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property ReadWriteTimeout: Int32 read get_ReadWriteTimeout write set_ReadWriteTimeout;
    property ContinueTimeout: Int32 read get_ContinueTimeout write set_ContinueTimeout;
    property Address: DNUri read get_Address;
    property ContinueDelegate: DNHttpContinueDelegate read get_ContinueDelegate write set_ContinueDelegate;
    property Host: string read get_Host write set_Host;
    property MaximumAutomaticRedirections: Int32 read get_MaximumAutomaticRedirections write set_MaximumAutomaticRedirections;
    property Method: string read get_Method write set_Method;
    property Credentials: DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property Headers: DNWebHeaderCollection read get_Headers write set_Headers;
    property Proxy: DNIWebProxy read get_Proxy write set_Proxy;
    property ProtocolVersion: DDN.mscorlib.DNVersion read get_ProtocolVersion write set_ProtocolVersion;
    property ContentType: string read get_ContentType write set_ContentType;
    property MediaType: string read get_MediaType write set_MediaType;
    property TransferEncoding: string read get_TransferEncoding write set_TransferEncoding;
    property Connection: string read get_Connection write set_Connection;
    property Accept: string read get_Accept write set_Accept;
    property Referer: string read get_Referer write set_Referer;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Expect: string read get_Expect write set_Expect;
    property IfModifiedSince: DDN.mscorlib.DNDateTime read get_IfModifiedSince write set_IfModifiedSince;
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    property ServerCertificateValidationCallback: DNRemoteCertificateValidationCallback read get_ServerCertificateValidationCallback write set_ServerCertificateValidationCallback;
    property CreatorInstance: DNIWebRequestCreate read get_CreatorInstance;
    property CachePolicy: DNRequestCachePolicy read get_CachePolicy write set_CachePolicy;
    property AuthenticationLevel: DNAuthenticationLevel read get_AuthenticationLevel write set_AuthenticationLevel;
    property ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel read get_ImpersonationLevel write set_ImpersonationLevel;
  end;

  TDNHttpWebRequest = class(TDNGenericImport<DNHttpWebRequestClass, DNHttpWebRequest>) end;

  //-------------namespace: System.Net----------------
  DNWebResponseClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4EA54D4F-59E9-527A-A392-AC66D8305327}']
  end;

  [DNTypeName('System.Net.WebResponse')]
  DNWebResponse = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8469B5E5-2E45-37FE-AF2B-9E809F690087}']
  { getters & setters } 

    function get_IsFromCache: Boolean;
    function get_IsMutuallyAuthenticated: Boolean;
    function get_ContentLength: Int64;
    procedure set_ContentLength(value: Int64);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ResponseUri: DNUri;
    function get_Headers: DNWebHeaderCollection;
    function get_SupportsHeaders: Boolean;

  { methods } 

    procedure Close;
    procedure Dispose;
    function GetResponseStream: DDN.mscorlib.DNStream;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsFromCache: Boolean read get_IsFromCache;
    property IsMutuallyAuthenticated: Boolean read get_IsMutuallyAuthenticated;
    property ContentLength: Int64 read get_ContentLength write set_ContentLength;
    property ContentType: string read get_ContentType write set_ContentType;
    property ResponseUri: DNUri read get_ResponseUri;
    property Headers: DNWebHeaderCollection read get_Headers;
    property SupportsHeaders: Boolean read get_SupportsHeaders;
  end;

  TDNWebResponse = class(TDNGenericImport<DNWebResponseClass, DNWebResponse>) end;

  //-------------namespace: System.Net.Cache----------------
  DNRequestCachePolicyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0AE4B8B-B8E8-51D6-93E9-ED2F8613E04A}']
  { constructors } 

    {class} function init: DNRequestCachePolicy; overload;
    {class} function init(level: DNRequestCacheLevel): DNRequestCachePolicy; overload;

  end;

  [DNTypeName('System.Net.Cache.RequestCachePolicy')]
  DNRequestCachePolicy = interface(DDN.mscorlib.DNObject)
  ['{3B5DCC72-7FC6-3142-AD95-44284F8DF7FC}']
  { getters & setters } 

    function get_Level: DNRequestCacheLevel;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Level: DNRequestCacheLevel read get_Level;
  end;

  TDNRequestCachePolicy = class(TDNGenericImport<DNRequestCachePolicyClass, DNRequestCachePolicy>) end;

  //-------------namespace: System.Net----------------
  DNCookieClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F2B2C1D-FD9A-505D-B28A-02DD5418646C}']
  { constructors } 

    {class} function init: DNCookie; overload;
    {class} function init(name: string; value: string): DNCookie; overload;
    {class} function init(name: string; value: string; path: string): DNCookie; overload;
    {class} function init(name: string; value: string; path: string; domain: string): DNCookie; overload;

  end;

  [DNTypeName('System.Net.Cookie')]
  DNCookie = interface(DDN.mscorlib.DNObject)
  ['{44CE4218-5EA4-34B0-9BAA-07EB434BFC16}']
  { getters & setters } 

    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_CommentUri: DNUri;
    procedure set_CommentUri(value: DNUri);
    function get_HttpOnly: Boolean;
    procedure set_HttpOnly(value: Boolean);
    function get_Discard: Boolean;
    procedure set_Discard(value: Boolean);
    function get_Domain: string;
    procedure set_Domain(value: string);
    function get_Expired: Boolean;
    procedure set_Expired(value: Boolean);
    function get_Expires: DDN.mscorlib.DNDateTime;
    procedure set_Expires(value: DDN.mscorlib.DNDateTime);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Path: string;
    procedure set_Path(value: string);
    function get_Port: string;
    procedure set_Port(value: string);
    function get_Secure: Boolean;
    procedure set_Secure(value: Boolean);
    function get_TimeStamp: DDN.mscorlib.DNDateTime;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Version: Int32;
    procedure set_Version(value: Int32);

  { methods } 

    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Comment: string read get_Comment write set_Comment;
    property CommentUri: DNUri read get_CommentUri write set_CommentUri;
    property HttpOnly: Boolean read get_HttpOnly write set_HttpOnly;
    property Discard: Boolean read get_Discard write set_Discard;
    property Domain: string read get_Domain write set_Domain;
    property Expired: Boolean read get_Expired write set_Expired;
    property Expires: DDN.mscorlib.DNDateTime read get_Expires write set_Expires;
    property Name: string read get_Name write set_Name;
    property Path: string read get_Path write set_Path;
    property Port: string read get_Port write set_Port;
    property Secure: Boolean read get_Secure write set_Secure;
    property TimeStamp: DDN.mscorlib.DNDateTime read get_TimeStamp;
    property Value: string read get_Value write set_Value;
    property Version: Int32 read get_Version write set_Version;
  end;

  TDNCookie = class(TDNGenericImport<DNCookieClass, DNCookie>) end;

  //-------------namespace: System.Net----------------
  DNCookieCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DAD5CD48-00CC-5F3B-9B76-D2F5DFC2810A}']
  { constructors } 

    {class} function init: DNCookieCollection;

  end;

  [DNTypeName('System.Net.CookieCollection')]
  DNCookieCollection = interface(DDN.mscorlib.DNObject)
  ['{99F5373A-997D-36D4-A225-D970B8B1B9F8}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNCookie; overload;
    function get_Item(name: string): DNCookie; overload;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(cookie: DNCookie); overload;
    procedure Add(cookies: DNCookieCollection); overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNCookie>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNCookie read get_Item; default;
    property Item[name: string]: DNCookie read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCookieCollection = class(TDNGenericImport<DNCookieCollectionClass, DNCookieCollection>) end;

  //-------------namespace: System.Net----------------
  DNCookieContainerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A16EBFC3-2024-530A-B79C-91300C176C6A}']
  { constructors } 

    {class} function init: DNCookieContainer; overload;
    {class} function init(capacity: Int32): DNCookieContainer; overload;
    {class} function init(capacity: Int32; perDomainCapacity: Int32; maxCookieSize: Int32): DNCookieContainer; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultCookieLimit: Int32;
   function __fakeFieldGet_DefaultPerDomainCookieLimit: Int32;
   function __fakeFieldGet_DefaultCookieLengthLimit: Int32;

  { static fields } 

    {class} property DefaultCookieLimit: Int32 read __fakeFieldGet_DefaultCookieLimit;
    {class} property DefaultPerDomainCookieLimit: Int32 read __fakeFieldGet_DefaultPerDomainCookieLimit;
    {class} property DefaultCookieLengthLimit: Int32 read __fakeFieldGet_DefaultCookieLengthLimit;

  end;

  [DNTypeName('System.Net.CookieContainer')]
  DNCookieContainer = interface(DDN.mscorlib.DNObject)
  ['{D9BC3BB7-A863-3793-93A2-445D8B806A67}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    function get_MaxCookieSize: Int32;
    procedure set_MaxCookieSize(value: Int32);
    function get_PerDomainCapacity: Int32;
    procedure set_PerDomainCapacity(value: Int32);

  { methods } 

    procedure Add(cookies: DNCookieCollection); overload;
    procedure Add(uri: DNUri; cookie: DNCookie); overload;
    procedure Add(uri: DNUri; cookies: DNCookieCollection); overload;
    function GetCookies(uri: DNUri): DNCookieCollection;
    function GetCookieHeader(uri: DNUri): string;
    procedure SetCookies(uri: DNUri; cookieHeader: string);
    procedure Add(cookie: DNCookie); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
    property MaxCookieSize: Int32 read get_MaxCookieSize write set_MaxCookieSize;
    property PerDomainCapacity: Int32 read get_PerDomainCapacity write set_PerDomainCapacity;
  end;

  TDNCookieContainer = class(TDNGenericImport<DNCookieContainerClass, DNCookieContainer>)
  public const
   DefaultCookieLimit = 300;
   DefaultPerDomainCookieLimit = 20;
   DefaultCookieLengthLimit = 4096;
  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.ICredentials')]
  DNICredentials = interface(DDN.mscorlib.DNObject)
  ['{AA928FDF-0CBF-3845-8ECB-08339B2DC61D}']
  { methods } 

    function GetCredential(uri: DNUri; authType: string): DNNetworkCredential;

  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.IWebProxy')]
  DNIWebProxy = interface(DDN.mscorlib.DNObject)
  ['{26EE9E09-527D-3AB2-B8F2-6C0425580210}']
  { getters & setters } 

    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);

  { methods } 

    function GetProxy(destination: DNUri): DNUri;
    function IsBypassed(host: DNUri): Boolean;

  { propertys } 

    property Credentials: DNICredentials read get_Credentials write set_Credentials;
  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.IWebRequestCreate')]
  DNIWebRequestCreate = interface(DDN.mscorlib.DNObject)
  ['{9801F161-166F-3532-85DF-DB6C310570BE}']
  { methods } 

    function Create(uri: DNUri): DNWebRequest;

  end;

  //-------------namespace: System.Net----------------
  DNNetworkCredentialClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D309109D-58F6-59FE-8F05-EE7DD87BBE6A}']
  { constructors } 

    {class} function init: DNNetworkCredential; overload;
    {class} function init(userName: string; password: string): DNNetworkCredential; overload;
    {class} function init(userName: string; password: DDN.mscorlib.DNSecureString): DNNetworkCredential; overload;
    {class} function init(userName: string; password: string; domain: string): DNNetworkCredential; overload;
    {class} function init(userName: string; password: DDN.mscorlib.DNSecureString; domain: string): DNNetworkCredential; overload;

  end;

  [DNTypeName('System.Net.NetworkCredential')]
  DNNetworkCredential = interface(DDN.mscorlib.DNObject)
  ['{860A775E-72AE-3B0A-B4B3-3B299B650D80}']
  { getters & setters } 

    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_SecurePassword: DDN.mscorlib.DNSecureString;
    procedure set_SecurePassword(value: DDN.mscorlib.DNSecureString);
    function get_Domain: string;
    procedure set_Domain(value: string);

  { methods } 

    function GetCredential(uri: DNUri; authType: string): DNNetworkCredential; overload;
    function GetCredential(host: string; port: Int32; authenticationType: string): DNNetworkCredential; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserName: string read get_UserName write set_UserName;
    property Password: string read get_Password write set_Password;
    property SecurePassword: DDN.mscorlib.DNSecureString read get_SecurePassword write set_SecurePassword;
    property Domain: string read get_Domain write set_Domain;
  end;

  TDNNetworkCredential = class(TDNGenericImport<DNNetworkCredentialClass, DNNetworkCredential>) end;

  //-------------namespace: System.Net----------------
  DNTransportContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{22EC3759-9004-5B32-BA20-B68D797E8E75}']
  end;

  [DNTypeName('System.Net.TransportContext')]
  DNTransportContext = interface(DDN.mscorlib.DNObject)
  ['{1F864FAF-64F8-32A4-9EA7-200E0AFA2775}']
  { methods } 

    function GetTlsTokenBindings: DDN.mscorlib.DNIEnumerable<DNTokenBinding>;
    function GetChannelBinding(kind: DNChannelBindingKind): DNChannelBinding;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransportContext = class(TDNGenericImport<DNTransportContextClass, DNTransportContext>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F32D3AB-674B-5DFD-A992-9A5F5297AC16}']
  end;

  [DNTypeName('System.Printing.IndexedProperties.PrintProperty')]
  DNPrintProperty = interface(DDN.mscorlib.DNObject)
  ['{6D8082E6-2DC0-3AE4-A6E2-BD72FB313BEC}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property Name: string read get_Name;
  end;

  TDNPrintProperty = class(TDNGenericImport<DNPrintPropertyClass, DNPrintProperty>) end;

  //-------------namespace: System.Printing----------------
  DNPageImageableAreaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71C551C5-A6E3-52D4-B474-4AB29834B2BC}']
  end;

  [DNTypeName('System.Printing.PageImageableArea')]
  DNPageImageableArea = interface(DDN.mscorlib.DNObject)
  ['{96606B8B-7B5F-31C6-9540-F5FFA7D9EF68}']
  { getters & setters } 

    function get_OriginWidth: Double;
    function get_OriginHeight: Double;
    function get_ExtentWidth: Double;
    function get_ExtentHeight: Double;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property OriginWidth: Double read get_OriginWidth;
    property OriginHeight: Double read get_OriginHeight;
    property ExtentWidth: Double read get_ExtentWidth;
    property ExtentHeight: Double read get_ExtentHeight;
  end;

  TDNPageImageableArea = class(TDNGenericImport<DNPageImageableAreaClass, DNPageImageableArea>) end;

  //-------------namespace: System.Printing----------------
  DNPageMediaSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A31FF81B-F144-57E6-9EA0-3E9790854455}']
  { constructors } 

    {class} function init(mediaSizeName: DNPageMediaSizeName): DNPageMediaSize; overload;
    {class} function init(width: Double; height: Double): DNPageMediaSize; overload;
    {class} function init(mediaSizeName: DNPageMediaSizeName; width: Double; height: Double): DNPageMediaSize; overload;

  end;

  [DNTypeName('System.Printing.PageMediaSize')]
  DNPageMediaSize = interface(DDN.mscorlib.DNObject)
  ['{44070251-4A49-32FF-B9CD-D48D50B0B960}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNPageMediaSize = class(TDNGenericImport<DNPageMediaSizeClass, DNPageMediaSize>) end;

  //-------------namespace: System.Printing----------------
  DNPageResolutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5B0FEA70-6812-5EE0-B72F-02DDDDAE913F}']
  { constructors } 

    {class} function init(resolutionX: Int32; resolutionY: Int32): DNPageResolution; overload;
    {class} function init(qualitative: DNPageQualitativeResolution): DNPageResolution; overload;
    {class} function init(resolutionX: Int32; resolutionY: Int32; qualitative: DNPageQualitativeResolution): DNPageResolution; overload;

  end;

  [DNTypeName('System.Printing.PageResolution')]
  DNPageResolution = interface(DDN.mscorlib.DNObject)
  ['{CAF781C0-4A5B-3CC9-B99A-3495FC80A80A}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNPageResolution = class(TDNGenericImport<DNPageResolutionClass, DNPageResolution>) end;

  //-------------namespace: System.Printing----------------
  DNPageScalingFactorRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A1942A7D-8750-5CC9-82AF-B708B04225C4}']
  end;

  [DNTypeName('System.Printing.PageScalingFactorRange')]
  DNPageScalingFactorRange = interface(DDN.mscorlib.DNObject)
  ['{360DE511-00C8-3ABC-8025-5C26D8E66A67}']
  { getters & setters } 

    function get_MinimumScale: Int32;
    function get_MaximumScale: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property MinimumScale: Int32 read get_MinimumScale;
    property MaximumScale: Int32 read get_MaximumScale;
  end;

  TDNPageScalingFactorRange = class(TDNGenericImport<DNPageScalingFactorRangeClass, DNPageScalingFactorRange>) end;

  //-------------namespace: System.Printing----------------
  DNPrintCapabilitiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{15F6C0A3-2DA4-5206-B974-D73E1A31CB2C}']
  { constructors } 

    {class} function init(xmlStream: DDN.mscorlib.DNStream): DNPrintCapabilities;

  end;

  [DNTypeName('System.Printing.PrintCapabilities')]
  DNPrintCapabilities = interface(DDN.mscorlib.DNObject)
  ['{F2A06CEB-416F-35ED-BA26-4233248BDB42}']
  { getters & setters } 

    function get_PageImageableArea: DNPageImageableArea;
    function get_PageScalingFactorRange: DNPageScalingFactorRange;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageImageableArea: DNPageImageableArea read get_PageImageableArea;
    property PageScalingFactorRange: DNPageScalingFactorRange read get_PageScalingFactorRange;
  end;

  TDNPrintCapabilities = class(TDNGenericImport<DNPrintCapabilitiesClass, DNPrintCapabilities>) end;

  //-------------namespace: System.Printing----------------
  DNPrintDocumentImageableAreaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6317BE83-A6C1-51A3-A976-37CFA4A4E2D3}']
  end;

  [DNTypeName('System.Printing.PrintDocumentImageableArea')]
  DNPrintDocumentImageableArea = interface(DDN.mscorlib.DNObject)
  ['{CEEDE8BC-852C-3267-AC3E-E11E717A8150}']
  { getters & setters } 

    function get_MediaSizeHeight: Double;
    function get_MediaSizeWidth: Double;
    function get_ExtentHeight: Double;
    function get_ExtentWidth: Double;
    function get_OriginHeight: Double;
    function get_OriginWidth: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MediaSizeHeight: Double read get_MediaSizeHeight;
    property MediaSizeWidth: Double read get_MediaSizeWidth;
    property ExtentHeight: Double read get_ExtentHeight;
    property ExtentWidth: Double read get_ExtentWidth;
    property OriginHeight: Double read get_OriginHeight;
    property OriginWidth: Double read get_OriginWidth;
  end;

  TDNPrintDocumentImageableArea = class(TDNGenericImport<DNPrintDocumentImageableAreaClass, DNPrintDocumentImageableArea>) end;

  //-------------namespace: System.Printing----------------
  DNPrintJobSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54298164-3898-5585-8A04-ECA48BE5A862}']
  end;

  [DNTypeName('System.Printing.PrintJobSettings')]
  DNPrintJobSettings = interface(DDN.mscorlib.DNObject)
  ['{38A85713-FED5-3C22-9366-C13CF3C20464}']
  { getters & setters } 

    function get_Description: string;
    procedure set_Description(description: string);
    function get_CurrentPrintTicket: DNPrintTicket;
    procedure set_CurrentPrintTicket(printTicket: DNPrintTicket);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description write set_Description;
    property CurrentPrintTicket: DNPrintTicket read get_CurrentPrintTicket write set_CurrentPrintTicket;
  end;

  TDNPrintJobSettings = class(TDNGenericImport<DNPrintJobSettingsClass, DNPrintJobSettings>) end;

  //-------------namespace: System.Printing----------------
  DNPrintQueueStringPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A379A27C-9D6F-51D8-8DEE-BAD9FC746B2B}']
  { constructors } 

    {class} function init: DNPrintQueueStringProperty;

  end;

  [DNTypeName('System.Printing.PrintQueueStringProperty')]
  DNPrintQueueStringProperty = interface(DDN.mscorlib.DNObject)
  ['{2931EAA1-2656-3D23-927D-D26C418C98B9}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(__set_formal: string);
    function get_Type: DNPrintQueueStringPropertyType;
    procedure set_Type(__set_formal: DNPrintQueueStringPropertyType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Type: DNPrintQueueStringPropertyType read get_Type write set_Type;
  end;

  TDNPrintQueueStringProperty = class(TDNGenericImport<DNPrintQueueStringPropertyClass, DNPrintQueueStringProperty>) end;

  //-------------namespace: System.Printing----------------
  DNPrintSystemObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C443CE8F-6948-543D-8450-3266BE1F3F2C}']
  end;

  [DNTypeName('System.Printing.PrintSystemObject')]
  DNPrintSystemObject = interface(DDN.mscorlib.DNObject)
  ['{C217C8CC-2887-3BFD-9A60-B7476189F695}']
  { getters & setters } 

    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    procedure Commit;
    procedure Refresh;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DNPrintSystemObject read get_Parent;
    property Name: string read get_Name;
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintSystemObject = class(TDNGenericImport<DNPrintSystemObjectClass, DNPrintSystemObject>) end;

  //-------------namespace: System.Printing----------------
  DNPrintDriverClass = interface(DNObjectClass)
  ['{B8B5EC5B-201C-53CD-BA08-E611704FAC41}']
  end;

  [DNTypeName('System.Printing.PrintDriver')]
  DNPrintDriver = interface(DNObject)
  ['{6BE07925-6009-3454-9BED-30439425E0B6}']
  { getters & setters } 

    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    procedure Commit;
    procedure Refresh;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DNPrintSystemObject read get_Parent;
    property Name: string read get_Name;
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintDriver = class(TDNGenericImport<DNPrintDriverClass, DNPrintDriver>) end;

  //-------------namespace: System.Printing----------------
  DNPrintProcessorClass = interface(DNObjectClass)
  ['{4889B664-09F9-59CC-A249-E5D6FF791425}']
  end;

  [DNTypeName('System.Printing.PrintProcessor')]
  DNPrintProcessor = interface(DNObject)
  ['{AD308001-EB8C-3FE6-B5F8-5B06D6D62CD8}']
  { getters & setters } 

    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    procedure Commit;
    procedure Refresh;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DNPrintSystemObject read get_Parent;
    property Name: string read get_Name;
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintProcessor = class(TDNGenericImport<DNPrintProcessorClass, DNPrintProcessor>) end;

  //-------------namespace: System.Printing----------------
  DNPrintPortClass = interface(DNPrintSystemObjectClass)
  ['{DF1D94AA-5B3E-5E67-B5F4-4E789B9076F6}']
  end;

  [DNTypeName('System.Printing.PrintPort')]
  DNPrintPort = interface(DNPrintSystemObject)
  ['{84D4A992-718E-3562-8E7A-2BB727A6DB07}']
  { getters & setters } 

    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    procedure Commit;
    procedure Refresh;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DNPrintSystemObject read get_Parent;
    property Name: string read get_Name;
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintPort = class(TDNGenericImport<DNPrintPortClass, DNPrintPort>) end;

  //-------------namespace: System.Printing----------------
  DNPrintQueueClass = interface(DNPrintSystemObjectClass)
  ['{8F9AAD15-824E-572F-B686-D0D718CD8CF4}']
  { static getter & setter } 

    {class} function get_MaxPrintSchemaVersion: Int32;

  { constructors } 

    {class} function init(printServer: DNPrintServer; printQueueName: string; propertyFilter: TArray<DNPrintQueueIndexedProperty>; desiredAccess: DNPrintSystemDesiredAccess): DNPrintQueue; overload;
    {class} function init(printServer: DNPrintServer; printQueueName: string; propertyFilter: TArray<string>; desiredAccess: DNPrintSystemDesiredAccess): DNPrintQueue; overload;
    {class} function init(printServer: DNPrintServer; printQueueName: string; printSchemaVersion: Int32; desiredAccess: DNPrintSystemDesiredAccess): DNPrintQueue; overload;
    {class} function init(printServer: DNPrintServer; printQueueName: string; desiredAccess: DNPrintSystemDesiredAccess): DNPrintQueue; overload;
    {class} function init(printServer: DNPrintServer; printQueueName: string; propertyFilter: TArray<DNPrintQueueIndexedProperty>): DNPrintQueue; overload;
    {class} function init(printServer: DNPrintServer; printQueueName: string; propertyFilter: TArray<string>): DNPrintQueue; overload;
    {class} function init(printServer: DNPrintServer; printQueueName: string; printSchemaVersion: Int32): DNPrintQueue; overload;
    {class} function init(printServer: DNPrintServer; printQueueName: string): DNPrintQueue; overload;

  { static methods } 

    {class} function CreateXpsDocumentWriter(jobDescription: string; out documentImageableArea: DNPrintDocumentImageableArea; out pageRangeSelection: DNPageRangeSelection; out pageRange: DNPageRange): DNXpsDocumentWriter; overload;
    {class} function CreateXpsDocumentWriter(jobDescription: string; out documentImageableArea: DNPrintDocumentImageableArea): DNXpsDocumentWriter; overload;
    {class} function CreateXpsDocumentWriter(out documentImageableArea: DNPrintDocumentImageableArea; out pageRangeSelection: DNPageRangeSelection; out pageRange: DNPageRange): DNXpsDocumentWriter; overload;
    {class} function CreateXpsDocumentWriter(out documentImageableArea: DNPrintDocumentImageableArea): DNXpsDocumentWriter; overload;
    {class} function CreateXpsDocumentWriter(out width: Double; out height: Double): DNXpsDocumentWriter; overload;
    {class} function CreateXpsDocumentWriter(printQueue: DNPrintQueue): DNXpsDocumentWriter; overload;

  { static propertys } 

    {class} property MaxPrintSchemaVersion: Int32 read get_MaxPrintSchemaVersion;
  end;

  [DNTypeName('System.Printing.PrintQueue')]
  DNPrintQueue = interface(DNPrintSystemObject)
  ['{C187B99F-1003-3809-A31A-FD19FB6FC45F}']
  { getters & setters } 

    function get_InPartialTrust: Boolean;
    procedure set_InPartialTrust(isPT: Boolean);
    function get_ClientPrintSchemaVersion: Int32;
    function get_IsXpsDevice: Boolean;
    function get_IsPublished: Boolean;
    function get_IsRawOnlyEnabled: Boolean;
    function get_IsBidiEnabled: Boolean;
    function get_ScheduleCompletedJobsFirst: Boolean;
    function get_KeepPrintedJobs: Boolean;
    function get_IsDevQueryEnabled: Boolean;
    function get_IsHidden: Boolean;
    function get_IsShared: Boolean;
    function get_IsDirect: Boolean;
    function get_IsQueued: Boolean;
    function get_IsPowerSaveOn: Boolean;
    function get_IsServerUnknown: Boolean;
    function get_IsDoorOpened: Boolean;
    function get_IsOutOfMemory: Boolean;
    function get_NeedUserIntervention: Boolean;
    function get_PagePunt: Boolean;
    function get_HasToner: Boolean;
    function get_IsTonerLow: Boolean;
    function get_IsWarmingUp: Boolean;
    function get_IsInitializing: Boolean;
    function get_IsProcessing: Boolean;
    function get_IsWaiting: Boolean;
    function get_IsNotAvailable: Boolean;
    function get_IsOutputBinFull: Boolean;
    function get_IsPrinting: Boolean;
    function get_IsBusy: Boolean;
    function get_IsIOActive: Boolean;
    function get_IsOffline: Boolean;
    function get_HasPaperProblem: Boolean;
    function get_IsManualFeedRequired: Boolean;
    function get_IsOutOfPaper: Boolean;
    function get_IsPaperJammed: Boolean;
    function get_IsPendingDeletion: Boolean;
    function get_IsInError: Boolean;
    function get_IsPaused: Boolean;
    function get_QueueAttributes: DNPrintQueueAttributes;
    function get_QueueStatus: DNPrintQueueStatus;
    function get_FullName: string;
    function get_HostingPrintServer: DNPrintServer;
    function get_QueuePrintProcessor: DNPrintProcessor;
    procedure set_QueuePrintProcessor(printProcessor: DNPrintProcessor);
    function get_QueuePort: DNPrintPort;
    procedure set_QueuePort(port: DNPrintPort);
    function get_QueueDriver: DNPrintDriver;
    procedure set_QueueDriver(driver: DNPrintDriver);
    function get_DefaultPrintTicket: DNPrintTicket;
    procedure set_DefaultPrintTicket(newDefaultPrintTicket: DNPrintTicket);
    function get_UserPrintTicket: DNPrintTicket;
    procedure set_UserPrintTicket(newUserPrintTicket: DNPrintTicket);
    function get_SeparatorFile: string;
    procedure set_SeparatorFile(inSeparatorFile: string);
    function get_Description: string;
    function get_Location: string;
    procedure set_Location(inLocation: string);
    function get_Comment: string;
    procedure set_Comment(inComment: string);
    function get_ShareName: string;
    procedure set_ShareName(inShareName: string);
    function get_NumberOfJobs: Int32;
    function get_AveragePagesPerMinute: Int32;
    function get_UntilTimeOfDay: Int32;
    procedure set_UntilTimeOfDay(inUntilTime: Int32);
    function get_StartTimeOfDay: Int32;
    procedure set_StartTimeOfDay(inStartTime: Int32);
    function get_DefaultPriority: Int32;
    procedure set_DefaultPriority(inDefaultPriority: Int32);
    function get_Name: string;
    procedure set_Name(objName: string);
    function get_Priority: Int32;
    procedure set_Priority(inPriority: Int32);
    function get_CurrentJobSettings: DNPrintJobSettings;
    function get_PrintingIsCancelled: Boolean;
    procedure set_PrintingIsCancelled(isCancelled: Boolean);
    function get_Parent: DNPrintSystemObject;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    procedure Commit;
    procedure Refresh;
    function GetPrintCapabilities: DNPrintCapabilities; overload;
    function GetPrintCapabilities(printTicket: DNPrintTicket): DNPrintCapabilities; overload;
    function GetPrintCapabilitiesAsXml: DDN.mscorlib.DNMemoryStream; overload;
    function GetPrintCapabilitiesAsXml(printTicket: DNPrintTicket): DDN.mscorlib.DNMemoryStream; overload;
    function MergeAndValidatePrintTicket(basePrintTicket: DNPrintTicket; deltaPrintTicket: DNPrintTicket; scope: DNPrintTicketScope): DNValidationResult; overload;
    function MergeAndValidatePrintTicket(basePrintTicket: DNPrintTicket; deltaPrintTicket: DNPrintTicket): DNValidationResult; overload;
    procedure Pause;
    procedure Resume;
    function AddJob(jobName: string; documentPath: string; fastCopy: Boolean; printTicket: DNPrintTicket): DNPrintSystemJobInfo; overload;
    function AddJob(jobName: string; documentPath: string; fastCopy: Boolean): DNPrintSystemJobInfo; overload;
    function AddJob(jobName: string; printTicket: DNPrintTicket): DNPrintSystemJobInfo; overload;
    function AddJob(jobName: string): DNPrintSystemJobInfo; overload;
    function AddJob: DNPrintSystemJobInfo; overload;
    function GetJob(jobId: Int32): DNPrintSystemJobInfo;
    function GetPrintJobInfoCollection: DNPrintJobInfoCollection;
    procedure Purge;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InPartialTrust: Boolean read get_InPartialTrust write set_InPartialTrust;
    property ClientPrintSchemaVersion: Int32 read get_ClientPrintSchemaVersion;
    property IsXpsDevice: Boolean read get_IsXpsDevice;
    property IsPublished: Boolean read get_IsPublished;
    property IsRawOnlyEnabled: Boolean read get_IsRawOnlyEnabled;
    property IsBidiEnabled: Boolean read get_IsBidiEnabled;
    property ScheduleCompletedJobsFirst: Boolean read get_ScheduleCompletedJobsFirst;
    property KeepPrintedJobs: Boolean read get_KeepPrintedJobs;
    property IsDevQueryEnabled: Boolean read get_IsDevQueryEnabled;
    property IsHidden: Boolean read get_IsHidden;
    property IsShared: Boolean read get_IsShared;
    property IsDirect: Boolean read get_IsDirect;
    property IsQueued: Boolean read get_IsQueued;
    property IsPowerSaveOn: Boolean read get_IsPowerSaveOn;
    property IsServerUnknown: Boolean read get_IsServerUnknown;
    property IsDoorOpened: Boolean read get_IsDoorOpened;
    property IsOutOfMemory: Boolean read get_IsOutOfMemory;
    property NeedUserIntervention: Boolean read get_NeedUserIntervention;
    property PagePunt: Boolean read get_PagePunt;
    property HasToner: Boolean read get_HasToner;
    property IsTonerLow: Boolean read get_IsTonerLow;
    property IsWarmingUp: Boolean read get_IsWarmingUp;
    property IsInitializing: Boolean read get_IsInitializing;
    property IsProcessing: Boolean read get_IsProcessing;
    property IsWaiting: Boolean read get_IsWaiting;
    property IsNotAvailable: Boolean read get_IsNotAvailable;
    property IsOutputBinFull: Boolean read get_IsOutputBinFull;
    property IsPrinting: Boolean read get_IsPrinting;
    property IsBusy: Boolean read get_IsBusy;
    property IsIOActive: Boolean read get_IsIOActive;
    property IsOffline: Boolean read get_IsOffline;
    property HasPaperProblem: Boolean read get_HasPaperProblem;
    property IsManualFeedRequired: Boolean read get_IsManualFeedRequired;
    property IsOutOfPaper: Boolean read get_IsOutOfPaper;
    property IsPaperJammed: Boolean read get_IsPaperJammed;
    property IsPendingDeletion: Boolean read get_IsPendingDeletion;
    property IsInError: Boolean read get_IsInError;
    property IsPaused: Boolean read get_IsPaused;
    property QueueAttributes: DNPrintQueueAttributes read get_QueueAttributes;
    property QueueStatus: DNPrintQueueStatus read get_QueueStatus;
    property FullName: string read get_FullName;
    property HostingPrintServer: DNPrintServer read get_HostingPrintServer;
    property QueuePrintProcessor: DNPrintProcessor read get_QueuePrintProcessor write set_QueuePrintProcessor;
    property QueuePort: DNPrintPort read get_QueuePort write set_QueuePort;
    property QueueDriver: DNPrintDriver read get_QueueDriver write set_QueueDriver;
    property DefaultPrintTicket: DNPrintTicket read get_DefaultPrintTicket write set_DefaultPrintTicket;
    property UserPrintTicket: DNPrintTicket read get_UserPrintTicket write set_UserPrintTicket;
    property SeparatorFile: string read get_SeparatorFile write set_SeparatorFile;
    property Description: string read get_Description;
    property Location: string read get_Location write set_Location;
    property Comment: string read get_Comment write set_Comment;
    property ShareName: string read get_ShareName write set_ShareName;
    property NumberOfJobs: Int32 read get_NumberOfJobs;
    property AveragePagesPerMinute: Int32 read get_AveragePagesPerMinute;
    property UntilTimeOfDay: Int32 read get_UntilTimeOfDay write set_UntilTimeOfDay;
    property StartTimeOfDay: Int32 read get_StartTimeOfDay write set_StartTimeOfDay;
    property DefaultPriority: Int32 read get_DefaultPriority write set_DefaultPriority;
    property Name: string read get_Name write set_Name;
    property Priority: Int32 read get_Priority write set_Priority;
    property CurrentJobSettings: DNPrintJobSettings read get_CurrentJobSettings;
    property PrintingIsCancelled: Boolean read get_PrintingIsCancelled write set_PrintingIsCancelled;
    property Parent: DNPrintSystemObject read get_Parent;
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintQueue = class(TDNGenericImport<DNPrintQueueClass, DNPrintQueue>) end;

  //-------------namespace: System.Printing----------------
  DNPrintServerClass = interface(DNPrintSystemObjectClass)
  ['{0D52BA78-FF3D-59D6-9242-C6ABCDB15BC1}']
  { constructors } 

    {class} function init(path: string; propertiesFilter: TArray<string>; desiredAccess: DNPrintSystemDesiredAccess): DNPrintServer; overload;
    {class} function init(path: string; propertiesFilter: TArray<DNPrintServerIndexedProperty>; desiredAccess: DNPrintSystemDesiredAccess): DNPrintServer; overload;
    {class} function init(path: string; desiredAccess: DNPrintSystemDesiredAccess): DNPrintServer; overload;
    {class} function init(desiredAccess: DNPrintSystemDesiredAccess): DNPrintServer; overload;
    {class} function init(path: string; propertiesFilter: TArray<string>): DNPrintServer; overload;
    {class} function init(path: string; propertiesFilter: TArray<DNPrintServerIndexedProperty>): DNPrintServer; overload;
    {class} function init(path: string): DNPrintServer; overload;
    {class} function init: DNPrintServer; overload;

  { static methods } 

    {class} function DeletePrintQueue(printQueue: DNPrintQueue): Boolean; overload;
    {class} function DeletePrintQueue(printQueueName: string): Boolean; overload;

  end;

  [DNTypeName('System.Printing.PrintServer')]
  DNPrintServer = interface(DNPrintSystemObject)
  ['{8B4C09E2-3D6D-3892-AB39-F38E3B771EFF}']
  { getters & setters } 

    function get_Name: string;
    function get_SubSystemVersion: Byte;
    function get_RestartJobOnPoolEnabled: Boolean;
    procedure set_RestartJobOnPoolEnabled(value: Boolean);
    function get_RestartJobOnPoolTimeout: Int32;
    procedure set_RestartJobOnPoolTimeout(value: Int32);
    function get_MinorVersion: Int32;
    function get_MajorVersion: Int32;
    function get_EventLog: DNPrintServerEventLoggingTypes;
    procedure set_EventLog(value: DNPrintServerEventLoggingTypes);
    function get_NetPopup: Boolean;
    procedure set_NetPopup(value: Boolean);
    function get_BeepEnabled: Boolean;
    procedure set_BeepEnabled(value: Boolean);
    function get_DefaultSchedulerPriority: DDN.mscorlib.DNThreadPriority;
    function get_SchedulerPriority: DDN.mscorlib.DNThreadPriority;
    procedure set_SchedulerPriority(value: DDN.mscorlib.DNThreadPriority);
    function get_DefaultPortThreadPriority: DDN.mscorlib.DNThreadPriority;
    function get_PortThreadPriority: DDN.mscorlib.DNThreadPriority;
    procedure set_PortThreadPriority(value: DDN.mscorlib.DNThreadPriority);
    function get_DefaultSpoolDirectory: string;
    procedure set_DefaultSpoolDirectory(value: string);
    function get_Parent: DNPrintSystemObject;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; initialParameters: DNPrintPropertyDictionary): DNPrintQueue; overload;
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; printQueueAttributes: DNPrintQueueAttributes; printQueueShareName: string; printQueueComment: string; printQueueLocation: string; printQueueSeparatorFile: string; printQueuePriority: Int32; printQueueDefaultPriority: Int32): DNPrintQueue; overload;
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; printQueueAttributes: DNPrintQueueAttributes; printQueueProperty: DNPrintQueueStringProperty; printQueuePriority: Int32; printQueueDefaultPriority: Int32): DNPrintQueue; overload;
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; printQueueAttributes: DNPrintQueueAttributes): DNPrintQueue; overload;
    function GetPrintQueue(printQueueName: string; propertiesFilter: TArray<string>): DNPrintQueue; overload;
    function GetPrintQueue(printQueueName: string): DNPrintQueue; overload;
    function GetPrintQueues(propertiesFilter: TArray<string>; enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    function GetPrintQueues(propertiesFilter: TArray<DNPrintQueueIndexedProperty>; enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    function GetPrintQueues(enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    function GetPrintQueues(propertiesFilter: TArray<string>): DNPrintQueueCollection; overload;
    function GetPrintQueues(propertiesFilter: TArray<DNPrintQueueIndexedProperty>): DNPrintQueueCollection; overload;
    function GetPrintQueues: DNPrintQueueCollection; overload;
    procedure Commit;
    procedure Refresh;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property SubSystemVersion: Byte read get_SubSystemVersion;
    property RestartJobOnPoolEnabled: Boolean read get_RestartJobOnPoolEnabled write set_RestartJobOnPoolEnabled;
    property RestartJobOnPoolTimeout: Int32 read get_RestartJobOnPoolTimeout write set_RestartJobOnPoolTimeout;
    property MinorVersion: Int32 read get_MinorVersion;
    property MajorVersion: Int32 read get_MajorVersion;
    property EventLog: DNPrintServerEventLoggingTypes read get_EventLog write set_EventLog;
    property NetPopup: Boolean read get_NetPopup write set_NetPopup;
    property BeepEnabled: Boolean read get_BeepEnabled write set_BeepEnabled;
    property DefaultSchedulerPriority: DDN.mscorlib.DNThreadPriority read get_DefaultSchedulerPriority;
    property SchedulerPriority: DDN.mscorlib.DNThreadPriority read get_SchedulerPriority write set_SchedulerPriority;
    property DefaultPortThreadPriority: DDN.mscorlib.DNThreadPriority read get_DefaultPortThreadPriority;
    property PortThreadPriority: DDN.mscorlib.DNThreadPriority read get_PortThreadPriority write set_PortThreadPriority;
    property DefaultSpoolDirectory: string read get_DefaultSpoolDirectory write set_DefaultSpoolDirectory;
    property Parent: DNPrintSystemObject read get_Parent;
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintServer = class(TDNGenericImport<DNPrintServerClass, DNPrintServer>) end;

  //-------------namespace: System.Printing----------------
  DNPrintSystemJobInfoClass = interface(DNPrintSystemObjectClass)
  ['{7A8A1CE6-1206-539E-A570-1F4C5FB18C20}']
  { static methods } 

    {class} function Get(printQueue: DNPrintQueue; jobIdentifier: Int32): DNPrintSystemJobInfo;

  end;

  [DNTypeName('System.Printing.PrintSystemJobInfo')]
  DNPrintSystemJobInfo = interface(DNPrintSystemObject)
  ['{A28863F8-FA1F-3DFA-8450-858EFE8692CC}']
  { getters & setters } 

    function get_HostingPrintServer: DNPrintServer;
    function get_HostingPrintQueue: DNPrintQueue;
    function get_JobName: string;
    procedure set_JobName(newJobName: string);
    function get_IsRetained: Boolean;
    function get_IsUserInterventionRequired: Boolean;
    function get_IsBlocked: Boolean;
    function get_IsDeleted: Boolean;
    function get_IsPaperOut: Boolean;
    function get_IsOffline: Boolean;
    function get_IsPrinting: Boolean;
    function get_IsInError: Boolean;
    function get_IsSpooling: Boolean;
    function get_IsRestarted: Boolean;
    function get_IsPrinted: Boolean;
    function get_IsPaused: Boolean;
    function get_IsDeleting: Boolean;
    function get_IsCompleted: Boolean;
    function get_JobStatus: DNPrintJobStatus;
    function get_TimeSinceStartedPrinting: Int32;
    function get_TimeJobSubmitted: DDN.mscorlib.DNDateTime;
    function get_JobSize: Int32;
    function get_NumberOfPagesPrinted: Int32;
    function get_NumberOfPages: Int32;
    function get_UntilTimeOfDay: Int32;
    function get_StartTimeOfDay: Int32;
    function get_PositionInPrintQueue: Int32;
    function get_Priority: DNPrintJobPriority;
    function get_Submitter: string;
    function get_JobIdentifier: Int32;
    function get_JobStream: DDN.mscorlib.DNStream;
    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    procedure Pause;
    procedure Resume;
    procedure Cancel;
    procedure Restart;
    procedure Commit;
    procedure Refresh;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HostingPrintServer: DNPrintServer read get_HostingPrintServer;
    property HostingPrintQueue: DNPrintQueue read get_HostingPrintQueue;
    property JobName: string read get_JobName write set_JobName;
    property IsRetained: Boolean read get_IsRetained;
    property IsUserInterventionRequired: Boolean read get_IsUserInterventionRequired;
    property IsBlocked: Boolean read get_IsBlocked;
    property IsDeleted: Boolean read get_IsDeleted;
    property IsPaperOut: Boolean read get_IsPaperOut;
    property IsOffline: Boolean read get_IsOffline;
    property IsPrinting: Boolean read get_IsPrinting;
    property IsInError: Boolean read get_IsInError;
    property IsSpooling: Boolean read get_IsSpooling;
    property IsRestarted: Boolean read get_IsRestarted;
    property IsPrinted: Boolean read get_IsPrinted;
    property IsPaused: Boolean read get_IsPaused;
    property IsDeleting: Boolean read get_IsDeleting;
    property IsCompleted: Boolean read get_IsCompleted;
    property JobStatus: DNPrintJobStatus read get_JobStatus;
    property TimeSinceStartedPrinting: Int32 read get_TimeSinceStartedPrinting;
    property TimeJobSubmitted: DDN.mscorlib.DNDateTime read get_TimeJobSubmitted;
    property JobSize: Int32 read get_JobSize;
    property NumberOfPagesPrinted: Int32 read get_NumberOfPagesPrinted;
    property NumberOfPages: Int32 read get_NumberOfPages;
    property UntilTimeOfDay: Int32 read get_UntilTimeOfDay;
    property StartTimeOfDay: Int32 read get_StartTimeOfDay;
    property PositionInPrintQueue: Int32 read get_PositionInPrintQueue;
    property Priority: DNPrintJobPriority read get_Priority;
    property Submitter: string read get_Submitter;
    property JobIdentifier: Int32 read get_JobIdentifier;
    property JobStream: DDN.mscorlib.DNStream read get_JobStream;
    property Parent: DNPrintSystemObject read get_Parent;
    property Name: string read get_Name;
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintSystemJobInfo = class(TDNGenericImport<DNPrintSystemJobInfoClass, DNPrintSystemJobInfo>) end;

  //-------------namespace: System.Printing----------------
  DNPrintJobInfoCollectionClass = interface(DNObjectClass)
  ['{EC38D05B-7535-527D-842E-A8B208E18031}']
  { constructors } 

    {class} function init(printQueue: DNPrintQueue; propertyFilter: TArray<string>): DNPrintJobInfoCollection;

  end;

  [DNTypeName('System.Printing.PrintJobInfoCollection')]
  DNPrintJobInfoCollection = interface(DNObject)
  ['{E770F674-237E-3104-910A-955E6DFC96AD}']
  { methods } 

    function GetNonGenericEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Add(printObject: DNPrintSystemJobInfo);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPrintJobInfoCollection = class(TDNGenericImport<DNPrintJobInfoCollectionClass, DNPrintJobInfoCollection>) end;

  //-------------namespace: System.Printing----------------
  DNPrintQueueCollectionClass = interface(DNObjectClass)
  ['{613638B1-198A-5E4E-9AB6-AAE6974F3585}']
  { static getter & setter } 

    {class} function get_SyncRoot: DDN.mscorlib.DNObject;

  { constructors } 

    {class} function init(printServer: DNPrintServer; propertyFilter: TArray<string>): DNPrintQueueCollection; overload;
    {class} function init(printServer: DNPrintServer; propertyFilter: TArray<string>; enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    {class} function init: DNPrintQueueCollection; overload;

  { static propertys } 

    {class} property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  [DNTypeName('System.Printing.PrintQueueCollection')]
  DNPrintQueueCollection = interface(DNObject)
  ['{7B152755-3B52-3782-9942-86C71A3ACB91}']
  { methods } 

    function GetNonGenericEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Add(printObject: DNPrintQueue);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPrintQueueCollection = class(TDNGenericImport<DNPrintQueueCollectionClass, DNPrintQueueCollection>) end;

  //-------------namespace: System.Printing----------------
  DNPrintTicketClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2AB5CE1F-B1D4-57DD-88FE-E491C6055CD2}']
  { constructors } 

    {class} function init: DNPrintTicket; overload;
    {class} function init(xmlStream: DDN.mscorlib.DNStream): DNPrintTicket; overload;

  end;

  [DNTypeName('System.Printing.PrintTicket')]
  DNPrintTicket = interface(DDN.mscorlib.DNObject)
  ['{5CBE7B4B-BDB5-300B-BC94-1614B6838AE7}']
  { getters & setters } 

    function get_PageMediaSize: DNPageMediaSize;
    procedure set_PageMediaSize(value: DNPageMediaSize);
    function get_PageResolution: DNPageResolution;
    procedure set_PageResolution(value: DNPageResolution);

  { events } 

    procedure add_PropertyChanged(value: DNPropertyChangedEventHandler);
    procedure remove_PropertyChanged(value: DNPropertyChangedEventHandler);

  { methods } 

    function Clone: DNPrintTicket;
    function GetXmlStream: DDN.mscorlib.DNMemoryStream;
    procedure SaveTo(outStream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageMediaSize: DNPageMediaSize read get_PageMediaSize write set_PageMediaSize;
    property PageResolution: DNPageResolution read get_PageResolution write set_PageResolution;
  end;

  TDNPrintTicket = class(TDNGenericImport<DNPrintTicketClass, DNPrintTicket>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteBinderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{34462BF9-1452-57B3-8E16-F9899ACF6DAB}']
  { static getter & setter } 

    {class} function get_UpdateLabel: DNLabelTarget;

  { static propertys } 

    {class} property UpdateLabel: DNLabelTarget read get_UpdateLabel;
  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSiteBinder')]
  DNCallSiteBinder = interface(DDN.mscorlib.DNObject)
  ['{BCD9EDA4-1357-3A60-9EA1-6355DBD5BF0C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCallSiteBinder = class(TDNGenericImport<DNCallSiteBinderClass, DNCallSiteBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNBinaryOperationBinderClass = interface(DNObjectClass)
  ['{BA8D570D-6856-58AC-A568-8DE00E735847}']
  end;

  [DNTypeName('System.Dynamic.BinaryOperationBinder')]
  DNBinaryOperationBinder = interface(DNObject)
  ['{8ED92572-3BA2-3C0A-A0FA-141CB95C920D}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Operation: DNExpressionType;

  { methods } 

    function FallbackBinaryOperation(target: DNDynamicMetaObject; arg: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function FallbackBinaryOperation(target: DNDynamicMetaObject; arg: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property Operation: DNExpressionType read get_Operation;
  end;

  TDNBinaryOperationBinder = class(TDNGenericImport<DNBinaryOperationBinderClass, DNBinaryOperationBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNConvertBinderClass = interface(DNObjectClass)
  ['{68C2C489-7CC0-5997-9D4C-688617763E83}']
  end;

  [DNTypeName('System.Dynamic.ConvertBinder')]
  DNConvertBinder = interface(DNObject)
  ['{973E6069-DD67-316A-B894-42302D1B1E2F}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_Explicit: Boolean;
    function get_ReturnType: DDN.mscorlib.DNType;

  { methods } 

    function FallbackConvert(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function FallbackConvert(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property Explicit: Boolean read get_Explicit;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
  end;

  TDNConvertBinder = class(TDNGenericImport<DNConvertBinderClass, DNConvertBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNCreateInstanceBinderClass = interface(DNObjectClass)
  ['{5E3B6808-F825-56EE-A339-6BC569483010}']
  end;

  [DNTypeName('System.Dynamic.CreateInstanceBinder')]
  DNCreateInstanceBinder = interface(DNObject)
  ['{18AFA6C3-B588-374F-9FF3-39F79F0B0A3B}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackCreateInstance(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackCreateInstance(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNCreateInstanceBinder = class(TDNGenericImport<DNCreateInstanceBinderClass, DNCreateInstanceBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDeleteIndexBinderClass = interface(DNObjectClass)
  ['{8ACCC0E5-0014-58C6-A0E8-1E8BBB869D49}']
  end;

  [DNTypeName('System.Dynamic.DeleteIndexBinder')]
  DNDeleteIndexBinder = interface(DNObject)
  ['{CC51734E-887B-3AF6-AB1A-3C417974430E}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackDeleteIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function FallbackDeleteIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNDeleteIndexBinder = class(TDNGenericImport<DNDeleteIndexBinderClass, DNDeleteIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDeleteMemberBinderClass = interface(DNObjectClass)
  ['{6B9B9B85-E9D0-53F2-95DE-5D8EF23C2785}']
  end;

  [DNTypeName('System.Dynamic.DeleteMemberBinder')]
  DNDeleteMemberBinder = interface(DNObject)
  ['{A079571A-181F-3F2F-A556-8CDEBC1621B2}']
  { getters & setters } 

    function get_Name: string;
    function get_IgnoreCase: Boolean;
    function get_ReturnType: DDN.mscorlib.DNType;

  { methods } 

    function FallbackDeleteMember(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function FallbackDeleteMember(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
  end;

  TDNDeleteMemberBinder = class(TDNGenericImport<DNDeleteMemberBinderClass, DNDeleteMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNGetIndexBinderClass = interface(DNObjectClass)
  ['{53780E3C-7403-58B9-8634-8180CDE79977}']
  end;

  [DNTypeName('System.Dynamic.GetIndexBinder')]
  DNGetIndexBinder = interface(DNObject)
  ['{5AD435E4-178B-32C4-A0AE-F4075DE49C43}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackGetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function FallbackGetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNGetIndexBinder = class(TDNGenericImport<DNGetIndexBinderClass, DNGetIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNGetMemberBinderClass = interface(DNObjectClass)
  ['{075F6E9F-CAA5-5CAD-BDD0-38A378E34FC2}']
  end;

  [DNTypeName('System.Dynamic.GetMemberBinder')]
  DNGetMemberBinder = interface(DNObject)
  ['{76C49417-49E8-301F-BDE1-7A8BCB1C27FB}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;

  { methods } 

    function FallbackGetMember(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function FallbackGetMember(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
  end;

  TDNGetMemberBinder = class(TDNGenericImport<DNGetMemberBinderClass, DNGetMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNInvokeBinderClass = interface(DNObjectClass)
  ['{467A2FAE-A5A2-501A-82B4-353C9E365BDA}']
  end;

  [DNTypeName('System.Dynamic.InvokeBinder')]
  DNInvokeBinder = interface(DNObject)
  ['{98DBA2B2-D1B2-3F8C-BAF5-C0DE2F86F02B}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNInvokeBinder = class(TDNGenericImport<DNInvokeBinderClass, DNInvokeBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNInvokeMemberBinderClass = interface(DNObjectClass)
  ['{EE6CFFB5-1859-56F8-9FD9-E290FD94B861}']
  end;

  [DNTypeName('System.Dynamic.InvokeMemberBinder')]
  DNInvokeMemberBinder = interface(DNObject)
  ['{48CDD99E-177D-349C-A2CA-5CCD50A9D752}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackInvokeMember(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function FallbackInvokeMember(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNInvokeMemberBinder = class(TDNGenericImport<DNInvokeMemberBinderClass, DNInvokeMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNSetIndexBinderClass = interface(DNObjectClass)
  ['{4B73D843-88C7-5CD2-86D8-08B551A0851B}']
  end;

  [DNTypeName('System.Dynamic.SetIndexBinder')]
  DNSetIndexBinder = interface(DNObject)
  ['{B6401EEF-824B-33DA-AD20-4D7A5AD59D69}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackSetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function FallbackSetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNSetIndexBinder = class(TDNGenericImport<DNSetIndexBinderClass, DNSetIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNSetMemberBinderClass = interface(DNObjectClass)
  ['{3F9001FC-B825-5B95-B7FE-88BA83C1F05A}']
  end;

  [DNTypeName('System.Dynamic.SetMemberBinder')]
  DNSetMemberBinder = interface(DNObject)
  ['{E70B4C11-B8CF-3EE6-9DB5-B4ECB078E384}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function FallbackSetMember(target: DNDynamicMetaObject; value: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackSetMember(target: DNDynamicMetaObject; value: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
  end;

  TDNSetMemberBinder = class(TDNGenericImport<DNSetMemberBinderClass, DNSetMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNUnaryOperationBinderClass = interface(DNObjectClass)
  ['{6E0C0F71-441A-57D2-AC27-02F09C1619B7}']
  end;

  [DNTypeName('System.Dynamic.UnaryOperationBinder')]
  DNUnaryOperationBinder = interface(DNObject)
  ['{A3E57BC0-4680-3F4F-847B-96360A2C990F}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Operation: DNExpressionType;

  { methods } 

    function FallbackUnaryOperation(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function FallbackUnaryOperation(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property Operation: DNExpressionType read get_Operation;
  end;

  TDNUnaryOperationBinder = class(TDNGenericImport<DNUnaryOperationBinderClass, DNUnaryOperationBinder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDebugInfoGeneratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A6BB4B0C-F26E-5E0F-B15B-F934EDB62583}']
  { static methods } 

    {class} function CreatePdbGenerator: DNDebugInfoGenerator;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DebugInfoGenerator')]
  DNDebugInfoGenerator = interface(DDN.mscorlib.DNObject)
  ['{08BB7FFD-FA62-3E00-9CAF-2FF883CC52C9}']
  { methods } 

    procedure MarkSequencePoint(method: DNLambdaExpression; ilOffset: Int32; sequencePoint: DNDebugInfoExpression);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDebugInfoGenerator = class(TDNGenericImport<DNDebugInfoGeneratorClass, DNDebugInfoGenerator>) end;

  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  DNChannelBindingClass = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{5D76701B-1FD2-53F0-9264-ADF75E1A6685}']
  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.ChannelBinding')]
  DNChannelBinding = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{8E6DBC05-A506-3E26-A004-7103E8CA8A8B}']
  { getters & setters } 

    function get_Size: Int32;
    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Size: Int32 read get_Size;
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNChannelBinding = class(TDNGenericImport<DNChannelBindingClass, DNChannelBinding>) end;

  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  DNTokenBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1B8228F7-8067-5C99-AE44-DD47B671F5AC}']
  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.TokenBinding')]
  DNTokenBinding = interface(DDN.mscorlib.DNObject)
  ['{1682F1E3-342B-39DC-9DBF-63988669CF82}']
  { methods } 

    function GetRawTokenBindingId: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTokenBinding = class(TDNGenericImport<DNTokenBindingClass, DNTokenBinding>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509CertificateCollection_X509CertificateEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{303E6666-29EC-5ED0-BE14-F06FB7560376}']
  { constructors } 

    {class} function init(mappings: DNX509CertificateCollection): DNX509CertificateCollection_X509CertificateEnumerator;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509CertificateCollection+X509CertificateEnumerator')]
  DNX509CertificateCollection_X509CertificateEnumerator = interface(DDN.mscorlib.DNObject)
  ['{D8D12C69-3B6B-3983-8A5A-063CCC94D061}']
  { getters & setters } 

    function get_Current: DDN.mscorlib.DNX509Certificate;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DDN.mscorlib.DNX509Certificate read get_Current;
  end;

  TDNX509CertificateCollection_X509CertificateEnumerator = class(TDNGenericImport<DNX509CertificateCollection_X509CertificateEnumeratorClass, DNX509CertificateCollection_X509CertificateEnumerator>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ChainClass = interface(DDN.mscorlib.DNObjectClass)
  ['{896F2DDC-0F4A-5487-BC01-C5521CA05EA7}']
  { constructors } 

    {class} function init: DNX509Chain; overload;
    {class} function init(useMachineContext: Boolean): DNX509Chain; overload;
    {class} function init(chainContext: IntPtr): DNX509Chain; overload;

  { static methods } 

    {class} function Create: DNX509Chain;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Chain')]
  DNX509Chain = interface(DDN.mscorlib.DNObject)
  ['{E7547572-505D-39B6-8C1A-9213662B7E5C}']
  { getters & setters } 

    function get_ChainContext: IntPtr;

  { methods } 

    procedure Reset;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChainContext: IntPtr read get_ChainContext;
  end;

  TDNX509Chain = class(TDNGenericImport<DNX509ChainClass, DNX509Chain>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNDataObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B72C8303-3285-5E66-9B64-65BDADBB0D7B}']
  { constructors } 

    {class} function init: DNDataObject; overload;
    {class} function init(id: string; mimeType: string; encoding: string; data: DNXmlElement): DNDataObject; overload;

  end;

  [DNTypeName('System.Security.Cryptography.Xml.DataObject')]
  DNDataObject = interface(DDN.mscorlib.DNObject)
  ['{17E65955-BDA6-3F0E-8800-1B654A63FCC6}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Data: DNXmlNodeList;
    procedure set_Data(value: DNXmlNodeList);

  { methods } 

    function GetXml: DNXmlElement;
    procedure LoadXml(value: DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property MimeType: string read get_MimeType write set_MimeType;
    property Encoding: string read get_Encoding write set_Encoding;
    property Data: DNXmlNodeList read get_Data write set_Data;
  end;

  TDNDataObject = class(TDNGenericImport<DNDataObjectClass, DNDataObject>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNKeyInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FC55D02A-89AB-5B1C-A81C-D61D7D5EDE15}']
  { constructors } 

    {class} function init: DNKeyInfo;

  end;

  [DNTypeName('System.Security.Cryptography.Xml.KeyInfo')]
  DNKeyInfo = interface(DDN.mscorlib.DNObject)
  ['{4FEF8CE8-09B4-3D13-88DD-39A9F077A80C}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Count: Int32;

  { methods } 

    procedure AddClause(clause: DNKeyInfoClause);
    function GetXml: DNXmlElement;
    procedure LoadXml(value: DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Count: Int32 read get_Count;
  end;

  TDNKeyInfo = class(TDNGenericImport<DNKeyInfoClass, DNKeyInfo>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNKeyInfoClauseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E78A823-CB35-5307-B462-C2C57C34AFD6}']
  end;

  [DNTypeName('System.Security.Cryptography.Xml.KeyInfoClause')]
  DNKeyInfoClause = interface(DDN.mscorlib.DNObject)
  ['{C1677807-714E-320B-B67E-77C6F73AFBC3}']
  { methods } 

    function GetXml: DNXmlElement;
    procedure LoadXml(element: DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyInfoClause = class(TDNGenericImport<DNKeyInfoClauseClass, DNKeyInfoClause>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1B0A8D95-8E8E-5CD5-AD1A-883B141ED377}']
  { constructors } 

    {class} function init: DNReference; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNReference; overload;
    {class} function init(uri: string): DNReference; overload;

  end;

  [DNTypeName('System.Security.Cryptography.Xml.Reference')]
  DNReference = interface(DDN.mscorlib.DNObject)
  ['{BEF96AF0-4A13-3483-8743-89C05AFE9B89}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_DigestMethod: string;
    procedure set_DigestMethod(value: string);
    function get_DigestValue: TArray<Byte>;
    procedure set_DigestValue(value: TArray<Byte>);
    function get_TransformChain: DNTransformChain;
    procedure set_TransformChain(value: DNTransformChain);

  { methods } 

    function GetXml: DNXmlElement;
    procedure LoadXml(value: DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Uri: string read get_Uri write set_Uri;
    property &Type: string read get_Type write set_Type;
    property DigestMethod: string read get_DigestMethod write set_DigestMethod;
    property DigestValue: TArray<Byte> read get_DigestValue write set_DigestValue;
    property TransformChain: DNTransformChain read get_TransformChain write set_TransformChain;
  end;

  TDNReference = class(TDNGenericImport<DNReferenceClass, DNReference>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C5D1FF7-84D9-58EB-9424-EFCF9097AA71}']
  { constructors } 

    {class} function init: DNSignature;

  end;

  [DNTypeName('System.Security.Cryptography.Xml.Signature')]
  DNSignature = interface(DDN.mscorlib.DNObject)
  ['{1693EF5C-FC4B-35A7-8423-C2945D7BE194}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_SignedInfo: DNSignedInfo;
    procedure set_SignedInfo(value: DNSignedInfo);
    function get_SignatureValue: TArray<Byte>;
    procedure set_SignatureValue(value: TArray<Byte>);
    function get_KeyInfo: DNKeyInfo;
    procedure set_KeyInfo(value: DNKeyInfo);
    function get_ObjectList: DDN.mscorlib.DNIList;
    procedure set_ObjectList(value: DDN.mscorlib.DNIList);

  { methods } 

    procedure AddObject(dataObject: DNDataObject);
    function GetXml: DNXmlElement;
    procedure LoadXml(value: DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property SignedInfo: DNSignedInfo read get_SignedInfo write set_SignedInfo;
    property SignatureValue: TArray<Byte> read get_SignatureValue write set_SignatureValue;
    property KeyInfo: DNKeyInfo read get_KeyInfo write set_KeyInfo;
    property ObjectList: DDN.mscorlib.DNIList read get_ObjectList write set_ObjectList;
  end;

  TDNSignature = class(TDNGenericImport<DNSignatureClass, DNSignature>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNSignedInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{87B8ADF6-8E82-5AA3-B273-3597227F4754}']
  { constructors } 

    {class} function init: DNSignedInfo;

  end;

  [DNTypeName('System.Security.Cryptography.Xml.SignedInfo')]
  DNSignedInfo = interface(DDN.mscorlib.DNObject)
  ['{2EB50F73-857A-36B6-A280-799AF76E98BE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_CanonicalizationMethod: string;
    procedure set_CanonicalizationMethod(value: string);
    function get_SignatureMethod: string;
    procedure set_SignatureMethod(value: string);
    function get_SignatureLength: string;
    procedure set_SignatureLength(value: string);
    function get_References: DDN.mscorlib.DNArrayList;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    procedure AddReference(reference: DNReference);
    function GetXml: DNXmlElement;
    procedure LoadXml(value: DNXmlElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Id: string read get_Id write set_Id;
    property CanonicalizationMethod: string read get_CanonicalizationMethod write set_CanonicalizationMethod;
    property SignatureMethod: string read get_SignatureMethod write set_SignatureMethod;
    property SignatureLength: string read get_SignatureLength write set_SignatureLength;
    property References: DDN.mscorlib.DNArrayList read get_References;
  end;

  TDNSignedInfo = class(TDNGenericImport<DNSignedInfoClass, DNSignedInfo>) end;

  //-------------namespace: System.Security.Cryptography.Xml----------------
  DNTransformChainClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1CEDE88F-1E8A-57B7-9DDB-85B3A20147B3}']
  { constructors } 

    {class} function init: DNTransformChain;

  end;

  [DNTypeName('System.Security.Cryptography.Xml.TransformChain')]
  DNTransformChain = interface(DDN.mscorlib.DNObject)
  ['{E4668765-48E0-391C-BD17-BF1BBEFB1F6C}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNTransformChain = class(TDNGenericImport<DNTransformChainClass, DNTransformChain>) end;

  //-------------namespace: System----------------
  DNUriClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8A027B3B-A57B-527D-952E-7A148425AE4A}']
  { constructors } 

    {class} function init(uriString: string): DNUri; overload;
    {class} function init(uriString: string; dontEscape: Boolean): DNUri; overload;
    {class} function init(baseUri: DNUri; relativeUri: string; dontEscape: Boolean): DNUri; overload;
    {class} function init(uriString: string; uriKind: DNUriKind): DNUri; overload;
    {class} function init(baseUri: DNUri; relativeUri: string): DNUri; overload;
    {class} function init(baseUri: DNUri; relativeUri: DNUri): DNUri; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_UriSchemeFile: string;
   function __fakeFieldGet_UriSchemeFtp: string;
   function __fakeFieldGet_UriSchemeGopher: string;
   function __fakeFieldGet_UriSchemeHttp: string;
   function __fakeFieldGet_UriSchemeHttps: string;
   function __fakeFieldGet_UriSchemeMailto: string;
   function __fakeFieldGet_UriSchemeNews: string;
   function __fakeFieldGet_UriSchemeNntp: string;
   function __fakeFieldGet_UriSchemeNetTcp: string;
   function __fakeFieldGet_UriSchemeNetPipe: string;
   function __fakeFieldGet_SchemeDelimiter: string;

  { static fields } 

    {class} property UriSchemeFile: string read __fakeFieldGet_UriSchemeFile;
    {class} property UriSchemeFtp: string read __fakeFieldGet_UriSchemeFtp;
    {class} property UriSchemeGopher: string read __fakeFieldGet_UriSchemeGopher;
    {class} property UriSchemeHttp: string read __fakeFieldGet_UriSchemeHttp;
    {class} property UriSchemeHttps: string read __fakeFieldGet_UriSchemeHttps;
    {class} property UriSchemeMailto: string read __fakeFieldGet_UriSchemeMailto;
    {class} property UriSchemeNews: string read __fakeFieldGet_UriSchemeNews;
    {class} property UriSchemeNntp: string read __fakeFieldGet_UriSchemeNntp;
    {class} property UriSchemeNetTcp: string read __fakeFieldGet_UriSchemeNetTcp;
    {class} property UriSchemeNetPipe: string read __fakeFieldGet_UriSchemeNetPipe;
    {class} property SchemeDelimiter: string read __fakeFieldGet_SchemeDelimiter;

  { static methods } 

    {class} function HexUnescape(pattern: string; out index: Int32): Char;
    {class} function IsHexEncoding(pattern: string; index: Int32): Boolean;
    {class} function CheckSchemeName(schemeName: string): Boolean;
    {class} function IsHexDigit(character: Char): Boolean;
    {class} function FromHex(digit: Char): Int32;
    {class} function TryCreate(uriString: string; uriKind: DNUriKind; out result: DNUri): Boolean; overload;
    {class} function TryCreate(baseUri: DNUri; relativeUri: string; out result: DNUri): Boolean; overload;
    {class} function TryCreate(baseUri: DNUri; relativeUri: DNUri; out result: DNUri): Boolean; overload;
    {class} function Compare(uri1: DNUri; uri2: DNUri; partsToCompare: DNUriComponents; compareFormat: DNUriFormat; comparisonType: DDN.mscorlib.DNStringComparison): Int32;
    {class} function IsWellFormedUriString(uriString: string; uriKind: DNUriKind): Boolean;
    {class} function EscapeUriString(stringToEscape: string): string;
    {class} function EscapeDataString(stringToEscape: string): string;
    {class} function CheckHostName(name: string): DNUriHostNameType;
    {class} function HexEscape(character: Char): string;
    {class} function UnescapeDataString(stringToUnescape: string): string;

  end;

  [DNTypeName('System.Uri')]
  DNUri = interface(DDN.mscorlib.DNObject)
  ['{9BB92499-99AB-3AE5-93D2-0F41F92018D0}']
  { getters & setters } 

    function get_AbsolutePath: string;
    function get_AbsoluteUri: string;
    function get_LocalPath: string;
    function get_Authority: string;
    function get_HostNameType: DNUriHostNameType;
    function get_IsDefaultPort: Boolean;
    function get_IsFile: Boolean;
    function get_IsLoopback: Boolean;
    function get_PathAndQuery: string;
    function get_Segments: TArray<string>;
    function get_IsUnc: Boolean;
    function get_Host: string;
    function get_Port: Int32;
    function get_Query: string;
    function get_Fragment: string;
    function get_Scheme: string;
    function get_OriginalString: string;
    function get_DnsSafeHost: string;
    function get_IdnHost: string;
    function get_IsAbsoluteUri: Boolean;
    function get_UserEscaped: Boolean;
    function get_UserInfo: string;

  { methods } 

    function GetLeftPart(part: DNUriPartial): string;
    function GetHashCode: Int32;
    function ToString: string;
    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    function MakeRelative(toUri: DNUri): string;
    function GetComponents(components: DNUriComponents; format: DNUriFormat): string;
    function IsWellFormedOriginalString: Boolean;
    function IsBaseOf(uri: DNUri): Boolean;
    function MakeRelativeUri(uri: DNUri): DNUri;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AbsolutePath: string read get_AbsolutePath;
    property AbsoluteUri: string read get_AbsoluteUri;
    property LocalPath: string read get_LocalPath;
    property Authority: string read get_Authority;
    property HostNameType: DNUriHostNameType read get_HostNameType;
    property IsDefaultPort: Boolean read get_IsDefaultPort;
    property IsFile: Boolean read get_IsFile;
    property IsLoopback: Boolean read get_IsLoopback;
    property PathAndQuery: string read get_PathAndQuery;
    property Segments: TArray<string> read get_Segments;
    property IsUnc: Boolean read get_IsUnc;
    property Host: string read get_Host;
    property Port: Int32 read get_Port;
    property Query: string read get_Query;
    property Fragment: string read get_Fragment;
    property Scheme: string read get_Scheme;
    property OriginalString: string read get_OriginalString;
    property DnsSafeHost: string read get_DnsSafeHost;
    property IdnHost: string read get_IdnHost;
    property IsAbsoluteUri: Boolean read get_IsAbsoluteUri;
    property UserEscaped: Boolean read get_UserEscaped;
    property UserInfo: string read get_UserInfo;
  end;

  TDNUri = class(TDNGenericImport<DNUriClass, DNUri>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSortDescriptionClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{594F45B1-D8C6-599A-87F8-A03191CA8E9B}']
  { constructors } 

    {class} function init(propertyName: string; direction: DNListSortDirection): DNSortDescription;

  end;

  [DNTypeName('System.ComponentModel.SortDescription')]
  DNSortDescription = interface(DDN.mscorlib.DNValueType)
  ['{B071A4ED-78A6-3FDB-8F78-3330B96E0BB4}']
  { getters & setters } 

    function get_PropertyName: string;
    procedure set_PropertyName(value: string);
    function get_Direction: DNListSortDirection;
    procedure set_Direction(value: DNListSortDirection);
    function get_IsSealed: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PropertyName: string read get_PropertyName write set_PropertyName;
    property Direction: DNListSortDirection read get_Direction write set_Direction;
    property IsSealed: Boolean read get_IsSealed;
  end;

  TDNSortDescription = class(TDNGenericImport<DNSortDescriptionClass, DNSortDescription>) end;

  //-------------namespace: System.Printing----------------
  DNValidationResultClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{348DAD8C-EA09-52BE-B188-39C6394FC1E5}']
  end;

  [DNTypeName('System.Printing.ValidationResult')]
  DNValidationResult = interface(DDN.mscorlib.DNValueType)
  ['{33DA9668-674F-3464-A9AC-D5A47647CD7E}']
  { getters & setters } 

    function get_ValidatedPrintTicket: DNPrintTicket;
    function get_ConflictStatus: DNConflictStatus;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ValidatedPrintTicket: DNPrintTicket read get_ValidatedPrintTicket;
    property ConflictStatus: DNConflictStatus read get_ConflictStatus;
  end;

  TDNValidationResult = class(TDNGenericImport<DNValidationResultClass, DNValidationResult>) end;

  //-------------namespace: System.Windows.Controls----------------
  DNPageRangeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B4613EBD-F932-545B-8674-B12EFC55E1F5}']
  { constructors } 

    {class} function init(page: Int32): DNPageRange; overload;
    {class} function init(pageFrom: Int32; pageTo: Int32): DNPageRange; overload;

  end;

  [DNTypeName('System.Windows.Controls.PageRange')]
  DNPageRange = interface(DDN.mscorlib.DNValueType)
  ['{BD808C91-2D65-3C9F-BEDC-60F1B8CE8318}']
  { getters & setters } 

    function get_PageFrom: Int32;
    procedure set_PageFrom(value: Int32);
    function get_PageTo: Int32;
    procedure set_PageTo(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(pageRange: DNPageRange): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PageFrom: Int32 read get_PageFrom write set_PageFrom;
    property PageTo: Int32 read get_PageTo write set_PageTo;
  end;

  TDNPageRange = class(TDNGenericImport<DNPageRangeClass, DNPageRange>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyPropertyChangedEventArgsClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{1043A968-EBF2-5A0E-A233-C255118AFC7F}']
  { constructors } 

    {class} function init(&property: DNDependencyProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject): DNDependencyPropertyChangedEventArgs;

  end;

  [DNTypeName('System.Windows.DependencyPropertyChangedEventArgs')]
  DNDependencyPropertyChangedEventArgs = interface(DDN.mscorlib.DNValueType)
  ['{7D6F0EB5-506E-35BF-BFFA-CA81D64EABEC}']
  { getters & setters } 

    function get_Property: DNDependencyProperty;
    function get_OldValue: DDN.mscorlib.DNObject;
    function get_NewValue: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(args: DNDependencyPropertyChangedEventArgs): Boolean; overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Property: DNDependencyProperty read get_Property;
    property OldValue: DDN.mscorlib.DNObject read get_OldValue;
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
  end;

  TDNDependencyPropertyChangedEventArgs = class(TDNGenericImport<DNDependencyPropertyChangedEventArgsClass, DNDependencyPropertyChangedEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNDpiScaleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{5F9B153D-C467-5E72-8967-96EB0226D81C}']
  { constructors } 

    {class} function init(dpiScaleX: Double; dpiScaleY: Double): DNDpiScale;

  end;

  [DNTypeName('System.Windows.DpiScale')]
  DNDpiScale = interface(DDN.mscorlib.DNValueType)
  ['{953960E0-9952-37C1-A917-D8F997ECF34B}']
  { getters & setters } 

    function get_DpiScaleX: Double;
    function get_DpiScaleY: Double;
    function get_PixelsPerDip: Double;
    function get_PixelsPerInchX: Double;
    function get_PixelsPerInchY: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DpiScaleX: Double read get_DpiScaleX;
    property DpiScaleY: Double read get_DpiScaleY;
    property PixelsPerDip: Double read get_PixelsPerDip;
    property PixelsPerInchX: Double read get_PixelsPerInchX;
    property PixelsPerInchY: Double read get_PixelsPerInchY;
  end;

  TDNDpiScale = class(TDNGenericImport<DNDpiScaleClass, DNDpiScale>) end;

  //-------------namespace: System.Windows----------------
  DNDurationClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{0FDCBFB2-C8B1-5441-B98D-3EC7AC3BE4A5}']
  { static getter & setter } 

    {class} function get_Automatic: DNDuration;
    {class} function get_Forever: DNDuration;

  { constructors } 

    {class} function init(timeSpan: DDN.mscorlib.DNTimeSpan): DNDuration;

  { static methods } 

    {class} function Compare(t1: DNDuration; t2: DNDuration): Int32;
    {class} function Plus(duration: DNDuration): DNDuration;
    {class} function Equals(t1: DNDuration; t2: DNDuration): Boolean; overload;

  { static propertys } 

    {class} property Automatic: DNDuration read get_Automatic;
    {class} property Forever: DNDuration read get_Forever;
  end;

  [DNTypeName('System.Windows.Duration')]
  DNDuration = interface(DDN.mscorlib.DNValueType)
  ['{97DFFF52-0165-38BC-9DD0-D5586AFF8D09}']
  { getters & setters } 

    function get_HasTimeSpan: Boolean;
    function get_TimeSpan: DDN.mscorlib.DNTimeSpan;

  { methods } 

    function Add(duration: DNDuration): DNDuration;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(duration: DNDuration): Boolean; overload;
    function GetHashCode: Int32;
    function Subtract(duration: DNDuration): DNDuration;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HasTimeSpan: Boolean read get_HasTimeSpan;
    property TimeSpan: DDN.mscorlib.DNTimeSpan read get_TimeSpan;
  end;

  TDNDuration = class(TDNGenericImport<DNDurationClass, DNDuration>) end;

  //-------------namespace: System.Windows----------------
  DNFontStretchClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{0C9F2C49-44A2-5762-8784-612AB238B811}']
  { static methods } 

    {class} function Compare(left: DNFontStretch; right: DNFontStretch): Int32;
    {class} function FromOpenTypeStretch(stretchValue: Int32): DNFontStretch;

  end;

  [DNTypeName('System.Windows.FontStretch')]
  DNFontStretch = interface(DDN.mscorlib.DNValueType)
  ['{119BB629-5180-3A6B-BE89-24C5A27C8A75}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function ToOpenTypeStretch: Int32;
    function Equals(obj: DNFontStretch): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNFontStretch = class(TDNGenericImport<DNFontStretchClass, DNFontStretch>) end;

  //-------------namespace: System.Windows----------------
  DNFontStyleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{0D64E6CC-3978-50FE-A191-FB9A9297CD82}']
  end;

  [DNTypeName('System.Windows.FontStyle')]
  DNFontStyle = interface(DDN.mscorlib.DNValueType)
  ['{6AAAC45A-6DA8-36E1-BFAC-E4C44E27CDCF}']
  { methods } 

    function Equals(obj: DNFontStyle): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNFontStyle = class(TDNGenericImport<DNFontStyleClass, DNFontStyle>) end;

  //-------------namespace: System.Windows----------------
  DNFontWeightClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{9DF76BAC-F3D6-5ED0-9146-355377F7343F}']
  { static methods } 

    {class} function Compare(left: DNFontWeight; right: DNFontWeight): Int32;
    {class} function FromOpenTypeWeight(weightValue: Int32): DNFontWeight;

  end;

  [DNTypeName('System.Windows.FontWeight')]
  DNFontWeight = interface(DDN.mscorlib.DNValueType)
  ['{3534E6D8-9DAB-34C8-AA24-3B3DCE783A33}']
  { methods } 

    function ToOpenTypeWeight: Int32;
    function Equals(obj: DNFontWeight): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNFontWeight = class(TDNGenericImport<DNFontWeightClass, DNFontWeight>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B642AE88-C9A8-57E4-B2E0-A860E225172C}']
  { constructors } 

    {class} function init(x: Double; y: Double): DNStylusPoint; overload;
    {class} function init(x: Double; y: Double; pressureFactor: Single): DNStylusPoint; overload;
    {class} function init(x: Double; y: Double; pressureFactor: Single; stylusPointDescription: DNStylusPointDescription; additionalValues: TArray<Int32>): DNStylusPoint; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MaxXY: Double;
   function __fakeFieldGet_MinXY: Double;

  { static fields } 

    {class} property MaxXY: Double read __fakeFieldGet_MaxXY;
    {class} property MinXY: Double read __fakeFieldGet_MinXY;

  { static methods } 

    {class} function Equals(stylusPoint1: DNStylusPoint; stylusPoint2: DNStylusPoint): Boolean; overload;

  end;

  [DNTypeName('System.Windows.Input.StylusPoint')]
  DNStylusPoint = interface(DDN.mscorlib.DNValueType)
  ['{144C5DF5-5A7A-380E-8F01-885D2A6E691F}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_PressureFactor: Single;
    procedure set_PressureFactor(value: Single);
    function get_Description: DNStylusPointDescription;

  { methods } 

    function HasProperty(stylusPointProperty: DNStylusPointProperty): Boolean;
    function GetPropertyValue(stylusPointProperty: DNStylusPointProperty): Int32;
    procedure SetPropertyValue(stylusPointProperty: DNStylusPointProperty; value: Int32);
    function ToPoint: DNPoint;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNStylusPoint): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property PressureFactor: Single read get_PressureFactor write set_PressureFactor;
    property Description: DNStylusPointDescription read get_Description;
  end;

  TDNStylusPoint = class(TDNGenericImport<DNStylusPointClass, DNStylusPoint>) end;

  //-------------namespace: System.Windows----------------
  DNInt32RectClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{97F71006-A87B-54D0-8BCA-CCC7D9E17DF6}']
  { static getter & setter } 

    {class} function get_Empty: DNInt32Rect;

  { constructors } 

    {class} function init(x: Int32; y: Int32; width: Int32; height: Int32): DNInt32Rect;

  { static methods } 

    {class} function Equals(int32Rect1: DNInt32Rect; int32Rect2: DNInt32Rect): Boolean; overload;
    {class} function Parse(source: string): DNInt32Rect;

  { static propertys } 

    {class} property Empty: DNInt32Rect read get_Empty;
  end;

  [DNTypeName('System.Windows.Int32Rect')]
  DNInt32Rect = interface(DDN.mscorlib.DNValueType)
  ['{5F943127-FAB2-3DCD-BB34-D6430F6957D0}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_IsEmpty: Boolean;
    function get_HasArea: Boolean;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNInt32Rect): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Width: Int32 read get_Width write set_Width;
    property Height: Int32 read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property HasArea: Boolean read get_HasArea;
  end;

  TDNInt32Rect = class(TDNGenericImport<DNInt32RectClass, DNInt32Rect>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNMSGClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A00FC6CD-E54F-5687-9335-8EBE16D118B0}']
  end;

  [DNTypeName('System.Windows.Interop.MSG')]
  DNMSG = interface(DDN.mscorlib.DNValueType)
  ['{B908E879-0C00-3800-9E17-8F5C3D0CF736}']
  { getters & setters } 

    function get_hwnd: IntPtr;
    procedure set_hwnd(value: IntPtr);
    function get_message: Int32;
    procedure set_message(value: Int32);
    function get_wParam: IntPtr;
    procedure set_wParam(value: IntPtr);
    function get_lParam: IntPtr;
    procedure set_lParam(value: IntPtr);
    function get_time: Int32;
    procedure set_time(value: Int32);
    function get_pt_x: Int32;
    procedure set_pt_x(value: Int32);
    function get_pt_y: Int32;
    procedure set_pt_y(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property hwnd: IntPtr read get_hwnd write set_hwnd;
    property message: Int32 read get_message write set_message;
    property wParam: IntPtr read get_wParam write set_wParam;
    property lParam: IntPtr read get_lParam write set_lParam;
    property time: Int32 read get_time write set_time;
    property pt_x: Int32 read get_pt_x write set_pt_x;
    property pt_y: Int32 read get_pt_y write set_pt_y;
  end;

  TDNMSG = class(TDNGenericImport<DNMSGClass, DNMSG>) end;

  //-------------namespace: System.Windows----------------
  DNLocalValueEntryClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{6D491468-4A5A-5D8C-926F-E98B006DF08C}']
  end;

  [DNTypeName('System.Windows.LocalValueEntry')]
  DNLocalValueEntry = interface(DDN.mscorlib.DNValueType)
  ['{637EC814-5100-3B56-80D0-05B3BEA16AD5}']
  { getters & setters } 

    function get_Property: DNDependencyProperty;
    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Property: DNDependencyProperty read get_Property;
    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNLocalValueEntry = class(TDNGenericImport<DNLocalValueEntryClass, DNLocalValueEntry>) end;

  //-------------namespace: System.Windows----------------
  DNLocalValueEnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{81080CE4-3DA2-543C-9F1A-20A61867A608}']
  end;

  [DNTypeName('System.Windows.LocalValueEnumerator')]
  DNLocalValueEnumerator = interface(DDN.mscorlib.DNValueType)
  ['{7560CD58-6EA4-3167-99C6-1DA6D308772A}']
  { getters & setters } 

    function get_Current: DNLocalValueEntry;
    function get_Count: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function MoveNext: Boolean;
    procedure Reset;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNLocalValueEntry read get_Current;
    property Count: Int32 read get_Count;
  end;

  TDNLocalValueEnumerator = class(TDNGenericImport<DNLocalValueEnumeratorClass, DNLocalValueEnumerator>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNKeyTimeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B38D1CA0-BCAA-59BB-A649-50DF6A96261E}']
  { static getter & setter } 

    {class} function get_Uniform: DNKeyTime;
    {class} function get_Paced: DNKeyTime;

  { static methods } 

    {class} function FromPercent(percent: Double): DNKeyTime;
    {class} function FromTimeSpan(timeSpan: DDN.mscorlib.DNTimeSpan): DNKeyTime;
    {class} function Equals(keyTime1: DNKeyTime; keyTime2: DNKeyTime): Boolean; overload;

  { static propertys } 

    {class} property Uniform: DNKeyTime read get_Uniform;
    {class} property Paced: DNKeyTime read get_Paced;
  end;

  [DNTypeName('System.Windows.Media.Animation.KeyTime')]
  DNKeyTime = interface(DDN.mscorlib.DNValueType)
  ['{A1CF8483-81F6-3F00-9EAD-02A5E3AC56F3}']
  { getters & setters } 

    function get_TimeSpan: DDN.mscorlib.DNTimeSpan;
    function get_Percent: Double;
    function get_Type: DNKeyTimeType;

  { methods } 

    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNKeyTime): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property TimeSpan: DDN.mscorlib.DNTimeSpan read get_TimeSpan;
    property Percent: Double read get_Percent;
    property &Type: DNKeyTimeType read get_Type;
  end;

  TDNKeyTime = class(TDNGenericImport<DNKeyTimeClass, DNKeyTime>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRepeatBehaviorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{36BDC889-955B-5019-851C-719F437C83B6}']
  { static getter & setter } 

    {class} function get_Forever: DNRepeatBehavior;

  { constructors } 

    {class} function init(count: Double): DNRepeatBehavior; overload;
    {class} function init(duration: DDN.mscorlib.DNTimeSpan): DNRepeatBehavior; overload;

  { static methods } 

    {class} function Equals(repeatBehavior1: DNRepeatBehavior; repeatBehavior2: DNRepeatBehavior): Boolean; overload;

  { static propertys } 

    {class} property Forever: DNRepeatBehavior read get_Forever;
  end;

  [DNTypeName('System.Windows.Media.Animation.RepeatBehavior')]
  DNRepeatBehavior = interface(DDN.mscorlib.DNValueType)
  ['{6D6775D5-1881-3AFD-96E1-4D7FC321ED5E}']
  { getters & setters } 

    function get_HasCount: Boolean;
    function get_HasDuration: Boolean;
    function get_Count: Double;
    function get_Duration: DDN.mscorlib.DNTimeSpan;

  { methods } 

    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(repeatBehavior: DNRepeatBehavior): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(formatProvider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HasCount: Boolean read get_HasCount;
    property HasDuration: Boolean read get_HasDuration;
    property Count: Double read get_Count;
    property Duration: DDN.mscorlib.DNTimeSpan read get_Duration;
  end;

  TDNRepeatBehavior = class(TDNGenericImport<DNRepeatBehaviorClass, DNRepeatBehavior>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNTimelineCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{626F1EB3-5BDA-504C-8F76-2C962027F8E5}']
  end;

  [DNTypeName('System.Windows.Media.Animation.TimelineCollection+Enumerator')]
  DNTimelineCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{13989025-C08B-34A2-A686-511314EEBBB0}']
  { getters & setters } 

    function get_Current: DNTimeline;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNTimeline read get_Current;
  end;

  TDNTimelineCollection_Enumerator = class(TDNGenericImport<DNTimelineCollection_EnumeratorClass, DNTimelineCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNColorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{877BD298-BDB1-5026-9F91-19B7903E8523}']
  { static methods } 

    {class} function FromAValues(a: Single; values: TArray<Single>; profileUri: DNUri): DNColor;
    {class} function FromValues(values: TArray<Single>; profileUri: DNUri): DNColor;
    {class} function FromScRgb(a: Single; r: Single; g: Single; b: Single): DNColor;
    {class} function FromArgb(a: Byte; r: Byte; g: Byte; b: Byte): DNColor;
    {class} function FromRgb(r: Byte; g: Byte; b: Byte): DNColor;
    {class} function AreClose(color1: DNColor; color2: DNColor): Boolean;
    {class} function Add(color1: DNColor; color2: DNColor): DNColor;
    {class} function Subtract(color1: DNColor; color2: DNColor): DNColor;
    {class} function Multiply(color: DNColor; coefficient: Single): DNColor;
    {class} function Equals(color1: DNColor; color2: DNColor): Boolean; overload;

  end;

  [DNTypeName('System.Windows.Media.Color')]
  DNColor = interface(DDN.mscorlib.DNValueType)
  ['{9A369504-B0E6-3F1C-9910-6E64D760BE87}']
  { getters & setters } 

    function get_ColorContext: DNColorContext;
    function get_A: Byte;
    procedure set_A(value: Byte);
    function get_R: Byte;
    procedure set_R(value: Byte);
    function get_G: Byte;
    procedure set_G(value: Byte);
    function get_B: Byte;
    procedure set_B(value: Byte);
    function get_ScA: Single;
    procedure set_ScA(value: Single);
    function get_ScR: Single;
    procedure set_ScR(value: Single);
    function get_ScG: Single;
    procedure set_ScG(value: Single);
    function get_ScB: Single;
    procedure set_ScB(value: Single);

  { methods } 

    function GetHashCode: Int32;
    procedure Clamp;
    function Equals(color: DNColor): Boolean; overload;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetNativeColorValues: TArray<Single>;
    function ToString: string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ColorContext: DNColorContext read get_ColorContext;
    property A: Byte read get_A write set_A;
    property R: Byte read get_R write set_R;
    property G: Byte read get_G write set_G;
    property B: Byte read get_B write set_B;
    property ScA: Single read get_ScA write set_ScA;
    property ScR: Single read get_ScR write set_ScR;
    property ScG: Single read get_ScG write set_ScG;
    property ScB: Single read get_ScB write set_ScB;
  end;

  TDNColor = class(TDNGenericImport<DNColorClass, DNColor>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDoubleCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{27533E8F-87AF-5701-83D6-674552018EDB}']
  end;

  [DNTypeName('System.Windows.Media.DoubleCollection+Enumerator')]
  DNDoubleCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{50AACEB1-CC11-3DB9-868D-9EA17034F6DB}']
  { getters & setters } 

    function get_Current: Double;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: Double read get_Current;
  end;

  TDNDoubleCollection_Enumerator = class(TDNGenericImport<DNDoubleCollection_EnumeratorClass, DNDoubleCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMatrixClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{C2D284FD-CEC8-58EB-99B6-46402D8B8C84}']
  { static getter & setter } 

    {class} function get_Identity: DNMatrix;

  { constructors } 

    {class} function init(m11: Double; m12: Double; m21: Double; m22: Double; offsetX: Double; offsetY: Double): DNMatrix;

  { static methods } 

    {class} function Multiply(trans1: DNMatrix; trans2: DNMatrix): DNMatrix;
    {class} function Equals(matrix1: DNMatrix; matrix2: DNMatrix): Boolean; overload;
    {class} function Parse(source: string): DNMatrix;

  { static propertys } 

    {class} property Identity: DNMatrix read get_Identity;
  end;

  [DNTypeName('System.Windows.Media.Matrix')]
  DNMatrix = interface(DDN.mscorlib.DNValueType)
  ['{F2A79FC1-F4B4-30C3-AEBE-CC6B1DF2B467}']
  { getters & setters } 

    function get_IsIdentity: Boolean;
    function get_Determinant: Double;
    function get_HasInverse: Boolean;
    function get_M11: Double;
    procedure set_M11(value: Double);
    function get_M12: Double;
    procedure set_M12(value: Double);
    function get_M21: Double;
    procedure set_M21(value: Double);
    function get_M22: Double;
    procedure set_M22(value: Double);
    function get_OffsetX: Double;
    procedure set_OffsetX(value: Double);
    function get_OffsetY: Double;
    procedure set_OffsetY(value: Double);

  { methods } 

    procedure SetIdentity;
    procedure Append(matrix: DNMatrix);
    procedure Prepend(matrix: DNMatrix);
    procedure Rotate(angle: Double);
    procedure RotatePrepend(angle: Double);
    procedure RotateAt(angle: Double; centerX: Double; centerY: Double);
    procedure RotateAtPrepend(angle: Double; centerX: Double; centerY: Double);
    procedure Scale(scaleX: Double; scaleY: Double);
    procedure ScalePrepend(scaleX: Double; scaleY: Double);
    procedure ScaleAt(scaleX: Double; scaleY: Double; centerX: Double; centerY: Double);
    procedure ScaleAtPrepend(scaleX: Double; scaleY: Double; centerX: Double; centerY: Double);
    procedure Skew(skewX: Double; skewY: Double);
    procedure SkewPrepend(skewX: Double; skewY: Double);
    procedure Translate(offsetX: Double; offsetY: Double);
    procedure TranslatePrepend(offsetX: Double; offsetY: Double);
    function Transform(point: DNPoint): DNPoint; overload;
    procedure Transform(points: TArray<DNPoint>); overload;
    function Transform(vector: DNVector): DNVector; overload;
    procedure Transform(vectors: TArray<DNVector>); overload;
    procedure Invert;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNMatrix): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsIdentity: Boolean read get_IsIdentity;
    property Determinant: Double read get_Determinant;
    property HasInverse: Boolean read get_HasInverse;
    property M11: Double read get_M11 write set_M11;
    property M12: Double read get_M12 write set_M12;
    property M21: Double read get_M21 write set_M21;
    property M22: Double read get_M22 write set_M22;
    property OffsetX: Double read get_OffsetX write set_OffsetX;
    property OffsetY: Double read get_OffsetY write set_OffsetY;
  end;

  TDNMatrix = class(TDNGenericImport<DNMatrixClass, DNMatrix>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMatrix3DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{4BC21B1A-4609-5D8F-87C3-711FCA4F2781}']
  { static getter & setter } 

    {class} function get_Identity: DNMatrix3D;

  { constructors } 

    {class} function init(m11: Double; m12: Double; m13: Double; m14: Double; m21: Double; m22: Double; m23: Double; m24: Double; m31: Double; m32: Double; m33: Double; m34: Double; offsetX: Double; offsetY: Double; offsetZ: Double; m44: Double): DNMatrix3D;

  { static methods } 

    {class} function Multiply(matrix1: DNMatrix3D; matrix2: DNMatrix3D): DNMatrix3D;
    {class} function Equals(matrix1: DNMatrix3D; matrix2: DNMatrix3D): Boolean; overload;
    {class} function Parse(source: string): DNMatrix3D;

  { static propertys } 

    {class} property Identity: DNMatrix3D read get_Identity;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Matrix3D')]
  DNMatrix3D = interface(DDN.mscorlib.DNValueType)
  ['{F36B5BAE-0085-3EC6-83AA-DE341B8217E8}']
  { getters & setters } 

    function get_IsIdentity: Boolean;
    function get_IsAffine: Boolean;
    function get_Determinant: Double;
    function get_HasInverse: Boolean;
    function get_M11: Double;
    procedure set_M11(value: Double);
    function get_M12: Double;
    procedure set_M12(value: Double);
    function get_M13: Double;
    procedure set_M13(value: Double);
    function get_M14: Double;
    procedure set_M14(value: Double);
    function get_M21: Double;
    procedure set_M21(value: Double);
    function get_M22: Double;
    procedure set_M22(value: Double);
    function get_M23: Double;
    procedure set_M23(value: Double);
    function get_M24: Double;
    procedure set_M24(value: Double);
    function get_M31: Double;
    procedure set_M31(value: Double);
    function get_M32: Double;
    procedure set_M32(value: Double);
    function get_M33: Double;
    procedure set_M33(value: Double);
    function get_M34: Double;
    procedure set_M34(value: Double);
    function get_OffsetX: Double;
    procedure set_OffsetX(value: Double);
    function get_OffsetY: Double;
    procedure set_OffsetY(value: Double);
    function get_OffsetZ: Double;
    procedure set_OffsetZ(value: Double);
    function get_M44: Double;
    procedure set_M44(value: Double);

  { methods } 

    procedure SetIdentity;
    procedure Prepend(matrix: DNMatrix3D);
    procedure Append(matrix: DNMatrix3D);
    procedure Rotate(quaternion: DNQuaternion);
    procedure RotatePrepend(quaternion: DNQuaternion);
    procedure RotateAt(quaternion: DNQuaternion; center: DNPoint3D);
    procedure RotateAtPrepend(quaternion: DNQuaternion; center: DNPoint3D);
    procedure Scale(scale: DNVector3D);
    procedure ScalePrepend(scale: DNVector3D);
    procedure ScaleAt(scale: DNVector3D; center: DNPoint3D);
    procedure ScaleAtPrepend(scale: DNVector3D; center: DNPoint3D);
    procedure Translate(offset: DNVector3D);
    procedure TranslatePrepend(offset: DNVector3D);
    function Transform(point: DNPoint3D): DNPoint3D; overload;
    procedure Transform(points: TArray<DNPoint3D>); overload;
    function Transform(point: DNPoint4D): DNPoint4D; overload;
    procedure Transform(points: TArray<DNPoint4D>); overload;
    function Transform(vector: DNVector3D): DNVector3D; overload;
    procedure Transform(vectors: TArray<DNVector3D>); overload;
    procedure Invert;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNMatrix3D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsIdentity: Boolean read get_IsIdentity;
    property IsAffine: Boolean read get_IsAffine;
    property Determinant: Double read get_Determinant;
    property HasInverse: Boolean read get_HasInverse;
    property M11: Double read get_M11 write set_M11;
    property M12: Double read get_M12 write set_M12;
    property M13: Double read get_M13 write set_M13;
    property M14: Double read get_M14 write set_M14;
    property M21: Double read get_M21 write set_M21;
    property M22: Double read get_M22 write set_M22;
    property M23: Double read get_M23 write set_M23;
    property M24: Double read get_M24 write set_M24;
    property M31: Double read get_M31 write set_M31;
    property M32: Double read get_M32 write set_M32;
    property M33: Double read get_M33 write set_M33;
    property M34: Double read get_M34 write set_M34;
    property OffsetX: Double read get_OffsetX write set_OffsetX;
    property OffsetY: Double read get_OffsetY write set_OffsetY;
    property OffsetZ: Double read get_OffsetZ write set_OffsetZ;
    property M44: Double read get_M44 write set_M44;
  end;

  TDNMatrix3D = class(TDNGenericImport<DNMatrix3DClass, DNMatrix3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPoint3DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{AE78F3CC-BDE1-524F-888D-2751E7132818}']
  { constructors } 

    {class} function init(x: Double; y: Double; z: Double): DNPoint3D;

  { static methods } 

    {class} function Add(point: DNPoint3D; vector: DNVector3D): DNPoint3D;
    {class} function Subtract(point: DNPoint3D; vector: DNVector3D): DNPoint3D; overload;
    {class} function Subtract(point1: DNPoint3D; point2: DNPoint3D): DNVector3D; overload;
    {class} function Multiply(point: DNPoint3D; matrix: DNMatrix3D): DNPoint3D;
    {class} function Equals(point1: DNPoint3D; point2: DNPoint3D): Boolean; overload;
    {class} function Parse(source: string): DNPoint3D;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Point3D')]
  DNPoint3D = interface(DDN.mscorlib.DNValueType)
  ['{F3EB3BA4-BAD2-368F-B652-2230BAF332B8}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);

  { methods } 

    procedure Offset(offsetX: Double; offsetY: Double; offsetZ: Double);
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNPoint3D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
  end;

  TDNPoint3D = class(TDNGenericImport<DNPoint3DClass, DNPoint3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPoint4DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{5B42E7AA-C583-5115-89F2-F9D56F80166E}']
  { constructors } 

    {class} function init(x: Double; y: Double; z: Double; w: Double): DNPoint4D;

  { static methods } 

    {class} function Add(point1: DNPoint4D; point2: DNPoint4D): DNPoint4D;
    {class} function Subtract(point1: DNPoint4D; point2: DNPoint4D): DNPoint4D;
    {class} function Multiply(point: DNPoint4D; matrix: DNMatrix3D): DNPoint4D;
    {class} function Equals(point1: DNPoint4D; point2: DNPoint4D): Boolean; overload;
    {class} function Parse(source: string): DNPoint4D;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Point4D')]
  DNPoint4D = interface(DDN.mscorlib.DNValueType)
  ['{9101299F-0618-3990-BC57-7F6B78982716}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);
    function get_W: Double;
    procedure set_W(value: Double);

  { methods } 

    procedure Offset(deltaX: Double; deltaY: Double; deltaZ: Double; deltaW: Double);
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNPoint4D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
    property W: Double read get_W write set_W;
  end;

  TDNPoint4D = class(TDNGenericImport<DNPoint4DClass, DNPoint4D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNQuaternionClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{89512F08-2E18-52CC-B8F5-9E3244940C03}']
  { static getter & setter } 

    {class} function get_Identity: DNQuaternion;

  { constructors } 

    {class} function init(x: Double; y: Double; z: Double; w: Double): DNQuaternion; overload;
    {class} function init(axisOfRotation: DNVector3D; angleInDegrees: Double): DNQuaternion; overload;

  { static methods } 

    {class} function Add(left: DNQuaternion; right: DNQuaternion): DNQuaternion;
    {class} function Subtract(left: DNQuaternion; right: DNQuaternion): DNQuaternion;
    {class} function Multiply(left: DNQuaternion; right: DNQuaternion): DNQuaternion;
    {class} function Slerp(from: DNQuaternion; &to: DNQuaternion; t: Double): DNQuaternion; overload;
    {class} function Slerp(from: DNQuaternion; &to: DNQuaternion; t: Double; useShortestPath: Boolean): DNQuaternion; overload;
    {class} function Equals(quaternion1: DNQuaternion; quaternion2: DNQuaternion): Boolean; overload;
    {class} function Parse(source: string): DNQuaternion;

  { static propertys } 

    {class} property Identity: DNQuaternion read get_Identity;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Quaternion')]
  DNQuaternion = interface(DDN.mscorlib.DNValueType)
  ['{50227CBA-D709-32CE-89D5-286F9449AA0B}']
  { getters & setters } 

    function get_Axis: DNVector3D;
    function get_Angle: Double;
    function get_IsNormalized: Boolean;
    function get_IsIdentity: Boolean;
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);
    function get_W: Double;
    procedure set_W(value: Double);

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    procedure Conjugate;
    procedure Invert;
    procedure Normalize;
    function Equals(value: DNQuaternion): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Axis: DNVector3D read get_Axis;
    property Angle: Double read get_Angle;
    property IsNormalized: Boolean read get_IsNormalized;
    property IsIdentity: Boolean read get_IsIdentity;
    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
    property W: Double read get_W write set_W;
  end;

  TDNQuaternion = class(TDNGenericImport<DNQuaternionClass, DNQuaternion>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNRect3DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{E3532CA5-20FD-5F76-AD96-066EA560FAA6}']
  { static getter & setter } 

    {class} function get_Empty: DNRect3D;

  { constructors } 

    {class} function init(location: DNPoint3D; size: DNSize3D): DNRect3D; overload;
    {class} function init(x: Double; y: Double; z: Double; sizeX: Double; sizeY: Double; sizeZ: Double): DNRect3D; overload;

  { static methods } 

    {class} function Intersect(rect1: DNRect3D; rect2: DNRect3D): DNRect3D; overload;
    {class} function Union(rect1: DNRect3D; rect2: DNRect3D): DNRect3D; overload;
    {class} function Union(rect: DNRect3D; point: DNPoint3D): DNRect3D; overload;
    {class} function Offset(rect: DNRect3D; offsetVector: DNVector3D): DNRect3D; overload;
    {class} function Offset(rect: DNRect3D; offsetX: Double; offsetY: Double; offsetZ: Double): DNRect3D; overload;
    {class} function Equals(rect1: DNRect3D; rect2: DNRect3D): Boolean; overload;
    {class} function Parse(source: string): DNRect3D;

  { static propertys } 

    {class} property Empty: DNRect3D read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Rect3D')]
  DNRect3D = interface(DDN.mscorlib.DNValueType)
  ['{0088A4CB-831A-330F-81B7-1F629158A031}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Location: DNPoint3D;
    procedure set_Location(value: DNPoint3D);
    function get_Size: DNSize3D;
    procedure set_Size(value: DNSize3D);
    function get_SizeX: Double;
    procedure set_SizeX(value: Double);
    function get_SizeY: Double;
    procedure set_SizeY(value: Double);
    function get_SizeZ: Double;
    procedure set_SizeZ(value: Double);
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);

  { methods } 

    function &Contains(point: DNPoint3D): Boolean; overload;
    function &Contains(x: Double; y: Double; z: Double): Boolean; overload;
    function &Contains(rect: DNRect3D): Boolean; overload;
    function IntersectsWith(rect: DNRect3D): Boolean;
    procedure Intersect(rect: DNRect3D); overload;
    procedure Union(rect: DNRect3D); overload;
    procedure Union(point: DNPoint3D); overload;
    procedure Offset(offsetVector: DNVector3D); overload;
    procedure Offset(offsetX: Double; offsetY: Double; offsetZ: Double); overload;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNRect3D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Location: DNPoint3D read get_Location write set_Location;
    property Size: DNSize3D read get_Size write set_Size;
    property SizeX: Double read get_SizeX write set_SizeX;
    property SizeY: Double read get_SizeY write set_SizeY;
    property SizeZ: Double read get_SizeZ write set_SizeZ;
    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
  end;

  TDNRect3D = class(TDNGenericImport<DNRect3DClass, DNRect3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNSize3DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{262991D8-325B-54DB-9FDC-04843C879E72}']
  { static getter & setter } 

    {class} function get_Empty: DNSize3D;

  { constructors } 

    {class} function init(x: Double; y: Double; z: Double): DNSize3D;

  { static methods } 

    {class} function Equals(size1: DNSize3D; size2: DNSize3D): Boolean; overload;
    {class} function Parse(source: string): DNSize3D;

  { static propertys } 

    {class} property Empty: DNSize3D read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Size3D')]
  DNSize3D = interface(DDN.mscorlib.DNValueType)
  ['{AE40BFEC-6E4F-3557-821E-E5910A7D5425}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNSize3D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
  end;

  TDNSize3D = class(TDNGenericImport<DNSize3DClass, DNSize3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNVector3DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BA5E87BE-5A6E-5207-B9C9-BF5DB0580B06}']
  { constructors } 

    {class} function init(x: Double; y: Double; z: Double): DNVector3D;

  { static methods } 

    {class} function AngleBetween(vector1: DNVector3D; vector2: DNVector3D): Double;
    {class} function Add(vector1: DNVector3D; vector2: DNVector3D): DNVector3D; overload;
    {class} function Subtract(vector1: DNVector3D; vector2: DNVector3D): DNVector3D; overload;
    {class} function Add(vector: DNVector3D; point: DNPoint3D): DNPoint3D; overload;
    {class} function Subtract(vector: DNVector3D; point: DNPoint3D): DNPoint3D; overload;
    {class} function Multiply(vector: DNVector3D; scalar: Double): DNVector3D; overload;
    {class} function Multiply(scalar: Double; vector: DNVector3D): DNVector3D; overload;
    {class} function Divide(vector: DNVector3D; scalar: Double): DNVector3D;
    {class} function Multiply(vector: DNVector3D; matrix: DNMatrix3D): DNVector3D; overload;
    {class} function DotProduct(vector1: DNVector3D; vector2: DNVector3D): Double;
    {class} function CrossProduct(vector1: DNVector3D; vector2: DNVector3D): DNVector3D;
    {class} function Equals(vector1: DNVector3D; vector2: DNVector3D): Boolean; overload;
    {class} function Parse(source: string): DNVector3D;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Vector3D')]
  DNVector3D = interface(DDN.mscorlib.DNValueType)
  ['{8C1EBFA7-C644-3135-83D2-2781F2977005}']
  { getters & setters } 

    function get_Length: Double;
    function get_LengthSquared: Double;
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);

  { methods } 

    procedure Normalize;
    procedure Negate;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNVector3D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Length: Double read get_Length;
    property LengthSquared: Double read get_LengthSquared;
    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
  end;

  TDNVector3D = class(TDNGenericImport<DNVector3DClass, DNVector3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNVisual3DCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{EC5B795C-43C3-54BF-ABA7-55BA015E29AC}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.Visual3DCollection+Enumerator')]
  DNVisual3DCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{A09D1B0F-77A2-31BD-80AE-904871D108FD}']
  { getters & setters } 

    function get_Current: DNVisual3D;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNVisual3D read get_Current;
  end;

  TDNVisual3DCollection_Enumerator = class(TDNGenericImport<DNVisual3DCollection_EnumeratorClass, DNVisual3DCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathFigureCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B3AD6C3B-CDA1-5DBE-87C0-9524B24FE2A4}']
  end;

  [DNTypeName('System.Windows.Media.PathFigureCollection+Enumerator')]
  DNPathFigureCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{2719A155-ADD7-3C98-91AB-2DDD2BA9F79D}']
  { getters & setters } 

    function get_Current: DNPathFigure;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNPathFigure read get_Current;
  end;

  TDNPathFigureCollection_Enumerator = class(TDNGenericImport<DNPathFigureCollection_EnumeratorClass, DNPathFigureCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPixelFormatClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{2E46C716-ECAF-5C71-985F-A2F1A4EEA0FE}']
  { static methods } 

    {class} function Equals(left: DNPixelFormat; right: DNPixelFormat): Boolean; overload;

  end;

  [DNTypeName('System.Windows.Media.PixelFormat')]
  DNPixelFormat = interface(DDN.mscorlib.DNValueType)
  ['{19677C85-613C-3B79-AFB1-77B8931A4328}']
  { getters & setters } 

    function get_BitsPerPixel: Int32;
    function get_Masks: DDN.mscorlib.DNIList<DNPixelFormatChannelMask>;

  { methods } 

    function Equals(pixelFormat: DNPixelFormat): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BitsPerPixel: Int32 read get_BitsPerPixel;
    property Masks: DDN.mscorlib.DNIList<DNPixelFormatChannelMask> read get_Masks;
  end;

  TDNPixelFormat = class(TDNGenericImport<DNPixelFormatClass, DNPixelFormat>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPixelFormatChannelMaskClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B1C6ED14-35F8-597E-A207-CBC56355DD94}']
  { static methods } 

    {class} function Equals(left: DNPixelFormatChannelMask; right: DNPixelFormatChannelMask): Boolean; overload;

  end;

  [DNTypeName('System.Windows.Media.PixelFormatChannelMask')]
  DNPixelFormatChannelMask = interface(DDN.mscorlib.DNValueType)
  ['{BACA919F-EE7B-3F1F-B3F6-45BEBE9518B1}']
  { getters & setters } 

    function get_Mask: DDN.mscorlib.DNIList<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Mask: DDN.mscorlib.DNIList<Byte> read get_Mask;
  end;

  TDNPixelFormatChannelMask = class(TDNGenericImport<DNPixelFormatChannelMaskClass, DNPixelFormatChannelMask>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPointCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{EF139B18-B06D-5D52-B975-B42C3666E587}']
  end;

  [DNTypeName('System.Windows.Media.PointCollection+Enumerator')]
  DNPointCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{C45FB0F5-D651-3E15-9473-86AC851CB3D4}']
  { getters & setters } 

    function get_Current: DNPoint;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNPoint read get_Current;
  end;

  TDNPointCollection_Enumerator = class(TDNGenericImport<DNPointCollection_EnumeratorClass, DNPointCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTextEffectCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{2BB13AB3-4E2E-51B0-9906-070AC2DF5ABF}']
  end;

  [DNTypeName('System.Windows.Media.TextEffectCollection+Enumerator')]
  DNTextEffectCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{7EE941BB-C6AD-3A09-8212-C706CD2F9C53}']
  { getters & setters } 

    function get_Current: DNTextEffect;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNTextEffect read get_Current;
  end;

  TDNTextEffectCollection_Enumerator = class(TDNGenericImport<DNTextEffectCollection_EnumeratorClass, DNTextEffectCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNCharacterHitClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{1AF0892A-47FD-52D2-81BD-8149A994DA30}']
  { constructors } 

    {class} function init(firstCharacterIndex: Int32; trailingLength: Int32): DNCharacterHit;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.CharacterHit')]
  DNCharacterHit = interface(DDN.mscorlib.DNValueType)
  ['{A2B910A9-9E81-3598-A301-A5F75994AC36}']
  { getters & setters } 

    function get_FirstCharacterIndex: Int32;
    function get_TrailingLength: Int32;

  { methods } 

    function Equals(obj: DNCharacterHit): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FirstCharacterIndex: Int32 read get_FirstCharacterIndex;
    property TrailingLength: Int32 read get_TrailingLength;
  end;

  TDNCharacterHit = class(TDNGenericImport<DNCharacterHitClass, DNCharacterHit>) end;

  //-------------namespace: System.Windows----------------
  DNPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BF3D9A6A-3303-5D36-9170-E071F4B612E7}']
  { constructors } 

    {class} function init(x: Double; y: Double): DNPoint;

  { static methods } 

    {class} function Equals(point1: DNPoint; point2: DNPoint): Boolean; overload;
    {class} function Parse(source: string): DNPoint;
    {class} function Add(point: DNPoint; vector: DNVector): DNPoint;
    {class} function Subtract(point: DNPoint; vector: DNVector): DNPoint; overload;
    {class} function Subtract(point1: DNPoint; point2: DNPoint): DNVector; overload;
    {class} function Multiply(point: DNPoint; matrix: DNMatrix): DNPoint;

  end;

  [DNTypeName('System.Windows.Point')]
  DNPoint = interface(DDN.mscorlib.DNValueType)
  ['{8C9042D3-3635-3580-934F-8A49A1CD8E97}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNPoint): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure Offset(offsetX: Double; offsetY: Double);
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: System.Windows----------------
  DNRectClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{419A9400-87EB-53CC-B620-A2368A596521}']
  { static getter & setter } 

    {class} function get_Empty: DNRect;

  { constructors } 

    {class} function init(location: DNPoint; size: DNSize): DNRect; overload;
    {class} function init(x: Double; y: Double; width: Double; height: Double): DNRect; overload;
    {class} function init(point1: DNPoint; point2: DNPoint): DNRect; overload;
    {class} function init(point: DNPoint; vector: DNVector): DNRect; overload;
    {class} function init(size: DNSize): DNRect; overload;

  { static methods } 

    {class} function Equals(rect1: DNRect; rect2: DNRect): Boolean; overload;
    {class} function Intersect(rect1: DNRect; rect2: DNRect): DNRect; overload;
    {class} function Union(rect1: DNRect; rect2: DNRect): DNRect; overload;
    {class} function Union(rect: DNRect; point: DNPoint): DNRect; overload;
    {class} function Offset(rect: DNRect; offsetVector: DNVector): DNRect; overload;
    {class} function Offset(rect: DNRect; offsetX: Double; offsetY: Double): DNRect; overload;
    {class} function Inflate(rect: DNRect; size: DNSize): DNRect; overload;
    {class} function Inflate(rect: DNRect; width: Double; height: Double): DNRect; overload;
    {class} function Transform(rect: DNRect; matrix: DNMatrix): DNRect; overload;
    {class} function Parse(source: string): DNRect;

  { static propertys } 

    {class} property Empty: DNRect read get_Empty;
  end;

  [DNTypeName('System.Windows.Rect')]
  DNRect = interface(DDN.mscorlib.DNValueType)
  ['{8BD3E975-4EAE-354C-B79B-8F2BA096461F}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Location: DNPoint;
    procedure set_Location(value: DNPoint);
    function get_Size: DNSize;
    procedure set_Size(value: DNSize);
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Left: Double;
    function get_Top: Double;
    function get_Right: Double;
    function get_Bottom: Double;
    function get_TopLeft: DNPoint;
    function get_TopRight: DNPoint;
    function get_BottomLeft: DNPoint;
    function get_BottomRight: DNPoint;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNRect): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function &Contains(point: DNPoint): Boolean; overload;
    function &Contains(x: Double; y: Double): Boolean; overload;
    function &Contains(rect: DNRect): Boolean; overload;
    function IntersectsWith(rect: DNRect): Boolean;
    procedure Intersect(rect: DNRect); overload;
    procedure Union(rect: DNRect); overload;
    procedure Union(point: DNPoint); overload;
    procedure Offset(offsetVector: DNVector); overload;
    procedure Offset(offsetX: Double; offsetY: Double); overload;
    procedure Inflate(size: DNSize); overload;
    procedure Inflate(width: Double; height: Double); overload;
    procedure Transform(matrix: DNMatrix); overload;
    procedure Scale(scaleX: Double; scaleY: Double);
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Location: DNPoint read get_Location write set_Location;
    property Size: DNSize read get_Size write set_Size;
    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Left: Double read get_Left;
    property Top: Double read get_Top;
    property Right: Double read get_Right;
    property Bottom: Double read get_Bottom;
    property TopLeft: DNPoint read get_TopLeft;
    property TopRight: DNPoint read get_TopRight;
    property BottomLeft: DNPoint read get_BottomLeft;
    property BottomRight: DNPoint read get_BottomRight;
  end;

  TDNRect = class(TDNGenericImport<DNRectClass, DNRect>) end;

  //-------------namespace: System.Windows----------------
  DNSizeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{8F140A85-9E83-524D-938A-26F90880709C}']
  { static getter & setter } 

    {class} function get_Empty: DNSize;

  { constructors } 

    {class} function init(width: Double; height: Double): DNSize;

  { static methods } 

    {class} function Equals(size1: DNSize; size2: DNSize): Boolean; overload;
    {class} function Parse(source: string): DNSize;

  { static propertys } 

    {class} property Empty: DNSize read get_Empty;
  end;

  [DNTypeName('System.Windows.Size')]
  DNSize = interface(DDN.mscorlib.DNValueType)
  ['{B9173617-7205-33E7-9783-1FDE49D29AE4}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNSize): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
  end;

  TDNSize = class(TDNGenericImport<DNSizeClass, DNSize>) end;

  //-------------namespace: System.Windows----------------
  DNTextDecorationCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{6227290B-0002-5FEE-96A0-4D814DB6CD31}']
  end;

  [DNTypeName('System.Windows.TextDecorationCollection+Enumerator')]
  DNTextDecorationCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{D3638BBD-574D-31A1-A8F8-31F0838329BD}']
  { getters & setters } 

    function get_Current: DNTextDecoration;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNTextDecoration read get_Current;
  end;

  TDNTextDecorationCollection_Enumerator = class(TDNGenericImport<DNTextDecorationCollection_EnumeratorClass, DNTextDecorationCollection_Enumerator>) end;

  //-------------namespace: System.Windows----------------
  DNThicknessClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{78C36FAC-83DF-545E-AA97-B834F3F2D17B}']
  { constructors } 

    {class} function init(uniformLength: Double): DNThickness; overload;
    {class} function init(left: Double; top: Double; right: Double; bottom: Double): DNThickness; overload;

  end;

  [DNTypeName('System.Windows.Thickness')]
  DNThickness = interface(DDN.mscorlib.DNValueType)
  ['{9B339F5E-8D35-31D3-962A-EAF94E952F35}']
  { getters & setters } 

    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Right: Double;
    procedure set_Right(value: Double);
    function get_Bottom: Double;
    procedure set_Bottom(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(thickness: DNThickness): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Left: Double read get_Left write set_Left;
    property Top: Double read get_Top write set_Top;
    property Right: Double read get_Right write set_Right;
    property Bottom: Double read get_Bottom write set_Bottom;
  end;

  TDNThickness = class(TDNGenericImport<DNThicknessClass, DNThickness>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherPriorityAwaitableClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{68932EF2-4918-5B84-A847-E51EFDA132A4}']
  end;

  [DNTypeName('System.Windows.Threading.DispatcherPriorityAwaitable')]
  DNDispatcherPriorityAwaitable = interface(DDN.mscorlib.DNValueType)
  ['{5ADAA5A0-A182-3F7F-AC73-0D120170F338}']
  { methods } 

    function GetAwaiter: DNDispatcherPriorityAwaiter;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNDispatcherPriorityAwaitable = class(TDNGenericImport<DNDispatcherPriorityAwaitableClass, DNDispatcherPriorityAwaitable>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherPriorityAwaiterClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{46C5A669-629F-55FD-8BE5-14F424826A40}']
  end;

  [DNTypeName('System.Windows.Threading.DispatcherPriorityAwaiter')]
  DNDispatcherPriorityAwaiter = interface(DDN.mscorlib.DNValueType)
  ['{BCA34C06-4AF6-3CF5-8D85-F30652B81880}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure GetResult;
    procedure OnCompleted(continuation: DDN.mscorlib.DNAction);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNDispatcherPriorityAwaiter = class(TDNGenericImport<DNDispatcherPriorityAwaiterClass, DNDispatcherPriorityAwaiter>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherProcessingDisabledClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BE141EE5-CD7F-525F-BED6-F45D886F0D5B}']
  end;

  [DNTypeName('System.Windows.Threading.DispatcherProcessingDisabled')]
  DNDispatcherProcessingDisabled = interface(DDN.mscorlib.DNValueType)
  ['{86728AEF-3F4A-3D48-BAA3-42814888B8B1}']
  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNDispatcherProcessingDisabled = class(TDNGenericImport<DNDispatcherProcessingDisabledClass, DNDispatcherProcessingDisabled>) end;

  //-------------namespace: System.Windows----------------
  DNVectorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{84691167-212B-5C2D-8FDA-6D8FEE090D75}']
  { constructors } 

    {class} function init(x: Double; y: Double): DNVector;

  { static methods } 

    {class} function Equals(vector1: DNVector; vector2: DNVector): Boolean; overload;
    {class} function Parse(source: string): DNVector;
    {class} function CrossProduct(vector1: DNVector; vector2: DNVector): Double;
    {class} function AngleBetween(vector1: DNVector; vector2: DNVector): Double;
    {class} function Add(vector1: DNVector; vector2: DNVector): DNVector; overload;
    {class} function Subtract(vector1: DNVector; vector2: DNVector): DNVector;
    {class} function Add(vector: DNVector; point: DNPoint): DNPoint; overload;
    {class} function Multiply(vector: DNVector; scalar: Double): DNVector; overload;
    {class} function Multiply(scalar: Double; vector: DNVector): DNVector; overload;
    {class} function Divide(vector: DNVector; scalar: Double): DNVector;
    {class} function Multiply(vector: DNVector; matrix: DNMatrix): DNVector; overload;
    {class} function Multiply(vector1: DNVector; vector2: DNVector): Double; overload;
    {class} function Determinant(vector1: DNVector; vector2: DNVector): Double;

  end;

  [DNTypeName('System.Windows.Vector')]
  DNVector = interface(DDN.mscorlib.DNValueType)
  ['{F17EA9EC-1E4B-3A7F-A2D7-DA5E4DAD6AFA}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Length: Double;
    function get_LengthSquared: Double;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNVector): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure Normalize;
    procedure Negate;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Length: Double read get_Length;
    property LengthSquared: Double read get_LengthSquared;
  end;

  TDNVector = class(TDNGenericImport<DNVectorClass, DNVector>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationEventClass = interface(DNObjectClass)
  ['{4EA86E0E-AF70-5FE1-A8BA-76F76F8981E6}']
  { static methods } 

    {class} function LookupById(id: Int32): DNAutomationEvent;

  end;

  [DNTypeName('System.Windows.Automation.AutomationEvent')]
  DNAutomationEvent = interface(DNObject)
  ['{B7DF3005-72B1-3CAF-9EE6-D582E0A1FABE}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id;
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationEvent = class(TDNGenericImport<DNAutomationEventClass, DNAutomationEvent>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationPropertyClass = interface(DNObjectClass)
  ['{66B35539-8814-5C29-A3E3-D343DD75AC84}']
  { static methods } 

    {class} function LookupById(id: Int32): DNAutomationProperty;

  end;

  [DNTypeName('System.Windows.Automation.AutomationProperty')]
  DNAutomationProperty = interface(DNObject)
  ['{76940F1C-2071-3DC4-8046-BEE158CB73DA}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id;
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationProperty = class(TDNGenericImport<DNAutomationPropertyClass, DNAutomationProperty>) end;

  //-------------namespace: System.Windows.Controls----------------
  DNUIElementCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1EBA41AA-22D3-5E71-9994-2B0CD79C2538}']
  end;

  [DNTypeName('System.Windows.Controls.UIElementCollection')]
  DNUIElementCollection = interface(DDN.mscorlib.DNObject)
  ['{8473F80B-AF03-3CD6-B9DE-5923D513E5D8}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Item(index: Int32): DNUIElement;
    procedure set_Item(index: Int32; value: DNUIElement);

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNUIElement>; index: Int32); overload;
    function Add(element: DNUIElement): Int32;
    function IndexOf(element: DNUIElement): Int32;
    procedure Remove(element: DNUIElement);
    function &Contains(element: DNUIElement): Boolean;
    procedure Clear;
    procedure Insert(index: Int32; element: DNUIElement);
    procedure RemoveAt(index: Int32);
    procedure RemoveRange(index: Int32; count: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Item[index: Int32]: DNUIElement read get_Item write set_Item; default;
  end;

  TDNUIElementCollection = class(TDNGenericImport<DNUIElementCollectionClass, DNUIElementCollection>) end;

  //-------------namespace: System.Windows.Data----------------
  DNDataSourceProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6497BCAF-A290-5E8C-B139-70BA436C0A7E}']
  end;

  [DNTypeName('System.Windows.Data.DataSourceProvider')]
  DNDataSourceProvider = interface(DDN.mscorlib.DNObject)
  ['{08AA1407-3558-3E56-9BF4-BE3B13545776}']
  { getters & setters } 

    function get_IsInitialLoadEnabled: Boolean;
    procedure set_IsInitialLoadEnabled(value: Boolean);
    function get_Data: DDN.mscorlib.DNObject;
    function get_Error: DDN.mscorlib.DNException;

  { events } 

    procedure add_DataChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure InitialLoad;
    procedure Refresh;
    function DeferRefresh: DDN.mscorlib.DNIDisposable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInitialLoadEnabled: Boolean read get_IsInitialLoadEnabled write set_IsInitialLoadEnabled;
    property Data: DDN.mscorlib.DNObject read get_Data;
    property Error: DDN.mscorlib.DNException read get_Error;
  end;

  TDNDataSourceProvider = class(TDNGenericImport<DNDataSourceProviderClass, DNDataSourceProvider>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyObjectTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2ACA1967-1326-56C5-9D92-407BCEBFA664}']
  { static methods } 

    {class} function FromSystemType(systemType: DDN.mscorlib.DNType): DNDependencyObjectType;

  end;

  [DNTypeName('System.Windows.DependencyObjectType')]
  DNDependencyObjectType = interface(DDN.mscorlib.DNObject)
  ['{1921CB8E-808D-3ACA-BCBD-129E70001695}']
  { getters & setters } 

    function get_Id: Int32;
    function get_SystemType: DDN.mscorlib.DNType;
    function get_BaseType: DNDependencyObjectType;
    function get_Name: string;

  { methods } 

    function IsInstanceOfType(dependencyObject: DNDependencyObject): Boolean;
    function IsSubclassOf(dependencyObjectType: DNDependencyObjectType): Boolean;
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id;
    property SystemType: DDN.mscorlib.DNType read get_SystemType;
    property BaseType: DNDependencyObjectType read get_BaseType;
    property Name: string read get_Name;
  end;

  TDNDependencyObjectType = class(TDNGenericImport<DNDependencyObjectTypeClass, DNDependencyObjectType>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{088296B5-AE06-579C-AF3A-FC64CC724EEA}']
  { static fields getter & setter } 

   function __fakeFieldGet_UnsetValue: DDN.mscorlib.DNObject;

  { static fields } 

    {class} property UnsetValue: DDN.mscorlib.DNObject read __fakeFieldGet_UnsetValue;

  { static methods } 

    {class} function &Register(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType): DNDependencyProperty; overload;
    {class} function &Register(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata): DNDependencyProperty; overload;
    {class} function &Register(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyProperty; overload;
    {class} function RegisterReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata): DNDependencyPropertyKey; overload;
    {class} function RegisterReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyPropertyKey; overload;
    {class} function RegisterAttachedReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata): DNDependencyPropertyKey; overload;
    {class} function RegisterAttachedReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyPropertyKey; overload;
    {class} function RegisterAttached(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType): DNDependencyProperty; overload;
    {class} function RegisterAttached(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata): DNDependencyProperty; overload;
    {class} function RegisterAttached(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyProperty; overload;

  end;

  [DNTypeName('System.Windows.DependencyProperty')]
  DNDependencyProperty = interface(DDN.mscorlib.DNObject)
  ['{FBE9F247-33CA-3CBF-99CB-DD40F5A0C3B2}']
  { getters & setters } 

    function get_Name: string;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_OwnerType: DDN.mscorlib.DNType;
    function get_DefaultMetadata: DNPropertyMetadata;
    function get_ValidateValueCallback: DNValidateValueCallback;
    function get_GlobalIndex: Int32;
    function get_ReadOnly: Boolean;

  { methods } 

    function GetMetadata(forType: DDN.mscorlib.DNType): DNPropertyMetadata; overload;
    function GetMetadata(dependencyObject: DNDependencyObject): DNPropertyMetadata; overload;
    function GetMetadata(dependencyObjectType: DNDependencyObjectType): DNPropertyMetadata; overload;
    function AddOwner(ownerType: DDN.mscorlib.DNType): DNDependencyProperty; overload;
    function GetHashCode: Int32;
    function IsValidType(value: DDN.mscorlib.DNObject): Boolean;
    function IsValidValue(value: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    procedure OverrideMetadata(forType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata); overload;
    procedure OverrideMetadata(forType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata; key: DNDependencyPropertyKey); overload;
    function AddOwner(ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata): DNDependencyProperty; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    property OwnerType: DDN.mscorlib.DNType read get_OwnerType;
    property DefaultMetadata: DNPropertyMetadata read get_DefaultMetadata;
    property ValidateValueCallback: DNValidateValueCallback read get_ValidateValueCallback;
    property GlobalIndex: Int32 read get_GlobalIndex;
    property ReadOnly: Boolean read get_ReadOnly;
  end;

  TDNDependencyProperty = class(TDNGenericImport<DNDependencyPropertyClass, DNDependencyProperty>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyPropertyKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1A62B526-354A-5346-BC3E-AB7DA7003C0F}']
  end;

  [DNTypeName('System.Windows.DependencyPropertyKey')]
  DNDependencyPropertyKey = interface(DDN.mscorlib.DNObject)
  ['{120F12BC-31DD-36BF-B9BE-80493EEA9E82}']
  { getters & setters } 

    function get_DependencyProperty: DNDependencyProperty;

  { methods } 

    procedure OverrideMetadata(forType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DependencyProperty: DNDependencyProperty read get_DependencyProperty;
  end;

  TDNDependencyPropertyKey = class(TDNGenericImport<DNDependencyPropertyKeyClass, DNDependencyPropertyKey>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNContentPositionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{50BEBF9F-94D1-56B8-893D-6C8D26A70C20}']
  { static fields getter & setter } 

   function __fakeFieldGet_Missing: DNContentPosition;

  { static fields } 

    {class} property Missing: DNContentPosition read __fakeFieldGet_Missing;

  end;

  [DNTypeName('System.Windows.Documents.ContentPosition')]
  DNContentPosition = interface(DDN.mscorlib.DNObject)
  ['{EDC0BAC6-38F4-3C5D-8D38-461E77F222E5}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNContentPosition = class(TDNGenericImport<DNContentPositionClass, DNContentPosition>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNDocumentPageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{14B0949C-704E-502C-AD59-FBE34F030286}']
  { constructors } 

    {class} function init(visual: DNVisual): DNDocumentPage; overload;
    {class} function init(visual: DNVisual; pageSize: DNSize; bleedBox: DNRect; contentBox: DNRect): DNDocumentPage; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Missing: DNDocumentPage;

  { static fields } 

    {class} property Missing: DNDocumentPage read __fakeFieldGet_Missing;

  end;

  [DNTypeName('System.Windows.Documents.DocumentPage')]
  DNDocumentPage = interface(DDN.mscorlib.DNObject)
  ['{E94BE48A-2A69-3197-B818-03E199414B6B}']
  { getters & setters } 

    function get_Visual: DNVisual;
    function get_Size: DNSize;
    function get_BleedBox: DNRect;
    function get_ContentBox: DNRect;

  { events } 

    procedure add_PageDestroyed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PageDestroyed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Visual: DNVisual read get_Visual;
    property Size: DNSize read get_Size;
    property BleedBox: DNRect read get_BleedBox;
    property ContentBox: DNRect read get_ContentBox;
  end;

  TDNDocumentPage = class(TDNGenericImport<DNDocumentPageClass, DNDocumentPage>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNDocumentPaginatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{14C459EA-6E60-5E64-95B5-6DD2A1875304}']
  end;

  [DNTypeName('System.Windows.Documents.DocumentPaginator')]
  DNDocumentPaginator = interface(DDN.mscorlib.DNObject)
  ['{DEBF2109-D538-34BE-94A9-ED46CABAFB92}']
  { getters & setters } 

    function get_IsPageCountValid: Boolean;
    function get_PageCount: Int32;
    function get_PageSize: DNSize;
    procedure set_PageSize(value: DNSize);
    function get_Source: DNIDocumentPaginatorSource;

  { events } 

    procedure add_GetPageCompleted(value: DNGetPageCompletedEventHandler);
    procedure remove_GetPageCompleted(value: DNGetPageCompletedEventHandler);
    procedure add_ComputePageCountCompleted(value: DNAsyncCompletedEventHandler);
    procedure remove_ComputePageCountCompleted(value: DNAsyncCompletedEventHandler);
    procedure add_PagesChanged(value: DNPagesChangedEventHandler);
    procedure remove_PagesChanged(value: DNPagesChangedEventHandler);

  { methods } 

    procedure GetPageAsync(pageNumber: Int32); overload;
    procedure GetPageAsync(pageNumber: Int32; userState: DDN.mscorlib.DNObject); overload;
    procedure ComputePageCount;
    procedure ComputePageCountAsync; overload;
    procedure ComputePageCountAsync(userState: DDN.mscorlib.DNObject); overload;
    procedure CancelAsync(userState: DDN.mscorlib.DNObject);
    function GetPage(pageNumber: Int32): DNDocumentPage;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsPageCountValid: Boolean read get_IsPageCountValid;
    property PageCount: Int32 read get_PageCount;
    property PageSize: DNSize read get_PageSize write set_PageSize;
    property Source: DNIDocumentPaginatorSource read get_Source;
  end;

  TDNDocumentPaginator = class(TDNGenericImport<DNDocumentPaginatorClass, DNDocumentPaginator>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNDocumentReferenceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F6FFB41-0278-5893-B515-28C1CD649FBC}']
  end;

  [DNTypeName('System.Windows.Documents.DocumentReferenceCollection')]
  DNDocumentReferenceCollection = interface(DDN.mscorlib.DNObject)
  ['{8D746C96-D78B-33AA-8BFA-58E755647201}']
  { getters & setters } 

    function get_Count: Int32;

  { events } 

    procedure add_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);
    procedure remove_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNDocumentReferenceCollection = class(TDNGenericImport<DNDocumentReferenceCollectionClass, DNDocumentReferenceCollection>) end;

  //-------------namespace: System.Windows.Documents----------------
  [DNTypeName('System.Windows.Documents.IDocumentPaginatorSource')]
  DNIDocumentPaginatorSource = interface(DDN.mscorlib.DNObject)
  ['{2C0C27DF-282F-3225-ADCD-CEC68F890EEB}']
  { getters & setters } 

    function get_DocumentPaginator: DNDocumentPaginator;

  { propertys } 

    property DocumentPaginator: DNDocumentPaginator read get_DocumentPaginator;
  end;

  //-------------namespace: System.Windows.Documents----------------
  DNPageContentCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1DA6CA9D-F3E6-5F5F-8562-1B1CA60F9A8F}']
  end;

  [DNTypeName('System.Windows.Documents.PageContentCollection')]
  DNPageContentCollection = interface(DDN.mscorlib.DNObject)
  ['{E14C4AC1-3BCC-3889-8692-56982F6DC520}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNPageContentCollection = class(TDNGenericImport<DNPageContentCollectionClass, DNPageContentCollection>) end;

  //-------------namespace: System.Windows.Xps----------------
  DNXpsDocumentWriterClass = interface(DNObjectClass)
  ['{EDA04938-441E-501B-AB5F-1AF36C5233A3}']
  end;

  [DNTypeName('System.Windows.Xps.XpsDocumentWriter')]
  DNXpsDocumentWriter = interface(DNObject)
  ['{F398D7C3-13B0-3A47-90DD-C739F949136B}']
  { events } 

    procedure add_WritingCancelled(handler: DNWritingCancelledEventHandler);
    procedure remove_WritingCancelled(handler: DNWritingCancelledEventHandler);
    procedure add_WritingCompleted(handler: DNWritingCompletedEventHandler);
    procedure remove_WritingCompleted(handler: DNWritingCompletedEventHandler);
    procedure add_WritingProgressChanged(handler: DNWritingProgressChangedEventHandler);
    procedure remove_WritingProgressChanged(handler: DNWritingProgressChangedEventHandler);
    procedure add_WritingPrintTicketRequired(handler: DNWritingPrintTicketRequiredEventHandler);
    procedure remove_WritingPrintTicketRequired(handler: DNWritingPrintTicketRequiredEventHandler);

  { methods } 

    procedure Write(fixedPage: DNFixedPage; printTicket: DNPrintTicket); overload;
    procedure Write(fixedPage: DNFixedPage); overload;
    procedure Write(fixedDocument: DNFixedDocument; printTicket: DNPrintTicket); overload;
    procedure Write(fixedDocument: DNFixedDocument); overload;
    procedure Write(fixedDocumentSequence: DNFixedDocumentSequence; printTicket: DNPrintTicket); overload;
    procedure Write(fixedDocumentSequence: DNFixedDocumentSequence); overload;
    procedure Write(visual: DNVisual; printTicket: DNPrintTicket); overload;
    procedure Write(visual: DNVisual); overload;
    procedure Write(documentPaginator: DNDocumentPaginator; printTicket: DNPrintTicket); overload;
    procedure Write(documentPaginator: DNDocumentPaginator); overload;
    procedure Write(documentPath: string; notificationLevel: DNXpsDocumentNotificationLevel); overload;
    procedure Write(documentPath: string); overload;
    procedure WriteAsync(fixedPage: DNFixedPage; printTicket: DNPrintTicket; userSuppliedState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(fixedPage: DNFixedPage; userSuppliedState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(fixedPage: DNFixedPage; printTicket: DNPrintTicket); overload;
    procedure WriteAsync(fixedPage: DNFixedPage); overload;
    procedure WriteAsync(fixedDocument: DNFixedDocument; printTicket: DNPrintTicket; userSuppliedState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(fixedDocument: DNFixedDocument; userSuppliedState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(fixedDocument: DNFixedDocument; printTicket: DNPrintTicket); overload;
    procedure WriteAsync(fixedDocument: DNFixedDocument); overload;
    procedure WriteAsync(fixedDocumentSequence: DNFixedDocumentSequence; printTicket: DNPrintTicket; userSuppliedState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(fixedDocumentSequence: DNFixedDocumentSequence; userSuppliedState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(fixedDocumentSequence: DNFixedDocumentSequence; printTicket: DNPrintTicket); overload;
    procedure WriteAsync(fixedDocumentSequence: DNFixedDocumentSequence); overload;
    procedure WriteAsync(visual: DNVisual; printTicket: DNPrintTicket; userSuppliedState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(visual: DNVisual; userSuppliedState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(visual: DNVisual; printTicket: DNPrintTicket); overload;
    procedure WriteAsync(visual: DNVisual); overload;
    procedure WriteAsync(documentPaginator: DNDocumentPaginator; printTicket: DNPrintTicket; userSuppliedState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(documentPaginator: DNDocumentPaginator; userSuppliedState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(documentPaginator: DNDocumentPaginator; printTicket: DNPrintTicket); overload;
    procedure WriteAsync(documentPaginator: DNDocumentPaginator); overload;
    procedure WriteAsync(documentPath: string; notificationLevel: DNXpsDocumentNotificationLevel); overload;
    procedure WriteAsync(documentPath: string); overload;
    procedure CancelAsync;
    function CreateVisualsCollator(documentSequencePrintTicket: DNPrintTicket; documentPrintTicket: DNPrintTicket): DNSerializerWriterCollator; overload;
    function CreateVisualsCollator: DNSerializerWriterCollator; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXpsDocumentWriter = class(TDNGenericImport<DNXpsDocumentWriterClass, DNXpsDocumentWriter>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNSerializerWriterCollatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9BF0A070-6D17-51DD-BFBD-659C71AA5A8A}']
  end;

  [DNTypeName('System.Windows.Documents.Serialization.SerializerWriterCollator')]
  DNSerializerWriterCollator = interface(DDN.mscorlib.DNObject)
  ['{B1E0E9B4-5E6B-330A-BD73-436F8C248EF3}']
  { methods } 

    procedure BeginBatchWrite;
    procedure EndBatchWrite;
    procedure Write(visual: DNVisual); overload;
    procedure Write(visual: DNVisual; printTicket: DNPrintTicket); overload;
    procedure WriteAsync(visual: DNVisual); overload;
    procedure WriteAsync(visual: DNVisual; userState: DDN.mscorlib.DNObject); overload;
    procedure WriteAsync(visual: DNVisual; printTicket: DNPrintTicket); overload;
    procedure WriteAsync(visual: DNVisual; printTicket: DNPrintTicket; userState: DDN.mscorlib.DNObject); overload;
    procedure CancelAsync;
    procedure Cancel;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSerializerWriterCollator = class(TDNGenericImport<DNSerializerWriterCollatorClass, DNSerializerWriterCollator>) end;

  //-------------namespace: System.Windows----------------
  DNEventRouteClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3CA674A7-6705-5252-A980-1AC78788CFEC}']
  { constructors } 

    {class} function init(routedEvent: DNRoutedEvent): DNEventRoute;

  end;

  [DNTypeName('System.Windows.EventRoute')]
  DNEventRoute = interface(DDN.mscorlib.DNObject)
  ['{1A05639F-12DC-3701-88E4-9B42694F8BCF}']
  { methods } 

    procedure PushBranchNode(node: DDN.mscorlib.DNObject; source: DDN.mscorlib.DNObject);
    function PopBranchNode: DDN.mscorlib.DNObject;
    function PeekBranchNode: DDN.mscorlib.DNObject;
    function PeekBranchSource: DDN.mscorlib.DNObject;
    procedure Add(target: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventRoute = class(TDNGenericImport<DNEventRouteClass, DNEventRoute>) end;

  //-------------namespace: System.Windows.Data----------------
  DNBindingExpressionBaseClass = interface(DNObjectClass)
  ['{52904032-8054-52CA-9C7F-A22BB4473A78}']
  end;

  [DNTypeName('System.Windows.Data.BindingExpressionBase')]
  DNBindingExpressionBase = interface(DNObject)
  ['{E44438CE-D9A5-3F41-B49E-2B0811846431}']
  { getters & setters } 

    function get_Target: DNDependencyObject;
    function get_TargetProperty: DNDependencyProperty;
    function get_ParentBindingBase: DNBindingBase;
    function get_BindingGroup: DNBindingGroup;
    function get_HasError: Boolean;
    function get_HasValidationError: Boolean;
    function get_IsDirty: Boolean;

  { methods } 

    procedure UpdateTarget;
    procedure UpdateSource;
    function ValidateWithoutUpdate: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Target: DNDependencyObject read get_Target;
    property TargetProperty: DNDependencyProperty read get_TargetProperty;
    property ParentBindingBase: DNBindingBase read get_ParentBindingBase;
    property BindingGroup: DNBindingGroup read get_BindingGroup;
    property HasError: Boolean read get_HasError;
    property HasValidationError: Boolean read get_HasValidationError;
    property IsDirty: Boolean read get_IsDirty;
  end;

  TDNBindingExpressionBase = class(TDNGenericImport<DNBindingExpressionBaseClass, DNBindingExpressionBase>) end;

  //-------------namespace: System.Windows.Data----------------
  DNBindingExpressionClass = interface(DNBindingExpressionBaseClass)
  ['{D5AFAFFA-4BE6-5166-92FD-8C180846F6F7}']
  end;

  [DNTypeName('System.Windows.Data.BindingExpression')]
  DNBindingExpression = interface(DNBindingExpressionBase)
  ['{FD869665-C2FD-3996-958F-7B7C86918A59}']
  { getters & setters } 

    function get_DataItem: DDN.mscorlib.DNObject;
    function get_ResolvedSource: DDN.mscorlib.DNObject;
    function get_ResolvedSourcePropertyName: string;
    function get_Target: DNDependencyObject;
    function get_TargetProperty: DNDependencyProperty;
    function get_ParentBindingBase: DNBindingBase;
    function get_BindingGroup: DNBindingGroup;
    function get_HasError: Boolean;
    function get_HasValidationError: Boolean;
    function get_IsDirty: Boolean;

  { methods } 

    procedure UpdateSource;
    procedure UpdateTarget;
    function ValidateWithoutUpdate: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataItem: DDN.mscorlib.DNObject read get_DataItem;
    property ResolvedSource: DDN.mscorlib.DNObject read get_ResolvedSource;
    property ResolvedSourcePropertyName: string read get_ResolvedSourcePropertyName;
    property Target: DNDependencyObject read get_Target;
    property TargetProperty: DNDependencyProperty read get_TargetProperty;
    property ParentBindingBase: DNBindingBase read get_ParentBindingBase;
    property BindingGroup: DNBindingGroup read get_BindingGroup;
    property HasError: Boolean read get_HasError;
    property HasValidationError: Boolean read get_HasValidationError;
    property IsDirty: Boolean read get_IsDirty;
  end;

  TDNBindingExpression = class(TDNGenericImport<DNBindingExpressionClass, DNBindingExpression>) end;

  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.IDataObject')]
  DNIDataObject = interface(DDN.mscorlib.DNObject)
  ['{FE4FF803-496E-3A49-AF00-13B2CC182476}']
  { methods } 

    function GetData(format: string): DDN.mscorlib.DNObject; overload;
    function GetData(format: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetData(format: string; autoConvert: Boolean): DDN.mscorlib.DNObject; overload;
    function GetDataPresent(format: string): Boolean; overload;
    function GetDataPresent(format: DDN.mscorlib.DNType): Boolean; overload;
    function GetDataPresent(format: string; autoConvert: Boolean): Boolean; overload;
    function GetFormats: TArray<string>; overload;
    function GetFormats(autoConvert: Boolean): TArray<string>; overload;
    procedure SetData(data: DDN.mscorlib.DNObject); overload;
    procedure SetData(format: string; data: DDN.mscorlib.DNObject); overload;
    procedure SetData(format: DDN.mscorlib.DNType; data: DDN.mscorlib.DNObject); overload;
    procedure SetData(format: string; data: DDN.mscorlib.DNObject; autoConvert: Boolean); overload;

  end;

  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.IInputElement')]
  DNIInputElement = interface(DDN.mscorlib.DNObject)
  ['{E911D80F-B218-3D27-B373-2610591CC88F}']
  { getters & setters } 

    function get_IsMouseOver: Boolean;
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsEnabled: Boolean;
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);

  { events } 

    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);

  { methods } 

    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;

  { propertys } 

    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsEnabled: Boolean read get_IsEnabled;
    property Focusable: Boolean read get_Focusable write set_Focusable;
  end;

  //-------------namespace: System.Windows.Ink----------------
  DNDrawingAttributesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C21A15BC-717E-55C4-A005-695CB1362411}']
  { constructors } 

    {class} function init: DNDrawingAttributes;

  { static fields getter & setter } 

   function __fakeFieldGet_MinHeight: Double;
   function __fakeFieldGet_MinWidth: Double;
   function __fakeFieldGet_MaxHeight: Double;
   function __fakeFieldGet_MaxWidth: Double;

  { static fields } 

    {class} property MinHeight: Double read __fakeFieldGet_MinHeight;
    {class} property MinWidth: Double read __fakeFieldGet_MinWidth;
    {class} property MaxHeight: Double read __fakeFieldGet_MaxHeight;
    {class} property MaxWidth: Double read __fakeFieldGet_MaxWidth;

  end;

  [DNTypeName('System.Windows.Ink.DrawingAttributes')]
  DNDrawingAttributes = interface(DDN.mscorlib.DNObject)
  ['{8F89EA2D-867D-3064-A244-B02120975AE1}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_StylusTip: DNStylusTip;
    procedure set_StylusTip(value: DNStylusTip);
    function get_StylusTipTransform: DNMatrix;
    procedure set_StylusTipTransform(value: DNMatrix);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_FitToCurve: Boolean;
    procedure set_FitToCurve(value: Boolean);
    function get_IgnorePressure: Boolean;
    procedure set_IgnorePressure(value: Boolean);
    function get_IsHighlighter: Boolean;
    procedure set_IsHighlighter(value: Boolean);

  { events } 

    procedure add_AttributeChanged(value: DNPropertyDataChangedEventHandler);
    procedure remove_AttributeChanged(value: DNPropertyDataChangedEventHandler);
    procedure add_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);
    procedure remove_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);

  { methods } 

    procedure AddPropertyData(propertyDataId: DDN.mscorlib.DNGuid; propertyData: DDN.mscorlib.DNObject);
    procedure RemovePropertyData(propertyDataId: DDN.mscorlib.DNGuid);
    function GetPropertyData(propertyDataId: DDN.mscorlib.DNGuid): DDN.mscorlib.DNObject;
    function GetPropertyDataIds: TArray<DDN.mscorlib.DNGuid>;
    function ContainsPropertyData(propertyDataId: DDN.mscorlib.DNGuid): Boolean;
    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function Clone: DNDrawingAttributes;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
    property StylusTip: DNStylusTip read get_StylusTip write set_StylusTip;
    property StylusTipTransform: DNMatrix read get_StylusTipTransform write set_StylusTipTransform;
    property Height: Double read get_Height write set_Height;
    property Width: Double read get_Width write set_Width;
    property FitToCurve: Boolean read get_FitToCurve write set_FitToCurve;
    property IgnorePressure: Boolean read get_IgnorePressure write set_IgnorePressure;
    property IsHighlighter: Boolean read get_IsHighlighter write set_IsHighlighter;
  end;

  TDNDrawingAttributes = class(TDNGenericImport<DNDrawingAttributesClass, DNDrawingAttributes>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNGestureRecognitionResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2670918D-FC38-5041-8F98-A55CF80CF729}']
  end;

  [DNTypeName('System.Windows.Ink.GestureRecognitionResult')]
  DNGestureRecognitionResult = interface(DDN.mscorlib.DNObject)
  ['{3123EF8C-09D5-331B-B3A3-1BD492F1EFF0}']
  { getters & setters } 

    function get_RecognitionConfidence: DNRecognitionConfidence;
    function get_ApplicationGesture: DNApplicationGesture;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RecognitionConfidence: DNRecognitionConfidence read get_RecognitionConfidence;
    property ApplicationGesture: DNApplicationGesture read get_ApplicationGesture;
  end;

  TDNGestureRecognitionResult = class(TDNGenericImport<DNGestureRecognitionResultClass, DNGestureRecognitionResult>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNIncrementalLassoHitTesterClass = interface(DNObjectClass)
  ['{B5AA74C6-5669-5F7B-8606-ED367527F83B}']
  end;

  [DNTypeName('System.Windows.Ink.IncrementalLassoHitTester')]
  DNIncrementalLassoHitTester = interface(DNObject)
  ['{1D9132EC-CAEF-3F33-9C28-DA24E13F59ED}']
  { getters & setters } 

    function get_IsValid: Boolean;

  { events } 

    procedure add_SelectionChanged(value: DNLassoSelectionChangedEventHandler);
    procedure remove_SelectionChanged(value: DNLassoSelectionChangedEventHandler);

  { methods } 

    procedure AddPoints(points: DDN.mscorlib.DNIEnumerable<DNPoint>); overload;
    procedure AddPoint(point: DNPoint);
    procedure AddPoints(stylusPoints: DNStylusPointCollection); overload;
    procedure EndHitTesting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsValid: Boolean read get_IsValid;
  end;

  TDNIncrementalLassoHitTester = class(TDNGenericImport<DNIncrementalLassoHitTesterClass, DNIncrementalLassoHitTester>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNIncrementalStrokeHitTesterClass = interface(DNObjectClass)
  ['{B84F7763-0E75-52B6-A3C7-498361FBAD0F}']
  end;

  [DNTypeName('System.Windows.Ink.IncrementalStrokeHitTester')]
  DNIncrementalStrokeHitTester = interface(DNObject)
  ['{5B0CD6BE-37AF-3D61-8F90-4F099AE8F9C6}']
  { getters & setters } 

    function get_IsValid: Boolean;

  { events } 

    procedure add_StrokeHit(value: DNStrokeHitEventHandler);
    procedure remove_StrokeHit(value: DNStrokeHitEventHandler);

  { methods } 

    procedure AddPoints(points: DDN.mscorlib.DNIEnumerable<DNPoint>); overload;
    procedure AddPoint(point: DNPoint);
    procedure AddPoints(stylusPoints: DNStylusPointCollection); overload;
    procedure EndHitTesting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsValid: Boolean read get_IsValid;
  end;

  TDNIncrementalStrokeHitTester = class(TDNGenericImport<DNIncrementalStrokeHitTesterClass, DNIncrementalStrokeHitTester>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStrokeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DABA871C-26C9-527D-9F1A-99F29FFBF8D8}']
  { constructors } 

    {class} function init(stylusPoints: DNStylusPointCollection): DNStroke; overload;
    {class} function init(stylusPoints: DNStylusPointCollection; drawingAttributes: DNDrawingAttributes): DNStroke; overload;

  end;

  [DNTypeName('System.Windows.Ink.Stroke')]
  DNStroke = interface(DDN.mscorlib.DNObject)
  ['{C9687816-10DB-3F11-BC75-BC6FEFD7348C}']
  { getters & setters } 

    function get_DrawingAttributes: DNDrawingAttributes;
    procedure set_DrawingAttributes(value: DNDrawingAttributes);
    function get_StylusPoints: DNStylusPointCollection;
    procedure set_StylusPoints(value: DNStylusPointCollection);

  { events } 

    procedure add_DrawingAttributesChanged(value: DNPropertyDataChangedEventHandler);
    procedure remove_DrawingAttributesChanged(value: DNPropertyDataChangedEventHandler);
    procedure add_DrawingAttributesReplaced(value: DNDrawingAttributesReplacedEventHandler);
    procedure remove_DrawingAttributesReplaced(value: DNDrawingAttributesReplacedEventHandler);
    procedure add_StylusPointsReplaced(value: DNStylusPointsReplacedEventHandler);
    procedure remove_StylusPointsReplaced(value: DNStylusPointsReplacedEventHandler);
    procedure add_StylusPointsChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_StylusPointsChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);
    procedure remove_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);
    procedure add_Invalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Invalidated(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNStroke;
    procedure Transform(transformMatrix: DNMatrix; applyToStylusTip: Boolean);
    procedure AddPropertyData(propertyDataId: DDN.mscorlib.DNGuid; propertyData: DDN.mscorlib.DNObject);
    procedure RemovePropertyData(propertyDataId: DDN.mscorlib.DNGuid);
    function GetPropertyData(propertyDataId: DDN.mscorlib.DNGuid): DDN.mscorlib.DNObject;
    function GetPropertyDataIds: TArray<DDN.mscorlib.DNGuid>;
    function ContainsPropertyData(propertyDataId: DDN.mscorlib.DNGuid): Boolean;
    function GetBounds: DNRect;
    procedure Draw(context: DNDrawingContext); overload;
    procedure Draw(drawingContext: DNDrawingContext; drawingAttributes: DNDrawingAttributes); overload;
    function GetClipResult(lassoPoints: DDN.mscorlib.DNIEnumerable<DNPoint>): DNStrokeCollection; overload;
    function GetEraseResult(lassoPoints: DDN.mscorlib.DNIEnumerable<DNPoint>): DNStrokeCollection; overload;
    function GetEraseResult(eraserPath: DDN.mscorlib.DNIEnumerable<DNPoint>; eraserShape: DNStylusShape): DNStrokeCollection; overload;
    function HitTest(bounds: DNRect; percentageWithinBounds: Int32): Boolean; overload;
    function HitTest(lassoPoints: DDN.mscorlib.DNIEnumerable<DNPoint>; percentageWithinLasso: Int32): Boolean; overload;
    function HitTest(path: DDN.mscorlib.DNIEnumerable<DNPoint>; stylusShape: DNStylusShape): Boolean; overload;
    function GetGeometry: DNGeometry; overload;
    function GetGeometry(drawingAttributes: DNDrawingAttributes): DNGeometry; overload;
    function GetBezierStylusPoints: DNStylusPointCollection;
    function GetClipResult(bounds: DNRect): DNStrokeCollection; overload;
    function GetEraseResult(bounds: DNRect): DNStrokeCollection; overload;
    function HitTest(point: DNPoint): Boolean; overload;
    function HitTest(point: DNPoint; diameter: Double): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DrawingAttributes: DNDrawingAttributes read get_DrawingAttributes write set_DrawingAttributes;
    property StylusPoints: DNStylusPointCollection read get_StylusPoints write set_StylusPoints;
  end;

  TDNStroke = class(TDNGenericImport<DNStrokeClass, DNStroke>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStylusShapeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC28FA0D-2EC3-5423-9D63-6AE5CA8E7F06}']
  end;

  [DNTypeName('System.Windows.Ink.StylusShape')]
  DNStylusShape = interface(DDN.mscorlib.DNObject)
  ['{87A39C51-2EB0-368A-9D33-3A3C9CB70A1A}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_Rotation: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Rotation: Double read get_Rotation;
  end;

  TDNStylusShape = class(TDNGenericImport<DNStylusShapeClass, DNStylusShape>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCommandBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93E7DCB9-B58C-5890-8BDA-0049CB486CF9}']
  { constructors } 

    {class} function init: DNCommandBinding; overload;
    {class} function init(command: DNICommand): DNCommandBinding; overload;
    {class} function init(command: DNICommand; executed: DNExecutedRoutedEventHandler): DNCommandBinding; overload;
    {class} function init(command: DNICommand; executed: DNExecutedRoutedEventHandler; canExecute: DNCanExecuteRoutedEventHandler): DNCommandBinding; overload;

  end;

  [DNTypeName('System.Windows.Input.CommandBinding')]
  DNCommandBinding = interface(DDN.mscorlib.DNObject)
  ['{5F80F0B7-0A17-31D7-9E26-89D1DCC6EC81}']
  { getters & setters } 

    function get_Command: DNICommand;
    procedure set_Command(value: DNICommand);

  { events } 

    procedure add_PreviewExecuted(value: DNExecutedRoutedEventHandler);
    procedure remove_PreviewExecuted(value: DNExecutedRoutedEventHandler);
    procedure add_Executed(value: DNExecutedRoutedEventHandler);
    procedure remove_Executed(value: DNExecutedRoutedEventHandler);
    procedure add_PreviewCanExecute(value: DNCanExecuteRoutedEventHandler);
    procedure remove_PreviewCanExecute(value: DNCanExecuteRoutedEventHandler);
    procedure add_CanExecute(value: DNCanExecuteRoutedEventHandler);
    procedure remove_CanExecute(value: DNCanExecuteRoutedEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNICommand read get_Command write set_Command;
  end;

  TDNCommandBinding = class(TDNGenericImport<DNCommandBindingClass, DNCommandBinding>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCommandBindingCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3DC587DC-D91B-5E2C-BC85-F1D09D9AA65D}']
  { constructors } 

    {class} function init: DNCommandBindingCollection; overload;
    {class} function init(commandBindings: DDN.mscorlib.DNIList): DNCommandBindingCollection; overload;

  end;

  [DNTypeName('System.Windows.Input.CommandBindingCollection')]
  DNCommandBindingCollection = interface(DDN.mscorlib.DNObject)
  ['{CECE73B9-FBE8-315E-9C5B-FA571C95A2FD}']
  { getters & setters } 

    function get_Item(index: Int32): DNCommandBinding;
    procedure set_Item(index: Int32; value: DNCommandBinding);
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;

  { methods } 

    function Add(commandBinding: DNCommandBinding): Int32;
    procedure AddRange(collection: DDN.mscorlib.DNICollection);
    procedure Insert(index: Int32; commandBinding: DNCommandBinding);
    procedure Remove(commandBinding: DNCommandBinding);
    procedure RemoveAt(index: Int32);
    function &Contains(commandBinding: DNCommandBinding): Boolean;
    procedure CopyTo(commandBindings: TArray<DNCommandBinding>; index: Int32);
    function IndexOf(value: DNCommandBinding): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCommandBinding read get_Item write set_Item; default;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
  end;

  TDNCommandBindingCollection = class(TDNGenericImport<DNCommandBindingCollectionClass, DNCommandBindingCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCursorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C86D6D15-BEF4-5F22-A7B7-6B33E33D06C1}']
  { constructors } 

    {class} function init(cursorFile: string): DNCursor; overload;
    {class} function init(cursorFile: string; scaleWithDpi: Boolean): DNCursor; overload;
    {class} function init(cursorStream: DDN.mscorlib.DNStream): DNCursor; overload;
    {class} function init(cursorStream: DDN.mscorlib.DNStream; scaleWithDpi: Boolean): DNCursor; overload;

  end;

  [DNTypeName('System.Windows.Input.Cursor')]
  DNCursor = interface(DDN.mscorlib.DNObject)
  ['{2BF4E902-3E22-332A-A540-B6FB76BFE2BC}']
  { methods } 

    procedure Dispose;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNCursor = class(TDNGenericImport<DNCursorClass, DNCursor>) end;

  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.ICommand')]
  DNICommand = interface(DDN.mscorlib.DNObject)
  ['{87196B24-1A72-31F7-8F0B-0E068BC21B4C}']
  { events } 

    procedure add_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CanExecute(parameter: DDN.mscorlib.DNObject): Boolean;
    procedure Execute(parameter: DDN.mscorlib.DNObject);

  end;

  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.IManipulator')]
  DNIManipulator = interface(DDN.mscorlib.DNObject)
  ['{4F34DD59-0697-3CE1-AE1B-EF60DE6AF3A3}']
  { getters & setters } 

    function get_Id: Int32;

  { events } 

    procedure add_Updated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Updated(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    procedure ManipulationEnded(cancel: Boolean);

  { propertys } 

    property Id: Int32 read get_Id;
  end;

  //-------------namespace: System.Windows.Input----------------
  DNInertiaExpansionBehaviorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{226B78FC-6417-586A-ACE6-F342BD86FC65}']
  { constructors } 

    {class} function init: DNInertiaExpansionBehavior;

  end;

  [DNTypeName('System.Windows.Input.InertiaExpansionBehavior')]
  DNInertiaExpansionBehavior = interface(DDN.mscorlib.DNObject)
  ['{37E680F3-41DD-3609-B7EE-1B13BDF66B9D}']
  { getters & setters } 

    function get_InitialVelocity: DNVector;
    procedure set_InitialVelocity(value: DNVector);
    function get_DesiredDeceleration: Double;
    procedure set_DesiredDeceleration(value: Double);
    function get_DesiredExpansion: DNVector;
    procedure set_DesiredExpansion(value: DNVector);
    function get_InitialRadius: Double;
    procedure set_InitialRadius(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InitialVelocity: DNVector read get_InitialVelocity write set_InitialVelocity;
    property DesiredDeceleration: Double read get_DesiredDeceleration write set_DesiredDeceleration;
    property DesiredExpansion: DNVector read get_DesiredExpansion write set_DesiredExpansion;
    property InitialRadius: Double read get_InitialRadius write set_InitialRadius;
  end;

  TDNInertiaExpansionBehavior = class(TDNGenericImport<DNInertiaExpansionBehaviorClass, DNInertiaExpansionBehavior>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInertiaRotationBehaviorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{343F250F-1AF2-5088-83C2-0112A09558AC}']
  { constructors } 

    {class} function init: DNInertiaRotationBehavior;

  end;

  [DNTypeName('System.Windows.Input.InertiaRotationBehavior')]
  DNInertiaRotationBehavior = interface(DDN.mscorlib.DNObject)
  ['{05D3BF22-89BC-32BC-A644-2F846FAFEA89}']
  { getters & setters } 

    function get_InitialVelocity: Double;
    procedure set_InitialVelocity(value: Double);
    function get_DesiredDeceleration: Double;
    procedure set_DesiredDeceleration(value: Double);
    function get_DesiredRotation: Double;
    procedure set_DesiredRotation(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InitialVelocity: Double read get_InitialVelocity write set_InitialVelocity;
    property DesiredDeceleration: Double read get_DesiredDeceleration write set_DesiredDeceleration;
    property DesiredRotation: Double read get_DesiredRotation write set_DesiredRotation;
  end;

  TDNInertiaRotationBehavior = class(TDNGenericImport<DNInertiaRotationBehaviorClass, DNInertiaRotationBehavior>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInertiaTranslationBehaviorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0370E3AF-93D6-5EA6-BED2-FB098FAE1719}']
  { constructors } 

    {class} function init: DNInertiaTranslationBehavior;

  end;

  [DNTypeName('System.Windows.Input.InertiaTranslationBehavior')]
  DNInertiaTranslationBehavior = interface(DDN.mscorlib.DNObject)
  ['{CA6370BE-CEE1-3A91-A321-842A551328AB}']
  { getters & setters } 

    function get_InitialVelocity: DNVector;
    procedure set_InitialVelocity(value: DNVector);
    function get_DesiredDeceleration: Double;
    procedure set_DesiredDeceleration(value: Double);
    function get_DesiredDisplacement: Double;
    procedure set_DesiredDisplacement(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InitialVelocity: DNVector read get_InitialVelocity write set_InitialVelocity;
    property DesiredDeceleration: Double read get_DesiredDeceleration write set_DesiredDeceleration;
    property DesiredDisplacement: Double read get_DesiredDisplacement write set_DesiredDisplacement;
  end;

  TDNInertiaTranslationBehavior = class(TDNGenericImport<DNInertiaTranslationBehaviorClass, DNInertiaTranslationBehavior>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputBindingCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A8ECEB0D-20B0-5697-99F9-BB8C46BF757A}']
  { constructors } 

    {class} function init: DNInputBindingCollection; overload;
    {class} function init(inputBindings: DDN.mscorlib.DNIList): DNInputBindingCollection; overload;

  end;

  [DNTypeName('System.Windows.Input.InputBindingCollection')]
  DNInputBindingCollection = interface(DDN.mscorlib.DNObject)
  ['{F03B5403-1481-3B80-9459-193B635F4F51}']
  { getters & setters } 

    function get_Item(index: Int32): DNInputBinding;
    procedure set_Item(index: Int32; value: DNInputBinding);
    function get_IsSynchronized: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;

  { methods } 

    function Add(inputBinding: DNInputBinding): Int32;
    procedure AddRange(collection: DDN.mscorlib.DNICollection);
    procedure Insert(index: Int32; inputBinding: DNInputBinding);
    procedure Remove(inputBinding: DNInputBinding);
    procedure RemoveAt(index: Int32);
    function &Contains(key: DNInputBinding): Boolean;
    procedure CopyTo(inputBindings: TArray<DNInputBinding>; index: Int32);
    function IndexOf(value: DNInputBinding): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNInputBinding read get_Item write set_Item; default;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNInputBindingCollection = class(TDNGenericImport<DNInputBindingCollectionClass, DNInputBindingCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputGestureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E0610158-853A-5D6B-9E05-5A4C4050CD00}']
  end;

  [DNTypeName('System.Windows.Input.InputGesture')]
  DNInputGesture = interface(DDN.mscorlib.DNObject)
  ['{774B4468-0C4D-3B33-BA17-8165C7294397}']
  { methods } 

    function Matches(targetElement: DDN.mscorlib.DNObject; inputEventArgs: DNInputEventArgs): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInputGesture = class(TDNGenericImport<DNInputGestureClass, DNInputGesture>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputGestureCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{863CAFFF-B375-592A-AE8C-5929F381676B}']
  { constructors } 

    {class} function init: DNInputGestureCollection; overload;
    {class} function init(inputGestures: DDN.mscorlib.DNIList): DNInputGestureCollection; overload;

  end;

  [DNTypeName('System.Windows.Input.InputGestureCollection')]
  DNInputGestureCollection = interface(DDN.mscorlib.DNObject)
  ['{3BECDBC3-6B0C-3958-A8B8-9BDFA769EDA2}']
  { getters & setters } 

    function get_Item(index: Int32): DNInputGesture;
    procedure set_Item(index: Int32; value: DNInputGesture);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;

  { methods } 

    procedure RemoveAt(index: Int32);
    function Add(inputGesture: DNInputGesture): Int32;
    procedure AddRange(collection: DDN.mscorlib.DNICollection);
    procedure Insert(index: Int32; inputGesture: DNInputGesture);
    procedure Remove(inputGesture: DNInputGesture);
    function &Contains(key: DNInputGesture): Boolean;
    procedure CopyTo(inputGestures: TArray<DNInputGesture>; index: Int32);
    procedure Seal;
    function IndexOf(value: DNInputGesture): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNInputGesture read get_Item write set_Item; default;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
  end;

  TDNInputGestureCollection = class(TDNGenericImport<DNInputGestureCollectionClass, DNInputGestureCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputScopeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93EB1A15-F457-5930-8EEE-E181DF0544B4}']
  { constructors } 

    {class} function init: DNInputScope;

  end;

  [DNTypeName('System.Windows.Input.InputScope')]
  DNInputScope = interface(DDN.mscorlib.DNObject)
  ['{49D19BEF-B167-350B-803E-F36F268ED92B}']
  { getters & setters } 

    function get_Names: DDN.mscorlib.DNIList;
    function get_SrgsMarkup: string;
    procedure set_SrgsMarkup(value: string);
    function get_RegularExpression: string;
    procedure set_RegularExpression(value: string);
    function get_PhraseList: DDN.mscorlib.DNIList;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Names: DDN.mscorlib.DNIList read get_Names;
    property SrgsMarkup: string read get_SrgsMarkup write set_SrgsMarkup;
    property RegularExpression: string read get_RegularExpression write set_RegularExpression;
    property PhraseList: DDN.mscorlib.DNIList read get_PhraseList;
  end;

  TDNInputScope = class(TDNGenericImport<DNInputScopeClass, DNInputScope>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationDeltaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{07612F26-9AF4-573E-8AE5-D99C45082CC4}']
  { constructors } 

    {class} function init(translation: DNVector; rotation: Double; scale: DNVector; expansion: DNVector): DNManipulationDelta;

  end;

  [DNTypeName('System.Windows.Input.ManipulationDelta')]
  DNManipulationDelta = interface(DDN.mscorlib.DNObject)
  ['{B2B6CDF4-128E-3AF4-9E1E-FF8F1C3ADE03}']
  { getters & setters } 

    function get_Translation: DNVector;
    function get_Rotation: Double;
    function get_Scale: DNVector;
    function get_Expansion: DNVector;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Translation: DNVector read get_Translation;
    property Rotation: Double read get_Rotation;
    property Scale: DNVector read get_Scale;
    property Expansion: DNVector read get_Expansion;
  end;

  TDNManipulationDelta = class(TDNGenericImport<DNManipulationDeltaClass, DNManipulationDelta>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationPivotClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C01D1081-6AC8-51D3-A2EF-4E5CA964AFCB}']
  { constructors } 

    {class} function init: DNManipulationPivot; overload;
    {class} function init(center: DNPoint; radius: Double): DNManipulationPivot; overload;

  end;

  [DNTypeName('System.Windows.Input.ManipulationPivot')]
  DNManipulationPivot = interface(DDN.mscorlib.DNObject)
  ['{52C1848C-41B3-3B40-8B44-1A851ED1BCEA}']
  { getters & setters } 

    function get_Center: DNPoint;
    procedure set_Center(value: DNPoint);
    function get_Radius: Double;
    procedure set_Radius(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Center: DNPoint read get_Center write set_Center;
    property Radius: Double read get_Radius write set_Radius;
  end;

  TDNManipulationPivot = class(TDNGenericImport<DNManipulationPivotClass, DNManipulationPivot>) end;

  //-------------namespace: System.Windows.Input.Manipulations----------------
  DNInertiaParameters2DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{94A1E0F6-A75D-5B38-8213-4DAC84E0331C}']
  end;

  [DNTypeName('System.Windows.Input.Manipulations.InertiaParameters2D')]
  DNInertiaParameters2D = interface(DDN.mscorlib.DNObject)
  ['{9E7559B3-3627-3791-AF60-BCBA97C0CE85}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInertiaParameters2D = class(TDNGenericImport<DNInertiaParameters2DClass, DNInertiaParameters2D>) end;

  //-------------namespace: System.Windows.Input.Manipulations----------------
  DNManipulationParameters2DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5F890FBC-3049-5354-9A85-B79DDFDDA86F}']
  end;

  [DNTypeName('System.Windows.Input.Manipulations.ManipulationParameters2D')]
  DNManipulationParameters2D = interface(DDN.mscorlib.DNObject)
  ['{67782D8E-E680-3F05-B96E-FCED00ED48A1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNManipulationParameters2D = class(TDNGenericImport<DNManipulationParameters2DClass, DNManipulationParameters2D>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationVelocitiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C3B8A4CE-37F6-5BEB-ACDD-EA332CA13CD4}']
  { constructors } 

    {class} function init(linearVelocity: DNVector; angularVelocity: Double; expansionVelocity: DNVector): DNManipulationVelocities;

  end;

  [DNTypeName('System.Windows.Input.ManipulationVelocities')]
  DNManipulationVelocities = interface(DDN.mscorlib.DNObject)
  ['{A1C58042-F68B-305B-BB33-738C09716379}']
  { getters & setters } 

    function get_LinearVelocity: DNVector;
    function get_AngularVelocity: Double;
    function get_ExpansionVelocity: DNVector;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LinearVelocity: DNVector read get_LinearVelocity;
    property AngularVelocity: Double read get_AngularVelocity;
    property ExpansionVelocity: DNVector read get_ExpansionVelocity;
  end;

  TDNManipulationVelocities = class(TDNGenericImport<DNManipulationVelocitiesClass, DNManipulationVelocities>) end;

  //-------------namespace: System.Windows.Input----------------
  DNRoutedCommandClass = interface(DDN.mscorlib.DNObjectClass)
  ['{40A08F71-6D7C-522B-82A0-53E2A9FABEBF}']
  { constructors } 

    {class} function init: DNRoutedCommand; overload;
    {class} function init(name: string; ownerType: DDN.mscorlib.DNType): DNRoutedCommand; overload;
    {class} function init(name: string; ownerType: DDN.mscorlib.DNType; inputGestures: DNInputGestureCollection): DNRoutedCommand; overload;

  end;

  [DNTypeName('System.Windows.Input.RoutedCommand')]
  DNRoutedCommand = interface(DDN.mscorlib.DNObject)
  ['{1FC3D874-3517-3248-84A3-77C56D4481B2}']
  { getters & setters } 

    function get_Name: string;
    function get_OwnerType: DDN.mscorlib.DNType;
    function get_InputGestures: DNInputGestureCollection;

  { events } 

    procedure add_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CanExecute(parameter: DDN.mscorlib.DNObject; target: DNIInputElement): Boolean;
    procedure Execute(parameter: DDN.mscorlib.DNObject; target: DNIInputElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property OwnerType: DDN.mscorlib.DNType read get_OwnerType;
    property InputGestures: DNInputGestureCollection read get_InputGestures;
  end;

  TDNRoutedCommand = class(TDNGenericImport<DNRoutedCommandClass, DNRoutedCommand>) end;

  //-------------namespace: System.Windows.Input----------------
  DNRoutedUICommandClass = interface(DNRoutedCommandClass)
  ['{25763247-A920-567A-94CF-0D16766871AE}']
  { constructors } 

    {class} function init: DNRoutedUICommand; overload;
    {class} function init(text: string; name: string; ownerType: DDN.mscorlib.DNType): DNRoutedUICommand; overload;
    {class} function init(text: string; name: string; ownerType: DDN.mscorlib.DNType; inputGestures: DNInputGestureCollection): DNRoutedUICommand; overload;

  end;

  [DNTypeName('System.Windows.Input.RoutedUICommand')]
  DNRoutedUICommand = interface(DNRoutedCommand)
  ['{CF38A5B5-80C8-385D-BA40-8E85793A7448}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Name: string;
    function get_OwnerType: DDN.mscorlib.DNType;
    function get_InputGestures: DNInputGestureCollection;

  { events } 

    procedure add_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CanExecute(parameter: DDN.mscorlib.DNObject; target: DNIInputElement): Boolean;
    procedure Execute(parameter: DDN.mscorlib.DNObject; target: DNIInputElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Name: string read get_Name;
    property OwnerType: DDN.mscorlib.DNType read get_OwnerType;
    property InputGestures: DNInputGestureCollection read get_InputGestures;
  end;

  TDNRoutedUICommand = class(TDNGenericImport<DNRoutedUICommandClass, DNRoutedUICommand>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStagingAreaInputItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{69FCDE57-B0C9-53E5-BCAD-8051C22589D2}']
  end;

  [DNTypeName('System.Windows.Input.StagingAreaInputItem')]
  DNStagingAreaInputItem = interface(DDN.mscorlib.DNObject)
  ['{853F066B-2C7F-3BC5-8070-C80BFCB9BA47}']
  { getters & setters } 

    function get_Input: DNInputEventArgs;

  { methods } 

    function GetData(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetData(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Input: DNInputEventArgs read get_Input;
  end;

  TDNStagingAreaInputItem = class(TDNGenericImport<DNStagingAreaInputItemClass, DNStagingAreaInputItem>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusButtonClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0DB43040-9A06-59D8-871F-CD5718258251}']
  end;

  [DNTypeName('System.Windows.Input.StylusButton')]
  DNStylusButton = interface(DDN.mscorlib.DNObject)
  ['{6A821801-B038-3029-A91E-3690A0003D20}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;
    function get_StylusButtonState: DNStylusButtonState;
    function get_Name: string;
    function get_StylusDevice: DNStylusDevice;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Guid: DDN.mscorlib.DNGuid read get_Guid;
    property StylusButtonState: DNStylusButtonState read get_StylusButtonState;
    property Name: string read get_Name;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
  end;

  TDNStylusButton = class(TDNGenericImport<DNStylusButtonClass, DNStylusButton>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointDescriptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6BFDE9B3-786F-531E-BC78-F441ADDC0840}']
  { constructors } 

    {class} function init: DNStylusPointDescription; overload;
    {class} function init(stylusPointPropertyInfos: DDN.mscorlib.DNIEnumerable<DNStylusPointPropertyInfo>): DNStylusPointDescription; overload;

  { static methods } 

    {class} function AreCompatible(stylusPointDescription1: DNStylusPointDescription; stylusPointDescription2: DNStylusPointDescription): Boolean;
    {class} function GetCommonDescription(stylusPointDescription: DNStylusPointDescription; stylusPointDescriptionPreserveInfo: DNStylusPointDescription): DNStylusPointDescription;

  end;

  [DNTypeName('System.Windows.Input.StylusPointDescription')]
  DNStylusPointDescription = interface(DDN.mscorlib.DNObject)
  ['{63E67F2F-9E93-32A1-92B8-2550C3DBB018}']
  { getters & setters } 

    function get_PropertyCount: Int32;

  { methods } 

    function HasProperty(stylusPointProperty: DNStylusPointProperty): Boolean;
    function GetPropertyInfo(stylusPointProperty: DNStylusPointProperty): DNStylusPointPropertyInfo;
    function IsSubsetOf(stylusPointDescriptionSuperset: DNStylusPointDescription): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyCount: Int32 read get_PropertyCount;
  end;

  TDNStylusPointDescription = class(TDNGenericImport<DNStylusPointDescriptionClass, DNStylusPointDescription>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F38D09D0-3B70-53BA-BC4E-D16F80A2EAF6}']
  { constructors } 

    {class} function init(identifier: DDN.mscorlib.DNGuid; isButton: Boolean): DNStylusPointProperty;

  end;

  [DNTypeName('System.Windows.Input.StylusPointProperty')]
  DNStylusPointProperty = interface(DDN.mscorlib.DNObject)
  ['{450B2ECD-099B-315E-B078-C34B903E7070}']
  { getters & setters } 

    function get_Id: DDN.mscorlib.DNGuid;
    function get_IsButton: Boolean;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Id: DDN.mscorlib.DNGuid read get_Id;
    property IsButton: Boolean read get_IsButton;
  end;

  TDNStylusPointProperty = class(TDNGenericImport<DNStylusPointPropertyClass, DNStylusPointProperty>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointPropertyInfoClass = interface(DNStylusPointPropertyClass)
  ['{A81F0D1D-CCF3-5354-8FFA-34F80C44E764}']
  { constructors } 

    {class} function init(stylusPointProperty: DNStylusPointProperty): DNStylusPointPropertyInfo; overload;
    {class} function init(stylusPointProperty: DNStylusPointProperty; minimum: Int32; maximum: Int32; &unit: DNStylusPointPropertyUnit; resolution: Single): DNStylusPointPropertyInfo; overload;

  end;

  [DNTypeName('System.Windows.Input.StylusPointPropertyInfo')]
  DNStylusPointPropertyInfo = interface(DNStylusPointProperty)
  ['{D2CE1899-B30E-39A3-BDDB-B66FEFD36850}']
  { getters & setters } 

    function get_Minimum: Int32;
    function get_Maximum: Int32;
    function get_Resolution: Single;
    function get_Unit: DNStylusPointPropertyUnit;
    function get_Id: DDN.mscorlib.DNGuid;
    function get_IsButton: Boolean;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Minimum: Int32 read get_Minimum;
    property Maximum: Int32 read get_Maximum;
    property Resolution: Single read get_Resolution;
    property &Unit: DNStylusPointPropertyUnit read get_Unit;
    property Id: DDN.mscorlib.DNGuid read get_Id;
    property IsButton: Boolean read get_IsButton;
  end;

  TDNStylusPointPropertyInfo = class(TDNGenericImport<DNStylusPointPropertyInfoClass, DNStylusPointPropertyInfo>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTouchPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{739C0239-F84E-564C-8C95-45772EC3F760}']
  { constructors } 

    {class} function init(device: DNTouchDevice; position: DNPoint; bounds: DNRect; action: DNTouchAction): DNTouchPoint;

  end;

  [DNTypeName('System.Windows.Input.TouchPoint')]
  DNTouchPoint = interface(DDN.mscorlib.DNObject)
  ['{CBA83065-3FEF-3873-9841-96DF4C6009BF}']
  { getters & setters } 

    function get_TouchDevice: DNTouchDevice;
    function get_Position: DNPoint;
    function get_Bounds: DNRect;
    function get_Size: DNSize;
    function get_Action: DNTouchAction;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TouchDevice: DNTouchDevice read get_TouchDevice;
    property Position: DNPoint read get_Position;
    property Bounds: DNRect read get_Bounds;
    property Size: DNSize read get_Size;
    property Action: DNTouchAction read get_Action;
  end;

  TDNTouchPoint = class(TDNGenericImport<DNTouchPointClass, DNTouchPoint>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTraversalRequestClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D16AE65D-C65B-566F-82D8-8E0DAF7D6B71}']
  { constructors } 

    {class} function init(focusNavigationDirection: DNFocusNavigationDirection): DNTraversalRequest;

  end;

  [DNTypeName('System.Windows.Input.TraversalRequest')]
  DNTraversalRequest = interface(DDN.mscorlib.DNObject)
  ['{E0FF0AB7-5D61-3CFE-809F-9AD90E3692C1}']
  { getters & setters } 

    function get_Wrapped: Boolean;
    procedure set_Wrapped(value: Boolean);
    function get_FocusNavigationDirection: DNFocusNavigationDirection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Wrapped: Boolean read get_Wrapped write set_Wrapped;
    property FocusNavigationDirection: DNFocusNavigationDirection read get_FocusNavigationDirection;
  end;

  TDNTraversalRequest = class(TDNGenericImport<DNTraversalRequestClass, DNTraversalRequest>) end;

  //-------------namespace: System.Windows.Interop----------------
  [DNTypeName('System.Windows.Interop.IKeyboardInputSink')]
  DNIKeyboardInputSink = interface(DDN.mscorlib.DNObject)
  ['{C3BFFF23-62B6-3563-9920-C32DAD9E64D9}']
  { getters & setters } 

    function get_KeyboardInputSite: DNIKeyboardInputSite;
    procedure set_KeyboardInputSite(value: DNIKeyboardInputSite);

  { methods } 

    function RegisterKeyboardInputSink(sink: DNIKeyboardInputSink): DNIKeyboardInputSite;
    function TranslateAccelerator(out msg: DNMSG; modifiers: DNModifierKeys): Boolean;
    function TabInto(request: DNTraversalRequest): Boolean;
    function OnMnemonic(out msg: DNMSG; modifiers: DNModifierKeys): Boolean;
    function TranslateChar(out msg: DNMSG; modifiers: DNModifierKeys): Boolean;
    function HasFocusWithin: Boolean;

  { propertys } 

    property KeyboardInputSite: DNIKeyboardInputSite read get_KeyboardInputSite write set_KeyboardInputSite;
  end;

  //-------------namespace: System.Windows.Interop----------------
  [DNTypeName('System.Windows.Interop.IKeyboardInputSite')]
  DNIKeyboardInputSite = interface(DDN.mscorlib.DNObject)
  ['{688FB57F-AFC1-3FF7-ACBE-B97C9F648A6A}']
  { getters & setters } 

    function get_Sink: DNIKeyboardInputSink;

  { methods } 

    procedure Unregister;
    function OnNoMoreTabStops(request: DNTraversalRequest): Boolean;

  { propertys } 

    property Sink: DNIKeyboardInputSink read get_Sink;
  end;

  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.IWeakEventListener')]
  DNIWeakEventListener = interface(DDN.mscorlib.DNObject)
  ['{A2047CE1-23C1-39A8-9036-8B16A2D7AAFF}']
  { methods } 

    function ReceiveWeakEvent(managerType: DDN.mscorlib.DNType; sender: DDN.mscorlib.DNObject; e: DDN.mscorlib.DNEventArgs): Boolean;

  end;

  //-------------namespace: System.Windows.Markup----------------
  [DNTypeName('System.Windows.Markup.INameScope')]
  DNINameScope = interface(DDN.mscorlib.DNObject)
  ['{2302495C-8AFF-3D56-B199-CC3E825247EF}']
  { methods } 

    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    procedure UnregisterName(name: string);
    function FindName(name: string): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.Windows.Markup----------------
  DNMarkupExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{41E50566-121C-50B1-B772-AF07E7E8A0EF}']
  end;

  [DNTypeName('System.Windows.Markup.MarkupExtension')]
  DNMarkupExtension = interface(DDN.mscorlib.DNObject)
  ['{87E32420-AB32-3866-B242-57CCC12169C8}']
  { methods } 

    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMarkupExtension = class(TDNGenericImport<DNMarkupExtensionClass, DNMarkupExtension>) end;

  //-------------namespace: System.Windows.Data----------------
  DNBindingBaseClass = interface(DNMarkupExtensionClass)
  ['{81ADC0A2-47A7-5C8C-A198-0E02300369A4}']
  end;

  [DNTypeName('System.Windows.Data.BindingBase')]
  DNBindingBase = interface(DNMarkupExtension)
  ['{DAD71500-B90E-30FE-8CC6-5E2EA3A03E68}']
  { getters & setters } 

    function get_FallbackValue: DDN.mscorlib.DNObject;
    procedure set_FallbackValue(value: DDN.mscorlib.DNObject);
    function get_StringFormat: string;
    procedure set_StringFormat(value: string);
    function get_TargetNullValue: DDN.mscorlib.DNObject;
    procedure set_TargetNullValue(value: DDN.mscorlib.DNObject);
    function get_BindingGroupName: string;
    procedure set_BindingGroupName(value: string);
    function get_Delay: Int32;
    procedure set_Delay(value: Int32);

  { methods } 

    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function ShouldSerializeFallbackValue: Boolean;
    function ShouldSerializeTargetNullValue: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FallbackValue: DDN.mscorlib.DNObject read get_FallbackValue write set_FallbackValue;
    property StringFormat: string read get_StringFormat write set_StringFormat;
    property TargetNullValue: DDN.mscorlib.DNObject read get_TargetNullValue write set_TargetNullValue;
    property BindingGroupName: string read get_BindingGroupName write set_BindingGroupName;
    property Delay: Int32 read get_Delay write set_Delay;
  end;

  TDNBindingBase = class(TDNGenericImport<DNBindingBaseClass, DNBindingBase>) end;

  //-------------namespace: System.Windows.Markup.Primitives----------------
  DNMarkupObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{406F2606-588B-5F50-8AE5-C0F82707D4DE}']
  end;

  [DNTypeName('System.Windows.Markup.Primitives.MarkupObject')]
  DNMarkupObject = interface(DDN.mscorlib.DNObject)
  ['{5571F728-28B1-3956-8F92-25D2B222531F}']
  { getters & setters } 

    function get_ObjectType: DDN.mscorlib.DNType;
    function get_Instance: DDN.mscorlib.DNObject;
    function get_Properties: DDN.mscorlib.DNIEnumerable<DNMarkupProperty>;
    function get_Attributes: DNAttributeCollection;

  { methods } 

    procedure AssignRootContext(context: DNIValueSerializerContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ObjectType: DDN.mscorlib.DNType read get_ObjectType;
    property Instance: DDN.mscorlib.DNObject read get_Instance;
    property Properties: DDN.mscorlib.DNIEnumerable<DNMarkupProperty> read get_Properties;
    property Attributes: DNAttributeCollection read get_Attributes;
  end;

  TDNMarkupObject = class(TDNGenericImport<DNMarkupObjectClass, DNMarkupObject>) end;

  //-------------namespace: System.Windows.Markup.Primitives----------------
  DNMarkupPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FB5946F8-B51B-5DE1-8AF0-5A208E17C97D}']
  end;

  [DNTypeName('System.Windows.Markup.Primitives.MarkupProperty')]
  DNMarkupProperty = interface(DDN.mscorlib.DNObject)
  ['{F465C255-E04E-3BB3-B7CF-89ABB3804307}']
  { getters & setters } 

    function get_Name: string;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_PropertyDescriptor: DNPropertyDescriptor;
    function get_DependencyProperty: DNDependencyProperty;
    function get_IsAttached: Boolean;
    function get_IsConstructorArgument: Boolean;
    function get_IsValueAsString: Boolean;
    function get_IsContent: Boolean;
    function get_IsKey: Boolean;
    function get_IsComposite: Boolean;
    function get_Value: DDN.mscorlib.DNObject;
    function get_StringValue: string;
    function get_TypeReferences: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function get_Items: DDN.mscorlib.DNIEnumerable<DNMarkupObject>;
    function get_Attributes: DNAttributeCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    property PropertyDescriptor: DNPropertyDescriptor read get_PropertyDescriptor;
    property DependencyProperty: DNDependencyProperty read get_DependencyProperty;
    property IsAttached: Boolean read get_IsAttached;
    property IsConstructorArgument: Boolean read get_IsConstructorArgument;
    property IsValueAsString: Boolean read get_IsValueAsString;
    property IsContent: Boolean read get_IsContent;
    property IsKey: Boolean read get_IsKey;
    property IsComposite: Boolean read get_IsComposite;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property StringValue: string read get_StringValue;
    property TypeReferences: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType> read get_TypeReferences;
    property Items: DDN.mscorlib.DNIEnumerable<DNMarkupObject> read get_Items;
    property Attributes: DNAttributeCollection read get_Attributes;
  end;

  TDNMarkupProperty = class(TDNGenericImport<DNMarkupPropertyClass, DNMarkupProperty>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNServiceProvidersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9FF498D0-994B-5F24-9C2A-8E552D755A09}']
  { constructors } 

    {class} function init: DNServiceProviders;

  end;

  [DNTypeName('System.Windows.Markup.ServiceProviders')]
  DNServiceProviders = interface(DDN.mscorlib.DNObject)
  ['{E52C4415-C8BA-32D0-BB68-B03CAF8B102C}']
  { methods } 

    function GetService(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    procedure AddService(serviceType: DDN.mscorlib.DNType; service: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServiceProviders = class(TDNGenericImport<DNServiceProvidersClass, DNServiceProviders>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNValueSerializerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{330A51B7-7BA3-53A5-B5D9-9464822AB01D}']
  { static methods } 

    {class} function GetSerializerFor(&type: DDN.mscorlib.DNType): DNValueSerializer; overload;
    {class} function GetSerializerFor(descriptor: DNPropertyDescriptor): DNValueSerializer; overload;
    {class} function GetSerializerFor(&type: DDN.mscorlib.DNType; context: DNIValueSerializerContext): DNValueSerializer; overload;
    {class} function GetSerializerFor(descriptor: DNPropertyDescriptor; context: DNIValueSerializerContext): DNValueSerializer; overload;

  end;

  [DNTypeName('System.Windows.Markup.ValueSerializer')]
  DNValueSerializer = interface(DDN.mscorlib.DNObject)
  ['{40FFD90D-F735-37EA-9FB9-A1908D07CE0E}']
  { methods } 

    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): Boolean;
    function CanConvertFromString(value: string; context: DNIValueSerializerContext): Boolean;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): string;
    function ConvertFromString(value: string; context: DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValueSerializer = class(TDNGenericImport<DNValueSerializerClass, DNValueSerializer>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlLanguageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C2553D5F-CF68-5D3E-8D19-E686AFB03BFC}']
  { static getter & setter } 

    {class} function get_Empty: DNXmlLanguage;

  { static methods } 

    {class} function GetLanguage(ietfLanguageTag: string): DNXmlLanguage;

  { static propertys } 

    {class} property Empty: DNXmlLanguage read get_Empty;
  end;

  [DNTypeName('System.Windows.Markup.XmlLanguage')]
  DNXmlLanguage = interface(DDN.mscorlib.DNObject)
  ['{E2D5D25A-E421-3078-931E-AAD300FF3294}']
  { getters & setters } 

    function get_IetfLanguageTag: string;

  { methods } 

    function ToString: string;
    function GetEquivalentCulture: DDN.mscorlib.DNCultureInfo;
    function GetSpecificCulture: DDN.mscorlib.DNCultureInfo;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IetfLanguageTag: string read get_IetfLanguageTag;
  end;

  TDNXmlLanguage = class(TDNGenericImport<DNXmlLanguageClass, DNXmlLanguage>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNClockCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{745C1321-7EFA-59C6-AC6C-4CBCF49ACE2D}']
  { static methods } 

    {class} function Equals(objA: DNClockCollection; objB: DNClockCollection): Boolean; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.ClockCollection')]
  DNClockCollection = interface(DDN.mscorlib.DNICollection<DNClock>)
  ['{87A56F8C-EDA4-3E6E-A699-A28E900EA327}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNClock;

  { methods } 

    function &Contains(item: DNClock): Boolean;
    procedure CopyTo(&array: TArray<DNClock>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNClock read get_Item; default;
  end;

  TDNClockCollection = class(TDNGenericImport<DNClockCollectionClass, DNClockCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.IEasingFunction')]
  DNIEasingFunction = interface(DDN.mscorlib.DNObject)
  ['{677EE4F0-B92B-3094-B722-7C9DE2A27815}']
  { methods } 

    function Ease(normalizedTime: Double): Double;

  end;

  //-------------namespace: System.Windows.Media----------------
  DNColorContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BFE2E51B-0942-51B2-AF12-A8C384B56500}']
  { constructors } 

    {class} function init(profileUri: DNUri): DNColorContext; overload;
    {class} function init(pixelFormat: DNPixelFormat): DNColorContext; overload;

  end;

  [DNTypeName('System.Windows.Media.ColorContext')]
  DNColorContext = interface(DDN.mscorlib.DNObject)
  ['{5AE6C082-A088-3B23-AD15-3912EBA923FB}']
  { getters & setters } 

    function get_ProfileUri: DNUri;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function OpenProfileStream: DDN.mscorlib.DNStream;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProfileUri: DNUri read get_ProfileUri;
  end;

  TDNColorContext = class(TDNGenericImport<DNColorContextClass, DNColorContext>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFamilyTypefaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ADDD2140-E685-5DBA-AF18-3349099F4E2C}']
  { constructors } 

    {class} function init: DNFamilyTypeface;

  end;

  [DNTypeName('System.Windows.Media.FamilyTypeface')]
  DNFamilyTypeface = interface(DDN.mscorlib.DNObject)
  ['{239B589A-AB41-3CAF-B9F2-12294B93BA20}']
  { getters & setters } 

    function get_Style: DNFontStyle;
    procedure set_Style(value: DNFontStyle);
    function get_Weight: DNFontWeight;
    procedure set_Weight(value: DNFontWeight);
    function get_Stretch: DNFontStretch;
    procedure set_Stretch(value: DNFontStretch);
    function get_UnderlinePosition: Double;
    procedure set_UnderlinePosition(value: Double);
    function get_UnderlineThickness: Double;
    procedure set_UnderlineThickness(value: Double);
    function get_StrikethroughPosition: Double;
    procedure set_StrikethroughPosition(value: Double);
    function get_StrikethroughThickness: Double;
    procedure set_StrikethroughThickness(value: Double);
    function get_CapsHeight: Double;
    procedure set_CapsHeight(value: Double);
    function get_XHeight: Double;
    procedure set_XHeight(value: Double);
    function get_AdjustedFaceNames: DDN.mscorlib.DNIDictionary<DNXmlLanguage, string>;
    function get_DeviceFontName: string;
    procedure set_DeviceFontName(value: string);

  { methods } 

    function Equals(typeface: DNFamilyTypeface): Boolean; overload;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Style: DNFontStyle read get_Style write set_Style;
    property Weight: DNFontWeight read get_Weight write set_Weight;
    property Stretch: DNFontStretch read get_Stretch write set_Stretch;
    property UnderlinePosition: Double read get_UnderlinePosition write set_UnderlinePosition;
    property UnderlineThickness: Double read get_UnderlineThickness write set_UnderlineThickness;
    property StrikethroughPosition: Double read get_StrikethroughPosition write set_StrikethroughPosition;
    property StrikethroughThickness: Double read get_StrikethroughThickness write set_StrikethroughThickness;
    property CapsHeight: Double read get_CapsHeight write set_CapsHeight;
    property XHeight: Double read get_XHeight write set_XHeight;
    property AdjustedFaceNames: DDN.mscorlib.DNIDictionary<DNXmlLanguage, string> read get_AdjustedFaceNames;
    property DeviceFontName: string read get_DeviceFontName write set_DeviceFontName;
  end;

  TDNFamilyTypeface = class(TDNGenericImport<DNFamilyTypefaceClass, DNFamilyTypeface>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFamilyTypefaceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F684DFA-4946-5975-ADE0-01D9D4C18090}']
  end;

  [DNTypeName('System.Windows.Media.FamilyTypefaceCollection')]
  DNFamilyTypefaceCollection = interface(DDN.mscorlib.DNObject)
  ['{0B6A11AD-0B7C-3469-B91D-33320AFF66D6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(item: DNFamilyTypeface): Boolean;
    procedure CopyTo(&array: TArray<DNFamilyTypeface>; index: Int32);
    function IndexOf(item: DNFamilyTypeface): Int32;
    procedure Insert(index: Int32; item: DNFamilyTypeface);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNFamilyTypefaceCollection = class(TDNGenericImport<DNFamilyTypefaceCollectionClass, DNFamilyTypefaceCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFontFamilyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{10CF9719-07D1-5F0F-AFB2-F0B73ECA909B}']
  { constructors } 

    {class} function init(familyName: string): DNFontFamily; overload;
    {class} function init(baseUri: DNUri; familyName: string): DNFontFamily; overload;
    {class} function init: DNFontFamily; overload;

  end;

  [DNTypeName('System.Windows.Media.FontFamily')]
  DNFontFamily = interface(DDN.mscorlib.DNObject)
  ['{D166D80B-B80F-31C2-A29C-728C1B860FE8}']
  { getters & setters } 

    function get_FamilyNames: DNLanguageSpecificStringDictionary;
    function get_FamilyTypefaces: DNFamilyTypefaceCollection;
    function get_FamilyMaps: DNFontFamilyMapCollection;
    function get_Source: string;
    function get_BaseUri: DNUri;
    function get_Baseline: Double;
    procedure set_Baseline(value: Double);
    function get_LineSpacing: Double;
    procedure set_LineSpacing(value: Double);

  { methods } 

    function ToString: string;
    function GetTypefaces: DDN.mscorlib.DNICollection<DNTypeface>;
    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FamilyNames: DNLanguageSpecificStringDictionary read get_FamilyNames;
    property FamilyTypefaces: DNFamilyTypefaceCollection read get_FamilyTypefaces;
    property FamilyMaps: DNFontFamilyMapCollection read get_FamilyMaps;
    property Source: string read get_Source;
    property BaseUri: DNUri read get_BaseUri;
    property Baseline: Double read get_Baseline write set_Baseline;
    property LineSpacing: Double read get_LineSpacing write set_LineSpacing;
  end;

  TDNFontFamily = class(TDNGenericImport<DNFontFamilyClass, DNFontFamily>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFontFamilyMapClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FB67F5EB-F741-57E2-AF30-35D349815720}']
  { constructors } 

    {class} function init: DNFontFamilyMap;

  end;

  [DNTypeName('System.Windows.Media.FontFamilyMap')]
  DNFontFamilyMap = interface(DDN.mscorlib.DNObject)
  ['{05B6B73A-E6D8-37DC-BC45-825D7A62CC60}']
  { getters & setters } 

    function get_Unicode: string;
    procedure set_Unicode(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_Language: DNXmlLanguage;
    procedure set_Language(value: DNXmlLanguage);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Unicode: string read get_Unicode write set_Unicode;
    property Target: string read get_Target write set_Target;
    property Scale: Double read get_Scale write set_Scale;
    property Language: DNXmlLanguage read get_Language write set_Language;
  end;

  TDNFontFamilyMap = class(TDNGenericImport<DNFontFamilyMapClass, DNFontFamilyMap>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFontFamilyMapCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ED28A253-3827-5B70-8552-876B1AF8F977}']
  end;

  [DNTypeName('System.Windows.Media.FontFamilyMapCollection')]
  DNFontFamilyMapCollection = interface(DDN.mscorlib.DNObject)
  ['{378C5830-C108-3190-B967-CEE0B7214397}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(item: DNFontFamilyMap): Boolean;
    function IndexOf(item: DNFontFamilyMap): Int32;
    procedure Insert(index: Int32; item: DNFontFamilyMap);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNFontFamilyMap>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNFontFamilyMapCollection = class(TDNGenericImport<DNFontFamilyMapCollectionClass, DNFontFamilyMapCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFormattedTextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0CCEFB5-369C-5401-93C6-07009F688475}']
  { constructors } 

    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush): DNFormattedText; overload;
    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush; pixelsPerDip: Double): DNFormattedText; overload;
    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush; numberSubstitution: DNNumberSubstitution): DNFormattedText; overload;
    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush; numberSubstitution: DNNumberSubstitution; pixelsPerDip: Double): DNFormattedText; overload;
    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush; numberSubstitution: DNNumberSubstitution; textFormattingMode: DNTextFormattingMode): DNFormattedText; overload;
    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush; numberSubstitution: DNNumberSubstitution; textFormattingMode: DNTextFormattingMode; pixelsPerDip: Double): DNFormattedText; overload;

  end;

  [DNTypeName('System.Windows.Media.FormattedText')]
  DNFormattedText = interface(DDN.mscorlib.DNObject)
  ['{9949C94F-AC98-3503-A101-40E5B4F55276}']
  { getters & setters } 

    function get_Text: string;
    function get_PixelsPerDip: Double;
    procedure set_PixelsPerDip(value: Double);
    function get_FlowDirection: DNFlowDirection;
    procedure set_FlowDirection(value: DNFlowDirection);
    function get_TextAlignment: DNTextAlignment;
    procedure set_TextAlignment(value: DNTextAlignment);
    function get_LineHeight: Double;
    procedure set_LineHeight(value: Double);
    function get_MaxTextWidth: Double;
    procedure set_MaxTextWidth(value: Double);
    function get_MaxTextHeight: Double;
    procedure set_MaxTextHeight(value: Double);
    function get_MaxLineCount: Int32;
    procedure set_MaxLineCount(value: Int32);
    function get_Trimming: DNTextTrimming;
    procedure set_Trimming(value: DNTextTrimming);
    function get_Height: Double;
    function get_Extent: Double;
    function get_Baseline: Double;
    function get_OverhangAfter: Double;
    function get_OverhangLeading: Double;
    function get_OverhangTrailing: Double;
    function get_Width: Double;
    function get_WidthIncludingTrailingWhitespace: Double;
    function get_MinWidth: Double;

  { methods } 

    procedure SetForegroundBrush(foregroundBrush: DNBrush); overload;
    procedure SetFontFamily(fontFamily: string); overload;
    procedure SetFontFamily(fontFamily: string; startIndex: Int32; count: Int32); overload;
    procedure SetFontFamily(fontFamily: DNFontFamily); overload;
    procedure SetFontSize(emSize: Double); overload;
    procedure SetCulture(culture: DDN.mscorlib.DNCultureInfo); overload;
    procedure SetNumberSubstitution(numberSubstitution: DNNumberSubstitution); overload;
    procedure SetFontWeight(weight: DNFontWeight); overload;
    procedure SetFontStyle(style: DNFontStyle); overload;
    procedure SetFontStretch(stretch: DNFontStretch); overload;
    procedure SetFontTypeface(typeface: DNTypeface); overload;
    procedure SetTextDecorations(textDecorations: DNTextDecorationCollection); overload;
    procedure SetMaxTextWidths(maxTextWidths: TArray<Double>);
    function BuildHighlightGeometry(origin: DNPoint): DNGeometry; overload;
    function BuildGeometry(origin: DNPoint): DNGeometry;
    function BuildHighlightGeometry(origin: DNPoint; startIndex: Int32; count: Int32): DNGeometry; overload;
    procedure SetForegroundBrush(foregroundBrush: DNBrush; startIndex: Int32; count: Int32); overload;
    procedure SetFontFamily(fontFamily: DNFontFamily; startIndex: Int32; count: Int32); overload;
    procedure SetFontSize(emSize: Double; startIndex: Int32; count: Int32); overload;
    procedure SetCulture(culture: DDN.mscorlib.DNCultureInfo; startIndex: Int32; count: Int32); overload;
    procedure SetNumberSubstitution(numberSubstitution: DNNumberSubstitution; startIndex: Int32; count: Int32); overload;
    procedure SetFontWeight(weight: DNFontWeight; startIndex: Int32; count: Int32); overload;
    procedure SetFontStyle(style: DNFontStyle; startIndex: Int32; count: Int32); overload;
    procedure SetFontStretch(stretch: DNFontStretch; startIndex: Int32; count: Int32); overload;
    procedure SetFontTypeface(typeface: DNTypeface; startIndex: Int32; count: Int32); overload;
    procedure SetTextDecorations(textDecorations: DNTextDecorationCollection; startIndex: Int32; count: Int32); overload;
    function GetMaxTextWidths: TArray<Double>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property PixelsPerDip: Double read get_PixelsPerDip write set_PixelsPerDip;
    property FlowDirection: DNFlowDirection read get_FlowDirection write set_FlowDirection;
    property TextAlignment: DNTextAlignment read get_TextAlignment write set_TextAlignment;
    property LineHeight: Double read get_LineHeight write set_LineHeight;
    property MaxTextWidth: Double read get_MaxTextWidth write set_MaxTextWidth;
    property MaxTextHeight: Double read get_MaxTextHeight write set_MaxTextHeight;
    property MaxLineCount: Int32 read get_MaxLineCount write set_MaxLineCount;
    property Trimming: DNTextTrimming read get_Trimming write set_Trimming;
    property Height: Double read get_Height;
    property Extent: Double read get_Extent;
    property Baseline: Double read get_Baseline;
    property OverhangAfter: Double read get_OverhangAfter;
    property OverhangLeading: Double read get_OverhangLeading;
    property OverhangTrailing: Double read get_OverhangTrailing;
    property Width: Double read get_Width;
    property WidthIncludingTrailingWhitespace: Double read get_WidthIncludingTrailingWhitespace;
    property MinWidth: Double read get_MinWidth;
  end;

  TDNFormattedText = class(TDNGenericImport<DNFormattedTextClass, DNFormattedText>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGlyphRunClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D9D349E1-6D17-51CA-A781-1D94C0BC0B15}']
  { constructors } 

    {class} function init: DNGlyphRun; overload;
    {class} function init(pixelsPerDip: Single): DNGlyphRun; overload;
    {class} function init(glyphTypeface: DNGlyphTypeface; bidiLevel: Int32; isSideways: Boolean; renderingEmSize: Double; pixelsPerDip: Single; glyphIndices: DDN.mscorlib.DNIList<UInt16>; baselineOrigin: DNPoint; advanceWidths: DDN.mscorlib.DNIList<Double>; glyphOffsets: DDN.mscorlib.DNIList<DNPoint>; characters: DDN.mscorlib.DNIList<Char>; deviceFontName: string; clusterMap: DDN.mscorlib.DNIList<UInt16>; caretStops: DDN.mscorlib.DNIList<Boolean>; language: DNXmlLanguage): DNGlyphRun; overload;
    {class} function init(glyphTypeface: DNGlyphTypeface; bidiLevel: Int32; isSideways: Boolean; renderingEmSize: Double; glyphIndices: DDN.mscorlib.DNIList<UInt16>; baselineOrigin: DNPoint; advanceWidths: DDN.mscorlib.DNIList<Double>; glyphOffsets: DDN.mscorlib.DNIList<DNPoint>; characters: DDN.mscorlib.DNIList<Char>; deviceFontName: string; clusterMap: DDN.mscorlib.DNIList<UInt16>; caretStops: DDN.mscorlib.DNIList<Boolean>; language: DNXmlLanguage): DNGlyphRun; overload;

  end;

  [DNTypeName('System.Windows.Media.GlyphRun')]
  DNGlyphRun = interface(DDN.mscorlib.DNObject)
  ['{1095A564-1A22-3109-BE47-E24CB608D6C3}']
  { getters & setters } 

    function get_PixelsPerDip: Single;
    procedure set_PixelsPerDip(value: Single);
    function get_BaselineOrigin: DNPoint;
    procedure set_BaselineOrigin(value: DNPoint);
    function get_FontRenderingEmSize: Double;
    procedure set_FontRenderingEmSize(value: Double);
    function get_GlyphTypeface: DNGlyphTypeface;
    procedure set_GlyphTypeface(value: DNGlyphTypeface);
    function get_BidiLevel: Int32;
    procedure set_BidiLevel(value: Int32);
    function get_IsSideways: Boolean;
    procedure set_IsSideways(value: Boolean);
    function get_CaretStops: DDN.mscorlib.DNIList<Boolean>;
    procedure set_CaretStops(value: DDN.mscorlib.DNIList<Boolean>);
    function get_IsHitTestable: Boolean;
    function get_ClusterMap: DDN.mscorlib.DNIList<UInt16>;
    procedure set_ClusterMap(value: DDN.mscorlib.DNIList<UInt16>);
    function get_Characters: DDN.mscorlib.DNIList<Char>;
    procedure set_Characters(value: DDN.mscorlib.DNIList<Char>);
    function get_GlyphIndices: DDN.mscorlib.DNIList<UInt16>;
    procedure set_GlyphIndices(value: DDN.mscorlib.DNIList<UInt16>);
    function get_AdvanceWidths: DDN.mscorlib.DNIList<Double>;
    procedure set_AdvanceWidths(value: DDN.mscorlib.DNIList<Double>);
    function get_GlyphOffsets: DDN.mscorlib.DNIList<DNPoint>;
    procedure set_GlyphOffsets(value: DDN.mscorlib.DNIList<DNPoint>);
    function get_Language: DNXmlLanguage;
    procedure set_Language(value: DNXmlLanguage);
    function get_DeviceFontName: string;
    procedure set_DeviceFontName(value: string);

  { methods } 

    function ComputeInkBoundingBox: DNRect;
    function BuildGeometry: DNGeometry;
    function ComputeAlignmentBox: DNRect;
    function GetDistanceFromCaretCharacterHit(characterHit: DNCharacterHit): Double;
    function GetCaretCharacterHitFromDistance(distance: Double; out isInside: Boolean): DNCharacterHit;
    function GetNextCaretCharacterHit(characterHit: DNCharacterHit): DNCharacterHit;
    function GetPreviousCaretCharacterHit(characterHit: DNCharacterHit): DNCharacterHit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PixelsPerDip: Single read get_PixelsPerDip write set_PixelsPerDip;
    property BaselineOrigin: DNPoint read get_BaselineOrigin write set_BaselineOrigin;
    property FontRenderingEmSize: Double read get_FontRenderingEmSize write set_FontRenderingEmSize;
    property GlyphTypeface: DNGlyphTypeface read get_GlyphTypeface write set_GlyphTypeface;
    property BidiLevel: Int32 read get_BidiLevel write set_BidiLevel;
    property IsSideways: Boolean read get_IsSideways write set_IsSideways;
    property CaretStops: DDN.mscorlib.DNIList<Boolean> read get_CaretStops write set_CaretStops;
    property IsHitTestable: Boolean read get_IsHitTestable;
    property ClusterMap: DDN.mscorlib.DNIList<UInt16> read get_ClusterMap write set_ClusterMap;
    property Characters: DDN.mscorlib.DNIList<Char> read get_Characters write set_Characters;
    property GlyphIndices: DDN.mscorlib.DNIList<UInt16> read get_GlyphIndices write set_GlyphIndices;
    property AdvanceWidths: DDN.mscorlib.DNIList<Double> read get_AdvanceWidths write set_AdvanceWidths;
    property GlyphOffsets: DDN.mscorlib.DNIList<DNPoint> read get_GlyphOffsets write set_GlyphOffsets;
    property Language: DNXmlLanguage read get_Language write set_Language;
    property DeviceFontName: string read get_DeviceFontName write set_DeviceFontName;
  end;

  TDNGlyphRun = class(TDNGenericImport<DNGlyphRunClass, DNGlyphRun>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGlyphTypefaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9D6C755D-26FB-565E-BB7F-263A5B7CFA04}']
  { constructors } 

    {class} function init: DNGlyphTypeface; overload;
    {class} function init(typefaceSource: DNUri): DNGlyphTypeface; overload;
    {class} function init(typefaceSource: DNUri; styleSimulations: DNStyleSimulations): DNGlyphTypeface; overload;

  end;

  [DNTypeName('System.Windows.Media.GlyphTypeface')]
  DNGlyphTypeface = interface(DDN.mscorlib.DNObject)
  ['{8719783C-1A2F-3AA7-BF74-E59B490BF3C5}']
  { getters & setters } 

    function get_FontUri: DNUri;
    procedure set_FontUri(value: DNUri);
    function get_FamilyNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_FaceNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Win32FamilyNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Win32FaceNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_VersionStrings: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Copyrights: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_ManufacturerNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Trademarks: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_DesignerNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Descriptions: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_VendorUrls: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_DesignerUrls: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_LicenseDescriptions: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_SampleTexts: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Style: DNFontStyle;
    function get_Weight: DNFontWeight;
    function get_Stretch: DNFontStretch;
    function get_Version: Double;
    function get_Height: Double;
    function get_Baseline: Double;
    function get_CapsHeight: Double;
    function get_XHeight: Double;
    function get_Symbol: Boolean;
    function get_UnderlinePosition: Double;
    function get_UnderlineThickness: Double;
    function get_StrikethroughPosition: Double;
    function get_StrikethroughThickness: Double;
    function get_EmbeddingRights: DNFontEmbeddingRight;
    function get_AdvanceWidths: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_AdvanceHeights: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_LeftSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_RightSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_TopSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_BottomSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_DistancesFromHorizontalBaselineToBlackBoxBottom: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_CharacterToGlyphMap: DDN.mscorlib.DNIDictionary<Int32, UInt16>;
    function get_StyleSimulations: DNStyleSimulations;
    procedure set_StyleSimulations(value: DNStyleSimulations);
    function get_GlyphCount: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetGlyphOutline(glyphIndex: UInt16; renderingEmSize: Double; hintingEmSize: Double): DNGeometry;
    function GetFontStream: DDN.mscorlib.DNStream;
    function ComputeSubset(glyphs: DDN.mscorlib.DNICollection<UInt16>): TArray<Byte>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontUri: DNUri read get_FontUri write set_FontUri;
    property FamilyNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_FamilyNames;
    property FaceNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_FaceNames;
    property Win32FamilyNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_Win32FamilyNames;
    property Win32FaceNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_Win32FaceNames;
    property VersionStrings: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_VersionStrings;
    property Copyrights: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_Copyrights;
    property ManufacturerNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_ManufacturerNames;
    property Trademarks: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_Trademarks;
    property DesignerNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_DesignerNames;
    property Descriptions: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_Descriptions;
    property VendorUrls: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_VendorUrls;
    property DesignerUrls: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_DesignerUrls;
    property LicenseDescriptions: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_LicenseDescriptions;
    property SampleTexts: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_SampleTexts;
    property Style: DNFontStyle read get_Style;
    property Weight: DNFontWeight read get_Weight;
    property Stretch: DNFontStretch read get_Stretch;
    property Version: Double read get_Version;
    property Height: Double read get_Height;
    property Baseline: Double read get_Baseline;
    property CapsHeight: Double read get_CapsHeight;
    property XHeight: Double read get_XHeight;
    property Symbol: Boolean read get_Symbol;
    property UnderlinePosition: Double read get_UnderlinePosition;
    property UnderlineThickness: Double read get_UnderlineThickness;
    property StrikethroughPosition: Double read get_StrikethroughPosition;
    property StrikethroughThickness: Double read get_StrikethroughThickness;
    property EmbeddingRights: DNFontEmbeddingRight read get_EmbeddingRights;
    property AdvanceWidths: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_AdvanceWidths;
    property AdvanceHeights: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_AdvanceHeights;
    property LeftSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_LeftSideBearings;
    property RightSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_RightSideBearings;
    property TopSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_TopSideBearings;
    property BottomSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_BottomSideBearings;
    property DistancesFromHorizontalBaselineToBlackBoxBottom: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_DistancesFromHorizontalBaselineToBlackBoxBottom;
    property CharacterToGlyphMap: DDN.mscorlib.DNIDictionary<Int32, UInt16> read get_CharacterToGlyphMap;
    property StyleSimulations: DNStyleSimulations read get_StyleSimulations write set_StyleSimulations;
    property GlyphCount: Int32 read get_GlyphCount;
  end;

  TDNGlyphTypeface = class(TDNGenericImport<DNGlyphTypefaceClass, DNGlyphTypeface>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPointHitTestResultClass = interface(DNObjectClass)
  ['{3857E1E4-FFE8-535E-86C1-981FCC13C59D}']
  { constructors } 

    {class} function init(visualHit: DNVisual; pointHit: DNPoint): DNPointHitTestResult;

  end;

  [DNTypeName('System.Windows.Media.PointHitTestResult')]
  DNPointHitTestResult = interface(DNObject)
  ['{082B7A91-0313-39EE-B6D1-4ABAB9AA5DCD}']
  { getters & setters } 

    function get_PointHit: DNPoint;
    function get_VisualHit: DNVisual;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PointHit: DNPoint read get_PointHit;
    property VisualHit: DNVisual read get_VisualHit;
  end;

  TDNPointHitTestResult = class(TDNGenericImport<DNPointHitTestResultClass, DNPointHitTestResult>) end;

  //-------------namespace: System.Windows.Media----------------
  DNLanguageSpecificStringDictionaryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{873AF65C-C8A2-5D14-B8D5-772DFB3DD611}']
  end;

  [DNTypeName('System.Windows.Media.LanguageSpecificStringDictionary')]
  DNLanguageSpecificStringDictionary = interface(DDN.mscorlib.DNObject)
  ['{09C534B8-5582-3630-9E67-CBF9384779B7}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection<DNXmlLanguage>;
    function get_Values: DDN.mscorlib.DNICollection<string>;

  { methods } 

    function TryGetValue(key: DNXmlLanguage; out value: string): Boolean;
    function ContainsKey(key: DNXmlLanguage): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Keys: DDN.mscorlib.DNICollection<DNXmlLanguage> read get_Keys;
    property Values: DDN.mscorlib.DNICollection<string> read get_Values;
  end;

  TDNLanguageSpecificStringDictionary = class(TDNGenericImport<DNLanguageSpecificStringDictionaryClass, DNLanguageSpecificStringDictionary>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNVisual3DCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1564A60-88D6-576A-B608-CB46783B53A3}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.Visual3DCollection')]
  DNVisual3DCollection = interface(DDN.mscorlib.DNObject)
  ['{3FA8FCA0-E2CE-3E69-A74C-A28401A56200}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Insert(index: Int32; value: DNVisual3D);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNVisual3D>; index: Int32);
    function &Contains(value: DNVisual3D): Boolean;
    function IndexOf(value: DNVisual3D): Int32;
    function GetEnumerator: DNVisual3DCollection_Enumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNVisual3DCollection = class(TDNGenericImport<DNVisual3DCollectionClass, DNVisual3DCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNNumberSubstitutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1873EBC6-919A-58D5-99EF-7D093A01DFC1}']
  { constructors } 

    {class} function init: DNNumberSubstitution; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_CultureSourceProperty: DNDependencyProperty;
   function __fakeFieldGet_CultureOverrideProperty: DNDependencyProperty;
   function __fakeFieldGet_SubstitutionProperty: DNDependencyProperty;

  { static fields } 

    {class} property CultureSourceProperty: DNDependencyProperty read __fakeFieldGet_CultureSourceProperty;
    {class} property CultureOverrideProperty: DNDependencyProperty read __fakeFieldGet_CultureOverrideProperty;
    {class} property SubstitutionProperty: DNDependencyProperty read __fakeFieldGet_SubstitutionProperty;

  { static methods } 

    {class} function GetCultureOverride(target: DNDependencyObject): DDN.mscorlib.DNCultureInfo;
    {class} procedure SetCultureOverride(target: DNDependencyObject; value: DDN.mscorlib.DNCultureInfo);

  end;

  [DNTypeName('System.Windows.Media.NumberSubstitution')]
  DNNumberSubstitution = interface(DDN.mscorlib.DNObject)
  ['{B87D6163-3198-3FB7-9079-21EEDBCB8A97}']
  { getters & setters } 

    function get_CultureOverride: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureOverride(value: DDN.mscorlib.DNCultureInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CultureOverride: DDN.mscorlib.DNCultureInfo read get_CultureOverride write set_CultureOverride;
  end;

  TDNNumberSubstitution = class(TDNGenericImport<DNNumberSubstitutionClass, DNNumberSubstitution>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTypefaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{86BFFD4C-0DED-51DA-987E-95E6E2D74CE5}']
  { constructors } 

    {class} function init(typefaceName: string): DNTypeface; overload;
    {class} function init(fontFamily: DNFontFamily; style: DNFontStyle; weight: DNFontWeight; stretch: DNFontStretch): DNTypeface; overload;
    {class} function init(fontFamily: DNFontFamily; style: DNFontStyle; weight: DNFontWeight; stretch: DNFontStretch; fallbackFontFamily: DNFontFamily): DNTypeface; overload;

  end;

  [DNTypeName('System.Windows.Media.Typeface')]
  DNTypeface = interface(DDN.mscorlib.DNObject)
  ['{6A5398DC-ED15-3788-BE7B-F5B88AC2EEC6}']
  { getters & setters } 

    function get_FontFamily: DNFontFamily;
    function get_Weight: DNFontWeight;
    function get_Style: DNFontStyle;
    function get_Stretch: DNFontStretch;
    function get_IsObliqueSimulated: Boolean;
    function get_IsBoldSimulated: Boolean;
    function get_XHeight: Double;
    function get_CapsHeight: Double;
    function get_UnderlinePosition: Double;
    function get_UnderlineThickness: Double;
    function get_StrikethroughPosition: Double;
    function get_StrikethroughThickness: Double;
    function get_FaceNames: DNLanguageSpecificStringDictionary;

  { methods } 

    function TryGetGlyphTypeface(out glyphTypeface: DNGlyphTypeface): Boolean;
    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontFamily: DNFontFamily read get_FontFamily;
    property Weight: DNFontWeight read get_Weight;
    property Style: DNFontStyle read get_Style;
    property Stretch: DNFontStretch read get_Stretch;
    property IsObliqueSimulated: Boolean read get_IsObliqueSimulated;
    property IsBoldSimulated: Boolean read get_IsBoldSimulated;
    property XHeight: Double read get_XHeight;
    property CapsHeight: Double read get_CapsHeight;
    property UnderlinePosition: Double read get_UnderlinePosition;
    property UnderlineThickness: Double read get_UnderlineThickness;
    property StrikethroughPosition: Double read get_StrikethroughPosition;
    property StrikethroughThickness: Double read get_StrikethroughThickness;
    property FaceNames: DNLanguageSpecificStringDictionary read get_FaceNames;
  end;

  TDNTypeface = class(TDNGenericImport<DNTypefaceClass, DNTypeface>) end;

  //-------------namespace: System.Windows----------------
  DNPropertyMetadataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9645A368-C862-5437-866B-6C7C71730A73}']
  { constructors } 

    {class} function init: DNPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject): DNPropertyMetadata; overload;
    {class} function init(propertyChangedCallback: DNPropertyChangedCallback): DNPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DNPropertyChangedCallback): DNPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DNPropertyChangedCallback; coerceValueCallback: DNCoerceValueCallback): DNPropertyMetadata; overload;

  end;

  [DNTypeName('System.Windows.PropertyMetadata')]
  DNPropertyMetadata = interface(DDN.mscorlib.DNObject)
  ['{A5B94737-0792-361D-9239-1F0A7E9F9DBD}']
  { getters & setters } 

    function get_DefaultValue: DDN.mscorlib.DNObject;
    procedure set_DefaultValue(value: DDN.mscorlib.DNObject);
    function get_PropertyChangedCallback: DNPropertyChangedCallback;
    procedure set_PropertyChangedCallback(value: DNPropertyChangedCallback);
    function get_CoerceValueCallback: DNCoerceValueCallback;
    procedure set_CoerceValueCallback(value: DNCoerceValueCallback);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue write set_DefaultValue;
    property PropertyChangedCallback: DNPropertyChangedCallback read get_PropertyChangedCallback write set_PropertyChangedCallback;
    property CoerceValueCallback: DNCoerceValueCallback read get_CoerceValueCallback write set_CoerceValueCallback;
  end;

  TDNPropertyMetadata = class(TDNGenericImport<DNPropertyMetadataClass, DNPropertyMetadata>) end;

  //-------------namespace: System.Windows----------------
  DNUIPropertyMetadataClass = interface(DNPropertyMetadataClass)
  ['{1D217E7D-883D-5331-BBFD-BC5CFE9B7465}']
  { constructors } 

    {class} function init: DNUIPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject): DNUIPropertyMetadata; overload;
    {class} function init(propertyChangedCallback: DNPropertyChangedCallback): DNUIPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DNPropertyChangedCallback): DNUIPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DNPropertyChangedCallback; coerceValueCallback: DNCoerceValueCallback): DNUIPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DNPropertyChangedCallback; coerceValueCallback: DNCoerceValueCallback; isAnimationProhibited: Boolean): DNUIPropertyMetadata; overload;

  end;

  [DNTypeName('System.Windows.UIPropertyMetadata')]
  DNUIPropertyMetadata = interface(DNPropertyMetadata)
  ['{E3B1B5B0-D312-31D0-8E9E-3F5F383A7A2E}']
  { getters & setters } 

    function get_IsAnimationProhibited: Boolean;
    procedure set_IsAnimationProhibited(value: Boolean);
    function get_DefaultValue: DDN.mscorlib.DNObject;
    procedure set_DefaultValue(value: DDN.mscorlib.DNObject);
    function get_PropertyChangedCallback: DNPropertyChangedCallback;
    procedure set_PropertyChangedCallback(value: DNPropertyChangedCallback);
    function get_CoerceValueCallback: DNCoerceValueCallback;
    procedure set_CoerceValueCallback(value: DNCoerceValueCallback);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAnimationProhibited: Boolean read get_IsAnimationProhibited write set_IsAnimationProhibited;
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue write set_DefaultValue;
    property PropertyChangedCallback: DNPropertyChangedCallback read get_PropertyChangedCallback write set_PropertyChangedCallback;
    property CoerceValueCallback: DNCoerceValueCallback read get_CoerceValueCallback write set_CoerceValueCallback;
  end;

  TDNUIPropertyMetadata = class(TDNGenericImport<DNUIPropertyMetadataClass, DNUIPropertyMetadata>) end;

  //-------------namespace: System.Windows----------------
  DNResourceDictionaryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AC04507E-2E12-5CF8-9B2F-8C05218AF2E3}']
  { constructors } 

    {class} function init: DNResourceDictionary;

  end;

  [DNTypeName('System.Windows.ResourceDictionary')]
  DNResourceDictionary = interface(DDN.mscorlib.DNObject)
  ['{502AE678-474B-3F5C-A1A8-6A391345517E}']
  { getters & setters } 

    function get_Source: DNUri;
    procedure set_Source(value: DNUri);
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_InvalidatesImplicitDataTemplateResources: Boolean;
    procedure set_InvalidatesImplicitDataTemplateResources(value: Boolean);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DDN.mscorlib.DNDictionaryEntry>; arrayIndex: Int32);
    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    procedure UnregisterName(name: string);
    function FindName(name: string): DDN.mscorlib.DNObject;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    procedure BeginInit;
    procedure EndInit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Source: DNUri read get_Source write set_Source;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InvalidatesImplicitDataTemplateResources: Boolean read get_InvalidatesImplicitDataTemplateResources write set_InvalidatesImplicitDataTemplateResources;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNResourceDictionary = class(TDNGenericImport<DNResourceDictionaryClass, DNResourceDictionary>) end;

  //-------------namespace: System.Windows----------------
  DNRoutedEventClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BDFC7D5F-A089-5A30-92B7-09F1C5D165DB}']
  end;

  [DNTypeName('System.Windows.RoutedEvent')]
  DNRoutedEvent = interface(DDN.mscorlib.DNObject)
  ['{77E2C525-390F-3E16-8518-34BDBE378F3F}']
  { getters & setters } 

    function get_Name: string;
    function get_RoutingStrategy: DNRoutingStrategy;
    function get_HandlerType: DDN.mscorlib.DNType;
    function get_OwnerType: DDN.mscorlib.DNType;

  { methods } 

    function AddOwner(ownerType: DDN.mscorlib.DNType): DNRoutedEvent;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property RoutingStrategy: DNRoutingStrategy read get_RoutingStrategy;
    property HandlerType: DDN.mscorlib.DNType read get_HandlerType;
    property OwnerType: DDN.mscorlib.DNType read get_OwnerType;
  end;

  TDNRoutedEvent = class(TDNGenericImport<DNRoutedEventClass, DNRoutedEvent>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FA3F7C83-1FA3-5F68-ADA4-1B8ACCB4E554}']
  { static getter & setter } 

    {class} function get_CurrentDispatcher: DNDispatcher;

  { static methods } 

    {class} function FromThread(thread: DDN.mscorlib.DNThread): DNDispatcher;
    {class} procedure Run;
    {class} procedure PushFrame(frame: DNDispatcherFrame);
    {class} function Yield: DNDispatcherPriorityAwaitable; overload;
    {class} procedure ValidatePriority(priority: DNDispatcherPriority; parameterName: string);
    {class} procedure ExitAllFrames;
    {class} function Yield(priority: DNDispatcherPriority): DNDispatcherPriorityAwaitable; overload;

  { static propertys } 

    {class} property CurrentDispatcher: DNDispatcher read get_CurrentDispatcher;
  end;

  [DNTypeName('System.Windows.Threading.Dispatcher')]
  DNDispatcher = interface(DDN.mscorlib.DNObject)
  ['{E5319C47-7036-38A5-BA1D-BBC394F3B822}']
  { getters & setters } 

    function get_Thread: DDN.mscorlib.DNThread;
    function get_HasShutdownStarted: Boolean;
    function get_HasShutdownFinished: Boolean;
    function get_Hooks: DNDispatcherHooks;

  { events } 

    procedure add_ShutdownStarted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ShutdownStarted(value: DDN.mscorlib.DNEventHandler);
    procedure add_ShutdownFinished(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ShutdownFinished(value: DDN.mscorlib.DNEventHandler);
    procedure add_UnhandledExceptionFilter(value: DNDispatcherUnhandledExceptionFilterEventHandler);
    procedure remove_UnhandledExceptionFilter(value: DNDispatcherUnhandledExceptionFilterEventHandler);
    procedure add_UnhandledException(value: DNDispatcherUnhandledExceptionEventHandler);
    procedure remove_UnhandledException(value: DNDispatcherUnhandledExceptionEventHandler);

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    procedure InvokeShutdown;
    function BeginInvoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate): DNDispatcherOperation; overload;
    function BeginInvoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject): DNDispatcherOperation; overload;
    function BeginInvoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DNDispatcherOperation; overload;
    function BeginInvoke(method: DDN.mscorlib.DNDelegate; args: TArray<DDN.mscorlib.DNObject>): DNDispatcherOperation; overload;
    function BeginInvoke(method: DDN.mscorlib.DNDelegate; priority: DNDispatcherPriority; args: TArray<DDN.mscorlib.DNObject>): DNDispatcherOperation; overload;
    procedure Invoke(callback: DDN.mscorlib.DNAction); overload;
    procedure Invoke(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority); overload;
    procedure Invoke(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority; cancellationToken: DDN.mscorlib.DNCancellationToken); overload;
    function InvokeAsync(callback: DDN.mscorlib.DNAction): DNDispatcherOperation; overload;
    function InvokeAsync(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority): DNDispatcherOperation; overload;
    function Invoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate): DDN.mscorlib.DNObject; overload;
    function Invoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function Invoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function Invoke(priority: DNDispatcherPriority; timeout: DDN.mscorlib.DNTimeSpan; method: DDN.mscorlib.DNDelegate): DDN.mscorlib.DNObject; overload;
    function Invoke(priority: DNDispatcherPriority; timeout: DDN.mscorlib.DNTimeSpan; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function Invoke(priority: DNDispatcherPriority; timeout: DDN.mscorlib.DNTimeSpan; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function Invoke(method: DDN.mscorlib.DNDelegate; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function Invoke(method: DDN.mscorlib.DNDelegate; priority: DNDispatcherPriority; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function Invoke(method: DDN.mscorlib.DNDelegate; timeout: DDN.mscorlib.DNTimeSpan; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function Invoke(method: DDN.mscorlib.DNDelegate; timeout: DDN.mscorlib.DNTimeSpan; priority: DNDispatcherPriority; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function DisableProcessing: DNDispatcherProcessingDisabled;
    procedure BeginInvokeShutdown(priority: DNDispatcherPriority);
    function InvokeAsync(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority; cancellationToken: DDN.mscorlib.DNCancellationToken): DNDispatcherOperation; overload;
    procedure Invoke(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority; cancellationToken: DDN.mscorlib.DNCancellationToken; timeout: DDN.mscorlib.DNTimeSpan); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Thread: DDN.mscorlib.DNThread read get_Thread;
    property HasShutdownStarted: Boolean read get_HasShutdownStarted;
    property HasShutdownFinished: Boolean read get_HasShutdownFinished;
    property Hooks: DNDispatcherHooks read get_Hooks;
  end;

  TDNDispatcher = class(TDNGenericImport<DNDispatcherClass, DNDispatcher>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherHooksClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9AFC17B0-5CBF-525E-85E8-B1923998E863}']
  end;

  [DNTypeName('System.Windows.Threading.DispatcherHooks')]
  DNDispatcherHooks = interface(DDN.mscorlib.DNObject)
  ['{A0DF799D-F876-3568-A7A5-C25319747B58}']
  { events } 

    procedure add_DispatcherInactive(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DispatcherInactive(value: DDN.mscorlib.DNEventHandler);
    procedure add_OperationPosted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationPosted(value: DNDispatcherHookEventHandler);
    procedure add_OperationStarted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationStarted(value: DNDispatcherHookEventHandler);
    procedure add_OperationCompleted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationCompleted(value: DNDispatcherHookEventHandler);
    procedure add_OperationPriorityChanged(value: DNDispatcherHookEventHandler);
    procedure remove_OperationPriorityChanged(value: DNDispatcherHookEventHandler);
    procedure add_OperationAborted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationAborted(value: DNDispatcherHookEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDispatcherHooks = class(TDNGenericImport<DNDispatcherHooksClass, DNDispatcherHooks>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2E6F7708-7242-5AEB-A69E-295CF3B6B6AB}']
  end;

  [DNTypeName('System.Windows.Threading.DispatcherObject')]
  DNDispatcherObject = interface(DDN.mscorlib.DNObject)
  ['{F76563BB-A612-3482-ACBE-7FF19E51A68B}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherObject = class(TDNGenericImport<DNDispatcherObjectClass, DNDispatcherObject>) end;

  //-------------namespace: System.Windows.Automation.Peers----------------
  DNAutomationPeerClass = interface(DNDispatcherObjectClass)
  ['{879DFDCA-FE0A-5C3A-A8C3-1755F6604B25}']
  { static methods } 

    {class} function ListenerExists(eventId: DNAutomationEvents): Boolean;

  end;

  [DNTypeName('System.Windows.Automation.Peers.AutomationPeer')]
  DNAutomationPeer = interface(DNDispatcherObject)
  ['{287B816B-C94E-3ED7-80DB-C4879C2A312D}']
  { getters & setters } 

    function get_EventsSource: DNAutomationPeer;
    procedure set_EventsSource(value: DNAutomationPeer);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    procedure InvalidatePeer;
    function GetBoundingRectangle: DNRect;
    function IsOffscreen: Boolean;
    function GetOrientation: DNAutomationOrientation;
    function GetItemType: string;
    function GetClassName: string;
    function GetItemStatus: string;
    function IsRequiredForForm: Boolean;
    function IsKeyboardFocusable: Boolean;
    function HasKeyboardFocus: Boolean;
    function IsEnabled: Boolean;
    function IsPassword: Boolean;
    function GetAutomationId: string;
    function GetName: string;
    function GetAutomationControlType: DNAutomationControlType;
    function GetLocalizedControlType: string;
    function IsContentElement: Boolean;
    function IsControlElement: Boolean;
    function GetLabeledBy: DNAutomationPeer;
    function GetHelpText: string;
    function GetAcceleratorKey: string;
    function GetAccessKey: string;
    function GetClickablePoint: DNPoint;
    procedure SetFocus;
    function GetLiveSetting: DNAutomationLiveSetting;
    function GetSizeOfSet: Int32;
    function GetPositionInSet: Int32;
    function GetParent: DNAutomationPeer;
    procedure ResetChildrenCache;
    function GetPeerFromPoint(point: DNPoint): DNAutomationPeer;
    function GetPattern(patternInterface: DNPatternInterface): DDN.mscorlib.DNObject;
    procedure RaiseAsyncContentLoadedEvent(args: DNAsyncContentLoadedEventArgs);
    procedure RaiseAutomationEvent(eventId: DNAutomationEvents);
    procedure RaisePropertyChangedEvent(&property: DNAutomationProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EventsSource: DNAutomationPeer read get_EventsSource write set_EventsSource;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNAutomationPeer = class(TDNGenericImport<DNAutomationPeerClass, DNAutomationPeer>) end;

  //-------------namespace: System.Windows.Automation.Peers----------------
  DNContentElementAutomationPeerClass = interface(DNAutomationPeerClass)
  ['{24E680DC-FAE8-597B-8A78-8B4CE30DFDBA}']
  { constructors } 

    {class} function init(owner: DNContentElement): DNContentElementAutomationPeer;

  { static methods } 

    {class} function CreatePeerForElement(element: DNContentElement): DNAutomationPeer;
    {class} function FromElement(element: DNContentElement): DNAutomationPeer;

  end;

  [DNTypeName('System.Windows.Automation.Peers.ContentElementAutomationPeer')]
  DNContentElementAutomationPeer = interface(DNAutomationPeer)
  ['{1E1B0E11-E027-3F4D-82BD-7640CCBA1EF8}']
  { getters & setters } 

    function get_Owner: DNContentElement;
    function get_EventsSource: DNAutomationPeer;
    procedure set_EventsSource(value: DNAutomationPeer);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function GetPattern(patternInterface: DNPatternInterface): DDN.mscorlib.DNObject;
    procedure InvalidatePeer;
    function GetBoundingRectangle: DNRect;
    function IsOffscreen: Boolean;
    function GetOrientation: DNAutomationOrientation;
    function GetItemType: string;
    function GetClassName: string;
    function GetItemStatus: string;
    function IsRequiredForForm: Boolean;
    function IsKeyboardFocusable: Boolean;
    function HasKeyboardFocus: Boolean;
    function IsEnabled: Boolean;
    function IsPassword: Boolean;
    function GetAutomationId: string;
    function GetName: string;
    function GetAutomationControlType: DNAutomationControlType;
    function GetLocalizedControlType: string;
    function IsContentElement: Boolean;
    function IsControlElement: Boolean;
    function GetLabeledBy: DNAutomationPeer;
    function GetHelpText: string;
    function GetAcceleratorKey: string;
    function GetAccessKey: string;
    function GetClickablePoint: DNPoint;
    procedure SetFocus;
    function GetLiveSetting: DNAutomationLiveSetting;
    function GetSizeOfSet: Int32;
    function GetPositionInSet: Int32;
    function GetParent: DNAutomationPeer;
    procedure ResetChildrenCache;
    function GetPeerFromPoint(point: DNPoint): DNAutomationPeer;
    procedure RaiseAsyncContentLoadedEvent(args: DNAsyncContentLoadedEventArgs);
    procedure RaiseAutomationEvent(eventId: DNAutomationEvents);
    procedure RaisePropertyChangedEvent(&property: DNAutomationProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Owner: DNContentElement read get_Owner;
    property EventsSource: DNAutomationPeer read get_EventsSource write set_EventsSource;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNContentElementAutomationPeer = class(TDNGenericImport<DNContentElementAutomationPeerClass, DNContentElementAutomationPeer>) end;

  //-------------namespace: System.Windows.Automation.Peers----------------
  DNUIElementAutomationPeerClass = interface(DNAutomationPeerClass)
  ['{89489423-7B6B-5FFC-BCC9-787A4E3B8A1F}']
  { constructors } 

    {class} function init(owner: DNUIElement): DNUIElementAutomationPeer;

  { static methods } 

    {class} function CreatePeerForElement(element: DNUIElement): DNAutomationPeer;
    {class} function FromElement(element: DNUIElement): DNAutomationPeer;

  end;

  [DNTypeName('System.Windows.Automation.Peers.UIElementAutomationPeer')]
  DNUIElementAutomationPeer = interface(DNAutomationPeer)
  ['{64F59179-4DC4-3CBD-AA3A-99FD53AF700E}']
  { getters & setters } 

    function get_Owner: DNUIElement;
    function get_EventsSource: DNAutomationPeer;
    procedure set_EventsSource(value: DNAutomationPeer);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function GetPattern(patternInterface: DNPatternInterface): DDN.mscorlib.DNObject;
    procedure InvalidatePeer;
    function GetBoundingRectangle: DNRect;
    function IsOffscreen: Boolean;
    function GetOrientation: DNAutomationOrientation;
    function GetItemType: string;
    function GetClassName: string;
    function GetItemStatus: string;
    function IsRequiredForForm: Boolean;
    function IsKeyboardFocusable: Boolean;
    function HasKeyboardFocus: Boolean;
    function IsEnabled: Boolean;
    function IsPassword: Boolean;
    function GetAutomationId: string;
    function GetName: string;
    function GetAutomationControlType: DNAutomationControlType;
    function GetLocalizedControlType: string;
    function IsContentElement: Boolean;
    function IsControlElement: Boolean;
    function GetLabeledBy: DNAutomationPeer;
    function GetHelpText: string;
    function GetAcceleratorKey: string;
    function GetAccessKey: string;
    function GetClickablePoint: DNPoint;
    procedure SetFocus;
    function GetLiveSetting: DNAutomationLiveSetting;
    function GetSizeOfSet: Int32;
    function GetPositionInSet: Int32;
    function GetParent: DNAutomationPeer;
    procedure ResetChildrenCache;
    function GetPeerFromPoint(point: DNPoint): DNAutomationPeer;
    procedure RaiseAsyncContentLoadedEvent(args: DNAsyncContentLoadedEventArgs);
    procedure RaiseAutomationEvent(eventId: DNAutomationEvents);
    procedure RaisePropertyChangedEvent(&property: DNAutomationProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Owner: DNUIElement read get_Owner;
    property EventsSource: DNAutomationPeer read get_EventsSource write set_EventsSource;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNUIElementAutomationPeer = class(TDNGenericImport<DNUIElementAutomationPeerClass, DNUIElementAutomationPeer>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyObjectClass = interface(DNDispatcherObjectClass)
  ['{413D2E66-8AC2-5D20-B437-171C661774A2}']
  { constructors } 

    {class} function init: DNDependencyObject;

  end;

  [DNTypeName('System.Windows.DependencyObject')]
  DNDependencyObject = interface(DNDispatcherObject)
  ['{00987CC5-472E-3854-8A5C-D746A7FD1739}']
  { getters & setters } 

    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDependencyObject = class(TDNGenericImport<DNDependencyObjectClass, DNDependencyObject>) end;

  //-------------namespace: System.Windows----------------
  DNContentElementClass = interface(DNDependencyObjectClass)
  ['{7831DE26-A612-5D8A-A797-D5C74967B8DE}']
  { constructors } 

    {class} function init: DNContentElement;

  { static fields getter & setter } 

   function __fakeFieldGet_GotFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_IsFocusedProperty: DNDependencyProperty;
   function __fakeFieldGet_IsEnabledProperty: DNDependencyProperty;
   function __fakeFieldGet_FocusableProperty: DNDependencyProperty;
   function __fakeFieldGet_AllowDropProperty: DNDependencyProperty;
   function __fakeFieldGet_PreviewMouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseLeftButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeftButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseLeftButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeftButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseRightButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseRightButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseRightButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseRightButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_GotMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryCursorEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_GotStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_GotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewLostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_TextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewQueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_GiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_DragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_DragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_DragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDropEvent: DNRoutedEvent;
   function __fakeFieldGet_DropEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchDownEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchUpEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchUpEvent: DNRoutedEvent;
   function __fakeFieldGet_GotTouchCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostTouchCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_IsMouseDirectlyOverProperty: DNDependencyProperty;
   function __fakeFieldGet_IsMouseOverProperty: DNDependencyProperty;
   function __fakeFieldGet_IsStylusOverProperty: DNDependencyProperty;
   function __fakeFieldGet_IsKeyboardFocusWithinProperty: DNDependencyProperty;
   function __fakeFieldGet_IsMouseCapturedProperty: DNDependencyProperty;
   function __fakeFieldGet_IsMouseCaptureWithinProperty: DNDependencyProperty;
   function __fakeFieldGet_IsStylusDirectlyOverProperty: DNDependencyProperty;
   function __fakeFieldGet_IsStylusCapturedProperty: DNDependencyProperty;
   function __fakeFieldGet_IsStylusCaptureWithinProperty: DNDependencyProperty;
   function __fakeFieldGet_IsKeyboardFocusedProperty: DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesDirectlyOverProperty: DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesOverProperty: DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesCapturedProperty: DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesCapturedWithinProperty: DNDependencyProperty;

  { static fields } 

    {class} property GotFocusEvent: DNRoutedEvent read __fakeFieldGet_GotFocusEvent;
    {class} property LostFocusEvent: DNRoutedEvent read __fakeFieldGet_LostFocusEvent;
    {class} property IsFocusedProperty: DNDependencyProperty read __fakeFieldGet_IsFocusedProperty;
    {class} property IsEnabledProperty: DNDependencyProperty read __fakeFieldGet_IsEnabledProperty;
    {class} property FocusableProperty: DNDependencyProperty read __fakeFieldGet_FocusableProperty;
    {class} property AllowDropProperty: DNDependencyProperty read __fakeFieldGet_AllowDropProperty;
    {class} property PreviewMouseDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseDownEvent;
    {class} property MouseDownEvent: DNRoutedEvent read __fakeFieldGet_MouseDownEvent;
    {class} property PreviewMouseUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseUpEvent;
    {class} property MouseUpEvent: DNRoutedEvent read __fakeFieldGet_MouseUpEvent;
    {class} property PreviewMouseLeftButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseLeftButtonDownEvent;
    {class} property MouseLeftButtonDownEvent: DNRoutedEvent read __fakeFieldGet_MouseLeftButtonDownEvent;
    {class} property PreviewMouseLeftButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseLeftButtonUpEvent;
    {class} property MouseLeftButtonUpEvent: DNRoutedEvent read __fakeFieldGet_MouseLeftButtonUpEvent;
    {class} property PreviewMouseRightButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseRightButtonDownEvent;
    {class} property MouseRightButtonDownEvent: DNRoutedEvent read __fakeFieldGet_MouseRightButtonDownEvent;
    {class} property PreviewMouseRightButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseRightButtonUpEvent;
    {class} property MouseRightButtonUpEvent: DNRoutedEvent read __fakeFieldGet_MouseRightButtonUpEvent;
    {class} property PreviewMouseMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseMoveEvent;
    {class} property MouseMoveEvent: DNRoutedEvent read __fakeFieldGet_MouseMoveEvent;
    {class} property PreviewMouseWheelEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseWheelEvent;
    {class} property MouseWheelEvent: DNRoutedEvent read __fakeFieldGet_MouseWheelEvent;
    {class} property MouseEnterEvent: DNRoutedEvent read __fakeFieldGet_MouseEnterEvent;
    {class} property MouseLeaveEvent: DNRoutedEvent read __fakeFieldGet_MouseLeaveEvent;
    {class} property GotMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotMouseCaptureEvent;
    {class} property LostMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostMouseCaptureEvent;
    {class} property QueryCursorEvent: DNRoutedEvent read __fakeFieldGet_QueryCursorEvent;
    {class} property PreviewStylusDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusDownEvent;
    {class} property StylusDownEvent: DNRoutedEvent read __fakeFieldGet_StylusDownEvent;
    {class} property PreviewStylusUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusUpEvent;
    {class} property StylusUpEvent: DNRoutedEvent read __fakeFieldGet_StylusUpEvent;
    {class} property PreviewStylusMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusMoveEvent;
    {class} property StylusMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusMoveEvent;
    {class} property PreviewStylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInAirMoveEvent;
    {class} property StylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusInAirMoveEvent;
    {class} property StylusEnterEvent: DNRoutedEvent read __fakeFieldGet_StylusEnterEvent;
    {class} property StylusLeaveEvent: DNRoutedEvent read __fakeFieldGet_StylusLeaveEvent;
    {class} property PreviewStylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInRangeEvent;
    {class} property StylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusInRangeEvent;
    {class} property PreviewStylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusOutOfRangeEvent;
    {class} property StylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusOutOfRangeEvent;
    {class} property PreviewStylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusSystemGestureEvent;
    {class} property StylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_StylusSystemGestureEvent;
    {class} property GotStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotStylusCaptureEvent;
    {class} property LostStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostStylusCaptureEvent;
    {class} property StylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonDownEvent;
    {class} property StylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonUpEvent;
    {class} property PreviewStylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonDownEvent;
    {class} property PreviewStylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonUpEvent;
    {class} property PreviewKeyDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyDownEvent;
    {class} property KeyDownEvent: DNRoutedEvent read __fakeFieldGet_KeyDownEvent;
    {class} property PreviewKeyUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyUpEvent;
    {class} property KeyUpEvent: DNRoutedEvent read __fakeFieldGet_KeyUpEvent;
    {class} property PreviewGotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewGotKeyboardFocusEvent;
    {class} property GotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_GotKeyboardFocusEvent;
    {class} property PreviewLostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewLostKeyboardFocusEvent;
    {class} property LostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_LostKeyboardFocusEvent;
    {class} property PreviewTextInputEvent: DNRoutedEvent read __fakeFieldGet_PreviewTextInputEvent;
    {class} property TextInputEvent: DNRoutedEvent read __fakeFieldGet_TextInputEvent;
    {class} property PreviewQueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_PreviewQueryContinueDragEvent;
    {class} property QueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_QueryContinueDragEvent;
    {class} property PreviewGiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_PreviewGiveFeedbackEvent;
    {class} property GiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_GiveFeedbackEvent;
    {class} property PreviewDragEnterEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragEnterEvent;
    {class} property DragEnterEvent: DNRoutedEvent read __fakeFieldGet_DragEnterEvent;
    {class} property PreviewDragOverEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragOverEvent;
    {class} property DragOverEvent: DNRoutedEvent read __fakeFieldGet_DragOverEvent;
    {class} property PreviewDragLeaveEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragLeaveEvent;
    {class} property DragLeaveEvent: DNRoutedEvent read __fakeFieldGet_DragLeaveEvent;
    {class} property PreviewDropEvent: DNRoutedEvent read __fakeFieldGet_PreviewDropEvent;
    {class} property DropEvent: DNRoutedEvent read __fakeFieldGet_DropEvent;
    {class} property PreviewTouchDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchDownEvent;
    {class} property TouchDownEvent: DNRoutedEvent read __fakeFieldGet_TouchDownEvent;
    {class} property PreviewTouchMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchMoveEvent;
    {class} property TouchMoveEvent: DNRoutedEvent read __fakeFieldGet_TouchMoveEvent;
    {class} property PreviewTouchUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchUpEvent;
    {class} property TouchUpEvent: DNRoutedEvent read __fakeFieldGet_TouchUpEvent;
    {class} property GotTouchCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotTouchCaptureEvent;
    {class} property LostTouchCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostTouchCaptureEvent;
    {class} property TouchEnterEvent: DNRoutedEvent read __fakeFieldGet_TouchEnterEvent;
    {class} property TouchLeaveEvent: DNRoutedEvent read __fakeFieldGet_TouchLeaveEvent;
    {class} property IsMouseDirectlyOverProperty: DNDependencyProperty read __fakeFieldGet_IsMouseDirectlyOverProperty;
    {class} property IsMouseOverProperty: DNDependencyProperty read __fakeFieldGet_IsMouseOverProperty;
    {class} property IsStylusOverProperty: DNDependencyProperty read __fakeFieldGet_IsStylusOverProperty;
    {class} property IsKeyboardFocusWithinProperty: DNDependencyProperty read __fakeFieldGet_IsKeyboardFocusWithinProperty;
    {class} property IsMouseCapturedProperty: DNDependencyProperty read __fakeFieldGet_IsMouseCapturedProperty;
    {class} property IsMouseCaptureWithinProperty: DNDependencyProperty read __fakeFieldGet_IsMouseCaptureWithinProperty;
    {class} property IsStylusDirectlyOverProperty: DNDependencyProperty read __fakeFieldGet_IsStylusDirectlyOverProperty;
    {class} property IsStylusCapturedProperty: DNDependencyProperty read __fakeFieldGet_IsStylusCapturedProperty;
    {class} property IsStylusCaptureWithinProperty: DNDependencyProperty read __fakeFieldGet_IsStylusCaptureWithinProperty;
    {class} property IsKeyboardFocusedProperty: DNDependencyProperty read __fakeFieldGet_IsKeyboardFocusedProperty;
    {class} property AreAnyTouchesDirectlyOverProperty: DNDependencyProperty read __fakeFieldGet_AreAnyTouchesDirectlyOverProperty;
    {class} property AreAnyTouchesOverProperty: DNDependencyProperty read __fakeFieldGet_AreAnyTouchesOverProperty;
    {class} property AreAnyTouchesCapturedProperty: DNDependencyProperty read __fakeFieldGet_AreAnyTouchesCapturedProperty;
    {class} property AreAnyTouchesCapturedWithinProperty: DNDependencyProperty read __fakeFieldGet_AreAnyTouchesCapturedWithinProperty;

  end;

  [DNTypeName('System.Windows.ContentElement')]
  DNContentElement = interface(DNDependencyObject)
  ['{C2E56300-E925-3C79-85B8-AE518B94BACB}']
  { getters & setters } 

    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_IsInputMethodEnabled: Boolean;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_HasAnimatedProperties: Boolean;
    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);

  { methods } 

    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function MoveFocus(request: DNTraversalRequest): Boolean;
    function PredictFocus(direction: DNFocusNavigationDirection): DNDependencyObject;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNContentElement = class(TDNGenericImport<DNContentElementClass, DNContentElement>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNFixedDocumentClass = interface(DNObjectClass)
  ['{82745E7F-7DD8-50DC-881E-69F6E16E120D}']
  { constructors } 

    {class} function init: DNFixedDocument;

  { static fields getter & setter } 

   function __fakeFieldGet_PrintTicketProperty: DNDependencyProperty;

  { static fields } 

    {class} property PrintTicketProperty: DNDependencyProperty read __fakeFieldGet_PrintTicketProperty;

  end;

  [DNTypeName('System.Windows.Documents.FixedDocument')]
  DNFixedDocument = interface(DNObject)
  ['{8531139A-3A7D-3EC6-854F-FCF6D1EC6619}']
  { getters & setters } 

    function get_DocumentPaginator: DNDocumentPaginator;
    function get_Pages: DNPageContentCollection;
    function get_PrintTicket: DDN.mscorlib.DNObject;
    procedure set_PrintTicket(value: DDN.mscorlib.DNObject);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_OverridesDefaultStyle: Boolean;
    procedure set_OverridesDefaultStyle(value: Boolean);
    function get_TemplatedParent: DNDependencyObject;
    function get_Resources: DNResourceDictionary;
    procedure set_Resources(value: DNResourceDictionary);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_Language: DNXmlLanguage;
    procedure set_Language(value: DNXmlLanguage);
    function get_FocusVisualStyle: DNStyle;
    procedure set_FocusVisualStyle(value: DNStyle);
    function get_Cursor: DNCursor;
    procedure set_Cursor(value: DNCursor);
    function get_ForceCursor: Boolean;
    procedure set_ForceCursor(value: Boolean);
    function get_InputScope: DNInputScope;
    procedure set_InputScope(value: DNInputScope);
    function get_DataContext: DDN.mscorlib.DNObject;
    procedure set_DataContext(value: DDN.mscorlib.DNObject);
    function get_BindingGroup: DNBindingGroup;
    procedure set_BindingGroup(value: DNBindingGroup);
    function get_IsInitialized: Boolean;
    function get_IsLoaded: Boolean;
    function get_ToolTip: DDN.mscorlib.DNObject;
    procedure set_ToolTip(value: DDN.mscorlib.DNObject);
    function get_ContextMenu: DNContextMenu;
    procedure set_ContextMenu(value: DNContextMenu);
    function get_Parent: DNDependencyObject;
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_IsInputMethodEnabled: Boolean;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_HasAnimatedProperties: Boolean;
    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_DataContextChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_DataContextChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_Loaded(value: DNRoutedEventHandler);
    procedure remove_Loaded(value: DNRoutedEventHandler);
    procedure add_Unloaded(value: DNRoutedEventHandler);
    procedure remove_Unloaded(value: DNRoutedEventHandler);
    procedure add_ToolTipOpening(value: DNToolTipEventHandler);
    procedure remove_ToolTipOpening(value: DNToolTipEventHandler);
    procedure add_ToolTipClosing(value: DNToolTipEventHandler);
    procedure remove_ToolTipClosing(value: DNToolTipEventHandler);
    procedure add_ContextMenuOpening(value: DNContextMenuEventHandler);
    procedure remove_ContextMenuOpening(value: DNContextMenuEventHandler);
    procedure add_ContextMenuClosing(value: DNContextMenuEventHandler);
    procedure remove_ContextMenuClosing(value: DNContextMenuEventHandler);
    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);

  { methods } 

    function ShouldSerializeStyle: Boolean;
    function ShouldSerializeResources: Boolean;
    function FindResource(resourceKey: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function TryFindResource(resourceKey: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetResourceReference(dp: DNDependencyProperty; name: DDN.mscorlib.DNObject);
    procedure BeginStoryboard(storyboard: DNStoryboard); overload;
    procedure BeginStoryboard(storyboard: DNStoryboard; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginStoryboard(storyboard: DNStoryboard; handoffBehavior: DNHandoffBehavior; isControllable: Boolean); overload;
    function MoveFocus(request: DNTraversalRequest): Boolean;
    function PredictFocus(direction: DNFocusNavigationDirection): DNDependencyObject;
    procedure BringIntoView;
    function GetBindingExpression(dp: DNDependencyProperty): DNBindingExpression;
    function SetBinding(dp: DNDependencyProperty; binding: DNBindingBase): DNBindingExpressionBase; overload;
    function SetBinding(dp: DNDependencyProperty; path: string): DNBindingExpression; overload;
    procedure BeginInit;
    procedure EndInit;
    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    procedure UnregisterName(name: string);
    function FindName(name: string): DDN.mscorlib.DNObject;
    procedure UpdateDefaultStyle;
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DocumentPaginator: DNDocumentPaginator read get_DocumentPaginator;
    property Pages: DNPageContentCollection read get_Pages;
    property PrintTicket: DDN.mscorlib.DNObject read get_PrintTicket write set_PrintTicket;
    property Style: DNStyle read get_Style write set_Style;
    property OverridesDefaultStyle: Boolean read get_OverridesDefaultStyle write set_OverridesDefaultStyle;
    property TemplatedParent: DNDependencyObject read get_TemplatedParent;
    property Resources: DNResourceDictionary read get_Resources write set_Resources;
    property Name: string read get_Name write set_Name;
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    property Language: DNXmlLanguage read get_Language write set_Language;
    property FocusVisualStyle: DNStyle read get_FocusVisualStyle write set_FocusVisualStyle;
    property Cursor: DNCursor read get_Cursor write set_Cursor;
    property ForceCursor: Boolean read get_ForceCursor write set_ForceCursor;
    property InputScope: DNInputScope read get_InputScope write set_InputScope;
    property DataContext: DDN.mscorlib.DNObject read get_DataContext write set_DataContext;
    property BindingGroup: DNBindingGroup read get_BindingGroup write set_BindingGroup;
    property IsInitialized: Boolean read get_IsInitialized;
    property IsLoaded: Boolean read get_IsLoaded;
    property ToolTip: DDN.mscorlib.DNObject read get_ToolTip write set_ToolTip;
    property ContextMenu: DNContextMenu read get_ContextMenu write set_ContextMenu;
    property Parent: DNDependencyObject read get_Parent;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNFixedDocument = class(TDNGenericImport<DNFixedDocumentClass, DNFixedDocument>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNFixedDocumentSequenceClass = interface(DNObjectClass)
  ['{50EDEA1E-22C6-591D-BB67-7FF955668731}']
  { constructors } 

    {class} function init: DNFixedDocumentSequence;

  { static fields getter & setter } 

   function __fakeFieldGet_PrintTicketProperty: DNDependencyProperty;

  { static fields } 

    {class} property PrintTicketProperty: DNDependencyProperty read __fakeFieldGet_PrintTicketProperty;

  end;

  [DNTypeName('System.Windows.Documents.FixedDocumentSequence')]
  DNFixedDocumentSequence = interface(DNObject)
  ['{131A1B70-F2BC-3744-8B28-76858D83D887}']
  { getters & setters } 

    function get_DocumentPaginator: DNDocumentPaginator;
    function get_References: DNDocumentReferenceCollection;
    function get_PrintTicket: DDN.mscorlib.DNObject;
    procedure set_PrintTicket(value: DDN.mscorlib.DNObject);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_OverridesDefaultStyle: Boolean;
    procedure set_OverridesDefaultStyle(value: Boolean);
    function get_TemplatedParent: DNDependencyObject;
    function get_Resources: DNResourceDictionary;
    procedure set_Resources(value: DNResourceDictionary);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_Language: DNXmlLanguage;
    procedure set_Language(value: DNXmlLanguage);
    function get_FocusVisualStyle: DNStyle;
    procedure set_FocusVisualStyle(value: DNStyle);
    function get_Cursor: DNCursor;
    procedure set_Cursor(value: DNCursor);
    function get_ForceCursor: Boolean;
    procedure set_ForceCursor(value: Boolean);
    function get_InputScope: DNInputScope;
    procedure set_InputScope(value: DNInputScope);
    function get_DataContext: DDN.mscorlib.DNObject;
    procedure set_DataContext(value: DDN.mscorlib.DNObject);
    function get_BindingGroup: DNBindingGroup;
    procedure set_BindingGroup(value: DNBindingGroup);
    function get_IsInitialized: Boolean;
    function get_IsLoaded: Boolean;
    function get_ToolTip: DDN.mscorlib.DNObject;
    procedure set_ToolTip(value: DDN.mscorlib.DNObject);
    function get_ContextMenu: DNContextMenu;
    procedure set_ContextMenu(value: DNContextMenu);
    function get_Parent: DNDependencyObject;
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_IsInputMethodEnabled: Boolean;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_HasAnimatedProperties: Boolean;
    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_DataContextChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_DataContextChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_Loaded(value: DNRoutedEventHandler);
    procedure remove_Loaded(value: DNRoutedEventHandler);
    procedure add_Unloaded(value: DNRoutedEventHandler);
    procedure remove_Unloaded(value: DNRoutedEventHandler);
    procedure add_ToolTipOpening(value: DNToolTipEventHandler);
    procedure remove_ToolTipOpening(value: DNToolTipEventHandler);
    procedure add_ToolTipClosing(value: DNToolTipEventHandler);
    procedure remove_ToolTipClosing(value: DNToolTipEventHandler);
    procedure add_ContextMenuOpening(value: DNContextMenuEventHandler);
    procedure remove_ContextMenuOpening(value: DNContextMenuEventHandler);
    procedure add_ContextMenuClosing(value: DNContextMenuEventHandler);
    procedure remove_ContextMenuClosing(value: DNContextMenuEventHandler);
    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);

  { methods } 

    function ShouldSerializeStyle: Boolean;
    function ShouldSerializeResources: Boolean;
    function FindResource(resourceKey: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function TryFindResource(resourceKey: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetResourceReference(dp: DNDependencyProperty; name: DDN.mscorlib.DNObject);
    procedure BeginStoryboard(storyboard: DNStoryboard); overload;
    procedure BeginStoryboard(storyboard: DNStoryboard; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginStoryboard(storyboard: DNStoryboard; handoffBehavior: DNHandoffBehavior; isControllable: Boolean); overload;
    function MoveFocus(request: DNTraversalRequest): Boolean;
    function PredictFocus(direction: DNFocusNavigationDirection): DNDependencyObject;
    procedure BringIntoView;
    function GetBindingExpression(dp: DNDependencyProperty): DNBindingExpression;
    function SetBinding(dp: DNDependencyProperty; binding: DNBindingBase): DNBindingExpressionBase; overload;
    function SetBinding(dp: DNDependencyProperty; path: string): DNBindingExpression; overload;
    procedure BeginInit;
    procedure EndInit;
    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    procedure UnregisterName(name: string);
    function FindName(name: string): DDN.mscorlib.DNObject;
    procedure UpdateDefaultStyle;
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DocumentPaginator: DNDocumentPaginator read get_DocumentPaginator;
    property References: DNDocumentReferenceCollection read get_References;
    property PrintTicket: DDN.mscorlib.DNObject read get_PrintTicket write set_PrintTicket;
    property Style: DNStyle read get_Style write set_Style;
    property OverridesDefaultStyle: Boolean read get_OverridesDefaultStyle write set_OverridesDefaultStyle;
    property TemplatedParent: DNDependencyObject read get_TemplatedParent;
    property Resources: DNResourceDictionary read get_Resources write set_Resources;
    property Name: string read get_Name write set_Name;
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    property Language: DNXmlLanguage read get_Language write set_Language;
    property FocusVisualStyle: DNStyle read get_FocusVisualStyle write set_FocusVisualStyle;
    property Cursor: DNCursor read get_Cursor write set_Cursor;
    property ForceCursor: Boolean read get_ForceCursor write set_ForceCursor;
    property InputScope: DNInputScope read get_InputScope write set_InputScope;
    property DataContext: DDN.mscorlib.DNObject read get_DataContext write set_DataContext;
    property BindingGroup: DNBindingGroup read get_BindingGroup write set_BindingGroup;
    property IsInitialized: Boolean read get_IsInitialized;
    property IsLoaded: Boolean read get_IsLoaded;
    property ToolTip: DDN.mscorlib.DNObject read get_ToolTip write set_ToolTip;
    property ContextMenu: DNContextMenu read get_ContextMenu write set_ContextMenu;
    property Parent: DNDependencyObject read get_Parent;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNFixedDocumentSequence = class(TDNGenericImport<DNFixedDocumentSequenceClass, DNFixedDocumentSequence>) end;

  //-------------namespace: System.Windows.Data----------------
  DNBindingGroupClass = interface(DNDependencyObjectClass)
  ['{1AC5978C-D438-55CC-9338-21380FB878F2}']
  { constructors } 

    {class} function init: DNBindingGroup;

  end;

  [DNTypeName('System.Windows.Data.BindingGroup')]
  DNBindingGroup = interface(DNDependencyObject)
  ['{16AC2D32-CF4A-391D-B051-12BBFC91562B}']
  { getters & setters } 

    function get_Owner: DNDependencyObject;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_NotifyOnValidationError: Boolean;
    procedure set_NotifyOnValidationError(value: Boolean);
    function get_ValidatesOnNotifyDataError: Boolean;
    procedure set_ValidatesOnNotifyDataError(value: Boolean);
    function get_SharesProposedValues: Boolean;
    procedure set_SharesProposedValues(value: Boolean);
    function get_CanRestoreValues: Boolean;
    function get_Items: DDN.mscorlib.DNIList;
    function get_IsDirty: Boolean;
    function get_HasValidationError: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    procedure BeginEdit;
    function CommitEdit: Boolean;
    procedure CancelEdit;
    function ValidateWithoutUpdate: Boolean;
    function UpdateSources: Boolean;
    function GetValue(item: DDN.mscorlib.DNObject; propertyName: string): DDN.mscorlib.DNObject; overload;
    function TryGetValue(item: DDN.mscorlib.DNObject; propertyName: string; out value: DDN.mscorlib.DNObject): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject; overload;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Owner: DNDependencyObject read get_Owner;
    property Name: string read get_Name write set_Name;
    property NotifyOnValidationError: Boolean read get_NotifyOnValidationError write set_NotifyOnValidationError;
    property ValidatesOnNotifyDataError: Boolean read get_ValidatesOnNotifyDataError write set_ValidatesOnNotifyDataError;
    property SharesProposedValues: Boolean read get_SharesProposedValues write set_SharesProposedValues;
    property CanRestoreValues: Boolean read get_CanRestoreValues;
    property Items: DDN.mscorlib.DNIList read get_Items;
    property IsDirty: Boolean read get_IsDirty;
    property HasValidationError: Boolean read get_HasValidationError;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNBindingGroup = class(TDNGenericImport<DNBindingGroupClass, DNBindingGroup>) end;

  //-------------namespace: System.Windows----------------
  DNFreezableClass = interface(DNDependencyObjectClass)
  ['{8FA2C711-3764-537A-9DCC-4D6597158D4B}']
  end;

  [DNTypeName('System.Windows.Freezable')]
  DNFreezable = interface(DNDependencyObject)
  ['{FFD99072-5B12-3B0D-8491-D97DFF56CDCE}']
  { getters & setters } 

    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNFreezable;
    function CloneCurrentValue: DNFreezable;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNFreezable = class(TDNGenericImport<DNFreezableClass, DNFreezable>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputBindingClass = interface(DNFreezableClass)
  ['{28CA1A6F-3A6A-5CD0-959A-CA3EAA0A0E63}']
  { constructors } 

    {class} function init(command: DNICommand; gesture: DNInputGesture): DNInputBinding;

  { static fields getter & setter } 

   function __fakeFieldGet_CommandProperty: DNDependencyProperty;
   function __fakeFieldGet_CommandParameterProperty: DNDependencyProperty;
   function __fakeFieldGet_CommandTargetProperty: DNDependencyProperty;

  { static fields } 

    {class} property CommandProperty: DNDependencyProperty read __fakeFieldGet_CommandProperty;
    {class} property CommandParameterProperty: DNDependencyProperty read __fakeFieldGet_CommandParameterProperty;
    {class} property CommandTargetProperty: DNDependencyProperty read __fakeFieldGet_CommandTargetProperty;

  end;

  [DNTypeName('System.Windows.Input.InputBinding')]
  DNInputBinding = interface(DNFreezable)
  ['{375D0C74-A8B7-3326-84E1-21577F5008E2}']
  { getters & setters } 

    function get_Command: DNICommand;
    procedure set_Command(value: DNICommand);
    function get_CommandParameter: DDN.mscorlib.DNObject;
    procedure set_CommandParameter(value: DDN.mscorlib.DNObject);
    function get_CommandTarget: DNIInputElement;
    procedure set_CommandTarget(value: DNIInputElement);
    function get_Gesture: DNInputGesture;
    procedure set_Gesture(value: DNInputGesture);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNFreezable;
    function CloneCurrentValue: DNFreezable;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNICommand read get_Command write set_Command;
    property CommandParameter: DDN.mscorlib.DNObject read get_CommandParameter write set_CommandParameter;
    property CommandTarget: DNIInputElement read get_CommandTarget write set_CommandTarget;
    property Gesture: DNInputGesture read get_Gesture write set_Gesture;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNInputBinding = class(TDNGenericImport<DNInputBindingClass, DNInputBinding>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNAnimatableClass = interface(DNFreezableClass)
  ['{A7D16937-AFF8-5FBE-9252-5923B3480EDC}']
  { static methods } 

    {class} function ShouldSerializeStoredWeakReference(target: DNDependencyObject): Boolean;

  end;

  [DNTypeName('System.Windows.Media.Animation.Animatable')]
  DNAnimatable = interface(DNFreezable)
  ['{44ED8723-0A8A-32EA-BDEE-B3BA13144C0D}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNAnimatable;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function CloneCurrentValue: DNFreezable;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNAnimatable = class(TDNGenericImport<DNAnimatableClass, DNAnimatable>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNTimelineClass = interface(DNAnimatableClass)
  ['{7EC91793-FD7A-5260-ABDF-F73D1E45E701}']
  { static fields getter & setter } 

   function __fakeFieldGet_AccelerationRatioProperty: DNDependencyProperty;
   function __fakeFieldGet_AutoReverseProperty: DNDependencyProperty;
   function __fakeFieldGet_BeginTimeProperty: DNDependencyProperty;
   function __fakeFieldGet_DecelerationRatioProperty: DNDependencyProperty;
   function __fakeFieldGet_DesiredFrameRateProperty: DNDependencyProperty;
   function __fakeFieldGet_DurationProperty: DNDependencyProperty;
   function __fakeFieldGet_FillBehaviorProperty: DNDependencyProperty;
   function __fakeFieldGet_NameProperty: DNDependencyProperty;
   function __fakeFieldGet_RepeatBehaviorProperty: DNDependencyProperty;
   function __fakeFieldGet_SpeedRatioProperty: DNDependencyProperty;

  { static fields } 

    {class} property AccelerationRatioProperty: DNDependencyProperty read __fakeFieldGet_AccelerationRatioProperty;
    {class} property AutoReverseProperty: DNDependencyProperty read __fakeFieldGet_AutoReverseProperty;
    {class} property BeginTimeProperty: DNDependencyProperty read __fakeFieldGet_BeginTimeProperty;
    {class} property DecelerationRatioProperty: DNDependencyProperty read __fakeFieldGet_DecelerationRatioProperty;
    {class} property DesiredFrameRateProperty: DNDependencyProperty read __fakeFieldGet_DesiredFrameRateProperty;
    {class} property DurationProperty: DNDependencyProperty read __fakeFieldGet_DurationProperty;
    {class} property FillBehaviorProperty: DNDependencyProperty read __fakeFieldGet_FillBehaviorProperty;
    {class} property NameProperty: DNDependencyProperty read __fakeFieldGet_NameProperty;
    {class} property RepeatBehaviorProperty: DNDependencyProperty read __fakeFieldGet_RepeatBehaviorProperty;
    {class} property SpeedRatioProperty: DNDependencyProperty read __fakeFieldGet_SpeedRatioProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Timeline')]
  DNTimeline = interface(DNAnimatable)
  ['{BF94DBD7-BC88-3C19-B031-7CA7DCDF6B79}']
  { getters & setters } 

    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTimeline;
    function CloneCurrentValue: DNTimeline;
    function CreateClock: DNClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTimeline = class(TDNGenericImport<DNTimelineClass, DNTimeline>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNAnimationTimelineClass = interface(DNTimelineClass)
  ['{72DA1519-F0BB-5EB1-B8FD-F34346A1144F}']
  { static fields getter & setter } 

   function __fakeFieldGet_IsAdditiveProperty: DNDependencyProperty;
   function __fakeFieldGet_IsCumulativeProperty: DNDependencyProperty;

  { static fields } 

    {class} property IsAdditiveProperty: DNDependencyProperty read __fakeFieldGet_IsAdditiveProperty;
    {class} property IsCumulativeProperty: DNDependencyProperty read __fakeFieldGet_IsCumulativeProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.AnimationTimeline')]
  DNAnimationTimeline = interface(DNTimeline)
  ['{0C2B4F62-1B4B-35FE-9858-410ECEA6CF96}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNAnimationTimeline;
    function CreateClock: DNAnimationClock; overload;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNAnimationTimeline = class(TDNGenericImport<DNAnimationTimelineClass, DNAnimationTimeline>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNTimelineGroupClass = interface(DNTimelineClass)
  ['{84FD6893-0DB9-5A6B-B197-832297B57A58}']
  { static fields getter & setter } 

   function __fakeFieldGet_ChildrenProperty: DNDependencyProperty;

  { static fields } 

    {class} property ChildrenProperty: DNDependencyProperty read __fakeFieldGet_ChildrenProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.TimelineGroup')]
  DNTimelineGroup = interface(DNTimeline)
  ['{2C7CBD7B-CBD5-39AC-B174-04B850F3875A}']
  { getters & setters } 

    function get_Children: DNTimelineCollection;
    procedure set_Children(value: DNTimelineCollection);
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTimelineGroup;
    function CloneCurrentValue: DNTimelineGroup;
    function CreateClock: DNClockGroup; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DNTimelineCollection read get_Children write set_Children;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTimelineGroup = class(TDNGenericImport<DNTimelineGroupClass, DNTimelineGroup>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNParallelTimelineClass = interface(DNTimelineGroupClass)
  ['{55188F37-015B-512D-AB36-B6F96FDC39E4}']
  { constructors } 

    {class} function init: DNParallelTimeline; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SlipBehaviorProperty: DNDependencyProperty;

  { static fields } 

    {class} property SlipBehaviorProperty: DNDependencyProperty read __fakeFieldGet_SlipBehaviorProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.ParallelTimeline')]
  DNParallelTimeline = interface(DNTimelineGroup)
  ['{79BAD5D7-2579-32FD-91AE-398E01ACD3BC}']
  { getters & setters } 

    function get_SlipBehavior: DNSlipBehavior;
    procedure set_SlipBehavior(value: DNSlipBehavior);
    function get_Children: DNTimelineCollection;
    procedure set_Children(value: DNTimelineCollection);
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNParallelTimeline;
    function CloneCurrentValue: DNParallelTimeline;
    function CreateClock: DNClockGroup; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SlipBehavior: DNSlipBehavior read get_SlipBehavior write set_SlipBehavior;
    property Children: DNTimelineCollection read get_Children write set_Children;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNParallelTimeline = class(TDNGenericImport<DNParallelTimelineClass, DNParallelTimeline>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNStoryboardClass = interface(DNParallelTimelineClass)
  ['{74D384F8-7456-5837-A8E0-F0A3C80CEA6B}']
  { constructors } 

    {class} function init: DNStoryboard;

  { static fields getter & setter } 

   function __fakeFieldGet_TargetProperty: DNDependencyProperty;
   function __fakeFieldGet_TargetNameProperty: DNDependencyProperty;
   function __fakeFieldGet_TargetPropertyProperty: DNDependencyProperty;

  { static fields } 

    {class} property TargetProperty: DNDependencyProperty read __fakeFieldGet_TargetProperty;
    {class} property TargetNameProperty: DNDependencyProperty read __fakeFieldGet_TargetNameProperty;
    {class} property TargetPropertyProperty: DNDependencyProperty read __fakeFieldGet_TargetPropertyProperty;

  { static methods } 

    {class} procedure SetTarget(element: DNDependencyObject; value: DNDependencyObject);
    {class} function GetTarget(element: DNDependencyObject): DNDependencyObject;
    {class} procedure SetTargetName(element: DNDependencyObject; name: string);
    {class} function GetTargetName(element: DNDependencyObject): string;

  end;

  [DNTypeName('System.Windows.Media.Animation.Storyboard')]
  DNStoryboard = interface(DNParallelTimeline)
  ['{510D5371-DC1C-334E-8213-FCC33B868D24}']
  { getters & setters } 

    function get_SlipBehavior: DNSlipBehavior;
    procedure set_SlipBehavior(value: DNSlipBehavior);
    function get_Children: DNTimelineCollection;
    procedure set_Children(value: DNTimelineCollection);
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNStoryboard;
    procedure &Begin;
    function GetCurrentState: DNClockState;
    function GetIsPaused: Boolean;
    procedure Pause;
    procedure Remove;
    procedure Resume;
    procedure Seek(offset: DDN.mscorlib.DNTimeSpan; origin: DNTimeSeekOrigin); overload;
    procedure Seek(offset: DDN.mscorlib.DNTimeSpan); overload;
    procedure SeekAlignedToLastTick(offset: DDN.mscorlib.DNTimeSpan; origin: DNTimeSeekOrigin); overload;
    procedure SeekAlignedToLastTick(offset: DDN.mscorlib.DNTimeSpan); overload;
    procedure SetSpeedRatio(speedRatio: Double);
    procedure SkipToFill;
    procedure Stop;
    function GetCurrentGlobalSpeed: Double;
    function GetCurrentIteration: Int32;
    function GetCurrentProgress: Double;
    function GetCurrentTime: DDN.mscorlib.DNTimeSpan;
    function CloneCurrentValue: DNParallelTimeline;
    function CreateClock: DNClockGroup; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SlipBehavior: DNSlipBehavior read get_SlipBehavior write set_SlipBehavior;
    property Children: DNTimelineCollection read get_Children write set_Children;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNStoryboard = class(TDNGenericImport<DNStoryboardClass, DNStoryboard>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMediaTimelineClass = interface(DNTimelineClass)
  ['{40DDFD1E-D30D-5432-B8CF-598F93BB1B53}']
  { constructors } 

    {class} function init(source: DNUri): DNMediaTimeline; overload;
    {class} function init: DNMediaTimeline; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SourceProperty: DNDependencyProperty;

  { static fields } 

    {class} property SourceProperty: DNDependencyProperty read __fakeFieldGet_SourceProperty;

  end;

  [DNTypeName('System.Windows.Media.MediaTimeline')]
  DNMediaTimeline = interface(DNTimeline)
  ['{D3965125-2629-3A3F-9063-858E67264E0B}']
  { getters & setters } 

    function get_Source: DNUri;
    procedure set_Source(value: DNUri);
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMediaTimeline;
    function CloneCurrentValue: DNMediaTimeline;
    function CreateClock: DNMediaClock; overload;
    function ToString: string;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Source: DNUri read get_Source write set_Source;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNMediaTimeline = class(TDNGenericImport<DNMediaTimelineClass, DNMediaTimeline>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNTimelineCollectionClass = interface(DNAnimatableClass)
  ['{49EB12F7-7EF1-5C60-A9F7-1243C41F5A28}']
  { constructors } 

    {class} function init: DNTimelineCollection; overload;
    {class} function init(capacity: Int32): DNTimelineCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNTimeline>): DNTimelineCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.TimelineCollection')]
  DNTimelineCollection = interface(DNAnimatable)
  ['{DBF2DCD0-8474-3962-92E3-21DE6CE33008}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTimelineCollection;
    function CloneCurrentValue: DNTimelineCollection;
    function &Contains(value: DNTimeline): Boolean;
    function IndexOf(value: DNTimeline): Int32;
    procedure Insert(index: Int32; value: DNTimeline);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNTimeline>; index: Int32);
    function GetEnumerator: DNTimelineCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTimelineCollection = class(TDNGenericImport<DNTimelineCollectionClass, DNTimelineCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNBrushClass = interface(DNAnimatableClass)
  ['{51E31CBE-288A-55E5-8B89-DD503F5C8384}']
  { static fields getter & setter } 

   function __fakeFieldGet_OpacityProperty: DNDependencyProperty;
   function __fakeFieldGet_TransformProperty: DNDependencyProperty;
   function __fakeFieldGet_RelativeTransformProperty: DNDependencyProperty;

  { static fields } 

    {class} property OpacityProperty: DNDependencyProperty read __fakeFieldGet_OpacityProperty;
    {class} property TransformProperty: DNDependencyProperty read __fakeFieldGet_TransformProperty;
    {class} property RelativeTransformProperty: DNDependencyProperty read __fakeFieldGet_RelativeTransformProperty;

  end;

  [DNTypeName('System.Windows.Media.Brush')]
  DNBrush = interface(DNAnimatable)
  ['{D8CADDAB-B01F-35D6-9613-F7B39F5BF701}']
  { getters & setters } 

    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBrush;
    function CloneCurrentValue: DNBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNBrush = class(TDNGenericImport<DNBrushClass, DNBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNSolidColorBrushClass = interface(DNBrushClass)
  ['{8B5A74A7-51FE-5278-BB21-83E4CB04CE3A}']
  { constructors } 

    {class} function init: DNSolidColorBrush; overload;
    {class} function init(color: DNColor): DNSolidColorBrush; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ColorProperty: DNDependencyProperty;

  { static fields } 

    {class} property ColorProperty: DNDependencyProperty read __fakeFieldGet_ColorProperty;

  { static methods } 

    {class} function DeserializeFrom(reader: DDN.mscorlib.DNBinaryReader): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('System.Windows.Media.SolidColorBrush')]
  DNSolidColorBrush = interface(DNBrush)
  ['{476C883D-7F67-3472-B350-15D5E524537A}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSolidColorBrush;
    function CloneCurrentValue: DNSolidColorBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNSolidColorBrush = class(TDNGenericImport<DNSolidColorBrushClass, DNSolidColorBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNCacheModeClass = interface(DNAnimatableClass)
  ['{104A6004-7F95-5404-84B9-214188A22651}']
  end;

  [DNTypeName('System.Windows.Media.CacheMode')]
  DNCacheMode = interface(DNAnimatable)
  ['{049FCAFD-1AE4-3A90-BB1B-BCED576B9F86}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNCacheMode;
    function CloneCurrentValue: DNCacheMode;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNCacheMode = class(TDNGenericImport<DNCacheModeClass, DNCacheMode>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDashStyleClass = interface(DNAnimatableClass)
  ['{EA96CA26-A35F-56B1-8AAE-7311430EB8B1}']
  { constructors } 

    {class} function init: DNDashStyle; overload;
    {class} function init(dashes: DDN.mscorlib.DNIEnumerable<Double>; offset: Double): DNDashStyle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_OffsetProperty: DNDependencyProperty;
   function __fakeFieldGet_DashesProperty: DNDependencyProperty;

  { static fields } 

    {class} property OffsetProperty: DNDependencyProperty read __fakeFieldGet_OffsetProperty;
    {class} property DashesProperty: DNDependencyProperty read __fakeFieldGet_DashesProperty;

  end;

  [DNTypeName('System.Windows.Media.DashStyle')]
  DNDashStyle = interface(DNAnimatable)
  ['{1094D971-1115-3BF5-9E8C-81AFB7A8E0CB}']
  { getters & setters } 

    function get_Offset: Double;
    procedure set_Offset(value: Double);
    function get_Dashes: DNDoubleCollection;
    procedure set_Dashes(value: DNDoubleCollection);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDashStyle;
    function CloneCurrentValue: DNDashStyle;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Offset: Double read get_Offset write set_Offset;
    property Dashes: DNDoubleCollection read get_Dashes write set_Dashes;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDashStyle = class(TDNGenericImport<DNDashStyleClass, DNDashStyle>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDrawingClass = interface(DNAnimatableClass)
  ['{5697036B-60AD-58EB-8FE4-89A1AD9BAA7C}']
  end;

  [DNTypeName('System.Windows.Media.Drawing')]
  DNDrawing = interface(DNAnimatable)
  ['{12A408FA-B483-3BD2-9711-FDAD56252500}']
  { getters & setters } 

    function get_Bounds: DNRect;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNDrawing;
    function Clone: DNDrawing;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Bounds: DNRect read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDrawing = class(TDNGenericImport<DNDrawingClass, DNDrawing>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNBitmapEffectClass = interface(DNAnimatableClass)
  ['{EBE1C1EB-CEA9-56E8-AFDD-35C79C5DAB1D}']
  end;

  [DNTypeName('System.Windows.Media.Effects.BitmapEffect')]
  DNBitmapEffect = interface(DNAnimatable)
  ['{1040B749-8E2A-3B33-BD11-41D0252EAC13}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetOutput(input: DNBitmapEffectInput): DNBitmapSource;
    function Clone: DNBitmapEffect;
    function CloneCurrentValue: DNBitmapEffect;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapEffect = class(TDNGenericImport<DNBitmapEffectClass, DNBitmapEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNBitmapEffectInputClass = interface(DNAnimatableClass)
  ['{3FE6A869-6489-53C3-B958-4F7543DB1C09}']
  { static getter & setter } 

    {class} function get_ContextInputSource: DNBitmapSource;

  { constructors } 

    {class} function init: DNBitmapEffectInput; overload;
    {class} function init(input: DNBitmapSource): DNBitmapEffectInput; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_InputProperty: DNDependencyProperty;
   function __fakeFieldGet_AreaToApplyEffectUnitsProperty: DNDependencyProperty;
   function __fakeFieldGet_AreaToApplyEffectProperty: DNDependencyProperty;

  { static fields } 

    {class} property InputProperty: DNDependencyProperty read __fakeFieldGet_InputProperty;
    {class} property AreaToApplyEffectUnitsProperty: DNDependencyProperty read __fakeFieldGet_AreaToApplyEffectUnitsProperty;
    {class} property AreaToApplyEffectProperty: DNDependencyProperty read __fakeFieldGet_AreaToApplyEffectProperty;

  { static propertys } 

    {class} property ContextInputSource: DNBitmapSource read get_ContextInputSource;
  end;

  [DNTypeName('System.Windows.Media.Effects.BitmapEffectInput')]
  DNBitmapEffectInput = interface(DNAnimatable)
  ['{E2EB304D-FAA9-3E1B-B1FD-37755DF24EA5}']
  { getters & setters } 

    function get_Input: DNBitmapSource;
    procedure set_Input(value: DNBitmapSource);
    function get_AreaToApplyEffectUnits: DNBrushMappingMode;
    procedure set_AreaToApplyEffectUnits(value: DNBrushMappingMode);
    function get_AreaToApplyEffect: DNRect;
    procedure set_AreaToApplyEffect(value: DNRect);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function ShouldSerializeInput: Boolean;
    function Clone: DNBitmapEffectInput;
    function CloneCurrentValue: DNBitmapEffectInput;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Input: DNBitmapSource read get_Input write set_Input;
    property AreaToApplyEffectUnits: DNBrushMappingMode read get_AreaToApplyEffectUnits write set_AreaToApplyEffectUnits;
    property AreaToApplyEffect: DNRect read get_AreaToApplyEffect write set_AreaToApplyEffect;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapEffectInput = class(TDNGenericImport<DNBitmapEffectInputClass, DNBitmapEffectInput>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNEffectClass = interface(DNAnimatableClass)
  ['{F0C20F8A-17D2-5096-8771-CD121E3A340A}']
  { static getter & setter } 

    {class} function get_ImplicitInput: DNBrush;

  { static propertys } 

    {class} property ImplicitInput: DNBrush read get_ImplicitInput;
  end;

  [DNTypeName('System.Windows.Media.Effects.Effect')]
  DNEffect = interface(DNAnimatable)
  ['{A6D18183-5E9E-362B-B3D9-EAE2FE03B1E2}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNEffect;
    function CloneCurrentValue: DNEffect;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNEffect = class(TDNGenericImport<DNEffectClass, DNEffect>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeneralTransformClass = interface(DNAnimatableClass)
  ['{B308C8E0-DFD5-594F-8F06-82E8CC72548C}']
  end;

  [DNTypeName('System.Windows.Media.GeneralTransform')]
  DNGeneralTransform = interface(DNAnimatable)
  ['{69850262-B8A6-3393-B8D0-48A672E10AAA}']
  { getters & setters } 

    function get_Inverse: DNGeneralTransform;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Transform(point: DNPoint): DNPoint;
    function Clone: DNGeneralTransform;
    function CloneCurrentValue: DNGeneralTransform;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function TryTransform(inPoint: DNPoint; out result: DNPoint): Boolean;
    function TransformBounds(rect: DNRect): DNRect;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Inverse: DNGeneralTransform read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransform = class(TDNGenericImport<DNGeneralTransformClass, DNGeneralTransform>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTransformClass = interface(DNGeneralTransformClass)
  ['{53E4131D-CA00-55F7-96CA-48D1CD21244B}']
  { static getter & setter } 

    {class} function get_Identity: DNTransform;

  { static methods } 

    {class} function Parse(source: string): DNTransform;

  { static propertys } 

    {class} property Identity: DNTransform read get_Identity;
  end;

  [DNTypeName('System.Windows.Media.Transform')]
  DNTransform = interface(DNGeneralTransform)
  ['{741ABB34-3B1F-3A53-9278-B372D93DAC83}']
  { getters & setters } 

    function get_Value: DNMatrix;
    function get_Inverse: DNGeneralTransform;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTransform;
    function CloneCurrentValue: DNTransform;
    function TryTransform(inPoint: DNPoint; out result: DNPoint): Boolean;
    function TransformBounds(rect: DNRect): DNRect;
    function Transform(point: DNPoint): DNPoint;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Value: DNMatrix read get_Value;
    property Inverse: DNGeneralTransform read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTransform = class(TDNGenericImport<DNTransformClass, DNTransform>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeometryClass = interface(DNAnimatableClass)
  ['{2B6443AD-0AFF-54FB-9455-61F2B0A24348}']
  { static getter & setter } 

    {class} function get_Empty: DNGeometry;
    {class} function get_StandardFlatteningTolerance: Double;

  { static fields getter & setter } 

   function __fakeFieldGet_TransformProperty: DNDependencyProperty;

  { static fields } 

    {class} property TransformProperty: DNDependencyProperty read __fakeFieldGet_TransformProperty;

  { static methods } 

    {class} function Combine(geometry1: DNGeometry; geometry2: DNGeometry; mode: DNGeometryCombineMode; transform: DNTransform; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    {class} function Combine(geometry1: DNGeometry; geometry2: DNGeometry; mode: DNGeometryCombineMode; transform: DNTransform): DNPathGeometry; overload;
    {class} function Parse(source: string): DNGeometry;

  { static propertys } 

    {class} property Empty: DNGeometry read get_Empty;
    {class} property StandardFlatteningTolerance: Double read get_StandardFlatteningTolerance;
  end;

  [DNTypeName('System.Windows.Media.Geometry')]
  DNGeometry = interface(DNAnimatable)
  ['{F1421B1F-467C-31E8-8DCF-A3B9AF494C6A}']
  { getters & setters } 

    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_Bounds: DNRect;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGeometry;
    function CloneCurrentValue: DNGeometry;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetRenderBounds(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNRect; overload;
    function GetRenderBounds(pen: DNPen): DNRect; overload;
    function ShouldSerializeTransform: Boolean;
    function GetArea(tolerance: Double; &type: DNToleranceType): Double; overload;
    function GetArea: Double; overload;
    function FillContains(hitPoint: DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(hitPoint: DNPoint): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DNPoint): Boolean; overload;
    function FillContains(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(geometry: DNGeometry): Boolean; overload;
    function FillContainsWithDetail(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function FillContainsWithDetail(geometry: DNGeometry): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry): DNIntersectionDetail; overload;
    function GetFlattenedPathGeometry: DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen): DNPathGeometry; overload;
    function GetOutlinedPathGeometry: DNPathGeometry; overload;
    function IsEmpty: Boolean;
    function MayHaveCurves: Boolean;
    function GetFlattenedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetOutlinedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Transform: DNTransform read get_Transform write set_Transform;
    property Bounds: DNRect read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNGeometry = class(TDNGenericImport<DNGeometryClass, DNGeometry>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathGeometryClass = interface(DNGeometryClass)
  ['{C53F7A7E-8CE8-5CE0-9C9A-C18D238014DC}']
  { constructors } 

    {class} function init: DNPathGeometry; overload;
    {class} function init(figures: DDN.mscorlib.DNIEnumerable<DNPathFigure>): DNPathGeometry; overload;
    {class} function init(figures: DDN.mscorlib.DNIEnumerable<DNPathFigure>; fillRule: DNFillRule; transform: DNTransform): DNPathGeometry; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FillRuleProperty: DNDependencyProperty;
   function __fakeFieldGet_FiguresProperty: DNDependencyProperty;

  { static fields } 

    {class} property FillRuleProperty: DNDependencyProperty read __fakeFieldGet_FillRuleProperty;
    {class} property FiguresProperty: DNDependencyProperty read __fakeFieldGet_FiguresProperty;

  { static methods } 

    {class} function CreateFromGeometry(geometry: DNGeometry): DNPathGeometry;

  end;

  [DNTypeName('System.Windows.Media.PathGeometry')]
  DNPathGeometry = interface(DNGeometry)
  ['{2FA421AD-F697-3C75-B872-BB382377BB68}']
  { getters & setters } 

    function get_FillRule: DNFillRule;
    procedure set_FillRule(value: DNFillRule);
    function get_Figures: DNPathFigureCollection;
    procedure set_Figures(value: DNPathFigureCollection);
    function get_Bounds: DNRect;
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPathGeometry;
    function CloneCurrentValue: DNPathGeometry;
    procedure AddGeometry(geometry: DNGeometry);
    procedure GetPointAtFractionLength(progress: Double; out point: DNPoint; out tangent: DNPoint);
    procedure Clear;
    function IsEmpty: Boolean;
    function MayHaveCurves: Boolean;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetRenderBounds(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNRect; overload;
    function GetRenderBounds(pen: DNPen): DNRect; overload;
    function ShouldSerializeTransform: Boolean;
    function GetArea(tolerance: Double; &type: DNToleranceType): Double; overload;
    function GetArea: Double; overload;
    function FillContains(hitPoint: DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(hitPoint: DNPoint): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DNPoint): Boolean; overload;
    function FillContains(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(geometry: DNGeometry): Boolean; overload;
    function FillContainsWithDetail(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function FillContainsWithDetail(geometry: DNGeometry): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry): DNIntersectionDetail; overload;
    function GetFlattenedPathGeometry: DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen): DNPathGeometry; overload;
    function GetOutlinedPathGeometry: DNPathGeometry; overload;
    function GetFlattenedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetOutlinedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FillRule: DNFillRule read get_FillRule write set_FillRule;
    property Figures: DNPathFigureCollection read get_Figures write set_Figures;
    property Bounds: DNRect read get_Bounds;
    property Transform: DNTransform read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNPathGeometry = class(TDNGenericImport<DNPathGeometryClass, DNPathGeometry>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGuidelineSetClass = interface(DNAnimatableClass)
  ['{66D84254-E1F2-5827-B016-C5C232EBCDF9}']
  { constructors } 

    {class} function init: DNGuidelineSet; overload;
    {class} function init(guidelinesX: TArray<Double>; guidelinesY: TArray<Double>): DNGuidelineSet; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_GuidelinesXProperty: DNDependencyProperty;
   function __fakeFieldGet_GuidelinesYProperty: DNDependencyProperty;

  { static fields } 

    {class} property GuidelinesXProperty: DNDependencyProperty read __fakeFieldGet_GuidelinesXProperty;
    {class} property GuidelinesYProperty: DNDependencyProperty read __fakeFieldGet_GuidelinesYProperty;

  end;

  [DNTypeName('System.Windows.Media.GuidelineSet')]
  DNGuidelineSet = interface(DNAnimatable)
  ['{B304C5C7-EE52-334D-AB3C-D29A32639007}']
  { getters & setters } 

    function get_GuidelinesX: DNDoubleCollection;
    procedure set_GuidelinesX(value: DNDoubleCollection);
    function get_GuidelinesY: DNDoubleCollection;
    procedure set_GuidelinesY(value: DNDoubleCollection);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGuidelineSet;
    function CloneCurrentValue: DNGuidelineSet;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GuidelinesX: DNDoubleCollection read get_GuidelinesX write set_GuidelinesX;
    property GuidelinesY: DNDoubleCollection read get_GuidelinesY write set_GuidelinesY;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNGuidelineSet = class(TDNGenericImport<DNGuidelineSetClass, DNGuidelineSet>) end;

  //-------------namespace: System.Windows.Media----------------
  DNImageSourceClass = interface(DNAnimatableClass)
  ['{905EBAB0-528A-52AD-BB41-FAFD1DC96A02}']
  end;

  [DNTypeName('System.Windows.Media.ImageSource')]
  DNImageSource = interface(DNAnimatable)
  ['{ACD31F23-A250-35DC-865C-41A054C36954}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNImageSource;
    function CloneCurrentValue: DNImageSource;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNImageSource = class(TDNGenericImport<DNImageSourceClass, DNImageSource>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapSourceClass = interface(DNImageSourceClass)
  ['{665FFF33-F714-5E7F-9D68-129697FE8480}']
  { static methods } 

    {class} function Create(pixelWidth: Int32; pixelHeight: Int32; dpiX: Double; dpiY: Double; pixelFormat: DNPixelFormat; palette: DNBitmapPalette; pixels: DDN.mscorlib.DNArray; stride: Int32): DNBitmapSource; overload;
    {class} function Create(pixelWidth: Int32; pixelHeight: Int32; dpiX: Double; dpiY: Double; pixelFormat: DNPixelFormat; palette: DNBitmapPalette; buffer: IntPtr; bufferSize: Int32; stride: Int32): DNBitmapSource; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapSource')]
  DNBitmapSource = interface(DNImageSource)
  ['{2C85DC8C-C6F4-3894-8BE0-9FF2A5B547CD}']
  { getters & setters } 

    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBitmapSource;
    function CloneCurrentValue: DNBitmapSource;
    procedure CopyPixels(sourceRect: DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapSource = class(TDNGenericImport<DNBitmapSourceClass, DNBitmapSource>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNCameraClass = interface(DNAnimatableClass)
  ['{56D29D31-E32D-564E-B155-6BC84E4BE32C}']
  { static fields getter & setter } 

   function __fakeFieldGet_TransformProperty: DNDependencyProperty;

  { static fields } 

    {class} property TransformProperty: DNDependencyProperty read __fakeFieldGet_TransformProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Camera')]
  DNCamera = interface(DNAnimatable)
  ['{33E67798-77BC-31C7-BCEB-0732C7265617}']
  { getters & setters } 

    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNCamera;
    function CloneCurrentValue: DNCamera;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNCamera = class(TDNGenericImport<DNCameraClass, DNCamera>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNGeneralTransform3DClass = interface(DNAnimatableClass)
  ['{B0A16199-623A-5184-A408-87F569FF0AF4}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.GeneralTransform3D')]
  DNGeneralTransform3D = interface(DNAnimatable)
  ['{041F21DC-81B8-3E52-BB4E-E1FBB74FD719}']
  { getters & setters } 

    function get_Inverse: DNGeneralTransform3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Transform(point: DNPoint3D): DNPoint3D;
    function Clone: DNGeneralTransform3D;
    function CloneCurrentValue: DNGeneralTransform3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Inverse: DNGeneralTransform3D read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransform3D = class(TDNGenericImport<DNGeneralTransform3DClass, DNGeneralTransform3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNTransform3DClass = interface(DNGeneralTransform3DClass)
  ['{8DD66813-EC97-57F1-8189-22344271159B}']
  { static getter & setter } 

    {class} function get_Identity: DNTransform3D;

  { static propertys } 

    {class} property Identity: DNTransform3D read get_Identity;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Transform3D')]
  DNTransform3D = interface(DNGeneralTransform3D)
  ['{0E9DAFC3-1919-36DB-8461-AC3B824875F7}']
  { getters & setters } 

    function get_Inverse: DNGeneralTransform3D;
    function get_IsAffine: Boolean;
    function get_Value: DNMatrix3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Transform(point: DNPoint3D): DNPoint3D; overload;
    function Transform(vector: DNVector3D): DNVector3D; overload;
    function Transform(point: DNPoint4D): DNPoint4D; overload;
    procedure Transform(points: TArray<DNPoint3D>); overload;
    procedure Transform(vectors: TArray<DNVector3D>); overload;
    procedure Transform(points: TArray<DNPoint4D>); overload;
    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    function Clone: DNTransform3D;
    function CloneCurrentValue: DNTransform3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Inverse: DNGeneralTransform3D read get_Inverse;
    property IsAffine: Boolean read get_IsAffine;
    property Value: DNMatrix3D read get_Value;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTransform3D = class(TDNGenericImport<DNTransform3DClass, DNTransform3D>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMediaPlayerClass = interface(DNAnimatableClass)
  ['{641784FC-8AB7-5311-8FCD-B4E01C582B40}']
  { constructors } 

    {class} function init: DNMediaPlayer;

  end;

  [DNTypeName('System.Windows.Media.MediaPlayer')]
  DNMediaPlayer = interface(DNAnimatable)
  ['{1692BA44-74B0-3A9F-B2A7-724B7976C357}']
  { getters & setters } 

    function get_IsBuffering: Boolean;
    function get_CanPause: Boolean;
    function get_DownloadProgress: Double;
    function get_BufferingProgress: Double;
    function get_NaturalVideoHeight: Int32;
    function get_NaturalVideoWidth: Int32;
    function get_HasAudio: Boolean;
    function get_HasVideo: Boolean;
    function get_Source: DNUri;
    function get_Volume: Double;
    procedure set_Volume(value: Double);
    function get_Balance: Double;
    procedure set_Balance(value: Double);
    function get_ScrubbingEnabled: Boolean;
    procedure set_ScrubbingEnabled(value: Boolean);
    function get_IsMuted: Boolean;
    procedure set_IsMuted(value: Boolean);
    function get_NaturalDuration: DNDuration;
    function get_Position: DDN.mscorlib.DNTimeSpan;
    procedure set_Position(value: DDN.mscorlib.DNTimeSpan);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_Clock: DNMediaClock;
    procedure set_Clock(value: DNMediaClock);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_MediaOpened(value: DDN.mscorlib.DNEventHandler);
    procedure remove_MediaOpened(value: DDN.mscorlib.DNEventHandler);
    procedure add_MediaEnded(value: DDN.mscorlib.DNEventHandler);
    procedure remove_MediaEnded(value: DDN.mscorlib.DNEventHandler);
    procedure add_BufferingStarted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_BufferingStarted(value: DDN.mscorlib.DNEventHandler);
    procedure add_BufferingEnded(value: DDN.mscorlib.DNEventHandler);
    procedure remove_BufferingEnded(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Open(source: DNUri);
    procedure Play;
    procedure Pause;
    procedure Stop;
    procedure Close;
    function Clone: DNAnimatable;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function CloneCurrentValue: DNFreezable;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsBuffering: Boolean read get_IsBuffering;
    property CanPause: Boolean read get_CanPause;
    property DownloadProgress: Double read get_DownloadProgress;
    property BufferingProgress: Double read get_BufferingProgress;
    property NaturalVideoHeight: Int32 read get_NaturalVideoHeight;
    property NaturalVideoWidth: Int32 read get_NaturalVideoWidth;
    property HasAudio: Boolean read get_HasAudio;
    property HasVideo: Boolean read get_HasVideo;
    property Source: DNUri read get_Source;
    property Volume: Double read get_Volume write set_Volume;
    property Balance: Double read get_Balance write set_Balance;
    property ScrubbingEnabled: Boolean read get_ScrubbingEnabled write set_ScrubbingEnabled;
    property IsMuted: Boolean read get_IsMuted write set_IsMuted;
    property NaturalDuration: DNDuration read get_NaturalDuration;
    property Position: DDN.mscorlib.DNTimeSpan read get_Position write set_Position;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property Clock: DNMediaClock read get_Clock write set_Clock;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNMediaPlayer = class(TDNGenericImport<DNMediaPlayerClass, DNMediaPlayer>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathFigureClass = interface(DNAnimatableClass)
  ['{3DFE0F27-533A-515B-A032-37783F8B476C}']
  { constructors } 

    {class} function init: DNPathFigure; overload;
    {class} function init(start: DNPoint; segments: DDN.mscorlib.DNIEnumerable<DNPathSegment>; closed: Boolean): DNPathFigure; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_StartPointProperty: DNDependencyProperty;
   function __fakeFieldGet_IsFilledProperty: DNDependencyProperty;
   function __fakeFieldGet_SegmentsProperty: DNDependencyProperty;
   function __fakeFieldGet_IsClosedProperty: DNDependencyProperty;

  { static fields } 

    {class} property StartPointProperty: DNDependencyProperty read __fakeFieldGet_StartPointProperty;
    {class} property IsFilledProperty: DNDependencyProperty read __fakeFieldGet_IsFilledProperty;
    {class} property SegmentsProperty: DNDependencyProperty read __fakeFieldGet_SegmentsProperty;
    {class} property IsClosedProperty: DNDependencyProperty read __fakeFieldGet_IsClosedProperty;

  end;

  [DNTypeName('System.Windows.Media.PathFigure')]
  DNPathFigure = interface(DNAnimatable)
  ['{1EB598DC-FFA4-3096-8CAC-1CD09C7E0AE7}']
  { getters & setters } 

    function get_StartPoint: DNPoint;
    procedure set_StartPoint(value: DNPoint);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_Segments: DNPathSegmentCollection;
    procedure set_Segments(value: DNPathSegmentCollection);
    function get_IsClosed: Boolean;
    procedure set_IsClosed(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPathFigure;
    function CloneCurrentValue: DNPathFigure;
    function GetFlattenedPathFigure(tolerance: Double; &type: DNToleranceType): DNPathFigure; overload;
    function GetFlattenedPathFigure: DNPathFigure; overload;
    function MayHaveCurves: Boolean;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StartPoint: DNPoint read get_StartPoint write set_StartPoint;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property Segments: DNPathSegmentCollection read get_Segments write set_Segments;
    property IsClosed: Boolean read get_IsClosed write set_IsClosed;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNPathFigure = class(TDNGenericImport<DNPathFigureClass, DNPathFigure>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathFigureCollectionClass = interface(DNAnimatableClass)
  ['{9D8E1809-8828-5F22-B5CB-DF2BD60E491C}']
  { constructors } 

    {class} function init: DNPathFigureCollection; overload;
    {class} function init(capacity: Int32): DNPathFigureCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNPathFigure>): DNPathFigureCollection; overload;

  { static methods } 

    {class} function Parse(source: string): DNPathFigureCollection;

  end;

  [DNTypeName('System.Windows.Media.PathFigureCollection')]
  DNPathFigureCollection = interface(DNAnimatable)
  ['{59CC3F0B-C6AB-37F4-A5F3-59F0F1626E83}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPathFigureCollection;
    function CloneCurrentValue: DNPathFigureCollection;
    function &Contains(value: DNPathFigure): Boolean;
    function IndexOf(value: DNPathFigure): Int32;
    procedure Insert(index: Int32; value: DNPathFigure);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNPathFigure>; index: Int32);
    function GetEnumerator: DNPathFigureCollection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNPathFigureCollection = class(TDNGenericImport<DNPathFigureCollectionClass, DNPathFigureCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathSegmentClass = interface(DNAnimatableClass)
  ['{F381A562-B086-5C36-805B-58C1A9FB3C4C}']
  { static fields getter & setter } 

   function __fakeFieldGet_IsStrokedProperty: DNDependencyProperty;
   function __fakeFieldGet_IsSmoothJoinProperty: DNDependencyProperty;

  { static fields } 

    {class} property IsStrokedProperty: DNDependencyProperty read __fakeFieldGet_IsStrokedProperty;
    {class} property IsSmoothJoinProperty: DNDependencyProperty read __fakeFieldGet_IsSmoothJoinProperty;

  end;

  [DNTypeName('System.Windows.Media.PathSegment')]
  DNPathSegment = interface(DNAnimatable)
  ['{26C4B46D-37A1-34D8-944B-172DB11FDA09}']
  { getters & setters } 

    function get_IsStroked: Boolean;
    procedure set_IsStroked(value: Boolean);
    function get_IsSmoothJoin: Boolean;
    procedure set_IsSmoothJoin(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNPathSegment;
    function Clone: DNPathSegment;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsStroked: Boolean read get_IsStroked write set_IsStroked;
    property IsSmoothJoin: Boolean read get_IsSmoothJoin write set_IsSmoothJoin;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNPathSegment = class(TDNGenericImport<DNPathSegmentClass, DNPathSegment>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathSegmentCollectionClass = interface(DNAnimatableClass)
  ['{61C7F33F-3F30-5A4A-8546-AC40B6BFE9BC}']
  { constructors } 

    {class} function init: DNPathSegmentCollection; overload;
    {class} function init(capacity: Int32): DNPathSegmentCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNPathSegment>): DNPathSegmentCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.PathSegmentCollection')]
  DNPathSegmentCollection = interface(DNAnimatable)
  ['{C75B0044-5748-3AA0-99FC-4D9CFE7EBD0F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPathSegmentCollection;
    function CloneCurrentValue: DNPathSegmentCollection;
    function &Contains(value: DNPathSegment): Boolean;
    function IndexOf(value: DNPathSegment): Int32;
    procedure Insert(index: Int32; value: DNPathSegment);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNPathSegment>; index: Int32);
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNPathSegmentCollection = class(TDNGenericImport<DNPathSegmentCollectionClass, DNPathSegmentCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPenClass = interface(DNAnimatableClass)
  ['{8C4504AA-3CBF-51A6-A3D0-54BC48AC197C}']
  { constructors } 

    {class} function init: DNPen; overload;
    {class} function init(brush: DNBrush; thickness: Double): DNPen; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_BrushProperty: DNDependencyProperty;
   function __fakeFieldGet_ThicknessProperty: DNDependencyProperty;
   function __fakeFieldGet_StartLineCapProperty: DNDependencyProperty;
   function __fakeFieldGet_EndLineCapProperty: DNDependencyProperty;
   function __fakeFieldGet_DashCapProperty: DNDependencyProperty;
   function __fakeFieldGet_LineJoinProperty: DNDependencyProperty;
   function __fakeFieldGet_MiterLimitProperty: DNDependencyProperty;
   function __fakeFieldGet_DashStyleProperty: DNDependencyProperty;

  { static fields } 

    {class} property BrushProperty: DNDependencyProperty read __fakeFieldGet_BrushProperty;
    {class} property ThicknessProperty: DNDependencyProperty read __fakeFieldGet_ThicknessProperty;
    {class} property StartLineCapProperty: DNDependencyProperty read __fakeFieldGet_StartLineCapProperty;
    {class} property EndLineCapProperty: DNDependencyProperty read __fakeFieldGet_EndLineCapProperty;
    {class} property DashCapProperty: DNDependencyProperty read __fakeFieldGet_DashCapProperty;
    {class} property LineJoinProperty: DNDependencyProperty read __fakeFieldGet_LineJoinProperty;
    {class} property MiterLimitProperty: DNDependencyProperty read __fakeFieldGet_MiterLimitProperty;
    {class} property DashStyleProperty: DNDependencyProperty read __fakeFieldGet_DashStyleProperty;

  end;

  [DNTypeName('System.Windows.Media.Pen')]
  DNPen = interface(DNAnimatable)
  ['{9A3B6F90-CFA7-3BA4-8C84-E3A1303E62A6}']
  { getters & setters } 

    function get_Brush: DNBrush;
    procedure set_Brush(value: DNBrush);
    function get_Thickness: Double;
    procedure set_Thickness(value: Double);
    function get_StartLineCap: DNPenLineCap;
    procedure set_StartLineCap(value: DNPenLineCap);
    function get_EndLineCap: DNPenLineCap;
    procedure set_EndLineCap(value: DNPenLineCap);
    function get_DashCap: DNPenLineCap;
    procedure set_DashCap(value: DNPenLineCap);
    function get_LineJoin: DNPenLineJoin;
    procedure set_LineJoin(value: DNPenLineJoin);
    function get_MiterLimit: Double;
    procedure set_MiterLimit(value: Double);
    function get_DashStyle: DNDashStyle;
    procedure set_DashStyle(value: DNDashStyle);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPen;
    function CloneCurrentValue: DNPen;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Brush: DNBrush read get_Brush write set_Brush;
    property Thickness: Double read get_Thickness write set_Thickness;
    property StartLineCap: DNPenLineCap read get_StartLineCap write set_StartLineCap;
    property EndLineCap: DNPenLineCap read get_EndLineCap write set_EndLineCap;
    property DashCap: DNPenLineCap read get_DashCap write set_DashCap;
    property LineJoin: DNPenLineJoin read get_LineJoin write set_LineJoin;
    property MiterLimit: Double read get_MiterLimit write set_MiterLimit;
    property DashStyle: DNDashStyle read get_DashStyle write set_DashStyle;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNPen = class(TDNGenericImport<DNPenClass, DNPen>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTextEffectClass = interface(DNAnimatableClass)
  ['{086008F1-9659-54D4-B701-86EAB804E752}']
  { constructors } 

    {class} function init(transform: DNTransform; foreground: DNBrush; clip: DNGeometry; positionStart: Int32; positionCount: Int32): DNTextEffect; overload;
    {class} function init: DNTextEffect; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_TransformProperty: DNDependencyProperty;
   function __fakeFieldGet_ClipProperty: DNDependencyProperty;
   function __fakeFieldGet_ForegroundProperty: DNDependencyProperty;
   function __fakeFieldGet_PositionStartProperty: DNDependencyProperty;
   function __fakeFieldGet_PositionCountProperty: DNDependencyProperty;

  { static fields } 

    {class} property TransformProperty: DNDependencyProperty read __fakeFieldGet_TransformProperty;
    {class} property ClipProperty: DNDependencyProperty read __fakeFieldGet_ClipProperty;
    {class} property ForegroundProperty: DNDependencyProperty read __fakeFieldGet_ForegroundProperty;
    {class} property PositionStartProperty: DNDependencyProperty read __fakeFieldGet_PositionStartProperty;
    {class} property PositionCountProperty: DNDependencyProperty read __fakeFieldGet_PositionCountProperty;

  end;

  [DNTypeName('System.Windows.Media.TextEffect')]
  DNTextEffect = interface(DNAnimatable)
  ['{8D894F25-A058-35EB-B6D4-4B9AF9FE9CD8}']
  { getters & setters } 

    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_Clip: DNGeometry;
    procedure set_Clip(value: DNGeometry);
    function get_Foreground: DNBrush;
    procedure set_Foreground(value: DNBrush);
    function get_PositionStart: Int32;
    procedure set_PositionStart(value: Int32);
    function get_PositionCount: Int32;
    procedure set_PositionCount(value: Int32);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTextEffect;
    function CloneCurrentValue: DNTextEffect;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Transform: DNTransform read get_Transform write set_Transform;
    property Clip: DNGeometry read get_Clip write set_Clip;
    property Foreground: DNBrush read get_Foreground write set_Foreground;
    property PositionStart: Int32 read get_PositionStart write set_PositionStart;
    property PositionCount: Int32 read get_PositionCount write set_PositionCount;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTextEffect = class(TDNGenericImport<DNTextEffectClass, DNTextEffect>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTextEffectCollectionClass = interface(DNAnimatableClass)
  ['{C0AEAFEE-2547-56D4-9403-FDFDBBEE9573}']
  { constructors } 

    {class} function init: DNTextEffectCollection; overload;
    {class} function init(capacity: Int32): DNTextEffectCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNTextEffect>): DNTextEffectCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.TextEffectCollection')]
  DNTextEffectCollection = interface(DNAnimatable)
  ['{362F0B0E-6841-3BF8-BFA3-33AF0F061F79}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTextEffectCollection;
    function CloneCurrentValue: DNTextEffectCollection;
    function &Contains(value: DNTextEffect): Boolean;
    function IndexOf(value: DNTextEffect): Int32;
    procedure Insert(index: Int32; value: DNTextEffect);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNTextEffect>; index: Int32);
    function GetEnumerator: DNTextEffectCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTextEffectCollection = class(TDNGenericImport<DNTextEffectCollectionClass, DNTextEffectCollection>) end;

  //-------------namespace: System.Windows----------------
  DNTextDecorationClass = interface(DNAnimatableClass)
  ['{40C47789-F2CB-5825-9D65-7C382A51C352}']
  { constructors } 

    {class} function init: DNTextDecoration; overload;
    {class} function init(location: DNTextDecorationLocation; pen: DNPen; penOffset: Double; penOffsetUnit: DNTextDecorationUnit; penThicknessUnit: DNTextDecorationUnit): DNTextDecoration; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_PenProperty: DNDependencyProperty;
   function __fakeFieldGet_PenOffsetProperty: DNDependencyProperty;
   function __fakeFieldGet_PenOffsetUnitProperty: DNDependencyProperty;
   function __fakeFieldGet_PenThicknessUnitProperty: DNDependencyProperty;
   function __fakeFieldGet_LocationProperty: DNDependencyProperty;

  { static fields } 

    {class} property PenProperty: DNDependencyProperty read __fakeFieldGet_PenProperty;
    {class} property PenOffsetProperty: DNDependencyProperty read __fakeFieldGet_PenOffsetProperty;
    {class} property PenOffsetUnitProperty: DNDependencyProperty read __fakeFieldGet_PenOffsetUnitProperty;
    {class} property PenThicknessUnitProperty: DNDependencyProperty read __fakeFieldGet_PenThicknessUnitProperty;
    {class} property LocationProperty: DNDependencyProperty read __fakeFieldGet_LocationProperty;

  end;

  [DNTypeName('System.Windows.TextDecoration')]
  DNTextDecoration = interface(DNAnimatable)
  ['{4C637899-C808-3723-A5D5-B346DD2D0383}']
  { getters & setters } 

    function get_Pen: DNPen;
    procedure set_Pen(value: DNPen);
    function get_PenOffset: Double;
    procedure set_PenOffset(value: Double);
    function get_PenOffsetUnit: DNTextDecorationUnit;
    procedure set_PenOffsetUnit(value: DNTextDecorationUnit);
    function get_PenThicknessUnit: DNTextDecorationUnit;
    procedure set_PenThicknessUnit(value: DNTextDecorationUnit);
    function get_Location: DNTextDecorationLocation;
    procedure set_Location(value: DNTextDecorationLocation);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNTextDecoration;
    function Clone: DNTextDecoration;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pen: DNPen read get_Pen write set_Pen;
    property PenOffset: Double read get_PenOffset write set_PenOffset;
    property PenOffsetUnit: DNTextDecorationUnit read get_PenOffsetUnit write set_PenOffsetUnit;
    property PenThicknessUnit: DNTextDecorationUnit read get_PenThicknessUnit write set_PenThicknessUnit;
    property Location: DNTextDecorationLocation read get_Location write set_Location;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTextDecoration = class(TDNGenericImport<DNTextDecorationClass, DNTextDecoration>) end;

  //-------------namespace: System.Windows----------------
  DNTextDecorationCollectionClass = interface(DNAnimatableClass)
  ['{14FA1CF8-F01B-5AA1-86A6-A837E1C8E436}']
  { constructors } 

    {class} function init: DNTextDecorationCollection; overload;
    {class} function init(capacity: Int32): DNTextDecorationCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNTextDecoration>): DNTextDecorationCollection; overload;

  end;

  [DNTypeName('System.Windows.TextDecorationCollection')]
  DNTextDecorationCollection = interface(DNAnimatable)
  ['{0F6B3A3A-51C1-370B-9276-B64D41AD5A79}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Add(textDecorations: DDN.mscorlib.DNIEnumerable<DNTextDecoration>);
    function TryRemove(textDecorations: DDN.mscorlib.DNIEnumerable<DNTextDecoration>; out result: DNTextDecorationCollection): Boolean;
    function Clone: DNTextDecorationCollection;
    function CloneCurrentValue: DNTextDecorationCollection;
    function &Contains(value: DNTextDecoration): Boolean;
    function IndexOf(value: DNTextDecoration): Int32;
    procedure Insert(index: Int32; value: DNTextDecoration);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNTextDecoration>; index: Int32);
    function GetEnumerator: DNTextDecorationCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTextDecorationCollection = class(TDNGenericImport<DNTextDecorationCollectionClass, DNTextDecorationCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNKeySplineClass = interface(DNFreezableClass)
  ['{617FBF63-FF49-5A2A-BDF2-540188A802C4}']
  { constructors } 

    {class} function init: DNKeySpline; overload;
    {class} function init(x1: Double; y1: Double; x2: Double; y2: Double): DNKeySpline; overload;
    {class} function init(controlPoint1: DNPoint; controlPoint2: DNPoint): DNKeySpline; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.KeySpline')]
  DNKeySpline = interface(DNFreezable)
  ['{A1F78F82-5A09-32A1-ADA4-19E3742E8025}']
  { getters & setters } 

    function get_ControlPoint1: DNPoint;
    procedure set_ControlPoint1(value: DNPoint);
    function get_ControlPoint2: DNPoint;
    procedure set_ControlPoint2(value: DNPoint);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetSplineProgress(linearProgress: Double): Double;
    function ToString: string; overload;
    function ToString(formatProvider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function Clone: DNFreezable;
    function CloneCurrentValue: DNFreezable;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ControlPoint1: DNPoint read get_ControlPoint1 write set_ControlPoint1;
    property ControlPoint2: DNPoint read get_ControlPoint2 write set_ControlPoint2;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNKeySpline = class(TDNGenericImport<DNKeySplineClass, DNKeySpline>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDoubleCollectionClass = interface(DNFreezableClass)
  ['{07EE537F-CD55-5899-AB5C-3BEE0B85086B}']
  { constructors } 

    {class} function init: DNDoubleCollection; overload;
    {class} function init(capacity: Int32): DNDoubleCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<Double>): DNDoubleCollection; overload;

  { static methods } 

    {class} function Parse(source: string): DNDoubleCollection;

  end;

  [DNTypeName('System.Windows.Media.DoubleCollection')]
  DNDoubleCollection = interface(DNFreezable)
  ['{DA2C6912-B60C-3A40-94FF-DAF8E6258145}']
  { getters & setters } 

    function get_Count: Int32;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDoubleCollection;
    function CloneCurrentValue: DNDoubleCollection;
    function &Contains(value: Double): Boolean;
    function IndexOf(value: Double): Int32;
    procedure Insert(index: Int32; value: Double);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<Double>; index: Int32);
    function GetEnumerator: DNDoubleCollection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDoubleCollection = class(TDNGenericImport<DNDoubleCollectionClass, DNDoubleCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNImageMetadataClass = interface(DNFreezableClass)
  ['{2CF2594C-86C1-56F6-B32B-A4FB02D93DA4}']
  end;

  [DNTypeName('System.Windows.Media.ImageMetadata')]
  DNImageMetadata = interface(DNFreezable)
  ['{AFF212DC-9510-3375-B431-03E3894113EC}']
  { getters & setters } 

    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNImageMetadata;
    function CloneCurrentValue: DNFreezable;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNImageMetadata = class(TDNGenericImport<DNImageMetadataClass, DNImageMetadata>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNGeneralTransform2DTo3DClass = interface(DNFreezableClass)
  ['{FF03B4C2-F644-538D-B1D8-94D70D9621D0}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.GeneralTransform2DTo3D')]
  DNGeneralTransform2DTo3D = interface(DNFreezable)
  ['{7B68BE2D-0D08-3ECE-B674-EAA625FD077E}']
  { getters & setters } 

    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function TryTransform(inPoint: DNPoint; out result: DNPoint3D): Boolean;
    function Transform(point: DNPoint): DNPoint3D;
    function Clone: DNFreezable;
    function CloneCurrentValue: DNFreezable;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransform2DTo3D = class(TDNGenericImport<DNGeneralTransform2DTo3DClass, DNGeneralTransform2DTo3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNGeneralTransform3DTo2DClass = interface(DNFreezableClass)
  ['{28AC0F64-5AB1-51B0-AA42-A437E3AF31BE}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.GeneralTransform3DTo2D')]
  DNGeneralTransform3DTo2D = interface(DNFreezable)
  ['{98B49F46-9948-3578-B360-D07A0E735CF4}']
  { getters & setters } 

    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function TryTransform(inPoint: DNPoint3D; out result: DNPoint): Boolean;
    function Transform(point: DNPoint3D): DNPoint;
    function TransformBounds(rect3D: DNRect3D): DNRect;
    function Clone: DNFreezable;
    function CloneCurrentValue: DNFreezable;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransform3DTo2D = class(TDNGenericImport<DNGeneralTransform3DTo2DClass, DNGeneralTransform3DTo2D>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPointCollectionClass = interface(DNFreezableClass)
  ['{739D9B4E-CFE6-5E51-9A0F-5331596805FD}']
  { constructors } 

    {class} function init: DNPointCollection; overload;
    {class} function init(capacity: Int32): DNPointCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNPoint>): DNPointCollection; overload;

  { static methods } 

    {class} function Parse(source: string): DNPointCollection;

  end;

  [DNTypeName('System.Windows.Media.PointCollection')]
  DNPointCollection = interface(DNFreezable)
  ['{4B4689A8-9559-37BE-AB1C-D52EC2AF1D27}']
  { getters & setters } 

    function get_Count: Int32;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure CopyTo(&array: TArray<DNPoint>; index: Int32);
    function Clone: DNPointCollection;
    function CloneCurrentValue: DNPointCollection;
    function &Contains(value: DNPoint): Boolean;
    function IndexOf(value: DNPoint): Int32;
    procedure Insert(index: Int32; value: DNPoint);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DNPointCollection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetAsFrozen: DNFreezable;
    function GetCurrentValueAsFrozen: DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNPointCollection = class(TDNGenericImport<DNPointCollectionClass, DNPointCollection>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNVisual3DClass = interface(DNDependencyObjectClass)
  ['{B50C8E5C-B2B7-520A-9961-A10326CFC2F8}']
  { static fields getter & setter } 

   function __fakeFieldGet_TransformProperty: DNDependencyProperty;

  { static fields } 

    {class} property TransformProperty: DNDependencyProperty read __fakeFieldGet_TransformProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Visual3D')]
  DNVisual3D = interface(DNDependencyObject)
  ['{0347186A-1C4F-3B9A-BCBB-8E05DE293561}']
  { getters & setters } 

    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function IsAncestorOf(descendant: DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DNDependencyObject): DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform3D; overload;
    function TransformToDescendant(descendant: DNVisual3D): DNGeneralTransform3D;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform3DTo2D; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNVisual3D = class(TDNGenericImport<DNVisual3DClass, DNVisual3D>) end;

  //-------------namespace: System.Windows.Media----------------
  DNVisualClass = interface(DNDependencyObjectClass)
  ['{6EA45E0D-0B28-51A7-9787-88A86CEE0601}']
  end;

  [DNTypeName('System.Windows.Media.Visual')]
  DNVisual = interface(DNDependencyObject)
  ['{58DE4D0B-96E1-3B59-91F8-CC815D32C404}']
  { getters & setters } 

    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function IsAncestorOf(descendant: DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DNDependencyObject): DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform; overload;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform2DTo3D; overload;
    function TransformToDescendant(descendant: DNVisual): DNGeneralTransform;
    function TransformToVisual(visual: DNVisual): DNGeneralTransform;
    function PointToScreen(point: DNPoint): DNPoint;
    function PointFromScreen(point: DNPoint): DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNVisual = class(TDNGenericImport<DNVisualClass, DNVisual>) end;

  //-------------namespace: System.Windows----------------
  DNUIElementClass = interface(DNVisualClass)
  ['{ABF71CB6-F07B-5B0F-90C6-072C3D8160D5}']
  { constructors } 

    {class} function init: DNUIElement;

  { static fields getter & setter } 

   function __fakeFieldGet_PreviewMouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseLeftButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeftButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseLeftButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeftButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseRightButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseRightButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseRightButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseRightButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_GotMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryCursorEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_GotStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_GotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewLostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_TextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewQueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_GiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_DragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_DragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_DragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDropEvent: DNRoutedEvent;
   function __fakeFieldGet_DropEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchDownEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchUpEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchUpEvent: DNRoutedEvent;
   function __fakeFieldGet_GotTouchCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostTouchCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_IsMouseDirectlyOverProperty: DNDependencyProperty;
   function __fakeFieldGet_IsMouseOverProperty: DNDependencyProperty;
   function __fakeFieldGet_IsStylusOverProperty: DNDependencyProperty;
   function __fakeFieldGet_IsKeyboardFocusWithinProperty: DNDependencyProperty;
   function __fakeFieldGet_IsMouseCapturedProperty: DNDependencyProperty;
   function __fakeFieldGet_IsMouseCaptureWithinProperty: DNDependencyProperty;
   function __fakeFieldGet_IsStylusDirectlyOverProperty: DNDependencyProperty;
   function __fakeFieldGet_IsStylusCapturedProperty: DNDependencyProperty;
   function __fakeFieldGet_IsStylusCaptureWithinProperty: DNDependencyProperty;
   function __fakeFieldGet_IsKeyboardFocusedProperty: DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesDirectlyOverProperty: DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesOverProperty: DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesCapturedProperty: DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesCapturedWithinProperty: DNDependencyProperty;
   function __fakeFieldGet_AllowDropProperty: DNDependencyProperty;
   function __fakeFieldGet_RenderTransformProperty: DNDependencyProperty;
   function __fakeFieldGet_RenderTransformOriginProperty: DNDependencyProperty;
   function __fakeFieldGet_OpacityProperty: DNDependencyProperty;
   function __fakeFieldGet_OpacityMaskProperty: DNDependencyProperty;
   function __fakeFieldGet_BitmapEffectProperty: DNDependencyProperty;
   function __fakeFieldGet_EffectProperty: DNDependencyProperty;
   function __fakeFieldGet_BitmapEffectInputProperty: DNDependencyProperty;
   function __fakeFieldGet_CacheModeProperty: DNDependencyProperty;
   function __fakeFieldGet_UidProperty: DNDependencyProperty;
   function __fakeFieldGet_VisibilityProperty: DNDependencyProperty;
   function __fakeFieldGet_ClipToBoundsProperty: DNDependencyProperty;
   function __fakeFieldGet_ClipProperty: DNDependencyProperty;
   function __fakeFieldGet_SnapsToDevicePixelsProperty: DNDependencyProperty;
   function __fakeFieldGet_GotFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_IsFocusedProperty: DNDependencyProperty;
   function __fakeFieldGet_IsEnabledProperty: DNDependencyProperty;
   function __fakeFieldGet_IsHitTestVisibleProperty: DNDependencyProperty;
   function __fakeFieldGet_IsVisibleProperty: DNDependencyProperty;
   function __fakeFieldGet_FocusableProperty: DNDependencyProperty;
   function __fakeFieldGet_IsManipulationEnabledProperty: DNDependencyProperty;
   function __fakeFieldGet_ManipulationStartingEvent: DNRoutedEvent;
   function __fakeFieldGet_ManipulationStartedEvent: DNRoutedEvent;
   function __fakeFieldGet_ManipulationDeltaEvent: DNRoutedEvent;
   function __fakeFieldGet_ManipulationInertiaStartingEvent: DNRoutedEvent;
   function __fakeFieldGet_ManipulationBoundaryFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_ManipulationCompletedEvent: DNRoutedEvent;

  { static fields } 

    {class} property PreviewMouseDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseDownEvent;
    {class} property MouseDownEvent: DNRoutedEvent read __fakeFieldGet_MouseDownEvent;
    {class} property PreviewMouseUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseUpEvent;
    {class} property MouseUpEvent: DNRoutedEvent read __fakeFieldGet_MouseUpEvent;
    {class} property PreviewMouseLeftButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseLeftButtonDownEvent;
    {class} property MouseLeftButtonDownEvent: DNRoutedEvent read __fakeFieldGet_MouseLeftButtonDownEvent;
    {class} property PreviewMouseLeftButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseLeftButtonUpEvent;
    {class} property MouseLeftButtonUpEvent: DNRoutedEvent read __fakeFieldGet_MouseLeftButtonUpEvent;
    {class} property PreviewMouseRightButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseRightButtonDownEvent;
    {class} property MouseRightButtonDownEvent: DNRoutedEvent read __fakeFieldGet_MouseRightButtonDownEvent;
    {class} property PreviewMouseRightButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseRightButtonUpEvent;
    {class} property MouseRightButtonUpEvent: DNRoutedEvent read __fakeFieldGet_MouseRightButtonUpEvent;
    {class} property PreviewMouseMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseMoveEvent;
    {class} property MouseMoveEvent: DNRoutedEvent read __fakeFieldGet_MouseMoveEvent;
    {class} property PreviewMouseWheelEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseWheelEvent;
    {class} property MouseWheelEvent: DNRoutedEvent read __fakeFieldGet_MouseWheelEvent;
    {class} property MouseEnterEvent: DNRoutedEvent read __fakeFieldGet_MouseEnterEvent;
    {class} property MouseLeaveEvent: DNRoutedEvent read __fakeFieldGet_MouseLeaveEvent;
    {class} property GotMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotMouseCaptureEvent;
    {class} property LostMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostMouseCaptureEvent;
    {class} property QueryCursorEvent: DNRoutedEvent read __fakeFieldGet_QueryCursorEvent;
    {class} property PreviewStylusDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusDownEvent;
    {class} property StylusDownEvent: DNRoutedEvent read __fakeFieldGet_StylusDownEvent;
    {class} property PreviewStylusUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusUpEvent;
    {class} property StylusUpEvent: DNRoutedEvent read __fakeFieldGet_StylusUpEvent;
    {class} property PreviewStylusMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusMoveEvent;
    {class} property StylusMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusMoveEvent;
    {class} property PreviewStylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInAirMoveEvent;
    {class} property StylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusInAirMoveEvent;
    {class} property StylusEnterEvent: DNRoutedEvent read __fakeFieldGet_StylusEnterEvent;
    {class} property StylusLeaveEvent: DNRoutedEvent read __fakeFieldGet_StylusLeaveEvent;
    {class} property PreviewStylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInRangeEvent;
    {class} property StylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusInRangeEvent;
    {class} property PreviewStylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusOutOfRangeEvent;
    {class} property StylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusOutOfRangeEvent;
    {class} property PreviewStylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusSystemGestureEvent;
    {class} property StylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_StylusSystemGestureEvent;
    {class} property GotStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotStylusCaptureEvent;
    {class} property LostStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostStylusCaptureEvent;
    {class} property StylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonDownEvent;
    {class} property StylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonUpEvent;
    {class} property PreviewStylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonDownEvent;
    {class} property PreviewStylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonUpEvent;
    {class} property PreviewKeyDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyDownEvent;
    {class} property KeyDownEvent: DNRoutedEvent read __fakeFieldGet_KeyDownEvent;
    {class} property PreviewKeyUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyUpEvent;
    {class} property KeyUpEvent: DNRoutedEvent read __fakeFieldGet_KeyUpEvent;
    {class} property PreviewGotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewGotKeyboardFocusEvent;
    {class} property GotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_GotKeyboardFocusEvent;
    {class} property PreviewLostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewLostKeyboardFocusEvent;
    {class} property LostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_LostKeyboardFocusEvent;
    {class} property PreviewTextInputEvent: DNRoutedEvent read __fakeFieldGet_PreviewTextInputEvent;
    {class} property TextInputEvent: DNRoutedEvent read __fakeFieldGet_TextInputEvent;
    {class} property PreviewQueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_PreviewQueryContinueDragEvent;
    {class} property QueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_QueryContinueDragEvent;
    {class} property PreviewGiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_PreviewGiveFeedbackEvent;
    {class} property GiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_GiveFeedbackEvent;
    {class} property PreviewDragEnterEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragEnterEvent;
    {class} property DragEnterEvent: DNRoutedEvent read __fakeFieldGet_DragEnterEvent;
    {class} property PreviewDragOverEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragOverEvent;
    {class} property DragOverEvent: DNRoutedEvent read __fakeFieldGet_DragOverEvent;
    {class} property PreviewDragLeaveEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragLeaveEvent;
    {class} property DragLeaveEvent: DNRoutedEvent read __fakeFieldGet_DragLeaveEvent;
    {class} property PreviewDropEvent: DNRoutedEvent read __fakeFieldGet_PreviewDropEvent;
    {class} property DropEvent: DNRoutedEvent read __fakeFieldGet_DropEvent;
    {class} property PreviewTouchDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchDownEvent;
    {class} property TouchDownEvent: DNRoutedEvent read __fakeFieldGet_TouchDownEvent;
    {class} property PreviewTouchMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchMoveEvent;
    {class} property TouchMoveEvent: DNRoutedEvent read __fakeFieldGet_TouchMoveEvent;
    {class} property PreviewTouchUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchUpEvent;
    {class} property TouchUpEvent: DNRoutedEvent read __fakeFieldGet_TouchUpEvent;
    {class} property GotTouchCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotTouchCaptureEvent;
    {class} property LostTouchCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostTouchCaptureEvent;
    {class} property TouchEnterEvent: DNRoutedEvent read __fakeFieldGet_TouchEnterEvent;
    {class} property TouchLeaveEvent: DNRoutedEvent read __fakeFieldGet_TouchLeaveEvent;
    {class} property IsMouseDirectlyOverProperty: DNDependencyProperty read __fakeFieldGet_IsMouseDirectlyOverProperty;
    {class} property IsMouseOverProperty: DNDependencyProperty read __fakeFieldGet_IsMouseOverProperty;
    {class} property IsStylusOverProperty: DNDependencyProperty read __fakeFieldGet_IsStylusOverProperty;
    {class} property IsKeyboardFocusWithinProperty: DNDependencyProperty read __fakeFieldGet_IsKeyboardFocusWithinProperty;
    {class} property IsMouseCapturedProperty: DNDependencyProperty read __fakeFieldGet_IsMouseCapturedProperty;
    {class} property IsMouseCaptureWithinProperty: DNDependencyProperty read __fakeFieldGet_IsMouseCaptureWithinProperty;
    {class} property IsStylusDirectlyOverProperty: DNDependencyProperty read __fakeFieldGet_IsStylusDirectlyOverProperty;
    {class} property IsStylusCapturedProperty: DNDependencyProperty read __fakeFieldGet_IsStylusCapturedProperty;
    {class} property IsStylusCaptureWithinProperty: DNDependencyProperty read __fakeFieldGet_IsStylusCaptureWithinProperty;
    {class} property IsKeyboardFocusedProperty: DNDependencyProperty read __fakeFieldGet_IsKeyboardFocusedProperty;
    {class} property AreAnyTouchesDirectlyOverProperty: DNDependencyProperty read __fakeFieldGet_AreAnyTouchesDirectlyOverProperty;
    {class} property AreAnyTouchesOverProperty: DNDependencyProperty read __fakeFieldGet_AreAnyTouchesOverProperty;
    {class} property AreAnyTouchesCapturedProperty: DNDependencyProperty read __fakeFieldGet_AreAnyTouchesCapturedProperty;
    {class} property AreAnyTouchesCapturedWithinProperty: DNDependencyProperty read __fakeFieldGet_AreAnyTouchesCapturedWithinProperty;
    {class} property AllowDropProperty: DNDependencyProperty read __fakeFieldGet_AllowDropProperty;
    {class} property RenderTransformProperty: DNDependencyProperty read __fakeFieldGet_RenderTransformProperty;
    {class} property RenderTransformOriginProperty: DNDependencyProperty read __fakeFieldGet_RenderTransformOriginProperty;
    {class} property OpacityProperty: DNDependencyProperty read __fakeFieldGet_OpacityProperty;
    {class} property OpacityMaskProperty: DNDependencyProperty read __fakeFieldGet_OpacityMaskProperty;
    {class} property BitmapEffectProperty: DNDependencyProperty read __fakeFieldGet_BitmapEffectProperty;
    {class} property EffectProperty: DNDependencyProperty read __fakeFieldGet_EffectProperty;
    {class} property BitmapEffectInputProperty: DNDependencyProperty read __fakeFieldGet_BitmapEffectInputProperty;
    {class} property CacheModeProperty: DNDependencyProperty read __fakeFieldGet_CacheModeProperty;
    {class} property UidProperty: DNDependencyProperty read __fakeFieldGet_UidProperty;
    {class} property VisibilityProperty: DNDependencyProperty read __fakeFieldGet_VisibilityProperty;
    {class} property ClipToBoundsProperty: DNDependencyProperty read __fakeFieldGet_ClipToBoundsProperty;
    {class} property ClipProperty: DNDependencyProperty read __fakeFieldGet_ClipProperty;
    {class} property SnapsToDevicePixelsProperty: DNDependencyProperty read __fakeFieldGet_SnapsToDevicePixelsProperty;
    {class} property GotFocusEvent: DNRoutedEvent read __fakeFieldGet_GotFocusEvent;
    {class} property LostFocusEvent: DNRoutedEvent read __fakeFieldGet_LostFocusEvent;
    {class} property IsFocusedProperty: DNDependencyProperty read __fakeFieldGet_IsFocusedProperty;
    {class} property IsEnabledProperty: DNDependencyProperty read __fakeFieldGet_IsEnabledProperty;
    {class} property IsHitTestVisibleProperty: DNDependencyProperty read __fakeFieldGet_IsHitTestVisibleProperty;
    {class} property IsVisibleProperty: DNDependencyProperty read __fakeFieldGet_IsVisibleProperty;
    {class} property FocusableProperty: DNDependencyProperty read __fakeFieldGet_FocusableProperty;
    {class} property IsManipulationEnabledProperty: DNDependencyProperty read __fakeFieldGet_IsManipulationEnabledProperty;
    {class} property ManipulationStartingEvent: DNRoutedEvent read __fakeFieldGet_ManipulationStartingEvent;
    {class} property ManipulationStartedEvent: DNRoutedEvent read __fakeFieldGet_ManipulationStartedEvent;
    {class} property ManipulationDeltaEvent: DNRoutedEvent read __fakeFieldGet_ManipulationDeltaEvent;
    {class} property ManipulationInertiaStartingEvent: DNRoutedEvent read __fakeFieldGet_ManipulationInertiaStartingEvent;
    {class} property ManipulationBoundaryFeedbackEvent: DNRoutedEvent read __fakeFieldGet_ManipulationBoundaryFeedbackEvent;
    {class} property ManipulationCompletedEvent: DNRoutedEvent read __fakeFieldGet_ManipulationCompletedEvent;

  end;

  [DNTypeName('System.Windows.UIElement')]
  DNUIElement = interface(DNVisual)
  ['{6BAD4A5D-0F75-3EE6-B42E-1BF2E395AA8E}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_DesiredSize: DNSize;
    function get_IsMeasureValid: Boolean;
    function get_IsArrangeValid: Boolean;
    function get_RenderSize: DNSize;
    procedure set_RenderSize(value: DNSize);
    function get_RenderTransform: DNTransform;
    procedure set_RenderTransform(value: DNTransform);
    function get_RenderTransformOrigin: DNPoint;
    procedure set_RenderTransformOrigin(value: DNPoint);
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsInputMethodEnabled: Boolean;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OpacityMask: DNBrush;
    procedure set_OpacityMask(value: DNBrush);
    function get_BitmapEffect: DNBitmapEffect;
    procedure set_BitmapEffect(value: DNBitmapEffect);
    function get_Effect: DNEffect;
    procedure set_Effect(value: DNEffect);
    function get_BitmapEffectInput: DNBitmapEffectInput;
    procedure set_BitmapEffectInput(value: DNBitmapEffectInput);
    function get_CacheMode: DNCacheMode;
    procedure set_CacheMode(value: DNCacheMode);
    function get_Uid: string;
    procedure set_Uid(value: string);
    function get_Visibility: DNVisibility;
    procedure set_Visibility(value: DNVisibility);
    function get_ClipToBounds: Boolean;
    procedure set_ClipToBounds(value: Boolean);
    function get_Clip: DNGeometry;
    procedure set_Clip(value: DNGeometry);
    function get_SnapsToDevicePixels: Boolean;
    procedure set_SnapsToDevicePixels(value: Boolean);
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsHitTestVisible: Boolean;
    procedure set_IsHitTestVisible(value: Boolean);
    function get_IsVisible: Boolean;
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_PersistId: Int32;
    function get_IsManipulationEnabled: Boolean;
    procedure set_IsManipulationEnabled(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_LayoutUpdated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LayoutUpdated(value: DDN.mscorlib.DNEventHandler);
    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsHitTestVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsHitTestVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);

  { methods } 

    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    procedure InvalidateArrange;
    procedure InvalidateVisual;
    procedure UpdateLayout;
    function TranslatePoint(point: DNPoint; relativeTo: DNUIElement): DNPoint;
    function InputHitTest(point: DNPoint): DNIInputElement;
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function MoveFocus(request: DNTraversalRequest): Boolean;
    function PredictFocus(direction: DNFocusNavigationDirection): DNDependencyObject;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    procedure InvalidateMeasure;
    procedure Measure(availableSize: DNSize);
    procedure Arrange(finalRect: DNRect);
    function IsAncestorOf(descendant: DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DNDependencyObject): DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform; overload;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform2DTo3D; overload;
    function TransformToDescendant(descendant: DNVisual): DNGeneralTransform;
    function TransformToVisual(visual: DNVisual): DNGeneralTransform;
    function PointToScreen(point: DNPoint): DNPoint;
    function PointFromScreen(point: DNPoint): DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property DesiredSize: DNSize read get_DesiredSize;
    property IsMeasureValid: Boolean read get_IsMeasureValid;
    property IsArrangeValid: Boolean read get_IsArrangeValid;
    property RenderSize: DNSize read get_RenderSize write set_RenderSize;
    property RenderTransform: DNTransform read get_RenderTransform write set_RenderTransform;
    property RenderTransformOrigin: DNPoint read get_RenderTransformOrigin write set_RenderTransformOrigin;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OpacityMask: DNBrush read get_OpacityMask write set_OpacityMask;
    property BitmapEffect: DNBitmapEffect read get_BitmapEffect write set_BitmapEffect;
    property Effect: DNEffect read get_Effect write set_Effect;
    property BitmapEffectInput: DNBitmapEffectInput read get_BitmapEffectInput write set_BitmapEffectInput;
    property CacheMode: DNCacheMode read get_CacheMode write set_CacheMode;
    property Uid: string read get_Uid write set_Uid;
    property Visibility: DNVisibility read get_Visibility write set_Visibility;
    property ClipToBounds: Boolean read get_ClipToBounds write set_ClipToBounds;
    property Clip: DNGeometry read get_Clip write set_Clip;
    property SnapsToDevicePixels: Boolean read get_SnapsToDevicePixels write set_SnapsToDevicePixels;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsHitTestVisible: Boolean read get_IsHitTestVisible write set_IsHitTestVisible;
    property IsVisible: Boolean read get_IsVisible;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property PersistId: Int32 read get_PersistId;
    property IsManipulationEnabled: Boolean read get_IsManipulationEnabled write set_IsManipulationEnabled;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNUIElement = class(TDNGenericImport<DNUIElementClass, DNUIElement>) end;

  //-------------namespace: System.Windows.Controls----------------
  DNContextMenuClass = interface(DNObjectClass)
  ['{CCC50ABA-301A-5450-B423-E09D5D516434}']
  { constructors } 

    {class} function init: DNContextMenu;

  { static fields getter & setter } 

   function __fakeFieldGet_HorizontalOffsetProperty: DNDependencyProperty;
   function __fakeFieldGet_VerticalOffsetProperty: DNDependencyProperty;
   function __fakeFieldGet_IsOpenProperty: DNDependencyProperty;
   function __fakeFieldGet_PlacementTargetProperty: DNDependencyProperty;
   function __fakeFieldGet_PlacementRectangleProperty: DNDependencyProperty;
   function __fakeFieldGet_PlacementProperty: DNDependencyProperty;
   function __fakeFieldGet_HasDropShadowProperty: DNDependencyProperty;
   function __fakeFieldGet_CustomPopupPlacementCallbackProperty: DNDependencyProperty;
   function __fakeFieldGet_StaysOpenProperty: DNDependencyProperty;
   function __fakeFieldGet_OpenedEvent: DNRoutedEvent;
   function __fakeFieldGet_ClosedEvent: DNRoutedEvent;

  { static fields } 

    {class} property HorizontalOffsetProperty: DNDependencyProperty read __fakeFieldGet_HorizontalOffsetProperty;
    {class} property VerticalOffsetProperty: DNDependencyProperty read __fakeFieldGet_VerticalOffsetProperty;
    {class} property IsOpenProperty: DNDependencyProperty read __fakeFieldGet_IsOpenProperty;
    {class} property PlacementTargetProperty: DNDependencyProperty read __fakeFieldGet_PlacementTargetProperty;
    {class} property PlacementRectangleProperty: DNDependencyProperty read __fakeFieldGet_PlacementRectangleProperty;
    {class} property PlacementProperty: DNDependencyProperty read __fakeFieldGet_PlacementProperty;
    {class} property HasDropShadowProperty: DNDependencyProperty read __fakeFieldGet_HasDropShadowProperty;
    {class} property CustomPopupPlacementCallbackProperty: DNDependencyProperty read __fakeFieldGet_CustomPopupPlacementCallbackProperty;
    {class} property StaysOpenProperty: DNDependencyProperty read __fakeFieldGet_StaysOpenProperty;
    {class} property OpenedEvent: DNRoutedEvent read __fakeFieldGet_OpenedEvent;
    {class} property ClosedEvent: DNRoutedEvent read __fakeFieldGet_ClosedEvent;

  end;

  [DNTypeName('System.Windows.Controls.ContextMenu')]
  DNContextMenu = interface(DNObject)
  ['{FA85388B-7B62-340E-91C2-1D78E1879437}']
  { getters & setters } 

    function get_HorizontalOffset: Double;
    procedure set_HorizontalOffset(value: Double);
    function get_VerticalOffset: Double;
    procedure set_VerticalOffset(value: Double);
    function get_IsOpen: Boolean;
    procedure set_IsOpen(value: Boolean);
    function get_PlacementTarget: DNUIElement;
    procedure set_PlacementTarget(value: DNUIElement);
    function get_PlacementRectangle: DNRect;
    procedure set_PlacementRectangle(value: DNRect);
    function get_HasDropShadow: Boolean;
    procedure set_HasDropShadow(value: Boolean);
    function get_StaysOpen: Boolean;
    procedure set_StaysOpen(value: Boolean);
    function get_UsesItemContainerTemplate: Boolean;
    procedure set_UsesItemContainerTemplate(value: Boolean);
    function get_ItemsSource: DDN.mscorlib.DNIEnumerable;
    procedure set_ItemsSource(value: DDN.mscorlib.DNIEnumerable);
    function get_HasItems: Boolean;
    function get_DisplayMemberPath: string;
    procedure set_DisplayMemberPath(value: string);
    function get_ItemStringFormat: string;
    procedure set_ItemStringFormat(value: string);
    function get_ItemBindingGroup: DNBindingGroup;
    procedure set_ItemBindingGroup(value: DNBindingGroup);
    function get_ItemContainerStyle: DNStyle;
    procedure set_ItemContainerStyle(value: DNStyle);
    function get_IsGrouping: Boolean;
    function get_AlternationCount: Int32;
    procedure set_AlternationCount(value: Int32);
    function get_IsTextSearchEnabled: Boolean;
    procedure set_IsTextSearchEnabled(value: Boolean);
    function get_IsTextSearchCaseSensitive: Boolean;
    procedure set_IsTextSearchCaseSensitive(value: Boolean);
    function get_BorderBrush: DNBrush;
    procedure set_BorderBrush(value: DNBrush);
    function get_BorderThickness: DNThickness;
    procedure set_BorderThickness(value: DNThickness);
    function get_Background: DNBrush;
    procedure set_Background(value: DNBrush);
    function get_Foreground: DNBrush;
    procedure set_Foreground(value: DNBrush);
    function get_FontFamily: DNFontFamily;
    procedure set_FontFamily(value: DNFontFamily);
    function get_FontSize: Double;
    procedure set_FontSize(value: Double);
    function get_FontStretch: DNFontStretch;
    procedure set_FontStretch(value: DNFontStretch);
    function get_FontStyle: DNFontStyle;
    procedure set_FontStyle(value: DNFontStyle);
    function get_FontWeight: DNFontWeight;
    procedure set_FontWeight(value: DNFontWeight);
    function get_HorizontalContentAlignment: DNHorizontalAlignment;
    procedure set_HorizontalContentAlignment(value: DNHorizontalAlignment);
    function get_VerticalContentAlignment: DNVerticalAlignment;
    procedure set_VerticalContentAlignment(value: DNVerticalAlignment);
    function get_TabIndex: Int32;
    procedure set_TabIndex(value: Int32);
    function get_IsTabStop: Boolean;
    procedure set_IsTabStop(value: Boolean);
    function get_Padding: DNThickness;
    procedure set_Padding(value: DNThickness);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_OverridesDefaultStyle: Boolean;
    procedure set_OverridesDefaultStyle(value: Boolean);
    function get_UseLayoutRounding: Boolean;
    procedure set_UseLayoutRounding(value: Boolean);
    function get_Triggers: DNTriggerCollection;
    function get_TemplatedParent: DNDependencyObject;
    function get_Resources: DNResourceDictionary;
    procedure set_Resources(value: DNResourceDictionary);
    function get_DataContext: DDN.mscorlib.DNObject;
    procedure set_DataContext(value: DDN.mscorlib.DNObject);
    function get_BindingGroup: DNBindingGroup;
    procedure set_BindingGroup(value: DNBindingGroup);
    function get_Language: DNXmlLanguage;
    procedure set_Language(value: DNXmlLanguage);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_InputScope: DNInputScope;
    procedure set_InputScope(value: DNInputScope);
    function get_ActualWidth: Double;
    function get_ActualHeight: Double;
    function get_LayoutTransform: DNTransform;
    procedure set_LayoutTransform(value: DNTransform);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_MinWidth: Double;
    procedure set_MinWidth(value: Double);
    function get_MaxWidth: Double;
    procedure set_MaxWidth(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MinHeight: Double;
    procedure set_MinHeight(value: Double);
    function get_MaxHeight: Double;
    procedure set_MaxHeight(value: Double);
    function get_FlowDirection: DNFlowDirection;
    procedure set_FlowDirection(value: DNFlowDirection);
    function get_Margin: DNThickness;
    procedure set_Margin(value: DNThickness);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_FocusVisualStyle: DNStyle;
    procedure set_FocusVisualStyle(value: DNStyle);
    function get_Cursor: DNCursor;
    procedure set_Cursor(value: DNCursor);
    function get_ForceCursor: Boolean;
    procedure set_ForceCursor(value: Boolean);
    function get_IsInitialized: Boolean;
    function get_IsLoaded: Boolean;
    function get_ToolTip: DDN.mscorlib.DNObject;
    procedure set_ToolTip(value: DDN.mscorlib.DNObject);
    function get_ContextMenu: DNContextMenu;
    procedure set_ContextMenu(value: DNContextMenu);
    function get_Parent: DNDependencyObject;
    function get_HasAnimatedProperties: Boolean;
    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_DesiredSize: DNSize;
    function get_IsMeasureValid: Boolean;
    function get_IsArrangeValid: Boolean;
    function get_RenderSize: DNSize;
    procedure set_RenderSize(value: DNSize);
    function get_RenderTransform: DNTransform;
    procedure set_RenderTransform(value: DNTransform);
    function get_RenderTransformOrigin: DNPoint;
    procedure set_RenderTransformOrigin(value: DNPoint);
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsInputMethodEnabled: Boolean;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OpacityMask: DNBrush;
    procedure set_OpacityMask(value: DNBrush);
    function get_BitmapEffect: DNBitmapEffect;
    procedure set_BitmapEffect(value: DNBitmapEffect);
    function get_Effect: DNEffect;
    procedure set_Effect(value: DNEffect);
    function get_BitmapEffectInput: DNBitmapEffectInput;
    procedure set_BitmapEffectInput(value: DNBitmapEffectInput);
    function get_CacheMode: DNCacheMode;
    procedure set_CacheMode(value: DNCacheMode);
    function get_Uid: string;
    procedure set_Uid(value: string);
    function get_Visibility: DNVisibility;
    procedure set_Visibility(value: DNVisibility);
    function get_ClipToBounds: Boolean;
    procedure set_ClipToBounds(value: Boolean);
    function get_Clip: DNGeometry;
    procedure set_Clip(value: DNGeometry);
    function get_SnapsToDevicePixels: Boolean;
    procedure set_SnapsToDevicePixels(value: Boolean);
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsHitTestVisible: Boolean;
    procedure set_IsHitTestVisible(value: Boolean);
    function get_IsVisible: Boolean;
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_PersistId: Int32;
    function get_IsManipulationEnabled: Boolean;
    procedure set_IsManipulationEnabled(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Opened(value: DNRoutedEventHandler);
    procedure remove_Opened(value: DNRoutedEventHandler);
    procedure add_Closed(value: DNRoutedEventHandler);
    procedure remove_Closed(value: DNRoutedEventHandler);
    procedure add_PreviewMouseDoubleClick(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDoubleClick(value: DNMouseButtonEventHandler);
    procedure add_MouseDoubleClick(value: DNMouseButtonEventHandler);
    procedure remove_MouseDoubleClick(value: DNMouseButtonEventHandler);
    procedure add_DataContextChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_DataContextChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_RequestBringIntoView(value: DNRequestBringIntoViewEventHandler);
    procedure remove_RequestBringIntoView(value: DNRequestBringIntoViewEventHandler);
    procedure add_SizeChanged(value: DNSizeChangedEventHandler);
    procedure remove_SizeChanged(value: DNSizeChangedEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_Loaded(value: DNRoutedEventHandler);
    procedure remove_Loaded(value: DNRoutedEventHandler);
    procedure add_Unloaded(value: DNRoutedEventHandler);
    procedure remove_Unloaded(value: DNRoutedEventHandler);
    procedure add_ToolTipOpening(value: DNToolTipEventHandler);
    procedure remove_ToolTipOpening(value: DNToolTipEventHandler);
    procedure add_ToolTipClosing(value: DNToolTipEventHandler);
    procedure remove_ToolTipClosing(value: DNToolTipEventHandler);
    procedure add_ContextMenuOpening(value: DNContextMenuEventHandler);
    procedure remove_ContextMenuOpening(value: DNContextMenuEventHandler);
    procedure add_ContextMenuClosing(value: DNContextMenuEventHandler);
    procedure remove_ContextMenuClosing(value: DNContextMenuEventHandler);
    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_LayoutUpdated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LayoutUpdated(value: DDN.mscorlib.DNEventHandler);
    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsHitTestVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsHitTestVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);

  { methods } 

    function ShouldSerializeItems: Boolean;
    function ShouldSerializeGroupStyle: Boolean;
    function ContainerFromElement(element: DNDependencyObject): DNDependencyObject;
    procedure BeginInit;
    procedure EndInit;
    function IsItemItsOwnContainer(item: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function ShouldSerializeStyle: Boolean;
    procedure OnApplyTemplate;
    procedure BeginStoryboard(storyboard: DNStoryboard); overload;
    procedure BeginStoryboard(storyboard: DNStoryboard; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginStoryboard(storyboard: DNStoryboard; handoffBehavior: DNHandoffBehavior; isControllable: Boolean); overload;
    function ShouldSerializeTriggers: Boolean;
    function ShouldSerializeResources: Boolean;
    function GetBindingExpression(dp: DNDependencyProperty): DNBindingExpression;
    procedure BringIntoView; overload;
    procedure BringIntoView(targetRectangle: DNRect); overload;
    function MoveFocus(request: DNTraversalRequest): Boolean;
    function PredictFocus(direction: DNFocusNavigationDirection): DNDependencyObject;
    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    procedure UnregisterName(name: string);
    function FindName(name: string): DDN.mscorlib.DNObject;
    procedure UpdateDefaultStyle;
    function ApplyTemplate: Boolean;
    function FindResource(resourceKey: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function TryFindResource(resourceKey: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetResourceReference(dp: DNDependencyProperty; name: DDN.mscorlib.DNObject);
    function SetBinding(dp: DNDependencyProperty; binding: DNBindingBase): DNBindingExpressionBase; overload;
    function SetBinding(dp: DNDependencyProperty; path: string): DNBindingExpression; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    procedure InvalidateArrange;
    procedure InvalidateVisual;
    procedure UpdateLayout;
    function TranslatePoint(point: DNPoint; relativeTo: DNUIElement): DNPoint;
    function InputHitTest(point: DNPoint): DNIInputElement;
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    procedure InvalidateMeasure;
    procedure Measure(availableSize: DNSize);
    procedure Arrange(finalRect: DNRect);
    function IsAncestorOf(descendant: DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DNDependencyObject): DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform; overload;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform2DTo3D; overload;
    function TransformToDescendant(descendant: DNVisual): DNGeneralTransform;
    function TransformToVisual(visual: DNVisual): DNGeneralTransform;
    function PointToScreen(point: DNPoint): DNPoint;
    function PointFromScreen(point: DNPoint): DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HorizontalOffset: Double read get_HorizontalOffset write set_HorizontalOffset;
    property VerticalOffset: Double read get_VerticalOffset write set_VerticalOffset;
    property IsOpen: Boolean read get_IsOpen write set_IsOpen;
    property PlacementTarget: DNUIElement read get_PlacementTarget write set_PlacementTarget;
    property PlacementRectangle: DNRect read get_PlacementRectangle write set_PlacementRectangle;
    property HasDropShadow: Boolean read get_HasDropShadow write set_HasDropShadow;
    property StaysOpen: Boolean read get_StaysOpen write set_StaysOpen;
    property UsesItemContainerTemplate: Boolean read get_UsesItemContainerTemplate write set_UsesItemContainerTemplate;
    property ItemsSource: DDN.mscorlib.DNIEnumerable read get_ItemsSource write set_ItemsSource;
    property HasItems: Boolean read get_HasItems;
    property DisplayMemberPath: string read get_DisplayMemberPath write set_DisplayMemberPath;
    property ItemStringFormat: string read get_ItemStringFormat write set_ItemStringFormat;
    property ItemBindingGroup: DNBindingGroup read get_ItemBindingGroup write set_ItemBindingGroup;
    property ItemContainerStyle: DNStyle read get_ItemContainerStyle write set_ItemContainerStyle;
    property IsGrouping: Boolean read get_IsGrouping;
    property AlternationCount: Int32 read get_AlternationCount write set_AlternationCount;
    property IsTextSearchEnabled: Boolean read get_IsTextSearchEnabled write set_IsTextSearchEnabled;
    property IsTextSearchCaseSensitive: Boolean read get_IsTextSearchCaseSensitive write set_IsTextSearchCaseSensitive;
    property BorderBrush: DNBrush read get_BorderBrush write set_BorderBrush;
    property BorderThickness: DNThickness read get_BorderThickness write set_BorderThickness;
    property Background: DNBrush read get_Background write set_Background;
    property Foreground: DNBrush read get_Foreground write set_Foreground;
    property FontFamily: DNFontFamily read get_FontFamily write set_FontFamily;
    property FontSize: Double read get_FontSize write set_FontSize;
    property FontStretch: DNFontStretch read get_FontStretch write set_FontStretch;
    property FontStyle: DNFontStyle read get_FontStyle write set_FontStyle;
    property FontWeight: DNFontWeight read get_FontWeight write set_FontWeight;
    property HorizontalContentAlignment: DNHorizontalAlignment read get_HorizontalContentAlignment write set_HorizontalContentAlignment;
    property VerticalContentAlignment: DNVerticalAlignment read get_VerticalContentAlignment write set_VerticalContentAlignment;
    property TabIndex: Int32 read get_TabIndex write set_TabIndex;
    property IsTabStop: Boolean read get_IsTabStop write set_IsTabStop;
    property Padding: DNThickness read get_Padding write set_Padding;
    property Style: DNStyle read get_Style write set_Style;
    property OverridesDefaultStyle: Boolean read get_OverridesDefaultStyle write set_OverridesDefaultStyle;
    property UseLayoutRounding: Boolean read get_UseLayoutRounding write set_UseLayoutRounding;
    property Triggers: DNTriggerCollection read get_Triggers;
    property TemplatedParent: DNDependencyObject read get_TemplatedParent;
    property Resources: DNResourceDictionary read get_Resources write set_Resources;
    property DataContext: DDN.mscorlib.DNObject read get_DataContext write set_DataContext;
    property BindingGroup: DNBindingGroup read get_BindingGroup write set_BindingGroup;
    property Language: DNXmlLanguage read get_Language write set_Language;
    property Name: string read get_Name write set_Name;
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    property InputScope: DNInputScope read get_InputScope write set_InputScope;
    property ActualWidth: Double read get_ActualWidth;
    property ActualHeight: Double read get_ActualHeight;
    property LayoutTransform: DNTransform read get_LayoutTransform write set_LayoutTransform;
    property Width: Double read get_Width write set_Width;
    property MinWidth: Double read get_MinWidth write set_MinWidth;
    property MaxWidth: Double read get_MaxWidth write set_MaxWidth;
    property Height: Double read get_Height write set_Height;
    property MinHeight: Double read get_MinHeight write set_MinHeight;
    property MaxHeight: Double read get_MaxHeight write set_MaxHeight;
    property FlowDirection: DNFlowDirection read get_FlowDirection write set_FlowDirection;
    property Margin: DNThickness read get_Margin write set_Margin;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property FocusVisualStyle: DNStyle read get_FocusVisualStyle write set_FocusVisualStyle;
    property Cursor: DNCursor read get_Cursor write set_Cursor;
    property ForceCursor: Boolean read get_ForceCursor write set_ForceCursor;
    property IsInitialized: Boolean read get_IsInitialized;
    property IsLoaded: Boolean read get_IsLoaded;
    property ToolTip: DDN.mscorlib.DNObject read get_ToolTip write set_ToolTip;
    property ContextMenu: DNContextMenu read get_ContextMenu write set_ContextMenu;
    property Parent: DNDependencyObject read get_Parent;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property DesiredSize: DNSize read get_DesiredSize;
    property IsMeasureValid: Boolean read get_IsMeasureValid;
    property IsArrangeValid: Boolean read get_IsArrangeValid;
    property RenderSize: DNSize read get_RenderSize write set_RenderSize;
    property RenderTransform: DNTransform read get_RenderTransform write set_RenderTransform;
    property RenderTransformOrigin: DNPoint read get_RenderTransformOrigin write set_RenderTransformOrigin;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OpacityMask: DNBrush read get_OpacityMask write set_OpacityMask;
    property BitmapEffect: DNBitmapEffect read get_BitmapEffect write set_BitmapEffect;
    property Effect: DNEffect read get_Effect write set_Effect;
    property BitmapEffectInput: DNBitmapEffectInput read get_BitmapEffectInput write set_BitmapEffectInput;
    property CacheMode: DNCacheMode read get_CacheMode write set_CacheMode;
    property Uid: string read get_Uid write set_Uid;
    property Visibility: DNVisibility read get_Visibility write set_Visibility;
    property ClipToBounds: Boolean read get_ClipToBounds write set_ClipToBounds;
    property Clip: DNGeometry read get_Clip write set_Clip;
    property SnapsToDevicePixels: Boolean read get_SnapsToDevicePixels write set_SnapsToDevicePixels;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsHitTestVisible: Boolean read get_IsHitTestVisible write set_IsHitTestVisible;
    property IsVisible: Boolean read get_IsVisible;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property PersistId: Int32 read get_PersistId;
    property IsManipulationEnabled: Boolean read get_IsManipulationEnabled write set_IsManipulationEnabled;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNContextMenu = class(TDNGenericImport<DNContextMenuClass, DNContextMenu>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNFixedPageClass = interface(DNObjectClass)
  ['{E45E7032-32B2-544E-9229-DD1211963D5A}']
  { constructors } 

    {class} function init: DNFixedPage;

  { static fields getter & setter } 

   function __fakeFieldGet_PrintTicketProperty: DNDependencyProperty;
   function __fakeFieldGet_BackgroundProperty: DNDependencyProperty;
   function __fakeFieldGet_LeftProperty: DNDependencyProperty;
   function __fakeFieldGet_TopProperty: DNDependencyProperty;
   function __fakeFieldGet_RightProperty: DNDependencyProperty;
   function __fakeFieldGet_BottomProperty: DNDependencyProperty;
   function __fakeFieldGet_ContentBoxProperty: DNDependencyProperty;
   function __fakeFieldGet_BleedBoxProperty: DNDependencyProperty;
   function __fakeFieldGet_NavigateUriProperty: DNDependencyProperty;

  { static fields } 

    {class} property PrintTicketProperty: DNDependencyProperty read __fakeFieldGet_PrintTicketProperty;
    {class} property BackgroundProperty: DNDependencyProperty read __fakeFieldGet_BackgroundProperty;
    {class} property LeftProperty: DNDependencyProperty read __fakeFieldGet_LeftProperty;
    {class} property TopProperty: DNDependencyProperty read __fakeFieldGet_TopProperty;
    {class} property RightProperty: DNDependencyProperty read __fakeFieldGet_RightProperty;
    {class} property BottomProperty: DNDependencyProperty read __fakeFieldGet_BottomProperty;
    {class} property ContentBoxProperty: DNDependencyProperty read __fakeFieldGet_ContentBoxProperty;
    {class} property BleedBoxProperty: DNDependencyProperty read __fakeFieldGet_BleedBoxProperty;
    {class} property NavigateUriProperty: DNDependencyProperty read __fakeFieldGet_NavigateUriProperty;

  { static methods } 

    {class} function GetLeft(element: DNUIElement): Double;
    {class} procedure SetLeft(element: DNUIElement; length: Double);
    {class} function GetTop(element: DNUIElement): Double;
    {class} procedure SetTop(element: DNUIElement; length: Double);
    {class} function GetRight(element: DNUIElement): Double;
    {class} procedure SetRight(element: DNUIElement; length: Double);
    {class} function GetBottom(element: DNUIElement): Double;
    {class} procedure SetBottom(element: DNUIElement; length: Double);
    {class} function GetNavigateUri(element: DNUIElement): DNUri;
    {class} procedure SetNavigateUri(element: DNUIElement; uri: DNUri);

  end;

  [DNTypeName('System.Windows.Documents.FixedPage')]
  DNFixedPage = interface(DNObject)
  ['{4B35D9D3-2348-3AC5-81EC-145F7DB76DD0}']
  { getters & setters } 

    function get_Children: DNUIElementCollection;
    function get_PrintTicket: DDN.mscorlib.DNObject;
    procedure set_PrintTicket(value: DDN.mscorlib.DNObject);
    function get_Background: DNBrush;
    procedure set_Background(value: DNBrush);
    function get_ContentBox: DNRect;
    procedure set_ContentBox(value: DNRect);
    function get_BleedBox: DNRect;
    procedure set_BleedBox(value: DNRect);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_OverridesDefaultStyle: Boolean;
    procedure set_OverridesDefaultStyle(value: Boolean);
    function get_UseLayoutRounding: Boolean;
    procedure set_UseLayoutRounding(value: Boolean);
    function get_Triggers: DNTriggerCollection;
    function get_TemplatedParent: DNDependencyObject;
    function get_Resources: DNResourceDictionary;
    procedure set_Resources(value: DNResourceDictionary);
    function get_DataContext: DDN.mscorlib.DNObject;
    procedure set_DataContext(value: DDN.mscorlib.DNObject);
    function get_BindingGroup: DNBindingGroup;
    procedure set_BindingGroup(value: DNBindingGroup);
    function get_Language: DNXmlLanguage;
    procedure set_Language(value: DNXmlLanguage);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_InputScope: DNInputScope;
    procedure set_InputScope(value: DNInputScope);
    function get_ActualWidth: Double;
    function get_ActualHeight: Double;
    function get_LayoutTransform: DNTransform;
    procedure set_LayoutTransform(value: DNTransform);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_MinWidth: Double;
    procedure set_MinWidth(value: Double);
    function get_MaxWidth: Double;
    procedure set_MaxWidth(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MinHeight: Double;
    procedure set_MinHeight(value: Double);
    function get_MaxHeight: Double;
    procedure set_MaxHeight(value: Double);
    function get_FlowDirection: DNFlowDirection;
    procedure set_FlowDirection(value: DNFlowDirection);
    function get_Margin: DNThickness;
    procedure set_Margin(value: DNThickness);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_FocusVisualStyle: DNStyle;
    procedure set_FocusVisualStyle(value: DNStyle);
    function get_Cursor: DNCursor;
    procedure set_Cursor(value: DNCursor);
    function get_ForceCursor: Boolean;
    procedure set_ForceCursor(value: Boolean);
    function get_IsInitialized: Boolean;
    function get_IsLoaded: Boolean;
    function get_ToolTip: DDN.mscorlib.DNObject;
    procedure set_ToolTip(value: DDN.mscorlib.DNObject);
    function get_ContextMenu: DNContextMenu;
    procedure set_ContextMenu(value: DNContextMenu);
    function get_Parent: DNDependencyObject;
    function get_HasAnimatedProperties: Boolean;
    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_DesiredSize: DNSize;
    function get_IsMeasureValid: Boolean;
    function get_IsArrangeValid: Boolean;
    function get_RenderSize: DNSize;
    procedure set_RenderSize(value: DNSize);
    function get_RenderTransform: DNTransform;
    procedure set_RenderTransform(value: DNTransform);
    function get_RenderTransformOrigin: DNPoint;
    procedure set_RenderTransformOrigin(value: DNPoint);
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsInputMethodEnabled: Boolean;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OpacityMask: DNBrush;
    procedure set_OpacityMask(value: DNBrush);
    function get_BitmapEffect: DNBitmapEffect;
    procedure set_BitmapEffect(value: DNBitmapEffect);
    function get_Effect: DNEffect;
    procedure set_Effect(value: DNEffect);
    function get_BitmapEffectInput: DNBitmapEffectInput;
    procedure set_BitmapEffectInput(value: DNBitmapEffectInput);
    function get_CacheMode: DNCacheMode;
    procedure set_CacheMode(value: DNCacheMode);
    function get_Uid: string;
    procedure set_Uid(value: string);
    function get_Visibility: DNVisibility;
    procedure set_Visibility(value: DNVisibility);
    function get_ClipToBounds: Boolean;
    procedure set_ClipToBounds(value: Boolean);
    function get_Clip: DNGeometry;
    procedure set_Clip(value: DNGeometry);
    function get_SnapsToDevicePixels: Boolean;
    procedure set_SnapsToDevicePixels(value: Boolean);
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsHitTestVisible: Boolean;
    procedure set_IsHitTestVisible(value: Boolean);
    function get_IsVisible: Boolean;
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_PersistId: Int32;
    function get_IsManipulationEnabled: Boolean;
    procedure set_IsManipulationEnabled(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_DataContextChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_DataContextChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_RequestBringIntoView(value: DNRequestBringIntoViewEventHandler);
    procedure remove_RequestBringIntoView(value: DNRequestBringIntoViewEventHandler);
    procedure add_SizeChanged(value: DNSizeChangedEventHandler);
    procedure remove_SizeChanged(value: DNSizeChangedEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_Loaded(value: DNRoutedEventHandler);
    procedure remove_Loaded(value: DNRoutedEventHandler);
    procedure add_Unloaded(value: DNRoutedEventHandler);
    procedure remove_Unloaded(value: DNRoutedEventHandler);
    procedure add_ToolTipOpening(value: DNToolTipEventHandler);
    procedure remove_ToolTipOpening(value: DNToolTipEventHandler);
    procedure add_ToolTipClosing(value: DNToolTipEventHandler);
    procedure remove_ToolTipClosing(value: DNToolTipEventHandler);
    procedure add_ContextMenuOpening(value: DNContextMenuEventHandler);
    procedure remove_ContextMenuOpening(value: DNContextMenuEventHandler);
    procedure add_ContextMenuClosing(value: DNContextMenuEventHandler);
    procedure remove_ContextMenuClosing(value: DNContextMenuEventHandler);
    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_LayoutUpdated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LayoutUpdated(value: DDN.mscorlib.DNEventHandler);
    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsHitTestVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsHitTestVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_IsVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_IsVisibleChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DNDependencyPropertyChangedEventHandler);

  { methods } 

    function ShouldSerializeStyle: Boolean;
    procedure OnApplyTemplate;
    procedure BeginStoryboard(storyboard: DNStoryboard); overload;
    procedure BeginStoryboard(storyboard: DNStoryboard; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginStoryboard(storyboard: DNStoryboard; handoffBehavior: DNHandoffBehavior; isControllable: Boolean); overload;
    function ShouldSerializeTriggers: Boolean;
    function ShouldSerializeResources: Boolean;
    function GetBindingExpression(dp: DNDependencyProperty): DNBindingExpression;
    procedure BringIntoView; overload;
    procedure BringIntoView(targetRectangle: DNRect); overload;
    function MoveFocus(request: DNTraversalRequest): Boolean;
    function PredictFocus(direction: DNFocusNavigationDirection): DNDependencyObject;
    procedure BeginInit;
    procedure EndInit;
    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    procedure UnregisterName(name: string);
    function FindName(name: string): DDN.mscorlib.DNObject;
    procedure UpdateDefaultStyle;
    function ApplyTemplate: Boolean;
    function FindResource(resourceKey: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function TryFindResource(resourceKey: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetResourceReference(dp: DNDependencyProperty; name: DDN.mscorlib.DNObject);
    function SetBinding(dp: DNDependencyProperty; binding: DNBindingBase): DNBindingExpressionBase; overload;
    function SetBinding(dp: DNDependencyProperty; path: string): DNBindingExpression; overload;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    procedure InvalidateArrange;
    procedure InvalidateVisual;
    procedure UpdateLayout;
    function TranslatePoint(point: DNPoint; relativeTo: DNUIElement): DNPoint;
    function InputHitTest(point: DNPoint): DNIInputElement;
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure ApplyAnimationClock(dp: DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    procedure InvalidateMeasure;
    procedure Measure(availableSize: DNSize);
    procedure Arrange(finalRect: DNRect);
    function IsAncestorOf(descendant: DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DNDependencyObject): DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform; overload;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform2DTo3D; overload;
    function TransformToDescendant(descendant: DNVisual): DNGeneralTransform;
    function TransformToVisual(visual: DNVisual): DNGeneralTransform;
    function PointToScreen(point: DNPoint): DNPoint;
    function PointFromScreen(point: DNPoint): DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DNDependencyProperty); overload;
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DNDependencyProperty);
    procedure InvalidateProperty(dp: DNDependencyProperty);
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DNUIElementCollection read get_Children;
    property PrintTicket: DDN.mscorlib.DNObject read get_PrintTicket write set_PrintTicket;
    property Background: DNBrush read get_Background write set_Background;
    property ContentBox: DNRect read get_ContentBox write set_ContentBox;
    property BleedBox: DNRect read get_BleedBox write set_BleedBox;
    property Style: DNStyle read get_Style write set_Style;
    property OverridesDefaultStyle: Boolean read get_OverridesDefaultStyle write set_OverridesDefaultStyle;
    property UseLayoutRounding: Boolean read get_UseLayoutRounding write set_UseLayoutRounding;
    property Triggers: DNTriggerCollection read get_Triggers;
    property TemplatedParent: DNDependencyObject read get_TemplatedParent;
    property Resources: DNResourceDictionary read get_Resources write set_Resources;
    property DataContext: DDN.mscorlib.DNObject read get_DataContext write set_DataContext;
    property BindingGroup: DNBindingGroup read get_BindingGroup write set_BindingGroup;
    property Language: DNXmlLanguage read get_Language write set_Language;
    property Name: string read get_Name write set_Name;
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    property InputScope: DNInputScope read get_InputScope write set_InputScope;
    property ActualWidth: Double read get_ActualWidth;
    property ActualHeight: Double read get_ActualHeight;
    property LayoutTransform: DNTransform read get_LayoutTransform write set_LayoutTransform;
    property Width: Double read get_Width write set_Width;
    property MinWidth: Double read get_MinWidth write set_MinWidth;
    property MaxWidth: Double read get_MaxWidth write set_MaxWidth;
    property Height: Double read get_Height write set_Height;
    property MinHeight: Double read get_MinHeight write set_MinHeight;
    property MaxHeight: Double read get_MaxHeight write set_MaxHeight;
    property FlowDirection: DNFlowDirection read get_FlowDirection write set_FlowDirection;
    property Margin: DNThickness read get_Margin write set_Margin;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property FocusVisualStyle: DNStyle read get_FocusVisualStyle write set_FocusVisualStyle;
    property Cursor: DNCursor read get_Cursor write set_Cursor;
    property ForceCursor: Boolean read get_ForceCursor write set_ForceCursor;
    property IsInitialized: Boolean read get_IsInitialized;
    property IsLoaded: Boolean read get_IsLoaded;
    property ToolTip: DDN.mscorlib.DNObject read get_ToolTip write set_ToolTip;
    property ContextMenu: DNContextMenu read get_ContextMenu write set_ContextMenu;
    property Parent: DNDependencyObject read get_Parent;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property DesiredSize: DNSize read get_DesiredSize;
    property IsMeasureValid: Boolean read get_IsMeasureValid;
    property IsArrangeValid: Boolean read get_IsArrangeValid;
    property RenderSize: DNSize read get_RenderSize write set_RenderSize;
    property RenderTransform: DNTransform read get_RenderTransform write set_RenderTransform;
    property RenderTransformOrigin: DNPoint read get_RenderTransformOrigin write set_RenderTransformOrigin;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OpacityMask: DNBrush read get_OpacityMask write set_OpacityMask;
    property BitmapEffect: DNBitmapEffect read get_BitmapEffect write set_BitmapEffect;
    property Effect: DNEffect read get_Effect write set_Effect;
    property BitmapEffectInput: DNBitmapEffectInput read get_BitmapEffectInput write set_BitmapEffectInput;
    property CacheMode: DNCacheMode read get_CacheMode write set_CacheMode;
    property Uid: string read get_Uid write set_Uid;
    property Visibility: DNVisibility read get_Visibility write set_Visibility;
    property ClipToBounds: Boolean read get_ClipToBounds write set_ClipToBounds;
    property Clip: DNGeometry read get_Clip write set_Clip;
    property SnapsToDevicePixels: Boolean read get_SnapsToDevicePixels write set_SnapsToDevicePixels;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsHitTestVisible: Boolean read get_IsHitTestVisible write set_IsHitTestVisible;
    property IsVisible: Boolean read get_IsVisible;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property PersistId: Int32 read get_PersistId;
    property IsManipulationEnabled: Boolean read get_IsManipulationEnabled write set_IsManipulationEnabled;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNFixedPage = class(TDNGenericImport<DNFixedPageClass, DNFixedPage>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputDeviceClass = interface(DNDispatcherObjectClass)
  ['{A384A56F-F40C-5D51-927C-46F2891716FA}']
  end;

  [DNTypeName('System.Windows.Input.InputDevice')]
  DNInputDevice = interface(DNDispatcherObject)
  ['{AB953F5A-CDBC-35B3-B562-BD19196CEA73}']
  { getters & setters } 

    function get_Target: DNIInputElement;
    function get_ActiveSource: DNPresentationSource;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Target: DNIInputElement read get_Target;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNInputDevice = class(TDNGenericImport<DNInputDeviceClass, DNInputDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyboardDeviceClass = interface(DNInputDeviceClass)
  ['{89A31AB0-1069-52E2-A63C-2B9C6E6B979B}']
  end;

  [DNTypeName('System.Windows.Input.KeyboardDevice')]
  DNKeyboardDevice = interface(DNInputDevice)
  ['{1DC6163B-7861-3946-BDBB-94C10B28B7C6}']
  { getters & setters } 

    function get_Target: DNIInputElement;
    function get_ActiveSource: DNPresentationSource;
    function get_DefaultRestoreFocusMode: DNRestoreFocusMode;
    procedure set_DefaultRestoreFocusMode(value: DNRestoreFocusMode);
    function get_FocusedElement: DNIInputElement;
    function get_Modifiers: DNModifierKeys;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Focus(element: DNIInputElement): DNIInputElement;
    procedure ClearFocus;
    function IsKeyDown(key: DNKey): Boolean;
    function IsKeyUp(key: DNKey): Boolean;
    function IsKeyToggled(key: DNKey): Boolean;
    function GetKeyStates(key: DNKey): DNKeyStates;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Target: DNIInputElement read get_Target;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property DefaultRestoreFocusMode: DNRestoreFocusMode read get_DefaultRestoreFocusMode write set_DefaultRestoreFocusMode;
    property FocusedElement: DNIInputElement read get_FocusedElement;
    property Modifiers: DNModifierKeys read get_Modifiers;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNKeyboardDevice = class(TDNGenericImport<DNKeyboardDeviceClass, DNKeyboardDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseDeviceClass = interface(DNInputDeviceClass)
  ['{7F02437E-4CA8-56D8-9353-2D3E2285737F}']
  end;

  [DNTypeName('System.Windows.Input.MouseDevice')]
  DNMouseDevice = interface(DNInputDevice)
  ['{BBE65E9A-5F8B-35FD-A1B6-80A86DFC5CAB}']
  { getters & setters } 

    function get_Target: DNIInputElement;
    function get_ActiveSource: DNPresentationSource;
    function get_DirectlyOver: DNIInputElement;
    function get_Captured: DNIInputElement;
    function get_OverrideCursor: DNCursor;
    procedure set_OverrideCursor(value: DNCursor);
    function get_LeftButton: DNMouseButtonState;
    function get_RightButton: DNMouseButtonState;
    function get_MiddleButton: DNMouseButtonState;
    function get_XButton1: DNMouseButtonState;
    function get_XButton2: DNMouseButtonState;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Capture(element: DNIInputElement): Boolean; overload;
    procedure Synchronize;
    function Capture(element: DNIInputElement; captureMode: DNCaptureMode): Boolean; overload;
    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function SetCursor(cursor: DNCursor): Boolean;
    procedure UpdateCursor;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Target: DNIInputElement read get_Target;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property DirectlyOver: DNIInputElement read get_DirectlyOver;
    property Captured: DNIInputElement read get_Captured;
    property OverrideCursor: DNCursor read get_OverrideCursor write set_OverrideCursor;
    property LeftButton: DNMouseButtonState read get_LeftButton;
    property RightButton: DNMouseButtonState read get_RightButton;
    property MiddleButton: DNMouseButtonState read get_MiddleButton;
    property XButton1: DNMouseButtonState read get_XButton1;
    property XButton2: DNMouseButtonState read get_XButton2;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNMouseDevice = class(TDNGenericImport<DNMouseDeviceClass, DNMouseDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusDeviceClass = interface(DNInputDeviceClass)
  ['{70F80906-DD54-5B6D-8E04-A8BC477E1E32}']
  end;

  [DNTypeName('System.Windows.Input.StylusDevice')]
  DNStylusDevice = interface(DNInputDevice)
  ['{B5D16184-3EEC-3C5A-A206-370B75D52BC4}']
  { getters & setters } 

    function get_Target: DNIInputElement;
    function get_IsValid: Boolean;
    function get_ActiveSource: DNPresentationSource;
    function get_DirectlyOver: DNIInputElement;
    function get_Captured: DNIInputElement;
    function get_TabletDevice: DNTabletDevice;
    function get_Name: string;
    function get_Id: Int32;
    function get_StylusButtons: DNStylusButtonCollection;
    function get_InAir: Boolean;
    function get_Inverted: Boolean;
    function get_InRange: Boolean;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Capture(element: DNIInputElement; captureMode: DNCaptureMode): Boolean; overload;
    function Capture(element: DNIInputElement): Boolean; overload;
    procedure Synchronize;
    function GetStylusPoints(relativeTo: DNIInputElement): DNStylusPointCollection; overload;
    function GetStylusPoints(relativeTo: DNIInputElement; subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection; overload;
    function GetPosition(relativeTo: DNIInputElement): DNPoint;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Target: DNIInputElement read get_Target;
    property IsValid: Boolean read get_IsValid;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property DirectlyOver: DNIInputElement read get_DirectlyOver;
    property Captured: DNIInputElement read get_Captured;
    property TabletDevice: DNTabletDevice read get_TabletDevice;
    property Name: string read get_Name;
    property Id: Int32 read get_Id;
    property StylusButtons: DNStylusButtonCollection read get_StylusButtons;
    property InAir: Boolean read get_InAir;
    property Inverted: Boolean read get_Inverted;
    property InRange: Boolean read get_InRange;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNStylusDevice = class(TDNGenericImport<DNStylusDeviceClass, DNStylusDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTabletDeviceClass = interface(DNInputDeviceClass)
  ['{8CED1802-09D2-5BA9-8084-22AA3BCE49FC}']
  end;

  [DNTypeName('System.Windows.Input.TabletDevice')]
  DNTabletDevice = interface(DNInputDevice)
  ['{F8FB90C1-315B-34EE-A3D3-9F0479A5A1F0}']
  { getters & setters } 

    function get_Target: DNIInputElement;
    function get_ActiveSource: DNPresentationSource;
    function get_Id: Int32;
    function get_Name: string;
    function get_ProductId: string;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Target: DNIInputElement read get_Target;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property Id: Int32 read get_Id;
    property Name: string read get_Name;
    property ProductId: string read get_ProductId;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTabletDevice = class(TDNGenericImport<DNTabletDeviceClass, DNTabletDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTouchDeviceClass = interface(DNInputDeviceClass)
  ['{6F8E0640-AAA1-5C1F-9B01-6C528E95BE5C}']
  end;

  [DNTypeName('System.Windows.Input.TouchDevice')]
  DNTouchDevice = interface(DNInputDevice)
  ['{F2CFF1F3-959A-3792-A7CF-33D6A0CA251B}']
  { getters & setters } 

    function get_Id: Int32;
    function get_IsActive: Boolean;
    function get_Target: DNIInputElement;
    function get_ActiveSource: DNPresentationSource;
    function get_DirectlyOver: DNIInputElement;
    function get_Captured: DNIInputElement;
    function get_CaptureMode: DNCaptureMode;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Activated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Activated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Deactivated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Deactivated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Updated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Updated(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Capture(element: DNIInputElement): Boolean; overload;
    procedure Synchronize;
    function GetTouchPoint(relativeTo: DNIInputElement): DNTouchPoint;
    function GetIntermediateTouchPoints(relativeTo: DNIInputElement): DNTouchPointCollection;
    function Capture(element: DNIInputElement; captureMode: DNCaptureMode): Boolean; overload;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id;
    property IsActive: Boolean read get_IsActive;
    property Target: DNIInputElement read get_Target;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property DirectlyOver: DNIInputElement read get_DirectlyOver;
    property Captured: DNIInputElement read get_Captured;
    property CaptureMode: DNCaptureMode read get_CaptureMode;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTouchDevice = class(TDNGenericImport<DNTouchDeviceClass, DNTouchDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputManagerClass = interface(DNDispatcherObjectClass)
  ['{378EA036-2A36-585C-8884-DA6EBABE9104}']
  { static getter & setter } 

    {class} function get_Current: DNInputManager;

  { static propertys } 

    {class} property Current: DNInputManager read get_Current;
  end;

  [DNTypeName('System.Windows.Input.InputManager')]
  DNInputManager = interface(DNDispatcherObject)
  ['{2B41B8E0-C2AD-3AA3-8FA8-05E1D81B314D}']
  { getters & setters } 

    function get_InputProviders: DDN.mscorlib.DNICollection;
    function get_PrimaryKeyboardDevice: DNKeyboardDevice;
    function get_PrimaryMouseDevice: DNMouseDevice;
    function get_MostRecentInputDevice: DNInputDevice;
    function get_IsInMenuMode: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_PreProcessInput(value: DNPreProcessInputEventHandler);
    procedure remove_PreProcessInput(value: DNPreProcessInputEventHandler);
    procedure add_PreNotifyInput(value: DNNotifyInputEventHandler);
    procedure remove_PreNotifyInput(value: DNNotifyInputEventHandler);
    procedure add_PostNotifyInput(value: DNNotifyInputEventHandler);
    procedure remove_PostNotifyInput(value: DNNotifyInputEventHandler);
    procedure add_PostProcessInput(value: DNProcessInputEventHandler);
    procedure remove_PostProcessInput(value: DNProcessInputEventHandler);
    procedure add_EnterMenuMode(value: DDN.mscorlib.DNEventHandler);
    procedure remove_EnterMenuMode(value: DDN.mscorlib.DNEventHandler);
    procedure add_LeaveMenuMode(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LeaveMenuMode(value: DDN.mscorlib.DNEventHandler);
    procedure add_HitTestInvalidatedAsync(value: DDN.mscorlib.DNEventHandler);
    procedure remove_HitTestInvalidatedAsync(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure PushMenuMode(menuSite: DNPresentationSource);
    procedure PopMenuMode(menuSite: DNPresentationSource);
    function ProcessInput(input: DNInputEventArgs): Boolean;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InputProviders: DDN.mscorlib.DNICollection read get_InputProviders;
    property PrimaryKeyboardDevice: DNKeyboardDevice read get_PrimaryKeyboardDevice;
    property PrimaryMouseDevice: DNMouseDevice read get_PrimaryMouseDevice;
    property MostRecentInputDevice: DNInputDevice read get_MostRecentInputDevice;
    property IsInMenuMode: Boolean read get_IsInMenuMode;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNInputManager = class(TDNGenericImport<DNInputManagerClass, DNInputManager>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTextCompositionClass = interface(DNDispatcherObjectClass)
  ['{C742BCBF-E820-5E45-B598-0FB70485F7BA}']
  { constructors } 

    {class} function init(inputManager: DNInputManager; source: DNIInputElement; resultText: string): DNTextComposition; overload;
    {class} function init(inputManager: DNInputManager; source: DNIInputElement; resultText: string; autoComplete: DNTextCompositionAutoComplete): DNTextComposition; overload;

  end;

  [DNTypeName('System.Windows.Input.TextComposition')]
  DNTextComposition = interface(DNDispatcherObject)
  ['{8DF0ECBC-1B24-35AD-8F62-71FC274CD32C}']
  { getters & setters } 

    function get_Text: string;
    function get_CompositionText: string;
    function get_SystemText: string;
    function get_ControlText: string;
    function get_SystemCompositionText: string;
    function get_AutoComplete: DNTextCompositionAutoComplete;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    procedure Complete;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property CompositionText: string read get_CompositionText;
    property SystemText: string read get_SystemText;
    property ControlText: string read get_ControlText;
    property SystemCompositionText: string read get_SystemCompositionText;
    property AutoComplete: DNTextCompositionAutoComplete read get_AutoComplete;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNTextComposition = class(TDNGenericImport<DNTextCompositionClass, DNTextComposition>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNClockClass = interface(DNDispatcherObjectClass)
  ['{7A82B412-11C2-5A7A-9A8C-134E04A718D8}']
  end;

  [DNTypeName('System.Windows.Media.Animation.Clock')]
  DNClock = interface(DNDispatcherObject)
  ['{A502912F-F5A0-3BA0-A5DE-DE1560F9534D}']
  { getters & setters } 

    function get_Controller: DNClockController;
    function get_CurrentState: DNClockState;
    function get_HasControllableRoot: Boolean;
    function get_IsPaused: Boolean;
    function get_NaturalDuration: DNDuration;
    function get_Parent: DNClock;
    function get_Timeline: DNTimeline;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Controller: DNClockController read get_Controller;
    property CurrentState: DNClockState read get_CurrentState;
    property HasControllableRoot: Boolean read get_HasControllableRoot;
    property IsPaused: Boolean read get_IsPaused;
    property NaturalDuration: DNDuration read get_NaturalDuration;
    property Parent: DNClock read get_Parent;
    property Timeline: DNTimeline read get_Timeline;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNClock = class(TDNGenericImport<DNClockClass, DNClock>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNAnimationClockClass = interface(DNClockClass)
  ['{864DD4E0-A282-5966-9AE0-BF40A6326546}']
  end;

  [DNTypeName('System.Windows.Media.Animation.AnimationClock')]
  DNAnimationClock = interface(DNClock)
  ['{9A8534FF-1D1F-3528-A972-3E63C463E614}']
  { getters & setters } 

    function get_Timeline: DNAnimationTimeline;
    function get_Controller: DNClockController;
    function get_CurrentState: DNClockState;
    function get_HasControllableRoot: Boolean;
    function get_IsPaused: Boolean;
    function get_NaturalDuration: DNDuration;
    function get_Parent: DNClock;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Timeline: DNAnimationTimeline read get_Timeline;
    property Controller: DNClockController read get_Controller;
    property CurrentState: DNClockState read get_CurrentState;
    property HasControllableRoot: Boolean read get_HasControllableRoot;
    property IsPaused: Boolean read get_IsPaused;
    property NaturalDuration: DNDuration read get_NaturalDuration;
    property Parent: DNClock read get_Parent;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNAnimationClock = class(TDNGenericImport<DNAnimationClockClass, DNAnimationClock>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNClockGroupClass = interface(DNClockClass)
  ['{62EE6B59-4AF8-5365-B8AD-449F91B3FBB4}']
  end;

  [DNTypeName('System.Windows.Media.Animation.ClockGroup')]
  DNClockGroup = interface(DNClock)
  ['{CF10F3AB-0E66-385F-A87D-84C0937AFE0F}']
  { getters & setters } 

    function get_Timeline: DNTimelineGroup;
    function get_Children: DNClockCollection;
    function get_Controller: DNClockController;
    function get_CurrentState: DNClockState;
    function get_HasControllableRoot: Boolean;
    function get_IsPaused: Boolean;
    function get_NaturalDuration: DNDuration;
    function get_Parent: DNClock;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Timeline: DNTimelineGroup read get_Timeline;
    property Children: DNClockCollection read get_Children;
    property Controller: DNClockController read get_Controller;
    property CurrentState: DNClockState read get_CurrentState;
    property HasControllableRoot: Boolean read get_HasControllableRoot;
    property IsPaused: Boolean read get_IsPaused;
    property NaturalDuration: DNDuration read get_NaturalDuration;
    property Parent: DNClock read get_Parent;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNClockGroup = class(TDNGenericImport<DNClockGroupClass, DNClockGroup>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMediaClockClass = interface(DNClockClass)
  ['{75F257F6-A0A1-5E88-BBEA-23B435FD3DB3}']
  end;

  [DNTypeName('System.Windows.Media.MediaClock')]
  DNMediaClock = interface(DNClock)
  ['{E83B37F5-869E-3EA8-B42C-7DCD426DC861}']
  { getters & setters } 

    function get_Timeline: DNMediaTimeline;
    function get_Controller: DNClockController;
    function get_CurrentState: DNClockState;
    function get_HasControllableRoot: Boolean;
    function get_IsPaused: Boolean;
    function get_NaturalDuration: DNDuration;
    function get_Parent: DNClock;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Timeline: DNMediaTimeline read get_Timeline;
    property Controller: DNClockController read get_Controller;
    property CurrentState: DNClockState read get_CurrentState;
    property HasControllableRoot: Boolean read get_HasControllableRoot;
    property IsPaused: Boolean read get_IsPaused;
    property NaturalDuration: DNDuration read get_NaturalDuration;
    property Parent: DNClock read get_Parent;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNMediaClock = class(TDNGenericImport<DNMediaClockClass, DNMediaClock>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNClockControllerClass = interface(DNDispatcherObjectClass)
  ['{360E8080-E225-5A00-8C83-448986AB67DC}']
  end;

  [DNTypeName('System.Windows.Media.Animation.ClockController')]
  DNClockController = interface(DNDispatcherObject)
  ['{E72C8D7A-2DBB-3E83-8DDA-414186359E4B}']
  { getters & setters } 

    function get_Clock: DNClock;
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    procedure &Begin;
    procedure SkipToFill;
    procedure Pause;
    procedure Resume;
    procedure Stop;
    procedure Remove;
    procedure Seek(offset: DDN.mscorlib.DNTimeSpan; origin: DNTimeSeekOrigin);
    procedure SeekAlignedToLastTick(offset: DDN.mscorlib.DNTimeSpan; origin: DNTimeSeekOrigin);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Clock: DNClock read get_Clock;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNClockController = class(TDNGenericImport<DNClockControllerClass, DNClockController>) end;

  //-------------namespace: System.Windows.Media----------------
  DNCompositionTargetClass = interface(DNDispatcherObjectClass)
  ['{F7BE6EC5-A5EC-5202-8B8D-B442E78DD625}']
  end;

  [DNTypeName('System.Windows.Media.CompositionTarget')]
  DNCompositionTarget = interface(DNDispatcherObject)
  ['{2215B681-63F2-396D-9ABD-FCAC754CB5F9}']
  { getters & setters } 

    function get_RootVisual: DNVisual;
    procedure set_RootVisual(value: DNVisual);
    function get_TransformToDevice: DNMatrix;
    function get_TransformFromDevice: DNMatrix;
    function get_Dispatcher: DNDispatcher;

  { events } 

    {class} procedure add_Rendering(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_Rendering(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RootVisual: DNVisual read get_RootVisual write set_RootVisual;
    property TransformToDevice: DNMatrix read get_TransformToDevice;
    property TransformFromDevice: DNMatrix read get_TransformFromDevice;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNCompositionTarget = class(TDNGenericImport<DNCompositionTargetClass, DNCompositionTarget>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDrawingContextClass = interface(DNDispatcherObjectClass)
  ['{8D0F97D5-AA70-552E-8767-7073637B32F0}']
  end;

  [DNTypeName('System.Windows.Media.DrawingContext')]
  DNDrawingContext = interface(DNDispatcherObject)
  ['{EB8C26FB-3BB9-3C66-B290-E18E4CEFFF76}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    procedure DrawText(formattedText: DNFormattedText; origin: DNPoint);
    procedure Close;
    procedure DrawLine(pen: DNPen; point0: DNPoint; point1: DNPoint); overload;
    procedure DrawLine(pen: DNPen; point0: DNPoint; point0Animations: DNAnimationClock; point1: DNPoint; point1Animations: DNAnimationClock); overload;
    procedure DrawRectangle(brush: DNBrush; pen: DNPen; rectangle: DNRect); overload;
    procedure DrawRectangle(brush: DNBrush; pen: DNPen; rectangle: DNRect; rectangleAnimations: DNAnimationClock); overload;
    procedure DrawRoundedRectangle(brush: DNBrush; pen: DNPen; rectangle: DNRect; radiusX: Double; radiusY: Double); overload;
    procedure DrawRoundedRectangle(brush: DNBrush; pen: DNPen; rectangle: DNRect; rectangleAnimations: DNAnimationClock; radiusX: Double; radiusXAnimations: DNAnimationClock; radiusY: Double; radiusYAnimations: DNAnimationClock); overload;
    procedure DrawEllipse(brush: DNBrush; pen: DNPen; center: DNPoint; radiusX: Double; radiusY: Double); overload;
    procedure DrawEllipse(brush: DNBrush; pen: DNPen; center: DNPoint; centerAnimations: DNAnimationClock; radiusX: Double; radiusXAnimations: DNAnimationClock; radiusY: Double; radiusYAnimations: DNAnimationClock); overload;
    procedure DrawGeometry(brush: DNBrush; pen: DNPen; geometry: DNGeometry);
    procedure DrawImage(imageSource: DNImageSource; rectangle: DNRect); overload;
    procedure DrawImage(imageSource: DNImageSource; rectangle: DNRect; rectangleAnimations: DNAnimationClock); overload;
    procedure DrawGlyphRun(foregroundBrush: DNBrush; glyphRun: DNGlyphRun);
    procedure DrawDrawing(drawing: DNDrawing);
    procedure DrawVideo(player: DNMediaPlayer; rectangle: DNRect); overload;
    procedure DrawVideo(player: DNMediaPlayer; rectangle: DNRect; rectangleAnimations: DNAnimationClock); overload;
    procedure PushClip(clipGeometry: DNGeometry);
    procedure PushOpacityMask(opacityMask: DNBrush);
    procedure PushOpacity(opacity: Double); overload;
    procedure PushOpacity(opacity: Double; opacityAnimations: DNAnimationClock); overload;
    procedure PushTransform(transform: DNTransform);
    procedure PushGuidelineSet(guidelines: DNGuidelineSet);
    procedure PushEffect(effect: DNBitmapEffect; effectInput: DNBitmapEffectInput);
    procedure Pop;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDrawingContext = class(TDNGenericImport<DNDrawingContextClass, DNDrawingContext>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapPaletteClass = interface(DNDispatcherObjectClass)
  ['{691D3366-B52F-5D49-8D62-33718138F8DD}']
  { constructors } 

    {class} function init(colors: DDN.mscorlib.DNIList<DNColor>): DNBitmapPalette; overload;
    {class} function init(bitmapSource: DNBitmapSource; maxColorCount: Int32): DNBitmapPalette; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapPalette')]
  DNBitmapPalette = interface(DNDispatcherObject)
  ['{68601938-3221-3DF3-A7C1-8CA5C08E3BDE}']
  { getters & setters } 

    function get_Colors: DDN.mscorlib.DNIList<DNColor>;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Colors: DDN.mscorlib.DNIList<DNColor> read get_Colors;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapPalette = class(TDNGenericImport<DNBitmapPaletteClass, DNBitmapPalette>) end;

  //-------------namespace: System.Windows----------------
  DNPresentationSourceClass = interface(DNDispatcherObjectClass)
  ['{F80CB59C-8B9F-5B30-90CE-2F16B7062F19}']
  { static getter & setter } 

    {class} function get_CurrentSources: DDN.mscorlib.DNIEnumerable;

  { static methods } 

    {class} function FromVisual(visual: DNVisual): DNPresentationSource;
    {class} function FromDependencyObject(dependencyObject: DNDependencyObject): DNPresentationSource;

  { static propertys } 

    {class} property CurrentSources: DDN.mscorlib.DNIEnumerable read get_CurrentSources;
  end;

  [DNTypeName('System.Windows.PresentationSource')]
  DNPresentationSource = interface(DNDispatcherObject)
  ['{2748833D-7C0C-3496-9673-B36C0D44B609}']
  { getters & setters } 

    function get_CompositionTarget: DNCompositionTarget;
    function get_RootVisual: DNVisual;
    procedure set_RootVisual(value: DNVisual);
    function get_IsDisposed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_ContentRendered(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ContentRendered(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CompositionTarget: DNCompositionTarget read get_CompositionTarget;
    property RootVisual: DNVisual read get_RootVisual write set_RootVisual;
    property IsDisposed: Boolean read get_IsDisposed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNPresentationSource = class(TDNGenericImport<DNPresentationSourceClass, DNPresentationSource>) end;

  //-------------namespace: System.Windows----------------
  DNStyleClass = interface(DNDispatcherObjectClass)
  ['{4C11D477-9929-5B22-A757-B3182295E51F}']
  { constructors } 

    {class} function init: DNStyle; overload;
    {class} function init(targetType: DDN.mscorlib.DNType): DNStyle; overload;
    {class} function init(targetType: DDN.mscorlib.DNType; basedOn: DNStyle): DNStyle; overload;

  end;

  [DNTypeName('System.Windows.Style')]
  DNStyle = interface(DNDispatcherObject)
  ['{B5E68435-D823-3B2F-9622-A1E593815697}']
  { getters & setters } 

    function get_IsSealed: Boolean;
    function get_TargetType: DDN.mscorlib.DNType;
    procedure set_TargetType(value: DDN.mscorlib.DNType);
    function get_BasedOn: DNStyle;
    procedure set_BasedOn(value: DNStyle);
    function get_Triggers: DNTriggerCollection;
    function get_Resources: DNResourceDictionary;
    procedure set_Resources(value: DNResourceDictionary);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    procedure UnregisterName(name: string);
    function GetHashCode: Int32;
    procedure Seal;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsSealed: Boolean read get_IsSealed;
    property TargetType: DDN.mscorlib.DNType read get_TargetType write set_TargetType;
    property BasedOn: DNStyle read get_BasedOn write set_BasedOn;
    property Triggers: DNTriggerCollection read get_Triggers;
    property Resources: DNResourceDictionary read get_Resources write set_Resources;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNStyle = class(TDNGenericImport<DNStyleClass, DNStyle>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherFrameClass = interface(DNDispatcherObjectClass)
  ['{E6DD9745-ADF2-559A-8CB6-316D900ECDFD}']
  { constructors } 

    {class} function init: DNDispatcherFrame; overload;
    {class} function init(exitWhenRequested: Boolean): DNDispatcherFrame; overload;

  end;

  [DNTypeName('System.Windows.Threading.DispatcherFrame')]
  DNDispatcherFrame = interface(DNDispatcherObject)
  ['{68499B53-61D4-3068-B35C-97BFE597985E}']
  { getters & setters } 

    function get_Continue: Boolean;
    procedure set_Continue(value: Boolean);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Continue: Boolean read get_Continue write set_Continue;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherFrame = class(TDNGenericImport<DNDispatcherFrameClass, DNDispatcherFrame>) end;

  //-------------namespace: System.Windows----------------
  DNWeakEventManagerClass = interface(DNDispatcherObjectClass)
  ['{EC1A780D-5474-5C90-A449-485A6D896FF3}']
  end;

  [DNTypeName('System.Windows.WeakEventManager')]
  DNWeakEventManager = interface(DNDispatcherObject)
  ['{1E3727EE-0804-35E0-A877-BE085FAB7564}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNWeakEventManager = class(TDNGenericImport<DNWeakEventManagerClass, DNWeakEventManager>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherOperationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{48A2A2EF-CE7F-5B39-9372-F9A28A5D7AA7}']
  end;

  [DNTypeName('System.Windows.Threading.DispatcherOperation')]
  DNDispatcherOperation = interface(DDN.mscorlib.DNObject)
  ['{DB22AF9A-DDDD-3CF5-8768-4C076EDBCC02}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;
    function get_Priority: DNDispatcherPriority;
    procedure set_Priority(value: DNDispatcherPriority);
    function get_Status: DNDispatcherOperationStatus;
    function get_Task: DDN.mscorlib.DNTask;
    function get_Result: DDN.mscorlib.DNObject;

  { events } 

    procedure add_Aborted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Aborted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetAwaiter: DDN.mscorlib.DNTaskAwaiter;
    function Wait: DNDispatcherOperationStatus; overload;
    function Wait(timeout: DDN.mscorlib.DNTimeSpan): DNDispatcherOperationStatus; overload;
    function &Abort: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
    property Priority: DNDispatcherPriority read get_Priority write set_Priority;
    property Status: DNDispatcherOperationStatus read get_Status;
    property Task: DDN.mscorlib.DNTask read get_Task;
    property Result: DDN.mscorlib.DNObject read get_Result;
  end;

  TDNDispatcherOperation = class(TDNGenericImport<DNDispatcherOperationClass, DNDispatcherOperation>) end;

  //-------------namespace: System.Xaml----------------
  [DNTypeName('System.Xaml.INamespacePrefixLookup')]
  DNINamespacePrefixLookup = interface(DDN.mscorlib.DNObject)
  ['{8DE00F54-F37C-3432-BCCB-F0FB4FCDF5A7}']
  { methods } 

    function LookupPrefix(ns: string): string;

  end;

  //-------------namespace: System.Xaml----------------
  [DNTypeName('System.Xaml.IXamlNamespaceResolver')]
  DNIXamlNamespaceResolver = interface(DDN.mscorlib.DNObject)
  ['{8147246D-027D-3EE4-B99A-44D48F453083}']
  { methods } 

    function GetNamespace(prefix: string): string;
    function GetNamespacePrefixes: DDN.mscorlib.DNIEnumerable<DNNamespaceDeclaration>;

  end;

  //-------------namespace: System.Xaml----------------
  DNNamespaceDeclarationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82442CBC-3F03-5CB1-8AE8-69DD8F660A18}']
  { constructors } 

    {class} function init(ns: string; prefix: string): DNNamespaceDeclaration;

  end;

  [DNTypeName('System.Xaml.NamespaceDeclaration')]
  DNNamespaceDeclaration = interface(DDN.mscorlib.DNObject)
  ['{9D436953-0ABA-3DF2-A4C6-A07578CE137D}']
  { getters & setters } 

    function get_Prefix: string;
    function get_Namespace: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Prefix: string read get_Prefix;
    property Namespace: string read get_Namespace;
  end;

  TDNNamespaceDeclaration = class(TDNGenericImport<DNNamespaceDeclarationClass, DNNamespaceDeclaration>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlMemberInvokerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08AD460A-FE67-512E-97AE-3D002D09A43F}']
  { static getter & setter } 

    {class} function get_UnknownInvoker: DNXamlMemberInvoker;

  { constructors } 

    {class} function init(member: DNXamlMember): DNXamlMemberInvoker;

  { static propertys } 

    {class} property UnknownInvoker: DNXamlMemberInvoker read get_UnknownInvoker;
  end;

  [DNTypeName('System.Xaml.Schema.XamlMemberInvoker')]
  DNXamlMemberInvoker = interface(DDN.mscorlib.DNObject)
  ['{83F3DA3B-7461-3EFB-91FE-3A53749175A9}']
  { getters & setters } 

    function get_UnderlyingGetter: DDN.mscorlib.DNMethodInfo;
    function get_UnderlyingSetter: DDN.mscorlib.DNMethodInfo;

  { methods } 

    function GetValue(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetValue(instance: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function ShouldSerializeValue(instance: DDN.mscorlib.DNObject): DNShouldSerializeResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UnderlyingGetter: DDN.mscorlib.DNMethodInfo read get_UnderlyingGetter;
    property UnderlyingSetter: DDN.mscorlib.DNMethodInfo read get_UnderlyingSetter;
  end;

  TDNXamlMemberInvoker = class(TDNGenericImport<DNXamlMemberInvokerClass, DNXamlMemberInvoker>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlTypeInvokerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E2E0EE1-43FF-5DB4-ACDC-519485EDB4D4}']
  { static getter & setter } 

    {class} function get_UnknownInvoker: DNXamlTypeInvoker;

  { constructors } 

    {class} function init(&type: DNXamlType): DNXamlTypeInvoker;

  { static propertys } 

    {class} property UnknownInvoker: DNXamlTypeInvoker read get_UnknownInvoker;
  end;

  [DNTypeName('System.Xaml.Schema.XamlTypeInvoker')]
  DNXamlTypeInvoker = interface(DDN.mscorlib.DNObject)
  ['{82598C63-EA8E-33B2-8EF2-9769CDCAC20D}']
  { methods } 

    procedure AddToCollection(instance: DDN.mscorlib.DNObject; item: DDN.mscorlib.DNObject);
    procedure AddToDictionary(instance: DDN.mscorlib.DNObject; key: DDN.mscorlib.DNObject; item: DDN.mscorlib.DNObject);
    function CreateInstance(arguments: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function GetEnumeratorMethod: DDN.mscorlib.DNMethodInfo;
    function GetItems(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerator;
    function GetAddMethod(contentType: DNXamlType): DDN.mscorlib.DNMethodInfo;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlTypeInvoker = class(TDNGenericImport<DNXamlTypeInvokerClass, DNXamlTypeInvoker>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlTypeNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{426D86FB-D101-54F1-BAF8-BBCC8D8BD4EB}']
  { constructors } 

    {class} function init: DNXamlTypeName; overload;
    {class} function init(xamlNamespace: string; name: string): DNXamlTypeName; overload;
    {class} function init(xamlNamespace: string; name: string; typeArguments: DDN.mscorlib.DNIEnumerable<DNXamlTypeName>): DNXamlTypeName; overload;
    {class} function init(xamlType: DNXamlType): DNXamlTypeName; overload;

  { static methods } 

    {class} function Parse(typeName: string; namespaceResolver: DNIXamlNamespaceResolver): DNXamlTypeName;
    {class} function TryParse(typeName: string; namespaceResolver: DNIXamlNamespaceResolver; out result: DNXamlTypeName): Boolean;
    {class} function ToString(typeNameList: DDN.mscorlib.DNIList<DNXamlTypeName>; prefixLookup: DNINamespacePrefixLookup): string; overload;
    {class} function ParseList(typeNameList: string; namespaceResolver: DNIXamlNamespaceResolver): DDN.mscorlib.DNIList<DNXamlTypeName>;
    {class} function TryParseList(typeNameList: string; namespaceResolver: DNIXamlNamespaceResolver; out result: DDN.mscorlib.DNIList<DNXamlTypeName>): Boolean;

  end;

  [DNTypeName('System.Xaml.Schema.XamlTypeName')]
  DNXamlTypeName = interface(DDN.mscorlib.DNObject)
  ['{E74FA3C9-0215-3DC4-AB6B-7A5512A1E625}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeArguments: DDN.mscorlib.DNIList<DNXamlTypeName>;

  { methods } 

    function ToString: string; overload;
    function ToString(prefixLookup: DNINamespacePrefixLookup): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeArguments: DDN.mscorlib.DNIList<DNXamlTypeName> read get_TypeArguments;
  end;

  TDNXamlTypeName = class(TDNGenericImport<DNXamlTypeNameClass, DNXamlTypeName>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlDeferringLoaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0572E41E-649A-56BF-AAAE-3BB70C54BBAB}']
  end;

  [DNTypeName('System.Xaml.XamlDeferringLoader')]
  DNXamlDeferringLoader = interface(DDN.mscorlib.DNObject)
  ['{E9306312-9761-3EAB-902B-5EB6D1E041BC}']
  { methods } 

    function Load(xamlReader: DNXamlReader; serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Save(value: DDN.mscorlib.DNObject; serviceProvider: DDN.mscorlib.DNIServiceProvider): DNXamlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlDeferringLoader = class(TDNGenericImport<DNXamlDeferringLoaderClass, DNXamlDeferringLoader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlMemberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EEA9FABC-D37C-56CA-A392-41F4C2BB369F}']
  { constructors } 

    {class} function init(name: string; declaringType: DNXamlType; isAttachable: Boolean): DNXamlMember; overload;
    {class} function init(propertyInfo: DDN.mscorlib.DNPropertyInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    {class} function init(propertyInfo: DDN.mscorlib.DNPropertyInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;
    {class} function init(eventInfo: DDN.mscorlib.DNEventInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    {class} function init(eventInfo: DDN.mscorlib.DNEventInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;
    {class} function init(attachablePropertyName: string; getter: DDN.mscorlib.DNMethodInfo; setter: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    {class} function init(attachablePropertyName: string; getter: DDN.mscorlib.DNMethodInfo; setter: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;
    {class} function init(attachableEventName: string; adder: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    {class} function init(attachableEventName: string; adder: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;

  end;

  [DNTypeName('System.Xaml.XamlMember')]
  DNXamlMember = interface(DDN.mscorlib.DNObject)
  ['{5D1A3423-D8C4-32EA-BA89-2DE77E98692C}']
  { getters & setters } 

    function get_DeclaringType: DNXamlType;
    function get_Invoker: DNXamlMemberInvoker;
    function get_IsUnknown: Boolean;
    function get_IsReadPublic: Boolean;
    function get_IsWritePublic: Boolean;
    function get_Name: string;
    function get_IsNameValid: Boolean;
    function get_PreferredXamlNamespace: string;
    function get_TargetType: DNXamlType;
    function get_Type: DNXamlType;
    function get_UnderlyingMember: DDN.mscorlib.DNMemberInfo;
    function get_IsReadOnly: Boolean;
    function get_IsWriteOnly: Boolean;
    function get_IsAttachable: Boolean;
    function get_IsEvent: Boolean;
    function get_IsDirective: Boolean;
    function get_DependsOn: DDN.mscorlib.DNIList<DNXamlMember>;
    function get_IsAmbient: Boolean;
    function get_SerializationVisibility: DNDesignerSerializationVisibility;
    function get_MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char>;

  { methods } 

    function GetXamlNamespaces: DDN.mscorlib.DNIList<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(other: DNXamlMember): Boolean; overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DeclaringType: DNXamlType read get_DeclaringType;
    property Invoker: DNXamlMemberInvoker read get_Invoker;
    property IsUnknown: Boolean read get_IsUnknown;
    property IsReadPublic: Boolean read get_IsReadPublic;
    property IsWritePublic: Boolean read get_IsWritePublic;
    property Name: string read get_Name;
    property IsNameValid: Boolean read get_IsNameValid;
    property PreferredXamlNamespace: string read get_PreferredXamlNamespace;
    property TargetType: DNXamlType read get_TargetType;
    property &Type: DNXamlType read get_Type;
    property UnderlyingMember: DDN.mscorlib.DNMemberInfo read get_UnderlyingMember;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsWriteOnly: Boolean read get_IsWriteOnly;
    property IsAttachable: Boolean read get_IsAttachable;
    property IsEvent: Boolean read get_IsEvent;
    property IsDirective: Boolean read get_IsDirective;
    property DependsOn: DDN.mscorlib.DNIList<DNXamlMember> read get_DependsOn;
    property IsAmbient: Boolean read get_IsAmbient;
    property SerializationVisibility: DNDesignerSerializationVisibility read get_SerializationVisibility;
    property MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char> read get_MarkupExtensionBracketCharacters;
  end;

  TDNXamlMember = class(TDNGenericImport<DNXamlMemberClass, DNXamlMember>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlDirectiveClass = interface(DNXamlMemberClass)
  ['{4B0CEBD8-AC7B-5AFD-8151-527105FD920B}']
  { constructors } 

    {class} function init(xamlNamespace: string; name: string): DNXamlDirective; overload;

  end;

  [DNTypeName('System.Xaml.XamlDirective')]
  DNXamlDirective = interface(DNXamlMember)
  ['{83725DB4-8B3E-32D2-A38A-48B51EF05432}']
  { getters & setters } 

    function get_AllowedLocation: DNAllowedMemberLocations;
    function get_DeclaringType: DNXamlType;
    function get_Invoker: DNXamlMemberInvoker;
    function get_IsUnknown: Boolean;
    function get_IsReadPublic: Boolean;
    function get_IsWritePublic: Boolean;
    function get_Name: string;
    function get_IsNameValid: Boolean;
    function get_PreferredXamlNamespace: string;
    function get_TargetType: DNXamlType;
    function get_Type: DNXamlType;
    function get_UnderlyingMember: DDN.mscorlib.DNMemberInfo;
    function get_IsReadOnly: Boolean;
    function get_IsWriteOnly: Boolean;
    function get_IsAttachable: Boolean;
    function get_IsEvent: Boolean;
    function get_IsDirective: Boolean;
    function get_DependsOn: DDN.mscorlib.DNIList<DNXamlMember>;
    function get_IsAmbient: Boolean;
    function get_SerializationVisibility: DNDesignerSerializationVisibility;
    function get_MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char>;

  { methods } 

    function GetHashCode: Int32;
    function GetXamlNamespaces: DDN.mscorlib.DNIList<string>;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DNXamlMember): Boolean; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowedLocation: DNAllowedMemberLocations read get_AllowedLocation;
    property DeclaringType: DNXamlType read get_DeclaringType;
    property Invoker: DNXamlMemberInvoker read get_Invoker;
    property IsUnknown: Boolean read get_IsUnknown;
    property IsReadPublic: Boolean read get_IsReadPublic;
    property IsWritePublic: Boolean read get_IsWritePublic;
    property Name: string read get_Name;
    property IsNameValid: Boolean read get_IsNameValid;
    property PreferredXamlNamespace: string read get_PreferredXamlNamespace;
    property TargetType: DNXamlType read get_TargetType;
    property &Type: DNXamlType read get_Type;
    property UnderlyingMember: DDN.mscorlib.DNMemberInfo read get_UnderlyingMember;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsWriteOnly: Boolean read get_IsWriteOnly;
    property IsAttachable: Boolean read get_IsAttachable;
    property IsEvent: Boolean read get_IsEvent;
    property IsDirective: Boolean read get_IsDirective;
    property DependsOn: DDN.mscorlib.DNIList<DNXamlMember> read get_DependsOn;
    property IsAmbient: Boolean read get_IsAmbient;
    property SerializationVisibility: DNDesignerSerializationVisibility read get_SerializationVisibility;
    property MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char> read get_MarkupExtensionBracketCharacters;
  end;

  TDNXamlDirective = class(TDNGenericImport<DNXamlDirectiveClass, DNXamlDirective>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlReaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AE9A8B7B-76ED-535F-9863-EC49E8867C9D}']
  end;

  [DNTypeName('System.Xaml.XamlReader')]
  DNXamlReader = interface(DDN.mscorlib.DNObject)
  ['{47C9699D-57F2-324C-B570-B6E83626FBEB}']
  { getters & setters } 

    function get_NodeType: DNXamlNodeType;
    function get_IsEof: Boolean;
    function get_Namespace: DNNamespaceDeclaration;
    function get_Type: DNXamlType;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Member: DNXamlMember;
    function get_SchemaContext: DNXamlSchemaContext;

  { methods } 

    procedure Skip;
    procedure Close;
    function ReadSubtree: DNXamlReader;
    function Read: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NodeType: DNXamlNodeType read get_NodeType;
    property IsEof: Boolean read get_IsEof;
    property Namespace: DNNamespaceDeclaration read get_Namespace;
    property &Type: DNXamlType read get_Type;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property Member: DNXamlMember read get_Member;
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  TDNXamlReader = class(TDNGenericImport<DNXamlReaderClass, DNXamlReader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlReaderSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D3036E3F-D484-5D60-8A76-18A94F0BF7A5}']
  { constructors } 

    {class} function init: DNXamlReaderSettings; overload;
    {class} function init(settings: DNXamlReaderSettings): DNXamlReaderSettings; overload;

  end;

  [DNTypeName('System.Xaml.XamlReaderSettings')]
  DNXamlReaderSettings = interface(DDN.mscorlib.DNObject)
  ['{379121B9-5032-32DC-A4CD-E0AC7EBDDD1C}']
  { getters & setters } 

    function get_AllowProtectedMembersOnRoot: Boolean;
    procedure set_AllowProtectedMembersOnRoot(value: Boolean);
    function get_ProvideLineInfo: Boolean;
    procedure set_ProvideLineInfo(value: Boolean);
    function get_BaseUri: DNUri;
    procedure set_BaseUri(value: DNUri);
    function get_LocalAssembly: DDN.mscorlib.DNAssembly;
    procedure set_LocalAssembly(value: DDN.mscorlib.DNAssembly);
    function get_IgnoreUidsOnPropertyElements: Boolean;
    procedure set_IgnoreUidsOnPropertyElements(value: Boolean);
    function get_ValuesMustBeString: Boolean;
    procedure set_ValuesMustBeString(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowProtectedMembersOnRoot: Boolean read get_AllowProtectedMembersOnRoot write set_AllowProtectedMembersOnRoot;
    property ProvideLineInfo: Boolean read get_ProvideLineInfo write set_ProvideLineInfo;
    property BaseUri: DNUri read get_BaseUri write set_BaseUri;
    property LocalAssembly: DDN.mscorlib.DNAssembly read get_LocalAssembly write set_LocalAssembly;
    property IgnoreUidsOnPropertyElements: Boolean read get_IgnoreUidsOnPropertyElements write set_IgnoreUidsOnPropertyElements;
    property ValuesMustBeString: Boolean read get_ValuesMustBeString write set_ValuesMustBeString;
  end;

  TDNXamlReaderSettings = class(TDNGenericImport<DNXamlReaderSettingsClass, DNXamlReaderSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlSchemaContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2157F060-949B-567D-91DC-530889852589}']
  { constructors } 

    {class} function init: DNXamlSchemaContext; overload;
    {class} function init(settings: DNXamlSchemaContextSettings): DNXamlSchemaContext; overload;
    {class} function init(referenceAssemblies: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNAssembly>): DNXamlSchemaContext; overload;
    {class} function init(referenceAssemblies: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNAssembly>; settings: DNXamlSchemaContextSettings): DNXamlSchemaContext; overload;

  end;

  [DNTypeName('System.Xaml.XamlSchemaContext')]
  DNXamlSchemaContext = interface(DDN.mscorlib.DNObject)
  ['{A0025357-31C0-3357-957A-ECE7D49018B7}']
  { getters & setters } 

    function get_SupportMarkupExtensionsWithDuplicateArity: Boolean;
    function get_FullyQualifyAssemblyNamesInClrNamespaces: Boolean;
    function get_ReferenceAssemblies: DDN.mscorlib.DNIList<DDN.mscorlib.DNAssembly>;

  { methods } 

    function GetXamlType(xamlTypeName: DNXamlTypeName): DNXamlType; overload;
    function GetAllXamlTypes(xamlNamespace: string): DDN.mscorlib.DNICollection<DNXamlType>;
    function GetXamlDirective(xamlNamespace: string; name: string): DNXamlDirective;
    function TryGetCompatibleXamlNamespace(xamlNamespace: string; out compatibleNamespace: string): Boolean;
    function GetXamlType(&type: DDN.mscorlib.DNType): DNXamlType; overload;
    function GetAllXamlNamespaces: DDN.mscorlib.DNIEnumerable<string>;
    function GetPreferredPrefix(xmlns: string): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportMarkupExtensionsWithDuplicateArity: Boolean read get_SupportMarkupExtensionsWithDuplicateArity;
    property FullyQualifyAssemblyNamesInClrNamespaces: Boolean read get_FullyQualifyAssemblyNamesInClrNamespaces;
    property ReferenceAssemblies: DDN.mscorlib.DNIList<DDN.mscorlib.DNAssembly> read get_ReferenceAssemblies;
  end;

  TDNXamlSchemaContext = class(TDNGenericImport<DNXamlSchemaContextClass, DNXamlSchemaContext>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlSchemaContextSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{99FAD804-039C-5551-84D3-DA5C5E2F1177}']
  { constructors } 

    {class} function init: DNXamlSchemaContextSettings; overload;
    {class} function init(settings: DNXamlSchemaContextSettings): DNXamlSchemaContextSettings; overload;

  end;

  [DNTypeName('System.Xaml.XamlSchemaContextSettings')]
  DNXamlSchemaContextSettings = interface(DDN.mscorlib.DNObject)
  ['{C0C0DDE8-EF5D-3975-81C0-CB7686CACC71}']
  { getters & setters } 

    function get_SupportMarkupExtensionsWithDuplicateArity: Boolean;
    procedure set_SupportMarkupExtensionsWithDuplicateArity(value: Boolean);
    function get_FullyQualifyAssemblyNamesInClrNamespaces: Boolean;
    procedure set_FullyQualifyAssemblyNamesInClrNamespaces(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportMarkupExtensionsWithDuplicateArity: Boolean read get_SupportMarkupExtensionsWithDuplicateArity write set_SupportMarkupExtensionsWithDuplicateArity;
    property FullyQualifyAssemblyNamesInClrNamespaces: Boolean read get_FullyQualifyAssemblyNamesInClrNamespaces write set_FullyQualifyAssemblyNamesInClrNamespaces;
  end;

  TDNXamlSchemaContextSettings = class(TDNGenericImport<DNXamlSchemaContextSettingsClass, DNXamlSchemaContextSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DC196BB2-CAB4-5371-A9AC-83789196654A}']
  { constructors } 

    {class} function init(unknownTypeNamespace: string; unknownTypeName: string; typeArguments: DDN.mscorlib.DNIList<DNXamlType>; schemaContext: DNXamlSchemaContext): DNXamlType; overload;
    {class} function init(underlyingType: DDN.mscorlib.DNType; schemaContext: DNXamlSchemaContext): DNXamlType; overload;
    {class} function init(underlyingType: DDN.mscorlib.DNType; schemaContext: DNXamlSchemaContext; invoker: DNXamlTypeInvoker): DNXamlType; overload;

  end;

  [DNTypeName('System.Xaml.XamlType')]
  DNXamlType = interface(DDN.mscorlib.DNObject)
  ['{C9020E0A-FE08-3394-B87C-A15699678950}']
  { getters & setters } 

    function get_BaseType: DNXamlType;
    function get_Invoker: DNXamlTypeInvoker;
    function get_IsNameValid: Boolean;
    function get_IsUnknown: Boolean;
    function get_Name: string;
    function get_PreferredXamlNamespace: string;
    function get_TypeArguments: DDN.mscorlib.DNIList<DNXamlType>;
    function get_UnderlyingType: DDN.mscorlib.DNType;
    function get_ConstructionRequiresArguments: Boolean;
    function get_IsArray: Boolean;
    function get_IsCollection: Boolean;
    function get_IsConstructible: Boolean;
    function get_IsDictionary: Boolean;
    function get_IsGeneric: Boolean;
    function get_IsMarkupExtension: Boolean;
    function get_IsNameScope: Boolean;
    function get_IsNullable: Boolean;
    function get_IsPublic: Boolean;
    function get_IsUsableDuringInitialization: Boolean;
    function get_IsWhitespaceSignificantCollection: Boolean;
    function get_IsXData: Boolean;
    function get_TrimSurroundingWhitespace: Boolean;
    function get_IsAmbient: Boolean;
    function get_KeyType: DNXamlType;
    function get_ItemType: DNXamlType;
    function get_AllowedContentTypes: DDN.mscorlib.DNIList<DNXamlType>;
    function get_ContentWrappers: DDN.mscorlib.DNIList<DNXamlType>;
    function get_ContentProperty: DNXamlMember;
    function get_MarkupExtensionReturnType: DNXamlType;
    function get_SchemaContext: DNXamlSchemaContext;

  { methods } 

    function GetAliasedProperty(directive: DNXamlDirective): DNXamlMember;
    function GetXamlNamespaces: DDN.mscorlib.DNIList<string>;
    function GetMember(name: string): DNXamlMember;
    function GetAttachableMember(name: string): DNXamlMember;
    function GetPositionalParameters(parameterCount: Int32): DDN.mscorlib.DNIList<DNXamlType>;
    function CanAssignTo(xamlType: DNXamlType): Boolean;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(other: DNXamlType): Boolean; overload;
    function GetAllMembers: DDN.mscorlib.DNICollection<DNXamlMember>;
    function GetAllAttachableMembers: DDN.mscorlib.DNICollection<DNXamlMember>;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BaseType: DNXamlType read get_BaseType;
    property Invoker: DNXamlTypeInvoker read get_Invoker;
    property IsNameValid: Boolean read get_IsNameValid;
    property IsUnknown: Boolean read get_IsUnknown;
    property Name: string read get_Name;
    property PreferredXamlNamespace: string read get_PreferredXamlNamespace;
    property TypeArguments: DDN.mscorlib.DNIList<DNXamlType> read get_TypeArguments;
    property UnderlyingType: DDN.mscorlib.DNType read get_UnderlyingType;
    property ConstructionRequiresArguments: Boolean read get_ConstructionRequiresArguments;
    property IsArray: Boolean read get_IsArray;
    property IsCollection: Boolean read get_IsCollection;
    property IsConstructible: Boolean read get_IsConstructible;
    property IsDictionary: Boolean read get_IsDictionary;
    property IsGeneric: Boolean read get_IsGeneric;
    property IsMarkupExtension: Boolean read get_IsMarkupExtension;
    property IsNameScope: Boolean read get_IsNameScope;
    property IsNullable: Boolean read get_IsNullable;
    property IsPublic: Boolean read get_IsPublic;
    property IsUsableDuringInitialization: Boolean read get_IsUsableDuringInitialization;
    property IsWhitespaceSignificantCollection: Boolean read get_IsWhitespaceSignificantCollection;
    property IsXData: Boolean read get_IsXData;
    property TrimSurroundingWhitespace: Boolean read get_TrimSurroundingWhitespace;
    property IsAmbient: Boolean read get_IsAmbient;
    property KeyType: DNXamlType read get_KeyType;
    property ItemType: DNXamlType read get_ItemType;
    property AllowedContentTypes: DDN.mscorlib.DNIList<DNXamlType> read get_AllowedContentTypes;
    property ContentWrappers: DDN.mscorlib.DNIList<DNXamlType> read get_ContentWrappers;
    property ContentProperty: DNXamlMember read get_ContentProperty;
    property MarkupExtensionReturnType: DNXamlType read get_MarkupExtensionReturnType;
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  TDNXamlType = class(TDNGenericImport<DNXamlTypeClass, DNXamlType>) end;

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IXmlNamespaceResolver')]
  DNIXmlNamespaceResolver = interface(DDN.mscorlib.DNObject)
  ['{963A8E22-D935-3065-ACF5-220A8350C64F}']
  { methods } 

    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(namespaceName: string): string;

  end;

  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.IXmlSchemaInfo')]
  DNIXmlSchemaInfo = interface(DDN.mscorlib.DNObject)
  ['{B877D1C0-5915-310A-8B75-8937F127300C}']
  { getters & setters } 

    function get_Validity: DNXmlSchemaValidity;
    function get_IsDefault: Boolean;
    function get_IsNil: Boolean;
    function get_MemberType: DNXmlSchemaSimpleType;
    function get_SchemaType: DNXmlSchemaType;
    function get_SchemaElement: DNXmlSchemaElement;
    function get_SchemaAttribute: DNXmlSchemaAttribute;

  { propertys } 

    property Validity: DNXmlSchemaValidity read get_Validity;
    property IsDefault: Boolean read get_IsDefault;
    property IsNil: Boolean read get_IsNil;
    property MemberType: DNXmlSchemaSimpleType read get_MemberType;
    property SchemaType: DNXmlSchemaType read get_SchemaType;
    property SchemaElement: DNXmlSchemaElement read get_SchemaElement;
    property SchemaAttribute: DNXmlSchemaAttribute read get_SchemaAttribute;
  end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCompilationSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC03EB50-C5AF-5D01-B23B-153DCDBC4324}']
  { constructors } 

    {class} function init: DNXmlSchemaCompilationSettings;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaCompilationSettings')]
  DNXmlSchemaCompilationSettings = interface(DDN.mscorlib.DNObject)
  ['{97EE4B70-692A-3087-8C45-C10098A42C8A}']
  { getters & setters } 

    function get_EnableUpaCheck: Boolean;
    procedure set_EnableUpaCheck(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnableUpaCheck: Boolean read get_EnableUpaCheck write set_EnableUpaCheck;
  end;

  TDNXmlSchemaCompilationSettings = class(TDNGenericImport<DNXmlSchemaCompilationSettingsClass, DNXmlSchemaCompilationSettings>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaDatatypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{69D9537D-424E-5F19-8DA5-EDBFCB8ED738}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaDatatype')]
  DNXmlSchemaDatatype = interface(DDN.mscorlib.DNObject)
  ['{8EE63134-3EA0-3773-A886-3AB9AEF07C8B}']
  { getters & setters } 

    function get_ValueType: DDN.mscorlib.DNType;
    function get_TypeCode: DNXmlTypeCode;

  { methods } 

    function ChangeType(value: DDN.mscorlib.DNObject; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ChangeType(value: DDN.mscorlib.DNObject; targetType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function IsDerivedFrom(datatype: DNXmlSchemaDatatype): Boolean;
    function ParseValue(s: string; nameTable: DNXmlNameTable; nsmgr: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
  end;

  TDNXmlSchemaDatatype = class(TDNGenericImport<DNXmlSchemaDatatypeClass, DNXmlSchemaDatatype>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0250456E-EBEA-5583-AA0A-B9F54DAB734E}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObject')]
  DNXmlSchemaObject = interface(DDN.mscorlib.DNObject)
  ['{83E9E35E-8F9E-3F9F-A9E9-B1999304E6FD}']
  { getters & setters } 

    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaObject = class(TDNGenericImport<DNXmlSchemaObjectClass, DNXmlSchemaObject>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaClass = interface(DNXmlSchemaObjectClass)
  ['{7248DFD9-39DA-5D4C-8B98-25C3608AEEE2}']
  { constructors } 

    {class} function init: DNXmlSchema;

  { static fields getter & setter } 

   function __fakeFieldGet_Namespace: string;
   function __fakeFieldGet_InstanceNamespace: string;

  { static fields } 

    {class} property Namespace: string read __fakeFieldGet_Namespace;
    {class} property InstanceNamespace: string read __fakeFieldGet_InstanceNamespace;

  { static methods } 

    {class} function Read(reader: DDN.mscorlib.DNTextReader; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;
    {class} function Read(stream: DDN.mscorlib.DNStream; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;
    {class} function Read(reader: DNXmlReader; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchema')]
  DNXmlSchema = interface(DNXmlSchemaObject)
  ['{C6EC789B-76E3-3FC4-B6C0-383D1AB66E1E}']
  { getters & setters } 

    function get_AttributeFormDefault: DNXmlSchemaForm;
    procedure set_AttributeFormDefault(value: DNXmlSchemaForm);
    function get_BlockDefault: DNXmlSchemaDerivationMethod;
    procedure set_BlockDefault(value: DNXmlSchemaDerivationMethod);
    function get_FinalDefault: DNXmlSchemaDerivationMethod;
    procedure set_FinalDefault(value: DNXmlSchemaDerivationMethod);
    function get_ElementFormDefault: DNXmlSchemaForm;
    procedure set_ElementFormDefault(value: DNXmlSchemaForm);
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Includes: DNXmlSchemaObjectCollection;
    function get_Items: DNXmlSchemaObjectCollection;
    function get_IsCompiled: Boolean;
    function get_Attributes: DNXmlSchemaObjectTable;
    function get_AttributeGroups: DNXmlSchemaObjectTable;
    function get_SchemaTypes: DNXmlSchemaObjectTable;
    function get_Elements: DNXmlSchemaObjectTable;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_Groups: DNXmlSchemaObjectTable;
    function get_Notations: DNXmlSchemaObjectTable;
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    procedure Write(stream: DDN.mscorlib.DNStream); overload;
    procedure Write(stream: DDN.mscorlib.DNStream; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Write(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure Write(writer: DDN.mscorlib.DNTextWriter; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Write(writer: DNXmlWriter); overload;
    procedure Compile(validationEventHandler: DNValidationEventHandler; resolver: DNXmlResolver); overload;
    procedure Write(writer: DNXmlWriter; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Compile(validationEventHandler: DNValidationEventHandler); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AttributeFormDefault: DNXmlSchemaForm read get_AttributeFormDefault write set_AttributeFormDefault;
    property BlockDefault: DNXmlSchemaDerivationMethod read get_BlockDefault write set_BlockDefault;
    property FinalDefault: DNXmlSchemaDerivationMethod read get_FinalDefault write set_FinalDefault;
    property ElementFormDefault: DNXmlSchemaForm read get_ElementFormDefault write set_ElementFormDefault;
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    property Version: string read get_Version write set_Version;
    property Includes: DNXmlSchemaObjectCollection read get_Includes;
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property IsCompiled: Boolean read get_IsCompiled;
    property Attributes: DNXmlSchemaObjectTable read get_Attributes;
    property AttributeGroups: DNXmlSchemaObjectTable read get_AttributeGroups;
    property SchemaTypes: DNXmlSchemaObjectTable read get_SchemaTypes;
    property Elements: DNXmlSchemaObjectTable read get_Elements;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property Groups: DNXmlSchemaObjectTable read get_Groups;
    property Notations: DNXmlSchemaObjectTable read get_Notations;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchema = class(TDNGenericImport<DNXmlSchemaClass, DNXmlSchema>)
  public const
   Namespace = 'http://www.w3.org/2001/XMLSchema';
   InstanceNamespace = 'http://www.w3.org/2001/XMLSchema-instance';
  end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeClass = interface(DNObjectClass)
  ['{047C3279-9803-5740-9BDD-5599B358884C}']
  { constructors } 

    {class} function init: DNXmlSchemaAttribute;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAttribute')]
  DNXmlSchemaAttribute = interface(DNObject)
  ['{BC3ECB9B-06CE-3009-88C0-4148FBB2D47C}']
  { getters & setters } 

    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_FixedValue: string;
    procedure set_FixedValue(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_SchemaTypeName: DNXmlQualifiedName;
    procedure set_SchemaTypeName(value: DNXmlQualifiedName);
    function get_SchemaType: DNXmlSchemaSimpleType;
    procedure set_SchemaType(value: DNXmlSchemaSimpleType);
    function get_Use: DNXmlSchemaUse;
    procedure set_Use(value: DNXmlSchemaUse);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_AttributeType: DDN.mscorlib.DNObject;
    function get_AttributeSchemaType: DNXmlSchemaSimpleType;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property FixedValue: string read get_FixedValue write set_FixedValue;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Name: string read get_Name write set_Name;
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property SchemaTypeName: DNXmlQualifiedName read get_SchemaTypeName write set_SchemaTypeName;
    property SchemaType: DNXmlSchemaSimpleType read get_SchemaType write set_SchemaType;
    property Use: DNXmlSchemaUse read get_Use write set_Use;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property AttributeType: DDN.mscorlib.DNObject read get_AttributeType;
    property AttributeSchemaType: DNXmlSchemaSimpleType read get_AttributeSchemaType;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttribute = class(TDNGenericImport<DNXmlSchemaAttributeClass, DNXmlSchemaAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaElementClass = interface(DNObjectClass)
  ['{E37C444F-795F-54AD-9180-ABBA3F64F30C}']
  { constructors } 

    {class} function init: DNXmlSchemaElement;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaElement')]
  DNXmlSchemaElement = interface(DNObject)
  ['{2FB0DA90-49F6-32E3-9B5F-C95E831179C8}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_Block: DNXmlSchemaDerivationMethod;
    procedure set_Block(value: DNXmlSchemaDerivationMethod);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_FixedValue: string;
    procedure set_FixedValue(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsNillable: Boolean;
    procedure set_IsNillable(value: Boolean);
    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_SubstitutionGroup: DNXmlQualifiedName;
    procedure set_SubstitutionGroup(value: DNXmlQualifiedName);
    function get_SchemaTypeName: DNXmlQualifiedName;
    procedure set_SchemaTypeName(value: DNXmlQualifiedName);
    function get_SchemaType: DNXmlSchemaType;
    procedure set_SchemaType(value: DNXmlSchemaType);
    function get_Constraints: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_ElementType: DDN.mscorlib.DNObject;
    function get_ElementSchemaType: DNXmlSchemaType;
    function get_BlockResolved: DNXmlSchemaDerivationMethod;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    property Block: DNXmlSchemaDerivationMethod read get_Block write set_Block;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property FixedValue: string read get_FixedValue write set_FixedValue;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Name: string read get_Name write set_Name;
    property IsNillable: Boolean read get_IsNillable write set_IsNillable;
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property SubstitutionGroup: DNXmlQualifiedName read get_SubstitutionGroup write set_SubstitutionGroup;
    property SchemaTypeName: DNXmlQualifiedName read get_SchemaTypeName write set_SchemaTypeName;
    property SchemaType: DNXmlSchemaType read get_SchemaType write set_SchemaType;
    property Constraints: DNXmlSchemaObjectCollection read get_Constraints;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property ElementType: DDN.mscorlib.DNObject read get_ElementType;
    property ElementSchemaType: DNXmlSchemaType read get_ElementSchemaType;
    property BlockResolved: DNXmlSchemaDerivationMethod read get_BlockResolved;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaElement = class(TDNGenericImport<DNXmlSchemaElementClass, DNXmlSchemaElement>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeContentClass = interface(DNObjectClass)
  ['{1A6AC03E-72DE-5469-8B66-C7E332D5B386}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeContent')]
  DNXmlSchemaSimpleTypeContent = interface(DNObject)
  ['{EA6621EC-B0D8-3069-A30C-B2595361BDD1}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeContent = class(TDNGenericImport<DNXmlSchemaSimpleTypeContentClass, DNXmlSchemaSimpleTypeContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaTypeClass = interface(DNObjectClass)
  ['{8FDF1377-B093-5013-822E-311F8771F20E}']
  { constructors } 

    {class} function init: DNXmlSchemaType;

  { static methods } 

    {class} function GetBuiltInSimpleType(qualifiedName: DNXmlQualifiedName): DNXmlSchemaSimpleType; overload;
    {class} function GetBuiltInSimpleType(typeCode: DNXmlTypeCode): DNXmlSchemaSimpleType; overload;
    {class} function GetBuiltInComplexType(typeCode: DNXmlTypeCode): DNXmlSchemaComplexType; overload;
    {class} function GetBuiltInComplexType(qualifiedName: DNXmlQualifiedName): DNXmlSchemaComplexType; overload;
    {class} function IsDerivedFrom(derivedType: DNXmlSchemaType; baseType: DNXmlSchemaType; &except: DNXmlSchemaDerivationMethod): Boolean;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaType')]
  DNXmlSchemaType = interface(DNObject)
  ['{034C6617-1C55-3EA2-8010-DFB0CD9A8FFE}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaType = class(TDNGenericImport<DNXmlSchemaTypeClass, DNXmlSchemaType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexTypeClass = interface(DNXmlSchemaTypeClass)
  ['{672EAADE-3AD2-5F7E-9611-4C1E00A4F003}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexType;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexType')]
  DNXmlSchemaComplexType = interface(DNXmlSchemaType)
  ['{DD5B141E-1C22-39F2-9F27-2A12947759A9}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_Block: DNXmlSchemaDerivationMethod;
    procedure set_Block(value: DNXmlSchemaDerivationMethod);
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_BlockResolved: DNXmlSchemaDerivationMethod;
    function get_AttributeUses: DNXmlSchemaObjectTable;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    property Block: DNXmlSchemaDerivationMethod read get_Block write set_Block;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property BlockResolved: DNXmlSchemaDerivationMethod read get_BlockResolved;
    property AttributeUses: DNXmlSchemaObjectTable read get_AttributeUses;
    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexType = class(TDNGenericImport<DNXmlSchemaComplexTypeClass, DNXmlSchemaComplexType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeClass = interface(DNXmlSchemaTypeClass)
  ['{C2B52D2F-718D-53B4-8C9A-186C5A646571}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleType;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleType')]
  DNXmlSchemaSimpleType = interface(DNXmlSchemaType)
  ['{5CF951C1-5287-3510-9277-FD30287ECB0F}']
  { getters & setters } 

    function get_Content: DNXmlSchemaSimpleTypeContent;
    procedure set_Content(value: DNXmlSchemaSimpleTypeContent);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Content: DNXmlSchemaSimpleTypeContent read get_Content write set_Content;
    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleType = class(TDNGenericImport<DNXmlSchemaSimpleTypeClass, DNXmlSchemaSimpleType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnnotationClass = interface(DNXmlSchemaObjectClass)
  ['{2FE9A18A-1D68-5848-904C-F390D137E1F4}']
  { constructors } 

    {class} function init: DNXmlSchemaAnnotation;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAnnotation')]
  DNXmlSchemaAnnotation = interface(DNXmlSchemaObject)
  ['{49BDD231-79E7-3A56-B297-A343DF715747}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Items: DNXmlSchemaObjectCollection;
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnnotation = class(TDNGenericImport<DNXmlSchemaAnnotationClass, DNXmlSchemaAnnotation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B2DAAD9-F874-58AE-B3B1-70298168859C}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectEnumerator')]
  DNXmlSchemaObjectEnumerator = interface(DDN.mscorlib.DNObject)
  ['{C3B71B25-84A5-3735-A28D-8ED030EAB9B9}']
  { getters & setters } 

    function get_Current: DNXmlSchemaObject;

  { methods } 

    procedure Reset;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNXmlSchemaObject read get_Current;
  end;

  TDNXmlSchemaObjectEnumerator = class(TDNGenericImport<DNXmlSchemaObjectEnumeratorClass, DNXmlSchemaObjectEnumerator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{07F2185B-B6D2-58A1-B8D9-F2C0C4DF0645}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectTable')]
  DNXmlSchemaObjectTable = interface(DDN.mscorlib.DNObject)
  ['{46B8059C-7719-33A6-AA9C-070DB3D6F7F5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: DNXmlQualifiedName): DNXmlSchemaObject;
    function get_Names: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    function &Contains(name: DNXmlQualifiedName): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: DNXmlQualifiedName]: DNXmlSchemaObject read get_Item; default;
    property Names: DDN.mscorlib.DNICollection read get_Names;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNXmlSchemaObjectTable = class(TDNGenericImport<DNXmlSchemaObjectTableClass, DNXmlSchemaObjectTable>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80051FF8-3AEB-56C0-919B-ECBEFDC42875}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXmlSchemaSet; overload;
    {class} function init(nameTable: DNXmlNameTable): DNXmlSchemaSet; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSet')]
  DNXmlSchemaSet = interface(DDN.mscorlib.DNObject)
  ['{2EECF1F1-E906-338D-AA1A-21E3F90E6E8D}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_IsCompiled: Boolean;
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_CompilationSettings: DNXmlSchemaCompilationSettings;
    procedure set_CompilationSettings(value: DNXmlSchemaCompilationSettings);
    function get_Count: Int32;
    function get_GlobalElements: DNXmlSchemaObjectTable;
    function get_GlobalAttributes: DNXmlSchemaObjectTable;
    function get_GlobalTypes: DNXmlSchemaObjectTable;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function Add(targetNamespace: string; schemaUri: string): DNXmlSchema; overload;
    function Add(targetNamespace: string; schemaDocument: DNXmlReader): DNXmlSchema; overload;
    procedure Add(schemas: DNXmlSchemaSet); overload;
    function Add(schema: DNXmlSchema): DNXmlSchema; overload;
    function Remove(schema: DNXmlSchema): DNXmlSchema;
    function &Contains(targetNamespace: string): Boolean; overload;
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    procedure CopyTo(schemas: TArray<DNXmlSchema>; index: Int32);
    function Schemas: DDN.mscorlib.DNICollection; overload;
    function Schemas(targetNamespace: string): DDN.mscorlib.DNICollection; overload;
    function RemoveRecursive(schemaToRemove: DNXmlSchema): Boolean;
    function Reprocess(schema: DNXmlSchema): DNXmlSchema;
    procedure Compile;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable;
    property IsCompiled: Boolean read get_IsCompiled;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property CompilationSettings: DNXmlSchemaCompilationSettings read get_CompilationSettings write set_CompilationSettings;
    property Count: Int32 read get_Count;
    property GlobalElements: DNXmlSchemaObjectTable read get_GlobalElements;
    property GlobalAttributes: DNXmlSchemaObjectTable read get_GlobalAttributes;
    property GlobalTypes: DNXmlSchemaObjectTable read get_GlobalTypes;
  end;

  TDNXmlSchemaSet = class(TDNGenericImport<DNXmlSchemaSetClass, DNXmlSchemaSet>) end;

  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.IXmlSerializable')]
  DNIXmlSerializable = interface(DDN.mscorlib.DNObject)
  ['{45471A9D-DC65-3A9F-8C82-7539D6BE5419}']
  { methods } 

    function GetSchema: DNXmlSchema;
    procedure ReadXml(reader: DNXmlReader);
    procedure WriteXml(writer: DNXmlWriter);

  end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerNamespacesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02202380-E072-5AFC-8069-9984588C88B4}']
  { constructors } 

    {class} function init: DNXmlSerializerNamespaces; overload;
    {class} function init(namespaces: DNXmlSerializerNamespaces): DNXmlSerializerNamespaces; overload;
    {class} function init(namespaces: TArray<DNXmlQualifiedName>): DNXmlSerializerNamespaces; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerNamespaces')]
  DNXmlSerializerNamespaces = interface(DDN.mscorlib.DNObject)
  ['{9BD7B184-9480-3EF7-B0D2-DC3B5BB21447}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Add(prefix: string; ns: string);
    function ToArray: TArray<DNXmlQualifiedName>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlSerializerNamespaces = class(TDNGenericImport<DNXmlSerializerNamespacesClass, DNXmlSerializerNamespaces>) end;

  //-------------namespace: System.Xml----------------
  DNXmlImplementationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{616B9815-E140-5278-AE6F-7D21CF454BB0}']
  { constructors } 

    {class} function init: DNXmlImplementation; overload;
    {class} function init(nt: DNXmlNameTable): DNXmlImplementation; overload;

  end;

  [DNTypeName('System.Xml.XmlImplementation')]
  DNXmlImplementation = interface(DDN.mscorlib.DNObject)
  ['{B742D53C-E509-34DC-BAD5-2B37A1AFC661}']
  { methods } 

    function CreateDocument: DNXmlDocument;
    function HasFeature(strFeature: string; strVersion: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlImplementation = class(TDNGenericImport<DNXmlImplementationClass, DNXmlImplementation>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamedNodeMapClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B74D75C0-1E64-5FD7-9BB2-52B25E3AB6A3}']
  end;

  [DNTypeName('System.Xml.XmlNamedNodeMap')]
  DNXmlNamedNodeMap = interface(DDN.mscorlib.DNObject)
  ['{291396F7-2B76-36E2-8E89-0C2BAB420F83}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetNamedItem(name: string): DNXmlNode; overload;
    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    function Item(index: Int32): DNXmlNode;
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlNamedNodeMap = class(TDNGenericImport<DNXmlNamedNodeMapClass, DNXmlNamedNodeMap>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeCollectionClass = interface(DNXmlNamedNodeMapClass)
  ['{7D8D432B-42C5-5DD1-81AC-C7E940F30448}']
  end;

  [DNTypeName('System.Xml.XmlAttributeCollection')]
  DNXmlAttributeCollection = interface(DNXmlNamedNodeMap)
  ['{AFF15495-0AAB-3C7F-A744-CB752611089E}']
  { getters & setters } 

    function get_ItemOf(i: Int32): DNXmlAttribute; overload;
    function get_ItemOf(name: string): DNXmlAttribute; overload;
    function get_ItemOf(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function get_Count: Int32;

  { methods } 

    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    function Prepend(node: DNXmlAttribute): DNXmlAttribute;
    function Append(node: DNXmlAttribute): DNXmlAttribute;
    function InsertBefore(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    function InsertAfter(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    function Remove(node: DNXmlAttribute): DNXmlAttribute;
    function RemoveAt(i: Int32): DNXmlAttribute;
    procedure RemoveAll;
    procedure CopyTo(&array: TArray<DNXmlAttribute>; index: Int32);
    function GetNamedItem(name: string): DNXmlNode; overload;
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    function Item(index: Int32): DNXmlNode;
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ItemOf[i: Int32]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[name: string]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[localName: string; namespaceURI: string]: DNXmlAttribute read get_ItemOf; default;
    property Count: Int32 read get_Count;
  end;

  TDNXmlAttributeCollection = class(TDNGenericImport<DNXmlAttributeCollectionClass, DNXmlAttributeCollection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamespaceManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B8483CCF-B8DD-5A89-B0AB-9F9015775557}']
  { constructors } 

    {class} function init(nameTable: DNXmlNameTable): DNXmlNamespaceManager;

  end;

  [DNTypeName('System.Xml.XmlNamespaceManager')]
  DNXmlNamespaceManager = interface(DDN.mscorlib.DNObject)
  ['{C5338A3B-B457-3C22-9CD2-4786DF44090F}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_DefaultNamespace: string;

  { methods } 

    procedure PushScope;
    function PopScope: Boolean;
    procedure RemoveNamespace(prefix: string; uri: string);
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(uri: string): string;
    function HasNamespace(prefix: string): Boolean;
    procedure AddNamespace(prefix: string; uri: string);
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable;
    property DefaultNamespace: string read get_DefaultNamespace;
  end;

  TDNXmlNamespaceManager = class(TDNGenericImport<DNXmlNamespaceManagerClass, DNXmlNamespaceManager>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNameTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{77150595-D80A-50B6-8E01-202CC752528A}']
  end;

  [DNTypeName('System.Xml.XmlNameTable')]
  DNXmlNameTable = interface(DDN.mscorlib.DNObject)
  ['{14B8B8DB-2F35-39C8-A2F8-9BC1E9834472}']
  { methods } 

    function Get(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    function Get(&array: string): string; overload;
    function Add(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    function Add(&array: string): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlNameTable = class(TDNGenericImport<DNXmlNameTableClass, DNXmlNameTable>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{67ED459D-701F-5264-948A-65FB8009A866}']
  end;

  [DNTypeName('System.Xml.XmlNode')]
  DNXmlNode = interface(DDN.mscorlib.DNObject)
  ['{1E11AFE9-F059-35CC-A0C3-B9AA38701C21}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function CloneNode(deep: Boolean): DNXmlNode;
    function Supports(feature: string; version: string): Boolean;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlNode = class(TDNGenericImport<DNXmlNodeClass, DNXmlNode>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeClass = interface(DNXmlNodeClass)
  ['{568F5F75-91DF-5716-991A-DE584FED5846}']
  { static getter & setter } 

    procedure set_InnerText(value: string);
    procedure set_InnerXml(value: string);

  { static propertys } 

    {class} property InnerText: string write set_InnerText;
    {class} property InnerXml: string write set_InnerXml;
  end;

  [DNTypeName('System.Xml.XmlAttribute')]
  DNXmlAttribute = interface(DNXmlNode)
  ['{D53A0503-137B-30F4-8409-E7299C90A5C8}']
  { getters & setters } 

    function get_ParentNode: DNXmlNode;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_OwnerDocument: DNXmlDocument;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    procedure set_InnerText(value: string);
    function get_Specified: Boolean;
    function get_OwnerElement: DNXmlElement;
    procedure set_InnerXml(value: string);
    function get_BaseURI: string;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParentNode: DNXmlNode read get_ParentNode;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property NodeType: DNXmlNodeType read get_NodeType;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property Value: string read get_Value write set_Value;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property InnerText: string write set_InnerText;
    property Specified: Boolean read get_Specified;
    property OwnerElement: DNXmlElement read get_OwnerElement;
    property InnerXml: string write set_InnerXml;
    property BaseURI: string read get_BaseURI;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlAttribute = class(TDNGenericImport<DNXmlAttributeClass, DNXmlAttribute>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentClass = interface(DNXmlNodeClass)
  ['{72ECC820-5D8B-5542-9F37-BD21B3B1CDF4}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);
    procedure set_InnerText(value: string);

  { constructors } 

    {class} function init: DNXmlDocument; overload;
    {class} function init(nt: DNXmlNameTable): DNXmlDocument; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
    {class} property InnerText: string write set_InnerText;
  end;

  [DNTypeName('System.Xml.XmlDocument')]
  DNXmlDocument = interface(DNXmlNode)
  ['{25C48904-3F45-36CE-9DAC-C679105D5308}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_DocumentType: DNXmlDocumentType;
    function get_Implementation: DNXmlImplementation;
    function get_Name: string;
    function get_LocalName: string;
    function get_DocumentElement: DNXmlElement;
    function get_OwnerDocument: DNXmlDocument;
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_NameTable: DNXmlNameTable;
    function get_PreserveWhitespace: Boolean;
    procedure set_PreserveWhitespace(value: Boolean);
    function get_IsReadOnly: Boolean;
    procedure set_InnerText(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { events } 

    procedure add_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanged(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanged(value: DNXmlNodeChangedEventHandler);

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function CreateAttribute(name: string): DNXmlAttribute; overload;
    function CreateCDataSection(data: string): DNXmlCDataSection;
    function CreateComment(data: string): DNXmlComment;
    function CreateDocumentType(name: string; publicId: string; systemId: string; internalSubset: string): DNXmlDocumentType;
    function CreateDocumentFragment: DNXmlDocumentFragment;
    function CreateElement(name: string): DNXmlElement; overload;
    function CreateEntityReference(name: string): DNXmlEntityReference;
    function CreateProcessingInstruction(target: string; data: string): DNXmlProcessingInstruction;
    function CreateXmlDeclaration(version: string; encoding: string; standalone: string): DNXmlDeclaration;
    function CreateTextNode(text: string): DNXmlText;
    function CreateSignificantWhitespace(text: string): DNXmlSignificantWhitespace;
    function CreateNavigator: DNXPathNavigator;
    function CreateWhitespace(text: string): DNXmlWhitespace;
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    function CreateAttribute(qualifiedName: string; namespaceURI: string): DNXmlAttribute; overload;
    function CreateElement(qualifiedName: string; namespaceURI: string): DNXmlElement; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    function GetElementById(elementId: string): DNXmlElement;
    function ImportNode(node: DNXmlNode; deep: Boolean): DNXmlNode;
    function CreateAttribute(prefix: string; localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function CreateElement(prefix: string; localName: string; namespaceURI: string): DNXmlElement; overload;
    function CreateNode(nodeTypeString: string; name: string; namespaceURI: string): DNXmlNode; overload;
    function CreateNode(&type: DNXmlNodeType; name: string; namespaceURI: string): DNXmlNode; overload;
    function ReadNode(reader: DNXmlReader): DNXmlNode;
    procedure Load(filename: string); overload;
    procedure Load(inStream: DDN.mscorlib.DNStream); overload;
    procedure Load(txtReader: DDN.mscorlib.DNTextReader); overload;
    procedure Load(reader: DNXmlReader); overload;
    procedure LoadXml(xml: string);
    procedure Save(filename: string); overload;
    procedure Save(outStream: DDN.mscorlib.DNStream); overload;
    procedure Save(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(xw: DNXmlWriter);
    procedure Validate(validationEventHandler: DNValidationEventHandler); overload;
    function CreateNode(&type: DNXmlNodeType; prefix: string; name: string; namespaceURI: string): DNXmlNode; overload;
    procedure Save(w: DNXmlWriter); overload;
    procedure Validate(validationEventHandler: DNValidationEventHandler; nodeToValidate: DNXmlNode); overload;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property DocumentType: DNXmlDocumentType read get_DocumentType;
    property &Implementation: DNXmlImplementation read get_Implementation;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property DocumentElement: DNXmlElement read get_DocumentElement;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property NameTable: DNXmlNameTable read get_NameTable;
    property PreserveWhitespace: Boolean read get_PreserveWhitespace write set_PreserveWhitespace;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string write set_InnerText;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocument = class(TDNGenericImport<DNXmlDocumentClass, DNXmlDocument>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentFragmentClass = interface(DNXmlNodeClass)
  ['{6E0EA61D-9BC6-5CA3-BBB9-2C261777C15D}']
  end;

  [DNTypeName('System.Xml.XmlDocumentFragment')]
  DNXmlDocumentFragment = interface(DNXmlNode)
  ['{495A1294-FF3E-3F56-A99F-A1AA85127036}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentFragment = class(TDNGenericImport<DNXmlDocumentFragmentClass, DNXmlDocumentFragment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCDataSectionClass = interface(DNObjectClass)
  ['{97FBAC7B-CA59-5B48-A7E2-B077AF8D1A99}']
  end;

  [DNTypeName('System.Xml.XmlCDataSection')]
  DNXmlCDataSection = interface(DNObject)
  ['{1810EA9B-175D-3CDC-8921-290FD122D830}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_PreviousText: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property PreviousText: DNXmlNode read get_PreviousText;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlCDataSection = class(TDNGenericImport<DNXmlCDataSectionClass, DNXmlCDataSection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCommentClass = interface(DNObjectClass)
  ['{BB4F609E-8620-50D3-BD93-A5228DAAD94E}']
  end;

  [DNTypeName('System.Xml.XmlComment')]
  DNXmlComment = interface(DNObject)
  ['{CC1B4DB8-000C-375C-85B6-C4F457CA604C}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlComment = class(TDNGenericImport<DNXmlCommentClass, DNXmlComment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlSignificantWhitespaceClass = interface(DNObjectClass)
  ['{D3D69425-089C-5BEC-8B98-2869CBCD58BA}']
  end;

  [DNTypeName('System.Xml.XmlSignificantWhitespace')]
  DNXmlSignificantWhitespace = interface(DNObject)
  ['{0B172DBB-0D28-360D-B6DA-C98B3EC1449A}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlSignificantWhitespace = class(TDNGenericImport<DNXmlSignificantWhitespaceClass, DNXmlSignificantWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextClass = interface(DNObjectClass)
  ['{0651B7EA-6BE9-59ED-A83D-2E5F61F97A05}']
  end;

  [DNTypeName('System.Xml.XmlText')]
  DNXmlText = interface(DNObject)
  ['{C23B6FD2-1BB3-3560-8729-8F78B16B5B5C}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function SplitText(offset: Int32): DNXmlText;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlText = class(TDNGenericImport<DNXmlTextClass, DNXmlText>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWhitespaceClass = interface(DNObjectClass)
  ['{2A70CCA8-A245-5913-A121-09B607B6A137}']
  end;

  [DNTypeName('System.Xml.XmlWhitespace')]
  DNXmlWhitespace = interface(DNObject)
  ['{7665AD2A-852F-30AD-8E7A-09633B25E173}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlWhitespace = class(TDNGenericImport<DNXmlWhitespaceClass, DNXmlWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDeclarationClass = interface(DNObjectClass)
  ['{A6529FEA-8312-512A-987C-49BDDB60B87F}']
  end;

  [DNTypeName('System.Xml.XmlDeclaration')]
  DNXmlDeclaration = interface(DNObject)
  ['{E98CE747-E1FC-355C-8454-95C884B8FB04}']
  { getters & setters } 

    function get_Version: string;
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Standalone: string;
    procedure set_Standalone(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Version: string read get_Version;
    property Encoding: string read get_Encoding write set_Encoding;
    property Standalone: string read get_Standalone write set_Standalone;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDeclaration = class(TDNGenericImport<DNXmlDeclarationClass, DNXmlDeclaration>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentTypeClass = interface(DNObjectClass)
  ['{BEC420DE-802C-5F38-95F7-CA44F66DB28E}']
  end;

  [DNTypeName('System.Xml.XmlDocumentType')]
  DNXmlDocumentType = interface(DNObject)
  ['{7AF5641A-36C3-3113-83DA-937C8D756FC0}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_Entities: DNXmlNamedNodeMap;
    function get_Notations: DNXmlNamedNodeMap;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_InternalSubset: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Entities: DNXmlNamedNodeMap read get_Entities;
    property Notations: DNXmlNamedNodeMap read get_Notations;
    property PublicId: string read get_PublicId;
    property SystemId: string read get_SystemId;
    property InternalSubset: string read get_InternalSubset;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentType = class(TDNGenericImport<DNXmlDocumentTypeClass, DNXmlDocumentType>) end;

  //-------------namespace: System.Xml----------------
  DNXmlElementClass = interface(DNObjectClass)
  ['{95FBF49A-C7B8-52DE-9824-77FC0B51F4A3}']
  end;

  [DNTypeName('System.Xml.XmlElement')]
  DNXmlElement = interface(DNObject)
  ['{4F4034C5-F0F2-3631-965C-95B3A6E74446}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_IsEmpty: Boolean;
    procedure set_IsEmpty(value: Boolean);
    function get_Attributes: DNXmlAttributeCollection;
    function get_HasAttributes: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NextSibling: DNXmlNode;
    function get_PreviousSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function GetAttribute(name: string): string; overload;
    procedure SetAttribute(name: string; value: string); overload;
    procedure RemoveAttribute(name: string); overload;
    function GetAttributeNode(name: string): DNXmlAttribute; overload;
    function SetAttributeNode(newAttr: DNXmlAttribute): DNXmlAttribute; overload;
    function RemoveAttributeNode(oldAttr: DNXmlAttribute): DNXmlAttribute; overload;
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    function SetAttribute(localName: string; namespaceURI: string; value: string): string; overload;
    procedure RemoveAttribute(localName: string; namespaceURI: string); overload;
    function GetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function SetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function RemoveAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    function HasAttribute(name: string): Boolean; overload;
    function HasAttribute(localName: string; namespaceURI: string): Boolean; overload;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function RemoveAttributeAt(i: Int32): DNXmlNode;
    procedure RemoveAllAttributes;
    procedure RemoveAll;
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property IsEmpty: Boolean read get_IsEmpty write set_IsEmpty;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property HasAttributes: Boolean read get_HasAttributes;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property InnerText: string read get_InnerText write set_InnerText;
    property NextSibling: DNXmlNode read get_NextSibling;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlElement = class(TDNGenericImport<DNXmlElementClass, DNXmlElement>) end;

  //-------------namespace: System.Xml----------------
  DNXmlEntityReferenceClass = interface(DNObjectClass)
  ['{90401A09-6381-574B-823A-E3F8F43DAFCD}']
  end;

  [DNTypeName('System.Xml.XmlEntityReference')]
  DNXmlEntityReference = interface(DNObject)
  ['{A49C5C6E-C1A3-30E6-AED4-6AB2D32BA301}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_BaseURI: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property BaseURI: string read get_BaseURI;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlEntityReference = class(TDNGenericImport<DNXmlEntityReferenceClass, DNXmlEntityReference>) end;

  //-------------namespace: System.Xml----------------
  DNXmlProcessingInstructionClass = interface(DNObjectClass)
  ['{A00F64E7-9C95-55E8-BE6E-9B41100EE844}']
  end;

  [DNTypeName('System.Xml.XmlProcessingInstruction')]
  DNXmlProcessingInstruction = interface(DNObject)
  ['{2550041F-0896-38C3-9876-092B4D27211E}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Target: string;
    function get_Data: string;
    procedure set_Data(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property Value: string read get_Value write set_Value;
    property Target: string read get_Target;
    property Data: string read get_Data write set_Data;
    property InnerText: string read get_InnerText write set_InnerText;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlProcessingInstruction = class(TDNGenericImport<DNXmlProcessingInstructionClass, DNXmlProcessingInstruction>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CD04361B-0A59-52B5-8AD4-CB82A6CB6425}']
  end;

  [DNTypeName('System.Xml.XmlNodeList')]
  DNXmlNodeList = interface(DDN.mscorlib.DNObject)
  ['{A82A4A5B-6914-3CC4-B7C3-EBB1D009992C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ItemOf(i: Int32): DNXmlNode;

  { methods } 

    function Item(index: Int32): DNXmlNode;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property ItemOf[i: Int32]: DNXmlNode read get_ItemOf; default;
  end;

  TDNXmlNodeList = class(TDNGenericImport<DNXmlNodeListClass, DNXmlNodeList>) end;

  //-------------namespace: System.Xml----------------
  DNXmlParserContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E6B1786-198D-5A8F-8792-DB639A99D507}']
  { constructors } 

    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; xmlLang: string; xmlSpace: DNXmlSpace): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; xmlLang: string; xmlSpace: DNXmlSpace; enc: DDN.mscorlib.DNEncoding): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; docTypeName: string; pubId: string; sysId: string; internalSubset: string; baseURI: string; xmlLang: string; xmlSpace: DNXmlSpace): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; docTypeName: string; pubId: string; sysId: string; internalSubset: string; baseURI: string; xmlLang: string; xmlSpace: DNXmlSpace; enc: DDN.mscorlib.DNEncoding): DNXmlParserContext; overload;

  end;

  [DNTypeName('System.Xml.XmlParserContext')]
  DNXmlParserContext = interface(DDN.mscorlib.DNObject)
  ['{406E8126-3D39-3708-BBD1-E5414D1C792F}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    function get_NamespaceManager: DNXmlNamespaceManager;
    procedure set_NamespaceManager(value: DNXmlNamespaceManager);
    function get_DocTypeName: string;
    procedure set_DocTypeName(value: string);
    function get_PublicId: string;
    procedure set_PublicId(value: string);
    function get_SystemId: string;
    procedure set_SystemId(value: string);
    function get_BaseURI: string;
    procedure set_BaseURI(value: string);
    function get_InternalSubset: string;
    procedure set_InternalSubset(value: string);
    function get_XmlLang: string;
    procedure set_XmlLang(value: string);
    function get_XmlSpace: DNXmlSpace;
    procedure set_XmlSpace(value: DNXmlSpace);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    property NamespaceManager: DNXmlNamespaceManager read get_NamespaceManager write set_NamespaceManager;
    property DocTypeName: string read get_DocTypeName write set_DocTypeName;
    property PublicId: string read get_PublicId write set_PublicId;
    property SystemId: string read get_SystemId write set_SystemId;
    property BaseURI: string read get_BaseURI write set_BaseURI;
    property InternalSubset: string read get_InternalSubset write set_InternalSubset;
    property XmlLang: string read get_XmlLang write set_XmlLang;
    property XmlSpace: DNXmlSpace read get_XmlSpace write set_XmlSpace;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
  end;

  TDNXmlParserContext = class(TDNGenericImport<DNXmlParserContextClass, DNXmlParserContext>) end;

  //-------------namespace: System.Xml----------------
  DNXmlQualifiedNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{990D471B-E959-556A-AFED-5552CA20D4A4}']
  { constructors } 

    {class} function init: DNXmlQualifiedName; overload;
    {class} function init(name: string): DNXmlQualifiedName; overload;
    {class} function init(name: string; ns: string): DNXmlQualifiedName; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQualifiedName;

  { static fields } 

    {class} property Empty: DNXmlQualifiedName read __fakeFieldGet_Empty;

  { static methods } 

    {class} function ToString(name: string; ns: string): string; overload;

  end;

  [DNTypeName('System.Xml.XmlQualifiedName')]
  DNXmlQualifiedName = interface(DDN.mscorlib.DNObject)
  ['{74BB3238-7944-3CD8-8790-E945BBE5866E}']
  { getters & setters } 

    function get_Namespace: string;
    function get_Name: string;
    function get_IsEmpty: Boolean;

  { methods } 

    function GetHashCode: Int32;
    function Equals(other: DDN.mscorlib.DNObject): Boolean;
    function ToString: string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Namespace: string read get_Namespace;
    property Name: string read get_Name;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNXmlQualifiedName = class(TDNGenericImport<DNXmlQualifiedNameClass, DNXmlQualifiedName>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BED71FF4-9350-5FA7-AEB4-E4B0CBD7BE7A}']
  { static methods } 

    {class} function IsName(str: string): Boolean;
    {class} function IsNameToken(str: string): Boolean;
    {class} function Create(inputUri: string): DNXmlReader; overload;
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNStream): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNTextReader): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(reader: DNXmlReader; settings: DNXmlReaderSettings): DNXmlReader; overload;

  end;

  [DNTypeName('System.Xml.XmlReader')]
  DNXmlReader = interface(DDN.mscorlib.DNObject)
  ['{E265CBE9-7445-3F96-8618-DA44B4ECEF45}']
  { getters & setters } 

    function get_Settings: DNXmlReaderSettings;
    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_AttributeCount: Int32;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_CanReadValueChunk: Boolean;
    function get_HasAttributes: Boolean;

  { methods } 

    function ReadContentAsObject: DDN.mscorlib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDN.mscorlib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDN.mscorlib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDN.mscorlib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDN.mscorlib.DNDateTime; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDN.mscorlib.DNDecimal; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    procedure MoveToAttribute(i: Int32); overload;
    procedure Close;
    procedure Skip;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function ReadString: string;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    function ReadElementString(name: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function SkipAsync: DDN.mscorlib.DNTask;
    function ReadElementContentAsObject: DDN.mscorlib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsDateTime: DDN.mscorlib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsDecimal: DDN.mscorlib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function GetAttribute(name: string): string; overload;
    function GetAttribute(name: string; namespaceURI: string): string; overload;
    function GetAttribute(i: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(name: string; ns: string): Boolean; overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function ReadAttributeValue: Boolean;
    function Read: Boolean;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Settings: DNXmlReaderSettings read get_Settings;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property QuoteChar: Char read get_QuoteChar;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property AttributeCount: Int32 read get_AttributeCount;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlReader = class(TDNGenericImport<DNXmlReaderClass, DNXmlReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{333069D0-1337-5A1D-988D-3D92D51A0162}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXmlReaderSettings; overload;
    {class} function init(resolver: DNXmlResolver): DNXmlReaderSettings; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.XmlReaderSettings')]
  DNXmlReaderSettings = interface(DDN.mscorlib.DNObject)
  ['{A34E9932-0279-3945-87FC-037F0B86F4F9}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_LineNumberOffset: Int32;
    procedure set_LineNumberOffset(value: Int32);
    function get_LinePositionOffset: Int32;
    procedure set_LinePositionOffset(value: Int32);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_MaxCharactersInDocument: Int64;
    procedure set_MaxCharactersInDocument(value: Int64);
    function get_MaxCharactersFromEntities: Int64;
    procedure set_MaxCharactersFromEntities(value: Int64);
    function get_IgnoreWhitespace: Boolean;
    procedure set_IgnoreWhitespace(value: Boolean);
    function get_IgnoreProcessingInstructions: Boolean;
    procedure set_IgnoreProcessingInstructions(value: Boolean);
    function get_IgnoreComments: Boolean;
    procedure set_IgnoreComments(value: Boolean);
    function get_ProhibitDtd: Boolean;
    procedure set_ProhibitDtd(value: Boolean);
    function get_DtdProcessing: DNDtdProcessing;
    procedure set_DtdProcessing(value: DNDtdProcessing);
    function get_CloseInput: Boolean;
    procedure set_CloseInput(value: Boolean);
    function get_ValidationType: DNValidationType;
    procedure set_ValidationType(value: DNValidationType);
    function get_ValidationFlags: DNXmlSchemaValidationFlags;
    procedure set_ValidationFlags(value: DNXmlSchemaValidationFlags);
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function Clone: DNXmlReaderSettings;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Async: Boolean read get_Async write set_Async;
    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property LineNumberOffset: Int32 read get_LineNumberOffset write set_LineNumberOffset;
    property LinePositionOffset: Int32 read get_LinePositionOffset write set_LinePositionOffset;
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    property MaxCharactersInDocument: Int64 read get_MaxCharactersInDocument write set_MaxCharactersInDocument;
    property MaxCharactersFromEntities: Int64 read get_MaxCharactersFromEntities write set_MaxCharactersFromEntities;
    property IgnoreWhitespace: Boolean read get_IgnoreWhitespace write set_IgnoreWhitespace;
    property IgnoreProcessingInstructions: Boolean read get_IgnoreProcessingInstructions write set_IgnoreProcessingInstructions;
    property IgnoreComments: Boolean read get_IgnoreComments write set_IgnoreComments;
    property ProhibitDtd: Boolean read get_ProhibitDtd write set_ProhibitDtd;
    property DtdProcessing: DNDtdProcessing read get_DtdProcessing write set_DtdProcessing;
    property CloseInput: Boolean read get_CloseInput write set_CloseInput;
    property ValidationType: DNValidationType read get_ValidationType write set_ValidationType;
    property ValidationFlags: DNXmlSchemaValidationFlags read get_ValidationFlags write set_ValidationFlags;
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
  end;

  TDNXmlReaderSettings = class(TDNGenericImport<DNXmlReaderSettingsClass, DNXmlReaderSettings>) end;

  //-------------namespace: System.Xml----------------
  DNXmlResolverClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDE29340-6461-5FEC-9331-2E67780C1D99}']
  { static getter & setter } 

    procedure set_Credentials(value: DNICredentials);

  { static propertys } 

    {class} property Credentials: DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.XmlResolver')]
  DNXmlResolver = interface(DDN.mscorlib.DNObject)
  ['{F2DEB691-8A4B-36EE-9262-ED43949B7CC1}']
  { getters & setters } 

    procedure set_Credentials(value: DNICredentials);

  { methods } 

    function ResolveUri(baseUri: DNUri; relativeUri: string): DNUri;
    function SupportsType(absoluteUri: DNUri; &type: DDN.mscorlib.DNType): Boolean;
    function GetEntity(absoluteUri: DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Credentials: DNICredentials write set_Credentials;
  end;

  TDNXmlResolver = class(TDNGenericImport<DNXmlResolverClass, DNXmlResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{387BD4BD-B278-52F4-B752-3F6A5A361BA4}']
  { static methods } 

    {class} function Create(outputFileName: string): DNXmlWriter; overload;
    {class} function Create(outputFileName: string; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNStream): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNStream; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNTextWriter): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNTextWriter; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNStringBuilder): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNStringBuilder; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DNXmlWriter): DNXmlWriter; overload;
    {class} function Create(output: DNXmlWriter; settings: DNXmlWriterSettings): DNXmlWriter; overload;

  end;

  [DNTypeName('System.Xml.XmlWriter')]
  DNXmlWriter = interface(DDN.mscorlib.DNObject)
  ['{DEE5DBC9-DE85-3F72-8CA7-9B3A0951D0DB}']
  { getters & setters } 

    function get_Settings: DNXmlWriterSettings;
    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;

  { methods } 

    procedure WriteStartElement(localName: string; ns: string); overload;
    procedure WriteStartElement(localName: string); overload;
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    procedure WriteAttributeString(localName: string; value: string); overload;
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    procedure WriteStartAttribute(localName: string); overload;
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Close;
    procedure WriteNmToken(name: string);
    procedure WriteName(name: string);
    procedure WriteValue(value: DDN.mscorlib.DNObject); overload;
    procedure WriteValue(value: string); overload;
    procedure WriteValue(value: DDN.mscorlib.DNDateTime); overload;
    procedure WriteValue(value: DDN.mscorlib.DNDateTimeOffset); overload;
    procedure WriteValue(value: Double); overload;
    procedure WriteValue(value: Single); overload;
    procedure WriteValue(value: DDN.mscorlib.DNDecimal); overload;
    procedure WriteValue(value: Int32); overload;
    procedure WriteValue(value: Int64); overload;
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    procedure WriteElementString(localName: string; value: string); overload;
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure Dispose;
    function WriteStartDocumentAsync: DDN.mscorlib.DNTask; overload;
    function WriteStartDocumentAsync(standalone: Boolean): DDN.mscorlib.DNTask; overload;
    function WriteEndDocumentAsync: DDN.mscorlib.DNTask;
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDN.mscorlib.DNTask;
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDN.mscorlib.DNTask;
    function WriteEndElementAsync: DDN.mscorlib.DNTask;
    function WriteFullEndElementAsync: DDN.mscorlib.DNTask;
    function WriteCDataAsync(text: string): DDN.mscorlib.DNTask;
    function WriteCommentAsync(text: string): DDN.mscorlib.DNTask;
    function WriteProcessingInstructionAsync(name: string; text: string): DDN.mscorlib.DNTask;
    function WriteEntityRefAsync(name: string): DDN.mscorlib.DNTask;
    function WriteCharEntityAsync(ch: Char): DDN.mscorlib.DNTask;
    function WriteWhitespaceAsync(ws: string): DDN.mscorlib.DNTask;
    function WriteStringAsync(text: string): DDN.mscorlib.DNTask;
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDN.mscorlib.DNTask;
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteRawAsync(data: string): DDN.mscorlib.DNTask; overload;
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    function FlushAsync: DDN.mscorlib.DNTask;
    function WriteNmTokenAsync(name: string): DDN.mscorlib.DNTask;
    function WriteNameAsync(name: string): DDN.mscorlib.DNTask;
    function WriteQualifiedNameAsync(localName: string; ns: string): DDN.mscorlib.DNTask;
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask;
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    procedure WriteStartDocument; overload;
    procedure WriteStartDocument(standalone: Boolean); overload;
    procedure WriteEndDocument;
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndElement;
    procedure WriteFullEndElement;
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndAttribute;
    procedure WriteCData(text: string);
    procedure WriteComment(text: string);
    procedure WriteProcessingInstruction(name: string; text: string);
    procedure WriteEntityRef(name: string);
    procedure WriteCharEntity(ch: Char);
    procedure WriteWhitespace(ws: string);
    procedure WriteString(text: string);
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteRaw(data: string); overload;
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Flush;
    function LookupPrefix(ns: string): string;
    procedure WriteQualifiedName(localName: string; ns: string);
    procedure WriteValue(value: Boolean); overload;
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Settings: DNXmlWriterSettings read get_Settings;
    property WriteState: DNWriteState read get_WriteState;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
  end;

  TDNXmlWriter = class(TDNGenericImport<DNXmlWriterClass, DNXmlWriter>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8666F90C-F5C9-5F87-910D-1BD914FBFB3C}']
  { constructors } 

    {class} function init: DNXmlWriterSettings;

  end;

  [DNTypeName('System.Xml.XmlWriterSettings')]
  DNXmlWriterSettings = interface(DDN.mscorlib.DNObject)
  ['{FF4A400D-DA06-355E-86B7-9B296810A674}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_OmitXmlDeclaration: Boolean;
    procedure set_OmitXmlDeclaration(value: Boolean);
    function get_NewLineHandling: DNNewLineHandling;
    procedure set_NewLineHandling(value: DNNewLineHandling);
    function get_NewLineChars: string;
    procedure set_NewLineChars(value: string);
    function get_Indent: Boolean;
    procedure set_Indent(value: Boolean);
    function get_IndentChars: string;
    procedure set_IndentChars(value: string);
    function get_NewLineOnAttributes: Boolean;
    procedure set_NewLineOnAttributes(value: Boolean);
    function get_CloseOutput: Boolean;
    procedure set_CloseOutput(value: Boolean);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_NamespaceHandling: DNNamespaceHandling;
    procedure set_NamespaceHandling(value: DNNamespaceHandling);
    function get_WriteEndDocumentOnClose: Boolean;
    procedure set_WriteEndDocumentOnClose(value: Boolean);
    function get_OutputMethod: DNXmlOutputMethod;
    function get_DoNotEscapeUriAttributes: Boolean;
    procedure set_DoNotEscapeUriAttributes(value: Boolean);

  { methods } 

    function Clone: DNXmlWriterSettings;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Async: Boolean read get_Async write set_Async;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property OmitXmlDeclaration: Boolean read get_OmitXmlDeclaration write set_OmitXmlDeclaration;
    property NewLineHandling: DNNewLineHandling read get_NewLineHandling write set_NewLineHandling;
    property NewLineChars: string read get_NewLineChars write set_NewLineChars;
    property Indent: Boolean read get_Indent write set_Indent;
    property IndentChars: string read get_IndentChars write set_IndentChars;
    property NewLineOnAttributes: Boolean read get_NewLineOnAttributes write set_NewLineOnAttributes;
    property CloseOutput: Boolean read get_CloseOutput write set_CloseOutput;
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    property NamespaceHandling: DNNamespaceHandling read get_NamespaceHandling write set_NamespaceHandling;
    property WriteEndDocumentOnClose: Boolean read get_WriteEndDocumentOnClose write set_WriteEndDocumentOnClose;
    property OutputMethod: DNXmlOutputMethod read get_OutputMethod;
    property DoNotEscapeUriAttributes: Boolean read get_DoNotEscapeUriAttributes write set_DoNotEscapeUriAttributes;
  end;

  TDNXmlWriterSettings = class(TDNGenericImport<DNXmlWriterSettingsClass, DNXmlWriterSettings>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F66C6659-D159-5BE6-A5CE-CAA051FE3D65}']
  { static methods } 

    {class} function Compile(xpath: string): DNXPathExpression; overload;
    {class} function Compile(xpath: string; nsResolver: DNIXmlNamespaceResolver): DNXPathExpression; overload;

  end;

  [DNTypeName('System.Xml.XPath.XPathExpression')]
  DNXPathExpression = interface(DDN.mscorlib.DNObject)
  ['{B2D5CCCE-B400-3DC6-B310-EB894C049E94}']
  { getters & setters } 

    function get_Expression: string;
    function get_ReturnType: DNXPathResultType;

  { methods } 

    procedure AddSort(expr: DDN.mscorlib.DNObject; comparer: DDN.mscorlib.DNIComparer); overload;
    procedure AddSort(expr: DDN.mscorlib.DNObject; order: DNXmlSortOrder; caseOrder: DNXmlCaseOrder; lang: string; dataType: DNXmlDataType); overload;
    function Clone: DNXPathExpression;
    procedure SetContext(nsManager: DNXmlNamespaceManager); overload;
    procedure SetContext(nsResolver: DNIXmlNamespaceResolver); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Expression: string read get_Expression;
    property ReturnType: DNXPathResultType read get_ReturnType;
  end;

  TDNXPathExpression = class(TDNGenericImport<DNXPathExpressionClass, DNXPathExpression>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNavigatorClass = interface(DNObjectClass)
  ['{ED2BA7FB-0878-504B-988D-16D04F1775E3}']
  { static getter & setter } 

    {class} function get_NavigatorComparer: DDN.mscorlib.DNIEqualityComparer;

  { static propertys } 

    {class} property NavigatorComparer: DDN.mscorlib.DNIEqualityComparer read get_NavigatorComparer;
  end;

  [DNTypeName('System.Xml.XPath.XPathNavigator')]
  DNXPathNavigator = interface(DNObject)
  ['{BE86B874-6C3C-3FC2-A6B3-4DA73CA20540}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_TypedValue: DDN.mscorlib.DNObject;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDN.mscorlib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;
    function get_NameTable: DNXmlNameTable;
    function get_NodeType: DNXPathNodeType;
    function get_LocalName: string;
    function get_Name: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_XmlLang: string;
    function get_UnderlyingObject: DDN.mscorlib.DNObject;
    function get_HasAttributes: Boolean;
    function get_HasChildren: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_CanEdit: Boolean;
    function get_OuterXml: string;
    procedure set_OuterXml(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;

  { methods } 

    function ToString: string;
    procedure SetValue(value: string);
    procedure SetTypedValue(typedValue: DDN.mscorlib.DNObject);
    function ValueAs(returnType: DDN.mscorlib.DNType; nsResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function CreateNavigator: DNXPathNavigator;
    function ReadSubtree: DNXmlReader;
    procedure WriteSubtree(writer: DNXmlWriter);
    function GetAttribute(localName: string; namespaceURI: string): string;
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean;
    function MoveToNamespace(name: string): Boolean;
    function MoveToFirstNamespace: Boolean; overload;
    function MoveToNextNamespace: Boolean; overload;
    function MoveToFirst: Boolean;
    procedure MoveToRoot;
    function MoveToChild(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToChild(&type: DNXPathNodeType): Boolean; overload;
    function MoveToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToFollowing(localName: string; namespaceURI: string; &end: DNXPathNavigator): Boolean; overload;
    function MoveToFollowing(&type: DNXPathNodeType): Boolean; overload;
    function MoveToFollowing(&type: DNXPathNodeType; &end: DNXPathNavigator): Boolean; overload;
    function MoveToNext(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToNext(&type: DNXPathNodeType): Boolean; overload;
    function IsDescendant(nav: DNXPathNavigator): Boolean;
    function Compile(xpath: string): DNXPathExpression;
    function SelectSingleNode(xpath: string): DNXPathNavigator; overload;
    function SelectSingleNode(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNavigator; overload;
    function SelectSingleNode(expression: DNXPathExpression): DNXPathNavigator; overload;
    function Select(xpath: string): DNXPathNodeIterator; overload;
    function Select(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNodeIterator; overload;
    function Select(expr: DNXPathExpression): DNXPathNodeIterator; overload;
    function Evaluate(xpath: string): DDN.mscorlib.DNObject; overload;
    function Evaluate(xpath: string; resolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function Evaluate(expr: DNXPathExpression): DDN.mscorlib.DNObject; overload;
    function Evaluate(expr: DNXPathExpression; context: DNXPathNodeIterator): DDN.mscorlib.DNObject; overload;
    function Matches(expr: DNXPathExpression): Boolean; overload;
    function Matches(xpath: string): Boolean; overload;
    function SelectChildren(&type: DNXPathNodeType): DNXPathNodeIterator; overload;
    function SelectChildren(name: string; namespaceURI: string): DNXPathNodeIterator; overload;
    function SelectAncestors(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectAncestors(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectDescendants(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectDescendants(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function PrependChild: DNXmlWriter; overload;
    function AppendChild: DNXmlWriter; overload;
    function InsertAfter: DNXmlWriter; overload;
    function InsertBefore: DNXmlWriter; overload;
    function CreateAttributes: DNXmlWriter;
    function ReplaceRange(lastSiblingToReplace: DNXPathNavigator): DNXmlWriter;
    procedure ReplaceSelf(newNode: string); overload;
    procedure ReplaceSelf(newNode: DNXmlReader); overload;
    procedure ReplaceSelf(newNode: DNXPathNavigator); overload;
    procedure AppendChild(newChild: string); overload;
    procedure AppendChild(newChild: DNXmlReader); overload;
    procedure AppendChild(newChild: DNXPathNavigator); overload;
    procedure PrependChild(newChild: string); overload;
    procedure PrependChild(newChild: DNXmlReader); overload;
    procedure PrependChild(newChild: DNXPathNavigator); overload;
    procedure InsertBefore(newSibling: string); overload;
    procedure InsertBefore(newSibling: DNXmlReader); overload;
    procedure InsertBefore(newSibling: DNXPathNavigator); overload;
    procedure InsertAfter(newSibling: string); overload;
    procedure InsertAfter(newSibling: DNXmlReader); overload;
    procedure InsertAfter(newSibling: DNXPathNavigator); overload;
    procedure DeleteRange(lastSiblingToDelete: DNXPathNavigator);
    procedure DeleteSelf;
    procedure PrependChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure AppendChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure InsertElementBefore(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure InsertElementAfter(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure CreateAttribute(prefix: string; localName: string; namespaceURI: string; value: string);
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(namespaceURI: string): string;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    function Clone: DNXPathNavigator;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function GetNamespace(name: string): string;
    function MoveToFirstNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    function MoveToNextNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    function MoveToNext: Boolean; overload;
    function MoveToPrevious: Boolean;
    function MoveToFirstChild: Boolean;
    function MoveToParent: Boolean;
    function MoveTo(other: DNXPathNavigator): Boolean;
    function MoveToId(id: string): Boolean;
    function IsSamePosition(other: DNXPathNavigator): Boolean;
    function ComparePosition(nav: DNXPathNavigator): DNXmlNodeOrder;
    function CheckValidity(schemas: DNXmlSchemaSet; validationEventHandler: DNValidationEventHandler): Boolean;
    function ValueAs(returnType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNode: Boolean read get_IsNode;
    property XmlType: DNXmlSchemaType read get_XmlType;
    property TypedValue: DDN.mscorlib.DNObject read get_TypedValue;
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    property ValueAsDateTime: DDN.mscorlib.DNDateTime read get_ValueAsDateTime;
    property ValueAsDouble: Double read get_ValueAsDouble;
    property ValueAsInt: Int32 read get_ValueAsInt;
    property ValueAsLong: Int64 read get_ValueAsLong;
    property NameTable: DNXmlNameTable read get_NameTable;
    property NodeType: DNXPathNodeType read get_NodeType;
    property LocalName: string read get_LocalName;
    property Name: string read get_Name;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property XmlLang: string read get_XmlLang;
    property UnderlyingObject: DDN.mscorlib.DNObject read get_UnderlyingObject;
    property HasAttributes: Boolean read get_HasAttributes;
    property HasChildren: Boolean read get_HasChildren;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property CanEdit: Boolean read get_CanEdit;
    property OuterXml: string read get_OuterXml write set_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value;
  end;

  TDNXPathNavigator = class(TDNGenericImport<DNXPathNavigatorClass, DNXPathNavigator>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNodeIteratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D5B45F05-6AFE-58F0-9E23-31308022884E}']
  end;

  [DNTypeName('System.Xml.XPath.XPathNodeIterator')]
  DNXPathNodeIterator = interface(DDN.mscorlib.DNObject)
  ['{181EDCFA-EB65-387B-9544-B953DD6A55D0}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;
    function get_CurrentPosition: Int32;
    function get_Count: Int32;

  { methods } 

    function Clone: DNXPathNodeIterator;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
    property CurrentPosition: Int32 read get_CurrentPosition;
    property Count: Int32 read get_Count;
  end;

  TDNXPathNodeIterator = class(TDNGenericImport<DNXPathNodeIteratorClass, DNXPathNodeIterator>) end;


implementation

end.
