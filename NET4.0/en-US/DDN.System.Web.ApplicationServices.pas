//----------------------------------------------------------------------------
//  System.Web.ApplicationServices.dll: System.Web.ApplicationServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Web.ApplicationServices
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Web.ApplicationServices;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Configuration,
  DDN.System;

type

{ enums }

  //-------------namespace: System.Web.Configuration----------------
  ///<summary>Enumerates the password-compatibility modes for ASP.NET membership.</summary>
  [DNTypeName('System.Web.Configuration.MembershipPasswordCompatibilityMode')]
  DNMembershipPasswordCompatibilityMode = type Integer;
  DNMembershipPasswordCompatibilityModeHelper = record helper for DNMembershipPasswordCompatibilityMode
  public const
    ///<summary>Passwords are in ASP.NET 2.0 mode.</summary>
    Framework20 = 0;
    ///<summary>Passwords are in ASP.NET 4 mode.</summary>
    Framework40 = 1;
  end;


  //-------------namespace: System.Web.Security----------------
  ///<summary>Describes the result of a <see cref="M:System.Web.Security.Membership.CreateUser(System.String,System.String)" />
  ///  operation.</summary>
  [DNTypeName('System.Web.Security.MembershipCreateStatus')]
  DNMembershipCreateStatus = type Integer;
  DNMembershipCreateStatusHelper = record helper for DNMembershipCreateStatus
  public const
    ///<summary>The user was successfully created.</summary>
    Success = 0;
    ///<summary>The user name was not found in the database.</summary>
    InvalidUserName = 1;
    ///<summary>The password is not formatted correctly.</summary>
    InvalidPassword = 2;
    ///<summary>The password question is not formatted correctly.</summary>
    InvalidQuestion = 3;
    ///<summary>The password answer is not formatted correctly.</summary>
    InvalidAnswer = 4;
    ///<summary>The e-mail address is not formatted correctly.</summary>
    InvalidEmail = 5;
    ///<summary>The user name already exists in the database for the application.</summary>
    DuplicateUserName = 6;
    ///<summary>The e-mail address already exists in the database for the application.</summary>
    DuplicateEmail = 7;
    ///<summary>The user was not created, for a reason defined by the provider.</summary>
    UserRejected = 8;
    ///<summary>The provider user key is of an invalid type or format.</summary>
    InvalidProviderUserKey = 9;
    ///<summary>The provider user key already exists in the database for the application.</summary>
    DuplicateProviderUserKey = 10;
    ///<summary>The provider returned an error that is not described by other <see cref="T:System.Web.Security.MembershipCreateStatus" />
    ///  enumeration values.</summary>
    ProviderError = 11;
  end;


  //-------------namespace: System.Web.Security----------------
  ///<summary>Describes the encryption format for storing passwords for membership users.</summary>
  [DNTypeName('System.Web.Security.MembershipPasswordFormat')]
  DNMembershipPasswordFormat = type Integer;
  DNMembershipPasswordFormatHelper = record helper for DNMembershipPasswordFormat
  public const
    ///<summary>Not secure, do not use. Passwords are not encrypted.</summary>
    Clear = 0;
    ///<summary>Passwords are encrypted one-way using the SHA1 hashing algorithm.</summary>
    Hashed = 1;
    ///<summary>Not secure, do not use. Passwords are encrypted using the encryption settings determined by the machineKey Element (ASP.NET Settings Schema) element configuration.</summary>
    Encrypted = 2;
  end;




type


{ declares }

  DNCustomLoaderAttribute = interface; // type: System.Web.Hosting.CustomLoaderAttribute, namespace: System.Web.Hosting
  DNMembershipProvider = interface; // type: System.Web.Security.MembershipProvider, namespace: System.Web.Security
  DNRoleProvider = interface; // type: System.Web.Security.RoleProvider, namespace: System.Web.Security
  DNMembershipProviderCollection = interface; // type: System.Web.Security.MembershipProviderCollection, namespace: System.Web.Security
  DNValidatePasswordEventArgs = interface; // type: System.Web.Security.ValidatePasswordEventArgs, namespace: System.Web.Security
  DNMembershipCreateUserException = interface; // type: System.Web.Security.MembershipCreateUserException, namespace: System.Web.Security
  DNMembershipPasswordException = interface; // type: System.Web.Security.MembershipPasswordException, namespace: System.Web.Security
  DNMembershipUser = interface; // type: System.Web.Security.MembershipUser, namespace: System.Web.Security
  DNMembershipUserCollection = interface; // type: System.Web.Security.MembershipUserCollection, namespace: System.Web.Security

{ delegates }

  ///<summary>Represents the method that will handle the <see cref="E:System.Web.Security.MembershipProvider.ValidatingPassword" />
  ///  event of the <see cref="T:System.Web.Security.MembershipProvider" />
  ///  class.</summary>
  ///  <param name="sender">The <see cref="T:System.Web.Security.MembershipProvider" />
  ///  that raised the <see cref="E:System.Web.Security.MembershipProvider.ValidatingPassword" />
  ///  event.</param>
  ///  <param name="e">A <see cref="T:System.Web.Security.ValidatePasswordEventArgs" />
  ///  object that contains the event data.</param>
  [DNTypeName('System.Web.Security.MembershipValidatePasswordEventHandler')]
  DNMembershipValidatePasswordEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNValidatePasswordEventArgs) of object;




{ objects }

  //-------------namespace: System.Web.Hosting----------------
  DNCustomLoaderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{049BD94B-0A35-51D8-B1EA-EB0422E81D62}']
  { constructors } 

    ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Initializes a new instance of the <see cref="T:System.Web.Hosting.CustomLoaderAttribute" />
    ///  class.</summary>
    {class} function init(customLoaderType: DDN.mscorlib.DNType): DNCustomLoaderAttribute;

  end;

  ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Provides a custom loader to ASP.NET so that an application can provide its own implementation of the hosting environment.</summary>
  [DNTypeName('System.Web.Hosting.CustomLoaderAttribute')]
  DNCustomLoaderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{77E9C4C7-B069-391C-BEA9-E577892583DE}']
  { getters & setters } 

    function get_CustomLoaderType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Gets the type of the custom loader.</summary>
    ///<returns>The type of the custom loader.</returns>
    property CustomLoaderType: DDN.mscorlib.DNType read get_CustomLoaderType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCustomLoaderAttribute = class(TDNGenericImport<DNCustomLoaderAttributeClass, DNCustomLoaderAttribute>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipProviderClass = interface(DNObjectClass)
  ['{5EF06F7E-D1D6-52DD-9B3A-7F9C0893E5B8}']
  end;

  ///<summary>Defines the contract that ASP.NET implements to provide membership services using custom membership providers.</summary>
  [DNTypeName('System.Web.Security.MembershipProvider')]
  DNMembershipProvider = interface(DNObject)
  ['{51D5FA24-9734-30CE-A84D-A3C7272D84AC}']
  { getters & setters } 

    function get_EnablePasswordRetrieval: Boolean;
    function get_EnablePasswordReset: Boolean;
    function get_RequiresQuestionAndAnswer: Boolean;
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_MaxInvalidPasswordAttempts: Int32;
    function get_PasswordAttemptWindow: Int32;
    function get_RequiresUniqueEmail: Boolean;
    function get_PasswordFormat: DNMembershipPasswordFormat;
    function get_MinRequiredPasswordLength: Int32;
    function get_MinRequiredNonAlphanumericCharacters: Int32;
    function get_PasswordStrengthRegularExpression: string;
    function get_Name: string;
    function get_Description: string;

  { events } 

    procedure add_ValidatingPassword(value: DNMembershipValidatePasswordEventHandler);
    procedure remove_ValidatingPassword(value: DNMembershipValidatePasswordEventHandler);

  { methods } 

    function CreateUser(username: string; password: string; email: string; passwordQuestion: string; passwordAnswer: string; isApproved: Boolean; providerUserKey: DDN.mscorlib.DNObject; out status: DNMembershipCreateStatus): DNMembershipUser;
    ///<summary>Processes a request to update the password question and answer for a membership user.</summary>
    ///  <param name="username">The user to change the password question and answer for. </param>
    ///  <param name="password">The password for the specified user. </param>
    ///  <param name="newPasswordQuestion">The new password question for the specified user. </param>
    ///  <param name="newPasswordAnswer">The new password answer for the specified user. </param>
    ///<returns><see langword="true" />
    ///  if the password question and answer are updated successfully; otherwise, <see langword="false" />
    ///  .</returns>
    function ChangePasswordQuestionAndAnswer(username: string; password: string; newPasswordQuestion: string; newPasswordAnswer: string): Boolean;
    ///<summary>Gets the password for the specified user name from the data source.</summary>
    ///  <param name="username">The user to retrieve the password for. </param>
    ///  <param name="answer">The password answer for the user. </param>
    ///<returns>The password for the specified user name.</returns>
    function GetPassword(username: string; answer: string): string;
    ///<summary>Processes a request to update the password for a membership user.</summary>
    ///  <param name="username">The user to update the password for. </param>
    ///  <param name="oldPassword">The current password for the specified user. </param>
    ///  <param name="newPassword">The new password for the specified user. </param>
    ///<returns><see langword="true" />
    ///  if the password was updated successfully; otherwise, <see langword="false" />
    ///  .</returns>
    function ChangePassword(username: string; oldPassword: string; newPassword: string): Boolean;
    ///<summary>Resets a user's password to a new, automatically generated password.</summary>
    ///  <param name="username">The user to reset the password for. </param>
    ///  <param name="answer">The password answer for the specified user. </param>
    ///<returns>The new password for the specified user.</returns>
    function ResetPassword(username: string; answer: string): string;
    ///<summary>Updates information about a user in the data source.</summary>
    ///  <param name="user">A <see cref="T:System.Web.Security.MembershipUser" />
    ///  object that represents the user to update and the updated information for the user. </param>
    procedure UpdateUser(user: DNMembershipUser);
    ///<summary>Verifies that the specified user name and password exist in the data source.</summary>
    ///  <param name="username">The name of the user to validate. </param>
    ///  <param name="password">The password for the specified user. </param>
    ///<returns><see langword="true" />
    ///  if the specified username and password are valid; otherwise, <see langword="false" />
    ///  .</returns>
    function ValidateUser(username: string; password: string): Boolean;
    ///<summary>Clears a lock so that the membership user can be validated.</summary>
    ///  <param name="userName">The membership user whose lock status you want to clear.</param>
    ///<returns><see langword="true" />
    ///  if the membership user was successfully unlocked; otherwise, <see langword="false" />
    ///  .</returns>
    function UnlockUser(userName: string): Boolean;
    ///<summary>Gets user information from the data source based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.</summary>
    ///  <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
    ///  <param name="userIsOnline"><see langword="true" />
    ///  to update the last-activity date/time stamp for the user; <see langword="false" />
    ///  to return user information without updating the last-activity date/time stamp for the user.</param>
    ///<returns>A <see cref="T:System.Web.Security.MembershipUser" />
    ///  object populated with the specified user's information from the data source.</returns>
    function GetUser(providerUserKey: DDN.mscorlib.DNObject; userIsOnline: Boolean): DNMembershipUser; overload;
    ///<summary>Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.</summary>
    ///  <param name="username">The name of the user to get information for. </param>
    ///  <param name="userIsOnline"><see langword="true" />
    ///  to update the last-activity date/time stamp for the user; <see langword="false" />
    ///  to return user information without updating the last-activity date/time stamp for the user. </param>
    ///<returns>A <see cref="T:System.Web.Security.MembershipUser" />
    ///  object populated with the specified user's information from the data source.</returns>
    function GetUser(username: string; userIsOnline: Boolean): DNMembershipUser; overload;
    ///<summary>Gets the user name associated with the specified e-mail address.</summary>
    ///  <param name="email">The e-mail address to search for. </param>
    ///<returns>The user name associated with the specified e-mail address. If no match is found, return <see langword="null" />
    ///  .</returns>
    function GetUserNameByEmail(email: string): string;
    ///<summary>Removes a user from the membership data source. </summary>
    ///  <param name="username">The name of the user to delete.</param>
    ///  <param name="deleteAllRelatedData"><see langword="true" />
    ///  to delete data related to the user from the database; <see langword="false" />
    ///  to leave data related to the user in the database.</param>
    ///<returns><see langword="true" />
    ///  if the user was successfully deleted; otherwise, <see langword="false" />
    ///  .</returns>
    function DeleteUser(username: string; deleteAllRelatedData: Boolean): Boolean;
    function GetAllUsers(pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNMembershipUserCollection;
    ///<summary>Gets the number of users currently accessing the application.</summary>
    ///<returns>The number of users currently accessing the application.</returns>
    function GetNumberOfUsersOnline: Int32;
    function FindUsersByName(usernameToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNMembershipUserCollection;
    function FindUsersByEmail(emailToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNMembershipUserCollection;
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Indicates whether the membership provider is configured to allow users to retrieve their passwords.</summary>
    ///<returns><see langword="true" />
    ///  if the membership provider is configured to support password retrieval; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property EnablePasswordRetrieval: Boolean read get_EnablePasswordRetrieval;
    ///<summary>Indicates whether the membership provider is configured to allow users to reset their passwords.</summary>
    ///<returns><see langword="true" />
    ///  if the membership provider supports password reset; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property EnablePasswordReset: Boolean read get_EnablePasswordReset;
    ///<summary>Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.</summary>
    ///<returns><see langword="true" />
    ///  if a password answer is required for password reset and retrieval; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property RequiresQuestionAndAnswer: Boolean read get_RequiresQuestionAndAnswer;
    ///<summary>The name of the application using the custom membership provider.</summary>
    ///<returns>The name of the application using the custom membership provider.</returns>
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    ///<summary>Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.</summary>
    ///<returns>The number of invalid password or password-answer attempts allowed before the membership user is locked out.</returns>
    property MaxInvalidPasswordAttempts: Int32 read get_MaxInvalidPasswordAttempts;
    ///<summary>Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.</summary>
    ///<returns>The number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.</returns>
    property PasswordAttemptWindow: Int32 read get_PasswordAttemptWindow;
    ///<summary>Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.</summary>
    ///<returns><see langword="true" />
    ///  if the membership provider requires a unique e-mail address; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property RequiresUniqueEmail: Boolean read get_RequiresUniqueEmail;
    ///<summary>Gets a value indicating the format for storing passwords in the membership data store.</summary>
    ///<returns>One of the <see cref="T:System.Web.Security.MembershipPasswordFormat" />
    ///  values indicating the format for storing passwords in the data store.</returns>
    property PasswordFormat: DNMembershipPasswordFormat read get_PasswordFormat;
    ///<summary>Gets the minimum length required for a password.</summary>
    ///<returns>The minimum length required for a password. </returns>
    property MinRequiredPasswordLength: Int32 read get_MinRequiredPasswordLength;
    ///<summary>Gets the minimum number of special characters that must be present in a valid password.</summary>
    ///<returns>The minimum number of special characters that must be present in a valid password.</returns>
    property MinRequiredNonAlphanumericCharacters: Int32 read get_MinRequiredNonAlphanumericCharacters;
    ///<summary>Gets the regular expression used to evaluate a password.</summary>
    ///<returns>A regular expression used to evaluate a password.</returns>
    property PasswordStrengthRegularExpression: string read get_PasswordStrengthRegularExpression;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNMembershipProvider = class(TDNGenericImport<DNMembershipProviderClass, DNMembershipProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNRoleProviderClass = interface(DNObjectClass)
  ['{1211F1E5-6F8D-54C9-B892-501D6A2F27D3}']
  end;

  ///<summary>Defines the contract that ASP.NET implements to provide role-management services using custom role providers.</summary>
  [DNTypeName('System.Web.Security.RoleProvider')]
  DNRoleProvider = interface(DNObject)
  ['{5AE6C6A1-359B-3F21-8F37-E61F45DA5D38}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>Gets a value indicating whether the specified user is in the specified role for the configured <see langword="applicationName" />
    ///  .</summary>
    ///  <param name="username">The user name to search for.</param>
    ///  <param name="roleName">The role to search in.</param>
    ///<returns><see langword="true" />
    ///  if the specified user is in the specified role for the configured <see langword="applicationName" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsUserInRole(username: string; roleName: string): Boolean;
    ///<summary>Gets a list of the roles that a specified user is in for the configured <see langword="applicationName" />
    ///  .</summary>
    ///  <param name="username">The user to return a list of roles for.</param>
    ///<returns>A string array containing the names of all the roles that the specified user is in for the configured <see langword="applicationName" />
    ///  .</returns>
    function GetRolesForUser(username: string): TArray<string>;
    ///<summary>Adds a new role to the data source for the configured <see langword="applicationName" />
    ///  .</summary>
    ///  <param name="roleName">The name of the role to create.</param>
    procedure CreateRole(roleName: string);
    ///<summary>Removes a role from the data source for the configured <see langword="applicationName" />
    ///  .</summary>
    ///  <param name="roleName">The name of the role to delete.</param>
    ///  <param name="throwOnPopulatedRole">If <see langword="true" />
    ///  , throw an exception if <paramref name="roleName" />
    ///  has one or more members and do not delete <paramref name="roleName" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the role was successfully deleted; otherwise, <see langword="false" />
    ///  .</returns>
    function DeleteRole(roleName: string; throwOnPopulatedRole: Boolean): Boolean;
    ///<summary>Gets a value indicating whether the specified role name already exists in the role data source for the configured <see langword="applicationName" />
    ///  .</summary>
    ///  <param name="roleName">The name of the role to search for in the data source.</param>
    ///<returns><see langword="true" />
    ///  if the role name already exists in the data source for the configured <see langword="applicationName" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function RoleExists(roleName: string): Boolean;
    ///<summary>Adds the specified user names to the specified roles for the configured <see langword="applicationName" />
    ///  .</summary>
    ///  <param name="usernames">A string array of user names to be added to the specified roles. </param>
    ///  <param name="roleNames">A string array of the role names to add the specified user names to.</param>
    procedure AddUsersToRoles(usernames: TArray<string>; roleNames: TArray<string>);
    ///<summary>Removes the specified user names from the specified roles for the configured <see langword="applicationName" />
    ///  .</summary>
    ///  <param name="usernames">A string array of user names to be removed from the specified roles. </param>
    ///  <param name="roleNames">A string array of role names to remove the specified user names from.</param>
    procedure RemoveUsersFromRoles(usernames: TArray<string>; roleNames: TArray<string>);
    ///<summary>Gets a list of users in the specified role for the configured <see langword="applicationName" />
    ///  .</summary>
    ///  <param name="roleName">The name of the role to get the list of users for.</param>
    ///<returns>A string array containing the names of all the users who are members of the specified role for the configured <see langword="applicationName" />
    ///  .</returns>
    function GetUsersInRole(roleName: string): TArray<string>;
    ///<summary>Gets a list of all the roles for the configured <see langword="applicationName" />
    ///  .</summary>
    ///<returns>A string array containing the names of all the roles stored in the data source for the configured <see langword="applicationName" />
    ///  .</returns>
    function GetAllRoles: TArray<string>;
    ///<summary>Gets an array of user names in a role where the user name contains the specified user name to match.</summary>
    ///  <param name="roleName">The role to search in.</param>
    ///  <param name="usernameToMatch">The user name to search for.</param>
    ///<returns>A string array containing the names of all the users where the user name matches <paramref name="usernameToMatch" />
    ///  and the user is a member of the specified role.</returns>
    function FindUsersInRole(roleName: string; usernameToMatch: string): TArray<string>;
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the application to store and retrieve role information for.</summary>
    ///<returns>The name of the application to store and retrieve role information for.</returns>
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNRoleProvider = class(TDNGenericImport<DNRoleProviderClass, DNRoleProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipProviderCollectionClass = interface(DNObjectClass)
  ['{55B69265-C696-572B-9076-C814A66EFFC5}']
  { constructors } 

    ///<summary>Creates a new, empty membership provider collection.</summary>
    {class} function init: DNMembershipProviderCollection;

  end;

  ///<summary>A collection of objects that inherit the <see cref="T:System.Web.Security.MembershipProvider" />
  ///  abstract class.</summary>
  [DNTypeName('System.Web.Security.MembershipProviderCollection')]
  DNMembershipProviderCollection = interface(DNObject)
  ['{BAAE0D37-587F-31BA-B985-6915A9A25E93}']
  { getters & setters } 

    function get_Item(name: string): DNMembershipProvider;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Adds a membership provider to the collection.</summary>
    ///  <param name="provider">The membership provider to add to the collection.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="provider" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="provider" />
    ///  is not of a type that inherits the <see cref="T:System.Web.Security.MembershipProvider" />
    ///  abstract class.</exception>
    procedure Add(provider: DDN.System.Configuration.DNProviderBase);
    ///<summary>Copies the membership provider collection to a one-dimensional array.</summary>
    ///  <param name="array">A one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Web.Security.MembershipProviderCollection" />
    ///  . The array must have zero-based indexing.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  is multidimensional.-or- The number of elements in the source array is greater than the available space from <paramref name="index" />
    ///  to the end of the destination <paramref name="array" />
    ///  . </exception><exception cref="T:System.InvalidCastException">The type of the source array cannot be cast automatically to the type of the destination <paramref name="array" />
    ///  . </exception>
    procedure CopyTo(&array: TArray<DNMembershipProvider>; index: Int32); overload;
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNProviderBase>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNMembershipProvider read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMembershipProviderCollection = class(TDNGenericImport<DNMembershipProviderCollectionClass, DNMembershipProviderCollection>) end;

  //-------------namespace: System.Web.Security----------------
  DNValidatePasswordEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{BFBBB6AB-F398-579C-AA60-3F56033AFEB3}']
  { constructors } 

    ///<summary>Creates a new instance of the <see cref="T:System.Web.Security.ValidatePasswordEventArgs" />
    ///  class.</summary>
    ///  <param name="userName">The membership user name for the current create-user, change-password, or reset-password action.</param>
    ///  <param name="password">The new password for the specified membership user.</param>
    ///  <param name="isNewUser"><see langword="true" />
    ///  if the event is occurring while a new user is being created; otherwise, <see langword="false" />
    ///  .</param>
    {class} function init(userName: string; password: string; isNewUser: Boolean): DNValidatePasswordEventArgs;

  end;

  ///<summary>Provides event data for the <see cref="E:System.Web.Security.MembershipProvider.ValidatingPassword" />
  ///  event of the <see cref="T:System.Web.Security.MembershipProvider" />
  ///  class.</summary>
  [DNTypeName('System.Web.Security.ValidatePasswordEventArgs')]
  DNValidatePasswordEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B5D6612F-9D39-38AC-AD25-01ED85FEF6EF}']
  { getters & setters } 

    function get_UserName: string;
    function get_Password: string;
    function get_IsNewUser: Boolean;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_FailureInformation: DDN.mscorlib.DNException;
    procedure set_FailureInformation(value: DDN.mscorlib.DNException);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the membership user for the current create-user, change-password, or reset-password action.</summary>
    ///<returns>The name of the membership user for the current create-user, change-password, or reset-password action.</returns>
    property UserName: string read get_UserName;
    ///<summary>Gets the password for the current create-user, change-password, or reset-password action.</summary>
    ///<returns>The password for the current create-user, change-password, or reset-password action.</returns>
    property Password: string read get_Password;
    ///<summary>Gets a value that indicates whether the <see cref="E:System.Web.Security.MembershipProvider.ValidatingPassword" />
    ///  event is being raised during a call to the <see cref="M:System.Web.Security.MembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)" />
    ///  method.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="E:System.Web.Security.MembershipProvider.ValidatingPassword" />
    ///  event is being raised during a call to the <see cref="M:System.Web.Security.MembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)" />
    ///  method; otherwise, <see langword="false" />
    ///  .</returns>
    property IsNewUser: Boolean read get_IsNewUser;
    ///<summary>Gets or sets a value that indicates whether the current create-user, change-password, or reset-password action will be canceled.</summary>
    ///<returns><see langword="true" />
    ///  if the current create-user, change-password, or reset-password action will be canceled; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Cancel: Boolean read get_Cancel write set_Cancel;
    ///<summary>Gets or sets an exception that describes the reason for the password-validation failure.</summary>
    ///<returns>An <see cref="T:System.Exception" />
    ///  that describes the reason for the password-validation failure.</returns>
    property FailureInformation: DDN.mscorlib.DNException read get_FailureInformation write set_FailureInformation;
  end;

  TDNValidatePasswordEventArgs = class(TDNGenericImport<DNValidatePasswordEventArgsClass, DNValidatePasswordEventArgs>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipCreateUserExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{7914EDC9-0E6F-5C5D-9C3E-23D7FBAC956A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Security.MembershipCreateUserException" />
    ///  class with the specified <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" />
    ///  value.</summary>
    ///  <param name="statusCode">A <see cref="T:System.Web.Security.MembershipCreateStatus" />
    ///  enumeration value that describes the reason for the exception.</param>
    {class} function init(statusCode: DNMembershipCreateStatus): DNMembershipCreateUserException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Security.MembershipCreateUserException" />
    ///  class and sets the <see cref="P:System.Exception.Message" />
    ///  property to the supplied <paramref name="message" />
    ///  parameter value</summary>
    ///  <param name="message">A description of the reason for the exception.</param>
    {class} function init(message: string): DNMembershipCreateUserException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Security.MembershipCreateUserException" />
    ///  class.</summary>
    {class} function init: DNMembershipCreateUserException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Security.MembershipCreateUserException" />
    ///  class and sets the <see cref="P:System.Exception.Message" />
    ///  property to the supplied <paramref name="message" />
    ///  and the <see cref="P:System.Exception.InnerException" />
    ///  property to the supplied <paramref name="innerException" />
    ///  .</summary>
    ///  <param name="message">A description of the reason for the exception.</param>
    ///  <param name="innerException">The exception that caused the <see cref="T:System.Web.Security.MembershipCreateUserException" />
    ///  .</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNMembershipCreateUserException; overload;

  end;

  ///<summary>The exception that is thrown when a user is not successfully created by a membership provider.</summary>
  [DNTypeName('System.Web.Security.MembershipCreateUserException')]
  DNMembershipCreateUserException = interface(DDN.mscorlib.DNException)
  ['{90504B9A-DD00-3E9C-B397-D6AF57035533}']
  { getters & setters } 

    function get_StatusCode: DNMembershipCreateStatus;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  with the data needed to serialize the target object.</summary>
    ///  <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  to populate with data.</param>
    ///  <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  that specifies the destination for this serialization.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a description of the reason for the exception.</summary>
    ///<returns>A <see cref="T:System.Web.Security.MembershipCreateStatus" />
    ///  enumeration value that describes the reason for the exception.</returns>
    property StatusCode: DNMembershipCreateStatus read get_StatusCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMembershipCreateUserException = class(TDNGenericImport<DNMembershipCreateUserExceptionClass, DNMembershipCreateUserException>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipPasswordExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{8F691606-7172-5BCF-846E-C7502F65C3B6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Security.MembershipPasswordException" />
    ///  class and sets the <see cref="P:System.Exception.Message" />
    ///  property to the supplied <paramref name="message" />
    ///  .</summary>
    ///  <param name="message">A description of the reason for the exception.</param>
    {class} function init(message: string): DNMembershipPasswordException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Security.MembershipPasswordException" />
    ///  class. </summary>
    {class} function init: DNMembershipPasswordException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Security.MembershipPasswordException" />
    ///  class and sets the <see cref="P:System.Exception.Message" />
    ///  property to the supplied <paramref name="message" />
    ///  and the <see cref="P:System.Exception.InnerException" />
    ///  property to the supplied <paramref name="innerException" />
    ///  .</summary>
    ///  <param name="message">A description of the reason for the exception.</param>
    ///  <param name="innerException">The exception that caused the <see cref="T:System.Web.Security.MembershipPasswordException" />
    ///  .</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNMembershipPasswordException; overload;

  end;

  ///<summary>The exception that is thrown when a password cannot be retrieved from the password store.</summary>
  [DNTypeName('System.Web.Security.MembershipPasswordException')]
  DNMembershipPasswordException = interface(DDN.mscorlib.DNException)
  ['{1DA3370B-2D1F-328F-8F5D-8CA18CF13D62}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMembershipPasswordException = class(TDNGenericImport<DNMembershipPasswordExceptionClass, DNMembershipPasswordException>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipUserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{810378B9-69C0-5671-9875-5D1255F27A5B}']
  { constructors } 

    ///<summary>Creates a new membership user object with the specified property values.</summary>
    ///  <param name="providerName">The <see cref="P:System.Web.Security.MembershipUser.ProviderName" />
    ///  string for the membership user.</param>
    ///  <param name="name">The <see cref="P:System.Web.Security.MembershipUser.UserName" />
    ///  string for the membership user.</param>
    ///  <param name="providerUserKey">The <see cref="P:System.Web.Security.MembershipUser.ProviderUserKey" />
    ///  identifier for the membership user.</param>
    ///  <param name="email">The <see cref="P:System.Web.Security.MembershipUser.Email" />
    ///  string for the membership user.</param>
    ///  <param name="passwordQuestion">The <see cref="P:System.Web.Security.MembershipUser.PasswordQuestion" />
    ///  string for the membership user.</param>
    ///  <param name="comment">The <see cref="P:System.Web.Security.MembershipUser.Comment" />
    ///  string for the membership user.</param>
    ///  <param name="isApproved">The <see cref="P:System.Web.Security.MembershipUser.IsApproved" />
    ///  value for the membership user.</param>
    ///  <param name="isLockedOut"><see langword="true" />
    ///  to lock out the membership user; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="creationDate">The <see cref="P:System.Web.Security.MembershipUser.CreationDate" />
    ///<see cref="T:System.DateTime" />
    ///  object for the membership user.</param>
    ///  <param name="lastLoginDate">The <see cref="P:System.Web.Security.MembershipUser.LastLoginDate" />
    ///<see cref="T:System.DateTime" />
    ///  object for the membership user.</param>
    ///  <param name="lastActivityDate">The <see cref="P:System.Web.Security.MembershipUser.LastActivityDate" />
    ///<see cref="T:System.DateTime" />
    ///  object for the membership user.</param>
    ///  <param name="lastPasswordChangedDate">The <see cref="P:System.Web.Security.MembershipUser.LastPasswordChangedDate" />
    ///<see cref="T:System.DateTime" />
    ///  object for the membership user.</param>
    ///  <param name="lastLockoutDate">The <see cref="P:System.Web.Security.MembershipUser.LastLockoutDate" />
    ///<see cref="T:System.DateTime" />
    ///  object for the membership user.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="providerName" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="providerName" />
    ///  is not found in the <see cref="P:System.Web.Security.Membership.Providers" />
    ///  collection.</exception><exception cref="T:System.PlatformNotSupportedException">The constructor is not available. This can occur if the application targets the .NET Framework 4 Client Profile. To prevent this exception, derive your class from the type and then call the default protected constructor, or change the application to target the full version of the .NET Framework.</exception>
    {class} function init(providerName: string; name: string; providerUserKey: DDN.mscorlib.DNObject; email: string; passwordQuestion: string; comment: string; isApproved: Boolean; isLockedOut: Boolean; creationDate: DDN.mscorlib.DNDateTime; lastLoginDate: DDN.mscorlib.DNDateTime; lastActivityDate: DDN.mscorlib.DNDateTime; lastPasswordChangedDate: DDN.mscorlib.DNDateTime; lastLockoutDate: DDN.mscorlib.DNDateTime): DNMembershipUser;

  end;

  ///<summary>Exposes and updates membership user information in the membership data store.</summary>
  [DNTypeName('System.Web.Security.MembershipUser')]
  DNMembershipUser = interface(DDN.mscorlib.DNObject)
  ['{D116FD6C-9F44-34B1-B050-3CF193B8F0DC}']
  { getters & setters } 

    function get_UserName: string;
    function get_ProviderUserKey: DDN.mscorlib.DNObject;
    function get_Email: string;
    procedure set_Email(value: string);
    function get_PasswordQuestion: string;
    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_IsApproved: Boolean;
    procedure set_IsApproved(value: Boolean);
    function get_IsLockedOut: Boolean;
    function get_LastLockoutDate: DDN.mscorlib.DNDateTime;
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_LastLoginDate: DDN.mscorlib.DNDateTime;
    procedure set_LastLoginDate(value: DDN.mscorlib.DNDateTime);
    function get_LastActivityDate: DDN.mscorlib.DNDateTime;
    procedure set_LastActivityDate(value: DDN.mscorlib.DNDateTime);
    function get_LastPasswordChangedDate: DDN.mscorlib.DNDateTime;
    function get_IsOnline: Boolean;
    function get_ProviderName: string;

  { methods } 

    ///<summary>Returns the user name for the membership user.</summary>
    ///<returns>The <see cref="P:System.Web.Security.MembershipUser.UserName" />
    ///  for the membership user.</returns>
    function ToString: string;
    ///<summary>Resets a user's password to a new, automatically generated password.</summary>
    ///<returns>The new password for the membership user.</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">This method is not available. This can occur if the application targets the .NET Framework 4 Client Profile. To prevent this exception, override the method, or change the application to target the full version of the .NET Framework.</exception>
    function ResetPassword: string; overload;
    ///<summary>Gets the password for the membership user from the membership data store.</summary>
    ///<returns>The password for the membership user.</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">This method is not available. This can occur if the application targets the .NET Framework 4 Client Profile. To prevent this exception, override the method, or change the application to target the full version of the .NET Framework.</exception>
    function GetPassword: string; overload;
    ///<summary>Gets the password for the membership user from the membership data store.</summary>
    ///  <param name="passwordAnswer">The password answer for the membership user.</param>
    ///<returns>The password for the membership user.</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">This method is not available. This can occur if the application targets the .NET Framework 4 Client Profile. To prevent this exception, override the method, or change the application to target the full version of the .NET Framework.</exception>
    function GetPassword(passwordAnswer: string): string; overload;
    ///<summary>Updates the password for the membership user in the membership data store.</summary>
    ///  <param name="oldPassword">The current password for the membership user.</param>
    ///  <param name="newPassword">The new password for the membership user.</param>
    ///<returns><see langword="true" />
    ///  if the update was successful; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldPassword" />
    ///  is an empty string.-or-
    ///  <paramref name="newPassword" />
    ///  is an empty string.</exception><exception cref="T:System.ArgumentNullException"><paramref name="oldPassword" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="newPassword" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.PlatformNotSupportedException">This method is not available. This can occur if the application targets the .NET Framework 4 Client Profile. To prevent this exception, override the method, or change the application to target the full version of the .NET Framework.</exception>
    function ChangePassword(oldPassword: string; newPassword: string): Boolean;
    ///<summary>Updates the password question and answer for the membership user in the membership data store.</summary>
    ///  <param name="password">The current password for the membership user.</param>
    ///  <param name="newPasswordQuestion">The new password question value for the membership user.</param>
    ///  <param name="newPasswordAnswer">The new password answer value for the membership user.</param>
    ///<returns><see langword="true" />
    ///  if the update was successful; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="password" />
    ///  is an empty string.-or-
    ///  <paramref name="newPasswordQuestion" />
    ///  is an empty string.-or-
    ///  <paramref name="newPasswordAnswer" />
    ///  is an empty string.</exception><exception cref="T:System.ArgumentNullException"><paramref name="password" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.PlatformNotSupportedException">This method is not available. This can occur if the application targets the .NET Framework 4 Client Profile. To prevent this exception, override the method, or change the application to target the full version of the .NET Framework.</exception>
    function ChangePasswordQuestionAndAnswer(password: string; newPasswordQuestion: string; newPasswordAnswer: string): Boolean;
    ///<summary>Resets a user's password to a new, automatically generated password.</summary>
    ///  <param name="passwordAnswer">The password answer for the membership user.</param>
    ///<returns>The new password for the membership user.</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">This method is not available. This can occur if the application targets the .NET Framework 4 Client Profile. To prevent this exception, override the method, or change the application to target the full version of the .NET Framework.</exception>
    function ResetPassword(passwordAnswer: string): string; overload;
    ///<summary>Clears the locked-out state of the user so that the membership user can be validated.</summary>
    ///<returns><see langword="true" />
    ///  if the membership user was successfully unlocked; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">This method is not available. This can occur if the application targets the .NET Framework 4 Client Profile. To prevent this exception, override the method, or change the application to target the full version of the .NET Framework.</exception>
    function UnlockUser: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the logon name of the membership user.</summary>
    ///<returns>The logon name of the membership user.</returns>
    property UserName: string read get_UserName;
    ///<summary>Gets the user identifier from the membership data source for the user.</summary>
    ///<returns>The user identifier from the membership data source for the user.</returns>
    property ProviderUserKey: DDN.mscorlib.DNObject read get_ProviderUserKey;
    ///<summary>Gets or sets the e-mail address for the membership user.</summary>
    ///<returns>The e-mail address for the membership user.</returns>
    property Email: string read get_Email write set_Email;
    ///<summary>Gets the password question for the membership user.</summary>
    ///<returns>The password question for the membership user.</returns>
    property PasswordQuestion: string read get_PasswordQuestion;
    ///<summary>Gets or sets application-specific information for the membership user.</summary>
    ///<returns>Application-specific information for the membership user.</returns>
    property Comment: string read get_Comment write set_Comment;
    ///<summary>Gets or sets whether the membership user can be authenticated.</summary>
    ///<returns><see langword="true" />
    ///  if the user can be authenticated; otherwise, <see langword="false" />
    ///  .</returns>
    property IsApproved: Boolean read get_IsApproved write set_IsApproved;
    ///<summary>Gets a value indicating whether the membership user is locked out and unable to be validated.</summary>
    ///<returns><see langword="true" />
    ///  if the membership user is locked out and unable to be validated; otherwise, <see langword="false" />
    ///  .</returns>
    property IsLockedOut: Boolean read get_IsLockedOut;
    ///<summary>Gets the most recent date and time that the membership user was locked out.</summary>
    ///<returns>A <see cref="T:System.DateTime" />
    ///  object that represents the most recent date and time that the membership user was locked out.</returns>
    property LastLockoutDate: DDN.mscorlib.DNDateTime read get_LastLockoutDate;
    ///<summary>Gets the date and time when the user was added to the membership data store.</summary>
    ///<returns>The date and time when the user was added to the membership data store. </returns>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>Gets or sets the date and time when the user was last authenticated.</summary>
    ///<returns>The date and time when the user was last authenticated.</returns>
    property LastLoginDate: DDN.mscorlib.DNDateTime read get_LastLoginDate write set_LastLoginDate;
    ///<summary>Gets or sets the date and time when the membership user was last authenticated or accessed the application.</summary>
    ///<returns>The date and time when the membership user was last authenticated or accessed the application.</returns>
    property LastActivityDate: DDN.mscorlib.DNDateTime read get_LastActivityDate write set_LastActivityDate;
    ///<summary>Gets the date and time when the membership user's password was last updated.</summary>
    ///<returns>The date and time when the membership user's password was last updated.</returns>
    property LastPasswordChangedDate: DDN.mscorlib.DNDateTime read get_LastPasswordChangedDate;
    ///<summary>Gets whether the user is currently online.</summary>
    ///<returns><see langword="true" />
    ///  if the user is online; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">This method is not available. This can occur if the application targets the .NET Framework 4 Client Profile. To prevent this exception, override the method, or change the application to target the full version of the .NET Framework.</exception>
    property IsOnline: Boolean read get_IsOnline;
    ///<summary>Gets the name of the membership provider that stores and retrieves user information for the membership user.</summary>
    ///<returns>The name of the membership provider that stores and retrieves user information for the membership user.</returns>
    property ProviderName: string read get_ProviderName;
  end;

  TDNMembershipUser = class(TDNGenericImport<DNMembershipUserClass, DNMembershipUser>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipUserCollectionClass = interface(DNObjectClass)
  ['{E4E65B87-4ED5-5B1F-AE87-AFBA5B8F68E5}']
  { constructors } 

    ///<summary>Creates a new, empty membership user collection.</summary>
    {class} function init: DNMembershipUserCollection;

  end;

  ///<summary>A collection of <see cref="T:System.Web.Security.MembershipUser" />
  ///  objects.</summary>
  [DNTypeName('System.Web.Security.MembershipUserCollection')]
  DNMembershipUserCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{BCFB2F51-17F0-3E90-B24F-5E9A13AABD22}']
  { getters & setters } 

    function get_Item(name: string): DNMembershipUser;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Adds the specified membership user to the collection.</summary>
    ///  <param name="user">A <see cref="T:System.Web.Security.MembershipUser" />
    ///  object to add to the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The collection is read-only.</exception><exception cref="T:System.ArgumentNullException">The <see cref="P:System.Web.Security.MembershipUser.UserName" />
    ///  of the <paramref name="user" />
    ///  is null.</exception><exception cref="T:System.ArgumentException">A <see cref="T:System.Web.Security.MembershipUser" />
    ///  object with the same <see cref="P:System.Web.Security.MembershipUser.UserName" />
    ///  value as <paramref name="user" />
    ///  already exists in the collection.</exception>
    procedure Add(user: DNMembershipUser);
    ///<summary>Removes the membership user object with the specified user name from the collection.</summary>
    ///  <param name="name">The user name of the <see cref="T:System.Web.Security.MembershipUser" />
    ///  object to remove from the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    procedure Remove(name: string);
    ///<summary>Gets an enumerator that can iterate through the membership user collection.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  for the entire <see cref="T:System.Web.Security.MembershipUserCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Makes the contents of the membership user collection read-only.</summary>
    procedure SetReadOnly;
    ///<summary>Removes all membership user objects from the collection.</summary>
    procedure Clear;
    ///<summary>Copies the membership user collection to a one-dimensional array.</summary>
    ///  <param name="array">A one-dimensional array of type <see cref="T:System.Web.Security.MembershipUser" />
    ///  that is the destination of the elements copied from the <see cref="T:System.Web.Security.MembershipUserCollection" />
    ///  . The array must have zero-based indexing.</param>
    ///  <param name="index">The zero-based index in the array at which copying begins.</param>
    procedure CopyTo(&array: TArray<DNMembershipUser>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNMembershipUser read get_Item; default;
    ///<summary>Gets the number of membership user objects in the collection.</summary>
    ///<returns>The number of <see cref="T:System.Web.Security.MembershipUser" />
    ///  objects in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value indicating whether the membership user collection is thread safe.</summary>
    ///<returns>Always <see langword="false" />
    ///  because thread-safe membership user collections are not supported.</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets the synchronization root.</summary>
    ///<returns>Always <see langword="this" />
    ///  , because synchronization of membership user collections is not supported.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMembershipUserCollection = class(TDNGenericImport<DNMembershipUserCollectionClass, DNMembershipUserCollection>) end;


implementation


initialization
  LoadAssemblyModule('System.Web.ApplicationServices.dll', True);

finalization

end.
