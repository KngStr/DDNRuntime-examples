//----------------------------------------------------------------------------
//  System.Linq.Expressions.dll: System.Linq.Expressions, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Linq.Expressions
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Linq.Expressions;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type

{ enums }

  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.ExpressionType')]
  DNExpressionType = type Integer;
  DNExpressionTypeHelper = record helper for DNExpressionType
  public const
    Add = 0;
    AddChecked = 1;
    And_ = 2;
    AndAlso = 3;
    ArrayLength = 4;
    ArrayIndex = 5;
    Call = 6;
    Coalesce = 7;
    Conditional = 8;
    Constant = 9;
    Convert = 10;
    ConvertChecked = 11;
    Divide = 12;
    Equal = 13;
    ExclusiveOr = 14;
    GreaterThan = 15;
    GreaterThanOrEqual = 16;
    Invoke = 17;
    Lambda = 18;
    LeftShift = 19;
    LessThan = 20;
    LessThanOrEqual = 21;
    ListInit = 22;
    MemberAccess = 23;
    MemberInit = 24;
    Modulo = 25;
    Multiply = 26;
    MultiplyChecked = 27;
    Negate = 28;
    UnaryPlus = 29;
    NegateChecked = 30;
    New = 31;
    NewArrayInit = 32;
    NewArrayBounds = 33;
    Not_ = 34;
    NotEqual = 35;
    Or_ = 36;
    OrElse = 37;
    Parameter = 38;
    Power = 39;
    Quote = 40;
    RightShift = 41;
    Subtract = 42;
    SubtractChecked = 43;
    TypeAs = 44;
    TypeIs = 45;
    Assign = 46;
    Block = 47;
    DebugInfo = 48;
    Decrement = 49;
    Dynamic_ = 50;
    Default_ = 51;
    Extension = 52;
    Goto_ = 53;
    Increment = 54;
    Index = 55;
    Label_ = 56;
    RuntimeVariables = 57;
    Loop = 58;
    Switch = 59;
    Throw = 60;
    Try_ = 61;
    Unbox = 62;
    AddAssign = 63;
    AndAssign = 64;
    DivideAssign = 65;
    ExclusiveOrAssign = 66;
    LeftShiftAssign = 67;
    ModuloAssign = 68;
    MultiplyAssign = 69;
    OrAssign = 70;
    PowerAssign = 71;
    RightShiftAssign = 72;
    SubtractAssign = 73;
    AddAssignChecked = 74;
    MultiplyAssignChecked = 75;
    SubtractAssignChecked = 76;
    PreIncrementAssign = 77;
    PreDecrementAssign = 78;
    PostIncrementAssign = 79;
    PostDecrementAssign = 80;
    TypeEqual = 81;
    OnesComplement = 82;
    IsTrue = 83;
    IsFalse = 84;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.GotoExpressionKind')]
  DNGotoExpressionKind = type Integer;
  DNGotoExpressionKindHelper = record helper for DNGotoExpressionKind
  public const
    Goto_ = 0;
    Return = 1;
    Break = 2;
    Continue_ = 3;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.MemberBindingType')]
  DNMemberBindingType = type Integer;
  DNMemberBindingTypeHelper = record helper for DNMemberBindingType
  public const
    Assignment = 0;
    MemberBinding = 1;
    ListBinding = 2;
  end;




type


{ declares }

  DNIQueryable<T> = interface; // type: System.Linq.IQueryable`1, namespace: System.Linq
  DNIOrderedQueryable<T> = interface; // type: System.Linq.IOrderedQueryable`1, namespace: System.Linq
  DNIQueryable = interface; // type: System.Linq.IQueryable, namespace: System.Linq
  DNIOrderedQueryable = interface; // type: System.Linq.IOrderedQueryable, namespace: System.Linq
  DNIDynamicMetaObjectProvider = interface; // type: System.Dynamic.IDynamicMetaObjectProvider, namespace: System.Dynamic
  DNIInvokeOnGetBinder = interface; // type: System.Dynamic.IInvokeOnGetBinder, namespace: System.Dynamic
  DNIArgumentProvider = interface; // type: System.Linq.Expressions.IArgumentProvider, namespace: System.Linq.Expressions
  DNIDynamicExpression = interface; // type: System.Linq.Expressions.IDynamicExpression, namespace: System.Linq.Expressions
  DNIQueryProvider = interface; // type: System.Linq.IQueryProvider, namespace: System.Linq
  DNIRuntimeVariables = interface; // type: System.Runtime.CompilerServices.IRuntimeVariables, namespace: System.Runtime.CompilerServices
  DNDynamicAttribute = interface; // type: System.Runtime.CompilerServices.DynamicAttribute, namespace: System.Runtime.CompilerServices
  DNBindingRestrictions = interface; // type: System.Dynamic.BindingRestrictions, namespace: System.Dynamic
  DNCallInfo = interface; // type: System.Dynamic.CallInfo, namespace: System.Dynamic
  DNDynamicMetaObject = interface; // type: System.Dynamic.DynamicMetaObject, namespace: System.Dynamic
  DNDynamicObject = interface; // type: System.Dynamic.DynamicObject, namespace: System.Dynamic
  DNExpandoObject = interface; // type: System.Dynamic.ExpandoObject, namespace: System.Dynamic
  DNCatchBlock = interface; // type: System.Linq.Expressions.CatchBlock, namespace: System.Linq.Expressions
  DNElementInit = interface; // type: System.Linq.Expressions.ElementInit, namespace: System.Linq.Expressions
  DNExpression = interface; // type: System.Linq.Expressions.Expression, namespace: System.Linq.Expressions
  DNBinaryExpression = interface; // type: System.Linq.Expressions.BinaryExpression, namespace: System.Linq.Expressions
  DNBlockExpression = interface; // type: System.Linq.Expressions.BlockExpression, namespace: System.Linq.Expressions
  DNConditionalExpression = interface; // type: System.Linq.Expressions.ConditionalExpression, namespace: System.Linq.Expressions
  DNConstantExpression = interface; // type: System.Linq.Expressions.ConstantExpression, namespace: System.Linq.Expressions
  DNDebugInfoExpression = interface; // type: System.Linq.Expressions.DebugInfoExpression, namespace: System.Linq.Expressions
  DNDefaultExpression = interface; // type: System.Linq.Expressions.DefaultExpression, namespace: System.Linq.Expressions
  DNDynamicExpression = interface; // type: System.Linq.Expressions.DynamicExpression, namespace: System.Linq.Expressions
  DNGotoExpression = interface; // type: System.Linq.Expressions.GotoExpression, namespace: System.Linq.Expressions
  DNIndexExpression = interface; // type: System.Linq.Expressions.IndexExpression, namespace: System.Linq.Expressions
  DNInvocationExpression = interface; // type: System.Linq.Expressions.InvocationExpression, namespace: System.Linq.Expressions
  DNLabelExpression = interface; // type: System.Linq.Expressions.LabelExpression, namespace: System.Linq.Expressions
  DNLambdaExpression = interface; // type: System.Linq.Expressions.LambdaExpression, namespace: System.Linq.Expressions
  DNExpression<TDelegate> = interface; // type: System.Linq.Expressions.Expression`1, namespace: System.Linq.Expressions
  DNListInitExpression = interface; // type: System.Linq.Expressions.ListInitExpression, namespace: System.Linq.Expressions
  DNLoopExpression = interface; // type: System.Linq.Expressions.LoopExpression, namespace: System.Linq.Expressions
  DNMemberExpression = interface; // type: System.Linq.Expressions.MemberExpression, namespace: System.Linq.Expressions
  DNMemberInitExpression = interface; // type: System.Linq.Expressions.MemberInitExpression, namespace: System.Linq.Expressions
  DNMethodCallExpression = interface; // type: System.Linq.Expressions.MethodCallExpression, namespace: System.Linq.Expressions
  DNNewArrayExpression = interface; // type: System.Linq.Expressions.NewArrayExpression, namespace: System.Linq.Expressions
  DNNewExpression = interface; // type: System.Linq.Expressions.NewExpression, namespace: System.Linq.Expressions
  DNParameterExpression = interface; // type: System.Linq.Expressions.ParameterExpression, namespace: System.Linq.Expressions
  DNRuntimeVariablesExpression = interface; // type: System.Linq.Expressions.RuntimeVariablesExpression, namespace: System.Linq.Expressions
  DNSwitchExpression = interface; // type: System.Linq.Expressions.SwitchExpression, namespace: System.Linq.Expressions
  DNTryExpression = interface; // type: System.Linq.Expressions.TryExpression, namespace: System.Linq.Expressions
  DNTypeBinaryExpression = interface; // type: System.Linq.Expressions.TypeBinaryExpression, namespace: System.Linq.Expressions
  DNUnaryExpression = interface; // type: System.Linq.Expressions.UnaryExpression, namespace: System.Linq.Expressions
  DNExpressionVisitor = interface; // type: System.Linq.Expressions.ExpressionVisitor, namespace: System.Linq.Expressions
  DNDynamicExpressionVisitor = interface; // type: System.Linq.Expressions.DynamicExpressionVisitor, namespace: System.Linq.Expressions
  DNLightLambda = interface; // type: System.Linq.Expressions.Interpreter.LightLambda, namespace: System.Linq.Expressions.Interpreter
  DNLabelTarget = interface; // type: System.Linq.Expressions.LabelTarget, namespace: System.Linq.Expressions
  DNMemberBinding = interface; // type: System.Linq.Expressions.MemberBinding, namespace: System.Linq.Expressions
  DNMemberAssignment = interface; // type: System.Linq.Expressions.MemberAssignment, namespace: System.Linq.Expressions
  DNMemberListBinding = interface; // type: System.Linq.Expressions.MemberListBinding, namespace: System.Linq.Expressions
  DNMemberMemberBinding = interface; // type: System.Linq.Expressions.MemberMemberBinding, namespace: System.Linq.Expressions
  DNSwitchCase = interface; // type: System.Linq.Expressions.SwitchCase, namespace: System.Linq.Expressions
  DNSymbolDocumentInfo = interface; // type: System.Linq.Expressions.SymbolDocumentInfo, namespace: System.Linq.Expressions
  DNCallSite = interface; // type: System.Runtime.CompilerServices.CallSite, namespace: System.Runtime.CompilerServices
  DNCallSite<T> = interface; // type: System.Runtime.CompilerServices.CallSite`1, namespace: System.Runtime.CompilerServices
  DNCallSiteBinder = interface; // type: System.Runtime.CompilerServices.CallSiteBinder, namespace: System.Runtime.CompilerServices
  DNDynamicMetaObjectBinder = interface; // type: System.Dynamic.DynamicMetaObjectBinder, namespace: System.Dynamic
  DNBinaryOperationBinder = interface; // type: System.Dynamic.BinaryOperationBinder, namespace: System.Dynamic
  DNConvertBinder = interface; // type: System.Dynamic.ConvertBinder, namespace: System.Dynamic
  DNCreateInstanceBinder = interface; // type: System.Dynamic.CreateInstanceBinder, namespace: System.Dynamic
  DNDeleteIndexBinder = interface; // type: System.Dynamic.DeleteIndexBinder, namespace: System.Dynamic
  DNDeleteMemberBinder = interface; // type: System.Dynamic.DeleteMemberBinder, namespace: System.Dynamic
  DNGetIndexBinder = interface; // type: System.Dynamic.GetIndexBinder, namespace: System.Dynamic
  DNGetMemberBinder = interface; // type: System.Dynamic.GetMemberBinder, namespace: System.Dynamic
  DNInvokeBinder = interface; // type: System.Dynamic.InvokeBinder, namespace: System.Dynamic
  DNInvokeMemberBinder = interface; // type: System.Dynamic.InvokeMemberBinder, namespace: System.Dynamic
  DNSetIndexBinder = interface; // type: System.Dynamic.SetIndexBinder, namespace: System.Dynamic
  DNSetMemberBinder = interface; // type: System.Dynamic.SetMemberBinder, namespace: System.Dynamic
  DNUnaryOperationBinder = interface; // type: System.Dynamic.UnaryOperationBinder, namespace: System.Dynamic
  DNCallSiteHelpers = interface; // type: System.Runtime.CompilerServices.CallSiteHelpers, namespace: System.Runtime.CompilerServices
  DNCallSiteOps = interface; // type: System.Runtime.CompilerServices.CallSiteOps, namespace: System.Runtime.CompilerServices
  DNClosure = interface; // type: System.Runtime.CompilerServices.Closure, namespace: System.Runtime.CompilerServices
  DNDebugInfoGenerator = interface; // type: System.Runtime.CompilerServices.DebugInfoGenerator, namespace: System.Runtime.CompilerServices
  DNReadOnlyCollectionBuilder<T> = interface; // type: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1, namespace: System.Runtime.CompilerServices
  DNRuleCache<T> = interface; // type: System.Runtime.CompilerServices.RuleCache`1, namespace: System.Runtime.CompilerServices
  DNRuntimeOps = interface; // type: System.Runtime.CompilerServices.RuntimeOps, namespace: System.Runtime.CompilerServices


{ objects }

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IQueryable`1')]
  DNIQueryable<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{E2C91F76-C000-32D6-B5A1-1BB9AA1B5660}']
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IOrderedQueryable`1')]
  DNIOrderedQueryable<T> = interface(DNIQueryable<T>)
  ['{0FD6D6C3-C6F1-39DA-B3F5-1363BAEA7D94}']
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IQueryable')]
  DNIQueryable = interface(DDNC.System.Private.CoreLib.DNIEnumerable)
  ['{84F6F43C-A9A7-3658-91B4-B41B15CAEFF2}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_ElementType: DDNC.System.Private.CoreLib.DNType;
    function get_Provider: DNIQueryProvider;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property ElementType: DDNC.System.Private.CoreLib.DNType read get_ElementType;
    property Provider: DNIQueryProvider read get_Provider;
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IOrderedQueryable')]
  DNIOrderedQueryable = interface(DNIQueryable)
  ['{E5303F81-6FE2-37CC-893F-1BF7E067D44F}']
  end;

  //-------------namespace: System.Dynamic----------------
  [DNTypeName('System.Dynamic.IDynamicMetaObjectProvider')]
  DNIDynamicMetaObjectProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B86A98CC-DCC0-3205-8777-7911A07DAAAF}']
  { methods } 

    function GetMetaObject(parameter: DNExpression): DNDynamicMetaObject;

  end;

  //-------------namespace: System.Dynamic----------------
  [DNTypeName('System.Dynamic.IInvokeOnGetBinder')]
  DNIInvokeOnGetBinder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{ED40980B-63E1-325C-BC22-93E284CA8CD3}']
  { getters & setters } 

    function get_InvokeOnGet: Boolean;

  { propertys } 

    property InvokeOnGet: Boolean read get_InvokeOnGet;
  end;

  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.IArgumentProvider')]
  DNIArgumentProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6D1D0B80-3581-33F4-9261-6A4D710EDB5F}']
  { getters & setters } 

    function get_ArgumentCount: Int32;

  { methods } 

    function GetArgument(index: Int32): DNExpression;

  { propertys } 

    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.IDynamicExpression')]
  DNIDynamicExpression = interface(DNIArgumentProvider)
  ['{F2DF1DD2-D434-34A4-A72E-401019651DEC}']
  { getters & setters } 

    function get_DelegateType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function Rewrite(args: TArray<DNExpression>): DNExpression;
    function CreateCallSite: DDNC.System.Private.CoreLib.DNObject;

  { propertys } 

    property DelegateType: DDNC.System.Private.CoreLib.DNType read get_DelegateType;
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IQueryProvider')]
  DNIQueryProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B9608E43-658E-3B98-9448-8F93B7D6E50C}']
  { methods } 

    function CreateQuery(expression: DNExpression): DNIQueryable;
    function Execute(expression: DNExpression): DDNC.System.Private.CoreLib.DNObject;

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.IRuntimeVariables')]
  DNIRuntimeVariables = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D2E28B60-F4E4-3614-8D43-5DAEEDB31E8E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDNC.System.Private.CoreLib.DNObject;
    procedure set_Item(index: Int32; value: DDNC.System.Private.CoreLib.DNObject);

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDynamicAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{92446C8A-5AA5-5FB8-89C0-26375B92700A}']
  { constructors } 

    {class} function init: DNDynamicAttribute; overload;
    {class} function init(transformFlags: TArray<Boolean>): DNDynamicAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DynamicAttribute')]
  DNDynamicAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{EB4499BF-05E1-385E-8727-B96AA80CBBEE}']
  { getters & setters } 

    function get_TransformFlags: DDNC.System.Private.CoreLib.DNIList<Boolean>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TransformFlags: DDNC.System.Private.CoreLib.DNIList<Boolean> read get_TransformFlags;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDynamicAttribute = class(TDNGenericImport<DNDynamicAttributeClass, DNDynamicAttribute>) end;

  //-------------namespace: System.Dynamic----------------
  DNBindingRestrictionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{1D21255A-86B9-5E22-A753-AD1E77AB7818}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNBindingRestrictions;

  { static fields } 

    {class} property Empty: DNBindingRestrictions read __fakeFieldGet_Empty;

  { static methods } 

    {class} function GetTypeRestriction(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNBindingRestrictions;
    {class} function GetInstanceRestriction(expression: DNExpression; instance: DDNC.System.Private.CoreLib.DNObject): DNBindingRestrictions;
    {class} function GetExpressionRestriction(expression: DNExpression): DNBindingRestrictions;
    {class} function Combine(contributingObjects: DDNC.System.Private.CoreLib.DNIList<DNDynamicMetaObject>): DNBindingRestrictions;

  end;

  [DNTypeName('System.Dynamic.BindingRestrictions')]
  DNBindingRestrictions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{925C1997-E6F3-3A34-9F0E-559F21FE42AE}']
  { methods } 

    function Merge(restrictions: DNBindingRestrictions): DNBindingRestrictions;
    function ToExpression: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNBindingRestrictions = class(TDNGenericImport<DNBindingRestrictionsClass, DNBindingRestrictions>) end;

  //-------------namespace: System.Dynamic----------------
  DNCallInfoClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{8AB3926F-B66C-5114-9184-64311C6A881B}']
  { constructors } 

    {class} function init(argCount: Int32; argNames: TArray<string>): DNCallInfo; overload;
    {class} function init(argCount: Int32; argNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>): DNCallInfo; overload;

  end;

  [DNTypeName('System.Dynamic.CallInfo')]
  DNCallInfo = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{19EC1C9B-1305-3E8C-BC2F-ACE08BDC8C7C}']
  { getters & setters } 

    function get_ArgumentCount: Int32;
    function get_ArgumentNames: DDNC.System.Private.CoreLib.DNReadOnlyCollection<string>;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ArgumentCount: Int32 read get_ArgumentCount;
    property ArgumentNames: DDNC.System.Private.CoreLib.DNReadOnlyCollection<string> read get_ArgumentNames;
  end;

  TDNCallInfo = class(TDNGenericImport<DNCallInfoClass, DNCallInfo>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicMetaObjectClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{7EB398A4-7E93-5FEE-941E-0884C02759F4}']
  { constructors } 

    {class} function init(expression: DNExpression; restrictions: DNBindingRestrictions): DNDynamicMetaObject; overload;
    {class} function init(expression: DNExpression; restrictions: DNBindingRestrictions; value: DDNC.System.Private.CoreLib.DNObject): DNDynamicMetaObject; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EmptyMetaObjects: TArray<DNDynamicMetaObject>;

  { static fields } 

    {class} property EmptyMetaObjects: TArray<DNDynamicMetaObject> read __fakeFieldGet_EmptyMetaObjects;

  { static methods } 

    {class} function Create(value: DDNC.System.Private.CoreLib.DNObject; expression: DNExpression): DNDynamicMetaObject;

  end;

  [DNTypeName('System.Dynamic.DynamicMetaObject')]
  DNDynamicMetaObject = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3F955567-1DCF-335C-A0CD-3CAE1DFE3FA2}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_Restrictions: DNBindingRestrictions;
    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    function get_HasValue: Boolean;
    function get_RuntimeType: DDNC.System.Private.CoreLib.DNType;
    function get_LimitType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function BindConvert(binder: DNConvertBinder): DNDynamicMetaObject;
    function BindGetMember(binder: DNGetMemberBinder): DNDynamicMetaObject;
    function BindSetMember(binder: DNSetMemberBinder; value: DNDynamicMetaObject): DNDynamicMetaObject;
    function BindDeleteMember(binder: DNDeleteMemberBinder): DNDynamicMetaObject;
    function BindGetIndex(binder: DNGetIndexBinder; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindSetIndex(binder: DNSetIndexBinder; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject): DNDynamicMetaObject;
    function BindDeleteIndex(binder: DNDeleteIndexBinder; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindInvokeMember(binder: DNInvokeMemberBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindInvoke(binder: DNInvokeBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindCreateInstance(binder: DNCreateInstanceBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindUnaryOperation(binder: DNUnaryOperationBinder): DNDynamicMetaObject;
    function BindBinaryOperation(binder: DNBinaryOperationBinder; arg: DNDynamicMetaObject): DNDynamicMetaObject;
    function GetDynamicMemberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property Restrictions: DNBindingRestrictions read get_Restrictions;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value;
    property HasValue: Boolean read get_HasValue;
    property RuntimeType: DDNC.System.Private.CoreLib.DNType read get_RuntimeType;
    property LimitType: DDNC.System.Private.CoreLib.DNType read get_LimitType;
  end;

  TDNDynamicMetaObject = class(TDNGenericImport<DNDynamicMetaObjectClass, DNDynamicMetaObject>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicObjectClass = interface(DNObjectClass)
  ['{453FF455-140E-514A-8E51-4528E304B80F}']
  end;

  [DNTypeName('System.Dynamic.DynamicObject')]
  DNDynamicObject = interface(DNIDynamicMetaObjectProvider)
  ['{3FB5C940-7ED7-3B9F-AF42-F98E97DFC61A}']
  { methods } 

    function TryGetMember(binder: DNGetMemberBinder; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TrySetMember(binder: DNSetMemberBinder; value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryDeleteMember(binder: DNDeleteMemberBinder): Boolean;
    function TryInvokeMember(binder: DNInvokeMemberBinder; args: TArray<DDNC.System.Private.CoreLib.DNObject>; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryConvert(binder: DNConvertBinder; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryCreateInstance(binder: DNCreateInstanceBinder; args: TArray<DDNC.System.Private.CoreLib.DNObject>; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryInvoke(binder: DNInvokeBinder; args: TArray<DDNC.System.Private.CoreLib.DNObject>; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryBinaryOperation(binder: DNBinaryOperationBinder; arg: DDNC.System.Private.CoreLib.DNObject; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryUnaryOperation(binder: DNUnaryOperationBinder; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryGetIndex(binder: DNGetIndexBinder; indexes: TArray<DDNC.System.Private.CoreLib.DNObject>; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TrySetIndex(binder: DNSetIndexBinder; indexes: TArray<DDNC.System.Private.CoreLib.DNObject>; value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryDeleteIndex(binder: DNDeleteIndexBinder; indexes: TArray<DDNC.System.Private.CoreLib.DNObject>): Boolean;
    function GetDynamicMemberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function GetMetaObject(parameter: DNExpression): DNDynamicMetaObject;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNDynamicObject = class(TDNGenericImport<DNDynamicObjectClass, DNDynamicObject>) end;

  //-------------namespace: System.Dynamic----------------
  DNExpandoObjectClass = interface(DNObjectClass)
  ['{A2F79645-30BB-58D3-AEA2-E58C23C4041B}']
  { constructors } 

    {class} function init: DNExpandoObject;

  end;

  [DNTypeName('System.Dynamic.ExpandoObject')]
  DNExpandoObject = interface(DNIDynamicMetaObjectProvider)
  ['{F3DBFE4D-060F-30C9-B4EB-9BAD5CFEE33C}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNExpandoObject = class(TDNGenericImport<DNExpandoObjectClass, DNExpandoObject>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNCatchBlockClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C49306E2-63A9-5C38-836F-59A263F15F55}']
  end;

  [DNTypeName('System.Linq.Expressions.CatchBlock')]
  DNCatchBlock = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{DD018623-7911-353A-A19B-A10512DDE74D}']
  { getters & setters } 

    function get_Variable: DNParameterExpression;
    function get_Test: DDNC.System.Private.CoreLib.DNType;
    function get_Body: DNExpression;
    function get_Filter: DNExpression;

  { methods } 

    function ToString: string;
    function Update(variable: DNParameterExpression; filter: DNExpression; body: DNExpression): DNCatchBlock;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Variable: DNParameterExpression read get_Variable;
    property Test: DDNC.System.Private.CoreLib.DNType read get_Test;
    property Body: DNExpression read get_Body;
    property Filter: DNExpression read get_Filter;
  end;

  TDNCatchBlock = class(TDNGenericImport<DNCatchBlockClass, DNCatchBlock>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNElementInitClass = interface(DNObjectClass)
  ['{93D3CFB0-8D3E-578D-9917-7DCCABB75268}']
  end;

  [DNTypeName('System.Linq.Expressions.ElementInit')]
  DNElementInit = interface(DNIArgumentProvider)
  ['{E4D3BC7E-121B-3680-8864-3A490FF2857F}']
  { getters & setters } 

    function get_AddMethod: DDNC.System.Private.CoreLib.DNMethodInfo;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_ArgumentCount: Int32;

  { methods } 

    function GetArgument(index: Int32): DNExpression;
    function ToString: string;
    function Update(arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNElementInit;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property AddMethod: DDNC.System.Private.CoreLib.DNMethodInfo read get_AddMethod;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  TDNElementInit = class(TDNGenericImport<DNElementInitClass, DNElementInit>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{20C9D477-2450-5368-BE23-197EBFF2BC43}']
  { static methods } 

    {class} function ConvertChecked(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function ArrayLength(&array: DNExpression): DNUnaryExpression;
    {class} function Quote(expression: DNExpression): DNUnaryExpression;
    {class} function Rethrow: DNUnaryExpression; overload;
    {class} function Rethrow(&type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression; overload;
    {class} function Throw(value: DNExpression): DNUnaryExpression; overload;
    {class} function Throw(value: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression; overload;
    {class} function Increment(expression: DNExpression): DNUnaryExpression; overload;
    {class} function Increment(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Decrement(expression: DNExpression): DNUnaryExpression; overload;
    {class} function Decrement(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PreIncrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PreIncrementAssign(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PreDecrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PreDecrementAssign(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PostIncrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PostIncrementAssign(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PostDecrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PostDecrementAssign(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNElementInit>): DNListInitExpression; overload;
    {class} function Loop(body: DNExpression): DNLoopExpression; overload;
    {class} function Loop(body: DNExpression; break: DNLabelTarget): DNLoopExpression; overload;
    {class} function Loop(body: DNExpression; break: DNLabelTarget; &continue: DNLabelTarget): DNLoopExpression; overload;
    {class} function Bind(member: DDNC.System.Private.CoreLib.DNMemberInfo; expression: DNExpression): DNMemberAssignment; overload;
    {class} function Bind(propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo; expression: DNExpression): DNMemberAssignment; overload;
    {class} function Field(expression: DNExpression; field: DDNC.System.Private.CoreLib.DNFieldInfo): DNMemberExpression; overload;
    {class} function Field(expression: DNExpression; fieldName: string): DNMemberExpression; overload;
    {class} function Field(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType; fieldName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; propertyName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType; propertyName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; &property: DDNC.System.Private.CoreLib.DNPropertyInfo): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo): DNMemberExpression; overload;
    {class} function PropertyOrField(expression: DNExpression; propertyOrFieldName: string): DNMemberExpression;
    {class} function MakeMemberAccess(expression: DNExpression; member: DDNC.System.Private.CoreLib.DNMemberInfo): DNMemberExpression;
    {class} function MemberInit(newExpression: DNNewExpression; bindings: TArray<DNMemberBinding>): DNMemberInitExpression; overload;
    {class} function MemberInit(newExpression: DNNewExpression; bindings: DDNC.System.Private.CoreLib.DNIEnumerable<DNMemberBinding>): DNMemberInitExpression; overload;
    {class} function ListBind(member: DDNC.System.Private.CoreLib.DNMemberInfo; initializers: TArray<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(member: DDNC.System.Private.CoreLib.DNMemberInfo; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo; initializers: TArray<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNElementInit>): DNMemberListBinding; overload;
    {class} function MemberBind(member: DDNC.System.Private.CoreLib.DNMemberInfo; bindings: TArray<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(member: DDNC.System.Private.CoreLib.DNMemberInfo; bindings: DDNC.System.Private.CoreLib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo; bindings: TArray<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo; bindings: DDNC.System.Private.CoreLib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression; arg4: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; methodName: string; typeArguments: TArray<DDNC.System.Private.CoreLib.DNType>; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(&type: DDNC.System.Private.CoreLib.DNType; methodName: string; typeArguments: TArray<DDNC.System.Private.CoreLib.DNType>; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; indexes: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; indexes: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function NewArrayInit(&type: DDNC.System.Private.CoreLib.DNType; initializers: TArray<DNExpression>): DNNewArrayExpression; overload;
    {class} function NewArrayInit(&type: DDNC.System.Private.CoreLib.DNType; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNNewArrayExpression; overload;
    {class} function NewArrayBounds(&type: DDNC.System.Private.CoreLib.DNType; bounds: TArray<DNExpression>): DNNewArrayExpression; overload;
    {class} function NewArrayBounds(&type: DDNC.System.Private.CoreLib.DNType; bounds: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNNewArrayExpression; overload;
    {class} function New(&constructor: DDNC.System.Private.CoreLib.DNConstructorInfo): DNNewExpression; overload;
    {class} function New(&constructor: DDNC.System.Private.CoreLib.DNConstructorInfo; arguments: TArray<DNExpression>): DNNewExpression; overload;
    {class} function New(&constructor: DDNC.System.Private.CoreLib.DNConstructorInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNNewExpression; overload;
    {class} function New(&constructor: DDNC.System.Private.CoreLib.DNConstructorInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>; members: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNMemberInfo>): DNNewExpression; overload;
    {class} function New(&constructor: DDNC.System.Private.CoreLib.DNConstructorInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>; members: TArray<DDNC.System.Private.CoreLib.DNMemberInfo>): DNNewExpression; overload;
    {class} function New(&type: DDNC.System.Private.CoreLib.DNType): DNNewExpression; overload;
    {class} function Parameter(&type: DDNC.System.Private.CoreLib.DNType): DNParameterExpression; overload;
    {class} function Variable(&type: DDNC.System.Private.CoreLib.DNType): DNParameterExpression; overload;
    {class} function Parameter(&type: DDNC.System.Private.CoreLib.DNType; name: string): DNParameterExpression; overload;
    {class} function Variable(&type: DDNC.System.Private.CoreLib.DNType; name: string): DNParameterExpression; overload;
    {class} function RuntimeVariables(variables: TArray<DNParameterExpression>): DNRuntimeVariablesExpression; overload;
    {class} function RuntimeVariables(variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNRuntimeVariablesExpression; overload;
    {class} function SwitchCase(body: DNExpression; testValues: TArray<DNExpression>): DNSwitchCase; overload;
    {class} function SwitchCase(body: DNExpression; testValues: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNSwitchCase; overload;
    {class} function Switch(switchValue: DNExpression; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; comparison: DDNC.System.Private.CoreLib.DNMethodInfo; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(&type: DDNC.System.Private.CoreLib.DNType; switchValue: DNExpression; defaultBody: DNExpression; comparison: DDNC.System.Private.CoreLib.DNMethodInfo; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; comparison: DDNC.System.Private.CoreLib.DNMethodInfo; cases: DDNC.System.Private.CoreLib.DNIEnumerable<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(&type: DDNC.System.Private.CoreLib.DNType; switchValue: DNExpression; defaultBody: DNExpression; comparison: DDNC.System.Private.CoreLib.DNMethodInfo; cases: DDNC.System.Private.CoreLib.DNIEnumerable<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function SymbolDocument(fileName: string): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDNC.System.Private.CoreLib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDNC.System.Private.CoreLib.DNGuid; languageVendor: DDNC.System.Private.CoreLib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDNC.System.Private.CoreLib.DNGuid; languageVendor: DDNC.System.Private.CoreLib.DNGuid; documentType: DDNC.System.Private.CoreLib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function TryFault(body: DNExpression; fault: DNExpression): DNTryExpression;
    {class} function TryFinally(body: DNExpression; &finally: DNExpression): DNTryExpression;
    {class} function TryCatch(body: DNExpression; handlers: TArray<DNCatchBlock>): DNTryExpression;
    {class} function TryCatchFinally(body: DNExpression; &finally: DNExpression; handlers: TArray<DNCatchBlock>): DNTryExpression;
    {class} function MakeTry(&type: DDNC.System.Private.CoreLib.DNType; body: DNExpression; &finally: DNExpression; fault: DNExpression; handlers: DDNC.System.Private.CoreLib.DNIEnumerable<DNCatchBlock>): DNTryExpression;
    {class} function TypeIs(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNTypeBinaryExpression;
    {class} function TypeEqual(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNTypeBinaryExpression;
    {class} function MakeUnary(unaryType: DNExpressionType; operand: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression; overload;
    {class} function MakeUnary(unaryType: DNExpressionType; operand: DNExpression; &type: DDNC.System.Private.CoreLib.DNType; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Negate(expression: DNExpression): DNUnaryExpression; overload;
    {class} function Negate(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function UnaryPlus(expression: DNExpression): DNUnaryExpression; overload;
    {class} function UnaryPlus(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function NegateChecked(expression: DNExpression): DNUnaryExpression; overload;
    {class} function NegateChecked(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function &Not(expression: DNExpression): DNUnaryExpression; overload;
    {class} function &Not(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function IsFalse(expression: DNExpression): DNUnaryExpression; overload;
    {class} function IsFalse(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function IsTrue(expression: DNExpression): DNUnaryExpression; overload;
    {class} function IsTrue(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function OnesComplement(expression: DNExpression): DNUnaryExpression; overload;
    {class} function OnesComplement(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function TypeAs(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression;
    {class} function Unbox(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression;
    {class} function Convert(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression; overload;
    {class} function Convert(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function ConvertChecked(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression; overload;
    {class} function Block(&type: DDNC.System.Private.CoreLib.DNType; variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>; expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Catch(&type: DDNC.System.Private.CoreLib.DNType; body: DNExpression): DNCatchBlock; overload;
    {class} function Catch(variable: DNParameterExpression; body: DNExpression): DNCatchBlock; overload;
    {class} function Catch(&type: DDNC.System.Private.CoreLib.DNType; body: DNExpression; filter: DNExpression): DNCatchBlock; overload;
    {class} function Catch(variable: DNParameterExpression; body: DNExpression; filter: DNExpression): DNCatchBlock; overload;
    {class} function MakeCatchBlock(&type: DDNC.System.Private.CoreLib.DNType; variable: DNParameterExpression; body: DNExpression; filter: DNExpression): DNCatchBlock;
    {class} function Condition(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression; overload;
    {class} function Condition(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNConditionalExpression; overload;
    {class} function IfThen(test: DNExpression; ifTrue: DNExpression): DNConditionalExpression;
    {class} function IfThenElse(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression;
    {class} function Constant(value: DDNC.System.Private.CoreLib.DNObject): DNConstantExpression; overload;
    {class} function Constant(value: DDNC.System.Private.CoreLib.DNObject; &type: DDNC.System.Private.CoreLib.DNType): DNConstantExpression; overload;
    {class} function DebugInfo(document: DNSymbolDocumentInfo; startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32): DNDebugInfoExpression;
    {class} function ClearDebugInfo(document: DNSymbolDocumentInfo): DNDebugInfoExpression;
    {class} function Empty: DNDefaultExpression;
    {class} function &Default(&type: DDNC.System.Private.CoreLib.DNType): DNDefaultExpression;
    {class} function ElementInit(addMethod: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: TArray<DNExpression>): DNElementInit; overload;
    {class} function ElementInit(addMethod: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNElementInit; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function Break(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; value: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function &Continue(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function &Continue(target: DNLabelTarget; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; value: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; value: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function MakeGoto(kind: DNGotoExpressionKind; target: DNLabelTarget; value: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression;
    {class} function MakeIndex(instance: DNExpression; indexer: DDNC.System.Private.CoreLib.DNPropertyInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNIndexExpression;
    {class} function ArrayAccess(&array: DNExpression; indexes: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function ArrayAccess(&array: DNExpression; indexes: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; propertyName: string; arguments: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; indexer: DDNC.System.Private.CoreLib.DNPropertyInfo; arguments: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; indexer: DDNC.System.Private.CoreLib.DNPropertyInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNIndexExpression; overload;
    {class} function Invoke(expression: DNExpression; arguments: TArray<DNExpression>): DNInvocationExpression; overload;
    {class} function Invoke(expression: DNExpression; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNInvocationExpression; overload;
    {class} function &Label(target: DNLabelTarget): DNLabelExpression; overload;
    {class} function &Label(target: DNLabelTarget; defaultValue: DNExpression): DNLabelExpression; overload;
    {class} function &Label: DNLabelTarget; overload;
    {class} function &Label(name: string): DNLabelTarget; overload;
    {class} function &Label(&type: DDNC.System.Private.CoreLib.DNType): DNLabelTarget; overload;
    {class} function &Label(&type: DDNC.System.Private.CoreLib.DNType; name: string): DNLabelTarget; overload;
    {class} function Lambda(body: DNExpression; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; tailCall: Boolean; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; tailCall: Boolean; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; tailCall: Boolean; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; tailCall: Boolean; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; name: string; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; name: string; tailCall: Boolean; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; name: string; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; name: string; tailCall: Boolean; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function GetFuncType(typeArgs: TArray<DDNC.System.Private.CoreLib.DNType>): DDNC.System.Private.CoreLib.DNType;
    {class} function TryGetFuncType(typeArgs: TArray<DDNC.System.Private.CoreLib.DNType>; out funcType: DDNC.System.Private.CoreLib.DNType): Boolean;
    {class} function GetActionType(typeArgs: TArray<DDNC.System.Private.CoreLib.DNType>): DDNC.System.Private.CoreLib.DNType;
    {class} function TryGetActionType(typeArgs: TArray<DDNC.System.Private.CoreLib.DNType>; out actionType: DDNC.System.Private.CoreLib.DNType): Boolean;
    {class} function GetDelegateType(typeArgs: TArray<DDNC.System.Private.CoreLib.DNType>): DDNC.System.Private.CoreLib.DNType;
    {class} function ListInit(newExpression: DNNewExpression; initializers: TArray<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; addMethod: DDNC.System.Private.CoreLib.DNMethodInfo; initializers: TArray<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; addMethod: DDNC.System.Private.CoreLib.DNMethodInfo; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: TArray<DNElementInit>): DNListInitExpression; overload;
    {class} function Assign(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Equal(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Equal(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ReferenceEqual(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function NotEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function NotEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ReferenceNotEqual(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function GreaterThan(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function GreaterThan(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LessThan(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LessThan(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function GreaterThanOrEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function GreaterThanOrEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LessThanOrEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LessThanOrEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AndAlso(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AndAlso(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function OrElse(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function OrElse(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Coalesce(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Coalesce(left: DNExpression; right: DNExpression; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Add(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Add(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function AddChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Subtract(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Subtract(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function SubtractChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Divide(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Divide(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Modulo(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Modulo(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Multiply(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Multiply(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function MultiplyChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LeftShift(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LeftShift(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function RightShift(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function RightShift(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function &And(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function &And(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function &Or(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function &Or(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOr(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOr(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Power(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Power(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; index: DNExpression): DNBinaryExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression; arg4: DNExpression): DNBlockExpression; overload;
    {class} function Block(expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDNC.System.Private.CoreLib.DNType; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDNC.System.Private.CoreLib.DNType; expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDNC.System.Private.CoreLib.DNType; variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>; expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;

  end;

  [DNTypeName('System.Linq.Expressions.Expression')]
  DNExpression = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C2C7C537-787F-3FE0-80C7-94BD160F0BD8}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNExpression = class(TDNGenericImport<DNExpressionClass, DNExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNBinaryExpressionClass = interface(DNExpressionClass)
  ['{3CB50DF0-3C0A-54B9-903F-545503CAD0D2}']
  end;

  [DNTypeName('System.Linq.Expressions.BinaryExpression')]
  DNBinaryExpression = interface(DNExpression)
  ['{1B39A53D-FD49-3961-8CC1-36AAFA22F56C}']
  { getters & setters } 

    function get_CanReduce: Boolean;
    function get_Right: DNExpression;
    function get_Left: DNExpression;
    function get_Method: DDNC.System.Private.CoreLib.DNMethodInfo;
    function get_Conversion: DNLambdaExpression;
    function get_IsLifted: Boolean;
    function get_IsLiftedToNull: Boolean;
    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function Update(left: DNExpression; conversion: DNLambdaExpression; right: DNExpression): DNBinaryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property CanReduce: Boolean read get_CanReduce;
    property Right: DNExpression read get_Right;
    property Left: DNExpression read get_Left;
    property Method: DDNC.System.Private.CoreLib.DNMethodInfo read get_Method;
    property Conversion: DNLambdaExpression read get_Conversion;
    property IsLifted: Boolean read get_IsLifted;
    property IsLiftedToNull: Boolean read get_IsLiftedToNull;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
  end;

  TDNBinaryExpression = class(TDNGenericImport<DNBinaryExpressionClass, DNBinaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNBlockExpressionClass = interface(DNExpressionClass)
  ['{D704CEEB-72C5-5CBA-97C9-35A2537C834D}']
  end;

  [DNTypeName('System.Linq.Expressions.BlockExpression')]
  DNBlockExpression = interface(DNExpression)
  ['{7C361F0B-5B2D-3C3B-B29F-765CECECB17D}']
  { getters & setters } 

    function get_Expressions: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_Variables: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Result: DNExpression;
    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>; expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNBlockExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Expressions: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Expressions;
    property Variables: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression> read get_Variables;
    property Result: DNExpression read get_Result;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNBlockExpression = class(TDNGenericImport<DNBlockExpressionClass, DNBlockExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNConditionalExpressionClass = interface(DNExpressionClass)
  ['{B46BD6F4-A2C4-575F-B7F2-ACDCAF6A73D0}']
  end;

  [DNTypeName('System.Linq.Expressions.ConditionalExpression')]
  DNConditionalExpression = interface(DNExpression)
  ['{88FE0DE5-78EC-399A-9449-008AB53648CC}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_Test: DNExpression;
    function get_IfTrue: DNExpression;
    function get_IfFalse: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property Test: DNExpression read get_Test;
    property IfTrue: DNExpression read get_IfTrue;
    property IfFalse: DNExpression read get_IfFalse;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNConditionalExpression = class(TDNGenericImport<DNConditionalExpressionClass, DNConditionalExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNConstantExpressionClass = interface(DNExpressionClass)
  ['{BFB4A359-2F2A-51F5-AD0E-AC2112FB62BF}']
  end;

  [DNTypeName('System.Linq.Expressions.ConstantExpression')]
  DNConstantExpression = interface(DNExpression)
  ['{10FA2CFB-5FC8-3638-9569-C55CEF940A5F}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNConstantExpression = class(TDNGenericImport<DNConstantExpressionClass, DNConstantExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDebugInfoExpressionClass = interface(DNExpressionClass)
  ['{336FBC6D-9FA8-531D-82E5-195ADA492B30}']
  end;

  [DNTypeName('System.Linq.Expressions.DebugInfoExpression')]
  DNDebugInfoExpression = interface(DNExpression)
  ['{16D988F8-8276-34C3-96E6-FD684A6342BD}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_StartLine: Int32;
    function get_StartColumn: Int32;
    function get_EndLine: Int32;
    function get_EndColumn: Int32;
    function get_Document: DNSymbolDocumentInfo;
    function get_IsClear: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property StartLine: Int32 read get_StartLine;
    property StartColumn: Int32 read get_StartColumn;
    property EndLine: Int32 read get_EndLine;
    property EndColumn: Int32 read get_EndColumn;
    property Document: DNSymbolDocumentInfo read get_Document;
    property IsClear: Boolean read get_IsClear;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDebugInfoExpression = class(TDNGenericImport<DNDebugInfoExpressionClass, DNDebugInfoExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDefaultExpressionClass = interface(DNExpressionClass)
  ['{4773E218-E04A-56CD-A2C9-4424AA8D558A}']
  end;

  [DNTypeName('System.Linq.Expressions.DefaultExpression')]
  DNDefaultExpression = interface(DNExpression)
  ['{360DF5B5-25BE-3AEB-A7DD-0BD35153F643}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDefaultExpression = class(TDNGenericImport<DNDefaultExpressionClass, DNDefaultExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDynamicExpressionClass = interface(DNExpressionClass)
  ['{975FED47-5B77-5912-A2ED-57F1D0ACD827}']
  { static methods } 

    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;

  end;

  [DNTypeName('System.Linq.Expressions.DynamicExpression')]
  DNDynamicExpression = interface(DNExpression)
  ['{9C98E587-F329-302E-BA41-98AA71CC8545}']
  { getters & setters } 

    function get_CanReduce: Boolean;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Binder: DNCallSiteBinder;
    function get_DelegateType: DDNC.System.Private.CoreLib.DNType;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;

  { methods } 

    function Reduce: DNExpression;
    function Update(arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNDynamicExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property CanReduce: Boolean read get_CanReduce;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Binder: DNCallSiteBinder read get_Binder;
    property DelegateType: DDNC.System.Private.CoreLib.DNType read get_DelegateType;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
  end;

  TDNDynamicExpression = class(TDNGenericImport<DNDynamicExpressionClass, DNDynamicExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNGotoExpressionClass = interface(DNExpressionClass)
  ['{883F9617-761D-531D-BDF1-6BC7F7258970}']
  end;

  [DNTypeName('System.Linq.Expressions.GotoExpression')]
  DNGotoExpression = interface(DNExpression)
  ['{7E0BF5A5-97CB-38D7-A54E-A20139E368D6}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Value: DNExpression;
    function get_Target: DNLabelTarget;
    function get_Kind: DNGotoExpressionKind;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(target: DNLabelTarget; value: DNExpression): DNGotoExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Value: DNExpression read get_Value;
    property Target: DNLabelTarget read get_Target;
    property Kind: DNGotoExpressionKind read get_Kind;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNGotoExpression = class(TDNGenericImport<DNGotoExpressionClass, DNGotoExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNIndexExpressionClass = interface(DNExpressionClass)
  ['{0CC9E2E4-9448-5A19-9AB6-B1AA0421EA96}']
  end;

  [DNTypeName('System.Linq.Expressions.IndexExpression')]
  DNIndexExpression = interface(DNExpression)
  ['{5A0C6EC7-2CA3-393D-B00E-EEE8C6458A3F}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_Object: DNExpression;
    function get_Indexer: DDNC.System.Private.CoreLib.DNPropertyInfo;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_ArgumentCount: Int32;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(&object: DNExpression; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNIndexExpression;
    function GetArgument(index: Int32): DNExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property &Object: DNExpression read get_Object;
    property Indexer: DDNC.System.Private.CoreLib.DNPropertyInfo read get_Indexer;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property ArgumentCount: Int32 read get_ArgumentCount;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNIndexExpression = class(TDNGenericImport<DNIndexExpressionClass, DNIndexExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNInvocationExpressionClass = interface(DNExpressionClass)
  ['{7875EA2A-A52D-500C-AB02-CD2195A9F0EB}']
  end;

  [DNTypeName('System.Linq.Expressions.InvocationExpression')]
  DNInvocationExpression = interface(DNExpression)
  ['{C32FD9D7-6444-3A78-A282-9543FCE0E157}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Expression: DNExpression;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_ArgumentCount: Int32;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNInvocationExpression;
    function GetArgument(index: Int32): DNExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Expression: DNExpression read get_Expression;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property ArgumentCount: Int32 read get_ArgumentCount;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNInvocationExpression = class(TDNGenericImport<DNInvocationExpressionClass, DNInvocationExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLabelExpressionClass = interface(DNExpressionClass)
  ['{FAF51505-346F-5B14-8C44-83E1E2C0E8E4}']
  end;

  [DNTypeName('System.Linq.Expressions.LabelExpression')]
  DNLabelExpression = interface(DNExpression)
  ['{FBFECB81-F151-3579-A8CB-DD99EBB0FC12}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Target: DNLabelTarget;
    function get_DefaultValue: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(target: DNLabelTarget; defaultValue: DNExpression): DNLabelExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Target: DNLabelTarget read get_Target;
    property DefaultValue: DNExpression read get_DefaultValue;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLabelExpression = class(TDNGenericImport<DNLabelExpressionClass, DNLabelExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLambdaExpressionClass = interface(DNExpressionClass)
  ['{1039534C-23D1-5CE8-8980-9215D22B6194}']
  end;

  [DNTypeName('System.Linq.Expressions.LambdaExpression')]
  DNLambdaExpression = interface(DNExpression)
  ['{66BF7C54-87F8-3945-8974-E6CF91210933}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Name: string;
    function get_Body: DNExpression;
    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_TailCall: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Compile: DDNC.System.Private.CoreLib.DNDelegate; overload;
    function Compile(preferInterpretation: Boolean): DDNC.System.Private.CoreLib.DNDelegate; overload;
    function Compile(debugInfoGenerator: DNDebugInfoGenerator): DDNC.System.Private.CoreLib.DNDelegate; overload;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression> read get_Parameters;
    property Name: string read get_Name;
    property Body: DNExpression read get_Body;
    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property TailCall: Boolean read get_TailCall;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLambdaExpression = class(TDNGenericImport<DNLambdaExpressionClass, DNLambdaExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionClass<TDelegate> = interface(DNLambdaExpressionClass)
  ['{FFE9A4E0-53C6-508B-ACBD-91F8A7AC9C8D}']
  end;

  [DNTypeName('System.Linq.Expressions.Expression`1')]
  DNExpression<TDelegate> = interface(DNLambdaExpression)
  ['{F233E230-C436-359D-B48C-33040F863E48}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Name: string;
    function get_Body: DNExpression;
    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_TailCall: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Compile: TDelegate; overload;
    function Compile(preferInterpretation: Boolean): TDelegate; overload;
    function Update(body: DNExpression; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNExpression<TDelegate>;
    function Compile(debugInfoGenerator: DNDebugInfoGenerator): TDelegate; overload;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression> read get_Parameters;
    property Name: string read get_Name;
    property Body: DNExpression read get_Body;
    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property TailCall: Boolean read get_TailCall;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNExpression<TDelegate> = class(TDNGenericImport<DNExpressionClass<TDelegate>, DNExpression<TDelegate>>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNListInitExpressionClass = interface(DNExpressionClass)
  ['{3D6348FF-F906-564F-BA77-E229554385F1}']
  end;

  [DNTypeName('System.Linq.Expressions.ListInitExpression')]
  DNListInitExpression = interface(DNExpression)
  ['{1AFC5A55-8AA4-3A63-A85F-F3CDD3CDC5BE}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;
    function get_NewExpression: DNNewExpression;
    function get_Initializers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNElementInit>;

  { methods } 

    function Reduce: DNExpression;
    function Update(newExpression: DNNewExpression; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNElementInit>): DNListInitExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
    property NewExpression: DNNewExpression read get_NewExpression;
    property Initializers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNElementInit> read get_Initializers;
  end;

  TDNListInitExpression = class(TDNGenericImport<DNListInitExpressionClass, DNListInitExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLoopExpressionClass = interface(DNExpressionClass)
  ['{2AA35F01-DCB5-5EFF-8111-6186B0B7BF81}']
  end;

  [DNTypeName('System.Linq.Expressions.LoopExpression')]
  DNLoopExpression = interface(DNExpression)
  ['{54D94553-8F09-3755-AD06-FE2BFE196C24}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Body: DNExpression;
    function get_BreakLabel: DNLabelTarget;
    function get_ContinueLabel: DNLabelTarget;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(breakLabel: DNLabelTarget; continueLabel: DNLabelTarget; body: DNExpression): DNLoopExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Body: DNExpression read get_Body;
    property BreakLabel: DNLabelTarget read get_BreakLabel;
    property ContinueLabel: DNLabelTarget read get_ContinueLabel;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLoopExpression = class(TDNGenericImport<DNLoopExpressionClass, DNLoopExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberExpressionClass = interface(DNExpressionClass)
  ['{ABBA7AF7-485F-500A-BE18-A3E645DE7D7B}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberExpression')]
  DNMemberExpression = interface(DNExpression)
  ['{168E8BCA-ED53-326B-8FC8-D38E7B046504}']
  { getters & setters } 

    function get_Member: DDNC.System.Private.CoreLib.DNMemberInfo;
    function get_Expression: DNExpression;
    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression): DNMemberExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Member: DDNC.System.Private.CoreLib.DNMemberInfo read get_Member;
    property Expression: DNExpression read get_Expression;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNMemberExpression = class(TDNGenericImport<DNMemberExpressionClass, DNMemberExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberInitExpressionClass = interface(DNExpressionClass)
  ['{5AE65936-0194-525C-A76A-1343B19E089A}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberInitExpression')]
  DNMemberInitExpression = interface(DNExpression)
  ['{C8EBD323-4913-33A5-8C6C-7E6FD09C7641}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;
    function get_NodeType: DNExpressionType;
    function get_NewExpression: DNNewExpression;
    function get_Bindings: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNMemberBinding>;

  { methods } 

    function Reduce: DNExpression;
    function Update(newExpression: DNNewExpression; bindings: DDNC.System.Private.CoreLib.DNIEnumerable<DNMemberBinding>): DNMemberInitExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
    property NodeType: DNExpressionType read get_NodeType;
    property NewExpression: DNNewExpression read get_NewExpression;
    property Bindings: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNMemberBinding> read get_Bindings;
  end;

  TDNMemberInitExpression = class(TDNGenericImport<DNMemberInitExpressionClass, DNMemberInitExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMethodCallExpressionClass = interface(DNExpressionClass)
  ['{8475D7C8-9C4A-59DB-B862-19981728C561}']
  end;

  [DNTypeName('System.Linq.Expressions.MethodCallExpression')]
  DNMethodCallExpression = interface(DNExpression)
  ['{892D2631-95E9-301D-BCD3-F216B1E3CCB1}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_Method: DDNC.System.Private.CoreLib.DNMethodInfo;
    function get_Object: DNExpression;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_ArgumentCount: Int32;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(&object: DNExpression; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNMethodCallExpression;
    function GetArgument(index: Int32): DNExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property Method: DDNC.System.Private.CoreLib.DNMethodInfo read get_Method;
    property &Object: DNExpression read get_Object;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property ArgumentCount: Int32 read get_ArgumentCount;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNMethodCallExpression = class(TDNGenericImport<DNMethodCallExpressionClass, DNMethodCallExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNNewArrayExpressionClass = interface(DNExpressionClass)
  ['{A735C6F0-4E0F-5E52-AC5B-AD2F4536C40C}']
  end;

  [DNTypeName('System.Linq.Expressions.NewArrayExpression')]
  DNNewArrayExpression = interface(DNExpression)
  ['{F123DE12-9B1A-34C9-B009-FD01A19E06B0}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_Expressions: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNNewArrayExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property Expressions: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Expressions;
    property NodeType: DNExpressionType read get_NodeType;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNNewArrayExpression = class(TDNGenericImport<DNNewArrayExpressionClass, DNNewArrayExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNNewExpressionClass = interface(DNExpressionClass)
  ['{2D2BA088-477A-5730-8C67-0276FC5B489C}']
  end;

  [DNTypeName('System.Linq.Expressions.NewExpression')]
  DNNewExpression = interface(DNExpression)
  ['{110B01E9-735F-3A6D-ACF8-CB497BB8D0B1}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Constructor: DDNC.System.Private.CoreLib.DNConstructorInfo;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_ArgumentCount: Int32;
    function get_Members: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DDNC.System.Private.CoreLib.DNMemberInfo>;
    function get_CanReduce: Boolean;

  { methods } 

    function GetArgument(index: Int32): DNExpression;
    function Update(arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNNewExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property &Constructor: DDNC.System.Private.CoreLib.DNConstructorInfo read get_Constructor;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property ArgumentCount: Int32 read get_ArgumentCount;
    property Members: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DDNC.System.Private.CoreLib.DNMemberInfo> read get_Members;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNNewExpression = class(TDNGenericImport<DNNewExpressionClass, DNNewExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNParameterExpressionClass = interface(DNExpressionClass)
  ['{75EBA8D6-18E6-5E92-A6B8-52B9088C162D}']
  end;

  [DNTypeName('System.Linq.Expressions.ParameterExpression')]
  DNParameterExpression = interface(DNExpression)
  ['{F76FE6BE-D0C2-3A4B-9DDD-8AD963366C7B}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Name: string;
    function get_IsByRef: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Name: string read get_Name;
    property IsByRef: Boolean read get_IsByRef;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNParameterExpression = class(TDNGenericImport<DNParameterExpressionClass, DNParameterExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNRuntimeVariablesExpressionClass = interface(DNExpressionClass)
  ['{CB3A768B-B1D2-54AD-9D66-C77372913269}']
  end;

  [DNTypeName('System.Linq.Expressions.RuntimeVariablesExpression')]
  DNRuntimeVariablesExpression = interface(DNExpression)
  ['{4ECFEF9C-61F3-384D-9B45-E912E90DE195}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Variables: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNRuntimeVariablesExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Variables: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression> read get_Variables;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNRuntimeVariablesExpression = class(TDNGenericImport<DNRuntimeVariablesExpressionClass, DNRuntimeVariablesExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSwitchExpressionClass = interface(DNExpressionClass)
  ['{C414F4B7-9B2F-5C06-B76E-7E29553E31B8}']
  end;

  [DNTypeName('System.Linq.Expressions.SwitchExpression')]
  DNSwitchExpression = interface(DNExpression)
  ['{141430B4-53C8-38FA-86B6-8AF7EB141D54}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_SwitchValue: DNExpression;
    function get_Cases: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNSwitchCase>;
    function get_DefaultBody: DNExpression;
    function get_Comparison: DDNC.System.Private.CoreLib.DNMethodInfo;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(switchValue: DNExpression; cases: DDNC.System.Private.CoreLib.DNIEnumerable<DNSwitchCase>; defaultBody: DNExpression): DNSwitchExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property SwitchValue: DNExpression read get_SwitchValue;
    property Cases: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNSwitchCase> read get_Cases;
    property DefaultBody: DNExpression read get_DefaultBody;
    property Comparison: DDNC.System.Private.CoreLib.DNMethodInfo read get_Comparison;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNSwitchExpression = class(TDNGenericImport<DNSwitchExpressionClass, DNSwitchExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNTryExpressionClass = interface(DNExpressionClass)
  ['{57C2E550-96ED-5998-903F-C55294C86F13}']
  end;

  [DNTypeName('System.Linq.Expressions.TryExpression')]
  DNTryExpression = interface(DNExpression)
  ['{68A98233-7F1A-3A64-98E8-3678EEE9BC28}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Body: DNExpression;
    function get_Handlers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNCatchBlock>;
    function get_Finally: DNExpression;
    function get_Fault: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(body: DNExpression; handlers: DDNC.System.Private.CoreLib.DNIEnumerable<DNCatchBlock>; &finally: DNExpression; fault: DNExpression): DNTryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Body: DNExpression read get_Body;
    property Handlers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNCatchBlock> read get_Handlers;
    property &Finally: DNExpression read get_Finally;
    property Fault: DNExpression read get_Fault;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNTryExpression = class(TDNGenericImport<DNTryExpressionClass, DNTryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNTypeBinaryExpressionClass = interface(DNExpressionClass)
  ['{0711EDFD-A2D2-5838-9764-6C4E485BF8D1}']
  end;

  [DNTypeName('System.Linq.Expressions.TypeBinaryExpression')]
  DNTypeBinaryExpression = interface(DNExpression)
  ['{6317EEA2-F306-37FF-81BD-3560875A398C}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Expression: DNExpression;
    function get_TypeOperand: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression): DNTypeBinaryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Expression: DNExpression read get_Expression;
    property TypeOperand: DDNC.System.Private.CoreLib.DNType read get_TypeOperand;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNTypeBinaryExpression = class(TDNGenericImport<DNTypeBinaryExpressionClass, DNTypeBinaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNUnaryExpressionClass = interface(DNExpressionClass)
  ['{864AC59A-DEBD-52ED-82B7-58A7C1439F07}']
  end;

  [DNTypeName('System.Linq.Expressions.UnaryExpression')]
  DNUnaryExpression = interface(DNExpression)
  ['{281C282C-F87A-3DFA-B787-E7CEC4F6D667}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Operand: DNExpression;
    function get_Method: DDNC.System.Private.CoreLib.DNMethodInfo;
    function get_IsLifted: Boolean;
    function get_IsLiftedToNull: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function Update(operand: DNExpression): DNUnaryExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Operand: DNExpression read get_Operand;
    property Method: DDNC.System.Private.CoreLib.DNMethodInfo read get_Method;
    property IsLifted: Boolean read get_IsLifted;
    property IsLiftedToNull: Boolean read get_IsLiftedToNull;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNUnaryExpression = class(TDNGenericImport<DNUnaryExpressionClass, DNUnaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionVisitorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{CB0023CA-DEC7-5885-A503-A9AEF151176D}']
  end;

  [DNTypeName('System.Linq.Expressions.ExpressionVisitor')]
  DNExpressionVisitor = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C09E6203-9803-392C-9E2E-3111A1065F27}']
  { methods } 

    function Visit(node: DNExpression): DNExpression; overload;
    function Visit(nodes: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>): DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNExpressionVisitor = class(TDNGenericImport<DNExpressionVisitorClass, DNExpressionVisitor>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDynamicExpressionVisitorClass = interface(DNExpressionVisitorClass)
  ['{9387CA90-AEAC-57BB-9C91-88F54F99437D}']
  { constructors } 

    {class} function init: DNDynamicExpressionVisitor;

  end;

  [DNTypeName('System.Linq.Expressions.DynamicExpressionVisitor')]
  DNDynamicExpressionVisitor = interface(DNExpressionVisitor)
  ['{0A663504-6460-35AF-B83F-437FF3405E3C}']
  { methods } 

    function Visit(node: DNExpression): DNExpression; overload;
    function Visit(nodes: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>): DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNDynamicExpressionVisitor = class(TDNGenericImport<DNDynamicExpressionVisitorClass, DNDynamicExpressionVisitor>) end;

  //-------------namespace: System.Linq.Expressions.Interpreter----------------
  DNLightLambdaClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F14AF800-F95B-5844-B393-E546B1D8AFA2}']
  end;

  [DNTypeName('System.Linq.Expressions.Interpreter.LightLambda')]
  DNLightLambda = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6F73E1B5-07EF-3351-AEF2-E26979088C1A}']
  { methods } 

    function Run(arguments: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNObject;
    function RunVoid(arguments: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNLightLambda = class(TDNGenericImport<DNLightLambdaClass, DNLightLambda>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLabelTargetClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D17503BA-AD3D-51CE-9C0D-6E711313DB6D}']
  end;

  [DNTypeName('System.Linq.Expressions.LabelTarget')]
  DNLabelTarget = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6F1C8476-6F37-3379-B310-6F3318E2BFE5}']
  { getters & setters } 

    function get_Name: string;
    function get_Type: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
  end;

  TDNLabelTarget = class(TDNGenericImport<DNLabelTargetClass, DNLabelTarget>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberBindingClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2AE9AF0D-AEE3-54DD-BE30-00326F9E5312}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberBinding')]
  DNMemberBinding = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{948186AE-F115-3F9F-BCFF-C4192D591A90}']
  { getters & setters } 

    function get_BindingType: DNMemberBindingType;
    function get_Member: DDNC.System.Private.CoreLib.DNMemberInfo;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDNC.System.Private.CoreLib.DNMemberInfo read get_Member;
  end;

  TDNMemberBinding = class(TDNGenericImport<DNMemberBindingClass, DNMemberBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberAssignmentClass = interface(DNMemberBindingClass)
  ['{C69BBC8E-77E4-5FD2-8E07-1ADADECF5804}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberAssignment')]
  DNMemberAssignment = interface(DNMemberBinding)
  ['{62C3005D-182D-3A31-A2EE-AF0080B326D9}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDNC.System.Private.CoreLib.DNMemberInfo;

  { methods } 

    function Update(expression: DNExpression): DNMemberAssignment;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDNC.System.Private.CoreLib.DNMemberInfo read get_Member;
  end;

  TDNMemberAssignment = class(TDNGenericImport<DNMemberAssignmentClass, DNMemberAssignment>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberListBindingClass = interface(DNMemberBindingClass)
  ['{7F4137F3-3E80-5A04-BEFB-19FFE34A91EE}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberListBinding')]
  DNMemberListBinding = interface(DNMemberBinding)
  ['{8E1614AC-68FB-3DC2-A3DA-63698BFCB845}']
  { getters & setters } 

    function get_Initializers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNElementInit>;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDNC.System.Private.CoreLib.DNMemberInfo;

  { methods } 

    function Update(initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNElementInit>): DNMemberListBinding;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Initializers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNElementInit> read get_Initializers;
    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDNC.System.Private.CoreLib.DNMemberInfo read get_Member;
  end;

  TDNMemberListBinding = class(TDNGenericImport<DNMemberListBindingClass, DNMemberListBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberMemberBindingClass = interface(DNMemberBindingClass)
  ['{A1D21A98-576D-51B9-A230-984281BD383D}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberMemberBinding')]
  DNMemberMemberBinding = interface(DNMemberBinding)
  ['{3D635F7A-4A93-381C-A49A-5FBB1D140590}']
  { getters & setters } 

    function get_Bindings: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNMemberBinding>;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDNC.System.Private.CoreLib.DNMemberInfo;

  { methods } 

    function Update(bindings: DDNC.System.Private.CoreLib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Bindings: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNMemberBinding> read get_Bindings;
    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDNC.System.Private.CoreLib.DNMemberInfo read get_Member;
  end;

  TDNMemberMemberBinding = class(TDNGenericImport<DNMemberMemberBindingClass, DNMemberMemberBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSwitchCaseClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{CD9855F1-28A0-5BA6-BC35-EC9BE4E27455}']
  end;

  [DNTypeName('System.Linq.Expressions.SwitchCase')]
  DNSwitchCase = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A1684203-3199-38BA-864A-3BA38BEB6B7E}']
  { getters & setters } 

    function get_TestValues: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_Body: DNExpression;

  { methods } 

    function ToString: string;
    function Update(testValues: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>; body: DNExpression): DNSwitchCase;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TestValues: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_TestValues;
    property Body: DNExpression read get_Body;
  end;

  TDNSwitchCase = class(TDNGenericImport<DNSwitchCaseClass, DNSwitchCase>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSymbolDocumentInfoClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E27B1390-3E96-56E8-ADE1-63A6EB2938B7}']
  end;

  [DNTypeName('System.Linq.Expressions.SymbolDocumentInfo')]
  DNSymbolDocumentInfo = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{01E9EFAF-F30A-3B80-942C-2C0772EA1AAE}']
  { getters & setters } 

    function get_FileName: string;
    function get_Language: DDNC.System.Private.CoreLib.DNGuid;
    function get_LanguageVendor: DDNC.System.Private.CoreLib.DNGuid;
    function get_DocumentType: DDNC.System.Private.CoreLib.DNGuid;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property FileName: string read get_FileName;
    property Language: DDNC.System.Private.CoreLib.DNGuid read get_Language;
    property LanguageVendor: DDNC.System.Private.CoreLib.DNGuid read get_LanguageVendor;
    property DocumentType: DDNC.System.Private.CoreLib.DNGuid read get_DocumentType;
  end;

  TDNSymbolDocumentInfo = class(TDNGenericImport<DNSymbolDocumentInfoClass, DNSymbolDocumentInfo>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{51ABD460-44C7-5D1A-95EA-F54C5F1A4B1F}']
  { static methods } 

    {class} function Create(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder): DNCallSite;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSite')]
  DNCallSite = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7F98D504-EA9D-38B8-A1C3-524CDE5B6E84}']
  { getters & setters } 

    function get_Binder: DNCallSiteBinder;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Binder: DNCallSiteBinder read get_Binder;
  end;

  TDNCallSite = class(TDNGenericImport<DNCallSiteClass, DNCallSite>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteClass<T> = interface(DNCallSiteClass)
  ['{1BB3184C-9B48-5974-AD1C-9BA96AA9E431}']
  { static methods } 

    {class} function Create(binder: DNCallSiteBinder): DNCallSite<T>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSite`1')]
  DNCallSite<T> = interface(DNCallSite)
  ['{B3DDBF7A-3406-3E5B-8B15-1BFB70937E8C}']
  { getters & setters } 

    function get_Update: T;
    function get_Binder: DNCallSiteBinder;

  { fields getter & setter } 

   function __fakeFieldGet_Target: T;
   procedure __fakeFieldSet_Target(value: T);

  { fields } 

   property Target: T read __fakeFieldGet_Target write __fakeFieldSet_Target;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Update: T read get_Update;
    property Binder: DNCallSiteBinder read get_Binder;
  end;

  TDNCallSite<T> = class(TDNGenericImport<DNCallSiteClass<T>, DNCallSite<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteBinderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2B40F709-31B4-5B6F-A7DA-853278E72EB1}']
  { static getter & setter } 

    {class} function get_UpdateLabel: DNLabelTarget;

  { static propertys } 

    {class} property UpdateLabel: DNLabelTarget read get_UpdateLabel;
  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSiteBinder')]
  DNCallSiteBinder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{4CEC5C94-1462-3EAD-ABE5-A515952A5CCA}']
  { methods } 

    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNCallSiteBinder = class(TDNGenericImport<DNCallSiteBinderClass, DNCallSiteBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicMetaObjectBinderClass = interface(DNCallSiteBinderClass)
  ['{D63CB033-607E-5422-BB55-8EA184583890}']
  end;

  [DNTypeName('System.Dynamic.DynamicMetaObjectBinder')]
  DNDynamicMetaObjectBinder = interface(DNCallSiteBinder)
  ['{8FFF1DDC-1DDC-3483-B959-F97DC9FCAA41}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
  end;

  TDNDynamicMetaObjectBinder = class(TDNGenericImport<DNDynamicMetaObjectBinderClass, DNDynamicMetaObjectBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNBinaryOperationBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{714A26FB-AF69-5644-8D7B-A291C5B19E25}']
  end;

  [DNTypeName('System.Dynamic.BinaryOperationBinder')]
  DNBinaryOperationBinder = interface(DNDynamicMetaObjectBinder)
  ['{F0330FA4-7238-3B11-ADB7-E27E13DBBECB}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_Operation: DNExpressionType;

  { methods } 

    function FallbackBinaryOperation(target: DNDynamicMetaObject; arg: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackBinaryOperation(target: DNDynamicMetaObject; arg: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property Operation: DNExpressionType read get_Operation;
  end;

  TDNBinaryOperationBinder = class(TDNGenericImport<DNBinaryOperationBinderClass, DNBinaryOperationBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNConvertBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{65C9F185-8F48-5009-89C0-D53AEA595B35}']
  end;

  [DNTypeName('System.Dynamic.ConvertBinder')]
  DNConvertBinder = interface(DNDynamicMetaObjectBinder)
  ['{BB1D2D2E-4AAE-3CFF-B636-5F43FC9569A9}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_Explicit: Boolean;
    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function FallbackConvert(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackConvert(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property Explicit: Boolean read get_Explicit;
    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
  end;

  TDNConvertBinder = class(TDNGenericImport<DNConvertBinderClass, DNConvertBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNCreateInstanceBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{7B530495-C595-5DC1-AFBE-2DD41CBF0C2D}']
  end;

  [DNTypeName('System.Dynamic.CreateInstanceBinder')]
  DNCreateInstanceBinder = interface(DNDynamicMetaObjectBinder)
  ['{5E65365D-2AB9-3EFC-B645-231768F16F63}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackCreateInstance(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackCreateInstance(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNCreateInstanceBinder = class(TDNGenericImport<DNCreateInstanceBinderClass, DNCreateInstanceBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDeleteIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{8F70F9AF-E37B-5605-8911-B1E47CFFCFEB}']
  end;

  [DNTypeName('System.Dynamic.DeleteIndexBinder')]
  DNDeleteIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{CE3D3FA2-8126-30B2-BFD7-04841ECF22CF}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackDeleteIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackDeleteIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNDeleteIndexBinder = class(TDNGenericImport<DNDeleteIndexBinderClass, DNDeleteIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDeleteMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{B0A5AB8C-AFAA-58C1-A457-038D3BDDC6D5}']
  end;

  [DNTypeName('System.Dynamic.DeleteMemberBinder')]
  DNDeleteMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{7BCF887E-1F2B-3717-9ECE-746C5A9A5433}']
  { getters & setters } 

    function get_Name: string;
    function get_IgnoreCase: Boolean;
    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function FallbackDeleteMember(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackDeleteMember(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
  end;

  TDNDeleteMemberBinder = class(TDNGenericImport<DNDeleteMemberBinderClass, DNDeleteMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNGetIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{138CC6B9-504B-52E2-BF3D-C1846A80CE6D}']
  end;

  [DNTypeName('System.Dynamic.GetIndexBinder')]
  DNGetIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{9AA49543-E1EE-3EBE-A701-F2551BF87389}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackGetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackGetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNGetIndexBinder = class(TDNGenericImport<DNGetIndexBinderClass, DNGetIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNGetMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{B91C8027-3FE4-55EA-B5BD-0CF91712EA85}']
  end;

  [DNTypeName('System.Dynamic.GetMemberBinder')]
  DNGetMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{8D5F01B4-D45B-3264-B531-9D5EEDFA478E}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;

  { methods } 

    function FallbackGetMember(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackGetMember(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
  end;

  TDNGetMemberBinder = class(TDNGenericImport<DNGetMemberBinderClass, DNGetMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNInvokeBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{3C7AC1ED-7706-59C9-80F9-F30DB7C3C56D}']
  end;

  [DNTypeName('System.Dynamic.InvokeBinder')]
  DNInvokeBinder = interface(DNDynamicMetaObjectBinder)
  ['{83289858-9E67-3AD5-986E-C59856EEBF48}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNInvokeBinder = class(TDNGenericImport<DNInvokeBinderClass, DNInvokeBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNInvokeMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{B9715A6C-DA94-5700-B860-E8E9156A9529}']
  end;

  [DNTypeName('System.Dynamic.InvokeMemberBinder')]
  DNInvokeMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{2C87BEA9-479C-3B07-9CFF-721326EE2B50}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackInvokeMember(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackInvokeMember(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNInvokeMemberBinder = class(TDNGenericImport<DNInvokeMemberBinderClass, DNInvokeMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNSetIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{A3A16BE9-3BEC-56C3-9A84-47BAAE5EAE78}']
  end;

  [DNTypeName('System.Dynamic.SetIndexBinder')]
  DNSetIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{9A672BC1-7C96-3E03-893D-0CA0702555CA}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackSetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackSetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNSetIndexBinder = class(TDNGenericImport<DNSetIndexBinderClass, DNSetIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNSetMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{8B75321F-8244-5EFE-84EE-084A9D2CA8FF}']
  end;

  [DNTypeName('System.Dynamic.SetMemberBinder')]
  DNSetMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{AA6F23E7-9964-3721-B2F8-11D785788E6B}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackSetMember(target: DNDynamicMetaObject; value: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackSetMember(target: DNDynamicMetaObject; value: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
  end;

  TDNSetMemberBinder = class(TDNGenericImport<DNSetMemberBinderClass, DNSetMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNUnaryOperationBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{81FC8457-8B6B-5A5D-9F71-28B610516446}']
  end;

  [DNTypeName('System.Dynamic.UnaryOperationBinder')]
  DNUnaryOperationBinder = interface(DNDynamicMetaObjectBinder)
  ['{78D4380B-B50E-3102-A183-A7F070C947C7}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_Operation: DNExpressionType;

  { methods } 

    function FallbackUnaryOperation(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackUnaryOperation(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property Operation: DNExpressionType read get_Operation;
  end;

  TDNUnaryOperationBinder = class(TDNGenericImport<DNUnaryOperationBinderClass, DNUnaryOperationBinder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteHelpersClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D10D7C36-9851-5154-9BA9-7D21ACAB1F04}']
  { static methods } 

    {class} function IsInternalFrame(mb: DDNC.System.Private.CoreLib.DNMethodBase): Boolean;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSiteHelpers')]
  DNCallSiteHelpers = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{AF7FE2F3-9294-3C27-902C-02EF46C161B9}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNCallSiteHelpers = class(TDNGenericImport<DNCallSiteHelpersClass, DNCallSiteHelpers>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteOpsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{6BD78AA3-B29D-5B9E-8A33-6437C36F1350}']
  { static methods } 

    {class} function SetNotMatched(site: DNCallSite): Boolean;
    {class} function GetMatch(site: DNCallSite): Boolean;
    {class} procedure ClearMatch(site: DNCallSite);

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSiteOps')]
  DNCallSiteOps = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{385B5F8D-8D28-39CB-9B49-0775986146C2}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNCallSiteOps = class(TDNGenericImport<DNCallSiteOpsClass, DNCallSiteOps>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNClosureClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{5377C544-26F5-509A-9BFD-689BF40F1F74}']
  { constructors } 

    {class} function init(constants: TArray<DDNC.System.Private.CoreLib.DNObject>; locals: TArray<DDNC.System.Private.CoreLib.DNObject>): DNClosure;

  { static fields getter & setter } 

   function __fakeFieldGet_Constants: TArray<DDNC.System.Private.CoreLib.DNObject>;
   function __fakeFieldGet_Locals: TArray<DDNC.System.Private.CoreLib.DNObject>;

  { static fields } 

    {class} property Constants: TArray<DDNC.System.Private.CoreLib.DNObject> read __fakeFieldGet_Constants;
    {class} property Locals: TArray<DDNC.System.Private.CoreLib.DNObject> read __fakeFieldGet_Locals;

  end;

  [DNTypeName('System.Runtime.CompilerServices.Closure')]
  DNClosure = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{925245E6-223C-3DE9-ABE6-2C20559FB881}']
  { fields getter & setter } 

   function __fakeFieldGet_Constants: TArray<DDNC.System.Private.CoreLib.DNObject>;
   function __fakeFieldGet_Locals: TArray<DDNC.System.Private.CoreLib.DNObject>;

  { fields } 

   property Constants: TArray<DDNC.System.Private.CoreLib.DNObject> read __fakeFieldGet_Constants;
   property Locals: TArray<DDNC.System.Private.CoreLib.DNObject> read __fakeFieldGet_Locals;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNClosure = class(TDNGenericImport<DNClosureClass, DNClosure>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDebugInfoGeneratorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{AD4C21FB-B10E-5417-BC61-AC0047D54440}']
  { static methods } 

    {class} function CreatePdbGenerator: DNDebugInfoGenerator;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DebugInfoGenerator')]
  DNDebugInfoGenerator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{5A996D8F-2C1C-3A92-8CB6-5496B66916C4}']
  { methods } 

    procedure MarkSequencePoint(method: DNLambdaExpression; ilOffset: Int32; sequencePoint: DNDebugInfoExpression);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNDebugInfoGenerator = class(TDNGenericImport<DNDebugInfoGeneratorClass, DNDebugInfoGenerator>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNReadOnlyCollectionBuilderClass<T> = interface(DNObjectClass)
  ['{6A7A07A1-8D23-53E8-878E-7D07840FD322}']
  { constructors } 

    {class} function init: DNReadOnlyCollectionBuilder<T>; overload;
    {class} function init(capacity: Int32): DNReadOnlyCollectionBuilder<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNReadOnlyCollectionBuilder<T>; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1')]
  DNReadOnlyCollectionBuilder<T> = interface(DDNC.System.Private.CoreLib.DNIList<T>)
  ['{0785D642-D509-3E23-A4F1-2264ED959E9F}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    function ToArray: TArray<T>;
    function ToReadOnlyCollection: DDNC.System.Private.CoreLib.DNReadOnlyCollection<T>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyCollectionBuilder<T> = class(TDNGenericImport<DNReadOnlyCollectionBuilderClass<T>, DNReadOnlyCollectionBuilder<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuleCacheClass<T> = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A9BB5A90-73BE-56B1-A086-3E971BA5D2CA}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.RuleCache`1')]
  DNRuleCache<T> = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7BA14E68-5176-3F1B-A420-1176B5E9B3B8}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNRuleCache<T> = class(TDNGenericImport<DNRuleCacheClass<T>, DNRuleCache<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeOpsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D74916F6-2C80-5301-B412-EC126FF064AF}']
  { static methods } 

    {class} function ExpandoTryGetValue(expando: DNExpandoObject; indexClass: DDNC.System.Private.CoreLib.DNObject; index: Int32; name: string; ignoreCase: Boolean; out value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    {class} function ExpandoTrySetValue(expando: DNExpandoObject; indexClass: DDNC.System.Private.CoreLib.DNObject; index: Int32; value: DDNC.System.Private.CoreLib.DNObject; name: string; ignoreCase: Boolean): DDNC.System.Private.CoreLib.DNObject;
    {class} function ExpandoTryDeleteValue(expando: DNExpandoObject; indexClass: DDNC.System.Private.CoreLib.DNObject; index: Int32; name: string; ignoreCase: Boolean): Boolean;
    {class} function ExpandoCheckVersion(expando: DNExpandoObject; version: DDNC.System.Private.CoreLib.DNObject): Boolean;
    {class} procedure ExpandoPromoteClass(expando: DNExpandoObject; oldClass: DDNC.System.Private.CoreLib.DNObject; newClass: DDNC.System.Private.CoreLib.DNObject);
    {class} function Quote(expression: DNExpression; hoistedLocals: DDNC.System.Private.CoreLib.DNObject; locals: TArray<DDNC.System.Private.CoreLib.DNObject>): DNExpression;
    {class} function MergeRuntimeVariables(first: DNIRuntimeVariables; second: DNIRuntimeVariables; indexes: TArray<Int32>): DNIRuntimeVariables;
    {class} function CreateRuntimeVariables(data: TArray<DDNC.System.Private.CoreLib.DNObject>; indexes: TArray<Int64>): DNIRuntimeVariables; overload;
    {class} function CreateRuntimeVariables: DNIRuntimeVariables; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeOps')]
  DNRuntimeOps = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7C556731-A547-3742-A202-537466B016B9}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNRuntimeOps = class(TDNGenericImport<DNRuntimeOpsClass, DNRuntimeOps>) end;


implementation


initialization
  InternalTryLoadAssemblyModule('System.Linq.Expressions, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
